/*
 * Payment webhooks (deprecated)
 * The payment webhooks are deprecated. Use the [accounting webhooks](https://docs.adyen.com/api-explorer/transfer-webhooks/latest/overview) instead.  Adyen sends webhooks to inform your system about the creation of payment resources and money movements in your platform.  You can use these webhooks to build your implementation. For example, you can use this information to update balances in your own dashboards or to keep track of incoming funds.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Amount;
import org.openapitools.client.model.MerchantData;
import org.openapitools.client.model.NotificationModificationData;
import org.openapitools.client.model.PlatformPayment;
import org.openapitools.client.model.RelayedAuthorisationData;
import org.openapitools.client.model.ResourceReference;
import org.openapitools.client.model.TransactionRulesResult;
import org.openapitools.client.model.ValidationResult;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PaymentNotificationData
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:15:26.984580-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PaymentNotificationData {
  public static final String SERIALIZED_NAME_ACCOUNT_HOLDER = "accountHolder";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_HOLDER)
  private ResourceReference accountHolder;

  public static final String SERIALIZED_NAME_AMOUNT = "amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  private Amount amount;

  public static final String SERIALIZED_NAME_AUTH_CODE = "authCode";
  @SerializedName(SERIALIZED_NAME_AUTH_CODE)
  private String authCode;

  public static final String SERIALIZED_NAME_BALANCE_ACCOUNT = "balanceAccount";
  @SerializedName(SERIALIZED_NAME_BALANCE_ACCOUNT)
  private ResourceReference balanceAccount;

  public static final String SERIALIZED_NAME_BALANCE_PLATFORM = "balancePlatform";
  @SerializedName(SERIALIZED_NAME_BALANCE_PLATFORM)
  private String balancePlatform;

  public static final String SERIALIZED_NAME_CREATION_DATE = "creationDate";
  @SerializedName(SERIALIZED_NAME_CREATION_DATE)
  private OffsetDateTime creationDate;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_MERCHANT_DATA = "merchantData";
  @SerializedName(SERIALIZED_NAME_MERCHANT_DATA)
  private MerchantData merchantData;

  public static final String SERIALIZED_NAME_MODIFICATION = "modification";
  @SerializedName(SERIALIZED_NAME_MODIFICATION)
  private NotificationModificationData modification;

  public static final String SERIALIZED_NAME_ORIGINAL_AMOUNT = "originalAmount";
  @SerializedName(SERIALIZED_NAME_ORIGINAL_AMOUNT)
  private Amount originalAmount;

  public static final String SERIALIZED_NAME_PAYMENT_INSTRUMENT = "paymentInstrument";
  @SerializedName(SERIALIZED_NAME_PAYMENT_INSTRUMENT)
  private ResourceReference paymentInstrument;

  public static final String SERIALIZED_NAME_PLATFORM_PAYMENT = "platformPayment";
  @SerializedName(SERIALIZED_NAME_PLATFORM_PAYMENT)
  private PlatformPayment platformPayment;

  /**
   * Contains information about how the payment was processed. Possible values: **atmWithdraw**, **balanceInquiry**, **ecommerce**, **moto**, **pos**, **purchaseWithCashback**, **recurring**, **token**, **unknown**.
   */
  @JsonAdapter(ProcessingTypeEnum.Adapter.class)
  public enum ProcessingTypeEnum {
    ATM_WITHDRAW("atmWithdraw"),
    
    BALANCE_INQUIRY("balanceInquiry"),
    
    ECOMMERCE("ecommerce"),
    
    MOTO("moto"),
    
    POS("pos"),
    
    PURCHASE_WITH_CASHBACK("purchaseWithCashback"),
    
    RECURRING("recurring"),
    
    TOKEN("token"),
    
    UNKNOWN("unknown");

    private String value;

    ProcessingTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ProcessingTypeEnum fromValue(String value) {
      for (ProcessingTypeEnum b : ProcessingTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ProcessingTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ProcessingTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ProcessingTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ProcessingTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ProcessingTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PROCESSING_TYPE = "processingType";
  @SerializedName(SERIALIZED_NAME_PROCESSING_TYPE)
  private ProcessingTypeEnum processingType;

  public static final String SERIALIZED_NAME_REFERENCE = "reference";
  @SerializedName(SERIALIZED_NAME_REFERENCE)
  private String reference;

  public static final String SERIALIZED_NAME_REFERENCE_FOR_BENEFICIARY = "referenceForBeneficiary";
  @SerializedName(SERIALIZED_NAME_REFERENCE_FOR_BENEFICIARY)
  private String referenceForBeneficiary;

  public static final String SERIALIZED_NAME_RELAYED_AUTHORISATION_DATA = "relayedAuthorisationData";
  @SerializedName(SERIALIZED_NAME_RELAYED_AUTHORISATION_DATA)
  private RelayedAuthorisationData relayedAuthorisationData;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_TRANSACTION_RULES_RESULT = "transactionRulesResult";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_RULES_RESULT)
  private TransactionRulesResult transactionRulesResult;

  public static final String SERIALIZED_NAME_VALIDATION_RESULT = "validationResult";
  @SerializedName(SERIALIZED_NAME_VALIDATION_RESULT)
  private List<ValidationResult> validationResult = new ArrayList<>();

  public PaymentNotificationData() {
  }

  public PaymentNotificationData accountHolder(ResourceReference accountHolder) {
    this.accountHolder = accountHolder;
    return this;
  }

  /**
   * Contains information about the account holder.
   * @return accountHolder
   */
  @javax.annotation.Nullable
  public ResourceReference getAccountHolder() {
    return accountHolder;
  }

  public void setAccountHolder(ResourceReference accountHolder) {
    this.accountHolder = accountHolder;
  }


  public PaymentNotificationData amount(Amount amount) {
    this.amount = amount;
    return this;
  }

  /**
   * The amount converted to the balance account&#39;s currency, in case the original transaction currency is different.  * A _positive_ value means the amount is added to the balance account.   * A _negative_ value means the amount is deducted from the balance account. 
   * @return amount
   */
  @javax.annotation.Nullable
  public Amount getAmount() {
    return amount;
  }

  public void setAmount(Amount amount) {
    this.amount = amount;
  }


  public PaymentNotificationData authCode(String authCode) {
    this.authCode = authCode;
    return this;
  }

  /**
   * The authorisation code for the payment.
   * @return authCode
   */
  @javax.annotation.Nullable
  public String getAuthCode() {
    return authCode;
  }

  public void setAuthCode(String authCode) {
    this.authCode = authCode;
  }


  public PaymentNotificationData balanceAccount(ResourceReference balanceAccount) {
    this.balanceAccount = balanceAccount;
    return this;
  }

  /**
   * Contains information about the balance account.
   * @return balanceAccount
   */
  @javax.annotation.Nullable
  public ResourceReference getBalanceAccount() {
    return balanceAccount;
  }

  public void setBalanceAccount(ResourceReference balanceAccount) {
    this.balanceAccount = balanceAccount;
  }


  public PaymentNotificationData balancePlatform(String balancePlatform) {
    this.balancePlatform = balancePlatform;
    return this;
  }

  /**
   * The unique identifier of the balance platform.
   * @return balancePlatform
   */
  @javax.annotation.Nullable
  public String getBalancePlatform() {
    return balancePlatform;
  }

  public void setBalancePlatform(String balancePlatform) {
    this.balancePlatform = balancePlatform;
  }


  public PaymentNotificationData creationDate(OffsetDateTime creationDate) {
    this.creationDate = creationDate;
    return this;
  }

  /**
   * The date and time when the event was triggered, in ISO 8601 extended format. For example, **2020-12-18T10:15:30+01:00**.
   * @return creationDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreationDate() {
    return creationDate;
  }

  public void setCreationDate(OffsetDateTime creationDate) {
    this.creationDate = creationDate;
  }


  public PaymentNotificationData description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Your description for the transfer. If you send a description longer than 140 characters, the text is truncated.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public PaymentNotificationData id(String id) {
    this.id = id;
    return this;
  }

  /**
   * The ID of the resource.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public PaymentNotificationData merchantData(MerchantData merchantData) {
    this.merchantData = merchantData;
    return this;
  }

  /**
   * Contains information about the merchant that processed the payment. This object is only included for payment authorisation requests and captures.
   * @return merchantData
   */
  @javax.annotation.Nullable
  public MerchantData getMerchantData() {
    return merchantData;
  }

  public void setMerchantData(MerchantData merchantData) {
    this.merchantData = merchantData;
  }


  public PaymentNotificationData modification(NotificationModificationData modification) {
    this.modification = modification;
    return this;
  }

  /**
   * Contains the amount and type of modification that triggered the notification. For example, this object contains the amount of a partial cancellation or partial expired authorisation.
   * @return modification
   */
  @javax.annotation.Nullable
  public NotificationModificationData getModification() {
    return modification;
  }

  public void setModification(NotificationModificationData modification) {
    this.modification = modification;
  }


  public PaymentNotificationData originalAmount(Amount originalAmount) {
    this.originalAmount = originalAmount;
    return this;
  }

  /**
   * The amount in the original currency of the transaction.  * A _positive_ value means the amount is added to the balance account.   * A _negative_ value means the amount is deducted from the balance account. 
   * @return originalAmount
   */
  @javax.annotation.Nullable
  public Amount getOriginalAmount() {
    return originalAmount;
  }

  public void setOriginalAmount(Amount originalAmount) {
    this.originalAmount = originalAmount;
  }


  public PaymentNotificationData paymentInstrument(ResourceReference paymentInstrument) {
    this.paymentInstrument = paymentInstrument;
    return this;
  }

  /**
   * Contains information about the payment instrument.
   * @return paymentInstrument
   */
  @javax.annotation.Nullable
  public ResourceReference getPaymentInstrument() {
    return paymentInstrument;
  }

  public void setPaymentInstrument(ResourceReference paymentInstrument) {
    this.paymentInstrument = paymentInstrument;
  }


  public PaymentNotificationData platformPayment(PlatformPayment platformPayment) {
    this.platformPayment = platformPayment;
    return this;
  }

  /**
   * Contains information about the related platform payment.
   * @return platformPayment
   */
  @javax.annotation.Nullable
  public PlatformPayment getPlatformPayment() {
    return platformPayment;
  }

  public void setPlatformPayment(PlatformPayment platformPayment) {
    this.platformPayment = platformPayment;
  }


  public PaymentNotificationData processingType(ProcessingTypeEnum processingType) {
    this.processingType = processingType;
    return this;
  }

  /**
   * Contains information about how the payment was processed. Possible values: **atmWithdraw**, **balanceInquiry**, **ecommerce**, **moto**, **pos**, **purchaseWithCashback**, **recurring**, **token**, **unknown**.
   * @return processingType
   */
  @javax.annotation.Nullable
  public ProcessingTypeEnum getProcessingType() {
    return processingType;
  }

  public void setProcessingType(ProcessingTypeEnum processingType) {
    this.processingType = processingType;
  }


  public PaymentNotificationData reference(String reference) {
    this.reference = reference;
    return this;
  }

  /**
   * The [&#x60;reference&#x60;](https://docs.adyen.com/api-explorer/#/transfers/latest/post/transfers__reqParam_reference) from the &#x60;/transfers&#x60; request. If you haven&#39;t provided any, Adyen generates a unique reference.
   * @return reference
   */
  @javax.annotation.Nullable
  public String getReference() {
    return reference;
  }

  public void setReference(String reference) {
    this.reference = reference;
  }


  public PaymentNotificationData referenceForBeneficiary(String referenceForBeneficiary) {
    this.referenceForBeneficiary = referenceForBeneficiary;
    return this;
  }

  /**
   * The reference sent to or received from the counterparty.  * For outgoing funds, this is the [&#x60;referenceForBeneficiary&#x60;](https://docs.adyen.com/api-explorer/#/transfers/latest/post/transfers__resParam_referenceForBeneficiary) from the  [&#x60;/transfers&#x60;](https://docs.adyen.com/api-explorer/#/transfers/latest/post/transfers) request.   * For incoming funds, this is the reference from the sender.
   * @return referenceForBeneficiary
   */
  @javax.annotation.Nullable
  public String getReferenceForBeneficiary() {
    return referenceForBeneficiary;
  }

  public void setReferenceForBeneficiary(String referenceForBeneficiary) {
    this.referenceForBeneficiary = referenceForBeneficiary;
  }


  public PaymentNotificationData relayedAuthorisationData(RelayedAuthorisationData relayedAuthorisationData) {
    this.relayedAuthorisationData = relayedAuthorisationData;
    return this;
  }

  /**
   * If you&#39;re using [relayed authorisation](https://docs.adyen.com/issuing/processing-payments-for-cards#relayed-authorisation), this object contains information from the relayed authorisation response from your server.
   * @return relayedAuthorisationData
   */
  @javax.annotation.Nullable
  public RelayedAuthorisationData getRelayedAuthorisationData() {
    return relayedAuthorisationData;
  }

  public void setRelayedAuthorisationData(RelayedAuthorisationData relayedAuthorisationData) {
    this.relayedAuthorisationData = relayedAuthorisationData;
  }


  public PaymentNotificationData status(String status) {
    this.status = status;
    return this;
  }

  /**
   * The event status. The possible values depend on the &#x60;type&#x60;.  * **Authorised**, **Refused**, or **Error** for type &#x60;balancePlatform.payment.created&#x60;   * **Expired** or **Cancelled** or **AuthAdjustmentAuthorised** or **AuthAdjustmentRefused** for type &#x60;balancePlatform.payment.updated&#x60;  * **PendingIncomingTransfer** for type &#x60;balancePlatform.incomingTransfer.created&#x60;   * **Refunded** or **IncomingTransfer** for type &#x60;balancePlatform.incomingTransfer.updated&#x60;   * **Captured** or **OutgoingTransfer** for type &#x60;balancePlatform.outgoingTransfer.created&#x60;  * **TransferConfirmed**, **TransferSentOut**, or **TransferFailed** for type &#x60;balancePlatform.outgoingTransfer.updated&#x60;    
   * @return status
   */
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }


  public PaymentNotificationData transactionRulesResult(TransactionRulesResult transactionRulesResult) {
    this.transactionRulesResult = transactionRulesResult;
    return this;
  }

  /**
   * Contains results from the evaluation of [transaction rules](https://docs.adyen.com/issuing/transaction-rules).
   * @return transactionRulesResult
   */
  @javax.annotation.Nullable
  public TransactionRulesResult getTransactionRulesResult() {
    return transactionRulesResult;
  }

  public void setTransactionRulesResult(TransactionRulesResult transactionRulesResult) {
    this.transactionRulesResult = transactionRulesResult;
  }


  public PaymentNotificationData validationResult(List<ValidationResult> validationResult) {
    this.validationResult = validationResult;
    return this;
  }

  public PaymentNotificationData addValidationResultItem(ValidationResult validationResultItem) {
    if (this.validationResult == null) {
      this.validationResult = new ArrayList<>();
    }
    this.validationResult.add(validationResultItem);
    return this;
  }

  /**
   * Array of checks that Adyen performed to validate the payment and the result of each.
   * @return validationResult
   */
  @javax.annotation.Nullable
  public List<ValidationResult> getValidationResult() {
    return validationResult;
  }

  public void setValidationResult(List<ValidationResult> validationResult) {
    this.validationResult = validationResult;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PaymentNotificationData paymentNotificationData = (PaymentNotificationData) o;
    return Objects.equals(this.accountHolder, paymentNotificationData.accountHolder) &&
        Objects.equals(this.amount, paymentNotificationData.amount) &&
        Objects.equals(this.authCode, paymentNotificationData.authCode) &&
        Objects.equals(this.balanceAccount, paymentNotificationData.balanceAccount) &&
        Objects.equals(this.balancePlatform, paymentNotificationData.balancePlatform) &&
        Objects.equals(this.creationDate, paymentNotificationData.creationDate) &&
        Objects.equals(this.description, paymentNotificationData.description) &&
        Objects.equals(this.id, paymentNotificationData.id) &&
        Objects.equals(this.merchantData, paymentNotificationData.merchantData) &&
        Objects.equals(this.modification, paymentNotificationData.modification) &&
        Objects.equals(this.originalAmount, paymentNotificationData.originalAmount) &&
        Objects.equals(this.paymentInstrument, paymentNotificationData.paymentInstrument) &&
        Objects.equals(this.platformPayment, paymentNotificationData.platformPayment) &&
        Objects.equals(this.processingType, paymentNotificationData.processingType) &&
        Objects.equals(this.reference, paymentNotificationData.reference) &&
        Objects.equals(this.referenceForBeneficiary, paymentNotificationData.referenceForBeneficiary) &&
        Objects.equals(this.relayedAuthorisationData, paymentNotificationData.relayedAuthorisationData) &&
        Objects.equals(this.status, paymentNotificationData.status) &&
        Objects.equals(this.transactionRulesResult, paymentNotificationData.transactionRulesResult) &&
        Objects.equals(this.validationResult, paymentNotificationData.validationResult);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountHolder, amount, authCode, balanceAccount, balancePlatform, creationDate, description, id, merchantData, modification, originalAmount, paymentInstrument, platformPayment, processingType, reference, referenceForBeneficiary, relayedAuthorisationData, status, transactionRulesResult, validationResult);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PaymentNotificationData {\n");
    sb.append("    accountHolder: ").append(toIndentedString(accountHolder)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    authCode: ").append(toIndentedString(authCode)).append("\n");
    sb.append("    balanceAccount: ").append(toIndentedString(balanceAccount)).append("\n");
    sb.append("    balancePlatform: ").append(toIndentedString(balancePlatform)).append("\n");
    sb.append("    creationDate: ").append(toIndentedString(creationDate)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    merchantData: ").append(toIndentedString(merchantData)).append("\n");
    sb.append("    modification: ").append(toIndentedString(modification)).append("\n");
    sb.append("    originalAmount: ").append(toIndentedString(originalAmount)).append("\n");
    sb.append("    paymentInstrument: ").append(toIndentedString(paymentInstrument)).append("\n");
    sb.append("    platformPayment: ").append(toIndentedString(platformPayment)).append("\n");
    sb.append("    processingType: ").append(toIndentedString(processingType)).append("\n");
    sb.append("    reference: ").append(toIndentedString(reference)).append("\n");
    sb.append("    referenceForBeneficiary: ").append(toIndentedString(referenceForBeneficiary)).append("\n");
    sb.append("    relayedAuthorisationData: ").append(toIndentedString(relayedAuthorisationData)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    transactionRulesResult: ").append(toIndentedString(transactionRulesResult)).append("\n");
    sb.append("    validationResult: ").append(toIndentedString(validationResult)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accountHolder");
    openapiFields.add("amount");
    openapiFields.add("authCode");
    openapiFields.add("balanceAccount");
    openapiFields.add("balancePlatform");
    openapiFields.add("creationDate");
    openapiFields.add("description");
    openapiFields.add("id");
    openapiFields.add("merchantData");
    openapiFields.add("modification");
    openapiFields.add("originalAmount");
    openapiFields.add("paymentInstrument");
    openapiFields.add("platformPayment");
    openapiFields.add("processingType");
    openapiFields.add("reference");
    openapiFields.add("referenceForBeneficiary");
    openapiFields.add("relayedAuthorisationData");
    openapiFields.add("status");
    openapiFields.add("transactionRulesResult");
    openapiFields.add("validationResult");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PaymentNotificationData
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PaymentNotificationData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PaymentNotificationData is not found in the empty JSON string", PaymentNotificationData.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PaymentNotificationData.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PaymentNotificationData` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `accountHolder`
      if (jsonObj.get("accountHolder") != null && !jsonObj.get("accountHolder").isJsonNull()) {
        ResourceReference.validateJsonElement(jsonObj.get("accountHolder"));
      }
      // validate the optional field `amount`
      if (jsonObj.get("amount") != null && !jsonObj.get("amount").isJsonNull()) {
        Amount.validateJsonElement(jsonObj.get("amount"));
      }
      if ((jsonObj.get("authCode") != null && !jsonObj.get("authCode").isJsonNull()) && !jsonObj.get("authCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `authCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("authCode").toString()));
      }
      // validate the optional field `balanceAccount`
      if (jsonObj.get("balanceAccount") != null && !jsonObj.get("balanceAccount").isJsonNull()) {
        ResourceReference.validateJsonElement(jsonObj.get("balanceAccount"));
      }
      if ((jsonObj.get("balancePlatform") != null && !jsonObj.get("balancePlatform").isJsonNull()) && !jsonObj.get("balancePlatform").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `balancePlatform` to be a primitive type in the JSON string but got `%s`", jsonObj.get("balancePlatform").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // validate the optional field `merchantData`
      if (jsonObj.get("merchantData") != null && !jsonObj.get("merchantData").isJsonNull()) {
        MerchantData.validateJsonElement(jsonObj.get("merchantData"));
      }
      // validate the optional field `modification`
      if (jsonObj.get("modification") != null && !jsonObj.get("modification").isJsonNull()) {
        NotificationModificationData.validateJsonElement(jsonObj.get("modification"));
      }
      // validate the optional field `originalAmount`
      if (jsonObj.get("originalAmount") != null && !jsonObj.get("originalAmount").isJsonNull()) {
        Amount.validateJsonElement(jsonObj.get("originalAmount"));
      }
      // validate the optional field `paymentInstrument`
      if (jsonObj.get("paymentInstrument") != null && !jsonObj.get("paymentInstrument").isJsonNull()) {
        ResourceReference.validateJsonElement(jsonObj.get("paymentInstrument"));
      }
      // validate the optional field `platformPayment`
      if (jsonObj.get("platformPayment") != null && !jsonObj.get("platformPayment").isJsonNull()) {
        PlatformPayment.validateJsonElement(jsonObj.get("platformPayment"));
      }
      if ((jsonObj.get("processingType") != null && !jsonObj.get("processingType").isJsonNull()) && !jsonObj.get("processingType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `processingType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("processingType").toString()));
      }
      // validate the optional field `processingType`
      if (jsonObj.get("processingType") != null && !jsonObj.get("processingType").isJsonNull()) {
        ProcessingTypeEnum.validateJsonElement(jsonObj.get("processingType"));
      }
      if ((jsonObj.get("reference") != null && !jsonObj.get("reference").isJsonNull()) && !jsonObj.get("reference").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reference` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reference").toString()));
      }
      if ((jsonObj.get("referenceForBeneficiary") != null && !jsonObj.get("referenceForBeneficiary").isJsonNull()) && !jsonObj.get("referenceForBeneficiary").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `referenceForBeneficiary` to be a primitive type in the JSON string but got `%s`", jsonObj.get("referenceForBeneficiary").toString()));
      }
      // validate the optional field `relayedAuthorisationData`
      if (jsonObj.get("relayedAuthorisationData") != null && !jsonObj.get("relayedAuthorisationData").isJsonNull()) {
        RelayedAuthorisationData.validateJsonElement(jsonObj.get("relayedAuthorisationData"));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the optional field `transactionRulesResult`
      if (jsonObj.get("transactionRulesResult") != null && !jsonObj.get("transactionRulesResult").isJsonNull()) {
        TransactionRulesResult.validateJsonElement(jsonObj.get("transactionRulesResult"));
      }
      if (jsonObj.get("validationResult") != null && !jsonObj.get("validationResult").isJsonNull()) {
        JsonArray jsonArrayvalidationResult = jsonObj.getAsJsonArray("validationResult");
        if (jsonArrayvalidationResult != null) {
          // ensure the json data is an array
          if (!jsonObj.get("validationResult").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `validationResult` to be an array in the JSON string but got `%s`", jsonObj.get("validationResult").toString()));
          }

          // validate the optional field `validationResult` (array)
          for (int i = 0; i < jsonArrayvalidationResult.size(); i++) {
            ValidationResult.validateJsonElement(jsonArrayvalidationResult.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PaymentNotificationData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PaymentNotificationData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PaymentNotificationData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PaymentNotificationData.class));

       return (TypeAdapter<T>) new TypeAdapter<PaymentNotificationData>() {
           @Override
           public void write(JsonWriter out, PaymentNotificationData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PaymentNotificationData read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PaymentNotificationData given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PaymentNotificationData
   * @throws IOException if the JSON string is invalid with respect to PaymentNotificationData
   */
  public static PaymentNotificationData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PaymentNotificationData.class);
  }

  /**
   * Convert an instance of PaymentNotificationData to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

