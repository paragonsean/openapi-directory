/**
 * Payment webhooks (deprecated)
 * The payment webhooks are deprecated. Use the [accounting webhooks](https://docs.adyen.com/api-explorer/transfer-webhooks/latest/overview) instead.  Adyen sends webhooks to inform your system about the creation of payment resources and money movements in your platform.  You can use these webhooks to build your implementation. For example, you can use this information to update balances in your own dashboards or to keep track of incoming funds.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINotificationModificationData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINotificationModificationData::OAINotificationModificationData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINotificationModificationData::OAINotificationModificationData() {
    this->initializeModel();
}

OAINotificationModificationData::~OAINotificationModificationData() {}

void OAINotificationModificationData::initializeModel() {

    m_amount_isSet = false;
    m_amount_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAINotificationModificationData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINotificationModificationData::fromJsonObject(QJsonObject json) {

    m_amount_isValid = ::OpenAPI::fromJsonValue(m_amount, json[QString("amount")]);
    m_amount_isSet = !json[QString("amount")].isNull() && m_amount_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAINotificationModificationData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINotificationModificationData::asJsonObject() const {
    QJsonObject obj;
    if (m_amount.isSet()) {
        obj.insert(QString("amount"), ::OpenAPI::toJsonValue(m_amount));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

OAIAmount OAINotificationModificationData::getAmount() const {
    return m_amount;
}
void OAINotificationModificationData::setAmount(const OAIAmount &amount) {
    m_amount = amount;
    m_amount_isSet = true;
}

bool OAINotificationModificationData::is_amount_Set() const{
    return m_amount_isSet;
}

bool OAINotificationModificationData::is_amount_Valid() const{
    return m_amount_isValid;
}

QString OAINotificationModificationData::getType() const {
    return m_type;
}
void OAINotificationModificationData::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAINotificationModificationData::is_type_Set() const{
    return m_type_isSet;
}

bool OAINotificationModificationData::is_type_Valid() const{
    return m_type_isValid;
}

bool OAINotificationModificationData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_amount.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINotificationModificationData::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
