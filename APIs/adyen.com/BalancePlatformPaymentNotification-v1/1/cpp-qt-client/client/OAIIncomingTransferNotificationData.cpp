/**
 * Payment webhooks (deprecated)
 * The payment webhooks are deprecated. Use the [accounting webhooks](https://docs.adyen.com/api-explorer/transfer-webhooks/latest/overview) instead.  Adyen sends webhooks to inform your system about the creation of payment resources and money movements in your platform.  You can use these webhooks to build your implementation. For example, you can use this information to update balances in your own dashboards or to keep track of incoming funds.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIncomingTransferNotificationData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIncomingTransferNotificationData::OAIIncomingTransferNotificationData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIncomingTransferNotificationData::OAIIncomingTransferNotificationData() {
    this->initializeModel();
}

OAIIncomingTransferNotificationData::~OAIIncomingTransferNotificationData() {}

void OAIIncomingTransferNotificationData::initializeModel() {

    m_account_holder_isSet = false;
    m_account_holder_isValid = false;

    m_amount_isSet = false;
    m_amount_isValid = false;

    m_balance_account_isSet = false;
    m_balance_account_isValid = false;

    m_balance_platform_isSet = false;
    m_balance_platform_isValid = false;

    m_counterparty_isSet = false;
    m_counterparty_isValid = false;

    m_creation_date_isSet = false;
    m_creation_date_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_modification_isSet = false;
    m_modification_isValid = false;

    m_original_amount_isSet = false;
    m_original_amount_isValid = false;

    m_payment_id_isSet = false;
    m_payment_id_isValid = false;

    m_payment_instrument_isSet = false;
    m_payment_instrument_isValid = false;

    m_platform_payment_isSet = false;
    m_platform_payment_isValid = false;

    m_reference_isSet = false;
    m_reference_isValid = false;

    m_reference_for_beneficiary_isSet = false;
    m_reference_for_beneficiary_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_value_date_isSet = false;
    m_value_date_isValid = false;
}

void OAIIncomingTransferNotificationData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIncomingTransferNotificationData::fromJsonObject(QJsonObject json) {

    m_account_holder_isValid = ::OpenAPI::fromJsonValue(m_account_holder, json[QString("accountHolder")]);
    m_account_holder_isSet = !json[QString("accountHolder")].isNull() && m_account_holder_isValid;

    m_amount_isValid = ::OpenAPI::fromJsonValue(m_amount, json[QString("amount")]);
    m_amount_isSet = !json[QString("amount")].isNull() && m_amount_isValid;

    m_balance_account_isValid = ::OpenAPI::fromJsonValue(m_balance_account, json[QString("balanceAccount")]);
    m_balance_account_isSet = !json[QString("balanceAccount")].isNull() && m_balance_account_isValid;

    m_balance_platform_isValid = ::OpenAPI::fromJsonValue(m_balance_platform, json[QString("balancePlatform")]);
    m_balance_platform_isSet = !json[QString("balancePlatform")].isNull() && m_balance_platform_isValid;

    m_counterparty_isValid = ::OpenAPI::fromJsonValue(m_counterparty, json[QString("counterparty")]);
    m_counterparty_isSet = !json[QString("counterparty")].isNull() && m_counterparty_isValid;

    m_creation_date_isValid = ::OpenAPI::fromJsonValue(m_creation_date, json[QString("creationDate")]);
    m_creation_date_isSet = !json[QString("creationDate")].isNull() && m_creation_date_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_modification_isValid = ::OpenAPI::fromJsonValue(m_modification, json[QString("modification")]);
    m_modification_isSet = !json[QString("modification")].isNull() && m_modification_isValid;

    m_original_amount_isValid = ::OpenAPI::fromJsonValue(m_original_amount, json[QString("originalAmount")]);
    m_original_amount_isSet = !json[QString("originalAmount")].isNull() && m_original_amount_isValid;

    m_payment_id_isValid = ::OpenAPI::fromJsonValue(m_payment_id, json[QString("paymentId")]);
    m_payment_id_isSet = !json[QString("paymentId")].isNull() && m_payment_id_isValid;

    m_payment_instrument_isValid = ::OpenAPI::fromJsonValue(m_payment_instrument, json[QString("paymentInstrument")]);
    m_payment_instrument_isSet = !json[QString("paymentInstrument")].isNull() && m_payment_instrument_isValid;

    m_platform_payment_isValid = ::OpenAPI::fromJsonValue(m_platform_payment, json[QString("platformPayment")]);
    m_platform_payment_isSet = !json[QString("platformPayment")].isNull() && m_platform_payment_isValid;

    m_reference_isValid = ::OpenAPI::fromJsonValue(m_reference, json[QString("reference")]);
    m_reference_isSet = !json[QString("reference")].isNull() && m_reference_isValid;

    m_reference_for_beneficiary_isValid = ::OpenAPI::fromJsonValue(m_reference_for_beneficiary, json[QString("referenceForBeneficiary")]);
    m_reference_for_beneficiary_isSet = !json[QString("referenceForBeneficiary")].isNull() && m_reference_for_beneficiary_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_value_date_isValid = ::OpenAPI::fromJsonValue(m_value_date, json[QString("valueDate")]);
    m_value_date_isSet = !json[QString("valueDate")].isNull() && m_value_date_isValid;
}

QString OAIIncomingTransferNotificationData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIncomingTransferNotificationData::asJsonObject() const {
    QJsonObject obj;
    if (m_account_holder.isSet()) {
        obj.insert(QString("accountHolder"), ::OpenAPI::toJsonValue(m_account_holder));
    }
    if (m_amount.isSet()) {
        obj.insert(QString("amount"), ::OpenAPI::toJsonValue(m_amount));
    }
    if (m_balance_account.isSet()) {
        obj.insert(QString("balanceAccount"), ::OpenAPI::toJsonValue(m_balance_account));
    }
    if (m_balance_platform_isSet) {
        obj.insert(QString("balancePlatform"), ::OpenAPI::toJsonValue(m_balance_platform));
    }
    if (m_counterparty.isSet()) {
        obj.insert(QString("counterparty"), ::OpenAPI::toJsonValue(m_counterparty));
    }
    if (m_creation_date_isSet) {
        obj.insert(QString("creationDate"), ::OpenAPI::toJsonValue(m_creation_date));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_modification.isSet()) {
        obj.insert(QString("modification"), ::OpenAPI::toJsonValue(m_modification));
    }
    if (m_original_amount.isSet()) {
        obj.insert(QString("originalAmount"), ::OpenAPI::toJsonValue(m_original_amount));
    }
    if (m_payment_id_isSet) {
        obj.insert(QString("paymentId"), ::OpenAPI::toJsonValue(m_payment_id));
    }
    if (m_payment_instrument.isSet()) {
        obj.insert(QString("paymentInstrument"), ::OpenAPI::toJsonValue(m_payment_instrument));
    }
    if (m_platform_payment.isSet()) {
        obj.insert(QString("platformPayment"), ::OpenAPI::toJsonValue(m_platform_payment));
    }
    if (m_reference_isSet) {
        obj.insert(QString("reference"), ::OpenAPI::toJsonValue(m_reference));
    }
    if (m_reference_for_beneficiary_isSet) {
        obj.insert(QString("referenceForBeneficiary"), ::OpenAPI::toJsonValue(m_reference_for_beneficiary));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_value_date_isSet) {
        obj.insert(QString("valueDate"), ::OpenAPI::toJsonValue(m_value_date));
    }
    return obj;
}

OAIResourceReference OAIIncomingTransferNotificationData::getAccountHolder() const {
    return m_account_holder;
}
void OAIIncomingTransferNotificationData::setAccountHolder(const OAIResourceReference &account_holder) {
    m_account_holder = account_holder;
    m_account_holder_isSet = true;
}

bool OAIIncomingTransferNotificationData::is_account_holder_Set() const{
    return m_account_holder_isSet;
}

bool OAIIncomingTransferNotificationData::is_account_holder_Valid() const{
    return m_account_holder_isValid;
}

OAIAmount OAIIncomingTransferNotificationData::getAmount() const {
    return m_amount;
}
void OAIIncomingTransferNotificationData::setAmount(const OAIAmount &amount) {
    m_amount = amount;
    m_amount_isSet = true;
}

bool OAIIncomingTransferNotificationData::is_amount_Set() const{
    return m_amount_isSet;
}

bool OAIIncomingTransferNotificationData::is_amount_Valid() const{
    return m_amount_isValid;
}

OAIResourceReference OAIIncomingTransferNotificationData::getBalanceAccount() const {
    return m_balance_account;
}
void OAIIncomingTransferNotificationData::setBalanceAccount(const OAIResourceReference &balance_account) {
    m_balance_account = balance_account;
    m_balance_account_isSet = true;
}

bool OAIIncomingTransferNotificationData::is_balance_account_Set() const{
    return m_balance_account_isSet;
}

bool OAIIncomingTransferNotificationData::is_balance_account_Valid() const{
    return m_balance_account_isValid;
}

QString OAIIncomingTransferNotificationData::getBalancePlatform() const {
    return m_balance_platform;
}
void OAIIncomingTransferNotificationData::setBalancePlatform(const QString &balance_platform) {
    m_balance_platform = balance_platform;
    m_balance_platform_isSet = true;
}

bool OAIIncomingTransferNotificationData::is_balance_platform_Set() const{
    return m_balance_platform_isSet;
}

bool OAIIncomingTransferNotificationData::is_balance_platform_Valid() const{
    return m_balance_platform_isValid;
}

OAICounterparty OAIIncomingTransferNotificationData::getCounterparty() const {
    return m_counterparty;
}
void OAIIncomingTransferNotificationData::setCounterparty(const OAICounterparty &counterparty) {
    m_counterparty = counterparty;
    m_counterparty_isSet = true;
}

bool OAIIncomingTransferNotificationData::is_counterparty_Set() const{
    return m_counterparty_isSet;
}

bool OAIIncomingTransferNotificationData::is_counterparty_Valid() const{
    return m_counterparty_isValid;
}

QDateTime OAIIncomingTransferNotificationData::getCreationDate() const {
    return m_creation_date;
}
void OAIIncomingTransferNotificationData::setCreationDate(const QDateTime &creation_date) {
    m_creation_date = creation_date;
    m_creation_date_isSet = true;
}

bool OAIIncomingTransferNotificationData::is_creation_date_Set() const{
    return m_creation_date_isSet;
}

bool OAIIncomingTransferNotificationData::is_creation_date_Valid() const{
    return m_creation_date_isValid;
}

QString OAIIncomingTransferNotificationData::getDescription() const {
    return m_description;
}
void OAIIncomingTransferNotificationData::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIIncomingTransferNotificationData::is_description_Set() const{
    return m_description_isSet;
}

bool OAIIncomingTransferNotificationData::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIIncomingTransferNotificationData::getId() const {
    return m_id;
}
void OAIIncomingTransferNotificationData::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIIncomingTransferNotificationData::is_id_Set() const{
    return m_id_isSet;
}

bool OAIIncomingTransferNotificationData::is_id_Valid() const{
    return m_id_isValid;
}

OAINotificationModificationData OAIIncomingTransferNotificationData::getModification() const {
    return m_modification;
}
void OAIIncomingTransferNotificationData::setModification(const OAINotificationModificationData &modification) {
    m_modification = modification;
    m_modification_isSet = true;
}

bool OAIIncomingTransferNotificationData::is_modification_Set() const{
    return m_modification_isSet;
}

bool OAIIncomingTransferNotificationData::is_modification_Valid() const{
    return m_modification_isValid;
}

OAIAmount OAIIncomingTransferNotificationData::getOriginalAmount() const {
    return m_original_amount;
}
void OAIIncomingTransferNotificationData::setOriginalAmount(const OAIAmount &original_amount) {
    m_original_amount = original_amount;
    m_original_amount_isSet = true;
}

bool OAIIncomingTransferNotificationData::is_original_amount_Set() const{
    return m_original_amount_isSet;
}

bool OAIIncomingTransferNotificationData::is_original_amount_Valid() const{
    return m_original_amount_isValid;
}

QString OAIIncomingTransferNotificationData::getPaymentId() const {
    return m_payment_id;
}
void OAIIncomingTransferNotificationData::setPaymentId(const QString &payment_id) {
    m_payment_id = payment_id;
    m_payment_id_isSet = true;
}

bool OAIIncomingTransferNotificationData::is_payment_id_Set() const{
    return m_payment_id_isSet;
}

bool OAIIncomingTransferNotificationData::is_payment_id_Valid() const{
    return m_payment_id_isValid;
}

OAIResourceReference OAIIncomingTransferNotificationData::getPaymentInstrument() const {
    return m_payment_instrument;
}
void OAIIncomingTransferNotificationData::setPaymentInstrument(const OAIResourceReference &payment_instrument) {
    m_payment_instrument = payment_instrument;
    m_payment_instrument_isSet = true;
}

bool OAIIncomingTransferNotificationData::is_payment_instrument_Set() const{
    return m_payment_instrument_isSet;
}

bool OAIIncomingTransferNotificationData::is_payment_instrument_Valid() const{
    return m_payment_instrument_isValid;
}

OAIPlatformPayment OAIIncomingTransferNotificationData::getPlatformPayment() const {
    return m_platform_payment;
}
void OAIIncomingTransferNotificationData::setPlatformPayment(const OAIPlatformPayment &platform_payment) {
    m_platform_payment = platform_payment;
    m_platform_payment_isSet = true;
}

bool OAIIncomingTransferNotificationData::is_platform_payment_Set() const{
    return m_platform_payment_isSet;
}

bool OAIIncomingTransferNotificationData::is_platform_payment_Valid() const{
    return m_platform_payment_isValid;
}

QString OAIIncomingTransferNotificationData::getReference() const {
    return m_reference;
}
void OAIIncomingTransferNotificationData::setReference(const QString &reference) {
    m_reference = reference;
    m_reference_isSet = true;
}

bool OAIIncomingTransferNotificationData::is_reference_Set() const{
    return m_reference_isSet;
}

bool OAIIncomingTransferNotificationData::is_reference_Valid() const{
    return m_reference_isValid;
}

QString OAIIncomingTransferNotificationData::getReferenceForBeneficiary() const {
    return m_reference_for_beneficiary;
}
void OAIIncomingTransferNotificationData::setReferenceForBeneficiary(const QString &reference_for_beneficiary) {
    m_reference_for_beneficiary = reference_for_beneficiary;
    m_reference_for_beneficiary_isSet = true;
}

bool OAIIncomingTransferNotificationData::is_reference_for_beneficiary_Set() const{
    return m_reference_for_beneficiary_isSet;
}

bool OAIIncomingTransferNotificationData::is_reference_for_beneficiary_Valid() const{
    return m_reference_for_beneficiary_isValid;
}

QString OAIIncomingTransferNotificationData::getStatus() const {
    return m_status;
}
void OAIIncomingTransferNotificationData::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIIncomingTransferNotificationData::is_status_Set() const{
    return m_status_isSet;
}

bool OAIIncomingTransferNotificationData::is_status_Valid() const{
    return m_status_isValid;
}

QDateTime OAIIncomingTransferNotificationData::getValueDate() const {
    return m_value_date;
}
void OAIIncomingTransferNotificationData::setValueDate(const QDateTime &value_date) {
    m_value_date = value_date;
    m_value_date_isSet = true;
}

bool OAIIncomingTransferNotificationData::is_value_date_Set() const{
    return m_value_date_isSet;
}

bool OAIIncomingTransferNotificationData::is_value_date_Valid() const{
    return m_value_date_isValid;
}

bool OAIIncomingTransferNotificationData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_holder.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_amount.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_balance_account.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_balance_platform_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_counterparty.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_modification.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_original_amount.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_instrument.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_platform_payment.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reference_for_beneficiary_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_date_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIncomingTransferNotificationData::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
