/**
 * Payment webhooks (deprecated)
 * The payment webhooks are deprecated. Use the [accounting webhooks](https://docs.adyen.com/api-explorer/transfer-webhooks/latest/overview) instead.  Adyen sends webhooks to inform your system about the creation of payment resources and money movements in your platform.  You can use these webhooks to build your implementation. For example, you can use this information to update balances in your own dashboards or to keep track of incoming funds.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIFundMovementsApi_H
#define OAI_OAIFundMovementsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIBalancePlatformNotificationResponse.h"
#include "OAIIncomingTransferNotificationRequest.h"
#include "OAIOutgoingTransferNotificationRequest.h"

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIFundMovementsApi : public QObject {
    Q_OBJECT

public:
    OAIFundMovementsApi(const int timeOut = 0);
    ~OAIFundMovementsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_incoming_transfer_notification_request OAIIncomingTransferNotificationRequest [optional]
    */
    Q_DECL_DEPRECATED virtual void postBalancePlatform_incomingTransfer_created(const ::OpenAPI::OptionalParam<OAIIncomingTransferNotificationRequest> &oai_incoming_transfer_notification_request = ::OpenAPI::OptionalParam<OAIIncomingTransferNotificationRequest>());

    /**
    * @param[in]  oai_incoming_transfer_notification_request OAIIncomingTransferNotificationRequest [optional]
    */
    Q_DECL_DEPRECATED virtual void postBalancePlatform_incomingTransfer_updated(const ::OpenAPI::OptionalParam<OAIIncomingTransferNotificationRequest> &oai_incoming_transfer_notification_request = ::OpenAPI::OptionalParam<OAIIncomingTransferNotificationRequest>());

    /**
    * @param[in]  oai_outgoing_transfer_notification_request OAIOutgoingTransferNotificationRequest [optional]
    */
    Q_DECL_DEPRECATED virtual void postBalancePlatform_outgoingTransfer_created(const ::OpenAPI::OptionalParam<OAIOutgoingTransferNotificationRequest> &oai_outgoing_transfer_notification_request = ::OpenAPI::OptionalParam<OAIOutgoingTransferNotificationRequest>());

    /**
    * @param[in]  oai_outgoing_transfer_notification_request OAIOutgoingTransferNotificationRequest [optional]
    */
    Q_DECL_DEPRECATED virtual void postBalancePlatform_outgoingTransfer_updated(const ::OpenAPI::OptionalParam<OAIOutgoingTransferNotificationRequest> &oai_outgoing_transfer_notification_request = ::OpenAPI::OptionalParam<OAIOutgoingTransferNotificationRequest>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void postBalancePlatform_incomingTransfer_createdCallback(OAIHttpRequestWorker *worker);
    void postBalancePlatform_incomingTransfer_updatedCallback(OAIHttpRequestWorker *worker);
    void postBalancePlatform_outgoingTransfer_createdCallback(OAIHttpRequestWorker *worker);
    void postBalancePlatform_outgoingTransfer_updatedCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void postBalancePlatform_incomingTransfer_createdSignal(OAIBalancePlatformNotificationResponse summary);
    void postBalancePlatform_incomingTransfer_updatedSignal(OAIBalancePlatformNotificationResponse summary);
    void postBalancePlatform_outgoingTransfer_createdSignal(OAIBalancePlatformNotificationResponse summary);
    void postBalancePlatform_outgoingTransfer_updatedSignal(OAIBalancePlatformNotificationResponse summary);


    void postBalancePlatform_incomingTransfer_createdSignalFull(OAIHttpRequestWorker *worker, OAIBalancePlatformNotificationResponse summary);
    void postBalancePlatform_incomingTransfer_updatedSignalFull(OAIHttpRequestWorker *worker, OAIBalancePlatformNotificationResponse summary);
    void postBalancePlatform_outgoingTransfer_createdSignalFull(OAIHttpRequestWorker *worker, OAIBalancePlatformNotificationResponse summary);
    void postBalancePlatform_outgoingTransfer_updatedSignalFull(OAIHttpRequestWorker *worker, OAIBalancePlatformNotificationResponse summary);

    Q_DECL_DEPRECATED_X("Use postBalancePlatform_incomingTransfer_createdSignalError() instead")
    void postBalancePlatform_incomingTransfer_createdSignalE(OAIBalancePlatformNotificationResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postBalancePlatform_incomingTransfer_createdSignalError(OAIBalancePlatformNotificationResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postBalancePlatform_incomingTransfer_updatedSignalError() instead")
    void postBalancePlatform_incomingTransfer_updatedSignalE(OAIBalancePlatformNotificationResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postBalancePlatform_incomingTransfer_updatedSignalError(OAIBalancePlatformNotificationResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postBalancePlatform_outgoingTransfer_createdSignalError() instead")
    void postBalancePlatform_outgoingTransfer_createdSignalE(OAIBalancePlatformNotificationResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postBalancePlatform_outgoingTransfer_createdSignalError(OAIBalancePlatformNotificationResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postBalancePlatform_outgoingTransfer_updatedSignalError() instead")
    void postBalancePlatform_outgoingTransfer_updatedSignalE(OAIBalancePlatformNotificationResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postBalancePlatform_outgoingTransfer_updatedSignalError(OAIBalancePlatformNotificationResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use postBalancePlatform_incomingTransfer_createdSignalErrorFull() instead")
    void postBalancePlatform_incomingTransfer_createdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postBalancePlatform_incomingTransfer_createdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postBalancePlatform_incomingTransfer_updatedSignalErrorFull() instead")
    void postBalancePlatform_incomingTransfer_updatedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postBalancePlatform_incomingTransfer_updatedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postBalancePlatform_outgoingTransfer_createdSignalErrorFull() instead")
    void postBalancePlatform_outgoingTransfer_createdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postBalancePlatform_outgoingTransfer_createdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postBalancePlatform_outgoingTransfer_updatedSignalErrorFull() instead")
    void postBalancePlatform_outgoingTransfer_updatedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postBalancePlatform_outgoingTransfer_updatedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
