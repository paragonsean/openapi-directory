/**
 * Payment webhooks (deprecated)
 * The payment webhooks are deprecated. Use the [accounting webhooks](https://docs.adyen.com/api-explorer/transfer-webhooks/latest/overview) instead.  Adyen sends webhooks to inform your system about the creation of payment resources and money movements in your platform.  You can use these webhooks to build your implementation. For example, you can use this information to update balances in your own dashboards or to keep track of incoming funds.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMerchantData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMerchantData::OAIMerchantData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMerchantData::OAIMerchantData() {
    this->initializeModel();
}

OAIMerchantData::~OAIMerchantData() {}

void OAIMerchantData::initializeModel() {

    m_acquirer_id_isSet = false;
    m_acquirer_id_isValid = false;

    m_mcc_isSet = false;
    m_mcc_isValid = false;

    m_merchant_id_isSet = false;
    m_merchant_id_isValid = false;

    m_name_location_isSet = false;
    m_name_location_isValid = false;

    m_postal_code_isSet = false;
    m_postal_code_isValid = false;
}

void OAIMerchantData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMerchantData::fromJsonObject(QJsonObject json) {

    m_acquirer_id_isValid = ::OpenAPI::fromJsonValue(m_acquirer_id, json[QString("acquirerId")]);
    m_acquirer_id_isSet = !json[QString("acquirerId")].isNull() && m_acquirer_id_isValid;

    m_mcc_isValid = ::OpenAPI::fromJsonValue(m_mcc, json[QString("mcc")]);
    m_mcc_isSet = !json[QString("mcc")].isNull() && m_mcc_isValid;

    m_merchant_id_isValid = ::OpenAPI::fromJsonValue(m_merchant_id, json[QString("merchantId")]);
    m_merchant_id_isSet = !json[QString("merchantId")].isNull() && m_merchant_id_isValid;

    m_name_location_isValid = ::OpenAPI::fromJsonValue(m_name_location, json[QString("nameLocation")]);
    m_name_location_isSet = !json[QString("nameLocation")].isNull() && m_name_location_isValid;

    m_postal_code_isValid = ::OpenAPI::fromJsonValue(m_postal_code, json[QString("postalCode")]);
    m_postal_code_isSet = !json[QString("postalCode")].isNull() && m_postal_code_isValid;
}

QString OAIMerchantData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMerchantData::asJsonObject() const {
    QJsonObject obj;
    if (m_acquirer_id_isSet) {
        obj.insert(QString("acquirerId"), ::OpenAPI::toJsonValue(m_acquirer_id));
    }
    if (m_mcc_isSet) {
        obj.insert(QString("mcc"), ::OpenAPI::toJsonValue(m_mcc));
    }
    if (m_merchant_id_isSet) {
        obj.insert(QString("merchantId"), ::OpenAPI::toJsonValue(m_merchant_id));
    }
    if (m_name_location.isSet()) {
        obj.insert(QString("nameLocation"), ::OpenAPI::toJsonValue(m_name_location));
    }
    if (m_postal_code_isSet) {
        obj.insert(QString("postalCode"), ::OpenAPI::toJsonValue(m_postal_code));
    }
    return obj;
}

QString OAIMerchantData::getAcquirerId() const {
    return m_acquirer_id;
}
void OAIMerchantData::setAcquirerId(const QString &acquirer_id) {
    m_acquirer_id = acquirer_id;
    m_acquirer_id_isSet = true;
}

bool OAIMerchantData::is_acquirer_id_Set() const{
    return m_acquirer_id_isSet;
}

bool OAIMerchantData::is_acquirer_id_Valid() const{
    return m_acquirer_id_isValid;
}

QString OAIMerchantData::getMcc() const {
    return m_mcc;
}
void OAIMerchantData::setMcc(const QString &mcc) {
    m_mcc = mcc;
    m_mcc_isSet = true;
}

bool OAIMerchantData::is_mcc_Set() const{
    return m_mcc_isSet;
}

bool OAIMerchantData::is_mcc_Valid() const{
    return m_mcc_isValid;
}

QString OAIMerchantData::getMerchantId() const {
    return m_merchant_id;
}
void OAIMerchantData::setMerchantId(const QString &merchant_id) {
    m_merchant_id = merchant_id;
    m_merchant_id_isSet = true;
}

bool OAIMerchantData::is_merchant_id_Set() const{
    return m_merchant_id_isSet;
}

bool OAIMerchantData::is_merchant_id_Valid() const{
    return m_merchant_id_isValid;
}

OAINameLocation OAIMerchantData::getNameLocation() const {
    return m_name_location;
}
void OAIMerchantData::setNameLocation(const OAINameLocation &name_location) {
    m_name_location = name_location;
    m_name_location_isSet = true;
}

bool OAIMerchantData::is_name_location_Set() const{
    return m_name_location_isSet;
}

bool OAIMerchantData::is_name_location_Valid() const{
    return m_name_location_isValid;
}

QString OAIMerchantData::getPostalCode() const {
    return m_postal_code;
}
void OAIMerchantData::setPostalCode(const QString &postal_code) {
    m_postal_code = postal_code;
    m_postal_code_isSet = true;
}

bool OAIMerchantData::is_postal_code_Set() const{
    return m_postal_code_isSet;
}

bool OAIMerchantData::is_postal_code_Valid() const{
    return m_postal_code_isValid;
}

bool OAIMerchantData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_acquirer_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mcc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_merchant_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_location.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_postal_code_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMerchantData::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
