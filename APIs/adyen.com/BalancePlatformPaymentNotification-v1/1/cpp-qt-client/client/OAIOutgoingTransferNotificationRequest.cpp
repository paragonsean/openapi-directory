/**
 * Payment webhooks (deprecated)
 * The payment webhooks are deprecated. Use the [accounting webhooks](https://docs.adyen.com/api-explorer/transfer-webhooks/latest/overview) instead.  Adyen sends webhooks to inform your system about the creation of payment resources and money movements in your platform.  You can use these webhooks to build your implementation. For example, you can use this information to update balances in your own dashboards or to keep track of incoming funds.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOutgoingTransferNotificationRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOutgoingTransferNotificationRequest::OAIOutgoingTransferNotificationRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOutgoingTransferNotificationRequest::OAIOutgoingTransferNotificationRequest() {
    this->initializeModel();
}

OAIOutgoingTransferNotificationRequest::~OAIOutgoingTransferNotificationRequest() {}

void OAIOutgoingTransferNotificationRequest::initializeModel() {

    m_data_isSet = false;
    m_data_isValid = false;

    m_environment_isSet = false;
    m_environment_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIOutgoingTransferNotificationRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOutgoingTransferNotificationRequest::fromJsonObject(QJsonObject json) {

    m_data_isValid = ::OpenAPI::fromJsonValue(m_data, json[QString("data")]);
    m_data_isSet = !json[QString("data")].isNull() && m_data_isValid;

    m_environment_isValid = ::OpenAPI::fromJsonValue(m_environment, json[QString("environment")]);
    m_environment_isSet = !json[QString("environment")].isNull() && m_environment_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIOutgoingTransferNotificationRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOutgoingTransferNotificationRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_data.isSet()) {
        obj.insert(QString("data"), ::OpenAPI::toJsonValue(m_data));
    }
    if (m_environment_isSet) {
        obj.insert(QString("environment"), ::OpenAPI::toJsonValue(m_environment));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

OAIOutgoingTransferNotificationData OAIOutgoingTransferNotificationRequest::getData() const {
    return m_data;
}
void OAIOutgoingTransferNotificationRequest::setData(const OAIOutgoingTransferNotificationData &data) {
    m_data = data;
    m_data_isSet = true;
}

bool OAIOutgoingTransferNotificationRequest::is_data_Set() const{
    return m_data_isSet;
}

bool OAIOutgoingTransferNotificationRequest::is_data_Valid() const{
    return m_data_isValid;
}

QString OAIOutgoingTransferNotificationRequest::getEnvironment() const {
    return m_environment;
}
void OAIOutgoingTransferNotificationRequest::setEnvironment(const QString &environment) {
    m_environment = environment;
    m_environment_isSet = true;
}

bool OAIOutgoingTransferNotificationRequest::is_environment_Set() const{
    return m_environment_isSet;
}

bool OAIOutgoingTransferNotificationRequest::is_environment_Valid() const{
    return m_environment_isValid;
}

QString OAIOutgoingTransferNotificationRequest::getType() const {
    return m_type;
}
void OAIOutgoingTransferNotificationRequest::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIOutgoingTransferNotificationRequest::is_type_Set() const{
    return m_type_isSet;
}

bool OAIOutgoingTransferNotificationRequest::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIOutgoingTransferNotificationRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_environment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOutgoingTransferNotificationRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_data_isValid && m_environment_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
