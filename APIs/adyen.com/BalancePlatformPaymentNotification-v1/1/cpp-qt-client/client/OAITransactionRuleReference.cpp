/**
 * Payment webhooks (deprecated)
 * The payment webhooks are deprecated. Use the [accounting webhooks](https://docs.adyen.com/api-explorer/transfer-webhooks/latest/overview) instead.  Adyen sends webhooks to inform your system about the creation of payment resources and money movements in your platform.  You can use these webhooks to build your implementation. For example, you can use this information to update balances in your own dashboards or to keep track of incoming funds.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITransactionRuleReference.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITransactionRuleReference::OAITransactionRuleReference(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITransactionRuleReference::OAITransactionRuleReference() {
    this->initializeModel();
}

OAITransactionRuleReference::~OAITransactionRuleReference() {}

void OAITransactionRuleReference::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_reference_isSet = false;
    m_reference_isValid = false;
}

void OAITransactionRuleReference::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITransactionRuleReference::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_reference_isValid = ::OpenAPI::fromJsonValue(m_reference, json[QString("reference")]);
    m_reference_isSet = !json[QString("reference")].isNull() && m_reference_isValid;
}

QString OAITransactionRuleReference::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITransactionRuleReference::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_reference_isSet) {
        obj.insert(QString("reference"), ::OpenAPI::toJsonValue(m_reference));
    }
    return obj;
}

QString OAITransactionRuleReference::getDescription() const {
    return m_description;
}
void OAITransactionRuleReference::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAITransactionRuleReference::is_description_Set() const{
    return m_description_isSet;
}

bool OAITransactionRuleReference::is_description_Valid() const{
    return m_description_isValid;
}

QString OAITransactionRuleReference::getId() const {
    return m_id;
}
void OAITransactionRuleReference::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAITransactionRuleReference::is_id_Set() const{
    return m_id_isSet;
}

bool OAITransactionRuleReference::is_id_Valid() const{
    return m_id_isValid;
}

QString OAITransactionRuleReference::getReference() const {
    return m_reference;
}
void OAITransactionRuleReference::setReference(const QString &reference) {
    m_reference = reference;
    m_reference_isSet = true;
}

bool OAITransactionRuleReference::is_reference_Set() const{
    return m_reference_isSet;
}

bool OAITransactionRuleReference::is_reference_Valid() const{
    return m_reference_isValid;
}

bool OAITransactionRuleReference::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reference_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITransactionRuleReference::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
