/**
 * Payment webhooks (deprecated)
 * The payment webhooks are deprecated. Use the [accounting webhooks](https://docs.adyen.com/api-explorer/transfer-webhooks/latest/overview) instead.  Adyen sends webhooks to inform your system about the creation of payment resources and money movements in your platform.  You can use these webhooks to build your implementation. For example, you can use this information to update balances in your own dashboards or to keep track of incoming funds.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINameLocation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINameLocation::OAINameLocation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINameLocation::OAINameLocation() {
    this->initializeModel();
}

OAINameLocation::~OAINameLocation() {}

void OAINameLocation::initializeModel() {

    m_city_isSet = false;
    m_city_isValid = false;

    m_country_isSet = false;
    m_country_isValid = false;

    m_country_of_origin_isSet = false;
    m_country_of_origin_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_raw_data_isSet = false;
    m_raw_data_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;
}

void OAINameLocation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINameLocation::fromJsonObject(QJsonObject json) {

    m_city_isValid = ::OpenAPI::fromJsonValue(m_city, json[QString("city")]);
    m_city_isSet = !json[QString("city")].isNull() && m_city_isValid;

    m_country_isValid = ::OpenAPI::fromJsonValue(m_country, json[QString("country")]);
    m_country_isSet = !json[QString("country")].isNull() && m_country_isValid;

    m_country_of_origin_isValid = ::OpenAPI::fromJsonValue(m_country_of_origin, json[QString("countryOfOrigin")]);
    m_country_of_origin_isSet = !json[QString("countryOfOrigin")].isNull() && m_country_of_origin_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_raw_data_isValid = ::OpenAPI::fromJsonValue(m_raw_data, json[QString("rawData")]);
    m_raw_data_isSet = !json[QString("rawData")].isNull() && m_raw_data_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;
}

QString OAINameLocation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINameLocation::asJsonObject() const {
    QJsonObject obj;
    if (m_city_isSet) {
        obj.insert(QString("city"), ::OpenAPI::toJsonValue(m_city));
    }
    if (m_country_isSet) {
        obj.insert(QString("country"), ::OpenAPI::toJsonValue(m_country));
    }
    if (m_country_of_origin_isSet) {
        obj.insert(QString("countryOfOrigin"), ::OpenAPI::toJsonValue(m_country_of_origin));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_raw_data_isSet) {
        obj.insert(QString("rawData"), ::OpenAPI::toJsonValue(m_raw_data));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    return obj;
}

QString OAINameLocation::getCity() const {
    return m_city;
}
void OAINameLocation::setCity(const QString &city) {
    m_city = city;
    m_city_isSet = true;
}

bool OAINameLocation::is_city_Set() const{
    return m_city_isSet;
}

bool OAINameLocation::is_city_Valid() const{
    return m_city_isValid;
}

QString OAINameLocation::getCountry() const {
    return m_country;
}
void OAINameLocation::setCountry(const QString &country) {
    m_country = country;
    m_country_isSet = true;
}

bool OAINameLocation::is_country_Set() const{
    return m_country_isSet;
}

bool OAINameLocation::is_country_Valid() const{
    return m_country_isValid;
}

QString OAINameLocation::getCountryOfOrigin() const {
    return m_country_of_origin;
}
void OAINameLocation::setCountryOfOrigin(const QString &country_of_origin) {
    m_country_of_origin = country_of_origin;
    m_country_of_origin_isSet = true;
}

bool OAINameLocation::is_country_of_origin_Set() const{
    return m_country_of_origin_isSet;
}

bool OAINameLocation::is_country_of_origin_Valid() const{
    return m_country_of_origin_isValid;
}

QString OAINameLocation::getName() const {
    return m_name;
}
void OAINameLocation::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAINameLocation::is_name_Set() const{
    return m_name_isSet;
}

bool OAINameLocation::is_name_Valid() const{
    return m_name_isValid;
}

QString OAINameLocation::getRawData() const {
    return m_raw_data;
}
void OAINameLocation::setRawData(const QString &raw_data) {
    m_raw_data = raw_data;
    m_raw_data_isSet = true;
}

bool OAINameLocation::is_raw_data_Set() const{
    return m_raw_data_isSet;
}

bool OAINameLocation::is_raw_data_Valid() const{
    return m_raw_data_isValid;
}

QString OAINameLocation::getState() const {
    return m_state;
}
void OAINameLocation::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAINameLocation::is_state_Set() const{
    return m_state_isSet;
}

bool OAINameLocation::is_state_Valid() const{
    return m_state_isValid;
}

bool OAINameLocation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_city_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_of_origin_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_raw_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINameLocation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
