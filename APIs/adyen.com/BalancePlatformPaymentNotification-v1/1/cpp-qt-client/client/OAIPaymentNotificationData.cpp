/**
 * Payment webhooks (deprecated)
 * The payment webhooks are deprecated. Use the [accounting webhooks](https://docs.adyen.com/api-explorer/transfer-webhooks/latest/overview) instead.  Adyen sends webhooks to inform your system about the creation of payment resources and money movements in your platform.  You can use these webhooks to build your implementation. For example, you can use this information to update balances in your own dashboards or to keep track of incoming funds.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPaymentNotificationData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPaymentNotificationData::OAIPaymentNotificationData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPaymentNotificationData::OAIPaymentNotificationData() {
    this->initializeModel();
}

OAIPaymentNotificationData::~OAIPaymentNotificationData() {}

void OAIPaymentNotificationData::initializeModel() {

    m_account_holder_isSet = false;
    m_account_holder_isValid = false;

    m_amount_isSet = false;
    m_amount_isValid = false;

    m_auth_code_isSet = false;
    m_auth_code_isValid = false;

    m_balance_account_isSet = false;
    m_balance_account_isValid = false;

    m_balance_platform_isSet = false;
    m_balance_platform_isValid = false;

    m_creation_date_isSet = false;
    m_creation_date_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_merchant_data_isSet = false;
    m_merchant_data_isValid = false;

    m_modification_isSet = false;
    m_modification_isValid = false;

    m_original_amount_isSet = false;
    m_original_amount_isValid = false;

    m_payment_instrument_isSet = false;
    m_payment_instrument_isValid = false;

    m_platform_payment_isSet = false;
    m_platform_payment_isValid = false;

    m_processing_type_isSet = false;
    m_processing_type_isValid = false;

    m_reference_isSet = false;
    m_reference_isValid = false;

    m_reference_for_beneficiary_isSet = false;
    m_reference_for_beneficiary_isValid = false;

    m_relayed_authorisation_data_isSet = false;
    m_relayed_authorisation_data_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_transaction_rules_result_isSet = false;
    m_transaction_rules_result_isValid = false;

    m_validation_result_isSet = false;
    m_validation_result_isValid = false;
}

void OAIPaymentNotificationData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPaymentNotificationData::fromJsonObject(QJsonObject json) {

    m_account_holder_isValid = ::OpenAPI::fromJsonValue(m_account_holder, json[QString("accountHolder")]);
    m_account_holder_isSet = !json[QString("accountHolder")].isNull() && m_account_holder_isValid;

    m_amount_isValid = ::OpenAPI::fromJsonValue(m_amount, json[QString("amount")]);
    m_amount_isSet = !json[QString("amount")].isNull() && m_amount_isValid;

    m_auth_code_isValid = ::OpenAPI::fromJsonValue(m_auth_code, json[QString("authCode")]);
    m_auth_code_isSet = !json[QString("authCode")].isNull() && m_auth_code_isValid;

    m_balance_account_isValid = ::OpenAPI::fromJsonValue(m_balance_account, json[QString("balanceAccount")]);
    m_balance_account_isSet = !json[QString("balanceAccount")].isNull() && m_balance_account_isValid;

    m_balance_platform_isValid = ::OpenAPI::fromJsonValue(m_balance_platform, json[QString("balancePlatform")]);
    m_balance_platform_isSet = !json[QString("balancePlatform")].isNull() && m_balance_platform_isValid;

    m_creation_date_isValid = ::OpenAPI::fromJsonValue(m_creation_date, json[QString("creationDate")]);
    m_creation_date_isSet = !json[QString("creationDate")].isNull() && m_creation_date_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_merchant_data_isValid = ::OpenAPI::fromJsonValue(m_merchant_data, json[QString("merchantData")]);
    m_merchant_data_isSet = !json[QString("merchantData")].isNull() && m_merchant_data_isValid;

    m_modification_isValid = ::OpenAPI::fromJsonValue(m_modification, json[QString("modification")]);
    m_modification_isSet = !json[QString("modification")].isNull() && m_modification_isValid;

    m_original_amount_isValid = ::OpenAPI::fromJsonValue(m_original_amount, json[QString("originalAmount")]);
    m_original_amount_isSet = !json[QString("originalAmount")].isNull() && m_original_amount_isValid;

    m_payment_instrument_isValid = ::OpenAPI::fromJsonValue(m_payment_instrument, json[QString("paymentInstrument")]);
    m_payment_instrument_isSet = !json[QString("paymentInstrument")].isNull() && m_payment_instrument_isValid;

    m_platform_payment_isValid = ::OpenAPI::fromJsonValue(m_platform_payment, json[QString("platformPayment")]);
    m_platform_payment_isSet = !json[QString("platformPayment")].isNull() && m_platform_payment_isValid;

    m_processing_type_isValid = ::OpenAPI::fromJsonValue(m_processing_type, json[QString("processingType")]);
    m_processing_type_isSet = !json[QString("processingType")].isNull() && m_processing_type_isValid;

    m_reference_isValid = ::OpenAPI::fromJsonValue(m_reference, json[QString("reference")]);
    m_reference_isSet = !json[QString("reference")].isNull() && m_reference_isValid;

    m_reference_for_beneficiary_isValid = ::OpenAPI::fromJsonValue(m_reference_for_beneficiary, json[QString("referenceForBeneficiary")]);
    m_reference_for_beneficiary_isSet = !json[QString("referenceForBeneficiary")].isNull() && m_reference_for_beneficiary_isValid;

    m_relayed_authorisation_data_isValid = ::OpenAPI::fromJsonValue(m_relayed_authorisation_data, json[QString("relayedAuthorisationData")]);
    m_relayed_authorisation_data_isSet = !json[QString("relayedAuthorisationData")].isNull() && m_relayed_authorisation_data_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_transaction_rules_result_isValid = ::OpenAPI::fromJsonValue(m_transaction_rules_result, json[QString("transactionRulesResult")]);
    m_transaction_rules_result_isSet = !json[QString("transactionRulesResult")].isNull() && m_transaction_rules_result_isValid;

    m_validation_result_isValid = ::OpenAPI::fromJsonValue(m_validation_result, json[QString("validationResult")]);
    m_validation_result_isSet = !json[QString("validationResult")].isNull() && m_validation_result_isValid;
}

QString OAIPaymentNotificationData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPaymentNotificationData::asJsonObject() const {
    QJsonObject obj;
    if (m_account_holder.isSet()) {
        obj.insert(QString("accountHolder"), ::OpenAPI::toJsonValue(m_account_holder));
    }
    if (m_amount.isSet()) {
        obj.insert(QString("amount"), ::OpenAPI::toJsonValue(m_amount));
    }
    if (m_auth_code_isSet) {
        obj.insert(QString("authCode"), ::OpenAPI::toJsonValue(m_auth_code));
    }
    if (m_balance_account.isSet()) {
        obj.insert(QString("balanceAccount"), ::OpenAPI::toJsonValue(m_balance_account));
    }
    if (m_balance_platform_isSet) {
        obj.insert(QString("balancePlatform"), ::OpenAPI::toJsonValue(m_balance_platform));
    }
    if (m_creation_date_isSet) {
        obj.insert(QString("creationDate"), ::OpenAPI::toJsonValue(m_creation_date));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_merchant_data.isSet()) {
        obj.insert(QString("merchantData"), ::OpenAPI::toJsonValue(m_merchant_data));
    }
    if (m_modification.isSet()) {
        obj.insert(QString("modification"), ::OpenAPI::toJsonValue(m_modification));
    }
    if (m_original_amount.isSet()) {
        obj.insert(QString("originalAmount"), ::OpenAPI::toJsonValue(m_original_amount));
    }
    if (m_payment_instrument.isSet()) {
        obj.insert(QString("paymentInstrument"), ::OpenAPI::toJsonValue(m_payment_instrument));
    }
    if (m_platform_payment.isSet()) {
        obj.insert(QString("platformPayment"), ::OpenAPI::toJsonValue(m_platform_payment));
    }
    if (m_processing_type_isSet) {
        obj.insert(QString("processingType"), ::OpenAPI::toJsonValue(m_processing_type));
    }
    if (m_reference_isSet) {
        obj.insert(QString("reference"), ::OpenAPI::toJsonValue(m_reference));
    }
    if (m_reference_for_beneficiary_isSet) {
        obj.insert(QString("referenceForBeneficiary"), ::OpenAPI::toJsonValue(m_reference_for_beneficiary));
    }
    if (m_relayed_authorisation_data.isSet()) {
        obj.insert(QString("relayedAuthorisationData"), ::OpenAPI::toJsonValue(m_relayed_authorisation_data));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_transaction_rules_result.isSet()) {
        obj.insert(QString("transactionRulesResult"), ::OpenAPI::toJsonValue(m_transaction_rules_result));
    }
    if (m_validation_result.size() > 0) {
        obj.insert(QString("validationResult"), ::OpenAPI::toJsonValue(m_validation_result));
    }
    return obj;
}

OAIResourceReference OAIPaymentNotificationData::getAccountHolder() const {
    return m_account_holder;
}
void OAIPaymentNotificationData::setAccountHolder(const OAIResourceReference &account_holder) {
    m_account_holder = account_holder;
    m_account_holder_isSet = true;
}

bool OAIPaymentNotificationData::is_account_holder_Set() const{
    return m_account_holder_isSet;
}

bool OAIPaymentNotificationData::is_account_holder_Valid() const{
    return m_account_holder_isValid;
}

OAIAmount OAIPaymentNotificationData::getAmount() const {
    return m_amount;
}
void OAIPaymentNotificationData::setAmount(const OAIAmount &amount) {
    m_amount = amount;
    m_amount_isSet = true;
}

bool OAIPaymentNotificationData::is_amount_Set() const{
    return m_amount_isSet;
}

bool OAIPaymentNotificationData::is_amount_Valid() const{
    return m_amount_isValid;
}

QString OAIPaymentNotificationData::getAuthCode() const {
    return m_auth_code;
}
void OAIPaymentNotificationData::setAuthCode(const QString &auth_code) {
    m_auth_code = auth_code;
    m_auth_code_isSet = true;
}

bool OAIPaymentNotificationData::is_auth_code_Set() const{
    return m_auth_code_isSet;
}

bool OAIPaymentNotificationData::is_auth_code_Valid() const{
    return m_auth_code_isValid;
}

OAIResourceReference OAIPaymentNotificationData::getBalanceAccount() const {
    return m_balance_account;
}
void OAIPaymentNotificationData::setBalanceAccount(const OAIResourceReference &balance_account) {
    m_balance_account = balance_account;
    m_balance_account_isSet = true;
}

bool OAIPaymentNotificationData::is_balance_account_Set() const{
    return m_balance_account_isSet;
}

bool OAIPaymentNotificationData::is_balance_account_Valid() const{
    return m_balance_account_isValid;
}

QString OAIPaymentNotificationData::getBalancePlatform() const {
    return m_balance_platform;
}
void OAIPaymentNotificationData::setBalancePlatform(const QString &balance_platform) {
    m_balance_platform = balance_platform;
    m_balance_platform_isSet = true;
}

bool OAIPaymentNotificationData::is_balance_platform_Set() const{
    return m_balance_platform_isSet;
}

bool OAIPaymentNotificationData::is_balance_platform_Valid() const{
    return m_balance_platform_isValid;
}

QDateTime OAIPaymentNotificationData::getCreationDate() const {
    return m_creation_date;
}
void OAIPaymentNotificationData::setCreationDate(const QDateTime &creation_date) {
    m_creation_date = creation_date;
    m_creation_date_isSet = true;
}

bool OAIPaymentNotificationData::is_creation_date_Set() const{
    return m_creation_date_isSet;
}

bool OAIPaymentNotificationData::is_creation_date_Valid() const{
    return m_creation_date_isValid;
}

QString OAIPaymentNotificationData::getDescription() const {
    return m_description;
}
void OAIPaymentNotificationData::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIPaymentNotificationData::is_description_Set() const{
    return m_description_isSet;
}

bool OAIPaymentNotificationData::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIPaymentNotificationData::getId() const {
    return m_id;
}
void OAIPaymentNotificationData::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIPaymentNotificationData::is_id_Set() const{
    return m_id_isSet;
}

bool OAIPaymentNotificationData::is_id_Valid() const{
    return m_id_isValid;
}

OAIMerchantData OAIPaymentNotificationData::getMerchantData() const {
    return m_merchant_data;
}
void OAIPaymentNotificationData::setMerchantData(const OAIMerchantData &merchant_data) {
    m_merchant_data = merchant_data;
    m_merchant_data_isSet = true;
}

bool OAIPaymentNotificationData::is_merchant_data_Set() const{
    return m_merchant_data_isSet;
}

bool OAIPaymentNotificationData::is_merchant_data_Valid() const{
    return m_merchant_data_isValid;
}

OAINotificationModificationData OAIPaymentNotificationData::getModification() const {
    return m_modification;
}
void OAIPaymentNotificationData::setModification(const OAINotificationModificationData &modification) {
    m_modification = modification;
    m_modification_isSet = true;
}

bool OAIPaymentNotificationData::is_modification_Set() const{
    return m_modification_isSet;
}

bool OAIPaymentNotificationData::is_modification_Valid() const{
    return m_modification_isValid;
}

OAIAmount OAIPaymentNotificationData::getOriginalAmount() const {
    return m_original_amount;
}
void OAIPaymentNotificationData::setOriginalAmount(const OAIAmount &original_amount) {
    m_original_amount = original_amount;
    m_original_amount_isSet = true;
}

bool OAIPaymentNotificationData::is_original_amount_Set() const{
    return m_original_amount_isSet;
}

bool OAIPaymentNotificationData::is_original_amount_Valid() const{
    return m_original_amount_isValid;
}

OAIResourceReference OAIPaymentNotificationData::getPaymentInstrument() const {
    return m_payment_instrument;
}
void OAIPaymentNotificationData::setPaymentInstrument(const OAIResourceReference &payment_instrument) {
    m_payment_instrument = payment_instrument;
    m_payment_instrument_isSet = true;
}

bool OAIPaymentNotificationData::is_payment_instrument_Set() const{
    return m_payment_instrument_isSet;
}

bool OAIPaymentNotificationData::is_payment_instrument_Valid() const{
    return m_payment_instrument_isValid;
}

OAIPlatformPayment OAIPaymentNotificationData::getPlatformPayment() const {
    return m_platform_payment;
}
void OAIPaymentNotificationData::setPlatformPayment(const OAIPlatformPayment &platform_payment) {
    m_platform_payment = platform_payment;
    m_platform_payment_isSet = true;
}

bool OAIPaymentNotificationData::is_platform_payment_Set() const{
    return m_platform_payment_isSet;
}

bool OAIPaymentNotificationData::is_platform_payment_Valid() const{
    return m_platform_payment_isValid;
}

QString OAIPaymentNotificationData::getProcessingType() const {
    return m_processing_type;
}
void OAIPaymentNotificationData::setProcessingType(const QString &processing_type) {
    m_processing_type = processing_type;
    m_processing_type_isSet = true;
}

bool OAIPaymentNotificationData::is_processing_type_Set() const{
    return m_processing_type_isSet;
}

bool OAIPaymentNotificationData::is_processing_type_Valid() const{
    return m_processing_type_isValid;
}

QString OAIPaymentNotificationData::getReference() const {
    return m_reference;
}
void OAIPaymentNotificationData::setReference(const QString &reference) {
    m_reference = reference;
    m_reference_isSet = true;
}

bool OAIPaymentNotificationData::is_reference_Set() const{
    return m_reference_isSet;
}

bool OAIPaymentNotificationData::is_reference_Valid() const{
    return m_reference_isValid;
}

QString OAIPaymentNotificationData::getReferenceForBeneficiary() const {
    return m_reference_for_beneficiary;
}
void OAIPaymentNotificationData::setReferenceForBeneficiary(const QString &reference_for_beneficiary) {
    m_reference_for_beneficiary = reference_for_beneficiary;
    m_reference_for_beneficiary_isSet = true;
}

bool OAIPaymentNotificationData::is_reference_for_beneficiary_Set() const{
    return m_reference_for_beneficiary_isSet;
}

bool OAIPaymentNotificationData::is_reference_for_beneficiary_Valid() const{
    return m_reference_for_beneficiary_isValid;
}

OAIRelayedAuthorisationData OAIPaymentNotificationData::getRelayedAuthorisationData() const {
    return m_relayed_authorisation_data;
}
void OAIPaymentNotificationData::setRelayedAuthorisationData(const OAIRelayedAuthorisationData &relayed_authorisation_data) {
    m_relayed_authorisation_data = relayed_authorisation_data;
    m_relayed_authorisation_data_isSet = true;
}

bool OAIPaymentNotificationData::is_relayed_authorisation_data_Set() const{
    return m_relayed_authorisation_data_isSet;
}

bool OAIPaymentNotificationData::is_relayed_authorisation_data_Valid() const{
    return m_relayed_authorisation_data_isValid;
}

QString OAIPaymentNotificationData::getStatus() const {
    return m_status;
}
void OAIPaymentNotificationData::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIPaymentNotificationData::is_status_Set() const{
    return m_status_isSet;
}

bool OAIPaymentNotificationData::is_status_Valid() const{
    return m_status_isValid;
}

OAITransactionRulesResult OAIPaymentNotificationData::getTransactionRulesResult() const {
    return m_transaction_rules_result;
}
void OAIPaymentNotificationData::setTransactionRulesResult(const OAITransactionRulesResult &transaction_rules_result) {
    m_transaction_rules_result = transaction_rules_result;
    m_transaction_rules_result_isSet = true;
}

bool OAIPaymentNotificationData::is_transaction_rules_result_Set() const{
    return m_transaction_rules_result_isSet;
}

bool OAIPaymentNotificationData::is_transaction_rules_result_Valid() const{
    return m_transaction_rules_result_isValid;
}

QList<OAIValidationResult> OAIPaymentNotificationData::getValidationResult() const {
    return m_validation_result;
}
void OAIPaymentNotificationData::setValidationResult(const QList<OAIValidationResult> &validation_result) {
    m_validation_result = validation_result;
    m_validation_result_isSet = true;
}

bool OAIPaymentNotificationData::is_validation_result_Set() const{
    return m_validation_result_isSet;
}

bool OAIPaymentNotificationData::is_validation_result_Valid() const{
    return m_validation_result_isValid;
}

bool OAIPaymentNotificationData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_holder.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_amount.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_auth_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_balance_account.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_balance_platform_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_merchant_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_modification.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_original_amount.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_instrument.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_platform_payment.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_processing_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reference_for_beneficiary_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_relayed_authorisation_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transaction_rules_result.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_validation_result.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPaymentNotificationData::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
