/**
 * Payment webhooks (deprecated)
 * The payment webhooks are deprecated. Use the [accounting webhooks](https://docs.adyen.com/api-explorer/transfer-webhooks/latest/overview) instead.  Adyen sends webhooks to inform your system about the creation of payment resources and money movements in your platform.  You can use these webhooks to build your implementation. For example, you can use this information to update balances in your own dashboards or to keep track of incoming funds.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITransactionRuleSource.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITransactionRuleSource::OAITransactionRuleSource(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITransactionRuleSource::OAITransactionRuleSource() {
    this->initializeModel();
}

OAITransactionRuleSource::~OAITransactionRuleSource() {}

void OAITransactionRuleSource::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAITransactionRuleSource::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITransactionRuleSource::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAITransactionRuleSource::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITransactionRuleSource::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAITransactionRuleSource::getId() const {
    return m_id;
}
void OAITransactionRuleSource::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAITransactionRuleSource::is_id_Set() const{
    return m_id_isSet;
}

bool OAITransactionRuleSource::is_id_Valid() const{
    return m_id_isValid;
}

QString OAITransactionRuleSource::getType() const {
    return m_type;
}
void OAITransactionRuleSource::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAITransactionRuleSource::is_type_Set() const{
    return m_type_isSet;
}

bool OAITransactionRuleSource::is_type_Valid() const{
    return m_type_isValid;
}

bool OAITransactionRuleSource::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITransactionRuleSource::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
