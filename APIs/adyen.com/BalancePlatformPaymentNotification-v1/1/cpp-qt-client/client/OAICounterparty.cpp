/**
 * Payment webhooks (deprecated)
 * The payment webhooks are deprecated. Use the [accounting webhooks](https://docs.adyen.com/api-explorer/transfer-webhooks/latest/overview) instead.  Adyen sends webhooks to inform your system about the creation of payment resources and money movements in your platform.  You can use these webhooks to build your implementation. For example, you can use this information to update balances in your own dashboards or to keep track of incoming funds.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICounterparty.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICounterparty::OAICounterparty(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICounterparty::OAICounterparty() {
    this->initializeModel();
}

OAICounterparty::~OAICounterparty() {}

void OAICounterparty::initializeModel() {

    m_balance_account_id_isSet = false;
    m_balance_account_id_isValid = false;

    m_bank_account_isSet = false;
    m_bank_account_isValid = false;

    m_merchant_isSet = false;
    m_merchant_isValid = false;

    m_transfer_instrument_id_isSet = false;
    m_transfer_instrument_id_isValid = false;
}

void OAICounterparty::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICounterparty::fromJsonObject(QJsonObject json) {

    m_balance_account_id_isValid = ::OpenAPI::fromJsonValue(m_balance_account_id, json[QString("balanceAccountId")]);
    m_balance_account_id_isSet = !json[QString("balanceAccountId")].isNull() && m_balance_account_id_isValid;

    m_bank_account_isValid = ::OpenAPI::fromJsonValue(m_bank_account, json[QString("bankAccount")]);
    m_bank_account_isSet = !json[QString("bankAccount")].isNull() && m_bank_account_isValid;

    m_merchant_isValid = ::OpenAPI::fromJsonValue(m_merchant, json[QString("merchant")]);
    m_merchant_isSet = !json[QString("merchant")].isNull() && m_merchant_isValid;

    m_transfer_instrument_id_isValid = ::OpenAPI::fromJsonValue(m_transfer_instrument_id, json[QString("transferInstrumentId")]);
    m_transfer_instrument_id_isSet = !json[QString("transferInstrumentId")].isNull() && m_transfer_instrument_id_isValid;
}

QString OAICounterparty::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICounterparty::asJsonObject() const {
    QJsonObject obj;
    if (m_balance_account_id_isSet) {
        obj.insert(QString("balanceAccountId"), ::OpenAPI::toJsonValue(m_balance_account_id));
    }
    if (m_bank_account.isSet()) {
        obj.insert(QString("bankAccount"), ::OpenAPI::toJsonValue(m_bank_account));
    }
    if (m_merchant.isSet()) {
        obj.insert(QString("merchant"), ::OpenAPI::toJsonValue(m_merchant));
    }
    if (m_transfer_instrument_id_isSet) {
        obj.insert(QString("transferInstrumentId"), ::OpenAPI::toJsonValue(m_transfer_instrument_id));
    }
    return obj;
}

QString OAICounterparty::getBalanceAccountId() const {
    return m_balance_account_id;
}
void OAICounterparty::setBalanceAccountId(const QString &balance_account_id) {
    m_balance_account_id = balance_account_id;
    m_balance_account_id_isSet = true;
}

bool OAICounterparty::is_balance_account_id_Set() const{
    return m_balance_account_id_isSet;
}

bool OAICounterparty::is_balance_account_id_Valid() const{
    return m_balance_account_id_isValid;
}

OAIBankAccountInfo OAICounterparty::getBankAccount() const {
    return m_bank_account;
}
void OAICounterparty::setBankAccount(const OAIBankAccountInfo &bank_account) {
    m_bank_account = bank_account;
    m_bank_account_isSet = true;
}

bool OAICounterparty::is_bank_account_Set() const{
    return m_bank_account_isSet;
}

bool OAICounterparty::is_bank_account_Valid() const{
    return m_bank_account_isValid;
}

OAIMerchantData OAICounterparty::getMerchant() const {
    return m_merchant;
}
void OAICounterparty::setMerchant(const OAIMerchantData &merchant) {
    m_merchant = merchant;
    m_merchant_isSet = true;
}

bool OAICounterparty::is_merchant_Set() const{
    return m_merchant_isSet;
}

bool OAICounterparty::is_merchant_Valid() const{
    return m_merchant_isValid;
}

QString OAICounterparty::getTransferInstrumentId() const {
    return m_transfer_instrument_id;
}
void OAICounterparty::setTransferInstrumentId(const QString &transfer_instrument_id) {
    m_transfer_instrument_id = transfer_instrument_id;
    m_transfer_instrument_id_isSet = true;
}

bool OAICounterparty::is_transfer_instrument_id_Set() const{
    return m_transfer_instrument_id_isSet;
}

bool OAICounterparty::is_transfer_instrument_id_Valid() const{
    return m_transfer_instrument_id_isValid;
}

bool OAICounterparty::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_balance_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bank_account.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_merchant.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_transfer_instrument_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICounterparty::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
