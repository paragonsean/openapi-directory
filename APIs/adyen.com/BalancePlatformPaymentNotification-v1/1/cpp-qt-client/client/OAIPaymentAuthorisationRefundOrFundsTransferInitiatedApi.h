/**
 * Payment webhooks (deprecated)
 * The payment webhooks are deprecated. Use the [accounting webhooks](https://docs.adyen.com/api-explorer/transfer-webhooks/latest/overview) instead.  Adyen sends webhooks to inform your system about the creation of payment resources and money movements in your platform.  You can use these webhooks to build your implementation. For example, you can use this information to update balances in your own dashboards or to keep track of incoming funds.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIPaymentAuthorisationRefundOrFundsTransferInitiatedApi_H
#define OAI_OAIPaymentAuthorisationRefundOrFundsTransferInitiatedApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIBalancePlatformNotificationResponse.h"
#include "OAIPaymentNotificationRequest.h"

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIPaymentAuthorisationRefundOrFundsTransferInitiatedApi : public QObject {
    Q_OBJECT

public:
    OAIPaymentAuthorisationRefundOrFundsTransferInitiatedApi(const int timeOut = 0);
    ~OAIPaymentAuthorisationRefundOrFundsTransferInitiatedApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_payment_notification_request OAIPaymentNotificationRequest [optional]
    */
    Q_DECL_DEPRECATED virtual void postBalancePlatform_payment_created(const ::OpenAPI::OptionalParam<OAIPaymentNotificationRequest> &oai_payment_notification_request = ::OpenAPI::OptionalParam<OAIPaymentNotificationRequest>());

    /**
    * @param[in]  oai_payment_notification_request OAIPaymentNotificationRequest [optional]
    */
    Q_DECL_DEPRECATED virtual void postBalancePlatform_payment_updated(const ::OpenAPI::OptionalParam<OAIPaymentNotificationRequest> &oai_payment_notification_request = ::OpenAPI::OptionalParam<OAIPaymentNotificationRequest>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void postBalancePlatform_payment_createdCallback(OAIHttpRequestWorker *worker);
    void postBalancePlatform_payment_updatedCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void postBalancePlatform_payment_createdSignal(OAIBalancePlatformNotificationResponse summary);
    void postBalancePlatform_payment_updatedSignal(OAIBalancePlatformNotificationResponse summary);


    void postBalancePlatform_payment_createdSignalFull(OAIHttpRequestWorker *worker, OAIBalancePlatformNotificationResponse summary);
    void postBalancePlatform_payment_updatedSignalFull(OAIHttpRequestWorker *worker, OAIBalancePlatformNotificationResponse summary);

    Q_DECL_DEPRECATED_X("Use postBalancePlatform_payment_createdSignalError() instead")
    void postBalancePlatform_payment_createdSignalE(OAIBalancePlatformNotificationResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postBalancePlatform_payment_createdSignalError(OAIBalancePlatformNotificationResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postBalancePlatform_payment_updatedSignalError() instead")
    void postBalancePlatform_payment_updatedSignalE(OAIBalancePlatformNotificationResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postBalancePlatform_payment_updatedSignalError(OAIBalancePlatformNotificationResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use postBalancePlatform_payment_createdSignalErrorFull() instead")
    void postBalancePlatform_payment_createdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postBalancePlatform_payment_createdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postBalancePlatform_payment_updatedSignalErrorFull() instead")
    void postBalancePlatform_payment_updatedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postBalancePlatform_payment_updatedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
