/**
 * Payment webhooks (deprecated)
 * The payment webhooks are deprecated. Use the [accounting webhooks](https://docs.adyen.com/api-explorer/transfer-webhooks/latest/overview) instead.  Adyen sends webhooks to inform your system about the creation of payment resources and money movements in your platform.  You can use these webhooks to build your implementation. For example, you can use this information to update balances in your own dashboards or to keep track of incoming funds.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITransactionRulesResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITransactionRulesResult::OAITransactionRulesResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITransactionRulesResult::OAITransactionRulesResult() {
    this->initializeModel();
}

OAITransactionRulesResult::~OAITransactionRulesResult() {}

void OAITransactionRulesResult::initializeModel() {

    m_advice_isSet = false;
    m_advice_isValid = false;

    m_all_rules_passed_isSet = false;
    m_all_rules_passed_isValid = false;

    m_failed_transaction_rules_isSet = false;
    m_failed_transaction_rules_isValid = false;

    m_score_isSet = false;
    m_score_isValid = false;
}

void OAITransactionRulesResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITransactionRulesResult::fromJsonObject(QJsonObject json) {

    m_advice_isValid = ::OpenAPI::fromJsonValue(m_advice, json[QString("advice")]);
    m_advice_isSet = !json[QString("advice")].isNull() && m_advice_isValid;

    m_all_rules_passed_isValid = ::OpenAPI::fromJsonValue(m_all_rules_passed, json[QString("allRulesPassed")]);
    m_all_rules_passed_isSet = !json[QString("allRulesPassed")].isNull() && m_all_rules_passed_isValid;

    m_failed_transaction_rules_isValid = ::OpenAPI::fromJsonValue(m_failed_transaction_rules, json[QString("failedTransactionRules")]);
    m_failed_transaction_rules_isSet = !json[QString("failedTransactionRules")].isNull() && m_failed_transaction_rules_isValid;

    m_score_isValid = ::OpenAPI::fromJsonValue(m_score, json[QString("score")]);
    m_score_isSet = !json[QString("score")].isNull() && m_score_isValid;
}

QString OAITransactionRulesResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITransactionRulesResult::asJsonObject() const {
    QJsonObject obj;
    if (m_advice_isSet) {
        obj.insert(QString("advice"), ::OpenAPI::toJsonValue(m_advice));
    }
    if (m_all_rules_passed_isSet) {
        obj.insert(QString("allRulesPassed"), ::OpenAPI::toJsonValue(m_all_rules_passed));
    }
    if (m_failed_transaction_rules.size() > 0) {
        obj.insert(QString("failedTransactionRules"), ::OpenAPI::toJsonValue(m_failed_transaction_rules));
    }
    if (m_score_isSet) {
        obj.insert(QString("score"), ::OpenAPI::toJsonValue(m_score));
    }
    return obj;
}

QString OAITransactionRulesResult::getAdvice() const {
    return m_advice;
}
void OAITransactionRulesResult::setAdvice(const QString &advice) {
    m_advice = advice;
    m_advice_isSet = true;
}

bool OAITransactionRulesResult::is_advice_Set() const{
    return m_advice_isSet;
}

bool OAITransactionRulesResult::is_advice_Valid() const{
    return m_advice_isValid;
}

bool OAITransactionRulesResult::isAllRulesPassed() const {
    return m_all_rules_passed;
}
void OAITransactionRulesResult::setAllRulesPassed(const bool &all_rules_passed) {
    m_all_rules_passed = all_rules_passed;
    m_all_rules_passed_isSet = true;
}

bool OAITransactionRulesResult::is_all_rules_passed_Set() const{
    return m_all_rules_passed_isSet;
}

bool OAITransactionRulesResult::is_all_rules_passed_Valid() const{
    return m_all_rules_passed_isValid;
}

QList<OAITransactionEventViolation> OAITransactionRulesResult::getFailedTransactionRules() const {
    return m_failed_transaction_rules;
}
void OAITransactionRulesResult::setFailedTransactionRules(const QList<OAITransactionEventViolation> &failed_transaction_rules) {
    m_failed_transaction_rules = failed_transaction_rules;
    m_failed_transaction_rules_isSet = true;
}

bool OAITransactionRulesResult::is_failed_transaction_rules_Set() const{
    return m_failed_transaction_rules_isSet;
}

bool OAITransactionRulesResult::is_failed_transaction_rules_Valid() const{
    return m_failed_transaction_rules_isValid;
}

qint32 OAITransactionRulesResult::getScore() const {
    return m_score;
}
void OAITransactionRulesResult::setScore(const qint32 &score) {
    m_score = score;
    m_score_isSet = true;
}

bool OAITransactionRulesResult::is_score_Set() const{
    return m_score_isSet;
}

bool OAITransactionRulesResult::is_score_Valid() const{
    return m_score_isValid;
}

bool OAITransactionRulesResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_advice_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_all_rules_passed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_failed_transaction_rules.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_score_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITransactionRulesResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
