/**
 * Payment webhooks (deprecated)
 * The payment webhooks are deprecated. Use the [accounting webhooks](https://docs.adyen.com/api-explorer/transfer-webhooks/latest/overview) instead.  Adyen sends webhooks to inform your system about the creation of payment resources and money movements in your platform.  You can use these webhooks to build your implementation. For example, you can use this information to update balances in your own dashboards or to keep track of incoming funds.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRelayedAuthorisationData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRelayedAuthorisationData::OAIRelayedAuthorisationData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRelayedAuthorisationData::OAIRelayedAuthorisationData() {
    this->initializeModel();
}

OAIRelayedAuthorisationData::~OAIRelayedAuthorisationData() {}

void OAIRelayedAuthorisationData::initializeModel() {

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_reference_isSet = false;
    m_reference_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIRelayedAuthorisationData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRelayedAuthorisationData::fromJsonObject(QJsonObject json) {

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_reference_isValid = ::OpenAPI::fromJsonValue(m_reference, json[QString("reference")]);
    m_reference_isSet = !json[QString("reference")].isNull() && m_reference_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAIRelayedAuthorisationData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRelayedAuthorisationData::asJsonObject() const {
    QJsonObject obj;
    if (m_metadata.size() > 0) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_reference_isSet) {
        obj.insert(QString("reference"), ::OpenAPI::toJsonValue(m_reference));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QMap<QString, QString> OAIRelayedAuthorisationData::getMetadata() const {
    return m_metadata;
}
void OAIRelayedAuthorisationData::setMetadata(const QMap<QString, QString> &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAIRelayedAuthorisationData::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAIRelayedAuthorisationData::is_metadata_Valid() const{
    return m_metadata_isValid;
}

QString OAIRelayedAuthorisationData::getReference() const {
    return m_reference;
}
void OAIRelayedAuthorisationData::setReference(const QString &reference) {
    m_reference = reference;
    m_reference_isSet = true;
}

bool OAIRelayedAuthorisationData::is_reference_Set() const{
    return m_reference_isSet;
}

bool OAIRelayedAuthorisationData::is_reference_Valid() const{
    return m_reference_isValid;
}

QString OAIRelayedAuthorisationData::getStatus() const {
    return m_status;
}
void OAIRelayedAuthorisationData::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIRelayedAuthorisationData::is_status_Set() const{
    return m_status_isSet;
}

bool OAIRelayedAuthorisationData::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIRelayedAuthorisationData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_metadata.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRelayedAuthorisationData::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
