/*
 * Fund API
 * This API is used for the classic integration. If you are just starting your implementation, refer to our [new integration guide](https://docs.adyen.com/marketplaces-and-platforms) instead.  The Fund API provides endpoints for managing the funds in the accounts on your platform. These management operations include, for example, the transfer of funds from one account to another, the payout of funds to an account holder, and the retrieval of balances in an account.  For more information, refer to our [documentation](https://docs.adyen.com/marketplaces-and-platforms/classic/). ## Authentication Your Adyen contact will provide your API credential and an API key. To connect to the API, add an `X-API-Key` header with the API key as the value, for example:   ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ```  Alternatively, you can use the username and password to connect to the API using basic authentication. For example:  ``` curl -U \"ws@MarketPlace.YOUR_PLATFORM_ACCOUNT\":\"YOUR_WS_PASSWORD\" \\ -H \"Content-Type: application/json\" \\ ... ``` When going live, you need to generate new web service user credentials to access the [live endpoints](https://docs.adyen.com/development-resources/live-endpoints).  ## Versioning The Fund API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://cal-test.adyen.com/cal/services/Fund/v3/accountHolderBalance ```
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AccountHolderBalanceRequest;
import org.openapitools.client.model.AccountHolderBalanceResponse;
import org.openapitools.client.model.AccountHolderTransactionListRequest;
import org.openapitools.client.model.AccountHolderTransactionListResponse;
import org.openapitools.client.model.DebitAccountHolderRequest;
import org.openapitools.client.model.DebitAccountHolderResponse;
import org.openapitools.client.model.PayoutAccountHolderRequest;
import org.openapitools.client.model.PayoutAccountHolderResponse;
import org.openapitools.client.model.RefundFundsTransferRequest;
import org.openapitools.client.model.RefundFundsTransferResponse;
import org.openapitools.client.model.RefundNotPaidOutTransfersRequest;
import org.openapitools.client.model.RefundNotPaidOutTransfersResponse;
import org.openapitools.client.model.ServiceError;
import org.openapitools.client.model.SetupBeneficiaryRequest;
import org.openapitools.client.model.SetupBeneficiaryResponse;
import org.openapitools.client.model.TransferFundsRequest;
import org.openapitools.client.model.TransferFundsResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for GeneralApi
 */
@Disabled
public class GeneralApiTest {

    private final GeneralApi api = new GeneralApi();

    /**
     * Get the balances of an account holder
     *
     * Returns the account balances of an account holder. An account&#39;s balances are organized according by currencies. This mean that an account may have multiple balances: one for each currency.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postAccountHolderBalanceTest() throws ApiException {
        AccountHolderBalanceRequest accountHolderBalanceRequest = null;
        AccountHolderBalanceResponse response = api.postAccountHolderBalance(accountHolderBalanceRequest);
        // TODO: test validations
    }

    /**
     * Get a list of transactions
     *
     * Returns a list of transactions for an account holder&#39;s accounts. You can specify the accounts and transaction statuses to be included on the list. The call returns a maximum of 50 transactions for each account. To retrieve all transactions, you must make another call with the &#39;page&#39; value incremented. Transactions are listed in chronological order, with the most recent transaction first.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postAccountHolderTransactionListTest() throws ApiException {
        AccountHolderTransactionListRequest accountHolderTransactionListRequest = null;
        AccountHolderTransactionListResponse response = api.postAccountHolderTransactionList(accountHolderTransactionListRequest);
        // TODO: test validations
    }

    /**
     * Send a direct debit request
     *
     * Sends a direct debit request to an account holder&#39;s bank account. If the direct debit is successful, the funds are settled in the accounts specified in the split instructions. Adyen sends the result of the direct debit in a [&#x60;DIRECT_DEBIT_INITIATED&#x60;](https://docs.adyen.com/api-explorer/#/NotificationService/latest/post/DIRECT_DEBIT_INITIATED) notification webhook.   To learn more about direct debits, see [Top up accounts](https://docs.adyen.com/marketplaces-and-platforms/classic/top-up-accounts).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postDebitAccountHolderTest() throws ApiException {
        DebitAccountHolderRequest debitAccountHolderRequest = null;
        DebitAccountHolderResponse response = api.postDebitAccountHolder(debitAccountHolderRequest);
        // TODO: test validations
    }

    /**
     * Pay out from an account to the account holder
     *
     * Pays out a specified amount from an account to the bank account of account holder.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postPayoutAccountHolderTest() throws ApiException {
        PayoutAccountHolderRequest payoutAccountHolderRequest = null;
        PayoutAccountHolderResponse response = api.postPayoutAccountHolder(payoutAccountHolderRequest);
        // TODO: test validations
    }

    /**
     * Refund a funds transfer
     *
     * Refunds funds transferred from one account to another. Both accounts must be in the same platform, but can have different account holders. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postRefundFundsTransferTest() throws ApiException {
        RefundFundsTransferRequest refundFundsTransferRequest = null;
        RefundFundsTransferResponse response = api.postRefundFundsTransfer(refundFundsTransferRequest);
        // TODO: test validations
    }

    /**
     * Refund all transactions of an account since the most recent payout
     *
     * Refunds all the transactions of an account that have taken place since the most recent payout. This request is on a account basis (as opposed to a payment basis), so only the portion of the payment that was made to the specified account is refunded. The commissions, fees, and payments to other accounts remain in the accounts to which they were sent as designated by the original payment&#39;s split details.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postRefundNotPaidOutTransfersTest() throws ApiException {
        RefundNotPaidOutTransfersRequest refundNotPaidOutTransfersRequest = null;
        RefundNotPaidOutTransfersResponse response = api.postRefundNotPaidOutTransfers(refundNotPaidOutTransfersRequest);
        // TODO: test validations
    }

    /**
     * Designate a beneficiary account and transfer the benefactor&#39;s current balance
     *
     * Defines a benefactor and a beneficiary relationship between two accounts. At the time of benefactor/beneficiary setup, the funds in the benefactor account are transferred to the beneficiary account, and any further payments to the benefactor account are automatically sent to the beneficiary account. A series of benefactor/beneficiaries may not exceed four beneficiaries and may not have a cycle in it.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postSetupBeneficiaryTest() throws ApiException {
        SetupBeneficiaryRequest setupBeneficiaryRequest = null;
        SetupBeneficiaryResponse response = api.postSetupBeneficiary(setupBeneficiaryRequest);
        // TODO: test validations
    }

    /**
     * Transfer funds between platform accounts
     *
     * Transfers funds from one account to another account. Both accounts must be in the same platform, but can have different account holders. The transfer must include a transfer code, which should be determined by the platform, in compliance with local regulations.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postTransferFundsTest() throws ApiException {
        TransferFundsRequest transferFundsRequest = null;
        TransferFundsResponse response = api.postTransferFunds(transferFundsRequest);
        // TODO: test validations
    }

}
