/*
 * Fund API
 * This API is used for the classic integration. If you are just starting your implementation, refer to our [new integration guide](https://docs.adyen.com/marketplaces-and-platforms) instead.  The Fund API provides endpoints for managing the funds in the accounts on your platform. These management operations include, for example, the transfer of funds from one account to another, the payout of funds to an account holder, and the retrieval of balances in an account.  For more information, refer to our [documentation](https://docs.adyen.com/marketplaces-and-platforms/classic/). ## Authentication Your Adyen contact will provide your API credential and an API key. To connect to the API, add an `X-API-Key` header with the API key as the value, for example:   ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ```  Alternatively, you can use the username and password to connect to the API using basic authentication. For example:  ``` curl -U \"ws@MarketPlace.YOUR_PLATFORM_ACCOUNT\":\"YOUR_WS_PASSWORD\" \\ -H \"Content-Type: application/json\" \\ ... ``` When going live, you need to generate new web service user credentials to access the [live endpoints](https://docs.adyen.com/development-resources/live-endpoints).  ## Versioning The Fund API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://cal-test.adyen.com/cal/services/Fund/v3/accountHolderBalance ```
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.TransactionListForAccountWrapper;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AccountHolderTransactionListRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:14:44.076466-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AccountHolderTransactionListRequest {
  public static final String SERIALIZED_NAME_ACCOUNT_HOLDER_CODE = "accountHolderCode";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_HOLDER_CODE)
  private String accountHolderCode;

  public static final String SERIALIZED_NAME_TRANSACTION_LISTS_PER_ACCOUNT = "transactionListsPerAccount";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_LISTS_PER_ACCOUNT)
  private List<TransactionListForAccountWrapper> transactionListsPerAccount = new ArrayList<>();

  /**
   * Gets or Sets transactionStatuses
   */
  @JsonAdapter(TransactionStatusesEnum.Adapter.class)
  public enum TransactionStatusesEnum {
    BALANCE_NOT_PAID_OUT_TRANSFER("BalanceNotPaidOutTransfer"),
    
    BALANCE_PLATFORM_SWEEP("BalancePlatformSweep"),
    
    BALANCE_PLATFORM_SWEEP_RETURNED("BalancePlatformSweepReturned"),
    
    CHARGEBACK("Chargeback"),
    
    CHARGEBACK_CORRECTION("ChargebackCorrection"),
    
    CHARGEBACK_CORRECTION_RECEIVED("ChargebackCorrectionReceived"),
    
    CHARGEBACK_RECEIVED("ChargebackReceived"),
    
    CHARGEBACK_REVERSED("ChargebackReversed"),
    
    CHARGEBACK_REVERSED_CORRECTION("ChargebackReversedCorrection"),
    
    CHARGEBACK_REVERSED_CORRECTION_RECEIVED("ChargebackReversedCorrectionReceived"),
    
    CHARGEBACK_REVERSED_RECEIVED("ChargebackReversedReceived"),
    
    CONVERTED("Converted"),
    
    CREDIT_CLOSED("CreditClosed"),
    
    CREDIT_FAILED("CreditFailed"),
    
    CREDIT_REVERSED("CreditReversed"),
    
    CREDIT_REVERSED_RECEIVED("CreditReversedReceived"),
    
    CREDIT_SUSPENDED("CreditSuspended"),
    
    CREDITED("Credited"),
    
    DEBIT_FAILED("DebitFailed"),
    
    DEBIT_REVERSED_RECEIVED("DebitReversedReceived"),
    
    DEBITED("Debited"),
    
    DEBITED_REVERSED("DebitedReversed"),
    
    DEPOSIT_CORRECTION_CREDITED("DepositCorrectionCredited"),
    
    DEPOSIT_CORRECTION_DEBITED("DepositCorrectionDebited"),
    
    FEE("Fee"),
    
    FUND_TRANSFER("FundTransfer"),
    
    FUND_TRANSFER_REVERSED("FundTransferReversed"),
    
    INVOICE_DEDUCTION_CREDITED("InvoiceDeductionCredited"),
    
    INVOICE_DEDUCTION_DEBITED("InvoiceDeductionDebited"),
    
    MANUAL_CORRECTED("ManualCorrected"),
    
    MANUAL_CORRECTION_CREDITED("ManualCorrectionCredited"),
    
    MANUAL_CORRECTION_DEBITED("ManualCorrectionDebited"),
    
    MERCHANT_PAYIN("MerchantPayin"),
    
    MERCHANT_PAYIN_REVERSED("MerchantPayinReversed"),
    
    PAYOUT("Payout"),
    
    PAYOUT_REVERSED("PayoutReversed"),
    
    PENDING_CREDIT("PendingCredit"),
    
    PENDING_DEBIT("PendingDebit"),
    
    PENDING_FUND_TRANSFER("PendingFundTransfer"),
    
    RE_CREDITED("ReCredited"),
    
    RE_CREDITED_RECEIVED("ReCreditedReceived"),
    
    SECOND_CHARGEBACK("SecondChargeback"),
    
    SECOND_CHARGEBACK_CORRECTION("SecondChargebackCorrection"),
    
    SECOND_CHARGEBACK_CORRECTION_RECEIVED("SecondChargebackCorrectionReceived"),
    
    SECOND_CHARGEBACK_RECEIVED("SecondChargebackReceived");

    private String value;

    TransactionStatusesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TransactionStatusesEnum fromValue(String value) {
      for (TransactionStatusesEnum b : TransactionStatusesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TransactionStatusesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TransactionStatusesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TransactionStatusesEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TransactionStatusesEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TransactionStatusesEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TRANSACTION_STATUSES = "transactionStatuses";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_STATUSES)
  private List<TransactionStatusesEnum> transactionStatuses = new ArrayList<>();

  public AccountHolderTransactionListRequest() {
  }

  public AccountHolderTransactionListRequest accountHolderCode(String accountHolderCode) {
    this.accountHolderCode = accountHolderCode;
    return this;
  }

  /**
   * The code of the account holder that owns the account(s) of which retrieve the transaction list.
   * @return accountHolderCode
   */
  @javax.annotation.Nonnull
  public String getAccountHolderCode() {
    return accountHolderCode;
  }

  public void setAccountHolderCode(String accountHolderCode) {
    this.accountHolderCode = accountHolderCode;
  }


  public AccountHolderTransactionListRequest transactionListsPerAccount(List<TransactionListForAccountWrapper> transactionListsPerAccount) {
    this.transactionListsPerAccount = transactionListsPerAccount;
    return this;
  }

  public AccountHolderTransactionListRequest addTransactionListsPerAccountItem(TransactionListForAccountWrapper transactionListsPerAccountItem) {
    if (this.transactionListsPerAccount == null) {
      this.transactionListsPerAccount = new ArrayList<>();
    }
    this.transactionListsPerAccount.add(transactionListsPerAccountItem);
    return this;
  }

  /**
   * A list of accounts to include in the transaction list. If left blank, the last fifty (50) transactions for all accounts of the account holder will be included.
   * @return transactionListsPerAccount
   */
  @javax.annotation.Nullable
  public List<TransactionListForAccountWrapper> getTransactionListsPerAccount() {
    return transactionListsPerAccount;
  }

  public void setTransactionListsPerAccount(List<TransactionListForAccountWrapper> transactionListsPerAccount) {
    this.transactionListsPerAccount = transactionListsPerAccount;
  }


  public AccountHolderTransactionListRequest transactionStatuses(List<TransactionStatusesEnum> transactionStatuses) {
    this.transactionStatuses = transactionStatuses;
    return this;
  }

  public AccountHolderTransactionListRequest addTransactionStatusesItem(TransactionStatusesEnum transactionStatusesItem) {
    if (this.transactionStatuses == null) {
      this.transactionStatuses = new ArrayList<>();
    }
    this.transactionStatuses.add(transactionStatusesItem);
    return this;
  }

  /**
   * A list of statuses to include in the transaction list. If left blank, all transactions will be included. &gt;Permitted values: &gt;* &#x60;PendingCredit&#x60; - a pending balance credit. &gt;* &#x60;CreditFailed&#x60; - a pending credit failure; the balance will not be credited. &gt;* &#x60;Credited&#x60; - a credited balance. &gt;* &#x60;PendingDebit&#x60; - a pending balance debit (e.g., a refund). &gt;* &#x60;CreditClosed&#x60; - a pending credit closed; the balance will not be credited. &gt;* &#x60;CreditSuspended&#x60; - a pending credit closed; the balance will not be credited. &gt;* &#x60;DebitFailed&#x60; - a pending debit failure; the balance will not be debited. &gt;* &#x60;Debited&#x60; - a debited balance (e.g., a refund). &gt;* &#x60;DebitReversedReceived&#x60; - a pending refund reversal. &gt;* &#x60;DebitedReversed&#x60; - a reversed refund. &gt;* &#x60;ChargebackReceived&#x60; - a received chargeback request. &gt;* &#x60;Chargeback&#x60; - a processed chargeback. &gt;* &#x60;ChargebackReversedReceived&#x60; - a pending chargeback reversal. &gt;* &#x60;ChargebackReversed&#x60; - a reversed chargeback. &gt;* &#x60;Converted&#x60; - converted. &gt;* &#x60;ManualCorrected&#x60; - manual booking/adjustment by Adyen. &gt;* &#x60;Payout&#x60; - a payout. &gt;* &#x60;PayoutReversed&#x60; - a reversed payout. &gt;* &#x60;PendingFundTransfer&#x60; - a pending transfer of funds from one account to another. &gt;* &#x60;FundTransfer&#x60; - a transfer of funds from one account to another.
   * @return transactionStatuses
   */
  @javax.annotation.Nullable
  public List<TransactionStatusesEnum> getTransactionStatuses() {
    return transactionStatuses;
  }

  public void setTransactionStatuses(List<TransactionStatusesEnum> transactionStatuses) {
    this.transactionStatuses = transactionStatuses;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AccountHolderTransactionListRequest accountHolderTransactionListRequest = (AccountHolderTransactionListRequest) o;
    return Objects.equals(this.accountHolderCode, accountHolderTransactionListRequest.accountHolderCode) &&
        Objects.equals(this.transactionListsPerAccount, accountHolderTransactionListRequest.transactionListsPerAccount) &&
        Objects.equals(this.transactionStatuses, accountHolderTransactionListRequest.transactionStatuses);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountHolderCode, transactionListsPerAccount, transactionStatuses);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AccountHolderTransactionListRequest {\n");
    sb.append("    accountHolderCode: ").append(toIndentedString(accountHolderCode)).append("\n");
    sb.append("    transactionListsPerAccount: ").append(toIndentedString(transactionListsPerAccount)).append("\n");
    sb.append("    transactionStatuses: ").append(toIndentedString(transactionStatuses)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accountHolderCode");
    openapiFields.add("transactionListsPerAccount");
    openapiFields.add("transactionStatuses");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("accountHolderCode");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AccountHolderTransactionListRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AccountHolderTransactionListRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AccountHolderTransactionListRequest is not found in the empty JSON string", AccountHolderTransactionListRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AccountHolderTransactionListRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AccountHolderTransactionListRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AccountHolderTransactionListRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("accountHolderCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountHolderCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountHolderCode").toString()));
      }
      if (jsonObj.get("transactionListsPerAccount") != null && !jsonObj.get("transactionListsPerAccount").isJsonNull()) {
        JsonArray jsonArraytransactionListsPerAccount = jsonObj.getAsJsonArray("transactionListsPerAccount");
        if (jsonArraytransactionListsPerAccount != null) {
          // ensure the json data is an array
          if (!jsonObj.get("transactionListsPerAccount").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `transactionListsPerAccount` to be an array in the JSON string but got `%s`", jsonObj.get("transactionListsPerAccount").toString()));
          }

          // validate the optional field `transactionListsPerAccount` (array)
          for (int i = 0; i < jsonArraytransactionListsPerAccount.size(); i++) {
            TransactionListForAccountWrapper.validateJsonElement(jsonArraytransactionListsPerAccount.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("transactionStatuses") != null && !jsonObj.get("transactionStatuses").isJsonNull() && !jsonObj.get("transactionStatuses").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `transactionStatuses` to be an array in the JSON string but got `%s`", jsonObj.get("transactionStatuses").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AccountHolderTransactionListRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AccountHolderTransactionListRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AccountHolderTransactionListRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AccountHolderTransactionListRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<AccountHolderTransactionListRequest>() {
           @Override
           public void write(JsonWriter out, AccountHolderTransactionListRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AccountHolderTransactionListRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AccountHolderTransactionListRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AccountHolderTransactionListRequest
   * @throws IOException if the JSON string is invalid with respect to AccountHolderTransactionListRequest
   */
  public static AccountHolderTransactionListRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AccountHolderTransactionListRequest.class);
  }

  /**
   * Convert an instance of AccountHolderTransactionListRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

