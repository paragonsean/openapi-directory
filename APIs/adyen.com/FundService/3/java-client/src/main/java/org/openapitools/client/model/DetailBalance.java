/*
 * Fund API
 * This API is used for the classic integration. If you are just starting your implementation, refer to our [new integration guide](https://docs.adyen.com/marketplaces-and-platforms) instead.  The Fund API provides endpoints for managing the funds in the accounts on your platform. These management operations include, for example, the transfer of funds from one account to another, the payout of funds to an account holder, and the retrieval of balances in an account.  For more information, refer to our [documentation](https://docs.adyen.com/marketplaces-and-platforms/classic/). ## Authentication Your Adyen contact will provide your API credential and an API key. To connect to the API, add an `X-API-Key` header with the API key as the value, for example:   ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ```  Alternatively, you can use the username and password to connect to the API using basic authentication. For example:  ``` curl -U \"ws@MarketPlace.YOUR_PLATFORM_ACCOUNT\":\"YOUR_WS_PASSWORD\" \\ -H \"Content-Type: application/json\" \\ ... ``` When going live, you need to generate new web service user credentials to access the [live endpoints](https://docs.adyen.com/development-resources/live-endpoints).  ## Versioning The Fund API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://cal-test.adyen.com/cal/services/Fund/v3/accountHolderBalance ```
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AmountWrapper;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DetailBalance
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:14:44.076466-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DetailBalance {
  public static final String SERIALIZED_NAME_BALANCE = "balance";
  @SerializedName(SERIALIZED_NAME_BALANCE)
  private List<AmountWrapper> balance = new ArrayList<>();

  public static final String SERIALIZED_NAME_PENDING_BALANCE = "pendingBalance";
  @SerializedName(SERIALIZED_NAME_PENDING_BALANCE)
  private List<AmountWrapper> pendingBalance = new ArrayList<>();

  public DetailBalance() {
  }

  public DetailBalance balance(List<AmountWrapper> balance) {
    this.balance = balance;
    return this;
  }

  public DetailBalance addBalanceItem(AmountWrapper balanceItem) {
    if (this.balance == null) {
      this.balance = new ArrayList<>();
    }
    this.balance.add(balanceItem);
    return this;
  }

  /**
   * The list of balances held by the account.
   * @return balance
   */
  @javax.annotation.Nullable
  public List<AmountWrapper> getBalance() {
    return balance;
  }

  public void setBalance(List<AmountWrapper> balance) {
    this.balance = balance;
  }


  public DetailBalance pendingBalance(List<AmountWrapper> pendingBalance) {
    this.pendingBalance = pendingBalance;
    return this;
  }

  public DetailBalance addPendingBalanceItem(AmountWrapper pendingBalanceItem) {
    if (this.pendingBalance == null) {
      this.pendingBalance = new ArrayList<>();
    }
    this.pendingBalance.add(pendingBalanceItem);
    return this;
  }

  /**
   * The list of pending balances held by the account.
   * @return pendingBalance
   */
  @javax.annotation.Nullable
  public List<AmountWrapper> getPendingBalance() {
    return pendingBalance;
  }

  public void setPendingBalance(List<AmountWrapper> pendingBalance) {
    this.pendingBalance = pendingBalance;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DetailBalance detailBalance = (DetailBalance) o;
    return Objects.equals(this.balance, detailBalance.balance) &&
        Objects.equals(this.pendingBalance, detailBalance.pendingBalance);
  }

  @Override
  public int hashCode() {
    return Objects.hash(balance, pendingBalance);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DetailBalance {\n");
    sb.append("    balance: ").append(toIndentedString(balance)).append("\n");
    sb.append("    pendingBalance: ").append(toIndentedString(pendingBalance)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("balance");
    openapiFields.add("pendingBalance");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DetailBalance
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DetailBalance.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DetailBalance is not found in the empty JSON string", DetailBalance.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DetailBalance.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DetailBalance` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("balance") != null && !jsonObj.get("balance").isJsonNull()) {
        JsonArray jsonArraybalance = jsonObj.getAsJsonArray("balance");
        if (jsonArraybalance != null) {
          // ensure the json data is an array
          if (!jsonObj.get("balance").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `balance` to be an array in the JSON string but got `%s`", jsonObj.get("balance").toString()));
          }

          // validate the optional field `balance` (array)
          for (int i = 0; i < jsonArraybalance.size(); i++) {
            AmountWrapper.validateJsonElement(jsonArraybalance.get(i));
          };
        }
      }
      if (jsonObj.get("pendingBalance") != null && !jsonObj.get("pendingBalance").isJsonNull()) {
        JsonArray jsonArraypendingBalance = jsonObj.getAsJsonArray("pendingBalance");
        if (jsonArraypendingBalance != null) {
          // ensure the json data is an array
          if (!jsonObj.get("pendingBalance").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `pendingBalance` to be an array in the JSON string but got `%s`", jsonObj.get("pendingBalance").toString()));
          }

          // validate the optional field `pendingBalance` (array)
          for (int i = 0; i < jsonArraypendingBalance.size(); i++) {
            AmountWrapper.validateJsonElement(jsonArraypendingBalance.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DetailBalance.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DetailBalance' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DetailBalance> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DetailBalance.class));

       return (TypeAdapter<T>) new TypeAdapter<DetailBalance>() {
           @Override
           public void write(JsonWriter out, DetailBalance value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DetailBalance read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DetailBalance given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DetailBalance
   * @throws IOException if the JSON string is invalid with respect to DetailBalance
   */
  public static DetailBalance fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DetailBalance.class);
  }

  /**
   * Convert an instance of DetailBalance to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

