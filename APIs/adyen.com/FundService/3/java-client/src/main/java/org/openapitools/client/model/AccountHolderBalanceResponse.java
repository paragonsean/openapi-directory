/*
 * Fund API
 * This API is used for the classic integration. If you are just starting your implementation, refer to our [new integration guide](https://docs.adyen.com/marketplaces-and-platforms) instead.  The Fund API provides endpoints for managing the funds in the accounts on your platform. These management operations include, for example, the transfer of funds from one account to another, the payout of funds to an account holder, and the retrieval of balances in an account.  For more information, refer to our [documentation](https://docs.adyen.com/marketplaces-and-platforms/classic/). ## Authentication Your Adyen contact will provide your API credential and an API key. To connect to the API, add an `X-API-Key` header with the API key as the value, for example:   ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ```  Alternatively, you can use the username and password to connect to the API using basic authentication. For example:  ``` curl -U \"ws@MarketPlace.YOUR_PLATFORM_ACCOUNT\":\"YOUR_WS_PASSWORD\" \\ -H \"Content-Type: application/json\" \\ ... ``` When going live, you need to generate new web service user credentials to access the [live endpoints](https://docs.adyen.com/development-resources/live-endpoints).  ## Versioning The Fund API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://cal-test.adyen.com/cal/services/Fund/v3/accountHolderBalance ```
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AccountDetailBalanceWrapper;
import org.openapitools.client.model.DetailBalance;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AccountHolderBalanceResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:14:44.076466-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AccountHolderBalanceResponse {
  public static final String SERIALIZED_NAME_BALANCE_PER_ACCOUNT = "balancePerAccount";
  @SerializedName(SERIALIZED_NAME_BALANCE_PER_ACCOUNT)
  private List<AccountDetailBalanceWrapper> balancePerAccount = new ArrayList<>();

  public static final String SERIALIZED_NAME_PSP_REFERENCE = "pspReference";
  @SerializedName(SERIALIZED_NAME_PSP_REFERENCE)
  private String pspReference;

  public static final String SERIALIZED_NAME_RESULT_CODE = "resultCode";
  @SerializedName(SERIALIZED_NAME_RESULT_CODE)
  private String resultCode;

  public static final String SERIALIZED_NAME_SUBMITTED_ASYNC = "submittedAsync";
  @SerializedName(SERIALIZED_NAME_SUBMITTED_ASYNC)
  private Boolean submittedAsync;

  public static final String SERIALIZED_NAME_TOTAL_BALANCE = "totalBalance";
  @SerializedName(SERIALIZED_NAME_TOTAL_BALANCE)
  private DetailBalance totalBalance;

  public AccountHolderBalanceResponse() {
  }

  public AccountHolderBalanceResponse balancePerAccount(List<AccountDetailBalanceWrapper> balancePerAccount) {
    this.balancePerAccount = balancePerAccount;
    return this;
  }

  public AccountHolderBalanceResponse addBalancePerAccountItem(AccountDetailBalanceWrapper balancePerAccountItem) {
    if (this.balancePerAccount == null) {
      this.balancePerAccount = new ArrayList<>();
    }
    this.balancePerAccount.add(balancePerAccountItem);
    return this;
  }

  /**
   * A list of each account and their balances.
   * @return balancePerAccount
   */
  @javax.annotation.Nullable
  public List<AccountDetailBalanceWrapper> getBalancePerAccount() {
    return balancePerAccount;
  }

  public void setBalancePerAccount(List<AccountDetailBalanceWrapper> balancePerAccount) {
    this.balancePerAccount = balancePerAccount;
  }


  public AccountHolderBalanceResponse pspReference(String pspReference) {
    this.pspReference = pspReference;
    return this;
  }

  /**
   * The reference of a request. Can be used to uniquely identify the request.
   * @return pspReference
   */
  @javax.annotation.Nullable
  public String getPspReference() {
    return pspReference;
  }

  public void setPspReference(String pspReference) {
    this.pspReference = pspReference;
  }


  public AccountHolderBalanceResponse resultCode(String resultCode) {
    this.resultCode = resultCode;
    return this;
  }

  /**
   * The result code.
   * @return resultCode
   */
  @javax.annotation.Nullable
  public String getResultCode() {
    return resultCode;
  }

  public void setResultCode(String resultCode) {
    this.resultCode = resultCode;
  }


  public AccountHolderBalanceResponse submittedAsync(Boolean submittedAsync) {
    this.submittedAsync = submittedAsync;
    return this;
  }

  /**
   * Indicates whether the request is processed asynchronously. Depending on the request&#39;s platform settings, the following scenarios may be applied: * **true**: The request is queued and will be executed when the providing service is available in the order in which the requests are received. * **false**: The processing of the request is immediately attempted; it may result in an error if the providing service is unavailable.
   * @return submittedAsync
   */
  @javax.annotation.Nullable
  public Boolean getSubmittedAsync() {
    return submittedAsync;
  }

  public void setSubmittedAsync(Boolean submittedAsync) {
    this.submittedAsync = submittedAsync;
  }


  public AccountHolderBalanceResponse totalBalance(DetailBalance totalBalance) {
    this.totalBalance = totalBalance;
    return this;
  }

  /**
   * The total balance of the account holder.
   * @return totalBalance
   */
  @javax.annotation.Nullable
  public DetailBalance getTotalBalance() {
    return totalBalance;
  }

  public void setTotalBalance(DetailBalance totalBalance) {
    this.totalBalance = totalBalance;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AccountHolderBalanceResponse accountHolderBalanceResponse = (AccountHolderBalanceResponse) o;
    return Objects.equals(this.balancePerAccount, accountHolderBalanceResponse.balancePerAccount) &&
        Objects.equals(this.pspReference, accountHolderBalanceResponse.pspReference) &&
        Objects.equals(this.resultCode, accountHolderBalanceResponse.resultCode) &&
        Objects.equals(this.submittedAsync, accountHolderBalanceResponse.submittedAsync) &&
        Objects.equals(this.totalBalance, accountHolderBalanceResponse.totalBalance);
  }

  @Override
  public int hashCode() {
    return Objects.hash(balancePerAccount, pspReference, resultCode, submittedAsync, totalBalance);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AccountHolderBalanceResponse {\n");
    sb.append("    balancePerAccount: ").append(toIndentedString(balancePerAccount)).append("\n");
    sb.append("    pspReference: ").append(toIndentedString(pspReference)).append("\n");
    sb.append("    resultCode: ").append(toIndentedString(resultCode)).append("\n");
    sb.append("    submittedAsync: ").append(toIndentedString(submittedAsync)).append("\n");
    sb.append("    totalBalance: ").append(toIndentedString(totalBalance)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("balancePerAccount");
    openapiFields.add("pspReference");
    openapiFields.add("resultCode");
    openapiFields.add("submittedAsync");
    openapiFields.add("totalBalance");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AccountHolderBalanceResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AccountHolderBalanceResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AccountHolderBalanceResponse is not found in the empty JSON string", AccountHolderBalanceResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AccountHolderBalanceResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AccountHolderBalanceResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("balancePerAccount") != null && !jsonObj.get("balancePerAccount").isJsonNull()) {
        JsonArray jsonArraybalancePerAccount = jsonObj.getAsJsonArray("balancePerAccount");
        if (jsonArraybalancePerAccount != null) {
          // ensure the json data is an array
          if (!jsonObj.get("balancePerAccount").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `balancePerAccount` to be an array in the JSON string but got `%s`", jsonObj.get("balancePerAccount").toString()));
          }

          // validate the optional field `balancePerAccount` (array)
          for (int i = 0; i < jsonArraybalancePerAccount.size(); i++) {
            AccountDetailBalanceWrapper.validateJsonElement(jsonArraybalancePerAccount.get(i));
          };
        }
      }
      if ((jsonObj.get("pspReference") != null && !jsonObj.get("pspReference").isJsonNull()) && !jsonObj.get("pspReference").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pspReference` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pspReference").toString()));
      }
      if ((jsonObj.get("resultCode") != null && !jsonObj.get("resultCode").isJsonNull()) && !jsonObj.get("resultCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resultCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resultCode").toString()));
      }
      // validate the optional field `totalBalance`
      if (jsonObj.get("totalBalance") != null && !jsonObj.get("totalBalance").isJsonNull()) {
        DetailBalance.validateJsonElement(jsonObj.get("totalBalance"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AccountHolderBalanceResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AccountHolderBalanceResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AccountHolderBalanceResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AccountHolderBalanceResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<AccountHolderBalanceResponse>() {
           @Override
           public void write(JsonWriter out, AccountHolderBalanceResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AccountHolderBalanceResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AccountHolderBalanceResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AccountHolderBalanceResponse
   * @throws IOException if the JSON string is invalid with respect to AccountHolderBalanceResponse
   */
  public static AccountHolderBalanceResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AccountHolderBalanceResponse.class);
  }

  /**
   * Convert an instance of AccountHolderBalanceResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

