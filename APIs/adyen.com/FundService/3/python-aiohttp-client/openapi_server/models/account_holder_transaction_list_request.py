# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.transaction_list_for_account_wrapper import TransactionListForAccountWrapper
from openapi_server import util


class AccountHolderTransactionListRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_holder_code: str=None, transaction_lists_per_account: List[TransactionListForAccountWrapper]=None, transaction_statuses: List[str]=None):
        """AccountHolderTransactionListRequest - a model defined in OpenAPI

        :param account_holder_code: The account_holder_code of this AccountHolderTransactionListRequest.
        :param transaction_lists_per_account: The transaction_lists_per_account of this AccountHolderTransactionListRequest.
        :param transaction_statuses: The transaction_statuses of this AccountHolderTransactionListRequest.
        """
        self.openapi_types = {
            'account_holder_code': str,
            'transaction_lists_per_account': List[TransactionListForAccountWrapper],
            'transaction_statuses': List[str]
        }

        self.attribute_map = {
            'account_holder_code': 'accountHolderCode',
            'transaction_lists_per_account': 'transactionListsPerAccount',
            'transaction_statuses': 'transactionStatuses'
        }

        self._account_holder_code = account_holder_code
        self._transaction_lists_per_account = transaction_lists_per_account
        self._transaction_statuses = transaction_statuses

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AccountHolderTransactionListRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AccountHolderTransactionListRequest of this AccountHolderTransactionListRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_holder_code(self):
        """Gets the account_holder_code of this AccountHolderTransactionListRequest.

        The code of the account holder that owns the account(s) of which retrieve the transaction list.

        :return: The account_holder_code of this AccountHolderTransactionListRequest.
        :rtype: str
        """
        return self._account_holder_code

    @account_holder_code.setter
    def account_holder_code(self, account_holder_code):
        """Sets the account_holder_code of this AccountHolderTransactionListRequest.

        The code of the account holder that owns the account(s) of which retrieve the transaction list.

        :param account_holder_code: The account_holder_code of this AccountHolderTransactionListRequest.
        :type account_holder_code: str
        """
        if account_holder_code is None:
            raise ValueError("Invalid value for `account_holder_code`, must not be `None`")

        self._account_holder_code = account_holder_code

    @property
    def transaction_lists_per_account(self):
        """Gets the transaction_lists_per_account of this AccountHolderTransactionListRequest.

        A list of accounts to include in the transaction list. If left blank, the last fifty (50) transactions for all accounts of the account holder will be included.

        :return: The transaction_lists_per_account of this AccountHolderTransactionListRequest.
        :rtype: List[TransactionListForAccountWrapper]
        """
        return self._transaction_lists_per_account

    @transaction_lists_per_account.setter
    def transaction_lists_per_account(self, transaction_lists_per_account):
        """Sets the transaction_lists_per_account of this AccountHolderTransactionListRequest.

        A list of accounts to include in the transaction list. If left blank, the last fifty (50) transactions for all accounts of the account holder will be included.

        :param transaction_lists_per_account: The transaction_lists_per_account of this AccountHolderTransactionListRequest.
        :type transaction_lists_per_account: List[TransactionListForAccountWrapper]
        """

        self._transaction_lists_per_account = transaction_lists_per_account

    @property
    def transaction_statuses(self):
        """Gets the transaction_statuses of this AccountHolderTransactionListRequest.

        A list of statuses to include in the transaction list. If left blank, all transactions will be included. >Permitted values: >* `PendingCredit` - a pending balance credit. >* `CreditFailed` - a pending credit failure; the balance will not be credited. >* `Credited` - a credited balance. >* `PendingDebit` - a pending balance debit (e.g., a refund). >* `CreditClosed` - a pending credit closed; the balance will not be credited. >* `CreditSuspended` - a pending credit closed; the balance will not be credited. >* `DebitFailed` - a pending debit failure; the balance will not be debited. >* `Debited` - a debited balance (e.g., a refund). >* `DebitReversedReceived` - a pending refund reversal. >* `DebitedReversed` - a reversed refund. >* `ChargebackReceived` - a received chargeback request. >* `Chargeback` - a processed chargeback. >* `ChargebackReversedReceived` - a pending chargeback reversal. >* `ChargebackReversed` - a reversed chargeback. >* `Converted` - converted. >* `ManualCorrected` - manual booking/adjustment by Adyen. >* `Payout` - a payout. >* `PayoutReversed` - a reversed payout. >* `PendingFundTransfer` - a pending transfer of funds from one account to another. >* `FundTransfer` - a transfer of funds from one account to another.

        :return: The transaction_statuses of this AccountHolderTransactionListRequest.
        :rtype: List[str]
        """
        return self._transaction_statuses

    @transaction_statuses.setter
    def transaction_statuses(self, transaction_statuses):
        """Sets the transaction_statuses of this AccountHolderTransactionListRequest.

        A list of statuses to include in the transaction list. If left blank, all transactions will be included. >Permitted values: >* `PendingCredit` - a pending balance credit. >* `CreditFailed` - a pending credit failure; the balance will not be credited. >* `Credited` - a credited balance. >* `PendingDebit` - a pending balance debit (e.g., a refund). >* `CreditClosed` - a pending credit closed; the balance will not be credited. >* `CreditSuspended` - a pending credit closed; the balance will not be credited. >* `DebitFailed` - a pending debit failure; the balance will not be debited. >* `Debited` - a debited balance (e.g., a refund). >* `DebitReversedReceived` - a pending refund reversal. >* `DebitedReversed` - a reversed refund. >* `ChargebackReceived` - a received chargeback request. >* `Chargeback` - a processed chargeback. >* `ChargebackReversedReceived` - a pending chargeback reversal. >* `ChargebackReversed` - a reversed chargeback. >* `Converted` - converted. >* `ManualCorrected` - manual booking/adjustment by Adyen. >* `Payout` - a payout. >* `PayoutReversed` - a reversed payout. >* `PendingFundTransfer` - a pending transfer of funds from one account to another. >* `FundTransfer` - a transfer of funds from one account to another.

        :param transaction_statuses: The transaction_statuses of this AccountHolderTransactionListRequest.
        :type transaction_statuses: List[str]
        """
        allowed_values = ["BalanceNotPaidOutTransfer", "BalancePlatformSweep", "BalancePlatformSweepReturned", "Chargeback", "ChargebackCorrection", "ChargebackCorrectionReceived", "ChargebackReceived", "ChargebackReversed", "ChargebackReversedCorrection", "ChargebackReversedCorrectionReceived", "ChargebackReversedReceived", "Converted", "CreditClosed", "CreditFailed", "CreditReversed", "CreditReversedReceived", "CreditSuspended", "Credited", "DebitFailed", "DebitReversedReceived", "Debited", "DebitedReversed", "DepositCorrectionCredited", "DepositCorrectionDebited", "Fee", "FundTransfer", "FundTransferReversed", "InvoiceDeductionCredited", "InvoiceDeductionDebited", "ManualCorrected", "ManualCorrectionCredited", "ManualCorrectionDebited", "MerchantPayin", "MerchantPayinReversed", "Payout", "PayoutReversed", "PendingCredit", "PendingDebit", "PendingFundTransfer", "ReCredited", "ReCreditedReceived", "SecondChargeback", "SecondChargebackCorrection", "SecondChargebackCorrectionReceived", "SecondChargebackReceived"]  # noqa: E501
        if not set(transaction_statuses).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `transaction_statuses` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(transaction_statuses) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._transaction_statuses = transaction_statuses
