# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.transaction_wrapper import TransactionWrapper
from openapi_server import util


class AccountTransactionList(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_code: str=None, has_next_page: bool=None, transactions: List[TransactionWrapper]=None):
        """AccountTransactionList - a model defined in OpenAPI

        :param account_code: The account_code of this AccountTransactionList.
        :param has_next_page: The has_next_page of this AccountTransactionList.
        :param transactions: The transactions of this AccountTransactionList.
        """
        self.openapi_types = {
            'account_code': str,
            'has_next_page': bool,
            'transactions': List[TransactionWrapper]
        }

        self.attribute_map = {
            'account_code': 'accountCode',
            'has_next_page': 'hasNextPage',
            'transactions': 'transactions'
        }

        self._account_code = account_code
        self._has_next_page = has_next_page
        self._transactions = transactions

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AccountTransactionList':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AccountTransactionList of this AccountTransactionList.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_code(self):
        """Gets the account_code of this AccountTransactionList.

        The code of the account.

        :return: The account_code of this AccountTransactionList.
        :rtype: str
        """
        return self._account_code

    @account_code.setter
    def account_code(self, account_code):
        """Sets the account_code of this AccountTransactionList.

        The code of the account.

        :param account_code: The account_code of this AccountTransactionList.
        :type account_code: str
        """

        self._account_code = account_code

    @property
    def has_next_page(self):
        """Gets the has_next_page of this AccountTransactionList.

        Indicates whether there is a next page of transactions available.

        :return: The has_next_page of this AccountTransactionList.
        :rtype: bool
        """
        return self._has_next_page

    @has_next_page.setter
    def has_next_page(self, has_next_page):
        """Sets the has_next_page of this AccountTransactionList.

        Indicates whether there is a next page of transactions available.

        :param has_next_page: The has_next_page of this AccountTransactionList.
        :type has_next_page: bool
        """

        self._has_next_page = has_next_page

    @property
    def transactions(self):
        """Gets the transactions of this AccountTransactionList.

        The list of transactions.

        :return: The transactions of this AccountTransactionList.
        :rtype: List[TransactionWrapper]
        """
        return self._transactions

    @transactions.setter
    def transactions(self, transactions):
        """Sets the transactions of this AccountTransactionList.

        The list of transactions.

        :param transactions: The transactions of this AccountTransactionList.
        :type transactions: List[TransactionWrapper]
        """

        self._transactions = transactions
