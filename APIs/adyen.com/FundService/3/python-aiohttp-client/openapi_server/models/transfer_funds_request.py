# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.amount import Amount
from openapi_server import util


class TransferFundsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amount: Amount=None, destination_account_code: str=None, merchant_reference: str=None, source_account_code: str=None, transfer_code: str=None):
        """TransferFundsRequest - a model defined in OpenAPI

        :param amount: The amount of this TransferFundsRequest.
        :param destination_account_code: The destination_account_code of this TransferFundsRequest.
        :param merchant_reference: The merchant_reference of this TransferFundsRequest.
        :param source_account_code: The source_account_code of this TransferFundsRequest.
        :param transfer_code: The transfer_code of this TransferFundsRequest.
        """
        self.openapi_types = {
            'amount': Amount,
            'destination_account_code': str,
            'merchant_reference': str,
            'source_account_code': str,
            'transfer_code': str
        }

        self.attribute_map = {
            'amount': 'amount',
            'destination_account_code': 'destinationAccountCode',
            'merchant_reference': 'merchantReference',
            'source_account_code': 'sourceAccountCode',
            'transfer_code': 'transferCode'
        }

        self._amount = amount
        self._destination_account_code = destination_account_code
        self._merchant_reference = merchant_reference
        self._source_account_code = source_account_code
        self._transfer_code = transfer_code

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TransferFundsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TransferFundsRequest of this TransferFundsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amount(self):
        """Gets the amount of this TransferFundsRequest.

        The amount to be transferred.

        :return: The amount of this TransferFundsRequest.
        :rtype: Amount
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this TransferFundsRequest.

        The amount to be transferred.

        :param amount: The amount of this TransferFundsRequest.
        :type amount: Amount
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")

        self._amount = amount

    @property
    def destination_account_code(self):
        """Gets the destination_account_code of this TransferFundsRequest.

        The code of the account to which the funds are to be credited. >The state of the Account Holder of this account must be Active.

        :return: The destination_account_code of this TransferFundsRequest.
        :rtype: str
        """
        return self._destination_account_code

    @destination_account_code.setter
    def destination_account_code(self, destination_account_code):
        """Sets the destination_account_code of this TransferFundsRequest.

        The code of the account to which the funds are to be credited. >The state of the Account Holder of this account must be Active.

        :param destination_account_code: The destination_account_code of this TransferFundsRequest.
        :type destination_account_code: str
        """
        if destination_account_code is None:
            raise ValueError("Invalid value for `destination_account_code`, must not be `None`")

        self._destination_account_code = destination_account_code

    @property
    def merchant_reference(self):
        """Gets the merchant_reference of this TransferFundsRequest.

        A value that can be supplied at the discretion of the executing user in order to link multiple transactions to one another.

        :return: The merchant_reference of this TransferFundsRequest.
        :rtype: str
        """
        return self._merchant_reference

    @merchant_reference.setter
    def merchant_reference(self, merchant_reference):
        """Sets the merchant_reference of this TransferFundsRequest.

        A value that can be supplied at the discretion of the executing user in order to link multiple transactions to one another.

        :param merchant_reference: The merchant_reference of this TransferFundsRequest.
        :type merchant_reference: str
        """

        self._merchant_reference = merchant_reference

    @property
    def source_account_code(self):
        """Gets the source_account_code of this TransferFundsRequest.

        The code of the account from which the funds are to be debited. >The state of the Account Holder of this account must be Active and allow payouts.

        :return: The source_account_code of this TransferFundsRequest.
        :rtype: str
        """
        return self._source_account_code

    @source_account_code.setter
    def source_account_code(self, source_account_code):
        """Sets the source_account_code of this TransferFundsRequest.

        The code of the account from which the funds are to be debited. >The state of the Account Holder of this account must be Active and allow payouts.

        :param source_account_code: The source_account_code of this TransferFundsRequest.
        :type source_account_code: str
        """
        if source_account_code is None:
            raise ValueError("Invalid value for `source_account_code`, must not be `None`")

        self._source_account_code = source_account_code

    @property
    def transfer_code(self):
        """Gets the transfer_code of this TransferFundsRequest.

        The code related to the type of transfer being performed. >The permitted codes differ for each platform account and are defined in their service level agreement.

        :return: The transfer_code of this TransferFundsRequest.
        :rtype: str
        """
        return self._transfer_code

    @transfer_code.setter
    def transfer_code(self, transfer_code):
        """Sets the transfer_code of this TransferFundsRequest.

        The code related to the type of transfer being performed. >The permitted codes differ for each platform account and are defined in their service level agreement.

        :param transfer_code: The transfer_code of this TransferFundsRequest.
        :type transfer_code: str
        """
        if transfer_code is None:
            raise ValueError("Invalid value for `transfer_code`, must not be `None`")

        self._transfer_code = transfer_code
