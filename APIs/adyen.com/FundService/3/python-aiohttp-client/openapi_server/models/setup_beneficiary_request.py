# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SetupBeneficiaryRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, destination_account_code: str=None, merchant_reference: str=None, source_account_code: str=None):
        """SetupBeneficiaryRequest - a model defined in OpenAPI

        :param destination_account_code: The destination_account_code of this SetupBeneficiaryRequest.
        :param merchant_reference: The merchant_reference of this SetupBeneficiaryRequest.
        :param source_account_code: The source_account_code of this SetupBeneficiaryRequest.
        """
        self.openapi_types = {
            'destination_account_code': str,
            'merchant_reference': str,
            'source_account_code': str
        }

        self.attribute_map = {
            'destination_account_code': 'destinationAccountCode',
            'merchant_reference': 'merchantReference',
            'source_account_code': 'sourceAccountCode'
        }

        self._destination_account_code = destination_account_code
        self._merchant_reference = merchant_reference
        self._source_account_code = source_account_code

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SetupBeneficiaryRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SetupBeneficiaryRequest of this SetupBeneficiaryRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def destination_account_code(self):
        """Gets the destination_account_code of this SetupBeneficiaryRequest.

        The destination account code.

        :return: The destination_account_code of this SetupBeneficiaryRequest.
        :rtype: str
        """
        return self._destination_account_code

    @destination_account_code.setter
    def destination_account_code(self, destination_account_code):
        """Sets the destination_account_code of this SetupBeneficiaryRequest.

        The destination account code.

        :param destination_account_code: The destination_account_code of this SetupBeneficiaryRequest.
        :type destination_account_code: str
        """
        if destination_account_code is None:
            raise ValueError("Invalid value for `destination_account_code`, must not be `None`")

        self._destination_account_code = destination_account_code

    @property
    def merchant_reference(self):
        """Gets the merchant_reference of this SetupBeneficiaryRequest.

        A value that can be supplied at the discretion of the executing user.

        :return: The merchant_reference of this SetupBeneficiaryRequest.
        :rtype: str
        """
        return self._merchant_reference

    @merchant_reference.setter
    def merchant_reference(self, merchant_reference):
        """Sets the merchant_reference of this SetupBeneficiaryRequest.

        A value that can be supplied at the discretion of the executing user.

        :param merchant_reference: The merchant_reference of this SetupBeneficiaryRequest.
        :type merchant_reference: str
        """

        self._merchant_reference = merchant_reference

    @property
    def source_account_code(self):
        """Gets the source_account_code of this SetupBeneficiaryRequest.

        The benefactor account.

        :return: The source_account_code of this SetupBeneficiaryRequest.
        :rtype: str
        """
        return self._source_account_code

    @source_account_code.setter
    def source_account_code(self, source_account_code):
        """Sets the source_account_code of this SetupBeneficiaryRequest.

        The benefactor account.

        :param source_account_code: The source_account_code of this SetupBeneficiaryRequest.
        :type source_account_code: str
        """
        if source_account_code is None:
            raise ValueError("Invalid value for `source_account_code`, must not be `None`")

        self._source_account_code = source_account_code
