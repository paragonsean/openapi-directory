/**
 * Fund API
 * This API is used for the classic integration. If you are just starting your implementation, refer to our [new integration guide](https://docs.adyen.com/marketplaces-and-platforms) instead.  The Fund API provides endpoints for managing the funds in the accounts on your platform. These management operations include, for example, the transfer of funds from one account to another, the payout of funds to an account holder, and the retrieval of balances in an account.  For more information, refer to our [documentation](https://docs.adyen.com/marketplaces-and-platforms/classic/). ## Authentication Your Adyen contact will provide your API credential and an API key. To connect to the API, add an `X-API-Key` header with the API key as the value, for example:   ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ```  Alternatively, you can use the username and password to connect to the API using basic authentication. For example:  ``` curl -U \"ws@MarketPlace.YOUR_PLATFORM_ACCOUNT\":\"YOUR_WS_PASSWORD\" \\ -H \"Content-Type: application/json\" \\ ... ``` When going live, you need to generate new web service user credentials to access the [live endpoints](https://docs.adyen.com/development-resources/live-endpoints).  ## Versioning The Fund API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://cal-test.adyen.com/cal/services/Fund/v3/accountHolderBalance ```
 *
 * The version of the OpenAPI document: 3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDebitAccountHolderRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDebitAccountHolderRequest::OAIDebitAccountHolderRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDebitAccountHolderRequest::OAIDebitAccountHolderRequest() {
    this->initializeModel();
}

OAIDebitAccountHolderRequest::~OAIDebitAccountHolderRequest() {}

void OAIDebitAccountHolderRequest::initializeModel() {

    m_account_holder_code_isSet = false;
    m_account_holder_code_isValid = false;

    m_amount_isSet = false;
    m_amount_isValid = false;

    m_bank_account_uuid_isSet = false;
    m_bank_account_uuid_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_merchant_account_isSet = false;
    m_merchant_account_isValid = false;

    m_splits_isSet = false;
    m_splits_isValid = false;
}

void OAIDebitAccountHolderRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDebitAccountHolderRequest::fromJsonObject(QJsonObject json) {

    m_account_holder_code_isValid = ::OpenAPI::fromJsonValue(m_account_holder_code, json[QString("accountHolderCode")]);
    m_account_holder_code_isSet = !json[QString("accountHolderCode")].isNull() && m_account_holder_code_isValid;

    m_amount_isValid = ::OpenAPI::fromJsonValue(m_amount, json[QString("amount")]);
    m_amount_isSet = !json[QString("amount")].isNull() && m_amount_isValid;

    m_bank_account_uuid_isValid = ::OpenAPI::fromJsonValue(m_bank_account_uuid, json[QString("bankAccountUUID")]);
    m_bank_account_uuid_isSet = !json[QString("bankAccountUUID")].isNull() && m_bank_account_uuid_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_merchant_account_isValid = ::OpenAPI::fromJsonValue(m_merchant_account, json[QString("merchantAccount")]);
    m_merchant_account_isSet = !json[QString("merchantAccount")].isNull() && m_merchant_account_isValid;

    m_splits_isValid = ::OpenAPI::fromJsonValue(m_splits, json[QString("splits")]);
    m_splits_isSet = !json[QString("splits")].isNull() && m_splits_isValid;
}

QString OAIDebitAccountHolderRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDebitAccountHolderRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_account_holder_code_isSet) {
        obj.insert(QString("accountHolderCode"), ::OpenAPI::toJsonValue(m_account_holder_code));
    }
    if (m_amount.isSet()) {
        obj.insert(QString("amount"), ::OpenAPI::toJsonValue(m_amount));
    }
    if (m_bank_account_uuid_isSet) {
        obj.insert(QString("bankAccountUUID"), ::OpenAPI::toJsonValue(m_bank_account_uuid));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_merchant_account_isSet) {
        obj.insert(QString("merchantAccount"), ::OpenAPI::toJsonValue(m_merchant_account));
    }
    if (m_splits.size() > 0) {
        obj.insert(QString("splits"), ::OpenAPI::toJsonValue(m_splits));
    }
    return obj;
}

QString OAIDebitAccountHolderRequest::getAccountHolderCode() const {
    return m_account_holder_code;
}
void OAIDebitAccountHolderRequest::setAccountHolderCode(const QString &account_holder_code) {
    m_account_holder_code = account_holder_code;
    m_account_holder_code_isSet = true;
}

bool OAIDebitAccountHolderRequest::is_account_holder_code_Set() const{
    return m_account_holder_code_isSet;
}

bool OAIDebitAccountHolderRequest::is_account_holder_code_Valid() const{
    return m_account_holder_code_isValid;
}

OAIAmount OAIDebitAccountHolderRequest::getAmount() const {
    return m_amount;
}
void OAIDebitAccountHolderRequest::setAmount(const OAIAmount &amount) {
    m_amount = amount;
    m_amount_isSet = true;
}

bool OAIDebitAccountHolderRequest::is_amount_Set() const{
    return m_amount_isSet;
}

bool OAIDebitAccountHolderRequest::is_amount_Valid() const{
    return m_amount_isValid;
}

QString OAIDebitAccountHolderRequest::getBankAccountUuid() const {
    return m_bank_account_uuid;
}
void OAIDebitAccountHolderRequest::setBankAccountUuid(const QString &bank_account_uuid) {
    m_bank_account_uuid = bank_account_uuid;
    m_bank_account_uuid_isSet = true;
}

bool OAIDebitAccountHolderRequest::is_bank_account_uuid_Set() const{
    return m_bank_account_uuid_isSet;
}

bool OAIDebitAccountHolderRequest::is_bank_account_uuid_Valid() const{
    return m_bank_account_uuid_isValid;
}

QString OAIDebitAccountHolderRequest::getDescription() const {
    return m_description;
}
void OAIDebitAccountHolderRequest::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIDebitAccountHolderRequest::is_description_Set() const{
    return m_description_isSet;
}

bool OAIDebitAccountHolderRequest::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIDebitAccountHolderRequest::getMerchantAccount() const {
    return m_merchant_account;
}
void OAIDebitAccountHolderRequest::setMerchantAccount(const QString &merchant_account) {
    m_merchant_account = merchant_account;
    m_merchant_account_isSet = true;
}

bool OAIDebitAccountHolderRequest::is_merchant_account_Set() const{
    return m_merchant_account_isSet;
}

bool OAIDebitAccountHolderRequest::is_merchant_account_Valid() const{
    return m_merchant_account_isValid;
}

QList<OAISplit> OAIDebitAccountHolderRequest::getSplits() const {
    return m_splits;
}
void OAIDebitAccountHolderRequest::setSplits(const QList<OAISplit> &splits) {
    m_splits = splits;
    m_splits_isSet = true;
}

bool OAIDebitAccountHolderRequest::is_splits_Set() const{
    return m_splits_isSet;
}

bool OAIDebitAccountHolderRequest::is_splits_Valid() const{
    return m_splits_isValid;
}

bool OAIDebitAccountHolderRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_holder_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_amount.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_bank_account_uuid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_merchant_account_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_splits.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDebitAccountHolderRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_account_holder_code_isValid && m_amount_isValid && m_bank_account_uuid_isValid && m_merchant_account_isValid && m_splits_isValid && true;
}

} // namespace OpenAPI
