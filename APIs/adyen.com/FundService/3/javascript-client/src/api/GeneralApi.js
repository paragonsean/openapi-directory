/**
 * Fund API
 * This API is used for the classic integration. If you are just starting your implementation, refer to our [new integration guide](https://docs.adyen.com/marketplaces-and-platforms) instead.  The Fund API provides endpoints for managing the funds in the accounts on your platform. These management operations include, for example, the transfer of funds from one account to another, the payout of funds to an account holder, and the retrieval of balances in an account.  For more information, refer to our [documentation](https://docs.adyen.com/marketplaces-and-platforms/classic/). ## Authentication Your Adyen contact will provide your API credential and an API key. To connect to the API, add an `X-API-Key` header with the API key as the value, for example:   ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ```  Alternatively, you can use the username and password to connect to the API using basic authentication. For example:  ``` curl -U \"ws@MarketPlace.YOUR_PLATFORM_ACCOUNT\":\"YOUR_WS_PASSWORD\" \\ -H \"Content-Type: application/json\" \\ ... ``` When going live, you need to generate new web service user credentials to access the [live endpoints](https://docs.adyen.com/development-resources/live-endpoints).  ## Versioning The Fund API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://cal-test.adyen.com/cal/services/Fund/v3/accountHolderBalance ```
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AccountHolderBalanceRequest from '../model/AccountHolderBalanceRequest';
import AccountHolderBalanceResponse from '../model/AccountHolderBalanceResponse';
import AccountHolderTransactionListRequest from '../model/AccountHolderTransactionListRequest';
import AccountHolderTransactionListResponse from '../model/AccountHolderTransactionListResponse';
import DebitAccountHolderRequest from '../model/DebitAccountHolderRequest';
import DebitAccountHolderResponse from '../model/DebitAccountHolderResponse';
import PayoutAccountHolderRequest from '../model/PayoutAccountHolderRequest';
import PayoutAccountHolderResponse from '../model/PayoutAccountHolderResponse';
import RefundFundsTransferRequest from '../model/RefundFundsTransferRequest';
import RefundFundsTransferResponse from '../model/RefundFundsTransferResponse';
import RefundNotPaidOutTransfersRequest from '../model/RefundNotPaidOutTransfersRequest';
import RefundNotPaidOutTransfersResponse from '../model/RefundNotPaidOutTransfersResponse';
import ServiceError from '../model/ServiceError';
import SetupBeneficiaryRequest from '../model/SetupBeneficiaryRequest';
import SetupBeneficiaryResponse from '../model/SetupBeneficiaryResponse';
import TransferFundsRequest from '../model/TransferFundsRequest';
import TransferFundsResponse from '../model/TransferFundsResponse';

/**
* General service.
* @module api/GeneralApi
* @version 3
*/
export default class GeneralApi {

    /**
    * Constructs a new GeneralApi. 
    * @alias module:api/GeneralApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the postAccountHolderBalance operation.
     * @callback module:api/GeneralApi~postAccountHolderBalanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AccountHolderBalanceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the balances of an account holder
     * Returns the account balances of an account holder. An account's balances are organized according by currencies. This mean that an account may have multiple balances: one for each currency.
     * @param {Object} opts Optional parameters
     * @param {module:model/AccountHolderBalanceRequest} [accountHolderBalanceRequest] 
     * @param {module:api/GeneralApi~postAccountHolderBalanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AccountHolderBalanceResponse}
     */
    postAccountHolderBalance(opts, callback) {
      opts = opts || {};
      let postBody = opts['accountHolderBalanceRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BasicAuth', 'ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AccountHolderBalanceResponse;
      return this.apiClient.callApi(
        '/accountHolderBalance', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postAccountHolderTransactionList operation.
     * @callback module:api/GeneralApi~postAccountHolderTransactionListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AccountHolderTransactionListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of transactions
     * Returns a list of transactions for an account holder's accounts. You can specify the accounts and transaction statuses to be included on the list. The call returns a maximum of 50 transactions for each account. To retrieve all transactions, you must make another call with the 'page' value incremented. Transactions are listed in chronological order, with the most recent transaction first.
     * @param {Object} opts Optional parameters
     * @param {module:model/AccountHolderTransactionListRequest} [accountHolderTransactionListRequest] 
     * @param {module:api/GeneralApi~postAccountHolderTransactionListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AccountHolderTransactionListResponse}
     */
    postAccountHolderTransactionList(opts, callback) {
      opts = opts || {};
      let postBody = opts['accountHolderTransactionListRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BasicAuth', 'ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AccountHolderTransactionListResponse;
      return this.apiClient.callApi(
        '/accountHolderTransactionList', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postDebitAccountHolder operation.
     * @callback module:api/GeneralApi~postDebitAccountHolderCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DebitAccountHolderResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Send a direct debit request
     * Sends a direct debit request to an account holder's bank account. If the direct debit is successful, the funds are settled in the accounts specified in the split instructions. Adyen sends the result of the direct debit in a [`DIRECT_DEBIT_INITIATED`](https://docs.adyen.com/api-explorer/#/NotificationService/latest/post/DIRECT_DEBIT_INITIATED) notification webhook.   To learn more about direct debits, see [Top up accounts](https://docs.adyen.com/marketplaces-and-platforms/classic/top-up-accounts).
     * @param {Object} opts Optional parameters
     * @param {module:model/DebitAccountHolderRequest} [debitAccountHolderRequest] 
     * @param {module:api/GeneralApi~postDebitAccountHolderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DebitAccountHolderResponse}
     */
    postDebitAccountHolder(opts, callback) {
      opts = opts || {};
      let postBody = opts['debitAccountHolderRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BasicAuth', 'ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DebitAccountHolderResponse;
      return this.apiClient.callApi(
        '/debitAccountHolder', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postPayoutAccountHolder operation.
     * @callback module:api/GeneralApi~postPayoutAccountHolderCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PayoutAccountHolderResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Pay out from an account to the account holder
     * Pays out a specified amount from an account to the bank account of account holder.
     * @param {Object} opts Optional parameters
     * @param {module:model/PayoutAccountHolderRequest} [payoutAccountHolderRequest] 
     * @param {module:api/GeneralApi~postPayoutAccountHolderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PayoutAccountHolderResponse}
     */
    postPayoutAccountHolder(opts, callback) {
      opts = opts || {};
      let postBody = opts['payoutAccountHolderRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BasicAuth', 'ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PayoutAccountHolderResponse;
      return this.apiClient.callApi(
        '/payoutAccountHolder', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postRefundFundsTransfer operation.
     * @callback module:api/GeneralApi~postRefundFundsTransferCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RefundFundsTransferResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Refund a funds transfer
     * Refunds funds transferred from one account to another. Both accounts must be in the same platform, but can have different account holders. 
     * @param {Object} opts Optional parameters
     * @param {module:model/RefundFundsTransferRequest} [refundFundsTransferRequest] 
     * @param {module:api/GeneralApi~postRefundFundsTransferCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RefundFundsTransferResponse}
     */
    postRefundFundsTransfer(opts, callback) {
      opts = opts || {};
      let postBody = opts['refundFundsTransferRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BasicAuth', 'ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RefundFundsTransferResponse;
      return this.apiClient.callApi(
        '/refundFundsTransfer', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postRefundNotPaidOutTransfers operation.
     * @callback module:api/GeneralApi~postRefundNotPaidOutTransfersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RefundNotPaidOutTransfersResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Refund all transactions of an account since the most recent payout
     * Refunds all the transactions of an account that have taken place since the most recent payout. This request is on a account basis (as opposed to a payment basis), so only the portion of the payment that was made to the specified account is refunded. The commissions, fees, and payments to other accounts remain in the accounts to which they were sent as designated by the original payment's split details.
     * @param {Object} opts Optional parameters
     * @param {module:model/RefundNotPaidOutTransfersRequest} [refundNotPaidOutTransfersRequest] 
     * @param {module:api/GeneralApi~postRefundNotPaidOutTransfersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RefundNotPaidOutTransfersResponse}
     */
    postRefundNotPaidOutTransfers(opts, callback) {
      opts = opts || {};
      let postBody = opts['refundNotPaidOutTransfersRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BasicAuth', 'ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RefundNotPaidOutTransfersResponse;
      return this.apiClient.callApi(
        '/refundNotPaidOutTransfers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postSetupBeneficiary operation.
     * @callback module:api/GeneralApi~postSetupBeneficiaryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SetupBeneficiaryResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Designate a beneficiary account and transfer the benefactor's current balance
     * Defines a benefactor and a beneficiary relationship between two accounts. At the time of benefactor/beneficiary setup, the funds in the benefactor account are transferred to the beneficiary account, and any further payments to the benefactor account are automatically sent to the beneficiary account. A series of benefactor/beneficiaries may not exceed four beneficiaries and may not have a cycle in it.
     * @param {Object} opts Optional parameters
     * @param {module:model/SetupBeneficiaryRequest} [setupBeneficiaryRequest] 
     * @param {module:api/GeneralApi~postSetupBeneficiaryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SetupBeneficiaryResponse}
     */
    postSetupBeneficiary(opts, callback) {
      opts = opts || {};
      let postBody = opts['setupBeneficiaryRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BasicAuth', 'ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SetupBeneficiaryResponse;
      return this.apiClient.callApi(
        '/setupBeneficiary', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postTransferFunds operation.
     * @callback module:api/GeneralApi~postTransferFundsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TransferFundsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Transfer funds between platform accounts
     * Transfers funds from one account to another account. Both accounts must be in the same platform, but can have different account holders. The transfer must include a transfer code, which should be determined by the platform, in compliance with local regulations.
     * @param {Object} opts Optional parameters
     * @param {module:model/TransferFundsRequest} [transferFundsRequest] 
     * @param {module:api/GeneralApi~postTransferFundsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TransferFundsResponse}
     */
    postTransferFunds(opts, callback) {
      opts = opts || {};
      let postBody = opts['transferFundsRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BasicAuth', 'ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TransferFundsResponse;
      return this.apiClient.callApi(
        '/transferFunds', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
