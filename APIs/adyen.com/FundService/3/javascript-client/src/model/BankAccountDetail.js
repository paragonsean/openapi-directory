/**
 * Fund API
 * This API is used for the classic integration. If you are just starting your implementation, refer to our [new integration guide](https://docs.adyen.com/marketplaces-and-platforms) instead.  The Fund API provides endpoints for managing the funds in the accounts on your platform. These management operations include, for example, the transfer of funds from one account to another, the payout of funds to an account holder, and the retrieval of balances in an account.  For more information, refer to our [documentation](https://docs.adyen.com/marketplaces-and-platforms/classic/). ## Authentication Your Adyen contact will provide your API credential and an API key. To connect to the API, add an `X-API-Key` header with the API key as the value, for example:   ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ```  Alternatively, you can use the username and password to connect to the API using basic authentication. For example:  ``` curl -U \"ws@MarketPlace.YOUR_PLATFORM_ACCOUNT\":\"YOUR_WS_PASSWORD\" \\ -H \"Content-Type: application/json\" \\ ... ``` When going live, you need to generate new web service user credentials to access the [live endpoints](https://docs.adyen.com/development-resources/live-endpoints).  ## Versioning The Fund API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://cal-test.adyen.com/cal/services/Fund/v3/accountHolderBalance ```
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The BankAccountDetail model module.
 * @module model/BankAccountDetail
 * @version 3
 */
class BankAccountDetail {
    /**
     * Constructs a new <code>BankAccountDetail</code>.
     * @alias module:model/BankAccountDetail
     */
    constructor() { 
        
        BankAccountDetail.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>BankAccountDetail</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BankAccountDetail} obj Optional instance to populate.
     * @return {module:model/BankAccountDetail} The populated <code>BankAccountDetail</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BankAccountDetail();

            if (data.hasOwnProperty('accountNumber')) {
                obj['accountNumber'] = ApiClient.convertToType(data['accountNumber'], 'String');
            }
            if (data.hasOwnProperty('accountType')) {
                obj['accountType'] = ApiClient.convertToType(data['accountType'], 'String');
            }
            if (data.hasOwnProperty('bankAccountName')) {
                obj['bankAccountName'] = ApiClient.convertToType(data['bankAccountName'], 'String');
            }
            if (data.hasOwnProperty('bankAccountUUID')) {
                obj['bankAccountUUID'] = ApiClient.convertToType(data['bankAccountUUID'], 'String');
            }
            if (data.hasOwnProperty('bankBicSwift')) {
                obj['bankBicSwift'] = ApiClient.convertToType(data['bankBicSwift'], 'String');
            }
            if (data.hasOwnProperty('bankCity')) {
                obj['bankCity'] = ApiClient.convertToType(data['bankCity'], 'String');
            }
            if (data.hasOwnProperty('bankCode')) {
                obj['bankCode'] = ApiClient.convertToType(data['bankCode'], 'String');
            }
            if (data.hasOwnProperty('bankName')) {
                obj['bankName'] = ApiClient.convertToType(data['bankName'], 'String');
            }
            if (data.hasOwnProperty('branchCode')) {
                obj['branchCode'] = ApiClient.convertToType(data['branchCode'], 'String');
            }
            if (data.hasOwnProperty('checkCode')) {
                obj['checkCode'] = ApiClient.convertToType(data['checkCode'], 'String');
            }
            if (data.hasOwnProperty('countryCode')) {
                obj['countryCode'] = ApiClient.convertToType(data['countryCode'], 'String');
            }
            if (data.hasOwnProperty('currencyCode')) {
                obj['currencyCode'] = ApiClient.convertToType(data['currencyCode'], 'String');
            }
            if (data.hasOwnProperty('iban')) {
                obj['iban'] = ApiClient.convertToType(data['iban'], 'String');
            }
            if (data.hasOwnProperty('ownerCity')) {
                obj['ownerCity'] = ApiClient.convertToType(data['ownerCity'], 'String');
            }
            if (data.hasOwnProperty('ownerCountryCode')) {
                obj['ownerCountryCode'] = ApiClient.convertToType(data['ownerCountryCode'], 'String');
            }
            if (data.hasOwnProperty('ownerDateOfBirth')) {
                obj['ownerDateOfBirth'] = ApiClient.convertToType(data['ownerDateOfBirth'], 'String');
            }
            if (data.hasOwnProperty('ownerHouseNumberOrName')) {
                obj['ownerHouseNumberOrName'] = ApiClient.convertToType(data['ownerHouseNumberOrName'], 'String');
            }
            if (data.hasOwnProperty('ownerName')) {
                obj['ownerName'] = ApiClient.convertToType(data['ownerName'], 'String');
            }
            if (data.hasOwnProperty('ownerNationality')) {
                obj['ownerNationality'] = ApiClient.convertToType(data['ownerNationality'], 'String');
            }
            if (data.hasOwnProperty('ownerPostalCode')) {
                obj['ownerPostalCode'] = ApiClient.convertToType(data['ownerPostalCode'], 'String');
            }
            if (data.hasOwnProperty('ownerState')) {
                obj['ownerState'] = ApiClient.convertToType(data['ownerState'], 'String');
            }
            if (data.hasOwnProperty('ownerStreet')) {
                obj['ownerStreet'] = ApiClient.convertToType(data['ownerStreet'], 'String');
            }
            if (data.hasOwnProperty('primaryAccount')) {
                obj['primaryAccount'] = ApiClient.convertToType(data['primaryAccount'], 'Boolean');
            }
            if (data.hasOwnProperty('taxId')) {
                obj['taxId'] = ApiClient.convertToType(data['taxId'], 'String');
            }
            if (data.hasOwnProperty('urlForVerification')) {
                obj['urlForVerification'] = ApiClient.convertToType(data['urlForVerification'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BankAccountDetail</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BankAccountDetail</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['accountNumber'] && !(typeof data['accountNumber'] === 'string' || data['accountNumber'] instanceof String)) {
            throw new Error("Expected the field `accountNumber` to be a primitive type in the JSON string but got " + data['accountNumber']);
        }
        // ensure the json data is a string
        if (data['accountType'] && !(typeof data['accountType'] === 'string' || data['accountType'] instanceof String)) {
            throw new Error("Expected the field `accountType` to be a primitive type in the JSON string but got " + data['accountType']);
        }
        // ensure the json data is a string
        if (data['bankAccountName'] && !(typeof data['bankAccountName'] === 'string' || data['bankAccountName'] instanceof String)) {
            throw new Error("Expected the field `bankAccountName` to be a primitive type in the JSON string but got " + data['bankAccountName']);
        }
        // ensure the json data is a string
        if (data['bankAccountUUID'] && !(typeof data['bankAccountUUID'] === 'string' || data['bankAccountUUID'] instanceof String)) {
            throw new Error("Expected the field `bankAccountUUID` to be a primitive type in the JSON string but got " + data['bankAccountUUID']);
        }
        // ensure the json data is a string
        if (data['bankBicSwift'] && !(typeof data['bankBicSwift'] === 'string' || data['bankBicSwift'] instanceof String)) {
            throw new Error("Expected the field `bankBicSwift` to be a primitive type in the JSON string but got " + data['bankBicSwift']);
        }
        // ensure the json data is a string
        if (data['bankCity'] && !(typeof data['bankCity'] === 'string' || data['bankCity'] instanceof String)) {
            throw new Error("Expected the field `bankCity` to be a primitive type in the JSON string but got " + data['bankCity']);
        }
        // ensure the json data is a string
        if (data['bankCode'] && !(typeof data['bankCode'] === 'string' || data['bankCode'] instanceof String)) {
            throw new Error("Expected the field `bankCode` to be a primitive type in the JSON string but got " + data['bankCode']);
        }
        // ensure the json data is a string
        if (data['bankName'] && !(typeof data['bankName'] === 'string' || data['bankName'] instanceof String)) {
            throw new Error("Expected the field `bankName` to be a primitive type in the JSON string but got " + data['bankName']);
        }
        // ensure the json data is a string
        if (data['branchCode'] && !(typeof data['branchCode'] === 'string' || data['branchCode'] instanceof String)) {
            throw new Error("Expected the field `branchCode` to be a primitive type in the JSON string but got " + data['branchCode']);
        }
        // ensure the json data is a string
        if (data['checkCode'] && !(typeof data['checkCode'] === 'string' || data['checkCode'] instanceof String)) {
            throw new Error("Expected the field `checkCode` to be a primitive type in the JSON string but got " + data['checkCode']);
        }
        // ensure the json data is a string
        if (data['countryCode'] && !(typeof data['countryCode'] === 'string' || data['countryCode'] instanceof String)) {
            throw new Error("Expected the field `countryCode` to be a primitive type in the JSON string but got " + data['countryCode']);
        }
        // ensure the json data is a string
        if (data['currencyCode'] && !(typeof data['currencyCode'] === 'string' || data['currencyCode'] instanceof String)) {
            throw new Error("Expected the field `currencyCode` to be a primitive type in the JSON string but got " + data['currencyCode']);
        }
        // ensure the json data is a string
        if (data['iban'] && !(typeof data['iban'] === 'string' || data['iban'] instanceof String)) {
            throw new Error("Expected the field `iban` to be a primitive type in the JSON string but got " + data['iban']);
        }
        // ensure the json data is a string
        if (data['ownerCity'] && !(typeof data['ownerCity'] === 'string' || data['ownerCity'] instanceof String)) {
            throw new Error("Expected the field `ownerCity` to be a primitive type in the JSON string but got " + data['ownerCity']);
        }
        // ensure the json data is a string
        if (data['ownerCountryCode'] && !(typeof data['ownerCountryCode'] === 'string' || data['ownerCountryCode'] instanceof String)) {
            throw new Error("Expected the field `ownerCountryCode` to be a primitive type in the JSON string but got " + data['ownerCountryCode']);
        }
        // ensure the json data is a string
        if (data['ownerDateOfBirth'] && !(typeof data['ownerDateOfBirth'] === 'string' || data['ownerDateOfBirth'] instanceof String)) {
            throw new Error("Expected the field `ownerDateOfBirth` to be a primitive type in the JSON string but got " + data['ownerDateOfBirth']);
        }
        // ensure the json data is a string
        if (data['ownerHouseNumberOrName'] && !(typeof data['ownerHouseNumberOrName'] === 'string' || data['ownerHouseNumberOrName'] instanceof String)) {
            throw new Error("Expected the field `ownerHouseNumberOrName` to be a primitive type in the JSON string but got " + data['ownerHouseNumberOrName']);
        }
        // ensure the json data is a string
        if (data['ownerName'] && !(typeof data['ownerName'] === 'string' || data['ownerName'] instanceof String)) {
            throw new Error("Expected the field `ownerName` to be a primitive type in the JSON string but got " + data['ownerName']);
        }
        // ensure the json data is a string
        if (data['ownerNationality'] && !(typeof data['ownerNationality'] === 'string' || data['ownerNationality'] instanceof String)) {
            throw new Error("Expected the field `ownerNationality` to be a primitive type in the JSON string but got " + data['ownerNationality']);
        }
        // ensure the json data is a string
        if (data['ownerPostalCode'] && !(typeof data['ownerPostalCode'] === 'string' || data['ownerPostalCode'] instanceof String)) {
            throw new Error("Expected the field `ownerPostalCode` to be a primitive type in the JSON string but got " + data['ownerPostalCode']);
        }
        // ensure the json data is a string
        if (data['ownerState'] && !(typeof data['ownerState'] === 'string' || data['ownerState'] instanceof String)) {
            throw new Error("Expected the field `ownerState` to be a primitive type in the JSON string but got " + data['ownerState']);
        }
        // ensure the json data is a string
        if (data['ownerStreet'] && !(typeof data['ownerStreet'] === 'string' || data['ownerStreet'] instanceof String)) {
            throw new Error("Expected the field `ownerStreet` to be a primitive type in the JSON string but got " + data['ownerStreet']);
        }
        // ensure the json data is a string
        if (data['taxId'] && !(typeof data['taxId'] === 'string' || data['taxId'] instanceof String)) {
            throw new Error("Expected the field `taxId` to be a primitive type in the JSON string but got " + data['taxId']);
        }
        // ensure the json data is a string
        if (data['urlForVerification'] && !(typeof data['urlForVerification'] === 'string' || data['urlForVerification'] instanceof String)) {
            throw new Error("Expected the field `urlForVerification` to be a primitive type in the JSON string but got " + data['urlForVerification']);
        }

        return true;
    }


}



/**
 * The bank account number (without separators). >Refer to [Required information](https://docs.adyen.com/marketplaces-and-platforms/classic/verification-process/required-information) for details on field requirements.
 * @member {String} accountNumber
 */
BankAccountDetail.prototype['accountNumber'] = undefined;

/**
 * The type of bank account. Only applicable to bank accounts held in the USA. The permitted values are: `checking`, `savings`.  >Refer to [Required information](https://docs.adyen.com/marketplaces-and-platforms/classic/verification-process/required-information) for details on field requirements.
 * @member {String} accountType
 */
BankAccountDetail.prototype['accountType'] = undefined;

/**
 * The name of the bank account.
 * @member {String} bankAccountName
 */
BankAccountDetail.prototype['bankAccountName'] = undefined;

/**
 * The unique identifier (UUID) of the Bank Account. >If, during an account holder create or update request, this field is left blank (but other fields provided), a new Bank Account will be created with a procedurally-generated UUID.  >If, during an account holder create request, a UUID is provided, the creation of the Bank Account will fail while the creation of the account holder will continue.  >If, during an account holder update request, a UUID that is not correlated with an existing Bank Account is provided, the update of the account holder will fail.  >If, during an account holder update request, a UUID that is correlated with an existing Bank Account is provided, the existing Bank Account will be updated. 
 * @member {String} bankAccountUUID
 */
BankAccountDetail.prototype['bankAccountUUID'] = undefined;

/**
 * The bank identifier code. >Refer to [Required information](https://docs.adyen.com/marketplaces-and-platforms/classic/verification-process/required-information) for details on field requirements.
 * @member {String} bankBicSwift
 */
BankAccountDetail.prototype['bankBicSwift'] = undefined;

/**
 * The city in which the bank branch is located.  >Refer to [Required information](https://docs.adyen.com/marketplaces-and-platforms/classic/verification-process/required-information) for details on field requirements.
 * @member {String} bankCity
 */
BankAccountDetail.prototype['bankCity'] = undefined;

/**
 * The bank code of the banking institution with which the bank account is registered.  >Refer to [Required information](https://docs.adyen.com/marketplaces-and-platforms/classic/verification-process/required-information) for details on field requirements.
 * @member {String} bankCode
 */
BankAccountDetail.prototype['bankCode'] = undefined;

/**
 * The name of the banking institution with which the bank account is held.  >Refer to [Required information](https://docs.adyen.com/marketplaces-and-platforms/classic/verification-process/required-information) for details on field requirements.
 * @member {String} bankName
 */
BankAccountDetail.prototype['bankName'] = undefined;

/**
 * The branch code of the branch under which the bank account is registered. The value to be specified in this parameter depends on the country of the bank account: * United States - Routing number * United Kingdom - Sort code * Germany - Bankleitzahl >Refer to [Required information](https://docs.adyen.com/marketplaces-and-platforms/classic/verification-process/required-information) for details on field requirements.
 * @member {String} branchCode
 */
BankAccountDetail.prototype['branchCode'] = undefined;

/**
 * The check code of the bank account.  >Refer to [Required information](https://docs.adyen.com/marketplaces-and-platforms/classic/verification-process/required-information) for details on field requirements.
 * @member {String} checkCode
 */
BankAccountDetail.prototype['checkCode'] = undefined;

/**
 * The two-letter country code in which the bank account is registered. >The permitted country codes are defined in ISO-3166-1 alpha-2 (e.g. 'NL').  >Refer to [Required information](https://docs.adyen.com/marketplaces-and-platforms/classic/verification-process/required-information) for details on field requirements.
 * @member {String} countryCode
 */
BankAccountDetail.prototype['countryCode'] = undefined;

/**
 * The currency in which the bank account deals. >The permitted currency codes are defined in ISO-4217 (e.g. 'EUR'). 
 * @member {String} currencyCode
 */
BankAccountDetail.prototype['currencyCode'] = undefined;

/**
 * The international bank account number. >The IBAN standard is defined in ISO-13616.  >Refer to [Required information](https://docs.adyen.com/marketplaces-and-platforms/classic/verification-process/required-information) for details on field requirements.
 * @member {String} iban
 */
BankAccountDetail.prototype['iban'] = undefined;

/**
 * The city of residence of the bank account owner. >Refer to [Required information](https://docs.adyen.com/marketplaces-and-platforms/classic/verification-process/required-information) for details on field requirements.
 * @member {String} ownerCity
 */
BankAccountDetail.prototype['ownerCity'] = undefined;

/**
 * The country code of the country of residence of the bank account owner. >The permitted country codes are defined in ISO-3166-1 alpha-2 (e.g. 'NL').  >Refer to [Required information](https://docs.adyen.com/marketplaces-and-platforms/classic/verification-process/required-information) for details on field requirements.
 * @member {String} ownerCountryCode
 */
BankAccountDetail.prototype['ownerCountryCode'] = undefined;

/**
 * The date of birth of the bank account owner. The date should be in ISO-8601 format yyyy-mm-dd (e.g. 2000-01-31).
 * @member {String} ownerDateOfBirth
 */
BankAccountDetail.prototype['ownerDateOfBirth'] = undefined;

/**
 * The house name or number of the residence of the bank account owner. >Refer to [Required information](https://docs.adyen.com/marketplaces-and-platforms/classic/verification-process/required-information) for details on field requirements.
 * @member {String} ownerHouseNumberOrName
 */
BankAccountDetail.prototype['ownerHouseNumberOrName'] = undefined;

/**
 * The name of the bank account owner. >Refer to [Required information](https://docs.adyen.com/marketplaces-and-platforms/classic/verification-process/required-information) for details on field requirements.
 * @member {String} ownerName
 */
BankAccountDetail.prototype['ownerName'] = undefined;

/**
 * The country code of the country of nationality of the bank account owner. >The permitted country codes are defined in ISO-3166-1 alpha-2 (e.g. 'NL').  >Refer to [Required information](https://docs.adyen.com/marketplaces-and-platforms/classic/verification-process/required-information) for details on field requirements.
 * @member {String} ownerNationality
 */
BankAccountDetail.prototype['ownerNationality'] = undefined;

/**
 * The postal code of the residence of the bank account owner. >Refer to [Required information](https://docs.adyen.com/marketplaces-and-platforms/classic/verification-process/required-information) for details on field requirements.
 * @member {String} ownerPostalCode
 */
BankAccountDetail.prototype['ownerPostalCode'] = undefined;

/**
 * The state of residence of the bank account owner. >Refer to [Required information](https://docs.adyen.com/marketplaces-and-platforms/classic/verification-process/required-information) for details on field requirements.
 * @member {String} ownerState
 */
BankAccountDetail.prototype['ownerState'] = undefined;

/**
 * The street name of the residence of the bank account owner. >Refer to [Required information](https://docs.adyen.com/marketplaces-and-platforms/classic/verification-process/required-information) for details on field requirements.
 * @member {String} ownerStreet
 */
BankAccountDetail.prototype['ownerStreet'] = undefined;

/**
 * If set to true, the bank account is a primary account.
 * @member {Boolean} primaryAccount
 */
BankAccountDetail.prototype['primaryAccount'] = undefined;

/**
 * The tax ID number.  >Refer to [Required information](https://docs.adyen.com/marketplaces-and-platforms/classic/verification-process/required-information) for details on field requirements.
 * @member {String} taxId
 */
BankAccountDetail.prototype['taxId'] = undefined;

/**
 * The URL to be used for bank account verification. This may be generated on bank account creation.  >Refer to [Required information](https://docs.adyen.com/marketplaces-and-platforms/classic/verification-process/required-information) for details on field requirements.
 * @member {String} urlForVerification
 */
BankAccountDetail.prototype['urlForVerification'] = undefined;






export default BankAccountDetail;

