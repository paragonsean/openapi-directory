/**
 * Fund API
 * This API is used for the classic integration. If you are just starting your implementation, refer to our [new integration guide](https://docs.adyen.com/marketplaces-and-platforms) instead.  The Fund API provides endpoints for managing the funds in the accounts on your platform. These management operations include, for example, the transfer of funds from one account to another, the payout of funds to an account holder, and the retrieval of balances in an account.  For more information, refer to our [documentation](https://docs.adyen.com/marketplaces-and-platforms/classic/). ## Authentication Your Adyen contact will provide your API credential and an API key. To connect to the API, add an `X-API-Key` header with the API key as the value, for example:   ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ```  Alternatively, you can use the username and password to connect to the API using basic authentication. For example:  ``` curl -U \"ws@MarketPlace.YOUR_PLATFORM_ACCOUNT\":\"YOUR_WS_PASSWORD\" \\ -H \"Content-Type: application/json\" \\ ... ``` When going live, you need to generate new web service user credentials to access the [live endpoints](https://docs.adyen.com/development-resources/live-endpoints).  ## Versioning The Fund API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://cal-test.adyen.com/cal/services/Fund/v5/accountHolderBalance ```
 *
 * The version of the OpenAPI document: 5
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIErrorFieldType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIErrorFieldType::OAIErrorFieldType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIErrorFieldType::OAIErrorFieldType() {
    this->initializeModel();
}

OAIErrorFieldType::~OAIErrorFieldType() {}

void OAIErrorFieldType::initializeModel() {

    m_error_code_isSet = false;
    m_error_code_isValid = false;

    m_error_description_isSet = false;
    m_error_description_isValid = false;

    m_field_type_isSet = false;
    m_field_type_isValid = false;
}

void OAIErrorFieldType::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIErrorFieldType::fromJsonObject(QJsonObject json) {

    m_error_code_isValid = ::OpenAPI::fromJsonValue(m_error_code, json[QString("errorCode")]);
    m_error_code_isSet = !json[QString("errorCode")].isNull() && m_error_code_isValid;

    m_error_description_isValid = ::OpenAPI::fromJsonValue(m_error_description, json[QString("errorDescription")]);
    m_error_description_isSet = !json[QString("errorDescription")].isNull() && m_error_description_isValid;

    m_field_type_isValid = ::OpenAPI::fromJsonValue(m_field_type, json[QString("fieldType")]);
    m_field_type_isSet = !json[QString("fieldType")].isNull() && m_field_type_isValid;
}

QString OAIErrorFieldType::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIErrorFieldType::asJsonObject() const {
    QJsonObject obj;
    if (m_error_code_isSet) {
        obj.insert(QString("errorCode"), ::OpenAPI::toJsonValue(m_error_code));
    }
    if (m_error_description_isSet) {
        obj.insert(QString("errorDescription"), ::OpenAPI::toJsonValue(m_error_description));
    }
    if (m_field_type.isSet()) {
        obj.insert(QString("fieldType"), ::OpenAPI::toJsonValue(m_field_type));
    }
    return obj;
}

qint32 OAIErrorFieldType::getErrorCode() const {
    return m_error_code;
}
void OAIErrorFieldType::setErrorCode(const qint32 &error_code) {
    m_error_code = error_code;
    m_error_code_isSet = true;
}

bool OAIErrorFieldType::is_error_code_Set() const{
    return m_error_code_isSet;
}

bool OAIErrorFieldType::is_error_code_Valid() const{
    return m_error_code_isValid;
}

QString OAIErrorFieldType::getErrorDescription() const {
    return m_error_description;
}
void OAIErrorFieldType::setErrorDescription(const QString &error_description) {
    m_error_description = error_description;
    m_error_description_isSet = true;
}

bool OAIErrorFieldType::is_error_description_Set() const{
    return m_error_description_isSet;
}

bool OAIErrorFieldType::is_error_description_Valid() const{
    return m_error_description_isValid;
}

OAIFieldType OAIErrorFieldType::getFieldType() const {
    return m_field_type;
}
void OAIErrorFieldType::setFieldType(const OAIFieldType &field_type) {
    m_field_type = field_type;
    m_field_type_isSet = true;
}

bool OAIErrorFieldType::is_field_type_Set() const{
    return m_field_type_isSet;
}

bool OAIErrorFieldType::is_field_type_Valid() const{
    return m_field_type_isValid;
}

bool OAIErrorFieldType::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_error_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_field_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIErrorFieldType::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
