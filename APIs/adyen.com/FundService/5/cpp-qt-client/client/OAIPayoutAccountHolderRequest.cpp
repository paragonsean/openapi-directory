/**
 * Fund API
 * This API is used for the classic integration. If you are just starting your implementation, refer to our [new integration guide](https://docs.adyen.com/marketplaces-and-platforms) instead.  The Fund API provides endpoints for managing the funds in the accounts on your platform. These management operations include, for example, the transfer of funds from one account to another, the payout of funds to an account holder, and the retrieval of balances in an account.  For more information, refer to our [documentation](https://docs.adyen.com/marketplaces-and-platforms/classic/). ## Authentication Your Adyen contact will provide your API credential and an API key. To connect to the API, add an `X-API-Key` header with the API key as the value, for example:   ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ```  Alternatively, you can use the username and password to connect to the API using basic authentication. For example:  ``` curl -U \"ws@MarketPlace.YOUR_PLATFORM_ACCOUNT\":\"YOUR_WS_PASSWORD\" \\ -H \"Content-Type: application/json\" \\ ... ``` When going live, you need to generate new web service user credentials to access the [live endpoints](https://docs.adyen.com/development-resources/live-endpoints).  ## Versioning The Fund API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://cal-test.adyen.com/cal/services/Fund/v5/accountHolderBalance ```
 *
 * The version of the OpenAPI document: 5
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPayoutAccountHolderRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPayoutAccountHolderRequest::OAIPayoutAccountHolderRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPayoutAccountHolderRequest::OAIPayoutAccountHolderRequest() {
    this->initializeModel();
}

OAIPayoutAccountHolderRequest::~OAIPayoutAccountHolderRequest() {}

void OAIPayoutAccountHolderRequest::initializeModel() {

    m_account_code_isSet = false;
    m_account_code_isValid = false;

    m_account_holder_code_isSet = false;
    m_account_holder_code_isValid = false;

    m_amount_isSet = false;
    m_amount_isValid = false;

    m_bank_account_uuid_isSet = false;
    m_bank_account_uuid_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_merchant_reference_isSet = false;
    m_merchant_reference_isValid = false;

    m_payout_method_code_isSet = false;
    m_payout_method_code_isValid = false;

    m_payout_speed_isSet = false;
    m_payout_speed_isValid = false;
}

void OAIPayoutAccountHolderRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPayoutAccountHolderRequest::fromJsonObject(QJsonObject json) {

    m_account_code_isValid = ::OpenAPI::fromJsonValue(m_account_code, json[QString("accountCode")]);
    m_account_code_isSet = !json[QString("accountCode")].isNull() && m_account_code_isValid;

    m_account_holder_code_isValid = ::OpenAPI::fromJsonValue(m_account_holder_code, json[QString("accountHolderCode")]);
    m_account_holder_code_isSet = !json[QString("accountHolderCode")].isNull() && m_account_holder_code_isValid;

    m_amount_isValid = ::OpenAPI::fromJsonValue(m_amount, json[QString("amount")]);
    m_amount_isSet = !json[QString("amount")].isNull() && m_amount_isValid;

    m_bank_account_uuid_isValid = ::OpenAPI::fromJsonValue(m_bank_account_uuid, json[QString("bankAccountUUID")]);
    m_bank_account_uuid_isSet = !json[QString("bankAccountUUID")].isNull() && m_bank_account_uuid_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_merchant_reference_isValid = ::OpenAPI::fromJsonValue(m_merchant_reference, json[QString("merchantReference")]);
    m_merchant_reference_isSet = !json[QString("merchantReference")].isNull() && m_merchant_reference_isValid;

    m_payout_method_code_isValid = ::OpenAPI::fromJsonValue(m_payout_method_code, json[QString("payoutMethodCode")]);
    m_payout_method_code_isSet = !json[QString("payoutMethodCode")].isNull() && m_payout_method_code_isValid;

    m_payout_speed_isValid = ::OpenAPI::fromJsonValue(m_payout_speed, json[QString("payoutSpeed")]);
    m_payout_speed_isSet = !json[QString("payoutSpeed")].isNull() && m_payout_speed_isValid;
}

QString OAIPayoutAccountHolderRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPayoutAccountHolderRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_account_code_isSet) {
        obj.insert(QString("accountCode"), ::OpenAPI::toJsonValue(m_account_code));
    }
    if (m_account_holder_code_isSet) {
        obj.insert(QString("accountHolderCode"), ::OpenAPI::toJsonValue(m_account_holder_code));
    }
    if (m_amount.isSet()) {
        obj.insert(QString("amount"), ::OpenAPI::toJsonValue(m_amount));
    }
    if (m_bank_account_uuid_isSet) {
        obj.insert(QString("bankAccountUUID"), ::OpenAPI::toJsonValue(m_bank_account_uuid));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_merchant_reference_isSet) {
        obj.insert(QString("merchantReference"), ::OpenAPI::toJsonValue(m_merchant_reference));
    }
    if (m_payout_method_code_isSet) {
        obj.insert(QString("payoutMethodCode"), ::OpenAPI::toJsonValue(m_payout_method_code));
    }
    if (m_payout_speed_isSet) {
        obj.insert(QString("payoutSpeed"), ::OpenAPI::toJsonValue(m_payout_speed));
    }
    return obj;
}

QString OAIPayoutAccountHolderRequest::getAccountCode() const {
    return m_account_code;
}
void OAIPayoutAccountHolderRequest::setAccountCode(const QString &account_code) {
    m_account_code = account_code;
    m_account_code_isSet = true;
}

bool OAIPayoutAccountHolderRequest::is_account_code_Set() const{
    return m_account_code_isSet;
}

bool OAIPayoutAccountHolderRequest::is_account_code_Valid() const{
    return m_account_code_isValid;
}

QString OAIPayoutAccountHolderRequest::getAccountHolderCode() const {
    return m_account_holder_code;
}
void OAIPayoutAccountHolderRequest::setAccountHolderCode(const QString &account_holder_code) {
    m_account_holder_code = account_holder_code;
    m_account_holder_code_isSet = true;
}

bool OAIPayoutAccountHolderRequest::is_account_holder_code_Set() const{
    return m_account_holder_code_isSet;
}

bool OAIPayoutAccountHolderRequest::is_account_holder_code_Valid() const{
    return m_account_holder_code_isValid;
}

OAIAmount OAIPayoutAccountHolderRequest::getAmount() const {
    return m_amount;
}
void OAIPayoutAccountHolderRequest::setAmount(const OAIAmount &amount) {
    m_amount = amount;
    m_amount_isSet = true;
}

bool OAIPayoutAccountHolderRequest::is_amount_Set() const{
    return m_amount_isSet;
}

bool OAIPayoutAccountHolderRequest::is_amount_Valid() const{
    return m_amount_isValid;
}

QString OAIPayoutAccountHolderRequest::getBankAccountUuid() const {
    return m_bank_account_uuid;
}
void OAIPayoutAccountHolderRequest::setBankAccountUuid(const QString &bank_account_uuid) {
    m_bank_account_uuid = bank_account_uuid;
    m_bank_account_uuid_isSet = true;
}

bool OAIPayoutAccountHolderRequest::is_bank_account_uuid_Set() const{
    return m_bank_account_uuid_isSet;
}

bool OAIPayoutAccountHolderRequest::is_bank_account_uuid_Valid() const{
    return m_bank_account_uuid_isValid;
}

QString OAIPayoutAccountHolderRequest::getDescription() const {
    return m_description;
}
void OAIPayoutAccountHolderRequest::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIPayoutAccountHolderRequest::is_description_Set() const{
    return m_description_isSet;
}

bool OAIPayoutAccountHolderRequest::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIPayoutAccountHolderRequest::getMerchantReference() const {
    return m_merchant_reference;
}
void OAIPayoutAccountHolderRequest::setMerchantReference(const QString &merchant_reference) {
    m_merchant_reference = merchant_reference;
    m_merchant_reference_isSet = true;
}

bool OAIPayoutAccountHolderRequest::is_merchant_reference_Set() const{
    return m_merchant_reference_isSet;
}

bool OAIPayoutAccountHolderRequest::is_merchant_reference_Valid() const{
    return m_merchant_reference_isValid;
}

QString OAIPayoutAccountHolderRequest::getPayoutMethodCode() const {
    return m_payout_method_code;
}
void OAIPayoutAccountHolderRequest::setPayoutMethodCode(const QString &payout_method_code) {
    m_payout_method_code = payout_method_code;
    m_payout_method_code_isSet = true;
}

bool OAIPayoutAccountHolderRequest::is_payout_method_code_Set() const{
    return m_payout_method_code_isSet;
}

bool OAIPayoutAccountHolderRequest::is_payout_method_code_Valid() const{
    return m_payout_method_code_isValid;
}

QString OAIPayoutAccountHolderRequest::getPayoutSpeed() const {
    return m_payout_speed;
}
void OAIPayoutAccountHolderRequest::setPayoutSpeed(const QString &payout_speed) {
    m_payout_speed = payout_speed;
    m_payout_speed_isSet = true;
}

bool OAIPayoutAccountHolderRequest::is_payout_speed_Set() const{
    return m_payout_speed_isSet;
}

bool OAIPayoutAccountHolderRequest::is_payout_speed_Valid() const{
    return m_payout_speed_isValid;
}

bool OAIPayoutAccountHolderRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_account_holder_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_amount.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_bank_account_uuid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_merchant_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payout_method_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payout_speed_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPayoutAccountHolderRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_account_code_isValid && m_account_holder_code_isValid && true;
}

} // namespace OpenAPI
