# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TransactionListForAccount(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_code: str=None, page: int=None):
        """TransactionListForAccount - a model defined in OpenAPI

        :param account_code: The account_code of this TransactionListForAccount.
        :param page: The page of this TransactionListForAccount.
        """
        self.openapi_types = {
            'account_code': str,
            'page': int
        }

        self.attribute_map = {
            'account_code': 'accountCode',
            'page': 'page'
        }

        self._account_code = account_code
        self._page = page

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TransactionListForAccount':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TransactionListForAccount of this TransactionListForAccount.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_code(self):
        """Gets the account_code of this TransactionListForAccount.

        The account for which to retrieve the transactions.

        :return: The account_code of this TransactionListForAccount.
        :rtype: str
        """
        return self._account_code

    @account_code.setter
    def account_code(self, account_code):
        """Sets the account_code of this TransactionListForAccount.

        The account for which to retrieve the transactions.

        :param account_code: The account_code of this TransactionListForAccount.
        :type account_code: str
        """
        if account_code is None:
            raise ValueError("Invalid value for `account_code`, must not be `None`")

        self._account_code = account_code

    @property
    def page(self):
        """Gets the page of this TransactionListForAccount.

        The page of transactions to retrieve. Each page lists fifty (50) transactions.  The most recent transactions are included on page 1.

        :return: The page of this TransactionListForAccount.
        :rtype: int
        """
        return self._page

    @page.setter
    def page(self, page):
        """Sets the page of this TransactionListForAccount.

        The page of transactions to retrieve. Each page lists fifty (50) transactions.  The most recent transactions are included on page 1.

        :param page: The page of this TransactionListForAccount.
        :type page: int
        """
        if page is None:
            raise ValueError("Invalid value for `page`, must not be `None`")

        self._page = page
