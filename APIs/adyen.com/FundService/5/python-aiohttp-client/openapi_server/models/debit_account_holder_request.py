# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.amount import Amount
from openapi_server.models.split import Split
from openapi_server import util


class DebitAccountHolderRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_holder_code: str=None, amount: Amount=None, bank_account_uuid: str=None, description: str=None, merchant_account: str=None, splits: List[Split]=None):
        """DebitAccountHolderRequest - a model defined in OpenAPI

        :param account_holder_code: The account_holder_code of this DebitAccountHolderRequest.
        :param amount: The amount of this DebitAccountHolderRequest.
        :param bank_account_uuid: The bank_account_uuid of this DebitAccountHolderRequest.
        :param description: The description of this DebitAccountHolderRequest.
        :param merchant_account: The merchant_account of this DebitAccountHolderRequest.
        :param splits: The splits of this DebitAccountHolderRequest.
        """
        self.openapi_types = {
            'account_holder_code': str,
            'amount': Amount,
            'bank_account_uuid': str,
            'description': str,
            'merchant_account': str,
            'splits': List[Split]
        }

        self.attribute_map = {
            'account_holder_code': 'accountHolderCode',
            'amount': 'amount',
            'bank_account_uuid': 'bankAccountUUID',
            'description': 'description',
            'merchant_account': 'merchantAccount',
            'splits': 'splits'
        }

        self._account_holder_code = account_holder_code
        self._amount = amount
        self._bank_account_uuid = bank_account_uuid
        self._description = description
        self._merchant_account = merchant_account
        self._splits = splits

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DebitAccountHolderRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DebitAccountHolderRequest of this DebitAccountHolderRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_holder_code(self):
        """Gets the account_holder_code of this DebitAccountHolderRequest.

        The code of the account holder.

        :return: The account_holder_code of this DebitAccountHolderRequest.
        :rtype: str
        """
        return self._account_holder_code

    @account_holder_code.setter
    def account_holder_code(self, account_holder_code):
        """Sets the account_holder_code of this DebitAccountHolderRequest.

        The code of the account holder.

        :param account_holder_code: The account_holder_code of this DebitAccountHolderRequest.
        :type account_holder_code: str
        """
        if account_holder_code is None:
            raise ValueError("Invalid value for `account_holder_code`, must not be `None`")

        self._account_holder_code = account_holder_code

    @property
    def amount(self):
        """Gets the amount of this DebitAccountHolderRequest.

        The amount to be debited from the account holder's bank account.

        :return: The amount of this DebitAccountHolderRequest.
        :rtype: Amount
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this DebitAccountHolderRequest.

        The amount to be debited from the account holder's bank account.

        :param amount: The amount of this DebitAccountHolderRequest.
        :type amount: Amount
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")

        self._amount = amount

    @property
    def bank_account_uuid(self):
        """Gets the bank_account_uuid of this DebitAccountHolderRequest.

        The Adyen-generated unique alphanumeric identifier (UUID) of the account holder's bank account.

        :return: The bank_account_uuid of this DebitAccountHolderRequest.
        :rtype: str
        """
        return self._bank_account_uuid

    @bank_account_uuid.setter
    def bank_account_uuid(self, bank_account_uuid):
        """Sets the bank_account_uuid of this DebitAccountHolderRequest.

        The Adyen-generated unique alphanumeric identifier (UUID) of the account holder's bank account.

        :param bank_account_uuid: The bank_account_uuid of this DebitAccountHolderRequest.
        :type bank_account_uuid: str
        """
        if bank_account_uuid is None:
            raise ValueError("Invalid value for `bank_account_uuid`, must not be `None`")

        self._bank_account_uuid = bank_account_uuid

    @property
    def description(self):
        """Gets the description of this DebitAccountHolderRequest.

        A description of the direct debit. Maximum length: 35 characters.  Allowed characters: **a-z**, **A-Z**, **0-9**, and special characters **/?:().,'+ \";**.

        :return: The description of this DebitAccountHolderRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this DebitAccountHolderRequest.

        A description of the direct debit. Maximum length: 35 characters.  Allowed characters: **a-z**, **A-Z**, **0-9**, and special characters **/?:().,'+ \";**.

        :param description: The description of this DebitAccountHolderRequest.
        :type description: str
        """
        if description is not None and len(description) > 35:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `35`")

        self._description = description

    @property
    def merchant_account(self):
        """Gets the merchant_account of this DebitAccountHolderRequest.

        Your merchant account.

        :return: The merchant_account of this DebitAccountHolderRequest.
        :rtype: str
        """
        return self._merchant_account

    @merchant_account.setter
    def merchant_account(self, merchant_account):
        """Sets the merchant_account of this DebitAccountHolderRequest.

        Your merchant account.

        :param merchant_account: The merchant_account of this DebitAccountHolderRequest.
        :type merchant_account: str
        """
        if merchant_account is None:
            raise ValueError("Invalid value for `merchant_account`, must not be `None`")

        self._merchant_account = merchant_account

    @property
    def splits(self):
        """Gets the splits of this DebitAccountHolderRequest.

        Contains instructions on how to split the funds between the accounts in your platform. The request must have at least one split item.

        :return: The splits of this DebitAccountHolderRequest.
        :rtype: List[Split]
        """
        return self._splits

    @splits.setter
    def splits(self, splits):
        """Sets the splits of this DebitAccountHolderRequest.

        Contains instructions on how to split the funds between the accounts in your platform. The request must have at least one split item.

        :param splits: The splits of this DebitAccountHolderRequest.
        :type splits: List[Split]
        """
        if splits is None:
            raise ValueError("Invalid value for `splits`, must not be `None`")

        self._splits = splits
