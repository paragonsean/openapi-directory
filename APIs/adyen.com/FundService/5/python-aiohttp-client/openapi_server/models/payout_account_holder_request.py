# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.amount import Amount
from openapi_server import util


class PayoutAccountHolderRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_code: str=None, account_holder_code: str=None, amount: Amount=None, bank_account_uuid: str=None, description: str=None, merchant_reference: str=None, payout_method_code: str=None, payout_speed: str='STANDARD'):
        """PayoutAccountHolderRequest - a model defined in OpenAPI

        :param account_code: The account_code of this PayoutAccountHolderRequest.
        :param account_holder_code: The account_holder_code of this PayoutAccountHolderRequest.
        :param amount: The amount of this PayoutAccountHolderRequest.
        :param bank_account_uuid: The bank_account_uuid of this PayoutAccountHolderRequest.
        :param description: The description of this PayoutAccountHolderRequest.
        :param merchant_reference: The merchant_reference of this PayoutAccountHolderRequest.
        :param payout_method_code: The payout_method_code of this PayoutAccountHolderRequest.
        :param payout_speed: The payout_speed of this PayoutAccountHolderRequest.
        """
        self.openapi_types = {
            'account_code': str,
            'account_holder_code': str,
            'amount': Amount,
            'bank_account_uuid': str,
            'description': str,
            'merchant_reference': str,
            'payout_method_code': str,
            'payout_speed': str
        }

        self.attribute_map = {
            'account_code': 'accountCode',
            'account_holder_code': 'accountHolderCode',
            'amount': 'amount',
            'bank_account_uuid': 'bankAccountUUID',
            'description': 'description',
            'merchant_reference': 'merchantReference',
            'payout_method_code': 'payoutMethodCode',
            'payout_speed': 'payoutSpeed'
        }

        self._account_code = account_code
        self._account_holder_code = account_holder_code
        self._amount = amount
        self._bank_account_uuid = bank_account_uuid
        self._description = description
        self._merchant_reference = merchant_reference
        self._payout_method_code = payout_method_code
        self._payout_speed = payout_speed

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PayoutAccountHolderRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PayoutAccountHolderRequest of this PayoutAccountHolderRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_code(self):
        """Gets the account_code of this PayoutAccountHolderRequest.

        The code of the account from which the payout is to be made.

        :return: The account_code of this PayoutAccountHolderRequest.
        :rtype: str
        """
        return self._account_code

    @account_code.setter
    def account_code(self, account_code):
        """Sets the account_code of this PayoutAccountHolderRequest.

        The code of the account from which the payout is to be made.

        :param account_code: The account_code of this PayoutAccountHolderRequest.
        :type account_code: str
        """
        if account_code is None:
            raise ValueError("Invalid value for `account_code`, must not be `None`")

        self._account_code = account_code

    @property
    def account_holder_code(self):
        """Gets the account_holder_code of this PayoutAccountHolderRequest.

        The code of the Account Holder who owns the account from which the payout is to be made. The Account Holder is the party to which the payout will be made.

        :return: The account_holder_code of this PayoutAccountHolderRequest.
        :rtype: str
        """
        return self._account_holder_code

    @account_holder_code.setter
    def account_holder_code(self, account_holder_code):
        """Sets the account_holder_code of this PayoutAccountHolderRequest.

        The code of the Account Holder who owns the account from which the payout is to be made. The Account Holder is the party to which the payout will be made.

        :param account_holder_code: The account_holder_code of this PayoutAccountHolderRequest.
        :type account_holder_code: str
        """
        if account_holder_code is None:
            raise ValueError("Invalid value for `account_holder_code`, must not be `None`")

        self._account_holder_code = account_holder_code

    @property
    def amount(self):
        """Gets the amount of this PayoutAccountHolderRequest.

        An object containing the currency and value of the payout. If the account has multiple currencies, specify the currency to be used. If the `bankAccountUUID` is provided in the request, the currency supported by the bank is used. If the `payoutMethodCode` is provided in the request, the specified payout method is selected.

        :return: The amount of this PayoutAccountHolderRequest.
        :rtype: Amount
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this PayoutAccountHolderRequest.

        An object containing the currency and value of the payout. If the account has multiple currencies, specify the currency to be used. If the `bankAccountUUID` is provided in the request, the currency supported by the bank is used. If the `payoutMethodCode` is provided in the request, the specified payout method is selected.

        :param amount: The amount of this PayoutAccountHolderRequest.
        :type amount: Amount
        """

        self._amount = amount

    @property
    def bank_account_uuid(self):
        """Gets the bank_account_uuid of this PayoutAccountHolderRequest.

        The unique ID of the Bank Account held by the Account Holder to which the payout is to be made. If left blank, a bank account is automatically selected.

        :return: The bank_account_uuid of this PayoutAccountHolderRequest.
        :rtype: str
        """
        return self._bank_account_uuid

    @bank_account_uuid.setter
    def bank_account_uuid(self, bank_account_uuid):
        """Sets the bank_account_uuid of this PayoutAccountHolderRequest.

        The unique ID of the Bank Account held by the Account Holder to which the payout is to be made. If left blank, a bank account is automatically selected.

        :param bank_account_uuid: The bank_account_uuid of this PayoutAccountHolderRequest.
        :type bank_account_uuid: str
        """

        self._bank_account_uuid = bank_account_uuid

    @property
    def description(self):
        """Gets the description of this PayoutAccountHolderRequest.

        A description of the payout. Maximum 200 characters. Allowed: **abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789/?:().,'+ \";**

        :return: The description of this PayoutAccountHolderRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this PayoutAccountHolderRequest.

        A description of the payout. Maximum 200 characters. Allowed: **abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789/?:().,'+ \";**

        :param description: The description of this PayoutAccountHolderRequest.
        :type description: str
        """
        if description is not None and len(description) > 200:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `200`")

        self._description = description

    @property
    def merchant_reference(self):
        """Gets the merchant_reference of this PayoutAccountHolderRequest.

        A value that can be supplied at the discretion of the executing user in order to link multiple transactions to one another.

        :return: The merchant_reference of this PayoutAccountHolderRequest.
        :rtype: str
        """
        return self._merchant_reference

    @merchant_reference.setter
    def merchant_reference(self, merchant_reference):
        """Sets the merchant_reference of this PayoutAccountHolderRequest.

        A value that can be supplied at the discretion of the executing user in order to link multiple transactions to one another.

        :param merchant_reference: The merchant_reference of this PayoutAccountHolderRequest.
        :type merchant_reference: str
        """

        self._merchant_reference = merchant_reference

    @property
    def payout_method_code(self):
        """Gets the payout_method_code of this PayoutAccountHolderRequest.

        The unique ID of the payout method held by the Account Holder to which the payout is to be made. If left blank, a payout instrument is automatically selected.

        :return: The payout_method_code of this PayoutAccountHolderRequest.
        :rtype: str
        """
        return self._payout_method_code

    @payout_method_code.setter
    def payout_method_code(self, payout_method_code):
        """Sets the payout_method_code of this PayoutAccountHolderRequest.

        The unique ID of the payout method held by the Account Holder to which the payout is to be made. If left blank, a payout instrument is automatically selected.

        :param payout_method_code: The payout_method_code of this PayoutAccountHolderRequest.
        :type payout_method_code: str
        """

        self._payout_method_code = payout_method_code

    @property
    def payout_speed(self):
        """Gets the payout_speed of this PayoutAccountHolderRequest.

        Speed with which payouts for this account are processed. Permitted values: `STANDARD`, `SAME_DAY`.

        :return: The payout_speed of this PayoutAccountHolderRequest.
        :rtype: str
        """
        return self._payout_speed

    @payout_speed.setter
    def payout_speed(self, payout_speed):
        """Sets the payout_speed of this PayoutAccountHolderRequest.

        Speed with which payouts for this account are processed. Permitted values: `STANDARD`, `SAME_DAY`.

        :param payout_speed: The payout_speed of this PayoutAccountHolderRequest.
        :type payout_speed: str
        """
        allowed_values = ["INSTANT", "SAME_DAY", "STANDARD"]  # noqa: E501
        if payout_speed not in allowed_values:
            raise ValueError(
                "Invalid value for `payout_speed` ({0}), must be one of {1}"
                .format(payout_speed, allowed_values)
            )

        self._payout_speed = payout_speed
