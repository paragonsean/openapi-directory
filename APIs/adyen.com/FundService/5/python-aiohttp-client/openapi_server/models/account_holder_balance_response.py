# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.account_detail_balance import AccountDetailBalance
from openapi_server.models.detail_balance import DetailBalance
from openapi_server.models.error_field_type import ErrorFieldType
from openapi_server import util


class AccountHolderBalanceResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, balance_per_account: List[AccountDetailBalance]=None, invalid_fields: List[ErrorFieldType]=None, psp_reference: str=None, result_code: str=None, total_balance: DetailBalance=None):
        """AccountHolderBalanceResponse - a model defined in OpenAPI

        :param balance_per_account: The balance_per_account of this AccountHolderBalanceResponse.
        :param invalid_fields: The invalid_fields of this AccountHolderBalanceResponse.
        :param psp_reference: The psp_reference of this AccountHolderBalanceResponse.
        :param result_code: The result_code of this AccountHolderBalanceResponse.
        :param total_balance: The total_balance of this AccountHolderBalanceResponse.
        """
        self.openapi_types = {
            'balance_per_account': List[AccountDetailBalance],
            'invalid_fields': List[ErrorFieldType],
            'psp_reference': str,
            'result_code': str,
            'total_balance': DetailBalance
        }

        self.attribute_map = {
            'balance_per_account': 'balancePerAccount',
            'invalid_fields': 'invalidFields',
            'psp_reference': 'pspReference',
            'result_code': 'resultCode',
            'total_balance': 'totalBalance'
        }

        self._balance_per_account = balance_per_account
        self._invalid_fields = invalid_fields
        self._psp_reference = psp_reference
        self._result_code = result_code
        self._total_balance = total_balance

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AccountHolderBalanceResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AccountHolderBalanceResponse of this AccountHolderBalanceResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def balance_per_account(self):
        """Gets the balance_per_account of this AccountHolderBalanceResponse.

        A list of each account and their balances.

        :return: The balance_per_account of this AccountHolderBalanceResponse.
        :rtype: List[AccountDetailBalance]
        """
        return self._balance_per_account

    @balance_per_account.setter
    def balance_per_account(self, balance_per_account):
        """Sets the balance_per_account of this AccountHolderBalanceResponse.

        A list of each account and their balances.

        :param balance_per_account: The balance_per_account of this AccountHolderBalanceResponse.
        :type balance_per_account: List[AccountDetailBalance]
        """

        self._balance_per_account = balance_per_account

    @property
    def invalid_fields(self):
        """Gets the invalid_fields of this AccountHolderBalanceResponse.

        Contains field validation errors that would prevent requests from being processed.

        :return: The invalid_fields of this AccountHolderBalanceResponse.
        :rtype: List[ErrorFieldType]
        """
        return self._invalid_fields

    @invalid_fields.setter
    def invalid_fields(self, invalid_fields):
        """Sets the invalid_fields of this AccountHolderBalanceResponse.

        Contains field validation errors that would prevent requests from being processed.

        :param invalid_fields: The invalid_fields of this AccountHolderBalanceResponse.
        :type invalid_fields: List[ErrorFieldType]
        """

        self._invalid_fields = invalid_fields

    @property
    def psp_reference(self):
        """Gets the psp_reference of this AccountHolderBalanceResponse.

        The reference of a request. Can be used to uniquely identify the request.

        :return: The psp_reference of this AccountHolderBalanceResponse.
        :rtype: str
        """
        return self._psp_reference

    @psp_reference.setter
    def psp_reference(self, psp_reference):
        """Sets the psp_reference of this AccountHolderBalanceResponse.

        The reference of a request. Can be used to uniquely identify the request.

        :param psp_reference: The psp_reference of this AccountHolderBalanceResponse.
        :type psp_reference: str
        """

        self._psp_reference = psp_reference

    @property
    def result_code(self):
        """Gets the result_code of this AccountHolderBalanceResponse.

        The result code.

        :return: The result_code of this AccountHolderBalanceResponse.
        :rtype: str
        """
        return self._result_code

    @result_code.setter
    def result_code(self, result_code):
        """Sets the result_code of this AccountHolderBalanceResponse.

        The result code.

        :param result_code: The result_code of this AccountHolderBalanceResponse.
        :type result_code: str
        """

        self._result_code = result_code

    @property
    def total_balance(self):
        """Gets the total_balance of this AccountHolderBalanceResponse.

        The total balance of the account holder.

        :return: The total_balance of this AccountHolderBalanceResponse.
        :rtype: DetailBalance
        """
        return self._total_balance

    @total_balance.setter
    def total_balance(self, total_balance):
        """Sets the total_balance of this AccountHolderBalanceResponse.

        The total balance of the account holder.

        :param total_balance: The total_balance of this AccountHolderBalanceResponse.
        :type total_balance: DetailBalance
        """

        self._total_balance = total_balance
