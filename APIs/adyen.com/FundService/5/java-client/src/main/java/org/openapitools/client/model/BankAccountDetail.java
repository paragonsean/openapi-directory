/*
 * Fund API
 * This API is used for the classic integration. If you are just starting your implementation, refer to our [new integration guide](https://docs.adyen.com/marketplaces-and-platforms) instead.  The Fund API provides endpoints for managing the funds in the accounts on your platform. These management operations include, for example, the transfer of funds from one account to another, the payout of funds to an account holder, and the retrieval of balances in an account.  For more information, refer to our [documentation](https://docs.adyen.com/marketplaces-and-platforms/classic/). ## Authentication Your Adyen contact will provide your API credential and an API key. To connect to the API, add an `X-API-Key` header with the API key as the value, for example:   ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ```  Alternatively, you can use the username and password to connect to the API using basic authentication. For example:  ``` curl -U \"ws@MarketPlace.YOUR_PLATFORM_ACCOUNT\":\"YOUR_WS_PASSWORD\" \\ -H \"Content-Type: application/json\" \\ ... ``` When going live, you need to generate new web service user credentials to access the [live endpoints](https://docs.adyen.com/development-resources/live-endpoints).  ## Versioning The Fund API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://cal-test.adyen.com/cal/services/Fund/v5/accountHolderBalance ```
 *
 * The version of the OpenAPI document: 5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * BankAccountDetail
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:14:40.882338-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BankAccountDetail {
  public static final String SERIALIZED_NAME_ACCOUNT_NUMBER = "accountNumber";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_NUMBER)
  private String accountNumber;

  public static final String SERIALIZED_NAME_ACCOUNT_TYPE = "accountType";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_TYPE)
  private String accountType;

  public static final String SERIALIZED_NAME_BANK_ACCOUNT_NAME = "bankAccountName";
  @SerializedName(SERIALIZED_NAME_BANK_ACCOUNT_NAME)
  private String bankAccountName;

  public static final String SERIALIZED_NAME_BANK_ACCOUNT_REFERENCE = "bankAccountReference";
  @SerializedName(SERIALIZED_NAME_BANK_ACCOUNT_REFERENCE)
  private String bankAccountReference;

  public static final String SERIALIZED_NAME_BANK_ACCOUNT_U_U_I_D = "bankAccountUUID";
  @SerializedName(SERIALIZED_NAME_BANK_ACCOUNT_U_U_I_D)
  private String bankAccountUUID;

  public static final String SERIALIZED_NAME_BANK_BIC_SWIFT = "bankBicSwift";
  @SerializedName(SERIALIZED_NAME_BANK_BIC_SWIFT)
  private String bankBicSwift;

  public static final String SERIALIZED_NAME_BANK_CITY = "bankCity";
  @SerializedName(SERIALIZED_NAME_BANK_CITY)
  private String bankCity;

  public static final String SERIALIZED_NAME_BANK_CODE = "bankCode";
  @SerializedName(SERIALIZED_NAME_BANK_CODE)
  private String bankCode;

  public static final String SERIALIZED_NAME_BANK_NAME = "bankName";
  @SerializedName(SERIALIZED_NAME_BANK_NAME)
  private String bankName;

  public static final String SERIALIZED_NAME_BRANCH_CODE = "branchCode";
  @SerializedName(SERIALIZED_NAME_BRANCH_CODE)
  private String branchCode;

  public static final String SERIALIZED_NAME_CHECK_CODE = "checkCode";
  @SerializedName(SERIALIZED_NAME_CHECK_CODE)
  private String checkCode;

  public static final String SERIALIZED_NAME_COUNTRY_CODE = "countryCode";
  @SerializedName(SERIALIZED_NAME_COUNTRY_CODE)
  private String countryCode;

  public static final String SERIALIZED_NAME_CURRENCY_CODE = "currencyCode";
  @SerializedName(SERIALIZED_NAME_CURRENCY_CODE)
  private String currencyCode;

  public static final String SERIALIZED_NAME_IBAN = "iban";
  @SerializedName(SERIALIZED_NAME_IBAN)
  private String iban;

  public static final String SERIALIZED_NAME_OWNER_CITY = "ownerCity";
  @SerializedName(SERIALIZED_NAME_OWNER_CITY)
  private String ownerCity;

  public static final String SERIALIZED_NAME_OWNER_COUNTRY_CODE = "ownerCountryCode";
  @SerializedName(SERIALIZED_NAME_OWNER_COUNTRY_CODE)
  private String ownerCountryCode;

  public static final String SERIALIZED_NAME_OWNER_DATE_OF_BIRTH = "ownerDateOfBirth";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_OWNER_DATE_OF_BIRTH)
  private String ownerDateOfBirth;

  public static final String SERIALIZED_NAME_OWNER_HOUSE_NUMBER_OR_NAME = "ownerHouseNumberOrName";
  @SerializedName(SERIALIZED_NAME_OWNER_HOUSE_NUMBER_OR_NAME)
  private String ownerHouseNumberOrName;

  public static final String SERIALIZED_NAME_OWNER_NAME = "ownerName";
  @SerializedName(SERIALIZED_NAME_OWNER_NAME)
  private String ownerName;

  public static final String SERIALIZED_NAME_OWNER_NATIONALITY = "ownerNationality";
  @SerializedName(SERIALIZED_NAME_OWNER_NATIONALITY)
  private String ownerNationality;

  public static final String SERIALIZED_NAME_OWNER_POSTAL_CODE = "ownerPostalCode";
  @SerializedName(SERIALIZED_NAME_OWNER_POSTAL_CODE)
  private String ownerPostalCode;

  public static final String SERIALIZED_NAME_OWNER_STATE = "ownerState";
  @SerializedName(SERIALIZED_NAME_OWNER_STATE)
  private String ownerState;

  public static final String SERIALIZED_NAME_OWNER_STREET = "ownerStreet";
  @SerializedName(SERIALIZED_NAME_OWNER_STREET)
  private String ownerStreet;

  public static final String SERIALIZED_NAME_PRIMARY_ACCOUNT = "primaryAccount";
  @SerializedName(SERIALIZED_NAME_PRIMARY_ACCOUNT)
  private Boolean primaryAccount;

  public static final String SERIALIZED_NAME_TAX_ID = "taxId";
  @SerializedName(SERIALIZED_NAME_TAX_ID)
  private String taxId;

  public static final String SERIALIZED_NAME_URL_FOR_VERIFICATION = "urlForVerification";
  @SerializedName(SERIALIZED_NAME_URL_FOR_VERIFICATION)
  private String urlForVerification;

  public BankAccountDetail() {
  }

  public BankAccountDetail accountNumber(String accountNumber) {
    this.accountNumber = accountNumber;
    return this;
  }

  /**
   * The bank account number (without separators). &gt;Refer to [Required information](https://docs.adyen.com/marketplaces-and-platforms/classic/verification-process/required-information) for details on field requirements.
   * @return accountNumber
   */
  @javax.annotation.Nullable
  public String getAccountNumber() {
    return accountNumber;
  }

  public void setAccountNumber(String accountNumber) {
    this.accountNumber = accountNumber;
  }


  public BankAccountDetail accountType(String accountType) {
    this.accountType = accountType;
    return this;
  }

  /**
   * The type of bank account. Only applicable to bank accounts held in the USA. The permitted values are: &#x60;checking&#x60;, &#x60;savings&#x60;.  &gt;Refer to [Required information](https://docs.adyen.com/marketplaces-and-platforms/classic/verification-process/required-information) for details on field requirements.
   * @return accountType
   */
  @javax.annotation.Nullable
  public String getAccountType() {
    return accountType;
  }

  public void setAccountType(String accountType) {
    this.accountType = accountType;
  }


  public BankAccountDetail bankAccountName(String bankAccountName) {
    this.bankAccountName = bankAccountName;
    return this;
  }

  /**
   * The name of the bank account.
   * @return bankAccountName
   */
  @javax.annotation.Nullable
  public String getBankAccountName() {
    return bankAccountName;
  }

  public void setBankAccountName(String bankAccountName) {
    this.bankAccountName = bankAccountName;
  }


  public BankAccountDetail bankAccountReference(String bankAccountReference) {
    this.bankAccountReference = bankAccountReference;
    return this;
  }

  /**
   * Merchant reference to the bank account.
   * @return bankAccountReference
   */
  @javax.annotation.Nullable
  public String getBankAccountReference() {
    return bankAccountReference;
  }

  public void setBankAccountReference(String bankAccountReference) {
    this.bankAccountReference = bankAccountReference;
  }


  public BankAccountDetail bankAccountUUID(String bankAccountUUID) {
    this.bankAccountUUID = bankAccountUUID;
    return this;
  }

  /**
   * The unique identifier (UUID) of the Bank Account. &gt;If, during an account holder create or update request, this field is left blank (but other fields provided), a new Bank Account will be created with a procedurally-generated UUID.  &gt;If, during an account holder create request, a UUID is provided, the creation of the Bank Account will fail while the creation of the account holder will continue.  &gt;If, during an account holder update request, a UUID that is not correlated with an existing Bank Account is provided, the update of the account holder will fail.  &gt;If, during an account holder update request, a UUID that is correlated with an existing Bank Account is provided, the existing Bank Account will be updated. 
   * @return bankAccountUUID
   */
  @javax.annotation.Nullable
  public String getBankAccountUUID() {
    return bankAccountUUID;
  }

  public void setBankAccountUUID(String bankAccountUUID) {
    this.bankAccountUUID = bankAccountUUID;
  }


  public BankAccountDetail bankBicSwift(String bankBicSwift) {
    this.bankBicSwift = bankBicSwift;
    return this;
  }

  /**
   * The bank identifier code. &gt;Refer to [Required information](https://docs.adyen.com/marketplaces-and-platforms/classic/verification-process/required-information) for details on field requirements.
   * @return bankBicSwift
   */
  @javax.annotation.Nullable
  public String getBankBicSwift() {
    return bankBicSwift;
  }

  public void setBankBicSwift(String bankBicSwift) {
    this.bankBicSwift = bankBicSwift;
  }


  public BankAccountDetail bankCity(String bankCity) {
    this.bankCity = bankCity;
    return this;
  }

  /**
   * The city in which the bank branch is located.  &gt;Refer to [Required information](https://docs.adyen.com/marketplaces-and-platforms/classic/verification-process/required-information) for details on field requirements.
   * @return bankCity
   */
  @javax.annotation.Nullable
  public String getBankCity() {
    return bankCity;
  }

  public void setBankCity(String bankCity) {
    this.bankCity = bankCity;
  }


  public BankAccountDetail bankCode(String bankCode) {
    this.bankCode = bankCode;
    return this;
  }

  /**
   * The bank code of the banking institution with which the bank account is registered.  &gt;Refer to [Required information](https://docs.adyen.com/marketplaces-and-platforms/classic/verification-process/required-information) for details on field requirements.
   * @return bankCode
   */
  @javax.annotation.Nullable
  public String getBankCode() {
    return bankCode;
  }

  public void setBankCode(String bankCode) {
    this.bankCode = bankCode;
  }


  public BankAccountDetail bankName(String bankName) {
    this.bankName = bankName;
    return this;
  }

  /**
   * The name of the banking institution with which the bank account is held.  &gt;Refer to [Required information](https://docs.adyen.com/marketplaces-and-platforms/classic/verification-process/required-information) for details on field requirements.
   * @return bankName
   */
  @javax.annotation.Nullable
  public String getBankName() {
    return bankName;
  }

  public void setBankName(String bankName) {
    this.bankName = bankName;
  }


  public BankAccountDetail branchCode(String branchCode) {
    this.branchCode = branchCode;
    return this;
  }

  /**
   * The branch code of the branch under which the bank account is registered. The value to be specified in this parameter depends on the country of the bank account: * United States - Routing number * United Kingdom - Sort code * Germany - Bankleitzahl &gt;Refer to [Required information](https://docs.adyen.com/marketplaces-and-platforms/classic/verification-process/required-information) for details on field requirements.
   * @return branchCode
   */
  @javax.annotation.Nullable
  public String getBranchCode() {
    return branchCode;
  }

  public void setBranchCode(String branchCode) {
    this.branchCode = branchCode;
  }


  public BankAccountDetail checkCode(String checkCode) {
    this.checkCode = checkCode;
    return this;
  }

  /**
   * The check code of the bank account.  &gt;Refer to [Required information](https://docs.adyen.com/marketplaces-and-platforms/classic/verification-process/required-information) for details on field requirements.
   * @return checkCode
   */
  @javax.annotation.Nullable
  public String getCheckCode() {
    return checkCode;
  }

  public void setCheckCode(String checkCode) {
    this.checkCode = checkCode;
  }


  public BankAccountDetail countryCode(String countryCode) {
    this.countryCode = countryCode;
    return this;
  }

  /**
   * The two-letter country code in which the bank account is registered. &gt;The permitted country codes are defined in ISO-3166-1 alpha-2 (e.g. &#39;NL&#39;).  &gt;Refer to [Required information](https://docs.adyen.com/marketplaces-and-platforms/classic/verification-process/required-information) for details on field requirements.
   * @return countryCode
   */
  @javax.annotation.Nullable
  public String getCountryCode() {
    return countryCode;
  }

  public void setCountryCode(String countryCode) {
    this.countryCode = countryCode;
  }


  public BankAccountDetail currencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
    return this;
  }

  /**
   * The currency in which the bank account deals. &gt;The permitted currency codes are defined in ISO-4217 (e.g. &#39;EUR&#39;). 
   * @return currencyCode
   */
  @javax.annotation.Nullable
  public String getCurrencyCode() {
    return currencyCode;
  }

  public void setCurrencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
  }


  public BankAccountDetail iban(String iban) {
    this.iban = iban;
    return this;
  }

  /**
   * The international bank account number. &gt;The IBAN standard is defined in ISO-13616.  &gt;Refer to [Required information](https://docs.adyen.com/marketplaces-and-platforms/classic/verification-process/required-information) for details on field requirements.
   * @return iban
   */
  @javax.annotation.Nullable
  public String getIban() {
    return iban;
  }

  public void setIban(String iban) {
    this.iban = iban;
  }


  public BankAccountDetail ownerCity(String ownerCity) {
    this.ownerCity = ownerCity;
    return this;
  }

  /**
   * The city of residence of the bank account owner. &gt;Refer to [Required information](https://docs.adyen.com/marketplaces-and-platforms/classic/verification-process/required-information) for details on field requirements.
   * @return ownerCity
   */
  @javax.annotation.Nullable
  public String getOwnerCity() {
    return ownerCity;
  }

  public void setOwnerCity(String ownerCity) {
    this.ownerCity = ownerCity;
  }


  public BankAccountDetail ownerCountryCode(String ownerCountryCode) {
    this.ownerCountryCode = ownerCountryCode;
    return this;
  }

  /**
   * The country code of the country of residence of the bank account owner. &gt;The permitted country codes are defined in ISO-3166-1 alpha-2 (e.g. &#39;NL&#39;).  &gt;Refer to [Required information](https://docs.adyen.com/marketplaces-and-platforms/classic/verification-process/required-information) for details on field requirements.
   * @return ownerCountryCode
   */
  @javax.annotation.Nullable
  public String getOwnerCountryCode() {
    return ownerCountryCode;
  }

  public void setOwnerCountryCode(String ownerCountryCode) {
    this.ownerCountryCode = ownerCountryCode;
  }


  @Deprecated
  public BankAccountDetail ownerDateOfBirth(String ownerDateOfBirth) {
    this.ownerDateOfBirth = ownerDateOfBirth;
    return this;
  }

  /**
   * The date of birth of the bank account owner. The date should be in ISO-8601 format yyyy-mm-dd (e.g. 2000-01-31).
   * @return ownerDateOfBirth
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public String getOwnerDateOfBirth() {
    return ownerDateOfBirth;
  }

  @Deprecated
  public void setOwnerDateOfBirth(String ownerDateOfBirth) {
    this.ownerDateOfBirth = ownerDateOfBirth;
  }


  public BankAccountDetail ownerHouseNumberOrName(String ownerHouseNumberOrName) {
    this.ownerHouseNumberOrName = ownerHouseNumberOrName;
    return this;
  }

  /**
   * The house name or number of the residence of the bank account owner. &gt;Refer to [Required information](https://docs.adyen.com/marketplaces-and-platforms/classic/verification-process/required-information) for details on field requirements.
   * @return ownerHouseNumberOrName
   */
  @javax.annotation.Nullable
  public String getOwnerHouseNumberOrName() {
    return ownerHouseNumberOrName;
  }

  public void setOwnerHouseNumberOrName(String ownerHouseNumberOrName) {
    this.ownerHouseNumberOrName = ownerHouseNumberOrName;
  }


  public BankAccountDetail ownerName(String ownerName) {
    this.ownerName = ownerName;
    return this;
  }

  /**
   * The name of the bank account owner. &gt;Refer to [Required information](https://docs.adyen.com/marketplaces-and-platforms/classic/verification-process/required-information) for details on field requirements.
   * @return ownerName
   */
  @javax.annotation.Nullable
  public String getOwnerName() {
    return ownerName;
  }

  public void setOwnerName(String ownerName) {
    this.ownerName = ownerName;
  }


  public BankAccountDetail ownerNationality(String ownerNationality) {
    this.ownerNationality = ownerNationality;
    return this;
  }

  /**
   * The country code of the country of nationality of the bank account owner. &gt;The permitted country codes are defined in ISO-3166-1 alpha-2 (e.g. &#39;NL&#39;).  &gt;Refer to [Required information](https://docs.adyen.com/marketplaces-and-platforms/classic/verification-process/required-information) for details on field requirements.
   * @return ownerNationality
   */
  @javax.annotation.Nullable
  public String getOwnerNationality() {
    return ownerNationality;
  }

  public void setOwnerNationality(String ownerNationality) {
    this.ownerNationality = ownerNationality;
  }


  public BankAccountDetail ownerPostalCode(String ownerPostalCode) {
    this.ownerPostalCode = ownerPostalCode;
    return this;
  }

  /**
   * The postal code of the residence of the bank account owner. &gt;Refer to [Required information](https://docs.adyen.com/marketplaces-and-platforms/classic/verification-process/required-information) for details on field requirements.
   * @return ownerPostalCode
   */
  @javax.annotation.Nullable
  public String getOwnerPostalCode() {
    return ownerPostalCode;
  }

  public void setOwnerPostalCode(String ownerPostalCode) {
    this.ownerPostalCode = ownerPostalCode;
  }


  public BankAccountDetail ownerState(String ownerState) {
    this.ownerState = ownerState;
    return this;
  }

  /**
   * The state of residence of the bank account owner. &gt;Refer to [Required information](https://docs.adyen.com/marketplaces-and-platforms/classic/verification-process/required-information) for details on field requirements.
   * @return ownerState
   */
  @javax.annotation.Nullable
  public String getOwnerState() {
    return ownerState;
  }

  public void setOwnerState(String ownerState) {
    this.ownerState = ownerState;
  }


  public BankAccountDetail ownerStreet(String ownerStreet) {
    this.ownerStreet = ownerStreet;
    return this;
  }

  /**
   * The street name of the residence of the bank account owner. &gt;Refer to [Required information](https://docs.adyen.com/marketplaces-and-platforms/classic/verification-process/required-information) for details on field requirements.
   * @return ownerStreet
   */
  @javax.annotation.Nullable
  public String getOwnerStreet() {
    return ownerStreet;
  }

  public void setOwnerStreet(String ownerStreet) {
    this.ownerStreet = ownerStreet;
  }


  public BankAccountDetail primaryAccount(Boolean primaryAccount) {
    this.primaryAccount = primaryAccount;
    return this;
  }

  /**
   * If set to true, the bank account is a primary account.
   * @return primaryAccount
   */
  @javax.annotation.Nullable
  public Boolean getPrimaryAccount() {
    return primaryAccount;
  }

  public void setPrimaryAccount(Boolean primaryAccount) {
    this.primaryAccount = primaryAccount;
  }


  public BankAccountDetail taxId(String taxId) {
    this.taxId = taxId;
    return this;
  }

  /**
   * The tax ID number.  &gt;Refer to [Required information](https://docs.adyen.com/marketplaces-and-platforms/classic/verification-process/required-information) for details on field requirements.
   * @return taxId
   */
  @javax.annotation.Nullable
  public String getTaxId() {
    return taxId;
  }

  public void setTaxId(String taxId) {
    this.taxId = taxId;
  }


  public BankAccountDetail urlForVerification(String urlForVerification) {
    this.urlForVerification = urlForVerification;
    return this;
  }

  /**
   * The URL to be used for bank account verification. This may be generated on bank account creation.  &gt;Refer to [Required information](https://docs.adyen.com/marketplaces-and-platforms/classic/verification-process/required-information) for details on field requirements.
   * @return urlForVerification
   */
  @javax.annotation.Nullable
  public String getUrlForVerification() {
    return urlForVerification;
  }

  public void setUrlForVerification(String urlForVerification) {
    this.urlForVerification = urlForVerification;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BankAccountDetail bankAccountDetail = (BankAccountDetail) o;
    return Objects.equals(this.accountNumber, bankAccountDetail.accountNumber) &&
        Objects.equals(this.accountType, bankAccountDetail.accountType) &&
        Objects.equals(this.bankAccountName, bankAccountDetail.bankAccountName) &&
        Objects.equals(this.bankAccountReference, bankAccountDetail.bankAccountReference) &&
        Objects.equals(this.bankAccountUUID, bankAccountDetail.bankAccountUUID) &&
        Objects.equals(this.bankBicSwift, bankAccountDetail.bankBicSwift) &&
        Objects.equals(this.bankCity, bankAccountDetail.bankCity) &&
        Objects.equals(this.bankCode, bankAccountDetail.bankCode) &&
        Objects.equals(this.bankName, bankAccountDetail.bankName) &&
        Objects.equals(this.branchCode, bankAccountDetail.branchCode) &&
        Objects.equals(this.checkCode, bankAccountDetail.checkCode) &&
        Objects.equals(this.countryCode, bankAccountDetail.countryCode) &&
        Objects.equals(this.currencyCode, bankAccountDetail.currencyCode) &&
        Objects.equals(this.iban, bankAccountDetail.iban) &&
        Objects.equals(this.ownerCity, bankAccountDetail.ownerCity) &&
        Objects.equals(this.ownerCountryCode, bankAccountDetail.ownerCountryCode) &&
        Objects.equals(this.ownerDateOfBirth, bankAccountDetail.ownerDateOfBirth) &&
        Objects.equals(this.ownerHouseNumberOrName, bankAccountDetail.ownerHouseNumberOrName) &&
        Objects.equals(this.ownerName, bankAccountDetail.ownerName) &&
        Objects.equals(this.ownerNationality, bankAccountDetail.ownerNationality) &&
        Objects.equals(this.ownerPostalCode, bankAccountDetail.ownerPostalCode) &&
        Objects.equals(this.ownerState, bankAccountDetail.ownerState) &&
        Objects.equals(this.ownerStreet, bankAccountDetail.ownerStreet) &&
        Objects.equals(this.primaryAccount, bankAccountDetail.primaryAccount) &&
        Objects.equals(this.taxId, bankAccountDetail.taxId) &&
        Objects.equals(this.urlForVerification, bankAccountDetail.urlForVerification);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountNumber, accountType, bankAccountName, bankAccountReference, bankAccountUUID, bankBicSwift, bankCity, bankCode, bankName, branchCode, checkCode, countryCode, currencyCode, iban, ownerCity, ownerCountryCode, ownerDateOfBirth, ownerHouseNumberOrName, ownerName, ownerNationality, ownerPostalCode, ownerState, ownerStreet, primaryAccount, taxId, urlForVerification);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BankAccountDetail {\n");
    sb.append("    accountNumber: ").append(toIndentedString(accountNumber)).append("\n");
    sb.append("    accountType: ").append(toIndentedString(accountType)).append("\n");
    sb.append("    bankAccountName: ").append(toIndentedString(bankAccountName)).append("\n");
    sb.append("    bankAccountReference: ").append(toIndentedString(bankAccountReference)).append("\n");
    sb.append("    bankAccountUUID: ").append(toIndentedString(bankAccountUUID)).append("\n");
    sb.append("    bankBicSwift: ").append(toIndentedString(bankBicSwift)).append("\n");
    sb.append("    bankCity: ").append(toIndentedString(bankCity)).append("\n");
    sb.append("    bankCode: ").append(toIndentedString(bankCode)).append("\n");
    sb.append("    bankName: ").append(toIndentedString(bankName)).append("\n");
    sb.append("    branchCode: ").append(toIndentedString(branchCode)).append("\n");
    sb.append("    checkCode: ").append(toIndentedString(checkCode)).append("\n");
    sb.append("    countryCode: ").append(toIndentedString(countryCode)).append("\n");
    sb.append("    currencyCode: ").append(toIndentedString(currencyCode)).append("\n");
    sb.append("    iban: ").append(toIndentedString(iban)).append("\n");
    sb.append("    ownerCity: ").append(toIndentedString(ownerCity)).append("\n");
    sb.append("    ownerCountryCode: ").append(toIndentedString(ownerCountryCode)).append("\n");
    sb.append("    ownerDateOfBirth: ").append(toIndentedString(ownerDateOfBirth)).append("\n");
    sb.append("    ownerHouseNumberOrName: ").append(toIndentedString(ownerHouseNumberOrName)).append("\n");
    sb.append("    ownerName: ").append(toIndentedString(ownerName)).append("\n");
    sb.append("    ownerNationality: ").append(toIndentedString(ownerNationality)).append("\n");
    sb.append("    ownerPostalCode: ").append(toIndentedString(ownerPostalCode)).append("\n");
    sb.append("    ownerState: ").append(toIndentedString(ownerState)).append("\n");
    sb.append("    ownerStreet: ").append(toIndentedString(ownerStreet)).append("\n");
    sb.append("    primaryAccount: ").append(toIndentedString(primaryAccount)).append("\n");
    sb.append("    taxId: ").append(toIndentedString(taxId)).append("\n");
    sb.append("    urlForVerification: ").append(toIndentedString(urlForVerification)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accountNumber");
    openapiFields.add("accountType");
    openapiFields.add("bankAccountName");
    openapiFields.add("bankAccountReference");
    openapiFields.add("bankAccountUUID");
    openapiFields.add("bankBicSwift");
    openapiFields.add("bankCity");
    openapiFields.add("bankCode");
    openapiFields.add("bankName");
    openapiFields.add("branchCode");
    openapiFields.add("checkCode");
    openapiFields.add("countryCode");
    openapiFields.add("currencyCode");
    openapiFields.add("iban");
    openapiFields.add("ownerCity");
    openapiFields.add("ownerCountryCode");
    openapiFields.add("ownerDateOfBirth");
    openapiFields.add("ownerHouseNumberOrName");
    openapiFields.add("ownerName");
    openapiFields.add("ownerNationality");
    openapiFields.add("ownerPostalCode");
    openapiFields.add("ownerState");
    openapiFields.add("ownerStreet");
    openapiFields.add("primaryAccount");
    openapiFields.add("taxId");
    openapiFields.add("urlForVerification");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BankAccountDetail
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BankAccountDetail.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BankAccountDetail is not found in the empty JSON string", BankAccountDetail.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BankAccountDetail.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BankAccountDetail` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("accountNumber") != null && !jsonObj.get("accountNumber").isJsonNull()) && !jsonObj.get("accountNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountNumber").toString()));
      }
      if ((jsonObj.get("accountType") != null && !jsonObj.get("accountType").isJsonNull()) && !jsonObj.get("accountType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountType").toString()));
      }
      if ((jsonObj.get("bankAccountName") != null && !jsonObj.get("bankAccountName").isJsonNull()) && !jsonObj.get("bankAccountName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bankAccountName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bankAccountName").toString()));
      }
      if ((jsonObj.get("bankAccountReference") != null && !jsonObj.get("bankAccountReference").isJsonNull()) && !jsonObj.get("bankAccountReference").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bankAccountReference` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bankAccountReference").toString()));
      }
      if ((jsonObj.get("bankAccountUUID") != null && !jsonObj.get("bankAccountUUID").isJsonNull()) && !jsonObj.get("bankAccountUUID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bankAccountUUID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bankAccountUUID").toString()));
      }
      if ((jsonObj.get("bankBicSwift") != null && !jsonObj.get("bankBicSwift").isJsonNull()) && !jsonObj.get("bankBicSwift").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bankBicSwift` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bankBicSwift").toString()));
      }
      if ((jsonObj.get("bankCity") != null && !jsonObj.get("bankCity").isJsonNull()) && !jsonObj.get("bankCity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bankCity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bankCity").toString()));
      }
      if ((jsonObj.get("bankCode") != null && !jsonObj.get("bankCode").isJsonNull()) && !jsonObj.get("bankCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bankCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bankCode").toString()));
      }
      if ((jsonObj.get("bankName") != null && !jsonObj.get("bankName").isJsonNull()) && !jsonObj.get("bankName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bankName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bankName").toString()));
      }
      if ((jsonObj.get("branchCode") != null && !jsonObj.get("branchCode").isJsonNull()) && !jsonObj.get("branchCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `branchCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("branchCode").toString()));
      }
      if ((jsonObj.get("checkCode") != null && !jsonObj.get("checkCode").isJsonNull()) && !jsonObj.get("checkCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `checkCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("checkCode").toString()));
      }
      if ((jsonObj.get("countryCode") != null && !jsonObj.get("countryCode").isJsonNull()) && !jsonObj.get("countryCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `countryCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("countryCode").toString()));
      }
      if ((jsonObj.get("currencyCode") != null && !jsonObj.get("currencyCode").isJsonNull()) && !jsonObj.get("currencyCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currencyCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currencyCode").toString()));
      }
      if ((jsonObj.get("iban") != null && !jsonObj.get("iban").isJsonNull()) && !jsonObj.get("iban").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `iban` to be a primitive type in the JSON string but got `%s`", jsonObj.get("iban").toString()));
      }
      if ((jsonObj.get("ownerCity") != null && !jsonObj.get("ownerCity").isJsonNull()) && !jsonObj.get("ownerCity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ownerCity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ownerCity").toString()));
      }
      if ((jsonObj.get("ownerCountryCode") != null && !jsonObj.get("ownerCountryCode").isJsonNull()) && !jsonObj.get("ownerCountryCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ownerCountryCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ownerCountryCode").toString()));
      }
      if ((jsonObj.get("ownerDateOfBirth") != null && !jsonObj.get("ownerDateOfBirth").isJsonNull()) && !jsonObj.get("ownerDateOfBirth").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ownerDateOfBirth` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ownerDateOfBirth").toString()));
      }
      if ((jsonObj.get("ownerHouseNumberOrName") != null && !jsonObj.get("ownerHouseNumberOrName").isJsonNull()) && !jsonObj.get("ownerHouseNumberOrName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ownerHouseNumberOrName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ownerHouseNumberOrName").toString()));
      }
      if ((jsonObj.get("ownerName") != null && !jsonObj.get("ownerName").isJsonNull()) && !jsonObj.get("ownerName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ownerName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ownerName").toString()));
      }
      if ((jsonObj.get("ownerNationality") != null && !jsonObj.get("ownerNationality").isJsonNull()) && !jsonObj.get("ownerNationality").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ownerNationality` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ownerNationality").toString()));
      }
      if ((jsonObj.get("ownerPostalCode") != null && !jsonObj.get("ownerPostalCode").isJsonNull()) && !jsonObj.get("ownerPostalCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ownerPostalCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ownerPostalCode").toString()));
      }
      if ((jsonObj.get("ownerState") != null && !jsonObj.get("ownerState").isJsonNull()) && !jsonObj.get("ownerState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ownerState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ownerState").toString()));
      }
      if ((jsonObj.get("ownerStreet") != null && !jsonObj.get("ownerStreet").isJsonNull()) && !jsonObj.get("ownerStreet").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ownerStreet` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ownerStreet").toString()));
      }
      if ((jsonObj.get("taxId") != null && !jsonObj.get("taxId").isJsonNull()) && !jsonObj.get("taxId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `taxId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("taxId").toString()));
      }
      if ((jsonObj.get("urlForVerification") != null && !jsonObj.get("urlForVerification").isJsonNull()) && !jsonObj.get("urlForVerification").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `urlForVerification` to be a primitive type in the JSON string but got `%s`", jsonObj.get("urlForVerification").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BankAccountDetail.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BankAccountDetail' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BankAccountDetail> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BankAccountDetail.class));

       return (TypeAdapter<T>) new TypeAdapter<BankAccountDetail>() {
           @Override
           public void write(JsonWriter out, BankAccountDetail value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BankAccountDetail read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BankAccountDetail given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BankAccountDetail
   * @throws IOException if the JSON string is invalid with respect to BankAccountDetail
   */
  public static BankAccountDetail fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BankAccountDetail.class);
  }

  /**
   * Convert an instance of BankAccountDetail to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

