/**
 * Fund API
 * This API is used for the classic integration. If you are just starting your implementation, refer to our [new integration guide](https://docs.adyen.com/marketplaces-and-platforms) instead.  The Fund API provides endpoints for managing the funds in the accounts on your platform. These management operations include, for example, the transfer of funds from one account to another, the payout of funds to an account holder, and the retrieval of balances in an account.  For more information, refer to our [documentation](https://docs.adyen.com/marketplaces-and-platforms/classic/). ## Authentication Your Adyen contact will provide your API credential and an API key. To connect to the API, add an `X-API-Key` header with the API key as the value, for example:   ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ```  Alternatively, you can use the username and password to connect to the API using basic authentication. For example:  ``` curl -U \"ws@MarketPlace.YOUR_PLATFORM_ACCOUNT\":\"YOUR_WS_PASSWORD\" \\ -H \"Content-Type: application/json\" \\ ... ``` When going live, you need to generate new web service user credentials to access the [live endpoints](https://docs.adyen.com/development-resources/live-endpoints).  ## Versioning The Fund API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://cal-test.adyen.com/cal/services/Fund/v5/accountHolderBalance ```
 *
 * The version of the OpenAPI document: 5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from './ApiClient';
import AccountDetailBalance from './model/AccountDetailBalance';
import AccountHolderBalanceRequest from './model/AccountHolderBalanceRequest';
import AccountHolderBalanceResponse from './model/AccountHolderBalanceResponse';
import AccountHolderTransactionListRequest from './model/AccountHolderTransactionListRequest';
import AccountHolderTransactionListResponse from './model/AccountHolderTransactionListResponse';
import AccountTransactionList from './model/AccountTransactionList';
import Amount from './model/Amount';
import BankAccountDetail from './model/BankAccountDetail';
import DebitAccountHolderRequest from './model/DebitAccountHolderRequest';
import DebitAccountHolderResponse from './model/DebitAccountHolderResponse';
import DetailBalance from './model/DetailBalance';
import ErrorFieldType from './model/ErrorFieldType';
import FieldType from './model/FieldType';
import PayoutAccountHolderRequest from './model/PayoutAccountHolderRequest';
import PayoutAccountHolderResponse from './model/PayoutAccountHolderResponse';
import RefundFundsTransferRequest from './model/RefundFundsTransferRequest';
import RefundFundsTransferResponse from './model/RefundFundsTransferResponse';
import RefundNotPaidOutTransfersRequest from './model/RefundNotPaidOutTransfersRequest';
import RefundNotPaidOutTransfersResponse from './model/RefundNotPaidOutTransfersResponse';
import ServiceError from './model/ServiceError';
import SetupBeneficiaryRequest from './model/SetupBeneficiaryRequest';
import SetupBeneficiaryResponse from './model/SetupBeneficiaryResponse';
import Split from './model/Split';
import SplitAmount from './model/SplitAmount';
import Transaction from './model/Transaction';
import TransactionListForAccount from './model/TransactionListForAccount';
import TransferFundsRequest from './model/TransferFundsRequest';
import TransferFundsResponse from './model/TransferFundsResponse';
import GeneralApi from './api/GeneralApi';


/**
* This API is used for the classic integration. If you are just starting your implementation, refer to our [new integration guide](https://docs.adyen.com/marketplaces-and-platforms) instead.  The Fund API provides endpoints for managing the funds in the accounts on your platform. These management operations include, for example, the transfer of funds from one account to another, the payout of funds to an account holder, and the retrieval of balances in an account.  For more information, refer to our [documentation](https://docs.adyen.com/marketplaces-and-platforms/classic/). ## Authentication Your Adyen contact will provide your API credential and an API key. To connect to the API, add an &#x60;X-API-Key&#x60; header with the API key as the value, for example:   &#x60;&#x60;&#x60; curl -H \&quot;Content-Type: application/json\&quot; \\ -H \&quot;X-API-Key: YOUR_API_KEY\&quot; \\ ... &#x60;&#x60;&#x60;  Alternatively, you can use the username and password to connect to the API using basic authentication. For example:  &#x60;&#x60;&#x60; curl -U \&quot;ws@MarketPlace.YOUR_PLATFORM_ACCOUNT\&quot;:\&quot;YOUR_WS_PASSWORD\&quot; \\ -H \&quot;Content-Type: application/json\&quot; \\ ... &#x60;&#x60;&#x60; When going live, you need to generate new web service user credentials to access the [live endpoints](https://docs.adyen.com/development-resources/live-endpoints).  ## Versioning The Fund API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \&quot;vXX\&quot;, where XX is the version number.  For example: &#x60;&#x60;&#x60; https://cal-test.adyen.com/cal/services/Fund/v5/accountHolderBalance &#x60;&#x60;&#x60;.<br>
* The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
* <p>
* An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
* <pre>
* var FundApi = require('index'); // See note below*.
* var xxxSvc = new FundApi.XxxApi(); // Allocate the API class we're going to use.
* var yyyModel = new FundApi.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
* and put the application logic within the callback function.</em>
* </p>
* <p>
* A non-AMD browser application (discouraged) might do something like this:
* <pre>
* var xxxSvc = new FundApi.XxxApi(); // Allocate the API class we're going to use.
* var yyy = new FundApi.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* </p>
* @module index
* @version 5
*/
export {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient,

    /**
     * The AccountDetailBalance model constructor.
     * @property {module:model/AccountDetailBalance}
     */
    AccountDetailBalance,

    /**
     * The AccountHolderBalanceRequest model constructor.
     * @property {module:model/AccountHolderBalanceRequest}
     */
    AccountHolderBalanceRequest,

    /**
     * The AccountHolderBalanceResponse model constructor.
     * @property {module:model/AccountHolderBalanceResponse}
     */
    AccountHolderBalanceResponse,

    /**
     * The AccountHolderTransactionListRequest model constructor.
     * @property {module:model/AccountHolderTransactionListRequest}
     */
    AccountHolderTransactionListRequest,

    /**
     * The AccountHolderTransactionListResponse model constructor.
     * @property {module:model/AccountHolderTransactionListResponse}
     */
    AccountHolderTransactionListResponse,

    /**
     * The AccountTransactionList model constructor.
     * @property {module:model/AccountTransactionList}
     */
    AccountTransactionList,

    /**
     * The Amount model constructor.
     * @property {module:model/Amount}
     */
    Amount,

    /**
     * The BankAccountDetail model constructor.
     * @property {module:model/BankAccountDetail}
     */
    BankAccountDetail,

    /**
     * The DebitAccountHolderRequest model constructor.
     * @property {module:model/DebitAccountHolderRequest}
     */
    DebitAccountHolderRequest,

    /**
     * The DebitAccountHolderResponse model constructor.
     * @property {module:model/DebitAccountHolderResponse}
     */
    DebitAccountHolderResponse,

    /**
     * The DetailBalance model constructor.
     * @property {module:model/DetailBalance}
     */
    DetailBalance,

    /**
     * The ErrorFieldType model constructor.
     * @property {module:model/ErrorFieldType}
     */
    ErrorFieldType,

    /**
     * The FieldType model constructor.
     * @property {module:model/FieldType}
     */
    FieldType,

    /**
     * The PayoutAccountHolderRequest model constructor.
     * @property {module:model/PayoutAccountHolderRequest}
     */
    PayoutAccountHolderRequest,

    /**
     * The PayoutAccountHolderResponse model constructor.
     * @property {module:model/PayoutAccountHolderResponse}
     */
    PayoutAccountHolderResponse,

    /**
     * The RefundFundsTransferRequest model constructor.
     * @property {module:model/RefundFundsTransferRequest}
     */
    RefundFundsTransferRequest,

    /**
     * The RefundFundsTransferResponse model constructor.
     * @property {module:model/RefundFundsTransferResponse}
     */
    RefundFundsTransferResponse,

    /**
     * The RefundNotPaidOutTransfersRequest model constructor.
     * @property {module:model/RefundNotPaidOutTransfersRequest}
     */
    RefundNotPaidOutTransfersRequest,

    /**
     * The RefundNotPaidOutTransfersResponse model constructor.
     * @property {module:model/RefundNotPaidOutTransfersResponse}
     */
    RefundNotPaidOutTransfersResponse,

    /**
     * The ServiceError model constructor.
     * @property {module:model/ServiceError}
     */
    ServiceError,

    /**
     * The SetupBeneficiaryRequest model constructor.
     * @property {module:model/SetupBeneficiaryRequest}
     */
    SetupBeneficiaryRequest,

    /**
     * The SetupBeneficiaryResponse model constructor.
     * @property {module:model/SetupBeneficiaryResponse}
     */
    SetupBeneficiaryResponse,

    /**
     * The Split model constructor.
     * @property {module:model/Split}
     */
    Split,

    /**
     * The SplitAmount model constructor.
     * @property {module:model/SplitAmount}
     */
    SplitAmount,

    /**
     * The Transaction model constructor.
     * @property {module:model/Transaction}
     */
    Transaction,

    /**
     * The TransactionListForAccount model constructor.
     * @property {module:model/TransactionListForAccount}
     */
    TransactionListForAccount,

    /**
     * The TransferFundsRequest model constructor.
     * @property {module:model/TransferFundsRequest}
     */
    TransferFundsRequest,

    /**
     * The TransferFundsResponse model constructor.
     * @property {module:model/TransferFundsResponse}
     */
    TransferFundsResponse,

    /**
    * The GeneralApi service constructor.
    * @property {module:api/GeneralApi}
    */
    GeneralApi
};
