# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.amount import Amount
from openapi_server.models.bank_account_detail import BankAccountDetail
from openapi_server import util


class Transaction(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amount: Amount=None, bank_account_detail: BankAccountDetail=None, capture_merchant_reference: str=None, capture_psp_reference: str=None, creation_date: datetime=None, description: str=None, destination_account_code: str=None, dispute_psp_reference: str=None, dispute_reason_code: str=None, merchant_reference: str=None, payment_psp_reference: str=None, payout_psp_reference: str=None, psp_reference: str=None, source_account_code: str=None, transaction_status: str=None, transfer_code: str=None):
        """Transaction - a model defined in OpenAPI

        :param amount: The amount of this Transaction.
        :param bank_account_detail: The bank_account_detail of this Transaction.
        :param capture_merchant_reference: The capture_merchant_reference of this Transaction.
        :param capture_psp_reference: The capture_psp_reference of this Transaction.
        :param creation_date: The creation_date of this Transaction.
        :param description: The description of this Transaction.
        :param destination_account_code: The destination_account_code of this Transaction.
        :param dispute_psp_reference: The dispute_psp_reference of this Transaction.
        :param dispute_reason_code: The dispute_reason_code of this Transaction.
        :param merchant_reference: The merchant_reference of this Transaction.
        :param payment_psp_reference: The payment_psp_reference of this Transaction.
        :param payout_psp_reference: The payout_psp_reference of this Transaction.
        :param psp_reference: The psp_reference of this Transaction.
        :param source_account_code: The source_account_code of this Transaction.
        :param transaction_status: The transaction_status of this Transaction.
        :param transfer_code: The transfer_code of this Transaction.
        """
        self.openapi_types = {
            'amount': Amount,
            'bank_account_detail': BankAccountDetail,
            'capture_merchant_reference': str,
            'capture_psp_reference': str,
            'creation_date': datetime,
            'description': str,
            'destination_account_code': str,
            'dispute_psp_reference': str,
            'dispute_reason_code': str,
            'merchant_reference': str,
            'payment_psp_reference': str,
            'payout_psp_reference': str,
            'psp_reference': str,
            'source_account_code': str,
            'transaction_status': str,
            'transfer_code': str
        }

        self.attribute_map = {
            'amount': 'amount',
            'bank_account_detail': 'bankAccountDetail',
            'capture_merchant_reference': 'captureMerchantReference',
            'capture_psp_reference': 'capturePspReference',
            'creation_date': 'creationDate',
            'description': 'description',
            'destination_account_code': 'destinationAccountCode',
            'dispute_psp_reference': 'disputePspReference',
            'dispute_reason_code': 'disputeReasonCode',
            'merchant_reference': 'merchantReference',
            'payment_psp_reference': 'paymentPspReference',
            'payout_psp_reference': 'payoutPspReference',
            'psp_reference': 'pspReference',
            'source_account_code': 'sourceAccountCode',
            'transaction_status': 'transactionStatus',
            'transfer_code': 'transferCode'
        }

        self._amount = amount
        self._bank_account_detail = bank_account_detail
        self._capture_merchant_reference = capture_merchant_reference
        self._capture_psp_reference = capture_psp_reference
        self._creation_date = creation_date
        self._description = description
        self._destination_account_code = destination_account_code
        self._dispute_psp_reference = dispute_psp_reference
        self._dispute_reason_code = dispute_reason_code
        self._merchant_reference = merchant_reference
        self._payment_psp_reference = payment_psp_reference
        self._payout_psp_reference = payout_psp_reference
        self._psp_reference = psp_reference
        self._source_account_code = source_account_code
        self._transaction_status = transaction_status
        self._transfer_code = transfer_code

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Transaction':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Transaction of this Transaction.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amount(self):
        """Gets the amount of this Transaction.

        The amount of the transaction.

        :return: The amount of this Transaction.
        :rtype: Amount
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this Transaction.

        The amount of the transaction.

        :param amount: The amount of this Transaction.
        :type amount: Amount
        """

        self._amount = amount

    @property
    def bank_account_detail(self):
        """Gets the bank_account_detail of this Transaction.

        The details of the bank account to where a payout was made.

        :return: The bank_account_detail of this Transaction.
        :rtype: BankAccountDetail
        """
        return self._bank_account_detail

    @bank_account_detail.setter
    def bank_account_detail(self, bank_account_detail):
        """Sets the bank_account_detail of this Transaction.

        The details of the bank account to where a payout was made.

        :param bank_account_detail: The bank_account_detail of this Transaction.
        :type bank_account_detail: BankAccountDetail
        """

        self._bank_account_detail = bank_account_detail

    @property
    def capture_merchant_reference(self):
        """Gets the capture_merchant_reference of this Transaction.

        The merchant reference of a related capture.

        :return: The capture_merchant_reference of this Transaction.
        :rtype: str
        """
        return self._capture_merchant_reference

    @capture_merchant_reference.setter
    def capture_merchant_reference(self, capture_merchant_reference):
        """Sets the capture_merchant_reference of this Transaction.

        The merchant reference of a related capture.

        :param capture_merchant_reference: The capture_merchant_reference of this Transaction.
        :type capture_merchant_reference: str
        """

        self._capture_merchant_reference = capture_merchant_reference

    @property
    def capture_psp_reference(self):
        """Gets the capture_psp_reference of this Transaction.

        The psp reference of a related capture.

        :return: The capture_psp_reference of this Transaction.
        :rtype: str
        """
        return self._capture_psp_reference

    @capture_psp_reference.setter
    def capture_psp_reference(self, capture_psp_reference):
        """Sets the capture_psp_reference of this Transaction.

        The psp reference of a related capture.

        :param capture_psp_reference: The capture_psp_reference of this Transaction.
        :type capture_psp_reference: str
        """

        self._capture_psp_reference = capture_psp_reference

    @property
    def creation_date(self):
        """Gets the creation_date of this Transaction.

        The date on which the transaction was performed.

        :return: The creation_date of this Transaction.
        :rtype: datetime
        """
        return self._creation_date

    @creation_date.setter
    def creation_date(self, creation_date):
        """Sets the creation_date of this Transaction.

        The date on which the transaction was performed.

        :param creation_date: The creation_date of this Transaction.
        :type creation_date: datetime
        """

        self._creation_date = creation_date

    @property
    def description(self):
        """Gets the description of this Transaction.

        A description of the transaction.

        :return: The description of this Transaction.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Transaction.

        A description of the transaction.

        :param description: The description of this Transaction.
        :type description: str
        """

        self._description = description

    @property
    def destination_account_code(self):
        """Gets the destination_account_code of this Transaction.

        The code of the account to which funds were credited during an outgoing fund transfer.

        :return: The destination_account_code of this Transaction.
        :rtype: str
        """
        return self._destination_account_code

    @destination_account_code.setter
    def destination_account_code(self, destination_account_code):
        """Sets the destination_account_code of this Transaction.

        The code of the account to which funds were credited during an outgoing fund transfer.

        :param destination_account_code: The destination_account_code of this Transaction.
        :type destination_account_code: str
        """

        self._destination_account_code = destination_account_code

    @property
    def dispute_psp_reference(self):
        """Gets the dispute_psp_reference of this Transaction.

        The psp reference of the related dispute.

        :return: The dispute_psp_reference of this Transaction.
        :rtype: str
        """
        return self._dispute_psp_reference

    @dispute_psp_reference.setter
    def dispute_psp_reference(self, dispute_psp_reference):
        """Sets the dispute_psp_reference of this Transaction.

        The psp reference of the related dispute.

        :param dispute_psp_reference: The dispute_psp_reference of this Transaction.
        :type dispute_psp_reference: str
        """

        self._dispute_psp_reference = dispute_psp_reference

    @property
    def dispute_reason_code(self):
        """Gets the dispute_reason_code of this Transaction.

        The reason code of a dispute.

        :return: The dispute_reason_code of this Transaction.
        :rtype: str
        """
        return self._dispute_reason_code

    @dispute_reason_code.setter
    def dispute_reason_code(self, dispute_reason_code):
        """Sets the dispute_reason_code of this Transaction.

        The reason code of a dispute.

        :param dispute_reason_code: The dispute_reason_code of this Transaction.
        :type dispute_reason_code: str
        """

        self._dispute_reason_code = dispute_reason_code

    @property
    def merchant_reference(self):
        """Gets the merchant_reference of this Transaction.

        The merchant reference of a transaction.

        :return: The merchant_reference of this Transaction.
        :rtype: str
        """
        return self._merchant_reference

    @merchant_reference.setter
    def merchant_reference(self, merchant_reference):
        """Sets the merchant_reference of this Transaction.

        The merchant reference of a transaction.

        :param merchant_reference: The merchant_reference of this Transaction.
        :type merchant_reference: str
        """

        self._merchant_reference = merchant_reference

    @property
    def payment_psp_reference(self):
        """Gets the payment_psp_reference of this Transaction.

        The psp reference of the related authorisation or transfer.

        :return: The payment_psp_reference of this Transaction.
        :rtype: str
        """
        return self._payment_psp_reference

    @payment_psp_reference.setter
    def payment_psp_reference(self, payment_psp_reference):
        """Sets the payment_psp_reference of this Transaction.

        The psp reference of the related authorisation or transfer.

        :param payment_psp_reference: The payment_psp_reference of this Transaction.
        :type payment_psp_reference: str
        """

        self._payment_psp_reference = payment_psp_reference

    @property
    def payout_psp_reference(self):
        """Gets the payout_psp_reference of this Transaction.

        The psp reference of the related payout.

        :return: The payout_psp_reference of this Transaction.
        :rtype: str
        """
        return self._payout_psp_reference

    @payout_psp_reference.setter
    def payout_psp_reference(self, payout_psp_reference):
        """Sets the payout_psp_reference of this Transaction.

        The psp reference of the related payout.

        :param payout_psp_reference: The payout_psp_reference of this Transaction.
        :type payout_psp_reference: str
        """

        self._payout_psp_reference = payout_psp_reference

    @property
    def psp_reference(self):
        """Gets the psp_reference of this Transaction.

        The psp reference of a transaction.

        :return: The psp_reference of this Transaction.
        :rtype: str
        """
        return self._psp_reference

    @psp_reference.setter
    def psp_reference(self, psp_reference):
        """Sets the psp_reference of this Transaction.

        The psp reference of a transaction.

        :param psp_reference: The psp_reference of this Transaction.
        :type psp_reference: str
        """

        self._psp_reference = psp_reference

    @property
    def source_account_code(self):
        """Gets the source_account_code of this Transaction.

        The code of the account from which funds were debited during an incoming fund transfer.

        :return: The source_account_code of this Transaction.
        :rtype: str
        """
        return self._source_account_code

    @source_account_code.setter
    def source_account_code(self, source_account_code):
        """Sets the source_account_code of this Transaction.

        The code of the account from which funds were debited during an incoming fund transfer.

        :param source_account_code: The source_account_code of this Transaction.
        :type source_account_code: str
        """

        self._source_account_code = source_account_code

    @property
    def transaction_status(self):
        """Gets the transaction_status of this Transaction.

        The status of the transaction. >Permitted values: `PendingCredit`, `CreditFailed`, `CreditClosed`, `CreditSuspended`, `Credited`, `Converted`, `PendingDebit`, `DebitFailed`, `Debited`, `DebitReversedReceived`, `DebitedReversed`, `ChargebackReceived`, `Chargeback`, `ChargebackReversedReceived`, `ChargebackReversed`, `Payout`, `PayoutReversed`, `FundTransfer`, `PendingFundTransfer`, `ManualCorrected`.

        :return: The transaction_status of this Transaction.
        :rtype: str
        """
        return self._transaction_status

    @transaction_status.setter
    def transaction_status(self, transaction_status):
        """Sets the transaction_status of this Transaction.

        The status of the transaction. >Permitted values: `PendingCredit`, `CreditFailed`, `CreditClosed`, `CreditSuspended`, `Credited`, `Converted`, `PendingDebit`, `DebitFailed`, `Debited`, `DebitReversedReceived`, `DebitedReversed`, `ChargebackReceived`, `Chargeback`, `ChargebackReversedReceived`, `ChargebackReversed`, `Payout`, `PayoutReversed`, `FundTransfer`, `PendingFundTransfer`, `ManualCorrected`.

        :param transaction_status: The transaction_status of this Transaction.
        :type transaction_status: str
        """
        allowed_values = ["BalanceNotPaidOutTransfer", "BalancePlatformSweep", "BalancePlatformSweepReturned", "Chargeback", "ChargebackCorrection", "ChargebackCorrectionReceived", "ChargebackReceived", "ChargebackReversed", "ChargebackReversedCorrection", "ChargebackReversedCorrectionReceived", "ChargebackReversedReceived", "Converted", "CreditClosed", "CreditFailed", "CreditReversed", "CreditReversedReceived", "CreditSuspended", "Credited", "DebitFailed", "DebitReversedReceived", "Debited", "DebitedReversed", "DepositCorrectionCredited", "DepositCorrectionDebited", "Fee", "FundTransfer", "FundTransferReversed", "InvoiceDeductionCredited", "InvoiceDeductionDebited", "ManualCorrected", "ManualCorrectionCredited", "ManualCorrectionDebited", "MerchantPayin", "MerchantPayinReversed", "Payout", "PayoutReversed", "PendingCredit", "PendingDebit", "PendingFundTransfer", "ReCredited", "ReCreditedReceived", "SecondChargeback", "SecondChargebackCorrection", "SecondChargebackCorrectionReceived", "SecondChargebackReceived"]  # noqa: E501
        if transaction_status not in allowed_values:
            raise ValueError(
                "Invalid value for `transaction_status` ({0}), must be one of {1}"
                .format(transaction_status, allowed_values)
            )

        self._transaction_status = transaction_status

    @property
    def transfer_code(self):
        """Gets the transfer_code of this Transaction.

        The transfer code of the transaction.

        :return: The transfer_code of this Transaction.
        :rtype: str
        """
        return self._transfer_code

    @transfer_code.setter
    def transfer_code(self, transfer_code):
        """Sets the transfer_code of this Transaction.

        The transfer code of the transaction.

        :param transfer_code: The transfer_code of this Transaction.
        :type transfer_code: str
        """

        self._transfer_code = transfer_code
