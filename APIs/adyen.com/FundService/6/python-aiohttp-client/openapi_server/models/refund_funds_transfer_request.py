# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.amount import Amount
from openapi_server import util


class RefundFundsTransferRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amount: Amount=None, merchant_reference: str=None, original_reference: str=None):
        """RefundFundsTransferRequest - a model defined in OpenAPI

        :param amount: The amount of this RefundFundsTransferRequest.
        :param merchant_reference: The merchant_reference of this RefundFundsTransferRequest.
        :param original_reference: The original_reference of this RefundFundsTransferRequest.
        """
        self.openapi_types = {
            'amount': Amount,
            'merchant_reference': str,
            'original_reference': str
        }

        self.attribute_map = {
            'amount': 'amount',
            'merchant_reference': 'merchantReference',
            'original_reference': 'originalReference'
        }

        self._amount = amount
        self._merchant_reference = merchant_reference
        self._original_reference = original_reference

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RefundFundsTransferRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RefundFundsTransferRequest of this RefundFundsTransferRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amount(self):
        """Gets the amount of this RefundFundsTransferRequest.

        The amount to be transferred.

        :return: The amount of this RefundFundsTransferRequest.
        :rtype: Amount
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this RefundFundsTransferRequest.

        The amount to be transferred.

        :param amount: The amount of this RefundFundsTransferRequest.
        :type amount: Amount
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")

        self._amount = amount

    @property
    def merchant_reference(self):
        """Gets the merchant_reference of this RefundFundsTransferRequest.

        A value that can be supplied at the discretion of the executing user in order to link multiple transactions to one another.

        :return: The merchant_reference of this RefundFundsTransferRequest.
        :rtype: str
        """
        return self._merchant_reference

    @merchant_reference.setter
    def merchant_reference(self, merchant_reference):
        """Sets the merchant_reference of this RefundFundsTransferRequest.

        A value that can be supplied at the discretion of the executing user in order to link multiple transactions to one another.

        :param merchant_reference: The merchant_reference of this RefundFundsTransferRequest.
        :type merchant_reference: str
        """

        self._merchant_reference = merchant_reference

    @property
    def original_reference(self):
        """Gets the original_reference of this RefundFundsTransferRequest.

        A PSP reference of the original fund transfer.

        :return: The original_reference of this RefundFundsTransferRequest.
        :rtype: str
        """
        return self._original_reference

    @original_reference.setter
    def original_reference(self, original_reference):
        """Sets the original_reference of this RefundFundsTransferRequest.

        A PSP reference of the original fund transfer.

        :param original_reference: The original_reference of this RefundFundsTransferRequest.
        :type original_reference: str
        """
        if original_reference is None:
            raise ValueError("Invalid value for `original_reference`, must not be `None`")

        self._original_reference = original_reference
