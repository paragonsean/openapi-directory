/**
 * Fund API
 * This API is used for the classic integration. If you are just starting your implementation, refer to our [new integration guide](https://docs.adyen.com/marketplaces-and-platforms) instead.  The Fund API provides endpoints for managing the funds in the accounts on your platform. These management operations include, for example, the transfer of funds from one account to another, the payout of funds to an account holder, and the retrieval of balances in an account.  For more information, refer to our [documentation](https://docs.adyen.com/marketplaces-and-platforms/classic/). ## Authentication Your Adyen contact will provide your API credential and an API key. To connect to the API, add an `X-API-Key` header with the API key as the value, for example:   ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ```  Alternatively, you can use the username and password to connect to the API using basic authentication. For example:  ``` curl -U \"ws@MarketPlace.YOUR_PLATFORM_ACCOUNT\":\"YOUR_WS_PASSWORD\" \\ -H \"Content-Type: application/json\" \\ ... ``` When going live, you need to generate new web service user credentials to access the [live endpoints](https://docs.adyen.com/development-resources/live-endpoints).  ## Versioning The Fund API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://cal-test.adyen.com/cal/services/Fund/v6/accountHolderBalance ```
 *
 * The version of the OpenAPI document: 6
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITransaction.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITransaction::OAITransaction(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITransaction::OAITransaction() {
    this->initializeModel();
}

OAITransaction::~OAITransaction() {}

void OAITransaction::initializeModel() {

    m_amount_isSet = false;
    m_amount_isValid = false;

    m_bank_account_detail_isSet = false;
    m_bank_account_detail_isValid = false;

    m_capture_merchant_reference_isSet = false;
    m_capture_merchant_reference_isValid = false;

    m_capture_psp_reference_isSet = false;
    m_capture_psp_reference_isValid = false;

    m_creation_date_isSet = false;
    m_creation_date_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_destination_account_code_isSet = false;
    m_destination_account_code_isValid = false;

    m_dispute_psp_reference_isSet = false;
    m_dispute_psp_reference_isValid = false;

    m_dispute_reason_code_isSet = false;
    m_dispute_reason_code_isValid = false;

    m_merchant_reference_isSet = false;
    m_merchant_reference_isValid = false;

    m_payment_psp_reference_isSet = false;
    m_payment_psp_reference_isValid = false;

    m_payout_psp_reference_isSet = false;
    m_payout_psp_reference_isValid = false;

    m_psp_reference_isSet = false;
    m_psp_reference_isValid = false;

    m_source_account_code_isSet = false;
    m_source_account_code_isValid = false;

    m_transaction_status_isSet = false;
    m_transaction_status_isValid = false;

    m_transfer_code_isSet = false;
    m_transfer_code_isValid = false;
}

void OAITransaction::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITransaction::fromJsonObject(QJsonObject json) {

    m_amount_isValid = ::OpenAPI::fromJsonValue(m_amount, json[QString("amount")]);
    m_amount_isSet = !json[QString("amount")].isNull() && m_amount_isValid;

    m_bank_account_detail_isValid = ::OpenAPI::fromJsonValue(m_bank_account_detail, json[QString("bankAccountDetail")]);
    m_bank_account_detail_isSet = !json[QString("bankAccountDetail")].isNull() && m_bank_account_detail_isValid;

    m_capture_merchant_reference_isValid = ::OpenAPI::fromJsonValue(m_capture_merchant_reference, json[QString("captureMerchantReference")]);
    m_capture_merchant_reference_isSet = !json[QString("captureMerchantReference")].isNull() && m_capture_merchant_reference_isValid;

    m_capture_psp_reference_isValid = ::OpenAPI::fromJsonValue(m_capture_psp_reference, json[QString("capturePspReference")]);
    m_capture_psp_reference_isSet = !json[QString("capturePspReference")].isNull() && m_capture_psp_reference_isValid;

    m_creation_date_isValid = ::OpenAPI::fromJsonValue(m_creation_date, json[QString("creationDate")]);
    m_creation_date_isSet = !json[QString("creationDate")].isNull() && m_creation_date_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_destination_account_code_isValid = ::OpenAPI::fromJsonValue(m_destination_account_code, json[QString("destinationAccountCode")]);
    m_destination_account_code_isSet = !json[QString("destinationAccountCode")].isNull() && m_destination_account_code_isValid;

    m_dispute_psp_reference_isValid = ::OpenAPI::fromJsonValue(m_dispute_psp_reference, json[QString("disputePspReference")]);
    m_dispute_psp_reference_isSet = !json[QString("disputePspReference")].isNull() && m_dispute_psp_reference_isValid;

    m_dispute_reason_code_isValid = ::OpenAPI::fromJsonValue(m_dispute_reason_code, json[QString("disputeReasonCode")]);
    m_dispute_reason_code_isSet = !json[QString("disputeReasonCode")].isNull() && m_dispute_reason_code_isValid;

    m_merchant_reference_isValid = ::OpenAPI::fromJsonValue(m_merchant_reference, json[QString("merchantReference")]);
    m_merchant_reference_isSet = !json[QString("merchantReference")].isNull() && m_merchant_reference_isValid;

    m_payment_psp_reference_isValid = ::OpenAPI::fromJsonValue(m_payment_psp_reference, json[QString("paymentPspReference")]);
    m_payment_psp_reference_isSet = !json[QString("paymentPspReference")].isNull() && m_payment_psp_reference_isValid;

    m_payout_psp_reference_isValid = ::OpenAPI::fromJsonValue(m_payout_psp_reference, json[QString("payoutPspReference")]);
    m_payout_psp_reference_isSet = !json[QString("payoutPspReference")].isNull() && m_payout_psp_reference_isValid;

    m_psp_reference_isValid = ::OpenAPI::fromJsonValue(m_psp_reference, json[QString("pspReference")]);
    m_psp_reference_isSet = !json[QString("pspReference")].isNull() && m_psp_reference_isValid;

    m_source_account_code_isValid = ::OpenAPI::fromJsonValue(m_source_account_code, json[QString("sourceAccountCode")]);
    m_source_account_code_isSet = !json[QString("sourceAccountCode")].isNull() && m_source_account_code_isValid;

    m_transaction_status_isValid = ::OpenAPI::fromJsonValue(m_transaction_status, json[QString("transactionStatus")]);
    m_transaction_status_isSet = !json[QString("transactionStatus")].isNull() && m_transaction_status_isValid;

    m_transfer_code_isValid = ::OpenAPI::fromJsonValue(m_transfer_code, json[QString("transferCode")]);
    m_transfer_code_isSet = !json[QString("transferCode")].isNull() && m_transfer_code_isValid;
}

QString OAITransaction::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITransaction::asJsonObject() const {
    QJsonObject obj;
    if (m_amount.isSet()) {
        obj.insert(QString("amount"), ::OpenAPI::toJsonValue(m_amount));
    }
    if (m_bank_account_detail.isSet()) {
        obj.insert(QString("bankAccountDetail"), ::OpenAPI::toJsonValue(m_bank_account_detail));
    }
    if (m_capture_merchant_reference_isSet) {
        obj.insert(QString("captureMerchantReference"), ::OpenAPI::toJsonValue(m_capture_merchant_reference));
    }
    if (m_capture_psp_reference_isSet) {
        obj.insert(QString("capturePspReference"), ::OpenAPI::toJsonValue(m_capture_psp_reference));
    }
    if (m_creation_date_isSet) {
        obj.insert(QString("creationDate"), ::OpenAPI::toJsonValue(m_creation_date));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_destination_account_code_isSet) {
        obj.insert(QString("destinationAccountCode"), ::OpenAPI::toJsonValue(m_destination_account_code));
    }
    if (m_dispute_psp_reference_isSet) {
        obj.insert(QString("disputePspReference"), ::OpenAPI::toJsonValue(m_dispute_psp_reference));
    }
    if (m_dispute_reason_code_isSet) {
        obj.insert(QString("disputeReasonCode"), ::OpenAPI::toJsonValue(m_dispute_reason_code));
    }
    if (m_merchant_reference_isSet) {
        obj.insert(QString("merchantReference"), ::OpenAPI::toJsonValue(m_merchant_reference));
    }
    if (m_payment_psp_reference_isSet) {
        obj.insert(QString("paymentPspReference"), ::OpenAPI::toJsonValue(m_payment_psp_reference));
    }
    if (m_payout_psp_reference_isSet) {
        obj.insert(QString("payoutPspReference"), ::OpenAPI::toJsonValue(m_payout_psp_reference));
    }
    if (m_psp_reference_isSet) {
        obj.insert(QString("pspReference"), ::OpenAPI::toJsonValue(m_psp_reference));
    }
    if (m_source_account_code_isSet) {
        obj.insert(QString("sourceAccountCode"), ::OpenAPI::toJsonValue(m_source_account_code));
    }
    if (m_transaction_status_isSet) {
        obj.insert(QString("transactionStatus"), ::OpenAPI::toJsonValue(m_transaction_status));
    }
    if (m_transfer_code_isSet) {
        obj.insert(QString("transferCode"), ::OpenAPI::toJsonValue(m_transfer_code));
    }
    return obj;
}

OAIAmount OAITransaction::getAmount() const {
    return m_amount;
}
void OAITransaction::setAmount(const OAIAmount &amount) {
    m_amount = amount;
    m_amount_isSet = true;
}

bool OAITransaction::is_amount_Set() const{
    return m_amount_isSet;
}

bool OAITransaction::is_amount_Valid() const{
    return m_amount_isValid;
}

OAIBankAccountDetail OAITransaction::getBankAccountDetail() const {
    return m_bank_account_detail;
}
void OAITransaction::setBankAccountDetail(const OAIBankAccountDetail &bank_account_detail) {
    m_bank_account_detail = bank_account_detail;
    m_bank_account_detail_isSet = true;
}

bool OAITransaction::is_bank_account_detail_Set() const{
    return m_bank_account_detail_isSet;
}

bool OAITransaction::is_bank_account_detail_Valid() const{
    return m_bank_account_detail_isValid;
}

QString OAITransaction::getCaptureMerchantReference() const {
    return m_capture_merchant_reference;
}
void OAITransaction::setCaptureMerchantReference(const QString &capture_merchant_reference) {
    m_capture_merchant_reference = capture_merchant_reference;
    m_capture_merchant_reference_isSet = true;
}

bool OAITransaction::is_capture_merchant_reference_Set() const{
    return m_capture_merchant_reference_isSet;
}

bool OAITransaction::is_capture_merchant_reference_Valid() const{
    return m_capture_merchant_reference_isValid;
}

QString OAITransaction::getCapturePspReference() const {
    return m_capture_psp_reference;
}
void OAITransaction::setCapturePspReference(const QString &capture_psp_reference) {
    m_capture_psp_reference = capture_psp_reference;
    m_capture_psp_reference_isSet = true;
}

bool OAITransaction::is_capture_psp_reference_Set() const{
    return m_capture_psp_reference_isSet;
}

bool OAITransaction::is_capture_psp_reference_Valid() const{
    return m_capture_psp_reference_isValid;
}

QDateTime OAITransaction::getCreationDate() const {
    return m_creation_date;
}
void OAITransaction::setCreationDate(const QDateTime &creation_date) {
    m_creation_date = creation_date;
    m_creation_date_isSet = true;
}

bool OAITransaction::is_creation_date_Set() const{
    return m_creation_date_isSet;
}

bool OAITransaction::is_creation_date_Valid() const{
    return m_creation_date_isValid;
}

QString OAITransaction::getDescription() const {
    return m_description;
}
void OAITransaction::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAITransaction::is_description_Set() const{
    return m_description_isSet;
}

bool OAITransaction::is_description_Valid() const{
    return m_description_isValid;
}

QString OAITransaction::getDestinationAccountCode() const {
    return m_destination_account_code;
}
void OAITransaction::setDestinationAccountCode(const QString &destination_account_code) {
    m_destination_account_code = destination_account_code;
    m_destination_account_code_isSet = true;
}

bool OAITransaction::is_destination_account_code_Set() const{
    return m_destination_account_code_isSet;
}

bool OAITransaction::is_destination_account_code_Valid() const{
    return m_destination_account_code_isValid;
}

QString OAITransaction::getDisputePspReference() const {
    return m_dispute_psp_reference;
}
void OAITransaction::setDisputePspReference(const QString &dispute_psp_reference) {
    m_dispute_psp_reference = dispute_psp_reference;
    m_dispute_psp_reference_isSet = true;
}

bool OAITransaction::is_dispute_psp_reference_Set() const{
    return m_dispute_psp_reference_isSet;
}

bool OAITransaction::is_dispute_psp_reference_Valid() const{
    return m_dispute_psp_reference_isValid;
}

QString OAITransaction::getDisputeReasonCode() const {
    return m_dispute_reason_code;
}
void OAITransaction::setDisputeReasonCode(const QString &dispute_reason_code) {
    m_dispute_reason_code = dispute_reason_code;
    m_dispute_reason_code_isSet = true;
}

bool OAITransaction::is_dispute_reason_code_Set() const{
    return m_dispute_reason_code_isSet;
}

bool OAITransaction::is_dispute_reason_code_Valid() const{
    return m_dispute_reason_code_isValid;
}

QString OAITransaction::getMerchantReference() const {
    return m_merchant_reference;
}
void OAITransaction::setMerchantReference(const QString &merchant_reference) {
    m_merchant_reference = merchant_reference;
    m_merchant_reference_isSet = true;
}

bool OAITransaction::is_merchant_reference_Set() const{
    return m_merchant_reference_isSet;
}

bool OAITransaction::is_merchant_reference_Valid() const{
    return m_merchant_reference_isValid;
}

QString OAITransaction::getPaymentPspReference() const {
    return m_payment_psp_reference;
}
void OAITransaction::setPaymentPspReference(const QString &payment_psp_reference) {
    m_payment_psp_reference = payment_psp_reference;
    m_payment_psp_reference_isSet = true;
}

bool OAITransaction::is_payment_psp_reference_Set() const{
    return m_payment_psp_reference_isSet;
}

bool OAITransaction::is_payment_psp_reference_Valid() const{
    return m_payment_psp_reference_isValid;
}

QString OAITransaction::getPayoutPspReference() const {
    return m_payout_psp_reference;
}
void OAITransaction::setPayoutPspReference(const QString &payout_psp_reference) {
    m_payout_psp_reference = payout_psp_reference;
    m_payout_psp_reference_isSet = true;
}

bool OAITransaction::is_payout_psp_reference_Set() const{
    return m_payout_psp_reference_isSet;
}

bool OAITransaction::is_payout_psp_reference_Valid() const{
    return m_payout_psp_reference_isValid;
}

QString OAITransaction::getPspReference() const {
    return m_psp_reference;
}
void OAITransaction::setPspReference(const QString &psp_reference) {
    m_psp_reference = psp_reference;
    m_psp_reference_isSet = true;
}

bool OAITransaction::is_psp_reference_Set() const{
    return m_psp_reference_isSet;
}

bool OAITransaction::is_psp_reference_Valid() const{
    return m_psp_reference_isValid;
}

QString OAITransaction::getSourceAccountCode() const {
    return m_source_account_code;
}
void OAITransaction::setSourceAccountCode(const QString &source_account_code) {
    m_source_account_code = source_account_code;
    m_source_account_code_isSet = true;
}

bool OAITransaction::is_source_account_code_Set() const{
    return m_source_account_code_isSet;
}

bool OAITransaction::is_source_account_code_Valid() const{
    return m_source_account_code_isValid;
}

QString OAITransaction::getTransactionStatus() const {
    return m_transaction_status;
}
void OAITransaction::setTransactionStatus(const QString &transaction_status) {
    m_transaction_status = transaction_status;
    m_transaction_status_isSet = true;
}

bool OAITransaction::is_transaction_status_Set() const{
    return m_transaction_status_isSet;
}

bool OAITransaction::is_transaction_status_Valid() const{
    return m_transaction_status_isValid;
}

QString OAITransaction::getTransferCode() const {
    return m_transfer_code;
}
void OAITransaction::setTransferCode(const QString &transfer_code) {
    m_transfer_code = transfer_code;
    m_transfer_code_isSet = true;
}

bool OAITransaction::is_transfer_code_Set() const{
    return m_transfer_code_isSet;
}

bool OAITransaction::is_transfer_code_Valid() const{
    return m_transfer_code_isValid;
}

bool OAITransaction::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_amount.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_bank_account_detail.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_capture_merchant_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_capture_psp_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination_account_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dispute_psp_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dispute_reason_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_merchant_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_psp_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payout_psp_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_psp_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_account_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transaction_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transfer_code_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITransaction::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
