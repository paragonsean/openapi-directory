/**
 * Fund API
 * This API is used for the classic integration. If you are just starting your implementation, refer to our [new integration guide](https://docs.adyen.com/marketplaces-and-platforms) instead.  The Fund API provides endpoints for managing the funds in the accounts on your platform. These management operations include, for example, the transfer of funds from one account to another, the payout of funds to an account holder, and the retrieval of balances in an account.  For more information, refer to our [documentation](https://docs.adyen.com/marketplaces-and-platforms/classic/). ## Authentication Your Adyen contact will provide your API credential and an API key. To connect to the API, add an `X-API-Key` header with the API key as the value, for example:   ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ```  Alternatively, you can use the username and password to connect to the API using basic authentication. For example:  ``` curl -U \"ws@MarketPlace.YOUR_PLATFORM_ACCOUNT\":\"YOUR_WS_PASSWORD\" \\ -H \"Content-Type: application/json\" \\ ... ``` When going live, you need to generate new web service user credentials to access the [live endpoints](https://docs.adyen.com/development-resources/live-endpoints).  ## Versioning The Fund API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://cal-test.adyen.com/cal/services/Fund/v6/accountHolderBalance ```
 *
 * The version of the OpenAPI document: 6
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISetupBeneficiaryRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISetupBeneficiaryRequest::OAISetupBeneficiaryRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISetupBeneficiaryRequest::OAISetupBeneficiaryRequest() {
    this->initializeModel();
}

OAISetupBeneficiaryRequest::~OAISetupBeneficiaryRequest() {}

void OAISetupBeneficiaryRequest::initializeModel() {

    m_destination_account_code_isSet = false;
    m_destination_account_code_isValid = false;

    m_merchant_reference_isSet = false;
    m_merchant_reference_isValid = false;

    m_source_account_code_isSet = false;
    m_source_account_code_isValid = false;
}

void OAISetupBeneficiaryRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISetupBeneficiaryRequest::fromJsonObject(QJsonObject json) {

    m_destination_account_code_isValid = ::OpenAPI::fromJsonValue(m_destination_account_code, json[QString("destinationAccountCode")]);
    m_destination_account_code_isSet = !json[QString("destinationAccountCode")].isNull() && m_destination_account_code_isValid;

    m_merchant_reference_isValid = ::OpenAPI::fromJsonValue(m_merchant_reference, json[QString("merchantReference")]);
    m_merchant_reference_isSet = !json[QString("merchantReference")].isNull() && m_merchant_reference_isValid;

    m_source_account_code_isValid = ::OpenAPI::fromJsonValue(m_source_account_code, json[QString("sourceAccountCode")]);
    m_source_account_code_isSet = !json[QString("sourceAccountCode")].isNull() && m_source_account_code_isValid;
}

QString OAISetupBeneficiaryRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISetupBeneficiaryRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_destination_account_code_isSet) {
        obj.insert(QString("destinationAccountCode"), ::OpenAPI::toJsonValue(m_destination_account_code));
    }
    if (m_merchant_reference_isSet) {
        obj.insert(QString("merchantReference"), ::OpenAPI::toJsonValue(m_merchant_reference));
    }
    if (m_source_account_code_isSet) {
        obj.insert(QString("sourceAccountCode"), ::OpenAPI::toJsonValue(m_source_account_code));
    }
    return obj;
}

QString OAISetupBeneficiaryRequest::getDestinationAccountCode() const {
    return m_destination_account_code;
}
void OAISetupBeneficiaryRequest::setDestinationAccountCode(const QString &destination_account_code) {
    m_destination_account_code = destination_account_code;
    m_destination_account_code_isSet = true;
}

bool OAISetupBeneficiaryRequest::is_destination_account_code_Set() const{
    return m_destination_account_code_isSet;
}

bool OAISetupBeneficiaryRequest::is_destination_account_code_Valid() const{
    return m_destination_account_code_isValid;
}

QString OAISetupBeneficiaryRequest::getMerchantReference() const {
    return m_merchant_reference;
}
void OAISetupBeneficiaryRequest::setMerchantReference(const QString &merchant_reference) {
    m_merchant_reference = merchant_reference;
    m_merchant_reference_isSet = true;
}

bool OAISetupBeneficiaryRequest::is_merchant_reference_Set() const{
    return m_merchant_reference_isSet;
}

bool OAISetupBeneficiaryRequest::is_merchant_reference_Valid() const{
    return m_merchant_reference_isValid;
}

QString OAISetupBeneficiaryRequest::getSourceAccountCode() const {
    return m_source_account_code;
}
void OAISetupBeneficiaryRequest::setSourceAccountCode(const QString &source_account_code) {
    m_source_account_code = source_account_code;
    m_source_account_code_isSet = true;
}

bool OAISetupBeneficiaryRequest::is_source_account_code_Set() const{
    return m_source_account_code_isSet;
}

bool OAISetupBeneficiaryRequest::is_source_account_code_Valid() const{
    return m_source_account_code_isValid;
}

bool OAISetupBeneficiaryRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_destination_account_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_merchant_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_account_code_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISetupBeneficiaryRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_destination_account_code_isValid && m_source_account_code_isValid && true;
}

} // namespace OpenAPI
