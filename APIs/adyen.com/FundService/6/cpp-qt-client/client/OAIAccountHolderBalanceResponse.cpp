/**
 * Fund API
 * This API is used for the classic integration. If you are just starting your implementation, refer to our [new integration guide](https://docs.adyen.com/marketplaces-and-platforms) instead.  The Fund API provides endpoints for managing the funds in the accounts on your platform. These management operations include, for example, the transfer of funds from one account to another, the payout of funds to an account holder, and the retrieval of balances in an account.  For more information, refer to our [documentation](https://docs.adyen.com/marketplaces-and-platforms/classic/). ## Authentication Your Adyen contact will provide your API credential and an API key. To connect to the API, add an `X-API-Key` header with the API key as the value, for example:   ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ```  Alternatively, you can use the username and password to connect to the API using basic authentication. For example:  ``` curl -U \"ws@MarketPlace.YOUR_PLATFORM_ACCOUNT\":\"YOUR_WS_PASSWORD\" \\ -H \"Content-Type: application/json\" \\ ... ``` When going live, you need to generate new web service user credentials to access the [live endpoints](https://docs.adyen.com/development-resources/live-endpoints).  ## Versioning The Fund API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://cal-test.adyen.com/cal/services/Fund/v6/accountHolderBalance ```
 *
 * The version of the OpenAPI document: 6
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAccountHolderBalanceResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAccountHolderBalanceResponse::OAIAccountHolderBalanceResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAccountHolderBalanceResponse::OAIAccountHolderBalanceResponse() {
    this->initializeModel();
}

OAIAccountHolderBalanceResponse::~OAIAccountHolderBalanceResponse() {}

void OAIAccountHolderBalanceResponse::initializeModel() {

    m_balance_per_account_isSet = false;
    m_balance_per_account_isValid = false;

    m_invalid_fields_isSet = false;
    m_invalid_fields_isValid = false;

    m_psp_reference_isSet = false;
    m_psp_reference_isValid = false;

    m_result_code_isSet = false;
    m_result_code_isValid = false;

    m_total_balance_isSet = false;
    m_total_balance_isValid = false;
}

void OAIAccountHolderBalanceResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAccountHolderBalanceResponse::fromJsonObject(QJsonObject json) {

    m_balance_per_account_isValid = ::OpenAPI::fromJsonValue(m_balance_per_account, json[QString("balancePerAccount")]);
    m_balance_per_account_isSet = !json[QString("balancePerAccount")].isNull() && m_balance_per_account_isValid;

    m_invalid_fields_isValid = ::OpenAPI::fromJsonValue(m_invalid_fields, json[QString("invalidFields")]);
    m_invalid_fields_isSet = !json[QString("invalidFields")].isNull() && m_invalid_fields_isValid;

    m_psp_reference_isValid = ::OpenAPI::fromJsonValue(m_psp_reference, json[QString("pspReference")]);
    m_psp_reference_isSet = !json[QString("pspReference")].isNull() && m_psp_reference_isValid;

    m_result_code_isValid = ::OpenAPI::fromJsonValue(m_result_code, json[QString("resultCode")]);
    m_result_code_isSet = !json[QString("resultCode")].isNull() && m_result_code_isValid;

    m_total_balance_isValid = ::OpenAPI::fromJsonValue(m_total_balance, json[QString("totalBalance")]);
    m_total_balance_isSet = !json[QString("totalBalance")].isNull() && m_total_balance_isValid;
}

QString OAIAccountHolderBalanceResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAccountHolderBalanceResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_balance_per_account.size() > 0) {
        obj.insert(QString("balancePerAccount"), ::OpenAPI::toJsonValue(m_balance_per_account));
    }
    if (m_invalid_fields.size() > 0) {
        obj.insert(QString("invalidFields"), ::OpenAPI::toJsonValue(m_invalid_fields));
    }
    if (m_psp_reference_isSet) {
        obj.insert(QString("pspReference"), ::OpenAPI::toJsonValue(m_psp_reference));
    }
    if (m_result_code_isSet) {
        obj.insert(QString("resultCode"), ::OpenAPI::toJsonValue(m_result_code));
    }
    if (m_total_balance.isSet()) {
        obj.insert(QString("totalBalance"), ::OpenAPI::toJsonValue(m_total_balance));
    }
    return obj;
}

QList<OAIAccountDetailBalance> OAIAccountHolderBalanceResponse::getBalancePerAccount() const {
    return m_balance_per_account;
}
void OAIAccountHolderBalanceResponse::setBalancePerAccount(const QList<OAIAccountDetailBalance> &balance_per_account) {
    m_balance_per_account = balance_per_account;
    m_balance_per_account_isSet = true;
}

bool OAIAccountHolderBalanceResponse::is_balance_per_account_Set() const{
    return m_balance_per_account_isSet;
}

bool OAIAccountHolderBalanceResponse::is_balance_per_account_Valid() const{
    return m_balance_per_account_isValid;
}

QList<OAIErrorFieldType> OAIAccountHolderBalanceResponse::getInvalidFields() const {
    return m_invalid_fields;
}
void OAIAccountHolderBalanceResponse::setInvalidFields(const QList<OAIErrorFieldType> &invalid_fields) {
    m_invalid_fields = invalid_fields;
    m_invalid_fields_isSet = true;
}

bool OAIAccountHolderBalanceResponse::is_invalid_fields_Set() const{
    return m_invalid_fields_isSet;
}

bool OAIAccountHolderBalanceResponse::is_invalid_fields_Valid() const{
    return m_invalid_fields_isValid;
}

QString OAIAccountHolderBalanceResponse::getPspReference() const {
    return m_psp_reference;
}
void OAIAccountHolderBalanceResponse::setPspReference(const QString &psp_reference) {
    m_psp_reference = psp_reference;
    m_psp_reference_isSet = true;
}

bool OAIAccountHolderBalanceResponse::is_psp_reference_Set() const{
    return m_psp_reference_isSet;
}

bool OAIAccountHolderBalanceResponse::is_psp_reference_Valid() const{
    return m_psp_reference_isValid;
}

QString OAIAccountHolderBalanceResponse::getResultCode() const {
    return m_result_code;
}
void OAIAccountHolderBalanceResponse::setResultCode(const QString &result_code) {
    m_result_code = result_code;
    m_result_code_isSet = true;
}

bool OAIAccountHolderBalanceResponse::is_result_code_Set() const{
    return m_result_code_isSet;
}

bool OAIAccountHolderBalanceResponse::is_result_code_Valid() const{
    return m_result_code_isValid;
}

OAIDetailBalance OAIAccountHolderBalanceResponse::getTotalBalance() const {
    return m_total_balance;
}
void OAIAccountHolderBalanceResponse::setTotalBalance(const OAIDetailBalance &total_balance) {
    m_total_balance = total_balance;
    m_total_balance_isSet = true;
}

bool OAIAccountHolderBalanceResponse::is_total_balance_Set() const{
    return m_total_balance_isSet;
}

bool OAIAccountHolderBalanceResponse::is_total_balance_Valid() const{
    return m_total_balance_isValid;
}

bool OAIAccountHolderBalanceResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_balance_per_account.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_invalid_fields.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_psp_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_result_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_balance.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAccountHolderBalanceResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
