/**
 * Fund API
 * This API is used for the classic integration. If you are just starting your implementation, refer to our [new integration guide](https://docs.adyen.com/marketplaces-and-platforms) instead.  The Fund API provides endpoints for managing the funds in the accounts on your platform. These management operations include, for example, the transfer of funds from one account to another, the payout of funds to an account holder, and the retrieval of balances in an account.  For more information, refer to our [documentation](https://docs.adyen.com/marketplaces-and-platforms/classic/). ## Authentication Your Adyen contact will provide your API credential and an API key. To connect to the API, add an `X-API-Key` header with the API key as the value, for example:   ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ```  Alternatively, you can use the username and password to connect to the API using basic authentication. For example:  ``` curl -U \"ws@MarketPlace.YOUR_PLATFORM_ACCOUNT\":\"YOUR_WS_PASSWORD\" \\ -H \"Content-Type: application/json\" \\ ... ``` When going live, you need to generate new web service user credentials to access the [live endpoints](https://docs.adyen.com/development-resources/live-endpoints).  ## Versioning The Fund API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://cal-test.adyen.com/cal/services/Fund/v6/accountHolderBalance ```
 *
 * The version of the OpenAPI document: 6
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIGeneralApi_H
#define OAI_OAIGeneralApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAccountHolderBalanceRequest.h"
#include "OAIAccountHolderBalanceResponse.h"
#include "OAIAccountHolderTransactionListRequest.h"
#include "OAIAccountHolderTransactionListResponse.h"
#include "OAIDebitAccountHolderRequest.h"
#include "OAIDebitAccountHolderResponse.h"
#include "OAIPayoutAccountHolderRequest.h"
#include "OAIPayoutAccountHolderResponse.h"
#include "OAIRefundFundsTransferRequest.h"
#include "OAIRefundFundsTransferResponse.h"
#include "OAIRefundNotPaidOutTransfersRequest.h"
#include "OAIRefundNotPaidOutTransfersResponse.h"
#include "OAIServiceError.h"
#include "OAISetupBeneficiaryRequest.h"
#include "OAISetupBeneficiaryResponse.h"
#include "OAITransferFundsRequest.h"
#include "OAITransferFundsResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIGeneralApi : public QObject {
    Q_OBJECT

public:
    OAIGeneralApi(const int timeOut = 0);
    ~OAIGeneralApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_account_holder_balance_request OAIAccountHolderBalanceRequest [optional]
    */
    virtual void postAccountHolderBalance(const ::OpenAPI::OptionalParam<OAIAccountHolderBalanceRequest> &oai_account_holder_balance_request = ::OpenAPI::OptionalParam<OAIAccountHolderBalanceRequest>());

    /**
    * @param[in]  oai_account_holder_transaction_list_request OAIAccountHolderTransactionListRequest [optional]
    */
    virtual void postAccountHolderTransactionList(const ::OpenAPI::OptionalParam<OAIAccountHolderTransactionListRequest> &oai_account_holder_transaction_list_request = ::OpenAPI::OptionalParam<OAIAccountHolderTransactionListRequest>());

    /**
    * @param[in]  oai_debit_account_holder_request OAIDebitAccountHolderRequest [optional]
    */
    virtual void postDebitAccountHolder(const ::OpenAPI::OptionalParam<OAIDebitAccountHolderRequest> &oai_debit_account_holder_request = ::OpenAPI::OptionalParam<OAIDebitAccountHolderRequest>());

    /**
    * @param[in]  oai_payout_account_holder_request OAIPayoutAccountHolderRequest [optional]
    */
    virtual void postPayoutAccountHolder(const ::OpenAPI::OptionalParam<OAIPayoutAccountHolderRequest> &oai_payout_account_holder_request = ::OpenAPI::OptionalParam<OAIPayoutAccountHolderRequest>());

    /**
    * @param[in]  oai_refund_funds_transfer_request OAIRefundFundsTransferRequest [optional]
    */
    virtual void postRefundFundsTransfer(const ::OpenAPI::OptionalParam<OAIRefundFundsTransferRequest> &oai_refund_funds_transfer_request = ::OpenAPI::OptionalParam<OAIRefundFundsTransferRequest>());

    /**
    * @param[in]  oai_refund_not_paid_out_transfers_request OAIRefundNotPaidOutTransfersRequest [optional]
    */
    virtual void postRefundNotPaidOutTransfers(const ::OpenAPI::OptionalParam<OAIRefundNotPaidOutTransfersRequest> &oai_refund_not_paid_out_transfers_request = ::OpenAPI::OptionalParam<OAIRefundNotPaidOutTransfersRequest>());

    /**
    * @param[in]  oai_setup_beneficiary_request OAISetupBeneficiaryRequest [optional]
    */
    virtual void postSetupBeneficiary(const ::OpenAPI::OptionalParam<OAISetupBeneficiaryRequest> &oai_setup_beneficiary_request = ::OpenAPI::OptionalParam<OAISetupBeneficiaryRequest>());

    /**
    * @param[in]  oai_transfer_funds_request OAITransferFundsRequest [optional]
    */
    virtual void postTransferFunds(const ::OpenAPI::OptionalParam<OAITransferFundsRequest> &oai_transfer_funds_request = ::OpenAPI::OptionalParam<OAITransferFundsRequest>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void postAccountHolderBalanceCallback(OAIHttpRequestWorker *worker);
    void postAccountHolderTransactionListCallback(OAIHttpRequestWorker *worker);
    void postDebitAccountHolderCallback(OAIHttpRequestWorker *worker);
    void postPayoutAccountHolderCallback(OAIHttpRequestWorker *worker);
    void postRefundFundsTransferCallback(OAIHttpRequestWorker *worker);
    void postRefundNotPaidOutTransfersCallback(OAIHttpRequestWorker *worker);
    void postSetupBeneficiaryCallback(OAIHttpRequestWorker *worker);
    void postTransferFundsCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void postAccountHolderBalanceSignal(OAIAccountHolderBalanceResponse summary);
    void postAccountHolderTransactionListSignal(OAIAccountHolderTransactionListResponse summary);
    void postDebitAccountHolderSignal(OAIDebitAccountHolderResponse summary);
    void postPayoutAccountHolderSignal(OAIPayoutAccountHolderResponse summary);
    void postRefundFundsTransferSignal(OAIRefundFundsTransferResponse summary);
    void postRefundNotPaidOutTransfersSignal(OAIRefundNotPaidOutTransfersResponse summary);
    void postSetupBeneficiarySignal(OAISetupBeneficiaryResponse summary);
    void postTransferFundsSignal(OAITransferFundsResponse summary);


    void postAccountHolderBalanceSignalFull(OAIHttpRequestWorker *worker, OAIAccountHolderBalanceResponse summary);
    void postAccountHolderTransactionListSignalFull(OAIHttpRequestWorker *worker, OAIAccountHolderTransactionListResponse summary);
    void postDebitAccountHolderSignalFull(OAIHttpRequestWorker *worker, OAIDebitAccountHolderResponse summary);
    void postPayoutAccountHolderSignalFull(OAIHttpRequestWorker *worker, OAIPayoutAccountHolderResponse summary);
    void postRefundFundsTransferSignalFull(OAIHttpRequestWorker *worker, OAIRefundFundsTransferResponse summary);
    void postRefundNotPaidOutTransfersSignalFull(OAIHttpRequestWorker *worker, OAIRefundNotPaidOutTransfersResponse summary);
    void postSetupBeneficiarySignalFull(OAIHttpRequestWorker *worker, OAISetupBeneficiaryResponse summary);
    void postTransferFundsSignalFull(OAIHttpRequestWorker *worker, OAITransferFundsResponse summary);

    Q_DECL_DEPRECATED_X("Use postAccountHolderBalanceSignalError() instead")
    void postAccountHolderBalanceSignalE(OAIAccountHolderBalanceResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postAccountHolderBalanceSignalError(OAIAccountHolderBalanceResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postAccountHolderTransactionListSignalError() instead")
    void postAccountHolderTransactionListSignalE(OAIAccountHolderTransactionListResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postAccountHolderTransactionListSignalError(OAIAccountHolderTransactionListResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postDebitAccountHolderSignalError() instead")
    void postDebitAccountHolderSignalE(OAIDebitAccountHolderResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postDebitAccountHolderSignalError(OAIDebitAccountHolderResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postPayoutAccountHolderSignalError() instead")
    void postPayoutAccountHolderSignalE(OAIPayoutAccountHolderResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postPayoutAccountHolderSignalError(OAIPayoutAccountHolderResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postRefundFundsTransferSignalError() instead")
    void postRefundFundsTransferSignalE(OAIRefundFundsTransferResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postRefundFundsTransferSignalError(OAIRefundFundsTransferResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postRefundNotPaidOutTransfersSignalError() instead")
    void postRefundNotPaidOutTransfersSignalE(OAIRefundNotPaidOutTransfersResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postRefundNotPaidOutTransfersSignalError(OAIRefundNotPaidOutTransfersResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postSetupBeneficiarySignalError() instead")
    void postSetupBeneficiarySignalE(OAISetupBeneficiaryResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postSetupBeneficiarySignalError(OAISetupBeneficiaryResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postTransferFundsSignalError() instead")
    void postTransferFundsSignalE(OAITransferFundsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postTransferFundsSignalError(OAITransferFundsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use postAccountHolderBalanceSignalErrorFull() instead")
    void postAccountHolderBalanceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postAccountHolderBalanceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postAccountHolderTransactionListSignalErrorFull() instead")
    void postAccountHolderTransactionListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postAccountHolderTransactionListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postDebitAccountHolderSignalErrorFull() instead")
    void postDebitAccountHolderSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postDebitAccountHolderSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postPayoutAccountHolderSignalErrorFull() instead")
    void postPayoutAccountHolderSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postPayoutAccountHolderSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postRefundFundsTransferSignalErrorFull() instead")
    void postRefundFundsTransferSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postRefundFundsTransferSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postRefundNotPaidOutTransfersSignalErrorFull() instead")
    void postRefundNotPaidOutTransfersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postRefundNotPaidOutTransfersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postSetupBeneficiarySignalErrorFull() instead")
    void postSetupBeneficiarySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postSetupBeneficiarySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postTransferFundsSignalErrorFull() instead")
    void postTransferFundsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postTransferFundsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
