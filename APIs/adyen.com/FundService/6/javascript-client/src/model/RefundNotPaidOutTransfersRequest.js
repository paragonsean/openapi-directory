/**
 * Fund API
 * This API is used for the classic integration. If you are just starting your implementation, refer to our [new integration guide](https://docs.adyen.com/marketplaces-and-platforms) instead.  The Fund API provides endpoints for managing the funds in the accounts on your platform. These management operations include, for example, the transfer of funds from one account to another, the payout of funds to an account holder, and the retrieval of balances in an account.  For more information, refer to our [documentation](https://docs.adyen.com/marketplaces-and-platforms/classic/). ## Authentication Your Adyen contact will provide your API credential and an API key. To connect to the API, add an `X-API-Key` header with the API key as the value, for example:   ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ```  Alternatively, you can use the username and password to connect to the API using basic authentication. For example:  ``` curl -U \"ws@MarketPlace.YOUR_PLATFORM_ACCOUNT\":\"YOUR_WS_PASSWORD\" \\ -H \"Content-Type: application/json\" \\ ... ``` When going live, you need to generate new web service user credentials to access the [live endpoints](https://docs.adyen.com/development-resources/live-endpoints).  ## Versioning The Fund API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://cal-test.adyen.com/cal/services/Fund/v6/accountHolderBalance ```
 *
 * The version of the OpenAPI document: 6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The RefundNotPaidOutTransfersRequest model module.
 * @module model/RefundNotPaidOutTransfersRequest
 * @version 6
 */
class RefundNotPaidOutTransfersRequest {
    /**
     * Constructs a new <code>RefundNotPaidOutTransfersRequest</code>.
     * @alias module:model/RefundNotPaidOutTransfersRequest
     * @param accountCode {String} The code of the account from which to perform the refund(s).
     * @param accountHolderCode {String} The code of the Account Holder which owns the account from which to perform the refund(s).
     */
    constructor(accountCode, accountHolderCode) { 
        
        RefundNotPaidOutTransfersRequest.initialize(this, accountCode, accountHolderCode);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, accountCode, accountHolderCode) { 
        obj['accountCode'] = accountCode;
        obj['accountHolderCode'] = accountHolderCode;
    }

    /**
     * Constructs a <code>RefundNotPaidOutTransfersRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RefundNotPaidOutTransfersRequest} obj Optional instance to populate.
     * @return {module:model/RefundNotPaidOutTransfersRequest} The populated <code>RefundNotPaidOutTransfersRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RefundNotPaidOutTransfersRequest();

            if (data.hasOwnProperty('accountCode')) {
                obj['accountCode'] = ApiClient.convertToType(data['accountCode'], 'String');
            }
            if (data.hasOwnProperty('accountHolderCode')) {
                obj['accountHolderCode'] = ApiClient.convertToType(data['accountHolderCode'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RefundNotPaidOutTransfersRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RefundNotPaidOutTransfersRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of RefundNotPaidOutTransfersRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['accountCode'] && !(typeof data['accountCode'] === 'string' || data['accountCode'] instanceof String)) {
            throw new Error("Expected the field `accountCode` to be a primitive type in the JSON string but got " + data['accountCode']);
        }
        // ensure the json data is a string
        if (data['accountHolderCode'] && !(typeof data['accountHolderCode'] === 'string' || data['accountHolderCode'] instanceof String)) {
            throw new Error("Expected the field `accountHolderCode` to be a primitive type in the JSON string but got " + data['accountHolderCode']);
        }

        return true;
    }


}

RefundNotPaidOutTransfersRequest.RequiredProperties = ["accountCode", "accountHolderCode"];

/**
 * The code of the account from which to perform the refund(s).
 * @member {String} accountCode
 */
RefundNotPaidOutTransfersRequest.prototype['accountCode'] = undefined;

/**
 * The code of the Account Holder which owns the account from which to perform the refund(s).
 * @member {String} accountHolderCode
 */
RefundNotPaidOutTransfersRequest.prototype['accountHolderCode'] = undefined;






export default RefundNotPaidOutTransfersRequest;

