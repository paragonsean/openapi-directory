/**
 * Fund API
 * This API is used for the classic integration. If you are just starting your implementation, refer to our [new integration guide](https://docs.adyen.com/marketplaces-and-platforms) instead.  The Fund API provides endpoints for managing the funds in the accounts on your platform. These management operations include, for example, the transfer of funds from one account to another, the payout of funds to an account holder, and the retrieval of balances in an account.  For more information, refer to our [documentation](https://docs.adyen.com/marketplaces-and-platforms/classic/). ## Authentication Your Adyen contact will provide your API credential and an API key. To connect to the API, add an `X-API-Key` header with the API key as the value, for example:   ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ```  Alternatively, you can use the username and password to connect to the API using basic authentication. For example:  ``` curl -U \"ws@MarketPlace.YOUR_PLATFORM_ACCOUNT\":\"YOUR_WS_PASSWORD\" \\ -H \"Content-Type: application/json\" \\ ... ``` When going live, you need to generate new web service user credentials to access the [live endpoints](https://docs.adyen.com/development-resources/live-endpoints).  ## Versioning The Fund API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://cal-test.adyen.com/cal/services/Fund/v6/accountHolderBalance ```
 *
 * The version of the OpenAPI document: 6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.FundApi);
  }
}(this, function(expect, FundApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new FundApi.BankAccountDetail();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('BankAccountDetail', function() {
    it('should create an instance of BankAccountDetail', function() {
      // uncomment below and update the code to test BankAccountDetail
      //var instance = new FundApi.BankAccountDetail();
      //expect(instance).to.be.a(FundApi.BankAccountDetail);
    });

    it('should have the property accountNumber (base name: "accountNumber")', function() {
      // uncomment below and update the code to test the property accountNumber
      //var instance = new FundApi.BankAccountDetail();
      //expect(instance).to.be();
    });

    it('should have the property accountType (base name: "accountType")', function() {
      // uncomment below and update the code to test the property accountType
      //var instance = new FundApi.BankAccountDetail();
      //expect(instance).to.be();
    });

    it('should have the property bankAccountName (base name: "bankAccountName")', function() {
      // uncomment below and update the code to test the property bankAccountName
      //var instance = new FundApi.BankAccountDetail();
      //expect(instance).to.be();
    });

    it('should have the property bankAccountReference (base name: "bankAccountReference")', function() {
      // uncomment below and update the code to test the property bankAccountReference
      //var instance = new FundApi.BankAccountDetail();
      //expect(instance).to.be();
    });

    it('should have the property bankAccountUUID (base name: "bankAccountUUID")', function() {
      // uncomment below and update the code to test the property bankAccountUUID
      //var instance = new FundApi.BankAccountDetail();
      //expect(instance).to.be();
    });

    it('should have the property bankBicSwift (base name: "bankBicSwift")', function() {
      // uncomment below and update the code to test the property bankBicSwift
      //var instance = new FundApi.BankAccountDetail();
      //expect(instance).to.be();
    });

    it('should have the property bankCity (base name: "bankCity")', function() {
      // uncomment below and update the code to test the property bankCity
      //var instance = new FundApi.BankAccountDetail();
      //expect(instance).to.be();
    });

    it('should have the property bankCode (base name: "bankCode")', function() {
      // uncomment below and update the code to test the property bankCode
      //var instance = new FundApi.BankAccountDetail();
      //expect(instance).to.be();
    });

    it('should have the property bankName (base name: "bankName")', function() {
      // uncomment below and update the code to test the property bankName
      //var instance = new FundApi.BankAccountDetail();
      //expect(instance).to.be();
    });

    it('should have the property branchCode (base name: "branchCode")', function() {
      // uncomment below and update the code to test the property branchCode
      //var instance = new FundApi.BankAccountDetail();
      //expect(instance).to.be();
    });

    it('should have the property checkCode (base name: "checkCode")', function() {
      // uncomment below and update the code to test the property checkCode
      //var instance = new FundApi.BankAccountDetail();
      //expect(instance).to.be();
    });

    it('should have the property countryCode (base name: "countryCode")', function() {
      // uncomment below and update the code to test the property countryCode
      //var instance = new FundApi.BankAccountDetail();
      //expect(instance).to.be();
    });

    it('should have the property currencyCode (base name: "currencyCode")', function() {
      // uncomment below and update the code to test the property currencyCode
      //var instance = new FundApi.BankAccountDetail();
      //expect(instance).to.be();
    });

    it('should have the property iban (base name: "iban")', function() {
      // uncomment below and update the code to test the property iban
      //var instance = new FundApi.BankAccountDetail();
      //expect(instance).to.be();
    });

    it('should have the property ownerCity (base name: "ownerCity")', function() {
      // uncomment below and update the code to test the property ownerCity
      //var instance = new FundApi.BankAccountDetail();
      //expect(instance).to.be();
    });

    it('should have the property ownerCountryCode (base name: "ownerCountryCode")', function() {
      // uncomment below and update the code to test the property ownerCountryCode
      //var instance = new FundApi.BankAccountDetail();
      //expect(instance).to.be();
    });

    it('should have the property ownerDateOfBirth (base name: "ownerDateOfBirth")', function() {
      // uncomment below and update the code to test the property ownerDateOfBirth
      //var instance = new FundApi.BankAccountDetail();
      //expect(instance).to.be();
    });

    it('should have the property ownerHouseNumberOrName (base name: "ownerHouseNumberOrName")', function() {
      // uncomment below and update the code to test the property ownerHouseNumberOrName
      //var instance = new FundApi.BankAccountDetail();
      //expect(instance).to.be();
    });

    it('should have the property ownerName (base name: "ownerName")', function() {
      // uncomment below and update the code to test the property ownerName
      //var instance = new FundApi.BankAccountDetail();
      //expect(instance).to.be();
    });

    it('should have the property ownerNationality (base name: "ownerNationality")', function() {
      // uncomment below and update the code to test the property ownerNationality
      //var instance = new FundApi.BankAccountDetail();
      //expect(instance).to.be();
    });

    it('should have the property ownerPostalCode (base name: "ownerPostalCode")', function() {
      // uncomment below and update the code to test the property ownerPostalCode
      //var instance = new FundApi.BankAccountDetail();
      //expect(instance).to.be();
    });

    it('should have the property ownerState (base name: "ownerState")', function() {
      // uncomment below and update the code to test the property ownerState
      //var instance = new FundApi.BankAccountDetail();
      //expect(instance).to.be();
    });

    it('should have the property ownerStreet (base name: "ownerStreet")', function() {
      // uncomment below and update the code to test the property ownerStreet
      //var instance = new FundApi.BankAccountDetail();
      //expect(instance).to.be();
    });

    it('should have the property primaryAccount (base name: "primaryAccount")', function() {
      // uncomment below and update the code to test the property primaryAccount
      //var instance = new FundApi.BankAccountDetail();
      //expect(instance).to.be();
    });

    it('should have the property taxId (base name: "taxId")', function() {
      // uncomment below and update the code to test the property taxId
      //var instance = new FundApi.BankAccountDetail();
      //expect(instance).to.be();
    });

    it('should have the property urlForVerification (base name: "urlForVerification")', function() {
      // uncomment below and update the code to test the property urlForVerification
      //var instance = new FundApi.BankAccountDetail();
      //expect(instance).to.be();
    });

  });

}));
