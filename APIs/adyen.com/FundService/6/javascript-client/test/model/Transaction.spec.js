/**
 * Fund API
 * This API is used for the classic integration. If you are just starting your implementation, refer to our [new integration guide](https://docs.adyen.com/marketplaces-and-platforms) instead.  The Fund API provides endpoints for managing the funds in the accounts on your platform. These management operations include, for example, the transfer of funds from one account to another, the payout of funds to an account holder, and the retrieval of balances in an account.  For more information, refer to our [documentation](https://docs.adyen.com/marketplaces-and-platforms/classic/). ## Authentication Your Adyen contact will provide your API credential and an API key. To connect to the API, add an `X-API-Key` header with the API key as the value, for example:   ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ```  Alternatively, you can use the username and password to connect to the API using basic authentication. For example:  ``` curl -U \"ws@MarketPlace.YOUR_PLATFORM_ACCOUNT\":\"YOUR_WS_PASSWORD\" \\ -H \"Content-Type: application/json\" \\ ... ``` When going live, you need to generate new web service user credentials to access the [live endpoints](https://docs.adyen.com/development-resources/live-endpoints).  ## Versioning The Fund API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://cal-test.adyen.com/cal/services/Fund/v6/accountHolderBalance ```
 *
 * The version of the OpenAPI document: 6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.FundApi);
  }
}(this, function(expect, FundApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new FundApi.Transaction();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Transaction', function() {
    it('should create an instance of Transaction', function() {
      // uncomment below and update the code to test Transaction
      //var instance = new FundApi.Transaction();
      //expect(instance).to.be.a(FundApi.Transaction);
    });

    it('should have the property amount (base name: "amount")', function() {
      // uncomment below and update the code to test the property amount
      //var instance = new FundApi.Transaction();
      //expect(instance).to.be();
    });

    it('should have the property bankAccountDetail (base name: "bankAccountDetail")', function() {
      // uncomment below and update the code to test the property bankAccountDetail
      //var instance = new FundApi.Transaction();
      //expect(instance).to.be();
    });

    it('should have the property captureMerchantReference (base name: "captureMerchantReference")', function() {
      // uncomment below and update the code to test the property captureMerchantReference
      //var instance = new FundApi.Transaction();
      //expect(instance).to.be();
    });

    it('should have the property capturePspReference (base name: "capturePspReference")', function() {
      // uncomment below and update the code to test the property capturePspReference
      //var instance = new FundApi.Transaction();
      //expect(instance).to.be();
    });

    it('should have the property creationDate (base name: "creationDate")', function() {
      // uncomment below and update the code to test the property creationDate
      //var instance = new FundApi.Transaction();
      //expect(instance).to.be();
    });

    it('should have the property description (base name: "description")', function() {
      // uncomment below and update the code to test the property description
      //var instance = new FundApi.Transaction();
      //expect(instance).to.be();
    });

    it('should have the property destinationAccountCode (base name: "destinationAccountCode")', function() {
      // uncomment below and update the code to test the property destinationAccountCode
      //var instance = new FundApi.Transaction();
      //expect(instance).to.be();
    });

    it('should have the property disputePspReference (base name: "disputePspReference")', function() {
      // uncomment below and update the code to test the property disputePspReference
      //var instance = new FundApi.Transaction();
      //expect(instance).to.be();
    });

    it('should have the property disputeReasonCode (base name: "disputeReasonCode")', function() {
      // uncomment below and update the code to test the property disputeReasonCode
      //var instance = new FundApi.Transaction();
      //expect(instance).to.be();
    });

    it('should have the property merchantReference (base name: "merchantReference")', function() {
      // uncomment below and update the code to test the property merchantReference
      //var instance = new FundApi.Transaction();
      //expect(instance).to.be();
    });

    it('should have the property paymentPspReference (base name: "paymentPspReference")', function() {
      // uncomment below and update the code to test the property paymentPspReference
      //var instance = new FundApi.Transaction();
      //expect(instance).to.be();
    });

    it('should have the property payoutPspReference (base name: "payoutPspReference")', function() {
      // uncomment below and update the code to test the property payoutPspReference
      //var instance = new FundApi.Transaction();
      //expect(instance).to.be();
    });

    it('should have the property pspReference (base name: "pspReference")', function() {
      // uncomment below and update the code to test the property pspReference
      //var instance = new FundApi.Transaction();
      //expect(instance).to.be();
    });

    it('should have the property sourceAccountCode (base name: "sourceAccountCode")', function() {
      // uncomment below and update the code to test the property sourceAccountCode
      //var instance = new FundApi.Transaction();
      //expect(instance).to.be();
    });

    it('should have the property transactionStatus (base name: "transactionStatus")', function() {
      // uncomment below and update the code to test the property transactionStatus
      //var instance = new FundApi.Transaction();
      //expect(instance).to.be();
    });

    it('should have the property transferCode (base name: "transferCode")', function() {
      // uncomment below and update the code to test the property transferCode
      //var instance = new FundApi.Transaction();
      //expect(instance).to.be();
    });

  });

}));
