/*
 * Fund API
 * This API is used for the classic integration. If you are just starting your implementation, refer to our [new integration guide](https://docs.adyen.com/marketplaces-and-platforms) instead.  The Fund API provides endpoints for managing the funds in the accounts on your platform. These management operations include, for example, the transfer of funds from one account to another, the payout of funds to an account holder, and the retrieval of balances in an account.  For more information, refer to our [documentation](https://docs.adyen.com/marketplaces-and-platforms/classic/). ## Authentication Your Adyen contact will provide your API credential and an API key. To connect to the API, add an `X-API-Key` header with the API key as the value, for example:   ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ```  Alternatively, you can use the username and password to connect to the API using basic authentication. For example:  ``` curl -U \"ws@MarketPlace.YOUR_PLATFORM_ACCOUNT\":\"YOUR_WS_PASSWORD\" \\ -H \"Content-Type: application/json\" \\ ... ``` When going live, you need to generate new web service user credentials to access the [live endpoints](https://docs.adyen.com/development-resources/live-endpoints).  ## Versioning The Fund API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://cal-test.adyen.com/cal/services/Fund/v6/accountHolderBalance ```
 *
 * The version of the OpenAPI document: 6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for BankAccountDetail
 */
public class BankAccountDetailTest {
    private final BankAccountDetail model = new BankAccountDetail();

    /**
     * Model tests for BankAccountDetail
     */
    @Test
    public void testBankAccountDetail() {
        // TODO: test BankAccountDetail
    }

    /**
     * Test the property 'accountNumber'
     */
    @Test
    public void accountNumberTest() {
        // TODO: test accountNumber
    }

    /**
     * Test the property 'accountType'
     */
    @Test
    public void accountTypeTest() {
        // TODO: test accountType
    }

    /**
     * Test the property 'bankAccountName'
     */
    @Test
    public void bankAccountNameTest() {
        // TODO: test bankAccountName
    }

    /**
     * Test the property 'bankAccountReference'
     */
    @Test
    public void bankAccountReferenceTest() {
        // TODO: test bankAccountReference
    }

    /**
     * Test the property 'bankAccountUUID'
     */
    @Test
    public void bankAccountUUIDTest() {
        // TODO: test bankAccountUUID
    }

    /**
     * Test the property 'bankBicSwift'
     */
    @Test
    public void bankBicSwiftTest() {
        // TODO: test bankBicSwift
    }

    /**
     * Test the property 'bankCity'
     */
    @Test
    public void bankCityTest() {
        // TODO: test bankCity
    }

    /**
     * Test the property 'bankCode'
     */
    @Test
    public void bankCodeTest() {
        // TODO: test bankCode
    }

    /**
     * Test the property 'bankName'
     */
    @Test
    public void bankNameTest() {
        // TODO: test bankName
    }

    /**
     * Test the property 'branchCode'
     */
    @Test
    public void branchCodeTest() {
        // TODO: test branchCode
    }

    /**
     * Test the property 'checkCode'
     */
    @Test
    public void checkCodeTest() {
        // TODO: test checkCode
    }

    /**
     * Test the property 'countryCode'
     */
    @Test
    public void countryCodeTest() {
        // TODO: test countryCode
    }

    /**
     * Test the property 'currencyCode'
     */
    @Test
    public void currencyCodeTest() {
        // TODO: test currencyCode
    }

    /**
     * Test the property 'iban'
     */
    @Test
    public void ibanTest() {
        // TODO: test iban
    }

    /**
     * Test the property 'ownerCity'
     */
    @Test
    public void ownerCityTest() {
        // TODO: test ownerCity
    }

    /**
     * Test the property 'ownerCountryCode'
     */
    @Test
    public void ownerCountryCodeTest() {
        // TODO: test ownerCountryCode
    }

    /**
     * Test the property 'ownerDateOfBirth'
     */
    @Test
    public void ownerDateOfBirthTest() {
        // TODO: test ownerDateOfBirth
    }

    /**
     * Test the property 'ownerHouseNumberOrName'
     */
    @Test
    public void ownerHouseNumberOrNameTest() {
        // TODO: test ownerHouseNumberOrName
    }

    /**
     * Test the property 'ownerName'
     */
    @Test
    public void ownerNameTest() {
        // TODO: test ownerName
    }

    /**
     * Test the property 'ownerNationality'
     */
    @Test
    public void ownerNationalityTest() {
        // TODO: test ownerNationality
    }

    /**
     * Test the property 'ownerPostalCode'
     */
    @Test
    public void ownerPostalCodeTest() {
        // TODO: test ownerPostalCode
    }

    /**
     * Test the property 'ownerState'
     */
    @Test
    public void ownerStateTest() {
        // TODO: test ownerState
    }

    /**
     * Test the property 'ownerStreet'
     */
    @Test
    public void ownerStreetTest() {
        // TODO: test ownerStreet
    }

    /**
     * Test the property 'primaryAccount'
     */
    @Test
    public void primaryAccountTest() {
        // TODO: test primaryAccount
    }

    /**
     * Test the property 'taxId'
     */
    @Test
    public void taxIdTest() {
        // TODO: test taxId
    }

    /**
     * Test the property 'urlForVerification'
     */
    @Test
    public void urlForVerificationTest() {
        // TODO: test urlForVerification
    }

}
