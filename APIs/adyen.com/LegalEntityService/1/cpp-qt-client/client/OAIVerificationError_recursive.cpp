/**
 * Legal Entity Management API
 * The Legal Entity Management API enables you to manage legal entities that contain information required for verification.  ## Authentication Your Adyen contact will provide your API credential and an API key. To connect to the API, add an `X-API-Key` header with the API key as the value. For example:  ``` curl -H \"X-API-Key: YOUR_API_KEY\" \\ -H \"Content-Type: application/json\" \\ ... ``` Alternatively, you can use the username and password of your API credential to connect to the API using basic authentication. For example:  ``` curl -U \"ws_123456@Scope.Company_YOUR_COMPANY_ACCOUNT\":\"YourWsPassword\" \\ -H \"Content-Type: application/json\" \\ ... ``` ## Versioning The Legal Entity Management API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://kyc-test.adyen.com/lem/v1/legalEntities ``` >If you are using hosted onboarding and just beginning your integration, use v3 for your API requests. Otherwise, use v2.  ## Going live When going live, your Adyen contact will provide your API credential for the live environment. You can then use the API key or the username and password to send requests to `https://kyc-live.adyen.com/lem/v1`.  
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVerificationError_recursive.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVerificationError_recursive::OAIVerificationError_recursive(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVerificationError_recursive::OAIVerificationError_recursive() {
    this->initializeModel();
}

OAIVerificationError_recursive::~OAIVerificationError_recursive() {}

void OAIVerificationError_recursive::initializeModel() {

    m_capabilities_isSet = false;
    m_capabilities_isValid = false;

    m_code_isSet = false;
    m_code_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_remediating_actions_isSet = false;
    m_remediating_actions_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIVerificationError_recursive::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVerificationError_recursive::fromJsonObject(QJsonObject json) {

    m_capabilities_isValid = ::OpenAPI::fromJsonValue(m_capabilities, json[QString("capabilities")]);
    m_capabilities_isSet = !json[QString("capabilities")].isNull() && m_capabilities_isValid;

    m_code_isValid = ::OpenAPI::fromJsonValue(m_code, json[QString("code")]);
    m_code_isSet = !json[QString("code")].isNull() && m_code_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_remediating_actions_isValid = ::OpenAPI::fromJsonValue(m_remediating_actions, json[QString("remediatingActions")]);
    m_remediating_actions_isSet = !json[QString("remediatingActions")].isNull() && m_remediating_actions_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIVerificationError_recursive::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVerificationError_recursive::asJsonObject() const {
    QJsonObject obj;
    if (m_capabilities.size() > 0) {
        obj.insert(QString("capabilities"), ::OpenAPI::toJsonValue(m_capabilities));
    }
    if (m_code_isSet) {
        obj.insert(QString("code"), ::OpenAPI::toJsonValue(m_code));
    }
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_remediating_actions.size() > 0) {
        obj.insert(QString("remediatingActions"), ::OpenAPI::toJsonValue(m_remediating_actions));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QList<QString> OAIVerificationError_recursive::getCapabilities() const {
    return m_capabilities;
}
void OAIVerificationError_recursive::setCapabilities(const QList<QString> &capabilities) {
    m_capabilities = capabilities;
    m_capabilities_isSet = true;
}

bool OAIVerificationError_recursive::is_capabilities_Set() const{
    return m_capabilities_isSet;
}

bool OAIVerificationError_recursive::is_capabilities_Valid() const{
    return m_capabilities_isValid;
}

QString OAIVerificationError_recursive::getCode() const {
    return m_code;
}
void OAIVerificationError_recursive::setCode(const QString &code) {
    m_code = code;
    m_code_isSet = true;
}

bool OAIVerificationError_recursive::is_code_Set() const{
    return m_code_isSet;
}

bool OAIVerificationError_recursive::is_code_Valid() const{
    return m_code_isValid;
}

QString OAIVerificationError_recursive::getMessage() const {
    return m_message;
}
void OAIVerificationError_recursive::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIVerificationError_recursive::is_message_Set() const{
    return m_message_isSet;
}

bool OAIVerificationError_recursive::is_message_Valid() const{
    return m_message_isValid;
}

QList<OAIRemediatingAction> OAIVerificationError_recursive::getRemediatingActions() const {
    return m_remediating_actions;
}
void OAIVerificationError_recursive::setRemediatingActions(const QList<OAIRemediatingAction> &remediating_actions) {
    m_remediating_actions = remediating_actions;
    m_remediating_actions_isSet = true;
}

bool OAIVerificationError_recursive::is_remediating_actions_Set() const{
    return m_remediating_actions_isSet;
}

bool OAIVerificationError_recursive::is_remediating_actions_Valid() const{
    return m_remediating_actions_isValid;
}

QString OAIVerificationError_recursive::getType() const {
    return m_type;
}
void OAIVerificationError_recursive::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIVerificationError_recursive::is_type_Set() const{
    return m_type_isSet;
}

bool OAIVerificationError_recursive::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIVerificationError_recursive::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_capabilities.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_remediating_actions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVerificationError_recursive::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
