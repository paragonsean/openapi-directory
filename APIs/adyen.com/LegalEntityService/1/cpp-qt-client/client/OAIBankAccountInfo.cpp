/**
 * Legal Entity Management API
 * The Legal Entity Management API enables you to manage legal entities that contain information required for verification.  ## Authentication Your Adyen contact will provide your API credential and an API key. To connect to the API, add an `X-API-Key` header with the API key as the value. For example:  ``` curl -H \"X-API-Key: YOUR_API_KEY\" \\ -H \"Content-Type: application/json\" \\ ... ``` Alternatively, you can use the username and password of your API credential to connect to the API using basic authentication. For example:  ``` curl -U \"ws_123456@Scope.Company_YOUR_COMPANY_ACCOUNT\":\"YourWsPassword\" \\ -H \"Content-Type: application/json\" \\ ... ``` ## Versioning The Legal Entity Management API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://kyc-test.adyen.com/lem/v1/legalEntities ``` >If you are using hosted onboarding and just beginning your integration, use v3 for your API requests. Otherwise, use v2.  ## Going live When going live, your Adyen contact will provide your API credential for the live environment. You can then use the API key or the username and password to send requests to `https://kyc-live.adyen.com/lem/v1`.  
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBankAccountInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBankAccountInfo::OAIBankAccountInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBankAccountInfo::OAIBankAccountInfo() {
    this->initializeModel();
}

OAIBankAccountInfo::~OAIBankAccountInfo() {}

void OAIBankAccountInfo::initializeModel() {

    m_account_number_isSet = false;
    m_account_number_isValid = false;

    m_account_type_isSet = false;
    m_account_type_isValid = false;

    m_bank_bic_swift_isSet = false;
    m_bank_bic_swift_isValid = false;

    m_bank_city_isSet = false;
    m_bank_city_isValid = false;

    m_bank_code_isSet = false;
    m_bank_code_isValid = false;

    m_bank_name_isSet = false;
    m_bank_name_isValid = false;

    m_branch_code_isSet = false;
    m_branch_code_isValid = false;

    m_check_code_isSet = false;
    m_check_code_isValid = false;

    m_country_code_isSet = false;
    m_country_code_isValid = false;

    m_currency_code_isSet = false;
    m_currency_code_isValid = false;

    m_iban_isSet = false;
    m_iban_isValid = false;

    m_trusted_source_isSet = false;
    m_trusted_source_isValid = false;
}

void OAIBankAccountInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBankAccountInfo::fromJsonObject(QJsonObject json) {

    m_account_number_isValid = ::OpenAPI::fromJsonValue(m_account_number, json[QString("accountNumber")]);
    m_account_number_isSet = !json[QString("accountNumber")].isNull() && m_account_number_isValid;

    m_account_type_isValid = ::OpenAPI::fromJsonValue(m_account_type, json[QString("accountType")]);
    m_account_type_isSet = !json[QString("accountType")].isNull() && m_account_type_isValid;

    m_bank_bic_swift_isValid = ::OpenAPI::fromJsonValue(m_bank_bic_swift, json[QString("bankBicSwift")]);
    m_bank_bic_swift_isSet = !json[QString("bankBicSwift")].isNull() && m_bank_bic_swift_isValid;

    m_bank_city_isValid = ::OpenAPI::fromJsonValue(m_bank_city, json[QString("bankCity")]);
    m_bank_city_isSet = !json[QString("bankCity")].isNull() && m_bank_city_isValid;

    m_bank_code_isValid = ::OpenAPI::fromJsonValue(m_bank_code, json[QString("bankCode")]);
    m_bank_code_isSet = !json[QString("bankCode")].isNull() && m_bank_code_isValid;

    m_bank_name_isValid = ::OpenAPI::fromJsonValue(m_bank_name, json[QString("bankName")]);
    m_bank_name_isSet = !json[QString("bankName")].isNull() && m_bank_name_isValid;

    m_branch_code_isValid = ::OpenAPI::fromJsonValue(m_branch_code, json[QString("branchCode")]);
    m_branch_code_isSet = !json[QString("branchCode")].isNull() && m_branch_code_isValid;

    m_check_code_isValid = ::OpenAPI::fromJsonValue(m_check_code, json[QString("checkCode")]);
    m_check_code_isSet = !json[QString("checkCode")].isNull() && m_check_code_isValid;

    m_country_code_isValid = ::OpenAPI::fromJsonValue(m_country_code, json[QString("countryCode")]);
    m_country_code_isSet = !json[QString("countryCode")].isNull() && m_country_code_isValid;

    m_currency_code_isValid = ::OpenAPI::fromJsonValue(m_currency_code, json[QString("currencyCode")]);
    m_currency_code_isSet = !json[QString("currencyCode")].isNull() && m_currency_code_isValid;

    m_iban_isValid = ::OpenAPI::fromJsonValue(m_iban, json[QString("iban")]);
    m_iban_isSet = !json[QString("iban")].isNull() && m_iban_isValid;

    m_trusted_source_isValid = ::OpenAPI::fromJsonValue(m_trusted_source, json[QString("trustedSource")]);
    m_trusted_source_isSet = !json[QString("trustedSource")].isNull() && m_trusted_source_isValid;
}

QString OAIBankAccountInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBankAccountInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_account_number_isSet) {
        obj.insert(QString("accountNumber"), ::OpenAPI::toJsonValue(m_account_number));
    }
    if (m_account_type_isSet) {
        obj.insert(QString("accountType"), ::OpenAPI::toJsonValue(m_account_type));
    }
    if (m_bank_bic_swift_isSet) {
        obj.insert(QString("bankBicSwift"), ::OpenAPI::toJsonValue(m_bank_bic_swift));
    }
    if (m_bank_city_isSet) {
        obj.insert(QString("bankCity"), ::OpenAPI::toJsonValue(m_bank_city));
    }
    if (m_bank_code_isSet) {
        obj.insert(QString("bankCode"), ::OpenAPI::toJsonValue(m_bank_code));
    }
    if (m_bank_name_isSet) {
        obj.insert(QString("bankName"), ::OpenAPI::toJsonValue(m_bank_name));
    }
    if (m_branch_code_isSet) {
        obj.insert(QString("branchCode"), ::OpenAPI::toJsonValue(m_branch_code));
    }
    if (m_check_code_isSet) {
        obj.insert(QString("checkCode"), ::OpenAPI::toJsonValue(m_check_code));
    }
    if (m_country_code_isSet) {
        obj.insert(QString("countryCode"), ::OpenAPI::toJsonValue(m_country_code));
    }
    if (m_currency_code_isSet) {
        obj.insert(QString("currencyCode"), ::OpenAPI::toJsonValue(m_currency_code));
    }
    if (m_iban_isSet) {
        obj.insert(QString("iban"), ::OpenAPI::toJsonValue(m_iban));
    }
    if (m_trusted_source_isSet) {
        obj.insert(QString("trustedSource"), ::OpenAPI::toJsonValue(m_trusted_source));
    }
    return obj;
}

QString OAIBankAccountInfo::getAccountNumber() const {
    return m_account_number;
}
void OAIBankAccountInfo::setAccountNumber(const QString &account_number) {
    m_account_number = account_number;
    m_account_number_isSet = true;
}

bool OAIBankAccountInfo::is_account_number_Set() const{
    return m_account_number_isSet;
}

bool OAIBankAccountInfo::is_account_number_Valid() const{
    return m_account_number_isValid;
}

QString OAIBankAccountInfo::getAccountType() const {
    return m_account_type;
}
void OAIBankAccountInfo::setAccountType(const QString &account_type) {
    m_account_type = account_type;
    m_account_type_isSet = true;
}

bool OAIBankAccountInfo::is_account_type_Set() const{
    return m_account_type_isSet;
}

bool OAIBankAccountInfo::is_account_type_Valid() const{
    return m_account_type_isValid;
}

QString OAIBankAccountInfo::getBankBicSwift() const {
    return m_bank_bic_swift;
}
void OAIBankAccountInfo::setBankBicSwift(const QString &bank_bic_swift) {
    m_bank_bic_swift = bank_bic_swift;
    m_bank_bic_swift_isSet = true;
}

bool OAIBankAccountInfo::is_bank_bic_swift_Set() const{
    return m_bank_bic_swift_isSet;
}

bool OAIBankAccountInfo::is_bank_bic_swift_Valid() const{
    return m_bank_bic_swift_isValid;
}

QString OAIBankAccountInfo::getBankCity() const {
    return m_bank_city;
}
void OAIBankAccountInfo::setBankCity(const QString &bank_city) {
    m_bank_city = bank_city;
    m_bank_city_isSet = true;
}

bool OAIBankAccountInfo::is_bank_city_Set() const{
    return m_bank_city_isSet;
}

bool OAIBankAccountInfo::is_bank_city_Valid() const{
    return m_bank_city_isValid;
}

QString OAIBankAccountInfo::getBankCode() const {
    return m_bank_code;
}
void OAIBankAccountInfo::setBankCode(const QString &bank_code) {
    m_bank_code = bank_code;
    m_bank_code_isSet = true;
}

bool OAIBankAccountInfo::is_bank_code_Set() const{
    return m_bank_code_isSet;
}

bool OAIBankAccountInfo::is_bank_code_Valid() const{
    return m_bank_code_isValid;
}

QString OAIBankAccountInfo::getBankName() const {
    return m_bank_name;
}
void OAIBankAccountInfo::setBankName(const QString &bank_name) {
    m_bank_name = bank_name;
    m_bank_name_isSet = true;
}

bool OAIBankAccountInfo::is_bank_name_Set() const{
    return m_bank_name_isSet;
}

bool OAIBankAccountInfo::is_bank_name_Valid() const{
    return m_bank_name_isValid;
}

QString OAIBankAccountInfo::getBranchCode() const {
    return m_branch_code;
}
void OAIBankAccountInfo::setBranchCode(const QString &branch_code) {
    m_branch_code = branch_code;
    m_branch_code_isSet = true;
}

bool OAIBankAccountInfo::is_branch_code_Set() const{
    return m_branch_code_isSet;
}

bool OAIBankAccountInfo::is_branch_code_Valid() const{
    return m_branch_code_isValid;
}

QString OAIBankAccountInfo::getCheckCode() const {
    return m_check_code;
}
void OAIBankAccountInfo::setCheckCode(const QString &check_code) {
    m_check_code = check_code;
    m_check_code_isSet = true;
}

bool OAIBankAccountInfo::is_check_code_Set() const{
    return m_check_code_isSet;
}

bool OAIBankAccountInfo::is_check_code_Valid() const{
    return m_check_code_isValid;
}

QString OAIBankAccountInfo::getCountryCode() const {
    return m_country_code;
}
void OAIBankAccountInfo::setCountryCode(const QString &country_code) {
    m_country_code = country_code;
    m_country_code_isSet = true;
}

bool OAIBankAccountInfo::is_country_code_Set() const{
    return m_country_code_isSet;
}

bool OAIBankAccountInfo::is_country_code_Valid() const{
    return m_country_code_isValid;
}

QString OAIBankAccountInfo::getCurrencyCode() const {
    return m_currency_code;
}
void OAIBankAccountInfo::setCurrencyCode(const QString &currency_code) {
    m_currency_code = currency_code;
    m_currency_code_isSet = true;
}

bool OAIBankAccountInfo::is_currency_code_Set() const{
    return m_currency_code_isSet;
}

bool OAIBankAccountInfo::is_currency_code_Valid() const{
    return m_currency_code_isValid;
}

QString OAIBankAccountInfo::getIban() const {
    return m_iban;
}
void OAIBankAccountInfo::setIban(const QString &iban) {
    m_iban = iban;
    m_iban_isSet = true;
}

bool OAIBankAccountInfo::is_iban_Set() const{
    return m_iban_isSet;
}

bool OAIBankAccountInfo::is_iban_Valid() const{
    return m_iban_isValid;
}

bool OAIBankAccountInfo::isTrustedSource() const {
    return m_trusted_source;
}
void OAIBankAccountInfo::setTrustedSource(const bool &trusted_source) {
    m_trusted_source = trusted_source;
    m_trusted_source_isSet = true;
}

bool OAIBankAccountInfo::is_trusted_source_Set() const{
    return m_trusted_source_isSet;
}

bool OAIBankAccountInfo::is_trusted_source_Valid() const{
    return m_trusted_source_isValid;
}

bool OAIBankAccountInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_account_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bank_bic_swift_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bank_city_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bank_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bank_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_branch_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_check_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_iban_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_trusted_source_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBankAccountInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_currency_code_isValid && true;
}

} // namespace OpenAPI
