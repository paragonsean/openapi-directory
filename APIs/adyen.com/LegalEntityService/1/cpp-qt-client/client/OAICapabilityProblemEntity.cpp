/**
 * Legal Entity Management API
 * The Legal Entity Management API enables you to manage legal entities that contain information required for verification.  ## Authentication Your Adyen contact will provide your API credential and an API key. To connect to the API, add an `X-API-Key` header with the API key as the value. For example:  ``` curl -H \"X-API-Key: YOUR_API_KEY\" \\ -H \"Content-Type: application/json\" \\ ... ``` Alternatively, you can use the username and password of your API credential to connect to the API using basic authentication. For example:  ``` curl -U \"ws_123456@Scope.Company_YOUR_COMPANY_ACCOUNT\":\"YourWsPassword\" \\ -H \"Content-Type: application/json\" \\ ... ``` ## Versioning The Legal Entity Management API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://kyc-test.adyen.com/lem/v1/legalEntities ``` >If you are using hosted onboarding and just beginning your integration, use v3 for your API requests. Otherwise, use v2.  ## Going live When going live, your Adyen contact will provide your API credential for the live environment. You can then use the API key or the username and password to send requests to `https://kyc-live.adyen.com/lem/v1`.  
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICapabilityProblemEntity.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICapabilityProblemEntity::OAICapabilityProblemEntity(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICapabilityProblemEntity::OAICapabilityProblemEntity() {
    this->initializeModel();
}

OAICapabilityProblemEntity::~OAICapabilityProblemEntity() {}

void OAICapabilityProblemEntity::initializeModel() {

    m_documents_isSet = false;
    m_documents_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_owner_isSet = false;
    m_owner_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAICapabilityProblemEntity::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICapabilityProblemEntity::fromJsonObject(QJsonObject json) {

    m_documents_isValid = ::OpenAPI::fromJsonValue(m_documents, json[QString("documents")]);
    m_documents_isSet = !json[QString("documents")].isNull() && m_documents_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_owner_isValid = ::OpenAPI::fromJsonValue(m_owner, json[QString("owner")]);
    m_owner_isSet = !json[QString("owner")].isNull() && m_owner_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAICapabilityProblemEntity::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICapabilityProblemEntity::asJsonObject() const {
    QJsonObject obj;
    if (m_documents.size() > 0) {
        obj.insert(QString("documents"), ::OpenAPI::toJsonValue(m_documents));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_owner.isSet()) {
        obj.insert(QString("owner"), ::OpenAPI::toJsonValue(m_owner));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QList<QString> OAICapabilityProblemEntity::getDocuments() const {
    return m_documents;
}
void OAICapabilityProblemEntity::setDocuments(const QList<QString> &documents) {
    m_documents = documents;
    m_documents_isSet = true;
}

bool OAICapabilityProblemEntity::is_documents_Set() const{
    return m_documents_isSet;
}

bool OAICapabilityProblemEntity::is_documents_Valid() const{
    return m_documents_isValid;
}

QString OAICapabilityProblemEntity::getId() const {
    return m_id;
}
void OAICapabilityProblemEntity::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAICapabilityProblemEntity::is_id_Set() const{
    return m_id_isSet;
}

bool OAICapabilityProblemEntity::is_id_Valid() const{
    return m_id_isValid;
}

OAICapabilityProblemEntity_recursive OAICapabilityProblemEntity::getOwner() const {
    return m_owner;
}
void OAICapabilityProblemEntity::setOwner(const OAICapabilityProblemEntity_recursive &owner) {
    m_owner = owner;
    m_owner_isSet = true;
}

bool OAICapabilityProblemEntity::is_owner_Set() const{
    return m_owner_isSet;
}

bool OAICapabilityProblemEntity::is_owner_Valid() const{
    return m_owner_isValid;
}

QString OAICapabilityProblemEntity::getType() const {
    return m_type;
}
void OAICapabilityProblemEntity::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAICapabilityProblemEntity::is_type_Set() const{
    return m_type_isSet;
}

bool OAICapabilityProblemEntity::is_type_Valid() const{
    return m_type_isValid;
}

bool OAICapabilityProblemEntity::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_documents.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICapabilityProblemEntity::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
