/**
 * Legal Entity Management API
 * The Legal Entity Management API enables you to manage legal entities that contain information required for verification.  ## Authentication Your Adyen contact will provide your API credential and an API key. To connect to the API, add an `X-API-Key` header with the API key as the value. For example:  ``` curl -H \"X-API-Key: YOUR_API_KEY\" \\ -H \"Content-Type: application/json\" \\ ... ``` Alternatively, you can use the username and password of your API credential to connect to the API using basic authentication. For example:  ``` curl -U \"ws_123456@Scope.Company_YOUR_COMPANY_ACCOUNT\":\"YourWsPassword\" \\ -H \"Content-Type: application/json\" \\ ... ``` ## Versioning The Legal Entity Management API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://kyc-test.adyen.com/lem/v1/legalEntities ``` >If you are using hosted onboarding and just beginning your integration, use v3 for your API requests. Otherwise, use v2.  ## Going live When going live, your Adyen contact will provide your API credential for the live environment. You can then use the API key or the username and password to send requests to `https://kyc-live.adyen.com/lem/v1`.  
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDocument.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDocument::OAIDocument(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDocument::OAIDocument() {
    this->initializeModel();
}

OAIDocument::~OAIDocument() {}

void OAIDocument::initializeModel() {

    m_attachment_isSet = false;
    m_attachment_isValid = false;

    m_attachments_isSet = false;
    m_attachments_isValid = false;

    m_creation_date_isSet = false;
    m_creation_date_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_expiry_date_isSet = false;
    m_expiry_date_isValid = false;

    m_file_name_isSet = false;
    m_file_name_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_issuer_country_isSet = false;
    m_issuer_country_isValid = false;

    m_issuer_state_isSet = false;
    m_issuer_state_isValid = false;

    m_modification_date_isSet = false;
    m_modification_date_isValid = false;

    m_number_isSet = false;
    m_number_isValid = false;

    m_owner_isSet = false;
    m_owner_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIDocument::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDocument::fromJsonObject(QJsonObject json) {

    m_attachment_isValid = ::OpenAPI::fromJsonValue(m_attachment, json[QString("attachment")]);
    m_attachment_isSet = !json[QString("attachment")].isNull() && m_attachment_isValid;

    m_attachments_isValid = ::OpenAPI::fromJsonValue(m_attachments, json[QString("attachments")]);
    m_attachments_isSet = !json[QString("attachments")].isNull() && m_attachments_isValid;

    m_creation_date_isValid = ::OpenAPI::fromJsonValue(m_creation_date, json[QString("creationDate")]);
    m_creation_date_isSet = !json[QString("creationDate")].isNull() && m_creation_date_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_expiry_date_isValid = ::OpenAPI::fromJsonValue(m_expiry_date, json[QString("expiryDate")]);
    m_expiry_date_isSet = !json[QString("expiryDate")].isNull() && m_expiry_date_isValid;

    m_file_name_isValid = ::OpenAPI::fromJsonValue(m_file_name, json[QString("fileName")]);
    m_file_name_isSet = !json[QString("fileName")].isNull() && m_file_name_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_issuer_country_isValid = ::OpenAPI::fromJsonValue(m_issuer_country, json[QString("issuerCountry")]);
    m_issuer_country_isSet = !json[QString("issuerCountry")].isNull() && m_issuer_country_isValid;

    m_issuer_state_isValid = ::OpenAPI::fromJsonValue(m_issuer_state, json[QString("issuerState")]);
    m_issuer_state_isSet = !json[QString("issuerState")].isNull() && m_issuer_state_isValid;

    m_modification_date_isValid = ::OpenAPI::fromJsonValue(m_modification_date, json[QString("modificationDate")]);
    m_modification_date_isSet = !json[QString("modificationDate")].isNull() && m_modification_date_isValid;

    m_number_isValid = ::OpenAPI::fromJsonValue(m_number, json[QString("number")]);
    m_number_isSet = !json[QString("number")].isNull() && m_number_isValid;

    m_owner_isValid = ::OpenAPI::fromJsonValue(m_owner, json[QString("owner")]);
    m_owner_isSet = !json[QString("owner")].isNull() && m_owner_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIDocument::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDocument::asJsonObject() const {
    QJsonObject obj;
    if (m_attachment.isSet()) {
        obj.insert(QString("attachment"), ::OpenAPI::toJsonValue(m_attachment));
    }
    if (m_attachments.size() > 0) {
        obj.insert(QString("attachments"), ::OpenAPI::toJsonValue(m_attachments));
    }
    if (m_creation_date_isSet) {
        obj.insert(QString("creationDate"), ::OpenAPI::toJsonValue(m_creation_date));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_expiry_date_isSet) {
        obj.insert(QString("expiryDate"), ::OpenAPI::toJsonValue(m_expiry_date));
    }
    if (m_file_name_isSet) {
        obj.insert(QString("fileName"), ::OpenAPI::toJsonValue(m_file_name));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_issuer_country_isSet) {
        obj.insert(QString("issuerCountry"), ::OpenAPI::toJsonValue(m_issuer_country));
    }
    if (m_issuer_state_isSet) {
        obj.insert(QString("issuerState"), ::OpenAPI::toJsonValue(m_issuer_state));
    }
    if (m_modification_date_isSet) {
        obj.insert(QString("modificationDate"), ::OpenAPI::toJsonValue(m_modification_date));
    }
    if (m_number_isSet) {
        obj.insert(QString("number"), ::OpenAPI::toJsonValue(m_number));
    }
    if (m_owner.isSet()) {
        obj.insert(QString("owner"), ::OpenAPI::toJsonValue(m_owner));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

OAIAttachment OAIDocument::getAttachment() const {
    return m_attachment;
}
void OAIDocument::setAttachment(const OAIAttachment &attachment) {
    m_attachment = attachment;
    m_attachment_isSet = true;
}

bool OAIDocument::is_attachment_Set() const{
    return m_attachment_isSet;
}

bool OAIDocument::is_attachment_Valid() const{
    return m_attachment_isValid;
}

QList<OAIAttachment> OAIDocument::getAttachments() const {
    return m_attachments;
}
void OAIDocument::setAttachments(const QList<OAIAttachment> &attachments) {
    m_attachments = attachments;
    m_attachments_isSet = true;
}

bool OAIDocument::is_attachments_Set() const{
    return m_attachments_isSet;
}

bool OAIDocument::is_attachments_Valid() const{
    return m_attachments_isValid;
}

QDateTime OAIDocument::getCreationDate() const {
    return m_creation_date;
}
void OAIDocument::setCreationDate(const QDateTime &creation_date) {
    m_creation_date = creation_date;
    m_creation_date_isSet = true;
}

bool OAIDocument::is_creation_date_Set() const{
    return m_creation_date_isSet;
}

bool OAIDocument::is_creation_date_Valid() const{
    return m_creation_date_isValid;
}

QString OAIDocument::getDescription() const {
    return m_description;
}
void OAIDocument::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIDocument::is_description_Set() const{
    return m_description_isSet;
}

bool OAIDocument::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIDocument::getExpiryDate() const {
    return m_expiry_date;
}
void OAIDocument::setExpiryDate(const QString &expiry_date) {
    m_expiry_date = expiry_date;
    m_expiry_date_isSet = true;
}

bool OAIDocument::is_expiry_date_Set() const{
    return m_expiry_date_isSet;
}

bool OAIDocument::is_expiry_date_Valid() const{
    return m_expiry_date_isValid;
}

QString OAIDocument::getFileName() const {
    return m_file_name;
}
void OAIDocument::setFileName(const QString &file_name) {
    m_file_name = file_name;
    m_file_name_isSet = true;
}

bool OAIDocument::is_file_name_Set() const{
    return m_file_name_isSet;
}

bool OAIDocument::is_file_name_Valid() const{
    return m_file_name_isValid;
}

QString OAIDocument::getId() const {
    return m_id;
}
void OAIDocument::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIDocument::is_id_Set() const{
    return m_id_isSet;
}

bool OAIDocument::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIDocument::getIssuerCountry() const {
    return m_issuer_country;
}
void OAIDocument::setIssuerCountry(const QString &issuer_country) {
    m_issuer_country = issuer_country;
    m_issuer_country_isSet = true;
}

bool OAIDocument::is_issuer_country_Set() const{
    return m_issuer_country_isSet;
}

bool OAIDocument::is_issuer_country_Valid() const{
    return m_issuer_country_isValid;
}

QString OAIDocument::getIssuerState() const {
    return m_issuer_state;
}
void OAIDocument::setIssuerState(const QString &issuer_state) {
    m_issuer_state = issuer_state;
    m_issuer_state_isSet = true;
}

bool OAIDocument::is_issuer_state_Set() const{
    return m_issuer_state_isSet;
}

bool OAIDocument::is_issuer_state_Valid() const{
    return m_issuer_state_isValid;
}

QDateTime OAIDocument::getModificationDate() const {
    return m_modification_date;
}
void OAIDocument::setModificationDate(const QDateTime &modification_date) {
    m_modification_date = modification_date;
    m_modification_date_isSet = true;
}

bool OAIDocument::is_modification_date_Set() const{
    return m_modification_date_isSet;
}

bool OAIDocument::is_modification_date_Valid() const{
    return m_modification_date_isValid;
}

QString OAIDocument::getNumber() const {
    return m_number;
}
void OAIDocument::setNumber(const QString &number) {
    m_number = number;
    m_number_isSet = true;
}

bool OAIDocument::is_number_Set() const{
    return m_number_isSet;
}

bool OAIDocument::is_number_Valid() const{
    return m_number_isValid;
}

OAIOwnerEntity OAIDocument::getOwner() const {
    return m_owner;
}
void OAIDocument::setOwner(const OAIOwnerEntity &owner) {
    m_owner = owner;
    m_owner_isSet = true;
}

bool OAIDocument::is_owner_Set() const{
    return m_owner_isSet;
}

bool OAIDocument::is_owner_Valid() const{
    return m_owner_isValid;
}

QString OAIDocument::getType() const {
    return m_type;
}
void OAIDocument::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIDocument::is_type_Set() const{
    return m_type_isSet;
}

bool OAIDocument::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIDocument::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attachment.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_attachments.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expiry_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_issuer_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_issuer_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_modification_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDocument::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_description_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
