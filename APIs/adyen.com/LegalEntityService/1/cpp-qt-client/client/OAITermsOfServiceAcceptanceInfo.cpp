/**
 * Legal Entity Management API
 * The Legal Entity Management API enables you to manage legal entities that contain information required for verification.  ## Authentication Your Adyen contact will provide your API credential and an API key. To connect to the API, add an `X-API-Key` header with the API key as the value. For example:  ``` curl -H \"X-API-Key: YOUR_API_KEY\" \\ -H \"Content-Type: application/json\" \\ ... ``` Alternatively, you can use the username and password of your API credential to connect to the API using basic authentication. For example:  ``` curl -U \"ws_123456@Scope.Company_YOUR_COMPANY_ACCOUNT\":\"YourWsPassword\" \\ -H \"Content-Type: application/json\" \\ ... ``` ## Versioning The Legal Entity Management API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://kyc-test.adyen.com/lem/v1/legalEntities ``` >If you are using hosted onboarding and just beginning your integration, use v3 for your API requests. Otherwise, use v2.  ## Going live When going live, your Adyen contact will provide your API credential for the live environment. You can then use the API key or the username and password to send requests to `https://kyc-live.adyen.com/lem/v1`.  
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITermsOfServiceAcceptanceInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITermsOfServiceAcceptanceInfo::OAITermsOfServiceAcceptanceInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITermsOfServiceAcceptanceInfo::OAITermsOfServiceAcceptanceInfo() {
    this->initializeModel();
}

OAITermsOfServiceAcceptanceInfo::~OAITermsOfServiceAcceptanceInfo() {}

void OAITermsOfServiceAcceptanceInfo::initializeModel() {

    m_accepted_by_isSet = false;
    m_accepted_by_isValid = false;

    m_accepted_for_isSet = false;
    m_accepted_for_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAITermsOfServiceAcceptanceInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITermsOfServiceAcceptanceInfo::fromJsonObject(QJsonObject json) {

    m_accepted_by_isValid = ::OpenAPI::fromJsonValue(m_accepted_by, json[QString("acceptedBy")]);
    m_accepted_by_isSet = !json[QString("acceptedBy")].isNull() && m_accepted_by_isValid;

    m_accepted_for_isValid = ::OpenAPI::fromJsonValue(m_accepted_for, json[QString("acceptedFor")]);
    m_accepted_for_isSet = !json[QString("acceptedFor")].isNull() && m_accepted_for_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("createdAt")]);
    m_created_at_isSet = !json[QString("createdAt")].isNull() && m_created_at_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAITermsOfServiceAcceptanceInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITermsOfServiceAcceptanceInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_accepted_by_isSet) {
        obj.insert(QString("acceptedBy"), ::OpenAPI::toJsonValue(m_accepted_by));
    }
    if (m_accepted_for_isSet) {
        obj.insert(QString("acceptedFor"), ::OpenAPI::toJsonValue(m_accepted_for));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("createdAt"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAITermsOfServiceAcceptanceInfo::getAcceptedBy() const {
    return m_accepted_by;
}
void OAITermsOfServiceAcceptanceInfo::setAcceptedBy(const QString &accepted_by) {
    m_accepted_by = accepted_by;
    m_accepted_by_isSet = true;
}

bool OAITermsOfServiceAcceptanceInfo::is_accepted_by_Set() const{
    return m_accepted_by_isSet;
}

bool OAITermsOfServiceAcceptanceInfo::is_accepted_by_Valid() const{
    return m_accepted_by_isValid;
}

QString OAITermsOfServiceAcceptanceInfo::getAcceptedFor() const {
    return m_accepted_for;
}
void OAITermsOfServiceAcceptanceInfo::setAcceptedFor(const QString &accepted_for) {
    m_accepted_for = accepted_for;
    m_accepted_for_isSet = true;
}

bool OAITermsOfServiceAcceptanceInfo::is_accepted_for_Set() const{
    return m_accepted_for_isSet;
}

bool OAITermsOfServiceAcceptanceInfo::is_accepted_for_Valid() const{
    return m_accepted_for_isValid;
}

QDateTime OAITermsOfServiceAcceptanceInfo::getCreatedAt() const {
    return m_created_at;
}
void OAITermsOfServiceAcceptanceInfo::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAITermsOfServiceAcceptanceInfo::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAITermsOfServiceAcceptanceInfo::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAITermsOfServiceAcceptanceInfo::getId() const {
    return m_id;
}
void OAITermsOfServiceAcceptanceInfo::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAITermsOfServiceAcceptanceInfo::is_id_Set() const{
    return m_id_isSet;
}

bool OAITermsOfServiceAcceptanceInfo::is_id_Valid() const{
    return m_id_isValid;
}

QString OAITermsOfServiceAcceptanceInfo::getType() const {
    return m_type;
}
void OAITermsOfServiceAcceptanceInfo::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAITermsOfServiceAcceptanceInfo::is_type_Set() const{
    return m_type_isSet;
}

bool OAITermsOfServiceAcceptanceInfo::is_type_Valid() const{
    return m_type_isValid;
}

bool OAITermsOfServiceAcceptanceInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_accepted_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_accepted_for_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITermsOfServiceAcceptanceInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
