/**
 * Legal Entity Management API
 * The Legal Entity Management API enables you to manage legal entities that contain information required for verification.  ## Authentication Your Adyen contact will provide your API credential and an API key. To connect to the API, add an `X-API-Key` header with the API key as the value. For example:  ``` curl -H \"X-API-Key: YOUR_API_KEY\" \\ -H \"Content-Type: application/json\" \\ ... ``` Alternatively, you can use the username and password of your API credential to connect to the API using basic authentication. For example:  ``` curl -U \"ws_123456@Scope.Company_YOUR_COMPANY_ACCOUNT\":\"YourWsPassword\" \\ -H \"Content-Type: application/json\" \\ ... ``` ## Versioning The Legal Entity Management API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://kyc-test.adyen.com/lem/v1/legalEntities ``` >If you are using hosted onboarding and just beginning your integration, use v3 for your API requests. Otherwise, use v2.  ## Going live When going live, your Adyen contact will provide your API credential for the live environment. You can then use the API key or the username and password to send requests to `https://kyc-live.adyen.com/lem/v1`.  
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITransferInstrumentReference.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITransferInstrumentReference::OAITransferInstrumentReference(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITransferInstrumentReference::OAITransferInstrumentReference() {
    this->initializeModel();
}

OAITransferInstrumentReference::~OAITransferInstrumentReference() {}

void OAITransferInstrumentReference::initializeModel() {

    m_account_identifier_isSet = false;
    m_account_identifier_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_real_last_four_isSet = false;
    m_real_last_four_isValid = false;

    m_trusted_source_isSet = false;
    m_trusted_source_isValid = false;
}

void OAITransferInstrumentReference::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITransferInstrumentReference::fromJsonObject(QJsonObject json) {

    m_account_identifier_isValid = ::OpenAPI::fromJsonValue(m_account_identifier, json[QString("accountIdentifier")]);
    m_account_identifier_isSet = !json[QString("accountIdentifier")].isNull() && m_account_identifier_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_real_last_four_isValid = ::OpenAPI::fromJsonValue(m_real_last_four, json[QString("realLastFour")]);
    m_real_last_four_isSet = !json[QString("realLastFour")].isNull() && m_real_last_four_isValid;

    m_trusted_source_isValid = ::OpenAPI::fromJsonValue(m_trusted_source, json[QString("trustedSource")]);
    m_trusted_source_isSet = !json[QString("trustedSource")].isNull() && m_trusted_source_isValid;
}

QString OAITransferInstrumentReference::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITransferInstrumentReference::asJsonObject() const {
    QJsonObject obj;
    if (m_account_identifier_isSet) {
        obj.insert(QString("accountIdentifier"), ::OpenAPI::toJsonValue(m_account_identifier));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_real_last_four_isSet) {
        obj.insert(QString("realLastFour"), ::OpenAPI::toJsonValue(m_real_last_four));
    }
    if (m_trusted_source_isSet) {
        obj.insert(QString("trustedSource"), ::OpenAPI::toJsonValue(m_trusted_source));
    }
    return obj;
}

QString OAITransferInstrumentReference::getAccountIdentifier() const {
    return m_account_identifier;
}
void OAITransferInstrumentReference::setAccountIdentifier(const QString &account_identifier) {
    m_account_identifier = account_identifier;
    m_account_identifier_isSet = true;
}

bool OAITransferInstrumentReference::is_account_identifier_Set() const{
    return m_account_identifier_isSet;
}

bool OAITransferInstrumentReference::is_account_identifier_Valid() const{
    return m_account_identifier_isValid;
}

QString OAITransferInstrumentReference::getId() const {
    return m_id;
}
void OAITransferInstrumentReference::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAITransferInstrumentReference::is_id_Set() const{
    return m_id_isSet;
}

bool OAITransferInstrumentReference::is_id_Valid() const{
    return m_id_isValid;
}

QString OAITransferInstrumentReference::getRealLastFour() const {
    return m_real_last_four;
}
void OAITransferInstrumentReference::setRealLastFour(const QString &real_last_four) {
    m_real_last_four = real_last_four;
    m_real_last_four_isSet = true;
}

bool OAITransferInstrumentReference::is_real_last_four_Set() const{
    return m_real_last_four_isSet;
}

bool OAITransferInstrumentReference::is_real_last_four_Valid() const{
    return m_real_last_four_isValid;
}

bool OAITransferInstrumentReference::isTrustedSource() const {
    return m_trusted_source;
}
void OAITransferInstrumentReference::setTrustedSource(const bool &trusted_source) {
    m_trusted_source = trusted_source;
    m_trusted_source_isSet = true;
}

bool OAITransferInstrumentReference::is_trusted_source_Set() const{
    return m_trusted_source_isSet;
}

bool OAITransferInstrumentReference::is_trusted_source_Valid() const{
    return m_trusted_source_isValid;
}

bool OAITransferInstrumentReference::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_real_last_four_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_trusted_source_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITransferInstrumentReference::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_account_identifier_isValid && m_id_isValid && true;
}

} // namespace OpenAPI
