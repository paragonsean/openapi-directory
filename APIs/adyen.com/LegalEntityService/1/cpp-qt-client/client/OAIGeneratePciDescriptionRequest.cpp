/**
 * Legal Entity Management API
 * The Legal Entity Management API enables you to manage legal entities that contain information required for verification.  ## Authentication Your Adyen contact will provide your API credential and an API key. To connect to the API, add an `X-API-Key` header with the API key as the value. For example:  ``` curl -H \"X-API-Key: YOUR_API_KEY\" \\ -H \"Content-Type: application/json\" \\ ... ``` Alternatively, you can use the username and password of your API credential to connect to the API using basic authentication. For example:  ``` curl -U \"ws_123456@Scope.Company_YOUR_COMPANY_ACCOUNT\":\"YourWsPassword\" \\ -H \"Content-Type: application/json\" \\ ... ``` ## Versioning The Legal Entity Management API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://kyc-test.adyen.com/lem/v1/legalEntities ``` >If you are using hosted onboarding and just beginning your integration, use v3 for your API requests. Otherwise, use v2.  ## Going live When going live, your Adyen contact will provide your API credential for the live environment. You can then use the API key or the username and password to send requests to `https://kyc-live.adyen.com/lem/v1`.  
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGeneratePciDescriptionRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGeneratePciDescriptionRequest::OAIGeneratePciDescriptionRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGeneratePciDescriptionRequest::OAIGeneratePciDescriptionRequest() {
    this->initializeModel();
}

OAIGeneratePciDescriptionRequest::~OAIGeneratePciDescriptionRequest() {}

void OAIGeneratePciDescriptionRequest::initializeModel() {

    m_additional_sales_channels_isSet = false;
    m_additional_sales_channels_isValid = false;

    m_language_isSet = false;
    m_language_isValid = false;
}

void OAIGeneratePciDescriptionRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGeneratePciDescriptionRequest::fromJsonObject(QJsonObject json) {

    m_additional_sales_channels_isValid = ::OpenAPI::fromJsonValue(m_additional_sales_channels, json[QString("additionalSalesChannels")]);
    m_additional_sales_channels_isSet = !json[QString("additionalSalesChannels")].isNull() && m_additional_sales_channels_isValid;

    m_language_isValid = ::OpenAPI::fromJsonValue(m_language, json[QString("language")]);
    m_language_isSet = !json[QString("language")].isNull() && m_language_isValid;
}

QString OAIGeneratePciDescriptionRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGeneratePciDescriptionRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_additional_sales_channels.size() > 0) {
        obj.insert(QString("additionalSalesChannels"), ::OpenAPI::toJsonValue(m_additional_sales_channels));
    }
    if (m_language_isSet) {
        obj.insert(QString("language"), ::OpenAPI::toJsonValue(m_language));
    }
    return obj;
}

QList<QString> OAIGeneratePciDescriptionRequest::getAdditionalSalesChannels() const {
    return m_additional_sales_channels;
}
void OAIGeneratePciDescriptionRequest::setAdditionalSalesChannels(const QList<QString> &additional_sales_channels) {
    m_additional_sales_channels = additional_sales_channels;
    m_additional_sales_channels_isSet = true;
}

bool OAIGeneratePciDescriptionRequest::is_additional_sales_channels_Set() const{
    return m_additional_sales_channels_isSet;
}

bool OAIGeneratePciDescriptionRequest::is_additional_sales_channels_Valid() const{
    return m_additional_sales_channels_isValid;
}

QString OAIGeneratePciDescriptionRequest::getLanguage() const {
    return m_language;
}
void OAIGeneratePciDescriptionRequest::setLanguage(const QString &language) {
    m_language = language;
    m_language_isSet = true;
}

bool OAIGeneratePciDescriptionRequest::is_language_Set() const{
    return m_language_isSet;
}

bool OAIGeneratePciDescriptionRequest::is_language_Valid() const{
    return m_language_isValid;
}

bool OAIGeneratePciDescriptionRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_additional_sales_channels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_language_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGeneratePciDescriptionRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
