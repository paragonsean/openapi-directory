/**
 * Legal Entity Management API
 * The Legal Entity Management API enables you to manage legal entities that contain information required for verification.  ## Authentication Your Adyen contact will provide your API credential and an API key. To connect to the API, add an `X-API-Key` header with the API key as the value. For example:  ``` curl -H \"X-API-Key: YOUR_API_KEY\" \\ -H \"Content-Type: application/json\" \\ ... ``` Alternatively, you can use the username and password of your API credential to connect to the API using basic authentication. For example:  ``` curl -U \"ws_123456@Scope.Company_YOUR_COMPANY_ACCOUNT\":\"YourWsPassword\" \\ -H \"Content-Type: application/json\" \\ ... ``` ## Versioning The Legal Entity Management API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://kyc-test.adyen.com/lem/v1/legalEntities ``` >If you are using hosted onboarding and just beginning your integration, use v3 for your API requests. Otherwise, use v2.  ## Going live When going live, your Adyen contact will provide your API credential for the live environment. You can then use the API key or the username and password to send requests to `https://kyc-live.adyen.com/lem/v1`.  
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAITransferInstrumentsApi_H
#define OAI_OAITransferInstrumentsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIServiceError.h"
#include "OAITransferInstrument.h"
#include "OAITransferInstrumentInfo.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAITransferInstrumentsApi : public QObject {
    Q_OBJECT

public:
    OAITransferInstrumentsApi(const int timeOut = 0);
    ~OAITransferInstrumentsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  id QString [required]
    */
    virtual void deleteTransferInstrumentsId(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void getTransferInstrumentsId(const QString &id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  x_requested_verification_code QString [optional]
    * @param[in]  oai_transfer_instrument_info OAITransferInstrumentInfo [optional]
    */
    virtual void patchTransferInstrumentsId(const QString &id, const ::OpenAPI::OptionalParam<QString> &x_requested_verification_code = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAITransferInstrumentInfo> &oai_transfer_instrument_info = ::OpenAPI::OptionalParam<OAITransferInstrumentInfo>());

    /**
    * @param[in]  x_requested_verification_code QString [optional]
    * @param[in]  oai_transfer_instrument_info OAITransferInstrumentInfo [optional]
    */
    virtual void postTransferInstruments(const ::OpenAPI::OptionalParam<QString> &x_requested_verification_code = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAITransferInstrumentInfo> &oai_transfer_instrument_info = ::OpenAPI::OptionalParam<OAITransferInstrumentInfo>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void deleteTransferInstrumentsIdCallback(OAIHttpRequestWorker *worker);
    void getTransferInstrumentsIdCallback(OAIHttpRequestWorker *worker);
    void patchTransferInstrumentsIdCallback(OAIHttpRequestWorker *worker);
    void postTransferInstrumentsCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void deleteTransferInstrumentsIdSignal();
    void getTransferInstrumentsIdSignal(OAITransferInstrument summary);
    void patchTransferInstrumentsIdSignal(OAITransferInstrument summary);
    void postTransferInstrumentsSignal(OAITransferInstrument summary);


    void deleteTransferInstrumentsIdSignalFull(OAIHttpRequestWorker *worker);
    void getTransferInstrumentsIdSignalFull(OAIHttpRequestWorker *worker, OAITransferInstrument summary);
    void patchTransferInstrumentsIdSignalFull(OAIHttpRequestWorker *worker, OAITransferInstrument summary);
    void postTransferInstrumentsSignalFull(OAIHttpRequestWorker *worker, OAITransferInstrument summary);

    Q_DECL_DEPRECATED_X("Use deleteTransferInstrumentsIdSignalError() instead")
    void deleteTransferInstrumentsIdSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteTransferInstrumentsIdSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTransferInstrumentsIdSignalError() instead")
    void getTransferInstrumentsIdSignalE(OAITransferInstrument summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTransferInstrumentsIdSignalError(OAITransferInstrument summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patchTransferInstrumentsIdSignalError() instead")
    void patchTransferInstrumentsIdSignalE(OAITransferInstrument summary, QNetworkReply::NetworkError error_type, QString error_str);
    void patchTransferInstrumentsIdSignalError(OAITransferInstrument summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postTransferInstrumentsSignalError() instead")
    void postTransferInstrumentsSignalE(OAITransferInstrument summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postTransferInstrumentsSignalError(OAITransferInstrument summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use deleteTransferInstrumentsIdSignalErrorFull() instead")
    void deleteTransferInstrumentsIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteTransferInstrumentsIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTransferInstrumentsIdSignalErrorFull() instead")
    void getTransferInstrumentsIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTransferInstrumentsIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patchTransferInstrumentsIdSignalErrorFull() instead")
    void patchTransferInstrumentsIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void patchTransferInstrumentsIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postTransferInstrumentsSignalErrorFull() instead")
    void postTransferInstrumentsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postTransferInstrumentsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
