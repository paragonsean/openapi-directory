/**
 * Legal Entity Management API
 * The Legal Entity Management API enables you to manage legal entities that contain information required for verification.  ## Authentication Your Adyen contact will provide your API credential and an API key. To connect to the API, add an `X-API-Key` header with the API key as the value. For example:  ``` curl -H \"X-API-Key: YOUR_API_KEY\" \\ -H \"Content-Type: application/json\" \\ ... ``` Alternatively, you can use the username and password of your API credential to connect to the API using basic authentication. For example:  ``` curl -U \"ws_123456@Scope.Company_YOUR_COMPANY_ACCOUNT\":\"YourWsPassword\" \\ -H \"Content-Type: application/json\" \\ ... ``` ## Versioning The Legal Entity Management API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://kyc-test.adyen.com/lem/v1/legalEntities ``` >If you are using hosted onboarding and just beginning your integration, use v3 for your API requests. Otherwise, use v2.  ## Going live When going live, your Adyen contact will provide your API credential for the live environment. You can then use the API key or the username and password to send requests to `https://kyc-live.adyen.com/lem/v1`.  
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIStockData.h
 *
 * 
 */

#ifndef OAIStockData_H
#define OAIStockData_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIStockData : public OAIObject {
public:
    OAIStockData();
    OAIStockData(QString json);
    ~OAIStockData() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getMarketIdentifier() const;
    void setMarketIdentifier(const QString &market_identifier);
    bool is_market_identifier_Set() const;
    bool is_market_identifier_Valid() const;

    QString getStockNumber() const;
    void setStockNumber(const QString &stock_number);
    bool is_stock_number_Set() const;
    bool is_stock_number_Valid() const;

    QString getTickerSymbol() const;
    void setTickerSymbol(const QString &ticker_symbol);
    bool is_ticker_symbol_Set() const;
    bool is_ticker_symbol_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_market_identifier;
    bool m_market_identifier_isSet;
    bool m_market_identifier_isValid;

    QString m_stock_number;
    bool m_stock_number_isSet;
    bool m_stock_number_isValid;

    QString m_ticker_symbol;
    bool m_ticker_symbol_isSet;
    bool m_ticker_symbol_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIStockData)

#endif // OAIStockData_H
