/**
 * Legal Entity Management API
 * The Legal Entity Management API enables you to manage legal entities that contain information required for verification.  ## Authentication Your Adyen contact will provide your API credential and an API key. To connect to the API, add an `X-API-Key` header with the API key as the value. For example:  ``` curl -H \"X-API-Key: YOUR_API_KEY\" \\ -H \"Content-Type: application/json\" \\ ... ``` Alternatively, you can use the username and password of your API credential to connect to the API using basic authentication. For example:  ``` curl -U \"ws_123456@Scope.Company_YOUR_COMPANY_ACCOUNT\":\"YourWsPassword\" \\ -H \"Content-Type: application/json\" \\ ... ``` ## Versioning The Legal Entity Management API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://kyc-test.adyen.com/lem/v1/legalEntities ``` >If you are using hosted onboarding and just beginning your integration, use v3 for your API requests. Otherwise, use v2.  ## Going live When going live, your Adyen contact will provide your API credential for the live environment. You can then use the API key or the username and password to send requests to `https://kyc-live.adyen.com/lem/v1`.  
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIBusinessLinesApi_H
#define OAI_OAIBusinessLinesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIBusinessLine.h"
#include "OAIBusinessLineInfo.h"
#include "OAIServiceError.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIBusinessLinesApi : public QObject {
    Q_OBJECT

public:
    OAIBusinessLinesApi(const int timeOut = 0);
    ~OAIBusinessLinesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  id QString [required]
    */
    virtual void deleteBusinessLinesId(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void getBusinessLinesId(const QString &id);

    /**
    * @param[in]  oai_business_line_info OAIBusinessLineInfo [optional]
    */
    virtual void postBusinessLines(const ::OpenAPI::OptionalParam<OAIBusinessLineInfo> &oai_business_line_info = ::OpenAPI::OptionalParam<OAIBusinessLineInfo>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void deleteBusinessLinesIdCallback(OAIHttpRequestWorker *worker);
    void getBusinessLinesIdCallback(OAIHttpRequestWorker *worker);
    void postBusinessLinesCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void deleteBusinessLinesIdSignal();
    void getBusinessLinesIdSignal(OAIBusinessLine summary);
    void postBusinessLinesSignal(OAIBusinessLine summary);


    void deleteBusinessLinesIdSignalFull(OAIHttpRequestWorker *worker);
    void getBusinessLinesIdSignalFull(OAIHttpRequestWorker *worker, OAIBusinessLine summary);
    void postBusinessLinesSignalFull(OAIHttpRequestWorker *worker, OAIBusinessLine summary);

    Q_DECL_DEPRECATED_X("Use deleteBusinessLinesIdSignalError() instead")
    void deleteBusinessLinesIdSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteBusinessLinesIdSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getBusinessLinesIdSignalError() instead")
    void getBusinessLinesIdSignalE(OAIBusinessLine summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getBusinessLinesIdSignalError(OAIBusinessLine summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postBusinessLinesSignalError() instead")
    void postBusinessLinesSignalE(OAIBusinessLine summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postBusinessLinesSignalError(OAIBusinessLine summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use deleteBusinessLinesIdSignalErrorFull() instead")
    void deleteBusinessLinesIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteBusinessLinesIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getBusinessLinesIdSignalErrorFull() instead")
    void getBusinessLinesIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getBusinessLinesIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postBusinessLinesSignalErrorFull() instead")
    void postBusinessLinesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postBusinessLinesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
