/**
 * Legal Entity Management API
 * The Legal Entity Management API enables you to manage legal entities that contain information required for verification.  ## Authentication Your Adyen contact will provide your API credential and an API key. To connect to the API, add an `X-API-Key` header with the API key as the value. For example:  ``` curl -H \"X-API-Key: YOUR_API_KEY\" \\ -H \"Content-Type: application/json\" \\ ... ``` Alternatively, you can use the username and password of your API credential to connect to the API using basic authentication. For example:  ``` curl -U \"ws_123456@Scope.Company_YOUR_COMPANY_ACCOUNT\":\"YourWsPassword\" \\ -H \"Content-Type: application/json\" \\ ... ``` ## Versioning The Legal Entity Management API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://kyc-test.adyen.com/lem/v1/legalEntities ``` >If you are using hosted onboarding and just beginning your integration, use v3 for your API requests. Otherwise, use v2.  ## Going live When going live, your Adyen contact will provide your API credential for the live environment. You can then use the API key or the username and password to send requests to `https://kyc-live.adyen.com/lem/v1`.  
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAITransferInstrumentReference.h
 *
 * 
 */

#ifndef OAITransferInstrumentReference_H
#define OAITransferInstrumentReference_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAITransferInstrumentReference : public OAIObject {
public:
    OAITransferInstrumentReference();
    OAITransferInstrumentReference(QString json);
    ~OAITransferInstrumentReference() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAccountIdentifier() const;
    void setAccountIdentifier(const QString &account_identifier);
    bool is_account_identifier_Set() const;
    bool is_account_identifier_Valid() const;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    QString getRealLastFour() const;
    void setRealLastFour(const QString &real_last_four);
    bool is_real_last_four_Set() const;
    bool is_real_last_four_Valid() const;

    bool isTrustedSource() const;
    void setTrustedSource(const bool &trusted_source);
    bool is_trusted_source_Set() const;
    bool is_trusted_source_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_account_identifier;
    bool m_account_identifier_isSet;
    bool m_account_identifier_isValid;

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    QString m_real_last_four;
    bool m_real_last_four_isSet;
    bool m_real_last_four_isValid;

    bool m_trusted_source;
    bool m_trusted_source_isSet;
    bool m_trusted_source_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAITransferInstrumentReference)

#endif // OAITransferInstrumentReference_H
