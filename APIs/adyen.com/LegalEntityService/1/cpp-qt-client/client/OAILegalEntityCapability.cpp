/**
 * Legal Entity Management API
 * The Legal Entity Management API enables you to manage legal entities that contain information required for verification.  ## Authentication Your Adyen contact will provide your API credential and an API key. To connect to the API, add an `X-API-Key` header with the API key as the value. For example:  ``` curl -H \"X-API-Key: YOUR_API_KEY\" \\ -H \"Content-Type: application/json\" \\ ... ``` Alternatively, you can use the username and password of your API credential to connect to the API using basic authentication. For example:  ``` curl -U \"ws_123456@Scope.Company_YOUR_COMPANY_ACCOUNT\":\"YourWsPassword\" \\ -H \"Content-Type: application/json\" \\ ... ``` ## Versioning The Legal Entity Management API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://kyc-test.adyen.com/lem/v1/legalEntities ``` >If you are using hosted onboarding and just beginning your integration, use v3 for your API requests. Otherwise, use v2.  ## Going live When going live, your Adyen contact will provide your API credential for the live environment. You can then use the API key or the username and password to send requests to `https://kyc-live.adyen.com/lem/v1`.  
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILegalEntityCapability.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILegalEntityCapability::OAILegalEntityCapability(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILegalEntityCapability::OAILegalEntityCapability() {
    this->initializeModel();
}

OAILegalEntityCapability::~OAILegalEntityCapability() {}

void OAILegalEntityCapability::initializeModel() {

    m_allowed_isSet = false;
    m_allowed_isValid = false;

    m_allowed_level_isSet = false;
    m_allowed_level_isValid = false;

    m_allowed_settings_isSet = false;
    m_allowed_settings_isValid = false;

    m_problems_isSet = false;
    m_problems_isValid = false;

    m_requested_isSet = false;
    m_requested_isValid = false;

    m_requested_level_isSet = false;
    m_requested_level_isValid = false;

    m_requested_settings_isSet = false;
    m_requested_settings_isValid = false;

    m_verification_status_isSet = false;
    m_verification_status_isValid = false;
}

void OAILegalEntityCapability::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILegalEntityCapability::fromJsonObject(QJsonObject json) {

    m_allowed_isValid = ::OpenAPI::fromJsonValue(m_allowed, json[QString("allowed")]);
    m_allowed_isSet = !json[QString("allowed")].isNull() && m_allowed_isValid;

    m_allowed_level_isValid = ::OpenAPI::fromJsonValue(m_allowed_level, json[QString("allowedLevel")]);
    m_allowed_level_isSet = !json[QString("allowedLevel")].isNull() && m_allowed_level_isValid;

    m_allowed_settings_isValid = ::OpenAPI::fromJsonValue(m_allowed_settings, json[QString("allowedSettings")]);
    m_allowed_settings_isSet = !json[QString("allowedSettings")].isNull() && m_allowed_settings_isValid;

    m_problems_isValid = ::OpenAPI::fromJsonValue(m_problems, json[QString("problems")]);
    m_problems_isSet = !json[QString("problems")].isNull() && m_problems_isValid;

    m_requested_isValid = ::OpenAPI::fromJsonValue(m_requested, json[QString("requested")]);
    m_requested_isSet = !json[QString("requested")].isNull() && m_requested_isValid;

    m_requested_level_isValid = ::OpenAPI::fromJsonValue(m_requested_level, json[QString("requestedLevel")]);
    m_requested_level_isSet = !json[QString("requestedLevel")].isNull() && m_requested_level_isValid;

    m_requested_settings_isValid = ::OpenAPI::fromJsonValue(m_requested_settings, json[QString("requestedSettings")]);
    m_requested_settings_isSet = !json[QString("requestedSettings")].isNull() && m_requested_settings_isValid;

    m_verification_status_isValid = ::OpenAPI::fromJsonValue(m_verification_status, json[QString("verificationStatus")]);
    m_verification_status_isSet = !json[QString("verificationStatus")].isNull() && m_verification_status_isValid;
}

QString OAILegalEntityCapability::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILegalEntityCapability::asJsonObject() const {
    QJsonObject obj;
    if (m_allowed_isSet) {
        obj.insert(QString("allowed"), ::OpenAPI::toJsonValue(m_allowed));
    }
    if (m_allowed_level_isSet) {
        obj.insert(QString("allowedLevel"), ::OpenAPI::toJsonValue(m_allowed_level));
    }
    if (m_allowed_settings.isSet()) {
        obj.insert(QString("allowedSettings"), ::OpenAPI::toJsonValue(m_allowed_settings));
    }
    if (m_problems.size() > 0) {
        obj.insert(QString("problems"), ::OpenAPI::toJsonValue(m_problems));
    }
    if (m_requested_isSet) {
        obj.insert(QString("requested"), ::OpenAPI::toJsonValue(m_requested));
    }
    if (m_requested_level_isSet) {
        obj.insert(QString("requestedLevel"), ::OpenAPI::toJsonValue(m_requested_level));
    }
    if (m_requested_settings.isSet()) {
        obj.insert(QString("requestedSettings"), ::OpenAPI::toJsonValue(m_requested_settings));
    }
    if (m_verification_status_isSet) {
        obj.insert(QString("verificationStatus"), ::OpenAPI::toJsonValue(m_verification_status));
    }
    return obj;
}

bool OAILegalEntityCapability::isAllowed() const {
    return m_allowed;
}
void OAILegalEntityCapability::setAllowed(const bool &allowed) {
    m_allowed = allowed;
    m_allowed_isSet = true;
}

bool OAILegalEntityCapability::is_allowed_Set() const{
    return m_allowed_isSet;
}

bool OAILegalEntityCapability::is_allowed_Valid() const{
    return m_allowed_isValid;
}

QString OAILegalEntityCapability::getAllowedLevel() const {
    return m_allowed_level;
}
void OAILegalEntityCapability::setAllowedLevel(const QString &allowed_level) {
    m_allowed_level = allowed_level;
    m_allowed_level_isSet = true;
}

bool OAILegalEntityCapability::is_allowed_level_Set() const{
    return m_allowed_level_isSet;
}

bool OAILegalEntityCapability::is_allowed_level_Valid() const{
    return m_allowed_level_isValid;
}

OAICapabilitySettings OAILegalEntityCapability::getAllowedSettings() const {
    return m_allowed_settings;
}
void OAILegalEntityCapability::setAllowedSettings(const OAICapabilitySettings &allowed_settings) {
    m_allowed_settings = allowed_settings;
    m_allowed_settings_isSet = true;
}

bool OAILegalEntityCapability::is_allowed_settings_Set() const{
    return m_allowed_settings_isSet;
}

bool OAILegalEntityCapability::is_allowed_settings_Valid() const{
    return m_allowed_settings_isValid;
}

QList<OAICapabilityProblem> OAILegalEntityCapability::getProblems() const {
    return m_problems;
}
void OAILegalEntityCapability::setProblems(const QList<OAICapabilityProblem> &problems) {
    m_problems = problems;
    m_problems_isSet = true;
}

bool OAILegalEntityCapability::is_problems_Set() const{
    return m_problems_isSet;
}

bool OAILegalEntityCapability::is_problems_Valid() const{
    return m_problems_isValid;
}

bool OAILegalEntityCapability::isRequested() const {
    return m_requested;
}
void OAILegalEntityCapability::setRequested(const bool &requested) {
    m_requested = requested;
    m_requested_isSet = true;
}

bool OAILegalEntityCapability::is_requested_Set() const{
    return m_requested_isSet;
}

bool OAILegalEntityCapability::is_requested_Valid() const{
    return m_requested_isValid;
}

QString OAILegalEntityCapability::getRequestedLevel() const {
    return m_requested_level;
}
void OAILegalEntityCapability::setRequestedLevel(const QString &requested_level) {
    m_requested_level = requested_level;
    m_requested_level_isSet = true;
}

bool OAILegalEntityCapability::is_requested_level_Set() const{
    return m_requested_level_isSet;
}

bool OAILegalEntityCapability::is_requested_level_Valid() const{
    return m_requested_level_isValid;
}

OAICapabilitySettings OAILegalEntityCapability::getRequestedSettings() const {
    return m_requested_settings;
}
void OAILegalEntityCapability::setRequestedSettings(const OAICapabilitySettings &requested_settings) {
    m_requested_settings = requested_settings;
    m_requested_settings_isSet = true;
}

bool OAILegalEntityCapability::is_requested_settings_Set() const{
    return m_requested_settings_isSet;
}

bool OAILegalEntityCapability::is_requested_settings_Valid() const{
    return m_requested_settings_isValid;
}

QString OAILegalEntityCapability::getVerificationStatus() const {
    return m_verification_status;
}
void OAILegalEntityCapability::setVerificationStatus(const QString &verification_status) {
    m_verification_status = verification_status;
    m_verification_status_isSet = true;
}

bool OAILegalEntityCapability::is_verification_status_Set() const{
    return m_verification_status_isSet;
}

bool OAILegalEntityCapability::is_verification_status_Valid() const{
    return m_verification_status_isValid;
}

bool OAILegalEntityCapability::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allowed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_allowed_level_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_allowed_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_problems.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_requested_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_requested_level_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_requested_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_verification_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILegalEntityCapability::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
