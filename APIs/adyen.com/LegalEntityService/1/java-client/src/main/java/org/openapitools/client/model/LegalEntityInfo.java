/*
 * Legal Entity Management API
 * The Legal Entity Management API enables you to manage legal entities that contain information required for verification.  ## Authentication Your Adyen contact will provide your API credential and an API key. To connect to the API, add an `X-API-Key` header with the API key as the value. For example:  ``` curl -H \"X-API-Key: YOUR_API_KEY\" \\ -H \"Content-Type: application/json\" \\ ... ``` Alternatively, you can use the username and password of your API credential to connect to the API using basic authentication. For example:  ``` curl -U \"ws_123456@Scope.Company_YOUR_COMPANY_ACCOUNT\":\"YourWsPassword\" \\ -H \"Content-Type: application/json\" \\ ... ``` ## Versioning The Legal Entity Management API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://kyc-test.adyen.com/lem/v1/legalEntities ``` >If you are using hosted onboarding and just beginning your integration, use v3 for your API requests. Otherwise, use v2.  ## Going live When going live, your Adyen contact will provide your API credential for the live environment. You can then use the API key or the username and password to send requests to `https://kyc-live.adyen.com/lem/v1`.  
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.Individual;
import org.openapitools.client.model.LegalEntityAssociation;
import org.openapitools.client.model.LegalEntityCapability;
import org.openapitools.client.model.Organization;
import org.openapitools.client.model.Trust;
import org.openapitools.client.model.UnincorporatedPartnership;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * LegalEntityInfo
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:15:07.035368-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LegalEntityInfo {
  public static final String SERIALIZED_NAME_CAPABILITIES = "capabilities";
  @SerializedName(SERIALIZED_NAME_CAPABILITIES)
  private Map<String, LegalEntityCapability> capabilities = new HashMap<>();

  public static final String SERIALIZED_NAME_ENTITY_ASSOCIATIONS = "entityAssociations";
  @SerializedName(SERIALIZED_NAME_ENTITY_ASSOCIATIONS)
  private List<LegalEntityAssociation> entityAssociations = new ArrayList<>();

  public static final String SERIALIZED_NAME_INDIVIDUAL = "individual";
  @SerializedName(SERIALIZED_NAME_INDIVIDUAL)
  private Individual individual;

  public static final String SERIALIZED_NAME_ORGANIZATION = "organization";
  @SerializedName(SERIALIZED_NAME_ORGANIZATION)
  private Organization organization;

  public static final String SERIALIZED_NAME_REFERENCE = "reference";
  @SerializedName(SERIALIZED_NAME_REFERENCE)
  private String reference;

  public static final String SERIALIZED_NAME_TRUST = "trust";
  @SerializedName(SERIALIZED_NAME_TRUST)
  private Trust trust;

  /**
   * The type of legal entity.   Possible values: **individual** or **organization**
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    INDIVIDUAL("individual"),
    
    ORGANIZATION("organization");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_UNINCORPORATED_PARTNERSHIP = "unincorporatedPartnership";
  @SerializedName(SERIALIZED_NAME_UNINCORPORATED_PARTNERSHIP)
  private UnincorporatedPartnership unincorporatedPartnership;

  public static final String SERIALIZED_NAME_VERIFICATION_PLAN = "verificationPlan";
  @SerializedName(SERIALIZED_NAME_VERIFICATION_PLAN)
  private String verificationPlan;

  public LegalEntityInfo() {
  }

  public LegalEntityInfo(
     Map<String, LegalEntityCapability> capabilities
  ) {
    this();
    this.capabilities = capabilities;
  }

  /**
   * Contains key-value pairs that specify the actions that the legal entity can do in your platform.The key is a capability required for your integration. For example, **issueCard** for Issuing.The value is an object containing the settings for the capability.
   * @return capabilities
   */
  @javax.annotation.Nullable
  public Map<String, LegalEntityCapability> getCapabilities() {
    return capabilities;
  }



  public LegalEntityInfo entityAssociations(List<LegalEntityAssociation> entityAssociations) {
    this.entityAssociations = entityAssociations;
    return this;
  }

  public LegalEntityInfo addEntityAssociationsItem(LegalEntityAssociation entityAssociationsItem) {
    if (this.entityAssociations == null) {
      this.entityAssociations = new ArrayList<>();
    }
    this.entityAssociations.add(entityAssociationsItem);
    return this;
  }

  /**
   * List of legal entities associated with the current legal entity. For example, ultimate beneficial owners associated with an organization through ownership or control, or as signatories.
   * @return entityAssociations
   */
  @javax.annotation.Nullable
  public List<LegalEntityAssociation> getEntityAssociations() {
    return entityAssociations;
  }

  public void setEntityAssociations(List<LegalEntityAssociation> entityAssociations) {
    this.entityAssociations = entityAssociations;
  }


  public LegalEntityInfo individual(Individual individual) {
    this.individual = individual;
    return this;
  }

  /**
   * Information about the individual. Required if &#x60;type&#x60; is **individual**.
   * @return individual
   */
  @javax.annotation.Nullable
  public Individual getIndividual() {
    return individual;
  }

  public void setIndividual(Individual individual) {
    this.individual = individual;
  }


  public LegalEntityInfo organization(Organization organization) {
    this.organization = organization;
    return this;
  }

  /**
   * Information about the organization. Required if &#x60;type&#x60; is **organization**.
   * @return organization
   */
  @javax.annotation.Nullable
  public Organization getOrganization() {
    return organization;
  }

  public void setOrganization(Organization organization) {
    this.organization = organization;
  }


  public LegalEntityInfo reference(String reference) {
    this.reference = reference;
    return this;
  }

  /**
   * Your reference for the legal entity, maximum 150 characters.
   * @return reference
   */
  @javax.annotation.Nullable
  public String getReference() {
    return reference;
  }

  public void setReference(String reference) {
    this.reference = reference;
  }


  public LegalEntityInfo trust(Trust trust) {
    this.trust = trust;
    return this;
  }

  /**
   * Information about the trust. Required if &#x60;type&#x60; is **trust**.
   * @return trust
   */
  @javax.annotation.Nullable
  public Trust getTrust() {
    return trust;
  }

  public void setTrust(Trust trust) {
    this.trust = trust;
  }


  public LegalEntityInfo type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * The type of legal entity.   Possible values: **individual** or **organization**
   * @return type
   */
  @javax.annotation.Nullable
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }


  public LegalEntityInfo unincorporatedPartnership(UnincorporatedPartnership unincorporatedPartnership) {
    this.unincorporatedPartnership = unincorporatedPartnership;
    return this;
  }

  /**
   * Information about the unincorporated partnership. Required if &#x60;type&#x60; is **unincorporatedPartnership**.
   * @return unincorporatedPartnership
   */
  @javax.annotation.Nullable
  public UnincorporatedPartnership getUnincorporatedPartnership() {
    return unincorporatedPartnership;
  }

  public void setUnincorporatedPartnership(UnincorporatedPartnership unincorporatedPartnership) {
    this.unincorporatedPartnership = unincorporatedPartnership;
  }


  public LegalEntityInfo verificationPlan(String verificationPlan) {
    this.verificationPlan = verificationPlan;
    return this;
  }

  /**
   * A key-value pair that specifies the [verification process](https://docs.adyen.com/marketplaces-and-platforms/collect-verification-details/) for a legal entity. Set to **upfront** for [upfront verification](https://docs.adyen.com/marketplaces-and-platforms/collect-verification-details#upfront).
   * @return verificationPlan
   */
  @javax.annotation.Nullable
  public String getVerificationPlan() {
    return verificationPlan;
  }

  public void setVerificationPlan(String verificationPlan) {
    this.verificationPlan = verificationPlan;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LegalEntityInfo legalEntityInfo = (LegalEntityInfo) o;
    return Objects.equals(this.capabilities, legalEntityInfo.capabilities) &&
        Objects.equals(this.entityAssociations, legalEntityInfo.entityAssociations) &&
        Objects.equals(this.individual, legalEntityInfo.individual) &&
        Objects.equals(this.organization, legalEntityInfo.organization) &&
        Objects.equals(this.reference, legalEntityInfo.reference) &&
        Objects.equals(this.trust, legalEntityInfo.trust) &&
        Objects.equals(this.type, legalEntityInfo.type) &&
        Objects.equals(this.unincorporatedPartnership, legalEntityInfo.unincorporatedPartnership) &&
        Objects.equals(this.verificationPlan, legalEntityInfo.verificationPlan);
  }

  @Override
  public int hashCode() {
    return Objects.hash(capabilities, entityAssociations, individual, organization, reference, trust, type, unincorporatedPartnership, verificationPlan);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LegalEntityInfo {\n");
    sb.append("    capabilities: ").append(toIndentedString(capabilities)).append("\n");
    sb.append("    entityAssociations: ").append(toIndentedString(entityAssociations)).append("\n");
    sb.append("    individual: ").append(toIndentedString(individual)).append("\n");
    sb.append("    organization: ").append(toIndentedString(organization)).append("\n");
    sb.append("    reference: ").append(toIndentedString(reference)).append("\n");
    sb.append("    trust: ").append(toIndentedString(trust)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    unincorporatedPartnership: ").append(toIndentedString(unincorporatedPartnership)).append("\n");
    sb.append("    verificationPlan: ").append(toIndentedString(verificationPlan)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("capabilities");
    openapiFields.add("entityAssociations");
    openapiFields.add("individual");
    openapiFields.add("organization");
    openapiFields.add("reference");
    openapiFields.add("trust");
    openapiFields.add("type");
    openapiFields.add("unincorporatedPartnership");
    openapiFields.add("verificationPlan");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LegalEntityInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LegalEntityInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LegalEntityInfo is not found in the empty JSON string", LegalEntityInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LegalEntityInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LegalEntityInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("entityAssociations") != null && !jsonObj.get("entityAssociations").isJsonNull()) {
        JsonArray jsonArrayentityAssociations = jsonObj.getAsJsonArray("entityAssociations");
        if (jsonArrayentityAssociations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("entityAssociations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `entityAssociations` to be an array in the JSON string but got `%s`", jsonObj.get("entityAssociations").toString()));
          }

          // validate the optional field `entityAssociations` (array)
          for (int i = 0; i < jsonArrayentityAssociations.size(); i++) {
            LegalEntityAssociation.validateJsonElement(jsonArrayentityAssociations.get(i));
          };
        }
      }
      // validate the optional field `individual`
      if (jsonObj.get("individual") != null && !jsonObj.get("individual").isJsonNull()) {
        Individual.validateJsonElement(jsonObj.get("individual"));
      }
      // validate the optional field `organization`
      if (jsonObj.get("organization") != null && !jsonObj.get("organization").isJsonNull()) {
        Organization.validateJsonElement(jsonObj.get("organization"));
      }
      if ((jsonObj.get("reference") != null && !jsonObj.get("reference").isJsonNull()) && !jsonObj.get("reference").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reference` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reference").toString()));
      }
      // validate the optional field `trust`
      if (jsonObj.get("trust") != null && !jsonObj.get("trust").isJsonNull()) {
        Trust.validateJsonElement(jsonObj.get("trust"));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        TypeEnum.validateJsonElement(jsonObj.get("type"));
      }
      // validate the optional field `unincorporatedPartnership`
      if (jsonObj.get("unincorporatedPartnership") != null && !jsonObj.get("unincorporatedPartnership").isJsonNull()) {
        UnincorporatedPartnership.validateJsonElement(jsonObj.get("unincorporatedPartnership"));
      }
      if ((jsonObj.get("verificationPlan") != null && !jsonObj.get("verificationPlan").isJsonNull()) && !jsonObj.get("verificationPlan").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `verificationPlan` to be a primitive type in the JSON string but got `%s`", jsonObj.get("verificationPlan").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LegalEntityInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LegalEntityInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LegalEntityInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LegalEntityInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<LegalEntityInfo>() {
           @Override
           public void write(JsonWriter out, LegalEntityInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LegalEntityInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LegalEntityInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LegalEntityInfo
   * @throws IOException if the JSON string is invalid with respect to LegalEntityInfo
   */
  public static LegalEntityInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LegalEntityInfo.class);
  }

  /**
   * Convert an instance of LegalEntityInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

