/*
 * Legal Entity Management API
 * The Legal Entity Management API enables you to manage legal entities that contain information required for verification.  ## Authentication Your Adyen contact will provide your API credential and an API key. To connect to the API, add an `X-API-Key` header with the API key as the value. For example:  ``` curl -H \"X-API-Key: YOUR_API_KEY\" \\ -H \"Content-Type: application/json\" \\ ... ``` Alternatively, you can use the username and password of your API credential to connect to the API using basic authentication. For example:  ``` curl -U \"ws_123456@Scope.Company_YOUR_COMPANY_ACCOUNT\":\"YourWsPassword\" \\ -H \"Content-Type: application/json\" \\ ... ``` ## Versioning The Legal Entity Management API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://kyc-test.adyen.com/lem/v1/legalEntities ``` >If you are using hosted onboarding and just beginning your integration, use v3 for your API requests. Otherwise, use v2.  ## Going live When going live, your Adyen contact will provide your API credential for the live environment. You can then use the API key or the username and password to send requests to `https://kyc-live.adyen.com/lem/v1`.  
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CapabilityProblem;
import org.openapitools.client.model.CapabilitySettings;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * LegalEntityCapability
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:15:07.035368-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LegalEntityCapability {
  public static final String SERIALIZED_NAME_ALLOWED = "allowed";
  @SerializedName(SERIALIZED_NAME_ALLOWED)
  private Boolean allowed;

  /**
   * The capability level that is allowed for the legal entity.  Possible values: **notApplicable**, **low**, **medium**, **high**.
   */
  @JsonAdapter(AllowedLevelEnum.Adapter.class)
  public enum AllowedLevelEnum {
    HIGH("high"),
    
    LOW("low"),
    
    MEDIUM("medium"),
    
    NOT_APPLICABLE("notApplicable");

    private String value;

    AllowedLevelEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AllowedLevelEnum fromValue(String value) {
      for (AllowedLevelEnum b : AllowedLevelEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AllowedLevelEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AllowedLevelEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AllowedLevelEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AllowedLevelEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AllowedLevelEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ALLOWED_LEVEL = "allowedLevel";
  @SerializedName(SERIALIZED_NAME_ALLOWED_LEVEL)
  private AllowedLevelEnum allowedLevel;

  public static final String SERIALIZED_NAME_ALLOWED_SETTINGS = "allowedSettings";
  @SerializedName(SERIALIZED_NAME_ALLOWED_SETTINGS)
  private CapabilitySettings allowedSettings;

  public static final String SERIALIZED_NAME_PROBLEMS = "problems";
  @SerializedName(SERIALIZED_NAME_PROBLEMS)
  private List<CapabilityProblem> problems = new ArrayList<>();

  public static final String SERIALIZED_NAME_REQUESTED = "requested";
  @SerializedName(SERIALIZED_NAME_REQUESTED)
  private Boolean requested;

  /**
   * The requested level of the capability. Some capabilities, such as those used in [card issuing](https://docs.adyen.com/issuing/add-capabilities#capability-levels), have different levels. Levels increase the capability, but also require additional checks and increased monitoring.  Possible values: **notApplicable**, **low**, **medium**, **high**.
   */
  @JsonAdapter(RequestedLevelEnum.Adapter.class)
  public enum RequestedLevelEnum {
    HIGH("high"),
    
    LOW("low"),
    
    MEDIUM("medium"),
    
    NOT_APPLICABLE("notApplicable");

    private String value;

    RequestedLevelEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RequestedLevelEnum fromValue(String value) {
      for (RequestedLevelEnum b : RequestedLevelEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RequestedLevelEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RequestedLevelEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RequestedLevelEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RequestedLevelEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RequestedLevelEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_REQUESTED_LEVEL = "requestedLevel";
  @SerializedName(SERIALIZED_NAME_REQUESTED_LEVEL)
  private RequestedLevelEnum requestedLevel;

  public static final String SERIALIZED_NAME_REQUESTED_SETTINGS = "requestedSettings";
  @SerializedName(SERIALIZED_NAME_REQUESTED_SETTINGS)
  private CapabilitySettings requestedSettings;

  public static final String SERIALIZED_NAME_VERIFICATION_STATUS = "verificationStatus";
  @SerializedName(SERIALIZED_NAME_VERIFICATION_STATUS)
  private String verificationStatus;

  public LegalEntityCapability() {
  }

  public LegalEntityCapability(
     Boolean allowed, 
     AllowedLevelEnum allowedLevel, 
     CapabilitySettings allowedSettings, 
     Boolean requested, 
     RequestedLevelEnum requestedLevel, 
     CapabilitySettings requestedSettings, 
     String verificationStatus
  ) {
    this();
    this.allowed = allowed;
    this.allowedLevel = allowedLevel;
    this.allowedSettings = allowedSettings;
    this.requested = requested;
    this.requestedLevel = requestedLevel;
    this.requestedSettings = requestedSettings;
    this.verificationStatus = verificationStatus;
  }

  /**
   * Indicates whether the capability is allowed. Adyen sets this to **true** if the verification is successful.
   * @return allowed
   */
  @javax.annotation.Nullable
  public Boolean getAllowed() {
    return allowed;
  }



  /**
   * The capability level that is allowed for the legal entity.  Possible values: **notApplicable**, **low**, **medium**, **high**.
   * @return allowedLevel
   */
  @javax.annotation.Nullable
  public AllowedLevelEnum getAllowedLevel() {
    return allowedLevel;
  }



  /**
   * The settings that are allowed for the legal entity.
   * @return allowedSettings
   */
  @javax.annotation.Nullable
  public CapabilitySettings getAllowedSettings() {
    return allowedSettings;
  }



  public LegalEntityCapability problems(List<CapabilityProblem> problems) {
    this.problems = problems;
    return this;
  }

  public LegalEntityCapability addProblemsItem(CapabilityProblem problemsItem) {
    if (this.problems == null) {
      this.problems = new ArrayList<>();
    }
    this.problems.add(problemsItem);
    return this;
  }

  /**
   * Contains verification errors and the actions that you can take to resolve them.
   * @return problems
   */
  @javax.annotation.Nullable
  public List<CapabilityProblem> getProblems() {
    return problems;
  }

  public void setProblems(List<CapabilityProblem> problems) {
    this.problems = problems;
  }


  /**
   * Indicates whether the capability is requested. To check whether the legal entity is permitted to use the capability, refer to the &#x60;allowed&#x60; field.
   * @return requested
   */
  @javax.annotation.Nullable
  public Boolean getRequested() {
    return requested;
  }



  /**
   * The requested level of the capability. Some capabilities, such as those used in [card issuing](https://docs.adyen.com/issuing/add-capabilities#capability-levels), have different levels. Levels increase the capability, but also require additional checks and increased monitoring.  Possible values: **notApplicable**, **low**, **medium**, **high**.
   * @return requestedLevel
   */
  @javax.annotation.Nullable
  public RequestedLevelEnum getRequestedLevel() {
    return requestedLevel;
  }



  /**
   * The settings that are requested for the legal entity.
   * @return requestedSettings
   */
  @javax.annotation.Nullable
  public CapabilitySettings getRequestedSettings() {
    return requestedSettings;
  }



  /**
   * The status of the verification checks for the capability.  Possible values:  * **pending**: Adyen is running the verification.  * **invalid**: The verification failed. Check if the &#x60;errors&#x60; array contains more information.  * **valid**: The verification has been successfully completed.  * **rejected**: Adyen has verified the information, but found reasons to not allow the capability. 
   * @return verificationStatus
   */
  @javax.annotation.Nullable
  public String getVerificationStatus() {
    return verificationStatus;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LegalEntityCapability legalEntityCapability = (LegalEntityCapability) o;
    return Objects.equals(this.allowed, legalEntityCapability.allowed) &&
        Objects.equals(this.allowedLevel, legalEntityCapability.allowedLevel) &&
        Objects.equals(this.allowedSettings, legalEntityCapability.allowedSettings) &&
        Objects.equals(this.problems, legalEntityCapability.problems) &&
        Objects.equals(this.requested, legalEntityCapability.requested) &&
        Objects.equals(this.requestedLevel, legalEntityCapability.requestedLevel) &&
        Objects.equals(this.requestedSettings, legalEntityCapability.requestedSettings) &&
        Objects.equals(this.verificationStatus, legalEntityCapability.verificationStatus);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allowed, allowedLevel, allowedSettings, problems, requested, requestedLevel, requestedSettings, verificationStatus);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LegalEntityCapability {\n");
    sb.append("    allowed: ").append(toIndentedString(allowed)).append("\n");
    sb.append("    allowedLevel: ").append(toIndentedString(allowedLevel)).append("\n");
    sb.append("    allowedSettings: ").append(toIndentedString(allowedSettings)).append("\n");
    sb.append("    problems: ").append(toIndentedString(problems)).append("\n");
    sb.append("    requested: ").append(toIndentedString(requested)).append("\n");
    sb.append("    requestedLevel: ").append(toIndentedString(requestedLevel)).append("\n");
    sb.append("    requestedSettings: ").append(toIndentedString(requestedSettings)).append("\n");
    sb.append("    verificationStatus: ").append(toIndentedString(verificationStatus)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("allowed");
    openapiFields.add("allowedLevel");
    openapiFields.add("allowedSettings");
    openapiFields.add("problems");
    openapiFields.add("requested");
    openapiFields.add("requestedLevel");
    openapiFields.add("requestedSettings");
    openapiFields.add("verificationStatus");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LegalEntityCapability
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LegalEntityCapability.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LegalEntityCapability is not found in the empty JSON string", LegalEntityCapability.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LegalEntityCapability.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LegalEntityCapability` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("allowedLevel") != null && !jsonObj.get("allowedLevel").isJsonNull()) && !jsonObj.get("allowedLevel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `allowedLevel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("allowedLevel").toString()));
      }
      // validate the optional field `allowedLevel`
      if (jsonObj.get("allowedLevel") != null && !jsonObj.get("allowedLevel").isJsonNull()) {
        AllowedLevelEnum.validateJsonElement(jsonObj.get("allowedLevel"));
      }
      // validate the optional field `allowedSettings`
      if (jsonObj.get("allowedSettings") != null && !jsonObj.get("allowedSettings").isJsonNull()) {
        CapabilitySettings.validateJsonElement(jsonObj.get("allowedSettings"));
      }
      if (jsonObj.get("problems") != null && !jsonObj.get("problems").isJsonNull()) {
        JsonArray jsonArrayproblems = jsonObj.getAsJsonArray("problems");
        if (jsonArrayproblems != null) {
          // ensure the json data is an array
          if (!jsonObj.get("problems").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `problems` to be an array in the JSON string but got `%s`", jsonObj.get("problems").toString()));
          }

          // validate the optional field `problems` (array)
          for (int i = 0; i < jsonArrayproblems.size(); i++) {
            CapabilityProblem.validateJsonElement(jsonArrayproblems.get(i));
          };
        }
      }
      if ((jsonObj.get("requestedLevel") != null && !jsonObj.get("requestedLevel").isJsonNull()) && !jsonObj.get("requestedLevel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `requestedLevel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("requestedLevel").toString()));
      }
      // validate the optional field `requestedLevel`
      if (jsonObj.get("requestedLevel") != null && !jsonObj.get("requestedLevel").isJsonNull()) {
        RequestedLevelEnum.validateJsonElement(jsonObj.get("requestedLevel"));
      }
      // validate the optional field `requestedSettings`
      if (jsonObj.get("requestedSettings") != null && !jsonObj.get("requestedSettings").isJsonNull()) {
        CapabilitySettings.validateJsonElement(jsonObj.get("requestedSettings"));
      }
      if ((jsonObj.get("verificationStatus") != null && !jsonObj.get("verificationStatus").isJsonNull()) && !jsonObj.get("verificationStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `verificationStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("verificationStatus").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LegalEntityCapability.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LegalEntityCapability' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LegalEntityCapability> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LegalEntityCapability.class));

       return (TypeAdapter<T>) new TypeAdapter<LegalEntityCapability>() {
           @Override
           public void write(JsonWriter out, LegalEntityCapability value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LegalEntityCapability read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LegalEntityCapability given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LegalEntityCapability
   * @throws IOException if the JSON string is invalid with respect to LegalEntityCapability
   */
  public static LegalEntityCapability fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LegalEntityCapability.class);
  }

  /**
   * Convert an instance of LegalEntityCapability to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

