/*
 * Legal Entity Management API
 * The Legal Entity Management API enables you to manage legal entities that contain information required for verification.  ## Authentication Your Adyen contact will provide your API credential and an API key. To connect to the API, add an `X-API-Key` header with the API key as the value. For example:  ``` curl -H \"X-API-Key: YOUR_API_KEY\" \\ -H \"Content-Type: application/json\" \\ ... ``` Alternatively, you can use the username and password of your API credential to connect to the API using basic authentication. For example:  ``` curl -U \"ws_123456@Scope.Company_YOUR_COMPANY_ACCOUNT\":\"YourWsPassword\" \\ -H \"Content-Type: application/json\" \\ ... ``` ## Versioning The Legal Entity Management API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://kyc-test.adyen.com/lem/v1/legalEntities ``` >If you are using hosted onboarding and just beginning your integration, use v3 for your API requests. Otherwise, use v2.  ## Going live When going live, your Adyen contact will provide your API credential for the live environment. You can then use the API key or the username and password to send requests to `https://kyc-live.adyen.com/lem/v1`.  
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Address;
import org.openapitools.client.model.BirthData;
import org.openapitools.client.model.IdentificationData;
import org.openapitools.client.model.Name;
import org.openapitools.client.model.PhoneNumber;
import org.openapitools.client.model.WebData;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Individual
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:15:07.035368-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Individual {
  public static final String SERIALIZED_NAME_BIRTH_DATA = "birthData";
  @SerializedName(SERIALIZED_NAME_BIRTH_DATA)
  private BirthData birthData;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_IDENTIFICATION_DATA = "identificationData";
  @SerializedName(SERIALIZED_NAME_IDENTIFICATION_DATA)
  private IdentificationData identificationData;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private Name name;

  public static final String SERIALIZED_NAME_NATIONALITY = "nationality";
  @SerializedName(SERIALIZED_NAME_NATIONALITY)
  private String nationality;

  public static final String SERIALIZED_NAME_PHONE = "phone";
  @SerializedName(SERIALIZED_NAME_PHONE)
  private PhoneNumber phone;

  public static final String SERIALIZED_NAME_RESIDENTIAL_ADDRESS = "residentialAddress";
  @SerializedName(SERIALIZED_NAME_RESIDENTIAL_ADDRESS)
  private Address residentialAddress;

  public static final String SERIALIZED_NAME_WEB_DATA = "webData";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_WEB_DATA)
  private WebData webData;

  public Individual() {
  }

  public Individual birthData(BirthData birthData) {
    this.birthData = birthData;
    return this;
  }

  /**
   * The individual&#39;s birth information.
   * @return birthData
   */
  @javax.annotation.Nullable
  public BirthData getBirthData() {
    return birthData;
  }

  public void setBirthData(BirthData birthData) {
    this.birthData = birthData;
  }


  public Individual email(String email) {
    this.email = email;
    return this;
  }

  /**
   * The email address of the legal entity.
   * @return email
   */
  @javax.annotation.Nullable
  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }


  public Individual identificationData(IdentificationData identificationData) {
    this.identificationData = identificationData;
    return this;
  }

  /**
   * Information about the individual&#39;s identification document.
   * @return identificationData
   */
  @javax.annotation.Nullable
  public IdentificationData getIdentificationData() {
    return identificationData;
  }

  public void setIdentificationData(IdentificationData identificationData) {
    this.identificationData = identificationData;
  }


  public Individual name(Name name) {
    this.name = name;
    return this;
  }

  /**
   * The individual&#39;s name.
   * @return name
   */
  @javax.annotation.Nonnull
  public Name getName() {
    return name;
  }

  public void setName(Name name) {
    this.name = name;
  }


  public Individual nationality(String nationality) {
    this.nationality = nationality;
    return this;
  }

  /**
   * The individual&#39;s nationality.
   * @return nationality
   */
  @javax.annotation.Nullable
  public String getNationality() {
    return nationality;
  }

  public void setNationality(String nationality) {
    this.nationality = nationality;
  }


  public Individual phone(PhoneNumber phone) {
    this.phone = phone;
    return this;
  }

  /**
   * The phone number of the legal entity.
   * @return phone
   */
  @javax.annotation.Nullable
  public PhoneNumber getPhone() {
    return phone;
  }

  public void setPhone(PhoneNumber phone) {
    this.phone = phone;
  }


  public Individual residentialAddress(Address residentialAddress) {
    this.residentialAddress = residentialAddress;
    return this;
  }

  /**
   * The residential address of the individual.
   * @return residentialAddress
   */
  @javax.annotation.Nonnull
  public Address getResidentialAddress() {
    return residentialAddress;
  }

  public void setResidentialAddress(Address residentialAddress) {
    this.residentialAddress = residentialAddress;
  }


  @Deprecated
  public Individual webData(WebData webData) {
    this.webData = webData;
    return this;
  }

  /**
   * The website and app URL of the legal entity.
   * @return webData
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public WebData getWebData() {
    return webData;
  }

  @Deprecated
  public void setWebData(WebData webData) {
    this.webData = webData;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Individual individual = (Individual) o;
    return Objects.equals(this.birthData, individual.birthData) &&
        Objects.equals(this.email, individual.email) &&
        Objects.equals(this.identificationData, individual.identificationData) &&
        Objects.equals(this.name, individual.name) &&
        Objects.equals(this.nationality, individual.nationality) &&
        Objects.equals(this.phone, individual.phone) &&
        Objects.equals(this.residentialAddress, individual.residentialAddress) &&
        Objects.equals(this.webData, individual.webData);
  }

  @Override
  public int hashCode() {
    return Objects.hash(birthData, email, identificationData, name, nationality, phone, residentialAddress, webData);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Individual {\n");
    sb.append("    birthData: ").append(toIndentedString(birthData)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    identificationData: ").append(toIndentedString(identificationData)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    nationality: ").append(toIndentedString(nationality)).append("\n");
    sb.append("    phone: ").append(toIndentedString(phone)).append("\n");
    sb.append("    residentialAddress: ").append(toIndentedString(residentialAddress)).append("\n");
    sb.append("    webData: ").append(toIndentedString(webData)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("birthData");
    openapiFields.add("email");
    openapiFields.add("identificationData");
    openapiFields.add("name");
    openapiFields.add("nationality");
    openapiFields.add("phone");
    openapiFields.add("residentialAddress");
    openapiFields.add("webData");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("residentialAddress");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Individual
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Individual.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Individual is not found in the empty JSON string", Individual.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Individual.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Individual` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Individual.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `birthData`
      if (jsonObj.get("birthData") != null && !jsonObj.get("birthData").isJsonNull()) {
        BirthData.validateJsonElement(jsonObj.get("birthData"));
      }
      if ((jsonObj.get("email") != null && !jsonObj.get("email").isJsonNull()) && !jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      // validate the optional field `identificationData`
      if (jsonObj.get("identificationData") != null && !jsonObj.get("identificationData").isJsonNull()) {
        IdentificationData.validateJsonElement(jsonObj.get("identificationData"));
      }
      // validate the required field `name`
      Name.validateJsonElement(jsonObj.get("name"));
      if ((jsonObj.get("nationality") != null && !jsonObj.get("nationality").isJsonNull()) && !jsonObj.get("nationality").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nationality` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nationality").toString()));
      }
      // validate the optional field `phone`
      if (jsonObj.get("phone") != null && !jsonObj.get("phone").isJsonNull()) {
        PhoneNumber.validateJsonElement(jsonObj.get("phone"));
      }
      // validate the required field `residentialAddress`
      Address.validateJsonElement(jsonObj.get("residentialAddress"));
      // validate the optional field `webData`
      if (jsonObj.get("webData") != null && !jsonObj.get("webData").isJsonNull()) {
        WebData.validateJsonElement(jsonObj.get("webData"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Individual.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Individual' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Individual> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Individual.class));

       return (TypeAdapter<T>) new TypeAdapter<Individual>() {
           @Override
           public void write(JsonWriter out, Individual value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Individual read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Individual given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Individual
   * @throws IOException if the JSON string is invalid with respect to Individual
   */
  public static Individual fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Individual.class);
  }

  /**
   * Convert an instance of Individual to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

