# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.address import Address
from openapi_server.models.birth_data import BirthData
from openapi_server.models.identification_data import IdentificationData
from openapi_server.models.name import Name
from openapi_server.models.phone_number import PhoneNumber
from openapi_server.models.web_data import WebData
from openapi_server import util


class Individual(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, birth_data: BirthData=None, email: str=None, identification_data: IdentificationData=None, name: Name=None, nationality: str=None, phone: PhoneNumber=None, residential_address: Address=None, web_data: WebData=None):
        """Individual - a model defined in OpenAPI

        :param birth_data: The birth_data of this Individual.
        :param email: The email of this Individual.
        :param identification_data: The identification_data of this Individual.
        :param name: The name of this Individual.
        :param nationality: The nationality of this Individual.
        :param phone: The phone of this Individual.
        :param residential_address: The residential_address of this Individual.
        :param web_data: The web_data of this Individual.
        """
        self.openapi_types = {
            'birth_data': BirthData,
            'email': str,
            'identification_data': IdentificationData,
            'name': Name,
            'nationality': str,
            'phone': PhoneNumber,
            'residential_address': Address,
            'web_data': WebData
        }

        self.attribute_map = {
            'birth_data': 'birthData',
            'email': 'email',
            'identification_data': 'identificationData',
            'name': 'name',
            'nationality': 'nationality',
            'phone': 'phone',
            'residential_address': 'residentialAddress',
            'web_data': 'webData'
        }

        self._birth_data = birth_data
        self._email = email
        self._identification_data = identification_data
        self._name = name
        self._nationality = nationality
        self._phone = phone
        self._residential_address = residential_address
        self._web_data = web_data

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Individual':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Individual of this Individual.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def birth_data(self):
        """Gets the birth_data of this Individual.

        The individual's birth information.

        :return: The birth_data of this Individual.
        :rtype: BirthData
        """
        return self._birth_data

    @birth_data.setter
    def birth_data(self, birth_data):
        """Sets the birth_data of this Individual.

        The individual's birth information.

        :param birth_data: The birth_data of this Individual.
        :type birth_data: BirthData
        """

        self._birth_data = birth_data

    @property
    def email(self):
        """Gets the email of this Individual.

        The email address of the legal entity.

        :return: The email of this Individual.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this Individual.

        The email address of the legal entity.

        :param email: The email of this Individual.
        :type email: str
        """

        self._email = email

    @property
    def identification_data(self):
        """Gets the identification_data of this Individual.

        Information about the individual's identification document.

        :return: The identification_data of this Individual.
        :rtype: IdentificationData
        """
        return self._identification_data

    @identification_data.setter
    def identification_data(self, identification_data):
        """Sets the identification_data of this Individual.

        Information about the individual's identification document.

        :param identification_data: The identification_data of this Individual.
        :type identification_data: IdentificationData
        """

        self._identification_data = identification_data

    @property
    def name(self):
        """Gets the name of this Individual.

        The individual's name.

        :return: The name of this Individual.
        :rtype: Name
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Individual.

        The individual's name.

        :param name: The name of this Individual.
        :type name: Name
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def nationality(self):
        """Gets the nationality of this Individual.

        The individual's nationality.

        :return: The nationality of this Individual.
        :rtype: str
        """
        return self._nationality

    @nationality.setter
    def nationality(self, nationality):
        """Sets the nationality of this Individual.

        The individual's nationality.

        :param nationality: The nationality of this Individual.
        :type nationality: str
        """

        self._nationality = nationality

    @property
    def phone(self):
        """Gets the phone of this Individual.

        The phone number of the legal entity.

        :return: The phone of this Individual.
        :rtype: PhoneNumber
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this Individual.

        The phone number of the legal entity.

        :param phone: The phone of this Individual.
        :type phone: PhoneNumber
        """

        self._phone = phone

    @property
    def residential_address(self):
        """Gets the residential_address of this Individual.

        The residential address of the individual.

        :return: The residential_address of this Individual.
        :rtype: Address
        """
        return self._residential_address

    @residential_address.setter
    def residential_address(self, residential_address):
        """Sets the residential_address of this Individual.

        The residential address of the individual.

        :param residential_address: The residential_address of this Individual.
        :type residential_address: Address
        """
        if residential_address is None:
            raise ValueError("Invalid value for `residential_address`, must not be `None`")

        self._residential_address = residential_address

    @property
    def web_data(self):
        """Gets the web_data of this Individual.

        The website and app URL of the legal entity.

        :return: The web_data of this Individual.
        :rtype: WebData
        """
        return self._web_data

    @web_data.setter
    def web_data(self, web_data):
        """Sets the web_data of this Individual.

        The website and app URL of the legal entity.

        :param web_data: The web_data of this Individual.
        :type web_data: WebData
        """

        self._web_data = web_data
