# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.bank_account_info import BankAccountInfo
from openapi_server.models.entity_reference import EntityReference
from openapi_server import util


class TransferInstrument(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bank_account: BankAccountInfo=None, documents: List[EntityReference]=None, id: str=None, legal_entity_id: str=None, type: str=None):
        """TransferInstrument - a model defined in OpenAPI

        :param bank_account: The bank_account of this TransferInstrument.
        :param documents: The documents of this TransferInstrument.
        :param id: The id of this TransferInstrument.
        :param legal_entity_id: The legal_entity_id of this TransferInstrument.
        :param type: The type of this TransferInstrument.
        """
        self.openapi_types = {
            'bank_account': BankAccountInfo,
            'documents': List[EntityReference],
            'id': str,
            'legal_entity_id': str,
            'type': str
        }

        self.attribute_map = {
            'bank_account': 'bankAccount',
            'documents': 'documents',
            'id': 'id',
            'legal_entity_id': 'legalEntityId',
            'type': 'type'
        }

        self._bank_account = bank_account
        self._documents = documents
        self._id = id
        self._legal_entity_id = legal_entity_id
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TransferInstrument':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TransferInstrument of this TransferInstrument.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bank_account(self):
        """Gets the bank_account of this TransferInstrument.

        Contains information about the legal entity's bank account.

        :return: The bank_account of this TransferInstrument.
        :rtype: BankAccountInfo
        """
        return self._bank_account

    @bank_account.setter
    def bank_account(self, bank_account):
        """Sets the bank_account of this TransferInstrument.

        Contains information about the legal entity's bank account.

        :param bank_account: The bank_account of this TransferInstrument.
        :type bank_account: BankAccountInfo
        """
        if bank_account is None:
            raise ValueError("Invalid value for `bank_account`, must not be `None`")

        self._bank_account = bank_account

    @property
    def documents(self):
        """Gets the documents of this TransferInstrument.

        List of documents uploaded for the transfer instrument.

        :return: The documents of this TransferInstrument.
        :rtype: List[EntityReference]
        """
        return self._documents

    @documents.setter
    def documents(self, documents):
        """Sets the documents of this TransferInstrument.

        List of documents uploaded for the transfer instrument.

        :param documents: The documents of this TransferInstrument.
        :type documents: List[EntityReference]
        """

        self._documents = documents

    @property
    def id(self):
        """Gets the id of this TransferInstrument.

        The unique identifier of the transfer instrument.

        :return: The id of this TransferInstrument.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TransferInstrument.

        The unique identifier of the transfer instrument.

        :param id: The id of this TransferInstrument.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def legal_entity_id(self):
        """Gets the legal_entity_id of this TransferInstrument.

        The unique identifier of the [legal entity](https://docs.adyen.com/api-explorer/legalentity/latest/post/legalEntities#responses-200-id) that owns the transfer instrument.

        :return: The legal_entity_id of this TransferInstrument.
        :rtype: str
        """
        return self._legal_entity_id

    @legal_entity_id.setter
    def legal_entity_id(self, legal_entity_id):
        """Sets the legal_entity_id of this TransferInstrument.

        The unique identifier of the [legal entity](https://docs.adyen.com/api-explorer/legalentity/latest/post/legalEntities#responses-200-id) that owns the transfer instrument.

        :param legal_entity_id: The legal_entity_id of this TransferInstrument.
        :type legal_entity_id: str
        """
        if legal_entity_id is None:
            raise ValueError("Invalid value for `legal_entity_id`, must not be `None`")

        self._legal_entity_id = legal_entity_id

    @property
    def type(self):
        """Gets the type of this TransferInstrument.

        The type of transfer instrument.  Possible value: **bankAccount**.

        :return: The type of this TransferInstrument.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this TransferInstrument.

        The type of transfer instrument.  Possible value: **bankAccount**.

        :param type: The type of this TransferInstrument.
        :type type: str
        """
        allowed_values = ["bankAccount", "recurringDetail"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
