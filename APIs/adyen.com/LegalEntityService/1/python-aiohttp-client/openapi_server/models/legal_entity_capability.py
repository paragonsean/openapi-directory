# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.capability_problem import CapabilityProblem
from openapi_server.models.capability_settings import CapabilitySettings
from openapi_server import util


class LegalEntityCapability(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allowed: bool=None, allowed_level: str=None, allowed_settings: CapabilitySettings=None, problems: List[CapabilityProblem]=None, requested: bool=None, requested_level: str=None, requested_settings: CapabilitySettings=None, verification_status: str=None):
        """LegalEntityCapability - a model defined in OpenAPI

        :param allowed: The allowed of this LegalEntityCapability.
        :param allowed_level: The allowed_level of this LegalEntityCapability.
        :param allowed_settings: The allowed_settings of this LegalEntityCapability.
        :param problems: The problems of this LegalEntityCapability.
        :param requested: The requested of this LegalEntityCapability.
        :param requested_level: The requested_level of this LegalEntityCapability.
        :param requested_settings: The requested_settings of this LegalEntityCapability.
        :param verification_status: The verification_status of this LegalEntityCapability.
        """
        self.openapi_types = {
            'allowed': bool,
            'allowed_level': str,
            'allowed_settings': CapabilitySettings,
            'problems': List[CapabilityProblem],
            'requested': bool,
            'requested_level': str,
            'requested_settings': CapabilitySettings,
            'verification_status': str
        }

        self.attribute_map = {
            'allowed': 'allowed',
            'allowed_level': 'allowedLevel',
            'allowed_settings': 'allowedSettings',
            'problems': 'problems',
            'requested': 'requested',
            'requested_level': 'requestedLevel',
            'requested_settings': 'requestedSettings',
            'verification_status': 'verificationStatus'
        }

        self._allowed = allowed
        self._allowed_level = allowed_level
        self._allowed_settings = allowed_settings
        self._problems = problems
        self._requested = requested
        self._requested_level = requested_level
        self._requested_settings = requested_settings
        self._verification_status = verification_status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LegalEntityCapability':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LegalEntityCapability of this LegalEntityCapability.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allowed(self):
        """Gets the allowed of this LegalEntityCapability.

        Indicates whether the capability is allowed. Adyen sets this to **true** if the verification is successful.

        :return: The allowed of this LegalEntityCapability.
        :rtype: bool
        """
        return self._allowed

    @allowed.setter
    def allowed(self, allowed):
        """Sets the allowed of this LegalEntityCapability.

        Indicates whether the capability is allowed. Adyen sets this to **true** if the verification is successful.

        :param allowed: The allowed of this LegalEntityCapability.
        :type allowed: bool
        """

        self._allowed = allowed

    @property
    def allowed_level(self):
        """Gets the allowed_level of this LegalEntityCapability.

        The capability level that is allowed for the legal entity.  Possible values: **notApplicable**, **low**, **medium**, **high**.

        :return: The allowed_level of this LegalEntityCapability.
        :rtype: str
        """
        return self._allowed_level

    @allowed_level.setter
    def allowed_level(self, allowed_level):
        """Sets the allowed_level of this LegalEntityCapability.

        The capability level that is allowed for the legal entity.  Possible values: **notApplicable**, **low**, **medium**, **high**.

        :param allowed_level: The allowed_level of this LegalEntityCapability.
        :type allowed_level: str
        """
        allowed_values = ["high", "low", "medium", "notApplicable"]  # noqa: E501
        if allowed_level not in allowed_values:
            raise ValueError(
                "Invalid value for `allowed_level` ({0}), must be one of {1}"
                .format(allowed_level, allowed_values)
            )

        self._allowed_level = allowed_level

    @property
    def allowed_settings(self):
        """Gets the allowed_settings of this LegalEntityCapability.

        The settings that are allowed for the legal entity.

        :return: The allowed_settings of this LegalEntityCapability.
        :rtype: CapabilitySettings
        """
        return self._allowed_settings

    @allowed_settings.setter
    def allowed_settings(self, allowed_settings):
        """Sets the allowed_settings of this LegalEntityCapability.

        The settings that are allowed for the legal entity.

        :param allowed_settings: The allowed_settings of this LegalEntityCapability.
        :type allowed_settings: CapabilitySettings
        """

        self._allowed_settings = allowed_settings

    @property
    def problems(self):
        """Gets the problems of this LegalEntityCapability.

        Contains verification errors and the actions that you can take to resolve them.

        :return: The problems of this LegalEntityCapability.
        :rtype: List[CapabilityProblem]
        """
        return self._problems

    @problems.setter
    def problems(self, problems):
        """Sets the problems of this LegalEntityCapability.

        Contains verification errors and the actions that you can take to resolve them.

        :param problems: The problems of this LegalEntityCapability.
        :type problems: List[CapabilityProblem]
        """

        self._problems = problems

    @property
    def requested(self):
        """Gets the requested of this LegalEntityCapability.

        Indicates whether the capability is requested. To check whether the legal entity is permitted to use the capability, refer to the `allowed` field.

        :return: The requested of this LegalEntityCapability.
        :rtype: bool
        """
        return self._requested

    @requested.setter
    def requested(self, requested):
        """Sets the requested of this LegalEntityCapability.

        Indicates whether the capability is requested. To check whether the legal entity is permitted to use the capability, refer to the `allowed` field.

        :param requested: The requested of this LegalEntityCapability.
        :type requested: bool
        """

        self._requested = requested

    @property
    def requested_level(self):
        """Gets the requested_level of this LegalEntityCapability.

        The requested level of the capability. Some capabilities, such as those used in [card issuing](https://docs.adyen.com/issuing/add-capabilities#capability-levels), have different levels. Levels increase the capability, but also require additional checks and increased monitoring.  Possible values: **notApplicable**, **low**, **medium**, **high**.

        :return: The requested_level of this LegalEntityCapability.
        :rtype: str
        """
        return self._requested_level

    @requested_level.setter
    def requested_level(self, requested_level):
        """Sets the requested_level of this LegalEntityCapability.

        The requested level of the capability. Some capabilities, such as those used in [card issuing](https://docs.adyen.com/issuing/add-capabilities#capability-levels), have different levels. Levels increase the capability, but also require additional checks and increased monitoring.  Possible values: **notApplicable**, **low**, **medium**, **high**.

        :param requested_level: The requested_level of this LegalEntityCapability.
        :type requested_level: str
        """
        allowed_values = ["high", "low", "medium", "notApplicable"]  # noqa: E501
        if requested_level not in allowed_values:
            raise ValueError(
                "Invalid value for `requested_level` ({0}), must be one of {1}"
                .format(requested_level, allowed_values)
            )

        self._requested_level = requested_level

    @property
    def requested_settings(self):
        """Gets the requested_settings of this LegalEntityCapability.

        The settings that are requested for the legal entity.

        :return: The requested_settings of this LegalEntityCapability.
        :rtype: CapabilitySettings
        """
        return self._requested_settings

    @requested_settings.setter
    def requested_settings(self, requested_settings):
        """Sets the requested_settings of this LegalEntityCapability.

        The settings that are requested for the legal entity.

        :param requested_settings: The requested_settings of this LegalEntityCapability.
        :type requested_settings: CapabilitySettings
        """

        self._requested_settings = requested_settings

    @property
    def verification_status(self):
        """Gets the verification_status of this LegalEntityCapability.

        The status of the verification checks for the capability.  Possible values:  * **pending**: Adyen is running the verification.  * **invalid**: The verification failed. Check if the `errors` array contains more information.  * **valid**: The verification has been successfully completed.  * **rejected**: Adyen has verified the information, but found reasons to not allow the capability. 

        :return: The verification_status of this LegalEntityCapability.
        :rtype: str
        """
        return self._verification_status

    @verification_status.setter
    def verification_status(self, verification_status):
        """Sets the verification_status of this LegalEntityCapability.

        The status of the verification checks for the capability.  Possible values:  * **pending**: Adyen is running the verification.  * **invalid**: The verification failed. Check if the `errors` array contains more information.  * **valid**: The verification has been successfully completed.  * **rejected**: Adyen has verified the information, but found reasons to not allow the capability. 

        :param verification_status: The verification_status of this LegalEntityCapability.
        :type verification_status: str
        """

        self._verification_status = verification_status
