# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AcceptTermsOfServiceRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, accepted_by: str=None, ip_address: str=None):
        """AcceptTermsOfServiceRequest - a model defined in OpenAPI

        :param accepted_by: The accepted_by of this AcceptTermsOfServiceRequest.
        :param ip_address: The ip_address of this AcceptTermsOfServiceRequest.
        """
        self.openapi_types = {
            'accepted_by': str,
            'ip_address': str
        }

        self.attribute_map = {
            'accepted_by': 'acceptedBy',
            'ip_address': 'ipAddress'
        }

        self._accepted_by = accepted_by
        self._ip_address = ip_address

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AcceptTermsOfServiceRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AcceptTermsOfServiceRequest of this AcceptTermsOfServiceRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def accepted_by(self):
        """Gets the accepted_by of this AcceptTermsOfServiceRequest.

        The legal entity ID of the user accepting the Terms of Service.  For organizations, this must be the individual legal entity ID of an authorized signatory for the organization.  For sole proprietorships, this must be the individual legal entity ID of the owner.

        :return: The accepted_by of this AcceptTermsOfServiceRequest.
        :rtype: str
        """
        return self._accepted_by

    @accepted_by.setter
    def accepted_by(self, accepted_by):
        """Sets the accepted_by of this AcceptTermsOfServiceRequest.

        The legal entity ID of the user accepting the Terms of Service.  For organizations, this must be the individual legal entity ID of an authorized signatory for the organization.  For sole proprietorships, this must be the individual legal entity ID of the owner.

        :param accepted_by: The accepted_by of this AcceptTermsOfServiceRequest.
        :type accepted_by: str
        """
        if accepted_by is None:
            raise ValueError("Invalid value for `accepted_by`, must not be `None`")

        self._accepted_by = accepted_by

    @property
    def ip_address(self):
        """Gets the ip_address of this AcceptTermsOfServiceRequest.

        The IP address of the user accepting the Terms of Service.

        :return: The ip_address of this AcceptTermsOfServiceRequest.
        :rtype: str
        """
        return self._ip_address

    @ip_address.setter
    def ip_address(self, ip_address):
        """Sets the ip_address of this AcceptTermsOfServiceRequest.

        The IP address of the user accepting the Terms of Service.

        :param ip_address: The ip_address of this AcceptTermsOfServiceRequest.
        :type ip_address: str
        """

        self._ip_address = ip_address
