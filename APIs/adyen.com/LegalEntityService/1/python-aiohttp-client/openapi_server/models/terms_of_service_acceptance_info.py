# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TermsOfServiceAcceptanceInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, accepted_by: str=None, accepted_for: str=None, created_at: datetime=None, id: str=None, type: str=None):
        """TermsOfServiceAcceptanceInfo - a model defined in OpenAPI

        :param accepted_by: The accepted_by of this TermsOfServiceAcceptanceInfo.
        :param accepted_for: The accepted_for of this TermsOfServiceAcceptanceInfo.
        :param created_at: The created_at of this TermsOfServiceAcceptanceInfo.
        :param id: The id of this TermsOfServiceAcceptanceInfo.
        :param type: The type of this TermsOfServiceAcceptanceInfo.
        """
        self.openapi_types = {
            'accepted_by': str,
            'accepted_for': str,
            'created_at': datetime,
            'id': str,
            'type': str
        }

        self.attribute_map = {
            'accepted_by': 'acceptedBy',
            'accepted_for': 'acceptedFor',
            'created_at': 'createdAt',
            'id': 'id',
            'type': 'type'
        }

        self._accepted_by = accepted_by
        self._accepted_for = accepted_for
        self._created_at = created_at
        self._id = id
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TermsOfServiceAcceptanceInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TermsOfServiceAcceptanceInfo of this TermsOfServiceAcceptanceInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def accepted_by(self):
        """Gets the accepted_by of this TermsOfServiceAcceptanceInfo.

        The unique identifier of the user that accepted the Terms of Service.

        :return: The accepted_by of this TermsOfServiceAcceptanceInfo.
        :rtype: str
        """
        return self._accepted_by

    @accepted_by.setter
    def accepted_by(self, accepted_by):
        """Sets the accepted_by of this TermsOfServiceAcceptanceInfo.

        The unique identifier of the user that accepted the Terms of Service.

        :param accepted_by: The accepted_by of this TermsOfServiceAcceptanceInfo.
        :type accepted_by: str
        """

        self._accepted_by = accepted_by

    @property
    def accepted_for(self):
        """Gets the accepted_for of this TermsOfServiceAcceptanceInfo.

        The unique identifier of the legal entity for which the Terms of Service are accepted.

        :return: The accepted_for of this TermsOfServiceAcceptanceInfo.
        :rtype: str
        """
        return self._accepted_for

    @accepted_for.setter
    def accepted_for(self, accepted_for):
        """Sets the accepted_for of this TermsOfServiceAcceptanceInfo.

        The unique identifier of the legal entity for which the Terms of Service are accepted.

        :param accepted_for: The accepted_for of this TermsOfServiceAcceptanceInfo.
        :type accepted_for: str
        """

        self._accepted_for = accepted_for

    @property
    def created_at(self):
        """Gets the created_at of this TermsOfServiceAcceptanceInfo.

        The date when the Terms of Service were accepted.

        :return: The created_at of this TermsOfServiceAcceptanceInfo.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this TermsOfServiceAcceptanceInfo.

        The date when the Terms of Service were accepted.

        :param created_at: The created_at of this TermsOfServiceAcceptanceInfo.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def id(self):
        """Gets the id of this TermsOfServiceAcceptanceInfo.

        An Adyen-generated reference for the accepted Terms of Service.

        :return: The id of this TermsOfServiceAcceptanceInfo.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TermsOfServiceAcceptanceInfo.

        An Adyen-generated reference for the accepted Terms of Service.

        :param id: The id of this TermsOfServiceAcceptanceInfo.
        :type id: str
        """

        self._id = id

    @property
    def type(self):
        """Gets the type of this TermsOfServiceAcceptanceInfo.

        The type of Terms of Service.  Possible values: *  **adyenForPlatformsManage** *  **adyenIssuing** *  **adyenForPlatformsAdvanced** *  **adyenCapital** *  **adyenAccount** *  **adyenCard** *  **adyenFranchisee** *  **adyenPccr**  

        :return: The type of this TermsOfServiceAcceptanceInfo.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this TermsOfServiceAcceptanceInfo.

        The type of Terms of Service.  Possible values: *  **adyenForPlatformsManage** *  **adyenIssuing** *  **adyenForPlatformsAdvanced** *  **adyenCapital** *  **adyenAccount** *  **adyenCard** *  **adyenFranchisee** *  **adyenPccr**  

        :param type: The type of this TermsOfServiceAcceptanceInfo.
        :type type: str
        """
        allowed_values = ["adyenAccount", "adyenCapital", "adyenCard", "adyenForPlatformsAdvanced", "adyenForPlatformsManage", "adyenFranchisee", "adyenIssuing", "adyenPccr"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
