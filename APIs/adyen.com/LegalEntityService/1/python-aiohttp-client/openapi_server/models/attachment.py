# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Attachment(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, content: str=None, content_type: str=None, filename: str=None, page_type: str=None):
        """Attachment - a model defined in OpenAPI

        :param content: The content of this Attachment.
        :param content_type: The content_type of this Attachment.
        :param filename: The filename of this Attachment.
        :param page_type: The page_type of this Attachment.
        """
        self.openapi_types = {
            'content': str,
            'content_type': str,
            'filename': str,
            'page_type': str
        }

        self.attribute_map = {
            'content': 'content',
            'content_type': 'contentType',
            'filename': 'filename',
            'page_type': 'pageType'
        }

        self._content = content
        self._content_type = content_type
        self._filename = filename
        self._page_type = page_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Attachment':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Attachment of this Attachment.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def content(self):
        """Gets the content of this Attachment.

        The document in Base64-encoded string format.

        :return: The content of this Attachment.
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this Attachment.

        The document in Base64-encoded string format.

        :param content: The content of this Attachment.
        :type content: str
        """
        if content is None:
            raise ValueError("Invalid value for `content`, must not be `None`")

        self._content = content

    @property
    def content_type(self):
        """Gets the content_type of this Attachment.

        The file format.   Possible values: **application/pdf**, **image/jpg**, **image/jpeg**, **image/png**. 

        :return: The content_type of this Attachment.
        :rtype: str
        """
        return self._content_type

    @content_type.setter
    def content_type(self, content_type):
        """Sets the content_type of this Attachment.

        The file format.   Possible values: **application/pdf**, **image/jpg**, **image/jpeg**, **image/png**. 

        :param content_type: The content_type of this Attachment.
        :type content_type: str
        """

        self._content_type = content_type

    @property
    def filename(self):
        """Gets the filename of this Attachment.

        The name of the file including the file extension.

        :return: The filename of this Attachment.
        :rtype: str
        """
        return self._filename

    @filename.setter
    def filename(self, filename):
        """Sets the filename of this Attachment.

        The name of the file including the file extension.

        :param filename: The filename of this Attachment.
        :type filename: str
        """

        self._filename = filename

    @property
    def page_type(self):
        """Gets the page_type of this Attachment.

        Specifies which side of the ID card is uploaded.  * When `type` is **driversLicense** or **identityCard**, set this to **front** or **back**.  * When omitted, we infer the page number based on the order of attachments.

        :return: The page_type of this Attachment.
        :rtype: str
        """
        return self._page_type

    @page_type.setter
    def page_type(self, page_type):
        """Sets the page_type of this Attachment.

        Specifies which side of the ID card is uploaded.  * When `type` is **driversLicense** or **identityCard**, set this to **front** or **back**.  * When omitted, we infer the page number based on the order of attachments.

        :param page_type: The page_type of this Attachment.
        :type page_type: str
        """

        self._page_type = page_type
