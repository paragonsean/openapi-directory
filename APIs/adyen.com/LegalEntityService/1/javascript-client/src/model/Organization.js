/**
 * Legal Entity Management API
 * The Legal Entity Management API enables you to manage legal entities that contain information required for verification.  ## Authentication Your Adyen contact will provide your API credential and an API key. To connect to the API, add an `X-API-Key` header with the API key as the value. For example:  ``` curl -H \"X-API-Key: YOUR_API_KEY\" \\ -H \"Content-Type: application/json\" \\ ... ``` Alternatively, you can use the username and password of your API credential to connect to the API using basic authentication. For example:  ``` curl -U \"ws_123456@Scope.Company_YOUR_COMPANY_ACCOUNT\":\"YourWsPassword\" \\ -H \"Content-Type: application/json\" \\ ... ``` ## Versioning The Legal Entity Management API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://kyc-test.adyen.com/lem/v1/legalEntities ``` >If you are using hosted onboarding and just beginning your integration, use v3 for your API requests. Otherwise, use v2.  ## Going live When going live, your Adyen contact will provide your API credential for the live environment. You can then use the API key or the username and password to send requests to `https://kyc-live.adyen.com/lem/v1`.  
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Address from './Address';
import PhoneNumber from './PhoneNumber';
import StockData from './StockData';
import WebData from './WebData';

/**
 * The Organization model module.
 * @module model/Organization
 * @version 1
 */
class Organization {
    /**
     * Constructs a new <code>Organization</code>.
     * @alias module:model/Organization
     * @param legalName {String} The organization's legal name.
     * @param registeredAddress {module:model/Address} The address of the organization registered at their registrar (such as the Chamber of Commerce).
     */
    constructor(legalName, registeredAddress) { 
        
        Organization.initialize(this, legalName, registeredAddress);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, legalName, registeredAddress) { 
        obj['legalName'] = legalName;
        obj['registeredAddress'] = registeredAddress;
    }

    /**
     * Constructs a <code>Organization</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Organization} obj Optional instance to populate.
     * @return {module:model/Organization} The populated <code>Organization</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Organization();

            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('doingBusinessAs')) {
                obj['doingBusinessAs'] = ApiClient.convertToType(data['doingBusinessAs'], 'String');
            }
            if (data.hasOwnProperty('email')) {
                obj['email'] = ApiClient.convertToType(data['email'], 'String');
            }
            if (data.hasOwnProperty('legalName')) {
                obj['legalName'] = ApiClient.convertToType(data['legalName'], 'String');
            }
            if (data.hasOwnProperty('phone')) {
                obj['phone'] = PhoneNumber.constructFromObject(data['phone']);
            }
            if (data.hasOwnProperty('principalPlaceOfBusiness')) {
                obj['principalPlaceOfBusiness'] = Address.constructFromObject(data['principalPlaceOfBusiness']);
            }
            if (data.hasOwnProperty('registeredAddress')) {
                obj['registeredAddress'] = Address.constructFromObject(data['registeredAddress']);
            }
            if (data.hasOwnProperty('registrationNumber')) {
                obj['registrationNumber'] = ApiClient.convertToType(data['registrationNumber'], 'String');
            }
            if (data.hasOwnProperty('stockData')) {
                obj['stockData'] = StockData.constructFromObject(data['stockData']);
            }
            if (data.hasOwnProperty('taxExempt')) {
                obj['taxExempt'] = ApiClient.convertToType(data['taxExempt'], 'Boolean');
            }
            if (data.hasOwnProperty('taxId')) {
                obj['taxId'] = ApiClient.convertToType(data['taxId'], 'String');
            }
            if (data.hasOwnProperty('taxIdAbsenceReason')) {
                obj['taxIdAbsenceReason'] = ApiClient.convertToType(data['taxIdAbsenceReason'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('webData')) {
                obj['webData'] = WebData.constructFromObject(data['webData']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Organization</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Organization</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Organization.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['doingBusinessAs'] && !(typeof data['doingBusinessAs'] === 'string' || data['doingBusinessAs'] instanceof String)) {
            throw new Error("Expected the field `doingBusinessAs` to be a primitive type in the JSON string but got " + data['doingBusinessAs']);
        }
        // ensure the json data is a string
        if (data['email'] && !(typeof data['email'] === 'string' || data['email'] instanceof String)) {
            throw new Error("Expected the field `email` to be a primitive type in the JSON string but got " + data['email']);
        }
        // ensure the json data is a string
        if (data['legalName'] && !(typeof data['legalName'] === 'string' || data['legalName'] instanceof String)) {
            throw new Error("Expected the field `legalName` to be a primitive type in the JSON string but got " + data['legalName']);
        }
        // validate the optional field `phone`
        if (data['phone']) { // data not null
          PhoneNumber.validateJSON(data['phone']);
        }
        // validate the optional field `principalPlaceOfBusiness`
        if (data['principalPlaceOfBusiness']) { // data not null
          Address.validateJSON(data['principalPlaceOfBusiness']);
        }
        // validate the optional field `registeredAddress`
        if (data['registeredAddress']) { // data not null
          Address.validateJSON(data['registeredAddress']);
        }
        // ensure the json data is a string
        if (data['registrationNumber'] && !(typeof data['registrationNumber'] === 'string' || data['registrationNumber'] instanceof String)) {
            throw new Error("Expected the field `registrationNumber` to be a primitive type in the JSON string but got " + data['registrationNumber']);
        }
        // validate the optional field `stockData`
        if (data['stockData']) { // data not null
          StockData.validateJSON(data['stockData']);
        }
        // ensure the json data is a string
        if (data['taxId'] && !(typeof data['taxId'] === 'string' || data['taxId'] instanceof String)) {
            throw new Error("Expected the field `taxId` to be a primitive type in the JSON string but got " + data['taxId']);
        }
        // ensure the json data is a string
        if (data['taxIdAbsenceReason'] && !(typeof data['taxIdAbsenceReason'] === 'string' || data['taxIdAbsenceReason'] instanceof String)) {
            throw new Error("Expected the field `taxIdAbsenceReason` to be a primitive type in the JSON string but got " + data['taxIdAbsenceReason']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // validate the optional field `webData`
        if (data['webData']) { // data not null
          WebData.validateJSON(data['webData']);
        }

        return true;
    }


}

Organization.RequiredProperties = ["legalName", "registeredAddress"];

/**
 * Your description for the organization.
 * @member {String} description
 */
Organization.prototype['description'] = undefined;

/**
 * The organization's trading name, if different from the registered legal name.
 * @member {String} doingBusinessAs
 */
Organization.prototype['doingBusinessAs'] = undefined;

/**
 * The email address of the legal entity.
 * @member {String} email
 */
Organization.prototype['email'] = undefined;

/**
 * The organization's legal name.
 * @member {String} legalName
 */
Organization.prototype['legalName'] = undefined;

/**
 * The phone number of the legal entity.
 * @member {module:model/PhoneNumber} phone
 */
Organization.prototype['phone'] = undefined;

/**
 * The address where the organization operates from. Provide this if the principal place of business is different from the `registeredAddress`.
 * @member {module:model/Address} principalPlaceOfBusiness
 */
Organization.prototype['principalPlaceOfBusiness'] = undefined;

/**
 * The address of the organization registered at their registrar (such as the Chamber of Commerce).
 * @member {module:model/Address} registeredAddress
 */
Organization.prototype['registeredAddress'] = undefined;

/**
 * The organization's registration number.
 * @member {String} registrationNumber
 */
Organization.prototype['registrationNumber'] = undefined;

/**
 * Information about the organization's publicly traded stock. Provide this object only if `type` is **listedPublicCompany**.
 * @member {module:model/StockData} stockData
 */
Organization.prototype['stockData'] = undefined;

/**
 * Indicates whether the legal entity is exempt from tax. When **true**, the `taxIdAbsenceReason` must be provided.  
 * @member {Boolean} taxExempt
 */
Organization.prototype['taxExempt'] = undefined;

/**
 * The organization's tax identifier.
 * @member {String} taxId
 */
Organization.prototype['taxId'] = undefined;

/**
 * The reason the organization has not provided a tax identifier.  Possible values: **industryExemption**, **belowTaxThreshold**.
 * @member {module:model/Organization.TaxIdAbsenceReasonEnum} taxIdAbsenceReason
 */
Organization.prototype['taxIdAbsenceReason'] = undefined;

/**
 * Type of organization.  Possible values: **associationIncorporated**, **governmentalOrganization**, **listedPublicCompany**, **nonProfit**, **partnershipIncorporated**, **privateCompany**.
 * @member {module:model/Organization.TypeEnum} type
 */
Organization.prototype['type'] = undefined;

/**
 * The website and app URL of the legal entity.
 * @member {module:model/WebData} webData
 */
Organization.prototype['webData'] = undefined;





/**
 * Allowed values for the <code>taxIdAbsenceReason</code> property.
 * @enum {String}
 * @readonly
 */
Organization['TaxIdAbsenceReasonEnum'] = {

    /**
     * value: "industryExemption"
     * @const
     */
    "industryExemption": "industryExemption",

    /**
     * value: "belowTaxThreshold"
     * @const
     */
    "belowTaxThreshold": "belowTaxThreshold"
};


/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
Organization['TypeEnum'] = {

    /**
     * value: "associationIncorporated"
     * @const
     */
    "associationIncorporated": "associationIncorporated",

    /**
     * value: "governmentalOrganization"
     * @const
     */
    "governmentalOrganization": "governmentalOrganization",

    /**
     * value: "listedPublicCompany"
     * @const
     */
    "listedPublicCompany": "listedPublicCompany",

    /**
     * value: "nonProfit"
     * @const
     */
    "nonProfit": "nonProfit",

    /**
     * value: "partnershipIncorporated"
     * @const
     */
    "partnershipIncorporated": "partnershipIncorporated",

    /**
     * value: "privateCompany"
     * @const
     */
    "privateCompany": "privateCompany"
};



export default Organization;

