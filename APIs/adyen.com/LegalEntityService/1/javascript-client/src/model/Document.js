/**
 * Legal Entity Management API
 * The Legal Entity Management API enables you to manage legal entities that contain information required for verification.  ## Authentication Your Adyen contact will provide your API credential and an API key. To connect to the API, add an `X-API-Key` header with the API key as the value. For example:  ``` curl -H \"X-API-Key: YOUR_API_KEY\" \\ -H \"Content-Type: application/json\" \\ ... ``` Alternatively, you can use the username and password of your API credential to connect to the API using basic authentication. For example:  ``` curl -U \"ws_123456@Scope.Company_YOUR_COMPANY_ACCOUNT\":\"YourWsPassword\" \\ -H \"Content-Type: application/json\" \\ ... ``` ## Versioning The Legal Entity Management API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://kyc-test.adyen.com/lem/v1/legalEntities ``` >If you are using hosted onboarding and just beginning your integration, use v3 for your API requests. Otherwise, use v2.  ## Going live When going live, your Adyen contact will provide your API credential for the live environment. You can then use the API key or the username and password to send requests to `https://kyc-live.adyen.com/lem/v1`.  
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Attachment from './Attachment';
import OwnerEntity from './OwnerEntity';

/**
 * The Document model module.
 * @module model/Document
 * @version 1
 */
class Document {
    /**
     * Constructs a new <code>Document</code>.
     * @alias module:model/Document
     * @param description {String} Your description for the document.
     * @param type {module:model/Document.TypeEnum} Type of document, used when providing an ID number or uploading a document. The possible values depend on the legal entity type.  * For **organization**, the `type` values can be **proofOfAddress**, **registrationDocument**, **taxDocument**, **proofOfOwnership**, or **proofOfIndustry**.  * For **individual**, the `type` values can be **identityCard**, **driversLicense**, **proofOfNationalIdNumber**, **proofOfResidency**, or **proofOfIndustry**.  * Use **bankStatement** to upload documents for a [transfer instrument](https://docs.adyen.com/api-explorer/#/legalentity/latest/post/transferInstruments__resParam_id).
     */
    constructor(description, type) { 
        
        Document.initialize(this, description, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, description, type) { 
        obj['description'] = description;
        obj['type'] = type;
    }

    /**
     * Constructs a <code>Document</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Document} obj Optional instance to populate.
     * @return {module:model/Document} The populated <code>Document</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Document();

            if (data.hasOwnProperty('attachment')) {
                obj['attachment'] = Attachment.constructFromObject(data['attachment']);
            }
            if (data.hasOwnProperty('attachments')) {
                obj['attachments'] = ApiClient.convertToType(data['attachments'], [Attachment]);
            }
            if (data.hasOwnProperty('creationDate')) {
                obj['creationDate'] = ApiClient.convertToType(data['creationDate'], 'Date');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('expiryDate')) {
                obj['expiryDate'] = ApiClient.convertToType(data['expiryDate'], 'String');
            }
            if (data.hasOwnProperty('fileName')) {
                obj['fileName'] = ApiClient.convertToType(data['fileName'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('issuerCountry')) {
                obj['issuerCountry'] = ApiClient.convertToType(data['issuerCountry'], 'String');
            }
            if (data.hasOwnProperty('issuerState')) {
                obj['issuerState'] = ApiClient.convertToType(data['issuerState'], 'String');
            }
            if (data.hasOwnProperty('modificationDate')) {
                obj['modificationDate'] = ApiClient.convertToType(data['modificationDate'], 'Date');
            }
            if (data.hasOwnProperty('number')) {
                obj['number'] = ApiClient.convertToType(data['number'], 'String');
            }
            if (data.hasOwnProperty('owner')) {
                obj['owner'] = OwnerEntity.constructFromObject(data['owner']);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Document</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Document</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Document.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `attachment`
        if (data['attachment']) { // data not null
          Attachment.validateJSON(data['attachment']);
        }
        if (data['attachments']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['attachments'])) {
                throw new Error("Expected the field `attachments` to be an array in the JSON data but got " + data['attachments']);
            }
            // validate the optional field `attachments` (array)
            for (const item of data['attachments']) {
                Attachment.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['expiryDate'] && !(typeof data['expiryDate'] === 'string' || data['expiryDate'] instanceof String)) {
            throw new Error("Expected the field `expiryDate` to be a primitive type in the JSON string but got " + data['expiryDate']);
        }
        // ensure the json data is a string
        if (data['fileName'] && !(typeof data['fileName'] === 'string' || data['fileName'] instanceof String)) {
            throw new Error("Expected the field `fileName` to be a primitive type in the JSON string but got " + data['fileName']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['issuerCountry'] && !(typeof data['issuerCountry'] === 'string' || data['issuerCountry'] instanceof String)) {
            throw new Error("Expected the field `issuerCountry` to be a primitive type in the JSON string but got " + data['issuerCountry']);
        }
        // ensure the json data is a string
        if (data['issuerState'] && !(typeof data['issuerState'] === 'string' || data['issuerState'] instanceof String)) {
            throw new Error("Expected the field `issuerState` to be a primitive type in the JSON string but got " + data['issuerState']);
        }
        // ensure the json data is a string
        if (data['number'] && !(typeof data['number'] === 'string' || data['number'] instanceof String)) {
            throw new Error("Expected the field `number` to be a primitive type in the JSON string but got " + data['number']);
        }
        // validate the optional field `owner`
        if (data['owner']) { // data not null
          OwnerEntity.validateJSON(data['owner']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

Document.RequiredProperties = ["description", "type"];

/**
 * Object that contains the document.
 * @member {module:model/Attachment} attachment
 */
Document.prototype['attachment'] = undefined;

/**
 * Array that contains the document. The array supports multiple attachments for uploading different sides or pages of a document.
 * @member {Array.<module:model/Attachment>} attachments
 */
Document.prototype['attachments'] = undefined;

/**
 * The creation date of the document.
 * @member {Date} creationDate
 */
Document.prototype['creationDate'] = undefined;

/**
 * Your description for the document.
 * @member {String} description
 */
Document.prototype['description'] = undefined;

/**
 * The expiry date of the document, in YYYY-MM-DD format.
 * @member {String} expiryDate
 */
Document.prototype['expiryDate'] = undefined;

/**
 * The filename of the document.
 * @member {String} fileName
 */
Document.prototype['fileName'] = undefined;

/**
 * The unique identifier of the document.
 * @member {String} id
 */
Document.prototype['id'] = undefined;

/**
 * The two-character [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code where the document was issued. For example, **US**.
 * @member {String} issuerCountry
 */
Document.prototype['issuerCountry'] = undefined;

/**
 * The state or province where the document was issued (AU only).
 * @member {String} issuerState
 */
Document.prototype['issuerState'] = undefined;

/**
 * The modification date of the document.
 * @member {Date} modificationDate
 */
Document.prototype['modificationDate'] = undefined;

/**
 * The number in the document.
 * @member {String} number
 */
Document.prototype['number'] = undefined;

/**
 * Contains information about the resource that owns the document.
 * @member {module:model/OwnerEntity} owner
 */
Document.prototype['owner'] = undefined;

/**
 * Type of document, used when providing an ID number or uploading a document. The possible values depend on the legal entity type.  * For **organization**, the `type` values can be **proofOfAddress**, **registrationDocument**, **taxDocument**, **proofOfOwnership**, or **proofOfIndustry**.  * For **individual**, the `type` values can be **identityCard**, **driversLicense**, **proofOfNationalIdNumber**, **proofOfResidency**, or **proofOfIndustry**.  * Use **bankStatement** to upload documents for a [transfer instrument](https://docs.adyen.com/api-explorer/#/legalentity/latest/post/transferInstruments__resParam_id).
 * @member {module:model/Document.TypeEnum} type
 */
Document.prototype['type'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
Document['TypeEnum'] = {

    /**
     * value: "bankStatement"
     * @const
     */
    "bankStatement": "bankStatement",

    /**
     * value: "driversLicense"
     * @const
     */
    "driversLicense": "driversLicense",

    /**
     * value: "identityCard"
     * @const
     */
    "identityCard": "identityCard",

    /**
     * value: "nationalIdNumber"
     * @const
     */
    "nationalIdNumber": "nationalIdNumber",

    /**
     * value: "passport"
     * @const
     */
    "passport": "passport",

    /**
     * value: "proofOfAddress"
     * @const
     */
    "proofOfAddress": "proofOfAddress",

    /**
     * value: "proofOfNationalIdNumber"
     * @const
     */
    "proofOfNationalIdNumber": "proofOfNationalIdNumber",

    /**
     * value: "proofOfResidency"
     * @const
     */
    "proofOfResidency": "proofOfResidency",

    /**
     * value: "registrationDocument"
     * @const
     */
    "registrationDocument": "registrationDocument",

    /**
     * value: "taxDocument"
     * @const
     */
    "taxDocument": "taxDocument",

    /**
     * value: "proofOfIndustry"
     * @const
     */
    "proofOfIndustry": "proofOfIndustry"
};



export default Document;

