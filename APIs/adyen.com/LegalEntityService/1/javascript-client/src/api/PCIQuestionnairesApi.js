/**
 * Legal Entity Management API
 * The Legal Entity Management API enables you to manage legal entities that contain information required for verification.  ## Authentication Your Adyen contact will provide your API credential and an API key. To connect to the API, add an `X-API-Key` header with the API key as the value. For example:  ``` curl -H \"X-API-Key: YOUR_API_KEY\" \\ -H \"Content-Type: application/json\" \\ ... ``` Alternatively, you can use the username and password of your API credential to connect to the API using basic authentication. For example:  ``` curl -U \"ws_123456@Scope.Company_YOUR_COMPANY_ACCOUNT\":\"YourWsPassword\" \\ -H \"Content-Type: application/json\" \\ ... ``` ## Versioning The Legal Entity Management API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://kyc-test.adyen.com/lem/v1/legalEntities ``` >If you are using hosted onboarding and just beginning your integration, use v3 for your API requests. Otherwise, use v2.  ## Going live When going live, your Adyen contact will provide your API credential for the live environment. You can then use the API key or the username and password to send requests to `https://kyc-live.adyen.com/lem/v1`.  
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import GeneratePciDescriptionRequest from '../model/GeneratePciDescriptionRequest';
import GeneratePciDescriptionResponse from '../model/GeneratePciDescriptionResponse';
import GetPciQuestionnaireInfosResponse from '../model/GetPciQuestionnaireInfosResponse';
import GetPciQuestionnaireResponse from '../model/GetPciQuestionnaireResponse';
import PciSigningRequest from '../model/PciSigningRequest';
import PciSigningResponse from '../model/PciSigningResponse';
import ServiceError from '../model/ServiceError';

/**
* PCIQuestionnaires service.
* @module api/PCIQuestionnairesApi
* @version 1
*/
export default class PCIQuestionnairesApi {

    /**
    * Constructs a new PCIQuestionnairesApi. 
    * @alias module:api/PCIQuestionnairesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getLegalEntitiesIdPciQuestionnaires operation.
     * @callback module:api/PCIQuestionnairesApi~getLegalEntitiesIdPciQuestionnairesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetPciQuestionnaireInfosResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get PCI questionnaire details
     * Get a list of signed PCI questionnaires.
     * @param {String} id The unique identifier of the legal entity to get PCI questionnaire information.
     * @param {module:api/PCIQuestionnairesApi~getLegalEntitiesIdPciQuestionnairesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetPciQuestionnaireInfosResponse}
     */
    getLegalEntitiesIdPciQuestionnaires(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getLegalEntitiesIdPciQuestionnaires");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BasicAuth', 'ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetPciQuestionnaireInfosResponse;
      return this.apiClient.callApi(
        '/legalEntities/{id}/pciQuestionnaires', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getLegalEntitiesIdPciQuestionnairesPciid operation.
     * @callback module:api/PCIQuestionnairesApi~getLegalEntitiesIdPciQuestionnairesPciidCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetPciQuestionnaireResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get PCI questionnaire
     * Returns the signed PCI questionnaire.
     * @param {String} id The legal entity ID of the individual who signed the PCI questionnaire.
     * @param {String} pciid The unique identifier of the signed PCI questionnaire.
     * @param {module:api/PCIQuestionnairesApi~getLegalEntitiesIdPciQuestionnairesPciidCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetPciQuestionnaireResponse}
     */
    getLegalEntitiesIdPciQuestionnairesPciid(id, pciid, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getLegalEntitiesIdPciQuestionnairesPciid");
      }
      // verify the required parameter 'pciid' is set
      if (pciid === undefined || pciid === null) {
        throw new Error("Missing the required parameter 'pciid' when calling getLegalEntitiesIdPciQuestionnairesPciid");
      }

      let pathParams = {
        'id': id,
        'pciid': pciid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BasicAuth', 'ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetPciQuestionnaireResponse;
      return this.apiClient.callApi(
        '/legalEntities/{id}/pciQuestionnaires/{pciid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postLegalEntitiesIdPciQuestionnairesGeneratePciTemplates operation.
     * @callback module:api/PCIQuestionnairesApi~postLegalEntitiesIdPciQuestionnairesGeneratePciTemplatesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GeneratePciDescriptionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Generate PCI questionnaire
     * Generates the required PCI questionnaires based on the user's [salesChannel](https://docs.adyen.com/api-explorer/#/legalentity/latest/post/businessLines__reqParam_salesChannels).
     * @param {String} id The unique identifier of the legal entity to get PCI questionnaire information.
     * @param {Object} opts Optional parameters
     * @param {module:model/GeneratePciDescriptionRequest} [generatePciDescriptionRequest] 
     * @param {module:api/PCIQuestionnairesApi~postLegalEntitiesIdPciQuestionnairesGeneratePciTemplatesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GeneratePciDescriptionResponse}
     */
    postLegalEntitiesIdPciQuestionnairesGeneratePciTemplates(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['generatePciDescriptionRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling postLegalEntitiesIdPciQuestionnairesGeneratePciTemplates");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BasicAuth', 'ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GeneratePciDescriptionResponse;
      return this.apiClient.callApi(
        '/legalEntities/{id}/pciQuestionnaires/generatePciTemplates', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postLegalEntitiesIdPciQuestionnairesSignPciTemplates operation.
     * @callback module:api/PCIQuestionnairesApi~postLegalEntitiesIdPciQuestionnairesSignPciTemplatesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PciSigningResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sign PCI questionnaire
     * Signs the required PCI questionnaire.
     * @param {String} id The legal entity ID of the user that has a contractual relationship with your platform.
     * @param {Object} opts Optional parameters
     * @param {module:model/PciSigningRequest} [pciSigningRequest] 
     * @param {module:api/PCIQuestionnairesApi~postLegalEntitiesIdPciQuestionnairesSignPciTemplatesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PciSigningResponse}
     */
    postLegalEntitiesIdPciQuestionnairesSignPciTemplates(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['pciSigningRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling postLegalEntitiesIdPciQuestionnairesSignPciTemplates");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BasicAuth', 'ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PciSigningResponse;
      return this.apiClient.callApi(
        '/legalEntities/{id}/pciQuestionnaires/signPciTemplates', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
