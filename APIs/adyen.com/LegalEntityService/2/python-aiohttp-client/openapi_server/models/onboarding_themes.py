# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.onboarding_theme import OnboardingTheme
from openapi_server import util


class OnboardingThemes(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, next: str=None, previous: str=None, themes: List[OnboardingTheme]=None):
        """OnboardingThemes - a model defined in OpenAPI

        :param next: The next of this OnboardingThemes.
        :param previous: The previous of this OnboardingThemes.
        :param themes: The themes of this OnboardingThemes.
        """
        self.openapi_types = {
            'next': str,
            'previous': str,
            'themes': List[OnboardingTheme]
        }

        self.attribute_map = {
            'next': 'next',
            'previous': 'previous',
            'themes': 'themes'
        }

        self._next = next
        self._previous = previous
        self._themes = themes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OnboardingThemes':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OnboardingThemes of this OnboardingThemes.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def next(self):
        """Gets the next of this OnboardingThemes.

        The next page. Only present if there is a next page.

        :return: The next of this OnboardingThemes.
        :rtype: str
        """
        return self._next

    @next.setter
    def next(self, next):
        """Sets the next of this OnboardingThemes.

        The next page. Only present if there is a next page.

        :param next: The next of this OnboardingThemes.
        :type next: str
        """

        self._next = next

    @property
    def previous(self):
        """Gets the previous of this OnboardingThemes.

        The previous page. Only present if there is a previous page.

        :return: The previous of this OnboardingThemes.
        :rtype: str
        """
        return self._previous

    @previous.setter
    def previous(self, previous):
        """Sets the previous of this OnboardingThemes.

        The previous page. Only present if there is a previous page.

        :param previous: The previous of this OnboardingThemes.
        :type previous: str
        """

        self._previous = previous

    @property
    def themes(self):
        """Gets the themes of this OnboardingThemes.

        List of onboarding themes.

        :return: The themes of this OnboardingThemes.
        :rtype: List[OnboardingTheme]
        """
        return self._themes

    @themes.setter
    def themes(self, themes):
        """Sets the themes of this OnboardingThemes.

        List of onboarding themes.

        :param themes: The themes of this OnboardingThemes.
        :type themes: List[OnboardingTheme]
        """
        if themes is None:
            raise ValueError("Invalid value for `themes`, must not be `None`")

        self._themes = themes
