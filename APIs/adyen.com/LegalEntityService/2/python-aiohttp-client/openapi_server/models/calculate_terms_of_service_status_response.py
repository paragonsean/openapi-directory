# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CalculateTermsOfServiceStatusResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, terms_of_service_types: List[str]=None):
        """CalculateTermsOfServiceStatusResponse - a model defined in OpenAPI

        :param terms_of_service_types: The terms_of_service_types of this CalculateTermsOfServiceStatusResponse.
        """
        self.openapi_types = {
            'terms_of_service_types': List[str]
        }

        self.attribute_map = {
            'terms_of_service_types': 'termsOfServiceTypes'
        }

        self._terms_of_service_types = terms_of_service_types

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CalculateTermsOfServiceStatusResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CalculateTermsOfServiceStatusResponse of this CalculateTermsOfServiceStatusResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def terms_of_service_types(self):
        """Gets the terms_of_service_types of this CalculateTermsOfServiceStatusResponse.

        The type of Terms of Service that the legal entity needs to accept. If empty, no Terms of Service needs to be accepted.

        :return: The terms_of_service_types of this CalculateTermsOfServiceStatusResponse.
        :rtype: List[str]
        """
        return self._terms_of_service_types

    @terms_of_service_types.setter
    def terms_of_service_types(self, terms_of_service_types):
        """Sets the terms_of_service_types of this CalculateTermsOfServiceStatusResponse.

        The type of Terms of Service that the legal entity needs to accept. If empty, no Terms of Service needs to be accepted.

        :param terms_of_service_types: The terms_of_service_types of this CalculateTermsOfServiceStatusResponse.
        :type terms_of_service_types: List[str]
        """
        allowed_values = ["adyenAccount", "adyenCapital", "adyenCard", "adyenForPlatformsAdvanced", "adyenForPlatformsManage", "adyenFranchisee", "adyenIssuing", "adyenPccr"]  # noqa: E501
        if not set(terms_of_service_types).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `terms_of_service_types` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(terms_of_service_types) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._terms_of_service_types = terms_of_service_types
