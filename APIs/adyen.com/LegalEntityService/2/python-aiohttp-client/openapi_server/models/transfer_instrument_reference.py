# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TransferInstrumentReference(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_identifier: str=None, id: str=None, real_last_four: str=None, trusted_source: bool=None):
        """TransferInstrumentReference - a model defined in OpenAPI

        :param account_identifier: The account_identifier of this TransferInstrumentReference.
        :param id: The id of this TransferInstrumentReference.
        :param real_last_four: The real_last_four of this TransferInstrumentReference.
        :param trusted_source: The trusted_source of this TransferInstrumentReference.
        """
        self.openapi_types = {
            'account_identifier': str,
            'id': str,
            'real_last_four': str,
            'trusted_source': bool
        }

        self.attribute_map = {
            'account_identifier': 'accountIdentifier',
            'id': 'id',
            'real_last_four': 'realLastFour',
            'trusted_source': 'trustedSource'
        }

        self._account_identifier = account_identifier
        self._id = id
        self._real_last_four = real_last_four
        self._trusted_source = trusted_source

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TransferInstrumentReference':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TransferInstrumentReference of this TransferInstrumentReference.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_identifier(self):
        """Gets the account_identifier of this TransferInstrumentReference.

        The masked IBAN or bank account number.

        :return: The account_identifier of this TransferInstrumentReference.
        :rtype: str
        """
        return self._account_identifier

    @account_identifier.setter
    def account_identifier(self, account_identifier):
        """Sets the account_identifier of this TransferInstrumentReference.

        The masked IBAN or bank account number.

        :param account_identifier: The account_identifier of this TransferInstrumentReference.
        :type account_identifier: str
        """
        if account_identifier is None:
            raise ValueError("Invalid value for `account_identifier`, must not be `None`")

        self._account_identifier = account_identifier

    @property
    def id(self):
        """Gets the id of this TransferInstrumentReference.

        The unique identifier of the resource.

        :return: The id of this TransferInstrumentReference.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TransferInstrumentReference.

        The unique identifier of the resource.

        :param id: The id of this TransferInstrumentReference.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def real_last_four(self):
        """Gets the real_last_four of this TransferInstrumentReference.

        Four last digits of the bank account number. If the transfer instrument is created using [instant bank account verification](https://docs.adyen.com/release-notes/platforms-and-financial-products#releaseNote=2023-05-08-hosted-onboarding), and it is a virtual bank account, these digits may be different from the last four digits of the masked account number.

        :return: The real_last_four of this TransferInstrumentReference.
        :rtype: str
        """
        return self._real_last_four

    @real_last_four.setter
    def real_last_four(self, real_last_four):
        """Sets the real_last_four of this TransferInstrumentReference.

        Four last digits of the bank account number. If the transfer instrument is created using [instant bank account verification](https://docs.adyen.com/release-notes/platforms-and-financial-products#releaseNote=2023-05-08-hosted-onboarding), and it is a virtual bank account, these digits may be different from the last four digits of the masked account number.

        :param real_last_four: The real_last_four of this TransferInstrumentReference.
        :type real_last_four: str
        """

        self._real_last_four = real_last_four

    @property
    def trusted_source(self):
        """Gets the trusted_source of this TransferInstrumentReference.

        Identifies if the bank account was created through [instant bank verification](https://docs.adyen.com/release-notes/platforms-and-financial-products#releaseNote=2023-05-08-hosted-onboarding).

        :return: The trusted_source of this TransferInstrumentReference.
        :rtype: bool
        """
        return self._trusted_source

    @trusted_source.setter
    def trusted_source(self, trusted_source):
        """Sets the trusted_source of this TransferInstrumentReference.

        Identifies if the bank account was created through [instant bank verification](https://docs.adyen.com/release-notes/platforms-and-financial-products#releaseNote=2023-05-08-hosted-onboarding).

        :param trusted_source: The trusted_source of this TransferInstrumentReference.
        :type trusted_source: bool
        """

        self._trusted_source = trusted_source
