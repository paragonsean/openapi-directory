# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TaxReportingClassification(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, business_type: str=None, financial_institution_number: str=None, main_source_of_income: str=None, type: str=None):
        """TaxReportingClassification - a model defined in OpenAPI

        :param business_type: The business_type of this TaxReportingClassification.
        :param financial_institution_number: The financial_institution_number of this TaxReportingClassification.
        :param main_source_of_income: The main_source_of_income of this TaxReportingClassification.
        :param type: The type of this TaxReportingClassification.
        """
        self.openapi_types = {
            'business_type': str,
            'financial_institution_number': str,
            'main_source_of_income': str,
            'type': str
        }

        self.attribute_map = {
            'business_type': 'businessType',
            'financial_institution_number': 'financialInstitutionNumber',
            'main_source_of_income': 'mainSourceOfIncome',
            'type': 'type'
        }

        self._business_type = business_type
        self._financial_institution_number = financial_institution_number
        self._main_source_of_income = main_source_of_income
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TaxReportingClassification':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TaxReportingClassification of this TaxReportingClassification.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def business_type(self):
        """Gets the business_type of this TaxReportingClassification.

        The organization's business type.  Possible values: **other**, **listedPublicCompany**, **subsidiaryOfListedPublicCompany**, **governmentalOrganization**, **internationalOrganization**, **financialInstitution**.

        :return: The business_type of this TaxReportingClassification.
        :rtype: str
        """
        return self._business_type

    @business_type.setter
    def business_type(self, business_type):
        """Sets the business_type of this TaxReportingClassification.

        The organization's business type.  Possible values: **other**, **listedPublicCompany**, **subsidiaryOfListedPublicCompany**, **governmentalOrganization**, **internationalOrganization**, **financialInstitution**.

        :param business_type: The business_type of this TaxReportingClassification.
        :type business_type: str
        """
        allowed_values = ["other", "listedPublicCompany", "subsidiaryOfListedPublicCompany", "governmentalOrganization", "internationalOrganization", "financialInstitution."]  # noqa: E501
        if business_type not in allowed_values:
            raise ValueError(
                "Invalid value for `business_type` ({0}), must be one of {1}"
                .format(business_type, allowed_values)
            )

        self._business_type = business_type

    @property
    def financial_institution_number(self):
        """Gets the financial_institution_number of this TaxReportingClassification.

        The Global Intermediary Identification Number (GIIN) required for FATCA. Only required if the organization is a US financial institution and the `businessType` is **financialInstitution**.

        :return: The financial_institution_number of this TaxReportingClassification.
        :rtype: str
        """
        return self._financial_institution_number

    @financial_institution_number.setter
    def financial_institution_number(self, financial_institution_number):
        """Sets the financial_institution_number of this TaxReportingClassification.

        The Global Intermediary Identification Number (GIIN) required for FATCA. Only required if the organization is a US financial institution and the `businessType` is **financialInstitution**.

        :param financial_institution_number: The financial_institution_number of this TaxReportingClassification.
        :type financial_institution_number: str
        """

        self._financial_institution_number = financial_institution_number

    @property
    def main_source_of_income(self):
        """Gets the main_source_of_income of this TaxReportingClassification.

        The organization's main source of income.  Possible values: **businessOperation**, **realEstateSales**, **investmentInterestOrRoyalty**, **propertyRental**, **other**.

        :return: The main_source_of_income of this TaxReportingClassification.
        :rtype: str
        """
        return self._main_source_of_income

    @main_source_of_income.setter
    def main_source_of_income(self, main_source_of_income):
        """Sets the main_source_of_income of this TaxReportingClassification.

        The organization's main source of income.  Possible values: **businessOperation**, **realEstateSales**, **investmentInterestOrRoyalty**, **propertyRental**, **other**.

        :param main_source_of_income: The main_source_of_income of this TaxReportingClassification.
        :type main_source_of_income: str
        """
        allowed_values = ["businessOperation", "realEstateSales", "investmentInterestOrRoyalty", "propertyRental", "other"]  # noqa: E501
        if main_source_of_income not in allowed_values:
            raise ValueError(
                "Invalid value for `main_source_of_income` ({0}), must be one of {1}"
                .format(main_source_of_income, allowed_values)
            )

        self._main_source_of_income = main_source_of_income

    @property
    def type(self):
        """Gets the type of this TaxReportingClassification.

        The tax reporting classification type.  Possible values: **nonFinancialNonReportable**, **financialNonReportable**, **nonFinancialActive**, **nonFinancialPassive**.

        :return: The type of this TaxReportingClassification.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this TaxReportingClassification.

        The tax reporting classification type.  Possible values: **nonFinancialNonReportable**, **financialNonReportable**, **nonFinancialActive**, **nonFinancialPassive**.

        :param type: The type of this TaxReportingClassification.
        :type type: str
        """
        allowed_values = ["nonFinancialNonReportable", "financialNonReportable", "nonFinancialActive", "nonFinancialPassive"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
