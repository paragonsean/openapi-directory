# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.attachment import Attachment
from openapi_server.models.owner_entity import OwnerEntity
from openapi_server import util


class Document(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attachment: Attachment=None, attachments: List[Attachment]=None, creation_date: datetime=None, description: str=None, expiry_date: str=None, file_name: str=None, id: str=None, issuer_country: str=None, issuer_state: str=None, modification_date: datetime=None, number: str=None, owner: OwnerEntity=None, type: str=None):
        """Document - a model defined in OpenAPI

        :param attachment: The attachment of this Document.
        :param attachments: The attachments of this Document.
        :param creation_date: The creation_date of this Document.
        :param description: The description of this Document.
        :param expiry_date: The expiry_date of this Document.
        :param file_name: The file_name of this Document.
        :param id: The id of this Document.
        :param issuer_country: The issuer_country of this Document.
        :param issuer_state: The issuer_state of this Document.
        :param modification_date: The modification_date of this Document.
        :param number: The number of this Document.
        :param owner: The owner of this Document.
        :param type: The type of this Document.
        """
        self.openapi_types = {
            'attachment': Attachment,
            'attachments': List[Attachment],
            'creation_date': datetime,
            'description': str,
            'expiry_date': str,
            'file_name': str,
            'id': str,
            'issuer_country': str,
            'issuer_state': str,
            'modification_date': datetime,
            'number': str,
            'owner': OwnerEntity,
            'type': str
        }

        self.attribute_map = {
            'attachment': 'attachment',
            'attachments': 'attachments',
            'creation_date': 'creationDate',
            'description': 'description',
            'expiry_date': 'expiryDate',
            'file_name': 'fileName',
            'id': 'id',
            'issuer_country': 'issuerCountry',
            'issuer_state': 'issuerState',
            'modification_date': 'modificationDate',
            'number': 'number',
            'owner': 'owner',
            'type': 'type'
        }

        self._attachment = attachment
        self._attachments = attachments
        self._creation_date = creation_date
        self._description = description
        self._expiry_date = expiry_date
        self._file_name = file_name
        self._id = id
        self._issuer_country = issuer_country
        self._issuer_state = issuer_state
        self._modification_date = modification_date
        self._number = number
        self._owner = owner
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Document':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Document of this Document.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attachment(self):
        """Gets the attachment of this Document.

        Object that contains the document.

        :return: The attachment of this Document.
        :rtype: Attachment
        """
        return self._attachment

    @attachment.setter
    def attachment(self, attachment):
        """Sets the attachment of this Document.

        Object that contains the document.

        :param attachment: The attachment of this Document.
        :type attachment: Attachment
        """

        self._attachment = attachment

    @property
    def attachments(self):
        """Gets the attachments of this Document.

        Array that contains the document. The array supports multiple attachments for uploading different sides or pages of a document.

        :return: The attachments of this Document.
        :rtype: List[Attachment]
        """
        return self._attachments

    @attachments.setter
    def attachments(self, attachments):
        """Sets the attachments of this Document.

        Array that contains the document. The array supports multiple attachments for uploading different sides or pages of a document.

        :param attachments: The attachments of this Document.
        :type attachments: List[Attachment]
        """

        self._attachments = attachments

    @property
    def creation_date(self):
        """Gets the creation_date of this Document.

        The creation date of the document.

        :return: The creation_date of this Document.
        :rtype: datetime
        """
        return self._creation_date

    @creation_date.setter
    def creation_date(self, creation_date):
        """Sets the creation_date of this Document.

        The creation date of the document.

        :param creation_date: The creation_date of this Document.
        :type creation_date: datetime
        """

        self._creation_date = creation_date

    @property
    def description(self):
        """Gets the description of this Document.

        Your description for the document.

        :return: The description of this Document.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Document.

        Your description for the document.

        :param description: The description of this Document.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description

    @property
    def expiry_date(self):
        """Gets the expiry_date of this Document.

        The expiry date of the document, in YYYY-MM-DD format.

        :return: The expiry_date of this Document.
        :rtype: str
        """
        return self._expiry_date

    @expiry_date.setter
    def expiry_date(self, expiry_date):
        """Sets the expiry_date of this Document.

        The expiry date of the document, in YYYY-MM-DD format.

        :param expiry_date: The expiry_date of this Document.
        :type expiry_date: str
        """

        self._expiry_date = expiry_date

    @property
    def file_name(self):
        """Gets the file_name of this Document.

        The filename of the document.

        :return: The file_name of this Document.
        :rtype: str
        """
        return self._file_name

    @file_name.setter
    def file_name(self, file_name):
        """Sets the file_name of this Document.

        The filename of the document.

        :param file_name: The file_name of this Document.
        :type file_name: str
        """

        self._file_name = file_name

    @property
    def id(self):
        """Gets the id of this Document.

        The unique identifier of the document.

        :return: The id of this Document.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Document.

        The unique identifier of the document.

        :param id: The id of this Document.
        :type id: str
        """

        self._id = id

    @property
    def issuer_country(self):
        """Gets the issuer_country of this Document.

        The two-character [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code where the document was issued. For example, **US**.

        :return: The issuer_country of this Document.
        :rtype: str
        """
        return self._issuer_country

    @issuer_country.setter
    def issuer_country(self, issuer_country):
        """Sets the issuer_country of this Document.

        The two-character [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code where the document was issued. For example, **US**.

        :param issuer_country: The issuer_country of this Document.
        :type issuer_country: str
        """

        self._issuer_country = issuer_country

    @property
    def issuer_state(self):
        """Gets the issuer_state of this Document.

        The state or province where the document was issued (AU only).

        :return: The issuer_state of this Document.
        :rtype: str
        """
        return self._issuer_state

    @issuer_state.setter
    def issuer_state(self, issuer_state):
        """Sets the issuer_state of this Document.

        The state or province where the document was issued (AU only).

        :param issuer_state: The issuer_state of this Document.
        :type issuer_state: str
        """

        self._issuer_state = issuer_state

    @property
    def modification_date(self):
        """Gets the modification_date of this Document.

        The modification date of the document.

        :return: The modification_date of this Document.
        :rtype: datetime
        """
        return self._modification_date

    @modification_date.setter
    def modification_date(self, modification_date):
        """Sets the modification_date of this Document.

        The modification date of the document.

        :param modification_date: The modification_date of this Document.
        :type modification_date: datetime
        """

        self._modification_date = modification_date

    @property
    def number(self):
        """Gets the number of this Document.

        The number in the document.

        :return: The number of this Document.
        :rtype: str
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this Document.

        The number in the document.

        :param number: The number of this Document.
        :type number: str
        """

        self._number = number

    @property
    def owner(self):
        """Gets the owner of this Document.

        Contains information about the resource that owns the document.

        :return: The owner of this Document.
        :rtype: OwnerEntity
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this Document.

        Contains information about the resource that owns the document.

        :param owner: The owner of this Document.
        :type owner: OwnerEntity
        """

        self._owner = owner

    @property
    def type(self):
        """Gets the type of this Document.

        Type of document, used when providing an ID number or uploading a document. The possible values depend on the legal entity type.  * For **organization**, the `type` values can be **proofOfAddress**, **registrationDocument**, **vatDocument**, **proofOfOrganizationTaxInfo**, **proofOfOwnership**, **proofOfIndustry**, **proofOfSignatory**, or **proofOfFundingOrWealthSource**.  * For **individual**, the `type` values can be **identityCard**, **driversLicense**, **passport**, **liveSelfie**, **proofOfResidency**, **proofOfIndustry**, **proofOfNationalIdNumber**, **proofOfIndividualTaxId**, or **proofOfFundingOrWealthSource**.  * For **soleProprietorship**, the `type` values can be **constitutionalDocument**, **proofOfAddress**, or **proofOfIndustry**.  * Use **bankStatement** to upload documents for a [transfer instrument](https://docs.adyen.com/api-explorer/#/legalentity/latest/post/transferInstruments__resParam_id).

        :return: The type of this Document.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Document.

        Type of document, used when providing an ID number or uploading a document. The possible values depend on the legal entity type.  * For **organization**, the `type` values can be **proofOfAddress**, **registrationDocument**, **vatDocument**, **proofOfOrganizationTaxInfo**, **proofOfOwnership**, **proofOfIndustry**, **proofOfSignatory**, or **proofOfFundingOrWealthSource**.  * For **individual**, the `type` values can be **identityCard**, **driversLicense**, **passport**, **liveSelfie**, **proofOfResidency**, **proofOfIndustry**, **proofOfNationalIdNumber**, **proofOfIndividualTaxId**, or **proofOfFundingOrWealthSource**.  * For **soleProprietorship**, the `type` values can be **constitutionalDocument**, **proofOfAddress**, or **proofOfIndustry**.  * Use **bankStatement** to upload documents for a [transfer instrument](https://docs.adyen.com/api-explorer/#/legalentity/latest/post/transferInstruments__resParam_id).

        :param type: The type of this Document.
        :type type: str
        """
        allowed_values = ["bankStatement", "driversLicense", "identityCard", "nationalIdNumber", "passport", "proofOfAddress", "proofOfNationalIdNumber", "proofOfResidency", "registrationDocument", "vatDocument", "proofOfOrganizationTaxInfo", "proofOfIndividualTaxId", "proofOfOwnership", "proofOfSignatory", "liveSelfie", "proofOfIndustry", "constitutionalDocument", "proofOfFundingOrWealthSource"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
