# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class LegalEntityAssociation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, associator_id: str=None, entity_type: str=None, job_title: str=None, legal_entity_id: str=None, name: str=None, settlor_exemption_reason: List[str]=None, type: str=None):
        """LegalEntityAssociation - a model defined in OpenAPI

        :param associator_id: The associator_id of this LegalEntityAssociation.
        :param entity_type: The entity_type of this LegalEntityAssociation.
        :param job_title: The job_title of this LegalEntityAssociation.
        :param legal_entity_id: The legal_entity_id of this LegalEntityAssociation.
        :param name: The name of this LegalEntityAssociation.
        :param settlor_exemption_reason: The settlor_exemption_reason of this LegalEntityAssociation.
        :param type: The type of this LegalEntityAssociation.
        """
        self.openapi_types = {
            'associator_id': str,
            'entity_type': str,
            'job_title': str,
            'legal_entity_id': str,
            'name': str,
            'settlor_exemption_reason': List[str],
            'type': str
        }

        self.attribute_map = {
            'associator_id': 'associatorId',
            'entity_type': 'entityType',
            'job_title': 'jobTitle',
            'legal_entity_id': 'legalEntityId',
            'name': 'name',
            'settlor_exemption_reason': 'settlorExemptionReason',
            'type': 'type'
        }

        self._associator_id = associator_id
        self._entity_type = entity_type
        self._job_title = job_title
        self._legal_entity_id = legal_entity_id
        self._name = name
        self._settlor_exemption_reason = settlor_exemption_reason
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LegalEntityAssociation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LegalEntityAssociation of this LegalEntityAssociation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def associator_id(self):
        """Gets the associator_id of this LegalEntityAssociation.

        The unique identifier of another legal entity with which the `legalEntityId` is associated. When the `legalEntityId` is associated to legal entities other than the current one, the response returns all the associations.

        :return: The associator_id of this LegalEntityAssociation.
        :rtype: str
        """
        return self._associator_id

    @associator_id.setter
    def associator_id(self, associator_id):
        """Sets the associator_id of this LegalEntityAssociation.

        The unique identifier of another legal entity with which the `legalEntityId` is associated. When the `legalEntityId` is associated to legal entities other than the current one, the response returns all the associations.

        :param associator_id: The associator_id of this LegalEntityAssociation.
        :type associator_id: str
        """

        self._associator_id = associator_id

    @property
    def entity_type(self):
        """Gets the entity_type of this LegalEntityAssociation.

        The legal entity type of associated legal entity.  For example, **organization**, **soleProprietorship** or **individual**.

        :return: The entity_type of this LegalEntityAssociation.
        :rtype: str
        """
        return self._entity_type

    @entity_type.setter
    def entity_type(self, entity_type):
        """Sets the entity_type of this LegalEntityAssociation.

        The legal entity type of associated legal entity.  For example, **organization**, **soleProprietorship** or **individual**.

        :param entity_type: The entity_type of this LegalEntityAssociation.
        :type entity_type: str
        """

        self._entity_type = entity_type

    @property
    def job_title(self):
        """Gets the job_title of this LegalEntityAssociation.

        The individual's job title if the `type` is **uboThroughControl** or **signatory**.

        :return: The job_title of this LegalEntityAssociation.
        :rtype: str
        """
        return self._job_title

    @job_title.setter
    def job_title(self, job_title):
        """Sets the job_title of this LegalEntityAssociation.

        The individual's job title if the `type` is **uboThroughControl** or **signatory**.

        :param job_title: The job_title of this LegalEntityAssociation.
        :type job_title: str
        """

        self._job_title = job_title

    @property
    def legal_entity_id(self):
        """Gets the legal_entity_id of this LegalEntityAssociation.

        The unique identifier of the associated [legal entity](https://docs.adyen.com/api-explorer/legalentity/latest/post/legalEntities#responses-200-id).

        :return: The legal_entity_id of this LegalEntityAssociation.
        :rtype: str
        """
        return self._legal_entity_id

    @legal_entity_id.setter
    def legal_entity_id(self, legal_entity_id):
        """Sets the legal_entity_id of this LegalEntityAssociation.

        The unique identifier of the associated [legal entity](https://docs.adyen.com/api-explorer/legalentity/latest/post/legalEntities#responses-200-id).

        :param legal_entity_id: The legal_entity_id of this LegalEntityAssociation.
        :type legal_entity_id: str
        """
        if legal_entity_id is None:
            raise ValueError("Invalid value for `legal_entity_id`, must not be `None`")

        self._legal_entity_id = legal_entity_id

    @property
    def name(self):
        """Gets the name of this LegalEntityAssociation.

        The name of the associated [legal entity](https://docs.adyen.com/api-explorer/legalentity/latest/post/legalEntities#responses-200-id).  - For **individual**, `name.firstName` and `name.lastName`. - For **organization**, `legalName`. - For **soleProprietorship**, `name`.

        :return: The name of this LegalEntityAssociation.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this LegalEntityAssociation.

        The name of the associated [legal entity](https://docs.adyen.com/api-explorer/legalentity/latest/post/legalEntities#responses-200-id).  - For **individual**, `name.firstName` and `name.lastName`. - For **organization**, `legalName`. - For **soleProprietorship**, `name`.

        :param name: The name of this LegalEntityAssociation.
        :type name: str
        """

        self._name = name

    @property
    def settlor_exemption_reason(self):
        """Gets the settlor_exemption_reason of this LegalEntityAssociation.

        Defines the Kyc Exemption Reason for a Settlor associated with a trust.  For example, **professionalServiceProvider**, **deceased**, or **contributionBelowThreshold**.

        :return: The settlor_exemption_reason of this LegalEntityAssociation.
        :rtype: List[str]
        """
        return self._settlor_exemption_reason

    @settlor_exemption_reason.setter
    def settlor_exemption_reason(self, settlor_exemption_reason):
        """Sets the settlor_exemption_reason of this LegalEntityAssociation.

        Defines the Kyc Exemption Reason for a Settlor associated with a trust.  For example, **professionalServiceProvider**, **deceased**, or **contributionBelowThreshold**.

        :param settlor_exemption_reason: The settlor_exemption_reason of this LegalEntityAssociation.
        :type settlor_exemption_reason: List[str]
        """

        self._settlor_exemption_reason = settlor_exemption_reason

    @property
    def type(self):
        """Gets the type of this LegalEntityAssociation.

        Defines the relationship of the legal entity to the current legal entity.  Possible values for organizations: **uboThroughOwnership**, **uboThroughControl**, **director**, **signatory**, or **ultimateParentCompany**.  Possible values for sole proprietorships: **soleProprietorship**.  Possible value for trusts: **trust**  Possible values for trust members: **definedBeneficiary**, **protector**, **secondaryTrustee**, **settlor**, **uboThroughControl**, or **uboThroughOwnership**.

        :return: The type of this LegalEntityAssociation.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this LegalEntityAssociation.

        Defines the relationship of the legal entity to the current legal entity.  Possible values for organizations: **uboThroughOwnership**, **uboThroughControl**, **director**, **signatory**, or **ultimateParentCompany**.  Possible values for sole proprietorships: **soleProprietorship**.  Possible value for trusts: **trust**  Possible values for trust members: **definedBeneficiary**, **protector**, **secondaryTrustee**, **settlor**, **uboThroughControl**, or **uboThroughOwnership**.

        :param type: The type of this LegalEntityAssociation.
        :type type: str
        """
        allowed_values = ["definedBeneficiary", "director", "pciSignatory", "protector", "secondaryTrustee", "settlor", "signatory", "soleProprietorship", "trust", "uboThroughControl", "uboThroughOwnership", "ultimateParentCompany", "undefinedBeneficiary"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
