/**
 * Legal Entity Management API
 * The Legal Entity Management API enables you to manage legal entities that contain information required for verification.  ## Authentication Your Adyen contact will provide your API credential and an API key. To connect to the API, add an `X-API-Key` header with the API key as the value. For example:  ``` curl -H \"X-API-Key: YOUR_API_KEY\" \\ -H \"Content-Type: application/json\" \\ ... ``` Alternatively, you can use the username and password of your API credential to connect to the API using basic authentication. For example:  ``` curl -U \"ws_123456@Scope.Company_YOUR_COMPANY_ACCOUNT\":\"YourWsPassword\" \\ -H \"Content-Type: application/json\" \\ ... ``` ## Versioning The Legal Entity Management API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://kyc-test.adyen.com/lem/v2/legalEntities ``` >If you are using hosted onboarding and just beginning your integration, use v3 for your API requests. Otherwise, use v2.  ## Going live When going live, your Adyen contact will provide your API credential for the live environment. You can then use the API key or the username and password to send requests to `https://kyc-live.adyen.com/lem/v2`.  
 *
 * The version of the OpenAPI document: 2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAILegalEntityAssociation.h
 *
 * 
 */

#ifndef OAILegalEntityAssociation_H
#define OAILegalEntityAssociation_H

#include <QJsonObject>

#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAILegalEntityAssociation : public OAIObject {
public:
    OAILegalEntityAssociation();
    OAILegalEntityAssociation(QString json);
    ~OAILegalEntityAssociation() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAssociatorId() const;
    void setAssociatorId(const QString &associator_id);
    bool is_associator_id_Set() const;
    bool is_associator_id_Valid() const;

    QString getEntityType() const;
    void setEntityType(const QString &entity_type);
    bool is_entity_type_Set() const;
    bool is_entity_type_Valid() const;

    QString getJobTitle() const;
    void setJobTitle(const QString &job_title);
    bool is_job_title_Set() const;
    bool is_job_title_Valid() const;

    QString getLegalEntityId() const;
    void setLegalEntityId(const QString &legal_entity_id);
    bool is_legal_entity_id_Set() const;
    bool is_legal_entity_id_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QList<QString> getSettlorExemptionReason() const;
    void setSettlorExemptionReason(const QList<QString> &settlor_exemption_reason);
    bool is_settlor_exemption_reason_Set() const;
    bool is_settlor_exemption_reason_Valid() const;

    QString getType() const;
    void setType(const QString &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_associator_id;
    bool m_associator_id_isSet;
    bool m_associator_id_isValid;

    QString m_entity_type;
    bool m_entity_type_isSet;
    bool m_entity_type_isValid;

    QString m_job_title;
    bool m_job_title_isSet;
    bool m_job_title_isValid;

    QString m_legal_entity_id;
    bool m_legal_entity_id_isSet;
    bool m_legal_entity_id_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QList<QString> m_settlor_exemption_reason;
    bool m_settlor_exemption_reason_isSet;
    bool m_settlor_exemption_reason_isValid;

    QString m_type;
    bool m_type_isSet;
    bool m_type_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAILegalEntityAssociation)

#endif // OAILegalEntityAssociation_H
