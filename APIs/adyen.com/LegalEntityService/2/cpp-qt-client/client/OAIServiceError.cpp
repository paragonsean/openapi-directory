/**
 * Legal Entity Management API
 * The Legal Entity Management API enables you to manage legal entities that contain information required for verification.  ## Authentication Your Adyen contact will provide your API credential and an API key. To connect to the API, add an `X-API-Key` header with the API key as the value. For example:  ``` curl -H \"X-API-Key: YOUR_API_KEY\" \\ -H \"Content-Type: application/json\" \\ ... ``` Alternatively, you can use the username and password of your API credential to connect to the API using basic authentication. For example:  ``` curl -U \"ws_123456@Scope.Company_YOUR_COMPANY_ACCOUNT\":\"YourWsPassword\" \\ -H \"Content-Type: application/json\" \\ ... ``` ## Versioning The Legal Entity Management API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://kyc-test.adyen.com/lem/v2/legalEntities ``` >If you are using hosted onboarding and just beginning your integration, use v3 for your API requests. Otherwise, use v2.  ## Going live When going live, your Adyen contact will provide your API credential for the live environment. You can then use the API key or the username and password to send requests to `https://kyc-live.adyen.com/lem/v2`.  
 *
 * The version of the OpenAPI document: 2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIServiceError.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIServiceError::OAIServiceError(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIServiceError::OAIServiceError() {
    this->initializeModel();
}

OAIServiceError::~OAIServiceError() {}

void OAIServiceError::initializeModel() {

    m_error_code_isSet = false;
    m_error_code_isValid = false;

    m_error_type_isSet = false;
    m_error_type_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_psp_reference_isSet = false;
    m_psp_reference_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIServiceError::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIServiceError::fromJsonObject(QJsonObject json) {

    m_error_code_isValid = ::OpenAPI::fromJsonValue(m_error_code, json[QString("errorCode")]);
    m_error_code_isSet = !json[QString("errorCode")].isNull() && m_error_code_isValid;

    m_error_type_isValid = ::OpenAPI::fromJsonValue(m_error_type, json[QString("errorType")]);
    m_error_type_isSet = !json[QString("errorType")].isNull() && m_error_type_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_psp_reference_isValid = ::OpenAPI::fromJsonValue(m_psp_reference, json[QString("pspReference")]);
    m_psp_reference_isSet = !json[QString("pspReference")].isNull() && m_psp_reference_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAIServiceError::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIServiceError::asJsonObject() const {
    QJsonObject obj;
    if (m_error_code_isSet) {
        obj.insert(QString("errorCode"), ::OpenAPI::toJsonValue(m_error_code));
    }
    if (m_error_type_isSet) {
        obj.insert(QString("errorType"), ::OpenAPI::toJsonValue(m_error_type));
    }
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_psp_reference_isSet) {
        obj.insert(QString("pspReference"), ::OpenAPI::toJsonValue(m_psp_reference));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QString OAIServiceError::getErrorCode() const {
    return m_error_code;
}
void OAIServiceError::setErrorCode(const QString &error_code) {
    m_error_code = error_code;
    m_error_code_isSet = true;
}

bool OAIServiceError::is_error_code_Set() const{
    return m_error_code_isSet;
}

bool OAIServiceError::is_error_code_Valid() const{
    return m_error_code_isValid;
}

QString OAIServiceError::getErrorType() const {
    return m_error_type;
}
void OAIServiceError::setErrorType(const QString &error_type) {
    m_error_type = error_type;
    m_error_type_isSet = true;
}

bool OAIServiceError::is_error_type_Set() const{
    return m_error_type_isSet;
}

bool OAIServiceError::is_error_type_Valid() const{
    return m_error_type_isValid;
}

QString OAIServiceError::getMessage() const {
    return m_message;
}
void OAIServiceError::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIServiceError::is_message_Set() const{
    return m_message_isSet;
}

bool OAIServiceError::is_message_Valid() const{
    return m_message_isValid;
}

QString OAIServiceError::getPspReference() const {
    return m_psp_reference;
}
void OAIServiceError::setPspReference(const QString &psp_reference) {
    m_psp_reference = psp_reference;
    m_psp_reference_isSet = true;
}

bool OAIServiceError::is_psp_reference_Set() const{
    return m_psp_reference_isSet;
}

bool OAIServiceError::is_psp_reference_Valid() const{
    return m_psp_reference_isValid;
}

qint32 OAIServiceError::getStatus() const {
    return m_status;
}
void OAIServiceError::setStatus(const qint32 &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIServiceError::is_status_Set() const{
    return m_status_isSet;
}

bool OAIServiceError::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIServiceError::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_error_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_psp_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIServiceError::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
