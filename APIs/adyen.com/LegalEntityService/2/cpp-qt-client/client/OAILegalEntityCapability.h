/**
 * Legal Entity Management API
 * The Legal Entity Management API enables you to manage legal entities that contain information required for verification.  ## Authentication Your Adyen contact will provide your API credential and an API key. To connect to the API, add an `X-API-Key` header with the API key as the value. For example:  ``` curl -H \"X-API-Key: YOUR_API_KEY\" \\ -H \"Content-Type: application/json\" \\ ... ``` Alternatively, you can use the username and password of your API credential to connect to the API using basic authentication. For example:  ``` curl -U \"ws_123456@Scope.Company_YOUR_COMPANY_ACCOUNT\":\"YourWsPassword\" \\ -H \"Content-Type: application/json\" \\ ... ``` ## Versioning The Legal Entity Management API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://kyc-test.adyen.com/lem/v2/legalEntities ``` >If you are using hosted onboarding and just beginning your integration, use v3 for your API requests. Otherwise, use v2.  ## Going live When going live, your Adyen contact will provide your API credential for the live environment. You can then use the API key or the username and password to send requests to `https://kyc-live.adyen.com/lem/v2`.  
 *
 * The version of the OpenAPI document: 2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAILegalEntityCapability.h
 *
 * 
 */

#ifndef OAILegalEntityCapability_H
#define OAILegalEntityCapability_H

#include <QJsonObject>

#include "OAICapabilityProblem.h"
#include "OAICapabilitySettings.h"
#include "OAISupportingEntityCapability.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAICapabilitySettings;
class OAICapabilityProblem;
class OAISupportingEntityCapability;

class OAILegalEntityCapability : public OAIObject {
public:
    OAILegalEntityCapability();
    OAILegalEntityCapability(QString json);
    ~OAILegalEntityCapability() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool isAllowed() const;
    void setAllowed(const bool &allowed);
    bool is_allowed_Set() const;
    bool is_allowed_Valid() const;

    QString getAllowedLevel() const;
    void setAllowedLevel(const QString &allowed_level);
    bool is_allowed_level_Set() const;
    bool is_allowed_level_Valid() const;

    OAICapabilitySettings getAllowedSettings() const;
    void setAllowedSettings(const OAICapabilitySettings &allowed_settings);
    bool is_allowed_settings_Set() const;
    bool is_allowed_settings_Valid() const;

    QList<OAICapabilityProblem> getProblems() const;
    void setProblems(const QList<OAICapabilityProblem> &problems);
    bool is_problems_Set() const;
    bool is_problems_Valid() const;

    bool isRequested() const;
    void setRequested(const bool &requested);
    bool is_requested_Set() const;
    bool is_requested_Valid() const;

    QString getRequestedLevel() const;
    void setRequestedLevel(const QString &requested_level);
    bool is_requested_level_Set() const;
    bool is_requested_level_Valid() const;

    OAICapabilitySettings getRequestedSettings() const;
    void setRequestedSettings(const OAICapabilitySettings &requested_settings);
    bool is_requested_settings_Set() const;
    bool is_requested_settings_Valid() const;

    QList<OAISupportingEntityCapability> getTransferInstruments() const;
    void setTransferInstruments(const QList<OAISupportingEntityCapability> &transfer_instruments);
    bool is_transfer_instruments_Set() const;
    bool is_transfer_instruments_Valid() const;

    QString getVerificationStatus() const;
    void setVerificationStatus(const QString &verification_status);
    bool is_verification_status_Set() const;
    bool is_verification_status_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_allowed;
    bool m_allowed_isSet;
    bool m_allowed_isValid;

    QString m_allowed_level;
    bool m_allowed_level_isSet;
    bool m_allowed_level_isValid;

    OAICapabilitySettings m_allowed_settings;
    bool m_allowed_settings_isSet;
    bool m_allowed_settings_isValid;

    QList<OAICapabilityProblem> m_problems;
    bool m_problems_isSet;
    bool m_problems_isValid;

    bool m_requested;
    bool m_requested_isSet;
    bool m_requested_isValid;

    QString m_requested_level;
    bool m_requested_level_isSet;
    bool m_requested_level_isValid;

    OAICapabilitySettings m_requested_settings;
    bool m_requested_settings_isSet;
    bool m_requested_settings_isValid;

    QList<OAISupportingEntityCapability> m_transfer_instruments;
    bool m_transfer_instruments_isSet;
    bool m_transfer_instruments_isValid;

    QString m_verification_status;
    bool m_verification_status_isSet;
    bool m_verification_status_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAILegalEntityCapability)

#endif // OAILegalEntityCapability_H
