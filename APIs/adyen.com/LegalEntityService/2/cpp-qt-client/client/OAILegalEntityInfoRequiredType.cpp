/**
 * Legal Entity Management API
 * The Legal Entity Management API enables you to manage legal entities that contain information required for verification.  ## Authentication Your Adyen contact will provide your API credential and an API key. To connect to the API, add an `X-API-Key` header with the API key as the value. For example:  ``` curl -H \"X-API-Key: YOUR_API_KEY\" \\ -H \"Content-Type: application/json\" \\ ... ``` Alternatively, you can use the username and password of your API credential to connect to the API using basic authentication. For example:  ``` curl -U \"ws_123456@Scope.Company_YOUR_COMPANY_ACCOUNT\":\"YourWsPassword\" \\ -H \"Content-Type: application/json\" \\ ... ``` ## Versioning The Legal Entity Management API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://kyc-test.adyen.com/lem/v2/legalEntities ``` >If you are using hosted onboarding and just beginning your integration, use v3 for your API requests. Otherwise, use v2.  ## Going live When going live, your Adyen contact will provide your API credential for the live environment. You can then use the API key or the username and password to send requests to `https://kyc-live.adyen.com/lem/v2`.  
 *
 * The version of the OpenAPI document: 2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILegalEntityInfoRequiredType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILegalEntityInfoRequiredType::OAILegalEntityInfoRequiredType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILegalEntityInfoRequiredType::OAILegalEntityInfoRequiredType() {
    this->initializeModel();
}

OAILegalEntityInfoRequiredType::~OAILegalEntityInfoRequiredType() {}

void OAILegalEntityInfoRequiredType::initializeModel() {

    m_capabilities_isSet = false;
    m_capabilities_isValid = false;

    m_entity_associations_isSet = false;
    m_entity_associations_isValid = false;

    m_individual_isSet = false;
    m_individual_isValid = false;

    m_organization_isSet = false;
    m_organization_isValid = false;

    m_reference_isSet = false;
    m_reference_isValid = false;

    m_sole_proprietorship_isSet = false;
    m_sole_proprietorship_isValid = false;

    m_trust_isSet = false;
    m_trust_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_unincorporated_partnership_isSet = false;
    m_unincorporated_partnership_isValid = false;

    m_verification_plan_isSet = false;
    m_verification_plan_isValid = false;
}

void OAILegalEntityInfoRequiredType::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILegalEntityInfoRequiredType::fromJsonObject(QJsonObject json) {

    m_capabilities_isValid = ::OpenAPI::fromJsonValue(m_capabilities, json[QString("capabilities")]);
    m_capabilities_isSet = !json[QString("capabilities")].isNull() && m_capabilities_isValid;

    m_entity_associations_isValid = ::OpenAPI::fromJsonValue(m_entity_associations, json[QString("entityAssociations")]);
    m_entity_associations_isSet = !json[QString("entityAssociations")].isNull() && m_entity_associations_isValid;

    m_individual_isValid = ::OpenAPI::fromJsonValue(m_individual, json[QString("individual")]);
    m_individual_isSet = !json[QString("individual")].isNull() && m_individual_isValid;

    m_organization_isValid = ::OpenAPI::fromJsonValue(m_organization, json[QString("organization")]);
    m_organization_isSet = !json[QString("organization")].isNull() && m_organization_isValid;

    m_reference_isValid = ::OpenAPI::fromJsonValue(m_reference, json[QString("reference")]);
    m_reference_isSet = !json[QString("reference")].isNull() && m_reference_isValid;

    m_sole_proprietorship_isValid = ::OpenAPI::fromJsonValue(m_sole_proprietorship, json[QString("soleProprietorship")]);
    m_sole_proprietorship_isSet = !json[QString("soleProprietorship")].isNull() && m_sole_proprietorship_isValid;

    m_trust_isValid = ::OpenAPI::fromJsonValue(m_trust, json[QString("trust")]);
    m_trust_isSet = !json[QString("trust")].isNull() && m_trust_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_unincorporated_partnership_isValid = ::OpenAPI::fromJsonValue(m_unincorporated_partnership, json[QString("unincorporatedPartnership")]);
    m_unincorporated_partnership_isSet = !json[QString("unincorporatedPartnership")].isNull() && m_unincorporated_partnership_isValid;

    m_verification_plan_isValid = ::OpenAPI::fromJsonValue(m_verification_plan, json[QString("verificationPlan")]);
    m_verification_plan_isSet = !json[QString("verificationPlan")].isNull() && m_verification_plan_isValid;
}

QString OAILegalEntityInfoRequiredType::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILegalEntityInfoRequiredType::asJsonObject() const {
    QJsonObject obj;
    if (m_capabilities.size() > 0) {
        obj.insert(QString("capabilities"), ::OpenAPI::toJsonValue(m_capabilities));
    }
    if (m_entity_associations.size() > 0) {
        obj.insert(QString("entityAssociations"), ::OpenAPI::toJsonValue(m_entity_associations));
    }
    if (m_individual.isSet()) {
        obj.insert(QString("individual"), ::OpenAPI::toJsonValue(m_individual));
    }
    if (m_organization.isSet()) {
        obj.insert(QString("organization"), ::OpenAPI::toJsonValue(m_organization));
    }
    if (m_reference_isSet) {
        obj.insert(QString("reference"), ::OpenAPI::toJsonValue(m_reference));
    }
    if (m_sole_proprietorship.isSet()) {
        obj.insert(QString("soleProprietorship"), ::OpenAPI::toJsonValue(m_sole_proprietorship));
    }
    if (m_trust.isSet()) {
        obj.insert(QString("trust"), ::OpenAPI::toJsonValue(m_trust));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_unincorporated_partnership.isSet()) {
        obj.insert(QString("unincorporatedPartnership"), ::OpenAPI::toJsonValue(m_unincorporated_partnership));
    }
    if (m_verification_plan_isSet) {
        obj.insert(QString("verificationPlan"), ::OpenAPI::toJsonValue(m_verification_plan));
    }
    return obj;
}

QMap<QString, OAILegalEntityCapability> OAILegalEntityInfoRequiredType::getCapabilities() const {
    return m_capabilities;
}
void OAILegalEntityInfoRequiredType::setCapabilities(const QMap<QString, OAILegalEntityCapability> &capabilities) {
    m_capabilities = capabilities;
    m_capabilities_isSet = true;
}

bool OAILegalEntityInfoRequiredType::is_capabilities_Set() const{
    return m_capabilities_isSet;
}

bool OAILegalEntityInfoRequiredType::is_capabilities_Valid() const{
    return m_capabilities_isValid;
}

QList<OAILegalEntityAssociation> OAILegalEntityInfoRequiredType::getEntityAssociations() const {
    return m_entity_associations;
}
void OAILegalEntityInfoRequiredType::setEntityAssociations(const QList<OAILegalEntityAssociation> &entity_associations) {
    m_entity_associations = entity_associations;
    m_entity_associations_isSet = true;
}

bool OAILegalEntityInfoRequiredType::is_entity_associations_Set() const{
    return m_entity_associations_isSet;
}

bool OAILegalEntityInfoRequiredType::is_entity_associations_Valid() const{
    return m_entity_associations_isValid;
}

OAIIndividual OAILegalEntityInfoRequiredType::getIndividual() const {
    return m_individual;
}
void OAILegalEntityInfoRequiredType::setIndividual(const OAIIndividual &individual) {
    m_individual = individual;
    m_individual_isSet = true;
}

bool OAILegalEntityInfoRequiredType::is_individual_Set() const{
    return m_individual_isSet;
}

bool OAILegalEntityInfoRequiredType::is_individual_Valid() const{
    return m_individual_isValid;
}

OAIOrganization OAILegalEntityInfoRequiredType::getOrganization() const {
    return m_organization;
}
void OAILegalEntityInfoRequiredType::setOrganization(const OAIOrganization &organization) {
    m_organization = organization;
    m_organization_isSet = true;
}

bool OAILegalEntityInfoRequiredType::is_organization_Set() const{
    return m_organization_isSet;
}

bool OAILegalEntityInfoRequiredType::is_organization_Valid() const{
    return m_organization_isValid;
}

QString OAILegalEntityInfoRequiredType::getReference() const {
    return m_reference;
}
void OAILegalEntityInfoRequiredType::setReference(const QString &reference) {
    m_reference = reference;
    m_reference_isSet = true;
}

bool OAILegalEntityInfoRequiredType::is_reference_Set() const{
    return m_reference_isSet;
}

bool OAILegalEntityInfoRequiredType::is_reference_Valid() const{
    return m_reference_isValid;
}

OAISoleProprietorship OAILegalEntityInfoRequiredType::getSoleProprietorship() const {
    return m_sole_proprietorship;
}
void OAILegalEntityInfoRequiredType::setSoleProprietorship(const OAISoleProprietorship &sole_proprietorship) {
    m_sole_proprietorship = sole_proprietorship;
    m_sole_proprietorship_isSet = true;
}

bool OAILegalEntityInfoRequiredType::is_sole_proprietorship_Set() const{
    return m_sole_proprietorship_isSet;
}

bool OAILegalEntityInfoRequiredType::is_sole_proprietorship_Valid() const{
    return m_sole_proprietorship_isValid;
}

OAITrust OAILegalEntityInfoRequiredType::getTrust() const {
    return m_trust;
}
void OAILegalEntityInfoRequiredType::setTrust(const OAITrust &trust) {
    m_trust = trust;
    m_trust_isSet = true;
}

bool OAILegalEntityInfoRequiredType::is_trust_Set() const{
    return m_trust_isSet;
}

bool OAILegalEntityInfoRequiredType::is_trust_Valid() const{
    return m_trust_isValid;
}

QString OAILegalEntityInfoRequiredType::getType() const {
    return m_type;
}
void OAILegalEntityInfoRequiredType::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAILegalEntityInfoRequiredType::is_type_Set() const{
    return m_type_isSet;
}

bool OAILegalEntityInfoRequiredType::is_type_Valid() const{
    return m_type_isValid;
}

OAIUnincorporatedPartnership OAILegalEntityInfoRequiredType::getUnincorporatedPartnership() const {
    return m_unincorporated_partnership;
}
void OAILegalEntityInfoRequiredType::setUnincorporatedPartnership(const OAIUnincorporatedPartnership &unincorporated_partnership) {
    m_unincorporated_partnership = unincorporated_partnership;
    m_unincorporated_partnership_isSet = true;
}

bool OAILegalEntityInfoRequiredType::is_unincorporated_partnership_Set() const{
    return m_unincorporated_partnership_isSet;
}

bool OAILegalEntityInfoRequiredType::is_unincorporated_partnership_Valid() const{
    return m_unincorporated_partnership_isValid;
}

QString OAILegalEntityInfoRequiredType::getVerificationPlan() const {
    return m_verification_plan;
}
void OAILegalEntityInfoRequiredType::setVerificationPlan(const QString &verification_plan) {
    m_verification_plan = verification_plan;
    m_verification_plan_isSet = true;
}

bool OAILegalEntityInfoRequiredType::is_verification_plan_Set() const{
    return m_verification_plan_isSet;
}

bool OAILegalEntityInfoRequiredType::is_verification_plan_Valid() const{
    return m_verification_plan_isValid;
}

bool OAILegalEntityInfoRequiredType::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_capabilities.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_entity_associations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_individual.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_organization.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sole_proprietorship.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_trust.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unincorporated_partnership.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_verification_plan_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILegalEntityInfoRequiredType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_type_isValid && true;
}

} // namespace OpenAPI
