/**
 * Legal Entity Management API
 * The Legal Entity Management API enables you to manage legal entities that contain information required for verification.  ## Authentication Your Adyen contact will provide your API credential and an API key. To connect to the API, add an `X-API-Key` header with the API key as the value. For example:  ``` curl -H \"X-API-Key: YOUR_API_KEY\" \\ -H \"Content-Type: application/json\" \\ ... ``` Alternatively, you can use the username and password of your API credential to connect to the API using basic authentication. For example:  ``` curl -U \"ws_123456@Scope.Company_YOUR_COMPANY_ACCOUNT\":\"YourWsPassword\" \\ -H \"Content-Type: application/json\" \\ ... ``` ## Versioning The Legal Entity Management API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://kyc-test.adyen.com/lem/v2/legalEntities ``` >If you are using hosted onboarding and just beginning your integration, use v3 for your API requests. Otherwise, use v2.  ## Going live When going live, your Adyen contact will provide your API credential for the live environment. You can then use the API key or the username and password to send requests to `https://kyc-live.adyen.com/lem/v2`.  
 *
 * The version of the OpenAPI document: 2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICapabilitySettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICapabilitySettings::OAICapabilitySettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICapabilitySettings::OAICapabilitySettings() {
    this->initializeModel();
}

OAICapabilitySettings::~OAICapabilitySettings() {}

void OAICapabilitySettings::initializeModel() {

    m_amount_per_industry_isSet = false;
    m_amount_per_industry_isValid = false;

    m_authorized_card_users_isSet = false;
    m_authorized_card_users_isValid = false;

    m_funding_source_isSet = false;
    m_funding_source_isValid = false;

    m_interval_isSet = false;
    m_interval_isValid = false;

    m_max_amount_isSet = false;
    m_max_amount_isValid = false;
}

void OAICapabilitySettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICapabilitySettings::fromJsonObject(QJsonObject json) {

    m_amount_per_industry_isValid = ::OpenAPI::fromJsonValue(m_amount_per_industry, json[QString("amountPerIndustry")]);
    m_amount_per_industry_isSet = !json[QString("amountPerIndustry")].isNull() && m_amount_per_industry_isValid;

    m_authorized_card_users_isValid = ::OpenAPI::fromJsonValue(m_authorized_card_users, json[QString("authorizedCardUsers")]);
    m_authorized_card_users_isSet = !json[QString("authorizedCardUsers")].isNull() && m_authorized_card_users_isValid;

    m_funding_source_isValid = ::OpenAPI::fromJsonValue(m_funding_source, json[QString("fundingSource")]);
    m_funding_source_isSet = !json[QString("fundingSource")].isNull() && m_funding_source_isValid;

    m_interval_isValid = ::OpenAPI::fromJsonValue(m_interval, json[QString("interval")]);
    m_interval_isSet = !json[QString("interval")].isNull() && m_interval_isValid;

    m_max_amount_isValid = ::OpenAPI::fromJsonValue(m_max_amount, json[QString("maxAmount")]);
    m_max_amount_isSet = !json[QString("maxAmount")].isNull() && m_max_amount_isValid;
}

QString OAICapabilitySettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICapabilitySettings::asJsonObject() const {
    QJsonObject obj;
    if (m_amount_per_industry.size() > 0) {
        obj.insert(QString("amountPerIndustry"), ::OpenAPI::toJsonValue(m_amount_per_industry));
    }
    if (m_authorized_card_users_isSet) {
        obj.insert(QString("authorizedCardUsers"), ::OpenAPI::toJsonValue(m_authorized_card_users));
    }
    if (m_funding_source.size() > 0) {
        obj.insert(QString("fundingSource"), ::OpenAPI::toJsonValue(m_funding_source));
    }
    if (m_interval_isSet) {
        obj.insert(QString("interval"), ::OpenAPI::toJsonValue(m_interval));
    }
    if (m_max_amount.isSet()) {
        obj.insert(QString("maxAmount"), ::OpenAPI::toJsonValue(m_max_amount));
    }
    return obj;
}

QMap<QString, OAIAmount> OAICapabilitySettings::getAmountPerIndustry() const {
    return m_amount_per_industry;
}
void OAICapabilitySettings::setAmountPerIndustry(const QMap<QString, OAIAmount> &amount_per_industry) {
    m_amount_per_industry = amount_per_industry;
    m_amount_per_industry_isSet = true;
}

bool OAICapabilitySettings::is_amount_per_industry_Set() const{
    return m_amount_per_industry_isSet;
}

bool OAICapabilitySettings::is_amount_per_industry_Valid() const{
    return m_amount_per_industry_isValid;
}

bool OAICapabilitySettings::isAuthorizedCardUsers() const {
    return m_authorized_card_users;
}
void OAICapabilitySettings::setAuthorizedCardUsers(const bool &authorized_card_users) {
    m_authorized_card_users = authorized_card_users;
    m_authorized_card_users_isSet = true;
}

bool OAICapabilitySettings::is_authorized_card_users_Set() const{
    return m_authorized_card_users_isSet;
}

bool OAICapabilitySettings::is_authorized_card_users_Valid() const{
    return m_authorized_card_users_isValid;
}

QList<QString> OAICapabilitySettings::getFundingSource() const {
    return m_funding_source;
}
void OAICapabilitySettings::setFundingSource(const QList<QString> &funding_source) {
    m_funding_source = funding_source;
    m_funding_source_isSet = true;
}

bool OAICapabilitySettings::is_funding_source_Set() const{
    return m_funding_source_isSet;
}

bool OAICapabilitySettings::is_funding_source_Valid() const{
    return m_funding_source_isValid;
}

QString OAICapabilitySettings::getInterval() const {
    return m_interval;
}
void OAICapabilitySettings::setInterval(const QString &interval) {
    m_interval = interval;
    m_interval_isSet = true;
}

bool OAICapabilitySettings::is_interval_Set() const{
    return m_interval_isSet;
}

bool OAICapabilitySettings::is_interval_Valid() const{
    return m_interval_isValid;
}

OAIAmount OAICapabilitySettings::getMaxAmount() const {
    return m_max_amount;
}
void OAICapabilitySettings::setMaxAmount(const OAIAmount &max_amount) {
    m_max_amount = max_amount;
    m_max_amount_isSet = true;
}

bool OAICapabilitySettings::is_max_amount_Set() const{
    return m_max_amount_isSet;
}

bool OAICapabilitySettings::is_max_amount_Valid() const{
    return m_max_amount_isValid;
}

bool OAICapabilitySettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_amount_per_industry.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_authorized_card_users_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_funding_source.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_interval_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_amount.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICapabilitySettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
