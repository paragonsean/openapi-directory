/**
 * Legal Entity Management API
 * The Legal Entity Management API enables you to manage legal entities that contain information required for verification.  ## Authentication Your Adyen contact will provide your API credential and an API key. To connect to the API, add an `X-API-Key` header with the API key as the value. For example:  ``` curl -H \"X-API-Key: YOUR_API_KEY\" \\ -H \"Content-Type: application/json\" \\ ... ``` Alternatively, you can use the username and password of your API credential to connect to the API using basic authentication. For example:  ``` curl -U \"ws_123456@Scope.Company_YOUR_COMPANY_ACCOUNT\":\"YourWsPassword\" \\ -H \"Content-Type: application/json\" \\ ... ``` ## Versioning The Legal Entity Management API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://kyc-test.adyen.com/lem/v2/legalEntities ``` >If you are using hosted onboarding and just beginning your integration, use v3 for your API requests. Otherwise, use v2.  ## Going live When going live, your Adyen contact will provide your API credential for the live environment. You can then use the API key or the username and password to send requests to `https://kyc-live.adyen.com/lem/v2`.  
 *
 * The version of the OpenAPI document: 2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDocumentReference.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDocumentReference::OAIDocumentReference(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDocumentReference::OAIDocumentReference() {
    this->initializeModel();
}

OAIDocumentReference::~OAIDocumentReference() {}

void OAIDocumentReference::initializeModel() {

    m_active_isSet = false;
    m_active_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_file_name_isSet = false;
    m_file_name_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_modification_date_isSet = false;
    m_modification_date_isValid = false;

    m_pages_isSet = false;
    m_pages_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIDocumentReference::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDocumentReference::fromJsonObject(QJsonObject json) {

    m_active_isValid = ::OpenAPI::fromJsonValue(m_active, json[QString("active")]);
    m_active_isSet = !json[QString("active")].isNull() && m_active_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_file_name_isValid = ::OpenAPI::fromJsonValue(m_file_name, json[QString("fileName")]);
    m_file_name_isSet = !json[QString("fileName")].isNull() && m_file_name_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_modification_date_isValid = ::OpenAPI::fromJsonValue(m_modification_date, json[QString("modificationDate")]);
    m_modification_date_isSet = !json[QString("modificationDate")].isNull() && m_modification_date_isValid;

    m_pages_isValid = ::OpenAPI::fromJsonValue(m_pages, json[QString("pages")]);
    m_pages_isSet = !json[QString("pages")].isNull() && m_pages_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIDocumentReference::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDocumentReference::asJsonObject() const {
    QJsonObject obj;
    if (m_active_isSet) {
        obj.insert(QString("active"), ::OpenAPI::toJsonValue(m_active));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_file_name_isSet) {
        obj.insert(QString("fileName"), ::OpenAPI::toJsonValue(m_file_name));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_modification_date_isSet) {
        obj.insert(QString("modificationDate"), ::OpenAPI::toJsonValue(m_modification_date));
    }
    if (m_pages.size() > 0) {
        obj.insert(QString("pages"), ::OpenAPI::toJsonValue(m_pages));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

bool OAIDocumentReference::isActive() const {
    return m_active;
}
void OAIDocumentReference::setActive(const bool &active) {
    m_active = active;
    m_active_isSet = true;
}

bool OAIDocumentReference::is_active_Set() const{
    return m_active_isSet;
}

bool OAIDocumentReference::is_active_Valid() const{
    return m_active_isValid;
}

QString OAIDocumentReference::getDescription() const {
    return m_description;
}
void OAIDocumentReference::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIDocumentReference::is_description_Set() const{
    return m_description_isSet;
}

bool OAIDocumentReference::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIDocumentReference::getFileName() const {
    return m_file_name;
}
void OAIDocumentReference::setFileName(const QString &file_name) {
    m_file_name = file_name;
    m_file_name_isSet = true;
}

bool OAIDocumentReference::is_file_name_Set() const{
    return m_file_name_isSet;
}

bool OAIDocumentReference::is_file_name_Valid() const{
    return m_file_name_isValid;
}

QString OAIDocumentReference::getId() const {
    return m_id;
}
void OAIDocumentReference::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIDocumentReference::is_id_Set() const{
    return m_id_isSet;
}

bool OAIDocumentReference::is_id_Valid() const{
    return m_id_isValid;
}

QDateTime OAIDocumentReference::getModificationDate() const {
    return m_modification_date;
}
void OAIDocumentReference::setModificationDate(const QDateTime &modification_date) {
    m_modification_date = modification_date;
    m_modification_date_isSet = true;
}

bool OAIDocumentReference::is_modification_date_Set() const{
    return m_modification_date_isSet;
}

bool OAIDocumentReference::is_modification_date_Valid() const{
    return m_modification_date_isValid;
}

QList<OAIDocumentPage> OAIDocumentReference::getPages() const {
    return m_pages;
}
void OAIDocumentReference::setPages(const QList<OAIDocumentPage> &pages) {
    m_pages = pages;
    m_pages_isSet = true;
}

bool OAIDocumentReference::is_pages_Set() const{
    return m_pages_isSet;
}

bool OAIDocumentReference::is_pages_Valid() const{
    return m_pages_isValid;
}

QString OAIDocumentReference::getType() const {
    return m_type;
}
void OAIDocumentReference::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIDocumentReference::is_type_Set() const{
    return m_type_isSet;
}

bool OAIDocumentReference::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIDocumentReference::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_active_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_modification_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pages.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDocumentReference::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
