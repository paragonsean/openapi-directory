/**
 * Legal Entity Management API
 * The Legal Entity Management API enables you to manage legal entities that contain information required for verification.  ## Authentication Your Adyen contact will provide your API credential and an API key. To connect to the API, add an `X-API-Key` header with the API key as the value. For example:  ``` curl -H \"X-API-Key: YOUR_API_KEY\" \\ -H \"Content-Type: application/json\" \\ ... ``` Alternatively, you can use the username and password of your API credential to connect to the API using basic authentication. For example:  ``` curl -U \"ws_123456@Scope.Company_YOUR_COMPANY_ACCOUNT\":\"YourWsPassword\" \\ -H \"Content-Type: application/json\" \\ ... ``` ## Versioning The Legal Entity Management API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://kyc-test.adyen.com/lem/v2/legalEntities ``` >If you are using hosted onboarding and just beginning your integration, use v3 for your API requests. Otherwise, use v2.  ## Going live When going live, your Adyen contact will provide your API credential for the live environment. You can then use the API key or the username and password to send requests to `https://kyc-live.adyen.com/lem/v2`.  
 *
 * The version of the OpenAPI document: 2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAILegalEntity.h
 *
 * 
 */

#ifndef OAILegalEntity_H
#define OAILegalEntity_H

#include <QJsonObject>

#include "OAIDocumentReference.h"
#include "OAIEntityReference.h"
#include "OAIIndividual.h"
#include "OAILegalEntityAssociation.h"
#include "OAILegalEntityCapability.h"
#include "OAIOrganization.h"
#include "OAISoleProprietorship.h"
#include "OAITransferInstrumentReference.h"
#include "OAITrust.h"
#include "OAIUnincorporatedPartnership.h"
#include <QList>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAILegalEntityCapability;
class OAIDocumentReference;
class OAIEntityReference;
class OAILegalEntityAssociation;
class OAIIndividual;
class OAIOrganization;
class OAISoleProprietorship;
class OAITransferInstrumentReference;
class OAITrust;
class OAIUnincorporatedPartnership;

class OAILegalEntity : public OAIObject {
public:
    OAILegalEntity();
    OAILegalEntity(QString json);
    ~OAILegalEntity() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QMap<QString, OAILegalEntityCapability> getCapabilities() const;
    void setCapabilities(const QMap<QString, OAILegalEntityCapability> &capabilities);
    bool is_capabilities_Set() const;
    bool is_capabilities_Valid() const;

    QList<OAIDocumentReference> getDocumentDetails() const;
    void setDocumentDetails(const QList<OAIDocumentReference> &document_details);
    bool is_document_details_Set() const;
    bool is_document_details_Valid() const;

    QList<OAIEntityReference> getDocuments() const;
    void setDocuments(const QList<OAIEntityReference> &documents);
    bool is_documents_Set() const;
    bool is_documents_Valid() const;

    QList<OAILegalEntityAssociation> getEntityAssociations() const;
    void setEntityAssociations(const QList<OAILegalEntityAssociation> &entity_associations);
    bool is_entity_associations_Set() const;
    bool is_entity_associations_Valid() const;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    OAIIndividual getIndividual() const;
    void setIndividual(const OAIIndividual &individual);
    bool is_individual_Set() const;
    bool is_individual_Valid() const;

    OAIOrganization getOrganization() const;
    void setOrganization(const OAIOrganization &organization);
    bool is_organization_Set() const;
    bool is_organization_Valid() const;

    QString getReference() const;
    void setReference(const QString &reference);
    bool is_reference_Set() const;
    bool is_reference_Valid() const;

    OAISoleProprietorship getSoleProprietorship() const;
    void setSoleProprietorship(const OAISoleProprietorship &sole_proprietorship);
    bool is_sole_proprietorship_Set() const;
    bool is_sole_proprietorship_Valid() const;

    QList<OAITransferInstrumentReference> getTransferInstruments() const;
    void setTransferInstruments(const QList<OAITransferInstrumentReference> &transfer_instruments);
    bool is_transfer_instruments_Set() const;
    bool is_transfer_instruments_Valid() const;

    OAITrust getTrust() const;
    void setTrust(const OAITrust &trust);
    bool is_trust_Set() const;
    bool is_trust_Valid() const;

    QString getType() const;
    void setType(const QString &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    OAIUnincorporatedPartnership getUnincorporatedPartnership() const;
    void setUnincorporatedPartnership(const OAIUnincorporatedPartnership &unincorporated_partnership);
    bool is_unincorporated_partnership_Set() const;
    bool is_unincorporated_partnership_Valid() const;

    QString getVerificationPlan() const;
    void setVerificationPlan(const QString &verification_plan);
    bool is_verification_plan_Set() const;
    bool is_verification_plan_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QMap<QString, OAILegalEntityCapability> m_capabilities;
    bool m_capabilities_isSet;
    bool m_capabilities_isValid;

    QList<OAIDocumentReference> m_document_details;
    bool m_document_details_isSet;
    bool m_document_details_isValid;

    QList<OAIEntityReference> m_documents;
    bool m_documents_isSet;
    bool m_documents_isValid;

    QList<OAILegalEntityAssociation> m_entity_associations;
    bool m_entity_associations_isSet;
    bool m_entity_associations_isValid;

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    OAIIndividual m_individual;
    bool m_individual_isSet;
    bool m_individual_isValid;

    OAIOrganization m_organization;
    bool m_organization_isSet;
    bool m_organization_isValid;

    QString m_reference;
    bool m_reference_isSet;
    bool m_reference_isValid;

    OAISoleProprietorship m_sole_proprietorship;
    bool m_sole_proprietorship_isSet;
    bool m_sole_proprietorship_isValid;

    QList<OAITransferInstrumentReference> m_transfer_instruments;
    bool m_transfer_instruments_isSet;
    bool m_transfer_instruments_isValid;

    OAITrust m_trust;
    bool m_trust_isSet;
    bool m_trust_isValid;

    QString m_type;
    bool m_type_isSet;
    bool m_type_isValid;

    OAIUnincorporatedPartnership m_unincorporated_partnership;
    bool m_unincorporated_partnership_isSet;
    bool m_unincorporated_partnership_isValid;

    QString m_verification_plan;
    bool m_verification_plan_isSet;
    bool m_verification_plan_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAILegalEntity)

#endif // OAILegalEntity_H
