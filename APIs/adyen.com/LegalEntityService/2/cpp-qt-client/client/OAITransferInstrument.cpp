/**
 * Legal Entity Management API
 * The Legal Entity Management API enables you to manage legal entities that contain information required for verification.  ## Authentication Your Adyen contact will provide your API credential and an API key. To connect to the API, add an `X-API-Key` header with the API key as the value. For example:  ``` curl -H \"X-API-Key: YOUR_API_KEY\" \\ -H \"Content-Type: application/json\" \\ ... ``` Alternatively, you can use the username and password of your API credential to connect to the API using basic authentication. For example:  ``` curl -U \"ws_123456@Scope.Company_YOUR_COMPANY_ACCOUNT\":\"YourWsPassword\" \\ -H \"Content-Type: application/json\" \\ ... ``` ## Versioning The Legal Entity Management API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://kyc-test.adyen.com/lem/v2/legalEntities ``` >If you are using hosted onboarding and just beginning your integration, use v3 for your API requests. Otherwise, use v2.  ## Going live When going live, your Adyen contact will provide your API credential for the live environment. You can then use the API key or the username and password to send requests to `https://kyc-live.adyen.com/lem/v2`.  
 *
 * The version of the OpenAPI document: 2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITransferInstrument.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITransferInstrument::OAITransferInstrument(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITransferInstrument::OAITransferInstrument() {
    this->initializeModel();
}

OAITransferInstrument::~OAITransferInstrument() {}

void OAITransferInstrument::initializeModel() {

    m_bank_account_isSet = false;
    m_bank_account_isValid = false;

    m_document_details_isSet = false;
    m_document_details_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_legal_entity_id_isSet = false;
    m_legal_entity_id_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAITransferInstrument::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITransferInstrument::fromJsonObject(QJsonObject json) {

    m_bank_account_isValid = ::OpenAPI::fromJsonValue(m_bank_account, json[QString("bankAccount")]);
    m_bank_account_isSet = !json[QString("bankAccount")].isNull() && m_bank_account_isValid;

    m_document_details_isValid = ::OpenAPI::fromJsonValue(m_document_details, json[QString("documentDetails")]);
    m_document_details_isSet = !json[QString("documentDetails")].isNull() && m_document_details_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_legal_entity_id_isValid = ::OpenAPI::fromJsonValue(m_legal_entity_id, json[QString("legalEntityId")]);
    m_legal_entity_id_isSet = !json[QString("legalEntityId")].isNull() && m_legal_entity_id_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAITransferInstrument::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITransferInstrument::asJsonObject() const {
    QJsonObject obj;
    if (m_bank_account.isSet()) {
        obj.insert(QString("bankAccount"), ::OpenAPI::toJsonValue(m_bank_account));
    }
    if (m_document_details.size() > 0) {
        obj.insert(QString("documentDetails"), ::OpenAPI::toJsonValue(m_document_details));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_legal_entity_id_isSet) {
        obj.insert(QString("legalEntityId"), ::OpenAPI::toJsonValue(m_legal_entity_id));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

OAIBankAccountInfo OAITransferInstrument::getBankAccount() const {
    return m_bank_account;
}
void OAITransferInstrument::setBankAccount(const OAIBankAccountInfo &bank_account) {
    m_bank_account = bank_account;
    m_bank_account_isSet = true;
}

bool OAITransferInstrument::is_bank_account_Set() const{
    return m_bank_account_isSet;
}

bool OAITransferInstrument::is_bank_account_Valid() const{
    return m_bank_account_isValid;
}

QList<OAIDocumentReference> OAITransferInstrument::getDocumentDetails() const {
    return m_document_details;
}
void OAITransferInstrument::setDocumentDetails(const QList<OAIDocumentReference> &document_details) {
    m_document_details = document_details;
    m_document_details_isSet = true;
}

bool OAITransferInstrument::is_document_details_Set() const{
    return m_document_details_isSet;
}

bool OAITransferInstrument::is_document_details_Valid() const{
    return m_document_details_isValid;
}

QString OAITransferInstrument::getId() const {
    return m_id;
}
void OAITransferInstrument::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAITransferInstrument::is_id_Set() const{
    return m_id_isSet;
}

bool OAITransferInstrument::is_id_Valid() const{
    return m_id_isValid;
}

QString OAITransferInstrument::getLegalEntityId() const {
    return m_legal_entity_id;
}
void OAITransferInstrument::setLegalEntityId(const QString &legal_entity_id) {
    m_legal_entity_id = legal_entity_id;
    m_legal_entity_id_isSet = true;
}

bool OAITransferInstrument::is_legal_entity_id_Set() const{
    return m_legal_entity_id_isSet;
}

bool OAITransferInstrument::is_legal_entity_id_Valid() const{
    return m_legal_entity_id_isValid;
}

QString OAITransferInstrument::getType() const {
    return m_type;
}
void OAITransferInstrument::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAITransferInstrument::is_type_Set() const{
    return m_type_isSet;
}

bool OAITransferInstrument::is_type_Valid() const{
    return m_type_isValid;
}

bool OAITransferInstrument::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bank_account.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_document_details.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_legal_entity_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITransferInstrument::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_bank_account_isValid && m_id_isValid && m_legal_entity_id_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
