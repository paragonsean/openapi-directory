/**
 * Legal Entity Management API
 * The Legal Entity Management API enables you to manage legal entities that contain information required for verification.  ## Authentication Your Adyen contact will provide your API credential and an API key. To connect to the API, add an `X-API-Key` header with the API key as the value. For example:  ``` curl -H \"X-API-Key: YOUR_API_KEY\" \\ -H \"Content-Type: application/json\" \\ ... ``` Alternatively, you can use the username and password of your API credential to connect to the API using basic authentication. For example:  ``` curl -U \"ws_123456@Scope.Company_YOUR_COMPANY_ACCOUNT\":\"YourWsPassword\" \\ -H \"Content-Type: application/json\" \\ ... ``` ## Versioning The Legal Entity Management API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://kyc-test.adyen.com/lem/v2/legalEntities ``` >If you are using hosted onboarding and just beginning your integration, use v3 for your API requests. Otherwise, use v2.  ## Going live When going live, your Adyen contact will provide your API credential for the live environment. You can then use the API key or the username and password to send requests to `https://kyc-live.adyen.com/lem/v2`.  
 *
 * The version of the OpenAPI document: 2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITrust.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITrust::OAITrust(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITrust::OAITrust() {
    this->initializeModel();
}

OAITrust::~OAITrust() {}

void OAITrust::initializeModel() {

    m_country_of_governing_law_isSet = false;
    m_country_of_governing_law_isValid = false;

    m_date_of_incorporation_isSet = false;
    m_date_of_incorporation_isValid = false;

    m_doing_business_as_isSet = false;
    m_doing_business_as_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_principal_place_of_business_isSet = false;
    m_principal_place_of_business_isValid = false;

    m_registered_address_isSet = false;
    m_registered_address_isValid = false;

    m_registration_number_isSet = false;
    m_registration_number_isValid = false;

    m_tax_information_isSet = false;
    m_tax_information_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_undefined_beneficiary_info_isSet = false;
    m_undefined_beneficiary_info_isValid = false;

    m_vat_absence_reason_isSet = false;
    m_vat_absence_reason_isValid = false;

    m_vat_number_isSet = false;
    m_vat_number_isValid = false;
}

void OAITrust::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITrust::fromJsonObject(QJsonObject json) {

    m_country_of_governing_law_isValid = ::OpenAPI::fromJsonValue(m_country_of_governing_law, json[QString("countryOfGoverningLaw")]);
    m_country_of_governing_law_isSet = !json[QString("countryOfGoverningLaw")].isNull() && m_country_of_governing_law_isValid;

    m_date_of_incorporation_isValid = ::OpenAPI::fromJsonValue(m_date_of_incorporation, json[QString("dateOfIncorporation")]);
    m_date_of_incorporation_isSet = !json[QString("dateOfIncorporation")].isNull() && m_date_of_incorporation_isValid;

    m_doing_business_as_isValid = ::OpenAPI::fromJsonValue(m_doing_business_as, json[QString("doingBusinessAs")]);
    m_doing_business_as_isSet = !json[QString("doingBusinessAs")].isNull() && m_doing_business_as_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_principal_place_of_business_isValid = ::OpenAPI::fromJsonValue(m_principal_place_of_business, json[QString("principalPlaceOfBusiness")]);
    m_principal_place_of_business_isSet = !json[QString("principalPlaceOfBusiness")].isNull() && m_principal_place_of_business_isValid;

    m_registered_address_isValid = ::OpenAPI::fromJsonValue(m_registered_address, json[QString("registeredAddress")]);
    m_registered_address_isSet = !json[QString("registeredAddress")].isNull() && m_registered_address_isValid;

    m_registration_number_isValid = ::OpenAPI::fromJsonValue(m_registration_number, json[QString("registrationNumber")]);
    m_registration_number_isSet = !json[QString("registrationNumber")].isNull() && m_registration_number_isValid;

    m_tax_information_isValid = ::OpenAPI::fromJsonValue(m_tax_information, json[QString("taxInformation")]);
    m_tax_information_isSet = !json[QString("taxInformation")].isNull() && m_tax_information_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_undefined_beneficiary_info_isValid = ::OpenAPI::fromJsonValue(m_undefined_beneficiary_info, json[QString("undefinedBeneficiaryInfo")]);
    m_undefined_beneficiary_info_isSet = !json[QString("undefinedBeneficiaryInfo")].isNull() && m_undefined_beneficiary_info_isValid;

    m_vat_absence_reason_isValid = ::OpenAPI::fromJsonValue(m_vat_absence_reason, json[QString("vatAbsenceReason")]);
    m_vat_absence_reason_isSet = !json[QString("vatAbsenceReason")].isNull() && m_vat_absence_reason_isValid;

    m_vat_number_isValid = ::OpenAPI::fromJsonValue(m_vat_number, json[QString("vatNumber")]);
    m_vat_number_isSet = !json[QString("vatNumber")].isNull() && m_vat_number_isValid;
}

QString OAITrust::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITrust::asJsonObject() const {
    QJsonObject obj;
    if (m_country_of_governing_law_isSet) {
        obj.insert(QString("countryOfGoverningLaw"), ::OpenAPI::toJsonValue(m_country_of_governing_law));
    }
    if (m_date_of_incorporation_isSet) {
        obj.insert(QString("dateOfIncorporation"), ::OpenAPI::toJsonValue(m_date_of_incorporation));
    }
    if (m_doing_business_as_isSet) {
        obj.insert(QString("doingBusinessAs"), ::OpenAPI::toJsonValue(m_doing_business_as));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_principal_place_of_business.isSet()) {
        obj.insert(QString("principalPlaceOfBusiness"), ::OpenAPI::toJsonValue(m_principal_place_of_business));
    }
    if (m_registered_address.isSet()) {
        obj.insert(QString("registeredAddress"), ::OpenAPI::toJsonValue(m_registered_address));
    }
    if (m_registration_number_isSet) {
        obj.insert(QString("registrationNumber"), ::OpenAPI::toJsonValue(m_registration_number));
    }
    if (m_tax_information.size() > 0) {
        obj.insert(QString("taxInformation"), ::OpenAPI::toJsonValue(m_tax_information));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_undefined_beneficiary_info.size() > 0) {
        obj.insert(QString("undefinedBeneficiaryInfo"), ::OpenAPI::toJsonValue(m_undefined_beneficiary_info));
    }
    if (m_vat_absence_reason_isSet) {
        obj.insert(QString("vatAbsenceReason"), ::OpenAPI::toJsonValue(m_vat_absence_reason));
    }
    if (m_vat_number_isSet) {
        obj.insert(QString("vatNumber"), ::OpenAPI::toJsonValue(m_vat_number));
    }
    return obj;
}

QString OAITrust::getCountryOfGoverningLaw() const {
    return m_country_of_governing_law;
}
void OAITrust::setCountryOfGoverningLaw(const QString &country_of_governing_law) {
    m_country_of_governing_law = country_of_governing_law;
    m_country_of_governing_law_isSet = true;
}

bool OAITrust::is_country_of_governing_law_Set() const{
    return m_country_of_governing_law_isSet;
}

bool OAITrust::is_country_of_governing_law_Valid() const{
    return m_country_of_governing_law_isValid;
}

QString OAITrust::getDateOfIncorporation() const {
    return m_date_of_incorporation;
}
void OAITrust::setDateOfIncorporation(const QString &date_of_incorporation) {
    m_date_of_incorporation = date_of_incorporation;
    m_date_of_incorporation_isSet = true;
}

bool OAITrust::is_date_of_incorporation_Set() const{
    return m_date_of_incorporation_isSet;
}

bool OAITrust::is_date_of_incorporation_Valid() const{
    return m_date_of_incorporation_isValid;
}

QString OAITrust::getDoingBusinessAs() const {
    return m_doing_business_as;
}
void OAITrust::setDoingBusinessAs(const QString &doing_business_as) {
    m_doing_business_as = doing_business_as;
    m_doing_business_as_isSet = true;
}

bool OAITrust::is_doing_business_as_Set() const{
    return m_doing_business_as_isSet;
}

bool OAITrust::is_doing_business_as_Valid() const{
    return m_doing_business_as_isValid;
}

QString OAITrust::getName() const {
    return m_name;
}
void OAITrust::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAITrust::is_name_Set() const{
    return m_name_isSet;
}

bool OAITrust::is_name_Valid() const{
    return m_name_isValid;
}

OAIAddress OAITrust::getPrincipalPlaceOfBusiness() const {
    return m_principal_place_of_business;
}
void OAITrust::setPrincipalPlaceOfBusiness(const OAIAddress &principal_place_of_business) {
    m_principal_place_of_business = principal_place_of_business;
    m_principal_place_of_business_isSet = true;
}

bool OAITrust::is_principal_place_of_business_Set() const{
    return m_principal_place_of_business_isSet;
}

bool OAITrust::is_principal_place_of_business_Valid() const{
    return m_principal_place_of_business_isValid;
}

OAIAddress OAITrust::getRegisteredAddress() const {
    return m_registered_address;
}
void OAITrust::setRegisteredAddress(const OAIAddress &registered_address) {
    m_registered_address = registered_address;
    m_registered_address_isSet = true;
}

bool OAITrust::is_registered_address_Set() const{
    return m_registered_address_isSet;
}

bool OAITrust::is_registered_address_Valid() const{
    return m_registered_address_isValid;
}

QString OAITrust::getRegistrationNumber() const {
    return m_registration_number;
}
void OAITrust::setRegistrationNumber(const QString &registration_number) {
    m_registration_number = registration_number;
    m_registration_number_isSet = true;
}

bool OAITrust::is_registration_number_Set() const{
    return m_registration_number_isSet;
}

bool OAITrust::is_registration_number_Valid() const{
    return m_registration_number_isValid;
}

QList<OAITaxInformation> OAITrust::getTaxInformation() const {
    return m_tax_information;
}
void OAITrust::setTaxInformation(const QList<OAITaxInformation> &tax_information) {
    m_tax_information = tax_information;
    m_tax_information_isSet = true;
}

bool OAITrust::is_tax_information_Set() const{
    return m_tax_information_isSet;
}

bool OAITrust::is_tax_information_Valid() const{
    return m_tax_information_isValid;
}

QString OAITrust::getType() const {
    return m_type;
}
void OAITrust::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAITrust::is_type_Set() const{
    return m_type_isSet;
}

bool OAITrust::is_type_Valid() const{
    return m_type_isValid;
}

QList<OAIUndefinedBeneficiary> OAITrust::getUndefinedBeneficiaryInfo() const {
    return m_undefined_beneficiary_info;
}
void OAITrust::setUndefinedBeneficiaryInfo(const QList<OAIUndefinedBeneficiary> &undefined_beneficiary_info) {
    m_undefined_beneficiary_info = undefined_beneficiary_info;
    m_undefined_beneficiary_info_isSet = true;
}

bool OAITrust::is_undefined_beneficiary_info_Set() const{
    return m_undefined_beneficiary_info_isSet;
}

bool OAITrust::is_undefined_beneficiary_info_Valid() const{
    return m_undefined_beneficiary_info_isValid;
}

QString OAITrust::getVatAbsenceReason() const {
    return m_vat_absence_reason;
}
void OAITrust::setVatAbsenceReason(const QString &vat_absence_reason) {
    m_vat_absence_reason = vat_absence_reason;
    m_vat_absence_reason_isSet = true;
}

bool OAITrust::is_vat_absence_reason_Set() const{
    return m_vat_absence_reason_isSet;
}

bool OAITrust::is_vat_absence_reason_Valid() const{
    return m_vat_absence_reason_isValid;
}

QString OAITrust::getVatNumber() const {
    return m_vat_number;
}
void OAITrust::setVatNumber(const QString &vat_number) {
    m_vat_number = vat_number;
    m_vat_number_isSet = true;
}

bool OAITrust::is_vat_number_Set() const{
    return m_vat_number_isSet;
}

bool OAITrust::is_vat_number_Valid() const{
    return m_vat_number_isValid;
}

bool OAITrust::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_country_of_governing_law_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_of_incorporation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_doing_business_as_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_principal_place_of_business.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_registered_address.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_registration_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_information.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_undefined_beneficiary_info.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_vat_absence_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vat_number_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITrust::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_country_of_governing_law_isValid && m_name_isValid && m_registered_address_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
