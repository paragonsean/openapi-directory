/**
 * Legal Entity Management API
 * The Legal Entity Management API enables you to manage legal entities that contain information required for verification.  ## Authentication Your Adyen contact will provide your API credential and an API key. To connect to the API, add an `X-API-Key` header with the API key as the value. For example:  ``` curl -H \"X-API-Key: YOUR_API_KEY\" \\ -H \"Content-Type: application/json\" \\ ... ``` Alternatively, you can use the username and password of your API credential to connect to the API using basic authentication. For example:  ``` curl -U \"ws_123456@Scope.Company_YOUR_COMPANY_ACCOUNT\":\"YourWsPassword\" \\ -H \"Content-Type: application/json\" \\ ... ``` ## Versioning The Legal Entity Management API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://kyc-test.adyen.com/lem/v2/legalEntities ``` >If you are using hosted onboarding and just beginning your integration, use v3 for your API requests. Otherwise, use v2.  ## Going live When going live, your Adyen contact will provide your API credential for the live environment. You can then use the API key or the username and password to send requests to `https://kyc-live.adyen.com/lem/v2`.  
 *
 * The version of the OpenAPI document: 2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIHostedOnboardingApi_H
#define OAI_OAIHostedOnboardingApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIOnboardingLink.h"
#include "OAIOnboardingLinkInfo.h"
#include "OAIOnboardingTheme.h"
#include "OAIOnboardingThemes.h"
#include "OAIServiceError.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIHostedOnboardingApi : public QObject {
    Q_OBJECT

public:
    OAIHostedOnboardingApi(const int timeOut = 0);
    ~OAIHostedOnboardingApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);


    virtual void getThemes();

    /**
    * @param[in]  id QString [required]
    */
    virtual void getThemesId(const QString &id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_onboarding_link_info OAIOnboardingLinkInfo [optional]
    */
    virtual void postLegalEntitiesIdOnboardingLinks(const QString &id, const ::OpenAPI::OptionalParam<OAIOnboardingLinkInfo> &oai_onboarding_link_info = ::OpenAPI::OptionalParam<OAIOnboardingLinkInfo>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getThemesCallback(OAIHttpRequestWorker *worker);
    void getThemesIdCallback(OAIHttpRequestWorker *worker);
    void postLegalEntitiesIdOnboardingLinksCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getThemesSignal(OAIOnboardingThemes summary);
    void getThemesIdSignal(OAIOnboardingTheme summary);
    void postLegalEntitiesIdOnboardingLinksSignal(OAIOnboardingLink summary);


    void getThemesSignalFull(OAIHttpRequestWorker *worker, OAIOnboardingThemes summary);
    void getThemesIdSignalFull(OAIHttpRequestWorker *worker, OAIOnboardingTheme summary);
    void postLegalEntitiesIdOnboardingLinksSignalFull(OAIHttpRequestWorker *worker, OAIOnboardingLink summary);

    Q_DECL_DEPRECATED_X("Use getThemesSignalError() instead")
    void getThemesSignalE(OAIOnboardingThemes summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getThemesSignalError(OAIOnboardingThemes summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getThemesIdSignalError() instead")
    void getThemesIdSignalE(OAIOnboardingTheme summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getThemesIdSignalError(OAIOnboardingTheme summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postLegalEntitiesIdOnboardingLinksSignalError() instead")
    void postLegalEntitiesIdOnboardingLinksSignalE(OAIOnboardingLink summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postLegalEntitiesIdOnboardingLinksSignalError(OAIOnboardingLink summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getThemesSignalErrorFull() instead")
    void getThemesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getThemesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getThemesIdSignalErrorFull() instead")
    void getThemesIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getThemesIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postLegalEntitiesIdOnboardingLinksSignalErrorFull() instead")
    void postLegalEntitiesIdOnboardingLinksSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postLegalEntitiesIdOnboardingLinksSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
