/**
 * Legal Entity Management API
 * The Legal Entity Management API enables you to manage legal entities that contain information required for verification.  ## Authentication Your Adyen contact will provide your API credential and an API key. To connect to the API, add an `X-API-Key` header with the API key as the value. For example:  ``` curl -H \"X-API-Key: YOUR_API_KEY\" \\ -H \"Content-Type: application/json\" \\ ... ``` Alternatively, you can use the username and password of your API credential to connect to the API using basic authentication. For example:  ``` curl -U \"ws_123456@Scope.Company_YOUR_COMPANY_ACCOUNT\":\"YourWsPassword\" \\ -H \"Content-Type: application/json\" \\ ... ``` ## Versioning The Legal Entity Management API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://kyc-test.adyen.com/lem/v2/legalEntities ``` >If you are using hosted onboarding and just beginning your integration, use v3 for your API requests. Otherwise, use v2.  ## Going live When going live, your Adyen contact will provide your API credential for the live environment. You can then use the API key or the username and password to send requests to `https://kyc-live.adyen.com/lem/v2`.  
 *
 * The version of the OpenAPI document: 2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIBankAccountInfo.h
 *
 * 
 */

#ifndef OAIBankAccountInfo_H
#define OAIBankAccountInfo_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIBankAccountInfo : public OAIObject {
public:
    OAIBankAccountInfo();
    OAIBankAccountInfo(QString json);
    ~OAIBankAccountInfo() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAccountNumber() const;
    void setAccountNumber(const QString &account_number);
    bool is_account_number_Set() const;
    bool is_account_number_Valid() const;

    Q_DECL_DEPRECATED QString getAccountType() const;
    Q_DECL_DEPRECATED void setAccountType(const QString &account_type);
    Q_DECL_DEPRECATED bool is_account_type_Set() const;
    Q_DECL_DEPRECATED bool is_account_type_Valid() const;

    QString getBankBicSwift() const;
    void setBankBicSwift(const QString &bank_bic_swift);
    bool is_bank_bic_swift_Set() const;
    bool is_bank_bic_swift_Valid() const;

    QString getBankCity() const;
    void setBankCity(const QString &bank_city);
    bool is_bank_city_Set() const;
    bool is_bank_city_Valid() const;

    QString getBankCode() const;
    void setBankCode(const QString &bank_code);
    bool is_bank_code_Set() const;
    bool is_bank_code_Valid() const;

    QString getBankName() const;
    void setBankName(const QString &bank_name);
    bool is_bank_name_Set() const;
    bool is_bank_name_Valid() const;

    QString getBranchCode() const;
    void setBranchCode(const QString &branch_code);
    bool is_branch_code_Set() const;
    bool is_branch_code_Valid() const;

    QString getCheckCode() const;
    void setCheckCode(const QString &check_code);
    bool is_check_code_Set() const;
    bool is_check_code_Valid() const;

    QString getCountryCode() const;
    void setCountryCode(const QString &country_code);
    bool is_country_code_Set() const;
    bool is_country_code_Valid() const;

    QString getCurrencyCode() const;
    void setCurrencyCode(const QString &currency_code);
    bool is_currency_code_Set() const;
    bool is_currency_code_Valid() const;

    QString getIban() const;
    void setIban(const QString &iban);
    bool is_iban_Set() const;
    bool is_iban_Valid() const;

    bool isTrustedSource() const;
    void setTrustedSource(const bool &trusted_source);
    bool is_trusted_source_Set() const;
    bool is_trusted_source_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_account_number;
    bool m_account_number_isSet;
    bool m_account_number_isValid;

    QString m_account_type;
    bool m_account_type_isSet;
    bool m_account_type_isValid;

    QString m_bank_bic_swift;
    bool m_bank_bic_swift_isSet;
    bool m_bank_bic_swift_isValid;

    QString m_bank_city;
    bool m_bank_city_isSet;
    bool m_bank_city_isValid;

    QString m_bank_code;
    bool m_bank_code_isSet;
    bool m_bank_code_isValid;

    QString m_bank_name;
    bool m_bank_name_isSet;
    bool m_bank_name_isValid;

    QString m_branch_code;
    bool m_branch_code_isSet;
    bool m_branch_code_isValid;

    QString m_check_code;
    bool m_check_code_isSet;
    bool m_check_code_isValid;

    QString m_country_code;
    bool m_country_code_isSet;
    bool m_country_code_isValid;

    QString m_currency_code;
    bool m_currency_code_isSet;
    bool m_currency_code_isValid;

    QString m_iban;
    bool m_iban_isSet;
    bool m_iban_isValid;

    bool m_trusted_source;
    bool m_trusted_source_isSet;
    bool m_trusted_source_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIBankAccountInfo)

#endif // OAIBankAccountInfo_H
