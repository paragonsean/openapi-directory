/**
 * Legal Entity Management API
 * The Legal Entity Management API enables you to manage legal entities that contain information required for verification.  ## Authentication Your Adyen contact will provide your API credential and an API key. To connect to the API, add an `X-API-Key` header with the API key as the value. For example:  ``` curl -H \"X-API-Key: YOUR_API_KEY\" \\ -H \"Content-Type: application/json\" \\ ... ``` Alternatively, you can use the username and password of your API credential to connect to the API using basic authentication. For example:  ``` curl -U \"ws_123456@Scope.Company_YOUR_COMPANY_ACCOUNT\":\"YourWsPassword\" \\ -H \"Content-Type: application/json\" \\ ... ``` ## Versioning The Legal Entity Management API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://kyc-test.adyen.com/lem/v2/legalEntities ``` >If you are using hosted onboarding and just beginning your integration, use v3 for your API requests. Otherwise, use v2.  ## Going live When going live, your Adyen contact will provide your API credential for the live environment. You can then use the API key or the username and password to send requests to `https://kyc-live.adyen.com/lem/v2`.  
 *
 * The version of the OpenAPI document: 2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIdentificationData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIdentificationData::OAIIdentificationData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIdentificationData::OAIIdentificationData() {
    this->initializeModel();
}

OAIIdentificationData::~OAIIdentificationData() {}

void OAIIdentificationData::initializeModel() {

    m_card_number_isSet = false;
    m_card_number_isValid = false;

    m_expiry_date_isSet = false;
    m_expiry_date_isValid = false;

    m_issuer_country_isSet = false;
    m_issuer_country_isValid = false;

    m_issuer_state_isSet = false;
    m_issuer_state_isValid = false;

    m_national_id_exempt_isSet = false;
    m_national_id_exempt_isValid = false;

    m_number_isSet = false;
    m_number_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIIdentificationData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIdentificationData::fromJsonObject(QJsonObject json) {

    m_card_number_isValid = ::OpenAPI::fromJsonValue(m_card_number, json[QString("cardNumber")]);
    m_card_number_isSet = !json[QString("cardNumber")].isNull() && m_card_number_isValid;

    m_expiry_date_isValid = ::OpenAPI::fromJsonValue(m_expiry_date, json[QString("expiryDate")]);
    m_expiry_date_isSet = !json[QString("expiryDate")].isNull() && m_expiry_date_isValid;

    m_issuer_country_isValid = ::OpenAPI::fromJsonValue(m_issuer_country, json[QString("issuerCountry")]);
    m_issuer_country_isSet = !json[QString("issuerCountry")].isNull() && m_issuer_country_isValid;

    m_issuer_state_isValid = ::OpenAPI::fromJsonValue(m_issuer_state, json[QString("issuerState")]);
    m_issuer_state_isSet = !json[QString("issuerState")].isNull() && m_issuer_state_isValid;

    m_national_id_exempt_isValid = ::OpenAPI::fromJsonValue(m_national_id_exempt, json[QString("nationalIdExempt")]);
    m_national_id_exempt_isSet = !json[QString("nationalIdExempt")].isNull() && m_national_id_exempt_isValid;

    m_number_isValid = ::OpenAPI::fromJsonValue(m_number, json[QString("number")]);
    m_number_isSet = !json[QString("number")].isNull() && m_number_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIIdentificationData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIdentificationData::asJsonObject() const {
    QJsonObject obj;
    if (m_card_number_isSet) {
        obj.insert(QString("cardNumber"), ::OpenAPI::toJsonValue(m_card_number));
    }
    if (m_expiry_date_isSet) {
        obj.insert(QString("expiryDate"), ::OpenAPI::toJsonValue(m_expiry_date));
    }
    if (m_issuer_country_isSet) {
        obj.insert(QString("issuerCountry"), ::OpenAPI::toJsonValue(m_issuer_country));
    }
    if (m_issuer_state_isSet) {
        obj.insert(QString("issuerState"), ::OpenAPI::toJsonValue(m_issuer_state));
    }
    if (m_national_id_exempt_isSet) {
        obj.insert(QString("nationalIdExempt"), ::OpenAPI::toJsonValue(m_national_id_exempt));
    }
    if (m_number_isSet) {
        obj.insert(QString("number"), ::OpenAPI::toJsonValue(m_number));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIIdentificationData::getCardNumber() const {
    return m_card_number;
}
void OAIIdentificationData::setCardNumber(const QString &card_number) {
    m_card_number = card_number;
    m_card_number_isSet = true;
}

bool OAIIdentificationData::is_card_number_Set() const{
    return m_card_number_isSet;
}

bool OAIIdentificationData::is_card_number_Valid() const{
    return m_card_number_isValid;
}

QString OAIIdentificationData::getExpiryDate() const {
    return m_expiry_date;
}
void OAIIdentificationData::setExpiryDate(const QString &expiry_date) {
    m_expiry_date = expiry_date;
    m_expiry_date_isSet = true;
}

bool OAIIdentificationData::is_expiry_date_Set() const{
    return m_expiry_date_isSet;
}

bool OAIIdentificationData::is_expiry_date_Valid() const{
    return m_expiry_date_isValid;
}

QString OAIIdentificationData::getIssuerCountry() const {
    return m_issuer_country;
}
void OAIIdentificationData::setIssuerCountry(const QString &issuer_country) {
    m_issuer_country = issuer_country;
    m_issuer_country_isSet = true;
}

bool OAIIdentificationData::is_issuer_country_Set() const{
    return m_issuer_country_isSet;
}

bool OAIIdentificationData::is_issuer_country_Valid() const{
    return m_issuer_country_isValid;
}

QString OAIIdentificationData::getIssuerState() const {
    return m_issuer_state;
}
void OAIIdentificationData::setIssuerState(const QString &issuer_state) {
    m_issuer_state = issuer_state;
    m_issuer_state_isSet = true;
}

bool OAIIdentificationData::is_issuer_state_Set() const{
    return m_issuer_state_isSet;
}

bool OAIIdentificationData::is_issuer_state_Valid() const{
    return m_issuer_state_isValid;
}

bool OAIIdentificationData::isNationalIdExempt() const {
    return m_national_id_exempt;
}
void OAIIdentificationData::setNationalIdExempt(const bool &national_id_exempt) {
    m_national_id_exempt = national_id_exempt;
    m_national_id_exempt_isSet = true;
}

bool OAIIdentificationData::is_national_id_exempt_Set() const{
    return m_national_id_exempt_isSet;
}

bool OAIIdentificationData::is_national_id_exempt_Valid() const{
    return m_national_id_exempt_isValid;
}

QString OAIIdentificationData::getNumber() const {
    return m_number;
}
void OAIIdentificationData::setNumber(const QString &number) {
    m_number = number;
    m_number_isSet = true;
}

bool OAIIdentificationData::is_number_Set() const{
    return m_number_isSet;
}

bool OAIIdentificationData::is_number_Valid() const{
    return m_number_isValid;
}

QString OAIIdentificationData::getType() const {
    return m_type;
}
void OAIIdentificationData::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIIdentificationData::is_type_Set() const{
    return m_type_isSet;
}

bool OAIIdentificationData::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIIdentificationData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_card_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expiry_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_issuer_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_issuer_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_national_id_exempt_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIdentificationData::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_type_isValid && true;
}

} // namespace OpenAPI
