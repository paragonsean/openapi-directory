/**
 * Legal Entity Management API
 * The Legal Entity Management API enables you to manage legal entities that contain information required for verification.  ## Authentication Your Adyen contact will provide your API credential and an API key. To connect to the API, add an `X-API-Key` header with the API key as the value. For example:  ``` curl -H \"X-API-Key: YOUR_API_KEY\" \\ -H \"Content-Type: application/json\" \\ ... ``` Alternatively, you can use the username and password of your API credential to connect to the API using basic authentication. For example:  ``` curl -U \"ws_123456@Scope.Company_YOUR_COMPANY_ACCOUNT\":\"YourWsPassword\" \\ -H \"Content-Type: application/json\" \\ ... ``` ## Versioning The Legal Entity Management API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://kyc-test.adyen.com/lem/v2/legalEntities ``` >If you are using hosted onboarding and just beginning your integration, use v3 for your API requests. Otherwise, use v2.  ## Going live When going live, your Adyen contact will provide your API credential for the live environment. You can then use the API key or the username and password to send requests to `https://kyc-live.adyen.com/lem/v2`.  
 *
 * The version of the OpenAPI document: 2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBusinessLineInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBusinessLineInfo::OAIBusinessLineInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBusinessLineInfo::OAIBusinessLineInfo() {
    this->initializeModel();
}

OAIBusinessLineInfo::~OAIBusinessLineInfo() {}

void OAIBusinessLineInfo::initializeModel() {

    m_capability_isSet = false;
    m_capability_isValid = false;

    m_industry_code_isSet = false;
    m_industry_code_isValid = false;

    m_legal_entity_id_isSet = false;
    m_legal_entity_id_isValid = false;

    m_sales_channels_isSet = false;
    m_sales_channels_isValid = false;

    m_source_of_funds_isSet = false;
    m_source_of_funds_isValid = false;

    m_web_data_isSet = false;
    m_web_data_isValid = false;

    m_web_data_exemption_isSet = false;
    m_web_data_exemption_isValid = false;
}

void OAIBusinessLineInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBusinessLineInfo::fromJsonObject(QJsonObject json) {

    m_capability_isValid = ::OpenAPI::fromJsonValue(m_capability, json[QString("capability")]);
    m_capability_isSet = !json[QString("capability")].isNull() && m_capability_isValid;

    m_industry_code_isValid = ::OpenAPI::fromJsonValue(m_industry_code, json[QString("industryCode")]);
    m_industry_code_isSet = !json[QString("industryCode")].isNull() && m_industry_code_isValid;

    m_legal_entity_id_isValid = ::OpenAPI::fromJsonValue(m_legal_entity_id, json[QString("legalEntityId")]);
    m_legal_entity_id_isSet = !json[QString("legalEntityId")].isNull() && m_legal_entity_id_isValid;

    m_sales_channels_isValid = ::OpenAPI::fromJsonValue(m_sales_channels, json[QString("salesChannels")]);
    m_sales_channels_isSet = !json[QString("salesChannels")].isNull() && m_sales_channels_isValid;

    m_source_of_funds_isValid = ::OpenAPI::fromJsonValue(m_source_of_funds, json[QString("sourceOfFunds")]);
    m_source_of_funds_isSet = !json[QString("sourceOfFunds")].isNull() && m_source_of_funds_isValid;

    m_web_data_isValid = ::OpenAPI::fromJsonValue(m_web_data, json[QString("webData")]);
    m_web_data_isSet = !json[QString("webData")].isNull() && m_web_data_isValid;

    m_web_data_exemption_isValid = ::OpenAPI::fromJsonValue(m_web_data_exemption, json[QString("webDataExemption")]);
    m_web_data_exemption_isSet = !json[QString("webDataExemption")].isNull() && m_web_data_exemption_isValid;
}

QString OAIBusinessLineInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBusinessLineInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_capability_isSet) {
        obj.insert(QString("capability"), ::OpenAPI::toJsonValue(m_capability));
    }
    if (m_industry_code_isSet) {
        obj.insert(QString("industryCode"), ::OpenAPI::toJsonValue(m_industry_code));
    }
    if (m_legal_entity_id_isSet) {
        obj.insert(QString("legalEntityId"), ::OpenAPI::toJsonValue(m_legal_entity_id));
    }
    if (m_sales_channels.size() > 0) {
        obj.insert(QString("salesChannels"), ::OpenAPI::toJsonValue(m_sales_channels));
    }
    if (m_source_of_funds.isSet()) {
        obj.insert(QString("sourceOfFunds"), ::OpenAPI::toJsonValue(m_source_of_funds));
    }
    if (m_web_data.size() > 0) {
        obj.insert(QString("webData"), ::OpenAPI::toJsonValue(m_web_data));
    }
    if (m_web_data_exemption.isSet()) {
        obj.insert(QString("webDataExemption"), ::OpenAPI::toJsonValue(m_web_data_exemption));
    }
    return obj;
}

QString OAIBusinessLineInfo::getCapability() const {
    return m_capability;
}
void OAIBusinessLineInfo::setCapability(const QString &capability) {
    m_capability = capability;
    m_capability_isSet = true;
}

bool OAIBusinessLineInfo::is_capability_Set() const{
    return m_capability_isSet;
}

bool OAIBusinessLineInfo::is_capability_Valid() const{
    return m_capability_isValid;
}

QString OAIBusinessLineInfo::getIndustryCode() const {
    return m_industry_code;
}
void OAIBusinessLineInfo::setIndustryCode(const QString &industry_code) {
    m_industry_code = industry_code;
    m_industry_code_isSet = true;
}

bool OAIBusinessLineInfo::is_industry_code_Set() const{
    return m_industry_code_isSet;
}

bool OAIBusinessLineInfo::is_industry_code_Valid() const{
    return m_industry_code_isValid;
}

QString OAIBusinessLineInfo::getLegalEntityId() const {
    return m_legal_entity_id;
}
void OAIBusinessLineInfo::setLegalEntityId(const QString &legal_entity_id) {
    m_legal_entity_id = legal_entity_id;
    m_legal_entity_id_isSet = true;
}

bool OAIBusinessLineInfo::is_legal_entity_id_Set() const{
    return m_legal_entity_id_isSet;
}

bool OAIBusinessLineInfo::is_legal_entity_id_Valid() const{
    return m_legal_entity_id_isValid;
}

QList<QString> OAIBusinessLineInfo::getSalesChannels() const {
    return m_sales_channels;
}
void OAIBusinessLineInfo::setSalesChannels(const QList<QString> &sales_channels) {
    m_sales_channels = sales_channels;
    m_sales_channels_isSet = true;
}

bool OAIBusinessLineInfo::is_sales_channels_Set() const{
    return m_sales_channels_isSet;
}

bool OAIBusinessLineInfo::is_sales_channels_Valid() const{
    return m_sales_channels_isValid;
}

OAISourceOfFunds OAIBusinessLineInfo::getSourceOfFunds() const {
    return m_source_of_funds;
}
void OAIBusinessLineInfo::setSourceOfFunds(const OAISourceOfFunds &source_of_funds) {
    m_source_of_funds = source_of_funds;
    m_source_of_funds_isSet = true;
}

bool OAIBusinessLineInfo::is_source_of_funds_Set() const{
    return m_source_of_funds_isSet;
}

bool OAIBusinessLineInfo::is_source_of_funds_Valid() const{
    return m_source_of_funds_isValid;
}

QList<OAIWebData> OAIBusinessLineInfo::getWebData() const {
    return m_web_data;
}
void OAIBusinessLineInfo::setWebData(const QList<OAIWebData> &web_data) {
    m_web_data = web_data;
    m_web_data_isSet = true;
}

bool OAIBusinessLineInfo::is_web_data_Set() const{
    return m_web_data_isSet;
}

bool OAIBusinessLineInfo::is_web_data_Valid() const{
    return m_web_data_isValid;
}

OAIWebDataExemption OAIBusinessLineInfo::getWebDataExemption() const {
    return m_web_data_exemption;
}
void OAIBusinessLineInfo::setWebDataExemption(const OAIWebDataExemption &web_data_exemption) {
    m_web_data_exemption = web_data_exemption;
    m_web_data_exemption_isSet = true;
}

bool OAIBusinessLineInfo::is_web_data_exemption_Set() const{
    return m_web_data_exemption_isSet;
}

bool OAIBusinessLineInfo::is_web_data_exemption_Valid() const{
    return m_web_data_exemption_isValid;
}

bool OAIBusinessLineInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_capability_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_industry_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_legal_entity_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sales_channels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_of_funds.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_web_data.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_web_data_exemption.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBusinessLineInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_capability_isValid && m_industry_code_isValid && m_legal_entity_id_isValid && true;
}

} // namespace OpenAPI
