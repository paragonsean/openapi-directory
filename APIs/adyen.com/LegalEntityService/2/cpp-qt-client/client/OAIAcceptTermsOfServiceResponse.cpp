/**
 * Legal Entity Management API
 * The Legal Entity Management API enables you to manage legal entities that contain information required for verification.  ## Authentication Your Adyen contact will provide your API credential and an API key. To connect to the API, add an `X-API-Key` header with the API key as the value. For example:  ``` curl -H \"X-API-Key: YOUR_API_KEY\" \\ -H \"Content-Type: application/json\" \\ ... ``` Alternatively, you can use the username and password of your API credential to connect to the API using basic authentication. For example:  ``` curl -U \"ws_123456@Scope.Company_YOUR_COMPANY_ACCOUNT\":\"YourWsPassword\" \\ -H \"Content-Type: application/json\" \\ ... ``` ## Versioning The Legal Entity Management API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://kyc-test.adyen.com/lem/v2/legalEntities ``` >If you are using hosted onboarding and just beginning your integration, use v3 for your API requests. Otherwise, use v2.  ## Going live When going live, your Adyen contact will provide your API credential for the live environment. You can then use the API key or the username and password to send requests to `https://kyc-live.adyen.com/lem/v2`.  
 *
 * The version of the OpenAPI document: 2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAcceptTermsOfServiceResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAcceptTermsOfServiceResponse::OAIAcceptTermsOfServiceResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAcceptTermsOfServiceResponse::OAIAcceptTermsOfServiceResponse() {
    this->initializeModel();
}

OAIAcceptTermsOfServiceResponse::~OAIAcceptTermsOfServiceResponse() {}

void OAIAcceptTermsOfServiceResponse::initializeModel() {

    m_accepted_by_isSet = false;
    m_accepted_by_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_ip_address_isSet = false;
    m_ip_address_isValid = false;

    m_language_isSet = false;
    m_language_isValid = false;

    m_terms_of_service_document_id_isSet = false;
    m_terms_of_service_document_id_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIAcceptTermsOfServiceResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAcceptTermsOfServiceResponse::fromJsonObject(QJsonObject json) {

    m_accepted_by_isValid = ::OpenAPI::fromJsonValue(m_accepted_by, json[QString("acceptedBy")]);
    m_accepted_by_isSet = !json[QString("acceptedBy")].isNull() && m_accepted_by_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_ip_address_isValid = ::OpenAPI::fromJsonValue(m_ip_address, json[QString("ipAddress")]);
    m_ip_address_isSet = !json[QString("ipAddress")].isNull() && m_ip_address_isValid;

    m_language_isValid = ::OpenAPI::fromJsonValue(m_language, json[QString("language")]);
    m_language_isSet = !json[QString("language")].isNull() && m_language_isValid;

    m_terms_of_service_document_id_isValid = ::OpenAPI::fromJsonValue(m_terms_of_service_document_id, json[QString("termsOfServiceDocumentId")]);
    m_terms_of_service_document_id_isSet = !json[QString("termsOfServiceDocumentId")].isNull() && m_terms_of_service_document_id_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIAcceptTermsOfServiceResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAcceptTermsOfServiceResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_accepted_by_isSet) {
        obj.insert(QString("acceptedBy"), ::OpenAPI::toJsonValue(m_accepted_by));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_ip_address_isSet) {
        obj.insert(QString("ipAddress"), ::OpenAPI::toJsonValue(m_ip_address));
    }
    if (m_language_isSet) {
        obj.insert(QString("language"), ::OpenAPI::toJsonValue(m_language));
    }
    if (m_terms_of_service_document_id_isSet) {
        obj.insert(QString("termsOfServiceDocumentId"), ::OpenAPI::toJsonValue(m_terms_of_service_document_id));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIAcceptTermsOfServiceResponse::getAcceptedBy() const {
    return m_accepted_by;
}
void OAIAcceptTermsOfServiceResponse::setAcceptedBy(const QString &accepted_by) {
    m_accepted_by = accepted_by;
    m_accepted_by_isSet = true;
}

bool OAIAcceptTermsOfServiceResponse::is_accepted_by_Set() const{
    return m_accepted_by_isSet;
}

bool OAIAcceptTermsOfServiceResponse::is_accepted_by_Valid() const{
    return m_accepted_by_isValid;
}

QString OAIAcceptTermsOfServiceResponse::getId() const {
    return m_id;
}
void OAIAcceptTermsOfServiceResponse::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIAcceptTermsOfServiceResponse::is_id_Set() const{
    return m_id_isSet;
}

bool OAIAcceptTermsOfServiceResponse::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIAcceptTermsOfServiceResponse::getIpAddress() const {
    return m_ip_address;
}
void OAIAcceptTermsOfServiceResponse::setIpAddress(const QString &ip_address) {
    m_ip_address = ip_address;
    m_ip_address_isSet = true;
}

bool OAIAcceptTermsOfServiceResponse::is_ip_address_Set() const{
    return m_ip_address_isSet;
}

bool OAIAcceptTermsOfServiceResponse::is_ip_address_Valid() const{
    return m_ip_address_isValid;
}

QString OAIAcceptTermsOfServiceResponse::getLanguage() const {
    return m_language;
}
void OAIAcceptTermsOfServiceResponse::setLanguage(const QString &language) {
    m_language = language;
    m_language_isSet = true;
}

bool OAIAcceptTermsOfServiceResponse::is_language_Set() const{
    return m_language_isSet;
}

bool OAIAcceptTermsOfServiceResponse::is_language_Valid() const{
    return m_language_isValid;
}

QString OAIAcceptTermsOfServiceResponse::getTermsOfServiceDocumentId() const {
    return m_terms_of_service_document_id;
}
void OAIAcceptTermsOfServiceResponse::setTermsOfServiceDocumentId(const QString &terms_of_service_document_id) {
    m_terms_of_service_document_id = terms_of_service_document_id;
    m_terms_of_service_document_id_isSet = true;
}

bool OAIAcceptTermsOfServiceResponse::is_terms_of_service_document_id_Set() const{
    return m_terms_of_service_document_id_isSet;
}

bool OAIAcceptTermsOfServiceResponse::is_terms_of_service_document_id_Valid() const{
    return m_terms_of_service_document_id_isValid;
}

QString OAIAcceptTermsOfServiceResponse::getType() const {
    return m_type;
}
void OAIAcceptTermsOfServiceResponse::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIAcceptTermsOfServiceResponse::is_type_Set() const{
    return m_type_isSet;
}

bool OAIAcceptTermsOfServiceResponse::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIAcceptTermsOfServiceResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_accepted_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ip_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_language_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_terms_of_service_document_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAcceptTermsOfServiceResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
