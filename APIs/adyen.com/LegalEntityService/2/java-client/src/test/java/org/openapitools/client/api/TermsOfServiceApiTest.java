/*
 * Legal Entity Management API
 * The Legal Entity Management API enables you to manage legal entities that contain information required for verification.  ## Authentication Your Adyen contact will provide your API credential and an API key. To connect to the API, add an `X-API-Key` header with the API key as the value. For example:  ``` curl -H \"X-API-Key: YOUR_API_KEY\" \\ -H \"Content-Type: application/json\" \\ ... ``` Alternatively, you can use the username and password of your API credential to connect to the API using basic authentication. For example:  ``` curl -U \"ws_123456@Scope.Company_YOUR_COMPANY_ACCOUNT\":\"YourWsPassword\" \\ -H \"Content-Type: application/json\" \\ ... ``` ## Versioning The Legal Entity Management API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://kyc-test.adyen.com/lem/v2/legalEntities ``` >If you are using hosted onboarding and just beginning your integration, use v3 for your API requests. Otherwise, use v2.  ## Going live When going live, your Adyen contact will provide your API credential for the live environment. You can then use the API key or the username and password to send requests to `https://kyc-live.adyen.com/lem/v2`.  
 *
 * The version of the OpenAPI document: 2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AcceptTermsOfServiceRequest;
import org.openapitools.client.model.AcceptTermsOfServiceResponse;
import org.openapitools.client.model.CalculateTermsOfServiceStatusResponse;
import org.openapitools.client.model.GetTermsOfServiceAcceptanceInfosResponse;
import org.openapitools.client.model.GetTermsOfServiceDocumentRequest;
import org.openapitools.client.model.GetTermsOfServiceDocumentResponse;
import org.openapitools.client.model.ServiceError;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TermsOfServiceApi
 */
@Disabled
public class TermsOfServiceApiTest {

    private final TermsOfServiceApi api = new TermsOfServiceApi();

    /**
     * Get Terms of Service information for a legal entity
     *
     * Returns Terms of Service information for a legal entity.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getLegalEntitiesIdTermsOfServiceAcceptanceInfosTest() throws ApiException {
        String id = null;
        GetTermsOfServiceAcceptanceInfosResponse response = api.getLegalEntitiesIdTermsOfServiceAcceptanceInfos(id);
        // TODO: test validations
    }

    /**
     * Get Terms of Service status
     *
     * Returns the required types of Terms of Service that need to be accepted by a legal entity.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getLegalEntitiesIdTermsOfServiceStatusTest() throws ApiException {
        String id = null;
        CalculateTermsOfServiceStatusResponse response = api.getLegalEntitiesIdTermsOfServiceStatus(id);
        // TODO: test validations
    }

    /**
     * Accept Terms of Service
     *
     * Accepts Terms of Service.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void patchLegalEntitiesIdTermsOfServiceTermsofservicedocumentidTest() throws ApiException {
        String id = null;
        String termsofservicedocumentid = null;
        AcceptTermsOfServiceRequest acceptTermsOfServiceRequest = null;
        AcceptTermsOfServiceResponse response = api.patchLegalEntitiesIdTermsOfServiceTermsofservicedocumentid(id, termsofservicedocumentid, acceptTermsOfServiceRequest);
        // TODO: test validations
    }

    /**
     * Get Terms of Service document
     *
     * Returns the Terms of Service document for a legal entity.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postLegalEntitiesIdTermsOfServiceTest() throws ApiException {
        String id = null;
        GetTermsOfServiceDocumentRequest getTermsOfServiceDocumentRequest = null;
        GetTermsOfServiceDocumentResponse response = api.postLegalEntitiesIdTermsOfService(id, getTermsOfServiceDocumentRequest);
        // TODO: test validations
    }

}
