/**
 * Legal Entity Management API
 * The Legal Entity Management API enables you to manage legal entities that contain information required for verification.  ## Authentication Your Adyen contact will provide your API credential and an API key. To connect to the API, add an `X-API-Key` header with the API key as the value. For example:  ``` curl -H \"X-API-Key: YOUR_API_KEY\" \\ -H \"Content-Type: application/json\" \\ ... ``` Alternatively, you can use the username and password of your API credential to connect to the API using basic authentication. For example:  ``` curl -U \"ws_123456@Scope.Company_YOUR_COMPANY_ACCOUNT\":\"YourWsPassword\" \\ -H \"Content-Type: application/json\" \\ ... ``` ## Versioning The Legal Entity Management API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://kyc-test.adyen.com/lem/v2/legalEntities ``` >If you are using hosted onboarding and just beginning your integration, use v3 for your API requests. Otherwise, use v2.  ## Going live When going live, your Adyen contact will provide your API credential for the live environment. You can then use the API key or the username and password to send requests to `https://kyc-live.adyen.com/lem/v2`.  
 *
 * The version of the OpenAPI document: 2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AcceptTermsOfServiceRequest from '../model/AcceptTermsOfServiceRequest';
import AcceptTermsOfServiceResponse from '../model/AcceptTermsOfServiceResponse';
import CalculateTermsOfServiceStatusResponse from '../model/CalculateTermsOfServiceStatusResponse';
import GetTermsOfServiceAcceptanceInfosResponse from '../model/GetTermsOfServiceAcceptanceInfosResponse';
import GetTermsOfServiceDocumentRequest from '../model/GetTermsOfServiceDocumentRequest';
import GetTermsOfServiceDocumentResponse from '../model/GetTermsOfServiceDocumentResponse';
import ServiceError from '../model/ServiceError';

/**
* TermsOfService service.
* @module api/TermsOfServiceApi
* @version 2
*/
export default class TermsOfServiceApi {

    /**
    * Constructs a new TermsOfServiceApi. 
    * @alias module:api/TermsOfServiceApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getLegalEntitiesIdTermsOfServiceAcceptanceInfos operation.
     * @callback module:api/TermsOfServiceApi~getLegalEntitiesIdTermsOfServiceAcceptanceInfosCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetTermsOfServiceAcceptanceInfosResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Terms of Service information for a legal entity
     * Returns Terms of Service information for a legal entity.
     * @param {String} id The unique identifier of the legal entity. For sole proprietorships, this is the individual legal entity ID of the owner.
     * @param {module:api/TermsOfServiceApi~getLegalEntitiesIdTermsOfServiceAcceptanceInfosCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetTermsOfServiceAcceptanceInfosResponse}
     */
    getLegalEntitiesIdTermsOfServiceAcceptanceInfos(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getLegalEntitiesIdTermsOfServiceAcceptanceInfos");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BasicAuth', 'ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetTermsOfServiceAcceptanceInfosResponse;
      return this.apiClient.callApi(
        '/legalEntities/{id}/termsOfServiceAcceptanceInfos', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getLegalEntitiesIdTermsOfServiceStatus operation.
     * @callback module:api/TermsOfServiceApi~getLegalEntitiesIdTermsOfServiceStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CalculateTermsOfServiceStatusResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Terms of Service status
     * Returns the required types of Terms of Service that need to be accepted by a legal entity.
     * @param {String} id The unique identifier of the legal entity. For sole proprietorships, this is the individual legal entity ID of the owner.
     * @param {module:api/TermsOfServiceApi~getLegalEntitiesIdTermsOfServiceStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CalculateTermsOfServiceStatusResponse}
     */
    getLegalEntitiesIdTermsOfServiceStatus(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getLegalEntitiesIdTermsOfServiceStatus");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BasicAuth', 'ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CalculateTermsOfServiceStatusResponse;
      return this.apiClient.callApi(
        '/legalEntities/{id}/termsOfServiceStatus', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the patchLegalEntitiesIdTermsOfServiceTermsofservicedocumentid operation.
     * @callback module:api/TermsOfServiceApi~patchLegalEntitiesIdTermsOfServiceTermsofservicedocumentidCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AcceptTermsOfServiceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Accept Terms of Service
     * Accepts Terms of Service.
     * @param {String} id The unique identifier of the legal entity. For sole proprietorships, this is the individual legal entity ID of the owner.
     * @param {String} termsofservicedocumentid The unique identifier of the Terms of Service document.
     * @param {Object} opts Optional parameters
     * @param {module:model/AcceptTermsOfServiceRequest} [acceptTermsOfServiceRequest] 
     * @param {module:api/TermsOfServiceApi~patchLegalEntitiesIdTermsOfServiceTermsofservicedocumentidCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AcceptTermsOfServiceResponse}
     */
    patchLegalEntitiesIdTermsOfServiceTermsofservicedocumentid(id, termsofservicedocumentid, opts, callback) {
      opts = opts || {};
      let postBody = opts['acceptTermsOfServiceRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling patchLegalEntitiesIdTermsOfServiceTermsofservicedocumentid");
      }
      // verify the required parameter 'termsofservicedocumentid' is set
      if (termsofservicedocumentid === undefined || termsofservicedocumentid === null) {
        throw new Error("Missing the required parameter 'termsofservicedocumentid' when calling patchLegalEntitiesIdTermsOfServiceTermsofservicedocumentid");
      }

      let pathParams = {
        'id': id,
        'termsofservicedocumentid': termsofservicedocumentid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BasicAuth', 'ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AcceptTermsOfServiceResponse;
      return this.apiClient.callApi(
        '/legalEntities/{id}/termsOfService/{termsofservicedocumentid}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postLegalEntitiesIdTermsOfService operation.
     * @callback module:api/TermsOfServiceApi~postLegalEntitiesIdTermsOfServiceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetTermsOfServiceDocumentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Terms of Service document
     * Returns the Terms of Service document for a legal entity.
     * @param {String} id The unique identifier of the legal entity. For sole proprietorships, this is the individual legal entity ID of the owner.
     * @param {Object} opts Optional parameters
     * @param {module:model/GetTermsOfServiceDocumentRequest} [getTermsOfServiceDocumentRequest] 
     * @param {module:api/TermsOfServiceApi~postLegalEntitiesIdTermsOfServiceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetTermsOfServiceDocumentResponse}
     */
    postLegalEntitiesIdTermsOfService(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['getTermsOfServiceDocumentRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling postLegalEntitiesIdTermsOfService");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BasicAuth', 'ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetTermsOfServiceDocumentResponse;
      return this.apiClient.callApi(
        '/legalEntities/{id}/termsOfService', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
