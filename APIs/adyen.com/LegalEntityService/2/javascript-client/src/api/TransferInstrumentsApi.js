/**
 * Legal Entity Management API
 * The Legal Entity Management API enables you to manage legal entities that contain information required for verification.  ## Authentication Your Adyen contact will provide your API credential and an API key. To connect to the API, add an `X-API-Key` header with the API key as the value. For example:  ``` curl -H \"X-API-Key: YOUR_API_KEY\" \\ -H \"Content-Type: application/json\" \\ ... ``` Alternatively, you can use the username and password of your API credential to connect to the API using basic authentication. For example:  ``` curl -U \"ws_123456@Scope.Company_YOUR_COMPANY_ACCOUNT\":\"YourWsPassword\" \\ -H \"Content-Type: application/json\" \\ ... ``` ## Versioning The Legal Entity Management API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://kyc-test.adyen.com/lem/v2/legalEntities ``` >If you are using hosted onboarding and just beginning your integration, use v3 for your API requests. Otherwise, use v2.  ## Going live When going live, your Adyen contact will provide your API credential for the live environment. You can then use the API key or the username and password to send requests to `https://kyc-live.adyen.com/lem/v2`.  
 *
 * The version of the OpenAPI document: 2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ServiceError from '../model/ServiceError';
import TransferInstrument from '../model/TransferInstrument';
import TransferInstrumentInfo from '../model/TransferInstrumentInfo';

/**
* TransferInstruments service.
* @module api/TransferInstrumentsApi
* @version 2
*/
export default class TransferInstrumentsApi {

    /**
    * Constructs a new TransferInstrumentsApi. 
    * @alias module:api/TransferInstrumentsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deleteTransferInstrumentsId operation.
     * @callback module:api/TransferInstrumentsApi~deleteTransferInstrumentsIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a transfer instrument
     * Deletes a transfer instrument.
     * @param {String} id The unique identifier of the transfer instrument to be deleted.
     * @param {module:api/TransferInstrumentsApi~deleteTransferInstrumentsIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteTransferInstrumentsId(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteTransferInstrumentsId");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BasicAuth', 'ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/transferInstruments/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTransferInstrumentsId operation.
     * @callback module:api/TransferInstrumentsApi~getTransferInstrumentsIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TransferInstrument} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a transfer instrument
     * Returns the details of a transfer instrument.
     * @param {String} id The unique identifier of the transfer instrument.
     * @param {module:api/TransferInstrumentsApi~getTransferInstrumentsIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TransferInstrument}
     */
    getTransferInstrumentsId(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getTransferInstrumentsId");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BasicAuth', 'ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TransferInstrument;
      return this.apiClient.callApi(
        '/transferInstruments/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the patchTransferInstrumentsId operation.
     * @callback module:api/TransferInstrumentsApi~patchTransferInstrumentsIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TransferInstrument} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a transfer instrument
     * Updates a transfer instrument.
     * @param {String} id The unique identifier of the transfer instrument.
     * @param {Object} opts Optional parameters
     * @param {String} [xRequestedVerificationCode] Use the requested verification code 0_0001 to resolve any suberrors associated with the transfer instrument. Requested verification codes can only be used in your test environment.
     * @param {module:model/TransferInstrumentInfo} [transferInstrumentInfo] 
     * @param {module:api/TransferInstrumentsApi~patchTransferInstrumentsIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TransferInstrument}
     */
    patchTransferInstrumentsId(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['transferInstrumentInfo'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling patchTransferInstrumentsId");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'x-requested-verification-code': opts['xRequestedVerificationCode']
      };
      let formParams = {
      };

      let authNames = ['BasicAuth', 'ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TransferInstrument;
      return this.apiClient.callApi(
        '/transferInstruments/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postTransferInstruments operation.
     * @callback module:api/TransferInstrumentsApi~postTransferInstrumentsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TransferInstrument} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a transfer instrument
     * Creates a transfer instrument.   A transfer instrument is a bank account that a legal entity owns. Adyen performs verification checks on the transfer instrument as required by payment industry regulations. We inform you of the verification results through webhooks or API responses.  When the transfer instrument passes the verification checks, you can start sending funds from the balance platform to the transfer instrument (such as payouts).
     * @param {Object} opts Optional parameters
     * @param {String} [xRequestedVerificationCode] Use a suberror code as your requested verification code. You can include one code at a time in your request header. Requested verification codes can only be used in your test environment.
     * @param {module:model/TransferInstrumentInfo} [transferInstrumentInfo] 
     * @param {module:api/TransferInstrumentsApi~postTransferInstrumentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TransferInstrument}
     */
    postTransferInstruments(opts, callback) {
      opts = opts || {};
      let postBody = opts['transferInstrumentInfo'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'x-requested-verification-code': opts['xRequestedVerificationCode']
      };
      let formParams = {
      };

      let authNames = ['BasicAuth', 'ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TransferInstrument;
      return this.apiClient.callApi(
        '/transferInstruments', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
