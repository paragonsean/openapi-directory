/**
 * Legal Entity Management API
 * The Legal Entity Management API enables you to manage legal entities that contain information required for verification.  ## Authentication Your Adyen contact will provide your API credential and an API key. To connect to the API, add an `X-API-Key` header with the API key as the value. For example:  ``` curl -H \"X-API-Key: YOUR_API_KEY\" \\ -H \"Content-Type: application/json\" \\ ... ``` Alternatively, you can use the username and password of your API credential to connect to the API using basic authentication. For example:  ``` curl -U \"ws_123456@Scope.Company_YOUR_COMPANY_ACCOUNT\":\"YourWsPassword\" \\ -H \"Content-Type: application/json\" \\ ... ``` ## Versioning The Legal Entity Management API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://kyc-test.adyen.com/lem/v2/legalEntities ``` >If you are using hosted onboarding and just beginning your integration, use v3 for your API requests. Otherwise, use v2.  ## Going live When going live, your Adyen contact will provide your API credential for the live environment. You can then use the API key or the username and password to send requests to `https://kyc-live.adyen.com/lem/v2`.  
 *
 * The version of the OpenAPI document: 2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CapabilityProblem from './CapabilityProblem';
import CapabilitySettings from './CapabilitySettings';
import SupportingEntityCapability from './SupportingEntityCapability';

/**
 * The LegalEntityCapability model module.
 * @module model/LegalEntityCapability
 * @version 2
 */
class LegalEntityCapability {
    /**
     * Constructs a new <code>LegalEntityCapability</code>.
     * @alias module:model/LegalEntityCapability
     */
    constructor() { 
        
        LegalEntityCapability.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>LegalEntityCapability</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LegalEntityCapability} obj Optional instance to populate.
     * @return {module:model/LegalEntityCapability} The populated <code>LegalEntityCapability</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LegalEntityCapability();

            if (data.hasOwnProperty('allowed')) {
                obj['allowed'] = ApiClient.convertToType(data['allowed'], 'Boolean');
            }
            if (data.hasOwnProperty('allowedLevel')) {
                obj['allowedLevel'] = ApiClient.convertToType(data['allowedLevel'], 'String');
            }
            if (data.hasOwnProperty('allowedSettings')) {
                obj['allowedSettings'] = CapabilitySettings.constructFromObject(data['allowedSettings']);
            }
            if (data.hasOwnProperty('problems')) {
                obj['problems'] = ApiClient.convertToType(data['problems'], [CapabilityProblem]);
            }
            if (data.hasOwnProperty('requested')) {
                obj['requested'] = ApiClient.convertToType(data['requested'], 'Boolean');
            }
            if (data.hasOwnProperty('requestedLevel')) {
                obj['requestedLevel'] = ApiClient.convertToType(data['requestedLevel'], 'String');
            }
            if (data.hasOwnProperty('requestedSettings')) {
                obj['requestedSettings'] = CapabilitySettings.constructFromObject(data['requestedSettings']);
            }
            if (data.hasOwnProperty('transferInstruments')) {
                obj['transferInstruments'] = ApiClient.convertToType(data['transferInstruments'], [SupportingEntityCapability]);
            }
            if (data.hasOwnProperty('verificationStatus')) {
                obj['verificationStatus'] = ApiClient.convertToType(data['verificationStatus'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LegalEntityCapability</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LegalEntityCapability</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['allowedLevel'] && !(typeof data['allowedLevel'] === 'string' || data['allowedLevel'] instanceof String)) {
            throw new Error("Expected the field `allowedLevel` to be a primitive type in the JSON string but got " + data['allowedLevel']);
        }
        // validate the optional field `allowedSettings`
        if (data['allowedSettings']) { // data not null
          CapabilitySettings.validateJSON(data['allowedSettings']);
        }
        if (data['problems']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['problems'])) {
                throw new Error("Expected the field `problems` to be an array in the JSON data but got " + data['problems']);
            }
            // validate the optional field `problems` (array)
            for (const item of data['problems']) {
                CapabilityProblem.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['requestedLevel'] && !(typeof data['requestedLevel'] === 'string' || data['requestedLevel'] instanceof String)) {
            throw new Error("Expected the field `requestedLevel` to be a primitive type in the JSON string but got " + data['requestedLevel']);
        }
        // validate the optional field `requestedSettings`
        if (data['requestedSettings']) { // data not null
          CapabilitySettings.validateJSON(data['requestedSettings']);
        }
        if (data['transferInstruments']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['transferInstruments'])) {
                throw new Error("Expected the field `transferInstruments` to be an array in the JSON data but got " + data['transferInstruments']);
            }
            // validate the optional field `transferInstruments` (array)
            for (const item of data['transferInstruments']) {
                SupportingEntityCapability.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['verificationStatus'] && !(typeof data['verificationStatus'] === 'string' || data['verificationStatus'] instanceof String)) {
            throw new Error("Expected the field `verificationStatus` to be a primitive type in the JSON string but got " + data['verificationStatus']);
        }

        return true;
    }


}



/**
 * Indicates whether the capability is allowed. Adyen sets this to **true** if the verification is successful.
 * @member {Boolean} allowed
 */
LegalEntityCapability.prototype['allowed'] = undefined;

/**
 * The capability level that is allowed for the legal entity.  Possible values: **notApplicable**, **low**, **medium**, **high**.
 * @member {module:model/LegalEntityCapability.AllowedLevelEnum} allowedLevel
 */
LegalEntityCapability.prototype['allowedLevel'] = undefined;

/**
 * The settings that are allowed for the legal entity.
 * @member {module:model/CapabilitySettings} allowedSettings
 */
LegalEntityCapability.prototype['allowedSettings'] = undefined;

/**
 * Contains verification errors and the actions that you can take to resolve them.
 * @member {Array.<module:model/CapabilityProblem>} problems
 */
LegalEntityCapability.prototype['problems'] = undefined;

/**
 * Indicates whether the capability is requested. To check whether the legal entity is permitted to use the capability, refer to the `allowed` field.
 * @member {Boolean} requested
 */
LegalEntityCapability.prototype['requested'] = undefined;

/**
 * The requested level of the capability. Some capabilities, such as those used in [card issuing](https://docs.adyen.com/issuing/add-capabilities#capability-levels), have different levels. Levels increase the capability, but also require additional checks and increased monitoring.  Possible values: **notApplicable**, **low**, **medium**, **high**.
 * @member {module:model/LegalEntityCapability.RequestedLevelEnum} requestedLevel
 */
LegalEntityCapability.prototype['requestedLevel'] = undefined;

/**
 * The settings that are requested for the legal entity.
 * @member {module:model/CapabilitySettings} requestedSettings
 */
LegalEntityCapability.prototype['requestedSettings'] = undefined;

/**
 * The capability status of transfer instruments associated with the legal entity.
 * @member {Array.<module:model/SupportingEntityCapability>} transferInstruments
 */
LegalEntityCapability.prototype['transferInstruments'] = undefined;

/**
 * The status of the verification checks for the capability.  Possible values:  * **pending**: Adyen is running the verification.  * **invalid**: The verification failed. Check if the `errors` array contains more information.  * **valid**: The verification has been successfully completed.  * **rejected**: Adyen has verified the information, but found reasons to not allow the capability. 
 * @member {String} verificationStatus
 */
LegalEntityCapability.prototype['verificationStatus'] = undefined;





/**
 * Allowed values for the <code>allowedLevel</code> property.
 * @enum {String}
 * @readonly
 */
LegalEntityCapability['AllowedLevelEnum'] = {

    /**
     * value: "high"
     * @const
     */
    "high": "high",

    /**
     * value: "low"
     * @const
     */
    "low": "low",

    /**
     * value: "medium"
     * @const
     */
    "medium": "medium",

    /**
     * value: "notApplicable"
     * @const
     */
    "notApplicable": "notApplicable"
};


/**
 * Allowed values for the <code>requestedLevel</code> property.
 * @enum {String}
 * @readonly
 */
LegalEntityCapability['RequestedLevelEnum'] = {

    /**
     * value: "high"
     * @const
     */
    "high": "high",

    /**
     * value: "low"
     * @const
     */
    "low": "low",

    /**
     * value: "medium"
     * @const
     */
    "medium": "medium",

    /**
     * value: "notApplicable"
     * @const
     */
    "notApplicable": "notApplicable"
};



export default LegalEntityCapability;

