/**
 * Legal Entity Management API
 * The Legal Entity Management API enables you to manage legal entities that contain information required for verification.  ## Authentication Your Adyen contact will provide your API credential and an API key. To connect to the API, add an `X-API-Key` header with the API key as the value. For example:  ``` curl -H \"X-API-Key: YOUR_API_KEY\" \\ -H \"Content-Type: application/json\" \\ ... ``` Alternatively, you can use the username and password of your API credential to connect to the API using basic authentication. For example:  ``` curl -U \"ws_123456@Scope.Company_YOUR_COMPANY_ACCOUNT\":\"YourWsPassword\" \\ -H \"Content-Type: application/json\" \\ ... ``` ## Versioning The Legal Entity Management API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://kyc-test.adyen.com/lem/v2/legalEntities ``` >If you are using hosted onboarding and just beginning your integration, use v3 for your API requests. Otherwise, use v2.  ## Going live When going live, your Adyen contact will provide your API credential for the live environment. You can then use the API key or the username and password to send requests to `https://kyc-live.adyen.com/lem/v2`.  
 *
 * The version of the OpenAPI document: 2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.LegalEntityManagementApi);
  }
}(this, function(expect, LegalEntityManagementApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new LegalEntityManagementApi.Trust();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Trust', function() {
    it('should create an instance of Trust', function() {
      // uncomment below and update the code to test Trust
      //var instance = new LegalEntityManagementApi.Trust();
      //expect(instance).to.be.a(LegalEntityManagementApi.Trust);
    });

    it('should have the property countryOfGoverningLaw (base name: "countryOfGoverningLaw")', function() {
      // uncomment below and update the code to test the property countryOfGoverningLaw
      //var instance = new LegalEntityManagementApi.Trust();
      //expect(instance).to.be();
    });

    it('should have the property dateOfIncorporation (base name: "dateOfIncorporation")', function() {
      // uncomment below and update the code to test the property dateOfIncorporation
      //var instance = new LegalEntityManagementApi.Trust();
      //expect(instance).to.be();
    });

    it('should have the property doingBusinessAs (base name: "doingBusinessAs")', function() {
      // uncomment below and update the code to test the property doingBusinessAs
      //var instance = new LegalEntityManagementApi.Trust();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new LegalEntityManagementApi.Trust();
      //expect(instance).to.be();
    });

    it('should have the property principalPlaceOfBusiness (base name: "principalPlaceOfBusiness")', function() {
      // uncomment below and update the code to test the property principalPlaceOfBusiness
      //var instance = new LegalEntityManagementApi.Trust();
      //expect(instance).to.be();
    });

    it('should have the property registeredAddress (base name: "registeredAddress")', function() {
      // uncomment below and update the code to test the property registeredAddress
      //var instance = new LegalEntityManagementApi.Trust();
      //expect(instance).to.be();
    });

    it('should have the property registrationNumber (base name: "registrationNumber")', function() {
      // uncomment below and update the code to test the property registrationNumber
      //var instance = new LegalEntityManagementApi.Trust();
      //expect(instance).to.be();
    });

    it('should have the property taxInformation (base name: "taxInformation")', function() {
      // uncomment below and update the code to test the property taxInformation
      //var instance = new LegalEntityManagementApi.Trust();
      //expect(instance).to.be();
    });

    it('should have the property type (base name: "type")', function() {
      // uncomment below and update the code to test the property type
      //var instance = new LegalEntityManagementApi.Trust();
      //expect(instance).to.be();
    });

    it('should have the property undefinedBeneficiaryInfo (base name: "undefinedBeneficiaryInfo")', function() {
      // uncomment below and update the code to test the property undefinedBeneficiaryInfo
      //var instance = new LegalEntityManagementApi.Trust();
      //expect(instance).to.be();
    });

    it('should have the property vatAbsenceReason (base name: "vatAbsenceReason")', function() {
      // uncomment below and update the code to test the property vatAbsenceReason
      //var instance = new LegalEntityManagementApi.Trust();
      //expect(instance).to.be();
    });

    it('should have the property vatNumber (base name: "vatNumber")', function() {
      // uncomment below and update the code to test the property vatNumber
      //var instance = new LegalEntityManagementApi.Trust();
      //expect(instance).to.be();
    });

  });

}));
