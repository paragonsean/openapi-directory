# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class HULocalAccountIdentification(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_number: str=None, form_factor: str='physical', type: str='huLocal'):
        """HULocalAccountIdentification - a model defined in OpenAPI

        :param account_number: The account_number of this HULocalAccountIdentification.
        :param form_factor: The form_factor of this HULocalAccountIdentification.
        :param type: The type of this HULocalAccountIdentification.
        """
        self.openapi_types = {
            'account_number': str,
            'form_factor': str,
            'type': str
        }

        self.attribute_map = {
            'account_number': 'accountNumber',
            'form_factor': 'formFactor',
            'type': 'type'
        }

        self._account_number = account_number
        self._form_factor = form_factor
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'HULocalAccountIdentification':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The HULocalAccountIdentification of this HULocalAccountIdentification.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_number(self):
        """Gets the account_number of this HULocalAccountIdentification.

        The 24-digit bank account number, without separators or whitespace.

        :return: The account_number of this HULocalAccountIdentification.
        :rtype: str
        """
        return self._account_number

    @account_number.setter
    def account_number(self, account_number):
        """Sets the account_number of this HULocalAccountIdentification.

        The 24-digit bank account number, without separators or whitespace.

        :param account_number: The account_number of this HULocalAccountIdentification.
        :type account_number: str
        """
        if account_number is None:
            raise ValueError("Invalid value for `account_number`, must not be `None`")
        if account_number is not None and len(account_number) > 24:
            raise ValueError("Invalid value for `account_number`, length must be less than or equal to `24`")
        if account_number is not None and len(account_number) < 24:
            raise ValueError("Invalid value for `account_number`, length must be greater than or equal to `24`")

        self._account_number = account_number

    @property
    def form_factor(self):
        """Gets the form_factor of this HULocalAccountIdentification.

        The form factor of the account.  Possible values: **physical**, **virtual**. Default value: **physical**.

        :return: The form_factor of this HULocalAccountIdentification.
        :rtype: str
        """
        return self._form_factor

    @form_factor.setter
    def form_factor(self, form_factor):
        """Sets the form_factor of this HULocalAccountIdentification.

        The form factor of the account.  Possible values: **physical**, **virtual**. Default value: **physical**.

        :param form_factor: The form_factor of this HULocalAccountIdentification.
        :type form_factor: str
        """

        self._form_factor = form_factor

    @property
    def type(self):
        """Gets the type of this HULocalAccountIdentification.

        **huLocal**

        :return: The type of this HULocalAccountIdentification.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this HULocalAccountIdentification.

        **huLocal**

        :param type: The type of this HULocalAccountIdentification.
        :type type: str
        """
        allowed_values = ["huLocal"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
