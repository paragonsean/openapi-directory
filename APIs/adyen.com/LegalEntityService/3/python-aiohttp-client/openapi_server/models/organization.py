# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.address import Address
from openapi_server.models.phone_number import PhoneNumber
from openapi_server.models.stock_data import StockData
from openapi_server.models.tax_information import TaxInformation
from openapi_server.models.tax_reporting_classification import TaxReportingClassification
from openapi_server.models.web_data import WebData
from openapi_server import util


class Organization(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, date_of_incorporation: str=None, description: str=None, doing_business_as: str=None, email: str=None, legal_name: str=None, phone: PhoneNumber=None, principal_place_of_business: Address=None, registered_address: Address=None, registration_number: str=None, stock_data: StockData=None, tax_information: List[TaxInformation]=None, tax_reporting_classification: TaxReportingClassification=None, type: str=None, vat_absence_reason: str=None, vat_number: str=None, web_data: WebData=None):
        """Organization - a model defined in OpenAPI

        :param date_of_incorporation: The date_of_incorporation of this Organization.
        :param description: The description of this Organization.
        :param doing_business_as: The doing_business_as of this Organization.
        :param email: The email of this Organization.
        :param legal_name: The legal_name of this Organization.
        :param phone: The phone of this Organization.
        :param principal_place_of_business: The principal_place_of_business of this Organization.
        :param registered_address: The registered_address of this Organization.
        :param registration_number: The registration_number of this Organization.
        :param stock_data: The stock_data of this Organization.
        :param tax_information: The tax_information of this Organization.
        :param tax_reporting_classification: The tax_reporting_classification of this Organization.
        :param type: The type of this Organization.
        :param vat_absence_reason: The vat_absence_reason of this Organization.
        :param vat_number: The vat_number of this Organization.
        :param web_data: The web_data of this Organization.
        """
        self.openapi_types = {
            'date_of_incorporation': str,
            'description': str,
            'doing_business_as': str,
            'email': str,
            'legal_name': str,
            'phone': PhoneNumber,
            'principal_place_of_business': Address,
            'registered_address': Address,
            'registration_number': str,
            'stock_data': StockData,
            'tax_information': List[TaxInformation],
            'tax_reporting_classification': TaxReportingClassification,
            'type': str,
            'vat_absence_reason': str,
            'vat_number': str,
            'web_data': WebData
        }

        self.attribute_map = {
            'date_of_incorporation': 'dateOfIncorporation',
            'description': 'description',
            'doing_business_as': 'doingBusinessAs',
            'email': 'email',
            'legal_name': 'legalName',
            'phone': 'phone',
            'principal_place_of_business': 'principalPlaceOfBusiness',
            'registered_address': 'registeredAddress',
            'registration_number': 'registrationNumber',
            'stock_data': 'stockData',
            'tax_information': 'taxInformation',
            'tax_reporting_classification': 'taxReportingClassification',
            'type': 'type',
            'vat_absence_reason': 'vatAbsenceReason',
            'vat_number': 'vatNumber',
            'web_data': 'webData'
        }

        self._date_of_incorporation = date_of_incorporation
        self._description = description
        self._doing_business_as = doing_business_as
        self._email = email
        self._legal_name = legal_name
        self._phone = phone
        self._principal_place_of_business = principal_place_of_business
        self._registered_address = registered_address
        self._registration_number = registration_number
        self._stock_data = stock_data
        self._tax_information = tax_information
        self._tax_reporting_classification = tax_reporting_classification
        self._type = type
        self._vat_absence_reason = vat_absence_reason
        self._vat_number = vat_number
        self._web_data = web_data

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Organization':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Organization of this Organization.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def date_of_incorporation(self):
        """Gets the date_of_incorporation of this Organization.

        The date when the organization was incorporated in YYYY-MM-DD format.

        :return: The date_of_incorporation of this Organization.
        :rtype: str
        """
        return self._date_of_incorporation

    @date_of_incorporation.setter
    def date_of_incorporation(self, date_of_incorporation):
        """Sets the date_of_incorporation of this Organization.

        The date when the organization was incorporated in YYYY-MM-DD format.

        :param date_of_incorporation: The date_of_incorporation of this Organization.
        :type date_of_incorporation: str
        """

        self._date_of_incorporation = date_of_incorporation

    @property
    def description(self):
        """Gets the description of this Organization.

        Your description for the organization.

        :return: The description of this Organization.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Organization.

        Your description for the organization.

        :param description: The description of this Organization.
        :type description: str
        """

        self._description = description

    @property
    def doing_business_as(self):
        """Gets the doing_business_as of this Organization.

        The organization's trading name, if different from the registered legal name.

        :return: The doing_business_as of this Organization.
        :rtype: str
        """
        return self._doing_business_as

    @doing_business_as.setter
    def doing_business_as(self, doing_business_as):
        """Sets the doing_business_as of this Organization.

        The organization's trading name, if different from the registered legal name.

        :param doing_business_as: The doing_business_as of this Organization.
        :type doing_business_as: str
        """

        self._doing_business_as = doing_business_as

    @property
    def email(self):
        """Gets the email of this Organization.

        The email address of the legal entity.

        :return: The email of this Organization.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this Organization.

        The email address of the legal entity.

        :param email: The email of this Organization.
        :type email: str
        """

        self._email = email

    @property
    def legal_name(self):
        """Gets the legal_name of this Organization.

        The organization's legal name.

        :return: The legal_name of this Organization.
        :rtype: str
        """
        return self._legal_name

    @legal_name.setter
    def legal_name(self, legal_name):
        """Sets the legal_name of this Organization.

        The organization's legal name.

        :param legal_name: The legal_name of this Organization.
        :type legal_name: str
        """
        if legal_name is None:
            raise ValueError("Invalid value for `legal_name`, must not be `None`")

        self._legal_name = legal_name

    @property
    def phone(self):
        """Gets the phone of this Organization.

        The phone number of the legal entity.

        :return: The phone of this Organization.
        :rtype: PhoneNumber
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this Organization.

        The phone number of the legal entity.

        :param phone: The phone of this Organization.
        :type phone: PhoneNumber
        """

        self._phone = phone

    @property
    def principal_place_of_business(self):
        """Gets the principal_place_of_business of this Organization.

        The address where the organization operates from. Provide this if the principal place of business is different from the `registeredAddress`.

        :return: The principal_place_of_business of this Organization.
        :rtype: Address
        """
        return self._principal_place_of_business

    @principal_place_of_business.setter
    def principal_place_of_business(self, principal_place_of_business):
        """Sets the principal_place_of_business of this Organization.

        The address where the organization operates from. Provide this if the principal place of business is different from the `registeredAddress`.

        :param principal_place_of_business: The principal_place_of_business of this Organization.
        :type principal_place_of_business: Address
        """

        self._principal_place_of_business = principal_place_of_business

    @property
    def registered_address(self):
        """Gets the registered_address of this Organization.

        The address of the organization registered at their registrar (such as the Chamber of Commerce).

        :return: The registered_address of this Organization.
        :rtype: Address
        """
        return self._registered_address

    @registered_address.setter
    def registered_address(self, registered_address):
        """Sets the registered_address of this Organization.

        The address of the organization registered at their registrar (such as the Chamber of Commerce).

        :param registered_address: The registered_address of this Organization.
        :type registered_address: Address
        """
        if registered_address is None:
            raise ValueError("Invalid value for `registered_address`, must not be `None`")

        self._registered_address = registered_address

    @property
    def registration_number(self):
        """Gets the registration_number of this Organization.

        The organization's registration number.

        :return: The registration_number of this Organization.
        :rtype: str
        """
        return self._registration_number

    @registration_number.setter
    def registration_number(self, registration_number):
        """Sets the registration_number of this Organization.

        The organization's registration number.

        :param registration_number: The registration_number of this Organization.
        :type registration_number: str
        """

        self._registration_number = registration_number

    @property
    def stock_data(self):
        """Gets the stock_data of this Organization.

        Information about the organization's publicly traded stock. Provide this object only if `type` is **listedPublicCompany**.

        :return: The stock_data of this Organization.
        :rtype: StockData
        """
        return self._stock_data

    @stock_data.setter
    def stock_data(self, stock_data):
        """Sets the stock_data of this Organization.

        Information about the organization's publicly traded stock. Provide this object only if `type` is **listedPublicCompany**.

        :param stock_data: The stock_data of this Organization.
        :type stock_data: StockData
        """

        self._stock_data = stock_data

    @property
    def tax_information(self):
        """Gets the tax_information of this Organization.

        The tax information of the organization.

        :return: The tax_information of this Organization.
        :rtype: List[TaxInformation]
        """
        return self._tax_information

    @tax_information.setter
    def tax_information(self, tax_information):
        """Sets the tax_information of this Organization.

        The tax information of the organization.

        :param tax_information: The tax_information of this Organization.
        :type tax_information: List[TaxInformation]
        """

        self._tax_information = tax_information

    @property
    def tax_reporting_classification(self):
        """Gets the tax_reporting_classification of this Organization.

        The tax reporting classification (FATCA/CRS self-certification) of the organization.

        :return: The tax_reporting_classification of this Organization.
        :rtype: TaxReportingClassification
        """
        return self._tax_reporting_classification

    @tax_reporting_classification.setter
    def tax_reporting_classification(self, tax_reporting_classification):
        """Sets the tax_reporting_classification of this Organization.

        The tax reporting classification (FATCA/CRS self-certification) of the organization.

        :param tax_reporting_classification: The tax_reporting_classification of this Organization.
        :type tax_reporting_classification: TaxReportingClassification
        """

        self._tax_reporting_classification = tax_reporting_classification

    @property
    def type(self):
        """Gets the type of this Organization.

        Type of organization.  Possible values: **associationIncorporated**, **governmentalOrganization**, **listedPublicCompany**, **nonProfit**, **partnershipIncorporated**, **privateCompany**.

        :return: The type of this Organization.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Organization.

        Type of organization.  Possible values: **associationIncorporated**, **governmentalOrganization**, **listedPublicCompany**, **nonProfit**, **partnershipIncorporated**, **privateCompany**.

        :param type: The type of this Organization.
        :type type: str
        """
        allowed_values = ["associationIncorporated", "governmentalOrganization", "listedPublicCompany", "nonProfit", "partnershipIncorporated", "privateCompany"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def vat_absence_reason(self):
        """Gets the vat_absence_reason of this Organization.

        The reason the organization has not provided a VAT number.  Possible values: **industryExemption**, **belowTaxThreshold**.

        :return: The vat_absence_reason of this Organization.
        :rtype: str
        """
        return self._vat_absence_reason

    @vat_absence_reason.setter
    def vat_absence_reason(self, vat_absence_reason):
        """Sets the vat_absence_reason of this Organization.

        The reason the organization has not provided a VAT number.  Possible values: **industryExemption**, **belowTaxThreshold**.

        :param vat_absence_reason: The vat_absence_reason of this Organization.
        :type vat_absence_reason: str
        """
        allowed_values = ["industryExemption", "belowTaxThreshold"]  # noqa: E501
        if vat_absence_reason not in allowed_values:
            raise ValueError(
                "Invalid value for `vat_absence_reason` ({0}), must be one of {1}"
                .format(vat_absence_reason, allowed_values)
            )

        self._vat_absence_reason = vat_absence_reason

    @property
    def vat_number(self):
        """Gets the vat_number of this Organization.

        The organization's VAT number.

        :return: The vat_number of this Organization.
        :rtype: str
        """
        return self._vat_number

    @vat_number.setter
    def vat_number(self, vat_number):
        """Sets the vat_number of this Organization.

        The organization's VAT number.

        :param vat_number: The vat_number of this Organization.
        :type vat_number: str
        """

        self._vat_number = vat_number

    @property
    def web_data(self):
        """Gets the web_data of this Organization.

        The website and app URL of the legal entity.

        :return: The web_data of this Organization.
        :rtype: WebData
        """
        return self._web_data

    @web_data.setter
    def web_data(self, web_data):
        """Sets the web_data of this Organization.

        The website and app URL of the legal entity.

        :param web_data: The web_data of this Organization.
        :type web_data: WebData
        """

        self._web_data = web_data
