# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TaxInformation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, country: str=None, number: str=None, type: str=None):
        """TaxInformation - a model defined in OpenAPI

        :param country: The country of this TaxInformation.
        :param number: The number of this TaxInformation.
        :param type: The type of this TaxInformation.
        """
        self.openapi_types = {
            'country': str,
            'number': str,
            'type': str
        }

        self.attribute_map = {
            'country': 'country',
            'number': 'number',
            'type': 'type'
        }

        self._country = country
        self._number = number
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TaxInformation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TaxInformation of this TaxInformation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def country(self):
        """Gets the country of this TaxInformation.

        The two-letter [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code.

        :return: The country of this TaxInformation.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this TaxInformation.

        The two-letter [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code.

        :param country: The country of this TaxInformation.
        :type country: str
        """
        if country is not None and len(country) > 2:
            raise ValueError("Invalid value for `country`, length must be less than or equal to `2`")
        if country is not None and len(country) < 2:
            raise ValueError("Invalid value for `country`, length must be greater than or equal to `2`")

        self._country = country

    @property
    def number(self):
        """Gets the number of this TaxInformation.

        The tax ID number (TIN) of the organization or individual.

        :return: The number of this TaxInformation.
        :rtype: str
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this TaxInformation.

        The tax ID number (TIN) of the organization or individual.

        :param number: The number of this TaxInformation.
        :type number: str
        """

        self._number = number

    @property
    def type(self):
        """Gets the type of this TaxInformation.

        The TIN type depending on the country where it was issued. Provide only for countries that have multiple tax IDs, such as Sweden, the UK, or the US. For example, provide **SSN**, **EIN**, or **ITIN** for the US.

        :return: The type of this TaxInformation.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this TaxInformation.

        The TIN type depending on the country where it was issued. Provide only for countries that have multiple tax IDs, such as Sweden, the UK, or the US. For example, provide **SSN**, **EIN**, or **ITIN** for the US.

        :param type: The type of this TaxInformation.
        :type type: str
        """

        self._type = type
