# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.capability_problem import CapabilityProblem
from openapi_server.models.document_reference import DocumentReference
from openapi_server.models.entity_reference import EntityReference
from openapi_server.models.individual import Individual
from openapi_server.models.legal_entity_association import LegalEntityAssociation
from openapi_server.models.legal_entity_capability import LegalEntityCapability
from openapi_server.models.organization import Organization
from openapi_server.models.sole_proprietorship import SoleProprietorship
from openapi_server.models.transfer_instrument_reference import TransferInstrumentReference
from openapi_server.models.trust import Trust
from openapi_server.models.unincorporated_partnership import UnincorporatedPartnership
from openapi_server.models.verification_deadline import VerificationDeadline
from openapi_server import util


class LegalEntity(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, capabilities: Dict[str, LegalEntityCapability]=None, document_details: List[DocumentReference]=None, documents: List[EntityReference]=None, entity_associations: List[LegalEntityAssociation]=None, id: str=None, individual: Individual=None, organization: Organization=None, problems: List[CapabilityProblem]=None, reference: str=None, sole_proprietorship: SoleProprietorship=None, transfer_instruments: List[TransferInstrumentReference]=None, trust: Trust=None, type: str=None, unincorporated_partnership: UnincorporatedPartnership=None, verification_deadlines: List[VerificationDeadline]=None, verification_plan: str=None):
        """LegalEntity - a model defined in OpenAPI

        :param capabilities: The capabilities of this LegalEntity.
        :param document_details: The document_details of this LegalEntity.
        :param documents: The documents of this LegalEntity.
        :param entity_associations: The entity_associations of this LegalEntity.
        :param id: The id of this LegalEntity.
        :param individual: The individual of this LegalEntity.
        :param organization: The organization of this LegalEntity.
        :param problems: The problems of this LegalEntity.
        :param reference: The reference of this LegalEntity.
        :param sole_proprietorship: The sole_proprietorship of this LegalEntity.
        :param transfer_instruments: The transfer_instruments of this LegalEntity.
        :param trust: The trust of this LegalEntity.
        :param type: The type of this LegalEntity.
        :param unincorporated_partnership: The unincorporated_partnership of this LegalEntity.
        :param verification_deadlines: The verification_deadlines of this LegalEntity.
        :param verification_plan: The verification_plan of this LegalEntity.
        """
        self.openapi_types = {
            'capabilities': Dict[str, LegalEntityCapability],
            'document_details': List[DocumentReference],
            'documents': List[EntityReference],
            'entity_associations': List[LegalEntityAssociation],
            'id': str,
            'individual': Individual,
            'organization': Organization,
            'problems': List[CapabilityProblem],
            'reference': str,
            'sole_proprietorship': SoleProprietorship,
            'transfer_instruments': List[TransferInstrumentReference],
            'trust': Trust,
            'type': str,
            'unincorporated_partnership': UnincorporatedPartnership,
            'verification_deadlines': List[VerificationDeadline],
            'verification_plan': str
        }

        self.attribute_map = {
            'capabilities': 'capabilities',
            'document_details': 'documentDetails',
            'documents': 'documents',
            'entity_associations': 'entityAssociations',
            'id': 'id',
            'individual': 'individual',
            'organization': 'organization',
            'problems': 'problems',
            'reference': 'reference',
            'sole_proprietorship': 'soleProprietorship',
            'transfer_instruments': 'transferInstruments',
            'trust': 'trust',
            'type': 'type',
            'unincorporated_partnership': 'unincorporatedPartnership',
            'verification_deadlines': 'verificationDeadlines',
            'verification_plan': 'verificationPlan'
        }

        self._capabilities = capabilities
        self._document_details = document_details
        self._documents = documents
        self._entity_associations = entity_associations
        self._id = id
        self._individual = individual
        self._organization = organization
        self._problems = problems
        self._reference = reference
        self._sole_proprietorship = sole_proprietorship
        self._transfer_instruments = transfer_instruments
        self._trust = trust
        self._type = type
        self._unincorporated_partnership = unincorporated_partnership
        self._verification_deadlines = verification_deadlines
        self._verification_plan = verification_plan

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LegalEntity':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LegalEntity of this LegalEntity.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def capabilities(self):
        """Gets the capabilities of this LegalEntity.

        Contains key-value pairs that specify the actions that the legal entity can do in your platform.The key is a capability required for your integration. For example, **issueCard** for Issuing.The value is an object containing the settings for the capability.

        :return: The capabilities of this LegalEntity.
        :rtype: Dict[str, LegalEntityCapability]
        """
        return self._capabilities

    @capabilities.setter
    def capabilities(self, capabilities):
        """Sets the capabilities of this LegalEntity.

        Contains key-value pairs that specify the actions that the legal entity can do in your platform.The key is a capability required for your integration. For example, **issueCard** for Issuing.The value is an object containing the settings for the capability.

        :param capabilities: The capabilities of this LegalEntity.
        :type capabilities: Dict[str, LegalEntityCapability]
        """

        self._capabilities = capabilities

    @property
    def document_details(self):
        """Gets the document_details of this LegalEntity.

        List of documents uploaded for the legal entity.

        :return: The document_details of this LegalEntity.
        :rtype: List[DocumentReference]
        """
        return self._document_details

    @document_details.setter
    def document_details(self, document_details):
        """Sets the document_details of this LegalEntity.

        List of documents uploaded for the legal entity.

        :param document_details: The document_details of this LegalEntity.
        :type document_details: List[DocumentReference]
        """

        self._document_details = document_details

    @property
    def documents(self):
        """Gets the documents of this LegalEntity.

        List of documents uploaded for the legal entity.

        :return: The documents of this LegalEntity.
        :rtype: List[EntityReference]
        """
        return self._documents

    @documents.setter
    def documents(self, documents):
        """Sets the documents of this LegalEntity.

        List of documents uploaded for the legal entity.

        :param documents: The documents of this LegalEntity.
        :type documents: List[EntityReference]
        """

        self._documents = documents

    @property
    def entity_associations(self):
        """Gets the entity_associations of this LegalEntity.

        List of legal entities associated with the current legal entity. For example, ultimate beneficial owners associated with an organization through ownership or control, or as signatories.

        :return: The entity_associations of this LegalEntity.
        :rtype: List[LegalEntityAssociation]
        """
        return self._entity_associations

    @entity_associations.setter
    def entity_associations(self, entity_associations):
        """Sets the entity_associations of this LegalEntity.

        List of legal entities associated with the current legal entity. For example, ultimate beneficial owners associated with an organization through ownership or control, or as signatories.

        :param entity_associations: The entity_associations of this LegalEntity.
        :type entity_associations: List[LegalEntityAssociation]
        """

        self._entity_associations = entity_associations

    @property
    def id(self):
        """Gets the id of this LegalEntity.

        The unique identifier of the legal entity.

        :return: The id of this LegalEntity.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this LegalEntity.

        The unique identifier of the legal entity.

        :param id: The id of this LegalEntity.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def individual(self):
        """Gets the individual of this LegalEntity.

        Information about the individual. Required if `type` is **individual**.

        :return: The individual of this LegalEntity.
        :rtype: Individual
        """
        return self._individual

    @individual.setter
    def individual(self, individual):
        """Sets the individual of this LegalEntity.

        Information about the individual. Required if `type` is **individual**.

        :param individual: The individual of this LegalEntity.
        :type individual: Individual
        """

        self._individual = individual

    @property
    def organization(self):
        """Gets the organization of this LegalEntity.

        Information about the organization. Required if `type` is **organization**.

        :return: The organization of this LegalEntity.
        :rtype: Organization
        """
        return self._organization

    @organization.setter
    def organization(self, organization):
        """Sets the organization of this LegalEntity.

        Information about the organization. Required if `type` is **organization**.

        :param organization: The organization of this LegalEntity.
        :type organization: Organization
        """

        self._organization = organization

    @property
    def problems(self):
        """Gets the problems of this LegalEntity.

        List of verification errors related to capabilities for the legal entity.

        :return: The problems of this LegalEntity.
        :rtype: List[CapabilityProblem]
        """
        return self._problems

    @problems.setter
    def problems(self, problems):
        """Sets the problems of this LegalEntity.

        List of verification errors related to capabilities for the legal entity.

        :param problems: The problems of this LegalEntity.
        :type problems: List[CapabilityProblem]
        """

        self._problems = problems

    @property
    def reference(self):
        """Gets the reference of this LegalEntity.

        Your reference for the legal entity, maximum 150 characters.

        :return: The reference of this LegalEntity.
        :rtype: str
        """
        return self._reference

    @reference.setter
    def reference(self, reference):
        """Sets the reference of this LegalEntity.

        Your reference for the legal entity, maximum 150 characters.

        :param reference: The reference of this LegalEntity.
        :type reference: str
        """
        if reference is not None and len(reference) > 150:
            raise ValueError("Invalid value for `reference`, length must be less than or equal to `150`")

        self._reference = reference

    @property
    def sole_proprietorship(self):
        """Gets the sole_proprietorship of this LegalEntity.

        Information about the sole proprietorship. Required if `type` is **soleProprietorship**.

        :return: The sole_proprietorship of this LegalEntity.
        :rtype: SoleProprietorship
        """
        return self._sole_proprietorship

    @sole_proprietorship.setter
    def sole_proprietorship(self, sole_proprietorship):
        """Sets the sole_proprietorship of this LegalEntity.

        Information about the sole proprietorship. Required if `type` is **soleProprietorship**.

        :param sole_proprietorship: The sole_proprietorship of this LegalEntity.
        :type sole_proprietorship: SoleProprietorship
        """

        self._sole_proprietorship = sole_proprietorship

    @property
    def transfer_instruments(self):
        """Gets the transfer_instruments of this LegalEntity.

        List of transfer instruments that the legal entity owns.

        :return: The transfer_instruments of this LegalEntity.
        :rtype: List[TransferInstrumentReference]
        """
        return self._transfer_instruments

    @transfer_instruments.setter
    def transfer_instruments(self, transfer_instruments):
        """Sets the transfer_instruments of this LegalEntity.

        List of transfer instruments that the legal entity owns.

        :param transfer_instruments: The transfer_instruments of this LegalEntity.
        :type transfer_instruments: List[TransferInstrumentReference]
        """

        self._transfer_instruments = transfer_instruments

    @property
    def trust(self):
        """Gets the trust of this LegalEntity.

        Information about the trust. Required if `type` is **trust**.

        :return: The trust of this LegalEntity.
        :rtype: Trust
        """
        return self._trust

    @trust.setter
    def trust(self, trust):
        """Sets the trust of this LegalEntity.

        Information about the trust. Required if `type` is **trust**.

        :param trust: The trust of this LegalEntity.
        :type trust: Trust
        """

        self._trust = trust

    @property
    def type(self):
        """Gets the type of this LegalEntity.

        The type of legal entity.  Possible values: **individual**, **organization**, **soleProprietorship**, or **trust**.

        :return: The type of this LegalEntity.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this LegalEntity.

        The type of legal entity.  Possible values: **individual**, **organization**, **soleProprietorship**, or **trust**.

        :param type: The type of this LegalEntity.
        :type type: str
        """
        allowed_values = ["individual", "organization", "soleProprietorship", "trust", "unincorporatedPartnership"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def unincorporated_partnership(self):
        """Gets the unincorporated_partnership of this LegalEntity.

        Information about the unincorporated partnership. Required if `type` is **unincorporatedPartnership**.

        :return: The unincorporated_partnership of this LegalEntity.
        :rtype: UnincorporatedPartnership
        """
        return self._unincorporated_partnership

    @unincorporated_partnership.setter
    def unincorporated_partnership(self, unincorporated_partnership):
        """Sets the unincorporated_partnership of this LegalEntity.

        Information about the unincorporated partnership. Required if `type` is **unincorporatedPartnership**.

        :param unincorporated_partnership: The unincorporated_partnership of this LegalEntity.
        :type unincorporated_partnership: UnincorporatedPartnership
        """

        self._unincorporated_partnership = unincorporated_partnership

    @property
    def verification_deadlines(self):
        """Gets the verification_deadlines of this LegalEntity.

        List of verification deadlines and the capabilities that will be disallowed if verification errors are not resolved.

        :return: The verification_deadlines of this LegalEntity.
        :rtype: List[VerificationDeadline]
        """
        return self._verification_deadlines

    @verification_deadlines.setter
    def verification_deadlines(self, verification_deadlines):
        """Sets the verification_deadlines of this LegalEntity.

        List of verification deadlines and the capabilities that will be disallowed if verification errors are not resolved.

        :param verification_deadlines: The verification_deadlines of this LegalEntity.
        :type verification_deadlines: List[VerificationDeadline]
        """

        self._verification_deadlines = verification_deadlines

    @property
    def verification_plan(self):
        """Gets the verification_plan of this LegalEntity.

        A key-value pair that specifies the [verification process](https://docs.adyen.com/marketplaces-and-platforms/collect-verification-details/) for a legal entity. Set to **upfront** for [upfront verification](https://docs.adyen.com/marketplaces-and-platforms/collect-verification-details#upfront).

        :return: The verification_plan of this LegalEntity.
        :rtype: str
        """
        return self._verification_plan

    @verification_plan.setter
    def verification_plan(self, verification_plan):
        """Sets the verification_plan of this LegalEntity.

        A key-value pair that specifies the [verification process](https://docs.adyen.com/marketplaces-and-platforms/collect-verification-details/) for a legal entity. Set to **upfront** for [upfront verification](https://docs.adyen.com/marketplaces-and-platforms/collect-verification-details#upfront).

        :param verification_plan: The verification_plan of this LegalEntity.
        :type verification_plan: str
        """

        self._verification_plan = verification_plan
