# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.remediating_action import RemediatingAction
from openapi_server.models.verification_error_recursive import VerificationErrorRecursive
from openapi_server import util


class VerificationError(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, capabilities: List[str]=None, code: str=None, message: str=None, remediating_actions: List[RemediatingAction]=None, sub_errors: List[VerificationErrorRecursive]=None, type: str=None):
        """VerificationError - a model defined in OpenAPI

        :param capabilities: The capabilities of this VerificationError.
        :param code: The code of this VerificationError.
        :param message: The message of this VerificationError.
        :param remediating_actions: The remediating_actions of this VerificationError.
        :param sub_errors: The sub_errors of this VerificationError.
        :param type: The type of this VerificationError.
        """
        self.openapi_types = {
            'capabilities': List[str],
            'code': str,
            'message': str,
            'remediating_actions': List[RemediatingAction],
            'sub_errors': List[VerificationErrorRecursive],
            'type': str
        }

        self.attribute_map = {
            'capabilities': 'capabilities',
            'code': 'code',
            'message': 'message',
            'remediating_actions': 'remediatingActions',
            'sub_errors': 'subErrors',
            'type': 'type'
        }

        self._capabilities = capabilities
        self._code = code
        self._message = message
        self._remediating_actions = remediating_actions
        self._sub_errors = sub_errors
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VerificationError':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VerificationError of this VerificationError.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def capabilities(self):
        """Gets the capabilities of this VerificationError.

        Contains key-value pairs that specify the actions that the legal entity can do in your platform. The key is a capability required for your integration. For example, **issueCard** for Issuing.The value is an object containing the settings for the capability.

        :return: The capabilities of this VerificationError.
        :rtype: List[str]
        """
        return self._capabilities

    @capabilities.setter
    def capabilities(self, capabilities):
        """Sets the capabilities of this VerificationError.

        Contains key-value pairs that specify the actions that the legal entity can do in your platform. The key is a capability required for your integration. For example, **issueCard** for Issuing.The value is an object containing the settings for the capability.

        :param capabilities: The capabilities of this VerificationError.
        :type capabilities: List[str]
        """
        allowed_values = ["acceptExternalFunding", "acceptPspFunding", "acceptTransactionInRestrictedCountries", "acceptTransactionInRestrictedCountriesCommercial", "acceptTransactionInRestrictedCountriesConsumer", "acceptTransactionInRestrictedIndustries", "acceptTransactionInRestrictedIndustriesCommercial", "acceptTransactionInRestrictedIndustriesConsumer", "acquiring", "atmWithdrawal", "atmWithdrawalCommercial", "atmWithdrawalConsumer", "atmWithdrawalInRestrictedCountries", "atmWithdrawalInRestrictedCountriesCommercial", "atmWithdrawalInRestrictedCountriesConsumer", "authorisedPaymentInstrumentUser", "getGrantOffers", "issueBankAccount", "issueCard", "issueCardCommercial", "issueCardConsumer", "localAcceptance", "payout", "payoutToTransferInstrument", "processing", "receiveFromBalanceAccount", "receiveFromPlatformPayments", "receiveFromThirdParty", "receiveFromTransferInstrument", "receiveGrants", "receivePayments", "sendToBalanceAccount", "sendToThirdParty", "sendToTransferInstrument", "thirdPartyFunding", "useCard", "useCardCommercial", "useCardConsumer", "useCardInRestrictedCountries", "useCardInRestrictedCountriesCommercial", "useCardInRestrictedCountriesConsumer", "useCardInRestrictedIndustries", "useCardInRestrictedIndustriesCommercial", "useCardInRestrictedIndustriesConsumer", "withdrawFromAtm", "withdrawFromAtmCommercial", "withdrawFromAtmConsumer", "withdrawFromAtmInRestrictedCountries", "withdrawFromAtmInRestrictedCountriesCommercial", "withdrawFromAtmInRestrictedCountriesConsumer"]  # noqa: E501
        if not set(capabilities).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `capabilities` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(capabilities) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._capabilities = capabilities

    @property
    def code(self):
        """Gets the code of this VerificationError.

        The general error code.

        :return: The code of this VerificationError.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this VerificationError.

        The general error code.

        :param code: The code of this VerificationError.
        :type code: str
        """

        self._code = code

    @property
    def message(self):
        """Gets the message of this VerificationError.

        The general error message.

        :return: The message of this VerificationError.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this VerificationError.

        The general error message.

        :param message: The message of this VerificationError.
        :type message: str
        """

        self._message = message

    @property
    def remediating_actions(self):
        """Gets the remediating_actions of this VerificationError.

        An object containing possible solutions to fix a verification error.

        :return: The remediating_actions of this VerificationError.
        :rtype: List[RemediatingAction]
        """
        return self._remediating_actions

    @remediating_actions.setter
    def remediating_actions(self, remediating_actions):
        """Sets the remediating_actions of this VerificationError.

        An object containing possible solutions to fix a verification error.

        :param remediating_actions: The remediating_actions of this VerificationError.
        :type remediating_actions: List[RemediatingAction]
        """

        self._remediating_actions = remediating_actions

    @property
    def sub_errors(self):
        """Gets the sub_errors of this VerificationError.

        An array containing more granular information about the cause of the verification error.

        :return: The sub_errors of this VerificationError.
        :rtype: List[VerificationErrorRecursive]
        """
        return self._sub_errors

    @sub_errors.setter
    def sub_errors(self, sub_errors):
        """Sets the sub_errors of this VerificationError.

        An array containing more granular information about the cause of the verification error.

        :param sub_errors: The sub_errors of this VerificationError.
        :type sub_errors: List[VerificationErrorRecursive]
        """

        self._sub_errors = sub_errors

    @property
    def type(self):
        """Gets the type of this VerificationError.

        The type of error.

        :return: The type of this VerificationError.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this VerificationError.

        The type of error.

        :param type: The type of this VerificationError.
        :type type: str
        """
        allowed_values = ["dataMissing", "dataReview", "invalidInput", "pendingStatus", "rejected"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
