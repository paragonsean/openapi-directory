# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.bank_account_info_account_identification import BankAccountInfoAccountIdentification
from openapi_server import util


class BankAccountInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_identification: BankAccountInfoAccountIdentification=None, account_type: str=None, bank_name: str=None, country_code: str=None, trusted_source: bool=None):
        """BankAccountInfo - a model defined in OpenAPI

        :param account_identification: The account_identification of this BankAccountInfo.
        :param account_type: The account_type of this BankAccountInfo.
        :param bank_name: The bank_name of this BankAccountInfo.
        :param country_code: The country_code of this BankAccountInfo.
        :param trusted_source: The trusted_source of this BankAccountInfo.
        """
        self.openapi_types = {
            'account_identification': BankAccountInfoAccountIdentification,
            'account_type': str,
            'bank_name': str,
            'country_code': str,
            'trusted_source': bool
        }

        self.attribute_map = {
            'account_identification': 'accountIdentification',
            'account_type': 'accountType',
            'bank_name': 'bankName',
            'country_code': 'countryCode',
            'trusted_source': 'trustedSource'
        }

        self._account_identification = account_identification
        self._account_type = account_type
        self._bank_name = bank_name
        self._country_code = country_code
        self._trusted_source = trusted_source

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BankAccountInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BankAccountInfo of this BankAccountInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_identification(self):
        """Gets the account_identification of this BankAccountInfo.


        :return: The account_identification of this BankAccountInfo.
        :rtype: BankAccountInfoAccountIdentification
        """
        return self._account_identification

    @account_identification.setter
    def account_identification(self, account_identification):
        """Sets the account_identification of this BankAccountInfo.


        :param account_identification: The account_identification of this BankAccountInfo.
        :type account_identification: BankAccountInfoAccountIdentification
        """

        self._account_identification = account_identification

    @property
    def account_type(self):
        """Gets the account_type of this BankAccountInfo.

        The type of bank account.

        :return: The account_type of this BankAccountInfo.
        :rtype: str
        """
        return self._account_type

    @account_type.setter
    def account_type(self, account_type):
        """Sets the account_type of this BankAccountInfo.

        The type of bank account.

        :param account_type: The account_type of this BankAccountInfo.
        :type account_type: str
        """

        self._account_type = account_type

    @property
    def bank_name(self):
        """Gets the bank_name of this BankAccountInfo.

        The name of the banking institution where the bank account is held.

        :return: The bank_name of this BankAccountInfo.
        :rtype: str
        """
        return self._bank_name

    @bank_name.setter
    def bank_name(self, bank_name):
        """Sets the bank_name of this BankAccountInfo.

        The name of the banking institution where the bank account is held.

        :param bank_name: The bank_name of this BankAccountInfo.
        :type bank_name: str
        """

        self._bank_name = bank_name

    @property
    def country_code(self):
        """Gets the country_code of this BankAccountInfo.

        The two-character [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code where the bank account is registered. For example, **NL**.

        :return: The country_code of this BankAccountInfo.
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """Sets the country_code of this BankAccountInfo.

        The two-character [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code where the bank account is registered. For example, **NL**.

        :param country_code: The country_code of this BankAccountInfo.
        :type country_code: str
        """

        self._country_code = country_code

    @property
    def trusted_source(self):
        """Gets the trusted_source of this BankAccountInfo.

        Identifies if the bank account was created through [instant bank verification](https://docs.adyen.com/release-notes/platforms-and-financial-products#releaseNote=2023-05-08-hosted-onboarding).

        :return: The trusted_source of this BankAccountInfo.
        :rtype: bool
        """
        return self._trusted_source

    @trusted_source.setter
    def trusted_source(self, trusted_source):
        """Sets the trusted_source of this BankAccountInfo.

        Identifies if the bank account was created through [instant bank verification](https://docs.adyen.com/release-notes/platforms-and-financial-products#releaseNote=2023-05-08-hosted-onboarding).

        :param trusted_source: The trusted_source of this BankAccountInfo.
        :type trusted_source: bool
        """

        self._trusted_source = trusted_source
