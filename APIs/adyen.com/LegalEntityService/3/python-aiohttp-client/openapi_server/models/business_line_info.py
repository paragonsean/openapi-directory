# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.source_of_funds import SourceOfFunds
from openapi_server.models.web_data import WebData
from openapi_server.models.web_data_exemption import WebDataExemption
from openapi_server import util


class BusinessLineInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, capability: str=None, industry_code: str=None, legal_entity_id: str=None, sales_channels: List[str]=None, service: str=None, source_of_funds: SourceOfFunds=None, web_data: List[WebData]=None, web_data_exemption: WebDataExemption=None):
        """BusinessLineInfo - a model defined in OpenAPI

        :param capability: The capability of this BusinessLineInfo.
        :param industry_code: The industry_code of this BusinessLineInfo.
        :param legal_entity_id: The legal_entity_id of this BusinessLineInfo.
        :param sales_channels: The sales_channels of this BusinessLineInfo.
        :param service: The service of this BusinessLineInfo.
        :param source_of_funds: The source_of_funds of this BusinessLineInfo.
        :param web_data: The web_data of this BusinessLineInfo.
        :param web_data_exemption: The web_data_exemption of this BusinessLineInfo.
        """
        self.openapi_types = {
            'capability': str,
            'industry_code': str,
            'legal_entity_id': str,
            'sales_channels': List[str],
            'service': str,
            'source_of_funds': SourceOfFunds,
            'web_data': List[WebData],
            'web_data_exemption': WebDataExemption
        }

        self.attribute_map = {
            'capability': 'capability',
            'industry_code': 'industryCode',
            'legal_entity_id': 'legalEntityId',
            'sales_channels': 'salesChannels',
            'service': 'service',
            'source_of_funds': 'sourceOfFunds',
            'web_data': 'webData',
            'web_data_exemption': 'webDataExemption'
        }

        self._capability = capability
        self._industry_code = industry_code
        self._legal_entity_id = legal_entity_id
        self._sales_channels = sales_channels
        self._service = service
        self._source_of_funds = source_of_funds
        self._web_data = web_data
        self._web_data_exemption = web_data_exemption

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BusinessLineInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BusinessLineInfo of this BusinessLineInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def capability(self):
        """Gets the capability of this BusinessLineInfo.

        The capability for which you are creating the business line.  Possible values: **receivePayments**, **receiveFromPlatformPayments**, **issueBankAccount**

        :return: The capability of this BusinessLineInfo.
        :rtype: str
        """
        return self._capability

    @capability.setter
    def capability(self, capability):
        """Sets the capability of this BusinessLineInfo.

        The capability for which you are creating the business line.  Possible values: **receivePayments**, **receiveFromPlatformPayments**, **issueBankAccount**

        :param capability: The capability of this BusinessLineInfo.
        :type capability: str
        """
        allowed_values = ["receivePayments", "receiveFromPlatformPayments", "issueBankAccount"]  # noqa: E501
        if capability not in allowed_values:
            raise ValueError(
                "Invalid value for `capability` ({0}), must be one of {1}"
                .format(capability, allowed_values)
            )

        self._capability = capability

    @property
    def industry_code(self):
        """Gets the industry_code of this BusinessLineInfo.

        A code that represents the [industry of the legal entity](https://docs.adyen.com/marketplaces-and-platforms/verification-requirements/reference-additional-products/#list-industry-codes). For example, **4431A** for computer software stores.

        :return: The industry_code of this BusinessLineInfo.
        :rtype: str
        """
        return self._industry_code

    @industry_code.setter
    def industry_code(self, industry_code):
        """Sets the industry_code of this BusinessLineInfo.

        A code that represents the [industry of the legal entity](https://docs.adyen.com/marketplaces-and-platforms/verification-requirements/reference-additional-products/#list-industry-codes). For example, **4431A** for computer software stores.

        :param industry_code: The industry_code of this BusinessLineInfo.
        :type industry_code: str
        """
        if industry_code is None:
            raise ValueError("Invalid value for `industry_code`, must not be `None`")

        self._industry_code = industry_code

    @property
    def legal_entity_id(self):
        """Gets the legal_entity_id of this BusinessLineInfo.

        Unique identifier of the [legal entity](https://docs.adyen.com/api-explorer/#/legalentity/latest/post/legalEntities__resParam_id) that owns the business line.

        :return: The legal_entity_id of this BusinessLineInfo.
        :rtype: str
        """
        return self._legal_entity_id

    @legal_entity_id.setter
    def legal_entity_id(self, legal_entity_id):
        """Sets the legal_entity_id of this BusinessLineInfo.

        Unique identifier of the [legal entity](https://docs.adyen.com/api-explorer/#/legalentity/latest/post/legalEntities__resParam_id) that owns the business line.

        :param legal_entity_id: The legal_entity_id of this BusinessLineInfo.
        :type legal_entity_id: str
        """
        if legal_entity_id is None:
            raise ValueError("Invalid value for `legal_entity_id`, must not be `None`")

        self._legal_entity_id = legal_entity_id

    @property
    def sales_channels(self):
        """Gets the sales_channels of this BusinessLineInfo.

        A list of channels where goods or services are sold.  Possible values: **pos**, **posMoto**, **eCommerce**, **ecomMoto**, **payByLink**.  Required only in combination with the `service` **paymentProcessing**.

        :return: The sales_channels of this BusinessLineInfo.
        :rtype: List[str]
        """
        return self._sales_channels

    @sales_channels.setter
    def sales_channels(self, sales_channels):
        """Sets the sales_channels of this BusinessLineInfo.

        A list of channels where goods or services are sold.  Possible values: **pos**, **posMoto**, **eCommerce**, **ecomMoto**, **payByLink**.  Required only in combination with the `service` **paymentProcessing**.

        :param sales_channels: The sales_channels of this BusinessLineInfo.
        :type sales_channels: List[str]
        """

        self._sales_channels = sales_channels

    @property
    def service(self):
        """Gets the service of this BusinessLineInfo.

        The service for which you are creating the business line.    Possible values: *  **paymentProcessing** *  **banking**  

        :return: The service of this BusinessLineInfo.
        :rtype: str
        """
        return self._service

    @service.setter
    def service(self, service):
        """Sets the service of this BusinessLineInfo.

        The service for which you are creating the business line.    Possible values: *  **paymentProcessing** *  **banking**  

        :param service: The service of this BusinessLineInfo.
        :type service: str
        """
        allowed_values = ["paymentProcessing", "banking"]  # noqa: E501
        if service not in allowed_values:
            raise ValueError(
                "Invalid value for `service` ({0}), must be one of {1}"
                .format(service, allowed_values)
            )

        self._service = service

    @property
    def source_of_funds(self):
        """Gets the source_of_funds of this BusinessLineInfo.

        Contains information about the source of your user's funds. Required only for the `service` **banking**.

        :return: The source_of_funds of this BusinessLineInfo.
        :rtype: SourceOfFunds
        """
        return self._source_of_funds

    @source_of_funds.setter
    def source_of_funds(self, source_of_funds):
        """Sets the source_of_funds of this BusinessLineInfo.

        Contains information about the source of your user's funds. Required only for the `service` **banking**.

        :param source_of_funds: The source_of_funds of this BusinessLineInfo.
        :type source_of_funds: SourceOfFunds
        """

        self._source_of_funds = source_of_funds

    @property
    def web_data(self):
        """Gets the web_data of this BusinessLineInfo.

        List of website URLs where your user's goods or services are sold. When this is required for a service but your user does not have an online presence, provide the reason in the `webDataExemption` object.

        :return: The web_data of this BusinessLineInfo.
        :rtype: List[WebData]
        """
        return self._web_data

    @web_data.setter
    def web_data(self, web_data):
        """Sets the web_data of this BusinessLineInfo.

        List of website URLs where your user's goods or services are sold. When this is required for a service but your user does not have an online presence, provide the reason in the `webDataExemption` object.

        :param web_data: The web_data of this BusinessLineInfo.
        :type web_data: List[WebData]
        """

        self._web_data = web_data

    @property
    def web_data_exemption(self):
        """Gets the web_data_exemption of this BusinessLineInfo.

        The reason why the web data is not provided.

        :return: The web_data_exemption of this BusinessLineInfo.
        :rtype: WebDataExemption
        """
        return self._web_data_exemption

    @web_data_exemption.setter
    def web_data_exemption(self, web_data_exemption):
        """Sets the web_data_exemption of this BusinessLineInfo.

        The reason why the web data is not provided.

        :param web_data_exemption: The web_data_exemption of this BusinessLineInfo.
        :type web_data_exemption: WebDataExemption
        """

        self._web_data_exemption = web_data_exemption
