# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.amount import Amount
from openapi_server import util


class CapabilitySettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amount_per_industry: Dict[str, Amount]=None, authorized_card_users: bool=None, funding_source: List[str]=None, interval: str=None, max_amount: Amount=None):
        """CapabilitySettings - a model defined in OpenAPI

        :param amount_per_industry: The amount_per_industry of this CapabilitySettings.
        :param authorized_card_users: The authorized_card_users of this CapabilitySettings.
        :param funding_source: The funding_source of this CapabilitySettings.
        :param interval: The interval of this CapabilitySettings.
        :param max_amount: The max_amount of this CapabilitySettings.
        """
        self.openapi_types = {
            'amount_per_industry': Dict[str, Amount],
            'authorized_card_users': bool,
            'funding_source': List[str],
            'interval': str,
            'max_amount': Amount
        }

        self.attribute_map = {
            'amount_per_industry': 'amountPerIndustry',
            'authorized_card_users': 'authorizedCardUsers',
            'funding_source': 'fundingSource',
            'interval': 'interval',
            'max_amount': 'maxAmount'
        }

        self._amount_per_industry = amount_per_industry
        self._authorized_card_users = authorized_card_users
        self._funding_source = funding_source
        self._interval = interval
        self._max_amount = max_amount

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CapabilitySettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CapabilitySettings of this CapabilitySettings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amount_per_industry(self):
        """Gets the amount_per_industry of this CapabilitySettings.

        The maximum amount a card holder can spend per industry.

        :return: The amount_per_industry of this CapabilitySettings.
        :rtype: Dict[str, Amount]
        """
        return self._amount_per_industry

    @amount_per_industry.setter
    def amount_per_industry(self, amount_per_industry):
        """Sets the amount_per_industry of this CapabilitySettings.

        The maximum amount a card holder can spend per industry.

        :param amount_per_industry: The amount_per_industry of this CapabilitySettings.
        :type amount_per_industry: Dict[str, Amount]
        """

        self._amount_per_industry = amount_per_industry

    @property
    def authorized_card_users(self):
        """Gets the authorized_card_users of this CapabilitySettings.

        The number of card holders who can use the card.

        :return: The authorized_card_users of this CapabilitySettings.
        :rtype: bool
        """
        return self._authorized_card_users

    @authorized_card_users.setter
    def authorized_card_users(self, authorized_card_users):
        """Sets the authorized_card_users of this CapabilitySettings.

        The number of card holders who can use the card.

        :param authorized_card_users: The authorized_card_users of this CapabilitySettings.
        :type authorized_card_users: bool
        """

        self._authorized_card_users = authorized_card_users

    @property
    def funding_source(self):
        """Gets the funding_source of this CapabilitySettings.

        The funding source of the card, for example **debit**.

        :return: The funding_source of this CapabilitySettings.
        :rtype: List[str]
        """
        return self._funding_source

    @funding_source.setter
    def funding_source(self, funding_source):
        """Sets the funding_source of this CapabilitySettings.

        The funding source of the card, for example **debit**.

        :param funding_source: The funding_source of this CapabilitySettings.
        :type funding_source: List[str]
        """
        allowed_values = ["credit", "debit", "prepaid"]  # noqa: E501
        if not set(funding_source).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `funding_source` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(funding_source) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._funding_source = funding_source

    @property
    def interval(self):
        """Gets the interval of this CapabilitySettings.

        The period when the rule conditions apply.

        :return: The interval of this CapabilitySettings.
        :rtype: str
        """
        return self._interval

    @interval.setter
    def interval(self, interval):
        """Sets the interval of this CapabilitySettings.

        The period when the rule conditions apply.

        :param interval: The interval of this CapabilitySettings.
        :type interval: str
        """
        allowed_values = ["daily", "monthly", "weekly"]  # noqa: E501
        if interval not in allowed_values:
            raise ValueError(
                "Invalid value for `interval` ({0}), must be one of {1}"
                .format(interval, allowed_values)
            )

        self._interval = interval

    @property
    def max_amount(self):
        """Gets the max_amount of this CapabilitySettings.

        The maximum amount a card holder can withdraw per day.

        :return: The max_amount of this CapabilitySettings.
        :rtype: Amount
        """
        return self._max_amount

    @max_amount.setter
    def max_amount(self, max_amount):
        """Sets the max_amount of this CapabilitySettings.

        The maximum amount a card holder can withdraw per day.

        :param max_amount: The max_amount of this CapabilitySettings.
        :type max_amount: Amount
        """

        self._max_amount = max_amount
