# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GetTermsOfServiceDocumentResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, document: str=None, id: str=None, language: str=None, terms_of_service_document_id: str=None, type: str=None):
        """GetTermsOfServiceDocumentResponse - a model defined in OpenAPI

        :param document: The document of this GetTermsOfServiceDocumentResponse.
        :param id: The id of this GetTermsOfServiceDocumentResponse.
        :param language: The language of this GetTermsOfServiceDocumentResponse.
        :param terms_of_service_document_id: The terms_of_service_document_id of this GetTermsOfServiceDocumentResponse.
        :param type: The type of this GetTermsOfServiceDocumentResponse.
        """
        self.openapi_types = {
            'document': str,
            'id': str,
            'language': str,
            'terms_of_service_document_id': str,
            'type': str
        }

        self.attribute_map = {
            'document': 'document',
            'id': 'id',
            'language': 'language',
            'terms_of_service_document_id': 'termsOfServiceDocumentId',
            'type': 'type'
        }

        self._document = document
        self._id = id
        self._language = language
        self._terms_of_service_document_id = terms_of_service_document_id
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetTermsOfServiceDocumentResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetTermsOfServiceDocumentResponse of this GetTermsOfServiceDocumentResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def document(self):
        """Gets the document of this GetTermsOfServiceDocumentResponse.

        The Terms of Service document in Base64-encoded format.

        :return: The document of this GetTermsOfServiceDocumentResponse.
        :rtype: str
        """
        return self._document

    @document.setter
    def document(self, document):
        """Sets the document of this GetTermsOfServiceDocumentResponse.

        The Terms of Service document in Base64-encoded format.

        :param document: The document of this GetTermsOfServiceDocumentResponse.
        :type document: str
        """

        self._document = document

    @property
    def id(self):
        """Gets the id of this GetTermsOfServiceDocumentResponse.

        The unique identifier of the legal entity.

        :return: The id of this GetTermsOfServiceDocumentResponse.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GetTermsOfServiceDocumentResponse.

        The unique identifier of the legal entity.

        :param id: The id of this GetTermsOfServiceDocumentResponse.
        :type id: str
        """

        self._id = id

    @property
    def language(self):
        """Gets the language of this GetTermsOfServiceDocumentResponse.

        The language used for the Terms of Service document, specified by the two-letter [ISO 639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) language code. Possible value: **en** for English.

        :return: The language of this GetTermsOfServiceDocumentResponse.
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this GetTermsOfServiceDocumentResponse.

        The language used for the Terms of Service document, specified by the two-letter [ISO 639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) language code. Possible value: **en** for English.

        :param language: The language of this GetTermsOfServiceDocumentResponse.
        :type language: str
        """

        self._language = language

    @property
    def terms_of_service_document_id(self):
        """Gets the terms_of_service_document_id of this GetTermsOfServiceDocumentResponse.

        The unique identifier of the Terms of Service document.

        :return: The terms_of_service_document_id of this GetTermsOfServiceDocumentResponse.
        :rtype: str
        """
        return self._terms_of_service_document_id

    @terms_of_service_document_id.setter
    def terms_of_service_document_id(self, terms_of_service_document_id):
        """Sets the terms_of_service_document_id of this GetTermsOfServiceDocumentResponse.

        The unique identifier of the Terms of Service document.

        :param terms_of_service_document_id: The terms_of_service_document_id of this GetTermsOfServiceDocumentResponse.
        :type terms_of_service_document_id: str
        """

        self._terms_of_service_document_id = terms_of_service_document_id

    @property
    def type(self):
        """Gets the type of this GetTermsOfServiceDocumentResponse.

        The type of Terms of Service.  Possible values: *  **adyenForPlatformsManage** *  **adyenIssuing** *  **adyenForPlatformsAdvanced** *  **adyenCapital** *  **adyenAccount** *  **adyenCard** *  **adyenFranchisee** *  **adyenPccr**  

        :return: The type of this GetTermsOfServiceDocumentResponse.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this GetTermsOfServiceDocumentResponse.

        The type of Terms of Service.  Possible values: *  **adyenForPlatformsManage** *  **adyenIssuing** *  **adyenForPlatformsAdvanced** *  **adyenCapital** *  **adyenAccount** *  **adyenCard** *  **adyenFranchisee** *  **adyenPccr**  

        :param type: The type of this GetTermsOfServiceDocumentResponse.
        :type type: str
        """
        allowed_values = ["adyenAccount", "adyenCapital", "adyenCard", "adyenForPlatformsAdvanced", "adyenForPlatformsManage", "adyenFranchisee", "adyenIssuing", "adyenPccr"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
