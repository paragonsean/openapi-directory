# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.address import Address
from openapi_server.models.tax_information import TaxInformation
from openapi_server import util


class SoleProprietorship(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, country_of_governing_law: str=None, date_of_incorporation: str=None, description: str=None, doing_business_as: str=None, name: str=None, principal_place_of_business: Address=None, registered_address: Address=None, registration_number: str=None, tax_information: List[TaxInformation]=None, vat_absence_reason: str=None, vat_number: str=None):
        """SoleProprietorship - a model defined in OpenAPI

        :param country_of_governing_law: The country_of_governing_law of this SoleProprietorship.
        :param date_of_incorporation: The date_of_incorporation of this SoleProprietorship.
        :param description: The description of this SoleProprietorship.
        :param doing_business_as: The doing_business_as of this SoleProprietorship.
        :param name: The name of this SoleProprietorship.
        :param principal_place_of_business: The principal_place_of_business of this SoleProprietorship.
        :param registered_address: The registered_address of this SoleProprietorship.
        :param registration_number: The registration_number of this SoleProprietorship.
        :param tax_information: The tax_information of this SoleProprietorship.
        :param vat_absence_reason: The vat_absence_reason of this SoleProprietorship.
        :param vat_number: The vat_number of this SoleProprietorship.
        """
        self.openapi_types = {
            'country_of_governing_law': str,
            'date_of_incorporation': str,
            'description': str,
            'doing_business_as': str,
            'name': str,
            'principal_place_of_business': Address,
            'registered_address': Address,
            'registration_number': str,
            'tax_information': List[TaxInformation],
            'vat_absence_reason': str,
            'vat_number': str
        }

        self.attribute_map = {
            'country_of_governing_law': 'countryOfGoverningLaw',
            'date_of_incorporation': 'dateOfIncorporation',
            'description': 'description',
            'doing_business_as': 'doingBusinessAs',
            'name': 'name',
            'principal_place_of_business': 'principalPlaceOfBusiness',
            'registered_address': 'registeredAddress',
            'registration_number': 'registrationNumber',
            'tax_information': 'taxInformation',
            'vat_absence_reason': 'vatAbsenceReason',
            'vat_number': 'vatNumber'
        }

        self._country_of_governing_law = country_of_governing_law
        self._date_of_incorporation = date_of_incorporation
        self._description = description
        self._doing_business_as = doing_business_as
        self._name = name
        self._principal_place_of_business = principal_place_of_business
        self._registered_address = registered_address
        self._registration_number = registration_number
        self._tax_information = tax_information
        self._vat_absence_reason = vat_absence_reason
        self._vat_number = vat_number

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SoleProprietorship':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SoleProprietorship of this SoleProprietorship.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def country_of_governing_law(self):
        """Gets the country_of_governing_law of this SoleProprietorship.

        The two-character [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code of the governing country.

        :return: The country_of_governing_law of this SoleProprietorship.
        :rtype: str
        """
        return self._country_of_governing_law

    @country_of_governing_law.setter
    def country_of_governing_law(self, country_of_governing_law):
        """Sets the country_of_governing_law of this SoleProprietorship.

        The two-character [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code of the governing country.

        :param country_of_governing_law: The country_of_governing_law of this SoleProprietorship.
        :type country_of_governing_law: str
        """
        if country_of_governing_law is None:
            raise ValueError("Invalid value for `country_of_governing_law`, must not be `None`")

        self._country_of_governing_law = country_of_governing_law

    @property
    def date_of_incorporation(self):
        """Gets the date_of_incorporation of this SoleProprietorship.

        The date when the legal arrangement was incorporated in YYYY-MM-DD format.

        :return: The date_of_incorporation of this SoleProprietorship.
        :rtype: str
        """
        return self._date_of_incorporation

    @date_of_incorporation.setter
    def date_of_incorporation(self, date_of_incorporation):
        """Sets the date_of_incorporation of this SoleProprietorship.

        The date when the legal arrangement was incorporated in YYYY-MM-DD format.

        :param date_of_incorporation: The date_of_incorporation of this SoleProprietorship.
        :type date_of_incorporation: str
        """

        self._date_of_incorporation = date_of_incorporation

    @property
    def description(self):
        """Gets the description of this SoleProprietorship.

        Short description about the Legal Arrangement.

        :return: The description of this SoleProprietorship.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this SoleProprietorship.

        Short description about the Legal Arrangement.

        :param description: The description of this SoleProprietorship.
        :type description: str
        """

        self._description = description

    @property
    def doing_business_as(self):
        """Gets the doing_business_as of this SoleProprietorship.

        The registered name, if different from the `name`.

        :return: The doing_business_as of this SoleProprietorship.
        :rtype: str
        """
        return self._doing_business_as

    @doing_business_as.setter
    def doing_business_as(self, doing_business_as):
        """Sets the doing_business_as of this SoleProprietorship.

        The registered name, if different from the `name`.

        :param doing_business_as: The doing_business_as of this SoleProprietorship.
        :type doing_business_as: str
        """

        self._doing_business_as = doing_business_as

    @property
    def name(self):
        """Gets the name of this SoleProprietorship.

        The legal name.

        :return: The name of this SoleProprietorship.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SoleProprietorship.

        The legal name.

        :param name: The name of this SoleProprietorship.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def principal_place_of_business(self):
        """Gets the principal_place_of_business of this SoleProprietorship.

        The business address. Required if the principal place of business is different from the `registeredAddress`.

        :return: The principal_place_of_business of this SoleProprietorship.
        :rtype: Address
        """
        return self._principal_place_of_business

    @principal_place_of_business.setter
    def principal_place_of_business(self, principal_place_of_business):
        """Sets the principal_place_of_business of this SoleProprietorship.

        The business address. Required if the principal place of business is different from the `registeredAddress`.

        :param principal_place_of_business: The principal_place_of_business of this SoleProprietorship.
        :type principal_place_of_business: Address
        """

        self._principal_place_of_business = principal_place_of_business

    @property
    def registered_address(self):
        """Gets the registered_address of this SoleProprietorship.

        The address registered at the registrar, such as the Chamber of Commerce.

        :return: The registered_address of this SoleProprietorship.
        :rtype: Address
        """
        return self._registered_address

    @registered_address.setter
    def registered_address(self, registered_address):
        """Sets the registered_address of this SoleProprietorship.

        The address registered at the registrar, such as the Chamber of Commerce.

        :param registered_address: The registered_address of this SoleProprietorship.
        :type registered_address: Address
        """
        if registered_address is None:
            raise ValueError("Invalid value for `registered_address`, must not be `None`")

        self._registered_address = registered_address

    @property
    def registration_number(self):
        """Gets the registration_number of this SoleProprietorship.

        The registration number.

        :return: The registration_number of this SoleProprietorship.
        :rtype: str
        """
        return self._registration_number

    @registration_number.setter
    def registration_number(self, registration_number):
        """Sets the registration_number of this SoleProprietorship.

        The registration number.

        :param registration_number: The registration_number of this SoleProprietorship.
        :type registration_number: str
        """

        self._registration_number = registration_number

    @property
    def tax_information(self):
        """Gets the tax_information of this SoleProprietorship.

        The tax information of the entity.

        :return: The tax_information of this SoleProprietorship.
        :rtype: List[TaxInformation]
        """
        return self._tax_information

    @tax_information.setter
    def tax_information(self, tax_information):
        """Sets the tax_information of this SoleProprietorship.

        The tax information of the entity.

        :param tax_information: The tax_information of this SoleProprietorship.
        :type tax_information: List[TaxInformation]
        """

        self._tax_information = tax_information

    @property
    def vat_absence_reason(self):
        """Gets the vat_absence_reason of this SoleProprietorship.

        The reason for not providing a VAT number.  Possible values: **industryExemption**, **belowTaxThreshold**.

        :return: The vat_absence_reason of this SoleProprietorship.
        :rtype: str
        """
        return self._vat_absence_reason

    @vat_absence_reason.setter
    def vat_absence_reason(self, vat_absence_reason):
        """Sets the vat_absence_reason of this SoleProprietorship.

        The reason for not providing a VAT number.  Possible values: **industryExemption**, **belowTaxThreshold**.

        :param vat_absence_reason: The vat_absence_reason of this SoleProprietorship.
        :type vat_absence_reason: str
        """
        allowed_values = ["industryExemption", "belowTaxThreshold"]  # noqa: E501
        if vat_absence_reason not in allowed_values:
            raise ValueError(
                "Invalid value for `vat_absence_reason` ({0}), must be one of {1}"
                .format(vat_absence_reason, allowed_values)
            )

        self._vat_absence_reason = vat_absence_reason

    @property
    def vat_number(self):
        """Gets the vat_number of this SoleProprietorship.

        The VAT number.

        :return: The vat_number of this SoleProprietorship.
        :rtype: str
        """
        return self._vat_number

    @vat_number.setter
    def vat_number(self, vat_number):
        """Sets the vat_number of this SoleProprietorship.

        The VAT number.

        :param vat_number: The vat_number of this SoleProprietorship.
        :type vat_number: str
        """

        self._vat_number = vat_number
