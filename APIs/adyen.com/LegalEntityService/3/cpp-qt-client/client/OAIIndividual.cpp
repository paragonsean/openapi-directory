/**
 * Legal Entity Management API
 * The Legal Entity Management API enables you to manage legal entities that contain information required for verification.  ## Authentication Your Adyen contact will provide your API credential and an API key. To connect to the API, add an `X-API-Key` header with the API key as the value. For example:  ``` curl -H \"X-API-Key: YOUR_API_KEY\" \\ -H \"Content-Type: application/json\" \\ ... ``` Alternatively, you can use the username and password of your API credential to connect to the API using basic authentication. For example:  ``` curl -U \"ws_123456@Scope.Company_YOUR_COMPANY_ACCOUNT\":\"YourWsPassword\" \\ -H \"Content-Type: application/json\" \\ ... ``` ## Versioning The Legal Entity Management API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://kyc-test.adyen.com/lem/v3/legalEntities ``` >If you are using hosted onboarding and just beginning your integration, use v3 for your API requests. Otherwise, use v2.  ## Going live When going live, your Adyen contact will provide your API credential for the live environment. You can then use the API key or the username and password to send requests to `https://kyc-live.adyen.com/lem/v3`.  
 *
 * The version of the OpenAPI document: 3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIndividual.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIndividual::OAIIndividual(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIndividual::OAIIndividual() {
    this->initializeModel();
}

OAIIndividual::~OAIIndividual() {}

void OAIIndividual::initializeModel() {

    m_birth_data_isSet = false;
    m_birth_data_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_identification_data_isSet = false;
    m_identification_data_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_nationality_isSet = false;
    m_nationality_isValid = false;

    m_phone_isSet = false;
    m_phone_isValid = false;

    m_residential_address_isSet = false;
    m_residential_address_isValid = false;

    m_tax_information_isSet = false;
    m_tax_information_isValid = false;

    m_web_data_isSet = false;
    m_web_data_isValid = false;
}

void OAIIndividual::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIndividual::fromJsonObject(QJsonObject json) {

    m_birth_data_isValid = ::OpenAPI::fromJsonValue(m_birth_data, json[QString("birthData")]);
    m_birth_data_isSet = !json[QString("birthData")].isNull() && m_birth_data_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_identification_data_isValid = ::OpenAPI::fromJsonValue(m_identification_data, json[QString("identificationData")]);
    m_identification_data_isSet = !json[QString("identificationData")].isNull() && m_identification_data_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_nationality_isValid = ::OpenAPI::fromJsonValue(m_nationality, json[QString("nationality")]);
    m_nationality_isSet = !json[QString("nationality")].isNull() && m_nationality_isValid;

    m_phone_isValid = ::OpenAPI::fromJsonValue(m_phone, json[QString("phone")]);
    m_phone_isSet = !json[QString("phone")].isNull() && m_phone_isValid;

    m_residential_address_isValid = ::OpenAPI::fromJsonValue(m_residential_address, json[QString("residentialAddress")]);
    m_residential_address_isSet = !json[QString("residentialAddress")].isNull() && m_residential_address_isValid;

    m_tax_information_isValid = ::OpenAPI::fromJsonValue(m_tax_information, json[QString("taxInformation")]);
    m_tax_information_isSet = !json[QString("taxInformation")].isNull() && m_tax_information_isValid;

    m_web_data_isValid = ::OpenAPI::fromJsonValue(m_web_data, json[QString("webData")]);
    m_web_data_isSet = !json[QString("webData")].isNull() && m_web_data_isValid;
}

QString OAIIndividual::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIndividual::asJsonObject() const {
    QJsonObject obj;
    if (m_birth_data.isSet()) {
        obj.insert(QString("birthData"), ::OpenAPI::toJsonValue(m_birth_data));
    }
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_identification_data.isSet()) {
        obj.insert(QString("identificationData"), ::OpenAPI::toJsonValue(m_identification_data));
    }
    if (m_name.isSet()) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_nationality_isSet) {
        obj.insert(QString("nationality"), ::OpenAPI::toJsonValue(m_nationality));
    }
    if (m_phone.isSet()) {
        obj.insert(QString("phone"), ::OpenAPI::toJsonValue(m_phone));
    }
    if (m_residential_address.isSet()) {
        obj.insert(QString("residentialAddress"), ::OpenAPI::toJsonValue(m_residential_address));
    }
    if (m_tax_information.size() > 0) {
        obj.insert(QString("taxInformation"), ::OpenAPI::toJsonValue(m_tax_information));
    }
    if (m_web_data.isSet()) {
        obj.insert(QString("webData"), ::OpenAPI::toJsonValue(m_web_data));
    }
    return obj;
}

OAIBirthData OAIIndividual::getBirthData() const {
    return m_birth_data;
}
void OAIIndividual::setBirthData(const OAIBirthData &birth_data) {
    m_birth_data = birth_data;
    m_birth_data_isSet = true;
}

bool OAIIndividual::is_birth_data_Set() const{
    return m_birth_data_isSet;
}

bool OAIIndividual::is_birth_data_Valid() const{
    return m_birth_data_isValid;
}

QString OAIIndividual::getEmail() const {
    return m_email;
}
void OAIIndividual::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAIIndividual::is_email_Set() const{
    return m_email_isSet;
}

bool OAIIndividual::is_email_Valid() const{
    return m_email_isValid;
}

OAIIdentificationData OAIIndividual::getIdentificationData() const {
    return m_identification_data;
}
void OAIIndividual::setIdentificationData(const OAIIdentificationData &identification_data) {
    m_identification_data = identification_data;
    m_identification_data_isSet = true;
}

bool OAIIndividual::is_identification_data_Set() const{
    return m_identification_data_isSet;
}

bool OAIIndividual::is_identification_data_Valid() const{
    return m_identification_data_isValid;
}

OAIName OAIIndividual::getName() const {
    return m_name;
}
void OAIIndividual::setName(const OAIName &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIIndividual::is_name_Set() const{
    return m_name_isSet;
}

bool OAIIndividual::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIIndividual::getNationality() const {
    return m_nationality;
}
void OAIIndividual::setNationality(const QString &nationality) {
    m_nationality = nationality;
    m_nationality_isSet = true;
}

bool OAIIndividual::is_nationality_Set() const{
    return m_nationality_isSet;
}

bool OAIIndividual::is_nationality_Valid() const{
    return m_nationality_isValid;
}

OAIPhoneNumber OAIIndividual::getPhone() const {
    return m_phone;
}
void OAIIndividual::setPhone(const OAIPhoneNumber &phone) {
    m_phone = phone;
    m_phone_isSet = true;
}

bool OAIIndividual::is_phone_Set() const{
    return m_phone_isSet;
}

bool OAIIndividual::is_phone_Valid() const{
    return m_phone_isValid;
}

OAIAddress OAIIndividual::getResidentialAddress() const {
    return m_residential_address;
}
void OAIIndividual::setResidentialAddress(const OAIAddress &residential_address) {
    m_residential_address = residential_address;
    m_residential_address_isSet = true;
}

bool OAIIndividual::is_residential_address_Set() const{
    return m_residential_address_isSet;
}

bool OAIIndividual::is_residential_address_Valid() const{
    return m_residential_address_isValid;
}

QList<OAITaxInformation> OAIIndividual::getTaxInformation() const {
    return m_tax_information;
}
void OAIIndividual::setTaxInformation(const QList<OAITaxInformation> &tax_information) {
    m_tax_information = tax_information;
    m_tax_information_isSet = true;
}

bool OAIIndividual::is_tax_information_Set() const{
    return m_tax_information_isSet;
}

bool OAIIndividual::is_tax_information_Valid() const{
    return m_tax_information_isValid;
}

OAIWebData OAIIndividual::getWebData() const {
    return m_web_data;
}
void OAIIndividual::setWebData(const OAIWebData &web_data) {
    m_web_data = web_data;
    m_web_data_isSet = true;
}

bool OAIIndividual::is_web_data_Set() const{
    return m_web_data_isSet;
}

bool OAIIndividual::is_web_data_Valid() const{
    return m_web_data_isValid;
}

bool OAIIndividual::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_birth_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_identification_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_nationality_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phone.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_residential_address.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_information.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_web_data.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIndividual::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_residential_address_isValid && true;
}

} // namespace OpenAPI
