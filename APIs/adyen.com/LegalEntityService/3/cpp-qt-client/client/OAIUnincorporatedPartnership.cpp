/**
 * Legal Entity Management API
 * The Legal Entity Management API enables you to manage legal entities that contain information required for verification.  ## Authentication Your Adyen contact will provide your API credential and an API key. To connect to the API, add an `X-API-Key` header with the API key as the value. For example:  ``` curl -H \"X-API-Key: YOUR_API_KEY\" \\ -H \"Content-Type: application/json\" \\ ... ``` Alternatively, you can use the username and password of your API credential to connect to the API using basic authentication. For example:  ``` curl -U \"ws_123456@Scope.Company_YOUR_COMPANY_ACCOUNT\":\"YourWsPassword\" \\ -H \"Content-Type: application/json\" \\ ... ``` ## Versioning The Legal Entity Management API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://kyc-test.adyen.com/lem/v3/legalEntities ``` >If you are using hosted onboarding and just beginning your integration, use v3 for your API requests. Otherwise, use v2.  ## Going live When going live, your Adyen contact will provide your API credential for the live environment. You can then use the API key or the username and password to send requests to `https://kyc-live.adyen.com/lem/v3`.  
 *
 * The version of the OpenAPI document: 3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUnincorporatedPartnership.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUnincorporatedPartnership::OAIUnincorporatedPartnership(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUnincorporatedPartnership::OAIUnincorporatedPartnership() {
    this->initializeModel();
}

OAIUnincorporatedPartnership::~OAIUnincorporatedPartnership() {}

void OAIUnincorporatedPartnership::initializeModel() {

    m_country_of_governing_law_isSet = false;
    m_country_of_governing_law_isValid = false;

    m_date_of_incorporation_isSet = false;
    m_date_of_incorporation_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_doing_business_as_isSet = false;
    m_doing_business_as_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_principal_place_of_business_isSet = false;
    m_principal_place_of_business_isValid = false;

    m_registered_address_isSet = false;
    m_registered_address_isValid = false;

    m_registration_number_isSet = false;
    m_registration_number_isValid = false;

    m_tax_information_isSet = false;
    m_tax_information_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_vat_absence_reason_isSet = false;
    m_vat_absence_reason_isValid = false;

    m_vat_number_isSet = false;
    m_vat_number_isValid = false;
}

void OAIUnincorporatedPartnership::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUnincorporatedPartnership::fromJsonObject(QJsonObject json) {

    m_country_of_governing_law_isValid = ::OpenAPI::fromJsonValue(m_country_of_governing_law, json[QString("countryOfGoverningLaw")]);
    m_country_of_governing_law_isSet = !json[QString("countryOfGoverningLaw")].isNull() && m_country_of_governing_law_isValid;

    m_date_of_incorporation_isValid = ::OpenAPI::fromJsonValue(m_date_of_incorporation, json[QString("dateOfIncorporation")]);
    m_date_of_incorporation_isSet = !json[QString("dateOfIncorporation")].isNull() && m_date_of_incorporation_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_doing_business_as_isValid = ::OpenAPI::fromJsonValue(m_doing_business_as, json[QString("doingBusinessAs")]);
    m_doing_business_as_isSet = !json[QString("doingBusinessAs")].isNull() && m_doing_business_as_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_principal_place_of_business_isValid = ::OpenAPI::fromJsonValue(m_principal_place_of_business, json[QString("principalPlaceOfBusiness")]);
    m_principal_place_of_business_isSet = !json[QString("principalPlaceOfBusiness")].isNull() && m_principal_place_of_business_isValid;

    m_registered_address_isValid = ::OpenAPI::fromJsonValue(m_registered_address, json[QString("registeredAddress")]);
    m_registered_address_isSet = !json[QString("registeredAddress")].isNull() && m_registered_address_isValid;

    m_registration_number_isValid = ::OpenAPI::fromJsonValue(m_registration_number, json[QString("registrationNumber")]);
    m_registration_number_isSet = !json[QString("registrationNumber")].isNull() && m_registration_number_isValid;

    m_tax_information_isValid = ::OpenAPI::fromJsonValue(m_tax_information, json[QString("taxInformation")]);
    m_tax_information_isSet = !json[QString("taxInformation")].isNull() && m_tax_information_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_vat_absence_reason_isValid = ::OpenAPI::fromJsonValue(m_vat_absence_reason, json[QString("vatAbsenceReason")]);
    m_vat_absence_reason_isSet = !json[QString("vatAbsenceReason")].isNull() && m_vat_absence_reason_isValid;

    m_vat_number_isValid = ::OpenAPI::fromJsonValue(m_vat_number, json[QString("vatNumber")]);
    m_vat_number_isSet = !json[QString("vatNumber")].isNull() && m_vat_number_isValid;
}

QString OAIUnincorporatedPartnership::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUnincorporatedPartnership::asJsonObject() const {
    QJsonObject obj;
    if (m_country_of_governing_law_isSet) {
        obj.insert(QString("countryOfGoverningLaw"), ::OpenAPI::toJsonValue(m_country_of_governing_law));
    }
    if (m_date_of_incorporation_isSet) {
        obj.insert(QString("dateOfIncorporation"), ::OpenAPI::toJsonValue(m_date_of_incorporation));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_doing_business_as_isSet) {
        obj.insert(QString("doingBusinessAs"), ::OpenAPI::toJsonValue(m_doing_business_as));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_principal_place_of_business.isSet()) {
        obj.insert(QString("principalPlaceOfBusiness"), ::OpenAPI::toJsonValue(m_principal_place_of_business));
    }
    if (m_registered_address.isSet()) {
        obj.insert(QString("registeredAddress"), ::OpenAPI::toJsonValue(m_registered_address));
    }
    if (m_registration_number_isSet) {
        obj.insert(QString("registrationNumber"), ::OpenAPI::toJsonValue(m_registration_number));
    }
    if (m_tax_information.size() > 0) {
        obj.insert(QString("taxInformation"), ::OpenAPI::toJsonValue(m_tax_information));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_vat_absence_reason_isSet) {
        obj.insert(QString("vatAbsenceReason"), ::OpenAPI::toJsonValue(m_vat_absence_reason));
    }
    if (m_vat_number_isSet) {
        obj.insert(QString("vatNumber"), ::OpenAPI::toJsonValue(m_vat_number));
    }
    return obj;
}

QString OAIUnincorporatedPartnership::getCountryOfGoverningLaw() const {
    return m_country_of_governing_law;
}
void OAIUnincorporatedPartnership::setCountryOfGoverningLaw(const QString &country_of_governing_law) {
    m_country_of_governing_law = country_of_governing_law;
    m_country_of_governing_law_isSet = true;
}

bool OAIUnincorporatedPartnership::is_country_of_governing_law_Set() const{
    return m_country_of_governing_law_isSet;
}

bool OAIUnincorporatedPartnership::is_country_of_governing_law_Valid() const{
    return m_country_of_governing_law_isValid;
}

QString OAIUnincorporatedPartnership::getDateOfIncorporation() const {
    return m_date_of_incorporation;
}
void OAIUnincorporatedPartnership::setDateOfIncorporation(const QString &date_of_incorporation) {
    m_date_of_incorporation = date_of_incorporation;
    m_date_of_incorporation_isSet = true;
}

bool OAIUnincorporatedPartnership::is_date_of_incorporation_Set() const{
    return m_date_of_incorporation_isSet;
}

bool OAIUnincorporatedPartnership::is_date_of_incorporation_Valid() const{
    return m_date_of_incorporation_isValid;
}

QString OAIUnincorporatedPartnership::getDescription() const {
    return m_description;
}
void OAIUnincorporatedPartnership::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIUnincorporatedPartnership::is_description_Set() const{
    return m_description_isSet;
}

bool OAIUnincorporatedPartnership::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIUnincorporatedPartnership::getDoingBusinessAs() const {
    return m_doing_business_as;
}
void OAIUnincorporatedPartnership::setDoingBusinessAs(const QString &doing_business_as) {
    m_doing_business_as = doing_business_as;
    m_doing_business_as_isSet = true;
}

bool OAIUnincorporatedPartnership::is_doing_business_as_Set() const{
    return m_doing_business_as_isSet;
}

bool OAIUnincorporatedPartnership::is_doing_business_as_Valid() const{
    return m_doing_business_as_isValid;
}

QString OAIUnincorporatedPartnership::getName() const {
    return m_name;
}
void OAIUnincorporatedPartnership::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIUnincorporatedPartnership::is_name_Set() const{
    return m_name_isSet;
}

bool OAIUnincorporatedPartnership::is_name_Valid() const{
    return m_name_isValid;
}

OAIAddress OAIUnincorporatedPartnership::getPrincipalPlaceOfBusiness() const {
    return m_principal_place_of_business;
}
void OAIUnincorporatedPartnership::setPrincipalPlaceOfBusiness(const OAIAddress &principal_place_of_business) {
    m_principal_place_of_business = principal_place_of_business;
    m_principal_place_of_business_isSet = true;
}

bool OAIUnincorporatedPartnership::is_principal_place_of_business_Set() const{
    return m_principal_place_of_business_isSet;
}

bool OAIUnincorporatedPartnership::is_principal_place_of_business_Valid() const{
    return m_principal_place_of_business_isValid;
}

OAIAddress OAIUnincorporatedPartnership::getRegisteredAddress() const {
    return m_registered_address;
}
void OAIUnincorporatedPartnership::setRegisteredAddress(const OAIAddress &registered_address) {
    m_registered_address = registered_address;
    m_registered_address_isSet = true;
}

bool OAIUnincorporatedPartnership::is_registered_address_Set() const{
    return m_registered_address_isSet;
}

bool OAIUnincorporatedPartnership::is_registered_address_Valid() const{
    return m_registered_address_isValid;
}

QString OAIUnincorporatedPartnership::getRegistrationNumber() const {
    return m_registration_number;
}
void OAIUnincorporatedPartnership::setRegistrationNumber(const QString &registration_number) {
    m_registration_number = registration_number;
    m_registration_number_isSet = true;
}

bool OAIUnincorporatedPartnership::is_registration_number_Set() const{
    return m_registration_number_isSet;
}

bool OAIUnincorporatedPartnership::is_registration_number_Valid() const{
    return m_registration_number_isValid;
}

QList<OAITaxInformation> OAIUnincorporatedPartnership::getTaxInformation() const {
    return m_tax_information;
}
void OAIUnincorporatedPartnership::setTaxInformation(const QList<OAITaxInformation> &tax_information) {
    m_tax_information = tax_information;
    m_tax_information_isSet = true;
}

bool OAIUnincorporatedPartnership::is_tax_information_Set() const{
    return m_tax_information_isSet;
}

bool OAIUnincorporatedPartnership::is_tax_information_Valid() const{
    return m_tax_information_isValid;
}

QString OAIUnincorporatedPartnership::getType() const {
    return m_type;
}
void OAIUnincorporatedPartnership::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIUnincorporatedPartnership::is_type_Set() const{
    return m_type_isSet;
}

bool OAIUnincorporatedPartnership::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIUnincorporatedPartnership::getVatAbsenceReason() const {
    return m_vat_absence_reason;
}
void OAIUnincorporatedPartnership::setVatAbsenceReason(const QString &vat_absence_reason) {
    m_vat_absence_reason = vat_absence_reason;
    m_vat_absence_reason_isSet = true;
}

bool OAIUnincorporatedPartnership::is_vat_absence_reason_Set() const{
    return m_vat_absence_reason_isSet;
}

bool OAIUnincorporatedPartnership::is_vat_absence_reason_Valid() const{
    return m_vat_absence_reason_isValid;
}

QString OAIUnincorporatedPartnership::getVatNumber() const {
    return m_vat_number;
}
void OAIUnincorporatedPartnership::setVatNumber(const QString &vat_number) {
    m_vat_number = vat_number;
    m_vat_number_isSet = true;
}

bool OAIUnincorporatedPartnership::is_vat_number_Set() const{
    return m_vat_number_isSet;
}

bool OAIUnincorporatedPartnership::is_vat_number_Valid() const{
    return m_vat_number_isValid;
}

bool OAIUnincorporatedPartnership::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_country_of_governing_law_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_of_incorporation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_doing_business_as_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_principal_place_of_business.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_registered_address.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_registration_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_information.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vat_absence_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vat_number_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUnincorporatedPartnership::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_country_of_governing_law_isValid && m_name_isValid && m_registered_address_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
