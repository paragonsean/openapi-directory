/**
 * Legal Entity Management API
 * The Legal Entity Management API enables you to manage legal entities that contain information required for verification.  ## Authentication Your Adyen contact will provide your API credential and an API key. To connect to the API, add an `X-API-Key` header with the API key as the value. For example:  ``` curl -H \"X-API-Key: YOUR_API_KEY\" \\ -H \"Content-Type: application/json\" \\ ... ``` Alternatively, you can use the username and password of your API credential to connect to the API using basic authentication. For example:  ``` curl -U \"ws_123456@Scope.Company_YOUR_COMPANY_ACCOUNT\":\"YourWsPassword\" \\ -H \"Content-Type: application/json\" \\ ... ``` ## Versioning The Legal Entity Management API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://kyc-test.adyen.com/lem/v3/legalEntities ``` >If you are using hosted onboarding and just beginning your integration, use v3 for your API requests. Otherwise, use v2.  ## Going live When going live, your Adyen contact will provide your API credential for the live environment. You can then use the API key or the username and password to send requests to `https://kyc-live.adyen.com/lem/v3`.  
 *
 * The version of the OpenAPI document: 3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISupportingEntityCapability.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISupportingEntityCapability::OAISupportingEntityCapability(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISupportingEntityCapability::OAISupportingEntityCapability() {
    this->initializeModel();
}

OAISupportingEntityCapability::~OAISupportingEntityCapability() {}

void OAISupportingEntityCapability::initializeModel() {

    m_allowed_isSet = false;
    m_allowed_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_requested_isSet = false;
    m_requested_isValid = false;

    m_verification_status_isSet = false;
    m_verification_status_isValid = false;
}

void OAISupportingEntityCapability::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISupportingEntityCapability::fromJsonObject(QJsonObject json) {

    m_allowed_isValid = ::OpenAPI::fromJsonValue(m_allowed, json[QString("allowed")]);
    m_allowed_isSet = !json[QString("allowed")].isNull() && m_allowed_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_requested_isValid = ::OpenAPI::fromJsonValue(m_requested, json[QString("requested")]);
    m_requested_isSet = !json[QString("requested")].isNull() && m_requested_isValid;

    m_verification_status_isValid = ::OpenAPI::fromJsonValue(m_verification_status, json[QString("verificationStatus")]);
    m_verification_status_isSet = !json[QString("verificationStatus")].isNull() && m_verification_status_isValid;
}

QString OAISupportingEntityCapability::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISupportingEntityCapability::asJsonObject() const {
    QJsonObject obj;
    if (m_allowed_isSet) {
        obj.insert(QString("allowed"), ::OpenAPI::toJsonValue(m_allowed));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_requested_isSet) {
        obj.insert(QString("requested"), ::OpenAPI::toJsonValue(m_requested));
    }
    if (m_verification_status_isSet) {
        obj.insert(QString("verificationStatus"), ::OpenAPI::toJsonValue(m_verification_status));
    }
    return obj;
}

bool OAISupportingEntityCapability::isAllowed() const {
    return m_allowed;
}
void OAISupportingEntityCapability::setAllowed(const bool &allowed) {
    m_allowed = allowed;
    m_allowed_isSet = true;
}

bool OAISupportingEntityCapability::is_allowed_Set() const{
    return m_allowed_isSet;
}

bool OAISupportingEntityCapability::is_allowed_Valid() const{
    return m_allowed_isValid;
}

QString OAISupportingEntityCapability::getId() const {
    return m_id;
}
void OAISupportingEntityCapability::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAISupportingEntityCapability::is_id_Set() const{
    return m_id_isSet;
}

bool OAISupportingEntityCapability::is_id_Valid() const{
    return m_id_isValid;
}

bool OAISupportingEntityCapability::isRequested() const {
    return m_requested;
}
void OAISupportingEntityCapability::setRequested(const bool &requested) {
    m_requested = requested;
    m_requested_isSet = true;
}

bool OAISupportingEntityCapability::is_requested_Set() const{
    return m_requested_isSet;
}

bool OAISupportingEntityCapability::is_requested_Valid() const{
    return m_requested_isValid;
}

QString OAISupportingEntityCapability::getVerificationStatus() const {
    return m_verification_status;
}
void OAISupportingEntityCapability::setVerificationStatus(const QString &verification_status) {
    m_verification_status = verification_status;
    m_verification_status_isSet = true;
}

bool OAISupportingEntityCapability::is_verification_status_Set() const{
    return m_verification_status_isSet;
}

bool OAISupportingEntityCapability::is_verification_status_Valid() const{
    return m_verification_status_isValid;
}

bool OAISupportingEntityCapability::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allowed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_requested_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_verification_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISupportingEntityCapability::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
