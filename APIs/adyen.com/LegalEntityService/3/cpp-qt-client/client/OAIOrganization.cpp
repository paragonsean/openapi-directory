/**
 * Legal Entity Management API
 * The Legal Entity Management API enables you to manage legal entities that contain information required for verification.  ## Authentication Your Adyen contact will provide your API credential and an API key. To connect to the API, add an `X-API-Key` header with the API key as the value. For example:  ``` curl -H \"X-API-Key: YOUR_API_KEY\" \\ -H \"Content-Type: application/json\" \\ ... ``` Alternatively, you can use the username and password of your API credential to connect to the API using basic authentication. For example:  ``` curl -U \"ws_123456@Scope.Company_YOUR_COMPANY_ACCOUNT\":\"YourWsPassword\" \\ -H \"Content-Type: application/json\" \\ ... ``` ## Versioning The Legal Entity Management API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://kyc-test.adyen.com/lem/v3/legalEntities ``` >If you are using hosted onboarding and just beginning your integration, use v3 for your API requests. Otherwise, use v2.  ## Going live When going live, your Adyen contact will provide your API credential for the live environment. You can then use the API key or the username and password to send requests to `https://kyc-live.adyen.com/lem/v3`.  
 *
 * The version of the OpenAPI document: 3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOrganization.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOrganization::OAIOrganization(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOrganization::OAIOrganization() {
    this->initializeModel();
}

OAIOrganization::~OAIOrganization() {}

void OAIOrganization::initializeModel() {

    m_date_of_incorporation_isSet = false;
    m_date_of_incorporation_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_doing_business_as_isSet = false;
    m_doing_business_as_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_legal_name_isSet = false;
    m_legal_name_isValid = false;

    m_phone_isSet = false;
    m_phone_isValid = false;

    m_principal_place_of_business_isSet = false;
    m_principal_place_of_business_isValid = false;

    m_registered_address_isSet = false;
    m_registered_address_isValid = false;

    m_registration_number_isSet = false;
    m_registration_number_isValid = false;

    m_stock_data_isSet = false;
    m_stock_data_isValid = false;

    m_tax_information_isSet = false;
    m_tax_information_isValid = false;

    m_tax_reporting_classification_isSet = false;
    m_tax_reporting_classification_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_vat_absence_reason_isSet = false;
    m_vat_absence_reason_isValid = false;

    m_vat_number_isSet = false;
    m_vat_number_isValid = false;

    m_web_data_isSet = false;
    m_web_data_isValid = false;
}

void OAIOrganization::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOrganization::fromJsonObject(QJsonObject json) {

    m_date_of_incorporation_isValid = ::OpenAPI::fromJsonValue(m_date_of_incorporation, json[QString("dateOfIncorporation")]);
    m_date_of_incorporation_isSet = !json[QString("dateOfIncorporation")].isNull() && m_date_of_incorporation_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_doing_business_as_isValid = ::OpenAPI::fromJsonValue(m_doing_business_as, json[QString("doingBusinessAs")]);
    m_doing_business_as_isSet = !json[QString("doingBusinessAs")].isNull() && m_doing_business_as_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_legal_name_isValid = ::OpenAPI::fromJsonValue(m_legal_name, json[QString("legalName")]);
    m_legal_name_isSet = !json[QString("legalName")].isNull() && m_legal_name_isValid;

    m_phone_isValid = ::OpenAPI::fromJsonValue(m_phone, json[QString("phone")]);
    m_phone_isSet = !json[QString("phone")].isNull() && m_phone_isValid;

    m_principal_place_of_business_isValid = ::OpenAPI::fromJsonValue(m_principal_place_of_business, json[QString("principalPlaceOfBusiness")]);
    m_principal_place_of_business_isSet = !json[QString("principalPlaceOfBusiness")].isNull() && m_principal_place_of_business_isValid;

    m_registered_address_isValid = ::OpenAPI::fromJsonValue(m_registered_address, json[QString("registeredAddress")]);
    m_registered_address_isSet = !json[QString("registeredAddress")].isNull() && m_registered_address_isValid;

    m_registration_number_isValid = ::OpenAPI::fromJsonValue(m_registration_number, json[QString("registrationNumber")]);
    m_registration_number_isSet = !json[QString("registrationNumber")].isNull() && m_registration_number_isValid;

    m_stock_data_isValid = ::OpenAPI::fromJsonValue(m_stock_data, json[QString("stockData")]);
    m_stock_data_isSet = !json[QString("stockData")].isNull() && m_stock_data_isValid;

    m_tax_information_isValid = ::OpenAPI::fromJsonValue(m_tax_information, json[QString("taxInformation")]);
    m_tax_information_isSet = !json[QString("taxInformation")].isNull() && m_tax_information_isValid;

    m_tax_reporting_classification_isValid = ::OpenAPI::fromJsonValue(m_tax_reporting_classification, json[QString("taxReportingClassification")]);
    m_tax_reporting_classification_isSet = !json[QString("taxReportingClassification")].isNull() && m_tax_reporting_classification_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_vat_absence_reason_isValid = ::OpenAPI::fromJsonValue(m_vat_absence_reason, json[QString("vatAbsenceReason")]);
    m_vat_absence_reason_isSet = !json[QString("vatAbsenceReason")].isNull() && m_vat_absence_reason_isValid;

    m_vat_number_isValid = ::OpenAPI::fromJsonValue(m_vat_number, json[QString("vatNumber")]);
    m_vat_number_isSet = !json[QString("vatNumber")].isNull() && m_vat_number_isValid;

    m_web_data_isValid = ::OpenAPI::fromJsonValue(m_web_data, json[QString("webData")]);
    m_web_data_isSet = !json[QString("webData")].isNull() && m_web_data_isValid;
}

QString OAIOrganization::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOrganization::asJsonObject() const {
    QJsonObject obj;
    if (m_date_of_incorporation_isSet) {
        obj.insert(QString("dateOfIncorporation"), ::OpenAPI::toJsonValue(m_date_of_incorporation));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_doing_business_as_isSet) {
        obj.insert(QString("doingBusinessAs"), ::OpenAPI::toJsonValue(m_doing_business_as));
    }
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_legal_name_isSet) {
        obj.insert(QString("legalName"), ::OpenAPI::toJsonValue(m_legal_name));
    }
    if (m_phone.isSet()) {
        obj.insert(QString("phone"), ::OpenAPI::toJsonValue(m_phone));
    }
    if (m_principal_place_of_business.isSet()) {
        obj.insert(QString("principalPlaceOfBusiness"), ::OpenAPI::toJsonValue(m_principal_place_of_business));
    }
    if (m_registered_address.isSet()) {
        obj.insert(QString("registeredAddress"), ::OpenAPI::toJsonValue(m_registered_address));
    }
    if (m_registration_number_isSet) {
        obj.insert(QString("registrationNumber"), ::OpenAPI::toJsonValue(m_registration_number));
    }
    if (m_stock_data.isSet()) {
        obj.insert(QString("stockData"), ::OpenAPI::toJsonValue(m_stock_data));
    }
    if (m_tax_information.size() > 0) {
        obj.insert(QString("taxInformation"), ::OpenAPI::toJsonValue(m_tax_information));
    }
    if (m_tax_reporting_classification.isSet()) {
        obj.insert(QString("taxReportingClassification"), ::OpenAPI::toJsonValue(m_tax_reporting_classification));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_vat_absence_reason_isSet) {
        obj.insert(QString("vatAbsenceReason"), ::OpenAPI::toJsonValue(m_vat_absence_reason));
    }
    if (m_vat_number_isSet) {
        obj.insert(QString("vatNumber"), ::OpenAPI::toJsonValue(m_vat_number));
    }
    if (m_web_data.isSet()) {
        obj.insert(QString("webData"), ::OpenAPI::toJsonValue(m_web_data));
    }
    return obj;
}

QString OAIOrganization::getDateOfIncorporation() const {
    return m_date_of_incorporation;
}
void OAIOrganization::setDateOfIncorporation(const QString &date_of_incorporation) {
    m_date_of_incorporation = date_of_incorporation;
    m_date_of_incorporation_isSet = true;
}

bool OAIOrganization::is_date_of_incorporation_Set() const{
    return m_date_of_incorporation_isSet;
}

bool OAIOrganization::is_date_of_incorporation_Valid() const{
    return m_date_of_incorporation_isValid;
}

QString OAIOrganization::getDescription() const {
    return m_description;
}
void OAIOrganization::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIOrganization::is_description_Set() const{
    return m_description_isSet;
}

bool OAIOrganization::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIOrganization::getDoingBusinessAs() const {
    return m_doing_business_as;
}
void OAIOrganization::setDoingBusinessAs(const QString &doing_business_as) {
    m_doing_business_as = doing_business_as;
    m_doing_business_as_isSet = true;
}

bool OAIOrganization::is_doing_business_as_Set() const{
    return m_doing_business_as_isSet;
}

bool OAIOrganization::is_doing_business_as_Valid() const{
    return m_doing_business_as_isValid;
}

QString OAIOrganization::getEmail() const {
    return m_email;
}
void OAIOrganization::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAIOrganization::is_email_Set() const{
    return m_email_isSet;
}

bool OAIOrganization::is_email_Valid() const{
    return m_email_isValid;
}

QString OAIOrganization::getLegalName() const {
    return m_legal_name;
}
void OAIOrganization::setLegalName(const QString &legal_name) {
    m_legal_name = legal_name;
    m_legal_name_isSet = true;
}

bool OAIOrganization::is_legal_name_Set() const{
    return m_legal_name_isSet;
}

bool OAIOrganization::is_legal_name_Valid() const{
    return m_legal_name_isValid;
}

OAIPhoneNumber OAIOrganization::getPhone() const {
    return m_phone;
}
void OAIOrganization::setPhone(const OAIPhoneNumber &phone) {
    m_phone = phone;
    m_phone_isSet = true;
}

bool OAIOrganization::is_phone_Set() const{
    return m_phone_isSet;
}

bool OAIOrganization::is_phone_Valid() const{
    return m_phone_isValid;
}

OAIAddress OAIOrganization::getPrincipalPlaceOfBusiness() const {
    return m_principal_place_of_business;
}
void OAIOrganization::setPrincipalPlaceOfBusiness(const OAIAddress &principal_place_of_business) {
    m_principal_place_of_business = principal_place_of_business;
    m_principal_place_of_business_isSet = true;
}

bool OAIOrganization::is_principal_place_of_business_Set() const{
    return m_principal_place_of_business_isSet;
}

bool OAIOrganization::is_principal_place_of_business_Valid() const{
    return m_principal_place_of_business_isValid;
}

OAIAddress OAIOrganization::getRegisteredAddress() const {
    return m_registered_address;
}
void OAIOrganization::setRegisteredAddress(const OAIAddress &registered_address) {
    m_registered_address = registered_address;
    m_registered_address_isSet = true;
}

bool OAIOrganization::is_registered_address_Set() const{
    return m_registered_address_isSet;
}

bool OAIOrganization::is_registered_address_Valid() const{
    return m_registered_address_isValid;
}

QString OAIOrganization::getRegistrationNumber() const {
    return m_registration_number;
}
void OAIOrganization::setRegistrationNumber(const QString &registration_number) {
    m_registration_number = registration_number;
    m_registration_number_isSet = true;
}

bool OAIOrganization::is_registration_number_Set() const{
    return m_registration_number_isSet;
}

bool OAIOrganization::is_registration_number_Valid() const{
    return m_registration_number_isValid;
}

OAIStockData OAIOrganization::getStockData() const {
    return m_stock_data;
}
void OAIOrganization::setStockData(const OAIStockData &stock_data) {
    m_stock_data = stock_data;
    m_stock_data_isSet = true;
}

bool OAIOrganization::is_stock_data_Set() const{
    return m_stock_data_isSet;
}

bool OAIOrganization::is_stock_data_Valid() const{
    return m_stock_data_isValid;
}

QList<OAITaxInformation> OAIOrganization::getTaxInformation() const {
    return m_tax_information;
}
void OAIOrganization::setTaxInformation(const QList<OAITaxInformation> &tax_information) {
    m_tax_information = tax_information;
    m_tax_information_isSet = true;
}

bool OAIOrganization::is_tax_information_Set() const{
    return m_tax_information_isSet;
}

bool OAIOrganization::is_tax_information_Valid() const{
    return m_tax_information_isValid;
}

OAITaxReportingClassification OAIOrganization::getTaxReportingClassification() const {
    return m_tax_reporting_classification;
}
void OAIOrganization::setTaxReportingClassification(const OAITaxReportingClassification &tax_reporting_classification) {
    m_tax_reporting_classification = tax_reporting_classification;
    m_tax_reporting_classification_isSet = true;
}

bool OAIOrganization::is_tax_reporting_classification_Set() const{
    return m_tax_reporting_classification_isSet;
}

bool OAIOrganization::is_tax_reporting_classification_Valid() const{
    return m_tax_reporting_classification_isValid;
}

QString OAIOrganization::getType() const {
    return m_type;
}
void OAIOrganization::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIOrganization::is_type_Set() const{
    return m_type_isSet;
}

bool OAIOrganization::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIOrganization::getVatAbsenceReason() const {
    return m_vat_absence_reason;
}
void OAIOrganization::setVatAbsenceReason(const QString &vat_absence_reason) {
    m_vat_absence_reason = vat_absence_reason;
    m_vat_absence_reason_isSet = true;
}

bool OAIOrganization::is_vat_absence_reason_Set() const{
    return m_vat_absence_reason_isSet;
}

bool OAIOrganization::is_vat_absence_reason_Valid() const{
    return m_vat_absence_reason_isValid;
}

QString OAIOrganization::getVatNumber() const {
    return m_vat_number;
}
void OAIOrganization::setVatNumber(const QString &vat_number) {
    m_vat_number = vat_number;
    m_vat_number_isSet = true;
}

bool OAIOrganization::is_vat_number_Set() const{
    return m_vat_number_isSet;
}

bool OAIOrganization::is_vat_number_Valid() const{
    return m_vat_number_isValid;
}

OAIWebData OAIOrganization::getWebData() const {
    return m_web_data;
}
void OAIOrganization::setWebData(const OAIWebData &web_data) {
    m_web_data = web_data;
    m_web_data_isSet = true;
}

bool OAIOrganization::is_web_data_Set() const{
    return m_web_data_isSet;
}

bool OAIOrganization::is_web_data_Valid() const{
    return m_web_data_isValid;
}

bool OAIOrganization::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_date_of_incorporation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_doing_business_as_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_legal_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phone.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_principal_place_of_business.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_registered_address.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_registration_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stock_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_information.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_reporting_classification.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vat_absence_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vat_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_web_data.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOrganization::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_legal_name_isValid && m_registered_address_isValid && true;
}

} // namespace OpenAPI
