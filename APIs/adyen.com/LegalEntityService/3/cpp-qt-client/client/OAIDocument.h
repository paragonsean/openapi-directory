/**
 * Legal Entity Management API
 * The Legal Entity Management API enables you to manage legal entities that contain information required for verification.  ## Authentication Your Adyen contact will provide your API credential and an API key. To connect to the API, add an `X-API-Key` header with the API key as the value. For example:  ``` curl -H \"X-API-Key: YOUR_API_KEY\" \\ -H \"Content-Type: application/json\" \\ ... ``` Alternatively, you can use the username and password of your API credential to connect to the API using basic authentication. For example:  ``` curl -U \"ws_123456@Scope.Company_YOUR_COMPANY_ACCOUNT\":\"YourWsPassword\" \\ -H \"Content-Type: application/json\" \\ ... ``` ## Versioning The Legal Entity Management API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://kyc-test.adyen.com/lem/v3/legalEntities ``` >If you are using hosted onboarding and just beginning your integration, use v3 for your API requests. Otherwise, use v2.  ## Going live When going live, your Adyen contact will provide your API credential for the live environment. You can then use the API key or the username and password to send requests to `https://kyc-live.adyen.com/lem/v3`.  
 *
 * The version of the OpenAPI document: 3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDocument.h
 *
 * 
 */

#ifndef OAIDocument_H
#define OAIDocument_H

#include <QJsonObject>

#include "OAIAttachment.h"
#include "OAIOwnerEntity.h"
#include <QDateTime>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIAttachment;
class OAIOwnerEntity;

class OAIDocument : public OAIObject {
public:
    OAIDocument();
    OAIDocument(QString json);
    ~OAIDocument() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    Q_DECL_DEPRECATED OAIAttachment getAttachment() const;
    Q_DECL_DEPRECATED void setAttachment(const OAIAttachment &attachment);
    Q_DECL_DEPRECATED bool is_attachment_Set() const;
    Q_DECL_DEPRECATED bool is_attachment_Valid() const;

    QList<OAIAttachment> getAttachments() const;
    void setAttachments(const QList<OAIAttachment> &attachments);
    bool is_attachments_Set() const;
    bool is_attachments_Valid() const;

    QDateTime getCreationDate() const;
    void setCreationDate(const QDateTime &creation_date);
    bool is_creation_date_Set() const;
    bool is_creation_date_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    Q_DECL_DEPRECATED QString getExpiryDate() const;
    Q_DECL_DEPRECATED void setExpiryDate(const QString &expiry_date);
    Q_DECL_DEPRECATED bool is_expiry_date_Set() const;
    Q_DECL_DEPRECATED bool is_expiry_date_Valid() const;

    QString getFileName() const;
    void setFileName(const QString &file_name);
    bool is_file_name_Set() const;
    bool is_file_name_Valid() const;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    Q_DECL_DEPRECATED QString getIssuerCountry() const;
    Q_DECL_DEPRECATED void setIssuerCountry(const QString &issuer_country);
    Q_DECL_DEPRECATED bool is_issuer_country_Set() const;
    Q_DECL_DEPRECATED bool is_issuer_country_Valid() const;

    Q_DECL_DEPRECATED QString getIssuerState() const;
    Q_DECL_DEPRECATED void setIssuerState(const QString &issuer_state);
    Q_DECL_DEPRECATED bool is_issuer_state_Set() const;
    Q_DECL_DEPRECATED bool is_issuer_state_Valid() const;

    QDateTime getModificationDate() const;
    void setModificationDate(const QDateTime &modification_date);
    bool is_modification_date_Set() const;
    bool is_modification_date_Valid() const;

    QString getNumber() const;
    void setNumber(const QString &number);
    bool is_number_Set() const;
    bool is_number_Valid() const;

    OAIOwnerEntity getOwner() const;
    void setOwner(const OAIOwnerEntity &owner);
    bool is_owner_Set() const;
    bool is_owner_Valid() const;

    QString getType() const;
    void setType(const QString &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIAttachment m_attachment;
    bool m_attachment_isSet;
    bool m_attachment_isValid;

    QList<OAIAttachment> m_attachments;
    bool m_attachments_isSet;
    bool m_attachments_isValid;

    QDateTime m_creation_date;
    bool m_creation_date_isSet;
    bool m_creation_date_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    QString m_expiry_date;
    bool m_expiry_date_isSet;
    bool m_expiry_date_isValid;

    QString m_file_name;
    bool m_file_name_isSet;
    bool m_file_name_isValid;

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    QString m_issuer_country;
    bool m_issuer_country_isSet;
    bool m_issuer_country_isValid;

    QString m_issuer_state;
    bool m_issuer_state_isSet;
    bool m_issuer_state_isValid;

    QDateTime m_modification_date;
    bool m_modification_date_isSet;
    bool m_modification_date_isValid;

    QString m_number;
    bool m_number_isSet;
    bool m_number_isValid;

    OAIOwnerEntity m_owner;
    bool m_owner_isSet;
    bool m_owner_isValid;

    QString m_type;
    bool m_type_isSet;
    bool m_type_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDocument)

#endif // OAIDocument_H
