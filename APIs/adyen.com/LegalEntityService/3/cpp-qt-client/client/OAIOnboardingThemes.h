/**
 * Legal Entity Management API
 * The Legal Entity Management API enables you to manage legal entities that contain information required for verification.  ## Authentication Your Adyen contact will provide your API credential and an API key. To connect to the API, add an `X-API-Key` header with the API key as the value. For example:  ``` curl -H \"X-API-Key: YOUR_API_KEY\" \\ -H \"Content-Type: application/json\" \\ ... ``` Alternatively, you can use the username and password of your API credential to connect to the API using basic authentication. For example:  ``` curl -U \"ws_123456@Scope.Company_YOUR_COMPANY_ACCOUNT\":\"YourWsPassword\" \\ -H \"Content-Type: application/json\" \\ ... ``` ## Versioning The Legal Entity Management API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://kyc-test.adyen.com/lem/v3/legalEntities ``` >If you are using hosted onboarding and just beginning your integration, use v3 for your API requests. Otherwise, use v2.  ## Going live When going live, your Adyen contact will provide your API credential for the live environment. You can then use the API key or the username and password to send requests to `https://kyc-live.adyen.com/lem/v3`.  
 *
 * The version of the OpenAPI document: 3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIOnboardingThemes.h
 *
 * 
 */

#ifndef OAIOnboardingThemes_H
#define OAIOnboardingThemes_H

#include <QJsonObject>

#include "OAIOnboardingTheme.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIOnboardingTheme;

class OAIOnboardingThemes : public OAIObject {
public:
    OAIOnboardingThemes();
    OAIOnboardingThemes(QString json);
    ~OAIOnboardingThemes() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getNext() const;
    void setNext(const QString &next);
    bool is_next_Set() const;
    bool is_next_Valid() const;

    QString getPrevious() const;
    void setPrevious(const QString &previous);
    bool is_previous_Set() const;
    bool is_previous_Valid() const;

    QList<OAIOnboardingTheme> getThemes() const;
    void setThemes(const QList<OAIOnboardingTheme> &themes);
    bool is_themes_Set() const;
    bool is_themes_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_next;
    bool m_next_isSet;
    bool m_next_isValid;

    QString m_previous;
    bool m_previous_isSet;
    bool m_previous_isValid;

    QList<OAIOnboardingTheme> m_themes;
    bool m_themes_isSet;
    bool m_themes_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIOnboardingThemes)

#endif // OAIOnboardingThemes_H
