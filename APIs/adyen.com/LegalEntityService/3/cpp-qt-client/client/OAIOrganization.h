/**
 * Legal Entity Management API
 * The Legal Entity Management API enables you to manage legal entities that contain information required for verification.  ## Authentication Your Adyen contact will provide your API credential and an API key. To connect to the API, add an `X-API-Key` header with the API key as the value. For example:  ``` curl -H \"X-API-Key: YOUR_API_KEY\" \\ -H \"Content-Type: application/json\" \\ ... ``` Alternatively, you can use the username and password of your API credential to connect to the API using basic authentication. For example:  ``` curl -U \"ws_123456@Scope.Company_YOUR_COMPANY_ACCOUNT\":\"YourWsPassword\" \\ -H \"Content-Type: application/json\" \\ ... ``` ## Versioning The Legal Entity Management API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://kyc-test.adyen.com/lem/v3/legalEntities ``` >If you are using hosted onboarding and just beginning your integration, use v3 for your API requests. Otherwise, use v2.  ## Going live When going live, your Adyen contact will provide your API credential for the live environment. You can then use the API key or the username and password to send requests to `https://kyc-live.adyen.com/lem/v3`.  
 *
 * The version of the OpenAPI document: 3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIOrganization.h
 *
 * 
 */

#ifndef OAIOrganization_H
#define OAIOrganization_H

#include <QJsonObject>

#include "OAIAddress.h"
#include "OAIPhoneNumber.h"
#include "OAIStockData.h"
#include "OAITaxInformation.h"
#include "OAITaxReportingClassification.h"
#include "OAIWebData.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIPhoneNumber;
class OAIAddress;
class OAIStockData;
class OAITaxInformation;
class OAITaxReportingClassification;
class OAIWebData;

class OAIOrganization : public OAIObject {
public:
    OAIOrganization();
    OAIOrganization(QString json);
    ~OAIOrganization() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getDateOfIncorporation() const;
    void setDateOfIncorporation(const QString &date_of_incorporation);
    bool is_date_of_incorporation_Set() const;
    bool is_date_of_incorporation_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    QString getDoingBusinessAs() const;
    void setDoingBusinessAs(const QString &doing_business_as);
    bool is_doing_business_as_Set() const;
    bool is_doing_business_as_Valid() const;

    QString getEmail() const;
    void setEmail(const QString &email);
    bool is_email_Set() const;
    bool is_email_Valid() const;

    QString getLegalName() const;
    void setLegalName(const QString &legal_name);
    bool is_legal_name_Set() const;
    bool is_legal_name_Valid() const;

    OAIPhoneNumber getPhone() const;
    void setPhone(const OAIPhoneNumber &phone);
    bool is_phone_Set() const;
    bool is_phone_Valid() const;

    OAIAddress getPrincipalPlaceOfBusiness() const;
    void setPrincipalPlaceOfBusiness(const OAIAddress &principal_place_of_business);
    bool is_principal_place_of_business_Set() const;
    bool is_principal_place_of_business_Valid() const;

    OAIAddress getRegisteredAddress() const;
    void setRegisteredAddress(const OAIAddress &registered_address);
    bool is_registered_address_Set() const;
    bool is_registered_address_Valid() const;

    QString getRegistrationNumber() const;
    void setRegistrationNumber(const QString &registration_number);
    bool is_registration_number_Set() const;
    bool is_registration_number_Valid() const;

    OAIStockData getStockData() const;
    void setStockData(const OAIStockData &stock_data);
    bool is_stock_data_Set() const;
    bool is_stock_data_Valid() const;

    QList<OAITaxInformation> getTaxInformation() const;
    void setTaxInformation(const QList<OAITaxInformation> &tax_information);
    bool is_tax_information_Set() const;
    bool is_tax_information_Valid() const;

    OAITaxReportingClassification getTaxReportingClassification() const;
    void setTaxReportingClassification(const OAITaxReportingClassification &tax_reporting_classification);
    bool is_tax_reporting_classification_Set() const;
    bool is_tax_reporting_classification_Valid() const;

    QString getType() const;
    void setType(const QString &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    QString getVatAbsenceReason() const;
    void setVatAbsenceReason(const QString &vat_absence_reason);
    bool is_vat_absence_reason_Set() const;
    bool is_vat_absence_reason_Valid() const;

    QString getVatNumber() const;
    void setVatNumber(const QString &vat_number);
    bool is_vat_number_Set() const;
    bool is_vat_number_Valid() const;

    Q_DECL_DEPRECATED OAIWebData getWebData() const;
    Q_DECL_DEPRECATED void setWebData(const OAIWebData &web_data);
    Q_DECL_DEPRECATED bool is_web_data_Set() const;
    Q_DECL_DEPRECATED bool is_web_data_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_date_of_incorporation;
    bool m_date_of_incorporation_isSet;
    bool m_date_of_incorporation_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    QString m_doing_business_as;
    bool m_doing_business_as_isSet;
    bool m_doing_business_as_isValid;

    QString m_email;
    bool m_email_isSet;
    bool m_email_isValid;

    QString m_legal_name;
    bool m_legal_name_isSet;
    bool m_legal_name_isValid;

    OAIPhoneNumber m_phone;
    bool m_phone_isSet;
    bool m_phone_isValid;

    OAIAddress m_principal_place_of_business;
    bool m_principal_place_of_business_isSet;
    bool m_principal_place_of_business_isValid;

    OAIAddress m_registered_address;
    bool m_registered_address_isSet;
    bool m_registered_address_isValid;

    QString m_registration_number;
    bool m_registration_number_isSet;
    bool m_registration_number_isValid;

    OAIStockData m_stock_data;
    bool m_stock_data_isSet;
    bool m_stock_data_isValid;

    QList<OAITaxInformation> m_tax_information;
    bool m_tax_information_isSet;
    bool m_tax_information_isValid;

    OAITaxReportingClassification m_tax_reporting_classification;
    bool m_tax_reporting_classification_isSet;
    bool m_tax_reporting_classification_isValid;

    QString m_type;
    bool m_type_isSet;
    bool m_type_isValid;

    QString m_vat_absence_reason;
    bool m_vat_absence_reason_isSet;
    bool m_vat_absence_reason_isValid;

    QString m_vat_number;
    bool m_vat_number_isSet;
    bool m_vat_number_isValid;

    OAIWebData m_web_data;
    bool m_web_data_isSet;
    bool m_web_data_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIOrganization)

#endif // OAIOrganization_H
