/**
 * Legal Entity Management API
 * The Legal Entity Management API enables you to manage legal entities that contain information required for verification.  ## Authentication Your Adyen contact will provide your API credential and an API key. To connect to the API, add an `X-API-Key` header with the API key as the value. For example:  ``` curl -H \"X-API-Key: YOUR_API_KEY\" \\ -H \"Content-Type: application/json\" \\ ... ``` Alternatively, you can use the username and password of your API credential to connect to the API using basic authentication. For example:  ``` curl -U \"ws_123456@Scope.Company_YOUR_COMPANY_ACCOUNT\":\"YourWsPassword\" \\ -H \"Content-Type: application/json\" \\ ... ``` ## Versioning The Legal Entity Management API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://kyc-test.adyen.com/lem/v3/legalEntities ``` >If you are using hosted onboarding and just beginning your integration, use v3 for your API requests. Otherwise, use v2.  ## Going live When going live, your Adyen contact will provide your API credential for the live environment. You can then use the API key or the username and password to send requests to `https://kyc-live.adyen.com/lem/v3`.  
 *
 * The version of the OpenAPI document: 3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOnboardingLinkInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOnboardingLinkInfo::OAIOnboardingLinkInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOnboardingLinkInfo::OAIOnboardingLinkInfo() {
    this->initializeModel();
}

OAIOnboardingLinkInfo::~OAIOnboardingLinkInfo() {}

void OAIOnboardingLinkInfo::initializeModel() {

    m_locale_isSet = false;
    m_locale_isValid = false;

    m_redirect_url_isSet = false;
    m_redirect_url_isValid = false;

    m_settings_isSet = false;
    m_settings_isValid = false;

    m_theme_id_isSet = false;
    m_theme_id_isValid = false;
}

void OAIOnboardingLinkInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOnboardingLinkInfo::fromJsonObject(QJsonObject json) {

    m_locale_isValid = ::OpenAPI::fromJsonValue(m_locale, json[QString("locale")]);
    m_locale_isSet = !json[QString("locale")].isNull() && m_locale_isValid;

    m_redirect_url_isValid = ::OpenAPI::fromJsonValue(m_redirect_url, json[QString("redirectUrl")]);
    m_redirect_url_isSet = !json[QString("redirectUrl")].isNull() && m_redirect_url_isValid;

    m_settings_isValid = ::OpenAPI::fromJsonValue(m_settings, json[QString("settings")]);
    m_settings_isSet = !json[QString("settings")].isNull() && m_settings_isValid;

    m_theme_id_isValid = ::OpenAPI::fromJsonValue(m_theme_id, json[QString("themeId")]);
    m_theme_id_isSet = !json[QString("themeId")].isNull() && m_theme_id_isValid;
}

QString OAIOnboardingLinkInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOnboardingLinkInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_locale_isSet) {
        obj.insert(QString("locale"), ::OpenAPI::toJsonValue(m_locale));
    }
    if (m_redirect_url_isSet) {
        obj.insert(QString("redirectUrl"), ::OpenAPI::toJsonValue(m_redirect_url));
    }
    if (m_settings.size() > 0) {
        obj.insert(QString("settings"), ::OpenAPI::toJsonValue(m_settings));
    }
    if (m_theme_id_isSet) {
        obj.insert(QString("themeId"), ::OpenAPI::toJsonValue(m_theme_id));
    }
    return obj;
}

QString OAIOnboardingLinkInfo::getLocale() const {
    return m_locale;
}
void OAIOnboardingLinkInfo::setLocale(const QString &locale) {
    m_locale = locale;
    m_locale_isSet = true;
}

bool OAIOnboardingLinkInfo::is_locale_Set() const{
    return m_locale_isSet;
}

bool OAIOnboardingLinkInfo::is_locale_Valid() const{
    return m_locale_isValid;
}

QString OAIOnboardingLinkInfo::getRedirectUrl() const {
    return m_redirect_url;
}
void OAIOnboardingLinkInfo::setRedirectUrl(const QString &redirect_url) {
    m_redirect_url = redirect_url;
    m_redirect_url_isSet = true;
}

bool OAIOnboardingLinkInfo::is_redirect_url_Set() const{
    return m_redirect_url_isSet;
}

bool OAIOnboardingLinkInfo::is_redirect_url_Valid() const{
    return m_redirect_url_isValid;
}

QMap<QString, bool> OAIOnboardingLinkInfo::getSettings() const {
    return m_settings;
}
void OAIOnboardingLinkInfo::setSettings(const QMap<QString, bool> &settings) {
    m_settings = settings;
    m_settings_isSet = true;
}

bool OAIOnboardingLinkInfo::is_settings_Set() const{
    return m_settings_isSet;
}

bool OAIOnboardingLinkInfo::is_settings_Valid() const{
    return m_settings_isValid;
}

QString OAIOnboardingLinkInfo::getThemeId() const {
    return m_theme_id;
}
void OAIOnboardingLinkInfo::setThemeId(const QString &theme_id) {
    m_theme_id = theme_id;
    m_theme_id_isSet = true;
}

bool OAIOnboardingLinkInfo::is_theme_id_Set() const{
    return m_theme_id_isSet;
}

bool OAIOnboardingLinkInfo::is_theme_id_Valid() const{
    return m_theme_id_isValid;
}

bool OAIOnboardingLinkInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_locale_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_redirect_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_settings.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_theme_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOnboardingLinkInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
