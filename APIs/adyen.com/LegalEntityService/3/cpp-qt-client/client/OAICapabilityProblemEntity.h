/**
 * Legal Entity Management API
 * The Legal Entity Management API enables you to manage legal entities that contain information required for verification.  ## Authentication Your Adyen contact will provide your API credential and an API key. To connect to the API, add an `X-API-Key` header with the API key as the value. For example:  ``` curl -H \"X-API-Key: YOUR_API_KEY\" \\ -H \"Content-Type: application/json\" \\ ... ``` Alternatively, you can use the username and password of your API credential to connect to the API using basic authentication. For example:  ``` curl -U \"ws_123456@Scope.Company_YOUR_COMPANY_ACCOUNT\":\"YourWsPassword\" \\ -H \"Content-Type: application/json\" \\ ... ``` ## Versioning The Legal Entity Management API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://kyc-test.adyen.com/lem/v3/legalEntities ``` >If you are using hosted onboarding and just beginning your integration, use v3 for your API requests. Otherwise, use v2.  ## Going live When going live, your Adyen contact will provide your API credential for the live environment. You can then use the API key or the username and password to send requests to `https://kyc-live.adyen.com/lem/v3`.  
 *
 * The version of the OpenAPI document: 3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICapabilityProblemEntity.h
 *
 * 
 */

#ifndef OAICapabilityProblemEntity_H
#define OAICapabilityProblemEntity_H

#include <QJsonObject>

#include "OAICapabilityProblemEntity_recursive.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAICapabilityProblemEntity_recursive;

class OAICapabilityProblemEntity : public OAIObject {
public:
    OAICapabilityProblemEntity();
    OAICapabilityProblemEntity(QString json);
    ~OAICapabilityProblemEntity() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<QString> getDocuments() const;
    void setDocuments(const QList<QString> &documents);
    bool is_documents_Set() const;
    bool is_documents_Valid() const;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    OAICapabilityProblemEntity_recursive getOwner() const;
    void setOwner(const OAICapabilityProblemEntity_recursive &owner);
    bool is_owner_Set() const;
    bool is_owner_Valid() const;

    QString getType() const;
    void setType(const QString &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<QString> m_documents;
    bool m_documents_isSet;
    bool m_documents_isValid;

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    OAICapabilityProblemEntity_recursive m_owner;
    bool m_owner_isSet;
    bool m_owner_isValid;

    QString m_type;
    bool m_type_isSet;
    bool m_type_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICapabilityProblemEntity)

#endif // OAICapabilityProblemEntity_H
