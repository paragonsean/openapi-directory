/**
 * Legal Entity Management API
 * The Legal Entity Management API enables you to manage legal entities that contain information required for verification.  ## Authentication Your Adyen contact will provide your API credential and an API key. To connect to the API, add an `X-API-Key` header with the API key as the value. For example:  ``` curl -H \"X-API-Key: YOUR_API_KEY\" \\ -H \"Content-Type: application/json\" \\ ... ``` Alternatively, you can use the username and password of your API credential to connect to the API using basic authentication. For example:  ``` curl -U \"ws_123456@Scope.Company_YOUR_COMPANY_ACCOUNT\":\"YourWsPassword\" \\ -H \"Content-Type: application/json\" \\ ... ``` ## Versioning The Legal Entity Management API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://kyc-test.adyen.com/lem/v3/legalEntities ``` >If you are using hosted onboarding and just beginning your integration, use v3 for your API requests. Otherwise, use v2.  ## Going live When going live, your Adyen contact will provide your API credential for the live environment. You can then use the API key or the username and password to send requests to `https://kyc-live.adyen.com/lem/v3`.  
 *
 * The version of the OpenAPI document: 3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIVerificationError.h
 *
 * 
 */

#ifndef OAIVerificationError_H
#define OAIVerificationError_H

#include <QJsonObject>

#include "OAIRemediatingAction.h"
#include "OAIVerificationError_recursive.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIRemediatingAction;
class OAIVerificationError_recursive;

class OAIVerificationError : public OAIObject {
public:
    OAIVerificationError();
    OAIVerificationError(QString json);
    ~OAIVerificationError() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<QString> getCapabilities() const;
    void setCapabilities(const QList<QString> &capabilities);
    bool is_capabilities_Set() const;
    bool is_capabilities_Valid() const;

    QString getCode() const;
    void setCode(const QString &code);
    bool is_code_Set() const;
    bool is_code_Valid() const;

    QString getMessage() const;
    void setMessage(const QString &message);
    bool is_message_Set() const;
    bool is_message_Valid() const;

    QList<OAIRemediatingAction> getRemediatingActions() const;
    void setRemediatingActions(const QList<OAIRemediatingAction> &remediating_actions);
    bool is_remediating_actions_Set() const;
    bool is_remediating_actions_Valid() const;

    QList<OAIVerificationError_recursive> getSubErrors() const;
    void setSubErrors(const QList<OAIVerificationError_recursive> &sub_errors);
    bool is_sub_errors_Set() const;
    bool is_sub_errors_Valid() const;

    QString getType() const;
    void setType(const QString &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<QString> m_capabilities;
    bool m_capabilities_isSet;
    bool m_capabilities_isValid;

    QString m_code;
    bool m_code_isSet;
    bool m_code_isValid;

    QString m_message;
    bool m_message_isSet;
    bool m_message_isValid;

    QList<OAIRemediatingAction> m_remediating_actions;
    bool m_remediating_actions_isSet;
    bool m_remediating_actions_isValid;

    QList<OAIVerificationError_recursive> m_sub_errors;
    bool m_sub_errors_isSet;
    bool m_sub_errors_isValid;

    QString m_type;
    bool m_type_isSet;
    bool m_type_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIVerificationError)

#endif // OAIVerificationError_H
