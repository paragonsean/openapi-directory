/**
 * Legal Entity Management API
 * The Legal Entity Management API enables you to manage legal entities that contain information required for verification.  ## Authentication Your Adyen contact will provide your API credential and an API key. To connect to the API, add an `X-API-Key` header with the API key as the value. For example:  ``` curl -H \"X-API-Key: YOUR_API_KEY\" \\ -H \"Content-Type: application/json\" \\ ... ``` Alternatively, you can use the username and password of your API credential to connect to the API using basic authentication. For example:  ``` curl -U \"ws_123456@Scope.Company_YOUR_COMPANY_ACCOUNT\":\"YourWsPassword\" \\ -H \"Content-Type: application/json\" \\ ... ``` ## Versioning The Legal Entity Management API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://kyc-test.adyen.com/lem/v3/legalEntities ``` >If you are using hosted onboarding and just beginning your integration, use v3 for your API requests. Otherwise, use v2.  ## Going live When going live, your Adyen contact will provide your API credential for the live environment. You can then use the API key or the username and password to send requests to `https://kyc-live.adyen.com/lem/v3`.  
 *
 * The version of the OpenAPI document: 3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBankAccountInfo_accountIdentification.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBankAccountInfo_accountIdentification::OAIBankAccountInfo_accountIdentification(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBankAccountInfo_accountIdentification::OAIBankAccountInfo_accountIdentification() {
    this->initializeModel();
}

OAIBankAccountInfo_accountIdentification::~OAIBankAccountInfo_accountIdentification() {}

void OAIBankAccountInfo_accountIdentification::initializeModel() {

    m_account_number_isSet = false;
    m_account_number_isValid = false;

    m_bsb_code_isSet = false;
    m_bsb_code_isValid = false;

    m_form_factor_isSet = false;
    m_form_factor_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_account_type_isSet = false;
    m_account_type_isValid = false;

    m_institution_number_isSet = false;
    m_institution_number_isValid = false;

    m_transit_number_isSet = false;
    m_transit_number_isValid = false;

    m_bank_code_isSet = false;
    m_bank_code_isValid = false;

    m_clearing_code_isSet = false;
    m_clearing_code_isValid = false;

    m_iban_isSet = false;
    m_iban_isValid = false;

    m_additional_bank_identification_isSet = false;
    m_additional_bank_identification_isValid = false;

    m_bic_isSet = false;
    m_bic_isValid = false;

    m_clearing_number_isSet = false;
    m_clearing_number_isValid = false;

    m_sort_code_isSet = false;
    m_sort_code_isValid = false;

    m_routing_number_isSet = false;
    m_routing_number_isValid = false;
}

void OAIBankAccountInfo_accountIdentification::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBankAccountInfo_accountIdentification::fromJsonObject(QJsonObject json) {

    m_account_number_isValid = ::OpenAPI::fromJsonValue(m_account_number, json[QString("accountNumber")]);
    m_account_number_isSet = !json[QString("accountNumber")].isNull() && m_account_number_isValid;

    m_bsb_code_isValid = ::OpenAPI::fromJsonValue(m_bsb_code, json[QString("bsbCode")]);
    m_bsb_code_isSet = !json[QString("bsbCode")].isNull() && m_bsb_code_isValid;

    m_form_factor_isValid = ::OpenAPI::fromJsonValue(m_form_factor, json[QString("formFactor")]);
    m_form_factor_isSet = !json[QString("formFactor")].isNull() && m_form_factor_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_account_type_isValid = ::OpenAPI::fromJsonValue(m_account_type, json[QString("accountType")]);
    m_account_type_isSet = !json[QString("accountType")].isNull() && m_account_type_isValid;

    m_institution_number_isValid = ::OpenAPI::fromJsonValue(m_institution_number, json[QString("institutionNumber")]);
    m_institution_number_isSet = !json[QString("institutionNumber")].isNull() && m_institution_number_isValid;

    m_transit_number_isValid = ::OpenAPI::fromJsonValue(m_transit_number, json[QString("transitNumber")]);
    m_transit_number_isSet = !json[QString("transitNumber")].isNull() && m_transit_number_isValid;

    m_bank_code_isValid = ::OpenAPI::fromJsonValue(m_bank_code, json[QString("bankCode")]);
    m_bank_code_isSet = !json[QString("bankCode")].isNull() && m_bank_code_isValid;

    m_clearing_code_isValid = ::OpenAPI::fromJsonValue(m_clearing_code, json[QString("clearingCode")]);
    m_clearing_code_isSet = !json[QString("clearingCode")].isNull() && m_clearing_code_isValid;

    m_iban_isValid = ::OpenAPI::fromJsonValue(m_iban, json[QString("iban")]);
    m_iban_isSet = !json[QString("iban")].isNull() && m_iban_isValid;

    m_additional_bank_identification_isValid = ::OpenAPI::fromJsonValue(m_additional_bank_identification, json[QString("additionalBankIdentification")]);
    m_additional_bank_identification_isSet = !json[QString("additionalBankIdentification")].isNull() && m_additional_bank_identification_isValid;

    m_bic_isValid = ::OpenAPI::fromJsonValue(m_bic, json[QString("bic")]);
    m_bic_isSet = !json[QString("bic")].isNull() && m_bic_isValid;

    m_clearing_number_isValid = ::OpenAPI::fromJsonValue(m_clearing_number, json[QString("clearingNumber")]);
    m_clearing_number_isSet = !json[QString("clearingNumber")].isNull() && m_clearing_number_isValid;

    m_sort_code_isValid = ::OpenAPI::fromJsonValue(m_sort_code, json[QString("sortCode")]);
    m_sort_code_isSet = !json[QString("sortCode")].isNull() && m_sort_code_isValid;

    m_routing_number_isValid = ::OpenAPI::fromJsonValue(m_routing_number, json[QString("routingNumber")]);
    m_routing_number_isSet = !json[QString("routingNumber")].isNull() && m_routing_number_isValid;
}

QString OAIBankAccountInfo_accountIdentification::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBankAccountInfo_accountIdentification::asJsonObject() const {
    QJsonObject obj;
    if (m_account_number_isSet) {
        obj.insert(QString("accountNumber"), ::OpenAPI::toJsonValue(m_account_number));
    }
    if (m_bsb_code_isSet) {
        obj.insert(QString("bsbCode"), ::OpenAPI::toJsonValue(m_bsb_code));
    }
    if (m_form_factor_isSet) {
        obj.insert(QString("formFactor"), ::OpenAPI::toJsonValue(m_form_factor));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_account_type_isSet) {
        obj.insert(QString("accountType"), ::OpenAPI::toJsonValue(m_account_type));
    }
    if (m_institution_number_isSet) {
        obj.insert(QString("institutionNumber"), ::OpenAPI::toJsonValue(m_institution_number));
    }
    if (m_transit_number_isSet) {
        obj.insert(QString("transitNumber"), ::OpenAPI::toJsonValue(m_transit_number));
    }
    if (m_bank_code_isSet) {
        obj.insert(QString("bankCode"), ::OpenAPI::toJsonValue(m_bank_code));
    }
    if (m_clearing_code_isSet) {
        obj.insert(QString("clearingCode"), ::OpenAPI::toJsonValue(m_clearing_code));
    }
    if (m_iban_isSet) {
        obj.insert(QString("iban"), ::OpenAPI::toJsonValue(m_iban));
    }
    if (m_additional_bank_identification.isSet()) {
        obj.insert(QString("additionalBankIdentification"), ::OpenAPI::toJsonValue(m_additional_bank_identification));
    }
    if (m_bic_isSet) {
        obj.insert(QString("bic"), ::OpenAPI::toJsonValue(m_bic));
    }
    if (m_clearing_number_isSet) {
        obj.insert(QString("clearingNumber"), ::OpenAPI::toJsonValue(m_clearing_number));
    }
    if (m_sort_code_isSet) {
        obj.insert(QString("sortCode"), ::OpenAPI::toJsonValue(m_sort_code));
    }
    if (m_routing_number_isSet) {
        obj.insert(QString("routingNumber"), ::OpenAPI::toJsonValue(m_routing_number));
    }
    return obj;
}

QString OAIBankAccountInfo_accountIdentification::getAccountNumber() const {
    return m_account_number;
}
void OAIBankAccountInfo_accountIdentification::setAccountNumber(const QString &account_number) {
    m_account_number = account_number;
    m_account_number_isSet = true;
}

bool OAIBankAccountInfo_accountIdentification::is_account_number_Set() const{
    return m_account_number_isSet;
}

bool OAIBankAccountInfo_accountIdentification::is_account_number_Valid() const{
    return m_account_number_isValid;
}

QString OAIBankAccountInfo_accountIdentification::getBsbCode() const {
    return m_bsb_code;
}
void OAIBankAccountInfo_accountIdentification::setBsbCode(const QString &bsb_code) {
    m_bsb_code = bsb_code;
    m_bsb_code_isSet = true;
}

bool OAIBankAccountInfo_accountIdentification::is_bsb_code_Set() const{
    return m_bsb_code_isSet;
}

bool OAIBankAccountInfo_accountIdentification::is_bsb_code_Valid() const{
    return m_bsb_code_isValid;
}

QString OAIBankAccountInfo_accountIdentification::getFormFactor() const {
    return m_form_factor;
}
void OAIBankAccountInfo_accountIdentification::setFormFactor(const QString &form_factor) {
    m_form_factor = form_factor;
    m_form_factor_isSet = true;
}

bool OAIBankAccountInfo_accountIdentification::is_form_factor_Set() const{
    return m_form_factor_isSet;
}

bool OAIBankAccountInfo_accountIdentification::is_form_factor_Valid() const{
    return m_form_factor_isValid;
}

QString OAIBankAccountInfo_accountIdentification::getType() const {
    return m_type;
}
void OAIBankAccountInfo_accountIdentification::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIBankAccountInfo_accountIdentification::is_type_Set() const{
    return m_type_isSet;
}

bool OAIBankAccountInfo_accountIdentification::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIBankAccountInfo_accountIdentification::getAccountType() const {
    return m_account_type;
}
void OAIBankAccountInfo_accountIdentification::setAccountType(const QString &account_type) {
    m_account_type = account_type;
    m_account_type_isSet = true;
}

bool OAIBankAccountInfo_accountIdentification::is_account_type_Set() const{
    return m_account_type_isSet;
}

bool OAIBankAccountInfo_accountIdentification::is_account_type_Valid() const{
    return m_account_type_isValid;
}

QString OAIBankAccountInfo_accountIdentification::getInstitutionNumber() const {
    return m_institution_number;
}
void OAIBankAccountInfo_accountIdentification::setInstitutionNumber(const QString &institution_number) {
    m_institution_number = institution_number;
    m_institution_number_isSet = true;
}

bool OAIBankAccountInfo_accountIdentification::is_institution_number_Set() const{
    return m_institution_number_isSet;
}

bool OAIBankAccountInfo_accountIdentification::is_institution_number_Valid() const{
    return m_institution_number_isValid;
}

QString OAIBankAccountInfo_accountIdentification::getTransitNumber() const {
    return m_transit_number;
}
void OAIBankAccountInfo_accountIdentification::setTransitNumber(const QString &transit_number) {
    m_transit_number = transit_number;
    m_transit_number_isSet = true;
}

bool OAIBankAccountInfo_accountIdentification::is_transit_number_Set() const{
    return m_transit_number_isSet;
}

bool OAIBankAccountInfo_accountIdentification::is_transit_number_Valid() const{
    return m_transit_number_isValid;
}

QString OAIBankAccountInfo_accountIdentification::getBankCode() const {
    return m_bank_code;
}
void OAIBankAccountInfo_accountIdentification::setBankCode(const QString &bank_code) {
    m_bank_code = bank_code;
    m_bank_code_isSet = true;
}

bool OAIBankAccountInfo_accountIdentification::is_bank_code_Set() const{
    return m_bank_code_isSet;
}

bool OAIBankAccountInfo_accountIdentification::is_bank_code_Valid() const{
    return m_bank_code_isValid;
}

QString OAIBankAccountInfo_accountIdentification::getClearingCode() const {
    return m_clearing_code;
}
void OAIBankAccountInfo_accountIdentification::setClearingCode(const QString &clearing_code) {
    m_clearing_code = clearing_code;
    m_clearing_code_isSet = true;
}

bool OAIBankAccountInfo_accountIdentification::is_clearing_code_Set() const{
    return m_clearing_code_isSet;
}

bool OAIBankAccountInfo_accountIdentification::is_clearing_code_Valid() const{
    return m_clearing_code_isValid;
}

QString OAIBankAccountInfo_accountIdentification::getIban() const {
    return m_iban;
}
void OAIBankAccountInfo_accountIdentification::setIban(const QString &iban) {
    m_iban = iban;
    m_iban_isSet = true;
}

bool OAIBankAccountInfo_accountIdentification::is_iban_Set() const{
    return m_iban_isSet;
}

bool OAIBankAccountInfo_accountIdentification::is_iban_Valid() const{
    return m_iban_isValid;
}

OAIAdditionalBankIdentification OAIBankAccountInfo_accountIdentification::getAdditionalBankIdentification() const {
    return m_additional_bank_identification;
}
void OAIBankAccountInfo_accountIdentification::setAdditionalBankIdentification(const OAIAdditionalBankIdentification &additional_bank_identification) {
    m_additional_bank_identification = additional_bank_identification;
    m_additional_bank_identification_isSet = true;
}

bool OAIBankAccountInfo_accountIdentification::is_additional_bank_identification_Set() const{
    return m_additional_bank_identification_isSet;
}

bool OAIBankAccountInfo_accountIdentification::is_additional_bank_identification_Valid() const{
    return m_additional_bank_identification_isValid;
}

QString OAIBankAccountInfo_accountIdentification::getBic() const {
    return m_bic;
}
void OAIBankAccountInfo_accountIdentification::setBic(const QString &bic) {
    m_bic = bic;
    m_bic_isSet = true;
}

bool OAIBankAccountInfo_accountIdentification::is_bic_Set() const{
    return m_bic_isSet;
}

bool OAIBankAccountInfo_accountIdentification::is_bic_Valid() const{
    return m_bic_isValid;
}

QString OAIBankAccountInfo_accountIdentification::getClearingNumber() const {
    return m_clearing_number;
}
void OAIBankAccountInfo_accountIdentification::setClearingNumber(const QString &clearing_number) {
    m_clearing_number = clearing_number;
    m_clearing_number_isSet = true;
}

bool OAIBankAccountInfo_accountIdentification::is_clearing_number_Set() const{
    return m_clearing_number_isSet;
}

bool OAIBankAccountInfo_accountIdentification::is_clearing_number_Valid() const{
    return m_clearing_number_isValid;
}

QString OAIBankAccountInfo_accountIdentification::getSortCode() const {
    return m_sort_code;
}
void OAIBankAccountInfo_accountIdentification::setSortCode(const QString &sort_code) {
    m_sort_code = sort_code;
    m_sort_code_isSet = true;
}

bool OAIBankAccountInfo_accountIdentification::is_sort_code_Set() const{
    return m_sort_code_isSet;
}

bool OAIBankAccountInfo_accountIdentification::is_sort_code_Valid() const{
    return m_sort_code_isValid;
}

QString OAIBankAccountInfo_accountIdentification::getRoutingNumber() const {
    return m_routing_number;
}
void OAIBankAccountInfo_accountIdentification::setRoutingNumber(const QString &routing_number) {
    m_routing_number = routing_number;
    m_routing_number_isSet = true;
}

bool OAIBankAccountInfo_accountIdentification::is_routing_number_Set() const{
    return m_routing_number_isSet;
}

bool OAIBankAccountInfo_accountIdentification::is_routing_number_Valid() const{
    return m_routing_number_isValid;
}

bool OAIBankAccountInfo_accountIdentification::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bsb_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_form_factor_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_account_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_institution_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transit_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bank_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_clearing_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_iban_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_additional_bank_identification.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_bic_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_clearing_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sort_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_routing_number_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBankAccountInfo_accountIdentification::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_account_number_isValid && m_bsb_code_isValid && m_type_isValid && m_institution_number_isValid && m_transit_number_isValid && m_bank_code_isValid && m_clearing_code_isValid && m_iban_isValid && m_bic_isValid && m_clearing_number_isValid && m_sort_code_isValid && m_routing_number_isValid && true;
}

} // namespace OpenAPI
