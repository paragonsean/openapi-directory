/**
 * Legal Entity Management API
 * The Legal Entity Management API enables you to manage legal entities that contain information required for verification.  ## Authentication Your Adyen contact will provide your API credential and an API key. To connect to the API, add an `X-API-Key` header with the API key as the value. For example:  ``` curl -H \"X-API-Key: YOUR_API_KEY\" \\ -H \"Content-Type: application/json\" \\ ... ``` Alternatively, you can use the username and password of your API credential to connect to the API using basic authentication. For example:  ``` curl -U \"ws_123456@Scope.Company_YOUR_COMPANY_ACCOUNT\":\"YourWsPassword\" \\ -H \"Content-Type: application/json\" \\ ... ``` ## Versioning The Legal Entity Management API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://kyc-test.adyen.com/lem/v3/legalEntities ``` >If you are using hosted onboarding and just beginning your integration, use v3 for your API requests. Otherwise, use v2.  ## Going live When going live, your Adyen contact will provide your API credential for the live environment. You can then use the API key or the username and password to send requests to `https://kyc-live.adyen.com/lem/v3`.  
 *
 * The version of the OpenAPI document: 3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICALocalAccountIdentification.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICALocalAccountIdentification::OAICALocalAccountIdentification(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICALocalAccountIdentification::OAICALocalAccountIdentification() {
    this->initializeModel();
}

OAICALocalAccountIdentification::~OAICALocalAccountIdentification() {}

void OAICALocalAccountIdentification::initializeModel() {

    m_account_number_isSet = false;
    m_account_number_isValid = false;

    m_account_type_isSet = false;
    m_account_type_isValid = false;

    m_form_factor_isSet = false;
    m_form_factor_isValid = false;

    m_institution_number_isSet = false;
    m_institution_number_isValid = false;

    m_transit_number_isSet = false;
    m_transit_number_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAICALocalAccountIdentification::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICALocalAccountIdentification::fromJsonObject(QJsonObject json) {

    m_account_number_isValid = ::OpenAPI::fromJsonValue(m_account_number, json[QString("accountNumber")]);
    m_account_number_isSet = !json[QString("accountNumber")].isNull() && m_account_number_isValid;

    m_account_type_isValid = ::OpenAPI::fromJsonValue(m_account_type, json[QString("accountType")]);
    m_account_type_isSet = !json[QString("accountType")].isNull() && m_account_type_isValid;

    m_form_factor_isValid = ::OpenAPI::fromJsonValue(m_form_factor, json[QString("formFactor")]);
    m_form_factor_isSet = !json[QString("formFactor")].isNull() && m_form_factor_isValid;

    m_institution_number_isValid = ::OpenAPI::fromJsonValue(m_institution_number, json[QString("institutionNumber")]);
    m_institution_number_isSet = !json[QString("institutionNumber")].isNull() && m_institution_number_isValid;

    m_transit_number_isValid = ::OpenAPI::fromJsonValue(m_transit_number, json[QString("transitNumber")]);
    m_transit_number_isSet = !json[QString("transitNumber")].isNull() && m_transit_number_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAICALocalAccountIdentification::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICALocalAccountIdentification::asJsonObject() const {
    QJsonObject obj;
    if (m_account_number_isSet) {
        obj.insert(QString("accountNumber"), ::OpenAPI::toJsonValue(m_account_number));
    }
    if (m_account_type_isSet) {
        obj.insert(QString("accountType"), ::OpenAPI::toJsonValue(m_account_type));
    }
    if (m_form_factor_isSet) {
        obj.insert(QString("formFactor"), ::OpenAPI::toJsonValue(m_form_factor));
    }
    if (m_institution_number_isSet) {
        obj.insert(QString("institutionNumber"), ::OpenAPI::toJsonValue(m_institution_number));
    }
    if (m_transit_number_isSet) {
        obj.insert(QString("transitNumber"), ::OpenAPI::toJsonValue(m_transit_number));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAICALocalAccountIdentification::getAccountNumber() const {
    return m_account_number;
}
void OAICALocalAccountIdentification::setAccountNumber(const QString &account_number) {
    m_account_number = account_number;
    m_account_number_isSet = true;
}

bool OAICALocalAccountIdentification::is_account_number_Set() const{
    return m_account_number_isSet;
}

bool OAICALocalAccountIdentification::is_account_number_Valid() const{
    return m_account_number_isValid;
}

QString OAICALocalAccountIdentification::getAccountType() const {
    return m_account_type;
}
void OAICALocalAccountIdentification::setAccountType(const QString &account_type) {
    m_account_type = account_type;
    m_account_type_isSet = true;
}

bool OAICALocalAccountIdentification::is_account_type_Set() const{
    return m_account_type_isSet;
}

bool OAICALocalAccountIdentification::is_account_type_Valid() const{
    return m_account_type_isValid;
}

QString OAICALocalAccountIdentification::getFormFactor() const {
    return m_form_factor;
}
void OAICALocalAccountIdentification::setFormFactor(const QString &form_factor) {
    m_form_factor = form_factor;
    m_form_factor_isSet = true;
}

bool OAICALocalAccountIdentification::is_form_factor_Set() const{
    return m_form_factor_isSet;
}

bool OAICALocalAccountIdentification::is_form_factor_Valid() const{
    return m_form_factor_isValid;
}

QString OAICALocalAccountIdentification::getInstitutionNumber() const {
    return m_institution_number;
}
void OAICALocalAccountIdentification::setInstitutionNumber(const QString &institution_number) {
    m_institution_number = institution_number;
    m_institution_number_isSet = true;
}

bool OAICALocalAccountIdentification::is_institution_number_Set() const{
    return m_institution_number_isSet;
}

bool OAICALocalAccountIdentification::is_institution_number_Valid() const{
    return m_institution_number_isValid;
}

QString OAICALocalAccountIdentification::getTransitNumber() const {
    return m_transit_number;
}
void OAICALocalAccountIdentification::setTransitNumber(const QString &transit_number) {
    m_transit_number = transit_number;
    m_transit_number_isSet = true;
}

bool OAICALocalAccountIdentification::is_transit_number_Set() const{
    return m_transit_number_isSet;
}

bool OAICALocalAccountIdentification::is_transit_number_Valid() const{
    return m_transit_number_isValid;
}

QString OAICALocalAccountIdentification::getType() const {
    return m_type;
}
void OAICALocalAccountIdentification::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAICALocalAccountIdentification::is_type_Set() const{
    return m_type_isSet;
}

bool OAICALocalAccountIdentification::is_type_Valid() const{
    return m_type_isValid;
}

bool OAICALocalAccountIdentification::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_account_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_form_factor_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_institution_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transit_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICALocalAccountIdentification::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_account_number_isValid && m_institution_number_isValid && m_transit_number_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
