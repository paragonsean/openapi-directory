/**
 * Legal Entity Management API
 * The Legal Entity Management API enables you to manage legal entities that contain information required for verification.  ## Authentication Your Adyen contact will provide your API credential and an API key. To connect to the API, add an `X-API-Key` header with the API key as the value. For example:  ``` curl -H \"X-API-Key: YOUR_API_KEY\" \\ -H \"Content-Type: application/json\" \\ ... ``` Alternatively, you can use the username and password of your API credential to connect to the API using basic authentication. For example:  ``` curl -U \"ws_123456@Scope.Company_YOUR_COMPANY_ACCOUNT\":\"YourWsPassword\" \\ -H \"Content-Type: application/json\" \\ ... ``` ## Versioning The Legal Entity Management API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://kyc-test.adyen.com/lem/v3/legalEntities ``` >If you are using hosted onboarding and just beginning your integration, use v3 for your API requests. Otherwise, use v2.  ## Going live When going live, your Adyen contact will provide your API credential for the live environment. You can then use the API key or the username and password to send requests to `https://kyc-live.adyen.com/lem/v3`.  
 *
 * The version of the OpenAPI document: 3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIbanAccountIdentification.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIbanAccountIdentification::OAIIbanAccountIdentification(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIbanAccountIdentification::OAIIbanAccountIdentification() {
    this->initializeModel();
}

OAIIbanAccountIdentification::~OAIIbanAccountIdentification() {}

void OAIIbanAccountIdentification::initializeModel() {

    m_form_factor_isSet = false;
    m_form_factor_isValid = false;

    m_iban_isSet = false;
    m_iban_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIIbanAccountIdentification::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIbanAccountIdentification::fromJsonObject(QJsonObject json) {

    m_form_factor_isValid = ::OpenAPI::fromJsonValue(m_form_factor, json[QString("formFactor")]);
    m_form_factor_isSet = !json[QString("formFactor")].isNull() && m_form_factor_isValid;

    m_iban_isValid = ::OpenAPI::fromJsonValue(m_iban, json[QString("iban")]);
    m_iban_isSet = !json[QString("iban")].isNull() && m_iban_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIIbanAccountIdentification::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIbanAccountIdentification::asJsonObject() const {
    QJsonObject obj;
    if (m_form_factor_isSet) {
        obj.insert(QString("formFactor"), ::OpenAPI::toJsonValue(m_form_factor));
    }
    if (m_iban_isSet) {
        obj.insert(QString("iban"), ::OpenAPI::toJsonValue(m_iban));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIIbanAccountIdentification::getFormFactor() const {
    return m_form_factor;
}
void OAIIbanAccountIdentification::setFormFactor(const QString &form_factor) {
    m_form_factor = form_factor;
    m_form_factor_isSet = true;
}

bool OAIIbanAccountIdentification::is_form_factor_Set() const{
    return m_form_factor_isSet;
}

bool OAIIbanAccountIdentification::is_form_factor_Valid() const{
    return m_form_factor_isValid;
}

QString OAIIbanAccountIdentification::getIban() const {
    return m_iban;
}
void OAIIbanAccountIdentification::setIban(const QString &iban) {
    m_iban = iban;
    m_iban_isSet = true;
}

bool OAIIbanAccountIdentification::is_iban_Set() const{
    return m_iban_isSet;
}

bool OAIIbanAccountIdentification::is_iban_Valid() const{
    return m_iban_isValid;
}

QString OAIIbanAccountIdentification::getType() const {
    return m_type;
}
void OAIIbanAccountIdentification::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIIbanAccountIdentification::is_type_Set() const{
    return m_type_isSet;
}

bool OAIIbanAccountIdentification::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIIbanAccountIdentification::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_form_factor_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_iban_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIbanAccountIdentification::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_iban_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
