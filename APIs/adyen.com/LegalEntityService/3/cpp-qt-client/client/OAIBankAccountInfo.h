/**
 * Legal Entity Management API
 * The Legal Entity Management API enables you to manage legal entities that contain information required for verification.  ## Authentication Your Adyen contact will provide your API credential and an API key. To connect to the API, add an `X-API-Key` header with the API key as the value. For example:  ``` curl -H \"X-API-Key: YOUR_API_KEY\" \\ -H \"Content-Type: application/json\" \\ ... ``` Alternatively, you can use the username and password of your API credential to connect to the API using basic authentication. For example:  ``` curl -U \"ws_123456@Scope.Company_YOUR_COMPANY_ACCOUNT\":\"YourWsPassword\" \\ -H \"Content-Type: application/json\" \\ ... ``` ## Versioning The Legal Entity Management API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://kyc-test.adyen.com/lem/v3/legalEntities ``` >If you are using hosted onboarding and just beginning your integration, use v3 for your API requests. Otherwise, use v2.  ## Going live When going live, your Adyen contact will provide your API credential for the live environment. You can then use the API key or the username and password to send requests to `https://kyc-live.adyen.com/lem/v3`.  
 *
 * The version of the OpenAPI document: 3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIBankAccountInfo.h
 *
 * 
 */

#ifndef OAIBankAccountInfo_H
#define OAIBankAccountInfo_H

#include <QJsonObject>

#include "OAIBankAccountInfo_accountIdentification.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIBankAccountInfo_accountIdentification;

class OAIBankAccountInfo : public OAIObject {
public:
    OAIBankAccountInfo();
    OAIBankAccountInfo(QString json);
    ~OAIBankAccountInfo() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIBankAccountInfo_accountIdentification getAccountIdentification() const;
    void setAccountIdentification(const OAIBankAccountInfo_accountIdentification &account_identification);
    bool is_account_identification_Set() const;
    bool is_account_identification_Valid() const;

    Q_DECL_DEPRECATED QString getAccountType() const;
    Q_DECL_DEPRECATED void setAccountType(const QString &account_type);
    Q_DECL_DEPRECATED bool is_account_type_Set() const;
    Q_DECL_DEPRECATED bool is_account_type_Valid() const;

    QString getBankName() const;
    void setBankName(const QString &bank_name);
    bool is_bank_name_Set() const;
    bool is_bank_name_Valid() const;

    QString getCountryCode() const;
    void setCountryCode(const QString &country_code);
    bool is_country_code_Set() const;
    bool is_country_code_Valid() const;

    bool isTrustedSource() const;
    void setTrustedSource(const bool &trusted_source);
    bool is_trusted_source_Set() const;
    bool is_trusted_source_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIBankAccountInfo_accountIdentification m_account_identification;
    bool m_account_identification_isSet;
    bool m_account_identification_isValid;

    QString m_account_type;
    bool m_account_type_isSet;
    bool m_account_type_isValid;

    QString m_bank_name;
    bool m_bank_name_isSet;
    bool m_bank_name_isValid;

    QString m_country_code;
    bool m_country_code_isSet;
    bool m_country_code_isValid;

    bool m_trusted_source;
    bool m_trusted_source_isSet;
    bool m_trusted_source_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIBankAccountInfo)

#endif // OAIBankAccountInfo_H
