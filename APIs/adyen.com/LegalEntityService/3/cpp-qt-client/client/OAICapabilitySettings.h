/**
 * Legal Entity Management API
 * The Legal Entity Management API enables you to manage legal entities that contain information required for verification.  ## Authentication Your Adyen contact will provide your API credential and an API key. To connect to the API, add an `X-API-Key` header with the API key as the value. For example:  ``` curl -H \"X-API-Key: YOUR_API_KEY\" \\ -H \"Content-Type: application/json\" \\ ... ``` Alternatively, you can use the username and password of your API credential to connect to the API using basic authentication. For example:  ``` curl -U \"ws_123456@Scope.Company_YOUR_COMPANY_ACCOUNT\":\"YourWsPassword\" \\ -H \"Content-Type: application/json\" \\ ... ``` ## Versioning The Legal Entity Management API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://kyc-test.adyen.com/lem/v3/legalEntities ``` >If you are using hosted onboarding and just beginning your integration, use v3 for your API requests. Otherwise, use v2.  ## Going live When going live, your Adyen contact will provide your API credential for the live environment. You can then use the API key or the username and password to send requests to `https://kyc-live.adyen.com/lem/v3`.  
 *
 * The version of the OpenAPI document: 3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICapabilitySettings.h
 *
 * 
 */

#ifndef OAICapabilitySettings_H
#define OAICapabilitySettings_H

#include <QJsonObject>

#include "OAIAmount.h"
#include <QList>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIAmount;

class OAICapabilitySettings : public OAIObject {
public:
    OAICapabilitySettings();
    OAICapabilitySettings(QString json);
    ~OAICapabilitySettings() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QMap<QString, OAIAmount> getAmountPerIndustry() const;
    void setAmountPerIndustry(const QMap<QString, OAIAmount> &amount_per_industry);
    bool is_amount_per_industry_Set() const;
    bool is_amount_per_industry_Valid() const;

    bool isAuthorizedCardUsers() const;
    void setAuthorizedCardUsers(const bool &authorized_card_users);
    bool is_authorized_card_users_Set() const;
    bool is_authorized_card_users_Valid() const;

    QList<QString> getFundingSource() const;
    void setFundingSource(const QList<QString> &funding_source);
    bool is_funding_source_Set() const;
    bool is_funding_source_Valid() const;

    QString getInterval() const;
    void setInterval(const QString &interval);
    bool is_interval_Set() const;
    bool is_interval_Valid() const;

    OAIAmount getMaxAmount() const;
    void setMaxAmount(const OAIAmount &max_amount);
    bool is_max_amount_Set() const;
    bool is_max_amount_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QMap<QString, OAIAmount> m_amount_per_industry;
    bool m_amount_per_industry_isSet;
    bool m_amount_per_industry_isValid;

    bool m_authorized_card_users;
    bool m_authorized_card_users_isSet;
    bool m_authorized_card_users_isValid;

    QList<QString> m_funding_source;
    bool m_funding_source_isSet;
    bool m_funding_source_isValid;

    QString m_interval;
    bool m_interval_isSet;
    bool m_interval_isValid;

    OAIAmount m_max_amount;
    bool m_max_amount_isSet;
    bool m_max_amount_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICapabilitySettings)

#endif // OAICapabilitySettings_H
