/**
 * Legal Entity Management API
 * The Legal Entity Management API enables you to manage legal entities that contain information required for verification.  ## Authentication Your Adyen contact will provide your API credential and an API key. To connect to the API, add an `X-API-Key` header with the API key as the value. For example:  ``` curl -H \"X-API-Key: YOUR_API_KEY\" \\ -H \"Content-Type: application/json\" \\ ... ``` Alternatively, you can use the username and password of your API credential to connect to the API using basic authentication. For example:  ``` curl -U \"ws_123456@Scope.Company_YOUR_COMPANY_ACCOUNT\":\"YourWsPassword\" \\ -H \"Content-Type: application/json\" \\ ... ``` ## Versioning The Legal Entity Management API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://kyc-test.adyen.com/lem/v3/legalEntities ``` >If you are using hosted onboarding and just beginning your integration, use v3 for your API requests. Otherwise, use v2.  ## Going live When going live, your Adyen contact will provide your API credential for the live environment. You can then use the API key or the username and password to send requests to `https://kyc-live.adyen.com/lem/v3`.  
 *
 * The version of the OpenAPI document: 3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILegalEntityAssociation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILegalEntityAssociation::OAILegalEntityAssociation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILegalEntityAssociation::OAILegalEntityAssociation() {
    this->initializeModel();
}

OAILegalEntityAssociation::~OAILegalEntityAssociation() {}

void OAILegalEntityAssociation::initializeModel() {

    m_associator_id_isSet = false;
    m_associator_id_isValid = false;

    m_entity_type_isSet = false;
    m_entity_type_isValid = false;

    m_job_title_isSet = false;
    m_job_title_isValid = false;

    m_legal_entity_id_isSet = false;
    m_legal_entity_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_settlor_exemption_reason_isSet = false;
    m_settlor_exemption_reason_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAILegalEntityAssociation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILegalEntityAssociation::fromJsonObject(QJsonObject json) {

    m_associator_id_isValid = ::OpenAPI::fromJsonValue(m_associator_id, json[QString("associatorId")]);
    m_associator_id_isSet = !json[QString("associatorId")].isNull() && m_associator_id_isValid;

    m_entity_type_isValid = ::OpenAPI::fromJsonValue(m_entity_type, json[QString("entityType")]);
    m_entity_type_isSet = !json[QString("entityType")].isNull() && m_entity_type_isValid;

    m_job_title_isValid = ::OpenAPI::fromJsonValue(m_job_title, json[QString("jobTitle")]);
    m_job_title_isSet = !json[QString("jobTitle")].isNull() && m_job_title_isValid;

    m_legal_entity_id_isValid = ::OpenAPI::fromJsonValue(m_legal_entity_id, json[QString("legalEntityId")]);
    m_legal_entity_id_isSet = !json[QString("legalEntityId")].isNull() && m_legal_entity_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_settlor_exemption_reason_isValid = ::OpenAPI::fromJsonValue(m_settlor_exemption_reason, json[QString("settlorExemptionReason")]);
    m_settlor_exemption_reason_isSet = !json[QString("settlorExemptionReason")].isNull() && m_settlor_exemption_reason_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAILegalEntityAssociation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILegalEntityAssociation::asJsonObject() const {
    QJsonObject obj;
    if (m_associator_id_isSet) {
        obj.insert(QString("associatorId"), ::OpenAPI::toJsonValue(m_associator_id));
    }
    if (m_entity_type_isSet) {
        obj.insert(QString("entityType"), ::OpenAPI::toJsonValue(m_entity_type));
    }
    if (m_job_title_isSet) {
        obj.insert(QString("jobTitle"), ::OpenAPI::toJsonValue(m_job_title));
    }
    if (m_legal_entity_id_isSet) {
        obj.insert(QString("legalEntityId"), ::OpenAPI::toJsonValue(m_legal_entity_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_settlor_exemption_reason.size() > 0) {
        obj.insert(QString("settlorExemptionReason"), ::OpenAPI::toJsonValue(m_settlor_exemption_reason));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAILegalEntityAssociation::getAssociatorId() const {
    return m_associator_id;
}
void OAILegalEntityAssociation::setAssociatorId(const QString &associator_id) {
    m_associator_id = associator_id;
    m_associator_id_isSet = true;
}

bool OAILegalEntityAssociation::is_associator_id_Set() const{
    return m_associator_id_isSet;
}

bool OAILegalEntityAssociation::is_associator_id_Valid() const{
    return m_associator_id_isValid;
}

QString OAILegalEntityAssociation::getEntityType() const {
    return m_entity_type;
}
void OAILegalEntityAssociation::setEntityType(const QString &entity_type) {
    m_entity_type = entity_type;
    m_entity_type_isSet = true;
}

bool OAILegalEntityAssociation::is_entity_type_Set() const{
    return m_entity_type_isSet;
}

bool OAILegalEntityAssociation::is_entity_type_Valid() const{
    return m_entity_type_isValid;
}

QString OAILegalEntityAssociation::getJobTitle() const {
    return m_job_title;
}
void OAILegalEntityAssociation::setJobTitle(const QString &job_title) {
    m_job_title = job_title;
    m_job_title_isSet = true;
}

bool OAILegalEntityAssociation::is_job_title_Set() const{
    return m_job_title_isSet;
}

bool OAILegalEntityAssociation::is_job_title_Valid() const{
    return m_job_title_isValid;
}

QString OAILegalEntityAssociation::getLegalEntityId() const {
    return m_legal_entity_id;
}
void OAILegalEntityAssociation::setLegalEntityId(const QString &legal_entity_id) {
    m_legal_entity_id = legal_entity_id;
    m_legal_entity_id_isSet = true;
}

bool OAILegalEntityAssociation::is_legal_entity_id_Set() const{
    return m_legal_entity_id_isSet;
}

bool OAILegalEntityAssociation::is_legal_entity_id_Valid() const{
    return m_legal_entity_id_isValid;
}

QString OAILegalEntityAssociation::getName() const {
    return m_name;
}
void OAILegalEntityAssociation::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAILegalEntityAssociation::is_name_Set() const{
    return m_name_isSet;
}

bool OAILegalEntityAssociation::is_name_Valid() const{
    return m_name_isValid;
}

QList<QString> OAILegalEntityAssociation::getSettlorExemptionReason() const {
    return m_settlor_exemption_reason;
}
void OAILegalEntityAssociation::setSettlorExemptionReason(const QList<QString> &settlor_exemption_reason) {
    m_settlor_exemption_reason = settlor_exemption_reason;
    m_settlor_exemption_reason_isSet = true;
}

bool OAILegalEntityAssociation::is_settlor_exemption_reason_Set() const{
    return m_settlor_exemption_reason_isSet;
}

bool OAILegalEntityAssociation::is_settlor_exemption_reason_Valid() const{
    return m_settlor_exemption_reason_isValid;
}

QString OAILegalEntityAssociation::getType() const {
    return m_type;
}
void OAILegalEntityAssociation::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAILegalEntityAssociation::is_type_Set() const{
    return m_type_isSet;
}

bool OAILegalEntityAssociation::is_type_Valid() const{
    return m_type_isValid;
}

bool OAILegalEntityAssociation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_associator_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_entity_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_legal_entity_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_settlor_exemption_reason.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILegalEntityAssociation::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_legal_entity_id_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
