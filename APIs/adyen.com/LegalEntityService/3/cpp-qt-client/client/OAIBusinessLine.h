/**
 * Legal Entity Management API
 * The Legal Entity Management API enables you to manage legal entities that contain information required for verification.  ## Authentication Your Adyen contact will provide your API credential and an API key. To connect to the API, add an `X-API-Key` header with the API key as the value. For example:  ``` curl -H \"X-API-Key: YOUR_API_KEY\" \\ -H \"Content-Type: application/json\" \\ ... ``` Alternatively, you can use the username and password of your API credential to connect to the API using basic authentication. For example:  ``` curl -U \"ws_123456@Scope.Company_YOUR_COMPANY_ACCOUNT\":\"YourWsPassword\" \\ -H \"Content-Type: application/json\" \\ ... ``` ## Versioning The Legal Entity Management API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://kyc-test.adyen.com/lem/v3/legalEntities ``` >If you are using hosted onboarding and just beginning your integration, use v3 for your API requests. Otherwise, use v2.  ## Going live When going live, your Adyen contact will provide your API credential for the live environment. You can then use the API key or the username and password to send requests to `https://kyc-live.adyen.com/lem/v3`.  
 *
 * The version of the OpenAPI document: 3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIBusinessLine.h
 *
 * 
 */

#ifndef OAIBusinessLine_H
#define OAIBusinessLine_H

#include <QJsonObject>

#include "OAICapabilityProblem.h"
#include "OAISourceOfFunds.h"
#include "OAIWebData.h"
#include "OAIWebDataExemption.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAICapabilityProblem;
class OAISourceOfFunds;
class OAIWebData;
class OAIWebDataExemption;

class OAIBusinessLine : public OAIObject {
public:
    OAIBusinessLine();
    OAIBusinessLine(QString json);
    ~OAIBusinessLine() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    Q_DECL_DEPRECATED QString getCapability() const;
    Q_DECL_DEPRECATED void setCapability(const QString &capability);
    Q_DECL_DEPRECATED bool is_capability_Set() const;
    Q_DECL_DEPRECATED bool is_capability_Valid() const;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    QString getIndustryCode() const;
    void setIndustryCode(const QString &industry_code);
    bool is_industry_code_Set() const;
    bool is_industry_code_Valid() const;

    QString getLegalEntityId() const;
    void setLegalEntityId(const QString &legal_entity_id);
    bool is_legal_entity_id_Set() const;
    bool is_legal_entity_id_Valid() const;

    QList<OAICapabilityProblem> getProblems() const;
    void setProblems(const QList<OAICapabilityProblem> &problems);
    bool is_problems_Set() const;
    bool is_problems_Valid() const;

    QList<QString> getSalesChannels() const;
    void setSalesChannels(const QList<QString> &sales_channels);
    bool is_sales_channels_Set() const;
    bool is_sales_channels_Valid() const;

    QString getService() const;
    void setService(const QString &service);
    bool is_service_Set() const;
    bool is_service_Valid() const;

    OAISourceOfFunds getSourceOfFunds() const;
    void setSourceOfFunds(const OAISourceOfFunds &source_of_funds);
    bool is_source_of_funds_Set() const;
    bool is_source_of_funds_Valid() const;

    QList<OAIWebData> getWebData() const;
    void setWebData(const QList<OAIWebData> &web_data);
    bool is_web_data_Set() const;
    bool is_web_data_Valid() const;

    OAIWebDataExemption getWebDataExemption() const;
    void setWebDataExemption(const OAIWebDataExemption &web_data_exemption);
    bool is_web_data_exemption_Set() const;
    bool is_web_data_exemption_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_capability;
    bool m_capability_isSet;
    bool m_capability_isValid;

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    QString m_industry_code;
    bool m_industry_code_isSet;
    bool m_industry_code_isValid;

    QString m_legal_entity_id;
    bool m_legal_entity_id_isSet;
    bool m_legal_entity_id_isValid;

    QList<OAICapabilityProblem> m_problems;
    bool m_problems_isSet;
    bool m_problems_isValid;

    QList<QString> m_sales_channels;
    bool m_sales_channels_isSet;
    bool m_sales_channels_isValid;

    QString m_service;
    bool m_service_isSet;
    bool m_service_isValid;

    OAISourceOfFunds m_source_of_funds;
    bool m_source_of_funds_isSet;
    bool m_source_of_funds_isValid;

    QList<OAIWebData> m_web_data;
    bool m_web_data_isSet;
    bool m_web_data_isValid;

    OAIWebDataExemption m_web_data_exemption;
    bool m_web_data_exemption_isSet;
    bool m_web_data_exemption_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIBusinessLine)

#endif // OAIBusinessLine_H
