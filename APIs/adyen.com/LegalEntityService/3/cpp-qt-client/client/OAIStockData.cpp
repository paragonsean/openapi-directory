/**
 * Legal Entity Management API
 * The Legal Entity Management API enables you to manage legal entities that contain information required for verification.  ## Authentication Your Adyen contact will provide your API credential and an API key. To connect to the API, add an `X-API-Key` header with the API key as the value. For example:  ``` curl -H \"X-API-Key: YOUR_API_KEY\" \\ -H \"Content-Type: application/json\" \\ ... ``` Alternatively, you can use the username and password of your API credential to connect to the API using basic authentication. For example:  ``` curl -U \"ws_123456@Scope.Company_YOUR_COMPANY_ACCOUNT\":\"YourWsPassword\" \\ -H \"Content-Type: application/json\" \\ ... ``` ## Versioning The Legal Entity Management API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://kyc-test.adyen.com/lem/v3/legalEntities ``` >If you are using hosted onboarding and just beginning your integration, use v3 for your API requests. Otherwise, use v2.  ## Going live When going live, your Adyen contact will provide your API credential for the live environment. You can then use the API key or the username and password to send requests to `https://kyc-live.adyen.com/lem/v3`.  
 *
 * The version of the OpenAPI document: 3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStockData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStockData::OAIStockData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStockData::OAIStockData() {
    this->initializeModel();
}

OAIStockData::~OAIStockData() {}

void OAIStockData::initializeModel() {

    m_market_identifier_isSet = false;
    m_market_identifier_isValid = false;

    m_stock_number_isSet = false;
    m_stock_number_isValid = false;

    m_ticker_symbol_isSet = false;
    m_ticker_symbol_isValid = false;
}

void OAIStockData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStockData::fromJsonObject(QJsonObject json) {

    m_market_identifier_isValid = ::OpenAPI::fromJsonValue(m_market_identifier, json[QString("marketIdentifier")]);
    m_market_identifier_isSet = !json[QString("marketIdentifier")].isNull() && m_market_identifier_isValid;

    m_stock_number_isValid = ::OpenAPI::fromJsonValue(m_stock_number, json[QString("stockNumber")]);
    m_stock_number_isSet = !json[QString("stockNumber")].isNull() && m_stock_number_isValid;

    m_ticker_symbol_isValid = ::OpenAPI::fromJsonValue(m_ticker_symbol, json[QString("tickerSymbol")]);
    m_ticker_symbol_isSet = !json[QString("tickerSymbol")].isNull() && m_ticker_symbol_isValid;
}

QString OAIStockData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStockData::asJsonObject() const {
    QJsonObject obj;
    if (m_market_identifier_isSet) {
        obj.insert(QString("marketIdentifier"), ::OpenAPI::toJsonValue(m_market_identifier));
    }
    if (m_stock_number_isSet) {
        obj.insert(QString("stockNumber"), ::OpenAPI::toJsonValue(m_stock_number));
    }
    if (m_ticker_symbol_isSet) {
        obj.insert(QString("tickerSymbol"), ::OpenAPI::toJsonValue(m_ticker_symbol));
    }
    return obj;
}

QString OAIStockData::getMarketIdentifier() const {
    return m_market_identifier;
}
void OAIStockData::setMarketIdentifier(const QString &market_identifier) {
    m_market_identifier = market_identifier;
    m_market_identifier_isSet = true;
}

bool OAIStockData::is_market_identifier_Set() const{
    return m_market_identifier_isSet;
}

bool OAIStockData::is_market_identifier_Valid() const{
    return m_market_identifier_isValid;
}

QString OAIStockData::getStockNumber() const {
    return m_stock_number;
}
void OAIStockData::setStockNumber(const QString &stock_number) {
    m_stock_number = stock_number;
    m_stock_number_isSet = true;
}

bool OAIStockData::is_stock_number_Set() const{
    return m_stock_number_isSet;
}

bool OAIStockData::is_stock_number_Valid() const{
    return m_stock_number_isValid;
}

QString OAIStockData::getTickerSymbol() const {
    return m_ticker_symbol;
}
void OAIStockData::setTickerSymbol(const QString &ticker_symbol) {
    m_ticker_symbol = ticker_symbol;
    m_ticker_symbol_isSet = true;
}

bool OAIStockData::is_ticker_symbol_Set() const{
    return m_ticker_symbol_isSet;
}

bool OAIStockData::is_ticker_symbol_Valid() const{
    return m_ticker_symbol_isValid;
}

bool OAIStockData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_market_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stock_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ticker_symbol_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStockData::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
