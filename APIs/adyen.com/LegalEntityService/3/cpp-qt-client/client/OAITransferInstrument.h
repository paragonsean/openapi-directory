/**
 * Legal Entity Management API
 * The Legal Entity Management API enables you to manage legal entities that contain information required for verification.  ## Authentication Your Adyen contact will provide your API credential and an API key. To connect to the API, add an `X-API-Key` header with the API key as the value. For example:  ``` curl -H \"X-API-Key: YOUR_API_KEY\" \\ -H \"Content-Type: application/json\" \\ ... ``` Alternatively, you can use the username and password of your API credential to connect to the API using basic authentication. For example:  ``` curl -U \"ws_123456@Scope.Company_YOUR_COMPANY_ACCOUNT\":\"YourWsPassword\" \\ -H \"Content-Type: application/json\" \\ ... ``` ## Versioning The Legal Entity Management API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://kyc-test.adyen.com/lem/v3/legalEntities ``` >If you are using hosted onboarding and just beginning your integration, use v3 for your API requests. Otherwise, use v2.  ## Going live When going live, your Adyen contact will provide your API credential for the live environment. You can then use the API key or the username and password to send requests to `https://kyc-live.adyen.com/lem/v3`.  
 *
 * The version of the OpenAPI document: 3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAITransferInstrument.h
 *
 * 
 */

#ifndef OAITransferInstrument_H
#define OAITransferInstrument_H

#include <QJsonObject>

#include "OAIBankAccountInfo.h"
#include "OAICapabilityProblem.h"
#include "OAIDocumentReference.h"
#include "OAISupportingEntityCapability.h"
#include <QList>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIBankAccountInfo;
class OAISupportingEntityCapability;
class OAIDocumentReference;
class OAICapabilityProblem;

class OAITransferInstrument : public OAIObject {
public:
    OAITransferInstrument();
    OAITransferInstrument(QString json);
    ~OAITransferInstrument() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIBankAccountInfo getBankAccount() const;
    void setBankAccount(const OAIBankAccountInfo &bank_account);
    bool is_bank_account_Set() const;
    bool is_bank_account_Valid() const;

    QMap<QString, OAISupportingEntityCapability> getCapabilities() const;
    void setCapabilities(const QMap<QString, OAISupportingEntityCapability> &capabilities);
    bool is_capabilities_Set() const;
    bool is_capabilities_Valid() const;

    QList<OAIDocumentReference> getDocumentDetails() const;
    void setDocumentDetails(const QList<OAIDocumentReference> &document_details);
    bool is_document_details_Set() const;
    bool is_document_details_Valid() const;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    QString getLegalEntityId() const;
    void setLegalEntityId(const QString &legal_entity_id);
    bool is_legal_entity_id_Set() const;
    bool is_legal_entity_id_Valid() const;

    QList<OAICapabilityProblem> getProblems() const;
    void setProblems(const QList<OAICapabilityProblem> &problems);
    bool is_problems_Set() const;
    bool is_problems_Valid() const;

    QString getType() const;
    void setType(const QString &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIBankAccountInfo m_bank_account;
    bool m_bank_account_isSet;
    bool m_bank_account_isValid;

    QMap<QString, OAISupportingEntityCapability> m_capabilities;
    bool m_capabilities_isSet;
    bool m_capabilities_isValid;

    QList<OAIDocumentReference> m_document_details;
    bool m_document_details_isSet;
    bool m_document_details_isValid;

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    QString m_legal_entity_id;
    bool m_legal_entity_id_isSet;
    bool m_legal_entity_id_isValid;

    QList<OAICapabilityProblem> m_problems;
    bool m_problems_isSet;
    bool m_problems_isValid;

    QString m_type;
    bool m_type_isSet;
    bool m_type_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAITransferInstrument)

#endif // OAITransferInstrument_H
