/**
 * Legal Entity Management API
 * The Legal Entity Management API enables you to manage legal entities that contain information required for verification.  ## Authentication Your Adyen contact will provide your API credential and an API key. To connect to the API, add an `X-API-Key` header with the API key as the value. For example:  ``` curl -H \"X-API-Key: YOUR_API_KEY\" \\ -H \"Content-Type: application/json\" \\ ... ``` Alternatively, you can use the username and password of your API credential to connect to the API using basic authentication. For example:  ``` curl -U \"ws_123456@Scope.Company_YOUR_COMPANY_ACCOUNT\":\"YourWsPassword\" \\ -H \"Content-Type: application/json\" \\ ... ``` ## Versioning The Legal Entity Management API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://kyc-test.adyen.com/lem/v3/legalEntities ``` >If you are using hosted onboarding and just beginning your integration, use v3 for your API requests. Otherwise, use v2.  ## Going live When going live, your Adyen contact will provide your API credential for the live environment. You can then use the API key or the username and password to send requests to `https://kyc-live.adyen.com/lem/v3`.  
 *
 * The version of the OpenAPI document: 3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIAttachment.h
 *
 * 
 */

#ifndef OAIAttachment_H
#define OAIAttachment_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIAttachment : public OAIObject {
public:
    OAIAttachment();
    OAIAttachment(QString json);
    ~OAIAttachment() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getContent() const;
    void setContent(const QString &content);
    bool is_content_Set() const;
    bool is_content_Valid() const;

    Q_DECL_DEPRECATED QString getContentType() const;
    Q_DECL_DEPRECATED void setContentType(const QString &content_type);
    Q_DECL_DEPRECATED bool is_content_type_Set() const;
    Q_DECL_DEPRECATED bool is_content_type_Valid() const;

    Q_DECL_DEPRECATED QString getFilename() const;
    Q_DECL_DEPRECATED void setFilename(const QString &filename);
    Q_DECL_DEPRECATED bool is_filename_Set() const;
    Q_DECL_DEPRECATED bool is_filename_Valid() const;

    QString getPageName() const;
    void setPageName(const QString &page_name);
    bool is_page_name_Set() const;
    bool is_page_name_Valid() const;

    QString getPageType() const;
    void setPageType(const QString &page_type);
    bool is_page_type_Set() const;
    bool is_page_type_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_content;
    bool m_content_isSet;
    bool m_content_isValid;

    QString m_content_type;
    bool m_content_type_isSet;
    bool m_content_type_isValid;

    QString m_filename;
    bool m_filename_isSet;
    bool m_filename_isValid;

    QString m_page_name;
    bool m_page_name_isSet;
    bool m_page_name_isValid;

    QString m_page_type;
    bool m_page_type_isSet;
    bool m_page_type_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIAttachment)

#endif // OAIAttachment_H
