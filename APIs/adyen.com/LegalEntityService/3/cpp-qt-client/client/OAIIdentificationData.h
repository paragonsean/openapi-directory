/**
 * Legal Entity Management API
 * The Legal Entity Management API enables you to manage legal entities that contain information required for verification.  ## Authentication Your Adyen contact will provide your API credential and an API key. To connect to the API, add an `X-API-Key` header with the API key as the value. For example:  ``` curl -H \"X-API-Key: YOUR_API_KEY\" \\ -H \"Content-Type: application/json\" \\ ... ``` Alternatively, you can use the username and password of your API credential to connect to the API using basic authentication. For example:  ``` curl -U \"ws_123456@Scope.Company_YOUR_COMPANY_ACCOUNT\":\"YourWsPassword\" \\ -H \"Content-Type: application/json\" \\ ... ``` ## Versioning The Legal Entity Management API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://kyc-test.adyen.com/lem/v3/legalEntities ``` >If you are using hosted onboarding and just beginning your integration, use v3 for your API requests. Otherwise, use v2.  ## Going live When going live, your Adyen contact will provide your API credential for the live environment. You can then use the API key or the username and password to send requests to `https://kyc-live.adyen.com/lem/v3`.  
 *
 * The version of the OpenAPI document: 3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIIdentificationData.h
 *
 * 
 */

#ifndef OAIIdentificationData_H
#define OAIIdentificationData_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIIdentificationData : public OAIObject {
public:
    OAIIdentificationData();
    OAIIdentificationData(QString json);
    ~OAIIdentificationData() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getCardNumber() const;
    void setCardNumber(const QString &card_number);
    bool is_card_number_Set() const;
    bool is_card_number_Valid() const;

    QString getExpiryDate() const;
    void setExpiryDate(const QString &expiry_date);
    bool is_expiry_date_Set() const;
    bool is_expiry_date_Valid() const;

    Q_DECL_DEPRECATED QString getIssuerCountry() const;
    Q_DECL_DEPRECATED void setIssuerCountry(const QString &issuer_country);
    Q_DECL_DEPRECATED bool is_issuer_country_Set() const;
    Q_DECL_DEPRECATED bool is_issuer_country_Valid() const;

    QString getIssuerState() const;
    void setIssuerState(const QString &issuer_state);
    bool is_issuer_state_Set() const;
    bool is_issuer_state_Valid() const;

    bool isNationalIdExempt() const;
    void setNationalIdExempt(const bool &national_id_exempt);
    bool is_national_id_exempt_Set() const;
    bool is_national_id_exempt_Valid() const;

    QString getNumber() const;
    void setNumber(const QString &number);
    bool is_number_Set() const;
    bool is_number_Valid() const;

    QString getType() const;
    void setType(const QString &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_card_number;
    bool m_card_number_isSet;
    bool m_card_number_isValid;

    QString m_expiry_date;
    bool m_expiry_date_isSet;
    bool m_expiry_date_isValid;

    QString m_issuer_country;
    bool m_issuer_country_isSet;
    bool m_issuer_country_isValid;

    QString m_issuer_state;
    bool m_issuer_state_isSet;
    bool m_issuer_state_isValid;

    bool m_national_id_exempt;
    bool m_national_id_exempt_isSet;
    bool m_national_id_exempt_isValid;

    QString m_number;
    bool m_number_isSet;
    bool m_number_isValid;

    QString m_type;
    bool m_type_isSet;
    bool m_type_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIIdentificationData)

#endif // OAIIdentificationData_H
