/**
 * Legal Entity Management API
 * The Legal Entity Management API enables you to manage legal entities that contain information required for verification.  ## Authentication Your Adyen contact will provide your API credential and an API key. To connect to the API, add an `X-API-Key` header with the API key as the value. For example:  ``` curl -H \"X-API-Key: YOUR_API_KEY\" \\ -H \"Content-Type: application/json\" \\ ... ``` Alternatively, you can use the username and password of your API credential to connect to the API using basic authentication. For example:  ``` curl -U \"ws_123456@Scope.Company_YOUR_COMPANY_ACCOUNT\":\"YourWsPassword\" \\ -H \"Content-Type: application/json\" \\ ... ``` ## Versioning The Legal Entity Management API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://kyc-test.adyen.com/lem/v3/legalEntities ``` >If you are using hosted onboarding and just beginning your integration, use v3 for your API requests. Otherwise, use v2.  ## Going live When going live, your Adyen contact will provide your API credential for the live environment. You can then use the API key or the username and password to send requests to `https://kyc-live.adyen.com/lem/v3`.  
 *
 * The version of the OpenAPI document: 3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIBankAccountInfo_accountIdentification.h
 *
 * Identification of the bank account.
 */

#ifndef OAIBankAccountInfo_accountIdentification_H
#define OAIBankAccountInfo_accountIdentification_H

#include <QJsonObject>

#include "OAIAULocalAccountIdentification.h"
#include "OAIAdditionalBankIdentification.h"
#include "OAICALocalAccountIdentification.h"
#include "OAICZLocalAccountIdentification.h"
#include "OAIDKLocalAccountIdentification.h"
#include "OAIHKLocalAccountIdentification.h"
#include "OAIHULocalAccountIdentification.h"
#include "OAIIbanAccountIdentification.h"
#include "OAINOLocalAccountIdentification.h"
#include "OAINZLocalAccountIdentification.h"
#include "OAINumberAndBicAccountIdentification.h"
#include "OAIPLLocalAccountIdentification.h"
#include "OAISELocalAccountIdentification.h"
#include "OAISGLocalAccountIdentification.h"
#include "OAIUKLocalAccountIdentification.h"
#include "OAIUSLocalAccountIdentification.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIAdditionalBankIdentification;

class OAIBankAccountInfo_accountIdentification : public OAIObject {
public:
    OAIBankAccountInfo_accountIdentification();
    OAIBankAccountInfo_accountIdentification(QString json);
    ~OAIBankAccountInfo_accountIdentification() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAccountNumber() const;
    void setAccountNumber(const QString &account_number);
    bool is_account_number_Set() const;
    bool is_account_number_Valid() const;

    QString getBsbCode() const;
    void setBsbCode(const QString &bsb_code);
    bool is_bsb_code_Set() const;
    bool is_bsb_code_Valid() const;

    QString getFormFactor() const;
    void setFormFactor(const QString &form_factor);
    bool is_form_factor_Set() const;
    bool is_form_factor_Valid() const;

    QString getType() const;
    void setType(const QString &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    QString getAccountType() const;
    void setAccountType(const QString &account_type);
    bool is_account_type_Set() const;
    bool is_account_type_Valid() const;

    QString getInstitutionNumber() const;
    void setInstitutionNumber(const QString &institution_number);
    bool is_institution_number_Set() const;
    bool is_institution_number_Valid() const;

    QString getTransitNumber() const;
    void setTransitNumber(const QString &transit_number);
    bool is_transit_number_Set() const;
    bool is_transit_number_Valid() const;

    QString getBankCode() const;
    void setBankCode(const QString &bank_code);
    bool is_bank_code_Set() const;
    bool is_bank_code_Valid() const;

    QString getClearingCode() const;
    void setClearingCode(const QString &clearing_code);
    bool is_clearing_code_Set() const;
    bool is_clearing_code_Valid() const;

    QString getIban() const;
    void setIban(const QString &iban);
    bool is_iban_Set() const;
    bool is_iban_Valid() const;

    OAIAdditionalBankIdentification getAdditionalBankIdentification() const;
    void setAdditionalBankIdentification(const OAIAdditionalBankIdentification &additional_bank_identification);
    bool is_additional_bank_identification_Set() const;
    bool is_additional_bank_identification_Valid() const;

    QString getBic() const;
    void setBic(const QString &bic);
    bool is_bic_Set() const;
    bool is_bic_Valid() const;

    QString getClearingNumber() const;
    void setClearingNumber(const QString &clearing_number);
    bool is_clearing_number_Set() const;
    bool is_clearing_number_Valid() const;

    QString getSortCode() const;
    void setSortCode(const QString &sort_code);
    bool is_sort_code_Set() const;
    bool is_sort_code_Valid() const;

    QString getRoutingNumber() const;
    void setRoutingNumber(const QString &routing_number);
    bool is_routing_number_Set() const;
    bool is_routing_number_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_account_number;
    bool m_account_number_isSet;
    bool m_account_number_isValid;

    QString m_bsb_code;
    bool m_bsb_code_isSet;
    bool m_bsb_code_isValid;

    QString m_form_factor;
    bool m_form_factor_isSet;
    bool m_form_factor_isValid;

    QString m_type;
    bool m_type_isSet;
    bool m_type_isValid;

    QString m_account_type;
    bool m_account_type_isSet;
    bool m_account_type_isValid;

    QString m_institution_number;
    bool m_institution_number_isSet;
    bool m_institution_number_isValid;

    QString m_transit_number;
    bool m_transit_number_isSet;
    bool m_transit_number_isValid;

    QString m_bank_code;
    bool m_bank_code_isSet;
    bool m_bank_code_isValid;

    QString m_clearing_code;
    bool m_clearing_code_isSet;
    bool m_clearing_code_isValid;

    QString m_iban;
    bool m_iban_isSet;
    bool m_iban_isValid;

    OAIAdditionalBankIdentification m_additional_bank_identification;
    bool m_additional_bank_identification_isSet;
    bool m_additional_bank_identification_isValid;

    QString m_bic;
    bool m_bic_isSet;
    bool m_bic_isValid;

    QString m_clearing_number;
    bool m_clearing_number_isSet;
    bool m_clearing_number_isValid;

    QString m_sort_code;
    bool m_sort_code_isSet;
    bool m_sort_code_isValid;

    QString m_routing_number;
    bool m_routing_number_isSet;
    bool m_routing_number_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIBankAccountInfo_accountIdentification)

#endif // OAIBankAccountInfo_accountIdentification_H
