/*
 * Legal Entity Management API
 * The Legal Entity Management API enables you to manage legal entities that contain information required for verification.  ## Authentication Your Adyen contact will provide your API credential and an API key. To connect to the API, add an `X-API-Key` header with the API key as the value. For example:  ``` curl -H \"X-API-Key: YOUR_API_KEY\" \\ -H \"Content-Type: application/json\" \\ ... ``` Alternatively, you can use the username and password of your API credential to connect to the API using basic authentication. For example:  ``` curl -U \"ws_123456@Scope.Company_YOUR_COMPANY_ACCOUNT\":\"YourWsPassword\" \\ -H \"Content-Type: application/json\" \\ ... ``` ## Versioning The Legal Entity Management API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://kyc-test.adyen.com/lem/v3/legalEntities ``` >If you are using hosted onboarding and just beginning your integration, use v3 for your API requests. Otherwise, use v2.  ## Going live When going live, your Adyen contact will provide your API credential for the live environment. You can then use the API key or the username and password to send requests to `https://kyc-live.adyen.com/lem/v3`.  
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.AULocalAccountIdentification;
import org.openapitools.client.model.AdditionalBankIdentification;
import org.openapitools.client.model.CALocalAccountIdentification;
import org.openapitools.client.model.CZLocalAccountIdentification;
import org.openapitools.client.model.DKLocalAccountIdentification;
import org.openapitools.client.model.HKLocalAccountIdentification;
import org.openapitools.client.model.HULocalAccountIdentification;
import org.openapitools.client.model.IbanAccountIdentification;
import org.openapitools.client.model.NOLocalAccountIdentification;
import org.openapitools.client.model.NZLocalAccountIdentification;
import org.openapitools.client.model.NumberAndBicAccountIdentification;
import org.openapitools.client.model.PLLocalAccountIdentification;
import org.openapitools.client.model.SELocalAccountIdentification;
import org.openapitools.client.model.SGLocalAccountIdentification;
import org.openapitools.client.model.UKLocalAccountIdentification;
import org.openapitools.client.model.USLocalAccountIdentification;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for BankAccountInfoAccountIdentification
 */
public class BankAccountInfoAccountIdentificationTest {
    private final BankAccountInfoAccountIdentification model = new BankAccountInfoAccountIdentification();

    /**
     * Model tests for BankAccountInfoAccountIdentification
     */
    @Test
    public void testBankAccountInfoAccountIdentification() {
        // TODO: test BankAccountInfoAccountIdentification
    }

    /**
     * Test the property 'accountNumber'
     */
    @Test
    public void accountNumberTest() {
        // TODO: test accountNumber
    }

    /**
     * Test the property 'bsbCode'
     */
    @Test
    public void bsbCodeTest() {
        // TODO: test bsbCode
    }

    /**
     * Test the property 'formFactor'
     */
    @Test
    public void formFactorTest() {
        // TODO: test formFactor
    }

    /**
     * Test the property 'type'
     */
    @Test
    public void typeTest() {
        // TODO: test type
    }

    /**
     * Test the property 'accountType'
     */
    @Test
    public void accountTypeTest() {
        // TODO: test accountType
    }

    /**
     * Test the property 'institutionNumber'
     */
    @Test
    public void institutionNumberTest() {
        // TODO: test institutionNumber
    }

    /**
     * Test the property 'transitNumber'
     */
    @Test
    public void transitNumberTest() {
        // TODO: test transitNumber
    }

    /**
     * Test the property 'bankCode'
     */
    @Test
    public void bankCodeTest() {
        // TODO: test bankCode
    }

    /**
     * Test the property 'clearingCode'
     */
    @Test
    public void clearingCodeTest() {
        // TODO: test clearingCode
    }

    /**
     * Test the property 'iban'
     */
    @Test
    public void ibanTest() {
        // TODO: test iban
    }

    /**
     * Test the property 'additionalBankIdentification'
     */
    @Test
    public void additionalBankIdentificationTest() {
        // TODO: test additionalBankIdentification
    }

    /**
     * Test the property 'bic'
     */
    @Test
    public void bicTest() {
        // TODO: test bic
    }

    /**
     * Test the property 'clearingNumber'
     */
    @Test
    public void clearingNumberTest() {
        // TODO: test clearingNumber
    }

    /**
     * Test the property 'sortCode'
     */
    @Test
    public void sortCodeTest() {
        // TODO: test sortCode
    }

    /**
     * Test the property 'routingNumber'
     */
    @Test
    public void routingNumberTest() {
        // TODO: test routingNumber
    }

}
