/*
 * Legal Entity Management API
 * The Legal Entity Management API enables you to manage legal entities that contain information required for verification.  ## Authentication Your Adyen contact will provide your API credential and an API key. To connect to the API, add an `X-API-Key` header with the API key as the value. For example:  ``` curl -H \"X-API-Key: YOUR_API_KEY\" \\ -H \"Content-Type: application/json\" \\ ... ``` Alternatively, you can use the username and password of your API credential to connect to the API using basic authentication. For example:  ``` curl -U \"ws_123456@Scope.Company_YOUR_COMPANY_ACCOUNT\":\"YourWsPassword\" \\ -H \"Content-Type: application/json\" \\ ... ``` ## Versioning The Legal Entity Management API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://kyc-test.adyen.com/lem/v3/legalEntities ``` >If you are using hosted onboarding and just beginning your integration, use v3 for your API requests. Otherwise, use v2.  ## Going live When going live, your Adyen contact will provide your API credential for the live environment. You can then use the API key or the username and password to send requests to `https://kyc-live.adyen.com/lem/v3`.  
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.BusinessLine;
import org.openapitools.client.model.BusinessLineInfo;
import org.openapitools.client.model.BusinessLineInfoUpdate;
import org.openapitools.client.model.ServiceError;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for BusinessLinesApi
 */
@Disabled
public class BusinessLinesApiTest {

    private final BusinessLinesApi api = new BusinessLinesApi();

    /**
     * Delete a business line
     *
     * Deletes a business line.   &gt;If you delete a business line linked to a [payment method](https://docs.adyen.com/development-resources/paymentmethodvariant#management-api), it can affect your merchant account&#39;s ability to use the [payment method](https://docs.adyen.com/api-explorer/Management/latest/post/merchants/_merchantId_/paymentMethodSettings). The business line is removed from all linked merchant accounts.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteBusinessLinesIdTest() throws ApiException {
        String id = null;
        api.deleteBusinessLinesId(id);
        // TODO: test validations
    }

    /**
     * Get a business line
     *
     * Returns the detail of a business line.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getBusinessLinesIdTest() throws ApiException {
        String id = null;
        BusinessLine response = api.getBusinessLinesId(id);
        // TODO: test validations
    }

    /**
     * Update a business line
     *
     * Updates a business line.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void patchBusinessLinesIdTest() throws ApiException {
        String id = null;
        BusinessLineInfoUpdate businessLineInfoUpdate = null;
        BusinessLine response = api.patchBusinessLinesId(id, businessLineInfoUpdate);
        // TODO: test validations
    }

    /**
     * Create a business line
     *
     * Creates a business line.   This resource contains information about your user&#39;s line of business, including their industry and their source of funds. Adyen uses this information to verify your users as required by payment industry regulations. Adyen informs you of the verification results through webhooks or API responses.  &gt;If you are using hosted onboarding and just beginning your integration, use v3 for your API requests. Otherwise, use v2.  
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postBusinessLinesTest() throws ApiException {
        BusinessLineInfo businessLineInfo = null;
        BusinessLine response = api.postBusinessLines(businessLineInfo);
        // TODO: test validations
    }

}
