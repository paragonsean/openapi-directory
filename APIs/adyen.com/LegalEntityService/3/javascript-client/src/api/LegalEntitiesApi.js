/**
 * Legal Entity Management API
 * The Legal Entity Management API enables you to manage legal entities that contain information required for verification.  ## Authentication Your Adyen contact will provide your API credential and an API key. To connect to the API, add an `X-API-Key` header with the API key as the value. For example:  ``` curl -H \"X-API-Key: YOUR_API_KEY\" \\ -H \"Content-Type: application/json\" \\ ... ``` Alternatively, you can use the username and password of your API credential to connect to the API using basic authentication. For example:  ``` curl -U \"ws_123456@Scope.Company_YOUR_COMPANY_ACCOUNT\":\"YourWsPassword\" \\ -H \"Content-Type: application/json\" \\ ... ``` ## Versioning The Legal Entity Management API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://kyc-test.adyen.com/lem/v3/legalEntities ``` >If you are using hosted onboarding and just beginning your integration, use v3 for your API requests. Otherwise, use v2.  ## Going live When going live, your Adyen contact will provide your API credential for the live environment. You can then use the API key or the username and password to send requests to `https://kyc-live.adyen.com/lem/v3`.  
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BusinessLines from '../model/BusinessLines';
import DataReviewConfirmationResponse from '../model/DataReviewConfirmationResponse';
import LegalEntity from '../model/LegalEntity';
import LegalEntityInfo from '../model/LegalEntityInfo';
import LegalEntityInfoRequiredType from '../model/LegalEntityInfoRequiredType';
import ServiceError from '../model/ServiceError';
import VerificationErrors from '../model/VerificationErrors';

/**
* LegalEntities service.
* @module api/LegalEntitiesApi
* @version 3
*/
export default class LegalEntitiesApi {

    /**
    * Constructs a new LegalEntitiesApi. 
    * @alias module:api/LegalEntitiesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getLegalEntitiesId operation.
     * @callback module:api/LegalEntitiesApi~getLegalEntitiesIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LegalEntity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a legal entity
     * Returns a legal entity.
     * @param {String} id The unique identifier of the legal entity.
     * @param {module:api/LegalEntitiesApi~getLegalEntitiesIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LegalEntity}
     */
    getLegalEntitiesId(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getLegalEntitiesId");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BasicAuth', 'ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LegalEntity;
      return this.apiClient.callApi(
        '/legalEntities/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getLegalEntitiesIdBusinessLines operation.
     * @callback module:api/LegalEntitiesApi~getLegalEntitiesIdBusinessLinesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BusinessLines} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all business lines under a legal entity
     * Returns the business lines owned by a legal entity.
     * @param {String} id The unique identifier of the legal entity.
     * @param {module:api/LegalEntitiesApi~getLegalEntitiesIdBusinessLinesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BusinessLines}
     */
    getLegalEntitiesIdBusinessLines(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getLegalEntitiesIdBusinessLines");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BasicAuth', 'ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BusinessLines;
      return this.apiClient.callApi(
        '/legalEntities/{id}/businessLines', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the patchLegalEntitiesId operation.
     * @callback module:api/LegalEntitiesApi~patchLegalEntitiesIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LegalEntity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a legal entity
     * Updates a legal entity.   >To change the legal entity type, include only the new `type` in your request. To update the `entityAssociations` array, you need to replace the entire array. For example, if the array has 3 entries and you want to remove 1 entry, you need to PATCH the resource with the remaining 2 entries.
     * @param {String} id The unique identifier of the legal entity.
     * @param {Object} opts Optional parameters
     * @param {String} [xRequestedVerificationCode] Use the requested verification code 0_0001 to resolve any suberrors associated with the legal entity. Requested verification codes can only be used in your test environment.
     * @param {module:model/LegalEntityInfo} [legalEntityInfo] 
     * @param {module:api/LegalEntitiesApi~patchLegalEntitiesIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LegalEntity}
     */
    patchLegalEntitiesId(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['legalEntityInfo'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling patchLegalEntitiesId");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'x-requested-verification-code': opts['xRequestedVerificationCode']
      };
      let formParams = {
      };

      let authNames = ['BasicAuth', 'ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = LegalEntity;
      return this.apiClient.callApi(
        '/legalEntities/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postLegalEntities operation.
     * @callback module:api/LegalEntitiesApi~postLegalEntitiesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LegalEntity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a legal entity
     * Creates a legal entity.   This resource contains information about the user that will be onboarded in your platform. Adyen uses this information to perform verification checks as required by payment industry regulations. Adyen informs you of the verification results through webhooks or API responses.   >If you are using hosted onboarding and just beginning your integration, use v3 for your API requests. Otherwise, use v2.  
     * @param {Object} opts Optional parameters
     * @param {String} [xRequestedVerificationCode] Use a suberror code as your requested verification code. You can include one code at a time in your request header. Requested verification codes can only be used in your test environment.
     * @param {module:model/LegalEntityInfoRequiredType} [legalEntityInfoRequiredType] 
     * @param {module:api/LegalEntitiesApi~postLegalEntitiesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LegalEntity}
     */
    postLegalEntities(opts, callback) {
      opts = opts || {};
      let postBody = opts['legalEntityInfoRequiredType'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'x-requested-verification-code': opts['xRequestedVerificationCode']
      };
      let formParams = {
      };

      let authNames = ['BasicAuth', 'ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = LegalEntity;
      return this.apiClient.callApi(
        '/legalEntities', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postLegalEntitiesIdCheckVerificationErrors operation.
     * @callback module:api/LegalEntitiesApi~postLegalEntitiesIdCheckVerificationErrorsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VerificationErrors} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check a legal entity's verification errors
     * Returns the verification errors for a legal entity and its supporting entities.
     * @param {String} id The unique identifier of the legal entity.
     * @param {module:api/LegalEntitiesApi~postLegalEntitiesIdCheckVerificationErrorsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VerificationErrors}
     */
    postLegalEntitiesIdCheckVerificationErrors(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling postLegalEntitiesIdCheckVerificationErrors");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BasicAuth', 'ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = VerificationErrors;
      return this.apiClient.callApi(
        '/legalEntities/{id}/checkVerificationErrors', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postLegalEntitiesIdConfirmDataReview operation.
     * @callback module:api/LegalEntitiesApi~postLegalEntitiesIdConfirmDataReviewCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DataReviewConfirmationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Confirm data review
     * Confirms that your user has reviewed the data for the legal entity specified in the path. Call this endpoint to inform Adyen that your user reviewed and verified that the data is up-to-date. The endpoint returns the timestamp of when Adyen received the request.
     * @param {String} id The unique identifier of the legal entity.
     * @param {module:api/LegalEntitiesApi~postLegalEntitiesIdConfirmDataReviewCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DataReviewConfirmationResponse}
     */
    postLegalEntitiesIdConfirmDataReview(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling postLegalEntitiesIdConfirmDataReview");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BasicAuth', 'ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DataReviewConfirmationResponse;
      return this.apiClient.callApi(
        '/legalEntities/{id}/confirmDataReview', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
