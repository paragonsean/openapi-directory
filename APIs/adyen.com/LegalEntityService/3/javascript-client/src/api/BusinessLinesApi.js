/**
 * Legal Entity Management API
 * The Legal Entity Management API enables you to manage legal entities that contain information required for verification.  ## Authentication Your Adyen contact will provide your API credential and an API key. To connect to the API, add an `X-API-Key` header with the API key as the value. For example:  ``` curl -H \"X-API-Key: YOUR_API_KEY\" \\ -H \"Content-Type: application/json\" \\ ... ``` Alternatively, you can use the username and password of your API credential to connect to the API using basic authentication. For example:  ``` curl -U \"ws_123456@Scope.Company_YOUR_COMPANY_ACCOUNT\":\"YourWsPassword\" \\ -H \"Content-Type: application/json\" \\ ... ``` ## Versioning The Legal Entity Management API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://kyc-test.adyen.com/lem/v3/legalEntities ``` >If you are using hosted onboarding and just beginning your integration, use v3 for your API requests. Otherwise, use v2.  ## Going live When going live, your Adyen contact will provide your API credential for the live environment. You can then use the API key or the username and password to send requests to `https://kyc-live.adyen.com/lem/v3`.  
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BusinessLine from '../model/BusinessLine';
import BusinessLineInfo from '../model/BusinessLineInfo';
import BusinessLineInfoUpdate from '../model/BusinessLineInfoUpdate';
import ServiceError from '../model/ServiceError';

/**
* BusinessLines service.
* @module api/BusinessLinesApi
* @version 3
*/
export default class BusinessLinesApi {

    /**
    * Constructs a new BusinessLinesApi. 
    * @alias module:api/BusinessLinesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deleteBusinessLinesId operation.
     * @callback module:api/BusinessLinesApi~deleteBusinessLinesIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a business line
     * Deletes a business line.   >If you delete a business line linked to a [payment method](https://docs.adyen.com/development-resources/paymentmethodvariant#management-api), it can affect your merchant account's ability to use the [payment method](https://docs.adyen.com/api-explorer/Management/latest/post/merchants/_merchantId_/paymentMethodSettings). The business line is removed from all linked merchant accounts.
     * @param {String} id The unique identifier of the business line to be deleted.
     * @param {module:api/BusinessLinesApi~deleteBusinessLinesIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteBusinessLinesId(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteBusinessLinesId");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BasicAuth', 'ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/businessLines/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getBusinessLinesId operation.
     * @callback module:api/BusinessLinesApi~getBusinessLinesIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BusinessLine} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a business line
     * Returns the detail of a business line.
     * @param {String} id The unique identifier of the business line.
     * @param {module:api/BusinessLinesApi~getBusinessLinesIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BusinessLine}
     */
    getBusinessLinesId(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getBusinessLinesId");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BasicAuth', 'ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BusinessLine;
      return this.apiClient.callApi(
        '/businessLines/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the patchBusinessLinesId operation.
     * @callback module:api/BusinessLinesApi~patchBusinessLinesIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BusinessLine} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a business line
     * Updates a business line.
     * @param {String} id The unique identifier of the business line.
     * @param {Object} opts Optional parameters
     * @param {module:model/BusinessLineInfoUpdate} [businessLineInfoUpdate] 
     * @param {module:api/BusinessLinesApi~patchBusinessLinesIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BusinessLine}
     */
    patchBusinessLinesId(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['businessLineInfoUpdate'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling patchBusinessLinesId");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BasicAuth', 'ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BusinessLine;
      return this.apiClient.callApi(
        '/businessLines/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postBusinessLines operation.
     * @callback module:api/BusinessLinesApi~postBusinessLinesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BusinessLine} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a business line
     * Creates a business line.   This resource contains information about your user's line of business, including their industry and their source of funds. Adyen uses this information to verify your users as required by payment industry regulations. Adyen informs you of the verification results through webhooks or API responses.  >If you are using hosted onboarding and just beginning your integration, use v3 for your API requests. Otherwise, use v2.  
     * @param {Object} opts Optional parameters
     * @param {module:model/BusinessLineInfo} [businessLineInfo] 
     * @param {module:api/BusinessLinesApi~postBusinessLinesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BusinessLine}
     */
    postBusinessLines(opts, callback) {
      opts = opts || {};
      let postBody = opts['businessLineInfo'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BasicAuth', 'ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BusinessLine;
      return this.apiClient.callApi(
        '/businessLines', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
