/**
 * Legal Entity Management API
 * The Legal Entity Management API enables you to manage legal entities that contain information required for verification.  ## Authentication Your Adyen contact will provide your API credential and an API key. To connect to the API, add an `X-API-Key` header with the API key as the value. For example:  ``` curl -H \"X-API-Key: YOUR_API_KEY\" \\ -H \"Content-Type: application/json\" \\ ... ``` Alternatively, you can use the username and password of your API credential to connect to the API using basic authentication. For example:  ``` curl -U \"ws_123456@Scope.Company_YOUR_COMPANY_ACCOUNT\":\"YourWsPassword\" \\ -H \"Content-Type: application/json\" \\ ... ``` ## Versioning The Legal Entity Management API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://kyc-test.adyen.com/lem/v3/legalEntities ``` >If you are using hosted onboarding and just beginning your integration, use v3 for your API requests. Otherwise, use v2.  ## Going live When going live, your Adyen contact will provide your API credential for the live environment. You can then use the API key or the username and password to send requests to `https://kyc-live.adyen.com/lem/v3`.  
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CapabilityProblem from './CapabilityProblem';
import SourceOfFunds from './SourceOfFunds';
import WebData from './WebData';
import WebDataExemption from './WebDataExemption';

/**
 * The BusinessLine model module.
 * @module model/BusinessLine
 * @version 3
 */
class BusinessLine {
    /**
     * Constructs a new <code>BusinessLine</code>.
     * @alias module:model/BusinessLine
     * @param id {String} The unique identifier of the business line.
     * @param industryCode {String} A code that represents the [industry of the legal entity](https://docs.adyen.com/marketplaces-and-platforms/verification-requirements/reference-additional-products/#list-industry-codes). For example, **4431A** for computer software stores.
     * @param legalEntityId {String} Unique identifier of the [legal entity](https://docs.adyen.com/api-explorer/#/legalentity/latest/post/legalEntities__resParam_id) that owns the business line.
     * @param service {module:model/BusinessLine.ServiceEnum} The service for which you are creating the business line.    Possible values: *  **paymentProcessing** *  **banking**  
     */
    constructor(id, industryCode, legalEntityId, service) { 
        
        BusinessLine.initialize(this, id, industryCode, legalEntityId, service);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, industryCode, legalEntityId, service) { 
        obj['id'] = id;
        obj['industryCode'] = industryCode;
        obj['legalEntityId'] = legalEntityId;
        obj['service'] = service;
    }

    /**
     * Constructs a <code>BusinessLine</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BusinessLine} obj Optional instance to populate.
     * @return {module:model/BusinessLine} The populated <code>BusinessLine</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BusinessLine();

            if (data.hasOwnProperty('capability')) {
                obj['capability'] = ApiClient.convertToType(data['capability'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('industryCode')) {
                obj['industryCode'] = ApiClient.convertToType(data['industryCode'], 'String');
            }
            if (data.hasOwnProperty('legalEntityId')) {
                obj['legalEntityId'] = ApiClient.convertToType(data['legalEntityId'], 'String');
            }
            if (data.hasOwnProperty('problems')) {
                obj['problems'] = ApiClient.convertToType(data['problems'], [CapabilityProblem]);
            }
            if (data.hasOwnProperty('salesChannels')) {
                obj['salesChannels'] = ApiClient.convertToType(data['salesChannels'], ['String']);
            }
            if (data.hasOwnProperty('service')) {
                obj['service'] = ApiClient.convertToType(data['service'], 'String');
            }
            if (data.hasOwnProperty('sourceOfFunds')) {
                obj['sourceOfFunds'] = SourceOfFunds.constructFromObject(data['sourceOfFunds']);
            }
            if (data.hasOwnProperty('webData')) {
                obj['webData'] = ApiClient.convertToType(data['webData'], [WebData]);
            }
            if (data.hasOwnProperty('webDataExemption')) {
                obj['webDataExemption'] = WebDataExemption.constructFromObject(data['webDataExemption']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BusinessLine</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BusinessLine</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of BusinessLine.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['capability'] && !(typeof data['capability'] === 'string' || data['capability'] instanceof String)) {
            throw new Error("Expected the field `capability` to be a primitive type in the JSON string but got " + data['capability']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['industryCode'] && !(typeof data['industryCode'] === 'string' || data['industryCode'] instanceof String)) {
            throw new Error("Expected the field `industryCode` to be a primitive type in the JSON string but got " + data['industryCode']);
        }
        // ensure the json data is a string
        if (data['legalEntityId'] && !(typeof data['legalEntityId'] === 'string' || data['legalEntityId'] instanceof String)) {
            throw new Error("Expected the field `legalEntityId` to be a primitive type in the JSON string but got " + data['legalEntityId']);
        }
        if (data['problems']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['problems'])) {
                throw new Error("Expected the field `problems` to be an array in the JSON data but got " + data['problems']);
            }
            // validate the optional field `problems` (array)
            for (const item of data['problems']) {
                CapabilityProblem.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['salesChannels'])) {
            throw new Error("Expected the field `salesChannels` to be an array in the JSON data but got " + data['salesChannels']);
        }
        // ensure the json data is a string
        if (data['service'] && !(typeof data['service'] === 'string' || data['service'] instanceof String)) {
            throw new Error("Expected the field `service` to be a primitive type in the JSON string but got " + data['service']);
        }
        // validate the optional field `sourceOfFunds`
        if (data['sourceOfFunds']) { // data not null
          SourceOfFunds.validateJSON(data['sourceOfFunds']);
        }
        if (data['webData']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['webData'])) {
                throw new Error("Expected the field `webData` to be an array in the JSON data but got " + data['webData']);
            }
            // validate the optional field `webData` (array)
            for (const item of data['webData']) {
                WebData.validateJSON(item);
            };
        }
        // validate the optional field `webDataExemption`
        if (data['webDataExemption']) { // data not null
          WebDataExemption.validateJSON(data['webDataExemption']);
        }

        return true;
    }


}

BusinessLine.RequiredProperties = ["id", "industryCode", "legalEntityId", "service"];

/**
 * The capability for which you are creating the business line.  Possible values: **receivePayments**, **receiveFromPlatformPayments**, **issueBankAccount**
 * @member {module:model/BusinessLine.CapabilityEnum} capability
 */
BusinessLine.prototype['capability'] = undefined;

/**
 * The unique identifier of the business line.
 * @member {String} id
 */
BusinessLine.prototype['id'] = undefined;

/**
 * A code that represents the [industry of the legal entity](https://docs.adyen.com/marketplaces-and-platforms/verification-requirements/reference-additional-products/#list-industry-codes). For example, **4431A** for computer software stores.
 * @member {String} industryCode
 */
BusinessLine.prototype['industryCode'] = undefined;

/**
 * Unique identifier of the [legal entity](https://docs.adyen.com/api-explorer/#/legalentity/latest/post/legalEntities__resParam_id) that owns the business line.
 * @member {String} legalEntityId
 */
BusinessLine.prototype['legalEntityId'] = undefined;

/**
 * The verification errors related to capabilities for this supporting entity.
 * @member {Array.<module:model/CapabilityProblem>} problems
 */
BusinessLine.prototype['problems'] = undefined;

/**
 * A list of channels where goods or services are sold.  Possible values: **pos**, **posMoto**, **eCommerce**, **ecomMoto**, **payByLink**.  Required only in combination with the `service` **paymentProcessing**.
 * @member {Array.<String>} salesChannels
 */
BusinessLine.prototype['salesChannels'] = undefined;

/**
 * The service for which you are creating the business line.    Possible values: *  **paymentProcessing** *  **banking**  
 * @member {module:model/BusinessLine.ServiceEnum} service
 */
BusinessLine.prototype['service'] = undefined;

/**
 * Contains information about the source of your user's funds. Required only for the `service` **banking**.
 * @member {module:model/SourceOfFunds} sourceOfFunds
 */
BusinessLine.prototype['sourceOfFunds'] = undefined;

/**
 * List of website URLs where your user's goods or services are sold. When this is required for a service but your user does not have an online presence, provide the reason in the `webDataExemption` object.
 * @member {Array.<module:model/WebData>} webData
 */
BusinessLine.prototype['webData'] = undefined;

/**
 * The reason why the web data is not provided.
 * @member {module:model/WebDataExemption} webDataExemption
 */
BusinessLine.prototype['webDataExemption'] = undefined;





/**
 * Allowed values for the <code>capability</code> property.
 * @enum {String}
 * @readonly
 */
BusinessLine['CapabilityEnum'] = {

    /**
     * value: "receivePayments"
     * @const
     */
    "receivePayments": "receivePayments",

    /**
     * value: "receiveFromPlatformPayments"
     * @const
     */
    "receiveFromPlatformPayments": "receiveFromPlatformPayments",

    /**
     * value: "issueBankAccount"
     * @const
     */
    "issueBankAccount": "issueBankAccount"
};


/**
 * Allowed values for the <code>service</code> property.
 * @enum {String}
 * @readonly
 */
BusinessLine['ServiceEnum'] = {

    /**
     * value: "paymentProcessing"
     * @const
     */
    "paymentProcessing": "paymentProcessing",

    /**
     * value: "banking"
     * @const
     */
    "banking": "banking"
};



export default BusinessLine;

