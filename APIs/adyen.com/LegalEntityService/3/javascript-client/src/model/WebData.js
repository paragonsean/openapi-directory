/**
 * Legal Entity Management API
 * The Legal Entity Management API enables you to manage legal entities that contain information required for verification.  ## Authentication Your Adyen contact will provide your API credential and an API key. To connect to the API, add an `X-API-Key` header with the API key as the value. For example:  ``` curl -H \"X-API-Key: YOUR_API_KEY\" \\ -H \"Content-Type: application/json\" \\ ... ``` Alternatively, you can use the username and password of your API credential to connect to the API using basic authentication. For example:  ``` curl -U \"ws_123456@Scope.Company_YOUR_COMPANY_ACCOUNT\":\"YourWsPassword\" \\ -H \"Content-Type: application/json\" \\ ... ``` ## Versioning The Legal Entity Management API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://kyc-test.adyen.com/lem/v3/legalEntities ``` >If you are using hosted onboarding and just beginning your integration, use v3 for your API requests. Otherwise, use v2.  ## Going live When going live, your Adyen contact will provide your API credential for the live environment. You can then use the API key or the username and password to send requests to `https://kyc-live.adyen.com/lem/v3`.  
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The WebData model module.
 * @module model/WebData
 * @version 3
 */
class WebData {
    /**
     * Constructs a new <code>WebData</code>.
     * @alias module:model/WebData
     */
    constructor() { 
        
        WebData.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>WebData</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/WebData} obj Optional instance to populate.
     * @return {module:model/WebData} The populated <code>WebData</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new WebData();

            if (data.hasOwnProperty('webAddress')) {
                obj['webAddress'] = ApiClient.convertToType(data['webAddress'], 'String');
            }
            if (data.hasOwnProperty('webAddressId')) {
                obj['webAddressId'] = ApiClient.convertToType(data['webAddressId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>WebData</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>WebData</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['webAddress'] && !(typeof data['webAddress'] === 'string' || data['webAddress'] instanceof String)) {
            throw new Error("Expected the field `webAddress` to be a primitive type in the JSON string but got " + data['webAddress']);
        }
        // ensure the json data is a string
        if (data['webAddressId'] && !(typeof data['webAddressId'] === 'string' || data['webAddressId'] instanceof String)) {
            throw new Error("Expected the field `webAddressId` to be a primitive type in the JSON string but got " + data['webAddressId']);
        }

        return true;
    }


}



/**
 * The URL of the website or the app store URL.
 * @member {String} webAddress
 */
WebData.prototype['webAddress'] = undefined;

/**
 * The unique identifier of the web address.
 * @member {String} webAddressId
 */
WebData.prototype['webAddressId'] = undefined;






export default WebData;

