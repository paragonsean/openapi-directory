/**
 * Legal Entity Management API
 * The Legal Entity Management API enables you to manage legal entities that contain information required for verification.  ## Authentication Your Adyen contact will provide your API credential and an API key. To connect to the API, add an `X-API-Key` header with the API key as the value. For example:  ``` curl -H \"X-API-Key: YOUR_API_KEY\" \\ -H \"Content-Type: application/json\" \\ ... ``` Alternatively, you can use the username and password of your API credential to connect to the API using basic authentication. For example:  ``` curl -U \"ws_123456@Scope.Company_YOUR_COMPANY_ACCOUNT\":\"YourWsPassword\" \\ -H \"Content-Type: application/json\" \\ ... ``` ## Versioning The Legal Entity Management API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://kyc-test.adyen.com/lem/v3/legalEntities ``` >If you are using hosted onboarding and just beginning your integration, use v3 for your API requests. Otherwise, use v2.  ## Going live When going live, your Adyen contact will provide your API credential for the live environment. You can then use the API key or the username and password to send requests to `https://kyc-live.adyen.com/lem/v3`.  
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.LegalEntityManagementApi);
  }
}(this, function(expect, LegalEntityManagementApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new LegalEntityManagementApi.TransferInstrument();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('TransferInstrument', function() {
    it('should create an instance of TransferInstrument', function() {
      // uncomment below and update the code to test TransferInstrument
      //var instance = new LegalEntityManagementApi.TransferInstrument();
      //expect(instance).to.be.a(LegalEntityManagementApi.TransferInstrument);
    });

    it('should have the property bankAccount (base name: "bankAccount")', function() {
      // uncomment below and update the code to test the property bankAccount
      //var instance = new LegalEntityManagementApi.TransferInstrument();
      //expect(instance).to.be();
    });

    it('should have the property capabilities (base name: "capabilities")', function() {
      // uncomment below and update the code to test the property capabilities
      //var instance = new LegalEntityManagementApi.TransferInstrument();
      //expect(instance).to.be();
    });

    it('should have the property documentDetails (base name: "documentDetails")', function() {
      // uncomment below and update the code to test the property documentDetails
      //var instance = new LegalEntityManagementApi.TransferInstrument();
      //expect(instance).to.be();
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instance = new LegalEntityManagementApi.TransferInstrument();
      //expect(instance).to.be();
    });

    it('should have the property legalEntityId (base name: "legalEntityId")', function() {
      // uncomment below and update the code to test the property legalEntityId
      //var instance = new LegalEntityManagementApi.TransferInstrument();
      //expect(instance).to.be();
    });

    it('should have the property problems (base name: "problems")', function() {
      // uncomment below and update the code to test the property problems
      //var instance = new LegalEntityManagementApi.TransferInstrument();
      //expect(instance).to.be();
    });

    it('should have the property type (base name: "type")', function() {
      // uncomment below and update the code to test the property type
      //var instance = new LegalEntityManagementApi.TransferInstrument();
      //expect(instance).to.be();
    });

  });

}));
