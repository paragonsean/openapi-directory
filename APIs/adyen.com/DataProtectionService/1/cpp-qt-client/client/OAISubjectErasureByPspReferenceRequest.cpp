/**
 * Adyen Data Protection API
 * Adyen Data Protection API provides a way for you to process [Subject Erasure Requests](https://gdpr-info.eu/art-17-gdpr/) as mandated in GDPR.  Use our API to submit a request to delete shopper's data, including payment details and other related information (for example, delivery address or shopper email).## Authentication Each request to the Data Protection API must be signed with an API key. Get your API Key from your Customer Area, as described in [How to get the API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key). Then set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: Your_API_key\" \\ ... ``` Note that when going live, you need to generate a new API Key to access the [live endpoints](https://docs.adyen.com/development-resources/live-endpoints).  ## Versioning Data Protection Service API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://ca-test.adyen.com/ca/services/DataProtectionService/v1/requestSubjectErasure ```
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISubjectErasureByPspReferenceRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISubjectErasureByPspReferenceRequest::OAISubjectErasureByPspReferenceRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISubjectErasureByPspReferenceRequest::OAISubjectErasureByPspReferenceRequest() {
    this->initializeModel();
}

OAISubjectErasureByPspReferenceRequest::~OAISubjectErasureByPspReferenceRequest() {}

void OAISubjectErasureByPspReferenceRequest::initializeModel() {

    m_force_erasure_isSet = false;
    m_force_erasure_isValid = false;

    m_merchant_account_isSet = false;
    m_merchant_account_isValid = false;

    m_psp_reference_isSet = false;
    m_psp_reference_isValid = false;
}

void OAISubjectErasureByPspReferenceRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISubjectErasureByPspReferenceRequest::fromJsonObject(QJsonObject json) {

    m_force_erasure_isValid = ::OpenAPI::fromJsonValue(m_force_erasure, json[QString("forceErasure")]);
    m_force_erasure_isSet = !json[QString("forceErasure")].isNull() && m_force_erasure_isValid;

    m_merchant_account_isValid = ::OpenAPI::fromJsonValue(m_merchant_account, json[QString("merchantAccount")]);
    m_merchant_account_isSet = !json[QString("merchantAccount")].isNull() && m_merchant_account_isValid;

    m_psp_reference_isValid = ::OpenAPI::fromJsonValue(m_psp_reference, json[QString("pspReference")]);
    m_psp_reference_isSet = !json[QString("pspReference")].isNull() && m_psp_reference_isValid;
}

QString OAISubjectErasureByPspReferenceRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISubjectErasureByPspReferenceRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_force_erasure_isSet) {
        obj.insert(QString("forceErasure"), ::OpenAPI::toJsonValue(m_force_erasure));
    }
    if (m_merchant_account_isSet) {
        obj.insert(QString("merchantAccount"), ::OpenAPI::toJsonValue(m_merchant_account));
    }
    if (m_psp_reference_isSet) {
        obj.insert(QString("pspReference"), ::OpenAPI::toJsonValue(m_psp_reference));
    }
    return obj;
}

bool OAISubjectErasureByPspReferenceRequest::isForceErasure() const {
    return m_force_erasure;
}
void OAISubjectErasureByPspReferenceRequest::setForceErasure(const bool &force_erasure) {
    m_force_erasure = force_erasure;
    m_force_erasure_isSet = true;
}

bool OAISubjectErasureByPspReferenceRequest::is_force_erasure_Set() const{
    return m_force_erasure_isSet;
}

bool OAISubjectErasureByPspReferenceRequest::is_force_erasure_Valid() const{
    return m_force_erasure_isValid;
}

QString OAISubjectErasureByPspReferenceRequest::getMerchantAccount() const {
    return m_merchant_account;
}
void OAISubjectErasureByPspReferenceRequest::setMerchantAccount(const QString &merchant_account) {
    m_merchant_account = merchant_account;
    m_merchant_account_isSet = true;
}

bool OAISubjectErasureByPspReferenceRequest::is_merchant_account_Set() const{
    return m_merchant_account_isSet;
}

bool OAISubjectErasureByPspReferenceRequest::is_merchant_account_Valid() const{
    return m_merchant_account_isValid;
}

QString OAISubjectErasureByPspReferenceRequest::getPspReference() const {
    return m_psp_reference;
}
void OAISubjectErasureByPspReferenceRequest::setPspReference(const QString &psp_reference) {
    m_psp_reference = psp_reference;
    m_psp_reference_isSet = true;
}

bool OAISubjectErasureByPspReferenceRequest::is_psp_reference_Set() const{
    return m_psp_reference_isSet;
}

bool OAISubjectErasureByPspReferenceRequest::is_psp_reference_Valid() const{
    return m_psp_reference_isValid;
}

bool OAISubjectErasureByPspReferenceRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_force_erasure_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_merchant_account_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_psp_reference_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISubjectErasureByPspReferenceRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
