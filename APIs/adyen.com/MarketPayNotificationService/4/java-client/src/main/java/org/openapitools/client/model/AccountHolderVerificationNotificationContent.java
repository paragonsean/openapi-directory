/*
 * Classic Platforms - Notifications
 * This API is used for the classic integration. If you are just starting your implementation, refer to our [new integration guide](https://docs.adyen.com/marketplaces-and-platforms) instead.  The Notification API sends notifications to the endpoints specified in a given subscription.  Subscriptions are managed through the Notification Configuration API. The API specifications listed here detail the format of each notification.  For more information, refer to our [documentation](https://docs.adyen.com/marketplaces-and-platforms/classic/notifications).
 *
 * The version of the OpenAPI document: 4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.KYCCheckSummary;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AccountHolderVerificationNotificationContent
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:13:20.243573-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AccountHolderVerificationNotificationContent {
  public static final String SERIALIZED_NAME_ACCOUNT_HOLDER_CODE = "accountHolderCode";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_HOLDER_CODE)
  private String accountHolderCode;

  public static final String SERIALIZED_NAME_BANK_ACCOUNT_U_U_I_D = "bankAccountUUID";
  @SerializedName(SERIALIZED_NAME_BANK_ACCOUNT_U_U_I_D)
  private String bankAccountUUID;

  public static final String SERIALIZED_NAME_SHAREHOLDER_CODE = "shareholderCode";
  @SerializedName(SERIALIZED_NAME_SHAREHOLDER_CODE)
  private String shareholderCode;

  public static final String SERIALIZED_NAME_SIGNATORY_CODE = "signatoryCode";
  @SerializedName(SERIALIZED_NAME_SIGNATORY_CODE)
  private String signatoryCode;

  public static final String SERIALIZED_NAME_STATUS_SUMMARY = "statusSummary";
  @SerializedName(SERIALIZED_NAME_STATUS_SUMMARY)
  private KYCCheckSummary statusSummary;

  /**
   * The status of verification.
   */
  @JsonAdapter(VerificationStatusEnum.Adapter.class)
  public enum VerificationStatusEnum {
    AWAITING_DATA("AWAITING_DATA"),
    
    DATA_PROVIDED("DATA_PROVIDED"),
    
    FAILED("FAILED"),
    
    INVALID_DATA("INVALID_DATA"),
    
    PASSED("PASSED"),
    
    PENDING("PENDING"),
    
    PENDING_REVIEW("PENDING_REVIEW"),
    
    RETRY_LIMIT_REACHED("RETRY_LIMIT_REACHED"),
    
    UNCHECKED("UNCHECKED");

    private String value;

    VerificationStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static VerificationStatusEnum fromValue(String value) {
      for (VerificationStatusEnum b : VerificationStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<VerificationStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final VerificationStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public VerificationStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return VerificationStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      VerificationStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_VERIFICATION_STATUS = "verificationStatus";
  @SerializedName(SERIALIZED_NAME_VERIFICATION_STATUS)
  private VerificationStatusEnum verificationStatus;

  /**
   * The type of validation performed.
   */
  @JsonAdapter(VerificationTypeEnum.Adapter.class)
  public enum VerificationTypeEnum {
    BANK_ACCOUNT_VERIFICATION("BANK_ACCOUNT_VERIFICATION"),
    
    CARD_VERIFICATION("CARD_VERIFICATION"),
    
    COMPANY_VERIFICATION("COMPANY_VERIFICATION"),
    
    IDENTITY_VERIFICATION("IDENTITY_VERIFICATION"),
    
    LEGAL_ARRANGEMENT_VERIFICATION("LEGAL_ARRANGEMENT_VERIFICATION"),
    
    NONPROFIT_VERIFICATION("NONPROFIT_VERIFICATION"),
    
    PASSPORT_VERIFICATION("PASSPORT_VERIFICATION"),
    
    PAYOUT_METHOD_VERIFICATION("PAYOUT_METHOD_VERIFICATION"),
    
    PCI_VERIFICATION("PCI_VERIFICATION");

    private String value;

    VerificationTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static VerificationTypeEnum fromValue(String value) {
      for (VerificationTypeEnum b : VerificationTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<VerificationTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final VerificationTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public VerificationTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return VerificationTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      VerificationTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_VERIFICATION_TYPE = "verificationType";
  @SerializedName(SERIALIZED_NAME_VERIFICATION_TYPE)
  private VerificationTypeEnum verificationType;

  public AccountHolderVerificationNotificationContent() {
  }

  public AccountHolderVerificationNotificationContent accountHolderCode(String accountHolderCode) {
    this.accountHolderCode = accountHolderCode;
    return this;
  }

  /**
   * The code of the account holder.
   * @return accountHolderCode
   */
  @javax.annotation.Nullable
  public String getAccountHolderCode() {
    return accountHolderCode;
  }

  public void setAccountHolderCode(String accountHolderCode) {
    this.accountHolderCode = accountHolderCode;
  }


  public AccountHolderVerificationNotificationContent bankAccountUUID(String bankAccountUUID) {
    this.bankAccountUUID = bankAccountUUID;
    return this;
  }

  /**
   * The unique ID of the bank account that has been verified.
   * @return bankAccountUUID
   */
  @javax.annotation.Nullable
  public String getBankAccountUUID() {
    return bankAccountUUID;
  }

  public void setBankAccountUUID(String bankAccountUUID) {
    this.bankAccountUUID = bankAccountUUID;
  }


  public AccountHolderVerificationNotificationContent shareholderCode(String shareholderCode) {
    this.shareholderCode = shareholderCode;
    return this;
  }

  /**
   * The code of the shareholder that has been verified.
   * @return shareholderCode
   */
  @javax.annotation.Nullable
  public String getShareholderCode() {
    return shareholderCode;
  }

  public void setShareholderCode(String shareholderCode) {
    this.shareholderCode = shareholderCode;
  }


  public AccountHolderVerificationNotificationContent signatoryCode(String signatoryCode) {
    this.signatoryCode = signatoryCode;
    return this;
  }

  /**
   * The code of the signatory that has been verified.
   * @return signatoryCode
   */
  @javax.annotation.Nullable
  public String getSignatoryCode() {
    return signatoryCode;
  }

  public void setSignatoryCode(String signatoryCode) {
    this.signatoryCode = signatoryCode;
  }


  public AccountHolderVerificationNotificationContent statusSummary(KYCCheckSummary statusSummary) {
    this.statusSummary = statusSummary;
    return this;
  }

  /**
   * A summary of the verification status.
   * @return statusSummary
   */
  @javax.annotation.Nullable
  public KYCCheckSummary getStatusSummary() {
    return statusSummary;
  }

  public void setStatusSummary(KYCCheckSummary statusSummary) {
    this.statusSummary = statusSummary;
  }


  public AccountHolderVerificationNotificationContent verificationStatus(VerificationStatusEnum verificationStatus) {
    this.verificationStatus = verificationStatus;
    return this;
  }

  /**
   * The status of verification.
   * @return verificationStatus
   */
  @javax.annotation.Nullable
  public VerificationStatusEnum getVerificationStatus() {
    return verificationStatus;
  }

  public void setVerificationStatus(VerificationStatusEnum verificationStatus) {
    this.verificationStatus = verificationStatus;
  }


  public AccountHolderVerificationNotificationContent verificationType(VerificationTypeEnum verificationType) {
    this.verificationType = verificationType;
    return this;
  }

  /**
   * The type of validation performed.
   * @return verificationType
   */
  @javax.annotation.Nullable
  public VerificationTypeEnum getVerificationType() {
    return verificationType;
  }

  public void setVerificationType(VerificationTypeEnum verificationType) {
    this.verificationType = verificationType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AccountHolderVerificationNotificationContent accountHolderVerificationNotificationContent = (AccountHolderVerificationNotificationContent) o;
    return Objects.equals(this.accountHolderCode, accountHolderVerificationNotificationContent.accountHolderCode) &&
        Objects.equals(this.bankAccountUUID, accountHolderVerificationNotificationContent.bankAccountUUID) &&
        Objects.equals(this.shareholderCode, accountHolderVerificationNotificationContent.shareholderCode) &&
        Objects.equals(this.signatoryCode, accountHolderVerificationNotificationContent.signatoryCode) &&
        Objects.equals(this.statusSummary, accountHolderVerificationNotificationContent.statusSummary) &&
        Objects.equals(this.verificationStatus, accountHolderVerificationNotificationContent.verificationStatus) &&
        Objects.equals(this.verificationType, accountHolderVerificationNotificationContent.verificationType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountHolderCode, bankAccountUUID, shareholderCode, signatoryCode, statusSummary, verificationStatus, verificationType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AccountHolderVerificationNotificationContent {\n");
    sb.append("    accountHolderCode: ").append(toIndentedString(accountHolderCode)).append("\n");
    sb.append("    bankAccountUUID: ").append(toIndentedString(bankAccountUUID)).append("\n");
    sb.append("    shareholderCode: ").append(toIndentedString(shareholderCode)).append("\n");
    sb.append("    signatoryCode: ").append(toIndentedString(signatoryCode)).append("\n");
    sb.append("    statusSummary: ").append(toIndentedString(statusSummary)).append("\n");
    sb.append("    verificationStatus: ").append(toIndentedString(verificationStatus)).append("\n");
    sb.append("    verificationType: ").append(toIndentedString(verificationType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accountHolderCode");
    openapiFields.add("bankAccountUUID");
    openapiFields.add("shareholderCode");
    openapiFields.add("signatoryCode");
    openapiFields.add("statusSummary");
    openapiFields.add("verificationStatus");
    openapiFields.add("verificationType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AccountHolderVerificationNotificationContent
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AccountHolderVerificationNotificationContent.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AccountHolderVerificationNotificationContent is not found in the empty JSON string", AccountHolderVerificationNotificationContent.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AccountHolderVerificationNotificationContent.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AccountHolderVerificationNotificationContent` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("accountHolderCode") != null && !jsonObj.get("accountHolderCode").isJsonNull()) && !jsonObj.get("accountHolderCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountHolderCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountHolderCode").toString()));
      }
      if ((jsonObj.get("bankAccountUUID") != null && !jsonObj.get("bankAccountUUID").isJsonNull()) && !jsonObj.get("bankAccountUUID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bankAccountUUID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bankAccountUUID").toString()));
      }
      if ((jsonObj.get("shareholderCode") != null && !jsonObj.get("shareholderCode").isJsonNull()) && !jsonObj.get("shareholderCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shareholderCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shareholderCode").toString()));
      }
      if ((jsonObj.get("signatoryCode") != null && !jsonObj.get("signatoryCode").isJsonNull()) && !jsonObj.get("signatoryCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `signatoryCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("signatoryCode").toString()));
      }
      // validate the optional field `statusSummary`
      if (jsonObj.get("statusSummary") != null && !jsonObj.get("statusSummary").isJsonNull()) {
        KYCCheckSummary.validateJsonElement(jsonObj.get("statusSummary"));
      }
      if ((jsonObj.get("verificationStatus") != null && !jsonObj.get("verificationStatus").isJsonNull()) && !jsonObj.get("verificationStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `verificationStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("verificationStatus").toString()));
      }
      // validate the optional field `verificationStatus`
      if (jsonObj.get("verificationStatus") != null && !jsonObj.get("verificationStatus").isJsonNull()) {
        VerificationStatusEnum.validateJsonElement(jsonObj.get("verificationStatus"));
      }
      if ((jsonObj.get("verificationType") != null && !jsonObj.get("verificationType").isJsonNull()) && !jsonObj.get("verificationType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `verificationType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("verificationType").toString()));
      }
      // validate the optional field `verificationType`
      if (jsonObj.get("verificationType") != null && !jsonObj.get("verificationType").isJsonNull()) {
        VerificationTypeEnum.validateJsonElement(jsonObj.get("verificationType"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AccountHolderVerificationNotificationContent.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AccountHolderVerificationNotificationContent' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AccountHolderVerificationNotificationContent> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AccountHolderVerificationNotificationContent.class));

       return (TypeAdapter<T>) new TypeAdapter<AccountHolderVerificationNotificationContent>() {
           @Override
           public void write(JsonWriter out, AccountHolderVerificationNotificationContent value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AccountHolderVerificationNotificationContent read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AccountHolderVerificationNotificationContent given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AccountHolderVerificationNotificationContent
   * @throws IOException if the JSON string is invalid with respect to AccountHolderVerificationNotificationContent
   */
  public static AccountHolderVerificationNotificationContent fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AccountHolderVerificationNotificationContent.class);
  }

  /**
   * Convert an instance of AccountHolderVerificationNotificationContent to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

