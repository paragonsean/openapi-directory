/*
 * Classic Platforms - Notifications
 * This API is used for the classic integration. If you are just starting your implementation, refer to our [new integration guide](https://docs.adyen.com/marketplaces-and-platforms) instead.  The Notification API sends notifications to the endpoints specified in a given subscription.  Subscriptions are managed through the Notification Configuration API. The API specifications listed here detail the format of each notification.  For more information, refer to our [documentation](https://docs.adyen.com/marketplaces-and-platforms/classic/notifications).
 *
 * The version of the OpenAPI document: 4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.Amount;
import org.openapitools.client.model.BankAccountDetail;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Transaction
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:13:20.243573-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Transaction {
  public static final String SERIALIZED_NAME_AMOUNT = "amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  private Amount amount;

  public static final String SERIALIZED_NAME_BANK_ACCOUNT_DETAIL = "bankAccountDetail";
  @SerializedName(SERIALIZED_NAME_BANK_ACCOUNT_DETAIL)
  private BankAccountDetail bankAccountDetail;

  public static final String SERIALIZED_NAME_CAPTURE_MERCHANT_REFERENCE = "captureMerchantReference";
  @SerializedName(SERIALIZED_NAME_CAPTURE_MERCHANT_REFERENCE)
  private String captureMerchantReference;

  public static final String SERIALIZED_NAME_CAPTURE_PSP_REFERENCE = "capturePspReference";
  @SerializedName(SERIALIZED_NAME_CAPTURE_PSP_REFERENCE)
  private String capturePspReference;

  public static final String SERIALIZED_NAME_CREATION_DATE = "creationDate";
  @SerializedName(SERIALIZED_NAME_CREATION_DATE)
  private OffsetDateTime creationDate;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DESTINATION_ACCOUNT_CODE = "destinationAccountCode";
  @SerializedName(SERIALIZED_NAME_DESTINATION_ACCOUNT_CODE)
  private String destinationAccountCode;

  public static final String SERIALIZED_NAME_DISPUTE_PSP_REFERENCE = "disputePspReference";
  @SerializedName(SERIALIZED_NAME_DISPUTE_PSP_REFERENCE)
  private String disputePspReference;

  public static final String SERIALIZED_NAME_DISPUTE_REASON_CODE = "disputeReasonCode";
  @SerializedName(SERIALIZED_NAME_DISPUTE_REASON_CODE)
  private String disputeReasonCode;

  public static final String SERIALIZED_NAME_MERCHANT_REFERENCE = "merchantReference";
  @SerializedName(SERIALIZED_NAME_MERCHANT_REFERENCE)
  private String merchantReference;

  public static final String SERIALIZED_NAME_PAYMENT_PSP_REFERENCE = "paymentPspReference";
  @SerializedName(SERIALIZED_NAME_PAYMENT_PSP_REFERENCE)
  private String paymentPspReference;

  public static final String SERIALIZED_NAME_PAYOUT_PSP_REFERENCE = "payoutPspReference";
  @SerializedName(SERIALIZED_NAME_PAYOUT_PSP_REFERENCE)
  private String payoutPspReference;

  public static final String SERIALIZED_NAME_PSP_REFERENCE = "pspReference";
  @SerializedName(SERIALIZED_NAME_PSP_REFERENCE)
  private String pspReference;

  public static final String SERIALIZED_NAME_SOURCE_ACCOUNT_CODE = "sourceAccountCode";
  @SerializedName(SERIALIZED_NAME_SOURCE_ACCOUNT_CODE)
  private String sourceAccountCode;

  /**
   * The status of the transaction. &gt;Permitted values: &#x60;PendingCredit&#x60;, &#x60;CreditFailed&#x60;, &#x60;CreditClosed&#x60;, &#x60;CreditSuspended&#x60;, &#x60;Credited&#x60;, &#x60;Converted&#x60;, &#x60;PendingDebit&#x60;, &#x60;DebitFailed&#x60;, &#x60;Debited&#x60;, &#x60;DebitReversedReceived&#x60;, &#x60;DebitedReversed&#x60;, &#x60;ChargebackReceived&#x60;, &#x60;Chargeback&#x60;, &#x60;ChargebackReversedReceived&#x60;, &#x60;ChargebackReversed&#x60;, &#x60;Payout&#x60;, &#x60;PayoutReversed&#x60;, &#x60;FundTransfer&#x60;, &#x60;PendingFundTransfer&#x60;, &#x60;ManualCorrected&#x60;.
   */
  @JsonAdapter(TransactionStatusEnum.Adapter.class)
  public enum TransactionStatusEnum {
    BALANCE_NOT_PAID_OUT_TRANSFER("BalanceNotPaidOutTransfer"),
    
    BALANCE_PLATFORM_SWEEP("BalancePlatformSweep"),
    
    BALANCE_PLATFORM_SWEEP_RETURNED("BalancePlatformSweepReturned"),
    
    CHARGEBACK("Chargeback"),
    
    CHARGEBACK_CORRECTION("ChargebackCorrection"),
    
    CHARGEBACK_CORRECTION_RECEIVED("ChargebackCorrectionReceived"),
    
    CHARGEBACK_RECEIVED("ChargebackReceived"),
    
    CHARGEBACK_REVERSED("ChargebackReversed"),
    
    CHARGEBACK_REVERSED_CORRECTION("ChargebackReversedCorrection"),
    
    CHARGEBACK_REVERSED_CORRECTION_RECEIVED("ChargebackReversedCorrectionReceived"),
    
    CHARGEBACK_REVERSED_RECEIVED("ChargebackReversedReceived"),
    
    CONVERTED("Converted"),
    
    CREDIT_CLOSED("CreditClosed"),
    
    CREDIT_FAILED("CreditFailed"),
    
    CREDIT_REVERSED("CreditReversed"),
    
    CREDIT_REVERSED_RECEIVED("CreditReversedReceived"),
    
    CREDIT_SUSPENDED("CreditSuspended"),
    
    CREDITED("Credited"),
    
    DEBIT_FAILED("DebitFailed"),
    
    DEBIT_REVERSED_RECEIVED("DebitReversedReceived"),
    
    DEBITED("Debited"),
    
    DEBITED_REVERSED("DebitedReversed"),
    
    DEPOSIT_CORRECTION_CREDITED("DepositCorrectionCredited"),
    
    DEPOSIT_CORRECTION_DEBITED("DepositCorrectionDebited"),
    
    FEE("Fee"),
    
    FUND_TRANSFER("FundTransfer"),
    
    FUND_TRANSFER_REVERSED("FundTransferReversed"),
    
    INVOICE_DEDUCTION_CREDITED("InvoiceDeductionCredited"),
    
    INVOICE_DEDUCTION_DEBITED("InvoiceDeductionDebited"),
    
    MANUAL_CORRECTED("ManualCorrected"),
    
    MANUAL_CORRECTION_CREDITED("ManualCorrectionCredited"),
    
    MANUAL_CORRECTION_DEBITED("ManualCorrectionDebited"),
    
    MERCHANT_PAYIN("MerchantPayin"),
    
    MERCHANT_PAYIN_REVERSED("MerchantPayinReversed"),
    
    PAYOUT("Payout"),
    
    PAYOUT_REVERSED("PayoutReversed"),
    
    PENDING_CREDIT("PendingCredit"),
    
    PENDING_DEBIT("PendingDebit"),
    
    PENDING_FUND_TRANSFER("PendingFundTransfer"),
    
    RE_CREDITED("ReCredited"),
    
    RE_CREDITED_RECEIVED("ReCreditedReceived"),
    
    SECOND_CHARGEBACK("SecondChargeback"),
    
    SECOND_CHARGEBACK_CORRECTION("SecondChargebackCorrection"),
    
    SECOND_CHARGEBACK_CORRECTION_RECEIVED("SecondChargebackCorrectionReceived"),
    
    SECOND_CHARGEBACK_RECEIVED("SecondChargebackReceived");

    private String value;

    TransactionStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TransactionStatusEnum fromValue(String value) {
      for (TransactionStatusEnum b : TransactionStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TransactionStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TransactionStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TransactionStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TransactionStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TransactionStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TRANSACTION_STATUS = "transactionStatus";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_STATUS)
  private TransactionStatusEnum transactionStatus;

  public static final String SERIALIZED_NAME_TRANSFER_CODE = "transferCode";
  @SerializedName(SERIALIZED_NAME_TRANSFER_CODE)
  private String transferCode;

  public Transaction() {
  }

  public Transaction amount(Amount amount) {
    this.amount = amount;
    return this;
  }

  /**
   * The amount of the transaction.
   * @return amount
   */
  @javax.annotation.Nullable
  public Amount getAmount() {
    return amount;
  }

  public void setAmount(Amount amount) {
    this.amount = amount;
  }


  public Transaction bankAccountDetail(BankAccountDetail bankAccountDetail) {
    this.bankAccountDetail = bankAccountDetail;
    return this;
  }

  /**
   * The details of the bank account to where a payout was made.
   * @return bankAccountDetail
   */
  @javax.annotation.Nullable
  public BankAccountDetail getBankAccountDetail() {
    return bankAccountDetail;
  }

  public void setBankAccountDetail(BankAccountDetail bankAccountDetail) {
    this.bankAccountDetail = bankAccountDetail;
  }


  public Transaction captureMerchantReference(String captureMerchantReference) {
    this.captureMerchantReference = captureMerchantReference;
    return this;
  }

  /**
   * The merchant reference of a related capture.
   * @return captureMerchantReference
   */
  @javax.annotation.Nullable
  public String getCaptureMerchantReference() {
    return captureMerchantReference;
  }

  public void setCaptureMerchantReference(String captureMerchantReference) {
    this.captureMerchantReference = captureMerchantReference;
  }


  public Transaction capturePspReference(String capturePspReference) {
    this.capturePspReference = capturePspReference;
    return this;
  }

  /**
   * The psp reference of a related capture.
   * @return capturePspReference
   */
  @javax.annotation.Nullable
  public String getCapturePspReference() {
    return capturePspReference;
  }

  public void setCapturePspReference(String capturePspReference) {
    this.capturePspReference = capturePspReference;
  }


  public Transaction creationDate(OffsetDateTime creationDate) {
    this.creationDate = creationDate;
    return this;
  }

  /**
   * The date on which the transaction was performed.
   * @return creationDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreationDate() {
    return creationDate;
  }

  public void setCreationDate(OffsetDateTime creationDate) {
    this.creationDate = creationDate;
  }


  public Transaction description(String description) {
    this.description = description;
    return this;
  }

  /**
   * A description of the transaction.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public Transaction destinationAccountCode(String destinationAccountCode) {
    this.destinationAccountCode = destinationAccountCode;
    return this;
  }

  /**
   * The code of the account to which funds were credited during an outgoing fund transfer.
   * @return destinationAccountCode
   */
  @javax.annotation.Nullable
  public String getDestinationAccountCode() {
    return destinationAccountCode;
  }

  public void setDestinationAccountCode(String destinationAccountCode) {
    this.destinationAccountCode = destinationAccountCode;
  }


  public Transaction disputePspReference(String disputePspReference) {
    this.disputePspReference = disputePspReference;
    return this;
  }

  /**
   * The psp reference of the related dispute.
   * @return disputePspReference
   */
  @javax.annotation.Nullable
  public String getDisputePspReference() {
    return disputePspReference;
  }

  public void setDisputePspReference(String disputePspReference) {
    this.disputePspReference = disputePspReference;
  }


  public Transaction disputeReasonCode(String disputeReasonCode) {
    this.disputeReasonCode = disputeReasonCode;
    return this;
  }

  /**
   * The reason code of a dispute.
   * @return disputeReasonCode
   */
  @javax.annotation.Nullable
  public String getDisputeReasonCode() {
    return disputeReasonCode;
  }

  public void setDisputeReasonCode(String disputeReasonCode) {
    this.disputeReasonCode = disputeReasonCode;
  }


  public Transaction merchantReference(String merchantReference) {
    this.merchantReference = merchantReference;
    return this;
  }

  /**
   * The merchant reference of a transaction.
   * @return merchantReference
   */
  @javax.annotation.Nullable
  public String getMerchantReference() {
    return merchantReference;
  }

  public void setMerchantReference(String merchantReference) {
    this.merchantReference = merchantReference;
  }


  public Transaction paymentPspReference(String paymentPspReference) {
    this.paymentPspReference = paymentPspReference;
    return this;
  }

  /**
   * The psp reference of the related authorisation or transfer.
   * @return paymentPspReference
   */
  @javax.annotation.Nullable
  public String getPaymentPspReference() {
    return paymentPspReference;
  }

  public void setPaymentPspReference(String paymentPspReference) {
    this.paymentPspReference = paymentPspReference;
  }


  public Transaction payoutPspReference(String payoutPspReference) {
    this.payoutPspReference = payoutPspReference;
    return this;
  }

  /**
   * The psp reference of the related payout.
   * @return payoutPspReference
   */
  @javax.annotation.Nullable
  public String getPayoutPspReference() {
    return payoutPspReference;
  }

  public void setPayoutPspReference(String payoutPspReference) {
    this.payoutPspReference = payoutPspReference;
  }


  public Transaction pspReference(String pspReference) {
    this.pspReference = pspReference;
    return this;
  }

  /**
   * The psp reference of a transaction.
   * @return pspReference
   */
  @javax.annotation.Nullable
  public String getPspReference() {
    return pspReference;
  }

  public void setPspReference(String pspReference) {
    this.pspReference = pspReference;
  }


  public Transaction sourceAccountCode(String sourceAccountCode) {
    this.sourceAccountCode = sourceAccountCode;
    return this;
  }

  /**
   * The code of the account from which funds were debited during an incoming fund transfer.
   * @return sourceAccountCode
   */
  @javax.annotation.Nullable
  public String getSourceAccountCode() {
    return sourceAccountCode;
  }

  public void setSourceAccountCode(String sourceAccountCode) {
    this.sourceAccountCode = sourceAccountCode;
  }


  public Transaction transactionStatus(TransactionStatusEnum transactionStatus) {
    this.transactionStatus = transactionStatus;
    return this;
  }

  /**
   * The status of the transaction. &gt;Permitted values: &#x60;PendingCredit&#x60;, &#x60;CreditFailed&#x60;, &#x60;CreditClosed&#x60;, &#x60;CreditSuspended&#x60;, &#x60;Credited&#x60;, &#x60;Converted&#x60;, &#x60;PendingDebit&#x60;, &#x60;DebitFailed&#x60;, &#x60;Debited&#x60;, &#x60;DebitReversedReceived&#x60;, &#x60;DebitedReversed&#x60;, &#x60;ChargebackReceived&#x60;, &#x60;Chargeback&#x60;, &#x60;ChargebackReversedReceived&#x60;, &#x60;ChargebackReversed&#x60;, &#x60;Payout&#x60;, &#x60;PayoutReversed&#x60;, &#x60;FundTransfer&#x60;, &#x60;PendingFundTransfer&#x60;, &#x60;ManualCorrected&#x60;.
   * @return transactionStatus
   */
  @javax.annotation.Nullable
  public TransactionStatusEnum getTransactionStatus() {
    return transactionStatus;
  }

  public void setTransactionStatus(TransactionStatusEnum transactionStatus) {
    this.transactionStatus = transactionStatus;
  }


  public Transaction transferCode(String transferCode) {
    this.transferCode = transferCode;
    return this;
  }

  /**
   * The transfer code of the transaction.
   * @return transferCode
   */
  @javax.annotation.Nullable
  public String getTransferCode() {
    return transferCode;
  }

  public void setTransferCode(String transferCode) {
    this.transferCode = transferCode;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Transaction transaction = (Transaction) o;
    return Objects.equals(this.amount, transaction.amount) &&
        Objects.equals(this.bankAccountDetail, transaction.bankAccountDetail) &&
        Objects.equals(this.captureMerchantReference, transaction.captureMerchantReference) &&
        Objects.equals(this.capturePspReference, transaction.capturePspReference) &&
        Objects.equals(this.creationDate, transaction.creationDate) &&
        Objects.equals(this.description, transaction.description) &&
        Objects.equals(this.destinationAccountCode, transaction.destinationAccountCode) &&
        Objects.equals(this.disputePspReference, transaction.disputePspReference) &&
        Objects.equals(this.disputeReasonCode, transaction.disputeReasonCode) &&
        Objects.equals(this.merchantReference, transaction.merchantReference) &&
        Objects.equals(this.paymentPspReference, transaction.paymentPspReference) &&
        Objects.equals(this.payoutPspReference, transaction.payoutPspReference) &&
        Objects.equals(this.pspReference, transaction.pspReference) &&
        Objects.equals(this.sourceAccountCode, transaction.sourceAccountCode) &&
        Objects.equals(this.transactionStatus, transaction.transactionStatus) &&
        Objects.equals(this.transferCode, transaction.transferCode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(amount, bankAccountDetail, captureMerchantReference, capturePspReference, creationDate, description, destinationAccountCode, disputePspReference, disputeReasonCode, merchantReference, paymentPspReference, payoutPspReference, pspReference, sourceAccountCode, transactionStatus, transferCode);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Transaction {\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    bankAccountDetail: ").append(toIndentedString(bankAccountDetail)).append("\n");
    sb.append("    captureMerchantReference: ").append(toIndentedString(captureMerchantReference)).append("\n");
    sb.append("    capturePspReference: ").append(toIndentedString(capturePspReference)).append("\n");
    sb.append("    creationDate: ").append(toIndentedString(creationDate)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    destinationAccountCode: ").append(toIndentedString(destinationAccountCode)).append("\n");
    sb.append("    disputePspReference: ").append(toIndentedString(disputePspReference)).append("\n");
    sb.append("    disputeReasonCode: ").append(toIndentedString(disputeReasonCode)).append("\n");
    sb.append("    merchantReference: ").append(toIndentedString(merchantReference)).append("\n");
    sb.append("    paymentPspReference: ").append(toIndentedString(paymentPspReference)).append("\n");
    sb.append("    payoutPspReference: ").append(toIndentedString(payoutPspReference)).append("\n");
    sb.append("    pspReference: ").append(toIndentedString(pspReference)).append("\n");
    sb.append("    sourceAccountCode: ").append(toIndentedString(sourceAccountCode)).append("\n");
    sb.append("    transactionStatus: ").append(toIndentedString(transactionStatus)).append("\n");
    sb.append("    transferCode: ").append(toIndentedString(transferCode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("amount");
    openapiFields.add("bankAccountDetail");
    openapiFields.add("captureMerchantReference");
    openapiFields.add("capturePspReference");
    openapiFields.add("creationDate");
    openapiFields.add("description");
    openapiFields.add("destinationAccountCode");
    openapiFields.add("disputePspReference");
    openapiFields.add("disputeReasonCode");
    openapiFields.add("merchantReference");
    openapiFields.add("paymentPspReference");
    openapiFields.add("payoutPspReference");
    openapiFields.add("pspReference");
    openapiFields.add("sourceAccountCode");
    openapiFields.add("transactionStatus");
    openapiFields.add("transferCode");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Transaction
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Transaction.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Transaction is not found in the empty JSON string", Transaction.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Transaction.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Transaction` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `amount`
      if (jsonObj.get("amount") != null && !jsonObj.get("amount").isJsonNull()) {
        Amount.validateJsonElement(jsonObj.get("amount"));
      }
      // validate the optional field `bankAccountDetail`
      if (jsonObj.get("bankAccountDetail") != null && !jsonObj.get("bankAccountDetail").isJsonNull()) {
        BankAccountDetail.validateJsonElement(jsonObj.get("bankAccountDetail"));
      }
      if ((jsonObj.get("captureMerchantReference") != null && !jsonObj.get("captureMerchantReference").isJsonNull()) && !jsonObj.get("captureMerchantReference").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `captureMerchantReference` to be a primitive type in the JSON string but got `%s`", jsonObj.get("captureMerchantReference").toString()));
      }
      if ((jsonObj.get("capturePspReference") != null && !jsonObj.get("capturePspReference").isJsonNull()) && !jsonObj.get("capturePspReference").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `capturePspReference` to be a primitive type in the JSON string but got `%s`", jsonObj.get("capturePspReference").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("destinationAccountCode") != null && !jsonObj.get("destinationAccountCode").isJsonNull()) && !jsonObj.get("destinationAccountCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `destinationAccountCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("destinationAccountCode").toString()));
      }
      if ((jsonObj.get("disputePspReference") != null && !jsonObj.get("disputePspReference").isJsonNull()) && !jsonObj.get("disputePspReference").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `disputePspReference` to be a primitive type in the JSON string but got `%s`", jsonObj.get("disputePspReference").toString()));
      }
      if ((jsonObj.get("disputeReasonCode") != null && !jsonObj.get("disputeReasonCode").isJsonNull()) && !jsonObj.get("disputeReasonCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `disputeReasonCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("disputeReasonCode").toString()));
      }
      if ((jsonObj.get("merchantReference") != null && !jsonObj.get("merchantReference").isJsonNull()) && !jsonObj.get("merchantReference").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `merchantReference` to be a primitive type in the JSON string but got `%s`", jsonObj.get("merchantReference").toString()));
      }
      if ((jsonObj.get("paymentPspReference") != null && !jsonObj.get("paymentPspReference").isJsonNull()) && !jsonObj.get("paymentPspReference").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `paymentPspReference` to be a primitive type in the JSON string but got `%s`", jsonObj.get("paymentPspReference").toString()));
      }
      if ((jsonObj.get("payoutPspReference") != null && !jsonObj.get("payoutPspReference").isJsonNull()) && !jsonObj.get("payoutPspReference").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payoutPspReference` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payoutPspReference").toString()));
      }
      if ((jsonObj.get("pspReference") != null && !jsonObj.get("pspReference").isJsonNull()) && !jsonObj.get("pspReference").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pspReference` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pspReference").toString()));
      }
      if ((jsonObj.get("sourceAccountCode") != null && !jsonObj.get("sourceAccountCode").isJsonNull()) && !jsonObj.get("sourceAccountCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sourceAccountCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sourceAccountCode").toString()));
      }
      if ((jsonObj.get("transactionStatus") != null && !jsonObj.get("transactionStatus").isJsonNull()) && !jsonObj.get("transactionStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transactionStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transactionStatus").toString()));
      }
      // validate the optional field `transactionStatus`
      if (jsonObj.get("transactionStatus") != null && !jsonObj.get("transactionStatus").isJsonNull()) {
        TransactionStatusEnum.validateJsonElement(jsonObj.get("transactionStatus"));
      }
      if ((jsonObj.get("transferCode") != null && !jsonObj.get("transferCode").isJsonNull()) && !jsonObj.get("transferCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transferCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transferCode").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Transaction.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Transaction' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Transaction> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Transaction.class));

       return (TypeAdapter<T>) new TypeAdapter<Transaction>() {
           @Override
           public void write(JsonWriter out, Transaction value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Transaction read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Transaction given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Transaction
   * @throws IOException if the JSON string is invalid with respect to Transaction
   */
  public static Transaction fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Transaction.class);
  }

  /**
   * Convert an instance of Transaction to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

