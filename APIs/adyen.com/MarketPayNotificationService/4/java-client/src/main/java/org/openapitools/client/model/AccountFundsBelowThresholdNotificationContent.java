/*
 * Classic Platforms - Notifications
 * This API is used for the classic integration. If you are just starting your implementation, refer to our [new integration guide](https://docs.adyen.com/marketplaces-and-platforms) instead.  The Notification API sends notifications to the endpoints specified in a given subscription.  Subscriptions are managed through the Notification Configuration API. The API specifications listed here detail the format of each notification.  For more information, refer to our [documentation](https://docs.adyen.com/marketplaces-and-platforms/classic/notifications).
 *
 * The version of the OpenAPI document: 4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Amount;
import org.openapitools.client.model.ModelLocalDate;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AccountFundsBelowThresholdNotificationContent
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:13:20.243573-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AccountFundsBelowThresholdNotificationContent {
  public static final String SERIALIZED_NAME_ACCOUNT_CODE = "accountCode";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_CODE)
  private String accountCode;

  public static final String SERIALIZED_NAME_BALANCE_DATE = "balanceDate";
  @SerializedName(SERIALIZED_NAME_BALANCE_DATE)
  private ModelLocalDate balanceDate;

  public static final String SERIALIZED_NAME_CURRENT_FUNDS = "currentFunds";
  @SerializedName(SERIALIZED_NAME_CURRENT_FUNDS)
  private Amount currentFunds;

  public static final String SERIALIZED_NAME_FUND_THRESHOLD = "fundThreshold";
  @SerializedName(SERIALIZED_NAME_FUND_THRESHOLD)
  private Amount fundThreshold;

  public static final String SERIALIZED_NAME_MERCHANT_ACCOUNT_CODE = "merchantAccountCode";
  @SerializedName(SERIALIZED_NAME_MERCHANT_ACCOUNT_CODE)
  private String merchantAccountCode;

  public AccountFundsBelowThresholdNotificationContent() {
  }

  public AccountFundsBelowThresholdNotificationContent accountCode(String accountCode) {
    this.accountCode = accountCode;
    return this;
  }

  /**
   * The code of the account with funds under threshold
   * @return accountCode
   */
  @javax.annotation.Nullable
  public String getAccountCode() {
    return accountCode;
  }

  public void setAccountCode(String accountCode) {
    this.accountCode = accountCode;
  }


  public AccountFundsBelowThresholdNotificationContent balanceDate(ModelLocalDate balanceDate) {
    this.balanceDate = balanceDate;
    return this;
  }

  /**
   * The date of the funds were found to be below threshold.
   * @return balanceDate
   */
  @javax.annotation.Nullable
  public ModelLocalDate getBalanceDate() {
    return balanceDate;
  }

  public void setBalanceDate(ModelLocalDate balanceDate) {
    this.balanceDate = balanceDate;
  }


  public AccountFundsBelowThresholdNotificationContent currentFunds(Amount currentFunds) {
    this.currentFunds = currentFunds;
    return this;
  }

  /**
   * The current funds in the liable account.
   * @return currentFunds
   */
  @javax.annotation.Nullable
  public Amount getCurrentFunds() {
    return currentFunds;
  }

  public void setCurrentFunds(Amount currentFunds) {
    this.currentFunds = currentFunds;
  }


  public AccountFundsBelowThresholdNotificationContent fundThreshold(Amount fundThreshold) {
    this.fundThreshold = fundThreshold;
    return this;
  }

  /**
   * The configured fund threshold for the liable account
   * @return fundThreshold
   */
  @javax.annotation.Nonnull
  public Amount getFundThreshold() {
    return fundThreshold;
  }

  public void setFundThreshold(Amount fundThreshold) {
    this.fundThreshold = fundThreshold;
  }


  public AccountFundsBelowThresholdNotificationContent merchantAccountCode(String merchantAccountCode) {
    this.merchantAccountCode = merchantAccountCode;
    return this;
  }

  /**
   * The code of the merchant account.
   * @return merchantAccountCode
   */
  @javax.annotation.Nonnull
  public String getMerchantAccountCode() {
    return merchantAccountCode;
  }

  public void setMerchantAccountCode(String merchantAccountCode) {
    this.merchantAccountCode = merchantAccountCode;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AccountFundsBelowThresholdNotificationContent accountFundsBelowThresholdNotificationContent = (AccountFundsBelowThresholdNotificationContent) o;
    return Objects.equals(this.accountCode, accountFundsBelowThresholdNotificationContent.accountCode) &&
        Objects.equals(this.balanceDate, accountFundsBelowThresholdNotificationContent.balanceDate) &&
        Objects.equals(this.currentFunds, accountFundsBelowThresholdNotificationContent.currentFunds) &&
        Objects.equals(this.fundThreshold, accountFundsBelowThresholdNotificationContent.fundThreshold) &&
        Objects.equals(this.merchantAccountCode, accountFundsBelowThresholdNotificationContent.merchantAccountCode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountCode, balanceDate, currentFunds, fundThreshold, merchantAccountCode);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AccountFundsBelowThresholdNotificationContent {\n");
    sb.append("    accountCode: ").append(toIndentedString(accountCode)).append("\n");
    sb.append("    balanceDate: ").append(toIndentedString(balanceDate)).append("\n");
    sb.append("    currentFunds: ").append(toIndentedString(currentFunds)).append("\n");
    sb.append("    fundThreshold: ").append(toIndentedString(fundThreshold)).append("\n");
    sb.append("    merchantAccountCode: ").append(toIndentedString(merchantAccountCode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accountCode");
    openapiFields.add("balanceDate");
    openapiFields.add("currentFunds");
    openapiFields.add("fundThreshold");
    openapiFields.add("merchantAccountCode");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("fundThreshold");
    openapiRequiredFields.add("merchantAccountCode");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AccountFundsBelowThresholdNotificationContent
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AccountFundsBelowThresholdNotificationContent.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AccountFundsBelowThresholdNotificationContent is not found in the empty JSON string", AccountFundsBelowThresholdNotificationContent.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AccountFundsBelowThresholdNotificationContent.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AccountFundsBelowThresholdNotificationContent` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AccountFundsBelowThresholdNotificationContent.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("accountCode") != null && !jsonObj.get("accountCode").isJsonNull()) && !jsonObj.get("accountCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountCode").toString()));
      }
      // validate the optional field `balanceDate`
      if (jsonObj.get("balanceDate") != null && !jsonObj.get("balanceDate").isJsonNull()) {
        ModelLocalDate.validateJsonElement(jsonObj.get("balanceDate"));
      }
      // validate the optional field `currentFunds`
      if (jsonObj.get("currentFunds") != null && !jsonObj.get("currentFunds").isJsonNull()) {
        Amount.validateJsonElement(jsonObj.get("currentFunds"));
      }
      // validate the required field `fundThreshold`
      Amount.validateJsonElement(jsonObj.get("fundThreshold"));
      if (!jsonObj.get("merchantAccountCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `merchantAccountCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("merchantAccountCode").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AccountFundsBelowThresholdNotificationContent.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AccountFundsBelowThresholdNotificationContent' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AccountFundsBelowThresholdNotificationContent> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AccountFundsBelowThresholdNotificationContent.class));

       return (TypeAdapter<T>) new TypeAdapter<AccountFundsBelowThresholdNotificationContent>() {
           @Override
           public void write(JsonWriter out, AccountFundsBelowThresholdNotificationContent value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AccountFundsBelowThresholdNotificationContent read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AccountFundsBelowThresholdNotificationContent given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AccountFundsBelowThresholdNotificationContent
   * @throws IOException if the JSON string is invalid with respect to AccountFundsBelowThresholdNotificationContent
   */
  public static AccountFundsBelowThresholdNotificationContent fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AccountFundsBelowThresholdNotificationContent.class);
  }

  /**
   * Convert an instance of AccountFundsBelowThresholdNotificationContent to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

