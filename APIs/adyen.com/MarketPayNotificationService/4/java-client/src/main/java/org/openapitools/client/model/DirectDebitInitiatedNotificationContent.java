/*
 * Classic Platforms - Notifications
 * This API is used for the classic integration. If you are just starting your implementation, refer to our [new integration guide](https://docs.adyen.com/marketplaces-and-platforms) instead.  The Notification API sends notifications to the endpoints specified in a given subscription.  Subscriptions are managed through the Notification Configuration API. The API specifications listed here detail the format of each notification.  For more information, refer to our [documentation](https://docs.adyen.com/marketplaces-and-platforms/classic/notifications).
 *
 * The version of the OpenAPI document: 4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Amount;
import org.openapitools.client.model.ErrorFieldTypeWrapper;
import org.openapitools.client.model.ModelLocalDate;
import org.openapitools.client.model.OperationStatus;
import org.openapitools.client.model.Split;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DirectDebitInitiatedNotificationContent
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:13:20.243573-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DirectDebitInitiatedNotificationContent {
  public static final String SERIALIZED_NAME_ACCOUNT_CODE = "accountCode";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_CODE)
  private String accountCode;

  public static final String SERIALIZED_NAME_AMOUNT = "amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  private Amount amount;

  public static final String SERIALIZED_NAME_DEBIT_INITIATION_DATE = "debitInitiationDate";
  @SerializedName(SERIALIZED_NAME_DEBIT_INITIATION_DATE)
  private ModelLocalDate debitInitiationDate;

  public static final String SERIALIZED_NAME_INVALID_FIELDS = "invalidFields";
  @SerializedName(SERIALIZED_NAME_INVALID_FIELDS)
  private List<ErrorFieldTypeWrapper> invalidFields = new ArrayList<>();

  public static final String SERIALIZED_NAME_MERCHANT_ACCOUNT_CODE = "merchantAccountCode";
  @SerializedName(SERIALIZED_NAME_MERCHANT_ACCOUNT_CODE)
  private String merchantAccountCode;

  public static final String SERIALIZED_NAME_SPLITS = "splits";
  @SerializedName(SERIALIZED_NAME_SPLITS)
  private List<Split> splits = new ArrayList<>();

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private OperationStatus status;

  public DirectDebitInitiatedNotificationContent() {
  }

  public DirectDebitInitiatedNotificationContent accountCode(String accountCode) {
    this.accountCode = accountCode;
    return this;
  }

  /**
   * The code of the account.
   * @return accountCode
   */
  @javax.annotation.Nonnull
  public String getAccountCode() {
    return accountCode;
  }

  public void setAccountCode(String accountCode) {
    this.accountCode = accountCode;
  }


  public DirectDebitInitiatedNotificationContent amount(Amount amount) {
    this.amount = amount;
    return this;
  }

  /**
   * The amount to be debited from the funding account.
   * @return amount
   */
  @javax.annotation.Nonnull
  public Amount getAmount() {
    return amount;
  }

  public void setAmount(Amount amount) {
    this.amount = amount;
  }


  public DirectDebitInitiatedNotificationContent debitInitiationDate(ModelLocalDate debitInitiationDate) {
    this.debitInitiationDate = debitInitiationDate;
    return this;
  }

  /**
   * The date of the debit initiation.
   * @return debitInitiationDate
   */
  @javax.annotation.Nullable
  public ModelLocalDate getDebitInitiationDate() {
    return debitInitiationDate;
  }

  public void setDebitInitiationDate(ModelLocalDate debitInitiationDate) {
    this.debitInitiationDate = debitInitiationDate;
  }


  public DirectDebitInitiatedNotificationContent invalidFields(List<ErrorFieldTypeWrapper> invalidFields) {
    this.invalidFields = invalidFields;
    return this;
  }

  public DirectDebitInitiatedNotificationContent addInvalidFieldsItem(ErrorFieldTypeWrapper invalidFieldsItem) {
    if (this.invalidFields == null) {
      this.invalidFields = new ArrayList<>();
    }
    this.invalidFields.add(invalidFieldsItem);
    return this;
  }

  /**
   * Invalid fields list.
   * @return invalidFields
   */
  @javax.annotation.Nullable
  public List<ErrorFieldTypeWrapper> getInvalidFields() {
    return invalidFields;
  }

  public void setInvalidFields(List<ErrorFieldTypeWrapper> invalidFields) {
    this.invalidFields = invalidFields;
  }


  public DirectDebitInitiatedNotificationContent merchantAccountCode(String merchantAccountCode) {
    this.merchantAccountCode = merchantAccountCode;
    return this;
  }

  /**
   * The code of the merchant account.
   * @return merchantAccountCode
   */
  @javax.annotation.Nonnull
  public String getMerchantAccountCode() {
    return merchantAccountCode;
  }

  public void setMerchantAccountCode(String merchantAccountCode) {
    this.merchantAccountCode = merchantAccountCode;
  }


  public DirectDebitInitiatedNotificationContent splits(List<Split> splits) {
    this.splits = splits;
    return this;
  }

  public DirectDebitInitiatedNotificationContent addSplitsItem(Split splitsItem) {
    if (this.splits == null) {
      this.splits = new ArrayList<>();
    }
    this.splits.add(splitsItem);
    return this;
  }

  /**
   * The split data for the debit request.
   * @return splits
   */
  @javax.annotation.Nullable
  public List<Split> getSplits() {
    return splits;
  }

  public void setSplits(List<Split> splits) {
    this.splits = splits;
  }


  public DirectDebitInitiatedNotificationContent status(OperationStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Direct debit status.
   * @return status
   */
  @javax.annotation.Nullable
  public OperationStatus getStatus() {
    return status;
  }

  public void setStatus(OperationStatus status) {
    this.status = status;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DirectDebitInitiatedNotificationContent directDebitInitiatedNotificationContent = (DirectDebitInitiatedNotificationContent) o;
    return Objects.equals(this.accountCode, directDebitInitiatedNotificationContent.accountCode) &&
        Objects.equals(this.amount, directDebitInitiatedNotificationContent.amount) &&
        Objects.equals(this.debitInitiationDate, directDebitInitiatedNotificationContent.debitInitiationDate) &&
        Objects.equals(this.invalidFields, directDebitInitiatedNotificationContent.invalidFields) &&
        Objects.equals(this.merchantAccountCode, directDebitInitiatedNotificationContent.merchantAccountCode) &&
        Objects.equals(this.splits, directDebitInitiatedNotificationContent.splits) &&
        Objects.equals(this.status, directDebitInitiatedNotificationContent.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountCode, amount, debitInitiationDate, invalidFields, merchantAccountCode, splits, status);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DirectDebitInitiatedNotificationContent {\n");
    sb.append("    accountCode: ").append(toIndentedString(accountCode)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    debitInitiationDate: ").append(toIndentedString(debitInitiationDate)).append("\n");
    sb.append("    invalidFields: ").append(toIndentedString(invalidFields)).append("\n");
    sb.append("    merchantAccountCode: ").append(toIndentedString(merchantAccountCode)).append("\n");
    sb.append("    splits: ").append(toIndentedString(splits)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accountCode");
    openapiFields.add("amount");
    openapiFields.add("debitInitiationDate");
    openapiFields.add("invalidFields");
    openapiFields.add("merchantAccountCode");
    openapiFields.add("splits");
    openapiFields.add("status");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("accountCode");
    openapiRequiredFields.add("amount");
    openapiRequiredFields.add("merchantAccountCode");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DirectDebitInitiatedNotificationContent
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DirectDebitInitiatedNotificationContent.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DirectDebitInitiatedNotificationContent is not found in the empty JSON string", DirectDebitInitiatedNotificationContent.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DirectDebitInitiatedNotificationContent.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DirectDebitInitiatedNotificationContent` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DirectDebitInitiatedNotificationContent.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("accountCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountCode").toString()));
      }
      // validate the required field `amount`
      Amount.validateJsonElement(jsonObj.get("amount"));
      // validate the optional field `debitInitiationDate`
      if (jsonObj.get("debitInitiationDate") != null && !jsonObj.get("debitInitiationDate").isJsonNull()) {
        ModelLocalDate.validateJsonElement(jsonObj.get("debitInitiationDate"));
      }
      if (jsonObj.get("invalidFields") != null && !jsonObj.get("invalidFields").isJsonNull()) {
        JsonArray jsonArrayinvalidFields = jsonObj.getAsJsonArray("invalidFields");
        if (jsonArrayinvalidFields != null) {
          // ensure the json data is an array
          if (!jsonObj.get("invalidFields").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `invalidFields` to be an array in the JSON string but got `%s`", jsonObj.get("invalidFields").toString()));
          }

          // validate the optional field `invalidFields` (array)
          for (int i = 0; i < jsonArrayinvalidFields.size(); i++) {
            ErrorFieldTypeWrapper.validateJsonElement(jsonArrayinvalidFields.get(i));
          };
        }
      }
      if (!jsonObj.get("merchantAccountCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `merchantAccountCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("merchantAccountCode").toString()));
      }
      if (jsonObj.get("splits") != null && !jsonObj.get("splits").isJsonNull()) {
        JsonArray jsonArraysplits = jsonObj.getAsJsonArray("splits");
        if (jsonArraysplits != null) {
          // ensure the json data is an array
          if (!jsonObj.get("splits").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `splits` to be an array in the JSON string but got `%s`", jsonObj.get("splits").toString()));
          }

          // validate the optional field `splits` (array)
          for (int i = 0; i < jsonArraysplits.size(); i++) {
            Split.validateJsonElement(jsonArraysplits.get(i));
          };
        }
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        OperationStatus.validateJsonElement(jsonObj.get("status"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DirectDebitInitiatedNotificationContent.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DirectDebitInitiatedNotificationContent' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DirectDebitInitiatedNotificationContent> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DirectDebitInitiatedNotificationContent.class));

       return (TypeAdapter<T>) new TypeAdapter<DirectDebitInitiatedNotificationContent>() {
           @Override
           public void write(JsonWriter out, DirectDebitInitiatedNotificationContent value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DirectDebitInitiatedNotificationContent read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DirectDebitInitiatedNotificationContent given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DirectDebitInitiatedNotificationContent
   * @throws IOException if the JSON string is invalid with respect to DirectDebitInitiatedNotificationContent
   */
  public static DirectDebitInitiatedNotificationContent fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DirectDebitInitiatedNotificationContent.class);
  }

  /**
   * Convert an instance of DirectDebitInitiatedNotificationContent to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

