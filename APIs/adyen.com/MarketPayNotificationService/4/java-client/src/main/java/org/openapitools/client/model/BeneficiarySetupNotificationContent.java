/*
 * Classic Platforms - Notifications
 * This API is used for the classic integration. If you are just starting your implementation, refer to our [new integration guide](https://docs.adyen.com/marketplaces-and-platforms) instead.  The Notification API sends notifications to the endpoints specified in a given subscription.  Subscriptions are managed through the Notification Configuration API. The API specifications listed here detail the format of each notification.  For more information, refer to our [documentation](https://docs.adyen.com/marketplaces-and-platforms/classic/notifications).
 *
 * The version of the OpenAPI document: 4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * BeneficiarySetupNotificationContent
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:13:20.243573-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BeneficiarySetupNotificationContent {
  public static final String SERIALIZED_NAME_DESTINATION_ACCOUNT_CODE = "destinationAccountCode";
  @SerializedName(SERIALIZED_NAME_DESTINATION_ACCOUNT_CODE)
  private String destinationAccountCode;

  public static final String SERIALIZED_NAME_DESTINATION_ACCOUNT_HOLDER_CODE = "destinationAccountHolderCode";
  @SerializedName(SERIALIZED_NAME_DESTINATION_ACCOUNT_HOLDER_CODE)
  private String destinationAccountHolderCode;

  public static final String SERIALIZED_NAME_MERCHANT_REFERENCE = "merchantReference";
  @SerializedName(SERIALIZED_NAME_MERCHANT_REFERENCE)
  private String merchantReference;

  public static final String SERIALIZED_NAME_SOURCE_ACCOUNT_CODE = "sourceAccountCode";
  @SerializedName(SERIALIZED_NAME_SOURCE_ACCOUNT_CODE)
  private String sourceAccountCode;

  public static final String SERIALIZED_NAME_SOURCE_ACCOUNT_HOLDER_CODE = "sourceAccountHolderCode";
  @SerializedName(SERIALIZED_NAME_SOURCE_ACCOUNT_HOLDER_CODE)
  private String sourceAccountHolderCode;

  public static final String SERIALIZED_NAME_TRANSFER_DATE = "transferDate";
  @SerializedName(SERIALIZED_NAME_TRANSFER_DATE)
  private OffsetDateTime transferDate;

  public static final String SERIALIZED_NAME_TRANSFERRED_TRANSACTION_COUNT = "transferredTransactionCount";
  @SerializedName(SERIALIZED_NAME_TRANSFERRED_TRANSACTION_COUNT)
  private Integer transferredTransactionCount;

  public BeneficiarySetupNotificationContent() {
  }

  public BeneficiarySetupNotificationContent destinationAccountCode(String destinationAccountCode) {
    this.destinationAccountCode = destinationAccountCode;
    return this;
  }

  /**
   * The code of the beneficiary account.
   * @return destinationAccountCode
   */
  @javax.annotation.Nullable
  public String getDestinationAccountCode() {
    return destinationAccountCode;
  }

  public void setDestinationAccountCode(String destinationAccountCode) {
    this.destinationAccountCode = destinationAccountCode;
  }


  public BeneficiarySetupNotificationContent destinationAccountHolderCode(String destinationAccountHolderCode) {
    this.destinationAccountHolderCode = destinationAccountHolderCode;
    return this;
  }

  /**
   * The code of the beneficiary Account Holder.
   * @return destinationAccountHolderCode
   */
  @javax.annotation.Nullable
  public String getDestinationAccountHolderCode() {
    return destinationAccountHolderCode;
  }

  public void setDestinationAccountHolderCode(String destinationAccountHolderCode) {
    this.destinationAccountHolderCode = destinationAccountHolderCode;
  }


  public BeneficiarySetupNotificationContent merchantReference(String merchantReference) {
    this.merchantReference = merchantReference;
    return this;
  }

  /**
   * The reference provided by the merchant.
   * @return merchantReference
   */
  @javax.annotation.Nullable
  public String getMerchantReference() {
    return merchantReference;
  }

  public void setMerchantReference(String merchantReference) {
    this.merchantReference = merchantReference;
  }


  public BeneficiarySetupNotificationContent sourceAccountCode(String sourceAccountCode) {
    this.sourceAccountCode = sourceAccountCode;
    return this;
  }

  /**
   * The code of the benefactor account.
   * @return sourceAccountCode
   */
  @javax.annotation.Nullable
  public String getSourceAccountCode() {
    return sourceAccountCode;
  }

  public void setSourceAccountCode(String sourceAccountCode) {
    this.sourceAccountCode = sourceAccountCode;
  }


  public BeneficiarySetupNotificationContent sourceAccountHolderCode(String sourceAccountHolderCode) {
    this.sourceAccountHolderCode = sourceAccountHolderCode;
    return this;
  }

  /**
   * The code of the benefactor Account Holder.
   * @return sourceAccountHolderCode
   */
  @javax.annotation.Nullable
  public String getSourceAccountHolderCode() {
    return sourceAccountHolderCode;
  }

  public void setSourceAccountHolderCode(String sourceAccountHolderCode) {
    this.sourceAccountHolderCode = sourceAccountHolderCode;
  }


  public BeneficiarySetupNotificationContent transferDate(OffsetDateTime transferDate) {
    this.transferDate = transferDate;
    return this;
  }

  /**
   * The date on which the beneficiary was set up and funds transferred from benefactor to beneficiary.
   * @return transferDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getTransferDate() {
    return transferDate;
  }

  public void setTransferDate(OffsetDateTime transferDate) {
    this.transferDate = transferDate;
  }


  public BeneficiarySetupNotificationContent transferredTransactionCount(Integer transferredTransactionCount) {
    this.transferredTransactionCount = transferredTransactionCount;
    return this;
  }

  /**
   * The number of transactions transferred upon the setup of the beneficiary.
   * @return transferredTransactionCount
   */
  @javax.annotation.Nullable
  public Integer getTransferredTransactionCount() {
    return transferredTransactionCount;
  }

  public void setTransferredTransactionCount(Integer transferredTransactionCount) {
    this.transferredTransactionCount = transferredTransactionCount;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BeneficiarySetupNotificationContent beneficiarySetupNotificationContent = (BeneficiarySetupNotificationContent) o;
    return Objects.equals(this.destinationAccountCode, beneficiarySetupNotificationContent.destinationAccountCode) &&
        Objects.equals(this.destinationAccountHolderCode, beneficiarySetupNotificationContent.destinationAccountHolderCode) &&
        Objects.equals(this.merchantReference, beneficiarySetupNotificationContent.merchantReference) &&
        Objects.equals(this.sourceAccountCode, beneficiarySetupNotificationContent.sourceAccountCode) &&
        Objects.equals(this.sourceAccountHolderCode, beneficiarySetupNotificationContent.sourceAccountHolderCode) &&
        Objects.equals(this.transferDate, beneficiarySetupNotificationContent.transferDate) &&
        Objects.equals(this.transferredTransactionCount, beneficiarySetupNotificationContent.transferredTransactionCount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(destinationAccountCode, destinationAccountHolderCode, merchantReference, sourceAccountCode, sourceAccountHolderCode, transferDate, transferredTransactionCount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BeneficiarySetupNotificationContent {\n");
    sb.append("    destinationAccountCode: ").append(toIndentedString(destinationAccountCode)).append("\n");
    sb.append("    destinationAccountHolderCode: ").append(toIndentedString(destinationAccountHolderCode)).append("\n");
    sb.append("    merchantReference: ").append(toIndentedString(merchantReference)).append("\n");
    sb.append("    sourceAccountCode: ").append(toIndentedString(sourceAccountCode)).append("\n");
    sb.append("    sourceAccountHolderCode: ").append(toIndentedString(sourceAccountHolderCode)).append("\n");
    sb.append("    transferDate: ").append(toIndentedString(transferDate)).append("\n");
    sb.append("    transferredTransactionCount: ").append(toIndentedString(transferredTransactionCount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("destinationAccountCode");
    openapiFields.add("destinationAccountHolderCode");
    openapiFields.add("merchantReference");
    openapiFields.add("sourceAccountCode");
    openapiFields.add("sourceAccountHolderCode");
    openapiFields.add("transferDate");
    openapiFields.add("transferredTransactionCount");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BeneficiarySetupNotificationContent
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BeneficiarySetupNotificationContent.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BeneficiarySetupNotificationContent is not found in the empty JSON string", BeneficiarySetupNotificationContent.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BeneficiarySetupNotificationContent.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BeneficiarySetupNotificationContent` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("destinationAccountCode") != null && !jsonObj.get("destinationAccountCode").isJsonNull()) && !jsonObj.get("destinationAccountCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `destinationAccountCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("destinationAccountCode").toString()));
      }
      if ((jsonObj.get("destinationAccountHolderCode") != null && !jsonObj.get("destinationAccountHolderCode").isJsonNull()) && !jsonObj.get("destinationAccountHolderCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `destinationAccountHolderCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("destinationAccountHolderCode").toString()));
      }
      if ((jsonObj.get("merchantReference") != null && !jsonObj.get("merchantReference").isJsonNull()) && !jsonObj.get("merchantReference").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `merchantReference` to be a primitive type in the JSON string but got `%s`", jsonObj.get("merchantReference").toString()));
      }
      if ((jsonObj.get("sourceAccountCode") != null && !jsonObj.get("sourceAccountCode").isJsonNull()) && !jsonObj.get("sourceAccountCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sourceAccountCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sourceAccountCode").toString()));
      }
      if ((jsonObj.get("sourceAccountHolderCode") != null && !jsonObj.get("sourceAccountHolderCode").isJsonNull()) && !jsonObj.get("sourceAccountHolderCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sourceAccountHolderCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sourceAccountHolderCode").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BeneficiarySetupNotificationContent.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BeneficiarySetupNotificationContent' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BeneficiarySetupNotificationContent> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BeneficiarySetupNotificationContent.class));

       return (TypeAdapter<T>) new TypeAdapter<BeneficiarySetupNotificationContent>() {
           @Override
           public void write(JsonWriter out, BeneficiarySetupNotificationContent value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BeneficiarySetupNotificationContent read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BeneficiarySetupNotificationContent given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BeneficiarySetupNotificationContent
   * @throws IOException if the JSON string is invalid with respect to BeneficiarySetupNotificationContent
   */
  public static BeneficiarySetupNotificationContent fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BeneficiarySetupNotificationContent.class);
  }

  /**
   * Convert an instance of BeneficiarySetupNotificationContent to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

