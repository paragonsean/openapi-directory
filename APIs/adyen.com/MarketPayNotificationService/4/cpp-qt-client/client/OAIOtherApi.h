/**
 * Classic Platforms - Notifications
 * This API is used for the classic integration. If you are just starting your implementation, refer to our [new integration guide](https://docs.adyen.com/marketplaces-and-platforms) instead.  The Notification API sends notifications to the endpoints specified in a given subscription.  Subscriptions are managed through the Notification Configuration API. The API specifications listed here detail the format of each notification.  For more information, refer to our [documentation](https://docs.adyen.com/marketplaces-and-platforms/classic/notifications).
 *
 * The version of the OpenAPI document: 4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIOtherApi_H
#define OAI_OAIOtherApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAINotificationResponse.h"
#include "OAIPaymentFailureNotification.h"
#include "OAIReportAvailableNotification.h"

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIOtherApi : public QObject {
    Q_OBJECT

public:
    OAIOtherApi(const int timeOut = 0);
    ~OAIOtherApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_payment_failure_notification OAIPaymentFailureNotification [optional]
    */
    virtual void postPAYMENTFAILURE(const ::OpenAPI::OptionalParam<OAIPaymentFailureNotification> &oai_payment_failure_notification = ::OpenAPI::OptionalParam<OAIPaymentFailureNotification>());

    /**
    * @param[in]  oai_report_available_notification OAIReportAvailableNotification [optional]
    */
    virtual void postREPORTAVAILABLE(const ::OpenAPI::OptionalParam<OAIReportAvailableNotification> &oai_report_available_notification = ::OpenAPI::OptionalParam<OAIReportAvailableNotification>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void postPAYMENTFAILURECallback(OAIHttpRequestWorker *worker);
    void postREPORTAVAILABLECallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void postPAYMENTFAILURESignal(OAINotificationResponse summary);
    void postREPORTAVAILABLESignal(OAINotificationResponse summary);


    void postPAYMENTFAILURESignalFull(OAIHttpRequestWorker *worker, OAINotificationResponse summary);
    void postREPORTAVAILABLESignalFull(OAIHttpRequestWorker *worker, OAINotificationResponse summary);

    Q_DECL_DEPRECATED_X("Use postPAYMENTFAILURESignalError() instead")
    void postPAYMENTFAILURESignalE(OAINotificationResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postPAYMENTFAILURESignalError(OAINotificationResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postREPORTAVAILABLESignalError() instead")
    void postREPORTAVAILABLESignalE(OAINotificationResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postREPORTAVAILABLESignalError(OAINotificationResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use postPAYMENTFAILURESignalErrorFull() instead")
    void postPAYMENTFAILURESignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postPAYMENTFAILURESignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postREPORTAVAILABLESignalErrorFull() instead")
    void postREPORTAVAILABLESignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postREPORTAVAILABLESignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
