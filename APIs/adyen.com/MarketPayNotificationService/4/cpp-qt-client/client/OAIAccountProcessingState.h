/**
 * Classic Platforms - Notifications
 * This API is used for the classic integration. If you are just starting your implementation, refer to our [new integration guide](https://docs.adyen.com/marketplaces-and-platforms) instead.  The Notification API sends notifications to the endpoints specified in a given subscription.  Subscriptions are managed through the Notification Configuration API. The API specifications listed here detail the format of each notification.  For more information, refer to our [documentation](https://docs.adyen.com/marketplaces-and-platforms/classic/notifications).
 *
 * The version of the OpenAPI document: 4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIAccountProcessingState.h
 *
 * 
 */

#ifndef OAIAccountProcessingState_H
#define OAIAccountProcessingState_H

#include <QJsonObject>

#include "OAIAmount.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIAmount;

class OAIAccountProcessingState : public OAIObject {
public:
    OAIAccountProcessingState();
    OAIAccountProcessingState(QString json);
    ~OAIAccountProcessingState() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getDisableReason() const;
    void setDisableReason(const QString &disable_reason);
    bool is_disable_reason_Set() const;
    bool is_disable_reason_Valid() const;

    bool isDisabled() const;
    void setDisabled(const bool &disabled);
    bool is_disabled_Set() const;
    bool is_disabled_Valid() const;

    OAIAmount getProcessedFrom() const;
    void setProcessedFrom(const OAIAmount &processed_from);
    bool is_processed_from_Set() const;
    bool is_processed_from_Valid() const;

    OAIAmount getProcessedTo() const;
    void setProcessedTo(const OAIAmount &processed_to);
    bool is_processed_to_Set() const;
    bool is_processed_to_Valid() const;

    qint32 getTierNumber() const;
    void setTierNumber(const qint32 &tier_number);
    bool is_tier_number_Set() const;
    bool is_tier_number_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_disable_reason;
    bool m_disable_reason_isSet;
    bool m_disable_reason_isValid;

    bool m_disabled;
    bool m_disabled_isSet;
    bool m_disabled_isValid;

    OAIAmount m_processed_from;
    bool m_processed_from_isSet;
    bool m_processed_from_isValid;

    OAIAmount m_processed_to;
    bool m_processed_to_isSet;
    bool m_processed_to_isValid;

    qint32 m_tier_number;
    bool m_tier_number_isSet;
    bool m_tier_number_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIAccountProcessingState)

#endif // OAIAccountProcessingState_H
