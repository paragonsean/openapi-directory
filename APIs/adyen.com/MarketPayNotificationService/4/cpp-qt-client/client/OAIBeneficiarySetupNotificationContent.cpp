/**
 * Classic Platforms - Notifications
 * This API is used for the classic integration. If you are just starting your implementation, refer to our [new integration guide](https://docs.adyen.com/marketplaces-and-platforms) instead.  The Notification API sends notifications to the endpoints specified in a given subscription.  Subscriptions are managed through the Notification Configuration API. The API specifications listed here detail the format of each notification.  For more information, refer to our [documentation](https://docs.adyen.com/marketplaces-and-platforms/classic/notifications).
 *
 * The version of the OpenAPI document: 4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBeneficiarySetupNotificationContent.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBeneficiarySetupNotificationContent::OAIBeneficiarySetupNotificationContent(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBeneficiarySetupNotificationContent::OAIBeneficiarySetupNotificationContent() {
    this->initializeModel();
}

OAIBeneficiarySetupNotificationContent::~OAIBeneficiarySetupNotificationContent() {}

void OAIBeneficiarySetupNotificationContent::initializeModel() {

    m_destination_account_code_isSet = false;
    m_destination_account_code_isValid = false;

    m_destination_account_holder_code_isSet = false;
    m_destination_account_holder_code_isValid = false;

    m_merchant_reference_isSet = false;
    m_merchant_reference_isValid = false;

    m_source_account_code_isSet = false;
    m_source_account_code_isValid = false;

    m_source_account_holder_code_isSet = false;
    m_source_account_holder_code_isValid = false;

    m_transfer_date_isSet = false;
    m_transfer_date_isValid = false;

    m_transferred_transaction_count_isSet = false;
    m_transferred_transaction_count_isValid = false;
}

void OAIBeneficiarySetupNotificationContent::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBeneficiarySetupNotificationContent::fromJsonObject(QJsonObject json) {

    m_destination_account_code_isValid = ::OpenAPI::fromJsonValue(m_destination_account_code, json[QString("destinationAccountCode")]);
    m_destination_account_code_isSet = !json[QString("destinationAccountCode")].isNull() && m_destination_account_code_isValid;

    m_destination_account_holder_code_isValid = ::OpenAPI::fromJsonValue(m_destination_account_holder_code, json[QString("destinationAccountHolderCode")]);
    m_destination_account_holder_code_isSet = !json[QString("destinationAccountHolderCode")].isNull() && m_destination_account_holder_code_isValid;

    m_merchant_reference_isValid = ::OpenAPI::fromJsonValue(m_merchant_reference, json[QString("merchantReference")]);
    m_merchant_reference_isSet = !json[QString("merchantReference")].isNull() && m_merchant_reference_isValid;

    m_source_account_code_isValid = ::OpenAPI::fromJsonValue(m_source_account_code, json[QString("sourceAccountCode")]);
    m_source_account_code_isSet = !json[QString("sourceAccountCode")].isNull() && m_source_account_code_isValid;

    m_source_account_holder_code_isValid = ::OpenAPI::fromJsonValue(m_source_account_holder_code, json[QString("sourceAccountHolderCode")]);
    m_source_account_holder_code_isSet = !json[QString("sourceAccountHolderCode")].isNull() && m_source_account_holder_code_isValid;

    m_transfer_date_isValid = ::OpenAPI::fromJsonValue(m_transfer_date, json[QString("transferDate")]);
    m_transfer_date_isSet = !json[QString("transferDate")].isNull() && m_transfer_date_isValid;

    m_transferred_transaction_count_isValid = ::OpenAPI::fromJsonValue(m_transferred_transaction_count, json[QString("transferredTransactionCount")]);
    m_transferred_transaction_count_isSet = !json[QString("transferredTransactionCount")].isNull() && m_transferred_transaction_count_isValid;
}

QString OAIBeneficiarySetupNotificationContent::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBeneficiarySetupNotificationContent::asJsonObject() const {
    QJsonObject obj;
    if (m_destination_account_code_isSet) {
        obj.insert(QString("destinationAccountCode"), ::OpenAPI::toJsonValue(m_destination_account_code));
    }
    if (m_destination_account_holder_code_isSet) {
        obj.insert(QString("destinationAccountHolderCode"), ::OpenAPI::toJsonValue(m_destination_account_holder_code));
    }
    if (m_merchant_reference_isSet) {
        obj.insert(QString("merchantReference"), ::OpenAPI::toJsonValue(m_merchant_reference));
    }
    if (m_source_account_code_isSet) {
        obj.insert(QString("sourceAccountCode"), ::OpenAPI::toJsonValue(m_source_account_code));
    }
    if (m_source_account_holder_code_isSet) {
        obj.insert(QString("sourceAccountHolderCode"), ::OpenAPI::toJsonValue(m_source_account_holder_code));
    }
    if (m_transfer_date_isSet) {
        obj.insert(QString("transferDate"), ::OpenAPI::toJsonValue(m_transfer_date));
    }
    if (m_transferred_transaction_count_isSet) {
        obj.insert(QString("transferredTransactionCount"), ::OpenAPI::toJsonValue(m_transferred_transaction_count));
    }
    return obj;
}

QString OAIBeneficiarySetupNotificationContent::getDestinationAccountCode() const {
    return m_destination_account_code;
}
void OAIBeneficiarySetupNotificationContent::setDestinationAccountCode(const QString &destination_account_code) {
    m_destination_account_code = destination_account_code;
    m_destination_account_code_isSet = true;
}

bool OAIBeneficiarySetupNotificationContent::is_destination_account_code_Set() const{
    return m_destination_account_code_isSet;
}

bool OAIBeneficiarySetupNotificationContent::is_destination_account_code_Valid() const{
    return m_destination_account_code_isValid;
}

QString OAIBeneficiarySetupNotificationContent::getDestinationAccountHolderCode() const {
    return m_destination_account_holder_code;
}
void OAIBeneficiarySetupNotificationContent::setDestinationAccountHolderCode(const QString &destination_account_holder_code) {
    m_destination_account_holder_code = destination_account_holder_code;
    m_destination_account_holder_code_isSet = true;
}

bool OAIBeneficiarySetupNotificationContent::is_destination_account_holder_code_Set() const{
    return m_destination_account_holder_code_isSet;
}

bool OAIBeneficiarySetupNotificationContent::is_destination_account_holder_code_Valid() const{
    return m_destination_account_holder_code_isValid;
}

QString OAIBeneficiarySetupNotificationContent::getMerchantReference() const {
    return m_merchant_reference;
}
void OAIBeneficiarySetupNotificationContent::setMerchantReference(const QString &merchant_reference) {
    m_merchant_reference = merchant_reference;
    m_merchant_reference_isSet = true;
}

bool OAIBeneficiarySetupNotificationContent::is_merchant_reference_Set() const{
    return m_merchant_reference_isSet;
}

bool OAIBeneficiarySetupNotificationContent::is_merchant_reference_Valid() const{
    return m_merchant_reference_isValid;
}

QString OAIBeneficiarySetupNotificationContent::getSourceAccountCode() const {
    return m_source_account_code;
}
void OAIBeneficiarySetupNotificationContent::setSourceAccountCode(const QString &source_account_code) {
    m_source_account_code = source_account_code;
    m_source_account_code_isSet = true;
}

bool OAIBeneficiarySetupNotificationContent::is_source_account_code_Set() const{
    return m_source_account_code_isSet;
}

bool OAIBeneficiarySetupNotificationContent::is_source_account_code_Valid() const{
    return m_source_account_code_isValid;
}

QString OAIBeneficiarySetupNotificationContent::getSourceAccountHolderCode() const {
    return m_source_account_holder_code;
}
void OAIBeneficiarySetupNotificationContent::setSourceAccountHolderCode(const QString &source_account_holder_code) {
    m_source_account_holder_code = source_account_holder_code;
    m_source_account_holder_code_isSet = true;
}

bool OAIBeneficiarySetupNotificationContent::is_source_account_holder_code_Set() const{
    return m_source_account_holder_code_isSet;
}

bool OAIBeneficiarySetupNotificationContent::is_source_account_holder_code_Valid() const{
    return m_source_account_holder_code_isValid;
}

QDateTime OAIBeneficiarySetupNotificationContent::getTransferDate() const {
    return m_transfer_date;
}
void OAIBeneficiarySetupNotificationContent::setTransferDate(const QDateTime &transfer_date) {
    m_transfer_date = transfer_date;
    m_transfer_date_isSet = true;
}

bool OAIBeneficiarySetupNotificationContent::is_transfer_date_Set() const{
    return m_transfer_date_isSet;
}

bool OAIBeneficiarySetupNotificationContent::is_transfer_date_Valid() const{
    return m_transfer_date_isValid;
}

qint32 OAIBeneficiarySetupNotificationContent::getTransferredTransactionCount() const {
    return m_transferred_transaction_count;
}
void OAIBeneficiarySetupNotificationContent::setTransferredTransactionCount(const qint32 &transferred_transaction_count) {
    m_transferred_transaction_count = transferred_transaction_count;
    m_transferred_transaction_count_isSet = true;
}

bool OAIBeneficiarySetupNotificationContent::is_transferred_transaction_count_Set() const{
    return m_transferred_transaction_count_isSet;
}

bool OAIBeneficiarySetupNotificationContent::is_transferred_transaction_count_Valid() const{
    return m_transferred_transaction_count_isValid;
}

bool OAIBeneficiarySetupNotificationContent::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_destination_account_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination_account_holder_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_merchant_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_account_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_account_holder_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transfer_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transferred_transaction_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBeneficiarySetupNotificationContent::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
