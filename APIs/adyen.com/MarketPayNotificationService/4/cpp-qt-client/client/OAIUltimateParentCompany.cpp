/**
 * Classic Platforms - Notifications
 * This API is used for the classic integration. If you are just starting your implementation, refer to our [new integration guide](https://docs.adyen.com/marketplaces-and-platforms) instead.  The Notification API sends notifications to the endpoints specified in a given subscription.  Subscriptions are managed through the Notification Configuration API. The API specifications listed here detail the format of each notification.  For more information, refer to our [documentation](https://docs.adyen.com/marketplaces-and-platforms/classic/notifications).
 *
 * The version of the OpenAPI document: 4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUltimateParentCompany.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUltimateParentCompany::OAIUltimateParentCompany(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUltimateParentCompany::OAIUltimateParentCompany() {
    this->initializeModel();
}

OAIUltimateParentCompany::~OAIUltimateParentCompany() {}

void OAIUltimateParentCompany::initializeModel() {

    m_address_isSet = false;
    m_address_isValid = false;

    m_business_details_isSet = false;
    m_business_details_isValid = false;

    m_ultimate_parent_company_code_isSet = false;
    m_ultimate_parent_company_code_isValid = false;
}

void OAIUltimateParentCompany::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUltimateParentCompany::fromJsonObject(QJsonObject json) {

    m_address_isValid = ::OpenAPI::fromJsonValue(m_address, json[QString("address")]);
    m_address_isSet = !json[QString("address")].isNull() && m_address_isValid;

    m_business_details_isValid = ::OpenAPI::fromJsonValue(m_business_details, json[QString("businessDetails")]);
    m_business_details_isSet = !json[QString("businessDetails")].isNull() && m_business_details_isValid;

    m_ultimate_parent_company_code_isValid = ::OpenAPI::fromJsonValue(m_ultimate_parent_company_code, json[QString("ultimateParentCompanyCode")]);
    m_ultimate_parent_company_code_isSet = !json[QString("ultimateParentCompanyCode")].isNull() && m_ultimate_parent_company_code_isValid;
}

QString OAIUltimateParentCompany::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUltimateParentCompany::asJsonObject() const {
    QJsonObject obj;
    if (m_address.isSet()) {
        obj.insert(QString("address"), ::OpenAPI::toJsonValue(m_address));
    }
    if (m_business_details.isSet()) {
        obj.insert(QString("businessDetails"), ::OpenAPI::toJsonValue(m_business_details));
    }
    if (m_ultimate_parent_company_code_isSet) {
        obj.insert(QString("ultimateParentCompanyCode"), ::OpenAPI::toJsonValue(m_ultimate_parent_company_code));
    }
    return obj;
}

OAIViasAddress OAIUltimateParentCompany::getAddress() const {
    return m_address;
}
void OAIUltimateParentCompany::setAddress(const OAIViasAddress &address) {
    m_address = address;
    m_address_isSet = true;
}

bool OAIUltimateParentCompany::is_address_Set() const{
    return m_address_isSet;
}

bool OAIUltimateParentCompany::is_address_Valid() const{
    return m_address_isValid;
}

OAIUltimateParentCompanyBusinessDetails OAIUltimateParentCompany::getBusinessDetails() const {
    return m_business_details;
}
void OAIUltimateParentCompany::setBusinessDetails(const OAIUltimateParentCompanyBusinessDetails &business_details) {
    m_business_details = business_details;
    m_business_details_isSet = true;
}

bool OAIUltimateParentCompany::is_business_details_Set() const{
    return m_business_details_isSet;
}

bool OAIUltimateParentCompany::is_business_details_Valid() const{
    return m_business_details_isValid;
}

QString OAIUltimateParentCompany::getUltimateParentCompanyCode() const {
    return m_ultimate_parent_company_code;
}
void OAIUltimateParentCompany::setUltimateParentCompanyCode(const QString &ultimate_parent_company_code) {
    m_ultimate_parent_company_code = ultimate_parent_company_code;
    m_ultimate_parent_company_code_isSet = true;
}

bool OAIUltimateParentCompany::is_ultimate_parent_company_code_Set() const{
    return m_ultimate_parent_company_code_isSet;
}

bool OAIUltimateParentCompany::is_ultimate_parent_company_code_Valid() const{
    return m_ultimate_parent_company_code_isValid;
}

bool OAIUltimateParentCompany::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_address.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_business_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ultimate_parent_company_code_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUltimateParentCompany::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
