/**
 * Classic Platforms - Notifications
 * This API is used for the classic integration. If you are just starting your implementation, refer to our [new integration guide](https://docs.adyen.com/marketplaces-and-platforms) instead.  The Notification API sends notifications to the endpoints specified in a given subscription.  Subscriptions are managed through the Notification Configuration API. The API specifications listed here detail the format of each notification.  For more information, refer to our [documentation](https://docs.adyen.com/marketplaces-and-platforms/classic/notifications).
 *
 * The version of the OpenAPI document: 4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBusinessDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBusinessDetails::OAIBusinessDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBusinessDetails::OAIBusinessDetails() {
    this->initializeModel();
}

OAIBusinessDetails::~OAIBusinessDetails() {}

void OAIBusinessDetails::initializeModel() {

    m_doing_business_as_isSet = false;
    m_doing_business_as_isValid = false;

    m_legal_business_name_isSet = false;
    m_legal_business_name_isValid = false;

    m_listed_ultimate_parent_company_isSet = false;
    m_listed_ultimate_parent_company_isValid = false;

    m_registration_number_isSet = false;
    m_registration_number_isValid = false;

    m_shareholders_isSet = false;
    m_shareholders_isValid = false;

    m_signatories_isSet = false;
    m_signatories_isValid = false;

    m_tax_id_isSet = false;
    m_tax_id_isValid = false;
}

void OAIBusinessDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBusinessDetails::fromJsonObject(QJsonObject json) {

    m_doing_business_as_isValid = ::OpenAPI::fromJsonValue(m_doing_business_as, json[QString("doingBusinessAs")]);
    m_doing_business_as_isSet = !json[QString("doingBusinessAs")].isNull() && m_doing_business_as_isValid;

    m_legal_business_name_isValid = ::OpenAPI::fromJsonValue(m_legal_business_name, json[QString("legalBusinessName")]);
    m_legal_business_name_isSet = !json[QString("legalBusinessName")].isNull() && m_legal_business_name_isValid;

    m_listed_ultimate_parent_company_isValid = ::OpenAPI::fromJsonValue(m_listed_ultimate_parent_company, json[QString("listedUltimateParentCompany")]);
    m_listed_ultimate_parent_company_isSet = !json[QString("listedUltimateParentCompany")].isNull() && m_listed_ultimate_parent_company_isValid;

    m_registration_number_isValid = ::OpenAPI::fromJsonValue(m_registration_number, json[QString("registrationNumber")]);
    m_registration_number_isSet = !json[QString("registrationNumber")].isNull() && m_registration_number_isValid;

    m_shareholders_isValid = ::OpenAPI::fromJsonValue(m_shareholders, json[QString("shareholders")]);
    m_shareholders_isSet = !json[QString("shareholders")].isNull() && m_shareholders_isValid;

    m_signatories_isValid = ::OpenAPI::fromJsonValue(m_signatories, json[QString("signatories")]);
    m_signatories_isSet = !json[QString("signatories")].isNull() && m_signatories_isValid;

    m_tax_id_isValid = ::OpenAPI::fromJsonValue(m_tax_id, json[QString("taxId")]);
    m_tax_id_isSet = !json[QString("taxId")].isNull() && m_tax_id_isValid;
}

QString OAIBusinessDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBusinessDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_doing_business_as_isSet) {
        obj.insert(QString("doingBusinessAs"), ::OpenAPI::toJsonValue(m_doing_business_as));
    }
    if (m_legal_business_name_isSet) {
        obj.insert(QString("legalBusinessName"), ::OpenAPI::toJsonValue(m_legal_business_name));
    }
    if (m_listed_ultimate_parent_company.size() > 0) {
        obj.insert(QString("listedUltimateParentCompany"), ::OpenAPI::toJsonValue(m_listed_ultimate_parent_company));
    }
    if (m_registration_number_isSet) {
        obj.insert(QString("registrationNumber"), ::OpenAPI::toJsonValue(m_registration_number));
    }
    if (m_shareholders.size() > 0) {
        obj.insert(QString("shareholders"), ::OpenAPI::toJsonValue(m_shareholders));
    }
    if (m_signatories.size() > 0) {
        obj.insert(QString("signatories"), ::OpenAPI::toJsonValue(m_signatories));
    }
    if (m_tax_id_isSet) {
        obj.insert(QString("taxId"), ::OpenAPI::toJsonValue(m_tax_id));
    }
    return obj;
}

QString OAIBusinessDetails::getDoingBusinessAs() const {
    return m_doing_business_as;
}
void OAIBusinessDetails::setDoingBusinessAs(const QString &doing_business_as) {
    m_doing_business_as = doing_business_as;
    m_doing_business_as_isSet = true;
}

bool OAIBusinessDetails::is_doing_business_as_Set() const{
    return m_doing_business_as_isSet;
}

bool OAIBusinessDetails::is_doing_business_as_Valid() const{
    return m_doing_business_as_isValid;
}

QString OAIBusinessDetails::getLegalBusinessName() const {
    return m_legal_business_name;
}
void OAIBusinessDetails::setLegalBusinessName(const QString &legal_business_name) {
    m_legal_business_name = legal_business_name;
    m_legal_business_name_isSet = true;
}

bool OAIBusinessDetails::is_legal_business_name_Set() const{
    return m_legal_business_name_isSet;
}

bool OAIBusinessDetails::is_legal_business_name_Valid() const{
    return m_legal_business_name_isValid;
}

QList<OAIUltimateParentCompanyWrapper> OAIBusinessDetails::getListedUltimateParentCompany() const {
    return m_listed_ultimate_parent_company;
}
void OAIBusinessDetails::setListedUltimateParentCompany(const QList<OAIUltimateParentCompanyWrapper> &listed_ultimate_parent_company) {
    m_listed_ultimate_parent_company = listed_ultimate_parent_company;
    m_listed_ultimate_parent_company_isSet = true;
}

bool OAIBusinessDetails::is_listed_ultimate_parent_company_Set() const{
    return m_listed_ultimate_parent_company_isSet;
}

bool OAIBusinessDetails::is_listed_ultimate_parent_company_Valid() const{
    return m_listed_ultimate_parent_company_isValid;
}

QString OAIBusinessDetails::getRegistrationNumber() const {
    return m_registration_number;
}
void OAIBusinessDetails::setRegistrationNumber(const QString &registration_number) {
    m_registration_number = registration_number;
    m_registration_number_isSet = true;
}

bool OAIBusinessDetails::is_registration_number_Set() const{
    return m_registration_number_isSet;
}

bool OAIBusinessDetails::is_registration_number_Valid() const{
    return m_registration_number_isValid;
}

QList<OAIShareholderContactWrapper> OAIBusinessDetails::getShareholders() const {
    return m_shareholders;
}
void OAIBusinessDetails::setShareholders(const QList<OAIShareholderContactWrapper> &shareholders) {
    m_shareholders = shareholders;
    m_shareholders_isSet = true;
}

bool OAIBusinessDetails::is_shareholders_Set() const{
    return m_shareholders_isSet;
}

bool OAIBusinessDetails::is_shareholders_Valid() const{
    return m_shareholders_isValid;
}

QList<OAISignatoryContactWrapper> OAIBusinessDetails::getSignatories() const {
    return m_signatories;
}
void OAIBusinessDetails::setSignatories(const QList<OAISignatoryContactWrapper> &signatories) {
    m_signatories = signatories;
    m_signatories_isSet = true;
}

bool OAIBusinessDetails::is_signatories_Set() const{
    return m_signatories_isSet;
}

bool OAIBusinessDetails::is_signatories_Valid() const{
    return m_signatories_isValid;
}

QString OAIBusinessDetails::getTaxId() const {
    return m_tax_id;
}
void OAIBusinessDetails::setTaxId(const QString &tax_id) {
    m_tax_id = tax_id;
    m_tax_id_isSet = true;
}

bool OAIBusinessDetails::is_tax_id_Set() const{
    return m_tax_id_isSet;
}

bool OAIBusinessDetails::is_tax_id_Valid() const{
    return m_tax_id_isValid;
}

bool OAIBusinessDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_doing_business_as_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_legal_business_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_listed_ultimate_parent_company.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_registration_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shareholders.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_signatories.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBusinessDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
