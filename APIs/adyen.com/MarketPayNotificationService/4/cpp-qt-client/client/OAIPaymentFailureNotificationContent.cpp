/**
 * Classic Platforms - Notifications
 * This API is used for the classic integration. If you are just starting your implementation, refer to our [new integration guide](https://docs.adyen.com/marketplaces-and-platforms) instead.  The Notification API sends notifications to the endpoints specified in a given subscription.  Subscriptions are managed through the Notification Configuration API. The API specifications listed here detail the format of each notification.  For more information, refer to our [documentation](https://docs.adyen.com/marketplaces-and-platforms/classic/notifications).
 *
 * The version of the OpenAPI document: 4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPaymentFailureNotificationContent.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPaymentFailureNotificationContent::OAIPaymentFailureNotificationContent(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPaymentFailureNotificationContent::OAIPaymentFailureNotificationContent() {
    this->initializeModel();
}

OAIPaymentFailureNotificationContent::~OAIPaymentFailureNotificationContent() {}

void OAIPaymentFailureNotificationContent::initializeModel() {

    m_error_fields_isSet = false;
    m_error_fields_isValid = false;

    m_error_message_isSet = false;
    m_error_message_isValid = false;

    m_modification_merchant_reference_isSet = false;
    m_modification_merchant_reference_isValid = false;

    m_modification_psp_reference_isSet = false;
    m_modification_psp_reference_isValid = false;

    m_payment_merchant_reference_isSet = false;
    m_payment_merchant_reference_isValid = false;

    m_payment_psp_reference_isSet = false;
    m_payment_psp_reference_isValid = false;
}

void OAIPaymentFailureNotificationContent::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPaymentFailureNotificationContent::fromJsonObject(QJsonObject json) {

    m_error_fields_isValid = ::OpenAPI::fromJsonValue(m_error_fields, json[QString("errorFields")]);
    m_error_fields_isSet = !json[QString("errorFields")].isNull() && m_error_fields_isValid;

    m_error_message_isValid = ::OpenAPI::fromJsonValue(m_error_message, json[QString("errorMessage")]);
    m_error_message_isSet = !json[QString("errorMessage")].isNull() && m_error_message_isValid;

    m_modification_merchant_reference_isValid = ::OpenAPI::fromJsonValue(m_modification_merchant_reference, json[QString("modificationMerchantReference")]);
    m_modification_merchant_reference_isSet = !json[QString("modificationMerchantReference")].isNull() && m_modification_merchant_reference_isValid;

    m_modification_psp_reference_isValid = ::OpenAPI::fromJsonValue(m_modification_psp_reference, json[QString("modificationPspReference")]);
    m_modification_psp_reference_isSet = !json[QString("modificationPspReference")].isNull() && m_modification_psp_reference_isValid;

    m_payment_merchant_reference_isValid = ::OpenAPI::fromJsonValue(m_payment_merchant_reference, json[QString("paymentMerchantReference")]);
    m_payment_merchant_reference_isSet = !json[QString("paymentMerchantReference")].isNull() && m_payment_merchant_reference_isValid;

    m_payment_psp_reference_isValid = ::OpenAPI::fromJsonValue(m_payment_psp_reference, json[QString("paymentPspReference")]);
    m_payment_psp_reference_isSet = !json[QString("paymentPspReference")].isNull() && m_payment_psp_reference_isValid;
}

QString OAIPaymentFailureNotificationContent::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPaymentFailureNotificationContent::asJsonObject() const {
    QJsonObject obj;
    if (m_error_fields.size() > 0) {
        obj.insert(QString("errorFields"), ::OpenAPI::toJsonValue(m_error_fields));
    }
    if (m_error_message.isSet()) {
        obj.insert(QString("errorMessage"), ::OpenAPI::toJsonValue(m_error_message));
    }
    if (m_modification_merchant_reference_isSet) {
        obj.insert(QString("modificationMerchantReference"), ::OpenAPI::toJsonValue(m_modification_merchant_reference));
    }
    if (m_modification_psp_reference_isSet) {
        obj.insert(QString("modificationPspReference"), ::OpenAPI::toJsonValue(m_modification_psp_reference));
    }
    if (m_payment_merchant_reference_isSet) {
        obj.insert(QString("paymentMerchantReference"), ::OpenAPI::toJsonValue(m_payment_merchant_reference));
    }
    if (m_payment_psp_reference_isSet) {
        obj.insert(QString("paymentPspReference"), ::OpenAPI::toJsonValue(m_payment_psp_reference));
    }
    return obj;
}

QList<OAIErrorFieldTypeWrapper> OAIPaymentFailureNotificationContent::getErrorFields() const {
    return m_error_fields;
}
void OAIPaymentFailureNotificationContent::setErrorFields(const QList<OAIErrorFieldTypeWrapper> &error_fields) {
    m_error_fields = error_fields;
    m_error_fields_isSet = true;
}

bool OAIPaymentFailureNotificationContent::is_error_fields_Set() const{
    return m_error_fields_isSet;
}

bool OAIPaymentFailureNotificationContent::is_error_fields_Valid() const{
    return m_error_fields_isValid;
}

OAIMessage OAIPaymentFailureNotificationContent::getErrorMessage() const {
    return m_error_message;
}
void OAIPaymentFailureNotificationContent::setErrorMessage(const OAIMessage &error_message) {
    m_error_message = error_message;
    m_error_message_isSet = true;
}

bool OAIPaymentFailureNotificationContent::is_error_message_Set() const{
    return m_error_message_isSet;
}

bool OAIPaymentFailureNotificationContent::is_error_message_Valid() const{
    return m_error_message_isValid;
}

QString OAIPaymentFailureNotificationContent::getModificationMerchantReference() const {
    return m_modification_merchant_reference;
}
void OAIPaymentFailureNotificationContent::setModificationMerchantReference(const QString &modification_merchant_reference) {
    m_modification_merchant_reference = modification_merchant_reference;
    m_modification_merchant_reference_isSet = true;
}

bool OAIPaymentFailureNotificationContent::is_modification_merchant_reference_Set() const{
    return m_modification_merchant_reference_isSet;
}

bool OAIPaymentFailureNotificationContent::is_modification_merchant_reference_Valid() const{
    return m_modification_merchant_reference_isValid;
}

QString OAIPaymentFailureNotificationContent::getModificationPspReference() const {
    return m_modification_psp_reference;
}
void OAIPaymentFailureNotificationContent::setModificationPspReference(const QString &modification_psp_reference) {
    m_modification_psp_reference = modification_psp_reference;
    m_modification_psp_reference_isSet = true;
}

bool OAIPaymentFailureNotificationContent::is_modification_psp_reference_Set() const{
    return m_modification_psp_reference_isSet;
}

bool OAIPaymentFailureNotificationContent::is_modification_psp_reference_Valid() const{
    return m_modification_psp_reference_isValid;
}

QString OAIPaymentFailureNotificationContent::getPaymentMerchantReference() const {
    return m_payment_merchant_reference;
}
void OAIPaymentFailureNotificationContent::setPaymentMerchantReference(const QString &payment_merchant_reference) {
    m_payment_merchant_reference = payment_merchant_reference;
    m_payment_merchant_reference_isSet = true;
}

bool OAIPaymentFailureNotificationContent::is_payment_merchant_reference_Set() const{
    return m_payment_merchant_reference_isSet;
}

bool OAIPaymentFailureNotificationContent::is_payment_merchant_reference_Valid() const{
    return m_payment_merchant_reference_isValid;
}

QString OAIPaymentFailureNotificationContent::getPaymentPspReference() const {
    return m_payment_psp_reference;
}
void OAIPaymentFailureNotificationContent::setPaymentPspReference(const QString &payment_psp_reference) {
    m_payment_psp_reference = payment_psp_reference;
    m_payment_psp_reference_isSet = true;
}

bool OAIPaymentFailureNotificationContent::is_payment_psp_reference_Set() const{
    return m_payment_psp_reference_isSet;
}

bool OAIPaymentFailureNotificationContent::is_payment_psp_reference_Valid() const{
    return m_payment_psp_reference_isValid;
}

bool OAIPaymentFailureNotificationContent::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_error_fields.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_message.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_modification_merchant_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_modification_psp_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_merchant_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_psp_reference_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPaymentFailureNotificationContent::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
