/**
 * Classic Platforms - Notifications
 * This API is used for the classic integration. If you are just starting your implementation, refer to our [new integration guide](https://docs.adyen.com/marketplaces-and-platforms) instead.  The Notification API sends notifications to the endpoints specified in a given subscription.  Subscriptions are managed through the Notification Configuration API. The API specifications listed here detail the format of each notification.  For more information, refer to our [documentation](https://docs.adyen.com/marketplaces-and-platforms/classic/notifications).
 *
 * The version of the OpenAPI document: 4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateAccountResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateAccountResponse::OAICreateAccountResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateAccountResponse::OAICreateAccountResponse() {
    this->initializeModel();
}

OAICreateAccountResponse::~OAICreateAccountResponse() {}

void OAICreateAccountResponse::initializeModel() {

    m_account_code_isSet = false;
    m_account_code_isValid = false;

    m_account_holder_code_isSet = false;
    m_account_holder_code_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_payout_schedule_isSet = false;
    m_payout_schedule_isValid = false;

    m_psp_reference_isSet = false;
    m_psp_reference_isValid = false;

    m_result_code_isSet = false;
    m_result_code_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_submitted_async_isSet = false;
    m_submitted_async_isValid = false;
}

void OAICreateAccountResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateAccountResponse::fromJsonObject(QJsonObject json) {

    m_account_code_isValid = ::OpenAPI::fromJsonValue(m_account_code, json[QString("accountCode")]);
    m_account_code_isSet = !json[QString("accountCode")].isNull() && m_account_code_isValid;

    m_account_holder_code_isValid = ::OpenAPI::fromJsonValue(m_account_holder_code, json[QString("accountHolderCode")]);
    m_account_holder_code_isSet = !json[QString("accountHolderCode")].isNull() && m_account_holder_code_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_payout_schedule_isValid = ::OpenAPI::fromJsonValue(m_payout_schedule, json[QString("payoutSchedule")]);
    m_payout_schedule_isSet = !json[QString("payoutSchedule")].isNull() && m_payout_schedule_isValid;

    m_psp_reference_isValid = ::OpenAPI::fromJsonValue(m_psp_reference, json[QString("pspReference")]);
    m_psp_reference_isSet = !json[QString("pspReference")].isNull() && m_psp_reference_isValid;

    m_result_code_isValid = ::OpenAPI::fromJsonValue(m_result_code, json[QString("resultCode")]);
    m_result_code_isSet = !json[QString("resultCode")].isNull() && m_result_code_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_submitted_async_isValid = ::OpenAPI::fromJsonValue(m_submitted_async, json[QString("submittedAsync")]);
    m_submitted_async_isSet = !json[QString("submittedAsync")].isNull() && m_submitted_async_isValid;
}

QString OAICreateAccountResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateAccountResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_account_code_isSet) {
        obj.insert(QString("accountCode"), ::OpenAPI::toJsonValue(m_account_code));
    }
    if (m_account_holder_code_isSet) {
        obj.insert(QString("accountHolderCode"), ::OpenAPI::toJsonValue(m_account_holder_code));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_payout_schedule.isSet()) {
        obj.insert(QString("payoutSchedule"), ::OpenAPI::toJsonValue(m_payout_schedule));
    }
    if (m_psp_reference_isSet) {
        obj.insert(QString("pspReference"), ::OpenAPI::toJsonValue(m_psp_reference));
    }
    if (m_result_code_isSet) {
        obj.insert(QString("resultCode"), ::OpenAPI::toJsonValue(m_result_code));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_submitted_async_isSet) {
        obj.insert(QString("submittedAsync"), ::OpenAPI::toJsonValue(m_submitted_async));
    }
    return obj;
}

QString OAICreateAccountResponse::getAccountCode() const {
    return m_account_code;
}
void OAICreateAccountResponse::setAccountCode(const QString &account_code) {
    m_account_code = account_code;
    m_account_code_isSet = true;
}

bool OAICreateAccountResponse::is_account_code_Set() const{
    return m_account_code_isSet;
}

bool OAICreateAccountResponse::is_account_code_Valid() const{
    return m_account_code_isValid;
}

QString OAICreateAccountResponse::getAccountHolderCode() const {
    return m_account_holder_code;
}
void OAICreateAccountResponse::setAccountHolderCode(const QString &account_holder_code) {
    m_account_holder_code = account_holder_code;
    m_account_holder_code_isSet = true;
}

bool OAICreateAccountResponse::is_account_holder_code_Set() const{
    return m_account_holder_code_isSet;
}

bool OAICreateAccountResponse::is_account_holder_code_Valid() const{
    return m_account_holder_code_isValid;
}

QString OAICreateAccountResponse::getDescription() const {
    return m_description;
}
void OAICreateAccountResponse::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICreateAccountResponse::is_description_Set() const{
    return m_description_isSet;
}

bool OAICreateAccountResponse::is_description_Valid() const{
    return m_description_isValid;
}

OAIPayoutScheduleResponse OAICreateAccountResponse::getPayoutSchedule() const {
    return m_payout_schedule;
}
void OAICreateAccountResponse::setPayoutSchedule(const OAIPayoutScheduleResponse &payout_schedule) {
    m_payout_schedule = payout_schedule;
    m_payout_schedule_isSet = true;
}

bool OAICreateAccountResponse::is_payout_schedule_Set() const{
    return m_payout_schedule_isSet;
}

bool OAICreateAccountResponse::is_payout_schedule_Valid() const{
    return m_payout_schedule_isValid;
}

QString OAICreateAccountResponse::getPspReference() const {
    return m_psp_reference;
}
void OAICreateAccountResponse::setPspReference(const QString &psp_reference) {
    m_psp_reference = psp_reference;
    m_psp_reference_isSet = true;
}

bool OAICreateAccountResponse::is_psp_reference_Set() const{
    return m_psp_reference_isSet;
}

bool OAICreateAccountResponse::is_psp_reference_Valid() const{
    return m_psp_reference_isValid;
}

QString OAICreateAccountResponse::getResultCode() const {
    return m_result_code;
}
void OAICreateAccountResponse::setResultCode(const QString &result_code) {
    m_result_code = result_code;
    m_result_code_isSet = true;
}

bool OAICreateAccountResponse::is_result_code_Set() const{
    return m_result_code_isSet;
}

bool OAICreateAccountResponse::is_result_code_Valid() const{
    return m_result_code_isValid;
}

QString OAICreateAccountResponse::getStatus() const {
    return m_status;
}
void OAICreateAccountResponse::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAICreateAccountResponse::is_status_Set() const{
    return m_status_isSet;
}

bool OAICreateAccountResponse::is_status_Valid() const{
    return m_status_isValid;
}

bool OAICreateAccountResponse::isSubmittedAsync() const {
    return m_submitted_async;
}
void OAICreateAccountResponse::setSubmittedAsync(const bool &submitted_async) {
    m_submitted_async = submitted_async;
    m_submitted_async_isSet = true;
}

bool OAICreateAccountResponse::is_submitted_async_Set() const{
    return m_submitted_async_isSet;
}

bool OAICreateAccountResponse::is_submitted_async_Valid() const{
    return m_submitted_async_isValid;
}

bool OAICreateAccountResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_account_holder_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payout_schedule.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_psp_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_result_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_submitted_async_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateAccountResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
