/**
 * Classic Platforms - Notifications
 * This API is used for the classic integration. If you are just starting your implementation, refer to our [new integration guide](https://docs.adyen.com/marketplaces-and-platforms) instead.  The Notification API sends notifications to the endpoints specified in a given subscription.  Subscriptions are managed through the Notification Configuration API. The API specifications listed here detail the format of each notification.  For more information, refer to our [documentation](https://docs.adyen.com/marketplaces-and-platforms/classic/notifications).
 *
 * The version of the OpenAPI document: 4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIAccountUpdateNotification.h
 *
 * 
 */

#ifndef OAIAccountUpdateNotification_H
#define OAIAccountUpdateNotification_H

#include <QJsonObject>

#include "OAIUpdateAccountResponse.h"
#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIUpdateAccountResponse;

class OAIAccountUpdateNotification : public OAIObject {
public:
    OAIAccountUpdateNotification();
    OAIAccountUpdateNotification(QString json);
    ~OAIAccountUpdateNotification() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIUpdateAccountResponse getContent() const;
    void setContent(const OAIUpdateAccountResponse &content);
    bool is_content_Set() const;
    bool is_content_Valid() const;

    QDateTime getEventDate() const;
    void setEventDate(const QDateTime &event_date);
    bool is_event_date_Set() const;
    bool is_event_date_Valid() const;

    QString getEventType() const;
    void setEventType(const QString &event_type);
    bool is_event_type_Set() const;
    bool is_event_type_Valid() const;

    QString getExecutingUserKey() const;
    void setExecutingUserKey(const QString &executing_user_key);
    bool is_executing_user_key_Set() const;
    bool is_executing_user_key_Valid() const;

    bool isLive() const;
    void setLive(const bool &live);
    bool is_live_Set() const;
    bool is_live_Valid() const;

    QString getPspReference() const;
    void setPspReference(const QString &psp_reference);
    bool is_psp_reference_Set() const;
    bool is_psp_reference_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIUpdateAccountResponse m_content;
    bool m_content_isSet;
    bool m_content_isValid;

    QDateTime m_event_date;
    bool m_event_date_isSet;
    bool m_event_date_isValid;

    QString m_event_type;
    bool m_event_type_isSet;
    bool m_event_type_isValid;

    QString m_executing_user_key;
    bool m_executing_user_key_isSet;
    bool m_executing_user_key_isValid;

    bool m_live;
    bool m_live_isSet;
    bool m_live_isValid;

    QString m_psp_reference;
    bool m_psp_reference_isSet;
    bool m_psp_reference_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIAccountUpdateNotification)

#endif // OAIAccountUpdateNotification_H
