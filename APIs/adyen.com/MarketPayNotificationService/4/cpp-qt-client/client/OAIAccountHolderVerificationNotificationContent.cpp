/**
 * Classic Platforms - Notifications
 * This API is used for the classic integration. If you are just starting your implementation, refer to our [new integration guide](https://docs.adyen.com/marketplaces-and-platforms) instead.  The Notification API sends notifications to the endpoints specified in a given subscription.  Subscriptions are managed through the Notification Configuration API. The API specifications listed here detail the format of each notification.  For more information, refer to our [documentation](https://docs.adyen.com/marketplaces-and-platforms/classic/notifications).
 *
 * The version of the OpenAPI document: 4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAccountHolderVerificationNotificationContent.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAccountHolderVerificationNotificationContent::OAIAccountHolderVerificationNotificationContent(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAccountHolderVerificationNotificationContent::OAIAccountHolderVerificationNotificationContent() {
    this->initializeModel();
}

OAIAccountHolderVerificationNotificationContent::~OAIAccountHolderVerificationNotificationContent() {}

void OAIAccountHolderVerificationNotificationContent::initializeModel() {

    m_account_holder_code_isSet = false;
    m_account_holder_code_isValid = false;

    m_bank_account_uuid_isSet = false;
    m_bank_account_uuid_isValid = false;

    m_shareholder_code_isSet = false;
    m_shareholder_code_isValid = false;

    m_signatory_code_isSet = false;
    m_signatory_code_isValid = false;

    m_status_summary_isSet = false;
    m_status_summary_isValid = false;

    m_verification_status_isSet = false;
    m_verification_status_isValid = false;

    m_verification_type_isSet = false;
    m_verification_type_isValid = false;
}

void OAIAccountHolderVerificationNotificationContent::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAccountHolderVerificationNotificationContent::fromJsonObject(QJsonObject json) {

    m_account_holder_code_isValid = ::OpenAPI::fromJsonValue(m_account_holder_code, json[QString("accountHolderCode")]);
    m_account_holder_code_isSet = !json[QString("accountHolderCode")].isNull() && m_account_holder_code_isValid;

    m_bank_account_uuid_isValid = ::OpenAPI::fromJsonValue(m_bank_account_uuid, json[QString("bankAccountUUID")]);
    m_bank_account_uuid_isSet = !json[QString("bankAccountUUID")].isNull() && m_bank_account_uuid_isValid;

    m_shareholder_code_isValid = ::OpenAPI::fromJsonValue(m_shareholder_code, json[QString("shareholderCode")]);
    m_shareholder_code_isSet = !json[QString("shareholderCode")].isNull() && m_shareholder_code_isValid;

    m_signatory_code_isValid = ::OpenAPI::fromJsonValue(m_signatory_code, json[QString("signatoryCode")]);
    m_signatory_code_isSet = !json[QString("signatoryCode")].isNull() && m_signatory_code_isValid;

    m_status_summary_isValid = ::OpenAPI::fromJsonValue(m_status_summary, json[QString("statusSummary")]);
    m_status_summary_isSet = !json[QString("statusSummary")].isNull() && m_status_summary_isValid;

    m_verification_status_isValid = ::OpenAPI::fromJsonValue(m_verification_status, json[QString("verificationStatus")]);
    m_verification_status_isSet = !json[QString("verificationStatus")].isNull() && m_verification_status_isValid;

    m_verification_type_isValid = ::OpenAPI::fromJsonValue(m_verification_type, json[QString("verificationType")]);
    m_verification_type_isSet = !json[QString("verificationType")].isNull() && m_verification_type_isValid;
}

QString OAIAccountHolderVerificationNotificationContent::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAccountHolderVerificationNotificationContent::asJsonObject() const {
    QJsonObject obj;
    if (m_account_holder_code_isSet) {
        obj.insert(QString("accountHolderCode"), ::OpenAPI::toJsonValue(m_account_holder_code));
    }
    if (m_bank_account_uuid_isSet) {
        obj.insert(QString("bankAccountUUID"), ::OpenAPI::toJsonValue(m_bank_account_uuid));
    }
    if (m_shareholder_code_isSet) {
        obj.insert(QString("shareholderCode"), ::OpenAPI::toJsonValue(m_shareholder_code));
    }
    if (m_signatory_code_isSet) {
        obj.insert(QString("signatoryCode"), ::OpenAPI::toJsonValue(m_signatory_code));
    }
    if (m_status_summary.isSet()) {
        obj.insert(QString("statusSummary"), ::OpenAPI::toJsonValue(m_status_summary));
    }
    if (m_verification_status_isSet) {
        obj.insert(QString("verificationStatus"), ::OpenAPI::toJsonValue(m_verification_status));
    }
    if (m_verification_type_isSet) {
        obj.insert(QString("verificationType"), ::OpenAPI::toJsonValue(m_verification_type));
    }
    return obj;
}

QString OAIAccountHolderVerificationNotificationContent::getAccountHolderCode() const {
    return m_account_holder_code;
}
void OAIAccountHolderVerificationNotificationContent::setAccountHolderCode(const QString &account_holder_code) {
    m_account_holder_code = account_holder_code;
    m_account_holder_code_isSet = true;
}

bool OAIAccountHolderVerificationNotificationContent::is_account_holder_code_Set() const{
    return m_account_holder_code_isSet;
}

bool OAIAccountHolderVerificationNotificationContent::is_account_holder_code_Valid() const{
    return m_account_holder_code_isValid;
}

QString OAIAccountHolderVerificationNotificationContent::getBankAccountUuid() const {
    return m_bank_account_uuid;
}
void OAIAccountHolderVerificationNotificationContent::setBankAccountUuid(const QString &bank_account_uuid) {
    m_bank_account_uuid = bank_account_uuid;
    m_bank_account_uuid_isSet = true;
}

bool OAIAccountHolderVerificationNotificationContent::is_bank_account_uuid_Set() const{
    return m_bank_account_uuid_isSet;
}

bool OAIAccountHolderVerificationNotificationContent::is_bank_account_uuid_Valid() const{
    return m_bank_account_uuid_isValid;
}

QString OAIAccountHolderVerificationNotificationContent::getShareholderCode() const {
    return m_shareholder_code;
}
void OAIAccountHolderVerificationNotificationContent::setShareholderCode(const QString &shareholder_code) {
    m_shareholder_code = shareholder_code;
    m_shareholder_code_isSet = true;
}

bool OAIAccountHolderVerificationNotificationContent::is_shareholder_code_Set() const{
    return m_shareholder_code_isSet;
}

bool OAIAccountHolderVerificationNotificationContent::is_shareholder_code_Valid() const{
    return m_shareholder_code_isValid;
}

QString OAIAccountHolderVerificationNotificationContent::getSignatoryCode() const {
    return m_signatory_code;
}
void OAIAccountHolderVerificationNotificationContent::setSignatoryCode(const QString &signatory_code) {
    m_signatory_code = signatory_code;
    m_signatory_code_isSet = true;
}

bool OAIAccountHolderVerificationNotificationContent::is_signatory_code_Set() const{
    return m_signatory_code_isSet;
}

bool OAIAccountHolderVerificationNotificationContent::is_signatory_code_Valid() const{
    return m_signatory_code_isValid;
}

OAIKYCCheckSummary OAIAccountHolderVerificationNotificationContent::getStatusSummary() const {
    return m_status_summary;
}
void OAIAccountHolderVerificationNotificationContent::setStatusSummary(const OAIKYCCheckSummary &status_summary) {
    m_status_summary = status_summary;
    m_status_summary_isSet = true;
}

bool OAIAccountHolderVerificationNotificationContent::is_status_summary_Set() const{
    return m_status_summary_isSet;
}

bool OAIAccountHolderVerificationNotificationContent::is_status_summary_Valid() const{
    return m_status_summary_isValid;
}

QString OAIAccountHolderVerificationNotificationContent::getVerificationStatus() const {
    return m_verification_status;
}
void OAIAccountHolderVerificationNotificationContent::setVerificationStatus(const QString &verification_status) {
    m_verification_status = verification_status;
    m_verification_status_isSet = true;
}

bool OAIAccountHolderVerificationNotificationContent::is_verification_status_Set() const{
    return m_verification_status_isSet;
}

bool OAIAccountHolderVerificationNotificationContent::is_verification_status_Valid() const{
    return m_verification_status_isValid;
}

QString OAIAccountHolderVerificationNotificationContent::getVerificationType() const {
    return m_verification_type;
}
void OAIAccountHolderVerificationNotificationContent::setVerificationType(const QString &verification_type) {
    m_verification_type = verification_type;
    m_verification_type_isSet = true;
}

bool OAIAccountHolderVerificationNotificationContent::is_verification_type_Set() const{
    return m_verification_type_isSet;
}

bool OAIAccountHolderVerificationNotificationContent::is_verification_type_Valid() const{
    return m_verification_type_isValid;
}

bool OAIAccountHolderVerificationNotificationContent::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_holder_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bank_account_uuid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shareholder_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_signatory_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_summary.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_verification_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_verification_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAccountHolderVerificationNotificationContent::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
