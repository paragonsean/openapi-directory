/**
 * Classic Platforms - Notifications
 * This API is used for the classic integration. If you are just starting your implementation, refer to our [new integration guide](https://docs.adyen.com/marketplaces-and-platforms) instead.  The Notification API sends notifications to the endpoints specified in a given subscription.  Subscriptions are managed through the Notification Configuration API. The API specifications listed here detail the format of each notification.  For more information, refer to our [documentation](https://docs.adyen.com/marketplaces-and-platforms/classic/notifications).
 *
 * The version of the OpenAPI document: 4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAccountPayoutState.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAccountPayoutState::OAIAccountPayoutState(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAccountPayoutState::OAIAccountPayoutState() {
    this->initializeModel();
}

OAIAccountPayoutState::~OAIAccountPayoutState() {}

void OAIAccountPayoutState::initializeModel() {

    m_allow_payout_isSet = false;
    m_allow_payout_isValid = false;

    m_disable_reason_isSet = false;
    m_disable_reason_isValid = false;

    m_disabled_isSet = false;
    m_disabled_isValid = false;

    m_payout_limit_isSet = false;
    m_payout_limit_isValid = false;

    m_tier_number_isSet = false;
    m_tier_number_isValid = false;
}

void OAIAccountPayoutState::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAccountPayoutState::fromJsonObject(QJsonObject json) {

    m_allow_payout_isValid = ::OpenAPI::fromJsonValue(m_allow_payout, json[QString("allowPayout")]);
    m_allow_payout_isSet = !json[QString("allowPayout")].isNull() && m_allow_payout_isValid;

    m_disable_reason_isValid = ::OpenAPI::fromJsonValue(m_disable_reason, json[QString("disableReason")]);
    m_disable_reason_isSet = !json[QString("disableReason")].isNull() && m_disable_reason_isValid;

    m_disabled_isValid = ::OpenAPI::fromJsonValue(m_disabled, json[QString("disabled")]);
    m_disabled_isSet = !json[QString("disabled")].isNull() && m_disabled_isValid;

    m_payout_limit_isValid = ::OpenAPI::fromJsonValue(m_payout_limit, json[QString("payoutLimit")]);
    m_payout_limit_isSet = !json[QString("payoutLimit")].isNull() && m_payout_limit_isValid;

    m_tier_number_isValid = ::OpenAPI::fromJsonValue(m_tier_number, json[QString("tierNumber")]);
    m_tier_number_isSet = !json[QString("tierNumber")].isNull() && m_tier_number_isValid;
}

QString OAIAccountPayoutState::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAccountPayoutState::asJsonObject() const {
    QJsonObject obj;
    if (m_allow_payout_isSet) {
        obj.insert(QString("allowPayout"), ::OpenAPI::toJsonValue(m_allow_payout));
    }
    if (m_disable_reason_isSet) {
        obj.insert(QString("disableReason"), ::OpenAPI::toJsonValue(m_disable_reason));
    }
    if (m_disabled_isSet) {
        obj.insert(QString("disabled"), ::OpenAPI::toJsonValue(m_disabled));
    }
    if (m_payout_limit.isSet()) {
        obj.insert(QString("payoutLimit"), ::OpenAPI::toJsonValue(m_payout_limit));
    }
    if (m_tier_number_isSet) {
        obj.insert(QString("tierNumber"), ::OpenAPI::toJsonValue(m_tier_number));
    }
    return obj;
}

bool OAIAccountPayoutState::isAllowPayout() const {
    return m_allow_payout;
}
void OAIAccountPayoutState::setAllowPayout(const bool &allow_payout) {
    m_allow_payout = allow_payout;
    m_allow_payout_isSet = true;
}

bool OAIAccountPayoutState::is_allow_payout_Set() const{
    return m_allow_payout_isSet;
}

bool OAIAccountPayoutState::is_allow_payout_Valid() const{
    return m_allow_payout_isValid;
}

QString OAIAccountPayoutState::getDisableReason() const {
    return m_disable_reason;
}
void OAIAccountPayoutState::setDisableReason(const QString &disable_reason) {
    m_disable_reason = disable_reason;
    m_disable_reason_isSet = true;
}

bool OAIAccountPayoutState::is_disable_reason_Set() const{
    return m_disable_reason_isSet;
}

bool OAIAccountPayoutState::is_disable_reason_Valid() const{
    return m_disable_reason_isValid;
}

bool OAIAccountPayoutState::isDisabled() const {
    return m_disabled;
}
void OAIAccountPayoutState::setDisabled(const bool &disabled) {
    m_disabled = disabled;
    m_disabled_isSet = true;
}

bool OAIAccountPayoutState::is_disabled_Set() const{
    return m_disabled_isSet;
}

bool OAIAccountPayoutState::is_disabled_Valid() const{
    return m_disabled_isValid;
}

OAIAmount OAIAccountPayoutState::getPayoutLimit() const {
    return m_payout_limit;
}
void OAIAccountPayoutState::setPayoutLimit(const OAIAmount &payout_limit) {
    m_payout_limit = payout_limit;
    m_payout_limit_isSet = true;
}

bool OAIAccountPayoutState::is_payout_limit_Set() const{
    return m_payout_limit_isSet;
}

bool OAIAccountPayoutState::is_payout_limit_Valid() const{
    return m_payout_limit_isValid;
}

qint32 OAIAccountPayoutState::getTierNumber() const {
    return m_tier_number;
}
void OAIAccountPayoutState::setTierNumber(const qint32 &tier_number) {
    m_tier_number = tier_number;
    m_tier_number_isSet = true;
}

bool OAIAccountPayoutState::is_tier_number_Set() const{
    return m_tier_number_isSet;
}

bool OAIAccountPayoutState::is_tier_number_Valid() const{
    return m_tier_number_isValid;
}

bool OAIAccountPayoutState::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allow_payout_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disable_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payout_limit.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tier_number_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAccountPayoutState::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
