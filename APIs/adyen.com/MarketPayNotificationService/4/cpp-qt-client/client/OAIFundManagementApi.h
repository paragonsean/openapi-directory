/**
 * Classic Platforms - Notifications
 * This API is used for the classic integration. If you are just starting your implementation, refer to our [new integration guide](https://docs.adyen.com/marketplaces-and-platforms) instead.  The Notification API sends notifications to the endpoints specified in a given subscription.  Subscriptions are managed through the Notification Configuration API. The API specifications listed here detail the format of each notification.  For more information, refer to our [documentation](https://docs.adyen.com/marketplaces-and-platforms/classic/notifications).
 *
 * The version of the OpenAPI document: 4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIFundManagementApi_H
#define OAI_OAIFundManagementApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAccountFundsBelowThresholdNotification.h"
#include "OAIAccountHolderPayoutNotification.h"
#include "OAIBeneficiarySetupNotification.h"
#include "OAICompensateNegativeBalanceNotification.h"
#include "OAIDirectDebitInitiatedNotification.h"
#include "OAINotificationResponse.h"
#include "OAIRefundFundsTransferNotification.h"
#include "OAIScheduledRefundsNotification.h"
#include "OAITransferFundsNotification.h"

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIFundManagementApi : public QObject {
    Q_OBJECT

public:
    OAIFundManagementApi(const int timeOut = 0);
    ~OAIFundManagementApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_account_funds_below_threshold_notification OAIAccountFundsBelowThresholdNotification [optional]
    */
    virtual void postACCOUNTFUNDSBELOWTHRESHOLD(const ::OpenAPI::OptionalParam<OAIAccountFundsBelowThresholdNotification> &oai_account_funds_below_threshold_notification = ::OpenAPI::OptionalParam<OAIAccountFundsBelowThresholdNotification>());

    /**
    * @param[in]  oai_account_holder_payout_notification OAIAccountHolderPayoutNotification [optional]
    */
    virtual void postACCOUNTHOLDERPAYOUT(const ::OpenAPI::OptionalParam<OAIAccountHolderPayoutNotification> &oai_account_holder_payout_notification = ::OpenAPI::OptionalParam<OAIAccountHolderPayoutNotification>());

    /**
    * @param[in]  oai_beneficiary_setup_notification OAIBeneficiarySetupNotification [optional]
    */
    virtual void postBENEFICIARYSETUP(const ::OpenAPI::OptionalParam<OAIBeneficiarySetupNotification> &oai_beneficiary_setup_notification = ::OpenAPI::OptionalParam<OAIBeneficiarySetupNotification>());

    /**
    * @param[in]  oai_compensate_negative_balance_notification OAICompensateNegativeBalanceNotification [optional]
    */
    virtual void postCOMPENSATENEGATIVEBALANCE(const ::OpenAPI::OptionalParam<OAICompensateNegativeBalanceNotification> &oai_compensate_negative_balance_notification = ::OpenAPI::OptionalParam<OAICompensateNegativeBalanceNotification>());

    /**
    * @param[in]  oai_direct_debit_initiated_notification OAIDirectDebitInitiatedNotification [optional]
    */
    virtual void postDIRECTDEBITINITIATED(const ::OpenAPI::OptionalParam<OAIDirectDebitInitiatedNotification> &oai_direct_debit_initiated_notification = ::OpenAPI::OptionalParam<OAIDirectDebitInitiatedNotification>());

    /**
    * @param[in]  oai_refund_funds_transfer_notification OAIRefundFundsTransferNotification [optional]
    */
    virtual void postREFUNDFUNDSTRANSFER(const ::OpenAPI::OptionalParam<OAIRefundFundsTransferNotification> &oai_refund_funds_transfer_notification = ::OpenAPI::OptionalParam<OAIRefundFundsTransferNotification>());

    /**
    * @param[in]  oai_scheduled_refunds_notification OAIScheduledRefundsNotification [optional]
    */
    virtual void postSCHEDULEDREFUNDS(const ::OpenAPI::OptionalParam<OAIScheduledRefundsNotification> &oai_scheduled_refunds_notification = ::OpenAPI::OptionalParam<OAIScheduledRefundsNotification>());

    /**
    * @param[in]  oai_transfer_funds_notification OAITransferFundsNotification [optional]
    */
    virtual void postTRANSFERFUNDS(const ::OpenAPI::OptionalParam<OAITransferFundsNotification> &oai_transfer_funds_notification = ::OpenAPI::OptionalParam<OAITransferFundsNotification>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void postACCOUNTFUNDSBELOWTHRESHOLDCallback(OAIHttpRequestWorker *worker);
    void postACCOUNTHOLDERPAYOUTCallback(OAIHttpRequestWorker *worker);
    void postBENEFICIARYSETUPCallback(OAIHttpRequestWorker *worker);
    void postCOMPENSATENEGATIVEBALANCECallback(OAIHttpRequestWorker *worker);
    void postDIRECTDEBITINITIATEDCallback(OAIHttpRequestWorker *worker);
    void postREFUNDFUNDSTRANSFERCallback(OAIHttpRequestWorker *worker);
    void postSCHEDULEDREFUNDSCallback(OAIHttpRequestWorker *worker);
    void postTRANSFERFUNDSCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void postACCOUNTFUNDSBELOWTHRESHOLDSignal(OAINotificationResponse summary);
    void postACCOUNTHOLDERPAYOUTSignal(OAINotificationResponse summary);
    void postBENEFICIARYSETUPSignal(OAINotificationResponse summary);
    void postCOMPENSATENEGATIVEBALANCESignal(OAINotificationResponse summary);
    void postDIRECTDEBITINITIATEDSignal(OAINotificationResponse summary);
    void postREFUNDFUNDSTRANSFERSignal(OAINotificationResponse summary);
    void postSCHEDULEDREFUNDSSignal(OAINotificationResponse summary);
    void postTRANSFERFUNDSSignal(OAINotificationResponse summary);


    void postACCOUNTFUNDSBELOWTHRESHOLDSignalFull(OAIHttpRequestWorker *worker, OAINotificationResponse summary);
    void postACCOUNTHOLDERPAYOUTSignalFull(OAIHttpRequestWorker *worker, OAINotificationResponse summary);
    void postBENEFICIARYSETUPSignalFull(OAIHttpRequestWorker *worker, OAINotificationResponse summary);
    void postCOMPENSATENEGATIVEBALANCESignalFull(OAIHttpRequestWorker *worker, OAINotificationResponse summary);
    void postDIRECTDEBITINITIATEDSignalFull(OAIHttpRequestWorker *worker, OAINotificationResponse summary);
    void postREFUNDFUNDSTRANSFERSignalFull(OAIHttpRequestWorker *worker, OAINotificationResponse summary);
    void postSCHEDULEDREFUNDSSignalFull(OAIHttpRequestWorker *worker, OAINotificationResponse summary);
    void postTRANSFERFUNDSSignalFull(OAIHttpRequestWorker *worker, OAINotificationResponse summary);

    Q_DECL_DEPRECATED_X("Use postACCOUNTFUNDSBELOWTHRESHOLDSignalError() instead")
    void postACCOUNTFUNDSBELOWTHRESHOLDSignalE(OAINotificationResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postACCOUNTFUNDSBELOWTHRESHOLDSignalError(OAINotificationResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postACCOUNTHOLDERPAYOUTSignalError() instead")
    void postACCOUNTHOLDERPAYOUTSignalE(OAINotificationResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postACCOUNTHOLDERPAYOUTSignalError(OAINotificationResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postBENEFICIARYSETUPSignalError() instead")
    void postBENEFICIARYSETUPSignalE(OAINotificationResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postBENEFICIARYSETUPSignalError(OAINotificationResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postCOMPENSATENEGATIVEBALANCESignalError() instead")
    void postCOMPENSATENEGATIVEBALANCESignalE(OAINotificationResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postCOMPENSATENEGATIVEBALANCESignalError(OAINotificationResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postDIRECTDEBITINITIATEDSignalError() instead")
    void postDIRECTDEBITINITIATEDSignalE(OAINotificationResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postDIRECTDEBITINITIATEDSignalError(OAINotificationResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postREFUNDFUNDSTRANSFERSignalError() instead")
    void postREFUNDFUNDSTRANSFERSignalE(OAINotificationResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postREFUNDFUNDSTRANSFERSignalError(OAINotificationResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postSCHEDULEDREFUNDSSignalError() instead")
    void postSCHEDULEDREFUNDSSignalE(OAINotificationResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postSCHEDULEDREFUNDSSignalError(OAINotificationResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postTRANSFERFUNDSSignalError() instead")
    void postTRANSFERFUNDSSignalE(OAINotificationResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postTRANSFERFUNDSSignalError(OAINotificationResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use postACCOUNTFUNDSBELOWTHRESHOLDSignalErrorFull() instead")
    void postACCOUNTFUNDSBELOWTHRESHOLDSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postACCOUNTFUNDSBELOWTHRESHOLDSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postACCOUNTHOLDERPAYOUTSignalErrorFull() instead")
    void postACCOUNTHOLDERPAYOUTSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postACCOUNTHOLDERPAYOUTSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postBENEFICIARYSETUPSignalErrorFull() instead")
    void postBENEFICIARYSETUPSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postBENEFICIARYSETUPSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postCOMPENSATENEGATIVEBALANCESignalErrorFull() instead")
    void postCOMPENSATENEGATIVEBALANCESignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postCOMPENSATENEGATIVEBALANCESignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postDIRECTDEBITINITIATEDSignalErrorFull() instead")
    void postDIRECTDEBITINITIATEDSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postDIRECTDEBITINITIATEDSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postREFUNDFUNDSTRANSFERSignalErrorFull() instead")
    void postREFUNDFUNDSTRANSFERSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postREFUNDFUNDSTRANSFERSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postSCHEDULEDREFUNDSSignalErrorFull() instead")
    void postSCHEDULEDREFUNDSSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postSCHEDULEDREFUNDSSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postTRANSFERFUNDSSignalErrorFull() instead")
    void postTRANSFERFUNDSSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postTRANSFERFUNDSSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
