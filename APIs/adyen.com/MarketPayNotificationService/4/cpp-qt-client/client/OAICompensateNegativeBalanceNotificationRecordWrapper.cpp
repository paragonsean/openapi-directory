/**
 * Classic Platforms - Notifications
 * This API is used for the classic integration. If you are just starting your implementation, refer to our [new integration guide](https://docs.adyen.com/marketplaces-and-platforms) instead.  The Notification API sends notifications to the endpoints specified in a given subscription.  Subscriptions are managed through the Notification Configuration API. The API specifications listed here detail the format of each notification.  For more information, refer to our [documentation](https://docs.adyen.com/marketplaces-and-platforms/classic/notifications).
 *
 * The version of the OpenAPI document: 4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICompensateNegativeBalanceNotificationRecordWrapper.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICompensateNegativeBalanceNotificationRecordWrapper::OAICompensateNegativeBalanceNotificationRecordWrapper(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICompensateNegativeBalanceNotificationRecordWrapper::OAICompensateNegativeBalanceNotificationRecordWrapper() {
    this->initializeModel();
}

OAICompensateNegativeBalanceNotificationRecordWrapper::~OAICompensateNegativeBalanceNotificationRecordWrapper() {}

void OAICompensateNegativeBalanceNotificationRecordWrapper::initializeModel() {

    m_compensate_negative_balance_notification_record_isSet = false;
    m_compensate_negative_balance_notification_record_isValid = false;
}

void OAICompensateNegativeBalanceNotificationRecordWrapper::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICompensateNegativeBalanceNotificationRecordWrapper::fromJsonObject(QJsonObject json) {

    m_compensate_negative_balance_notification_record_isValid = ::OpenAPI::fromJsonValue(m_compensate_negative_balance_notification_record, json[QString("CompensateNegativeBalanceNotificationRecord")]);
    m_compensate_negative_balance_notification_record_isSet = !json[QString("CompensateNegativeBalanceNotificationRecord")].isNull() && m_compensate_negative_balance_notification_record_isValid;
}

QString OAICompensateNegativeBalanceNotificationRecordWrapper::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICompensateNegativeBalanceNotificationRecordWrapper::asJsonObject() const {
    QJsonObject obj;
    if (m_compensate_negative_balance_notification_record.isSet()) {
        obj.insert(QString("CompensateNegativeBalanceNotificationRecord"), ::OpenAPI::toJsonValue(m_compensate_negative_balance_notification_record));
    }
    return obj;
}

OAICompensateNegativeBalanceNotificationRecord OAICompensateNegativeBalanceNotificationRecordWrapper::getCompensateNegativeBalanceNotificationRecord() const {
    return m_compensate_negative_balance_notification_record;
}
void OAICompensateNegativeBalanceNotificationRecordWrapper::setCompensateNegativeBalanceNotificationRecord(const OAICompensateNegativeBalanceNotificationRecord &compensate_negative_balance_notification_record) {
    m_compensate_negative_balance_notification_record = compensate_negative_balance_notification_record;
    m_compensate_negative_balance_notification_record_isSet = true;
}

bool OAICompensateNegativeBalanceNotificationRecordWrapper::is_compensate_negative_balance_notification_record_Set() const{
    return m_compensate_negative_balance_notification_record_isSet;
}

bool OAICompensateNegativeBalanceNotificationRecordWrapper::is_compensate_negative_balance_notification_record_Valid() const{
    return m_compensate_negative_balance_notification_record_isValid;
}

bool OAICompensateNegativeBalanceNotificationRecordWrapper::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_compensate_negative_balance_notification_record.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICompensateNegativeBalanceNotificationRecordWrapper::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
