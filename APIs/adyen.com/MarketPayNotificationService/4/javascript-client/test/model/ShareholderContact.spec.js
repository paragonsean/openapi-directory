/**
 * Classic Platforms - Notifications
 * This API is used for the classic integration. If you are just starting your implementation, refer to our [new integration guide](https://docs.adyen.com/marketplaces-and-platforms) instead.  The Notification API sends notifications to the endpoints specified in a given subscription.  Subscriptions are managed through the Notification Configuration API. The API specifications listed here detail the format of each notification.  For more information, refer to our [documentation](https://docs.adyen.com/marketplaces-and-platforms/classic/notifications).
 *
 * The version of the OpenAPI document: 4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.ClassicPlatformsNotifications);
  }
}(this, function(expect, ClassicPlatformsNotifications) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new ClassicPlatformsNotifications.ShareholderContact();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ShareholderContact', function() {
    it('should create an instance of ShareholderContact', function() {
      // uncomment below and update the code to test ShareholderContact
      //var instance = new ClassicPlatformsNotifications.ShareholderContact();
      //expect(instance).to.be.a(ClassicPlatformsNotifications.ShareholderContact);
    });

    it('should have the property address (base name: "address")', function() {
      // uncomment below and update the code to test the property address
      //var instance = new ClassicPlatformsNotifications.ShareholderContact();
      //expect(instance).to.be();
    });

    it('should have the property email (base name: "email")', function() {
      // uncomment below and update the code to test the property email
      //var instance = new ClassicPlatformsNotifications.ShareholderContact();
      //expect(instance).to.be();
    });

    it('should have the property fullPhoneNumber (base name: "fullPhoneNumber")', function() {
      // uncomment below and update the code to test the property fullPhoneNumber
      //var instance = new ClassicPlatformsNotifications.ShareholderContact();
      //expect(instance).to.be();
    });

    it('should have the property jobTitle (base name: "jobTitle")', function() {
      // uncomment below and update the code to test the property jobTitle
      //var instance = new ClassicPlatformsNotifications.ShareholderContact();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new ClassicPlatformsNotifications.ShareholderContact();
      //expect(instance).to.be();
    });

    it('should have the property personalData (base name: "personalData")', function() {
      // uncomment below and update the code to test the property personalData
      //var instance = new ClassicPlatformsNotifications.ShareholderContact();
      //expect(instance).to.be();
    });

    it('should have the property phoneNumber (base name: "phoneNumber")', function() {
      // uncomment below and update the code to test the property phoneNumber
      //var instance = new ClassicPlatformsNotifications.ShareholderContact();
      //expect(instance).to.be();
    });

    it('should have the property shareholderCode (base name: "shareholderCode")', function() {
      // uncomment below and update the code to test the property shareholderCode
      //var instance = new ClassicPlatformsNotifications.ShareholderContact();
      //expect(instance).to.be();
    });

    it('should have the property shareholderType (base name: "shareholderType")', function() {
      // uncomment below and update the code to test the property shareholderType
      //var instance = new ClassicPlatformsNotifications.ShareholderContact();
      //expect(instance).to.be();
    });

    it('should have the property webAddress (base name: "webAddress")', function() {
      // uncomment below and update the code to test the property webAddress
      //var instance = new ClassicPlatformsNotifications.ShareholderContact();
      //expect(instance).to.be();
    });

  });

}));
