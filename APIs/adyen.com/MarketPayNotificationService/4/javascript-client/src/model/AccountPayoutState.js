/**
 * Classic Platforms - Notifications
 * This API is used for the classic integration. If you are just starting your implementation, refer to our [new integration guide](https://docs.adyen.com/marketplaces-and-platforms) instead.  The Notification API sends notifications to the endpoints specified in a given subscription.  Subscriptions are managed through the Notification Configuration API. The API specifications listed here detail the format of each notification.  For more information, refer to our [documentation](https://docs.adyen.com/marketplaces-and-platforms/classic/notifications).
 *
 * The version of the OpenAPI document: 4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Amount from './Amount';

/**
 * The AccountPayoutState model module.
 * @module model/AccountPayoutState
 * @version 4
 */
class AccountPayoutState {
    /**
     * Constructs a new <code>AccountPayoutState</code>.
     * @alias module:model/AccountPayoutState
     */
    constructor() { 
        
        AccountPayoutState.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AccountPayoutState</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AccountPayoutState} obj Optional instance to populate.
     * @return {module:model/AccountPayoutState} The populated <code>AccountPayoutState</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AccountPayoutState();

            if (data.hasOwnProperty('allowPayout')) {
                obj['allowPayout'] = ApiClient.convertToType(data['allowPayout'], 'Boolean');
            }
            if (data.hasOwnProperty('disableReason')) {
                obj['disableReason'] = ApiClient.convertToType(data['disableReason'], 'String');
            }
            if (data.hasOwnProperty('disabled')) {
                obj['disabled'] = ApiClient.convertToType(data['disabled'], 'Boolean');
            }
            if (data.hasOwnProperty('payoutLimit')) {
                obj['payoutLimit'] = Amount.constructFromObject(data['payoutLimit']);
            }
            if (data.hasOwnProperty('tierNumber')) {
                obj['tierNumber'] = ApiClient.convertToType(data['tierNumber'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AccountPayoutState</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AccountPayoutState</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['disableReason'] && !(typeof data['disableReason'] === 'string' || data['disableReason'] instanceof String)) {
            throw new Error("Expected the field `disableReason` to be a primitive type in the JSON string but got " + data['disableReason']);
        }
        // validate the optional field `payoutLimit`
        if (data['payoutLimit']) { // data not null
          Amount.validateJSON(data['payoutLimit']);
        }

        return true;
    }


}



/**
 * Indicates whether payouts are allowed. This field is the overarching payout status, and is the aggregate of multiple conditions (e.g., KYC status, disabled flag, etc). If this field is false, no payouts will be permitted for any of the account holder's accounts. If this field is true, payouts will be permitted for any of the account holder's accounts.
 * @member {Boolean} allowPayout
 */
AccountPayoutState.prototype['allowPayout'] = undefined;

/**
 * The reason why payouts (to all of the account holder's accounts) have been disabled (by the platform). If the `disabled` field is true, this field can be used to explain why.
 * @member {String} disableReason
 */
AccountPayoutState.prototype['disableReason'] = undefined;

/**
 * Indicates whether payouts have been disabled (by the platform) for all of the account holder's accounts. A platform may enable and disable this field at their discretion. If this field is true, `allowPayout` will be false and no payouts will be permitted for any of the account holder's accounts. If this field is false, `allowPayout` may or may not be enabled, depending on other factors.
 * @member {Boolean} disabled
 */
AccountPayoutState.prototype['disabled'] = undefined;

/**
 * The maximum amount that payouts are limited to. Only applies if payouts are allowed but limited.
 * @member {module:model/Amount} payoutLimit
 */
AccountPayoutState.prototype['payoutLimit'] = undefined;

/**
 * The payout tier that the account holder occupies.
 * @member {Number} tierNumber
 */
AccountPayoutState.prototype['tierNumber'] = undefined;






export default AccountPayoutState;

