/**
 * Classic Platforms - Notifications
 * This API is used for the classic integration. If you are just starting your implementation, refer to our [new integration guide](https://docs.adyen.com/marketplaces-and-platforms) instead.  The Notification API sends notifications to the endpoints specified in a given subscription.  Subscriptions are managed through the Notification Configuration API. The API specifications listed here detail the format of each notification.  For more information, refer to our [documentation](https://docs.adyen.com/marketplaces-and-platforms/classic/notifications).
 *
 * The version of the OpenAPI document: 4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The AccountHolderStoreStatusChangeNotification model module.
 * @module model/AccountHolderStoreStatusChangeNotification
 * @version 4
 */
class AccountHolderStoreStatusChangeNotification {
    /**
     * Constructs a new <code>AccountHolderStoreStatusChangeNotification</code>.
     * @alias module:model/AccountHolderStoreStatusChangeNotification
     * @param eventDate {Date} The date and time when an event has been completed.
     * @param eventType {String} The event type of the notification.
     * @param executingUserKey {String} The user or process that has triggered the notification.
     * @param live {Boolean} Indicates whether the notification originated from the live environment or the test environment. If true, the notification originated from the live environment. If false, the notification originated from the test environment.
     * @param pspReference {String} The PSP reference of the request from which the notification originates.
     */
    constructor(eventDate, eventType, executingUserKey, live, pspReference) { 
        
        AccountHolderStoreStatusChangeNotification.initialize(this, eventDate, eventType, executingUserKey, live, pspReference);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, eventDate, eventType, executingUserKey, live, pspReference) { 
        obj['eventDate'] = eventDate;
        obj['eventType'] = eventType;
        obj['executingUserKey'] = executingUserKey;
        obj['live'] = live;
        obj['pspReference'] = pspReference;
    }

    /**
     * Constructs a <code>AccountHolderStoreStatusChangeNotification</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AccountHolderStoreStatusChangeNotification} obj Optional instance to populate.
     * @return {module:model/AccountHolderStoreStatusChangeNotification} The populated <code>AccountHolderStoreStatusChangeNotification</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AccountHolderStoreStatusChangeNotification();

            if (data.hasOwnProperty('content')) {
                obj['content'] = ApiClient.convertToType(data['content'], Object);
            }
            if (data.hasOwnProperty('eventDate')) {
                obj['eventDate'] = ApiClient.convertToType(data['eventDate'], 'Date');
            }
            if (data.hasOwnProperty('eventType')) {
                obj['eventType'] = ApiClient.convertToType(data['eventType'], 'String');
            }
            if (data.hasOwnProperty('executingUserKey')) {
                obj['executingUserKey'] = ApiClient.convertToType(data['executingUserKey'], 'String');
            }
            if (data.hasOwnProperty('live')) {
                obj['live'] = ApiClient.convertToType(data['live'], 'Boolean');
            }
            if (data.hasOwnProperty('pspReference')) {
                obj['pspReference'] = ApiClient.convertToType(data['pspReference'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AccountHolderStoreStatusChangeNotification</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AccountHolderStoreStatusChangeNotification</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of AccountHolderStoreStatusChangeNotification.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['eventType'] && !(typeof data['eventType'] === 'string' || data['eventType'] instanceof String)) {
            throw new Error("Expected the field `eventType` to be a primitive type in the JSON string but got " + data['eventType']);
        }
        // ensure the json data is a string
        if (data['executingUserKey'] && !(typeof data['executingUserKey'] === 'string' || data['executingUserKey'] instanceof String)) {
            throw new Error("Expected the field `executingUserKey` to be a primitive type in the JSON string but got " + data['executingUserKey']);
        }
        // ensure the json data is a string
        if (data['pspReference'] && !(typeof data['pspReference'] === 'string' || data['pspReference'] instanceof String)) {
            throw new Error("Expected the field `pspReference` to be a primitive type in the JSON string but got " + data['pspReference']);
        }

        return true;
    }


}

AccountHolderStoreStatusChangeNotification.RequiredProperties = ["eventDate", "eventType", "executingUserKey", "live", "pspReference"];

/**
 * @member {Object} content
 */
AccountHolderStoreStatusChangeNotification.prototype['content'] = undefined;

/**
 * The date and time when an event has been completed.
 * @member {Date} eventDate
 */
AccountHolderStoreStatusChangeNotification.prototype['eventDate'] = undefined;

/**
 * The event type of the notification.
 * @member {String} eventType
 */
AccountHolderStoreStatusChangeNotification.prototype['eventType'] = undefined;

/**
 * The user or process that has triggered the notification.
 * @member {String} executingUserKey
 */
AccountHolderStoreStatusChangeNotification.prototype['executingUserKey'] = undefined;

/**
 * Indicates whether the notification originated from the live environment or the test environment. If true, the notification originated from the live environment. If false, the notification originated from the test environment.
 * @member {Boolean} live
 */
AccountHolderStoreStatusChangeNotification.prototype['live'] = undefined;

/**
 * The PSP reference of the request from which the notification originates.
 * @member {String} pspReference
 */
AccountHolderStoreStatusChangeNotification.prototype['pspReference'] = undefined;






export default AccountHolderStoreStatusChangeNotification;

