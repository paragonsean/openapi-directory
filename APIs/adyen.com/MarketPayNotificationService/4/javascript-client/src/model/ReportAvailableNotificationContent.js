/**
 * Classic Platforms - Notifications
 * This API is used for the classic integration. If you are just starting your implementation, refer to our [new integration guide](https://docs.adyen.com/marketplaces-and-platforms) instead.  The Notification API sends notifications to the endpoints specified in a given subscription.  Subscriptions are managed through the Notification Configuration API. The API specifications listed here detail the format of each notification.  For more information, refer to our [documentation](https://docs.adyen.com/marketplaces-and-platforms/classic/notifications).
 *
 * The version of the OpenAPI document: 4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ReportAvailableNotificationContent model module.
 * @module model/ReportAvailableNotificationContent
 * @version 4
 */
class ReportAvailableNotificationContent {
    /**
     * Constructs a new <code>ReportAvailableNotificationContent</code>.
     * @alias module:model/ReportAvailableNotificationContent
     */
    constructor() { 
        
        ReportAvailableNotificationContent.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ReportAvailableNotificationContent</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ReportAvailableNotificationContent} obj Optional instance to populate.
     * @return {module:model/ReportAvailableNotificationContent} The populated <code>ReportAvailableNotificationContent</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ReportAvailableNotificationContent();

            if (data.hasOwnProperty('accountCode')) {
                obj['accountCode'] = ApiClient.convertToType(data['accountCode'], 'String');
            }
            if (data.hasOwnProperty('accountType')) {
                obj['accountType'] = ApiClient.convertToType(data['accountType'], 'String');
            }
            if (data.hasOwnProperty('eventDate')) {
                obj['eventDate'] = ApiClient.convertToType(data['eventDate'], 'Date');
            }
            if (data.hasOwnProperty('remoteAccessUrl')) {
                obj['remoteAccessUrl'] = ApiClient.convertToType(data['remoteAccessUrl'], 'String');
            }
            if (data.hasOwnProperty('success')) {
                obj['success'] = ApiClient.convertToType(data['success'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ReportAvailableNotificationContent</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ReportAvailableNotificationContent</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['accountCode'] && !(typeof data['accountCode'] === 'string' || data['accountCode'] instanceof String)) {
            throw new Error("Expected the field `accountCode` to be a primitive type in the JSON string but got " + data['accountCode']);
        }
        // ensure the json data is a string
        if (data['accountType'] && !(typeof data['accountType'] === 'string' || data['accountType'] instanceof String)) {
            throw new Error("Expected the field `accountType` to be a primitive type in the JSON string but got " + data['accountType']);
        }
        // ensure the json data is a string
        if (data['remoteAccessUrl'] && !(typeof data['remoteAccessUrl'] === 'string' || data['remoteAccessUrl'] instanceof String)) {
            throw new Error("Expected the field `remoteAccessUrl` to be a primitive type in the JSON string but got " + data['remoteAccessUrl']);
        }

        return true;
    }


}



/**
 * The code of the Account to which the report applies.
 * @member {String} accountCode
 */
ReportAvailableNotificationContent.prototype['accountCode'] = undefined;

/**
 * The type of Account to which the report applies.
 * @member {String} accountType
 */
ReportAvailableNotificationContent.prototype['accountType'] = undefined;

/**
 * The date of the event to which the report applies.
 * @member {Date} eventDate
 */
ReportAvailableNotificationContent.prototype['eventDate'] = undefined;

/**
 * The URL at which the report can be accessed.
 * @member {String} remoteAccessUrl
 */
ReportAvailableNotificationContent.prototype['remoteAccessUrl'] = undefined;

/**
 * Indicates whether the event resulted in a success.
 * @member {Boolean} success
 */
ReportAvailableNotificationContent.prototype['success'] = undefined;






export default ReportAvailableNotificationContent;

