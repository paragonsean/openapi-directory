/**
 * Classic Platforms - Notifications
 * This API is used for the classic integration. If you are just starting your implementation, refer to our [new integration guide](https://docs.adyen.com/marketplaces-and-platforms) instead.  The Notification API sends notifications to the endpoints specified in a given subscription.  Subscriptions are managed through the Notification Configuration API. The API specifications listed here detail the format of each notification.  For more information, refer to our [documentation](https://docs.adyen.com/marketplaces-and-platforms/classic/notifications).
 *
 * The version of the OpenAPI document: 4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import KYCCheckSummary from './KYCCheckSummary';

/**
 * The AccountHolderVerificationNotificationContent model module.
 * @module model/AccountHolderVerificationNotificationContent
 * @version 4
 */
class AccountHolderVerificationNotificationContent {
    /**
     * Constructs a new <code>AccountHolderVerificationNotificationContent</code>.
     * @alias module:model/AccountHolderVerificationNotificationContent
     */
    constructor() { 
        
        AccountHolderVerificationNotificationContent.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AccountHolderVerificationNotificationContent</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AccountHolderVerificationNotificationContent} obj Optional instance to populate.
     * @return {module:model/AccountHolderVerificationNotificationContent} The populated <code>AccountHolderVerificationNotificationContent</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AccountHolderVerificationNotificationContent();

            if (data.hasOwnProperty('accountHolderCode')) {
                obj['accountHolderCode'] = ApiClient.convertToType(data['accountHolderCode'], 'String');
            }
            if (data.hasOwnProperty('bankAccountUUID')) {
                obj['bankAccountUUID'] = ApiClient.convertToType(data['bankAccountUUID'], 'String');
            }
            if (data.hasOwnProperty('shareholderCode')) {
                obj['shareholderCode'] = ApiClient.convertToType(data['shareholderCode'], 'String');
            }
            if (data.hasOwnProperty('signatoryCode')) {
                obj['signatoryCode'] = ApiClient.convertToType(data['signatoryCode'], 'String');
            }
            if (data.hasOwnProperty('statusSummary')) {
                obj['statusSummary'] = KYCCheckSummary.constructFromObject(data['statusSummary']);
            }
            if (data.hasOwnProperty('verificationStatus')) {
                obj['verificationStatus'] = ApiClient.convertToType(data['verificationStatus'], 'String');
            }
            if (data.hasOwnProperty('verificationType')) {
                obj['verificationType'] = ApiClient.convertToType(data['verificationType'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AccountHolderVerificationNotificationContent</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AccountHolderVerificationNotificationContent</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['accountHolderCode'] && !(typeof data['accountHolderCode'] === 'string' || data['accountHolderCode'] instanceof String)) {
            throw new Error("Expected the field `accountHolderCode` to be a primitive type in the JSON string but got " + data['accountHolderCode']);
        }
        // ensure the json data is a string
        if (data['bankAccountUUID'] && !(typeof data['bankAccountUUID'] === 'string' || data['bankAccountUUID'] instanceof String)) {
            throw new Error("Expected the field `bankAccountUUID` to be a primitive type in the JSON string but got " + data['bankAccountUUID']);
        }
        // ensure the json data is a string
        if (data['shareholderCode'] && !(typeof data['shareholderCode'] === 'string' || data['shareholderCode'] instanceof String)) {
            throw new Error("Expected the field `shareholderCode` to be a primitive type in the JSON string but got " + data['shareholderCode']);
        }
        // ensure the json data is a string
        if (data['signatoryCode'] && !(typeof data['signatoryCode'] === 'string' || data['signatoryCode'] instanceof String)) {
            throw new Error("Expected the field `signatoryCode` to be a primitive type in the JSON string but got " + data['signatoryCode']);
        }
        // validate the optional field `statusSummary`
        if (data['statusSummary']) { // data not null
          KYCCheckSummary.validateJSON(data['statusSummary']);
        }
        // ensure the json data is a string
        if (data['verificationStatus'] && !(typeof data['verificationStatus'] === 'string' || data['verificationStatus'] instanceof String)) {
            throw new Error("Expected the field `verificationStatus` to be a primitive type in the JSON string but got " + data['verificationStatus']);
        }
        // ensure the json data is a string
        if (data['verificationType'] && !(typeof data['verificationType'] === 'string' || data['verificationType'] instanceof String)) {
            throw new Error("Expected the field `verificationType` to be a primitive type in the JSON string but got " + data['verificationType']);
        }

        return true;
    }


}



/**
 * The code of the account holder.
 * @member {String} accountHolderCode
 */
AccountHolderVerificationNotificationContent.prototype['accountHolderCode'] = undefined;

/**
 * The unique ID of the bank account that has been verified.
 * @member {String} bankAccountUUID
 */
AccountHolderVerificationNotificationContent.prototype['bankAccountUUID'] = undefined;

/**
 * The code of the shareholder that has been verified.
 * @member {String} shareholderCode
 */
AccountHolderVerificationNotificationContent.prototype['shareholderCode'] = undefined;

/**
 * The code of the signatory that has been verified.
 * @member {String} signatoryCode
 */
AccountHolderVerificationNotificationContent.prototype['signatoryCode'] = undefined;

/**
 * A summary of the verification status.
 * @member {module:model/KYCCheckSummary} statusSummary
 */
AccountHolderVerificationNotificationContent.prototype['statusSummary'] = undefined;

/**
 * The status of verification.
 * @member {module:model/AccountHolderVerificationNotificationContent.VerificationStatusEnum} verificationStatus
 */
AccountHolderVerificationNotificationContent.prototype['verificationStatus'] = undefined;

/**
 * The type of validation performed.
 * @member {module:model/AccountHolderVerificationNotificationContent.VerificationTypeEnum} verificationType
 */
AccountHolderVerificationNotificationContent.prototype['verificationType'] = undefined;





/**
 * Allowed values for the <code>verificationStatus</code> property.
 * @enum {String}
 * @readonly
 */
AccountHolderVerificationNotificationContent['VerificationStatusEnum'] = {

    /**
     * value: "AWAITING_DATA"
     * @const
     */
    "AWAITING_DATA": "AWAITING_DATA",

    /**
     * value: "DATA_PROVIDED"
     * @const
     */
    "DATA_PROVIDED": "DATA_PROVIDED",

    /**
     * value: "FAILED"
     * @const
     */
    "FAILED": "FAILED",

    /**
     * value: "INVALID_DATA"
     * @const
     */
    "INVALID_DATA": "INVALID_DATA",

    /**
     * value: "PASSED"
     * @const
     */
    "PASSED": "PASSED",

    /**
     * value: "PENDING"
     * @const
     */
    "PENDING": "PENDING",

    /**
     * value: "PENDING_REVIEW"
     * @const
     */
    "PENDING_REVIEW": "PENDING_REVIEW",

    /**
     * value: "RETRY_LIMIT_REACHED"
     * @const
     */
    "RETRY_LIMIT_REACHED": "RETRY_LIMIT_REACHED",

    /**
     * value: "UNCHECKED"
     * @const
     */
    "UNCHECKED": "UNCHECKED"
};


/**
 * Allowed values for the <code>verificationType</code> property.
 * @enum {String}
 * @readonly
 */
AccountHolderVerificationNotificationContent['VerificationTypeEnum'] = {

    /**
     * value: "BANK_ACCOUNT_VERIFICATION"
     * @const
     */
    "BANK_ACCOUNT_VERIFICATION": "BANK_ACCOUNT_VERIFICATION",

    /**
     * value: "CARD_VERIFICATION"
     * @const
     */
    "CARD_VERIFICATION": "CARD_VERIFICATION",

    /**
     * value: "COMPANY_VERIFICATION"
     * @const
     */
    "COMPANY_VERIFICATION": "COMPANY_VERIFICATION",

    /**
     * value: "IDENTITY_VERIFICATION"
     * @const
     */
    "IDENTITY_VERIFICATION": "IDENTITY_VERIFICATION",

    /**
     * value: "LEGAL_ARRANGEMENT_VERIFICATION"
     * @const
     */
    "LEGAL_ARRANGEMENT_VERIFICATION": "LEGAL_ARRANGEMENT_VERIFICATION",

    /**
     * value: "NONPROFIT_VERIFICATION"
     * @const
     */
    "NONPROFIT_VERIFICATION": "NONPROFIT_VERIFICATION",

    /**
     * value: "PASSPORT_VERIFICATION"
     * @const
     */
    "PASSPORT_VERIFICATION": "PASSPORT_VERIFICATION",

    /**
     * value: "PAYOUT_METHOD_VERIFICATION"
     * @const
     */
    "PAYOUT_METHOD_VERIFICATION": "PAYOUT_METHOD_VERIFICATION",

    /**
     * value: "PCI_VERIFICATION"
     * @const
     */
    "PCI_VERIFICATION": "PCI_VERIFICATION"
};



export default AccountHolderVerificationNotificationContent;

