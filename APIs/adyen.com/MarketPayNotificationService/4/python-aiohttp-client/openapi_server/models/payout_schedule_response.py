# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PayoutScheduleResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, next_scheduled_payout: datetime=None, schedule: str=None):
        """PayoutScheduleResponse - a model defined in OpenAPI

        :param next_scheduled_payout: The next_scheduled_payout of this PayoutScheduleResponse.
        :param schedule: The schedule of this PayoutScheduleResponse.
        """
        self.openapi_types = {
            'next_scheduled_payout': datetime,
            'schedule': str
        }

        self.attribute_map = {
            'next_scheduled_payout': 'nextScheduledPayout',
            'schedule': 'schedule'
        }

        self._next_scheduled_payout = next_scheduled_payout
        self._schedule = schedule

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PayoutScheduleResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PayoutScheduleResponse of this PayoutScheduleResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def next_scheduled_payout(self):
        """Gets the next_scheduled_payout of this PayoutScheduleResponse.

        The date of the next scheduled payout.

        :return: The next_scheduled_payout of this PayoutScheduleResponse.
        :rtype: datetime
        """
        return self._next_scheduled_payout

    @next_scheduled_payout.setter
    def next_scheduled_payout(self, next_scheduled_payout):
        """Sets the next_scheduled_payout of this PayoutScheduleResponse.

        The date of the next scheduled payout.

        :param next_scheduled_payout: The next_scheduled_payout of this PayoutScheduleResponse.
        :type next_scheduled_payout: datetime
        """

        self._next_scheduled_payout = next_scheduled_payout

    @property
    def schedule(self):
        """Gets the schedule of this PayoutScheduleResponse.

        The payout schedule of the account. Permitted values: `DEFAULT`, `DAILY`, `DAILY_US`, `DAILY_EU`, `DAILY_AU`, `DAILY_SG`, `WEEKLY`, `WEEKLY_ON_TUE_FRI_MIDNIGHT`, `BIWEEKLY_ON_1ST_AND_15TH_AT_MIDNIGHT`, `MONTHLY`, `HOLD`.

        :return: The schedule of this PayoutScheduleResponse.
        :rtype: str
        """
        return self._schedule

    @schedule.setter
    def schedule(self, schedule):
        """Sets the schedule of this PayoutScheduleResponse.

        The payout schedule of the account. Permitted values: `DEFAULT`, `DAILY`, `DAILY_US`, `DAILY_EU`, `DAILY_AU`, `DAILY_SG`, `WEEKLY`, `WEEKLY_ON_TUE_FRI_MIDNIGHT`, `BIWEEKLY_ON_1ST_AND_15TH_AT_MIDNIGHT`, `MONTHLY`, `HOLD`.

        :param schedule: The schedule of this PayoutScheduleResponse.
        :type schedule: str
        """
        allowed_values = ["BIWEEKLY_ON_1ST_AND_15TH_AT_MIDNIGHT", "DAILY", "DAILY_AU", "DAILY_EU", "DAILY_SG", "DAILY_US", "HOLD", "MONTHLY", "WEEKLY", "WEEKLY_MON_TO_FRI_AU", "WEEKLY_MON_TO_FRI_EU", "WEEKLY_MON_TO_FRI_US", "WEEKLY_ON_TUE_FRI_MIDNIGHT", "WEEKLY_SUN_TO_THU_AU", "WEEKLY_SUN_TO_THU_US"]  # noqa: E501
        if schedule not in allowed_values:
            raise ValueError(
                "Invalid value for `schedule` ({0}), must be one of {1}"
                .format(schedule, allowed_values)
            )

        self._schedule = schedule
