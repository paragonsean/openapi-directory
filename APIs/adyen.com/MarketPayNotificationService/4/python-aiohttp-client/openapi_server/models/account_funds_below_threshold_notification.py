# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.account_funds_below_threshold_notification_content import AccountFundsBelowThresholdNotificationContent
from openapi_server import util


class AccountFundsBelowThresholdNotification(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, content: AccountFundsBelowThresholdNotificationContent=None, event_date: datetime=None, event_type: str=None, executing_user_key: str=None, live: bool=None, psp_reference: str=None):
        """AccountFundsBelowThresholdNotification - a model defined in OpenAPI

        :param content: The content of this AccountFundsBelowThresholdNotification.
        :param event_date: The event_date of this AccountFundsBelowThresholdNotification.
        :param event_type: The event_type of this AccountFundsBelowThresholdNotification.
        :param executing_user_key: The executing_user_key of this AccountFundsBelowThresholdNotification.
        :param live: The live of this AccountFundsBelowThresholdNotification.
        :param psp_reference: The psp_reference of this AccountFundsBelowThresholdNotification.
        """
        self.openapi_types = {
            'content': AccountFundsBelowThresholdNotificationContent,
            'event_date': datetime,
            'event_type': str,
            'executing_user_key': str,
            'live': bool,
            'psp_reference': str
        }

        self.attribute_map = {
            'content': 'content',
            'event_date': 'eventDate',
            'event_type': 'eventType',
            'executing_user_key': 'executingUserKey',
            'live': 'live',
            'psp_reference': 'pspReference'
        }

        self._content = content
        self._event_date = event_date
        self._event_type = event_type
        self._executing_user_key = executing_user_key
        self._live = live
        self._psp_reference = psp_reference

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AccountFundsBelowThresholdNotification':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AccountFundsBelowThresholdNotification of this AccountFundsBelowThresholdNotification.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def content(self):
        """Gets the content of this AccountFundsBelowThresholdNotification.

        Details of the liable account with funds under threshold.

        :return: The content of this AccountFundsBelowThresholdNotification.
        :rtype: AccountFundsBelowThresholdNotificationContent
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this AccountFundsBelowThresholdNotification.

        Details of the liable account with funds under threshold.

        :param content: The content of this AccountFundsBelowThresholdNotification.
        :type content: AccountFundsBelowThresholdNotificationContent
        """

        self._content = content

    @property
    def event_date(self):
        """Gets the event_date of this AccountFundsBelowThresholdNotification.

        The date and time when an event has been completed.

        :return: The event_date of this AccountFundsBelowThresholdNotification.
        :rtype: datetime
        """
        return self._event_date

    @event_date.setter
    def event_date(self, event_date):
        """Sets the event_date of this AccountFundsBelowThresholdNotification.

        The date and time when an event has been completed.

        :param event_date: The event_date of this AccountFundsBelowThresholdNotification.
        :type event_date: datetime
        """
        if event_date is None:
            raise ValueError("Invalid value for `event_date`, must not be `None`")

        self._event_date = event_date

    @property
    def event_type(self):
        """Gets the event_type of this AccountFundsBelowThresholdNotification.

        The event type of the notification.

        :return: The event_type of this AccountFundsBelowThresholdNotification.
        :rtype: str
        """
        return self._event_type

    @event_type.setter
    def event_type(self, event_type):
        """Sets the event_type of this AccountFundsBelowThresholdNotification.

        The event type of the notification.

        :param event_type: The event_type of this AccountFundsBelowThresholdNotification.
        :type event_type: str
        """
        if event_type is None:
            raise ValueError("Invalid value for `event_type`, must not be `None`")

        self._event_type = event_type

    @property
    def executing_user_key(self):
        """Gets the executing_user_key of this AccountFundsBelowThresholdNotification.

        The user or process that has triggered the notification.

        :return: The executing_user_key of this AccountFundsBelowThresholdNotification.
        :rtype: str
        """
        return self._executing_user_key

    @executing_user_key.setter
    def executing_user_key(self, executing_user_key):
        """Sets the executing_user_key of this AccountFundsBelowThresholdNotification.

        The user or process that has triggered the notification.

        :param executing_user_key: The executing_user_key of this AccountFundsBelowThresholdNotification.
        :type executing_user_key: str
        """
        if executing_user_key is None:
            raise ValueError("Invalid value for `executing_user_key`, must not be `None`")

        self._executing_user_key = executing_user_key

    @property
    def live(self):
        """Gets the live of this AccountFundsBelowThresholdNotification.

        Indicates whether the notification originated from the live environment or the test environment. If true, the notification originated from the live environment. If false, the notification originated from the test environment.

        :return: The live of this AccountFundsBelowThresholdNotification.
        :rtype: bool
        """
        return self._live

    @live.setter
    def live(self, live):
        """Sets the live of this AccountFundsBelowThresholdNotification.

        Indicates whether the notification originated from the live environment or the test environment. If true, the notification originated from the live environment. If false, the notification originated from the test environment.

        :param live: The live of this AccountFundsBelowThresholdNotification.
        :type live: bool
        """
        if live is None:
            raise ValueError("Invalid value for `live`, must not be `None`")

        self._live = live

    @property
    def psp_reference(self):
        """Gets the psp_reference of this AccountFundsBelowThresholdNotification.

        The PSP reference of the request from which the notification originates.

        :return: The psp_reference of this AccountFundsBelowThresholdNotification.
        :rtype: str
        """
        return self._psp_reference

    @psp_reference.setter
    def psp_reference(self, psp_reference):
        """Sets the psp_reference of this AccountFundsBelowThresholdNotification.

        The PSP reference of the request from which the notification originates.

        :param psp_reference: The psp_reference of this AccountFundsBelowThresholdNotification.
        :type psp_reference: str
        """
        if psp_reference is None:
            raise ValueError("Invalid value for `psp_reference`, must not be `None`")

        self._psp_reference = psp_reference
