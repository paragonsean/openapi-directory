# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.account_event import AccountEvent
from openapi_server import util


class AccountEventWrapper(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_event: AccountEvent=None):
        """AccountEventWrapper - a model defined in OpenAPI

        :param account_event: The account_event of this AccountEventWrapper.
        """
        self.openapi_types = {
            'account_event': AccountEvent
        }

        self.attribute_map = {
            'account_event': 'AccountEvent'
        }

        self._account_event = account_event

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AccountEventWrapper':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AccountEventWrapper of this AccountEventWrapper.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_event(self):
        """Gets the account_event of this AccountEventWrapper.


        :return: The account_event of this AccountEventWrapper.
        :rtype: AccountEvent
        """
        return self._account_event

    @account_event.setter
    def account_event(self, account_event):
        """Sets the account_event of this AccountEventWrapper.


        :param account_event: The account_event of this AccountEventWrapper.
        :type account_event: AccountEvent
        """

        self._account_event = account_event
