# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.amount import Amount
from openapi_server.models.error_field_type_wrapper import ErrorFieldTypeWrapper
from openapi_server.models.local_date import LocalDate
from openapi_server.models.operation_status import OperationStatus
from openapi_server.models.split import Split
from openapi_server import util


class DirectDebitInitiatedNotificationContent(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_code: str=None, amount: Amount=None, debit_initiation_date: LocalDate=None, invalid_fields: List[ErrorFieldTypeWrapper]=None, merchant_account_code: str=None, splits: List[Split]=None, status: OperationStatus=None):
        """DirectDebitInitiatedNotificationContent - a model defined in OpenAPI

        :param account_code: The account_code of this DirectDebitInitiatedNotificationContent.
        :param amount: The amount of this DirectDebitInitiatedNotificationContent.
        :param debit_initiation_date: The debit_initiation_date of this DirectDebitInitiatedNotificationContent.
        :param invalid_fields: The invalid_fields of this DirectDebitInitiatedNotificationContent.
        :param merchant_account_code: The merchant_account_code of this DirectDebitInitiatedNotificationContent.
        :param splits: The splits of this DirectDebitInitiatedNotificationContent.
        :param status: The status of this DirectDebitInitiatedNotificationContent.
        """
        self.openapi_types = {
            'account_code': str,
            'amount': Amount,
            'debit_initiation_date': LocalDate,
            'invalid_fields': List[ErrorFieldTypeWrapper],
            'merchant_account_code': str,
            'splits': List[Split],
            'status': OperationStatus
        }

        self.attribute_map = {
            'account_code': 'accountCode',
            'amount': 'amount',
            'debit_initiation_date': 'debitInitiationDate',
            'invalid_fields': 'invalidFields',
            'merchant_account_code': 'merchantAccountCode',
            'splits': 'splits',
            'status': 'status'
        }

        self._account_code = account_code
        self._amount = amount
        self._debit_initiation_date = debit_initiation_date
        self._invalid_fields = invalid_fields
        self._merchant_account_code = merchant_account_code
        self._splits = splits
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DirectDebitInitiatedNotificationContent':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DirectDebitInitiatedNotificationContent of this DirectDebitInitiatedNotificationContent.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_code(self):
        """Gets the account_code of this DirectDebitInitiatedNotificationContent.

        The code of the account.

        :return: The account_code of this DirectDebitInitiatedNotificationContent.
        :rtype: str
        """
        return self._account_code

    @account_code.setter
    def account_code(self, account_code):
        """Sets the account_code of this DirectDebitInitiatedNotificationContent.

        The code of the account.

        :param account_code: The account_code of this DirectDebitInitiatedNotificationContent.
        :type account_code: str
        """
        if account_code is None:
            raise ValueError("Invalid value for `account_code`, must not be `None`")

        self._account_code = account_code

    @property
    def amount(self):
        """Gets the amount of this DirectDebitInitiatedNotificationContent.

        The amount to be debited from the funding account.

        :return: The amount of this DirectDebitInitiatedNotificationContent.
        :rtype: Amount
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this DirectDebitInitiatedNotificationContent.

        The amount to be debited from the funding account.

        :param amount: The amount of this DirectDebitInitiatedNotificationContent.
        :type amount: Amount
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")

        self._amount = amount

    @property
    def debit_initiation_date(self):
        """Gets the debit_initiation_date of this DirectDebitInitiatedNotificationContent.

        The date of the debit initiation.

        :return: The debit_initiation_date of this DirectDebitInitiatedNotificationContent.
        :rtype: LocalDate
        """
        return self._debit_initiation_date

    @debit_initiation_date.setter
    def debit_initiation_date(self, debit_initiation_date):
        """Sets the debit_initiation_date of this DirectDebitInitiatedNotificationContent.

        The date of the debit initiation.

        :param debit_initiation_date: The debit_initiation_date of this DirectDebitInitiatedNotificationContent.
        :type debit_initiation_date: LocalDate
        """

        self._debit_initiation_date = debit_initiation_date

    @property
    def invalid_fields(self):
        """Gets the invalid_fields of this DirectDebitInitiatedNotificationContent.

        Invalid fields list.

        :return: The invalid_fields of this DirectDebitInitiatedNotificationContent.
        :rtype: List[ErrorFieldTypeWrapper]
        """
        return self._invalid_fields

    @invalid_fields.setter
    def invalid_fields(self, invalid_fields):
        """Sets the invalid_fields of this DirectDebitInitiatedNotificationContent.

        Invalid fields list.

        :param invalid_fields: The invalid_fields of this DirectDebitInitiatedNotificationContent.
        :type invalid_fields: List[ErrorFieldTypeWrapper]
        """

        self._invalid_fields = invalid_fields

    @property
    def merchant_account_code(self):
        """Gets the merchant_account_code of this DirectDebitInitiatedNotificationContent.

        The code of the merchant account.

        :return: The merchant_account_code of this DirectDebitInitiatedNotificationContent.
        :rtype: str
        """
        return self._merchant_account_code

    @merchant_account_code.setter
    def merchant_account_code(self, merchant_account_code):
        """Sets the merchant_account_code of this DirectDebitInitiatedNotificationContent.

        The code of the merchant account.

        :param merchant_account_code: The merchant_account_code of this DirectDebitInitiatedNotificationContent.
        :type merchant_account_code: str
        """
        if merchant_account_code is None:
            raise ValueError("Invalid value for `merchant_account_code`, must not be `None`")

        self._merchant_account_code = merchant_account_code

    @property
    def splits(self):
        """Gets the splits of this DirectDebitInitiatedNotificationContent.

        The split data for the debit request.

        :return: The splits of this DirectDebitInitiatedNotificationContent.
        :rtype: List[Split]
        """
        return self._splits

    @splits.setter
    def splits(self, splits):
        """Sets the splits of this DirectDebitInitiatedNotificationContent.

        The split data for the debit request.

        :param splits: The splits of this DirectDebitInitiatedNotificationContent.
        :type splits: List[Split]
        """

        self._splits = splits

    @property
    def status(self):
        """Gets the status of this DirectDebitInitiatedNotificationContent.

        Direct debit status.

        :return: The status of this DirectDebitInitiatedNotificationContent.
        :rtype: OperationStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this DirectDebitInitiatedNotificationContent.

        Direct debit status.

        :param status: The status of this DirectDebitInitiatedNotificationContent.
        :type status: OperationStatus
        """

        self._status = status
