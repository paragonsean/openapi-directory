# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.compensate_negative_balance_notification_record import CompensateNegativeBalanceNotificationRecord
from openapi_server import util


class CompensateNegativeBalanceNotificationRecordWrapper(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, compensate_negative_balance_notification_record: CompensateNegativeBalanceNotificationRecord=None):
        """CompensateNegativeBalanceNotificationRecordWrapper - a model defined in OpenAPI

        :param compensate_negative_balance_notification_record: The compensate_negative_balance_notification_record of this CompensateNegativeBalanceNotificationRecordWrapper.
        """
        self.openapi_types = {
            'compensate_negative_balance_notification_record': CompensateNegativeBalanceNotificationRecord
        }

        self.attribute_map = {
            'compensate_negative_balance_notification_record': 'CompensateNegativeBalanceNotificationRecord'
        }

        self._compensate_negative_balance_notification_record = compensate_negative_balance_notification_record

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CompensateNegativeBalanceNotificationRecordWrapper':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CompensateNegativeBalanceNotificationRecordWrapper of this CompensateNegativeBalanceNotificationRecordWrapper.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def compensate_negative_balance_notification_record(self):
        """Gets the compensate_negative_balance_notification_record of this CompensateNegativeBalanceNotificationRecordWrapper.


        :return: The compensate_negative_balance_notification_record of this CompensateNegativeBalanceNotificationRecordWrapper.
        :rtype: CompensateNegativeBalanceNotificationRecord
        """
        return self._compensate_negative_balance_notification_record

    @compensate_negative_balance_notification_record.setter
    def compensate_negative_balance_notification_record(self, compensate_negative_balance_notification_record):
        """Sets the compensate_negative_balance_notification_record of this CompensateNegativeBalanceNotificationRecordWrapper.


        :param compensate_negative_balance_notification_record: The compensate_negative_balance_notification_record of this CompensateNegativeBalanceNotificationRecordWrapper.
        :type compensate_negative_balance_notification_record: CompensateNegativeBalanceNotificationRecord
        """

        self._compensate_negative_balance_notification_record = compensate_negative_balance_notification_record
