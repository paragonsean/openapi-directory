# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AccountEvent(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, event: str=None, execution_date: datetime=None, reason: str=None):
        """AccountEvent - a model defined in OpenAPI

        :param event: The event of this AccountEvent.
        :param execution_date: The execution_date of this AccountEvent.
        :param reason: The reason of this AccountEvent.
        """
        self.openapi_types = {
            'event': str,
            'execution_date': datetime,
            'reason': str
        }

        self.attribute_map = {
            'event': 'event',
            'execution_date': 'executionDate',
            'reason': 'reason'
        }

        self._event = event
        self._execution_date = execution_date
        self._reason = reason

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AccountEvent':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AccountEvent of this AccountEvent.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def event(self):
        """Gets the event of this AccountEvent.

        The event. >Permitted values: `InactivateAccount`, `RefundNotPaidOutTransfers`. For more information, refer to [Verification checks](https://docs.adyen.com/marketplaces-and-platforms/classic/verification-process).

        :return: The event of this AccountEvent.
        :rtype: str
        """
        return self._event

    @event.setter
    def event(self, event):
        """Sets the event of this AccountEvent.

        The event. >Permitted values: `InactivateAccount`, `RefundNotPaidOutTransfers`. For more information, refer to [Verification checks](https://docs.adyen.com/marketplaces-and-platforms/classic/verification-process).

        :param event: The event of this AccountEvent.
        :type event: str
        """
        allowed_values = ["InactivateAccount", "RefundNotPaidOutTransfers"]  # noqa: E501
        if event not in allowed_values:
            raise ValueError(
                "Invalid value for `event` ({0}), must be one of {1}"
                .format(event, allowed_values)
            )

        self._event = event

    @property
    def execution_date(self):
        """Gets the execution_date of this AccountEvent.

        The date on which the event will take place.

        :return: The execution_date of this AccountEvent.
        :rtype: datetime
        """
        return self._execution_date

    @execution_date.setter
    def execution_date(self, execution_date):
        """Sets the execution_date of this AccountEvent.

        The date on which the event will take place.

        :param execution_date: The execution_date of this AccountEvent.
        :type execution_date: datetime
        """

        self._execution_date = execution_date

    @property
    def reason(self):
        """Gets the reason of this AccountEvent.

        The reason why this event has been created.

        :return: The reason of this AccountEvent.
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this AccountEvent.

        The reason why this event has been created.

        :param reason: The reason of this AccountEvent.
        :type reason: str
        """

        self._reason = reason
