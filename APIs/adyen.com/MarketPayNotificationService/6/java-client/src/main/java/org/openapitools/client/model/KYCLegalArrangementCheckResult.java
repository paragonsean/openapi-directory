/*
 * Classic Platforms - Notifications
 * This API is used for the classic integration. If you are just starting your implementation, refer to our [new integration guide](https://docs.adyen.com/marketplaces-and-platforms) instead.  The Notification API sends notifications to the endpoints specified in a given subscription.  Subscriptions are managed through the Notification Configuration API. The API specifications listed here detail the format of each notification.  For more information, refer to our [documentation](https://docs.adyen.com/marketplaces-and-platforms/classic/notifications).
 *
 * The version of the OpenAPI document: 6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.KYCCheckStatusData;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * KYCLegalArrangementCheckResult
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:13:23.861288-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class KYCLegalArrangementCheckResult {
  public static final String SERIALIZED_NAME_CHECKS = "checks";
  @SerializedName(SERIALIZED_NAME_CHECKS)
  private List<KYCCheckStatusData> checks = new ArrayList<>();

  public static final String SERIALIZED_NAME_LEGAL_ARRANGEMENT_CODE = "legalArrangementCode";
  @SerializedName(SERIALIZED_NAME_LEGAL_ARRANGEMENT_CODE)
  private String legalArrangementCode;

  public KYCLegalArrangementCheckResult() {
  }

  public KYCLegalArrangementCheckResult checks(List<KYCCheckStatusData> checks) {
    this.checks = checks;
    return this;
  }

  public KYCLegalArrangementCheckResult addChecksItem(KYCCheckStatusData checksItem) {
    if (this.checks == null) {
      this.checks = new ArrayList<>();
    }
    this.checks.add(checksItem);
    return this;
  }

  /**
   * A list of the checks and their statuses.
   * @return checks
   */
  @javax.annotation.Nullable
  public List<KYCCheckStatusData> getChecks() {
    return checks;
  }

  public void setChecks(List<KYCCheckStatusData> checks) {
    this.checks = checks;
  }


  public KYCLegalArrangementCheckResult legalArrangementCode(String legalArrangementCode) {
    this.legalArrangementCode = legalArrangementCode;
    return this;
  }

  /**
   * The unique ID of the legal arrangement to which the check applies.
   * @return legalArrangementCode
   */
  @javax.annotation.Nullable
  public String getLegalArrangementCode() {
    return legalArrangementCode;
  }

  public void setLegalArrangementCode(String legalArrangementCode) {
    this.legalArrangementCode = legalArrangementCode;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    KYCLegalArrangementCheckResult kyCLegalArrangementCheckResult = (KYCLegalArrangementCheckResult) o;
    return Objects.equals(this.checks, kyCLegalArrangementCheckResult.checks) &&
        Objects.equals(this.legalArrangementCode, kyCLegalArrangementCheckResult.legalArrangementCode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(checks, legalArrangementCode);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class KYCLegalArrangementCheckResult {\n");
    sb.append("    checks: ").append(toIndentedString(checks)).append("\n");
    sb.append("    legalArrangementCode: ").append(toIndentedString(legalArrangementCode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("checks");
    openapiFields.add("legalArrangementCode");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to KYCLegalArrangementCheckResult
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!KYCLegalArrangementCheckResult.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in KYCLegalArrangementCheckResult is not found in the empty JSON string", KYCLegalArrangementCheckResult.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!KYCLegalArrangementCheckResult.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `KYCLegalArrangementCheckResult` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("checks") != null && !jsonObj.get("checks").isJsonNull()) {
        JsonArray jsonArraychecks = jsonObj.getAsJsonArray("checks");
        if (jsonArraychecks != null) {
          // ensure the json data is an array
          if (!jsonObj.get("checks").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `checks` to be an array in the JSON string but got `%s`", jsonObj.get("checks").toString()));
          }

          // validate the optional field `checks` (array)
          for (int i = 0; i < jsonArraychecks.size(); i++) {
            KYCCheckStatusData.validateJsonElement(jsonArraychecks.get(i));
          };
        }
      }
      if ((jsonObj.get("legalArrangementCode") != null && !jsonObj.get("legalArrangementCode").isJsonNull()) && !jsonObj.get("legalArrangementCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `legalArrangementCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("legalArrangementCode").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!KYCLegalArrangementCheckResult.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'KYCLegalArrangementCheckResult' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<KYCLegalArrangementCheckResult> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(KYCLegalArrangementCheckResult.class));

       return (TypeAdapter<T>) new TypeAdapter<KYCLegalArrangementCheckResult>() {
           @Override
           public void write(JsonWriter out, KYCLegalArrangementCheckResult value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public KYCLegalArrangementCheckResult read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of KYCLegalArrangementCheckResult given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of KYCLegalArrangementCheckResult
   * @throws IOException if the JSON string is invalid with respect to KYCLegalArrangementCheckResult
   */
  public static KYCLegalArrangementCheckResult fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, KYCLegalArrangementCheckResult.class);
  }

  /**
   * Convert an instance of KYCLegalArrangementCheckResult to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

