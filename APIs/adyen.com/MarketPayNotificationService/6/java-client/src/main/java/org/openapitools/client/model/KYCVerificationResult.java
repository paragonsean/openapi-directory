/*
 * Classic Platforms - Notifications
 * This API is used for the classic integration. If you are just starting your implementation, refer to our [new integration guide](https://docs.adyen.com/marketplaces-and-platforms) instead.  The Notification API sends notifications to the endpoints specified in a given subscription.  Subscriptions are managed through the Notification Configuration API. The API specifications listed here detail the format of each notification.  For more information, refer to our [documentation](https://docs.adyen.com/marketplaces-and-platforms/classic/notifications).
 *
 * The version of the OpenAPI document: 6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.KYCCheckResult;
import org.openapitools.client.model.KYCLegalArrangementCheckResult;
import org.openapitools.client.model.KYCLegalArrangementEntityCheckResult;
import org.openapitools.client.model.KYCPayoutMethodCheckResult;
import org.openapitools.client.model.KYCShareholderCheckResult;
import org.openapitools.client.model.KYCSignatoryCheckResult;
import org.openapitools.client.model.KYCUltimateParentCompanyCheckResult;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * KYCVerificationResult
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:13:23.861288-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class KYCVerificationResult {
  public static final String SERIALIZED_NAME_ACCOUNT_HOLDER = "accountHolder";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_HOLDER)
  private KYCCheckResult accountHolder;

  public static final String SERIALIZED_NAME_LEGAL_ARRANGEMENTS = "legalArrangements";
  @SerializedName(SERIALIZED_NAME_LEGAL_ARRANGEMENTS)
  private List<KYCLegalArrangementCheckResult> legalArrangements = new ArrayList<>();

  public static final String SERIALIZED_NAME_LEGAL_ARRANGEMENTS_ENTITIES = "legalArrangementsEntities";
  @SerializedName(SERIALIZED_NAME_LEGAL_ARRANGEMENTS_ENTITIES)
  private List<KYCLegalArrangementEntityCheckResult> legalArrangementsEntities = new ArrayList<>();

  public static final String SERIALIZED_NAME_PAYOUT_METHODS = "payoutMethods";
  @SerializedName(SERIALIZED_NAME_PAYOUT_METHODS)
  private List<KYCPayoutMethodCheckResult> payoutMethods = new ArrayList<>();

  public static final String SERIALIZED_NAME_SHAREHOLDERS = "shareholders";
  @SerializedName(SERIALIZED_NAME_SHAREHOLDERS)
  private List<KYCShareholderCheckResult> shareholders = new ArrayList<>();

  public static final String SERIALIZED_NAME_SIGNATORIES = "signatories";
  @SerializedName(SERIALIZED_NAME_SIGNATORIES)
  private List<KYCSignatoryCheckResult> signatories = new ArrayList<>();

  public static final String SERIALIZED_NAME_ULTIMATE_PARENT_COMPANY = "ultimateParentCompany";
  @SerializedName(SERIALIZED_NAME_ULTIMATE_PARENT_COMPANY)
  private List<KYCUltimateParentCompanyCheckResult> ultimateParentCompany = new ArrayList<>();

  public KYCVerificationResult() {
  }

  public KYCVerificationResult accountHolder(KYCCheckResult accountHolder) {
    this.accountHolder = accountHolder;
    return this;
  }

  /**
   * The results of the checks on the account holder.
   * @return accountHolder
   */
  @javax.annotation.Nullable
  public KYCCheckResult getAccountHolder() {
    return accountHolder;
  }

  public void setAccountHolder(KYCCheckResult accountHolder) {
    this.accountHolder = accountHolder;
  }


  public KYCVerificationResult legalArrangements(List<KYCLegalArrangementCheckResult> legalArrangements) {
    this.legalArrangements = legalArrangements;
    return this;
  }

  public KYCVerificationResult addLegalArrangementsItem(KYCLegalArrangementCheckResult legalArrangementsItem) {
    if (this.legalArrangements == null) {
      this.legalArrangements = new ArrayList<>();
    }
    this.legalArrangements.add(legalArrangementsItem);
    return this;
  }

  /**
   * The results of the checks on the legal arrangements.
   * @return legalArrangements
   */
  @javax.annotation.Nullable
  public List<KYCLegalArrangementCheckResult> getLegalArrangements() {
    return legalArrangements;
  }

  public void setLegalArrangements(List<KYCLegalArrangementCheckResult> legalArrangements) {
    this.legalArrangements = legalArrangements;
  }


  public KYCVerificationResult legalArrangementsEntities(List<KYCLegalArrangementEntityCheckResult> legalArrangementsEntities) {
    this.legalArrangementsEntities = legalArrangementsEntities;
    return this;
  }

  public KYCVerificationResult addLegalArrangementsEntitiesItem(KYCLegalArrangementEntityCheckResult legalArrangementsEntitiesItem) {
    if (this.legalArrangementsEntities == null) {
      this.legalArrangementsEntities = new ArrayList<>();
    }
    this.legalArrangementsEntities.add(legalArrangementsEntitiesItem);
    return this;
  }

  /**
   * The results of the checks on the legal arrangement entities.
   * @return legalArrangementsEntities
   */
  @javax.annotation.Nullable
  public List<KYCLegalArrangementEntityCheckResult> getLegalArrangementsEntities() {
    return legalArrangementsEntities;
  }

  public void setLegalArrangementsEntities(List<KYCLegalArrangementEntityCheckResult> legalArrangementsEntities) {
    this.legalArrangementsEntities = legalArrangementsEntities;
  }


  public KYCVerificationResult payoutMethods(List<KYCPayoutMethodCheckResult> payoutMethods) {
    this.payoutMethods = payoutMethods;
    return this;
  }

  public KYCVerificationResult addPayoutMethodsItem(KYCPayoutMethodCheckResult payoutMethodsItem) {
    if (this.payoutMethods == null) {
      this.payoutMethods = new ArrayList<>();
    }
    this.payoutMethods.add(payoutMethodsItem);
    return this;
  }

  /**
   * The results of the checks on the payout methods.
   * @return payoutMethods
   */
  @javax.annotation.Nullable
  public List<KYCPayoutMethodCheckResult> getPayoutMethods() {
    return payoutMethods;
  }

  public void setPayoutMethods(List<KYCPayoutMethodCheckResult> payoutMethods) {
    this.payoutMethods = payoutMethods;
  }


  public KYCVerificationResult shareholders(List<KYCShareholderCheckResult> shareholders) {
    this.shareholders = shareholders;
    return this;
  }

  public KYCVerificationResult addShareholdersItem(KYCShareholderCheckResult shareholdersItem) {
    if (this.shareholders == null) {
      this.shareholders = new ArrayList<>();
    }
    this.shareholders.add(shareholdersItem);
    return this;
  }

  /**
   * The results of the checks on the shareholders.
   * @return shareholders
   */
  @javax.annotation.Nullable
  public List<KYCShareholderCheckResult> getShareholders() {
    return shareholders;
  }

  public void setShareholders(List<KYCShareholderCheckResult> shareholders) {
    this.shareholders = shareholders;
  }


  public KYCVerificationResult signatories(List<KYCSignatoryCheckResult> signatories) {
    this.signatories = signatories;
    return this;
  }

  public KYCVerificationResult addSignatoriesItem(KYCSignatoryCheckResult signatoriesItem) {
    if (this.signatories == null) {
      this.signatories = new ArrayList<>();
    }
    this.signatories.add(signatoriesItem);
    return this;
  }

  /**
   * The results of the checks on the signatories.
   * @return signatories
   */
  @javax.annotation.Nullable
  public List<KYCSignatoryCheckResult> getSignatories() {
    return signatories;
  }

  public void setSignatories(List<KYCSignatoryCheckResult> signatories) {
    this.signatories = signatories;
  }


  public KYCVerificationResult ultimateParentCompany(List<KYCUltimateParentCompanyCheckResult> ultimateParentCompany) {
    this.ultimateParentCompany = ultimateParentCompany;
    return this;
  }

  public KYCVerificationResult addUltimateParentCompanyItem(KYCUltimateParentCompanyCheckResult ultimateParentCompanyItem) {
    if (this.ultimateParentCompany == null) {
      this.ultimateParentCompany = new ArrayList<>();
    }
    this.ultimateParentCompany.add(ultimateParentCompanyItem);
    return this;
  }

  /**
   * The result of the check on the Ultimate Parent Company.
   * @return ultimateParentCompany
   */
  @javax.annotation.Nullable
  public List<KYCUltimateParentCompanyCheckResult> getUltimateParentCompany() {
    return ultimateParentCompany;
  }

  public void setUltimateParentCompany(List<KYCUltimateParentCompanyCheckResult> ultimateParentCompany) {
    this.ultimateParentCompany = ultimateParentCompany;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    KYCVerificationResult kyCVerificationResult = (KYCVerificationResult) o;
    return Objects.equals(this.accountHolder, kyCVerificationResult.accountHolder) &&
        Objects.equals(this.legalArrangements, kyCVerificationResult.legalArrangements) &&
        Objects.equals(this.legalArrangementsEntities, kyCVerificationResult.legalArrangementsEntities) &&
        Objects.equals(this.payoutMethods, kyCVerificationResult.payoutMethods) &&
        Objects.equals(this.shareholders, kyCVerificationResult.shareholders) &&
        Objects.equals(this.signatories, kyCVerificationResult.signatories) &&
        Objects.equals(this.ultimateParentCompany, kyCVerificationResult.ultimateParentCompany);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountHolder, legalArrangements, legalArrangementsEntities, payoutMethods, shareholders, signatories, ultimateParentCompany);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class KYCVerificationResult {\n");
    sb.append("    accountHolder: ").append(toIndentedString(accountHolder)).append("\n");
    sb.append("    legalArrangements: ").append(toIndentedString(legalArrangements)).append("\n");
    sb.append("    legalArrangementsEntities: ").append(toIndentedString(legalArrangementsEntities)).append("\n");
    sb.append("    payoutMethods: ").append(toIndentedString(payoutMethods)).append("\n");
    sb.append("    shareholders: ").append(toIndentedString(shareholders)).append("\n");
    sb.append("    signatories: ").append(toIndentedString(signatories)).append("\n");
    sb.append("    ultimateParentCompany: ").append(toIndentedString(ultimateParentCompany)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accountHolder");
    openapiFields.add("legalArrangements");
    openapiFields.add("legalArrangementsEntities");
    openapiFields.add("payoutMethods");
    openapiFields.add("shareholders");
    openapiFields.add("signatories");
    openapiFields.add("ultimateParentCompany");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to KYCVerificationResult
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!KYCVerificationResult.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in KYCVerificationResult is not found in the empty JSON string", KYCVerificationResult.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!KYCVerificationResult.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `KYCVerificationResult` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `accountHolder`
      if (jsonObj.get("accountHolder") != null && !jsonObj.get("accountHolder").isJsonNull()) {
        KYCCheckResult.validateJsonElement(jsonObj.get("accountHolder"));
      }
      if (jsonObj.get("legalArrangements") != null && !jsonObj.get("legalArrangements").isJsonNull()) {
        JsonArray jsonArraylegalArrangements = jsonObj.getAsJsonArray("legalArrangements");
        if (jsonArraylegalArrangements != null) {
          // ensure the json data is an array
          if (!jsonObj.get("legalArrangements").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `legalArrangements` to be an array in the JSON string but got `%s`", jsonObj.get("legalArrangements").toString()));
          }

          // validate the optional field `legalArrangements` (array)
          for (int i = 0; i < jsonArraylegalArrangements.size(); i++) {
            KYCLegalArrangementCheckResult.validateJsonElement(jsonArraylegalArrangements.get(i));
          };
        }
      }
      if (jsonObj.get("legalArrangementsEntities") != null && !jsonObj.get("legalArrangementsEntities").isJsonNull()) {
        JsonArray jsonArraylegalArrangementsEntities = jsonObj.getAsJsonArray("legalArrangementsEntities");
        if (jsonArraylegalArrangementsEntities != null) {
          // ensure the json data is an array
          if (!jsonObj.get("legalArrangementsEntities").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `legalArrangementsEntities` to be an array in the JSON string but got `%s`", jsonObj.get("legalArrangementsEntities").toString()));
          }

          // validate the optional field `legalArrangementsEntities` (array)
          for (int i = 0; i < jsonArraylegalArrangementsEntities.size(); i++) {
            KYCLegalArrangementEntityCheckResult.validateJsonElement(jsonArraylegalArrangementsEntities.get(i));
          };
        }
      }
      if (jsonObj.get("payoutMethods") != null && !jsonObj.get("payoutMethods").isJsonNull()) {
        JsonArray jsonArraypayoutMethods = jsonObj.getAsJsonArray("payoutMethods");
        if (jsonArraypayoutMethods != null) {
          // ensure the json data is an array
          if (!jsonObj.get("payoutMethods").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `payoutMethods` to be an array in the JSON string but got `%s`", jsonObj.get("payoutMethods").toString()));
          }

          // validate the optional field `payoutMethods` (array)
          for (int i = 0; i < jsonArraypayoutMethods.size(); i++) {
            KYCPayoutMethodCheckResult.validateJsonElement(jsonArraypayoutMethods.get(i));
          };
        }
      }
      if (jsonObj.get("shareholders") != null && !jsonObj.get("shareholders").isJsonNull()) {
        JsonArray jsonArrayshareholders = jsonObj.getAsJsonArray("shareholders");
        if (jsonArrayshareholders != null) {
          // ensure the json data is an array
          if (!jsonObj.get("shareholders").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `shareholders` to be an array in the JSON string but got `%s`", jsonObj.get("shareholders").toString()));
          }

          // validate the optional field `shareholders` (array)
          for (int i = 0; i < jsonArrayshareholders.size(); i++) {
            KYCShareholderCheckResult.validateJsonElement(jsonArrayshareholders.get(i));
          };
        }
      }
      if (jsonObj.get("signatories") != null && !jsonObj.get("signatories").isJsonNull()) {
        JsonArray jsonArraysignatories = jsonObj.getAsJsonArray("signatories");
        if (jsonArraysignatories != null) {
          // ensure the json data is an array
          if (!jsonObj.get("signatories").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `signatories` to be an array in the JSON string but got `%s`", jsonObj.get("signatories").toString()));
          }

          // validate the optional field `signatories` (array)
          for (int i = 0; i < jsonArraysignatories.size(); i++) {
            KYCSignatoryCheckResult.validateJsonElement(jsonArraysignatories.get(i));
          };
        }
      }
      if (jsonObj.get("ultimateParentCompany") != null && !jsonObj.get("ultimateParentCompany").isJsonNull()) {
        JsonArray jsonArrayultimateParentCompany = jsonObj.getAsJsonArray("ultimateParentCompany");
        if (jsonArrayultimateParentCompany != null) {
          // ensure the json data is an array
          if (!jsonObj.get("ultimateParentCompany").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `ultimateParentCompany` to be an array in the JSON string but got `%s`", jsonObj.get("ultimateParentCompany").toString()));
          }

          // validate the optional field `ultimateParentCompany` (array)
          for (int i = 0; i < jsonArrayultimateParentCompany.size(); i++) {
            KYCUltimateParentCompanyCheckResult.validateJsonElement(jsonArrayultimateParentCompany.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!KYCVerificationResult.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'KYCVerificationResult' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<KYCVerificationResult> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(KYCVerificationResult.class));

       return (TypeAdapter<T>) new TypeAdapter<KYCVerificationResult>() {
           @Override
           public void write(JsonWriter out, KYCVerificationResult value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public KYCVerificationResult read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of KYCVerificationResult given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of KYCVerificationResult
   * @throws IOException if the JSON string is invalid with respect to KYCVerificationResult
   */
  public static KYCVerificationResult fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, KYCVerificationResult.class);
  }

  /**
   * Convert an instance of KYCVerificationResult to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

