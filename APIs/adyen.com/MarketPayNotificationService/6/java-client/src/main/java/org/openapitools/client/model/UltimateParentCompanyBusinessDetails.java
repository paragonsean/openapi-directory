/*
 * Classic Platforms - Notifications
 * This API is used for the classic integration. If you are just starting your implementation, refer to our [new integration guide](https://docs.adyen.com/marketplaces-and-platforms) instead.  The Notification API sends notifications to the endpoints specified in a given subscription.  Subscriptions are managed through the Notification Configuration API. The API specifications listed here detail the format of each notification.  For more information, refer to our [documentation](https://docs.adyen.com/marketplaces-and-platforms/classic/notifications).
 *
 * The version of the OpenAPI document: 6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UltimateParentCompanyBusinessDetails
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:13:23.861288-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UltimateParentCompanyBusinessDetails {
  public static final String SERIALIZED_NAME_LEGAL_BUSINESS_NAME = "legalBusinessName";
  @SerializedName(SERIALIZED_NAME_LEGAL_BUSINESS_NAME)
  private String legalBusinessName;

  public static final String SERIALIZED_NAME_REGISTRATION_NUMBER = "registrationNumber";
  @SerializedName(SERIALIZED_NAME_REGISTRATION_NUMBER)
  private String registrationNumber;

  public static final String SERIALIZED_NAME_STOCK_EXCHANGE = "stockExchange";
  @SerializedName(SERIALIZED_NAME_STOCK_EXCHANGE)
  private String stockExchange;

  public static final String SERIALIZED_NAME_STOCK_NUMBER = "stockNumber";
  @SerializedName(SERIALIZED_NAME_STOCK_NUMBER)
  private String stockNumber;

  public static final String SERIALIZED_NAME_STOCK_TICKER = "stockTicker";
  @SerializedName(SERIALIZED_NAME_STOCK_TICKER)
  private String stockTicker;

  public UltimateParentCompanyBusinessDetails() {
  }

  public UltimateParentCompanyBusinessDetails legalBusinessName(String legalBusinessName) {
    this.legalBusinessName = legalBusinessName;
    return this;
  }

  /**
   * The legal name of the company.
   * @return legalBusinessName
   */
  @javax.annotation.Nullable
  public String getLegalBusinessName() {
    return legalBusinessName;
  }

  public void setLegalBusinessName(String legalBusinessName) {
    this.legalBusinessName = legalBusinessName;
  }


  public UltimateParentCompanyBusinessDetails registrationNumber(String registrationNumber) {
    this.registrationNumber = registrationNumber;
    return this;
  }

  /**
   * The registration number of the company.
   * @return registrationNumber
   */
  @javax.annotation.Nullable
  public String getRegistrationNumber() {
    return registrationNumber;
  }

  public void setRegistrationNumber(String registrationNumber) {
    this.registrationNumber = registrationNumber;
  }


  public UltimateParentCompanyBusinessDetails stockExchange(String stockExchange) {
    this.stockExchange = stockExchange;
    return this;
  }

  /**
   * Market Identifier Code (MIC).
   * @return stockExchange
   */
  @javax.annotation.Nullable
  public String getStockExchange() {
    return stockExchange;
  }

  public void setStockExchange(String stockExchange) {
    this.stockExchange = stockExchange;
  }


  public UltimateParentCompanyBusinessDetails stockNumber(String stockNumber) {
    this.stockNumber = stockNumber;
    return this;
  }

  /**
   * International Securities Identification Number (ISIN).
   * @return stockNumber
   */
  @javax.annotation.Nullable
  public String getStockNumber() {
    return stockNumber;
  }

  public void setStockNumber(String stockNumber) {
    this.stockNumber = stockNumber;
  }


  public UltimateParentCompanyBusinessDetails stockTicker(String stockTicker) {
    this.stockTicker = stockTicker;
    return this;
  }

  /**
   * Stock Ticker symbol.
   * @return stockTicker
   */
  @javax.annotation.Nullable
  public String getStockTicker() {
    return stockTicker;
  }

  public void setStockTicker(String stockTicker) {
    this.stockTicker = stockTicker;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UltimateParentCompanyBusinessDetails ultimateParentCompanyBusinessDetails = (UltimateParentCompanyBusinessDetails) o;
    return Objects.equals(this.legalBusinessName, ultimateParentCompanyBusinessDetails.legalBusinessName) &&
        Objects.equals(this.registrationNumber, ultimateParentCompanyBusinessDetails.registrationNumber) &&
        Objects.equals(this.stockExchange, ultimateParentCompanyBusinessDetails.stockExchange) &&
        Objects.equals(this.stockNumber, ultimateParentCompanyBusinessDetails.stockNumber) &&
        Objects.equals(this.stockTicker, ultimateParentCompanyBusinessDetails.stockTicker);
  }

  @Override
  public int hashCode() {
    return Objects.hash(legalBusinessName, registrationNumber, stockExchange, stockNumber, stockTicker);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UltimateParentCompanyBusinessDetails {\n");
    sb.append("    legalBusinessName: ").append(toIndentedString(legalBusinessName)).append("\n");
    sb.append("    registrationNumber: ").append(toIndentedString(registrationNumber)).append("\n");
    sb.append("    stockExchange: ").append(toIndentedString(stockExchange)).append("\n");
    sb.append("    stockNumber: ").append(toIndentedString(stockNumber)).append("\n");
    sb.append("    stockTicker: ").append(toIndentedString(stockTicker)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("legalBusinessName");
    openapiFields.add("registrationNumber");
    openapiFields.add("stockExchange");
    openapiFields.add("stockNumber");
    openapiFields.add("stockTicker");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UltimateParentCompanyBusinessDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UltimateParentCompanyBusinessDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UltimateParentCompanyBusinessDetails is not found in the empty JSON string", UltimateParentCompanyBusinessDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UltimateParentCompanyBusinessDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UltimateParentCompanyBusinessDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("legalBusinessName") != null && !jsonObj.get("legalBusinessName").isJsonNull()) && !jsonObj.get("legalBusinessName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `legalBusinessName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("legalBusinessName").toString()));
      }
      if ((jsonObj.get("registrationNumber") != null && !jsonObj.get("registrationNumber").isJsonNull()) && !jsonObj.get("registrationNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `registrationNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("registrationNumber").toString()));
      }
      if ((jsonObj.get("stockExchange") != null && !jsonObj.get("stockExchange").isJsonNull()) && !jsonObj.get("stockExchange").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stockExchange` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stockExchange").toString()));
      }
      if ((jsonObj.get("stockNumber") != null && !jsonObj.get("stockNumber").isJsonNull()) && !jsonObj.get("stockNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stockNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stockNumber").toString()));
      }
      if ((jsonObj.get("stockTicker") != null && !jsonObj.get("stockTicker").isJsonNull()) && !jsonObj.get("stockTicker").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stockTicker` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stockTicker").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UltimateParentCompanyBusinessDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UltimateParentCompanyBusinessDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UltimateParentCompanyBusinessDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UltimateParentCompanyBusinessDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<UltimateParentCompanyBusinessDetails>() {
           @Override
           public void write(JsonWriter out, UltimateParentCompanyBusinessDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UltimateParentCompanyBusinessDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UltimateParentCompanyBusinessDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UltimateParentCompanyBusinessDetails
   * @throws IOException if the JSON string is invalid with respect to UltimateParentCompanyBusinessDetails
   */
  public static UltimateParentCompanyBusinessDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UltimateParentCompanyBusinessDetails.class);
  }

  /**
   * Convert an instance of UltimateParentCompanyBusinessDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

