/*
 * Classic Platforms - Notifications
 * This API is used for the classic integration. If you are just starting your implementation, refer to our [new integration guide](https://docs.adyen.com/marketplaces-and-platforms) instead.  The Notification API sends notifications to the endpoints specified in a given subscription.  Subscriptions are managed through the Notification Configuration API. The API specifications listed here detail the format of each notification.  For more information, refer to our [documentation](https://docs.adyen.com/marketplaces-and-platforms/classic/notifications).
 *
 * The version of the OpenAPI document: 6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AccountFundsBelowThresholdNotification;
import org.openapitools.client.model.AccountHolderPayoutNotification;
import org.openapitools.client.model.BeneficiarySetupNotification;
import org.openapitools.client.model.CompensateNegativeBalanceNotification;
import org.openapitools.client.model.DirectDebitInitiatedNotification;
import org.openapitools.client.model.NotificationResponse;
import org.openapitools.client.model.RefundFundsTransferNotification;
import org.openapitools.client.model.ScheduledRefundsNotification;
import org.openapitools.client.model.TransferFundsNotification;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class FundManagementApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public FundManagementApi() {
        this(Configuration.getDefaultApiClient());
    }

    public FundManagementApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for postACCOUNTFUNDSBELOWTHRESHOLD
     * @param accountFundsBelowThresholdNotification  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - the request has succeeded. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postACCOUNTFUNDSBELOWTHRESHOLDCall(AccountFundsBelowThresholdNotification accountFundsBelowThresholdNotification, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = accountFundsBelowThresholdNotification;

        // create path and map variables
        String localVarPath = "/ACCOUNT_FUNDS_BELOW_THRESHOLD";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postACCOUNTFUNDSBELOWTHRESHOLDValidateBeforeCall(AccountFundsBelowThresholdNotification accountFundsBelowThresholdNotification, final ApiCallback _callback) throws ApiException {
        return postACCOUNTFUNDSBELOWTHRESHOLDCall(accountFundsBelowThresholdNotification, _callback);

    }

    /**
     * Liable account&#39;s funds are below configured threshold
     * Adyen sends this notification when the current funds of your liable account are below the configured threshold.
     * @param accountFundsBelowThresholdNotification  (optional)
     * @return NotificationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - the request has succeeded. </td><td>  -  </td></tr>
     </table>
     */
    public NotificationResponse postACCOUNTFUNDSBELOWTHRESHOLD(AccountFundsBelowThresholdNotification accountFundsBelowThresholdNotification) throws ApiException {
        ApiResponse<NotificationResponse> localVarResp = postACCOUNTFUNDSBELOWTHRESHOLDWithHttpInfo(accountFundsBelowThresholdNotification);
        return localVarResp.getData();
    }

    /**
     * Liable account&#39;s funds are below configured threshold
     * Adyen sends this notification when the current funds of your liable account are below the configured threshold.
     * @param accountFundsBelowThresholdNotification  (optional)
     * @return ApiResponse&lt;NotificationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - the request has succeeded. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NotificationResponse> postACCOUNTFUNDSBELOWTHRESHOLDWithHttpInfo(AccountFundsBelowThresholdNotification accountFundsBelowThresholdNotification) throws ApiException {
        okhttp3.Call localVarCall = postACCOUNTFUNDSBELOWTHRESHOLDValidateBeforeCall(accountFundsBelowThresholdNotification, null);
        Type localVarReturnType = new TypeToken<NotificationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Liable account&#39;s funds are below configured threshold (asynchronously)
     * Adyen sends this notification when the current funds of your liable account are below the configured threshold.
     * @param accountFundsBelowThresholdNotification  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - the request has succeeded. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postACCOUNTFUNDSBELOWTHRESHOLDAsync(AccountFundsBelowThresholdNotification accountFundsBelowThresholdNotification, final ApiCallback<NotificationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = postACCOUNTFUNDSBELOWTHRESHOLDValidateBeforeCall(accountFundsBelowThresholdNotification, _callback);
        Type localVarReturnType = new TypeToken<NotificationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postACCOUNTHOLDERPAYOUT
     * @param accountHolderPayoutNotification  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - the request has succeeded. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postACCOUNTHOLDERPAYOUTCall(AccountHolderPayoutNotification accountHolderPayoutNotification, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = accountHolderPayoutNotification;

        // create path and map variables
        String localVarPath = "/ACCOUNT_HOLDER_PAYOUT";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postACCOUNTHOLDERPAYOUTValidateBeforeCall(AccountHolderPayoutNotification accountHolderPayoutNotification, final ApiCallback _callback) throws ApiException {
        return postACCOUNTHOLDERPAYOUTCall(accountHolderPayoutNotification, _callback);

    }

    /**
     * Paid out to account holder
     * Adyen sends this notification when a [payout request](https://docs.adyen.com/api-explorer/#/Fund/latest/post/payoutAccountHolder) to an account holder is processed and the payout is scheduled.
     * @param accountHolderPayoutNotification  (optional)
     * @return NotificationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - the request has succeeded. </td><td>  -  </td></tr>
     </table>
     */
    public NotificationResponse postACCOUNTHOLDERPAYOUT(AccountHolderPayoutNotification accountHolderPayoutNotification) throws ApiException {
        ApiResponse<NotificationResponse> localVarResp = postACCOUNTHOLDERPAYOUTWithHttpInfo(accountHolderPayoutNotification);
        return localVarResp.getData();
    }

    /**
     * Paid out to account holder
     * Adyen sends this notification when a [payout request](https://docs.adyen.com/api-explorer/#/Fund/latest/post/payoutAccountHolder) to an account holder is processed and the payout is scheduled.
     * @param accountHolderPayoutNotification  (optional)
     * @return ApiResponse&lt;NotificationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - the request has succeeded. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NotificationResponse> postACCOUNTHOLDERPAYOUTWithHttpInfo(AccountHolderPayoutNotification accountHolderPayoutNotification) throws ApiException {
        okhttp3.Call localVarCall = postACCOUNTHOLDERPAYOUTValidateBeforeCall(accountHolderPayoutNotification, null);
        Type localVarReturnType = new TypeToken<NotificationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Paid out to account holder (asynchronously)
     * Adyen sends this notification when a [payout request](https://docs.adyen.com/api-explorer/#/Fund/latest/post/payoutAccountHolder) to an account holder is processed and the payout is scheduled.
     * @param accountHolderPayoutNotification  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - the request has succeeded. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postACCOUNTHOLDERPAYOUTAsync(AccountHolderPayoutNotification accountHolderPayoutNotification, final ApiCallback<NotificationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = postACCOUNTHOLDERPAYOUTValidateBeforeCall(accountHolderPayoutNotification, _callback);
        Type localVarReturnType = new TypeToken<NotificationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postBENEFICIARYSETUP
     * @param beneficiarySetupNotification  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - the request has succeeded. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postBENEFICIARYSETUPCall(BeneficiarySetupNotification beneficiarySetupNotification, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = beneficiarySetupNotification;

        // create path and map variables
        String localVarPath = "/BENEFICIARY_SETUP";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postBENEFICIARYSETUPValidateBeforeCall(BeneficiarySetupNotification beneficiarySetupNotification, final ApiCallback _callback) throws ApiException {
        return postBENEFICIARYSETUPCall(beneficiarySetupNotification, _callback);

    }

    /**
     * Beneficiary defined
     * Adyen sends this notification when a [benefactor/beneficiary relationship is created](https://docs.adyen.com/api-explorer/#/Fund/latest/post/transferFunds).
     * @param beneficiarySetupNotification  (optional)
     * @return NotificationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - the request has succeeded. </td><td>  -  </td></tr>
     </table>
     */
    public NotificationResponse postBENEFICIARYSETUP(BeneficiarySetupNotification beneficiarySetupNotification) throws ApiException {
        ApiResponse<NotificationResponse> localVarResp = postBENEFICIARYSETUPWithHttpInfo(beneficiarySetupNotification);
        return localVarResp.getData();
    }

    /**
     * Beneficiary defined
     * Adyen sends this notification when a [benefactor/beneficiary relationship is created](https://docs.adyen.com/api-explorer/#/Fund/latest/post/transferFunds).
     * @param beneficiarySetupNotification  (optional)
     * @return ApiResponse&lt;NotificationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - the request has succeeded. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NotificationResponse> postBENEFICIARYSETUPWithHttpInfo(BeneficiarySetupNotification beneficiarySetupNotification) throws ApiException {
        okhttp3.Call localVarCall = postBENEFICIARYSETUPValidateBeforeCall(beneficiarySetupNotification, null);
        Type localVarReturnType = new TypeToken<NotificationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Beneficiary defined (asynchronously)
     * Adyen sends this notification when a [benefactor/beneficiary relationship is created](https://docs.adyen.com/api-explorer/#/Fund/latest/post/transferFunds).
     * @param beneficiarySetupNotification  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - the request has succeeded. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postBENEFICIARYSETUPAsync(BeneficiarySetupNotification beneficiarySetupNotification, final ApiCallback<NotificationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = postBENEFICIARYSETUPValidateBeforeCall(beneficiarySetupNotification, _callback);
        Type localVarReturnType = new TypeToken<NotificationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postCOMPENSATENEGATIVEBALANCE
     * @param compensateNegativeBalanceNotification  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - the request has succeeded. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postCOMPENSATENEGATIVEBALANCECall(CompensateNegativeBalanceNotification compensateNegativeBalanceNotification, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = compensateNegativeBalanceNotification;

        // create path and map variables
        String localVarPath = "/COMPENSATE_NEGATIVE_BALANCE";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postCOMPENSATENEGATIVEBALANCEValidateBeforeCall(CompensateNegativeBalanceNotification compensateNegativeBalanceNotification, final ApiCallback _callback) throws ApiException {
        return postCOMPENSATENEGATIVEBALANCECall(compensateNegativeBalanceNotification, _callback);

    }

    /**
     * Negative account balances compensated
     * Adyen sends this notification when funds are transferred from your platform&#39;s liable account to an overdrawn account to compensate for the overdraft.
     * @param compensateNegativeBalanceNotification  (optional)
     * @return NotificationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - the request has succeeded. </td><td>  -  </td></tr>
     </table>
     */
    public NotificationResponse postCOMPENSATENEGATIVEBALANCE(CompensateNegativeBalanceNotification compensateNegativeBalanceNotification) throws ApiException {
        ApiResponse<NotificationResponse> localVarResp = postCOMPENSATENEGATIVEBALANCEWithHttpInfo(compensateNegativeBalanceNotification);
        return localVarResp.getData();
    }

    /**
     * Negative account balances compensated
     * Adyen sends this notification when funds are transferred from your platform&#39;s liable account to an overdrawn account to compensate for the overdraft.
     * @param compensateNegativeBalanceNotification  (optional)
     * @return ApiResponse&lt;NotificationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - the request has succeeded. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NotificationResponse> postCOMPENSATENEGATIVEBALANCEWithHttpInfo(CompensateNegativeBalanceNotification compensateNegativeBalanceNotification) throws ApiException {
        okhttp3.Call localVarCall = postCOMPENSATENEGATIVEBALANCEValidateBeforeCall(compensateNegativeBalanceNotification, null);
        Type localVarReturnType = new TypeToken<NotificationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Negative account balances compensated (asynchronously)
     * Adyen sends this notification when funds are transferred from your platform&#39;s liable account to an overdrawn account to compensate for the overdraft.
     * @param compensateNegativeBalanceNotification  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - the request has succeeded. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postCOMPENSATENEGATIVEBALANCEAsync(CompensateNegativeBalanceNotification compensateNegativeBalanceNotification, final ApiCallback<NotificationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = postCOMPENSATENEGATIVEBALANCEValidateBeforeCall(compensateNegativeBalanceNotification, _callback);
        Type localVarReturnType = new TypeToken<NotificationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postDIRECTDEBITINITIATED
     * @param directDebitInitiatedNotification  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - the request has succeeded. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postDIRECTDEBITINITIATEDCall(DirectDebitInitiatedNotification directDebitInitiatedNotification, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = directDebitInitiatedNotification;

        // create path and map variables
        String localVarPath = "/DIRECT_DEBIT_INITIATED";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postDIRECTDEBITINITIATEDValidateBeforeCall(DirectDebitInitiatedNotification directDebitInitiatedNotification, final ApiCallback _callback) throws ApiException {
        return postDIRECTDEBITINITIATEDCall(directDebitInitiatedNotification, _callback);

    }

    /**
     * Automated direct debit initiated
     * Adyen sends this notification when a [direct debit is initiated](https://docs.adyen.com/api-explorer/#/Fund/latest/post/debitAccountHolder).
     * @param directDebitInitiatedNotification  (optional)
     * @return NotificationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - the request has succeeded. </td><td>  -  </td></tr>
     </table>
     */
    public NotificationResponse postDIRECTDEBITINITIATED(DirectDebitInitiatedNotification directDebitInitiatedNotification) throws ApiException {
        ApiResponse<NotificationResponse> localVarResp = postDIRECTDEBITINITIATEDWithHttpInfo(directDebitInitiatedNotification);
        return localVarResp.getData();
    }

    /**
     * Automated direct debit initiated
     * Adyen sends this notification when a [direct debit is initiated](https://docs.adyen.com/api-explorer/#/Fund/latest/post/debitAccountHolder).
     * @param directDebitInitiatedNotification  (optional)
     * @return ApiResponse&lt;NotificationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - the request has succeeded. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NotificationResponse> postDIRECTDEBITINITIATEDWithHttpInfo(DirectDebitInitiatedNotification directDebitInitiatedNotification) throws ApiException {
        okhttp3.Call localVarCall = postDIRECTDEBITINITIATEDValidateBeforeCall(directDebitInitiatedNotification, null);
        Type localVarReturnType = new TypeToken<NotificationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Automated direct debit initiated (asynchronously)
     * Adyen sends this notification when a [direct debit is initiated](https://docs.adyen.com/api-explorer/#/Fund/latest/post/debitAccountHolder).
     * @param directDebitInitiatedNotification  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - the request has succeeded. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postDIRECTDEBITINITIATEDAsync(DirectDebitInitiatedNotification directDebitInitiatedNotification, final ApiCallback<NotificationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = postDIRECTDEBITINITIATEDValidateBeforeCall(directDebitInitiatedNotification, _callback);
        Type localVarReturnType = new TypeToken<NotificationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postREFUNDFUNDSTRANSFER
     * @param refundFundsTransferNotification  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - the request has succeeded. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postREFUNDFUNDSTRANSFERCall(RefundFundsTransferNotification refundFundsTransferNotification, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = refundFundsTransferNotification;

        // create path and map variables
        String localVarPath = "/REFUND_FUNDS_TRANSFER";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postREFUNDFUNDSTRANSFERValidateBeforeCall(RefundFundsTransferNotification refundFundsTransferNotification, final ApiCallback _callback) throws ApiException {
        return postREFUNDFUNDSTRANSFERCall(refundFundsTransferNotification, _callback);

    }

    /**
     * Funds transfer between accounts refunded
     * Adyen sends this notification when [funds transferred between accounts are refunded](https://docs.adyen.com/api-explorer/#/Fund/v6/latest/refundFundsTransfer).
     * @param refundFundsTransferNotification  (optional)
     * @return NotificationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - the request has succeeded. </td><td>  -  </td></tr>
     </table>
     */
    public NotificationResponse postREFUNDFUNDSTRANSFER(RefundFundsTransferNotification refundFundsTransferNotification) throws ApiException {
        ApiResponse<NotificationResponse> localVarResp = postREFUNDFUNDSTRANSFERWithHttpInfo(refundFundsTransferNotification);
        return localVarResp.getData();
    }

    /**
     * Funds transfer between accounts refunded
     * Adyen sends this notification when [funds transferred between accounts are refunded](https://docs.adyen.com/api-explorer/#/Fund/v6/latest/refundFundsTransfer).
     * @param refundFundsTransferNotification  (optional)
     * @return ApiResponse&lt;NotificationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - the request has succeeded. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NotificationResponse> postREFUNDFUNDSTRANSFERWithHttpInfo(RefundFundsTransferNotification refundFundsTransferNotification) throws ApiException {
        okhttp3.Call localVarCall = postREFUNDFUNDSTRANSFERValidateBeforeCall(refundFundsTransferNotification, null);
        Type localVarReturnType = new TypeToken<NotificationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Funds transfer between accounts refunded (asynchronously)
     * Adyen sends this notification when [funds transferred between accounts are refunded](https://docs.adyen.com/api-explorer/#/Fund/v6/latest/refundFundsTransfer).
     * @param refundFundsTransferNotification  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - the request has succeeded. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postREFUNDFUNDSTRANSFERAsync(RefundFundsTransferNotification refundFundsTransferNotification, final ApiCallback<NotificationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = postREFUNDFUNDSTRANSFERValidateBeforeCall(refundFundsTransferNotification, _callback);
        Type localVarReturnType = new TypeToken<NotificationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postSCHEDULEDREFUNDS
     * @param scheduledRefundsNotification  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - the request has succeeded. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postSCHEDULEDREFUNDSCall(ScheduledRefundsNotification scheduledRefundsNotification, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = scheduledRefundsNotification;

        // create path and map variables
        String localVarPath = "/SCHEDULED_REFUNDS";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postSCHEDULEDREFUNDSValidateBeforeCall(ScheduledRefundsNotification scheduledRefundsNotification, final ApiCallback _callback) throws ApiException {
        return postSCHEDULEDREFUNDSCall(scheduledRefundsNotification, _callback);

    }

    /**
     * &#39;Refund Transfers Not Paid Out&#39; call processed and refunds scheduled
     * Adyen sends this notification when a request to [refund transfers that are not yet paid out](https://docs.adyen.com/api-explorer/#/Fund/latest/refundNotPaidOutTransfers) is processed and the associated refunds are scheduled.
     * @param scheduledRefundsNotification  (optional)
     * @return NotificationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - the request has succeeded. </td><td>  -  </td></tr>
     </table>
     */
    public NotificationResponse postSCHEDULEDREFUNDS(ScheduledRefundsNotification scheduledRefundsNotification) throws ApiException {
        ApiResponse<NotificationResponse> localVarResp = postSCHEDULEDREFUNDSWithHttpInfo(scheduledRefundsNotification);
        return localVarResp.getData();
    }

    /**
     * &#39;Refund Transfers Not Paid Out&#39; call processed and refunds scheduled
     * Adyen sends this notification when a request to [refund transfers that are not yet paid out](https://docs.adyen.com/api-explorer/#/Fund/latest/refundNotPaidOutTransfers) is processed and the associated refunds are scheduled.
     * @param scheduledRefundsNotification  (optional)
     * @return ApiResponse&lt;NotificationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - the request has succeeded. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NotificationResponse> postSCHEDULEDREFUNDSWithHttpInfo(ScheduledRefundsNotification scheduledRefundsNotification) throws ApiException {
        okhttp3.Call localVarCall = postSCHEDULEDREFUNDSValidateBeforeCall(scheduledRefundsNotification, null);
        Type localVarReturnType = new TypeToken<NotificationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * &#39;Refund Transfers Not Paid Out&#39; call processed and refunds scheduled (asynchronously)
     * Adyen sends this notification when a request to [refund transfers that are not yet paid out](https://docs.adyen.com/api-explorer/#/Fund/latest/refundNotPaidOutTransfers) is processed and the associated refunds are scheduled.
     * @param scheduledRefundsNotification  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - the request has succeeded. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postSCHEDULEDREFUNDSAsync(ScheduledRefundsNotification scheduledRefundsNotification, final ApiCallback<NotificationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = postSCHEDULEDREFUNDSValidateBeforeCall(scheduledRefundsNotification, _callback);
        Type localVarReturnType = new TypeToken<NotificationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postTRANSFERFUNDS
     * @param transferFundsNotification  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - the request has succeeded. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postTRANSFERFUNDSCall(TransferFundsNotification transferFundsNotification, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = transferFundsNotification;

        // create path and map variables
        String localVarPath = "/TRANSFER_FUNDS";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postTRANSFERFUNDSValidateBeforeCall(TransferFundsNotification transferFundsNotification, final ApiCallback _callback) throws ApiException {
        return postTRANSFERFUNDSCall(transferFundsNotification, _callback);

    }

    /**
     * Funds transferred between accounts
     * Adyen sends this notification when [funds are transferred between accounts](https://docs.adyen.com/api-explorer/#/Fund/latest/post/transferFunds).
     * @param transferFundsNotification  (optional)
     * @return NotificationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - the request has succeeded. </td><td>  -  </td></tr>
     </table>
     */
    public NotificationResponse postTRANSFERFUNDS(TransferFundsNotification transferFundsNotification) throws ApiException {
        ApiResponse<NotificationResponse> localVarResp = postTRANSFERFUNDSWithHttpInfo(transferFundsNotification);
        return localVarResp.getData();
    }

    /**
     * Funds transferred between accounts
     * Adyen sends this notification when [funds are transferred between accounts](https://docs.adyen.com/api-explorer/#/Fund/latest/post/transferFunds).
     * @param transferFundsNotification  (optional)
     * @return ApiResponse&lt;NotificationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - the request has succeeded. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NotificationResponse> postTRANSFERFUNDSWithHttpInfo(TransferFundsNotification transferFundsNotification) throws ApiException {
        okhttp3.Call localVarCall = postTRANSFERFUNDSValidateBeforeCall(transferFundsNotification, null);
        Type localVarReturnType = new TypeToken<NotificationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Funds transferred between accounts (asynchronously)
     * Adyen sends this notification when [funds are transferred between accounts](https://docs.adyen.com/api-explorer/#/Fund/latest/post/transferFunds).
     * @param transferFundsNotification  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - the request has succeeded. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postTRANSFERFUNDSAsync(TransferFundsNotification transferFundsNotification, final ApiCallback<NotificationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = postTRANSFERFUNDSValidateBeforeCall(transferFundsNotification, _callback);
        Type localVarReturnType = new TypeToken<NotificationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
