/*
 * Classic Platforms - Notifications
 * This API is used for the classic integration. If you are just starting your implementation, refer to our [new integration guide](https://docs.adyen.com/marketplaces-and-platforms) instead.  The Notification API sends notifications to the endpoints specified in a given subscription.  Subscriptions are managed through the Notification Configuration API. The API specifications listed here detail the format of each notification.  For more information, refer to our [documentation](https://docs.adyen.com/marketplaces-and-platforms/classic/notifications).
 *
 * The version of the OpenAPI document: 6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ViasAddress;
import org.openapitools.client.model.ViasName;
import org.openapitools.client.model.ViasPersonalData;
import org.openapitools.client.model.ViasPhoneNumber;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SignatoryContact
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:13:23.861288-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SignatoryContact {
  public static final String SERIALIZED_NAME_ADDRESS = "address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  private ViasAddress address;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_FULL_PHONE_NUMBER = "fullPhoneNumber";
  @SerializedName(SERIALIZED_NAME_FULL_PHONE_NUMBER)
  private String fullPhoneNumber;

  public static final String SERIALIZED_NAME_JOB_TITLE = "jobTitle";
  @SerializedName(SERIALIZED_NAME_JOB_TITLE)
  private String jobTitle;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private ViasName name;

  public static final String SERIALIZED_NAME_PERSONAL_DATA = "personalData";
  @SerializedName(SERIALIZED_NAME_PERSONAL_DATA)
  private ViasPersonalData personalData;

  public static final String SERIALIZED_NAME_PHONE_NUMBER = "phoneNumber";
  @SerializedName(SERIALIZED_NAME_PHONE_NUMBER)
  private ViasPhoneNumber phoneNumber;

  public static final String SERIALIZED_NAME_SIGNATORY_CODE = "signatoryCode";
  @SerializedName(SERIALIZED_NAME_SIGNATORY_CODE)
  private String signatoryCode;

  public static final String SERIALIZED_NAME_SIGNATORY_REFERENCE = "signatoryReference";
  @SerializedName(SERIALIZED_NAME_SIGNATORY_REFERENCE)
  private String signatoryReference;

  public static final String SERIALIZED_NAME_WEB_ADDRESS = "webAddress";
  @SerializedName(SERIALIZED_NAME_WEB_ADDRESS)
  private String webAddress;

  public SignatoryContact() {
  }

  public SignatoryContact address(ViasAddress address) {
    this.address = address;
    return this;
  }

  /**
   * The address of the person.
   * @return address
   */
  @javax.annotation.Nullable
  public ViasAddress getAddress() {
    return address;
  }

  public void setAddress(ViasAddress address) {
    this.address = address;
  }


  public SignatoryContact email(String email) {
    this.email = email;
    return this;
  }

  /**
   * The e-mail address of the person.
   * @return email
   */
  @javax.annotation.Nullable
  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }


  public SignatoryContact fullPhoneNumber(String fullPhoneNumber) {
    this.fullPhoneNumber = fullPhoneNumber;
    return this;
  }

  /**
   * The phone number of the person provided as a single string.  It will be handled as a landline phone. Examples: \&quot;0031 6 11 22 33 44\&quot;, \&quot;+316/1122-3344\&quot;, \&quot;(0031) 611223344\&quot;
   * @return fullPhoneNumber
   */
  @javax.annotation.Nullable
  public String getFullPhoneNumber() {
    return fullPhoneNumber;
  }

  public void setFullPhoneNumber(String fullPhoneNumber) {
    this.fullPhoneNumber = fullPhoneNumber;
  }


  public SignatoryContact jobTitle(String jobTitle) {
    this.jobTitle = jobTitle;
    return this;
  }

  /**
   * Job title of the signatory.  Example values: **Chief Executive Officer**, **Chief Financial Officer**, **Chief Operating Officer**, **President**, **Vice President**, **Executive President**, **Managing Member**, **Partner**, **Treasurer**, **Director**, or **Other**.
   * @return jobTitle
   */
  @javax.annotation.Nullable
  public String getJobTitle() {
    return jobTitle;
  }

  public void setJobTitle(String jobTitle) {
    this.jobTitle = jobTitle;
  }


  public SignatoryContact name(ViasName name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the person.
   * @return name
   */
  @javax.annotation.Nullable
  public ViasName getName() {
    return name;
  }

  public void setName(ViasName name) {
    this.name = name;
  }


  public SignatoryContact personalData(ViasPersonalData personalData) {
    this.personalData = personalData;
    return this;
  }

  /**
   * Contains information about the person.
   * @return personalData
   */
  @javax.annotation.Nullable
  public ViasPersonalData getPersonalData() {
    return personalData;
  }

  public void setPersonalData(ViasPersonalData personalData) {
    this.personalData = personalData;
  }


  public SignatoryContact phoneNumber(ViasPhoneNumber phoneNumber) {
    this.phoneNumber = phoneNumber;
    return this;
  }

  /**
   * The phone number of the person.
   * @return phoneNumber
   */
  @javax.annotation.Nullable
  public ViasPhoneNumber getPhoneNumber() {
    return phoneNumber;
  }

  public void setPhoneNumber(ViasPhoneNumber phoneNumber) {
    this.phoneNumber = phoneNumber;
  }


  public SignatoryContact signatoryCode(String signatoryCode) {
    this.signatoryCode = signatoryCode;
    return this;
  }

  /**
   * The unique identifier (UUID) of the signatory. &gt;**If, during an Account Holder create or update request, this field is left blank (but other fields provided), a new Signatory will be created with a procedurally-generated UUID.**  &gt;**If, during an Account Holder create request, a UUID is provided, the creation of the Signatory will fail while the creation of the Account Holder will continue.**  &gt;**If, during an Account Holder update request, a UUID that is not correlated with an existing Signatory is provided, the update of the Signatory will fail.**  &gt;**If, during an Account Holder update request, a UUID that is correlated with an existing Signatory is provided, the existing Signatory will be updated.** 
   * @return signatoryCode
   */
  @javax.annotation.Nullable
  public String getSignatoryCode() {
    return signatoryCode;
  }

  public void setSignatoryCode(String signatoryCode) {
    this.signatoryCode = signatoryCode;
  }


  public SignatoryContact signatoryReference(String signatoryReference) {
    this.signatoryReference = signatoryReference;
    return this;
  }

  /**
   * Your reference for the signatory.
   * @return signatoryReference
   */
  @javax.annotation.Nullable
  public String getSignatoryReference() {
    return signatoryReference;
  }

  public void setSignatoryReference(String signatoryReference) {
    this.signatoryReference = signatoryReference;
  }


  public SignatoryContact webAddress(String webAddress) {
    this.webAddress = webAddress;
    return this;
  }

  /**
   * The URL of the person&#39;s website.
   * @return webAddress
   */
  @javax.annotation.Nullable
  public String getWebAddress() {
    return webAddress;
  }

  public void setWebAddress(String webAddress) {
    this.webAddress = webAddress;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SignatoryContact signatoryContact = (SignatoryContact) o;
    return Objects.equals(this.address, signatoryContact.address) &&
        Objects.equals(this.email, signatoryContact.email) &&
        Objects.equals(this.fullPhoneNumber, signatoryContact.fullPhoneNumber) &&
        Objects.equals(this.jobTitle, signatoryContact.jobTitle) &&
        Objects.equals(this.name, signatoryContact.name) &&
        Objects.equals(this.personalData, signatoryContact.personalData) &&
        Objects.equals(this.phoneNumber, signatoryContact.phoneNumber) &&
        Objects.equals(this.signatoryCode, signatoryContact.signatoryCode) &&
        Objects.equals(this.signatoryReference, signatoryContact.signatoryReference) &&
        Objects.equals(this.webAddress, signatoryContact.webAddress);
  }

  @Override
  public int hashCode() {
    return Objects.hash(address, email, fullPhoneNumber, jobTitle, name, personalData, phoneNumber, signatoryCode, signatoryReference, webAddress);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SignatoryContact {\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    fullPhoneNumber: ").append(toIndentedString(fullPhoneNumber)).append("\n");
    sb.append("    jobTitle: ").append(toIndentedString(jobTitle)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    personalData: ").append(toIndentedString(personalData)).append("\n");
    sb.append("    phoneNumber: ").append(toIndentedString(phoneNumber)).append("\n");
    sb.append("    signatoryCode: ").append(toIndentedString(signatoryCode)).append("\n");
    sb.append("    signatoryReference: ").append(toIndentedString(signatoryReference)).append("\n");
    sb.append("    webAddress: ").append(toIndentedString(webAddress)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("address");
    openapiFields.add("email");
    openapiFields.add("fullPhoneNumber");
    openapiFields.add("jobTitle");
    openapiFields.add("name");
    openapiFields.add("personalData");
    openapiFields.add("phoneNumber");
    openapiFields.add("signatoryCode");
    openapiFields.add("signatoryReference");
    openapiFields.add("webAddress");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SignatoryContact
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SignatoryContact.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SignatoryContact is not found in the empty JSON string", SignatoryContact.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SignatoryContact.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SignatoryContact` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `address`
      if (jsonObj.get("address") != null && !jsonObj.get("address").isJsonNull()) {
        ViasAddress.validateJsonElement(jsonObj.get("address"));
      }
      if ((jsonObj.get("email") != null && !jsonObj.get("email").isJsonNull()) && !jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if ((jsonObj.get("fullPhoneNumber") != null && !jsonObj.get("fullPhoneNumber").isJsonNull()) && !jsonObj.get("fullPhoneNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fullPhoneNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fullPhoneNumber").toString()));
      }
      if ((jsonObj.get("jobTitle") != null && !jsonObj.get("jobTitle").isJsonNull()) && !jsonObj.get("jobTitle").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `jobTitle` to be a primitive type in the JSON string but got `%s`", jsonObj.get("jobTitle").toString()));
      }
      // validate the optional field `name`
      if (jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) {
        ViasName.validateJsonElement(jsonObj.get("name"));
      }
      // validate the optional field `personalData`
      if (jsonObj.get("personalData") != null && !jsonObj.get("personalData").isJsonNull()) {
        ViasPersonalData.validateJsonElement(jsonObj.get("personalData"));
      }
      // validate the optional field `phoneNumber`
      if (jsonObj.get("phoneNumber") != null && !jsonObj.get("phoneNumber").isJsonNull()) {
        ViasPhoneNumber.validateJsonElement(jsonObj.get("phoneNumber"));
      }
      if ((jsonObj.get("signatoryCode") != null && !jsonObj.get("signatoryCode").isJsonNull()) && !jsonObj.get("signatoryCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `signatoryCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("signatoryCode").toString()));
      }
      if ((jsonObj.get("signatoryReference") != null && !jsonObj.get("signatoryReference").isJsonNull()) && !jsonObj.get("signatoryReference").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `signatoryReference` to be a primitive type in the JSON string but got `%s`", jsonObj.get("signatoryReference").toString()));
      }
      if ((jsonObj.get("webAddress") != null && !jsonObj.get("webAddress").isJsonNull()) && !jsonObj.get("webAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `webAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("webAddress").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SignatoryContact.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SignatoryContact' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SignatoryContact> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SignatoryContact.class));

       return (TypeAdapter<T>) new TypeAdapter<SignatoryContact>() {
           @Override
           public void write(JsonWriter out, SignatoryContact value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SignatoryContact read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SignatoryContact given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SignatoryContact
   * @throws IOException if the JSON string is invalid with respect to SignatoryContact
   */
  public static SignatoryContact fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SignatoryContact.class);
  }

  /**
   * Convert an instance of SignatoryContact to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

