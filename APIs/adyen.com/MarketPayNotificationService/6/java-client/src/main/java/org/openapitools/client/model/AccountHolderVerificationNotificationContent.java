/*
 * Classic Platforms - Notifications
 * This API is used for the classic integration. If you are just starting your implementation, refer to our [new integration guide](https://docs.adyen.com/marketplaces-and-platforms) instead.  The Notification API sends notifications to the endpoints specified in a given subscription.  Subscriptions are managed through the Notification Configuration API. The API specifications listed here detail the format of each notification.  For more information, refer to our [documentation](https://docs.adyen.com/marketplaces-and-platforms/classic/notifications).
 *
 * The version of the OpenAPI document: 6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.KYCCheckStatusData;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AccountHolderVerificationNotificationContent
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:13:23.861288-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AccountHolderVerificationNotificationContent {
  public static final String SERIALIZED_NAME_ACCOUNT_HOLDER_CODE = "accountHolderCode";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_HOLDER_CODE)
  private String accountHolderCode;

  public static final String SERIALIZED_NAME_KYC_CHECK_STATUS_DATA = "kycCheckStatusData";
  @SerializedName(SERIALIZED_NAME_KYC_CHECK_STATUS_DATA)
  private KYCCheckStatusData kycCheckStatusData;

  public static final String SERIALIZED_NAME_LEGAL_ARRANGEMENT_CODE = "legalArrangementCode";
  @SerializedName(SERIALIZED_NAME_LEGAL_ARRANGEMENT_CODE)
  private String legalArrangementCode;

  public static final String SERIALIZED_NAME_LEGAL_ARRANGEMENT_ENTITY_CODE = "legalArrangementEntityCode";
  @SerializedName(SERIALIZED_NAME_LEGAL_ARRANGEMENT_ENTITY_CODE)
  private String legalArrangementEntityCode;

  public static final String SERIALIZED_NAME_PAYOUT_METHOD_CODE = "payoutMethodCode";
  @SerializedName(SERIALIZED_NAME_PAYOUT_METHOD_CODE)
  private String payoutMethodCode;

  public static final String SERIALIZED_NAME_SHAREHOLDER_CODE = "shareholderCode";
  @SerializedName(SERIALIZED_NAME_SHAREHOLDER_CODE)
  private String shareholderCode;

  public static final String SERIALIZED_NAME_SIGNATORY_CODE = "signatoryCode";
  @SerializedName(SERIALIZED_NAME_SIGNATORY_CODE)
  private String signatoryCode;

  public AccountHolderVerificationNotificationContent() {
  }

  public AccountHolderVerificationNotificationContent accountHolderCode(String accountHolderCode) {
    this.accountHolderCode = accountHolderCode;
    return this;
  }

  /**
   * The code of the account holder.
   * @return accountHolderCode
   */
  @javax.annotation.Nullable
  public String getAccountHolderCode() {
    return accountHolderCode;
  }

  public void setAccountHolderCode(String accountHolderCode) {
    this.accountHolderCode = accountHolderCode;
  }


  public AccountHolderVerificationNotificationContent kycCheckStatusData(KYCCheckStatusData kycCheckStatusData) {
    this.kycCheckStatusData = kycCheckStatusData;
    return this;
  }

  /**
   * Information on the verification status
   * @return kycCheckStatusData
   */
  @javax.annotation.Nullable
  public KYCCheckStatusData getKycCheckStatusData() {
    return kycCheckStatusData;
  }

  public void setKycCheckStatusData(KYCCheckStatusData kycCheckStatusData) {
    this.kycCheckStatusData = kycCheckStatusData;
  }


  public AccountHolderVerificationNotificationContent legalArrangementCode(String legalArrangementCode) {
    this.legalArrangementCode = legalArrangementCode;
    return this;
  }

  /**
   * The unique ID of the legal arrangement that has been verified.
   * @return legalArrangementCode
   */
  @javax.annotation.Nullable
  public String getLegalArrangementCode() {
    return legalArrangementCode;
  }

  public void setLegalArrangementCode(String legalArrangementCode) {
    this.legalArrangementCode = legalArrangementCode;
  }


  public AccountHolderVerificationNotificationContent legalArrangementEntityCode(String legalArrangementEntityCode) {
    this.legalArrangementEntityCode = legalArrangementEntityCode;
    return this;
  }

  /**
   * The unique ID of the legal arrangement entity that has been verified.
   * @return legalArrangementEntityCode
   */
  @javax.annotation.Nullable
  public String getLegalArrangementEntityCode() {
    return legalArrangementEntityCode;
  }

  public void setLegalArrangementEntityCode(String legalArrangementEntityCode) {
    this.legalArrangementEntityCode = legalArrangementEntityCode;
  }


  public AccountHolderVerificationNotificationContent payoutMethodCode(String payoutMethodCode) {
    this.payoutMethodCode = payoutMethodCode;
    return this;
  }

  /**
   * The unique code of the payout method that has been verified.
   * @return payoutMethodCode
   */
  @javax.annotation.Nullable
  public String getPayoutMethodCode() {
    return payoutMethodCode;
  }

  public void setPayoutMethodCode(String payoutMethodCode) {
    this.payoutMethodCode = payoutMethodCode;
  }


  public AccountHolderVerificationNotificationContent shareholderCode(String shareholderCode) {
    this.shareholderCode = shareholderCode;
    return this;
  }

  /**
   * The code of the shareholder that has been verified.
   * @return shareholderCode
   */
  @javax.annotation.Nullable
  public String getShareholderCode() {
    return shareholderCode;
  }

  public void setShareholderCode(String shareholderCode) {
    this.shareholderCode = shareholderCode;
  }


  public AccountHolderVerificationNotificationContent signatoryCode(String signatoryCode) {
    this.signatoryCode = signatoryCode;
    return this;
  }

  /**
   * The code of the signatory that has been verified.
   * @return signatoryCode
   */
  @javax.annotation.Nullable
  public String getSignatoryCode() {
    return signatoryCode;
  }

  public void setSignatoryCode(String signatoryCode) {
    this.signatoryCode = signatoryCode;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AccountHolderVerificationNotificationContent accountHolderVerificationNotificationContent = (AccountHolderVerificationNotificationContent) o;
    return Objects.equals(this.accountHolderCode, accountHolderVerificationNotificationContent.accountHolderCode) &&
        Objects.equals(this.kycCheckStatusData, accountHolderVerificationNotificationContent.kycCheckStatusData) &&
        Objects.equals(this.legalArrangementCode, accountHolderVerificationNotificationContent.legalArrangementCode) &&
        Objects.equals(this.legalArrangementEntityCode, accountHolderVerificationNotificationContent.legalArrangementEntityCode) &&
        Objects.equals(this.payoutMethodCode, accountHolderVerificationNotificationContent.payoutMethodCode) &&
        Objects.equals(this.shareholderCode, accountHolderVerificationNotificationContent.shareholderCode) &&
        Objects.equals(this.signatoryCode, accountHolderVerificationNotificationContent.signatoryCode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountHolderCode, kycCheckStatusData, legalArrangementCode, legalArrangementEntityCode, payoutMethodCode, shareholderCode, signatoryCode);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AccountHolderVerificationNotificationContent {\n");
    sb.append("    accountHolderCode: ").append(toIndentedString(accountHolderCode)).append("\n");
    sb.append("    kycCheckStatusData: ").append(toIndentedString(kycCheckStatusData)).append("\n");
    sb.append("    legalArrangementCode: ").append(toIndentedString(legalArrangementCode)).append("\n");
    sb.append("    legalArrangementEntityCode: ").append(toIndentedString(legalArrangementEntityCode)).append("\n");
    sb.append("    payoutMethodCode: ").append(toIndentedString(payoutMethodCode)).append("\n");
    sb.append("    shareholderCode: ").append(toIndentedString(shareholderCode)).append("\n");
    sb.append("    signatoryCode: ").append(toIndentedString(signatoryCode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accountHolderCode");
    openapiFields.add("kycCheckStatusData");
    openapiFields.add("legalArrangementCode");
    openapiFields.add("legalArrangementEntityCode");
    openapiFields.add("payoutMethodCode");
    openapiFields.add("shareholderCode");
    openapiFields.add("signatoryCode");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AccountHolderVerificationNotificationContent
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AccountHolderVerificationNotificationContent.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AccountHolderVerificationNotificationContent is not found in the empty JSON string", AccountHolderVerificationNotificationContent.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AccountHolderVerificationNotificationContent.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AccountHolderVerificationNotificationContent` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("accountHolderCode") != null && !jsonObj.get("accountHolderCode").isJsonNull()) && !jsonObj.get("accountHolderCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountHolderCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountHolderCode").toString()));
      }
      // validate the optional field `kycCheckStatusData`
      if (jsonObj.get("kycCheckStatusData") != null && !jsonObj.get("kycCheckStatusData").isJsonNull()) {
        KYCCheckStatusData.validateJsonElement(jsonObj.get("kycCheckStatusData"));
      }
      if ((jsonObj.get("legalArrangementCode") != null && !jsonObj.get("legalArrangementCode").isJsonNull()) && !jsonObj.get("legalArrangementCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `legalArrangementCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("legalArrangementCode").toString()));
      }
      if ((jsonObj.get("legalArrangementEntityCode") != null && !jsonObj.get("legalArrangementEntityCode").isJsonNull()) && !jsonObj.get("legalArrangementEntityCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `legalArrangementEntityCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("legalArrangementEntityCode").toString()));
      }
      if ((jsonObj.get("payoutMethodCode") != null && !jsonObj.get("payoutMethodCode").isJsonNull()) && !jsonObj.get("payoutMethodCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payoutMethodCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payoutMethodCode").toString()));
      }
      if ((jsonObj.get("shareholderCode") != null && !jsonObj.get("shareholderCode").isJsonNull()) && !jsonObj.get("shareholderCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shareholderCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shareholderCode").toString()));
      }
      if ((jsonObj.get("signatoryCode") != null && !jsonObj.get("signatoryCode").isJsonNull()) && !jsonObj.get("signatoryCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `signatoryCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("signatoryCode").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AccountHolderVerificationNotificationContent.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AccountHolderVerificationNotificationContent' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AccountHolderVerificationNotificationContent> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AccountHolderVerificationNotificationContent.class));

       return (TypeAdapter<T>) new TypeAdapter<AccountHolderVerificationNotificationContent>() {
           @Override
           public void write(JsonWriter out, AccountHolderVerificationNotificationContent value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AccountHolderVerificationNotificationContent read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AccountHolderVerificationNotificationContent given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AccountHolderVerificationNotificationContent
   * @throws IOException if the JSON string is invalid with respect to AccountHolderVerificationNotificationContent
   */
  public static AccountHolderVerificationNotificationContent fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AccountHolderVerificationNotificationContent.class);
  }

  /**
   * Convert an instance of AccountHolderVerificationNotificationContent to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

