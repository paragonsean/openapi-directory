/*
 * Classic Platforms - Notifications
 * This API is used for the classic integration. If you are just starting your implementation, refer to our [new integration guide](https://docs.adyen.com/marketplaces-and-platforms) instead.  The Notification API sends notifications to the endpoints specified in a given subscription.  Subscriptions are managed through the Notification Configuration API. The API specifications listed here detail the format of each notification.  For more information, refer to our [documentation](https://docs.adyen.com/marketplaces-and-platforms/classic/notifications).
 *
 * The version of the OpenAPI document: 6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * FieldType
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:13:23.861288-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class FieldType {
  public static final String SERIALIZED_NAME_FIELD = "field";
  @SerializedName(SERIALIZED_NAME_FIELD)
  private String field;

  /**
   * The type of the field.
   */
  @JsonAdapter(FieldNameEnum.Adapter.class)
  public enum FieldNameEnum {
    ACCOUNT_CODE("accountCode"),
    
    ACCOUNT_HOLDER_CODE("accountHolderCode"),
    
    ACCOUNT_HOLDER_DETAILS("accountHolderDetails"),
    
    ACCOUNT_NUMBER("accountNumber"),
    
    ACCOUNT_STATE_TYPE("accountStateType"),
    
    ACCOUNT_STATUS("accountStatus"),
    
    ACCOUNT_TYPE("accountType"),
    
    ADDRESS("address"),
    
    BALANCE_ACCOUNT("balanceAccount"),
    
    BALANCE_ACCOUNT_ACTIVE("balanceAccountActive"),
    
    BALANCE_ACCOUNT_CODE("balanceAccountCode"),
    
    BALANCE_ACCOUNT_ID("balanceAccountId"),
    
    BANK_ACCOUNT("bankAccount"),
    
    BANK_ACCOUNT_CODE("bankAccountCode"),
    
    BANK_ACCOUNT_NAME("bankAccountName"),
    
    BANK_ACCOUNT_UUID("bankAccountUUID"),
    
    BANK_BIC_SWIFT("bankBicSwift"),
    
    BANK_CITY("bankCity"),
    
    BANK_CODE("bankCode"),
    
    BANK_NAME("bankName"),
    
    BANK_STATEMENT("bankStatement"),
    
    BRANCH_CODE("branchCode"),
    
    BUSINESS_CONTACT("businessContact"),
    
    CARD_TOKEN("cardToken"),
    
    CHECK_CODE("checkCode"),
    
    CITY("city"),
    
    COMPANY_REGISTRATION("companyRegistration"),
    
    CONSTITUTIONAL_DOCUMENT("constitutionalDocument"),
    
    CONTROLLER("controller"),
    
    COUNTRY("country"),
    
    COUNTRY_CODE("countryCode"),
    
    CURRENCY("currency"),
    
    CURRENCY_CODE("currencyCode"),
    
    DATE_OF_BIRTH("dateOfBirth"),
    
    DESCRIPTION("description"),
    
    DESTINATION_ACCOUNT_CODE("destinationAccountCode"),
    
    DOCUMENT("document"),
    
    DOCUMENT_CONTENT("documentContent"),
    
    DOCUMENT_EXPIRATION_DATE("documentExpirationDate"),
    
    DOCUMENT_ISSUER_COUNTRY("documentIssuerCountry"),
    
    DOCUMENT_ISSUER_STATE("documentIssuerState"),
    
    DOCUMENT_NAME("documentName"),
    
    DOCUMENT_NUMBER("documentNumber"),
    
    DOCUMENT_TYPE("documentType"),
    
    DOING_BUSINESS_AS("doingBusinessAs"),
    
    DRIVING_LICENCE("drivingLicence"),
    
    DRIVING_LICENCE_BACK("drivingLicenceBack"),
    
    DRIVING_LICENCE_FRONT("drivingLicenceFront"),
    
    DRIVING_LICENSE("drivingLicense"),
    
    EMAIL("email"),
    
    FIRST_NAME("firstName"),
    
    FORM_TYPE("formType"),
    
    FULL_PHONE_NUMBER("fullPhoneNumber"),
    
    GENDER("gender"),
    
    HOP_WEBSERVICE_USER("hopWebserviceUser"),
    
    HOUSE_NUMBER_OR_NAME("houseNumberOrName"),
    
    IBAN("iban"),
    
    ID_CARD("idCard"),
    
    ID_CARD_BACK("idCardBack"),
    
    ID_CARD_FRONT("idCardFront"),
    
    ID_NUMBER("idNumber"),
    
    IDENTITY_DOCUMENT("identityDocument"),
    
    INDIVIDUAL_DETAILS("individualDetails"),
    
    INFIX("infix"),
    
    JOB_TITLE("jobTitle"),
    
    LAST_NAME("lastName"),
    
    LAST_REVIEW_DATE("lastReviewDate"),
    
    LEGAL_ARRANGEMENT("legalArrangement"),
    
    LEGAL_ARRANGEMENT_CODE("legalArrangementCode"),
    
    LEGAL_ARRANGEMENT_ENTITY("legalArrangementEntity"),
    
    LEGAL_ARRANGEMENT_ENTITY_CODE("legalArrangementEntityCode"),
    
    LEGAL_ARRANGEMENT_LEGAL_FORM("legalArrangementLegalForm"),
    
    LEGAL_ARRANGEMENT_MEMBER("legalArrangementMember"),
    
    LEGAL_ARRANGEMENT_MEMBERS("legalArrangementMembers"),
    
    LEGAL_ARRANGEMENT_NAME("legalArrangementName"),
    
    LEGAL_ARRANGEMENT_REFERENCE("legalArrangementReference"),
    
    LEGAL_ARRANGEMENT_REGISTRATION_NUMBER("legalArrangementRegistrationNumber"),
    
    LEGAL_ARRANGEMENT_TAX_NUMBER("legalArrangementTaxNumber"),
    
    LEGAL_ARRANGEMENT_TYPE("legalArrangementType"),
    
    LEGAL_BUSINESS_NAME("legalBusinessName"),
    
    LEGAL_ENTITY("legalEntity"),
    
    LEGAL_ENTITY_TYPE("legalEntityType"),
    
    LOGO("logo"),
    
    MERCHANT_ACCOUNT("merchantAccount"),
    
    MERCHANT_CATEGORY_CODE("merchantCategoryCode"),
    
    MERCHANT_HOUSE_NUMBER("merchantHouseNumber"),
    
    MERCHANT_REFERENCE("merchantReference"),
    
    MICRO_DEPOSIT("microDeposit"),
    
    NAME("name"),
    
    NATIONALITY("nationality"),
    
    ORIGINAL_REFERENCE("originalReference"),
    
    OWNER_CITY("ownerCity"),
    
    OWNER_COUNTRY_CODE("ownerCountryCode"),
    
    OWNER_DATE_OF_BIRTH("ownerDateOfBirth"),
    
    OWNER_HOUSE_NUMBER_OR_NAME("ownerHouseNumberOrName"),
    
    OWNER_NAME("ownerName"),
    
    OWNER_POSTAL_CODE("ownerPostalCode"),
    
    OWNER_STATE("ownerState"),
    
    OWNER_STREET("ownerStreet"),
    
    PASSPORT("passport"),
    
    PASSPORT_NUMBER("passportNumber"),
    
    PAYOUT_METHOD("payoutMethod"),
    
    PAYOUT_METHOD_CODE("payoutMethodCode"),
    
    PAYOUT_SCHEDULE("payoutSchedule"),
    
    PCI_SELF_ASSESSMENT("pciSelfAssessment"),
    
    PERSONAL_DATA("personalData"),
    
    PHONE_COUNTRY_CODE("phoneCountryCode"),
    
    PHONE_NUMBER("phoneNumber"),
    
    POSTAL_CODE("postalCode"),
    
    PRIMARY_CURRENCY("primaryCurrency"),
    
    REASON("reason"),
    
    REGISTRATION_NUMBER("registrationNumber"),
    
    RETURN_URL("returnUrl"),
    
    SCHEDULE("schedule"),
    
    SHAREHOLDER("shareholder"),
    
    SHAREHOLDER_CODE("shareholderCode"),
    
    SHAREHOLDER_CODE_AND_SIGNATORY_CODE("shareholderCodeAndSignatoryCode"),
    
    SHAREHOLDER_CODE_OR_SIGNATORY_CODE("shareholderCodeOrSignatoryCode"),
    
    SHAREHOLDER_TYPE("shareholderType"),
    
    SHAREHOLDER_TYPES("shareholderTypes"),
    
    SHOPPER_INTERACTION("shopperInteraction"),
    
    SIGNATORY("signatory"),
    
    SIGNATORY_CODE("signatoryCode"),
    
    SOCIAL_SECURITY_NUMBER("socialSecurityNumber"),
    
    SOURCE_ACCOUNT_CODE("sourceAccountCode"),
    
    SPLIT_ACCOUNT("splitAccount"),
    
    SPLIT_CONFIGURATION_UUID("splitConfigurationUUID"),
    
    SPLIT_CURRENCY("splitCurrency"),
    
    SPLIT_VALUE("splitValue"),
    
    SPLITS("splits"),
    
    STATE_OR_PROVINCE("stateOrProvince"),
    
    STATUS("status"),
    
    STOCK_EXCHANGE("stockExchange"),
    
    STOCK_NUMBER("stockNumber"),
    
    STOCK_TICKER("stockTicker"),
    
    STORE("store"),
    
    STORE_DETAIL("storeDetail"),
    
    STORE_NAME("storeName"),
    
    STORE_REFERENCE("storeReference"),
    
    STREET("street"),
    
    TAX_ID("taxId"),
    
    TIER("tier"),
    
    TIER_NUMBER("tierNumber"),
    
    TRANSFER_CODE("transferCode"),
    
    ULTIMATE_PARENT_COMPANY("ultimateParentCompany"),
    
    ULTIMATE_PARENT_COMPANY_ADDRESS_DETAILS("ultimateParentCompanyAddressDetails"),
    
    ULTIMATE_PARENT_COMPANY_ADDRESS_DETAILS_COUNTRY("ultimateParentCompanyAddressDetailsCountry"),
    
    ULTIMATE_PARENT_COMPANY_BUSINESS_DETAILS("ultimateParentCompanyBusinessDetails"),
    
    ULTIMATE_PARENT_COMPANY_BUSINESS_DETAILS_LEGAL_BUSINESS_NAME("ultimateParentCompanyBusinessDetailsLegalBusinessName"),
    
    ULTIMATE_PARENT_COMPANY_BUSINESS_DETAILS_REGISTRATION_NUMBER("ultimateParentCompanyBusinessDetailsRegistrationNumber"),
    
    ULTIMATE_PARENT_COMPANY_CODE("ultimateParentCompanyCode"),
    
    ULTIMATE_PARENT_COMPANY_STOCK_EXCHANGE("ultimateParentCompanyStockExchange"),
    
    ULTIMATE_PARENT_COMPANY_STOCK_NUMBER("ultimateParentCompanyStockNumber"),
    
    ULTIMATE_PARENT_COMPANY_STOCK_NUMBER_OR_STOCK_TICKER("ultimateParentCompanyStockNumberOrStockTicker"),
    
    ULTIMATE_PARENT_COMPANY_STOCK_TICKER("ultimateParentCompanyStockTicker"),
    
    UNKNOWN("unknown"),
    
    VALUE("value"),
    
    VERIFICATION_TYPE("verificationType"),
    
    VIRTUAL_ACCOUNT("virtualAccount"),
    
    VISA_NUMBER("visaNumber"),
    
    WEB_ADDRESS("webAddress"),
    
    YEAR("year");

    private String value;

    FieldNameEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FieldNameEnum fromValue(String value) {
      for (FieldNameEnum b : FieldNameEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FieldNameEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FieldNameEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FieldNameEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FieldNameEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      FieldNameEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_FIELD_NAME = "fieldName";
  @SerializedName(SERIALIZED_NAME_FIELD_NAME)
  private FieldNameEnum fieldName;

  public static final String SERIALIZED_NAME_SHAREHOLDER_CODE = "shareholderCode";
  @SerializedName(SERIALIZED_NAME_SHAREHOLDER_CODE)
  private String shareholderCode;

  public FieldType() {
  }

  public FieldType field(String field) {
    this.field = field;
    return this;
  }

  /**
   * The full name of the property.
   * @return field
   */
  @javax.annotation.Nullable
  public String getField() {
    return field;
  }

  public void setField(String field) {
    this.field = field;
  }


  public FieldType fieldName(FieldNameEnum fieldName) {
    this.fieldName = fieldName;
    return this;
  }

  /**
   * The type of the field.
   * @return fieldName
   */
  @javax.annotation.Nullable
  public FieldNameEnum getFieldName() {
    return fieldName;
  }

  public void setFieldName(FieldNameEnum fieldName) {
    this.fieldName = fieldName;
  }


  public FieldType shareholderCode(String shareholderCode) {
    this.shareholderCode = shareholderCode;
    return this;
  }

  /**
   * The code of the shareholder that the field belongs to. If empty, the field belongs to an account holder.
   * @return shareholderCode
   */
  @javax.annotation.Nullable
  public String getShareholderCode() {
    return shareholderCode;
  }

  public void setShareholderCode(String shareholderCode) {
    this.shareholderCode = shareholderCode;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FieldType fieldType = (FieldType) o;
    return Objects.equals(this.field, fieldType.field) &&
        Objects.equals(this.fieldName, fieldType.fieldName) &&
        Objects.equals(this.shareholderCode, fieldType.shareholderCode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(field, fieldName, shareholderCode);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FieldType {\n");
    sb.append("    field: ").append(toIndentedString(field)).append("\n");
    sb.append("    fieldName: ").append(toIndentedString(fieldName)).append("\n");
    sb.append("    shareholderCode: ").append(toIndentedString(shareholderCode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("field");
    openapiFields.add("fieldName");
    openapiFields.add("shareholderCode");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to FieldType
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FieldType.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FieldType is not found in the empty JSON string", FieldType.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FieldType.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FieldType` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("field") != null && !jsonObj.get("field").isJsonNull()) && !jsonObj.get("field").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `field` to be a primitive type in the JSON string but got `%s`", jsonObj.get("field").toString()));
      }
      if ((jsonObj.get("fieldName") != null && !jsonObj.get("fieldName").isJsonNull()) && !jsonObj.get("fieldName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fieldName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fieldName").toString()));
      }
      // validate the optional field `fieldName`
      if (jsonObj.get("fieldName") != null && !jsonObj.get("fieldName").isJsonNull()) {
        FieldNameEnum.validateJsonElement(jsonObj.get("fieldName"));
      }
      if ((jsonObj.get("shareholderCode") != null && !jsonObj.get("shareholderCode").isJsonNull()) && !jsonObj.get("shareholderCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shareholderCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shareholderCode").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FieldType.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FieldType' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FieldType> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FieldType.class));

       return (TypeAdapter<T>) new TypeAdapter<FieldType>() {
           @Override
           public void write(JsonWriter out, FieldType value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FieldType read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of FieldType given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FieldType
   * @throws IOException if the JSON string is invalid with respect to FieldType
   */
  public static FieldType fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FieldType.class);
  }

  /**
   * Convert an instance of FieldType to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

