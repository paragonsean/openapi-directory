/*
 * Classic Platforms - Notifications
 * This API is used for the classic integration. If you are just starting your implementation, refer to our [new integration guide](https://docs.adyen.com/marketplaces-and-platforms) instead.  The Notification API sends notifications to the endpoints specified in a given subscription.  Subscriptions are managed through the Notification Configuration API. The API specifications listed here detail the format of each notification.  For more information, refer to our [documentation](https://docs.adyen.com/marketplaces-and-platforms/classic/notifications).
 *
 * The version of the OpenAPI document: 6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.BusinessDetails;
import org.openapitools.client.model.IndividualDetails;
import org.openapitools.client.model.ViasAddress;
import org.openapitools.client.model.ViasPhoneNumber;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * LegalArrangementEntityDetail
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:13:23.861288-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LegalArrangementEntityDetail {
  public static final String SERIALIZED_NAME_ADDRESS = "address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  private ViasAddress address;

  public static final String SERIALIZED_NAME_BUSINESS_DETAILS = "businessDetails";
  @SerializedName(SERIALIZED_NAME_BUSINESS_DETAILS)
  private BusinessDetails businessDetails;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_FULL_PHONE_NUMBER = "fullPhoneNumber";
  @SerializedName(SERIALIZED_NAME_FULL_PHONE_NUMBER)
  private String fullPhoneNumber;

  public static final String SERIALIZED_NAME_INDIVIDUAL_DETAILS = "individualDetails";
  @SerializedName(SERIALIZED_NAME_INDIVIDUAL_DETAILS)
  private IndividualDetails individualDetails;

  public static final String SERIALIZED_NAME_LEGAL_ARRANGEMENT_ENTITY_CODE = "legalArrangementEntityCode";
  @SerializedName(SERIALIZED_NAME_LEGAL_ARRANGEMENT_ENTITY_CODE)
  private String legalArrangementEntityCode;

  public static final String SERIALIZED_NAME_LEGAL_ARRANGEMENT_ENTITY_REFERENCE = "legalArrangementEntityReference";
  @SerializedName(SERIALIZED_NAME_LEGAL_ARRANGEMENT_ENTITY_REFERENCE)
  private String legalArrangementEntityReference;

  /**
   * Gets or Sets legalArrangementMembers
   */
  @JsonAdapter(LegalArrangementMembersEnum.Adapter.class)
  public enum LegalArrangementMembersEnum {
    BENEFICIARY("Beneficiary"),
    
    CONTROLLING_PERSON("ControllingPerson"),
    
    PARTNER("Partner"),
    
    PROTECTOR("Protector"),
    
    SETTLOR("Settlor"),
    
    SHAREHOLDER("Shareholder"),
    
    TRUSTEE("Trustee");

    private String value;

    LegalArrangementMembersEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LegalArrangementMembersEnum fromValue(String value) {
      for (LegalArrangementMembersEnum b : LegalArrangementMembersEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LegalArrangementMembersEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LegalArrangementMembersEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LegalArrangementMembersEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LegalArrangementMembersEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      LegalArrangementMembersEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_LEGAL_ARRANGEMENT_MEMBERS = "legalArrangementMembers";
  @SerializedName(SERIALIZED_NAME_LEGAL_ARRANGEMENT_MEMBERS)
  private List<LegalArrangementMembersEnum> legalArrangementMembers = new ArrayList<>();

  /**
   * The legal entity type.  Possible values: **Business**, **Individual**, **NonProfit**, **PublicCompany**, or **Partnership**. 
   */
  @JsonAdapter(LegalEntityTypeEnum.Adapter.class)
  public enum LegalEntityTypeEnum {
    BUSINESS("Business"),
    
    INDIVIDUAL("Individual"),
    
    NON_PROFIT("NonProfit"),
    
    PARTNERSHIP("Partnership"),
    
    PUBLIC_COMPANY("PublicCompany");

    private String value;

    LegalEntityTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LegalEntityTypeEnum fromValue(String value) {
      for (LegalEntityTypeEnum b : LegalEntityTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LegalEntityTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LegalEntityTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LegalEntityTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LegalEntityTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      LegalEntityTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_LEGAL_ENTITY_TYPE = "legalEntityType";
  @SerializedName(SERIALIZED_NAME_LEGAL_ENTITY_TYPE)
  private LegalEntityTypeEnum legalEntityType;

  public static final String SERIALIZED_NAME_PHONE_NUMBER = "phoneNumber";
  @SerializedName(SERIALIZED_NAME_PHONE_NUMBER)
  private ViasPhoneNumber phoneNumber;

  public static final String SERIALIZED_NAME_WEB_ADDRESS = "webAddress";
  @SerializedName(SERIALIZED_NAME_WEB_ADDRESS)
  private String webAddress;

  public LegalArrangementEntityDetail() {
  }

  public LegalArrangementEntityDetail address(ViasAddress address) {
    this.address = address;
    return this;
  }

  /**
   * The address of the entity.
   * @return address
   */
  @javax.annotation.Nullable
  public ViasAddress getAddress() {
    return address;
  }

  public void setAddress(ViasAddress address) {
    this.address = address;
  }


  public LegalArrangementEntityDetail businessDetails(BusinessDetails businessDetails) {
    this.businessDetails = businessDetails;
    return this;
  }

  /**
   * Required when creating an entity with &#x60;legalEntityType&#x60; **Business**, **NonProfit**, **PublicCompany**, or **Partnership**.
   * @return businessDetails
   */
  @javax.annotation.Nullable
  public BusinessDetails getBusinessDetails() {
    return businessDetails;
  }

  public void setBusinessDetails(BusinessDetails businessDetails) {
    this.businessDetails = businessDetails;
  }


  public LegalArrangementEntityDetail email(String email) {
    this.email = email;
    return this;
  }

  /**
   * The e-mail address of the entity.
   * @return email
   */
  @javax.annotation.Nullable
  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }


  public LegalArrangementEntityDetail fullPhoneNumber(String fullPhoneNumber) {
    this.fullPhoneNumber = fullPhoneNumber;
    return this;
  }

  /**
   * The phone number of the contact provided as a single string.  It will be handled as a landline phone. **Examples:** \&quot;0031 6 11 22 33 44\&quot;, \&quot;+316/1122-3344\&quot;, \&quot;(0031) 611223344\&quot;
   * @return fullPhoneNumber
   */
  @javax.annotation.Nullable
  public String getFullPhoneNumber() {
    return fullPhoneNumber;
  }

  public void setFullPhoneNumber(String fullPhoneNumber) {
    this.fullPhoneNumber = fullPhoneNumber;
  }


  public LegalArrangementEntityDetail individualDetails(IndividualDetails individualDetails) {
    this.individualDetails = individualDetails;
    return this;
  }

  /**
   * Required when creating an entity with &#x60;legalEntityType&#x60; **Individual**.
   * @return individualDetails
   */
  @javax.annotation.Nullable
  public IndividualDetails getIndividualDetails() {
    return individualDetails;
  }

  public void setIndividualDetails(IndividualDetails individualDetails) {
    this.individualDetails = individualDetails;
  }


  public LegalArrangementEntityDetail legalArrangementEntityCode(String legalArrangementEntityCode) {
    this.legalArrangementEntityCode = legalArrangementEntityCode;
    return this;
  }

  /**
   * Adyen-generated unique alphanumeric identifier (UUID) for the entry, returned in the response when you create a legal arrangement entity. Use only when updating an account holder. If you include this field when creating an account holder, the request will fail.
   * @return legalArrangementEntityCode
   */
  @javax.annotation.Nullable
  public String getLegalArrangementEntityCode() {
    return legalArrangementEntityCode;
  }

  public void setLegalArrangementEntityCode(String legalArrangementEntityCode) {
    this.legalArrangementEntityCode = legalArrangementEntityCode;
  }


  public LegalArrangementEntityDetail legalArrangementEntityReference(String legalArrangementEntityReference) {
    this.legalArrangementEntityReference = legalArrangementEntityReference;
    return this;
  }

  /**
   * Your reference for the legal arrangement entity.
   * @return legalArrangementEntityReference
   */
  @javax.annotation.Nullable
  public String getLegalArrangementEntityReference() {
    return legalArrangementEntityReference;
  }

  public void setLegalArrangementEntityReference(String legalArrangementEntityReference) {
    this.legalArrangementEntityReference = legalArrangementEntityReference;
  }


  public LegalArrangementEntityDetail legalArrangementMembers(List<LegalArrangementMembersEnum> legalArrangementMembers) {
    this.legalArrangementMembers = legalArrangementMembers;
    return this;
  }

  public LegalArrangementEntityDetail addLegalArrangementMembersItem(LegalArrangementMembersEnum legalArrangementMembersItem) {
    if (this.legalArrangementMembers == null) {
      this.legalArrangementMembers = new ArrayList<>();
    }
    this.legalArrangementMembers.add(legalArrangementMembersItem);
    return this;
  }

  /**
   * An array containing the roles of the entity in the legal arrangement.  The possible values depend on the legal arrangement &#x60;type&#x60;.  - For &#x60;type&#x60; **Association**: **ControllingPerson** and **Shareholder**.  - For &#x60;type&#x60; **Partnership**: **Partner** and **Shareholder**.  - For &#x60;type&#x60; **Trust**: **Trustee**, **Settlor**, **Protector**, **Beneficiary**,  and **Shareholder**.  
   * @return legalArrangementMembers
   */
  @javax.annotation.Nullable
  public List<LegalArrangementMembersEnum> getLegalArrangementMembers() {
    return legalArrangementMembers;
  }

  public void setLegalArrangementMembers(List<LegalArrangementMembersEnum> legalArrangementMembers) {
    this.legalArrangementMembers = legalArrangementMembers;
  }


  public LegalArrangementEntityDetail legalEntityType(LegalEntityTypeEnum legalEntityType) {
    this.legalEntityType = legalEntityType;
    return this;
  }

  /**
   * The legal entity type.  Possible values: **Business**, **Individual**, **NonProfit**, **PublicCompany**, or **Partnership**. 
   * @return legalEntityType
   */
  @javax.annotation.Nullable
  public LegalEntityTypeEnum getLegalEntityType() {
    return legalEntityType;
  }

  public void setLegalEntityType(LegalEntityTypeEnum legalEntityType) {
    this.legalEntityType = legalEntityType;
  }


  public LegalArrangementEntityDetail phoneNumber(ViasPhoneNumber phoneNumber) {
    this.phoneNumber = phoneNumber;
    return this;
  }

  /**
   * The phone number of the entity.
   * @return phoneNumber
   */
  @javax.annotation.Nullable
  public ViasPhoneNumber getPhoneNumber() {
    return phoneNumber;
  }

  public void setPhoneNumber(ViasPhoneNumber phoneNumber) {
    this.phoneNumber = phoneNumber;
  }


  public LegalArrangementEntityDetail webAddress(String webAddress) {
    this.webAddress = webAddress;
    return this;
  }

  /**
   * The URL of the website of the contact.
   * @return webAddress
   */
  @javax.annotation.Nullable
  public String getWebAddress() {
    return webAddress;
  }

  public void setWebAddress(String webAddress) {
    this.webAddress = webAddress;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LegalArrangementEntityDetail legalArrangementEntityDetail = (LegalArrangementEntityDetail) o;
    return Objects.equals(this.address, legalArrangementEntityDetail.address) &&
        Objects.equals(this.businessDetails, legalArrangementEntityDetail.businessDetails) &&
        Objects.equals(this.email, legalArrangementEntityDetail.email) &&
        Objects.equals(this.fullPhoneNumber, legalArrangementEntityDetail.fullPhoneNumber) &&
        Objects.equals(this.individualDetails, legalArrangementEntityDetail.individualDetails) &&
        Objects.equals(this.legalArrangementEntityCode, legalArrangementEntityDetail.legalArrangementEntityCode) &&
        Objects.equals(this.legalArrangementEntityReference, legalArrangementEntityDetail.legalArrangementEntityReference) &&
        Objects.equals(this.legalArrangementMembers, legalArrangementEntityDetail.legalArrangementMembers) &&
        Objects.equals(this.legalEntityType, legalArrangementEntityDetail.legalEntityType) &&
        Objects.equals(this.phoneNumber, legalArrangementEntityDetail.phoneNumber) &&
        Objects.equals(this.webAddress, legalArrangementEntityDetail.webAddress);
  }

  @Override
  public int hashCode() {
    return Objects.hash(address, businessDetails, email, fullPhoneNumber, individualDetails, legalArrangementEntityCode, legalArrangementEntityReference, legalArrangementMembers, legalEntityType, phoneNumber, webAddress);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LegalArrangementEntityDetail {\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    businessDetails: ").append(toIndentedString(businessDetails)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    fullPhoneNumber: ").append(toIndentedString(fullPhoneNumber)).append("\n");
    sb.append("    individualDetails: ").append(toIndentedString(individualDetails)).append("\n");
    sb.append("    legalArrangementEntityCode: ").append(toIndentedString(legalArrangementEntityCode)).append("\n");
    sb.append("    legalArrangementEntityReference: ").append(toIndentedString(legalArrangementEntityReference)).append("\n");
    sb.append("    legalArrangementMembers: ").append(toIndentedString(legalArrangementMembers)).append("\n");
    sb.append("    legalEntityType: ").append(toIndentedString(legalEntityType)).append("\n");
    sb.append("    phoneNumber: ").append(toIndentedString(phoneNumber)).append("\n");
    sb.append("    webAddress: ").append(toIndentedString(webAddress)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("address");
    openapiFields.add("businessDetails");
    openapiFields.add("email");
    openapiFields.add("fullPhoneNumber");
    openapiFields.add("individualDetails");
    openapiFields.add("legalArrangementEntityCode");
    openapiFields.add("legalArrangementEntityReference");
    openapiFields.add("legalArrangementMembers");
    openapiFields.add("legalEntityType");
    openapiFields.add("phoneNumber");
    openapiFields.add("webAddress");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LegalArrangementEntityDetail
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LegalArrangementEntityDetail.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LegalArrangementEntityDetail is not found in the empty JSON string", LegalArrangementEntityDetail.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LegalArrangementEntityDetail.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LegalArrangementEntityDetail` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `address`
      if (jsonObj.get("address") != null && !jsonObj.get("address").isJsonNull()) {
        ViasAddress.validateJsonElement(jsonObj.get("address"));
      }
      // validate the optional field `businessDetails`
      if (jsonObj.get("businessDetails") != null && !jsonObj.get("businessDetails").isJsonNull()) {
        BusinessDetails.validateJsonElement(jsonObj.get("businessDetails"));
      }
      if ((jsonObj.get("email") != null && !jsonObj.get("email").isJsonNull()) && !jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if ((jsonObj.get("fullPhoneNumber") != null && !jsonObj.get("fullPhoneNumber").isJsonNull()) && !jsonObj.get("fullPhoneNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fullPhoneNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fullPhoneNumber").toString()));
      }
      // validate the optional field `individualDetails`
      if (jsonObj.get("individualDetails") != null && !jsonObj.get("individualDetails").isJsonNull()) {
        IndividualDetails.validateJsonElement(jsonObj.get("individualDetails"));
      }
      if ((jsonObj.get("legalArrangementEntityCode") != null && !jsonObj.get("legalArrangementEntityCode").isJsonNull()) && !jsonObj.get("legalArrangementEntityCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `legalArrangementEntityCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("legalArrangementEntityCode").toString()));
      }
      if ((jsonObj.get("legalArrangementEntityReference") != null && !jsonObj.get("legalArrangementEntityReference").isJsonNull()) && !jsonObj.get("legalArrangementEntityReference").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `legalArrangementEntityReference` to be a primitive type in the JSON string but got `%s`", jsonObj.get("legalArrangementEntityReference").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("legalArrangementMembers") != null && !jsonObj.get("legalArrangementMembers").isJsonNull() && !jsonObj.get("legalArrangementMembers").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `legalArrangementMembers` to be an array in the JSON string but got `%s`", jsonObj.get("legalArrangementMembers").toString()));
      }
      if ((jsonObj.get("legalEntityType") != null && !jsonObj.get("legalEntityType").isJsonNull()) && !jsonObj.get("legalEntityType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `legalEntityType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("legalEntityType").toString()));
      }
      // validate the optional field `legalEntityType`
      if (jsonObj.get("legalEntityType") != null && !jsonObj.get("legalEntityType").isJsonNull()) {
        LegalEntityTypeEnum.validateJsonElement(jsonObj.get("legalEntityType"));
      }
      // validate the optional field `phoneNumber`
      if (jsonObj.get("phoneNumber") != null && !jsonObj.get("phoneNumber").isJsonNull()) {
        ViasPhoneNumber.validateJsonElement(jsonObj.get("phoneNumber"));
      }
      if ((jsonObj.get("webAddress") != null && !jsonObj.get("webAddress").isJsonNull()) && !jsonObj.get("webAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `webAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("webAddress").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LegalArrangementEntityDetail.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LegalArrangementEntityDetail' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LegalArrangementEntityDetail> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LegalArrangementEntityDetail.class));

       return (TypeAdapter<T>) new TypeAdapter<LegalArrangementEntityDetail>() {
           @Override
           public void write(JsonWriter out, LegalArrangementEntityDetail value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LegalArrangementEntityDetail read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LegalArrangementEntityDetail given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LegalArrangementEntityDetail
   * @throws IOException if the JSON string is invalid with respect to LegalArrangementEntityDetail
   */
  public static LegalArrangementEntityDetail fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LegalArrangementEntityDetail.class);
  }

  /**
   * Convert an instance of LegalArrangementEntityDetail to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

