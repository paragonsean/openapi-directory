/*
 * Classic Platforms - Notifications
 * This API is used for the classic integration. If you are just starting your implementation, refer to our [new integration guide](https://docs.adyen.com/marketplaces-and-platforms) instead.  The Notification API sends notifications to the endpoints specified in a given subscription.  Subscriptions are managed through the Notification Configuration API. The API specifications listed here detail the format of each notification.  For more information, refer to our [documentation](https://docs.adyen.com/marketplaces-and-platforms/classic/notifications).
 *
 * The version of the OpenAPI document: 6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Amount;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AccountPayoutState
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:13:23.861288-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AccountPayoutState {
  public static final String SERIALIZED_NAME_ALLOW_PAYOUT = "allowPayout";
  @SerializedName(SERIALIZED_NAME_ALLOW_PAYOUT)
  private Boolean allowPayout;

  public static final String SERIALIZED_NAME_DISABLE_REASON = "disableReason";
  @SerializedName(SERIALIZED_NAME_DISABLE_REASON)
  private String disableReason;

  public static final String SERIALIZED_NAME_DISABLED = "disabled";
  @SerializedName(SERIALIZED_NAME_DISABLED)
  private Boolean disabled;

  public static final String SERIALIZED_NAME_NOT_ALLOWED_REASON = "notAllowedReason";
  @SerializedName(SERIALIZED_NAME_NOT_ALLOWED_REASON)
  private String notAllowedReason;

  public static final String SERIALIZED_NAME_PAYOUT_LIMIT = "payoutLimit";
  @SerializedName(SERIALIZED_NAME_PAYOUT_LIMIT)
  private Amount payoutLimit;

  public static final String SERIALIZED_NAME_TIER_NUMBER = "tierNumber";
  @SerializedName(SERIALIZED_NAME_TIER_NUMBER)
  private Integer tierNumber;

  public AccountPayoutState() {
  }

  public AccountPayoutState allowPayout(Boolean allowPayout) {
    this.allowPayout = allowPayout;
    return this;
  }

  /**
   * Indicates whether payouts are allowed. This field is the overarching payout status, and is the aggregate of multiple conditions (e.g., KYC status, disabled flag, etc). If this field is false, no payouts will be permitted for any of the account holder&#39;s accounts. If this field is true, payouts will be permitted for any of the account holder&#39;s accounts.
   * @return allowPayout
   */
  @javax.annotation.Nullable
  public Boolean getAllowPayout() {
    return allowPayout;
  }

  public void setAllowPayout(Boolean allowPayout) {
    this.allowPayout = allowPayout;
  }


  public AccountPayoutState disableReason(String disableReason) {
    this.disableReason = disableReason;
    return this;
  }

  /**
   * The reason why payouts (to all of the account holder&#39;s accounts) have been disabled (by the platform). If the &#x60;disabled&#x60; field is true, this field can be used to explain why.
   * @return disableReason
   */
  @javax.annotation.Nullable
  public String getDisableReason() {
    return disableReason;
  }

  public void setDisableReason(String disableReason) {
    this.disableReason = disableReason;
  }


  public AccountPayoutState disabled(Boolean disabled) {
    this.disabled = disabled;
    return this;
  }

  /**
   * Indicates whether payouts have been disabled (by the platform) for all of the account holder&#39;s accounts. A platform may enable and disable this field at their discretion. If this field is true, &#x60;allowPayout&#x60; will be false and no payouts will be permitted for any of the account holder&#39;s accounts. If this field is false, &#x60;allowPayout&#x60; may or may not be enabled, depending on other factors.
   * @return disabled
   */
  @javax.annotation.Nullable
  public Boolean getDisabled() {
    return disabled;
  }

  public void setDisabled(Boolean disabled) {
    this.disabled = disabled;
  }


  public AccountPayoutState notAllowedReason(String notAllowedReason) {
    this.notAllowedReason = notAllowedReason;
    return this;
  }

  /**
   * The reason why payouts (to all of the account holder&#39;s accounts) have been disabled (by Adyen). If payouts have been disabled by Adyen, this field will explain why. If this field is blank, payouts have not been disabled by Adyen.
   * @return notAllowedReason
   */
  @javax.annotation.Nullable
  public String getNotAllowedReason() {
    return notAllowedReason;
  }

  public void setNotAllowedReason(String notAllowedReason) {
    this.notAllowedReason = notAllowedReason;
  }


  public AccountPayoutState payoutLimit(Amount payoutLimit) {
    this.payoutLimit = payoutLimit;
    return this;
  }

  /**
   * The maximum amount that payouts are limited to. Only applies if payouts are allowed but limited.
   * @return payoutLimit
   */
  @javax.annotation.Nullable
  public Amount getPayoutLimit() {
    return payoutLimit;
  }

  public void setPayoutLimit(Amount payoutLimit) {
    this.payoutLimit = payoutLimit;
  }


  public AccountPayoutState tierNumber(Integer tierNumber) {
    this.tierNumber = tierNumber;
    return this;
  }

  /**
   * The payout tier that the account holder occupies.
   * @return tierNumber
   */
  @javax.annotation.Nullable
  public Integer getTierNumber() {
    return tierNumber;
  }

  public void setTierNumber(Integer tierNumber) {
    this.tierNumber = tierNumber;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AccountPayoutState accountPayoutState = (AccountPayoutState) o;
    return Objects.equals(this.allowPayout, accountPayoutState.allowPayout) &&
        Objects.equals(this.disableReason, accountPayoutState.disableReason) &&
        Objects.equals(this.disabled, accountPayoutState.disabled) &&
        Objects.equals(this.notAllowedReason, accountPayoutState.notAllowedReason) &&
        Objects.equals(this.payoutLimit, accountPayoutState.payoutLimit) &&
        Objects.equals(this.tierNumber, accountPayoutState.tierNumber);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allowPayout, disableReason, disabled, notAllowedReason, payoutLimit, tierNumber);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AccountPayoutState {\n");
    sb.append("    allowPayout: ").append(toIndentedString(allowPayout)).append("\n");
    sb.append("    disableReason: ").append(toIndentedString(disableReason)).append("\n");
    sb.append("    disabled: ").append(toIndentedString(disabled)).append("\n");
    sb.append("    notAllowedReason: ").append(toIndentedString(notAllowedReason)).append("\n");
    sb.append("    payoutLimit: ").append(toIndentedString(payoutLimit)).append("\n");
    sb.append("    tierNumber: ").append(toIndentedString(tierNumber)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("allowPayout");
    openapiFields.add("disableReason");
    openapiFields.add("disabled");
    openapiFields.add("notAllowedReason");
    openapiFields.add("payoutLimit");
    openapiFields.add("tierNumber");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AccountPayoutState
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AccountPayoutState.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AccountPayoutState is not found in the empty JSON string", AccountPayoutState.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AccountPayoutState.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AccountPayoutState` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("disableReason") != null && !jsonObj.get("disableReason").isJsonNull()) && !jsonObj.get("disableReason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `disableReason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("disableReason").toString()));
      }
      if ((jsonObj.get("notAllowedReason") != null && !jsonObj.get("notAllowedReason").isJsonNull()) && !jsonObj.get("notAllowedReason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `notAllowedReason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("notAllowedReason").toString()));
      }
      // validate the optional field `payoutLimit`
      if (jsonObj.get("payoutLimit") != null && !jsonObj.get("payoutLimit").isJsonNull()) {
        Amount.validateJsonElement(jsonObj.get("payoutLimit"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AccountPayoutState.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AccountPayoutState' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AccountPayoutState> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AccountPayoutState.class));

       return (TypeAdapter<T>) new TypeAdapter<AccountPayoutState>() {
           @Override
           public void write(JsonWriter out, AccountPayoutState value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AccountPayoutState read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AccountPayoutState given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AccountPayoutState
   * @throws IOException if the JSON string is invalid with respect to AccountPayoutState
   */
  public static AccountPayoutState fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AccountPayoutState.class);
  }

  /**
   * Convert an instance of AccountPayoutState to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

