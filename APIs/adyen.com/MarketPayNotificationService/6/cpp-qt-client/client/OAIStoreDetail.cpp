/**
 * Classic Platforms - Notifications
 * This API is used for the classic integration. If you are just starting your implementation, refer to our [new integration guide](https://docs.adyen.com/marketplaces-and-platforms) instead.  The Notification API sends notifications to the endpoints specified in a given subscription.  Subscriptions are managed through the Notification Configuration API. The API specifications listed here detail the format of each notification.  For more information, refer to our [documentation](https://docs.adyen.com/marketplaces-and-platforms/classic/notifications).
 *
 * The version of the OpenAPI document: 6
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStoreDetail.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStoreDetail::OAIStoreDetail(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStoreDetail::OAIStoreDetail() {
    this->initializeModel();
}

OAIStoreDetail::~OAIStoreDetail() {}

void OAIStoreDetail::initializeModel() {

    m_address_isSet = false;
    m_address_isValid = false;

    m_full_phone_number_isSet = false;
    m_full_phone_number_isValid = false;

    m_logo_isSet = false;
    m_logo_isValid = false;

    m_merchant_account_isSet = false;
    m_merchant_account_isValid = false;

    m_merchant_category_code_isSet = false;
    m_merchant_category_code_isValid = false;

    m_merchant_house_number_isSet = false;
    m_merchant_house_number_isValid = false;

    m_phone_number_isSet = false;
    m_phone_number_isValid = false;

    m_shopper_interaction_isSet = false;
    m_shopper_interaction_isValid = false;

    m_split_configuration_uuid_isSet = false;
    m_split_configuration_uuid_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_store_isSet = false;
    m_store_isValid = false;

    m_store_name_isSet = false;
    m_store_name_isValid = false;

    m_store_reference_isSet = false;
    m_store_reference_isValid = false;

    m_virtual_account_isSet = false;
    m_virtual_account_isValid = false;

    m_web_address_isSet = false;
    m_web_address_isValid = false;
}

void OAIStoreDetail::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStoreDetail::fromJsonObject(QJsonObject json) {

    m_address_isValid = ::OpenAPI::fromJsonValue(m_address, json[QString("address")]);
    m_address_isSet = !json[QString("address")].isNull() && m_address_isValid;

    m_full_phone_number_isValid = ::OpenAPI::fromJsonValue(m_full_phone_number, json[QString("fullPhoneNumber")]);
    m_full_phone_number_isSet = !json[QString("fullPhoneNumber")].isNull() && m_full_phone_number_isValid;

    m_logo_isValid = ::OpenAPI::fromJsonValue(m_logo, json[QString("logo")]);
    m_logo_isSet = !json[QString("logo")].isNull() && m_logo_isValid;

    m_merchant_account_isValid = ::OpenAPI::fromJsonValue(m_merchant_account, json[QString("merchantAccount")]);
    m_merchant_account_isSet = !json[QString("merchantAccount")].isNull() && m_merchant_account_isValid;

    m_merchant_category_code_isValid = ::OpenAPI::fromJsonValue(m_merchant_category_code, json[QString("merchantCategoryCode")]);
    m_merchant_category_code_isSet = !json[QString("merchantCategoryCode")].isNull() && m_merchant_category_code_isValid;

    m_merchant_house_number_isValid = ::OpenAPI::fromJsonValue(m_merchant_house_number, json[QString("merchantHouseNumber")]);
    m_merchant_house_number_isSet = !json[QString("merchantHouseNumber")].isNull() && m_merchant_house_number_isValid;

    m_phone_number_isValid = ::OpenAPI::fromJsonValue(m_phone_number, json[QString("phoneNumber")]);
    m_phone_number_isSet = !json[QString("phoneNumber")].isNull() && m_phone_number_isValid;

    m_shopper_interaction_isValid = ::OpenAPI::fromJsonValue(m_shopper_interaction, json[QString("shopperInteraction")]);
    m_shopper_interaction_isSet = !json[QString("shopperInteraction")].isNull() && m_shopper_interaction_isValid;

    m_split_configuration_uuid_isValid = ::OpenAPI::fromJsonValue(m_split_configuration_uuid, json[QString("splitConfigurationUUID")]);
    m_split_configuration_uuid_isSet = !json[QString("splitConfigurationUUID")].isNull() && m_split_configuration_uuid_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_store_isValid = ::OpenAPI::fromJsonValue(m_store, json[QString("store")]);
    m_store_isSet = !json[QString("store")].isNull() && m_store_isValid;

    m_store_name_isValid = ::OpenAPI::fromJsonValue(m_store_name, json[QString("storeName")]);
    m_store_name_isSet = !json[QString("storeName")].isNull() && m_store_name_isValid;

    m_store_reference_isValid = ::OpenAPI::fromJsonValue(m_store_reference, json[QString("storeReference")]);
    m_store_reference_isSet = !json[QString("storeReference")].isNull() && m_store_reference_isValid;

    m_virtual_account_isValid = ::OpenAPI::fromJsonValue(m_virtual_account, json[QString("virtualAccount")]);
    m_virtual_account_isSet = !json[QString("virtualAccount")].isNull() && m_virtual_account_isValid;

    m_web_address_isValid = ::OpenAPI::fromJsonValue(m_web_address, json[QString("webAddress")]);
    m_web_address_isSet = !json[QString("webAddress")].isNull() && m_web_address_isValid;
}

QString OAIStoreDetail::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStoreDetail::asJsonObject() const {
    QJsonObject obj;
    if (m_address.isSet()) {
        obj.insert(QString("address"), ::OpenAPI::toJsonValue(m_address));
    }
    if (m_full_phone_number_isSet) {
        obj.insert(QString("fullPhoneNumber"), ::OpenAPI::toJsonValue(m_full_phone_number));
    }
    if (m_logo_isSet) {
        obj.insert(QString("logo"), ::OpenAPI::toJsonValue(m_logo));
    }
    if (m_merchant_account_isSet) {
        obj.insert(QString("merchantAccount"), ::OpenAPI::toJsonValue(m_merchant_account));
    }
    if (m_merchant_category_code_isSet) {
        obj.insert(QString("merchantCategoryCode"), ::OpenAPI::toJsonValue(m_merchant_category_code));
    }
    if (m_merchant_house_number_isSet) {
        obj.insert(QString("merchantHouseNumber"), ::OpenAPI::toJsonValue(m_merchant_house_number));
    }
    if (m_phone_number.isSet()) {
        obj.insert(QString("phoneNumber"), ::OpenAPI::toJsonValue(m_phone_number));
    }
    if (m_shopper_interaction_isSet) {
        obj.insert(QString("shopperInteraction"), ::OpenAPI::toJsonValue(m_shopper_interaction));
    }
    if (m_split_configuration_uuid_isSet) {
        obj.insert(QString("splitConfigurationUUID"), ::OpenAPI::toJsonValue(m_split_configuration_uuid));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_store_isSet) {
        obj.insert(QString("store"), ::OpenAPI::toJsonValue(m_store));
    }
    if (m_store_name_isSet) {
        obj.insert(QString("storeName"), ::OpenAPI::toJsonValue(m_store_name));
    }
    if (m_store_reference_isSet) {
        obj.insert(QString("storeReference"), ::OpenAPI::toJsonValue(m_store_reference));
    }
    if (m_virtual_account_isSet) {
        obj.insert(QString("virtualAccount"), ::OpenAPI::toJsonValue(m_virtual_account));
    }
    if (m_web_address_isSet) {
        obj.insert(QString("webAddress"), ::OpenAPI::toJsonValue(m_web_address));
    }
    return obj;
}

OAIViasAddress OAIStoreDetail::getAddress() const {
    return m_address;
}
void OAIStoreDetail::setAddress(const OAIViasAddress &address) {
    m_address = address;
    m_address_isSet = true;
}

bool OAIStoreDetail::is_address_Set() const{
    return m_address_isSet;
}

bool OAIStoreDetail::is_address_Valid() const{
    return m_address_isValid;
}

QString OAIStoreDetail::getFullPhoneNumber() const {
    return m_full_phone_number;
}
void OAIStoreDetail::setFullPhoneNumber(const QString &full_phone_number) {
    m_full_phone_number = full_phone_number;
    m_full_phone_number_isSet = true;
}

bool OAIStoreDetail::is_full_phone_number_Set() const{
    return m_full_phone_number_isSet;
}

bool OAIStoreDetail::is_full_phone_number_Valid() const{
    return m_full_phone_number_isValid;
}

QString OAIStoreDetail::getLogo() const {
    return m_logo;
}
void OAIStoreDetail::setLogo(const QString &logo) {
    m_logo = logo;
    m_logo_isSet = true;
}

bool OAIStoreDetail::is_logo_Set() const{
    return m_logo_isSet;
}

bool OAIStoreDetail::is_logo_Valid() const{
    return m_logo_isValid;
}

QString OAIStoreDetail::getMerchantAccount() const {
    return m_merchant_account;
}
void OAIStoreDetail::setMerchantAccount(const QString &merchant_account) {
    m_merchant_account = merchant_account;
    m_merchant_account_isSet = true;
}

bool OAIStoreDetail::is_merchant_account_Set() const{
    return m_merchant_account_isSet;
}

bool OAIStoreDetail::is_merchant_account_Valid() const{
    return m_merchant_account_isValid;
}

QString OAIStoreDetail::getMerchantCategoryCode() const {
    return m_merchant_category_code;
}
void OAIStoreDetail::setMerchantCategoryCode(const QString &merchant_category_code) {
    m_merchant_category_code = merchant_category_code;
    m_merchant_category_code_isSet = true;
}

bool OAIStoreDetail::is_merchant_category_code_Set() const{
    return m_merchant_category_code_isSet;
}

bool OAIStoreDetail::is_merchant_category_code_Valid() const{
    return m_merchant_category_code_isValid;
}

QString OAIStoreDetail::getMerchantHouseNumber() const {
    return m_merchant_house_number;
}
void OAIStoreDetail::setMerchantHouseNumber(const QString &merchant_house_number) {
    m_merchant_house_number = merchant_house_number;
    m_merchant_house_number_isSet = true;
}

bool OAIStoreDetail::is_merchant_house_number_Set() const{
    return m_merchant_house_number_isSet;
}

bool OAIStoreDetail::is_merchant_house_number_Valid() const{
    return m_merchant_house_number_isValid;
}

OAIViasPhoneNumber OAIStoreDetail::getPhoneNumber() const {
    return m_phone_number;
}
void OAIStoreDetail::setPhoneNumber(const OAIViasPhoneNumber &phone_number) {
    m_phone_number = phone_number;
    m_phone_number_isSet = true;
}

bool OAIStoreDetail::is_phone_number_Set() const{
    return m_phone_number_isSet;
}

bool OAIStoreDetail::is_phone_number_Valid() const{
    return m_phone_number_isValid;
}

QString OAIStoreDetail::getShopperInteraction() const {
    return m_shopper_interaction;
}
void OAIStoreDetail::setShopperInteraction(const QString &shopper_interaction) {
    m_shopper_interaction = shopper_interaction;
    m_shopper_interaction_isSet = true;
}

bool OAIStoreDetail::is_shopper_interaction_Set() const{
    return m_shopper_interaction_isSet;
}

bool OAIStoreDetail::is_shopper_interaction_Valid() const{
    return m_shopper_interaction_isValid;
}

QString OAIStoreDetail::getSplitConfigurationUuid() const {
    return m_split_configuration_uuid;
}
void OAIStoreDetail::setSplitConfigurationUuid(const QString &split_configuration_uuid) {
    m_split_configuration_uuid = split_configuration_uuid;
    m_split_configuration_uuid_isSet = true;
}

bool OAIStoreDetail::is_split_configuration_uuid_Set() const{
    return m_split_configuration_uuid_isSet;
}

bool OAIStoreDetail::is_split_configuration_uuid_Valid() const{
    return m_split_configuration_uuid_isValid;
}

QString OAIStoreDetail::getStatus() const {
    return m_status;
}
void OAIStoreDetail::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIStoreDetail::is_status_Set() const{
    return m_status_isSet;
}

bool OAIStoreDetail::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIStoreDetail::getStore() const {
    return m_store;
}
void OAIStoreDetail::setStore(const QString &store) {
    m_store = store;
    m_store_isSet = true;
}

bool OAIStoreDetail::is_store_Set() const{
    return m_store_isSet;
}

bool OAIStoreDetail::is_store_Valid() const{
    return m_store_isValid;
}

QString OAIStoreDetail::getStoreName() const {
    return m_store_name;
}
void OAIStoreDetail::setStoreName(const QString &store_name) {
    m_store_name = store_name;
    m_store_name_isSet = true;
}

bool OAIStoreDetail::is_store_name_Set() const{
    return m_store_name_isSet;
}

bool OAIStoreDetail::is_store_name_Valid() const{
    return m_store_name_isValid;
}

QString OAIStoreDetail::getStoreReference() const {
    return m_store_reference;
}
void OAIStoreDetail::setStoreReference(const QString &store_reference) {
    m_store_reference = store_reference;
    m_store_reference_isSet = true;
}

bool OAIStoreDetail::is_store_reference_Set() const{
    return m_store_reference_isSet;
}

bool OAIStoreDetail::is_store_reference_Valid() const{
    return m_store_reference_isValid;
}

QString OAIStoreDetail::getVirtualAccount() const {
    return m_virtual_account;
}
void OAIStoreDetail::setVirtualAccount(const QString &virtual_account) {
    m_virtual_account = virtual_account;
    m_virtual_account_isSet = true;
}

bool OAIStoreDetail::is_virtual_account_Set() const{
    return m_virtual_account_isSet;
}

bool OAIStoreDetail::is_virtual_account_Valid() const{
    return m_virtual_account_isValid;
}

QString OAIStoreDetail::getWebAddress() const {
    return m_web_address;
}
void OAIStoreDetail::setWebAddress(const QString &web_address) {
    m_web_address = web_address;
    m_web_address_isSet = true;
}

bool OAIStoreDetail::is_web_address_Set() const{
    return m_web_address_isSet;
}

bool OAIStoreDetail::is_web_address_Valid() const{
    return m_web_address_isValid;
}

bool OAIStoreDetail::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_address.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_full_phone_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_logo_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_merchant_account_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_merchant_category_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_merchant_house_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phone_number.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_shopper_interaction_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_split_configuration_uuid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_store_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_store_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_store_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_virtual_account_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_web_address_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStoreDetail::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_address_isValid && m_merchant_account_isValid && m_merchant_category_code_isValid && true;
}

} // namespace OpenAPI
