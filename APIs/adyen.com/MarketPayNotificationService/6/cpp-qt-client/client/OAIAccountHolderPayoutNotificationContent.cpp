/**
 * Classic Platforms - Notifications
 * This API is used for the classic integration. If you are just starting your implementation, refer to our [new integration guide](https://docs.adyen.com/marketplaces-and-platforms) instead.  The Notification API sends notifications to the endpoints specified in a given subscription.  Subscriptions are managed through the Notification Configuration API. The API specifications listed here detail the format of each notification.  For more information, refer to our [documentation](https://docs.adyen.com/marketplaces-and-platforms/classic/notifications).
 *
 * The version of the OpenAPI document: 6
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAccountHolderPayoutNotificationContent.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAccountHolderPayoutNotificationContent::OAIAccountHolderPayoutNotificationContent(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAccountHolderPayoutNotificationContent::OAIAccountHolderPayoutNotificationContent() {
    this->initializeModel();
}

OAIAccountHolderPayoutNotificationContent::~OAIAccountHolderPayoutNotificationContent() {}

void OAIAccountHolderPayoutNotificationContent::initializeModel() {

    m_account_code_isSet = false;
    m_account_code_isValid = false;

    m_account_holder_code_isSet = false;
    m_account_holder_code_isValid = false;

    m_amounts_isSet = false;
    m_amounts_isValid = false;

    m_bank_account_detail_isSet = false;
    m_bank_account_detail_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_estimated_arrival_date_isSet = false;
    m_estimated_arrival_date_isValid = false;

    m_invalid_fields_isSet = false;
    m_invalid_fields_isValid = false;

    m_merchant_reference_isSet = false;
    m_merchant_reference_isValid = false;

    m_original_psp_reference_isSet = false;
    m_original_psp_reference_isValid = false;

    m_payout_account_country_isSet = false;
    m_payout_account_country_isValid = false;

    m_payout_account_number_isSet = false;
    m_payout_account_number_isValid = false;

    m_payout_balance_account_id_isSet = false;
    m_payout_balance_account_id_isValid = false;

    m_payout_bank_name_isSet = false;
    m_payout_bank_name_isValid = false;

    m_payout_branch_code_isSet = false;
    m_payout_branch_code_isValid = false;

    m_payout_reference_isSet = false;
    m_payout_reference_isValid = false;

    m_payout_speed_isSet = false;
    m_payout_speed_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIAccountHolderPayoutNotificationContent::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAccountHolderPayoutNotificationContent::fromJsonObject(QJsonObject json) {

    m_account_code_isValid = ::OpenAPI::fromJsonValue(m_account_code, json[QString("accountCode")]);
    m_account_code_isSet = !json[QString("accountCode")].isNull() && m_account_code_isValid;

    m_account_holder_code_isValid = ::OpenAPI::fromJsonValue(m_account_holder_code, json[QString("accountHolderCode")]);
    m_account_holder_code_isSet = !json[QString("accountHolderCode")].isNull() && m_account_holder_code_isValid;

    m_amounts_isValid = ::OpenAPI::fromJsonValue(m_amounts, json[QString("amounts")]);
    m_amounts_isSet = !json[QString("amounts")].isNull() && m_amounts_isValid;

    m_bank_account_detail_isValid = ::OpenAPI::fromJsonValue(m_bank_account_detail, json[QString("bankAccountDetail")]);
    m_bank_account_detail_isSet = !json[QString("bankAccountDetail")].isNull() && m_bank_account_detail_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_estimated_arrival_date_isValid = ::OpenAPI::fromJsonValue(m_estimated_arrival_date, json[QString("estimatedArrivalDate")]);
    m_estimated_arrival_date_isSet = !json[QString("estimatedArrivalDate")].isNull() && m_estimated_arrival_date_isValid;

    m_invalid_fields_isValid = ::OpenAPI::fromJsonValue(m_invalid_fields, json[QString("invalidFields")]);
    m_invalid_fields_isSet = !json[QString("invalidFields")].isNull() && m_invalid_fields_isValid;

    m_merchant_reference_isValid = ::OpenAPI::fromJsonValue(m_merchant_reference, json[QString("merchantReference")]);
    m_merchant_reference_isSet = !json[QString("merchantReference")].isNull() && m_merchant_reference_isValid;

    m_original_psp_reference_isValid = ::OpenAPI::fromJsonValue(m_original_psp_reference, json[QString("originalPspReference")]);
    m_original_psp_reference_isSet = !json[QString("originalPspReference")].isNull() && m_original_psp_reference_isValid;

    m_payout_account_country_isValid = ::OpenAPI::fromJsonValue(m_payout_account_country, json[QString("payoutAccountCountry")]);
    m_payout_account_country_isSet = !json[QString("payoutAccountCountry")].isNull() && m_payout_account_country_isValid;

    m_payout_account_number_isValid = ::OpenAPI::fromJsonValue(m_payout_account_number, json[QString("payoutAccountNumber")]);
    m_payout_account_number_isSet = !json[QString("payoutAccountNumber")].isNull() && m_payout_account_number_isValid;

    m_payout_balance_account_id_isValid = ::OpenAPI::fromJsonValue(m_payout_balance_account_id, json[QString("payoutBalanceAccountId")]);
    m_payout_balance_account_id_isSet = !json[QString("payoutBalanceAccountId")].isNull() && m_payout_balance_account_id_isValid;

    m_payout_bank_name_isValid = ::OpenAPI::fromJsonValue(m_payout_bank_name, json[QString("payoutBankName")]);
    m_payout_bank_name_isSet = !json[QString("payoutBankName")].isNull() && m_payout_bank_name_isValid;

    m_payout_branch_code_isValid = ::OpenAPI::fromJsonValue(m_payout_branch_code, json[QString("payoutBranchCode")]);
    m_payout_branch_code_isSet = !json[QString("payoutBranchCode")].isNull() && m_payout_branch_code_isValid;

    m_payout_reference_isValid = ::OpenAPI::fromJsonValue(m_payout_reference, json[QString("payoutReference")]);
    m_payout_reference_isSet = !json[QString("payoutReference")].isNull() && m_payout_reference_isValid;

    m_payout_speed_isValid = ::OpenAPI::fromJsonValue(m_payout_speed, json[QString("payoutSpeed")]);
    m_payout_speed_isSet = !json[QString("payoutSpeed")].isNull() && m_payout_speed_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAIAccountHolderPayoutNotificationContent::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAccountHolderPayoutNotificationContent::asJsonObject() const {
    QJsonObject obj;
    if (m_account_code_isSet) {
        obj.insert(QString("accountCode"), ::OpenAPI::toJsonValue(m_account_code));
    }
    if (m_account_holder_code_isSet) {
        obj.insert(QString("accountHolderCode"), ::OpenAPI::toJsonValue(m_account_holder_code));
    }
    if (m_amounts.size() > 0) {
        obj.insert(QString("amounts"), ::OpenAPI::toJsonValue(m_amounts));
    }
    if (m_bank_account_detail.isSet()) {
        obj.insert(QString("bankAccountDetail"), ::OpenAPI::toJsonValue(m_bank_account_detail));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_estimated_arrival_date.isSet()) {
        obj.insert(QString("estimatedArrivalDate"), ::OpenAPI::toJsonValue(m_estimated_arrival_date));
    }
    if (m_invalid_fields.size() > 0) {
        obj.insert(QString("invalidFields"), ::OpenAPI::toJsonValue(m_invalid_fields));
    }
    if (m_merchant_reference_isSet) {
        obj.insert(QString("merchantReference"), ::OpenAPI::toJsonValue(m_merchant_reference));
    }
    if (m_original_psp_reference_isSet) {
        obj.insert(QString("originalPspReference"), ::OpenAPI::toJsonValue(m_original_psp_reference));
    }
    if (m_payout_account_country_isSet) {
        obj.insert(QString("payoutAccountCountry"), ::OpenAPI::toJsonValue(m_payout_account_country));
    }
    if (m_payout_account_number_isSet) {
        obj.insert(QString("payoutAccountNumber"), ::OpenAPI::toJsonValue(m_payout_account_number));
    }
    if (m_payout_balance_account_id_isSet) {
        obj.insert(QString("payoutBalanceAccountId"), ::OpenAPI::toJsonValue(m_payout_balance_account_id));
    }
    if (m_payout_bank_name_isSet) {
        obj.insert(QString("payoutBankName"), ::OpenAPI::toJsonValue(m_payout_bank_name));
    }
    if (m_payout_branch_code_isSet) {
        obj.insert(QString("payoutBranchCode"), ::OpenAPI::toJsonValue(m_payout_branch_code));
    }
    if (m_payout_reference_isSet) {
        obj.insert(QString("payoutReference"), ::OpenAPI::toJsonValue(m_payout_reference));
    }
    if (m_payout_speed_isSet) {
        obj.insert(QString("payoutSpeed"), ::OpenAPI::toJsonValue(m_payout_speed));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QString OAIAccountHolderPayoutNotificationContent::getAccountCode() const {
    return m_account_code;
}
void OAIAccountHolderPayoutNotificationContent::setAccountCode(const QString &account_code) {
    m_account_code = account_code;
    m_account_code_isSet = true;
}

bool OAIAccountHolderPayoutNotificationContent::is_account_code_Set() const{
    return m_account_code_isSet;
}

bool OAIAccountHolderPayoutNotificationContent::is_account_code_Valid() const{
    return m_account_code_isValid;
}

QString OAIAccountHolderPayoutNotificationContent::getAccountHolderCode() const {
    return m_account_holder_code;
}
void OAIAccountHolderPayoutNotificationContent::setAccountHolderCode(const QString &account_holder_code) {
    m_account_holder_code = account_holder_code;
    m_account_holder_code_isSet = true;
}

bool OAIAccountHolderPayoutNotificationContent::is_account_holder_code_Set() const{
    return m_account_holder_code_isSet;
}

bool OAIAccountHolderPayoutNotificationContent::is_account_holder_code_Valid() const{
    return m_account_holder_code_isValid;
}

QList<OAIAmount> OAIAccountHolderPayoutNotificationContent::getAmounts() const {
    return m_amounts;
}
void OAIAccountHolderPayoutNotificationContent::setAmounts(const QList<OAIAmount> &amounts) {
    m_amounts = amounts;
    m_amounts_isSet = true;
}

bool OAIAccountHolderPayoutNotificationContent::is_amounts_Set() const{
    return m_amounts_isSet;
}

bool OAIAccountHolderPayoutNotificationContent::is_amounts_Valid() const{
    return m_amounts_isValid;
}

OAIBankAccountDetail OAIAccountHolderPayoutNotificationContent::getBankAccountDetail() const {
    return m_bank_account_detail;
}
void OAIAccountHolderPayoutNotificationContent::setBankAccountDetail(const OAIBankAccountDetail &bank_account_detail) {
    m_bank_account_detail = bank_account_detail;
    m_bank_account_detail_isSet = true;
}

bool OAIAccountHolderPayoutNotificationContent::is_bank_account_detail_Set() const{
    return m_bank_account_detail_isSet;
}

bool OAIAccountHolderPayoutNotificationContent::is_bank_account_detail_Valid() const{
    return m_bank_account_detail_isValid;
}

QString OAIAccountHolderPayoutNotificationContent::getDescription() const {
    return m_description;
}
void OAIAccountHolderPayoutNotificationContent::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIAccountHolderPayoutNotificationContent::is_description_Set() const{
    return m_description_isSet;
}

bool OAIAccountHolderPayoutNotificationContent::is_description_Valid() const{
    return m_description_isValid;
}

OAILocalDate OAIAccountHolderPayoutNotificationContent::getEstimatedArrivalDate() const {
    return m_estimated_arrival_date;
}
void OAIAccountHolderPayoutNotificationContent::setEstimatedArrivalDate(const OAILocalDate &estimated_arrival_date) {
    m_estimated_arrival_date = estimated_arrival_date;
    m_estimated_arrival_date_isSet = true;
}

bool OAIAccountHolderPayoutNotificationContent::is_estimated_arrival_date_Set() const{
    return m_estimated_arrival_date_isSet;
}

bool OAIAccountHolderPayoutNotificationContent::is_estimated_arrival_date_Valid() const{
    return m_estimated_arrival_date_isValid;
}

QList<OAIErrorFieldType> OAIAccountHolderPayoutNotificationContent::getInvalidFields() const {
    return m_invalid_fields;
}
void OAIAccountHolderPayoutNotificationContent::setInvalidFields(const QList<OAIErrorFieldType> &invalid_fields) {
    m_invalid_fields = invalid_fields;
    m_invalid_fields_isSet = true;
}

bool OAIAccountHolderPayoutNotificationContent::is_invalid_fields_Set() const{
    return m_invalid_fields_isSet;
}

bool OAIAccountHolderPayoutNotificationContent::is_invalid_fields_Valid() const{
    return m_invalid_fields_isValid;
}

QString OAIAccountHolderPayoutNotificationContent::getMerchantReference() const {
    return m_merchant_reference;
}
void OAIAccountHolderPayoutNotificationContent::setMerchantReference(const QString &merchant_reference) {
    m_merchant_reference = merchant_reference;
    m_merchant_reference_isSet = true;
}

bool OAIAccountHolderPayoutNotificationContent::is_merchant_reference_Set() const{
    return m_merchant_reference_isSet;
}

bool OAIAccountHolderPayoutNotificationContent::is_merchant_reference_Valid() const{
    return m_merchant_reference_isValid;
}

QString OAIAccountHolderPayoutNotificationContent::getOriginalPspReference() const {
    return m_original_psp_reference;
}
void OAIAccountHolderPayoutNotificationContent::setOriginalPspReference(const QString &original_psp_reference) {
    m_original_psp_reference = original_psp_reference;
    m_original_psp_reference_isSet = true;
}

bool OAIAccountHolderPayoutNotificationContent::is_original_psp_reference_Set() const{
    return m_original_psp_reference_isSet;
}

bool OAIAccountHolderPayoutNotificationContent::is_original_psp_reference_Valid() const{
    return m_original_psp_reference_isValid;
}

QString OAIAccountHolderPayoutNotificationContent::getPayoutAccountCountry() const {
    return m_payout_account_country;
}
void OAIAccountHolderPayoutNotificationContent::setPayoutAccountCountry(const QString &payout_account_country) {
    m_payout_account_country = payout_account_country;
    m_payout_account_country_isSet = true;
}

bool OAIAccountHolderPayoutNotificationContent::is_payout_account_country_Set() const{
    return m_payout_account_country_isSet;
}

bool OAIAccountHolderPayoutNotificationContent::is_payout_account_country_Valid() const{
    return m_payout_account_country_isValid;
}

QString OAIAccountHolderPayoutNotificationContent::getPayoutAccountNumber() const {
    return m_payout_account_number;
}
void OAIAccountHolderPayoutNotificationContent::setPayoutAccountNumber(const QString &payout_account_number) {
    m_payout_account_number = payout_account_number;
    m_payout_account_number_isSet = true;
}

bool OAIAccountHolderPayoutNotificationContent::is_payout_account_number_Set() const{
    return m_payout_account_number_isSet;
}

bool OAIAccountHolderPayoutNotificationContent::is_payout_account_number_Valid() const{
    return m_payout_account_number_isValid;
}

QString OAIAccountHolderPayoutNotificationContent::getPayoutBalanceAccountId() const {
    return m_payout_balance_account_id;
}
void OAIAccountHolderPayoutNotificationContent::setPayoutBalanceAccountId(const QString &payout_balance_account_id) {
    m_payout_balance_account_id = payout_balance_account_id;
    m_payout_balance_account_id_isSet = true;
}

bool OAIAccountHolderPayoutNotificationContent::is_payout_balance_account_id_Set() const{
    return m_payout_balance_account_id_isSet;
}

bool OAIAccountHolderPayoutNotificationContent::is_payout_balance_account_id_Valid() const{
    return m_payout_balance_account_id_isValid;
}

QString OAIAccountHolderPayoutNotificationContent::getPayoutBankName() const {
    return m_payout_bank_name;
}
void OAIAccountHolderPayoutNotificationContent::setPayoutBankName(const QString &payout_bank_name) {
    m_payout_bank_name = payout_bank_name;
    m_payout_bank_name_isSet = true;
}

bool OAIAccountHolderPayoutNotificationContent::is_payout_bank_name_Set() const{
    return m_payout_bank_name_isSet;
}

bool OAIAccountHolderPayoutNotificationContent::is_payout_bank_name_Valid() const{
    return m_payout_bank_name_isValid;
}

QString OAIAccountHolderPayoutNotificationContent::getPayoutBranchCode() const {
    return m_payout_branch_code;
}
void OAIAccountHolderPayoutNotificationContent::setPayoutBranchCode(const QString &payout_branch_code) {
    m_payout_branch_code = payout_branch_code;
    m_payout_branch_code_isSet = true;
}

bool OAIAccountHolderPayoutNotificationContent::is_payout_branch_code_Set() const{
    return m_payout_branch_code_isSet;
}

bool OAIAccountHolderPayoutNotificationContent::is_payout_branch_code_Valid() const{
    return m_payout_branch_code_isValid;
}

qint64 OAIAccountHolderPayoutNotificationContent::getPayoutReference() const {
    return m_payout_reference;
}
void OAIAccountHolderPayoutNotificationContent::setPayoutReference(const qint64 &payout_reference) {
    m_payout_reference = payout_reference;
    m_payout_reference_isSet = true;
}

bool OAIAccountHolderPayoutNotificationContent::is_payout_reference_Set() const{
    return m_payout_reference_isSet;
}

bool OAIAccountHolderPayoutNotificationContent::is_payout_reference_Valid() const{
    return m_payout_reference_isValid;
}

QString OAIAccountHolderPayoutNotificationContent::getPayoutSpeed() const {
    return m_payout_speed;
}
void OAIAccountHolderPayoutNotificationContent::setPayoutSpeed(const QString &payout_speed) {
    m_payout_speed = payout_speed;
    m_payout_speed_isSet = true;
}

bool OAIAccountHolderPayoutNotificationContent::is_payout_speed_Set() const{
    return m_payout_speed_isSet;
}

bool OAIAccountHolderPayoutNotificationContent::is_payout_speed_Valid() const{
    return m_payout_speed_isValid;
}

OAIOperationStatus OAIAccountHolderPayoutNotificationContent::getStatus() const {
    return m_status;
}
void OAIAccountHolderPayoutNotificationContent::setStatus(const OAIOperationStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIAccountHolderPayoutNotificationContent::is_status_Set() const{
    return m_status_isSet;
}

bool OAIAccountHolderPayoutNotificationContent::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIAccountHolderPayoutNotificationContent::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_account_holder_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_amounts.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_bank_account_detail.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_estimated_arrival_date.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_invalid_fields.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_merchant_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_original_psp_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payout_account_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payout_account_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payout_balance_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payout_bank_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payout_branch_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payout_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payout_speed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAccountHolderPayoutNotificationContent::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
