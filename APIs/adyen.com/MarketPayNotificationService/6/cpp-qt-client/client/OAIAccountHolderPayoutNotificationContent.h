/**
 * Classic Platforms - Notifications
 * This API is used for the classic integration. If you are just starting your implementation, refer to our [new integration guide](https://docs.adyen.com/marketplaces-and-platforms) instead.  The Notification API sends notifications to the endpoints specified in a given subscription.  Subscriptions are managed through the Notification Configuration API. The API specifications listed here detail the format of each notification.  For more information, refer to our [documentation](https://docs.adyen.com/marketplaces-and-platforms/classic/notifications).
 *
 * The version of the OpenAPI document: 6
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIAccountHolderPayoutNotificationContent.h
 *
 * 
 */

#ifndef OAIAccountHolderPayoutNotificationContent_H
#define OAIAccountHolderPayoutNotificationContent_H

#include <QJsonObject>

#include "OAIAmount.h"
#include "OAIBankAccountDetail.h"
#include "OAIErrorFieldType.h"
#include "OAILocalDate.h"
#include "OAIOperationStatus.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIAmount;
class OAIBankAccountDetail;
class OAILocalDate;
class OAIErrorFieldType;
class OAIOperationStatus;

class OAIAccountHolderPayoutNotificationContent : public OAIObject {
public:
    OAIAccountHolderPayoutNotificationContent();
    OAIAccountHolderPayoutNotificationContent(QString json);
    ~OAIAccountHolderPayoutNotificationContent() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAccountCode() const;
    void setAccountCode(const QString &account_code);
    bool is_account_code_Set() const;
    bool is_account_code_Valid() const;

    QString getAccountHolderCode() const;
    void setAccountHolderCode(const QString &account_holder_code);
    bool is_account_holder_code_Set() const;
    bool is_account_holder_code_Valid() const;

    QList<OAIAmount> getAmounts() const;
    void setAmounts(const QList<OAIAmount> &amounts);
    bool is_amounts_Set() const;
    bool is_amounts_Valid() const;

    OAIBankAccountDetail getBankAccountDetail() const;
    void setBankAccountDetail(const OAIBankAccountDetail &bank_account_detail);
    bool is_bank_account_detail_Set() const;
    bool is_bank_account_detail_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    OAILocalDate getEstimatedArrivalDate() const;
    void setEstimatedArrivalDate(const OAILocalDate &estimated_arrival_date);
    bool is_estimated_arrival_date_Set() const;
    bool is_estimated_arrival_date_Valid() const;

    QList<OAIErrorFieldType> getInvalidFields() const;
    void setInvalidFields(const QList<OAIErrorFieldType> &invalid_fields);
    bool is_invalid_fields_Set() const;
    bool is_invalid_fields_Valid() const;

    QString getMerchantReference() const;
    void setMerchantReference(const QString &merchant_reference);
    bool is_merchant_reference_Set() const;
    bool is_merchant_reference_Valid() const;

    QString getOriginalPspReference() const;
    void setOriginalPspReference(const QString &original_psp_reference);
    bool is_original_psp_reference_Set() const;
    bool is_original_psp_reference_Valid() const;

    QString getPayoutAccountCountry() const;
    void setPayoutAccountCountry(const QString &payout_account_country);
    bool is_payout_account_country_Set() const;
    bool is_payout_account_country_Valid() const;

    QString getPayoutAccountNumber() const;
    void setPayoutAccountNumber(const QString &payout_account_number);
    bool is_payout_account_number_Set() const;
    bool is_payout_account_number_Valid() const;

    QString getPayoutBalanceAccountId() const;
    void setPayoutBalanceAccountId(const QString &payout_balance_account_id);
    bool is_payout_balance_account_id_Set() const;
    bool is_payout_balance_account_id_Valid() const;

    QString getPayoutBankName() const;
    void setPayoutBankName(const QString &payout_bank_name);
    bool is_payout_bank_name_Set() const;
    bool is_payout_bank_name_Valid() const;

    QString getPayoutBranchCode() const;
    void setPayoutBranchCode(const QString &payout_branch_code);
    bool is_payout_branch_code_Set() const;
    bool is_payout_branch_code_Valid() const;

    qint64 getPayoutReference() const;
    void setPayoutReference(const qint64 &payout_reference);
    bool is_payout_reference_Set() const;
    bool is_payout_reference_Valid() const;

    QString getPayoutSpeed() const;
    void setPayoutSpeed(const QString &payout_speed);
    bool is_payout_speed_Set() const;
    bool is_payout_speed_Valid() const;

    OAIOperationStatus getStatus() const;
    void setStatus(const OAIOperationStatus &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_account_code;
    bool m_account_code_isSet;
    bool m_account_code_isValid;

    QString m_account_holder_code;
    bool m_account_holder_code_isSet;
    bool m_account_holder_code_isValid;

    QList<OAIAmount> m_amounts;
    bool m_amounts_isSet;
    bool m_amounts_isValid;

    OAIBankAccountDetail m_bank_account_detail;
    bool m_bank_account_detail_isSet;
    bool m_bank_account_detail_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    OAILocalDate m_estimated_arrival_date;
    bool m_estimated_arrival_date_isSet;
    bool m_estimated_arrival_date_isValid;

    QList<OAIErrorFieldType> m_invalid_fields;
    bool m_invalid_fields_isSet;
    bool m_invalid_fields_isValid;

    QString m_merchant_reference;
    bool m_merchant_reference_isSet;
    bool m_merchant_reference_isValid;

    QString m_original_psp_reference;
    bool m_original_psp_reference_isSet;
    bool m_original_psp_reference_isValid;

    QString m_payout_account_country;
    bool m_payout_account_country_isSet;
    bool m_payout_account_country_isValid;

    QString m_payout_account_number;
    bool m_payout_account_number_isSet;
    bool m_payout_account_number_isValid;

    QString m_payout_balance_account_id;
    bool m_payout_balance_account_id_isSet;
    bool m_payout_balance_account_id_isValid;

    QString m_payout_bank_name;
    bool m_payout_bank_name_isSet;
    bool m_payout_bank_name_isValid;

    QString m_payout_branch_code;
    bool m_payout_branch_code_isSet;
    bool m_payout_branch_code_isValid;

    qint64 m_payout_reference;
    bool m_payout_reference_isSet;
    bool m_payout_reference_isValid;

    QString m_payout_speed;
    bool m_payout_speed_isSet;
    bool m_payout_speed_isValid;

    OAIOperationStatus m_status;
    bool m_status_isSet;
    bool m_status_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIAccountHolderPayoutNotificationContent)

#endif // OAIAccountHolderPayoutNotificationContent_H
