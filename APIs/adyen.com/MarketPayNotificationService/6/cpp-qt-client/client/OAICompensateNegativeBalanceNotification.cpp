/**
 * Classic Platforms - Notifications
 * This API is used for the classic integration. If you are just starting your implementation, refer to our [new integration guide](https://docs.adyen.com/marketplaces-and-platforms) instead.  The Notification API sends notifications to the endpoints specified in a given subscription.  Subscriptions are managed through the Notification Configuration API. The API specifications listed here detail the format of each notification.  For more information, refer to our [documentation](https://docs.adyen.com/marketplaces-and-platforms/classic/notifications).
 *
 * The version of the OpenAPI document: 6
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICompensateNegativeBalanceNotification.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICompensateNegativeBalanceNotification::OAICompensateNegativeBalanceNotification(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICompensateNegativeBalanceNotification::OAICompensateNegativeBalanceNotification() {
    this->initializeModel();
}

OAICompensateNegativeBalanceNotification::~OAICompensateNegativeBalanceNotification() {}

void OAICompensateNegativeBalanceNotification::initializeModel() {

    m_content_isSet = false;
    m_content_isValid = false;

    m_error_isSet = false;
    m_error_isValid = false;

    m_event_date_isSet = false;
    m_event_date_isValid = false;

    m_event_type_isSet = false;
    m_event_type_isValid = false;

    m_executing_user_key_isSet = false;
    m_executing_user_key_isValid = false;

    m_live_isSet = false;
    m_live_isValid = false;

    m_psp_reference_isSet = false;
    m_psp_reference_isValid = false;
}

void OAICompensateNegativeBalanceNotification::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICompensateNegativeBalanceNotification::fromJsonObject(QJsonObject json) {

    m_content_isValid = ::OpenAPI::fromJsonValue(m_content, json[QString("content")]);
    m_content_isSet = !json[QString("content")].isNull() && m_content_isValid;

    m_error_isValid = ::OpenAPI::fromJsonValue(m_error, json[QString("error")]);
    m_error_isSet = !json[QString("error")].isNull() && m_error_isValid;

    m_event_date_isValid = ::OpenAPI::fromJsonValue(m_event_date, json[QString("eventDate")]);
    m_event_date_isSet = !json[QString("eventDate")].isNull() && m_event_date_isValid;

    m_event_type_isValid = ::OpenAPI::fromJsonValue(m_event_type, json[QString("eventType")]);
    m_event_type_isSet = !json[QString("eventType")].isNull() && m_event_type_isValid;

    m_executing_user_key_isValid = ::OpenAPI::fromJsonValue(m_executing_user_key, json[QString("executingUserKey")]);
    m_executing_user_key_isSet = !json[QString("executingUserKey")].isNull() && m_executing_user_key_isValid;

    m_live_isValid = ::OpenAPI::fromJsonValue(m_live, json[QString("live")]);
    m_live_isSet = !json[QString("live")].isNull() && m_live_isValid;

    m_psp_reference_isValid = ::OpenAPI::fromJsonValue(m_psp_reference, json[QString("pspReference")]);
    m_psp_reference_isSet = !json[QString("pspReference")].isNull() && m_psp_reference_isValid;
}

QString OAICompensateNegativeBalanceNotification::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICompensateNegativeBalanceNotification::asJsonObject() const {
    QJsonObject obj;
    if (m_content.isSet()) {
        obj.insert(QString("content"), ::OpenAPI::toJsonValue(m_content));
    }
    if (m_error.isSet()) {
        obj.insert(QString("error"), ::OpenAPI::toJsonValue(m_error));
    }
    if (m_event_date_isSet) {
        obj.insert(QString("eventDate"), ::OpenAPI::toJsonValue(m_event_date));
    }
    if (m_event_type_isSet) {
        obj.insert(QString("eventType"), ::OpenAPI::toJsonValue(m_event_type));
    }
    if (m_executing_user_key_isSet) {
        obj.insert(QString("executingUserKey"), ::OpenAPI::toJsonValue(m_executing_user_key));
    }
    if (m_live_isSet) {
        obj.insert(QString("live"), ::OpenAPI::toJsonValue(m_live));
    }
    if (m_psp_reference_isSet) {
        obj.insert(QString("pspReference"), ::OpenAPI::toJsonValue(m_psp_reference));
    }
    return obj;
}

OAICompensateNegativeBalanceNotificationContent OAICompensateNegativeBalanceNotification::getContent() const {
    return m_content;
}
void OAICompensateNegativeBalanceNotification::setContent(const OAICompensateNegativeBalanceNotificationContent &content) {
    m_content = content;
    m_content_isSet = true;
}

bool OAICompensateNegativeBalanceNotification::is_content_Set() const{
    return m_content_isSet;
}

bool OAICompensateNegativeBalanceNotification::is_content_Valid() const{
    return m_content_isValid;
}

OAINotificationErrorContainer OAICompensateNegativeBalanceNotification::getError() const {
    return m_error;
}
void OAICompensateNegativeBalanceNotification::setError(const OAINotificationErrorContainer &error) {
    m_error = error;
    m_error_isSet = true;
}

bool OAICompensateNegativeBalanceNotification::is_error_Set() const{
    return m_error_isSet;
}

bool OAICompensateNegativeBalanceNotification::is_error_Valid() const{
    return m_error_isValid;
}

QDateTime OAICompensateNegativeBalanceNotification::getEventDate() const {
    return m_event_date;
}
void OAICompensateNegativeBalanceNotification::setEventDate(const QDateTime &event_date) {
    m_event_date = event_date;
    m_event_date_isSet = true;
}

bool OAICompensateNegativeBalanceNotification::is_event_date_Set() const{
    return m_event_date_isSet;
}

bool OAICompensateNegativeBalanceNotification::is_event_date_Valid() const{
    return m_event_date_isValid;
}

QString OAICompensateNegativeBalanceNotification::getEventType() const {
    return m_event_type;
}
void OAICompensateNegativeBalanceNotification::setEventType(const QString &event_type) {
    m_event_type = event_type;
    m_event_type_isSet = true;
}

bool OAICompensateNegativeBalanceNotification::is_event_type_Set() const{
    return m_event_type_isSet;
}

bool OAICompensateNegativeBalanceNotification::is_event_type_Valid() const{
    return m_event_type_isValid;
}

QString OAICompensateNegativeBalanceNotification::getExecutingUserKey() const {
    return m_executing_user_key;
}
void OAICompensateNegativeBalanceNotification::setExecutingUserKey(const QString &executing_user_key) {
    m_executing_user_key = executing_user_key;
    m_executing_user_key_isSet = true;
}

bool OAICompensateNegativeBalanceNotification::is_executing_user_key_Set() const{
    return m_executing_user_key_isSet;
}

bool OAICompensateNegativeBalanceNotification::is_executing_user_key_Valid() const{
    return m_executing_user_key_isValid;
}

bool OAICompensateNegativeBalanceNotification::isLive() const {
    return m_live;
}
void OAICompensateNegativeBalanceNotification::setLive(const bool &live) {
    m_live = live;
    m_live_isSet = true;
}

bool OAICompensateNegativeBalanceNotification::is_live_Set() const{
    return m_live_isSet;
}

bool OAICompensateNegativeBalanceNotification::is_live_Valid() const{
    return m_live_isValid;
}

QString OAICompensateNegativeBalanceNotification::getPspReference() const {
    return m_psp_reference;
}
void OAICompensateNegativeBalanceNotification::setPspReference(const QString &psp_reference) {
    m_psp_reference = psp_reference;
    m_psp_reference_isSet = true;
}

bool OAICompensateNegativeBalanceNotification::is_psp_reference_Set() const{
    return m_psp_reference_isSet;
}

bool OAICompensateNegativeBalanceNotification::is_psp_reference_Valid() const{
    return m_psp_reference_isValid;
}

bool OAICompensateNegativeBalanceNotification::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_content.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_error.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_executing_user_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_live_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_psp_reference_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICompensateNegativeBalanceNotification::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_event_date_isValid && m_event_type_isValid && m_executing_user_key_isValid && m_live_isValid && m_psp_reference_isValid && true;
}

} // namespace OpenAPI
