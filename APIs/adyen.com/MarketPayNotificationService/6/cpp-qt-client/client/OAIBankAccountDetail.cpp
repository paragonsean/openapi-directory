/**
 * Classic Platforms - Notifications
 * This API is used for the classic integration. If you are just starting your implementation, refer to our [new integration guide](https://docs.adyen.com/marketplaces-and-platforms) instead.  The Notification API sends notifications to the endpoints specified in a given subscription.  Subscriptions are managed through the Notification Configuration API. The API specifications listed here detail the format of each notification.  For more information, refer to our [documentation](https://docs.adyen.com/marketplaces-and-platforms/classic/notifications).
 *
 * The version of the OpenAPI document: 6
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBankAccountDetail.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBankAccountDetail::OAIBankAccountDetail(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBankAccountDetail::OAIBankAccountDetail() {
    this->initializeModel();
}

OAIBankAccountDetail::~OAIBankAccountDetail() {}

void OAIBankAccountDetail::initializeModel() {

    m_account_number_isSet = false;
    m_account_number_isValid = false;

    m_account_type_isSet = false;
    m_account_type_isValid = false;

    m_bank_account_name_isSet = false;
    m_bank_account_name_isValid = false;

    m_bank_account_reference_isSet = false;
    m_bank_account_reference_isValid = false;

    m_bank_account_uuid_isSet = false;
    m_bank_account_uuid_isValid = false;

    m_bank_bic_swift_isSet = false;
    m_bank_bic_swift_isValid = false;

    m_bank_city_isSet = false;
    m_bank_city_isValid = false;

    m_bank_code_isSet = false;
    m_bank_code_isValid = false;

    m_bank_name_isSet = false;
    m_bank_name_isValid = false;

    m_branch_code_isSet = false;
    m_branch_code_isValid = false;

    m_check_code_isSet = false;
    m_check_code_isValid = false;

    m_country_code_isSet = false;
    m_country_code_isValid = false;

    m_currency_code_isSet = false;
    m_currency_code_isValid = false;

    m_iban_isSet = false;
    m_iban_isValid = false;

    m_owner_city_isSet = false;
    m_owner_city_isValid = false;

    m_owner_country_code_isSet = false;
    m_owner_country_code_isValid = false;

    m_owner_date_of_birth_isSet = false;
    m_owner_date_of_birth_isValid = false;

    m_owner_house_number_or_name_isSet = false;
    m_owner_house_number_or_name_isValid = false;

    m_owner_name_isSet = false;
    m_owner_name_isValid = false;

    m_owner_nationality_isSet = false;
    m_owner_nationality_isValid = false;

    m_owner_postal_code_isSet = false;
    m_owner_postal_code_isValid = false;

    m_owner_state_isSet = false;
    m_owner_state_isValid = false;

    m_owner_street_isSet = false;
    m_owner_street_isValid = false;

    m_primary_account_isSet = false;
    m_primary_account_isValid = false;

    m_tax_id_isSet = false;
    m_tax_id_isValid = false;

    m_url_for_verification_isSet = false;
    m_url_for_verification_isValid = false;
}

void OAIBankAccountDetail::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBankAccountDetail::fromJsonObject(QJsonObject json) {

    m_account_number_isValid = ::OpenAPI::fromJsonValue(m_account_number, json[QString("accountNumber")]);
    m_account_number_isSet = !json[QString("accountNumber")].isNull() && m_account_number_isValid;

    m_account_type_isValid = ::OpenAPI::fromJsonValue(m_account_type, json[QString("accountType")]);
    m_account_type_isSet = !json[QString("accountType")].isNull() && m_account_type_isValid;

    m_bank_account_name_isValid = ::OpenAPI::fromJsonValue(m_bank_account_name, json[QString("bankAccountName")]);
    m_bank_account_name_isSet = !json[QString("bankAccountName")].isNull() && m_bank_account_name_isValid;

    m_bank_account_reference_isValid = ::OpenAPI::fromJsonValue(m_bank_account_reference, json[QString("bankAccountReference")]);
    m_bank_account_reference_isSet = !json[QString("bankAccountReference")].isNull() && m_bank_account_reference_isValid;

    m_bank_account_uuid_isValid = ::OpenAPI::fromJsonValue(m_bank_account_uuid, json[QString("bankAccountUUID")]);
    m_bank_account_uuid_isSet = !json[QString("bankAccountUUID")].isNull() && m_bank_account_uuid_isValid;

    m_bank_bic_swift_isValid = ::OpenAPI::fromJsonValue(m_bank_bic_swift, json[QString("bankBicSwift")]);
    m_bank_bic_swift_isSet = !json[QString("bankBicSwift")].isNull() && m_bank_bic_swift_isValid;

    m_bank_city_isValid = ::OpenAPI::fromJsonValue(m_bank_city, json[QString("bankCity")]);
    m_bank_city_isSet = !json[QString("bankCity")].isNull() && m_bank_city_isValid;

    m_bank_code_isValid = ::OpenAPI::fromJsonValue(m_bank_code, json[QString("bankCode")]);
    m_bank_code_isSet = !json[QString("bankCode")].isNull() && m_bank_code_isValid;

    m_bank_name_isValid = ::OpenAPI::fromJsonValue(m_bank_name, json[QString("bankName")]);
    m_bank_name_isSet = !json[QString("bankName")].isNull() && m_bank_name_isValid;

    m_branch_code_isValid = ::OpenAPI::fromJsonValue(m_branch_code, json[QString("branchCode")]);
    m_branch_code_isSet = !json[QString("branchCode")].isNull() && m_branch_code_isValid;

    m_check_code_isValid = ::OpenAPI::fromJsonValue(m_check_code, json[QString("checkCode")]);
    m_check_code_isSet = !json[QString("checkCode")].isNull() && m_check_code_isValid;

    m_country_code_isValid = ::OpenAPI::fromJsonValue(m_country_code, json[QString("countryCode")]);
    m_country_code_isSet = !json[QString("countryCode")].isNull() && m_country_code_isValid;

    m_currency_code_isValid = ::OpenAPI::fromJsonValue(m_currency_code, json[QString("currencyCode")]);
    m_currency_code_isSet = !json[QString("currencyCode")].isNull() && m_currency_code_isValid;

    m_iban_isValid = ::OpenAPI::fromJsonValue(m_iban, json[QString("iban")]);
    m_iban_isSet = !json[QString("iban")].isNull() && m_iban_isValid;

    m_owner_city_isValid = ::OpenAPI::fromJsonValue(m_owner_city, json[QString("ownerCity")]);
    m_owner_city_isSet = !json[QString("ownerCity")].isNull() && m_owner_city_isValid;

    m_owner_country_code_isValid = ::OpenAPI::fromJsonValue(m_owner_country_code, json[QString("ownerCountryCode")]);
    m_owner_country_code_isSet = !json[QString("ownerCountryCode")].isNull() && m_owner_country_code_isValid;

    m_owner_date_of_birth_isValid = ::OpenAPI::fromJsonValue(m_owner_date_of_birth, json[QString("ownerDateOfBirth")]);
    m_owner_date_of_birth_isSet = !json[QString("ownerDateOfBirth")].isNull() && m_owner_date_of_birth_isValid;

    m_owner_house_number_or_name_isValid = ::OpenAPI::fromJsonValue(m_owner_house_number_or_name, json[QString("ownerHouseNumberOrName")]);
    m_owner_house_number_or_name_isSet = !json[QString("ownerHouseNumberOrName")].isNull() && m_owner_house_number_or_name_isValid;

    m_owner_name_isValid = ::OpenAPI::fromJsonValue(m_owner_name, json[QString("ownerName")]);
    m_owner_name_isSet = !json[QString("ownerName")].isNull() && m_owner_name_isValid;

    m_owner_nationality_isValid = ::OpenAPI::fromJsonValue(m_owner_nationality, json[QString("ownerNationality")]);
    m_owner_nationality_isSet = !json[QString("ownerNationality")].isNull() && m_owner_nationality_isValid;

    m_owner_postal_code_isValid = ::OpenAPI::fromJsonValue(m_owner_postal_code, json[QString("ownerPostalCode")]);
    m_owner_postal_code_isSet = !json[QString("ownerPostalCode")].isNull() && m_owner_postal_code_isValid;

    m_owner_state_isValid = ::OpenAPI::fromJsonValue(m_owner_state, json[QString("ownerState")]);
    m_owner_state_isSet = !json[QString("ownerState")].isNull() && m_owner_state_isValid;

    m_owner_street_isValid = ::OpenAPI::fromJsonValue(m_owner_street, json[QString("ownerStreet")]);
    m_owner_street_isSet = !json[QString("ownerStreet")].isNull() && m_owner_street_isValid;

    m_primary_account_isValid = ::OpenAPI::fromJsonValue(m_primary_account, json[QString("primaryAccount")]);
    m_primary_account_isSet = !json[QString("primaryAccount")].isNull() && m_primary_account_isValid;

    m_tax_id_isValid = ::OpenAPI::fromJsonValue(m_tax_id, json[QString("taxId")]);
    m_tax_id_isSet = !json[QString("taxId")].isNull() && m_tax_id_isValid;

    m_url_for_verification_isValid = ::OpenAPI::fromJsonValue(m_url_for_verification, json[QString("urlForVerification")]);
    m_url_for_verification_isSet = !json[QString("urlForVerification")].isNull() && m_url_for_verification_isValid;
}

QString OAIBankAccountDetail::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBankAccountDetail::asJsonObject() const {
    QJsonObject obj;
    if (m_account_number_isSet) {
        obj.insert(QString("accountNumber"), ::OpenAPI::toJsonValue(m_account_number));
    }
    if (m_account_type_isSet) {
        obj.insert(QString("accountType"), ::OpenAPI::toJsonValue(m_account_type));
    }
    if (m_bank_account_name_isSet) {
        obj.insert(QString("bankAccountName"), ::OpenAPI::toJsonValue(m_bank_account_name));
    }
    if (m_bank_account_reference_isSet) {
        obj.insert(QString("bankAccountReference"), ::OpenAPI::toJsonValue(m_bank_account_reference));
    }
    if (m_bank_account_uuid_isSet) {
        obj.insert(QString("bankAccountUUID"), ::OpenAPI::toJsonValue(m_bank_account_uuid));
    }
    if (m_bank_bic_swift_isSet) {
        obj.insert(QString("bankBicSwift"), ::OpenAPI::toJsonValue(m_bank_bic_swift));
    }
    if (m_bank_city_isSet) {
        obj.insert(QString("bankCity"), ::OpenAPI::toJsonValue(m_bank_city));
    }
    if (m_bank_code_isSet) {
        obj.insert(QString("bankCode"), ::OpenAPI::toJsonValue(m_bank_code));
    }
    if (m_bank_name_isSet) {
        obj.insert(QString("bankName"), ::OpenAPI::toJsonValue(m_bank_name));
    }
    if (m_branch_code_isSet) {
        obj.insert(QString("branchCode"), ::OpenAPI::toJsonValue(m_branch_code));
    }
    if (m_check_code_isSet) {
        obj.insert(QString("checkCode"), ::OpenAPI::toJsonValue(m_check_code));
    }
    if (m_country_code_isSet) {
        obj.insert(QString("countryCode"), ::OpenAPI::toJsonValue(m_country_code));
    }
    if (m_currency_code_isSet) {
        obj.insert(QString("currencyCode"), ::OpenAPI::toJsonValue(m_currency_code));
    }
    if (m_iban_isSet) {
        obj.insert(QString("iban"), ::OpenAPI::toJsonValue(m_iban));
    }
    if (m_owner_city_isSet) {
        obj.insert(QString("ownerCity"), ::OpenAPI::toJsonValue(m_owner_city));
    }
    if (m_owner_country_code_isSet) {
        obj.insert(QString("ownerCountryCode"), ::OpenAPI::toJsonValue(m_owner_country_code));
    }
    if (m_owner_date_of_birth_isSet) {
        obj.insert(QString("ownerDateOfBirth"), ::OpenAPI::toJsonValue(m_owner_date_of_birth));
    }
    if (m_owner_house_number_or_name_isSet) {
        obj.insert(QString("ownerHouseNumberOrName"), ::OpenAPI::toJsonValue(m_owner_house_number_or_name));
    }
    if (m_owner_name_isSet) {
        obj.insert(QString("ownerName"), ::OpenAPI::toJsonValue(m_owner_name));
    }
    if (m_owner_nationality_isSet) {
        obj.insert(QString("ownerNationality"), ::OpenAPI::toJsonValue(m_owner_nationality));
    }
    if (m_owner_postal_code_isSet) {
        obj.insert(QString("ownerPostalCode"), ::OpenAPI::toJsonValue(m_owner_postal_code));
    }
    if (m_owner_state_isSet) {
        obj.insert(QString("ownerState"), ::OpenAPI::toJsonValue(m_owner_state));
    }
    if (m_owner_street_isSet) {
        obj.insert(QString("ownerStreet"), ::OpenAPI::toJsonValue(m_owner_street));
    }
    if (m_primary_account_isSet) {
        obj.insert(QString("primaryAccount"), ::OpenAPI::toJsonValue(m_primary_account));
    }
    if (m_tax_id_isSet) {
        obj.insert(QString("taxId"), ::OpenAPI::toJsonValue(m_tax_id));
    }
    if (m_url_for_verification_isSet) {
        obj.insert(QString("urlForVerification"), ::OpenAPI::toJsonValue(m_url_for_verification));
    }
    return obj;
}

QString OAIBankAccountDetail::getAccountNumber() const {
    return m_account_number;
}
void OAIBankAccountDetail::setAccountNumber(const QString &account_number) {
    m_account_number = account_number;
    m_account_number_isSet = true;
}

bool OAIBankAccountDetail::is_account_number_Set() const{
    return m_account_number_isSet;
}

bool OAIBankAccountDetail::is_account_number_Valid() const{
    return m_account_number_isValid;
}

QString OAIBankAccountDetail::getAccountType() const {
    return m_account_type;
}
void OAIBankAccountDetail::setAccountType(const QString &account_type) {
    m_account_type = account_type;
    m_account_type_isSet = true;
}

bool OAIBankAccountDetail::is_account_type_Set() const{
    return m_account_type_isSet;
}

bool OAIBankAccountDetail::is_account_type_Valid() const{
    return m_account_type_isValid;
}

QString OAIBankAccountDetail::getBankAccountName() const {
    return m_bank_account_name;
}
void OAIBankAccountDetail::setBankAccountName(const QString &bank_account_name) {
    m_bank_account_name = bank_account_name;
    m_bank_account_name_isSet = true;
}

bool OAIBankAccountDetail::is_bank_account_name_Set() const{
    return m_bank_account_name_isSet;
}

bool OAIBankAccountDetail::is_bank_account_name_Valid() const{
    return m_bank_account_name_isValid;
}

QString OAIBankAccountDetail::getBankAccountReference() const {
    return m_bank_account_reference;
}
void OAIBankAccountDetail::setBankAccountReference(const QString &bank_account_reference) {
    m_bank_account_reference = bank_account_reference;
    m_bank_account_reference_isSet = true;
}

bool OAIBankAccountDetail::is_bank_account_reference_Set() const{
    return m_bank_account_reference_isSet;
}

bool OAIBankAccountDetail::is_bank_account_reference_Valid() const{
    return m_bank_account_reference_isValid;
}

QString OAIBankAccountDetail::getBankAccountUuid() const {
    return m_bank_account_uuid;
}
void OAIBankAccountDetail::setBankAccountUuid(const QString &bank_account_uuid) {
    m_bank_account_uuid = bank_account_uuid;
    m_bank_account_uuid_isSet = true;
}

bool OAIBankAccountDetail::is_bank_account_uuid_Set() const{
    return m_bank_account_uuid_isSet;
}

bool OAIBankAccountDetail::is_bank_account_uuid_Valid() const{
    return m_bank_account_uuid_isValid;
}

QString OAIBankAccountDetail::getBankBicSwift() const {
    return m_bank_bic_swift;
}
void OAIBankAccountDetail::setBankBicSwift(const QString &bank_bic_swift) {
    m_bank_bic_swift = bank_bic_swift;
    m_bank_bic_swift_isSet = true;
}

bool OAIBankAccountDetail::is_bank_bic_swift_Set() const{
    return m_bank_bic_swift_isSet;
}

bool OAIBankAccountDetail::is_bank_bic_swift_Valid() const{
    return m_bank_bic_swift_isValid;
}

QString OAIBankAccountDetail::getBankCity() const {
    return m_bank_city;
}
void OAIBankAccountDetail::setBankCity(const QString &bank_city) {
    m_bank_city = bank_city;
    m_bank_city_isSet = true;
}

bool OAIBankAccountDetail::is_bank_city_Set() const{
    return m_bank_city_isSet;
}

bool OAIBankAccountDetail::is_bank_city_Valid() const{
    return m_bank_city_isValid;
}

QString OAIBankAccountDetail::getBankCode() const {
    return m_bank_code;
}
void OAIBankAccountDetail::setBankCode(const QString &bank_code) {
    m_bank_code = bank_code;
    m_bank_code_isSet = true;
}

bool OAIBankAccountDetail::is_bank_code_Set() const{
    return m_bank_code_isSet;
}

bool OAIBankAccountDetail::is_bank_code_Valid() const{
    return m_bank_code_isValid;
}

QString OAIBankAccountDetail::getBankName() const {
    return m_bank_name;
}
void OAIBankAccountDetail::setBankName(const QString &bank_name) {
    m_bank_name = bank_name;
    m_bank_name_isSet = true;
}

bool OAIBankAccountDetail::is_bank_name_Set() const{
    return m_bank_name_isSet;
}

bool OAIBankAccountDetail::is_bank_name_Valid() const{
    return m_bank_name_isValid;
}

QString OAIBankAccountDetail::getBranchCode() const {
    return m_branch_code;
}
void OAIBankAccountDetail::setBranchCode(const QString &branch_code) {
    m_branch_code = branch_code;
    m_branch_code_isSet = true;
}

bool OAIBankAccountDetail::is_branch_code_Set() const{
    return m_branch_code_isSet;
}

bool OAIBankAccountDetail::is_branch_code_Valid() const{
    return m_branch_code_isValid;
}

QString OAIBankAccountDetail::getCheckCode() const {
    return m_check_code;
}
void OAIBankAccountDetail::setCheckCode(const QString &check_code) {
    m_check_code = check_code;
    m_check_code_isSet = true;
}

bool OAIBankAccountDetail::is_check_code_Set() const{
    return m_check_code_isSet;
}

bool OAIBankAccountDetail::is_check_code_Valid() const{
    return m_check_code_isValid;
}

QString OAIBankAccountDetail::getCountryCode() const {
    return m_country_code;
}
void OAIBankAccountDetail::setCountryCode(const QString &country_code) {
    m_country_code = country_code;
    m_country_code_isSet = true;
}

bool OAIBankAccountDetail::is_country_code_Set() const{
    return m_country_code_isSet;
}

bool OAIBankAccountDetail::is_country_code_Valid() const{
    return m_country_code_isValid;
}

QString OAIBankAccountDetail::getCurrencyCode() const {
    return m_currency_code;
}
void OAIBankAccountDetail::setCurrencyCode(const QString &currency_code) {
    m_currency_code = currency_code;
    m_currency_code_isSet = true;
}

bool OAIBankAccountDetail::is_currency_code_Set() const{
    return m_currency_code_isSet;
}

bool OAIBankAccountDetail::is_currency_code_Valid() const{
    return m_currency_code_isValid;
}

QString OAIBankAccountDetail::getIban() const {
    return m_iban;
}
void OAIBankAccountDetail::setIban(const QString &iban) {
    m_iban = iban;
    m_iban_isSet = true;
}

bool OAIBankAccountDetail::is_iban_Set() const{
    return m_iban_isSet;
}

bool OAIBankAccountDetail::is_iban_Valid() const{
    return m_iban_isValid;
}

QString OAIBankAccountDetail::getOwnerCity() const {
    return m_owner_city;
}
void OAIBankAccountDetail::setOwnerCity(const QString &owner_city) {
    m_owner_city = owner_city;
    m_owner_city_isSet = true;
}

bool OAIBankAccountDetail::is_owner_city_Set() const{
    return m_owner_city_isSet;
}

bool OAIBankAccountDetail::is_owner_city_Valid() const{
    return m_owner_city_isValid;
}

QString OAIBankAccountDetail::getOwnerCountryCode() const {
    return m_owner_country_code;
}
void OAIBankAccountDetail::setOwnerCountryCode(const QString &owner_country_code) {
    m_owner_country_code = owner_country_code;
    m_owner_country_code_isSet = true;
}

bool OAIBankAccountDetail::is_owner_country_code_Set() const{
    return m_owner_country_code_isSet;
}

bool OAIBankAccountDetail::is_owner_country_code_Valid() const{
    return m_owner_country_code_isValid;
}

QString OAIBankAccountDetail::getOwnerDateOfBirth() const {
    return m_owner_date_of_birth;
}
void OAIBankAccountDetail::setOwnerDateOfBirth(const QString &owner_date_of_birth) {
    m_owner_date_of_birth = owner_date_of_birth;
    m_owner_date_of_birth_isSet = true;
}

bool OAIBankAccountDetail::is_owner_date_of_birth_Set() const{
    return m_owner_date_of_birth_isSet;
}

bool OAIBankAccountDetail::is_owner_date_of_birth_Valid() const{
    return m_owner_date_of_birth_isValid;
}

QString OAIBankAccountDetail::getOwnerHouseNumberOrName() const {
    return m_owner_house_number_or_name;
}
void OAIBankAccountDetail::setOwnerHouseNumberOrName(const QString &owner_house_number_or_name) {
    m_owner_house_number_or_name = owner_house_number_or_name;
    m_owner_house_number_or_name_isSet = true;
}

bool OAIBankAccountDetail::is_owner_house_number_or_name_Set() const{
    return m_owner_house_number_or_name_isSet;
}

bool OAIBankAccountDetail::is_owner_house_number_or_name_Valid() const{
    return m_owner_house_number_or_name_isValid;
}

QString OAIBankAccountDetail::getOwnerName() const {
    return m_owner_name;
}
void OAIBankAccountDetail::setOwnerName(const QString &owner_name) {
    m_owner_name = owner_name;
    m_owner_name_isSet = true;
}

bool OAIBankAccountDetail::is_owner_name_Set() const{
    return m_owner_name_isSet;
}

bool OAIBankAccountDetail::is_owner_name_Valid() const{
    return m_owner_name_isValid;
}

QString OAIBankAccountDetail::getOwnerNationality() const {
    return m_owner_nationality;
}
void OAIBankAccountDetail::setOwnerNationality(const QString &owner_nationality) {
    m_owner_nationality = owner_nationality;
    m_owner_nationality_isSet = true;
}

bool OAIBankAccountDetail::is_owner_nationality_Set() const{
    return m_owner_nationality_isSet;
}

bool OAIBankAccountDetail::is_owner_nationality_Valid() const{
    return m_owner_nationality_isValid;
}

QString OAIBankAccountDetail::getOwnerPostalCode() const {
    return m_owner_postal_code;
}
void OAIBankAccountDetail::setOwnerPostalCode(const QString &owner_postal_code) {
    m_owner_postal_code = owner_postal_code;
    m_owner_postal_code_isSet = true;
}

bool OAIBankAccountDetail::is_owner_postal_code_Set() const{
    return m_owner_postal_code_isSet;
}

bool OAIBankAccountDetail::is_owner_postal_code_Valid() const{
    return m_owner_postal_code_isValid;
}

QString OAIBankAccountDetail::getOwnerState() const {
    return m_owner_state;
}
void OAIBankAccountDetail::setOwnerState(const QString &owner_state) {
    m_owner_state = owner_state;
    m_owner_state_isSet = true;
}

bool OAIBankAccountDetail::is_owner_state_Set() const{
    return m_owner_state_isSet;
}

bool OAIBankAccountDetail::is_owner_state_Valid() const{
    return m_owner_state_isValid;
}

QString OAIBankAccountDetail::getOwnerStreet() const {
    return m_owner_street;
}
void OAIBankAccountDetail::setOwnerStreet(const QString &owner_street) {
    m_owner_street = owner_street;
    m_owner_street_isSet = true;
}

bool OAIBankAccountDetail::is_owner_street_Set() const{
    return m_owner_street_isSet;
}

bool OAIBankAccountDetail::is_owner_street_Valid() const{
    return m_owner_street_isValid;
}

bool OAIBankAccountDetail::isPrimaryAccount() const {
    return m_primary_account;
}
void OAIBankAccountDetail::setPrimaryAccount(const bool &primary_account) {
    m_primary_account = primary_account;
    m_primary_account_isSet = true;
}

bool OAIBankAccountDetail::is_primary_account_Set() const{
    return m_primary_account_isSet;
}

bool OAIBankAccountDetail::is_primary_account_Valid() const{
    return m_primary_account_isValid;
}

QString OAIBankAccountDetail::getTaxId() const {
    return m_tax_id;
}
void OAIBankAccountDetail::setTaxId(const QString &tax_id) {
    m_tax_id = tax_id;
    m_tax_id_isSet = true;
}

bool OAIBankAccountDetail::is_tax_id_Set() const{
    return m_tax_id_isSet;
}

bool OAIBankAccountDetail::is_tax_id_Valid() const{
    return m_tax_id_isValid;
}

QString OAIBankAccountDetail::getUrlForVerification() const {
    return m_url_for_verification;
}
void OAIBankAccountDetail::setUrlForVerification(const QString &url_for_verification) {
    m_url_for_verification = url_for_verification;
    m_url_for_verification_isSet = true;
}

bool OAIBankAccountDetail::is_url_for_verification_Set() const{
    return m_url_for_verification_isSet;
}

bool OAIBankAccountDetail::is_url_for_verification_Valid() const{
    return m_url_for_verification_isValid;
}

bool OAIBankAccountDetail::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_account_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bank_account_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bank_account_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bank_account_uuid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bank_bic_swift_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bank_city_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bank_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bank_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_branch_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_check_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_iban_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner_city_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner_country_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner_date_of_birth_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner_house_number_or_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner_nationality_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner_postal_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner_street_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary_account_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_for_verification_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBankAccountDetail::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
