# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.legal_arrangement_entity_detail import LegalArrangementEntityDetail
from openapi_server.models.vias_address import ViasAddress
from openapi_server import util


class LegalArrangementDetail(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address: ViasAddress=None, legal_arrangement_code: str=None, legal_arrangement_entities: List[LegalArrangementEntityDetail]=None, legal_arrangement_reference: str=None, legal_form: str=None, name: str=None, registration_number: str=None, tax_number: str=None, type: str=None):
        """LegalArrangementDetail - a model defined in OpenAPI

        :param address: The address of this LegalArrangementDetail.
        :param legal_arrangement_code: The legal_arrangement_code of this LegalArrangementDetail.
        :param legal_arrangement_entities: The legal_arrangement_entities of this LegalArrangementDetail.
        :param legal_arrangement_reference: The legal_arrangement_reference of this LegalArrangementDetail.
        :param legal_form: The legal_form of this LegalArrangementDetail.
        :param name: The name of this LegalArrangementDetail.
        :param registration_number: The registration_number of this LegalArrangementDetail.
        :param tax_number: The tax_number of this LegalArrangementDetail.
        :param type: The type of this LegalArrangementDetail.
        """
        self.openapi_types = {
            'address': ViasAddress,
            'legal_arrangement_code': str,
            'legal_arrangement_entities': List[LegalArrangementEntityDetail],
            'legal_arrangement_reference': str,
            'legal_form': str,
            'name': str,
            'registration_number': str,
            'tax_number': str,
            'type': str
        }

        self.attribute_map = {
            'address': 'address',
            'legal_arrangement_code': 'legalArrangementCode',
            'legal_arrangement_entities': 'legalArrangementEntities',
            'legal_arrangement_reference': 'legalArrangementReference',
            'legal_form': 'legalForm',
            'name': 'name',
            'registration_number': 'registrationNumber',
            'tax_number': 'taxNumber',
            'type': 'type'
        }

        self._address = address
        self._legal_arrangement_code = legal_arrangement_code
        self._legal_arrangement_entities = legal_arrangement_entities
        self._legal_arrangement_reference = legal_arrangement_reference
        self._legal_form = legal_form
        self._name = name
        self._registration_number = registration_number
        self._tax_number = tax_number
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LegalArrangementDetail':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LegalArrangementDetail of this LegalArrangementDetail.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address(self):
        """Gets the address of this LegalArrangementDetail.

        The address of the legal arrangement.

        :return: The address of this LegalArrangementDetail.
        :rtype: ViasAddress
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this LegalArrangementDetail.

        The address of the legal arrangement.

        :param address: The address of this LegalArrangementDetail.
        :type address: ViasAddress
        """
        if address is None:
            raise ValueError("Invalid value for `address`, must not be `None`")

        self._address = address

    @property
    def legal_arrangement_code(self):
        """Gets the legal_arrangement_code of this LegalArrangementDetail.

        Adyen-generated unique alphanumeric identifier (UUID) for the entry, returned in the response when you create a legal arrangement. Use only when updating an account holder. If you include this field when creating an account holder, the request will fail.

        :return: The legal_arrangement_code of this LegalArrangementDetail.
        :rtype: str
        """
        return self._legal_arrangement_code

    @legal_arrangement_code.setter
    def legal_arrangement_code(self, legal_arrangement_code):
        """Sets the legal_arrangement_code of this LegalArrangementDetail.

        Adyen-generated unique alphanumeric identifier (UUID) for the entry, returned in the response when you create a legal arrangement. Use only when updating an account holder. If you include this field when creating an account holder, the request will fail.

        :param legal_arrangement_code: The legal_arrangement_code of this LegalArrangementDetail.
        :type legal_arrangement_code: str
        """

        self._legal_arrangement_code = legal_arrangement_code

    @property
    def legal_arrangement_entities(self):
        """Gets the legal_arrangement_entities of this LegalArrangementDetail.

        An array containing information about other entities that are part of the legal arrangement.

        :return: The legal_arrangement_entities of this LegalArrangementDetail.
        :rtype: List[LegalArrangementEntityDetail]
        """
        return self._legal_arrangement_entities

    @legal_arrangement_entities.setter
    def legal_arrangement_entities(self, legal_arrangement_entities):
        """Sets the legal_arrangement_entities of this LegalArrangementDetail.

        An array containing information about other entities that are part of the legal arrangement.

        :param legal_arrangement_entities: The legal_arrangement_entities of this LegalArrangementDetail.
        :type legal_arrangement_entities: List[LegalArrangementEntityDetail]
        """

        self._legal_arrangement_entities = legal_arrangement_entities

    @property
    def legal_arrangement_reference(self):
        """Gets the legal_arrangement_reference of this LegalArrangementDetail.

        Your reference for the legal arrangement. Must be between 3 to 128 characters.

        :return: The legal_arrangement_reference of this LegalArrangementDetail.
        :rtype: str
        """
        return self._legal_arrangement_reference

    @legal_arrangement_reference.setter
    def legal_arrangement_reference(self, legal_arrangement_reference):
        """Sets the legal_arrangement_reference of this LegalArrangementDetail.

        Your reference for the legal arrangement. Must be between 3 to 128 characters.

        :param legal_arrangement_reference: The legal_arrangement_reference of this LegalArrangementDetail.
        :type legal_arrangement_reference: str
        """

        self._legal_arrangement_reference = legal_arrangement_reference

    @property
    def legal_form(self):
        """Gets the legal_form of this LegalArrangementDetail.

        The form of legal arrangement. Required if `type` is **Trust** or **Partnership**.  The possible values depend on the `type`.  - For `type` **Trust**:  **CashManagementTrust**, **CorporateUnitTrust**, **DeceasedEstate**, **DiscretionaryInvestmentTrust**, **DiscretionaryServicesManagementTrust**, **DiscretionaryTradingTrust**, **FirstHomeSaverAccountsTrust**, **FixedTrust**, **FixedUnitTrust**, **HybridTrust**, **ListedPublicUnitTrust**, **OtherTrust**, **PooledSuperannuationTrust**, **PublicTradingTrust**, or **UnlistedPublicUnitTrust**.  - For `type` **Partnership**: **LimitedPartnership**, **FamilyPartnership**, or **OtherPartnership**

        :return: The legal_form of this LegalArrangementDetail.
        :rtype: str
        """
        return self._legal_form

    @legal_form.setter
    def legal_form(self, legal_form):
        """Sets the legal_form of this LegalArrangementDetail.

        The form of legal arrangement. Required if `type` is **Trust** or **Partnership**.  The possible values depend on the `type`.  - For `type` **Trust**:  **CashManagementTrust**, **CorporateUnitTrust**, **DeceasedEstate**, **DiscretionaryInvestmentTrust**, **DiscretionaryServicesManagementTrust**, **DiscretionaryTradingTrust**, **FirstHomeSaverAccountsTrust**, **FixedTrust**, **FixedUnitTrust**, **HybridTrust**, **ListedPublicUnitTrust**, **OtherTrust**, **PooledSuperannuationTrust**, **PublicTradingTrust**, or **UnlistedPublicUnitTrust**.  - For `type` **Partnership**: **LimitedPartnership**, **FamilyPartnership**, or **OtherPartnership**

        :param legal_form: The legal_form of this LegalArrangementDetail.
        :type legal_form: str
        """
        allowed_values = ["CashManagementTrust", "CorporateUnitTrust", "DeceasedEstate", "DiscretionaryInvestmentTrust", "DiscretionaryServicesManagementTrust", "DiscretionaryTradingTrust", "FirstHomeSaverAccountsTrust", "FixedTrust", "FixedUnitTrust", "HybridTrust", "ListedPublicUnitTrust", "OtherTrust", "PooledSuperannuationTrust", "PublicTradingTrust", "UnlistedPublicUnitTrust", "LimitedPartnership", "FamilyPartnership", "OtherPartnership"]  # noqa: E501
        if legal_form not in allowed_values:
            raise ValueError(
                "Invalid value for `legal_form` ({0}), must be one of {1}"
                .format(legal_form, allowed_values)
            )

        self._legal_form = legal_form

    @property
    def name(self):
        """Gets the name of this LegalArrangementDetail.

        The legal name of the legal arrangement. Minimum length: 3 characters.

        :return: The name of this LegalArrangementDetail.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this LegalArrangementDetail.

        The legal name of the legal arrangement. Minimum length: 3 characters.

        :param name: The name of this LegalArrangementDetail.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def registration_number(self):
        """Gets the registration_number of this LegalArrangementDetail.

        The registration number of the legal arrangement.

        :return: The registration_number of this LegalArrangementDetail.
        :rtype: str
        """
        return self._registration_number

    @registration_number.setter
    def registration_number(self, registration_number):
        """Sets the registration_number of this LegalArrangementDetail.

        The registration number of the legal arrangement.

        :param registration_number: The registration_number of this LegalArrangementDetail.
        :type registration_number: str
        """

        self._registration_number = registration_number

    @property
    def tax_number(self):
        """Gets the tax_number of this LegalArrangementDetail.

        The tax identification number of the legal arrangement.

        :return: The tax_number of this LegalArrangementDetail.
        :rtype: str
        """
        return self._tax_number

    @tax_number.setter
    def tax_number(self, tax_number):
        """Sets the tax_number of this LegalArrangementDetail.

        The tax identification number of the legal arrangement.

        :param tax_number: The tax_number of this LegalArrangementDetail.
        :type tax_number: str
        """

        self._tax_number = tax_number

    @property
    def type(self):
        """Gets the type of this LegalArrangementDetail.

        The [type of legal arrangement](https://docs.adyen.com/marketplaces-and-platforms/classic/verification-process/legal-arrangements#types-of-legal-arrangements).  Possible values:  - **Association**   - **Partnership**   - **SoleProprietorship**   - **Trust**   

        :return: The type of this LegalArrangementDetail.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this LegalArrangementDetail.

        The [type of legal arrangement](https://docs.adyen.com/marketplaces-and-platforms/classic/verification-process/legal-arrangements#types-of-legal-arrangements).  Possible values:  - **Association**   - **Partnership**   - **SoleProprietorship**   - **Trust**   

        :param type: The type of this LegalArrangementDetail.
        :type type: str
        """
        allowed_values = ["Association", "Partnership", "SoleProprietorship", "Trust"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
