# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.error_field_type import ErrorFieldType
from openapi_server import util


class BeneficiarySetupNotificationContent(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, destination_account_code: str=None, destination_account_holder_code: str=None, invalid_fields: List[ErrorFieldType]=None, merchant_reference: str=None, source_account_code: str=None, source_account_holder_code: str=None, transfer_date: datetime=None):
        """BeneficiarySetupNotificationContent - a model defined in OpenAPI

        :param destination_account_code: The destination_account_code of this BeneficiarySetupNotificationContent.
        :param destination_account_holder_code: The destination_account_holder_code of this BeneficiarySetupNotificationContent.
        :param invalid_fields: The invalid_fields of this BeneficiarySetupNotificationContent.
        :param merchant_reference: The merchant_reference of this BeneficiarySetupNotificationContent.
        :param source_account_code: The source_account_code of this BeneficiarySetupNotificationContent.
        :param source_account_holder_code: The source_account_holder_code of this BeneficiarySetupNotificationContent.
        :param transfer_date: The transfer_date of this BeneficiarySetupNotificationContent.
        """
        self.openapi_types = {
            'destination_account_code': str,
            'destination_account_holder_code': str,
            'invalid_fields': List[ErrorFieldType],
            'merchant_reference': str,
            'source_account_code': str,
            'source_account_holder_code': str,
            'transfer_date': datetime
        }

        self.attribute_map = {
            'destination_account_code': 'destinationAccountCode',
            'destination_account_holder_code': 'destinationAccountHolderCode',
            'invalid_fields': 'invalidFields',
            'merchant_reference': 'merchantReference',
            'source_account_code': 'sourceAccountCode',
            'source_account_holder_code': 'sourceAccountHolderCode',
            'transfer_date': 'transferDate'
        }

        self._destination_account_code = destination_account_code
        self._destination_account_holder_code = destination_account_holder_code
        self._invalid_fields = invalid_fields
        self._merchant_reference = merchant_reference
        self._source_account_code = source_account_code
        self._source_account_holder_code = source_account_holder_code
        self._transfer_date = transfer_date

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BeneficiarySetupNotificationContent':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BeneficiarySetupNotificationContent of this BeneficiarySetupNotificationContent.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def destination_account_code(self):
        """Gets the destination_account_code of this BeneficiarySetupNotificationContent.

        The code of the beneficiary account.

        :return: The destination_account_code of this BeneficiarySetupNotificationContent.
        :rtype: str
        """
        return self._destination_account_code

    @destination_account_code.setter
    def destination_account_code(self, destination_account_code):
        """Sets the destination_account_code of this BeneficiarySetupNotificationContent.

        The code of the beneficiary account.

        :param destination_account_code: The destination_account_code of this BeneficiarySetupNotificationContent.
        :type destination_account_code: str
        """

        self._destination_account_code = destination_account_code

    @property
    def destination_account_holder_code(self):
        """Gets the destination_account_holder_code of this BeneficiarySetupNotificationContent.

        The code of the beneficiary Account Holder.

        :return: The destination_account_holder_code of this BeneficiarySetupNotificationContent.
        :rtype: str
        """
        return self._destination_account_holder_code

    @destination_account_holder_code.setter
    def destination_account_holder_code(self, destination_account_holder_code):
        """Sets the destination_account_holder_code of this BeneficiarySetupNotificationContent.

        The code of the beneficiary Account Holder.

        :param destination_account_holder_code: The destination_account_holder_code of this BeneficiarySetupNotificationContent.
        :type destination_account_holder_code: str
        """

        self._destination_account_holder_code = destination_account_holder_code

    @property
    def invalid_fields(self):
        """Gets the invalid_fields of this BeneficiarySetupNotificationContent.

        A listing of the invalid fields which have caused the Setup Beneficiary request to fail. If this is empty, the Setup Beneficiary request has succeeded.

        :return: The invalid_fields of this BeneficiarySetupNotificationContent.
        :rtype: List[ErrorFieldType]
        """
        return self._invalid_fields

    @invalid_fields.setter
    def invalid_fields(self, invalid_fields):
        """Sets the invalid_fields of this BeneficiarySetupNotificationContent.

        A listing of the invalid fields which have caused the Setup Beneficiary request to fail. If this is empty, the Setup Beneficiary request has succeeded.

        :param invalid_fields: The invalid_fields of this BeneficiarySetupNotificationContent.
        :type invalid_fields: List[ErrorFieldType]
        """

        self._invalid_fields = invalid_fields

    @property
    def merchant_reference(self):
        """Gets the merchant_reference of this BeneficiarySetupNotificationContent.

        The reference provided by the merchant.

        :return: The merchant_reference of this BeneficiarySetupNotificationContent.
        :rtype: str
        """
        return self._merchant_reference

    @merchant_reference.setter
    def merchant_reference(self, merchant_reference):
        """Sets the merchant_reference of this BeneficiarySetupNotificationContent.

        The reference provided by the merchant.

        :param merchant_reference: The merchant_reference of this BeneficiarySetupNotificationContent.
        :type merchant_reference: str
        """

        self._merchant_reference = merchant_reference

    @property
    def source_account_code(self):
        """Gets the source_account_code of this BeneficiarySetupNotificationContent.

        The code of the benefactor account.

        :return: The source_account_code of this BeneficiarySetupNotificationContent.
        :rtype: str
        """
        return self._source_account_code

    @source_account_code.setter
    def source_account_code(self, source_account_code):
        """Sets the source_account_code of this BeneficiarySetupNotificationContent.

        The code of the benefactor account.

        :param source_account_code: The source_account_code of this BeneficiarySetupNotificationContent.
        :type source_account_code: str
        """

        self._source_account_code = source_account_code

    @property
    def source_account_holder_code(self):
        """Gets the source_account_holder_code of this BeneficiarySetupNotificationContent.

        The code of the benefactor Account Holder.

        :return: The source_account_holder_code of this BeneficiarySetupNotificationContent.
        :rtype: str
        """
        return self._source_account_holder_code

    @source_account_holder_code.setter
    def source_account_holder_code(self, source_account_holder_code):
        """Sets the source_account_holder_code of this BeneficiarySetupNotificationContent.

        The code of the benefactor Account Holder.

        :param source_account_holder_code: The source_account_holder_code of this BeneficiarySetupNotificationContent.
        :type source_account_holder_code: str
        """

        self._source_account_holder_code = source_account_holder_code

    @property
    def transfer_date(self):
        """Gets the transfer_date of this BeneficiarySetupNotificationContent.

        The date on which the beneficiary was set up and funds transferred from benefactor to beneficiary.

        :return: The transfer_date of this BeneficiarySetupNotificationContent.
        :rtype: datetime
        """
        return self._transfer_date

    @transfer_date.setter
    def transfer_date(self, transfer_date):
        """Sets the transfer_date of this BeneficiarySetupNotificationContent.

        The date on which the beneficiary was set up and funds transferred from benefactor to beneficiary.

        :param transfer_date: The transfer_date of this BeneficiarySetupNotificationContent.
        :type transfer_date: datetime
        """

        self._transfer_date = transfer_date
