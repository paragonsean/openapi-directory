# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.error_field_type import ErrorFieldType
from openapi_server import util


class AccountHolderStoreStatusChangeNotificationContent(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_holder_code: str=None, invalid_fields: List[ErrorFieldType]=None, new_status: str=None, old_status: str=None, reason: str=None, store: str=None, store_reference: str=None):
        """AccountHolderStoreStatusChangeNotificationContent - a model defined in OpenAPI

        :param account_holder_code: The account_holder_code of this AccountHolderStoreStatusChangeNotificationContent.
        :param invalid_fields: The invalid_fields of this AccountHolderStoreStatusChangeNotificationContent.
        :param new_status: The new_status of this AccountHolderStoreStatusChangeNotificationContent.
        :param old_status: The old_status of this AccountHolderStoreStatusChangeNotificationContent.
        :param reason: The reason of this AccountHolderStoreStatusChangeNotificationContent.
        :param store: The store of this AccountHolderStoreStatusChangeNotificationContent.
        :param store_reference: The store_reference of this AccountHolderStoreStatusChangeNotificationContent.
        """
        self.openapi_types = {
            'account_holder_code': str,
            'invalid_fields': List[ErrorFieldType],
            'new_status': str,
            'old_status': str,
            'reason': str,
            'store': str,
            'store_reference': str
        }

        self.attribute_map = {
            'account_holder_code': 'accountHolderCode',
            'invalid_fields': 'invalidFields',
            'new_status': 'newStatus',
            'old_status': 'oldStatus',
            'reason': 'reason',
            'store': 'store',
            'store_reference': 'storeReference'
        }

        self._account_holder_code = account_holder_code
        self._invalid_fields = invalid_fields
        self._new_status = new_status
        self._old_status = old_status
        self._reason = reason
        self._store = store
        self._store_reference = store_reference

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AccountHolderStoreStatusChangeNotificationContent':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AccountHolderStoreStatusChangeNotificationContent of this AccountHolderStoreStatusChangeNotificationContent.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_holder_code(self):
        """Gets the account_holder_code of this AccountHolderStoreStatusChangeNotificationContent.

        The code of the account holder.

        :return: The account_holder_code of this AccountHolderStoreStatusChangeNotificationContent.
        :rtype: str
        """
        return self._account_holder_code

    @account_holder_code.setter
    def account_holder_code(self, account_holder_code):
        """Sets the account_holder_code of this AccountHolderStoreStatusChangeNotificationContent.

        The code of the account holder.

        :param account_holder_code: The account_holder_code of this AccountHolderStoreStatusChangeNotificationContent.
        :type account_holder_code: str
        """
        if account_holder_code is None:
            raise ValueError("Invalid value for `account_holder_code`, must not be `None`")

        self._account_holder_code = account_holder_code

    @property
    def invalid_fields(self):
        """Gets the invalid_fields of this AccountHolderStoreStatusChangeNotificationContent.

        In case the store status has not been updated, contains fields that did not pass the validation.

        :return: The invalid_fields of this AccountHolderStoreStatusChangeNotificationContent.
        :rtype: List[ErrorFieldType]
        """
        return self._invalid_fields

    @invalid_fields.setter
    def invalid_fields(self, invalid_fields):
        """Sets the invalid_fields of this AccountHolderStoreStatusChangeNotificationContent.

        In case the store status has not been updated, contains fields that did not pass the validation.

        :param invalid_fields: The invalid_fields of this AccountHolderStoreStatusChangeNotificationContent.
        :type invalid_fields: List[ErrorFieldType]
        """

        self._invalid_fields = invalid_fields

    @property
    def new_status(self):
        """Gets the new_status of this AccountHolderStoreStatusChangeNotificationContent.

        The new status of the account holder.

        :return: The new_status of this AccountHolderStoreStatusChangeNotificationContent.
        :rtype: str
        """
        return self._new_status

    @new_status.setter
    def new_status(self, new_status):
        """Sets the new_status of this AccountHolderStoreStatusChangeNotificationContent.

        The new status of the account holder.

        :param new_status: The new_status of this AccountHolderStoreStatusChangeNotificationContent.
        :type new_status: str
        """
        allowed_values = ["Active", "Closed", "Inactive", "InactiveWithModifications", "Pending"]  # noqa: E501
        if new_status not in allowed_values:
            raise ValueError(
                "Invalid value for `new_status` ({0}), must be one of {1}"
                .format(new_status, allowed_values)
            )

        self._new_status = new_status

    @property
    def old_status(self):
        """Gets the old_status of this AccountHolderStoreStatusChangeNotificationContent.

        The former status of the account holder.

        :return: The old_status of this AccountHolderStoreStatusChangeNotificationContent.
        :rtype: str
        """
        return self._old_status

    @old_status.setter
    def old_status(self, old_status):
        """Sets the old_status of this AccountHolderStoreStatusChangeNotificationContent.

        The former status of the account holder.

        :param old_status: The old_status of this AccountHolderStoreStatusChangeNotificationContent.
        :type old_status: str
        """
        allowed_values = ["Active", "Closed", "Inactive", "InactiveWithModifications", "Pending"]  # noqa: E501
        if old_status not in allowed_values:
            raise ValueError(
                "Invalid value for `old_status` ({0}), must be one of {1}"
                .format(old_status, allowed_values)
            )

        self._old_status = old_status

    @property
    def reason(self):
        """Gets the reason of this AccountHolderStoreStatusChangeNotificationContent.

        The reason for the status change.

        :return: The reason of this AccountHolderStoreStatusChangeNotificationContent.
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this AccountHolderStoreStatusChangeNotificationContent.

        The reason for the status change.

        :param reason: The reason of this AccountHolderStoreStatusChangeNotificationContent.
        :type reason: str
        """

        self._reason = reason

    @property
    def store(self):
        """Gets the store of this AccountHolderStoreStatusChangeNotificationContent.

        Alphanumeric identifier of the store.

        :return: The store of this AccountHolderStoreStatusChangeNotificationContent.
        :rtype: str
        """
        return self._store

    @store.setter
    def store(self, store):
        """Sets the store of this AccountHolderStoreStatusChangeNotificationContent.

        Alphanumeric identifier of the store.

        :param store: The store of this AccountHolderStoreStatusChangeNotificationContent.
        :type store: str
        """
        if store is None:
            raise ValueError("Invalid value for `store`, must not be `None`")

        self._store = store

    @property
    def store_reference(self):
        """Gets the store_reference of this AccountHolderStoreStatusChangeNotificationContent.

        Store store reference.

        :return: The store_reference of this AccountHolderStoreStatusChangeNotificationContent.
        :rtype: str
        """
        return self._store_reference

    @store_reference.setter
    def store_reference(self, store_reference):
        """Sets the store_reference of this AccountHolderStoreStatusChangeNotificationContent.

        Store store reference.

        :param store_reference: The store_reference of this AccountHolderStoreStatusChangeNotificationContent.
        :type store_reference: str
        """
        if store_reference is None:
            raise ValueError("Invalid value for `store_reference`, must not be `None`")

        self._store_reference = store_reference
