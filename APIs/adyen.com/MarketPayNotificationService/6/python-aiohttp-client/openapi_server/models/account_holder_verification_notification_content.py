# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.kyc_check_status_data import KYCCheckStatusData
from openapi_server import util


class AccountHolderVerificationNotificationContent(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_holder_code: str=None, kyc_check_status_data: KYCCheckStatusData=None, legal_arrangement_code: str=None, legal_arrangement_entity_code: str=None, payout_method_code: str=None, shareholder_code: str=None, signatory_code: str=None):
        """AccountHolderVerificationNotificationContent - a model defined in OpenAPI

        :param account_holder_code: The account_holder_code of this AccountHolderVerificationNotificationContent.
        :param kyc_check_status_data: The kyc_check_status_data of this AccountHolderVerificationNotificationContent.
        :param legal_arrangement_code: The legal_arrangement_code of this AccountHolderVerificationNotificationContent.
        :param legal_arrangement_entity_code: The legal_arrangement_entity_code of this AccountHolderVerificationNotificationContent.
        :param payout_method_code: The payout_method_code of this AccountHolderVerificationNotificationContent.
        :param shareholder_code: The shareholder_code of this AccountHolderVerificationNotificationContent.
        :param signatory_code: The signatory_code of this AccountHolderVerificationNotificationContent.
        """
        self.openapi_types = {
            'account_holder_code': str,
            'kyc_check_status_data': KYCCheckStatusData,
            'legal_arrangement_code': str,
            'legal_arrangement_entity_code': str,
            'payout_method_code': str,
            'shareholder_code': str,
            'signatory_code': str
        }

        self.attribute_map = {
            'account_holder_code': 'accountHolderCode',
            'kyc_check_status_data': 'kycCheckStatusData',
            'legal_arrangement_code': 'legalArrangementCode',
            'legal_arrangement_entity_code': 'legalArrangementEntityCode',
            'payout_method_code': 'payoutMethodCode',
            'shareholder_code': 'shareholderCode',
            'signatory_code': 'signatoryCode'
        }

        self._account_holder_code = account_holder_code
        self._kyc_check_status_data = kyc_check_status_data
        self._legal_arrangement_code = legal_arrangement_code
        self._legal_arrangement_entity_code = legal_arrangement_entity_code
        self._payout_method_code = payout_method_code
        self._shareholder_code = shareholder_code
        self._signatory_code = signatory_code

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AccountHolderVerificationNotificationContent':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AccountHolderVerificationNotificationContent of this AccountHolderVerificationNotificationContent.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_holder_code(self):
        """Gets the account_holder_code of this AccountHolderVerificationNotificationContent.

        The code of the account holder.

        :return: The account_holder_code of this AccountHolderVerificationNotificationContent.
        :rtype: str
        """
        return self._account_holder_code

    @account_holder_code.setter
    def account_holder_code(self, account_holder_code):
        """Sets the account_holder_code of this AccountHolderVerificationNotificationContent.

        The code of the account holder.

        :param account_holder_code: The account_holder_code of this AccountHolderVerificationNotificationContent.
        :type account_holder_code: str
        """

        self._account_holder_code = account_holder_code

    @property
    def kyc_check_status_data(self):
        """Gets the kyc_check_status_data of this AccountHolderVerificationNotificationContent.

        Information on the verification status

        :return: The kyc_check_status_data of this AccountHolderVerificationNotificationContent.
        :rtype: KYCCheckStatusData
        """
        return self._kyc_check_status_data

    @kyc_check_status_data.setter
    def kyc_check_status_data(self, kyc_check_status_data):
        """Sets the kyc_check_status_data of this AccountHolderVerificationNotificationContent.

        Information on the verification status

        :param kyc_check_status_data: The kyc_check_status_data of this AccountHolderVerificationNotificationContent.
        :type kyc_check_status_data: KYCCheckStatusData
        """

        self._kyc_check_status_data = kyc_check_status_data

    @property
    def legal_arrangement_code(self):
        """Gets the legal_arrangement_code of this AccountHolderVerificationNotificationContent.

        The unique ID of the legal arrangement that has been verified.

        :return: The legal_arrangement_code of this AccountHolderVerificationNotificationContent.
        :rtype: str
        """
        return self._legal_arrangement_code

    @legal_arrangement_code.setter
    def legal_arrangement_code(self, legal_arrangement_code):
        """Sets the legal_arrangement_code of this AccountHolderVerificationNotificationContent.

        The unique ID of the legal arrangement that has been verified.

        :param legal_arrangement_code: The legal_arrangement_code of this AccountHolderVerificationNotificationContent.
        :type legal_arrangement_code: str
        """

        self._legal_arrangement_code = legal_arrangement_code

    @property
    def legal_arrangement_entity_code(self):
        """Gets the legal_arrangement_entity_code of this AccountHolderVerificationNotificationContent.

        The unique ID of the legal arrangement entity that has been verified.

        :return: The legal_arrangement_entity_code of this AccountHolderVerificationNotificationContent.
        :rtype: str
        """
        return self._legal_arrangement_entity_code

    @legal_arrangement_entity_code.setter
    def legal_arrangement_entity_code(self, legal_arrangement_entity_code):
        """Sets the legal_arrangement_entity_code of this AccountHolderVerificationNotificationContent.

        The unique ID of the legal arrangement entity that has been verified.

        :param legal_arrangement_entity_code: The legal_arrangement_entity_code of this AccountHolderVerificationNotificationContent.
        :type legal_arrangement_entity_code: str
        """

        self._legal_arrangement_entity_code = legal_arrangement_entity_code

    @property
    def payout_method_code(self):
        """Gets the payout_method_code of this AccountHolderVerificationNotificationContent.

        The unique code of the payout method that has been verified.

        :return: The payout_method_code of this AccountHolderVerificationNotificationContent.
        :rtype: str
        """
        return self._payout_method_code

    @payout_method_code.setter
    def payout_method_code(self, payout_method_code):
        """Sets the payout_method_code of this AccountHolderVerificationNotificationContent.

        The unique code of the payout method that has been verified.

        :param payout_method_code: The payout_method_code of this AccountHolderVerificationNotificationContent.
        :type payout_method_code: str
        """

        self._payout_method_code = payout_method_code

    @property
    def shareholder_code(self):
        """Gets the shareholder_code of this AccountHolderVerificationNotificationContent.

        The code of the shareholder that has been verified.

        :return: The shareholder_code of this AccountHolderVerificationNotificationContent.
        :rtype: str
        """
        return self._shareholder_code

    @shareholder_code.setter
    def shareholder_code(self, shareholder_code):
        """Sets the shareholder_code of this AccountHolderVerificationNotificationContent.

        The code of the shareholder that has been verified.

        :param shareholder_code: The shareholder_code of this AccountHolderVerificationNotificationContent.
        :type shareholder_code: str
        """

        self._shareholder_code = shareholder_code

    @property
    def signatory_code(self):
        """Gets the signatory_code of this AccountHolderVerificationNotificationContent.

        The code of the signatory that has been verified.

        :return: The signatory_code of this AccountHolderVerificationNotificationContent.
        :rtype: str
        """
        return self._signatory_code

    @signatory_code.setter
    def signatory_code(self, signatory_code):
        """Sets the signatory_code of this AccountHolderVerificationNotificationContent.

        The code of the signatory that has been verified.

        :param signatory_code: The signatory_code of this AccountHolderVerificationNotificationContent.
        :type signatory_code: str
        """

        self._signatory_code = signatory_code
