# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.amount import Amount
from openapi_server import util


class CompensateNegativeBalanceNotificationRecord(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_code: str=None, amount: Amount=None, transfer_date: datetime=None):
        """CompensateNegativeBalanceNotificationRecord - a model defined in OpenAPI

        :param account_code: The account_code of this CompensateNegativeBalanceNotificationRecord.
        :param amount: The amount of this CompensateNegativeBalanceNotificationRecord.
        :param transfer_date: The transfer_date of this CompensateNegativeBalanceNotificationRecord.
        """
        self.openapi_types = {
            'account_code': str,
            'amount': Amount,
            'transfer_date': datetime
        }

        self.attribute_map = {
            'account_code': 'accountCode',
            'amount': 'amount',
            'transfer_date': 'transferDate'
        }

        self._account_code = account_code
        self._amount = amount
        self._transfer_date = transfer_date

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CompensateNegativeBalanceNotificationRecord':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CompensateNegativeBalanceNotificationRecord of this CompensateNegativeBalanceNotificationRecord.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_code(self):
        """Gets the account_code of this CompensateNegativeBalanceNotificationRecord.

        The code of the account whose negative balance has been compensated.

        :return: The account_code of this CompensateNegativeBalanceNotificationRecord.
        :rtype: str
        """
        return self._account_code

    @account_code.setter
    def account_code(self, account_code):
        """Sets the account_code of this CompensateNegativeBalanceNotificationRecord.

        The code of the account whose negative balance has been compensated.

        :param account_code: The account_code of this CompensateNegativeBalanceNotificationRecord.
        :type account_code: str
        """

        self._account_code = account_code

    @property
    def amount(self):
        """Gets the amount of this CompensateNegativeBalanceNotificationRecord.

        The amount compensated.

        :return: The amount of this CompensateNegativeBalanceNotificationRecord.
        :rtype: Amount
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this CompensateNegativeBalanceNotificationRecord.

        The amount compensated.

        :param amount: The amount of this CompensateNegativeBalanceNotificationRecord.
        :type amount: Amount
        """

        self._amount = amount

    @property
    def transfer_date(self):
        """Gets the transfer_date of this CompensateNegativeBalanceNotificationRecord.

        The date on which the compensation took place.

        :return: The transfer_date of this CompensateNegativeBalanceNotificationRecord.
        :rtype: datetime
        """
        return self._transfer_date

    @transfer_date.setter
    def transfer_date(self, transfer_date):
        """Sets the transfer_date of this CompensateNegativeBalanceNotificationRecord.

        The date on which the compensation took place.

        :param transfer_date: The transfer_date of this CompensateNegativeBalanceNotificationRecord.
        :type transfer_date: datetime
        """

        self._transfer_date = transfer_date
