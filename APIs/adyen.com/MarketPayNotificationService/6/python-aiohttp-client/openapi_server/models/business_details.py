# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.shareholder_contact import ShareholderContact
from openapi_server.models.signatory_contact import SignatoryContact
from openapi_server.models.ultimate_parent_company import UltimateParentCompany
from openapi_server import util


class BusinessDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, doing_business_as: str=None, legal_business_name: str=None, listed_ultimate_parent_company: List[UltimateParentCompany]=None, registration_number: str=None, shareholders: List[ShareholderContact]=None, signatories: List[SignatoryContact]=None, stock_exchange: str=None, stock_number: str=None, stock_ticker: str=None, tax_id: str=None):
        """BusinessDetails - a model defined in OpenAPI

        :param doing_business_as: The doing_business_as of this BusinessDetails.
        :param legal_business_name: The legal_business_name of this BusinessDetails.
        :param listed_ultimate_parent_company: The listed_ultimate_parent_company of this BusinessDetails.
        :param registration_number: The registration_number of this BusinessDetails.
        :param shareholders: The shareholders of this BusinessDetails.
        :param signatories: The signatories of this BusinessDetails.
        :param stock_exchange: The stock_exchange of this BusinessDetails.
        :param stock_number: The stock_number of this BusinessDetails.
        :param stock_ticker: The stock_ticker of this BusinessDetails.
        :param tax_id: The tax_id of this BusinessDetails.
        """
        self.openapi_types = {
            'doing_business_as': str,
            'legal_business_name': str,
            'listed_ultimate_parent_company': List[UltimateParentCompany],
            'registration_number': str,
            'shareholders': List[ShareholderContact],
            'signatories': List[SignatoryContact],
            'stock_exchange': str,
            'stock_number': str,
            'stock_ticker': str,
            'tax_id': str
        }

        self.attribute_map = {
            'doing_business_as': 'doingBusinessAs',
            'legal_business_name': 'legalBusinessName',
            'listed_ultimate_parent_company': 'listedUltimateParentCompany',
            'registration_number': 'registrationNumber',
            'shareholders': 'shareholders',
            'signatories': 'signatories',
            'stock_exchange': 'stockExchange',
            'stock_number': 'stockNumber',
            'stock_ticker': 'stockTicker',
            'tax_id': 'taxId'
        }

        self._doing_business_as = doing_business_as
        self._legal_business_name = legal_business_name
        self._listed_ultimate_parent_company = listed_ultimate_parent_company
        self._registration_number = registration_number
        self._shareholders = shareholders
        self._signatories = signatories
        self._stock_exchange = stock_exchange
        self._stock_number = stock_number
        self._stock_ticker = stock_ticker
        self._tax_id = tax_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BusinessDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BusinessDetails of this BusinessDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def doing_business_as(self):
        """Gets the doing_business_as of this BusinessDetails.

        The registered name of the company (if it differs from the legal name of the company).

        :return: The doing_business_as of this BusinessDetails.
        :rtype: str
        """
        return self._doing_business_as

    @doing_business_as.setter
    def doing_business_as(self, doing_business_as):
        """Sets the doing_business_as of this BusinessDetails.

        The registered name of the company (if it differs from the legal name of the company).

        :param doing_business_as: The doing_business_as of this BusinessDetails.
        :type doing_business_as: str
        """

        self._doing_business_as = doing_business_as

    @property
    def legal_business_name(self):
        """Gets the legal_business_name of this BusinessDetails.

        The legal name of the company.

        :return: The legal_business_name of this BusinessDetails.
        :rtype: str
        """
        return self._legal_business_name

    @legal_business_name.setter
    def legal_business_name(self, legal_business_name):
        """Sets the legal_business_name of this BusinessDetails.

        The legal name of the company.

        :param legal_business_name: The legal_business_name of this BusinessDetails.
        :type legal_business_name: str
        """

        self._legal_business_name = legal_business_name

    @property
    def listed_ultimate_parent_company(self):
        """Gets the listed_ultimate_parent_company of this BusinessDetails.

        Information about the parent public company. Required if the account holder is 100% owned by a publicly listed company.

        :return: The listed_ultimate_parent_company of this BusinessDetails.
        :rtype: List[UltimateParentCompany]
        """
        return self._listed_ultimate_parent_company

    @listed_ultimate_parent_company.setter
    def listed_ultimate_parent_company(self, listed_ultimate_parent_company):
        """Sets the listed_ultimate_parent_company of this BusinessDetails.

        Information about the parent public company. Required if the account holder is 100% owned by a publicly listed company.

        :param listed_ultimate_parent_company: The listed_ultimate_parent_company of this BusinessDetails.
        :type listed_ultimate_parent_company: List[UltimateParentCompany]
        """

        self._listed_ultimate_parent_company = listed_ultimate_parent_company

    @property
    def registration_number(self):
        """Gets the registration_number of this BusinessDetails.

        The registration number of the company.

        :return: The registration_number of this BusinessDetails.
        :rtype: str
        """
        return self._registration_number

    @registration_number.setter
    def registration_number(self, registration_number):
        """Sets the registration_number of this BusinessDetails.

        The registration number of the company.

        :param registration_number: The registration_number of this BusinessDetails.
        :type registration_number: str
        """

        self._registration_number = registration_number

    @property
    def shareholders(self):
        """Gets the shareholders of this BusinessDetails.

        Array containing information about individuals associated with the account holder either through ownership or control. For details about how you can identify them, refer to [our verification guide](https://docs.adyen.com/marketplaces-and-platforms/classic/verification-process#identify-ubos).

        :return: The shareholders of this BusinessDetails.
        :rtype: List[ShareholderContact]
        """
        return self._shareholders

    @shareholders.setter
    def shareholders(self, shareholders):
        """Sets the shareholders of this BusinessDetails.

        Array containing information about individuals associated with the account holder either through ownership or control. For details about how you can identify them, refer to [our verification guide](https://docs.adyen.com/marketplaces-and-platforms/classic/verification-process#identify-ubos).

        :param shareholders: The shareholders of this BusinessDetails.
        :type shareholders: List[ShareholderContact]
        """

        self._shareholders = shareholders

    @property
    def signatories(self):
        """Gets the signatories of this BusinessDetails.

        Signatories associated with the company. Each array entry should represent one signatory.

        :return: The signatories of this BusinessDetails.
        :rtype: List[SignatoryContact]
        """
        return self._signatories

    @signatories.setter
    def signatories(self, signatories):
        """Sets the signatories of this BusinessDetails.

        Signatories associated with the company. Each array entry should represent one signatory.

        :param signatories: The signatories of this BusinessDetails.
        :type signatories: List[SignatoryContact]
        """

        self._signatories = signatories

    @property
    def stock_exchange(self):
        """Gets the stock_exchange of this BusinessDetails.

        Market Identifier Code (MIC).

        :return: The stock_exchange of this BusinessDetails.
        :rtype: str
        """
        return self._stock_exchange

    @stock_exchange.setter
    def stock_exchange(self, stock_exchange):
        """Sets the stock_exchange of this BusinessDetails.

        Market Identifier Code (MIC).

        :param stock_exchange: The stock_exchange of this BusinessDetails.
        :type stock_exchange: str
        """

        self._stock_exchange = stock_exchange

    @property
    def stock_number(self):
        """Gets the stock_number of this BusinessDetails.

        International Securities Identification Number (ISIN).

        :return: The stock_number of this BusinessDetails.
        :rtype: str
        """
        return self._stock_number

    @stock_number.setter
    def stock_number(self, stock_number):
        """Sets the stock_number of this BusinessDetails.

        International Securities Identification Number (ISIN).

        :param stock_number: The stock_number of this BusinessDetails.
        :type stock_number: str
        """

        self._stock_number = stock_number

    @property
    def stock_ticker(self):
        """Gets the stock_ticker of this BusinessDetails.

        Stock Ticker symbol.

        :return: The stock_ticker of this BusinessDetails.
        :rtype: str
        """
        return self._stock_ticker

    @stock_ticker.setter
    def stock_ticker(self, stock_ticker):
        """Sets the stock_ticker of this BusinessDetails.

        Stock Ticker symbol.

        :param stock_ticker: The stock_ticker of this BusinessDetails.
        :type stock_ticker: str
        """

        self._stock_ticker = stock_ticker

    @property
    def tax_id(self):
        """Gets the tax_id of this BusinessDetails.

        The tax ID of the company.

        :return: The tax_id of this BusinessDetails.
        :rtype: str
        """
        return self._tax_id

    @tax_id.setter
    def tax_id(self, tax_id):
        """Sets the tax_id of this BusinessDetails.

        The tax ID of the company.

        :param tax_id: The tax_id of this BusinessDetails.
        :type tax_id: str
        """

        self._tax_id = tax_id
