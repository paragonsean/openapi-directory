# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ReportAvailableNotificationContent(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_code: str=None, account_type: str=None, event_date: datetime=None, remote_access_url: str=None, success: bool=None):
        """ReportAvailableNotificationContent - a model defined in OpenAPI

        :param account_code: The account_code of this ReportAvailableNotificationContent.
        :param account_type: The account_type of this ReportAvailableNotificationContent.
        :param event_date: The event_date of this ReportAvailableNotificationContent.
        :param remote_access_url: The remote_access_url of this ReportAvailableNotificationContent.
        :param success: The success of this ReportAvailableNotificationContent.
        """
        self.openapi_types = {
            'account_code': str,
            'account_type': str,
            'event_date': datetime,
            'remote_access_url': str,
            'success': bool
        }

        self.attribute_map = {
            'account_code': 'accountCode',
            'account_type': 'accountType',
            'event_date': 'eventDate',
            'remote_access_url': 'remoteAccessUrl',
            'success': 'success'
        }

        self._account_code = account_code
        self._account_type = account_type
        self._event_date = event_date
        self._remote_access_url = remote_access_url
        self._success = success

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReportAvailableNotificationContent':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ReportAvailableNotificationContent of this ReportAvailableNotificationContent.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_code(self):
        """Gets the account_code of this ReportAvailableNotificationContent.

        The code of the Account to which the report applies.

        :return: The account_code of this ReportAvailableNotificationContent.
        :rtype: str
        """
        return self._account_code

    @account_code.setter
    def account_code(self, account_code):
        """Sets the account_code of this ReportAvailableNotificationContent.

        The code of the Account to which the report applies.

        :param account_code: The account_code of this ReportAvailableNotificationContent.
        :type account_code: str
        """

        self._account_code = account_code

    @property
    def account_type(self):
        """Gets the account_type of this ReportAvailableNotificationContent.

        The type of Account to which the report applies.

        :return: The account_type of this ReportAvailableNotificationContent.
        :rtype: str
        """
        return self._account_type

    @account_type.setter
    def account_type(self, account_type):
        """Sets the account_type of this ReportAvailableNotificationContent.

        The type of Account to which the report applies.

        :param account_type: The account_type of this ReportAvailableNotificationContent.
        :type account_type: str
        """

        self._account_type = account_type

    @property
    def event_date(self):
        """Gets the event_date of this ReportAvailableNotificationContent.

        The date of the event to which the report applies.

        :return: The event_date of this ReportAvailableNotificationContent.
        :rtype: datetime
        """
        return self._event_date

    @event_date.setter
    def event_date(self, event_date):
        """Sets the event_date of this ReportAvailableNotificationContent.

        The date of the event to which the report applies.

        :param event_date: The event_date of this ReportAvailableNotificationContent.
        :type event_date: datetime
        """

        self._event_date = event_date

    @property
    def remote_access_url(self):
        """Gets the remote_access_url of this ReportAvailableNotificationContent.

        The URL at which the report can be accessed.

        :return: The remote_access_url of this ReportAvailableNotificationContent.
        :rtype: str
        """
        return self._remote_access_url

    @remote_access_url.setter
    def remote_access_url(self, remote_access_url):
        """Sets the remote_access_url of this ReportAvailableNotificationContent.

        The URL at which the report can be accessed.

        :param remote_access_url: The remote_access_url of this ReportAvailableNotificationContent.
        :type remote_access_url: str
        """

        self._remote_access_url = remote_access_url

    @property
    def success(self):
        """Gets the success of this ReportAvailableNotificationContent.

        Indicates whether the event resulted in a success.

        :return: The success of this ReportAvailableNotificationContent.
        :rtype: bool
        """
        return self._success

    @success.setter
    def success(self, success):
        """Sets the success of this ReportAvailableNotificationContent.

        Indicates whether the event resulted in a success.

        :param success: The success of this ReportAvailableNotificationContent.
        :type success: bool
        """

        self._success = success
