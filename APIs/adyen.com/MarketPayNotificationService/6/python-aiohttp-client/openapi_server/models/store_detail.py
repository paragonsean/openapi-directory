# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.vias_address import ViasAddress
from openapi_server.models.vias_phone_number import ViasPhoneNumber
from openapi_server import util


class StoreDetail(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address: ViasAddress=None, full_phone_number: str=None, logo: str=None, merchant_account: str=None, merchant_category_code: str=None, merchant_house_number: str=None, phone_number: ViasPhoneNumber=None, shopper_interaction: str=None, split_configuration_uuid: str=None, status: str=None, store: str=None, store_name: str=None, store_reference: str=None, virtual_account: str=None, web_address: str=None):
        """StoreDetail - a model defined in OpenAPI

        :param address: The address of this StoreDetail.
        :param full_phone_number: The full_phone_number of this StoreDetail.
        :param logo: The logo of this StoreDetail.
        :param merchant_account: The merchant_account of this StoreDetail.
        :param merchant_category_code: The merchant_category_code of this StoreDetail.
        :param merchant_house_number: The merchant_house_number of this StoreDetail.
        :param phone_number: The phone_number of this StoreDetail.
        :param shopper_interaction: The shopper_interaction of this StoreDetail.
        :param split_configuration_uuid: The split_configuration_uuid of this StoreDetail.
        :param status: The status of this StoreDetail.
        :param store: The store of this StoreDetail.
        :param store_name: The store_name of this StoreDetail.
        :param store_reference: The store_reference of this StoreDetail.
        :param virtual_account: The virtual_account of this StoreDetail.
        :param web_address: The web_address of this StoreDetail.
        """
        self.openapi_types = {
            'address': ViasAddress,
            'full_phone_number': str,
            'logo': str,
            'merchant_account': str,
            'merchant_category_code': str,
            'merchant_house_number': str,
            'phone_number': ViasPhoneNumber,
            'shopper_interaction': str,
            'split_configuration_uuid': str,
            'status': str,
            'store': str,
            'store_name': str,
            'store_reference': str,
            'virtual_account': str,
            'web_address': str
        }

        self.attribute_map = {
            'address': 'address',
            'full_phone_number': 'fullPhoneNumber',
            'logo': 'logo',
            'merchant_account': 'merchantAccount',
            'merchant_category_code': 'merchantCategoryCode',
            'merchant_house_number': 'merchantHouseNumber',
            'phone_number': 'phoneNumber',
            'shopper_interaction': 'shopperInteraction',
            'split_configuration_uuid': 'splitConfigurationUUID',
            'status': 'status',
            'store': 'store',
            'store_name': 'storeName',
            'store_reference': 'storeReference',
            'virtual_account': 'virtualAccount',
            'web_address': 'webAddress'
        }

        self._address = address
        self._full_phone_number = full_phone_number
        self._logo = logo
        self._merchant_account = merchant_account
        self._merchant_category_code = merchant_category_code
        self._merchant_house_number = merchant_house_number
        self._phone_number = phone_number
        self._shopper_interaction = shopper_interaction
        self._split_configuration_uuid = split_configuration_uuid
        self._status = status
        self._store = store
        self._store_name = store_name
        self._store_reference = store_reference
        self._virtual_account = virtual_account
        self._web_address = web_address

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StoreDetail':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StoreDetail of this StoreDetail.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address(self):
        """Gets the address of this StoreDetail.

        The address of the physical store where the account holder will process payments from.

        :return: The address of this StoreDetail.
        :rtype: ViasAddress
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this StoreDetail.

        The address of the physical store where the account holder will process payments from.

        :param address: The address of this StoreDetail.
        :type address: ViasAddress
        """
        if address is None:
            raise ValueError("Invalid value for `address`, must not be `None`")

        self._address = address

    @property
    def full_phone_number(self):
        """Gets the full_phone_number of this StoreDetail.

        The phone number of the store provided as a single string.  It will be handled as a landline phone.  Examples: \"0031 6 11 22 33 44\", \"+316/1122-3344\", \"(0031) 611223344\"

        :return: The full_phone_number of this StoreDetail.
        :rtype: str
        """
        return self._full_phone_number

    @full_phone_number.setter
    def full_phone_number(self, full_phone_number):
        """Sets the full_phone_number of this StoreDetail.

        The phone number of the store provided as a single string.  It will be handled as a landline phone.  Examples: \"0031 6 11 22 33 44\", \"+316/1122-3344\", \"(0031) 611223344\"

        :param full_phone_number: The full_phone_number of this StoreDetail.
        :type full_phone_number: str
        """

        self._full_phone_number = full_phone_number

    @property
    def logo(self):
        """Gets the logo of this StoreDetail.

        Store logo for payment method setup.

        :return: The logo of this StoreDetail.
        :rtype: str
        """
        return self._logo

    @logo.setter
    def logo(self, logo):
        """Sets the logo of this StoreDetail.

        Store logo for payment method setup.

        :param logo: The logo of this StoreDetail.
        :type logo: str
        """

        self._logo = logo

    @property
    def merchant_account(self):
        """Gets the merchant_account of this StoreDetail.

        The merchant account to which the store belongs.

        :return: The merchant_account of this StoreDetail.
        :rtype: str
        """
        return self._merchant_account

    @merchant_account.setter
    def merchant_account(self, merchant_account):
        """Sets the merchant_account of this StoreDetail.

        The merchant account to which the store belongs.

        :param merchant_account: The merchant_account of this StoreDetail.
        :type merchant_account: str
        """
        if merchant_account is None:
            raise ValueError("Invalid value for `merchant_account`, must not be `None`")

        self._merchant_account = merchant_account

    @property
    def merchant_category_code(self):
        """Gets the merchant_category_code of this StoreDetail.

        The merchant category code (MCC) that classifies the business of the account holder.

        :return: The merchant_category_code of this StoreDetail.
        :rtype: str
        """
        return self._merchant_category_code

    @merchant_category_code.setter
    def merchant_category_code(self, merchant_category_code):
        """Sets the merchant_category_code of this StoreDetail.

        The merchant category code (MCC) that classifies the business of the account holder.

        :param merchant_category_code: The merchant_category_code of this StoreDetail.
        :type merchant_category_code: str
        """
        if merchant_category_code is None:
            raise ValueError("Invalid value for `merchant_category_code`, must not be `None`")

        self._merchant_category_code = merchant_category_code

    @property
    def merchant_house_number(self):
        """Gets the merchant_house_number of this StoreDetail.

        Merchant house number for payment method setup.

        :return: The merchant_house_number of this StoreDetail.
        :rtype: str
        """
        return self._merchant_house_number

    @merchant_house_number.setter
    def merchant_house_number(self, merchant_house_number):
        """Sets the merchant_house_number of this StoreDetail.

        Merchant house number for payment method setup.

        :param merchant_house_number: The merchant_house_number of this StoreDetail.
        :type merchant_house_number: str
        """

        self._merchant_house_number = merchant_house_number

    @property
    def phone_number(self):
        """Gets the phone_number of this StoreDetail.

        The phone number of the store.

        :return: The phone_number of this StoreDetail.
        :rtype: ViasPhoneNumber
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """Sets the phone_number of this StoreDetail.

        The phone number of the store.

        :param phone_number: The phone_number of this StoreDetail.
        :type phone_number: ViasPhoneNumber
        """

        self._phone_number = phone_number

    @property
    def shopper_interaction(self):
        """Gets the shopper_interaction of this StoreDetail.

        The sales channel. Possible values: **Ecommerce**, **POS**.

        :return: The shopper_interaction of this StoreDetail.
        :rtype: str
        """
        return self._shopper_interaction

    @shopper_interaction.setter
    def shopper_interaction(self, shopper_interaction):
        """Sets the shopper_interaction of this StoreDetail.

        The sales channel. Possible values: **Ecommerce**, **POS**.

        :param shopper_interaction: The shopper_interaction of this StoreDetail.
        :type shopper_interaction: str
        """
        allowed_values = ["Ecommerce", "POS"]  # noqa: E501
        if shopper_interaction not in allowed_values:
            raise ValueError(
                "Invalid value for `shopper_interaction` ({0}), must be one of {1}"
                .format(shopper_interaction, allowed_values)
            )

        self._shopper_interaction = shopper_interaction

    @property
    def split_configuration_uuid(self):
        """Gets the split_configuration_uuid of this StoreDetail.

        The unique reference for the split configuration, returned when you configure splits in your Customer Area. When this is provided, the `virtualAccount` is also required. Adyen uses the configuration and the `virtualAccount` to split funds between accounts in your platform.

        :return: The split_configuration_uuid of this StoreDetail.
        :rtype: str
        """
        return self._split_configuration_uuid

    @split_configuration_uuid.setter
    def split_configuration_uuid(self, split_configuration_uuid):
        """Sets the split_configuration_uuid of this StoreDetail.

        The unique reference for the split configuration, returned when you configure splits in your Customer Area. When this is provided, the `virtualAccount` is also required. Adyen uses the configuration and the `virtualAccount` to split funds between accounts in your platform.

        :param split_configuration_uuid: The split_configuration_uuid of this StoreDetail.
        :type split_configuration_uuid: str
        """

        self._split_configuration_uuid = split_configuration_uuid

    @property
    def status(self):
        """Gets the status of this StoreDetail.

        The status of the store. Possible values: **Pending**, **Active**, **Inactive**, **InactiveWithModifications**, **Closed**.

        :return: The status of this StoreDetail.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this StoreDetail.

        The status of the store. Possible values: **Pending**, **Active**, **Inactive**, **InactiveWithModifications**, **Closed**.

        :param status: The status of this StoreDetail.
        :type status: str
        """
        allowed_values = ["Active", "Closed", "Inactive", "InactiveWithModifications", "Pending"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def store(self):
        """Gets the store of this StoreDetail.

        Adyen-generated unique alphanumeric identifier (UUID) for the store, returned in the response when you create a store. Required when updating an existing store in an `/updateAccountHolder` request.

        :return: The store of this StoreDetail.
        :rtype: str
        """
        return self._store

    @store.setter
    def store(self, store):
        """Sets the store of this StoreDetail.

        Adyen-generated unique alphanumeric identifier (UUID) for the store, returned in the response when you create a store. Required when updating an existing store in an `/updateAccountHolder` request.

        :param store: The store of this StoreDetail.
        :type store: str
        """

        self._store = store

    @property
    def store_name(self):
        """Gets the store_name of this StoreDetail.

        The name of the account holder's store. This value is shown in shopper statements.  * Length: Between 3 to 22 characters   * The following characters are *not* supported: **:;}{$#@!|<>%^*+=\\\\**

        :return: The store_name of this StoreDetail.
        :rtype: str
        """
        return self._store_name

    @store_name.setter
    def store_name(self, store_name):
        """Sets the store_name of this StoreDetail.

        The name of the account holder's store. This value is shown in shopper statements.  * Length: Between 3 to 22 characters   * The following characters are *not* supported: **:;}{$#@!|<>%^*+=\\\\**

        :param store_name: The store_name of this StoreDetail.
        :type store_name: str
        """

        self._store_name = store_name

    @property
    def store_reference(self):
        """Gets the store_reference of this StoreDetail.

        Your unique identifier for the store. The Customer Area also uses this value for the store description.   * Length: Between 3 to 128 characters  * The following characters are *not* supported: **:;}{$#@!|<>%^*+=\\\\**

        :return: The store_reference of this StoreDetail.
        :rtype: str
        """
        return self._store_reference

    @store_reference.setter
    def store_reference(self, store_reference):
        """Sets the store_reference of this StoreDetail.

        Your unique identifier for the store. The Customer Area also uses this value for the store description.   * Length: Between 3 to 128 characters  * The following characters are *not* supported: **:;}{$#@!|<>%^*+=\\\\**

        :param store_reference: The store_reference of this StoreDetail.
        :type store_reference: str
        """

        self._store_reference = store_reference

    @property
    def virtual_account(self):
        """Gets the virtual_account of this StoreDetail.

        The account holder's `accountCode` where the split amount will be sent. Required when you provide the `splitConfigurationUUID`.

        :return: The virtual_account of this StoreDetail.
        :rtype: str
        """
        return self._virtual_account

    @virtual_account.setter
    def virtual_account(self, virtual_account):
        """Sets the virtual_account of this StoreDetail.

        The account holder's `accountCode` where the split amount will be sent. Required when you provide the `splitConfigurationUUID`.

        :param virtual_account: The virtual_account of this StoreDetail.
        :type virtual_account: str
        """

        self._virtual_account = virtual_account

    @property
    def web_address(self):
        """Gets the web_address of this StoreDetail.

        URL of the ecommerce store.

        :return: The web_address of this StoreDetail.
        :rtype: str
        """
        return self._web_address

    @web_address.setter
    def web_address(self, web_address):
        """Sets the web_address of this StoreDetail.

        URL of the ecommerce store.

        :param web_address: The web_address of this StoreDetail.
        :type web_address: str
        """

        self._web_address = web_address
