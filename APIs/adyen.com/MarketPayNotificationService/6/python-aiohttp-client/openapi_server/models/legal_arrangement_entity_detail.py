# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.business_details import BusinessDetails
from openapi_server.models.individual_details import IndividualDetails
from openapi_server.models.vias_address import ViasAddress
from openapi_server.models.vias_phone_number import ViasPhoneNumber
from openapi_server import util


class LegalArrangementEntityDetail(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address: ViasAddress=None, business_details: BusinessDetails=None, email: str=None, full_phone_number: str=None, individual_details: IndividualDetails=None, legal_arrangement_entity_code: str=None, legal_arrangement_entity_reference: str=None, legal_arrangement_members: List[str]=None, legal_entity_type: str=None, phone_number: ViasPhoneNumber=None, web_address: str=None):
        """LegalArrangementEntityDetail - a model defined in OpenAPI

        :param address: The address of this LegalArrangementEntityDetail.
        :param business_details: The business_details of this LegalArrangementEntityDetail.
        :param email: The email of this LegalArrangementEntityDetail.
        :param full_phone_number: The full_phone_number of this LegalArrangementEntityDetail.
        :param individual_details: The individual_details of this LegalArrangementEntityDetail.
        :param legal_arrangement_entity_code: The legal_arrangement_entity_code of this LegalArrangementEntityDetail.
        :param legal_arrangement_entity_reference: The legal_arrangement_entity_reference of this LegalArrangementEntityDetail.
        :param legal_arrangement_members: The legal_arrangement_members of this LegalArrangementEntityDetail.
        :param legal_entity_type: The legal_entity_type of this LegalArrangementEntityDetail.
        :param phone_number: The phone_number of this LegalArrangementEntityDetail.
        :param web_address: The web_address of this LegalArrangementEntityDetail.
        """
        self.openapi_types = {
            'address': ViasAddress,
            'business_details': BusinessDetails,
            'email': str,
            'full_phone_number': str,
            'individual_details': IndividualDetails,
            'legal_arrangement_entity_code': str,
            'legal_arrangement_entity_reference': str,
            'legal_arrangement_members': List[str],
            'legal_entity_type': str,
            'phone_number': ViasPhoneNumber,
            'web_address': str
        }

        self.attribute_map = {
            'address': 'address',
            'business_details': 'businessDetails',
            'email': 'email',
            'full_phone_number': 'fullPhoneNumber',
            'individual_details': 'individualDetails',
            'legal_arrangement_entity_code': 'legalArrangementEntityCode',
            'legal_arrangement_entity_reference': 'legalArrangementEntityReference',
            'legal_arrangement_members': 'legalArrangementMembers',
            'legal_entity_type': 'legalEntityType',
            'phone_number': 'phoneNumber',
            'web_address': 'webAddress'
        }

        self._address = address
        self._business_details = business_details
        self._email = email
        self._full_phone_number = full_phone_number
        self._individual_details = individual_details
        self._legal_arrangement_entity_code = legal_arrangement_entity_code
        self._legal_arrangement_entity_reference = legal_arrangement_entity_reference
        self._legal_arrangement_members = legal_arrangement_members
        self._legal_entity_type = legal_entity_type
        self._phone_number = phone_number
        self._web_address = web_address

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LegalArrangementEntityDetail':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LegalArrangementEntityDetail of this LegalArrangementEntityDetail.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address(self):
        """Gets the address of this LegalArrangementEntityDetail.

        The address of the entity.

        :return: The address of this LegalArrangementEntityDetail.
        :rtype: ViasAddress
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this LegalArrangementEntityDetail.

        The address of the entity.

        :param address: The address of this LegalArrangementEntityDetail.
        :type address: ViasAddress
        """

        self._address = address

    @property
    def business_details(self):
        """Gets the business_details of this LegalArrangementEntityDetail.

        Required when creating an entity with `legalEntityType` **Business**, **NonProfit**, **PublicCompany**, or **Partnership**.

        :return: The business_details of this LegalArrangementEntityDetail.
        :rtype: BusinessDetails
        """
        return self._business_details

    @business_details.setter
    def business_details(self, business_details):
        """Sets the business_details of this LegalArrangementEntityDetail.

        Required when creating an entity with `legalEntityType` **Business**, **NonProfit**, **PublicCompany**, or **Partnership**.

        :param business_details: The business_details of this LegalArrangementEntityDetail.
        :type business_details: BusinessDetails
        """

        self._business_details = business_details

    @property
    def email(self):
        """Gets the email of this LegalArrangementEntityDetail.

        The e-mail address of the entity.

        :return: The email of this LegalArrangementEntityDetail.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this LegalArrangementEntityDetail.

        The e-mail address of the entity.

        :param email: The email of this LegalArrangementEntityDetail.
        :type email: str
        """

        self._email = email

    @property
    def full_phone_number(self):
        """Gets the full_phone_number of this LegalArrangementEntityDetail.

        The phone number of the contact provided as a single string.  It will be handled as a landline phone. **Examples:** \"0031 6 11 22 33 44\", \"+316/1122-3344\", \"(0031) 611223344\"

        :return: The full_phone_number of this LegalArrangementEntityDetail.
        :rtype: str
        """
        return self._full_phone_number

    @full_phone_number.setter
    def full_phone_number(self, full_phone_number):
        """Sets the full_phone_number of this LegalArrangementEntityDetail.

        The phone number of the contact provided as a single string.  It will be handled as a landline phone. **Examples:** \"0031 6 11 22 33 44\", \"+316/1122-3344\", \"(0031) 611223344\"

        :param full_phone_number: The full_phone_number of this LegalArrangementEntityDetail.
        :type full_phone_number: str
        """

        self._full_phone_number = full_phone_number

    @property
    def individual_details(self):
        """Gets the individual_details of this LegalArrangementEntityDetail.

        Required when creating an entity with `legalEntityType` **Individual**.

        :return: The individual_details of this LegalArrangementEntityDetail.
        :rtype: IndividualDetails
        """
        return self._individual_details

    @individual_details.setter
    def individual_details(self, individual_details):
        """Sets the individual_details of this LegalArrangementEntityDetail.

        Required when creating an entity with `legalEntityType` **Individual**.

        :param individual_details: The individual_details of this LegalArrangementEntityDetail.
        :type individual_details: IndividualDetails
        """

        self._individual_details = individual_details

    @property
    def legal_arrangement_entity_code(self):
        """Gets the legal_arrangement_entity_code of this LegalArrangementEntityDetail.

        Adyen-generated unique alphanumeric identifier (UUID) for the entry, returned in the response when you create a legal arrangement entity. Use only when updating an account holder. If you include this field when creating an account holder, the request will fail.

        :return: The legal_arrangement_entity_code of this LegalArrangementEntityDetail.
        :rtype: str
        """
        return self._legal_arrangement_entity_code

    @legal_arrangement_entity_code.setter
    def legal_arrangement_entity_code(self, legal_arrangement_entity_code):
        """Sets the legal_arrangement_entity_code of this LegalArrangementEntityDetail.

        Adyen-generated unique alphanumeric identifier (UUID) for the entry, returned in the response when you create a legal arrangement entity. Use only when updating an account holder. If you include this field when creating an account holder, the request will fail.

        :param legal_arrangement_entity_code: The legal_arrangement_entity_code of this LegalArrangementEntityDetail.
        :type legal_arrangement_entity_code: str
        """

        self._legal_arrangement_entity_code = legal_arrangement_entity_code

    @property
    def legal_arrangement_entity_reference(self):
        """Gets the legal_arrangement_entity_reference of this LegalArrangementEntityDetail.

        Your reference for the legal arrangement entity.

        :return: The legal_arrangement_entity_reference of this LegalArrangementEntityDetail.
        :rtype: str
        """
        return self._legal_arrangement_entity_reference

    @legal_arrangement_entity_reference.setter
    def legal_arrangement_entity_reference(self, legal_arrangement_entity_reference):
        """Sets the legal_arrangement_entity_reference of this LegalArrangementEntityDetail.

        Your reference for the legal arrangement entity.

        :param legal_arrangement_entity_reference: The legal_arrangement_entity_reference of this LegalArrangementEntityDetail.
        :type legal_arrangement_entity_reference: str
        """

        self._legal_arrangement_entity_reference = legal_arrangement_entity_reference

    @property
    def legal_arrangement_members(self):
        """Gets the legal_arrangement_members of this LegalArrangementEntityDetail.

        An array containing the roles of the entity in the legal arrangement.  The possible values depend on the legal arrangement `type`.  - For `type` **Association**: **ControllingPerson** and **Shareholder**.  - For `type` **Partnership**: **Partner** and **Shareholder**.  - For `type` **Trust**: **Trustee**, **Settlor**, **Protector**, **Beneficiary**,  and **Shareholder**.  

        :return: The legal_arrangement_members of this LegalArrangementEntityDetail.
        :rtype: List[str]
        """
        return self._legal_arrangement_members

    @legal_arrangement_members.setter
    def legal_arrangement_members(self, legal_arrangement_members):
        """Sets the legal_arrangement_members of this LegalArrangementEntityDetail.

        An array containing the roles of the entity in the legal arrangement.  The possible values depend on the legal arrangement `type`.  - For `type` **Association**: **ControllingPerson** and **Shareholder**.  - For `type` **Partnership**: **Partner** and **Shareholder**.  - For `type` **Trust**: **Trustee**, **Settlor**, **Protector**, **Beneficiary**,  and **Shareholder**.  

        :param legal_arrangement_members: The legal_arrangement_members of this LegalArrangementEntityDetail.
        :type legal_arrangement_members: List[str]
        """
        allowed_values = ["Beneficiary", "ControllingPerson", "Partner", "Protector", "Settlor", "Shareholder", "Trustee"]  # noqa: E501
        if not set(legal_arrangement_members).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `legal_arrangement_members` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(legal_arrangement_members) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._legal_arrangement_members = legal_arrangement_members

    @property
    def legal_entity_type(self):
        """Gets the legal_entity_type of this LegalArrangementEntityDetail.

        The legal entity type.  Possible values: **Business**, **Individual**, **NonProfit**, **PublicCompany**, or **Partnership**. 

        :return: The legal_entity_type of this LegalArrangementEntityDetail.
        :rtype: str
        """
        return self._legal_entity_type

    @legal_entity_type.setter
    def legal_entity_type(self, legal_entity_type):
        """Sets the legal_entity_type of this LegalArrangementEntityDetail.

        The legal entity type.  Possible values: **Business**, **Individual**, **NonProfit**, **PublicCompany**, or **Partnership**. 

        :param legal_entity_type: The legal_entity_type of this LegalArrangementEntityDetail.
        :type legal_entity_type: str
        """
        allowed_values = ["Business", "Individual", "NonProfit", "Partnership", "PublicCompany"]  # noqa: E501
        if legal_entity_type not in allowed_values:
            raise ValueError(
                "Invalid value for `legal_entity_type` ({0}), must be one of {1}"
                .format(legal_entity_type, allowed_values)
            )

        self._legal_entity_type = legal_entity_type

    @property
    def phone_number(self):
        """Gets the phone_number of this LegalArrangementEntityDetail.

        The phone number of the entity.

        :return: The phone_number of this LegalArrangementEntityDetail.
        :rtype: ViasPhoneNumber
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """Sets the phone_number of this LegalArrangementEntityDetail.

        The phone number of the entity.

        :param phone_number: The phone_number of this LegalArrangementEntityDetail.
        :type phone_number: ViasPhoneNumber
        """

        self._phone_number = phone_number

    @property
    def web_address(self):
        """Gets the web_address of this LegalArrangementEntityDetail.

        The URL of the website of the contact.

        :return: The web_address of this LegalArrangementEntityDetail.
        :rtype: str
        """
        return self._web_address

    @web_address.setter
    def web_address(self, web_address):
        """Sets the web_address of this LegalArrangementEntityDetail.

        The URL of the website of the contact.

        :param web_address: The web_address of this LegalArrangementEntityDetail.
        :type web_address: str
        """

        self._web_address = web_address
