# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.error_field_type import ErrorFieldType
from openapi_server.models.payout_schedule_response import PayoutScheduleResponse
from openapi_server import util


class UpdateAccountResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_code: str=None, bank_account_uuid: str=None, description: str=None, invalid_fields: List[ErrorFieldType]=None, metadata: Dict[str, str]=None, payout_method_code: str=None, payout_schedule: PayoutScheduleResponse=None, payout_speed: str=None, psp_reference: str=None, result_code: str=None):
        """UpdateAccountResponse - a model defined in OpenAPI

        :param account_code: The account_code of this UpdateAccountResponse.
        :param bank_account_uuid: The bank_account_uuid of this UpdateAccountResponse.
        :param description: The description of this UpdateAccountResponse.
        :param invalid_fields: The invalid_fields of this UpdateAccountResponse.
        :param metadata: The metadata of this UpdateAccountResponse.
        :param payout_method_code: The payout_method_code of this UpdateAccountResponse.
        :param payout_schedule: The payout_schedule of this UpdateAccountResponse.
        :param payout_speed: The payout_speed of this UpdateAccountResponse.
        :param psp_reference: The psp_reference of this UpdateAccountResponse.
        :param result_code: The result_code of this UpdateAccountResponse.
        """
        self.openapi_types = {
            'account_code': str,
            'bank_account_uuid': str,
            'description': str,
            'invalid_fields': List[ErrorFieldType],
            'metadata': Dict[str, str],
            'payout_method_code': str,
            'payout_schedule': PayoutScheduleResponse,
            'payout_speed': str,
            'psp_reference': str,
            'result_code': str
        }

        self.attribute_map = {
            'account_code': 'accountCode',
            'bank_account_uuid': 'bankAccountUUID',
            'description': 'description',
            'invalid_fields': 'invalidFields',
            'metadata': 'metadata',
            'payout_method_code': 'payoutMethodCode',
            'payout_schedule': 'payoutSchedule',
            'payout_speed': 'payoutSpeed',
            'psp_reference': 'pspReference',
            'result_code': 'resultCode'
        }

        self._account_code = account_code
        self._bank_account_uuid = bank_account_uuid
        self._description = description
        self._invalid_fields = invalid_fields
        self._metadata = metadata
        self._payout_method_code = payout_method_code
        self._payout_schedule = payout_schedule
        self._payout_speed = payout_speed
        self._psp_reference = psp_reference
        self._result_code = result_code

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateAccountResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateAccountResponse of this UpdateAccountResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_code(self):
        """Gets the account_code of this UpdateAccountResponse.

        The code of the account.

        :return: The account_code of this UpdateAccountResponse.
        :rtype: str
        """
        return self._account_code

    @account_code.setter
    def account_code(self, account_code):
        """Sets the account_code of this UpdateAccountResponse.

        The code of the account.

        :param account_code: The account_code of this UpdateAccountResponse.
        :type account_code: str
        """
        if account_code is None:
            raise ValueError("Invalid value for `account_code`, must not be `None`")

        self._account_code = account_code

    @property
    def bank_account_uuid(self):
        """Gets the bank_account_uuid of this UpdateAccountResponse.

        The bankAccountUUID of the bank account held by the account holder to couple the account with. Scheduled payouts in currencies matching the currency of this bank account will be sent to this bank account. Payouts in different currencies will be sent to a matching bank account of the account holder.

        :return: The bank_account_uuid of this UpdateAccountResponse.
        :rtype: str
        """
        return self._bank_account_uuid

    @bank_account_uuid.setter
    def bank_account_uuid(self, bank_account_uuid):
        """Sets the bank_account_uuid of this UpdateAccountResponse.

        The bankAccountUUID of the bank account held by the account holder to couple the account with. Scheduled payouts in currencies matching the currency of this bank account will be sent to this bank account. Payouts in different currencies will be sent to a matching bank account of the account holder.

        :param bank_account_uuid: The bank_account_uuid of this UpdateAccountResponse.
        :type bank_account_uuid: str
        """

        self._bank_account_uuid = bank_account_uuid

    @property
    def description(self):
        """Gets the description of this UpdateAccountResponse.

        The description of the account.

        :return: The description of this UpdateAccountResponse.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this UpdateAccountResponse.

        The description of the account.

        :param description: The description of this UpdateAccountResponse.
        :type description: str
        """

        self._description = description

    @property
    def invalid_fields(self):
        """Gets the invalid_fields of this UpdateAccountResponse.

        A list of fields that caused the `/updateAccount` request to fail.

        :return: The invalid_fields of this UpdateAccountResponse.
        :rtype: List[ErrorFieldType]
        """
        return self._invalid_fields

    @invalid_fields.setter
    def invalid_fields(self, invalid_fields):
        """Sets the invalid_fields of this UpdateAccountResponse.

        A list of fields that caused the `/updateAccount` request to fail.

        :param invalid_fields: The invalid_fields of this UpdateAccountResponse.
        :type invalid_fields: List[ErrorFieldType]
        """

        self._invalid_fields = invalid_fields

    @property
    def metadata(self):
        """Gets the metadata of this UpdateAccountResponse.

        A set of key and value pairs containing metadata.

        :return: The metadata of this UpdateAccountResponse.
        :rtype: Dict[str, str]
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this UpdateAccountResponse.

        A set of key and value pairs containing metadata.

        :param metadata: The metadata of this UpdateAccountResponse.
        :type metadata: Dict[str, str]
        """

        self._metadata = metadata

    @property
    def payout_method_code(self):
        """Gets the payout_method_code of this UpdateAccountResponse.

        The payout method code held by the account holder to couple the account with. Scheduled card payouts will be sent using this payout method code.

        :return: The payout_method_code of this UpdateAccountResponse.
        :rtype: str
        """
        return self._payout_method_code

    @payout_method_code.setter
    def payout_method_code(self, payout_method_code):
        """Sets the payout_method_code of this UpdateAccountResponse.

        The payout method code held by the account holder to couple the account with. Scheduled card payouts will be sent using this payout method code.

        :param payout_method_code: The payout_method_code of this UpdateAccountResponse.
        :type payout_method_code: str
        """

        self._payout_method_code = payout_method_code

    @property
    def payout_schedule(self):
        """Gets the payout_schedule of this UpdateAccountResponse.

        The payout schedule of the account.

        :return: The payout_schedule of this UpdateAccountResponse.
        :rtype: PayoutScheduleResponse
        """
        return self._payout_schedule

    @payout_schedule.setter
    def payout_schedule(self, payout_schedule):
        """Sets the payout_schedule of this UpdateAccountResponse.

        The payout schedule of the account.

        :param payout_schedule: The payout_schedule of this UpdateAccountResponse.
        :type payout_schedule: PayoutScheduleResponse
        """

        self._payout_schedule = payout_schedule

    @property
    def payout_speed(self):
        """Gets the payout_speed of this UpdateAccountResponse.

        Speed with which payouts for this account are processed. Permitted values: `STANDARD`, `SAME_DAY`.

        :return: The payout_speed of this UpdateAccountResponse.
        :rtype: str
        """
        return self._payout_speed

    @payout_speed.setter
    def payout_speed(self, payout_speed):
        """Sets the payout_speed of this UpdateAccountResponse.

        Speed with which payouts for this account are processed. Permitted values: `STANDARD`, `SAME_DAY`.

        :param payout_speed: The payout_speed of this UpdateAccountResponse.
        :type payout_speed: str
        """
        allowed_values = ["INSTANT", "SAME_DAY", "STANDARD"]  # noqa: E501
        if payout_speed not in allowed_values:
            raise ValueError(
                "Invalid value for `payout_speed` ({0}), must be one of {1}"
                .format(payout_speed, allowed_values)
            )

        self._payout_speed = payout_speed

    @property
    def psp_reference(self):
        """Gets the psp_reference of this UpdateAccountResponse.

        The reference of a request. Can be used to uniquely identify the request.

        :return: The psp_reference of this UpdateAccountResponse.
        :rtype: str
        """
        return self._psp_reference

    @psp_reference.setter
    def psp_reference(self, psp_reference):
        """Sets the psp_reference of this UpdateAccountResponse.

        The reference of a request. Can be used to uniquely identify the request.

        :param psp_reference: The psp_reference of this UpdateAccountResponse.
        :type psp_reference: str
        """

        self._psp_reference = psp_reference

    @property
    def result_code(self):
        """Gets the result_code of this UpdateAccountResponse.

        The result code.

        :return: The result_code of this UpdateAccountResponse.
        :rtype: str
        """
        return self._result_code

    @result_code.setter
    def result_code(self, result_code):
        """Sets the result_code of this UpdateAccountResponse.

        The result code.

        :param result_code: The result_code of this UpdateAccountResponse.
        :type result_code: str
        """

        self._result_code = result_code
