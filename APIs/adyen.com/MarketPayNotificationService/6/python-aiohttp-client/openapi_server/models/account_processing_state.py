# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.amount import Amount
from openapi_server import util


class AccountProcessingState(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, disable_reason: str=None, disabled: bool=None, processed_from: Amount=None, processed_to: Amount=None, tier_number: int=None):
        """AccountProcessingState - a model defined in OpenAPI

        :param disable_reason: The disable_reason of this AccountProcessingState.
        :param disabled: The disabled of this AccountProcessingState.
        :param processed_from: The processed_from of this AccountProcessingState.
        :param processed_to: The processed_to of this AccountProcessingState.
        :param tier_number: The tier_number of this AccountProcessingState.
        """
        self.openapi_types = {
            'disable_reason': str,
            'disabled': bool,
            'processed_from': Amount,
            'processed_to': Amount,
            'tier_number': int
        }

        self.attribute_map = {
            'disable_reason': 'disableReason',
            'disabled': 'disabled',
            'processed_from': 'processedFrom',
            'processed_to': 'processedTo',
            'tier_number': 'tierNumber'
        }

        self._disable_reason = disable_reason
        self._disabled = disabled
        self._processed_from = processed_from
        self._processed_to = processed_to
        self._tier_number = tier_number

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AccountProcessingState':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AccountProcessingState of this AccountProcessingState.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def disable_reason(self):
        """Gets the disable_reason of this AccountProcessingState.

        The reason why processing has been disabled.

        :return: The disable_reason of this AccountProcessingState.
        :rtype: str
        """
        return self._disable_reason

    @disable_reason.setter
    def disable_reason(self, disable_reason):
        """Sets the disable_reason of this AccountProcessingState.

        The reason why processing has been disabled.

        :param disable_reason: The disable_reason of this AccountProcessingState.
        :type disable_reason: str
        """

        self._disable_reason = disable_reason

    @property
    def disabled(self):
        """Gets the disabled of this AccountProcessingState.

        Indicates whether the processing of payments is allowed.

        :return: The disabled of this AccountProcessingState.
        :rtype: bool
        """
        return self._disabled

    @disabled.setter
    def disabled(self, disabled):
        """Sets the disabled of this AccountProcessingState.

        Indicates whether the processing of payments is allowed.

        :param disabled: The disabled of this AccountProcessingState.
        :type disabled: bool
        """

        self._disabled = disabled

    @property
    def processed_from(self):
        """Gets the processed_from of this AccountProcessingState.

        The lower bound of the processing tier (i.e., an account holder must have processed at least this amount of money in order to be placed into this tier).

        :return: The processed_from of this AccountProcessingState.
        :rtype: Amount
        """
        return self._processed_from

    @processed_from.setter
    def processed_from(self, processed_from):
        """Sets the processed_from of this AccountProcessingState.

        The lower bound of the processing tier (i.e., an account holder must have processed at least this amount of money in order to be placed into this tier).

        :param processed_from: The processed_from of this AccountProcessingState.
        :type processed_from: Amount
        """

        self._processed_from = processed_from

    @property
    def processed_to(self):
        """Gets the processed_to of this AccountProcessingState.

        The upper bound of the processing tier (i.e., an account holder must have processed less than this amount of money in order to be placed into this tier).

        :return: The processed_to of this AccountProcessingState.
        :rtype: Amount
        """
        return self._processed_to

    @processed_to.setter
    def processed_to(self, processed_to):
        """Sets the processed_to of this AccountProcessingState.

        The upper bound of the processing tier (i.e., an account holder must have processed less than this amount of money in order to be placed into this tier).

        :param processed_to: The processed_to of this AccountProcessingState.
        :type processed_to: Amount
        """

        self._processed_to = processed_to

    @property
    def tier_number(self):
        """Gets the tier_number of this AccountProcessingState.

        The processing tier that the account holder occupies.

        :return: The tier_number of this AccountProcessingState.
        :rtype: int
        """
        return self._tier_number

    @tier_number.setter
    def tier_number(self, tier_number):
        """Sets the tier_number of this AccountProcessingState.

        The processing tier that the account holder occupies.

        :param tier_number: The tier_number of this AccountProcessingState.
        :type tier_number: int
        """

        self._tier_number = tier_number
