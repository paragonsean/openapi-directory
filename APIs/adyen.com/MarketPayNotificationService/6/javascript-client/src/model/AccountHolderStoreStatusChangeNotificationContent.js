/**
 * Classic Platforms - Notifications
 * This API is used for the classic integration. If you are just starting your implementation, refer to our [new integration guide](https://docs.adyen.com/marketplaces-and-platforms) instead.  The Notification API sends notifications to the endpoints specified in a given subscription.  Subscriptions are managed through the Notification Configuration API. The API specifications listed here detail the format of each notification.  For more information, refer to our [documentation](https://docs.adyen.com/marketplaces-and-platforms/classic/notifications).
 *
 * The version of the OpenAPI document: 6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ErrorFieldType from './ErrorFieldType';

/**
 * The AccountHolderStoreStatusChangeNotificationContent model module.
 * @module model/AccountHolderStoreStatusChangeNotificationContent
 * @version 6
 */
class AccountHolderStoreStatusChangeNotificationContent {
    /**
     * Constructs a new <code>AccountHolderStoreStatusChangeNotificationContent</code>.
     * @alias module:model/AccountHolderStoreStatusChangeNotificationContent
     * @param accountHolderCode {String} The code of the account holder.
     * @param newStatus {module:model/AccountHolderStoreStatusChangeNotificationContent.NewStatusEnum} The new status of the account holder.
     * @param oldStatus {module:model/AccountHolderStoreStatusChangeNotificationContent.OldStatusEnum} The former status of the account holder.
     * @param store {String} Alphanumeric identifier of the store.
     * @param storeReference {String} Store store reference.
     */
    constructor(accountHolderCode, newStatus, oldStatus, store, storeReference) { 
        
        AccountHolderStoreStatusChangeNotificationContent.initialize(this, accountHolderCode, newStatus, oldStatus, store, storeReference);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, accountHolderCode, newStatus, oldStatus, store, storeReference) { 
        obj['accountHolderCode'] = accountHolderCode;
        obj['newStatus'] = newStatus;
        obj['oldStatus'] = oldStatus;
        obj['store'] = store;
        obj['storeReference'] = storeReference;
    }

    /**
     * Constructs a <code>AccountHolderStoreStatusChangeNotificationContent</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AccountHolderStoreStatusChangeNotificationContent} obj Optional instance to populate.
     * @return {module:model/AccountHolderStoreStatusChangeNotificationContent} The populated <code>AccountHolderStoreStatusChangeNotificationContent</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AccountHolderStoreStatusChangeNotificationContent();

            if (data.hasOwnProperty('accountHolderCode')) {
                obj['accountHolderCode'] = ApiClient.convertToType(data['accountHolderCode'], 'String');
            }
            if (data.hasOwnProperty('invalidFields')) {
                obj['invalidFields'] = ApiClient.convertToType(data['invalidFields'], [ErrorFieldType]);
            }
            if (data.hasOwnProperty('newStatus')) {
                obj['newStatus'] = ApiClient.convertToType(data['newStatus'], 'String');
            }
            if (data.hasOwnProperty('oldStatus')) {
                obj['oldStatus'] = ApiClient.convertToType(data['oldStatus'], 'String');
            }
            if (data.hasOwnProperty('reason')) {
                obj['reason'] = ApiClient.convertToType(data['reason'], 'String');
            }
            if (data.hasOwnProperty('store')) {
                obj['store'] = ApiClient.convertToType(data['store'], 'String');
            }
            if (data.hasOwnProperty('storeReference')) {
                obj['storeReference'] = ApiClient.convertToType(data['storeReference'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AccountHolderStoreStatusChangeNotificationContent</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AccountHolderStoreStatusChangeNotificationContent</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of AccountHolderStoreStatusChangeNotificationContent.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['accountHolderCode'] && !(typeof data['accountHolderCode'] === 'string' || data['accountHolderCode'] instanceof String)) {
            throw new Error("Expected the field `accountHolderCode` to be a primitive type in the JSON string but got " + data['accountHolderCode']);
        }
        if (data['invalidFields']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['invalidFields'])) {
                throw new Error("Expected the field `invalidFields` to be an array in the JSON data but got " + data['invalidFields']);
            }
            // validate the optional field `invalidFields` (array)
            for (const item of data['invalidFields']) {
                ErrorFieldType.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['newStatus'] && !(typeof data['newStatus'] === 'string' || data['newStatus'] instanceof String)) {
            throw new Error("Expected the field `newStatus` to be a primitive type in the JSON string but got " + data['newStatus']);
        }
        // ensure the json data is a string
        if (data['oldStatus'] && !(typeof data['oldStatus'] === 'string' || data['oldStatus'] instanceof String)) {
            throw new Error("Expected the field `oldStatus` to be a primitive type in the JSON string but got " + data['oldStatus']);
        }
        // ensure the json data is a string
        if (data['reason'] && !(typeof data['reason'] === 'string' || data['reason'] instanceof String)) {
            throw new Error("Expected the field `reason` to be a primitive type in the JSON string but got " + data['reason']);
        }
        // ensure the json data is a string
        if (data['store'] && !(typeof data['store'] === 'string' || data['store'] instanceof String)) {
            throw new Error("Expected the field `store` to be a primitive type in the JSON string but got " + data['store']);
        }
        // ensure the json data is a string
        if (data['storeReference'] && !(typeof data['storeReference'] === 'string' || data['storeReference'] instanceof String)) {
            throw new Error("Expected the field `storeReference` to be a primitive type in the JSON string but got " + data['storeReference']);
        }

        return true;
    }


}

AccountHolderStoreStatusChangeNotificationContent.RequiredProperties = ["accountHolderCode", "newStatus", "oldStatus", "store", "storeReference"];

/**
 * The code of the account holder.
 * @member {String} accountHolderCode
 */
AccountHolderStoreStatusChangeNotificationContent.prototype['accountHolderCode'] = undefined;

/**
 * In case the store status has not been updated, contains fields that did not pass the validation.
 * @member {Array.<module:model/ErrorFieldType>} invalidFields
 */
AccountHolderStoreStatusChangeNotificationContent.prototype['invalidFields'] = undefined;

/**
 * The new status of the account holder.
 * @member {module:model/AccountHolderStoreStatusChangeNotificationContent.NewStatusEnum} newStatus
 */
AccountHolderStoreStatusChangeNotificationContent.prototype['newStatus'] = undefined;

/**
 * The former status of the account holder.
 * @member {module:model/AccountHolderStoreStatusChangeNotificationContent.OldStatusEnum} oldStatus
 */
AccountHolderStoreStatusChangeNotificationContent.prototype['oldStatus'] = undefined;

/**
 * The reason for the status change.
 * @member {String} reason
 */
AccountHolderStoreStatusChangeNotificationContent.prototype['reason'] = undefined;

/**
 * Alphanumeric identifier of the store.
 * @member {String} store
 */
AccountHolderStoreStatusChangeNotificationContent.prototype['store'] = undefined;

/**
 * Store store reference.
 * @member {String} storeReference
 */
AccountHolderStoreStatusChangeNotificationContent.prototype['storeReference'] = undefined;





/**
 * Allowed values for the <code>newStatus</code> property.
 * @enum {String}
 * @readonly
 */
AccountHolderStoreStatusChangeNotificationContent['NewStatusEnum'] = {

    /**
     * value: "Active"
     * @const
     */
    "Active": "Active",

    /**
     * value: "Closed"
     * @const
     */
    "Closed": "Closed",

    /**
     * value: "Inactive"
     * @const
     */
    "Inactive": "Inactive",

    /**
     * value: "InactiveWithModifications"
     * @const
     */
    "InactiveWithModifications": "InactiveWithModifications",

    /**
     * value: "Pending"
     * @const
     */
    "Pending": "Pending"
};


/**
 * Allowed values for the <code>oldStatus</code> property.
 * @enum {String}
 * @readonly
 */
AccountHolderStoreStatusChangeNotificationContent['OldStatusEnum'] = {

    /**
     * value: "Active"
     * @const
     */
    "Active": "Active",

    /**
     * value: "Closed"
     * @const
     */
    "Closed": "Closed",

    /**
     * value: "Inactive"
     * @const
     */
    "Inactive": "Inactive",

    /**
     * value: "InactiveWithModifications"
     * @const
     */
    "InactiveWithModifications": "InactiveWithModifications",

    /**
     * value: "Pending"
     * @const
     */
    "Pending": "Pending"
};



export default AccountHolderStoreStatusChangeNotificationContent;

