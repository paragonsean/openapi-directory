/**
 * Classic Platforms - Notifications
 * This API is used for the classic integration. If you are just starting your implementation, refer to our [new integration guide](https://docs.adyen.com/marketplaces-and-platforms) instead.  The Notification API sends notifications to the endpoints specified in a given subscription.  Subscriptions are managed through the Notification Configuration API. The API specifications listed here detail the format of each notification.  For more information, refer to our [documentation](https://docs.adyen.com/marketplaces-and-platforms/classic/notifications).
 *
 * The version of the OpenAPI document: 6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import KYCCheckResult from './KYCCheckResult';
import KYCLegalArrangementCheckResult from './KYCLegalArrangementCheckResult';
import KYCLegalArrangementEntityCheckResult from './KYCLegalArrangementEntityCheckResult';
import KYCPayoutMethodCheckResult from './KYCPayoutMethodCheckResult';
import KYCShareholderCheckResult from './KYCShareholderCheckResult';
import KYCSignatoryCheckResult from './KYCSignatoryCheckResult';
import KYCUltimateParentCompanyCheckResult from './KYCUltimateParentCompanyCheckResult';

/**
 * The KYCVerificationResult model module.
 * @module model/KYCVerificationResult
 * @version 6
 */
class KYCVerificationResult {
    /**
     * Constructs a new <code>KYCVerificationResult</code>.
     * @alias module:model/KYCVerificationResult
     */
    constructor() { 
        
        KYCVerificationResult.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>KYCVerificationResult</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/KYCVerificationResult} obj Optional instance to populate.
     * @return {module:model/KYCVerificationResult} The populated <code>KYCVerificationResult</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new KYCVerificationResult();

            if (data.hasOwnProperty('accountHolder')) {
                obj['accountHolder'] = KYCCheckResult.constructFromObject(data['accountHolder']);
            }
            if (data.hasOwnProperty('legalArrangements')) {
                obj['legalArrangements'] = ApiClient.convertToType(data['legalArrangements'], [KYCLegalArrangementCheckResult]);
            }
            if (data.hasOwnProperty('legalArrangementsEntities')) {
                obj['legalArrangementsEntities'] = ApiClient.convertToType(data['legalArrangementsEntities'], [KYCLegalArrangementEntityCheckResult]);
            }
            if (data.hasOwnProperty('payoutMethods')) {
                obj['payoutMethods'] = ApiClient.convertToType(data['payoutMethods'], [KYCPayoutMethodCheckResult]);
            }
            if (data.hasOwnProperty('shareholders')) {
                obj['shareholders'] = ApiClient.convertToType(data['shareholders'], [KYCShareholderCheckResult]);
            }
            if (data.hasOwnProperty('signatories')) {
                obj['signatories'] = ApiClient.convertToType(data['signatories'], [KYCSignatoryCheckResult]);
            }
            if (data.hasOwnProperty('ultimateParentCompany')) {
                obj['ultimateParentCompany'] = ApiClient.convertToType(data['ultimateParentCompany'], [KYCUltimateParentCompanyCheckResult]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>KYCVerificationResult</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>KYCVerificationResult</code>.
     */
    static validateJSON(data) {
        // validate the optional field `accountHolder`
        if (data['accountHolder']) { // data not null
          KYCCheckResult.validateJSON(data['accountHolder']);
        }
        if (data['legalArrangements']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['legalArrangements'])) {
                throw new Error("Expected the field `legalArrangements` to be an array in the JSON data but got " + data['legalArrangements']);
            }
            // validate the optional field `legalArrangements` (array)
            for (const item of data['legalArrangements']) {
                KYCLegalArrangementCheckResult.validateJSON(item);
            };
        }
        if (data['legalArrangementsEntities']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['legalArrangementsEntities'])) {
                throw new Error("Expected the field `legalArrangementsEntities` to be an array in the JSON data but got " + data['legalArrangementsEntities']);
            }
            // validate the optional field `legalArrangementsEntities` (array)
            for (const item of data['legalArrangementsEntities']) {
                KYCLegalArrangementEntityCheckResult.validateJSON(item);
            };
        }
        if (data['payoutMethods']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['payoutMethods'])) {
                throw new Error("Expected the field `payoutMethods` to be an array in the JSON data but got " + data['payoutMethods']);
            }
            // validate the optional field `payoutMethods` (array)
            for (const item of data['payoutMethods']) {
                KYCPayoutMethodCheckResult.validateJSON(item);
            };
        }
        if (data['shareholders']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['shareholders'])) {
                throw new Error("Expected the field `shareholders` to be an array in the JSON data but got " + data['shareholders']);
            }
            // validate the optional field `shareholders` (array)
            for (const item of data['shareholders']) {
                KYCShareholderCheckResult.validateJSON(item);
            };
        }
        if (data['signatories']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['signatories'])) {
                throw new Error("Expected the field `signatories` to be an array in the JSON data but got " + data['signatories']);
            }
            // validate the optional field `signatories` (array)
            for (const item of data['signatories']) {
                KYCSignatoryCheckResult.validateJSON(item);
            };
        }
        if (data['ultimateParentCompany']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['ultimateParentCompany'])) {
                throw new Error("Expected the field `ultimateParentCompany` to be an array in the JSON data but got " + data['ultimateParentCompany']);
            }
            // validate the optional field `ultimateParentCompany` (array)
            for (const item of data['ultimateParentCompany']) {
                KYCUltimateParentCompanyCheckResult.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * The results of the checks on the account holder.
 * @member {module:model/KYCCheckResult} accountHolder
 */
KYCVerificationResult.prototype['accountHolder'] = undefined;

/**
 * The results of the checks on the legal arrangements.
 * @member {Array.<module:model/KYCLegalArrangementCheckResult>} legalArrangements
 */
KYCVerificationResult.prototype['legalArrangements'] = undefined;

/**
 * The results of the checks on the legal arrangement entities.
 * @member {Array.<module:model/KYCLegalArrangementEntityCheckResult>} legalArrangementsEntities
 */
KYCVerificationResult.prototype['legalArrangementsEntities'] = undefined;

/**
 * The results of the checks on the payout methods.
 * @member {Array.<module:model/KYCPayoutMethodCheckResult>} payoutMethods
 */
KYCVerificationResult.prototype['payoutMethods'] = undefined;

/**
 * The results of the checks on the shareholders.
 * @member {Array.<module:model/KYCShareholderCheckResult>} shareholders
 */
KYCVerificationResult.prototype['shareholders'] = undefined;

/**
 * The results of the checks on the signatories.
 * @member {Array.<module:model/KYCSignatoryCheckResult>} signatories
 */
KYCVerificationResult.prototype['signatories'] = undefined;

/**
 * The result of the check on the Ultimate Parent Company.
 * @member {Array.<module:model/KYCUltimateParentCompanyCheckResult>} ultimateParentCompany
 */
KYCVerificationResult.prototype['ultimateParentCompany'] = undefined;






export default KYCVerificationResult;

