/**
 * Classic Platforms - Notifications
 * This API is used for the classic integration. If you are just starting your implementation, refer to our [new integration guide](https://docs.adyen.com/marketplaces-and-platforms) instead.  The Notification API sends notifications to the endpoints specified in a given subscription.  Subscriptions are managed through the Notification Configuration API. The API specifications listed here detail the format of each notification.  For more information, refer to our [documentation](https://docs.adyen.com/marketplaces-and-platforms/classic/notifications).
 *
 * The version of the OpenAPI document: 6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Amount from './Amount';
import BankAccountDetail from './BankAccountDetail';
import ErrorFieldType from './ErrorFieldType';
import LocalDate from './LocalDate';
import OperationStatus from './OperationStatus';

/**
 * The AccountHolderPayoutNotificationContent model module.
 * @module model/AccountHolderPayoutNotificationContent
 * @version 6
 */
class AccountHolderPayoutNotificationContent {
    /**
     * Constructs a new <code>AccountHolderPayoutNotificationContent</code>.
     * @alias module:model/AccountHolderPayoutNotificationContent
     */
    constructor() { 
        
        AccountHolderPayoutNotificationContent.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AccountHolderPayoutNotificationContent</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AccountHolderPayoutNotificationContent} obj Optional instance to populate.
     * @return {module:model/AccountHolderPayoutNotificationContent} The populated <code>AccountHolderPayoutNotificationContent</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AccountHolderPayoutNotificationContent();

            if (data.hasOwnProperty('accountCode')) {
                obj['accountCode'] = ApiClient.convertToType(data['accountCode'], 'String');
            }
            if (data.hasOwnProperty('accountHolderCode')) {
                obj['accountHolderCode'] = ApiClient.convertToType(data['accountHolderCode'], 'String');
            }
            if (data.hasOwnProperty('amounts')) {
                obj['amounts'] = ApiClient.convertToType(data['amounts'], [Amount]);
            }
            if (data.hasOwnProperty('bankAccountDetail')) {
                obj['bankAccountDetail'] = BankAccountDetail.constructFromObject(data['bankAccountDetail']);
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('estimatedArrivalDate')) {
                obj['estimatedArrivalDate'] = LocalDate.constructFromObject(data['estimatedArrivalDate']);
            }
            if (data.hasOwnProperty('invalidFields')) {
                obj['invalidFields'] = ApiClient.convertToType(data['invalidFields'], [ErrorFieldType]);
            }
            if (data.hasOwnProperty('merchantReference')) {
                obj['merchantReference'] = ApiClient.convertToType(data['merchantReference'], 'String');
            }
            if (data.hasOwnProperty('originalPspReference')) {
                obj['originalPspReference'] = ApiClient.convertToType(data['originalPspReference'], 'String');
            }
            if (data.hasOwnProperty('payoutAccountCountry')) {
                obj['payoutAccountCountry'] = ApiClient.convertToType(data['payoutAccountCountry'], 'String');
            }
            if (data.hasOwnProperty('payoutAccountNumber')) {
                obj['payoutAccountNumber'] = ApiClient.convertToType(data['payoutAccountNumber'], 'String');
            }
            if (data.hasOwnProperty('payoutBalanceAccountId')) {
                obj['payoutBalanceAccountId'] = ApiClient.convertToType(data['payoutBalanceAccountId'], 'String');
            }
            if (data.hasOwnProperty('payoutBankName')) {
                obj['payoutBankName'] = ApiClient.convertToType(data['payoutBankName'], 'String');
            }
            if (data.hasOwnProperty('payoutBranchCode')) {
                obj['payoutBranchCode'] = ApiClient.convertToType(data['payoutBranchCode'], 'String');
            }
            if (data.hasOwnProperty('payoutReference')) {
                obj['payoutReference'] = ApiClient.convertToType(data['payoutReference'], 'Number');
            }
            if (data.hasOwnProperty('payoutSpeed')) {
                obj['payoutSpeed'] = ApiClient.convertToType(data['payoutSpeed'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = OperationStatus.constructFromObject(data['status']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AccountHolderPayoutNotificationContent</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AccountHolderPayoutNotificationContent</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['accountCode'] && !(typeof data['accountCode'] === 'string' || data['accountCode'] instanceof String)) {
            throw new Error("Expected the field `accountCode` to be a primitive type in the JSON string but got " + data['accountCode']);
        }
        // ensure the json data is a string
        if (data['accountHolderCode'] && !(typeof data['accountHolderCode'] === 'string' || data['accountHolderCode'] instanceof String)) {
            throw new Error("Expected the field `accountHolderCode` to be a primitive type in the JSON string but got " + data['accountHolderCode']);
        }
        if (data['amounts']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['amounts'])) {
                throw new Error("Expected the field `amounts` to be an array in the JSON data but got " + data['amounts']);
            }
            // validate the optional field `amounts` (array)
            for (const item of data['amounts']) {
                Amount.validateJSON(item);
            };
        }
        // validate the optional field `bankAccountDetail`
        if (data['bankAccountDetail']) { // data not null
          BankAccountDetail.validateJSON(data['bankAccountDetail']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // validate the optional field `estimatedArrivalDate`
        if (data['estimatedArrivalDate']) { // data not null
          LocalDate.validateJSON(data['estimatedArrivalDate']);
        }
        if (data['invalidFields']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['invalidFields'])) {
                throw new Error("Expected the field `invalidFields` to be an array in the JSON data but got " + data['invalidFields']);
            }
            // validate the optional field `invalidFields` (array)
            for (const item of data['invalidFields']) {
                ErrorFieldType.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['merchantReference'] && !(typeof data['merchantReference'] === 'string' || data['merchantReference'] instanceof String)) {
            throw new Error("Expected the field `merchantReference` to be a primitive type in the JSON string but got " + data['merchantReference']);
        }
        // ensure the json data is a string
        if (data['originalPspReference'] && !(typeof data['originalPspReference'] === 'string' || data['originalPspReference'] instanceof String)) {
            throw new Error("Expected the field `originalPspReference` to be a primitive type in the JSON string but got " + data['originalPspReference']);
        }
        // ensure the json data is a string
        if (data['payoutAccountCountry'] && !(typeof data['payoutAccountCountry'] === 'string' || data['payoutAccountCountry'] instanceof String)) {
            throw new Error("Expected the field `payoutAccountCountry` to be a primitive type in the JSON string but got " + data['payoutAccountCountry']);
        }
        // ensure the json data is a string
        if (data['payoutAccountNumber'] && !(typeof data['payoutAccountNumber'] === 'string' || data['payoutAccountNumber'] instanceof String)) {
            throw new Error("Expected the field `payoutAccountNumber` to be a primitive type in the JSON string but got " + data['payoutAccountNumber']);
        }
        // ensure the json data is a string
        if (data['payoutBalanceAccountId'] && !(typeof data['payoutBalanceAccountId'] === 'string' || data['payoutBalanceAccountId'] instanceof String)) {
            throw new Error("Expected the field `payoutBalanceAccountId` to be a primitive type in the JSON string but got " + data['payoutBalanceAccountId']);
        }
        // ensure the json data is a string
        if (data['payoutBankName'] && !(typeof data['payoutBankName'] === 'string' || data['payoutBankName'] instanceof String)) {
            throw new Error("Expected the field `payoutBankName` to be a primitive type in the JSON string but got " + data['payoutBankName']);
        }
        // ensure the json data is a string
        if (data['payoutBranchCode'] && !(typeof data['payoutBranchCode'] === 'string' || data['payoutBranchCode'] instanceof String)) {
            throw new Error("Expected the field `payoutBranchCode` to be a primitive type in the JSON string but got " + data['payoutBranchCode']);
        }
        // ensure the json data is a string
        if (data['payoutSpeed'] && !(typeof data['payoutSpeed'] === 'string' || data['payoutSpeed'] instanceof String)) {
            throw new Error("Expected the field `payoutSpeed` to be a primitive type in the JSON string but got " + data['payoutSpeed']);
        }
        // validate the optional field `status`
        if (data['status']) { // data not null
          OperationStatus.validateJSON(data['status']);
        }

        return true;
    }


}



/**
 * The code of the account from which the payout was made.
 * @member {String} accountCode
 */
AccountHolderPayoutNotificationContent.prototype['accountCode'] = undefined;

/**
 * The code of the Account Holder to which the payout was made.
 * @member {String} accountHolderCode
 */
AccountHolderPayoutNotificationContent.prototype['accountHolderCode'] = undefined;

/**
 * The payout amounts (per currency).
 * @member {Array.<module:model/Amount>} amounts
 */
AccountHolderPayoutNotificationContent.prototype['amounts'] = undefined;

/**
 * Details of the Bank Account to which the payout was made.
 * @member {module:model/BankAccountDetail} bankAccountDetail
 */
AccountHolderPayoutNotificationContent.prototype['bankAccountDetail'] = undefined;

/**
 * A description of the payout.
 * @member {String} description
 */
AccountHolderPayoutNotificationContent.prototype['description'] = undefined;

/**
 * The estimated date of arrival.
 * @member {module:model/LocalDate} estimatedArrivalDate
 */
AccountHolderPayoutNotificationContent.prototype['estimatedArrivalDate'] = undefined;

/**
 * Invalid fields list.
 * @member {Array.<module:model/ErrorFieldType>} invalidFields
 */
AccountHolderPayoutNotificationContent.prototype['invalidFields'] = undefined;

/**
 * The merchant reference.
 * @member {String} merchantReference
 */
AccountHolderPayoutNotificationContent.prototype['merchantReference'] = undefined;

/**
 * The PSP reference of the original payout.
 * @member {String} originalPspReference
 */
AccountHolderPayoutNotificationContent.prototype['originalPspReference'] = undefined;

/**
 * The country code of the bank from which the payout was initiated.
 * @member {String} payoutAccountCountry
 */
AccountHolderPayoutNotificationContent.prototype['payoutAccountCountry'] = undefined;

/**
 * The account number of the bank from which the payout was initiated.
 * @member {String} payoutAccountNumber
 */
AccountHolderPayoutNotificationContent.prototype['payoutAccountNumber'] = undefined;

/**
 * The balance account id to which payment was made
 * @member {String} payoutBalanceAccountId
 */
AccountHolderPayoutNotificationContent.prototype['payoutBalanceAccountId'] = undefined;

/**
 * The name of the bank the payout from which the payout was initiated.
 * @member {String} payoutBankName
 */
AccountHolderPayoutNotificationContent.prototype['payoutBankName'] = undefined;

/**
 * The branch code of the bank from which the payout was initiated.
 * @member {String} payoutBranchCode
 */
AccountHolderPayoutNotificationContent.prototype['payoutBranchCode'] = undefined;

/**
 * The unique payout identifier.
 * @member {Number} payoutReference
 */
AccountHolderPayoutNotificationContent.prototype['payoutReference'] = undefined;

/**
 * Speed with which payouts for this account are processed. Permitted values: `STANDARD`, `SAME_DAY`.
 * @member {module:model/AccountHolderPayoutNotificationContent.PayoutSpeedEnum} payoutSpeed
 */
AccountHolderPayoutNotificationContent.prototype['payoutSpeed'] = undefined;

/**
 * The payout status.
 * @member {module:model/OperationStatus} status
 */
AccountHolderPayoutNotificationContent.prototype['status'] = undefined;





/**
 * Allowed values for the <code>payoutSpeed</code> property.
 * @enum {String}
 * @readonly
 */
AccountHolderPayoutNotificationContent['PayoutSpeedEnum'] = {

    /**
     * value: "INSTANT"
     * @const
     */
    "INSTANT": "INSTANT",

    /**
     * value: "SAME_DAY"
     * @const
     */
    "SAME_DAY": "SAME_DAY",

    /**
     * value: "STANDARD"
     * @const
     */
    "STANDARD": "STANDARD"
};



export default AccountHolderPayoutNotificationContent;

