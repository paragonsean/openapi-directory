/**
 * Classic Platforms - Notifications
 * This API is used for the classic integration. If you are just starting your implementation, refer to our [new integration guide](https://docs.adyen.com/marketplaces-and-platforms) instead.  The Notification API sends notifications to the endpoints specified in a given subscription.  Subscriptions are managed through the Notification Configuration API. The API specifications listed here detail the format of each notification.  For more information, refer to our [documentation](https://docs.adyen.com/marketplaces-and-platforms/classic/notifications).
 *
 * The version of the OpenAPI document: 6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ViasAddress model module.
 * @module model/ViasAddress
 * @version 6
 */
class ViasAddress {
    /**
     * Constructs a new <code>ViasAddress</code>.
     * @alias module:model/ViasAddress
     * @param country {String} The two-character country code of the address in ISO-3166-1 alpha-2 format. For example, **NL**.
     */
    constructor(country) { 
        
        ViasAddress.initialize(this, country);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, country) { 
        obj['country'] = country;
    }

    /**
     * Constructs a <code>ViasAddress</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ViasAddress} obj Optional instance to populate.
     * @return {module:model/ViasAddress} The populated <code>ViasAddress</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ViasAddress();

            if (data.hasOwnProperty('city')) {
                obj['city'] = ApiClient.convertToType(data['city'], 'String');
            }
            if (data.hasOwnProperty('country')) {
                obj['country'] = ApiClient.convertToType(data['country'], 'String');
            }
            if (data.hasOwnProperty('houseNumberOrName')) {
                obj['houseNumberOrName'] = ApiClient.convertToType(data['houseNumberOrName'], 'String');
            }
            if (data.hasOwnProperty('postalCode')) {
                obj['postalCode'] = ApiClient.convertToType(data['postalCode'], 'String');
            }
            if (data.hasOwnProperty('stateOrProvince')) {
                obj['stateOrProvince'] = ApiClient.convertToType(data['stateOrProvince'], 'String');
            }
            if (data.hasOwnProperty('street')) {
                obj['street'] = ApiClient.convertToType(data['street'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ViasAddress</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ViasAddress</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ViasAddress.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['city'] && !(typeof data['city'] === 'string' || data['city'] instanceof String)) {
            throw new Error("Expected the field `city` to be a primitive type in the JSON string but got " + data['city']);
        }
        // ensure the json data is a string
        if (data['country'] && !(typeof data['country'] === 'string' || data['country'] instanceof String)) {
            throw new Error("Expected the field `country` to be a primitive type in the JSON string but got " + data['country']);
        }
        // ensure the json data is a string
        if (data['houseNumberOrName'] && !(typeof data['houseNumberOrName'] === 'string' || data['houseNumberOrName'] instanceof String)) {
            throw new Error("Expected the field `houseNumberOrName` to be a primitive type in the JSON string but got " + data['houseNumberOrName']);
        }
        // ensure the json data is a string
        if (data['postalCode'] && !(typeof data['postalCode'] === 'string' || data['postalCode'] instanceof String)) {
            throw new Error("Expected the field `postalCode` to be a primitive type in the JSON string but got " + data['postalCode']);
        }
        // ensure the json data is a string
        if (data['stateOrProvince'] && !(typeof data['stateOrProvince'] === 'string' || data['stateOrProvince'] instanceof String)) {
            throw new Error("Expected the field `stateOrProvince` to be a primitive type in the JSON string but got " + data['stateOrProvince']);
        }
        // ensure the json data is a string
        if (data['street'] && !(typeof data['street'] === 'string' || data['street'] instanceof String)) {
            throw new Error("Expected the field `street` to be a primitive type in the JSON string but got " + data['street']);
        }

        return true;
    }


}

ViasAddress.RequiredProperties = ["country"];

/**
 * The name of the city. Required if the `houseNumberOrName`, `street`, `postalCode`, or `stateOrProvince` are provided.
 * @member {String} city
 */
ViasAddress.prototype['city'] = undefined;

/**
 * The two-character country code of the address in ISO-3166-1 alpha-2 format. For example, **NL**.
 * @member {String} country
 */
ViasAddress.prototype['country'] = undefined;

/**
 * The number or name of the house.
 * @member {String} houseNumberOrName
 */
ViasAddress.prototype['houseNumberOrName'] = undefined;

/**
 * The postal code. Required if the `houseNumberOrName`, `street`, `city`, or `stateOrProvince` are provided.  Maximum length:  * 5 digits for addresses in the US.  * 10 characters for all other countries.
 * @member {String} postalCode
 */
ViasAddress.prototype['postalCode'] = undefined;

/**
 * The abbreviation of the state or province. Required if the `houseNumberOrName`, `street`, `city`, or `postalCode` are provided.   Maximum length:  * 2 characters for addresses in the US or Canada.  * 3 characters for all other countries. 
 * @member {String} stateOrProvince
 */
ViasAddress.prototype['stateOrProvince'] = undefined;

/**
 * The name of the street. Required if the `houseNumberOrName`, `city`, `postalCode`, or `stateOrProvince` are provided.
 * @member {String} street
 */
ViasAddress.prototype['street'] = undefined;






export default ViasAddress;

