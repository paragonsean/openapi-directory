/**
 * Classic Platforms - Notifications
 * This API is used for the classic integration. If you are just starting your implementation, refer to our [new integration guide](https://docs.adyen.com/marketplaces-and-platforms) instead.  The Notification API sends notifications to the endpoints specified in a given subscription.  Subscriptions are managed through the Notification Configuration API. The API specifications listed here detail the format of each notification.  For more information, refer to our [documentation](https://docs.adyen.com/marketplaces-and-platforms/classic/notifications).
 *
 * The version of the OpenAPI document: 6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BankAccountDetail from './BankAccountDetail';
import BusinessDetails from './BusinessDetails';
import IndividualDetails from './IndividualDetails';
import LegalArrangementDetail from './LegalArrangementDetail';
import PayoutMethod from './PayoutMethod';
import StoreDetail from './StoreDetail';
import ViasAddress from './ViasAddress';

/**
 * The AccountHolderDetails model module.
 * @module model/AccountHolderDetails
 * @version 6
 */
class AccountHolderDetails {
    /**
     * Constructs a new <code>AccountHolderDetails</code>.
     * @alias module:model/AccountHolderDetails
     * @param address {module:model/ViasAddress} The address of the account holder.
     */
    constructor(address) { 
        
        AccountHolderDetails.initialize(this, address);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, address) { 
        obj['address'] = address;
    }

    /**
     * Constructs a <code>AccountHolderDetails</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AccountHolderDetails} obj Optional instance to populate.
     * @return {module:model/AccountHolderDetails} The populated <code>AccountHolderDetails</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AccountHolderDetails();

            if (data.hasOwnProperty('address')) {
                obj['address'] = ViasAddress.constructFromObject(data['address']);
            }
            if (data.hasOwnProperty('bankAccountDetails')) {
                obj['bankAccountDetails'] = ApiClient.convertToType(data['bankAccountDetails'], [BankAccountDetail]);
            }
            if (data.hasOwnProperty('bankAggregatorDataReference')) {
                obj['bankAggregatorDataReference'] = ApiClient.convertToType(data['bankAggregatorDataReference'], 'String');
            }
            if (data.hasOwnProperty('businessDetails')) {
                obj['businessDetails'] = BusinessDetails.constructFromObject(data['businessDetails']);
            }
            if (data.hasOwnProperty('email')) {
                obj['email'] = ApiClient.convertToType(data['email'], 'String');
            }
            if (data.hasOwnProperty('fullPhoneNumber')) {
                obj['fullPhoneNumber'] = ApiClient.convertToType(data['fullPhoneNumber'], 'String');
            }
            if (data.hasOwnProperty('individualDetails')) {
                obj['individualDetails'] = IndividualDetails.constructFromObject(data['individualDetails']);
            }
            if (data.hasOwnProperty('lastReviewDate')) {
                obj['lastReviewDate'] = ApiClient.convertToType(data['lastReviewDate'], 'String');
            }
            if (data.hasOwnProperty('legalArrangements')) {
                obj['legalArrangements'] = ApiClient.convertToType(data['legalArrangements'], [LegalArrangementDetail]);
            }
            if (data.hasOwnProperty('merchantCategoryCode')) {
                obj['merchantCategoryCode'] = ApiClient.convertToType(data['merchantCategoryCode'], 'String');
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = ApiClient.convertToType(data['metadata'], {'String': 'String'});
            }
            if (data.hasOwnProperty('payoutMethods')) {
                obj['payoutMethods'] = ApiClient.convertToType(data['payoutMethods'], [PayoutMethod]);
            }
            if (data.hasOwnProperty('principalBusinessAddress')) {
                obj['principalBusinessAddress'] = ViasAddress.constructFromObject(data['principalBusinessAddress']);
            }
            if (data.hasOwnProperty('storeDetails')) {
                obj['storeDetails'] = ApiClient.convertToType(data['storeDetails'], [StoreDetail]);
            }
            if (data.hasOwnProperty('webAddress')) {
                obj['webAddress'] = ApiClient.convertToType(data['webAddress'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AccountHolderDetails</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AccountHolderDetails</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of AccountHolderDetails.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `address`
        if (data['address']) { // data not null
          ViasAddress.validateJSON(data['address']);
        }
        if (data['bankAccountDetails']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['bankAccountDetails'])) {
                throw new Error("Expected the field `bankAccountDetails` to be an array in the JSON data but got " + data['bankAccountDetails']);
            }
            // validate the optional field `bankAccountDetails` (array)
            for (const item of data['bankAccountDetails']) {
                BankAccountDetail.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['bankAggregatorDataReference'] && !(typeof data['bankAggregatorDataReference'] === 'string' || data['bankAggregatorDataReference'] instanceof String)) {
            throw new Error("Expected the field `bankAggregatorDataReference` to be a primitive type in the JSON string but got " + data['bankAggregatorDataReference']);
        }
        // validate the optional field `businessDetails`
        if (data['businessDetails']) { // data not null
          BusinessDetails.validateJSON(data['businessDetails']);
        }
        // ensure the json data is a string
        if (data['email'] && !(typeof data['email'] === 'string' || data['email'] instanceof String)) {
            throw new Error("Expected the field `email` to be a primitive type in the JSON string but got " + data['email']);
        }
        // ensure the json data is a string
        if (data['fullPhoneNumber'] && !(typeof data['fullPhoneNumber'] === 'string' || data['fullPhoneNumber'] instanceof String)) {
            throw new Error("Expected the field `fullPhoneNumber` to be a primitive type in the JSON string but got " + data['fullPhoneNumber']);
        }
        // validate the optional field `individualDetails`
        if (data['individualDetails']) { // data not null
          IndividualDetails.validateJSON(data['individualDetails']);
        }
        // ensure the json data is a string
        if (data['lastReviewDate'] && !(typeof data['lastReviewDate'] === 'string' || data['lastReviewDate'] instanceof String)) {
            throw new Error("Expected the field `lastReviewDate` to be a primitive type in the JSON string but got " + data['lastReviewDate']);
        }
        if (data['legalArrangements']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['legalArrangements'])) {
                throw new Error("Expected the field `legalArrangements` to be an array in the JSON data but got " + data['legalArrangements']);
            }
            // validate the optional field `legalArrangements` (array)
            for (const item of data['legalArrangements']) {
                LegalArrangementDetail.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['merchantCategoryCode'] && !(typeof data['merchantCategoryCode'] === 'string' || data['merchantCategoryCode'] instanceof String)) {
            throw new Error("Expected the field `merchantCategoryCode` to be a primitive type in the JSON string but got " + data['merchantCategoryCode']);
        }
        if (data['payoutMethods']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['payoutMethods'])) {
                throw new Error("Expected the field `payoutMethods` to be an array in the JSON data but got " + data['payoutMethods']);
            }
            // validate the optional field `payoutMethods` (array)
            for (const item of data['payoutMethods']) {
                PayoutMethod.validateJSON(item);
            };
        }
        // validate the optional field `principalBusinessAddress`
        if (data['principalBusinessAddress']) { // data not null
          ViasAddress.validateJSON(data['principalBusinessAddress']);
        }
        if (data['storeDetails']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['storeDetails'])) {
                throw new Error("Expected the field `storeDetails` to be an array in the JSON data but got " + data['storeDetails']);
            }
            // validate the optional field `storeDetails` (array)
            for (const item of data['storeDetails']) {
                StoreDetail.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['webAddress'] && !(typeof data['webAddress'] === 'string' || data['webAddress'] instanceof String)) {
            throw new Error("Expected the field `webAddress` to be a primitive type in the JSON string but got " + data['webAddress']);
        }

        return true;
    }


}

AccountHolderDetails.RequiredProperties = ["address"];

/**
 * The address of the account holder.
 * @member {module:model/ViasAddress} address
 */
AccountHolderDetails.prototype['address'] = undefined;

/**
 * Array of bank accounts associated with the account holder. For details about the required `bankAccountDetail` fields, see [Required information](https://docs.adyen.com/marketplaces-and-platforms/classic/verification-process/required-information).
 * @member {Array.<module:model/BankAccountDetail>} bankAccountDetails
 */
AccountHolderDetails.prototype['bankAccountDetails'] = undefined;

/**
 * The opaque reference value returned by the Adyen API during bank account login.
 * @member {String} bankAggregatorDataReference
 */
AccountHolderDetails.prototype['bankAggregatorDataReference'] = undefined;

/**
 * Details about the business or nonprofit account holder. Required when creating an account holder with `legalEntity` **Business** or **NonProfit**.
 * @member {module:model/BusinessDetails} businessDetails
 */
AccountHolderDetails.prototype['businessDetails'] = undefined;

/**
 * The email address of the account holder.
 * @member {String} email
 */
AccountHolderDetails.prototype['email'] = undefined;

/**
 * The phone number of the account holder provided as a single string. It will be handled as a landline phone. **Examples:** \"0031 6 11 22 33 44\", \"+316/1122-3344\", \"(0031) 611223344\"
 * @member {String} fullPhoneNumber
 */
AccountHolderDetails.prototype['fullPhoneNumber'] = undefined;

/**
 * Details about the individual account holder. Required when creating an account holder with `legalEntity` **Individual**. 
 * @member {module:model/IndividualDetails} individualDetails
 */
AccountHolderDetails.prototype['individualDetails'] = undefined;

/**
 * Date when you last reviewed the account holder's information, in ISO-8601 YYYY-MM-DD format. For example, **2020-01-31**.
 * @member {String} lastReviewDate
 */
AccountHolderDetails.prototype['lastReviewDate'] = undefined;

/**
 * An array containing information about the account holder's [legal arrangements](https://docs.adyen.com/marketplaces-and-platforms/classic/verification-process/legal-arrangements).
 * @member {Array.<module:model/LegalArrangementDetail>} legalArrangements
 */
AccountHolderDetails.prototype['legalArrangements'] = undefined;

/**
 * The Merchant Category Code of the account holder. > If not specified in the request, this will be derived from the platform account (which is configured by Adyen).
 * @member {String} merchantCategoryCode
 */
AccountHolderDetails.prototype['merchantCategoryCode'] = undefined;

/**
 * A set of key and value pairs for general use by the account holder or merchant. The keys do not have specific names and may be used for storing miscellaneous data as desired. > The values being stored have a maximum length of eighty (80) characters and will be truncated if necessary. > Note that during an update of metadata, the omission of existing key-value pairs will result in the deletion of those key-value pairs.
 * @member {Object.<String, String>} metadata
 */
AccountHolderDetails.prototype['metadata'] = undefined;

/**
 * Array of tokenized card details associated with the account holder. For details about how you can use the tokens to pay out, refer to [Pay out to cards](https://docs.adyen.com/marketplaces-and-platforms/classic/payout-to-cards).
 * @member {Array.<module:model/PayoutMethod>} payoutMethods
 */
AccountHolderDetails.prototype['payoutMethods'] = undefined;

/**
 * The principal business address of the account holder.
 * @member {module:model/ViasAddress} principalBusinessAddress
 */
AccountHolderDetails.prototype['principalBusinessAddress'] = undefined;

/**
 * Array of stores associated with the account holder. Required when onboarding account holders that have an Adyen [point of sale](https://docs.adyen.com/marketplaces-and-platforms/classic/platforms-for-pos).
 * @member {Array.<module:model/StoreDetail>} storeDetails
 */
AccountHolderDetails.prototype['storeDetails'] = undefined;

/**
 * The URL of the website of the account holder.
 * @member {String} webAddress
 */
AccountHolderDetails.prototype['webAddress'] = undefined;






export default AccountHolderDetails;

