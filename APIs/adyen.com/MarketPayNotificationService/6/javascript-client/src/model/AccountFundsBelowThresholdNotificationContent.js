/**
 * Classic Platforms - Notifications
 * This API is used for the classic integration. If you are just starting your implementation, refer to our [new integration guide](https://docs.adyen.com/marketplaces-and-platforms) instead.  The Notification API sends notifications to the endpoints specified in a given subscription.  Subscriptions are managed through the Notification Configuration API. The API specifications listed here detail the format of each notification.  For more information, refer to our [documentation](https://docs.adyen.com/marketplaces-and-platforms/classic/notifications).
 *
 * The version of the OpenAPI document: 6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Amount from './Amount';
import LocalDate from './LocalDate';

/**
 * The AccountFundsBelowThresholdNotificationContent model module.
 * @module model/AccountFundsBelowThresholdNotificationContent
 * @version 6
 */
class AccountFundsBelowThresholdNotificationContent {
    /**
     * Constructs a new <code>AccountFundsBelowThresholdNotificationContent</code>.
     * @alias module:model/AccountFundsBelowThresholdNotificationContent
     * @param fundThreshold {module:model/Amount} The configured fund threshold for the liable account
     * @param merchantAccountCode {String} The code of the merchant account.
     */
    constructor(fundThreshold, merchantAccountCode) { 
        
        AccountFundsBelowThresholdNotificationContent.initialize(this, fundThreshold, merchantAccountCode);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, fundThreshold, merchantAccountCode) { 
        obj['fundThreshold'] = fundThreshold;
        obj['merchantAccountCode'] = merchantAccountCode;
    }

    /**
     * Constructs a <code>AccountFundsBelowThresholdNotificationContent</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AccountFundsBelowThresholdNotificationContent} obj Optional instance to populate.
     * @return {module:model/AccountFundsBelowThresholdNotificationContent} The populated <code>AccountFundsBelowThresholdNotificationContent</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AccountFundsBelowThresholdNotificationContent();

            if (data.hasOwnProperty('accountCode')) {
                obj['accountCode'] = ApiClient.convertToType(data['accountCode'], 'String');
            }
            if (data.hasOwnProperty('balanceDate')) {
                obj['balanceDate'] = LocalDate.constructFromObject(data['balanceDate']);
            }
            if (data.hasOwnProperty('currentFunds')) {
                obj['currentFunds'] = Amount.constructFromObject(data['currentFunds']);
            }
            if (data.hasOwnProperty('fundThreshold')) {
                obj['fundThreshold'] = Amount.constructFromObject(data['fundThreshold']);
            }
            if (data.hasOwnProperty('merchantAccountCode')) {
                obj['merchantAccountCode'] = ApiClient.convertToType(data['merchantAccountCode'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AccountFundsBelowThresholdNotificationContent</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AccountFundsBelowThresholdNotificationContent</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of AccountFundsBelowThresholdNotificationContent.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['accountCode'] && !(typeof data['accountCode'] === 'string' || data['accountCode'] instanceof String)) {
            throw new Error("Expected the field `accountCode` to be a primitive type in the JSON string but got " + data['accountCode']);
        }
        // validate the optional field `balanceDate`
        if (data['balanceDate']) { // data not null
          LocalDate.validateJSON(data['balanceDate']);
        }
        // validate the optional field `currentFunds`
        if (data['currentFunds']) { // data not null
          Amount.validateJSON(data['currentFunds']);
        }
        // validate the optional field `fundThreshold`
        if (data['fundThreshold']) { // data not null
          Amount.validateJSON(data['fundThreshold']);
        }
        // ensure the json data is a string
        if (data['merchantAccountCode'] && !(typeof data['merchantAccountCode'] === 'string' || data['merchantAccountCode'] instanceof String)) {
            throw new Error("Expected the field `merchantAccountCode` to be a primitive type in the JSON string but got " + data['merchantAccountCode']);
        }

        return true;
    }


}

AccountFundsBelowThresholdNotificationContent.RequiredProperties = ["fundThreshold", "merchantAccountCode"];

/**
 * The code of the account with funds under threshold
 * @member {String} accountCode
 */
AccountFundsBelowThresholdNotificationContent.prototype['accountCode'] = undefined;

/**
 * The date of the funds were found to be below threshold.
 * @member {module:model/LocalDate} balanceDate
 */
AccountFundsBelowThresholdNotificationContent.prototype['balanceDate'] = undefined;

/**
 * The current funds in the liable account.
 * @member {module:model/Amount} currentFunds
 */
AccountFundsBelowThresholdNotificationContent.prototype['currentFunds'] = undefined;

/**
 * The configured fund threshold for the liable account
 * @member {module:model/Amount} fundThreshold
 */
AccountFundsBelowThresholdNotificationContent.prototype['fundThreshold'] = undefined;

/**
 * The code of the merchant account.
 * @member {String} merchantAccountCode
 */
AccountFundsBelowThresholdNotificationContent.prototype['merchantAccountCode'] = undefined;






export default AccountFundsBelowThresholdNotificationContent;

