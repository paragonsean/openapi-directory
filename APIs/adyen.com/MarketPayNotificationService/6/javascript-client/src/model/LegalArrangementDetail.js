/**
 * Classic Platforms - Notifications
 * This API is used for the classic integration. If you are just starting your implementation, refer to our [new integration guide](https://docs.adyen.com/marketplaces-and-platforms) instead.  The Notification API sends notifications to the endpoints specified in a given subscription.  Subscriptions are managed through the Notification Configuration API. The API specifications listed here detail the format of each notification.  For more information, refer to our [documentation](https://docs.adyen.com/marketplaces-and-platforms/classic/notifications).
 *
 * The version of the OpenAPI document: 6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import LegalArrangementEntityDetail from './LegalArrangementEntityDetail';
import ViasAddress from './ViasAddress';

/**
 * The LegalArrangementDetail model module.
 * @module model/LegalArrangementDetail
 * @version 6
 */
class LegalArrangementDetail {
    /**
     * Constructs a new <code>LegalArrangementDetail</code>.
     * @alias module:model/LegalArrangementDetail
     * @param address {module:model/ViasAddress} The address of the legal arrangement.
     * @param name {String} The legal name of the legal arrangement. Minimum length: 3 characters.
     * @param type {module:model/LegalArrangementDetail.TypeEnum} The [type of legal arrangement](https://docs.adyen.com/marketplaces-and-platforms/classic/verification-process/legal-arrangements#types-of-legal-arrangements).  Possible values:  - **Association**   - **Partnership**   - **SoleProprietorship**   - **Trust**   
     */
    constructor(address, name, type) { 
        
        LegalArrangementDetail.initialize(this, address, name, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, address, name, type) { 
        obj['address'] = address;
        obj['name'] = name;
        obj['type'] = type;
    }

    /**
     * Constructs a <code>LegalArrangementDetail</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LegalArrangementDetail} obj Optional instance to populate.
     * @return {module:model/LegalArrangementDetail} The populated <code>LegalArrangementDetail</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LegalArrangementDetail();

            if (data.hasOwnProperty('address')) {
                obj['address'] = ViasAddress.constructFromObject(data['address']);
            }
            if (data.hasOwnProperty('legalArrangementCode')) {
                obj['legalArrangementCode'] = ApiClient.convertToType(data['legalArrangementCode'], 'String');
            }
            if (data.hasOwnProperty('legalArrangementEntities')) {
                obj['legalArrangementEntities'] = ApiClient.convertToType(data['legalArrangementEntities'], [LegalArrangementEntityDetail]);
            }
            if (data.hasOwnProperty('legalArrangementReference')) {
                obj['legalArrangementReference'] = ApiClient.convertToType(data['legalArrangementReference'], 'String');
            }
            if (data.hasOwnProperty('legalForm')) {
                obj['legalForm'] = ApiClient.convertToType(data['legalForm'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('registrationNumber')) {
                obj['registrationNumber'] = ApiClient.convertToType(data['registrationNumber'], 'String');
            }
            if (data.hasOwnProperty('taxNumber')) {
                obj['taxNumber'] = ApiClient.convertToType(data['taxNumber'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LegalArrangementDetail</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LegalArrangementDetail</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of LegalArrangementDetail.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `address`
        if (data['address']) { // data not null
          ViasAddress.validateJSON(data['address']);
        }
        // ensure the json data is a string
        if (data['legalArrangementCode'] && !(typeof data['legalArrangementCode'] === 'string' || data['legalArrangementCode'] instanceof String)) {
            throw new Error("Expected the field `legalArrangementCode` to be a primitive type in the JSON string but got " + data['legalArrangementCode']);
        }
        if (data['legalArrangementEntities']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['legalArrangementEntities'])) {
                throw new Error("Expected the field `legalArrangementEntities` to be an array in the JSON data but got " + data['legalArrangementEntities']);
            }
            // validate the optional field `legalArrangementEntities` (array)
            for (const item of data['legalArrangementEntities']) {
                LegalArrangementEntityDetail.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['legalArrangementReference'] && !(typeof data['legalArrangementReference'] === 'string' || data['legalArrangementReference'] instanceof String)) {
            throw new Error("Expected the field `legalArrangementReference` to be a primitive type in the JSON string but got " + data['legalArrangementReference']);
        }
        // ensure the json data is a string
        if (data['legalForm'] && !(typeof data['legalForm'] === 'string' || data['legalForm'] instanceof String)) {
            throw new Error("Expected the field `legalForm` to be a primitive type in the JSON string but got " + data['legalForm']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['registrationNumber'] && !(typeof data['registrationNumber'] === 'string' || data['registrationNumber'] instanceof String)) {
            throw new Error("Expected the field `registrationNumber` to be a primitive type in the JSON string but got " + data['registrationNumber']);
        }
        // ensure the json data is a string
        if (data['taxNumber'] && !(typeof data['taxNumber'] === 'string' || data['taxNumber'] instanceof String)) {
            throw new Error("Expected the field `taxNumber` to be a primitive type in the JSON string but got " + data['taxNumber']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

LegalArrangementDetail.RequiredProperties = ["address", "name", "type"];

/**
 * The address of the legal arrangement.
 * @member {module:model/ViasAddress} address
 */
LegalArrangementDetail.prototype['address'] = undefined;

/**
 * Adyen-generated unique alphanumeric identifier (UUID) for the entry, returned in the response when you create a legal arrangement. Use only when updating an account holder. If you include this field when creating an account holder, the request will fail.
 * @member {String} legalArrangementCode
 */
LegalArrangementDetail.prototype['legalArrangementCode'] = undefined;

/**
 * An array containing information about other entities that are part of the legal arrangement.
 * @member {Array.<module:model/LegalArrangementEntityDetail>} legalArrangementEntities
 */
LegalArrangementDetail.prototype['legalArrangementEntities'] = undefined;

/**
 * Your reference for the legal arrangement. Must be between 3 to 128 characters.
 * @member {String} legalArrangementReference
 */
LegalArrangementDetail.prototype['legalArrangementReference'] = undefined;

/**
 * The form of legal arrangement. Required if `type` is **Trust** or **Partnership**.  The possible values depend on the `type`.  - For `type` **Trust**:  **CashManagementTrust**, **CorporateUnitTrust**, **DeceasedEstate**, **DiscretionaryInvestmentTrust**, **DiscretionaryServicesManagementTrust**, **DiscretionaryTradingTrust**, **FirstHomeSaverAccountsTrust**, **FixedTrust**, **FixedUnitTrust**, **HybridTrust**, **ListedPublicUnitTrust**, **OtherTrust**, **PooledSuperannuationTrust**, **PublicTradingTrust**, or **UnlistedPublicUnitTrust**.  - For `type` **Partnership**: **LimitedPartnership**, **FamilyPartnership**, or **OtherPartnership**
 * @member {module:model/LegalArrangementDetail.LegalFormEnum} legalForm
 */
LegalArrangementDetail.prototype['legalForm'] = undefined;

/**
 * The legal name of the legal arrangement. Minimum length: 3 characters.
 * @member {String} name
 */
LegalArrangementDetail.prototype['name'] = undefined;

/**
 * The registration number of the legal arrangement.
 * @member {String} registrationNumber
 */
LegalArrangementDetail.prototype['registrationNumber'] = undefined;

/**
 * The tax identification number of the legal arrangement.
 * @member {String} taxNumber
 */
LegalArrangementDetail.prototype['taxNumber'] = undefined;

/**
 * The [type of legal arrangement](https://docs.adyen.com/marketplaces-and-platforms/classic/verification-process/legal-arrangements#types-of-legal-arrangements).  Possible values:  - **Association**   - **Partnership**   - **SoleProprietorship**   - **Trust**   
 * @member {module:model/LegalArrangementDetail.TypeEnum} type
 */
LegalArrangementDetail.prototype['type'] = undefined;





/**
 * Allowed values for the <code>legalForm</code> property.
 * @enum {String}
 * @readonly
 */
LegalArrangementDetail['LegalFormEnum'] = {

    /**
     * value: "CashManagementTrust"
     * @const
     */
    "CashManagementTrust": "CashManagementTrust",

    /**
     * value: "CorporateUnitTrust"
     * @const
     */
    "CorporateUnitTrust": "CorporateUnitTrust",

    /**
     * value: "DeceasedEstate"
     * @const
     */
    "DeceasedEstate": "DeceasedEstate",

    /**
     * value: "DiscretionaryInvestmentTrust"
     * @const
     */
    "DiscretionaryInvestmentTrust": "DiscretionaryInvestmentTrust",

    /**
     * value: "DiscretionaryServicesManagementTrust"
     * @const
     */
    "DiscretionaryServicesManagementTrust": "DiscretionaryServicesManagementTrust",

    /**
     * value: "DiscretionaryTradingTrust"
     * @const
     */
    "DiscretionaryTradingTrust": "DiscretionaryTradingTrust",

    /**
     * value: "FirstHomeSaverAccountsTrust"
     * @const
     */
    "FirstHomeSaverAccountsTrust": "FirstHomeSaverAccountsTrust",

    /**
     * value: "FixedTrust"
     * @const
     */
    "FixedTrust": "FixedTrust",

    /**
     * value: "FixedUnitTrust"
     * @const
     */
    "FixedUnitTrust": "FixedUnitTrust",

    /**
     * value: "HybridTrust"
     * @const
     */
    "HybridTrust": "HybridTrust",

    /**
     * value: "ListedPublicUnitTrust"
     * @const
     */
    "ListedPublicUnitTrust": "ListedPublicUnitTrust",

    /**
     * value: "OtherTrust"
     * @const
     */
    "OtherTrust": "OtherTrust",

    /**
     * value: "PooledSuperannuationTrust"
     * @const
     */
    "PooledSuperannuationTrust": "PooledSuperannuationTrust",

    /**
     * value: "PublicTradingTrust"
     * @const
     */
    "PublicTradingTrust": "PublicTradingTrust",

    /**
     * value: "UnlistedPublicUnitTrust"
     * @const
     */
    "UnlistedPublicUnitTrust": "UnlistedPublicUnitTrust",

    /**
     * value: "LimitedPartnership"
     * @const
     */
    "LimitedPartnership": "LimitedPartnership",

    /**
     * value: "FamilyPartnership"
     * @const
     */
    "FamilyPartnership": "FamilyPartnership",

    /**
     * value: "OtherPartnership"
     * @const
     */
    "OtherPartnership": "OtherPartnership"
};


/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
LegalArrangementDetail['TypeEnum'] = {

    /**
     * value: "Association"
     * @const
     */
    "Association": "Association",

    /**
     * value: "Partnership"
     * @const
     */
    "Partnership": "Partnership",

    /**
     * value: "SoleProprietorship"
     * @const
     */
    "SoleProprietorship": "SoleProprietorship",

    /**
     * value: "Trust"
     * @const
     */
    "Trust": "Trust"
};



export default LegalArrangementDetail;

