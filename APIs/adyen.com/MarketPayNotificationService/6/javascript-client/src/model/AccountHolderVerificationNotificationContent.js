/**
 * Classic Platforms - Notifications
 * This API is used for the classic integration. If you are just starting your implementation, refer to our [new integration guide](https://docs.adyen.com/marketplaces-and-platforms) instead.  The Notification API sends notifications to the endpoints specified in a given subscription.  Subscriptions are managed through the Notification Configuration API. The API specifications listed here detail the format of each notification.  For more information, refer to our [documentation](https://docs.adyen.com/marketplaces-and-platforms/classic/notifications).
 *
 * The version of the OpenAPI document: 6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import KYCCheckStatusData from './KYCCheckStatusData';

/**
 * The AccountHolderVerificationNotificationContent model module.
 * @module model/AccountHolderVerificationNotificationContent
 * @version 6
 */
class AccountHolderVerificationNotificationContent {
    /**
     * Constructs a new <code>AccountHolderVerificationNotificationContent</code>.
     * @alias module:model/AccountHolderVerificationNotificationContent
     */
    constructor() { 
        
        AccountHolderVerificationNotificationContent.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AccountHolderVerificationNotificationContent</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AccountHolderVerificationNotificationContent} obj Optional instance to populate.
     * @return {module:model/AccountHolderVerificationNotificationContent} The populated <code>AccountHolderVerificationNotificationContent</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AccountHolderVerificationNotificationContent();

            if (data.hasOwnProperty('accountHolderCode')) {
                obj['accountHolderCode'] = ApiClient.convertToType(data['accountHolderCode'], 'String');
            }
            if (data.hasOwnProperty('kycCheckStatusData')) {
                obj['kycCheckStatusData'] = KYCCheckStatusData.constructFromObject(data['kycCheckStatusData']);
            }
            if (data.hasOwnProperty('legalArrangementCode')) {
                obj['legalArrangementCode'] = ApiClient.convertToType(data['legalArrangementCode'], 'String');
            }
            if (data.hasOwnProperty('legalArrangementEntityCode')) {
                obj['legalArrangementEntityCode'] = ApiClient.convertToType(data['legalArrangementEntityCode'], 'String');
            }
            if (data.hasOwnProperty('payoutMethodCode')) {
                obj['payoutMethodCode'] = ApiClient.convertToType(data['payoutMethodCode'], 'String');
            }
            if (data.hasOwnProperty('shareholderCode')) {
                obj['shareholderCode'] = ApiClient.convertToType(data['shareholderCode'], 'String');
            }
            if (data.hasOwnProperty('signatoryCode')) {
                obj['signatoryCode'] = ApiClient.convertToType(data['signatoryCode'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AccountHolderVerificationNotificationContent</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AccountHolderVerificationNotificationContent</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['accountHolderCode'] && !(typeof data['accountHolderCode'] === 'string' || data['accountHolderCode'] instanceof String)) {
            throw new Error("Expected the field `accountHolderCode` to be a primitive type in the JSON string but got " + data['accountHolderCode']);
        }
        // validate the optional field `kycCheckStatusData`
        if (data['kycCheckStatusData']) { // data not null
          KYCCheckStatusData.validateJSON(data['kycCheckStatusData']);
        }
        // ensure the json data is a string
        if (data['legalArrangementCode'] && !(typeof data['legalArrangementCode'] === 'string' || data['legalArrangementCode'] instanceof String)) {
            throw new Error("Expected the field `legalArrangementCode` to be a primitive type in the JSON string but got " + data['legalArrangementCode']);
        }
        // ensure the json data is a string
        if (data['legalArrangementEntityCode'] && !(typeof data['legalArrangementEntityCode'] === 'string' || data['legalArrangementEntityCode'] instanceof String)) {
            throw new Error("Expected the field `legalArrangementEntityCode` to be a primitive type in the JSON string but got " + data['legalArrangementEntityCode']);
        }
        // ensure the json data is a string
        if (data['payoutMethodCode'] && !(typeof data['payoutMethodCode'] === 'string' || data['payoutMethodCode'] instanceof String)) {
            throw new Error("Expected the field `payoutMethodCode` to be a primitive type in the JSON string but got " + data['payoutMethodCode']);
        }
        // ensure the json data is a string
        if (data['shareholderCode'] && !(typeof data['shareholderCode'] === 'string' || data['shareholderCode'] instanceof String)) {
            throw new Error("Expected the field `shareholderCode` to be a primitive type in the JSON string but got " + data['shareholderCode']);
        }
        // ensure the json data is a string
        if (data['signatoryCode'] && !(typeof data['signatoryCode'] === 'string' || data['signatoryCode'] instanceof String)) {
            throw new Error("Expected the field `signatoryCode` to be a primitive type in the JSON string but got " + data['signatoryCode']);
        }

        return true;
    }


}



/**
 * The code of the account holder.
 * @member {String} accountHolderCode
 */
AccountHolderVerificationNotificationContent.prototype['accountHolderCode'] = undefined;

/**
 * Information on the verification status
 * @member {module:model/KYCCheckStatusData} kycCheckStatusData
 */
AccountHolderVerificationNotificationContent.prototype['kycCheckStatusData'] = undefined;

/**
 * The unique ID of the legal arrangement that has been verified.
 * @member {String} legalArrangementCode
 */
AccountHolderVerificationNotificationContent.prototype['legalArrangementCode'] = undefined;

/**
 * The unique ID of the legal arrangement entity that has been verified.
 * @member {String} legalArrangementEntityCode
 */
AccountHolderVerificationNotificationContent.prototype['legalArrangementEntityCode'] = undefined;

/**
 * The unique code of the payout method that has been verified.
 * @member {String} payoutMethodCode
 */
AccountHolderVerificationNotificationContent.prototype['payoutMethodCode'] = undefined;

/**
 * The code of the shareholder that has been verified.
 * @member {String} shareholderCode
 */
AccountHolderVerificationNotificationContent.prototype['shareholderCode'] = undefined;

/**
 * The code of the signatory that has been verified.
 * @member {String} signatoryCode
 */
AccountHolderVerificationNotificationContent.prototype['signatoryCode'] = undefined;






export default AccountHolderVerificationNotificationContent;

