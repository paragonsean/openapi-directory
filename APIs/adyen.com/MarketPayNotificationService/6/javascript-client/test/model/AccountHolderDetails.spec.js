/**
 * Classic Platforms - Notifications
 * This API is used for the classic integration. If you are just starting your implementation, refer to our [new integration guide](https://docs.adyen.com/marketplaces-and-platforms) instead.  The Notification API sends notifications to the endpoints specified in a given subscription.  Subscriptions are managed through the Notification Configuration API. The API specifications listed here detail the format of each notification.  For more information, refer to our [documentation](https://docs.adyen.com/marketplaces-and-platforms/classic/notifications).
 *
 * The version of the OpenAPI document: 6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.ClassicPlatformsNotifications);
  }
}(this, function(expect, ClassicPlatformsNotifications) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new ClassicPlatformsNotifications.AccountHolderDetails();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('AccountHolderDetails', function() {
    it('should create an instance of AccountHolderDetails', function() {
      // uncomment below and update the code to test AccountHolderDetails
      //var instance = new ClassicPlatformsNotifications.AccountHolderDetails();
      //expect(instance).to.be.a(ClassicPlatformsNotifications.AccountHolderDetails);
    });

    it('should have the property address (base name: "address")', function() {
      // uncomment below and update the code to test the property address
      //var instance = new ClassicPlatformsNotifications.AccountHolderDetails();
      //expect(instance).to.be();
    });

    it('should have the property bankAccountDetails (base name: "bankAccountDetails")', function() {
      // uncomment below and update the code to test the property bankAccountDetails
      //var instance = new ClassicPlatformsNotifications.AccountHolderDetails();
      //expect(instance).to.be();
    });

    it('should have the property bankAggregatorDataReference (base name: "bankAggregatorDataReference")', function() {
      // uncomment below and update the code to test the property bankAggregatorDataReference
      //var instance = new ClassicPlatformsNotifications.AccountHolderDetails();
      //expect(instance).to.be();
    });

    it('should have the property businessDetails (base name: "businessDetails")', function() {
      // uncomment below and update the code to test the property businessDetails
      //var instance = new ClassicPlatformsNotifications.AccountHolderDetails();
      //expect(instance).to.be();
    });

    it('should have the property email (base name: "email")', function() {
      // uncomment below and update the code to test the property email
      //var instance = new ClassicPlatformsNotifications.AccountHolderDetails();
      //expect(instance).to.be();
    });

    it('should have the property fullPhoneNumber (base name: "fullPhoneNumber")', function() {
      // uncomment below and update the code to test the property fullPhoneNumber
      //var instance = new ClassicPlatformsNotifications.AccountHolderDetails();
      //expect(instance).to.be();
    });

    it('should have the property individualDetails (base name: "individualDetails")', function() {
      // uncomment below and update the code to test the property individualDetails
      //var instance = new ClassicPlatformsNotifications.AccountHolderDetails();
      //expect(instance).to.be();
    });

    it('should have the property lastReviewDate (base name: "lastReviewDate")', function() {
      // uncomment below and update the code to test the property lastReviewDate
      //var instance = new ClassicPlatformsNotifications.AccountHolderDetails();
      //expect(instance).to.be();
    });

    it('should have the property legalArrangements (base name: "legalArrangements")', function() {
      // uncomment below and update the code to test the property legalArrangements
      //var instance = new ClassicPlatformsNotifications.AccountHolderDetails();
      //expect(instance).to.be();
    });

    it('should have the property merchantCategoryCode (base name: "merchantCategoryCode")', function() {
      // uncomment below and update the code to test the property merchantCategoryCode
      //var instance = new ClassicPlatformsNotifications.AccountHolderDetails();
      //expect(instance).to.be();
    });

    it('should have the property metadata (base name: "metadata")', function() {
      // uncomment below and update the code to test the property metadata
      //var instance = new ClassicPlatformsNotifications.AccountHolderDetails();
      //expect(instance).to.be();
    });

    it('should have the property payoutMethods (base name: "payoutMethods")', function() {
      // uncomment below and update the code to test the property payoutMethods
      //var instance = new ClassicPlatformsNotifications.AccountHolderDetails();
      //expect(instance).to.be();
    });

    it('should have the property principalBusinessAddress (base name: "principalBusinessAddress")', function() {
      // uncomment below and update the code to test the property principalBusinessAddress
      //var instance = new ClassicPlatformsNotifications.AccountHolderDetails();
      //expect(instance).to.be();
    });

    it('should have the property storeDetails (base name: "storeDetails")', function() {
      // uncomment below and update the code to test the property storeDetails
      //var instance = new ClassicPlatformsNotifications.AccountHolderDetails();
      //expect(instance).to.be();
    });

    it('should have the property webAddress (base name: "webAddress")', function() {
      // uncomment below and update the code to test the property webAddress
      //var instance = new ClassicPlatformsNotifications.AccountHolderDetails();
      //expect(instance).to.be();
    });

  });

}));
