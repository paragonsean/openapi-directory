# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ViasName(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, first_name: str=None, gender: str=None, infix: str=None, last_name: str=None):
        """ViasName - a model defined in OpenAPI

        :param first_name: The first_name of this ViasName.
        :param gender: The gender of this ViasName.
        :param infix: The infix of this ViasName.
        :param last_name: The last_name of this ViasName.
        """
        self.openapi_types = {
            'first_name': str,
            'gender': str,
            'infix': str,
            'last_name': str
        }

        self.attribute_map = {
            'first_name': 'firstName',
            'gender': 'gender',
            'infix': 'infix',
            'last_name': 'lastName'
        }

        self._first_name = first_name
        self._gender = gender
        self._infix = infix
        self._last_name = last_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ViasName':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ViasName of this ViasName.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def first_name(self):
        """Gets the first_name of this ViasName.

        The first name.

        :return: The first_name of this ViasName.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this ViasName.

        The first name.

        :param first_name: The first_name of this ViasName.
        :type first_name: str
        """
        if first_name is not None and len(first_name) > 80:
            raise ValueError("Invalid value for `first_name`, length must be less than or equal to `80`")

        self._first_name = first_name

    @property
    def gender(self):
        """Gets the gender of this ViasName.

        The gender. >The following values are permitted: `MALE`, `FEMALE`, `UNKNOWN`.

        :return: The gender of this ViasName.
        :rtype: str
        """
        return self._gender

    @gender.setter
    def gender(self, gender):
        """Sets the gender of this ViasName.

        The gender. >The following values are permitted: `MALE`, `FEMALE`, `UNKNOWN`.

        :param gender: The gender of this ViasName.
        :type gender: str
        """
        allowed_values = ["MALE", "FEMALE", "UNKNOWN"]  # noqa: E501
        if gender not in allowed_values:
            raise ValueError(
                "Invalid value for `gender` ({0}), must be one of {1}"
                .format(gender, allowed_values)
            )

        self._gender = gender

    @property
    def infix(self):
        """Gets the infix of this ViasName.

        The name's infix, if applicable. >A maximum length of twenty (20) characters is imposed.

        :return: The infix of this ViasName.
        :rtype: str
        """
        return self._infix

    @infix.setter
    def infix(self, infix):
        """Sets the infix of this ViasName.

        The name's infix, if applicable. >A maximum length of twenty (20) characters is imposed.

        :param infix: The infix of this ViasName.
        :type infix: str
        """
        if infix is not None and len(infix) > 20:
            raise ValueError("Invalid value for `infix`, length must be less than or equal to `20`")

        self._infix = infix

    @property
    def last_name(self):
        """Gets the last_name of this ViasName.

        The last name.

        :return: The last_name of this ViasName.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this ViasName.

        The last name.

        :param last_name: The last_name of this ViasName.
        :type last_name: str
        """
        if last_name is not None and len(last_name) > 80:
            raise ValueError("Invalid value for `last_name`, length must be less than or equal to `80`")

        self._last_name = last_name
