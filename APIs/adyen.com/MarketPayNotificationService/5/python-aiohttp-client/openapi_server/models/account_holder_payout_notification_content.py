# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.amount import Amount
from openapi_server.models.bank_account_detail import BankAccountDetail
from openapi_server.models.error_field_type import ErrorFieldType
from openapi_server.models.local_date import LocalDate
from openapi_server.models.operation_status import OperationStatus
from openapi_server import util


class AccountHolderPayoutNotificationContent(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_code: str=None, account_holder_code: str=None, amount: Amount=None, amounts: List[Amount]=None, bank_account_detail: BankAccountDetail=None, description: str=None, estimated_arrival_date: LocalDate=None, invalid_fields: List[ErrorFieldType]=None, merchant_reference: str=None, original_psp_reference: str=None, payout_speed: str=None, status: OperationStatus=None):
        """AccountHolderPayoutNotificationContent - a model defined in OpenAPI

        :param account_code: The account_code of this AccountHolderPayoutNotificationContent.
        :param account_holder_code: The account_holder_code of this AccountHolderPayoutNotificationContent.
        :param amount: The amount of this AccountHolderPayoutNotificationContent.
        :param amounts: The amounts of this AccountHolderPayoutNotificationContent.
        :param bank_account_detail: The bank_account_detail of this AccountHolderPayoutNotificationContent.
        :param description: The description of this AccountHolderPayoutNotificationContent.
        :param estimated_arrival_date: The estimated_arrival_date of this AccountHolderPayoutNotificationContent.
        :param invalid_fields: The invalid_fields of this AccountHolderPayoutNotificationContent.
        :param merchant_reference: The merchant_reference of this AccountHolderPayoutNotificationContent.
        :param original_psp_reference: The original_psp_reference of this AccountHolderPayoutNotificationContent.
        :param payout_speed: The payout_speed of this AccountHolderPayoutNotificationContent.
        :param status: The status of this AccountHolderPayoutNotificationContent.
        """
        self.openapi_types = {
            'account_code': str,
            'account_holder_code': str,
            'amount': Amount,
            'amounts': List[Amount],
            'bank_account_detail': BankAccountDetail,
            'description': str,
            'estimated_arrival_date': LocalDate,
            'invalid_fields': List[ErrorFieldType],
            'merchant_reference': str,
            'original_psp_reference': str,
            'payout_speed': str,
            'status': OperationStatus
        }

        self.attribute_map = {
            'account_code': 'accountCode',
            'account_holder_code': 'accountHolderCode',
            'amount': 'amount',
            'amounts': 'amounts',
            'bank_account_detail': 'bankAccountDetail',
            'description': 'description',
            'estimated_arrival_date': 'estimatedArrivalDate',
            'invalid_fields': 'invalidFields',
            'merchant_reference': 'merchantReference',
            'original_psp_reference': 'originalPspReference',
            'payout_speed': 'payoutSpeed',
            'status': 'status'
        }

        self._account_code = account_code
        self._account_holder_code = account_holder_code
        self._amount = amount
        self._amounts = amounts
        self._bank_account_detail = bank_account_detail
        self._description = description
        self._estimated_arrival_date = estimated_arrival_date
        self._invalid_fields = invalid_fields
        self._merchant_reference = merchant_reference
        self._original_psp_reference = original_psp_reference
        self._payout_speed = payout_speed
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AccountHolderPayoutNotificationContent':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AccountHolderPayoutNotificationContent of this AccountHolderPayoutNotificationContent.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_code(self):
        """Gets the account_code of this AccountHolderPayoutNotificationContent.

        The code of the account from which the payout was made.

        :return: The account_code of this AccountHolderPayoutNotificationContent.
        :rtype: str
        """
        return self._account_code

    @account_code.setter
    def account_code(self, account_code):
        """Sets the account_code of this AccountHolderPayoutNotificationContent.

        The code of the account from which the payout was made.

        :param account_code: The account_code of this AccountHolderPayoutNotificationContent.
        :type account_code: str
        """

        self._account_code = account_code

    @property
    def account_holder_code(self):
        """Gets the account_holder_code of this AccountHolderPayoutNotificationContent.

        The code of the Account Holder to which the payout was made.

        :return: The account_holder_code of this AccountHolderPayoutNotificationContent.
        :rtype: str
        """
        return self._account_holder_code

    @account_holder_code.setter
    def account_holder_code(self, account_holder_code):
        """Sets the account_holder_code of this AccountHolderPayoutNotificationContent.

        The code of the Account Holder to which the payout was made.

        :param account_holder_code: The account_holder_code of this AccountHolderPayoutNotificationContent.
        :type account_holder_code: str
        """

        self._account_holder_code = account_holder_code

    @property
    def amount(self):
        """Gets the amount of this AccountHolderPayoutNotificationContent.

        The payout amount.

        :return: The amount of this AccountHolderPayoutNotificationContent.
        :rtype: Amount
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this AccountHolderPayoutNotificationContent.

        The payout amount.

        :param amount: The amount of this AccountHolderPayoutNotificationContent.
        :type amount: Amount
        """

        self._amount = amount

    @property
    def amounts(self):
        """Gets the amounts of this AccountHolderPayoutNotificationContent.

        The payout amounts (per currency).

        :return: The amounts of this AccountHolderPayoutNotificationContent.
        :rtype: List[Amount]
        """
        return self._amounts

    @amounts.setter
    def amounts(self, amounts):
        """Sets the amounts of this AccountHolderPayoutNotificationContent.

        The payout amounts (per currency).

        :param amounts: The amounts of this AccountHolderPayoutNotificationContent.
        :type amounts: List[Amount]
        """

        self._amounts = amounts

    @property
    def bank_account_detail(self):
        """Gets the bank_account_detail of this AccountHolderPayoutNotificationContent.

        Details of the Bank Account to which the payout was made.

        :return: The bank_account_detail of this AccountHolderPayoutNotificationContent.
        :rtype: BankAccountDetail
        """
        return self._bank_account_detail

    @bank_account_detail.setter
    def bank_account_detail(self, bank_account_detail):
        """Sets the bank_account_detail of this AccountHolderPayoutNotificationContent.

        Details of the Bank Account to which the payout was made.

        :param bank_account_detail: The bank_account_detail of this AccountHolderPayoutNotificationContent.
        :type bank_account_detail: BankAccountDetail
        """

        self._bank_account_detail = bank_account_detail

    @property
    def description(self):
        """Gets the description of this AccountHolderPayoutNotificationContent.

        A description of the payout.

        :return: The description of this AccountHolderPayoutNotificationContent.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this AccountHolderPayoutNotificationContent.

        A description of the payout.

        :param description: The description of this AccountHolderPayoutNotificationContent.
        :type description: str
        """

        self._description = description

    @property
    def estimated_arrival_date(self):
        """Gets the estimated_arrival_date of this AccountHolderPayoutNotificationContent.

        The estimated date of arrival.

        :return: The estimated_arrival_date of this AccountHolderPayoutNotificationContent.
        :rtype: LocalDate
        """
        return self._estimated_arrival_date

    @estimated_arrival_date.setter
    def estimated_arrival_date(self, estimated_arrival_date):
        """Sets the estimated_arrival_date of this AccountHolderPayoutNotificationContent.

        The estimated date of arrival.

        :param estimated_arrival_date: The estimated_arrival_date of this AccountHolderPayoutNotificationContent.
        :type estimated_arrival_date: LocalDate
        """

        self._estimated_arrival_date = estimated_arrival_date

    @property
    def invalid_fields(self):
        """Gets the invalid_fields of this AccountHolderPayoutNotificationContent.

        Invalid fields list.

        :return: The invalid_fields of this AccountHolderPayoutNotificationContent.
        :rtype: List[ErrorFieldType]
        """
        return self._invalid_fields

    @invalid_fields.setter
    def invalid_fields(self, invalid_fields):
        """Sets the invalid_fields of this AccountHolderPayoutNotificationContent.

        Invalid fields list.

        :param invalid_fields: The invalid_fields of this AccountHolderPayoutNotificationContent.
        :type invalid_fields: List[ErrorFieldType]
        """

        self._invalid_fields = invalid_fields

    @property
    def merchant_reference(self):
        """Gets the merchant_reference of this AccountHolderPayoutNotificationContent.

        The merchant reference.

        :return: The merchant_reference of this AccountHolderPayoutNotificationContent.
        :rtype: str
        """
        return self._merchant_reference

    @merchant_reference.setter
    def merchant_reference(self, merchant_reference):
        """Sets the merchant_reference of this AccountHolderPayoutNotificationContent.

        The merchant reference.

        :param merchant_reference: The merchant_reference of this AccountHolderPayoutNotificationContent.
        :type merchant_reference: str
        """

        self._merchant_reference = merchant_reference

    @property
    def original_psp_reference(self):
        """Gets the original_psp_reference of this AccountHolderPayoutNotificationContent.

        The PSP reference of the original payout.

        :return: The original_psp_reference of this AccountHolderPayoutNotificationContent.
        :rtype: str
        """
        return self._original_psp_reference

    @original_psp_reference.setter
    def original_psp_reference(self, original_psp_reference):
        """Sets the original_psp_reference of this AccountHolderPayoutNotificationContent.

        The PSP reference of the original payout.

        :param original_psp_reference: The original_psp_reference of this AccountHolderPayoutNotificationContent.
        :type original_psp_reference: str
        """

        self._original_psp_reference = original_psp_reference

    @property
    def payout_speed(self):
        """Gets the payout_speed of this AccountHolderPayoutNotificationContent.

        Speed with which payouts for this account are processed. Permitted values: `STANDARD`, `SAME_DAY`.

        :return: The payout_speed of this AccountHolderPayoutNotificationContent.
        :rtype: str
        """
        return self._payout_speed

    @payout_speed.setter
    def payout_speed(self, payout_speed):
        """Sets the payout_speed of this AccountHolderPayoutNotificationContent.

        Speed with which payouts for this account are processed. Permitted values: `STANDARD`, `SAME_DAY`.

        :param payout_speed: The payout_speed of this AccountHolderPayoutNotificationContent.
        :type payout_speed: str
        """
        allowed_values = ["INSTANT", "SAME_DAY", "STANDARD"]  # noqa: E501
        if payout_speed not in allowed_values:
            raise ValueError(
                "Invalid value for `payout_speed` ({0}), must be one of {1}"
                .format(payout_speed, allowed_values)
            )

        self._payout_speed = payout_speed

    @property
    def status(self):
        """Gets the status of this AccountHolderPayoutNotificationContent.

        The payout status.

        :return: The status of this AccountHolderPayoutNotificationContent.
        :rtype: OperationStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this AccountHolderPayoutNotificationContent.

        The payout status.

        :param status: The status of this AccountHolderPayoutNotificationContent.
        :type status: OperationStatus
        """

        self._status = status
