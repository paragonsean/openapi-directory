# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.amount import Amount
from openapi_server.models.local_date import LocalDate
from openapi_server import util


class AccountFundsBelowThresholdNotificationContent(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_code: str=None, balance_date: LocalDate=None, current_funds: Amount=None, fund_threshold: Amount=None, merchant_account_code: str=None):
        """AccountFundsBelowThresholdNotificationContent - a model defined in OpenAPI

        :param account_code: The account_code of this AccountFundsBelowThresholdNotificationContent.
        :param balance_date: The balance_date of this AccountFundsBelowThresholdNotificationContent.
        :param current_funds: The current_funds of this AccountFundsBelowThresholdNotificationContent.
        :param fund_threshold: The fund_threshold of this AccountFundsBelowThresholdNotificationContent.
        :param merchant_account_code: The merchant_account_code of this AccountFundsBelowThresholdNotificationContent.
        """
        self.openapi_types = {
            'account_code': str,
            'balance_date': LocalDate,
            'current_funds': Amount,
            'fund_threshold': Amount,
            'merchant_account_code': str
        }

        self.attribute_map = {
            'account_code': 'accountCode',
            'balance_date': 'balanceDate',
            'current_funds': 'currentFunds',
            'fund_threshold': 'fundThreshold',
            'merchant_account_code': 'merchantAccountCode'
        }

        self._account_code = account_code
        self._balance_date = balance_date
        self._current_funds = current_funds
        self._fund_threshold = fund_threshold
        self._merchant_account_code = merchant_account_code

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AccountFundsBelowThresholdNotificationContent':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AccountFundsBelowThresholdNotificationContent of this AccountFundsBelowThresholdNotificationContent.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_code(self):
        """Gets the account_code of this AccountFundsBelowThresholdNotificationContent.

        The code of the account with funds under threshold

        :return: The account_code of this AccountFundsBelowThresholdNotificationContent.
        :rtype: str
        """
        return self._account_code

    @account_code.setter
    def account_code(self, account_code):
        """Sets the account_code of this AccountFundsBelowThresholdNotificationContent.

        The code of the account with funds under threshold

        :param account_code: The account_code of this AccountFundsBelowThresholdNotificationContent.
        :type account_code: str
        """

        self._account_code = account_code

    @property
    def balance_date(self):
        """Gets the balance_date of this AccountFundsBelowThresholdNotificationContent.

        The date of the funds were found to be below threshold.

        :return: The balance_date of this AccountFundsBelowThresholdNotificationContent.
        :rtype: LocalDate
        """
        return self._balance_date

    @balance_date.setter
    def balance_date(self, balance_date):
        """Sets the balance_date of this AccountFundsBelowThresholdNotificationContent.

        The date of the funds were found to be below threshold.

        :param balance_date: The balance_date of this AccountFundsBelowThresholdNotificationContent.
        :type balance_date: LocalDate
        """

        self._balance_date = balance_date

    @property
    def current_funds(self):
        """Gets the current_funds of this AccountFundsBelowThresholdNotificationContent.

        The current funds in the liable account.

        :return: The current_funds of this AccountFundsBelowThresholdNotificationContent.
        :rtype: Amount
        """
        return self._current_funds

    @current_funds.setter
    def current_funds(self, current_funds):
        """Sets the current_funds of this AccountFundsBelowThresholdNotificationContent.

        The current funds in the liable account.

        :param current_funds: The current_funds of this AccountFundsBelowThresholdNotificationContent.
        :type current_funds: Amount
        """

        self._current_funds = current_funds

    @property
    def fund_threshold(self):
        """Gets the fund_threshold of this AccountFundsBelowThresholdNotificationContent.

        The configured fund threshold for the liable account

        :return: The fund_threshold of this AccountFundsBelowThresholdNotificationContent.
        :rtype: Amount
        """
        return self._fund_threshold

    @fund_threshold.setter
    def fund_threshold(self, fund_threshold):
        """Sets the fund_threshold of this AccountFundsBelowThresholdNotificationContent.

        The configured fund threshold for the liable account

        :param fund_threshold: The fund_threshold of this AccountFundsBelowThresholdNotificationContent.
        :type fund_threshold: Amount
        """
        if fund_threshold is None:
            raise ValueError("Invalid value for `fund_threshold`, must not be `None`")

        self._fund_threshold = fund_threshold

    @property
    def merchant_account_code(self):
        """Gets the merchant_account_code of this AccountFundsBelowThresholdNotificationContent.

        The code of the merchant account.

        :return: The merchant_account_code of this AccountFundsBelowThresholdNotificationContent.
        :rtype: str
        """
        return self._merchant_account_code

    @merchant_account_code.setter
    def merchant_account_code(self, merchant_account_code):
        """Sets the merchant_account_code of this AccountFundsBelowThresholdNotificationContent.

        The code of the merchant account.

        :param merchant_account_code: The merchant_account_code of this AccountFundsBelowThresholdNotificationContent.
        :type merchant_account_code: str
        """
        if merchant_account_code is None:
            raise ValueError("Invalid value for `merchant_account_code`, must not be `None`")

        self._merchant_account_code = merchant_account_code
