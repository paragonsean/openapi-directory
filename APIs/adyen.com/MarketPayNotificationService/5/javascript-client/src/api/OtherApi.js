/**
 * Classic Platforms - Notifications
 * This API is used for the classic integration. If you are just starting your implementation, refer to our [new integration guide](https://docs.adyen.com/marketplaces-and-platforms) instead.  The Notification API sends notifications to the endpoints specified in a given subscription.  Subscriptions are managed through the Notification Configuration API. The API specifications listed here detail the format of each notification.  For more information, refer to our [documentation](https://docs.adyen.com/marketplaces-and-platforms/classic/notifications).
 *
 * The version of the OpenAPI document: 5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import NotificationResponse from '../model/NotificationResponse';
import PaymentFailureNotification from '../model/PaymentFailureNotification';
import ReportAvailableNotification from '../model/ReportAvailableNotification';

/**
* Other service.
* @module api/OtherApi
* @version 5
*/
export default class OtherApi {

    /**
    * Constructs a new OtherApi. 
    * @alias module:api/OtherApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the postPAYMENTFAILURE operation.
     * @callback module:api/OtherApi~postPAYMENTFAILURECallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Booking for a capture or refund failed
     * Adyen sends this notification when a [split payment](https://docs.adyen.com/marketplaces-and-platforms/classic/processing-payments#providing-split-information) booking for a capture or refund fails. When a booking fails due to an invalid account status or an unknown `accountCode`, the funds are credited or debited to or fromyour platform's liable account instead of the account specified in the split data.
     * @param {Object} opts Optional parameters
     * @param {} [paymentFailureNotification] 
     * @param {module:api/OtherApi~postPAYMENTFAILURECallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link }
     */
    postPAYMENTFAILURE() {
      let postBody = opts['paymentFailureNotification'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BasicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/PAYMENT_FAILURE', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postREPORTAVAILABLE operation.
     * @callback module:api/OtherApi~postREPORTAVAILABLECallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Report available
     * Adyen sends this notification when a report has been generated and it is available for download.
     * @param {Object} opts Optional parameters
     * @param {} [reportAvailableNotification] 
     * @param {module:api/OtherApi~postREPORTAVAILABLECallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link }
     */
    postREPORTAVAILABLE() {
      let postBody = opts['reportAvailableNotification'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BasicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/REPORT_AVAILABLE', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
