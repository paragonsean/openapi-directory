/**
 * Classic Platforms - Notifications
 * This API is used for the classic integration. If you are just starting your implementation, refer to our [new integration guide](https://docs.adyen.com/marketplaces-and-platforms) instead.  The Notification API sends notifications to the endpoints specified in a given subscription.  Subscriptions are managed through the Notification Configuration API. The API specifications listed here detail the format of each notification.  For more information, refer to our [documentation](https://docs.adyen.com/marketplaces-and-platforms/classic/notifications).
 *
 * The version of the OpenAPI document: 5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AccountEvent from './AccountEvent';
import AccountPayoutState from './AccountPayoutState';
import AccountProcessingState from './AccountProcessingState';

/**
 * The AccountHolderStatus model module.
 * @module model/AccountHolderStatus
 * @version 5
 */
class AccountHolderStatus {
    /**
     * Constructs a new <code>AccountHolderStatus</code>.
     * @alias module:model/AccountHolderStatus
     * @param status {module:model/AccountHolderStatus.StatusEnum} The status of the account holder. >Permitted values: `Active`, `Inactive`, `Suspended`, `Closed`.
     */
    constructor(status) { 
        
        AccountHolderStatus.initialize(this, status);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, status) { 
        obj['status'] = status;
    }

    /**
     * Constructs a <code>AccountHolderStatus</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AccountHolderStatus} obj Optional instance to populate.
     * @return {module:model/AccountHolderStatus} The populated <code>AccountHolderStatus</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AccountHolderStatus();

            if (data.hasOwnProperty('events')) {
                obj['events'] = ApiClient.convertToType(data['events'], [AccountEvent]);
            }
            if (data.hasOwnProperty('payoutState')) {
                obj['payoutState'] = AccountPayoutState.constructFromObject(data['payoutState']);
            }
            if (data.hasOwnProperty('processingState')) {
                obj['processingState'] = AccountProcessingState.constructFromObject(data['processingState']);
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('statusReason')) {
                obj['statusReason'] = ApiClient.convertToType(data['statusReason'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AccountHolderStatus</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AccountHolderStatus</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of AccountHolderStatus.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['events']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['events'])) {
                throw new Error("Expected the field `events` to be an array in the JSON data but got " + data['events']);
            }
            // validate the optional field `events` (array)
            for (const item of data['events']) {
                AccountEvent.validateJSON(item);
            };
        }
        // validate the optional field `payoutState`
        if (data['payoutState']) { // data not null
          AccountPayoutState.validateJSON(data['payoutState']);
        }
        // validate the optional field `processingState`
        if (data['processingState']) { // data not null
          AccountProcessingState.validateJSON(data['processingState']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['statusReason'] && !(typeof data['statusReason'] === 'string' || data['statusReason'] instanceof String)) {
            throw new Error("Expected the field `statusReason` to be a primitive type in the JSON string but got " + data['statusReason']);
        }

        return true;
    }


}

AccountHolderStatus.RequiredProperties = ["status"];

/**
 * A list of events scheduled for the account holder.
 * @member {Array.<module:model/AccountEvent>} events
 */
AccountHolderStatus.prototype['events'] = undefined;

/**
 * The payout state of the account holder.
 * @member {module:model/AccountPayoutState} payoutState
 */
AccountHolderStatus.prototype['payoutState'] = undefined;

/**
 * The processing state of the account holder.
 * @member {module:model/AccountProcessingState} processingState
 */
AccountHolderStatus.prototype['processingState'] = undefined;

/**
 * The status of the account holder. >Permitted values: `Active`, `Inactive`, `Suspended`, `Closed`.
 * @member {module:model/AccountHolderStatus.StatusEnum} status
 */
AccountHolderStatus.prototype['status'] = undefined;

/**
 * The reason why the status was assigned to the account holder.
 * @member {String} statusReason
 */
AccountHolderStatus.prototype['statusReason'] = undefined;





/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
AccountHolderStatus['StatusEnum'] = {

    /**
     * value: "Active"
     * @const
     */
    "Active": "Active",

    /**
     * value: "Closed"
     * @const
     */
    "Closed": "Closed",

    /**
     * value: "Inactive"
     * @const
     */
    "Inactive": "Inactive",

    /**
     * value: "Suspended"
     * @const
     */
    "Suspended": "Suspended"
};



export default AccountHolderStatus;

