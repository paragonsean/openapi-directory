/**
 * Classic Platforms - Notifications
 * This API is used for the classic integration. If you are just starting your implementation, refer to our [new integration guide](https://docs.adyen.com/marketplaces-and-platforms) instead.  The Notification API sends notifications to the endpoints specified in a given subscription.  Subscriptions are managed through the Notification Configuration API. The API specifications listed here detail the format of each notification.  For more information, refer to our [documentation](https://docs.adyen.com/marketplaces-and-platforms/classic/notifications).
 *
 * The version of the OpenAPI document: 5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AccountHolderStatus from './AccountHolderStatus';
import ErrorFieldType from './ErrorFieldType';

/**
 * The AccountHolderStatusChangeNotificationContent model module.
 * @module model/AccountHolderStatusChangeNotificationContent
 * @version 5
 */
class AccountHolderStatusChangeNotificationContent {
    /**
     * Constructs a new <code>AccountHolderStatusChangeNotificationContent</code>.
     * @alias module:model/AccountHolderStatusChangeNotificationContent
     * @param accountHolderCode {String} The code of the account holder.
     */
    constructor(accountHolderCode) { 
        
        AccountHolderStatusChangeNotificationContent.initialize(this, accountHolderCode);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, accountHolderCode) { 
        obj['accountHolderCode'] = accountHolderCode;
    }

    /**
     * Constructs a <code>AccountHolderStatusChangeNotificationContent</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AccountHolderStatusChangeNotificationContent} obj Optional instance to populate.
     * @return {module:model/AccountHolderStatusChangeNotificationContent} The populated <code>AccountHolderStatusChangeNotificationContent</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AccountHolderStatusChangeNotificationContent();

            if (data.hasOwnProperty('accountHolderCode')) {
                obj['accountHolderCode'] = ApiClient.convertToType(data['accountHolderCode'], 'String');
            }
            if (data.hasOwnProperty('invalidFields')) {
                obj['invalidFields'] = ApiClient.convertToType(data['invalidFields'], [ErrorFieldType]);
            }
            if (data.hasOwnProperty('newStatus')) {
                obj['newStatus'] = AccountHolderStatus.constructFromObject(data['newStatus']);
            }
            if (data.hasOwnProperty('oldStatus')) {
                obj['oldStatus'] = AccountHolderStatus.constructFromObject(data['oldStatus']);
            }
            if (data.hasOwnProperty('reason')) {
                obj['reason'] = ApiClient.convertToType(data['reason'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AccountHolderStatusChangeNotificationContent</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AccountHolderStatusChangeNotificationContent</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of AccountHolderStatusChangeNotificationContent.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['accountHolderCode'] && !(typeof data['accountHolderCode'] === 'string' || data['accountHolderCode'] instanceof String)) {
            throw new Error("Expected the field `accountHolderCode` to be a primitive type in the JSON string but got " + data['accountHolderCode']);
        }
        if (data['invalidFields']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['invalidFields'])) {
                throw new Error("Expected the field `invalidFields` to be an array in the JSON data but got " + data['invalidFields']);
            }
            // validate the optional field `invalidFields` (array)
            for (const item of data['invalidFields']) {
                ErrorFieldType.validateJSON(item);
            };
        }
        // validate the optional field `newStatus`
        if (data['newStatus']) { // data not null
          AccountHolderStatus.validateJSON(data['newStatus']);
        }
        // validate the optional field `oldStatus`
        if (data['oldStatus']) { // data not null
          AccountHolderStatus.validateJSON(data['oldStatus']);
        }
        // ensure the json data is a string
        if (data['reason'] && !(typeof data['reason'] === 'string' || data['reason'] instanceof String)) {
            throw new Error("Expected the field `reason` to be a primitive type in the JSON string but got " + data['reason']);
        }

        return true;
    }


}

AccountHolderStatusChangeNotificationContent.RequiredProperties = ["accountHolderCode"];

/**
 * The code of the account holder.
 * @member {String} accountHolderCode
 */
AccountHolderStatusChangeNotificationContent.prototype['accountHolderCode'] = undefined;

/**
 * in case the account holder has not been updated, contains account holder fields, that did not pass the validation.
 * @member {Array.<module:model/ErrorFieldType>} invalidFields
 */
AccountHolderStatusChangeNotificationContent.prototype['invalidFields'] = undefined;

/**
 * The new status of the account holder.
 * @member {module:model/AccountHolderStatus} newStatus
 */
AccountHolderStatusChangeNotificationContent.prototype['newStatus'] = undefined;

/**
 * The former status of the account holder.
 * @member {module:model/AccountHolderStatus} oldStatus
 */
AccountHolderStatusChangeNotificationContent.prototype['oldStatus'] = undefined;

/**
 * The reason for the status change.
 * @member {String} reason
 */
AccountHolderStatusChangeNotificationContent.prototype['reason'] = undefined;






export default AccountHolderStatusChangeNotificationContent;

