/**
 * Classic Platforms - Notifications
 * This API is used for the classic integration. If you are just starting your implementation, refer to our [new integration guide](https://docs.adyen.com/marketplaces-and-platforms) instead.  The Notification API sends notifications to the endpoints specified in a given subscription.  Subscriptions are managed through the Notification Configuration API. The API specifications listed here detail the format of each notification.  For more information, refer to our [documentation](https://docs.adyen.com/marketplaces-and-platforms/classic/notifications).
 *
 * The version of the OpenAPI document: 5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Amount from './Amount';

/**
 * The AccountProcessingState model module.
 * @module model/AccountProcessingState
 * @version 5
 */
class AccountProcessingState {
    /**
     * Constructs a new <code>AccountProcessingState</code>.
     * @alias module:model/AccountProcessingState
     */
    constructor() { 
        
        AccountProcessingState.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AccountProcessingState</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AccountProcessingState} obj Optional instance to populate.
     * @return {module:model/AccountProcessingState} The populated <code>AccountProcessingState</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AccountProcessingState();

            if (data.hasOwnProperty('disableReason')) {
                obj['disableReason'] = ApiClient.convertToType(data['disableReason'], 'String');
            }
            if (data.hasOwnProperty('disabled')) {
                obj['disabled'] = ApiClient.convertToType(data['disabled'], 'Boolean');
            }
            if (data.hasOwnProperty('processedFrom')) {
                obj['processedFrom'] = Amount.constructFromObject(data['processedFrom']);
            }
            if (data.hasOwnProperty('processedTo')) {
                obj['processedTo'] = Amount.constructFromObject(data['processedTo']);
            }
            if (data.hasOwnProperty('tierNumber')) {
                obj['tierNumber'] = ApiClient.convertToType(data['tierNumber'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AccountProcessingState</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AccountProcessingState</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['disableReason'] && !(typeof data['disableReason'] === 'string' || data['disableReason'] instanceof String)) {
            throw new Error("Expected the field `disableReason` to be a primitive type in the JSON string but got " + data['disableReason']);
        }
        // validate the optional field `processedFrom`
        if (data['processedFrom']) { // data not null
          Amount.validateJSON(data['processedFrom']);
        }
        // validate the optional field `processedTo`
        if (data['processedTo']) { // data not null
          Amount.validateJSON(data['processedTo']);
        }

        return true;
    }


}



/**
 * The reason why processing has been disabled.
 * @member {String} disableReason
 */
AccountProcessingState.prototype['disableReason'] = undefined;

/**
 * Indicates whether the processing of payments is allowed.
 * @member {Boolean} disabled
 */
AccountProcessingState.prototype['disabled'] = undefined;

/**
 * The lower bound of the processing tier (i.e., an account holder must have processed at least this amount of money in order to be placed into this tier).
 * @member {module:model/Amount} processedFrom
 */
AccountProcessingState.prototype['processedFrom'] = undefined;

/**
 * The upper bound of the processing tier (i.e., an account holder must have processed less than this amount of money in order to be placed into this tier).
 * @member {module:model/Amount} processedTo
 */
AccountProcessingState.prototype['processedTo'] = undefined;

/**
 * The processing tier that the account holder occupies.
 * @member {Number} tierNumber
 */
AccountProcessingState.prototype['tierNumber'] = undefined;






export default AccountProcessingState;

