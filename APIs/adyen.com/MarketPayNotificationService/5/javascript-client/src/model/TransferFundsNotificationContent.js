/**
 * Classic Platforms - Notifications
 * This API is used for the classic integration. If you are just starting your implementation, refer to our [new integration guide](https://docs.adyen.com/marketplaces-and-platforms) instead.  The Notification API sends notifications to the endpoints specified in a given subscription.  Subscriptions are managed through the Notification Configuration API. The API specifications listed here detail the format of each notification.  For more information, refer to our [documentation](https://docs.adyen.com/marketplaces-and-platforms/classic/notifications).
 *
 * The version of the OpenAPI document: 5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Amount from './Amount';
import ErrorFieldType from './ErrorFieldType';
import OperationStatus from './OperationStatus';

/**
 * The TransferFundsNotificationContent model module.
 * @module model/TransferFundsNotificationContent
 * @version 5
 */
class TransferFundsNotificationContent {
    /**
     * Constructs a new <code>TransferFundsNotificationContent</code>.
     * @alias module:model/TransferFundsNotificationContent
     */
    constructor() { 
        
        TransferFundsNotificationContent.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TransferFundsNotificationContent</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TransferFundsNotificationContent} obj Optional instance to populate.
     * @return {module:model/TransferFundsNotificationContent} The populated <code>TransferFundsNotificationContent</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TransferFundsNotificationContent();

            if (data.hasOwnProperty('amount')) {
                obj['amount'] = Amount.constructFromObject(data['amount']);
            }
            if (data.hasOwnProperty('destinationAccountCode')) {
                obj['destinationAccountCode'] = ApiClient.convertToType(data['destinationAccountCode'], 'String');
            }
            if (data.hasOwnProperty('invalidFields')) {
                obj['invalidFields'] = ApiClient.convertToType(data['invalidFields'], [ErrorFieldType]);
            }
            if (data.hasOwnProperty('merchantReference')) {
                obj['merchantReference'] = ApiClient.convertToType(data['merchantReference'], 'String');
            }
            if (data.hasOwnProperty('sourceAccountCode')) {
                obj['sourceAccountCode'] = ApiClient.convertToType(data['sourceAccountCode'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = OperationStatus.constructFromObject(data['status']);
            }
            if (data.hasOwnProperty('transferCode')) {
                obj['transferCode'] = ApiClient.convertToType(data['transferCode'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TransferFundsNotificationContent</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TransferFundsNotificationContent</code>.
     */
    static validateJSON(data) {
        // validate the optional field `amount`
        if (data['amount']) { // data not null
          Amount.validateJSON(data['amount']);
        }
        // ensure the json data is a string
        if (data['destinationAccountCode'] && !(typeof data['destinationAccountCode'] === 'string' || data['destinationAccountCode'] instanceof String)) {
            throw new Error("Expected the field `destinationAccountCode` to be a primitive type in the JSON string but got " + data['destinationAccountCode']);
        }
        if (data['invalidFields']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['invalidFields'])) {
                throw new Error("Expected the field `invalidFields` to be an array in the JSON data but got " + data['invalidFields']);
            }
            // validate the optional field `invalidFields` (array)
            for (const item of data['invalidFields']) {
                ErrorFieldType.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['merchantReference'] && !(typeof data['merchantReference'] === 'string' || data['merchantReference'] instanceof String)) {
            throw new Error("Expected the field `merchantReference` to be a primitive type in the JSON string but got " + data['merchantReference']);
        }
        // ensure the json data is a string
        if (data['sourceAccountCode'] && !(typeof data['sourceAccountCode'] === 'string' || data['sourceAccountCode'] instanceof String)) {
            throw new Error("Expected the field `sourceAccountCode` to be a primitive type in the JSON string but got " + data['sourceAccountCode']);
        }
        // validate the optional field `status`
        if (data['status']) { // data not null
          OperationStatus.validateJSON(data['status']);
        }
        // ensure the json data is a string
        if (data['transferCode'] && !(typeof data['transferCode'] === 'string' || data['transferCode'] instanceof String)) {
            throw new Error("Expected the field `transferCode` to be a primitive type in the JSON string but got " + data['transferCode']);
        }

        return true;
    }


}



/**
 * The amount transferred.
 * @member {module:model/Amount} amount
 */
TransferFundsNotificationContent.prototype['amount'] = undefined;

/**
 * The code of the Account to which funds were credited.
 * @member {String} destinationAccountCode
 */
TransferFundsNotificationContent.prototype['destinationAccountCode'] = undefined;

/**
 * Invalid fields list.
 * @member {Array.<module:model/ErrorFieldType>} invalidFields
 */
TransferFundsNotificationContent.prototype['invalidFields'] = undefined;

/**
 * The reference provided by the merchant.
 * @member {String} merchantReference
 */
TransferFundsNotificationContent.prototype['merchantReference'] = undefined;

/**
 * The code of the Account from which funds were debited.
 * @member {String} sourceAccountCode
 */
TransferFundsNotificationContent.prototype['sourceAccountCode'] = undefined;

/**
 * The status of the fund transfer.
 * @member {module:model/OperationStatus} status
 */
TransferFundsNotificationContent.prototype['status'] = undefined;

/**
 * The transfer code.
 * @member {String} transferCode
 */
TransferFundsNotificationContent.prototype['transferCode'] = undefined;






export default TransferFundsNotificationContent;

