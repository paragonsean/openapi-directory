/**
 * Classic Platforms - Notifications
 * This API is used for the classic integration. If you are just starting your implementation, refer to our [new integration guide](https://docs.adyen.com/marketplaces-and-platforms) instead.  The Notification API sends notifications to the endpoints specified in a given subscription.  Subscriptions are managed through the Notification Configuration API. The API specifications listed here detail the format of each notification.  For more information, refer to our [documentation](https://docs.adyen.com/marketplaces-and-platforms/classic/notifications).
 *
 * The version of the OpenAPI document: 5
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAccountEvent.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAccountEvent::OAIAccountEvent(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAccountEvent::OAIAccountEvent() {
    this->initializeModel();
}

OAIAccountEvent::~OAIAccountEvent() {}

void OAIAccountEvent::initializeModel() {

    m_event_isSet = false;
    m_event_isValid = false;

    m_execution_date_isSet = false;
    m_execution_date_isValid = false;

    m_reason_isSet = false;
    m_reason_isValid = false;
}

void OAIAccountEvent::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAccountEvent::fromJsonObject(QJsonObject json) {

    m_event_isValid = ::OpenAPI::fromJsonValue(m_event, json[QString("event")]);
    m_event_isSet = !json[QString("event")].isNull() && m_event_isValid;

    m_execution_date_isValid = ::OpenAPI::fromJsonValue(m_execution_date, json[QString("executionDate")]);
    m_execution_date_isSet = !json[QString("executionDate")].isNull() && m_execution_date_isValid;

    m_reason_isValid = ::OpenAPI::fromJsonValue(m_reason, json[QString("reason")]);
    m_reason_isSet = !json[QString("reason")].isNull() && m_reason_isValid;
}

QString OAIAccountEvent::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAccountEvent::asJsonObject() const {
    QJsonObject obj;
    if (m_event_isSet) {
        obj.insert(QString("event"), ::OpenAPI::toJsonValue(m_event));
    }
    if (m_execution_date_isSet) {
        obj.insert(QString("executionDate"), ::OpenAPI::toJsonValue(m_execution_date));
    }
    if (m_reason_isSet) {
        obj.insert(QString("reason"), ::OpenAPI::toJsonValue(m_reason));
    }
    return obj;
}

QString OAIAccountEvent::getEvent() const {
    return m_event;
}
void OAIAccountEvent::setEvent(const QString &event) {
    m_event = event;
    m_event_isSet = true;
}

bool OAIAccountEvent::is_event_Set() const{
    return m_event_isSet;
}

bool OAIAccountEvent::is_event_Valid() const{
    return m_event_isValid;
}

QDateTime OAIAccountEvent::getExecutionDate() const {
    return m_execution_date;
}
void OAIAccountEvent::setExecutionDate(const QDateTime &execution_date) {
    m_execution_date = execution_date;
    m_execution_date_isSet = true;
}

bool OAIAccountEvent::is_execution_date_Set() const{
    return m_execution_date_isSet;
}

bool OAIAccountEvent::is_execution_date_Valid() const{
    return m_execution_date_isValid;
}

QString OAIAccountEvent::getReason() const {
    return m_reason;
}
void OAIAccountEvent::setReason(const QString &reason) {
    m_reason = reason;
    m_reason_isSet = true;
}

bool OAIAccountEvent::is_reason_Set() const{
    return m_reason_isSet;
}

bool OAIAccountEvent::is_reason_Valid() const{
    return m_reason_isValid;
}

bool OAIAccountEvent::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_event_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_execution_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reason_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAccountEvent::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
