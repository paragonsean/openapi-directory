/**
 * Classic Platforms - Notifications
 * This API is used for the classic integration. If you are just starting your implementation, refer to our [new integration guide](https://docs.adyen.com/marketplaces-and-platforms) instead.  The Notification API sends notifications to the endpoints specified in a given subscription.  Subscriptions are managed through the Notification Configuration API. The API specifications listed here detail the format of each notification.  For more information, refer to our [documentation](https://docs.adyen.com/marketplaces-and-platforms/classic/notifications).
 *
 * The version of the OpenAPI document: 5
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISignatoryContact.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISignatoryContact::OAISignatoryContact(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISignatoryContact::OAISignatoryContact() {
    this->initializeModel();
}

OAISignatoryContact::~OAISignatoryContact() {}

void OAISignatoryContact::initializeModel() {

    m_address_isSet = false;
    m_address_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_full_phone_number_isSet = false;
    m_full_phone_number_isValid = false;

    m_job_title_isSet = false;
    m_job_title_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_personal_data_isSet = false;
    m_personal_data_isValid = false;

    m_phone_number_isSet = false;
    m_phone_number_isValid = false;

    m_signatory_code_isSet = false;
    m_signatory_code_isValid = false;

    m_signatory_reference_isSet = false;
    m_signatory_reference_isValid = false;

    m_web_address_isSet = false;
    m_web_address_isValid = false;
}

void OAISignatoryContact::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISignatoryContact::fromJsonObject(QJsonObject json) {

    m_address_isValid = ::OpenAPI::fromJsonValue(m_address, json[QString("address")]);
    m_address_isSet = !json[QString("address")].isNull() && m_address_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_full_phone_number_isValid = ::OpenAPI::fromJsonValue(m_full_phone_number, json[QString("fullPhoneNumber")]);
    m_full_phone_number_isSet = !json[QString("fullPhoneNumber")].isNull() && m_full_phone_number_isValid;

    m_job_title_isValid = ::OpenAPI::fromJsonValue(m_job_title, json[QString("jobTitle")]);
    m_job_title_isSet = !json[QString("jobTitle")].isNull() && m_job_title_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_personal_data_isValid = ::OpenAPI::fromJsonValue(m_personal_data, json[QString("personalData")]);
    m_personal_data_isSet = !json[QString("personalData")].isNull() && m_personal_data_isValid;

    m_phone_number_isValid = ::OpenAPI::fromJsonValue(m_phone_number, json[QString("phoneNumber")]);
    m_phone_number_isSet = !json[QString("phoneNumber")].isNull() && m_phone_number_isValid;

    m_signatory_code_isValid = ::OpenAPI::fromJsonValue(m_signatory_code, json[QString("signatoryCode")]);
    m_signatory_code_isSet = !json[QString("signatoryCode")].isNull() && m_signatory_code_isValid;

    m_signatory_reference_isValid = ::OpenAPI::fromJsonValue(m_signatory_reference, json[QString("signatoryReference")]);
    m_signatory_reference_isSet = !json[QString("signatoryReference")].isNull() && m_signatory_reference_isValid;

    m_web_address_isValid = ::OpenAPI::fromJsonValue(m_web_address, json[QString("webAddress")]);
    m_web_address_isSet = !json[QString("webAddress")].isNull() && m_web_address_isValid;
}

QString OAISignatoryContact::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISignatoryContact::asJsonObject() const {
    QJsonObject obj;
    if (m_address.isSet()) {
        obj.insert(QString("address"), ::OpenAPI::toJsonValue(m_address));
    }
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_full_phone_number_isSet) {
        obj.insert(QString("fullPhoneNumber"), ::OpenAPI::toJsonValue(m_full_phone_number));
    }
    if (m_job_title_isSet) {
        obj.insert(QString("jobTitle"), ::OpenAPI::toJsonValue(m_job_title));
    }
    if (m_name.isSet()) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_personal_data.isSet()) {
        obj.insert(QString("personalData"), ::OpenAPI::toJsonValue(m_personal_data));
    }
    if (m_phone_number.isSet()) {
        obj.insert(QString("phoneNumber"), ::OpenAPI::toJsonValue(m_phone_number));
    }
    if (m_signatory_code_isSet) {
        obj.insert(QString("signatoryCode"), ::OpenAPI::toJsonValue(m_signatory_code));
    }
    if (m_signatory_reference_isSet) {
        obj.insert(QString("signatoryReference"), ::OpenAPI::toJsonValue(m_signatory_reference));
    }
    if (m_web_address_isSet) {
        obj.insert(QString("webAddress"), ::OpenAPI::toJsonValue(m_web_address));
    }
    return obj;
}

OAIViasAddress OAISignatoryContact::getAddress() const {
    return m_address;
}
void OAISignatoryContact::setAddress(const OAIViasAddress &address) {
    m_address = address;
    m_address_isSet = true;
}

bool OAISignatoryContact::is_address_Set() const{
    return m_address_isSet;
}

bool OAISignatoryContact::is_address_Valid() const{
    return m_address_isValid;
}

QString OAISignatoryContact::getEmail() const {
    return m_email;
}
void OAISignatoryContact::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAISignatoryContact::is_email_Set() const{
    return m_email_isSet;
}

bool OAISignatoryContact::is_email_Valid() const{
    return m_email_isValid;
}

QString OAISignatoryContact::getFullPhoneNumber() const {
    return m_full_phone_number;
}
void OAISignatoryContact::setFullPhoneNumber(const QString &full_phone_number) {
    m_full_phone_number = full_phone_number;
    m_full_phone_number_isSet = true;
}

bool OAISignatoryContact::is_full_phone_number_Set() const{
    return m_full_phone_number_isSet;
}

bool OAISignatoryContact::is_full_phone_number_Valid() const{
    return m_full_phone_number_isValid;
}

QString OAISignatoryContact::getJobTitle() const {
    return m_job_title;
}
void OAISignatoryContact::setJobTitle(const QString &job_title) {
    m_job_title = job_title;
    m_job_title_isSet = true;
}

bool OAISignatoryContact::is_job_title_Set() const{
    return m_job_title_isSet;
}

bool OAISignatoryContact::is_job_title_Valid() const{
    return m_job_title_isValid;
}

OAIViasName OAISignatoryContact::getName() const {
    return m_name;
}
void OAISignatoryContact::setName(const OAIViasName &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAISignatoryContact::is_name_Set() const{
    return m_name_isSet;
}

bool OAISignatoryContact::is_name_Valid() const{
    return m_name_isValid;
}

OAIViasPersonalData OAISignatoryContact::getPersonalData() const {
    return m_personal_data;
}
void OAISignatoryContact::setPersonalData(const OAIViasPersonalData &personal_data) {
    m_personal_data = personal_data;
    m_personal_data_isSet = true;
}

bool OAISignatoryContact::is_personal_data_Set() const{
    return m_personal_data_isSet;
}

bool OAISignatoryContact::is_personal_data_Valid() const{
    return m_personal_data_isValid;
}

OAIViasPhoneNumber OAISignatoryContact::getPhoneNumber() const {
    return m_phone_number;
}
void OAISignatoryContact::setPhoneNumber(const OAIViasPhoneNumber &phone_number) {
    m_phone_number = phone_number;
    m_phone_number_isSet = true;
}

bool OAISignatoryContact::is_phone_number_Set() const{
    return m_phone_number_isSet;
}

bool OAISignatoryContact::is_phone_number_Valid() const{
    return m_phone_number_isValid;
}

QString OAISignatoryContact::getSignatoryCode() const {
    return m_signatory_code;
}
void OAISignatoryContact::setSignatoryCode(const QString &signatory_code) {
    m_signatory_code = signatory_code;
    m_signatory_code_isSet = true;
}

bool OAISignatoryContact::is_signatory_code_Set() const{
    return m_signatory_code_isSet;
}

bool OAISignatoryContact::is_signatory_code_Valid() const{
    return m_signatory_code_isValid;
}

QString OAISignatoryContact::getSignatoryReference() const {
    return m_signatory_reference;
}
void OAISignatoryContact::setSignatoryReference(const QString &signatory_reference) {
    m_signatory_reference = signatory_reference;
    m_signatory_reference_isSet = true;
}

bool OAISignatoryContact::is_signatory_reference_Set() const{
    return m_signatory_reference_isSet;
}

bool OAISignatoryContact::is_signatory_reference_Valid() const{
    return m_signatory_reference_isValid;
}

QString OAISignatoryContact::getWebAddress() const {
    return m_web_address;
}
void OAISignatoryContact::setWebAddress(const QString &web_address) {
    m_web_address = web_address;
    m_web_address_isSet = true;
}

bool OAISignatoryContact::is_web_address_Set() const{
    return m_web_address_isSet;
}

bool OAISignatoryContact::is_web_address_Valid() const{
    return m_web_address_isValid;
}

bool OAISignatoryContact::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_address.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_full_phone_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_personal_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_phone_number.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_signatory_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_signatory_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_web_address_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISignatoryContact::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
