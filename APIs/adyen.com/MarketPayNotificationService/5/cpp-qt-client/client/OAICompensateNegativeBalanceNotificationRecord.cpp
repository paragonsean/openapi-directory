/**
 * Classic Platforms - Notifications
 * This API is used for the classic integration. If you are just starting your implementation, refer to our [new integration guide](https://docs.adyen.com/marketplaces-and-platforms) instead.  The Notification API sends notifications to the endpoints specified in a given subscription.  Subscriptions are managed through the Notification Configuration API. The API specifications listed here detail the format of each notification.  For more information, refer to our [documentation](https://docs.adyen.com/marketplaces-and-platforms/classic/notifications).
 *
 * The version of the OpenAPI document: 5
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICompensateNegativeBalanceNotificationRecord.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICompensateNegativeBalanceNotificationRecord::OAICompensateNegativeBalanceNotificationRecord(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICompensateNegativeBalanceNotificationRecord::OAICompensateNegativeBalanceNotificationRecord() {
    this->initializeModel();
}

OAICompensateNegativeBalanceNotificationRecord::~OAICompensateNegativeBalanceNotificationRecord() {}

void OAICompensateNegativeBalanceNotificationRecord::initializeModel() {

    m_account_code_isSet = false;
    m_account_code_isValid = false;

    m_amount_isSet = false;
    m_amount_isValid = false;

    m_transfer_date_isSet = false;
    m_transfer_date_isValid = false;
}

void OAICompensateNegativeBalanceNotificationRecord::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICompensateNegativeBalanceNotificationRecord::fromJsonObject(QJsonObject json) {

    m_account_code_isValid = ::OpenAPI::fromJsonValue(m_account_code, json[QString("accountCode")]);
    m_account_code_isSet = !json[QString("accountCode")].isNull() && m_account_code_isValid;

    m_amount_isValid = ::OpenAPI::fromJsonValue(m_amount, json[QString("amount")]);
    m_amount_isSet = !json[QString("amount")].isNull() && m_amount_isValid;

    m_transfer_date_isValid = ::OpenAPI::fromJsonValue(m_transfer_date, json[QString("transferDate")]);
    m_transfer_date_isSet = !json[QString("transferDate")].isNull() && m_transfer_date_isValid;
}

QString OAICompensateNegativeBalanceNotificationRecord::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICompensateNegativeBalanceNotificationRecord::asJsonObject() const {
    QJsonObject obj;
    if (m_account_code_isSet) {
        obj.insert(QString("accountCode"), ::OpenAPI::toJsonValue(m_account_code));
    }
    if (m_amount.isSet()) {
        obj.insert(QString("amount"), ::OpenAPI::toJsonValue(m_amount));
    }
    if (m_transfer_date_isSet) {
        obj.insert(QString("transferDate"), ::OpenAPI::toJsonValue(m_transfer_date));
    }
    return obj;
}

QString OAICompensateNegativeBalanceNotificationRecord::getAccountCode() const {
    return m_account_code;
}
void OAICompensateNegativeBalanceNotificationRecord::setAccountCode(const QString &account_code) {
    m_account_code = account_code;
    m_account_code_isSet = true;
}

bool OAICompensateNegativeBalanceNotificationRecord::is_account_code_Set() const{
    return m_account_code_isSet;
}

bool OAICompensateNegativeBalanceNotificationRecord::is_account_code_Valid() const{
    return m_account_code_isValid;
}

OAIAmount OAICompensateNegativeBalanceNotificationRecord::getAmount() const {
    return m_amount;
}
void OAICompensateNegativeBalanceNotificationRecord::setAmount(const OAIAmount &amount) {
    m_amount = amount;
    m_amount_isSet = true;
}

bool OAICompensateNegativeBalanceNotificationRecord::is_amount_Set() const{
    return m_amount_isSet;
}

bool OAICompensateNegativeBalanceNotificationRecord::is_amount_Valid() const{
    return m_amount_isValid;
}

QDateTime OAICompensateNegativeBalanceNotificationRecord::getTransferDate() const {
    return m_transfer_date;
}
void OAICompensateNegativeBalanceNotificationRecord::setTransferDate(const QDateTime &transfer_date) {
    m_transfer_date = transfer_date;
    m_transfer_date_isSet = true;
}

bool OAICompensateNegativeBalanceNotificationRecord::is_transfer_date_Set() const{
    return m_transfer_date_isSet;
}

bool OAICompensateNegativeBalanceNotificationRecord::is_transfer_date_Valid() const{
    return m_transfer_date_isValid;
}

bool OAICompensateNegativeBalanceNotificationRecord::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_amount.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_transfer_date_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICompensateNegativeBalanceNotificationRecord::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
