/**
 * Classic Platforms - Notifications
 * This API is used for the classic integration. If you are just starting your implementation, refer to our [new integration guide](https://docs.adyen.com/marketplaces-and-platforms) instead.  The Notification API sends notifications to the endpoints specified in a given subscription.  Subscriptions are managed through the Notification Configuration API. The API specifications listed here detail the format of each notification.  For more information, refer to our [documentation](https://docs.adyen.com/marketplaces-and-platforms/classic/notifications).
 *
 * The version of the OpenAPI document: 5
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAccountFundsBelowThresholdNotificationContent.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAccountFundsBelowThresholdNotificationContent::OAIAccountFundsBelowThresholdNotificationContent(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAccountFundsBelowThresholdNotificationContent::OAIAccountFundsBelowThresholdNotificationContent() {
    this->initializeModel();
}

OAIAccountFundsBelowThresholdNotificationContent::~OAIAccountFundsBelowThresholdNotificationContent() {}

void OAIAccountFundsBelowThresholdNotificationContent::initializeModel() {

    m_account_code_isSet = false;
    m_account_code_isValid = false;

    m_balance_date_isSet = false;
    m_balance_date_isValid = false;

    m_current_funds_isSet = false;
    m_current_funds_isValid = false;

    m_fund_threshold_isSet = false;
    m_fund_threshold_isValid = false;

    m_merchant_account_code_isSet = false;
    m_merchant_account_code_isValid = false;
}

void OAIAccountFundsBelowThresholdNotificationContent::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAccountFundsBelowThresholdNotificationContent::fromJsonObject(QJsonObject json) {

    m_account_code_isValid = ::OpenAPI::fromJsonValue(m_account_code, json[QString("accountCode")]);
    m_account_code_isSet = !json[QString("accountCode")].isNull() && m_account_code_isValid;

    m_balance_date_isValid = ::OpenAPI::fromJsonValue(m_balance_date, json[QString("balanceDate")]);
    m_balance_date_isSet = !json[QString("balanceDate")].isNull() && m_balance_date_isValid;

    m_current_funds_isValid = ::OpenAPI::fromJsonValue(m_current_funds, json[QString("currentFunds")]);
    m_current_funds_isSet = !json[QString("currentFunds")].isNull() && m_current_funds_isValid;

    m_fund_threshold_isValid = ::OpenAPI::fromJsonValue(m_fund_threshold, json[QString("fundThreshold")]);
    m_fund_threshold_isSet = !json[QString("fundThreshold")].isNull() && m_fund_threshold_isValid;

    m_merchant_account_code_isValid = ::OpenAPI::fromJsonValue(m_merchant_account_code, json[QString("merchantAccountCode")]);
    m_merchant_account_code_isSet = !json[QString("merchantAccountCode")].isNull() && m_merchant_account_code_isValid;
}

QString OAIAccountFundsBelowThresholdNotificationContent::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAccountFundsBelowThresholdNotificationContent::asJsonObject() const {
    QJsonObject obj;
    if (m_account_code_isSet) {
        obj.insert(QString("accountCode"), ::OpenAPI::toJsonValue(m_account_code));
    }
    if (m_balance_date.isSet()) {
        obj.insert(QString("balanceDate"), ::OpenAPI::toJsonValue(m_balance_date));
    }
    if (m_current_funds.isSet()) {
        obj.insert(QString("currentFunds"), ::OpenAPI::toJsonValue(m_current_funds));
    }
    if (m_fund_threshold.isSet()) {
        obj.insert(QString("fundThreshold"), ::OpenAPI::toJsonValue(m_fund_threshold));
    }
    if (m_merchant_account_code_isSet) {
        obj.insert(QString("merchantAccountCode"), ::OpenAPI::toJsonValue(m_merchant_account_code));
    }
    return obj;
}

QString OAIAccountFundsBelowThresholdNotificationContent::getAccountCode() const {
    return m_account_code;
}
void OAIAccountFundsBelowThresholdNotificationContent::setAccountCode(const QString &account_code) {
    m_account_code = account_code;
    m_account_code_isSet = true;
}

bool OAIAccountFundsBelowThresholdNotificationContent::is_account_code_Set() const{
    return m_account_code_isSet;
}

bool OAIAccountFundsBelowThresholdNotificationContent::is_account_code_Valid() const{
    return m_account_code_isValid;
}

OAILocalDate OAIAccountFundsBelowThresholdNotificationContent::getBalanceDate() const {
    return m_balance_date;
}
void OAIAccountFundsBelowThresholdNotificationContent::setBalanceDate(const OAILocalDate &balance_date) {
    m_balance_date = balance_date;
    m_balance_date_isSet = true;
}

bool OAIAccountFundsBelowThresholdNotificationContent::is_balance_date_Set() const{
    return m_balance_date_isSet;
}

bool OAIAccountFundsBelowThresholdNotificationContent::is_balance_date_Valid() const{
    return m_balance_date_isValid;
}

OAIAmount OAIAccountFundsBelowThresholdNotificationContent::getCurrentFunds() const {
    return m_current_funds;
}
void OAIAccountFundsBelowThresholdNotificationContent::setCurrentFunds(const OAIAmount &current_funds) {
    m_current_funds = current_funds;
    m_current_funds_isSet = true;
}

bool OAIAccountFundsBelowThresholdNotificationContent::is_current_funds_Set() const{
    return m_current_funds_isSet;
}

bool OAIAccountFundsBelowThresholdNotificationContent::is_current_funds_Valid() const{
    return m_current_funds_isValid;
}

OAIAmount OAIAccountFundsBelowThresholdNotificationContent::getFundThreshold() const {
    return m_fund_threshold;
}
void OAIAccountFundsBelowThresholdNotificationContent::setFundThreshold(const OAIAmount &fund_threshold) {
    m_fund_threshold = fund_threshold;
    m_fund_threshold_isSet = true;
}

bool OAIAccountFundsBelowThresholdNotificationContent::is_fund_threshold_Set() const{
    return m_fund_threshold_isSet;
}

bool OAIAccountFundsBelowThresholdNotificationContent::is_fund_threshold_Valid() const{
    return m_fund_threshold_isValid;
}

QString OAIAccountFundsBelowThresholdNotificationContent::getMerchantAccountCode() const {
    return m_merchant_account_code;
}
void OAIAccountFundsBelowThresholdNotificationContent::setMerchantAccountCode(const QString &merchant_account_code) {
    m_merchant_account_code = merchant_account_code;
    m_merchant_account_code_isSet = true;
}

bool OAIAccountFundsBelowThresholdNotificationContent::is_merchant_account_code_Set() const{
    return m_merchant_account_code_isSet;
}

bool OAIAccountFundsBelowThresholdNotificationContent::is_merchant_account_code_Valid() const{
    return m_merchant_account_code_isValid;
}

bool OAIAccountFundsBelowThresholdNotificationContent::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_balance_date.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_funds.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_fund_threshold.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_merchant_account_code_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAccountFundsBelowThresholdNotificationContent::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_fund_threshold_isValid && m_merchant_account_code_isValid && true;
}

} // namespace OpenAPI
