/**
 * Classic Platforms - Notifications
 * This API is used for the classic integration. If you are just starting your implementation, refer to our [new integration guide](https://docs.adyen.com/marketplaces-and-platforms) instead.  The Notification API sends notifications to the endpoints specified in a given subscription.  Subscriptions are managed through the Notification Configuration API. The API specifications listed here detail the format of each notification.  For more information, refer to our [documentation](https://docs.adyen.com/marketplaces-and-platforms/classic/notifications).
 *
 * The version of the OpenAPI document: 5
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRefundResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRefundResult::OAIRefundResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRefundResult::OAIRefundResult() {
    this->initializeModel();
}

OAIRefundResult::~OAIRefundResult() {}

void OAIRefundResult::initializeModel() {

    m_original_transaction_isSet = false;
    m_original_transaction_isValid = false;

    m_psp_reference_isSet = false;
    m_psp_reference_isValid = false;

    m_response_isSet = false;
    m_response_isValid = false;
}

void OAIRefundResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRefundResult::fromJsonObject(QJsonObject json) {

    m_original_transaction_isValid = ::OpenAPI::fromJsonValue(m_original_transaction, json[QString("originalTransaction")]);
    m_original_transaction_isSet = !json[QString("originalTransaction")].isNull() && m_original_transaction_isValid;

    m_psp_reference_isValid = ::OpenAPI::fromJsonValue(m_psp_reference, json[QString("pspReference")]);
    m_psp_reference_isSet = !json[QString("pspReference")].isNull() && m_psp_reference_isValid;

    m_response_isValid = ::OpenAPI::fromJsonValue(m_response, json[QString("response")]);
    m_response_isSet = !json[QString("response")].isNull() && m_response_isValid;
}

QString OAIRefundResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRefundResult::asJsonObject() const {
    QJsonObject obj;
    if (m_original_transaction.isSet()) {
        obj.insert(QString("originalTransaction"), ::OpenAPI::toJsonValue(m_original_transaction));
    }
    if (m_psp_reference_isSet) {
        obj.insert(QString("pspReference"), ::OpenAPI::toJsonValue(m_psp_reference));
    }
    if (m_response_isSet) {
        obj.insert(QString("response"), ::OpenAPI::toJsonValue(m_response));
    }
    return obj;
}

OAITransaction OAIRefundResult::getOriginalTransaction() const {
    return m_original_transaction;
}
void OAIRefundResult::setOriginalTransaction(const OAITransaction &original_transaction) {
    m_original_transaction = original_transaction;
    m_original_transaction_isSet = true;
}

bool OAIRefundResult::is_original_transaction_Set() const{
    return m_original_transaction_isSet;
}

bool OAIRefundResult::is_original_transaction_Valid() const{
    return m_original_transaction_isValid;
}

QString OAIRefundResult::getPspReference() const {
    return m_psp_reference;
}
void OAIRefundResult::setPspReference(const QString &psp_reference) {
    m_psp_reference = psp_reference;
    m_psp_reference_isSet = true;
}

bool OAIRefundResult::is_psp_reference_Set() const{
    return m_psp_reference_isSet;
}

bool OAIRefundResult::is_psp_reference_Valid() const{
    return m_psp_reference_isValid;
}

QString OAIRefundResult::getResponse() const {
    return m_response;
}
void OAIRefundResult::setResponse(const QString &response) {
    m_response = response;
    m_response_isSet = true;
}

bool OAIRefundResult::is_response_Set() const{
    return m_response_isSet;
}

bool OAIRefundResult::is_response_Valid() const{
    return m_response_isValid;
}

bool OAIRefundResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_original_transaction.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_psp_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_response_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRefundResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
