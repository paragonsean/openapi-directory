/**
 * Classic Platforms - Notifications
 * This API is used for the classic integration. If you are just starting your implementation, refer to our [new integration guide](https://docs.adyen.com/marketplaces-and-platforms) instead.  The Notification API sends notifications to the endpoints specified in a given subscription.  Subscriptions are managed through the Notification Configuration API. The API specifications listed here detail the format of each notification.  For more information, refer to our [documentation](https://docs.adyen.com/marketplaces-and-platforms/classic/notifications).
 *
 * The version of the OpenAPI document: 5
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRefundFundsTransferNotificationContent.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRefundFundsTransferNotificationContent::OAIRefundFundsTransferNotificationContent(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRefundFundsTransferNotificationContent::OAIRefundFundsTransferNotificationContent() {
    this->initializeModel();
}

OAIRefundFundsTransferNotificationContent::~OAIRefundFundsTransferNotificationContent() {}

void OAIRefundFundsTransferNotificationContent::initializeModel() {

    m_amount_isSet = false;
    m_amount_isValid = false;

    m_invalid_fields_isSet = false;
    m_invalid_fields_isValid = false;

    m_merchant_reference_isSet = false;
    m_merchant_reference_isValid = false;

    m_original_reference_isSet = false;
    m_original_reference_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIRefundFundsTransferNotificationContent::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRefundFundsTransferNotificationContent::fromJsonObject(QJsonObject json) {

    m_amount_isValid = ::OpenAPI::fromJsonValue(m_amount, json[QString("amount")]);
    m_amount_isSet = !json[QString("amount")].isNull() && m_amount_isValid;

    m_invalid_fields_isValid = ::OpenAPI::fromJsonValue(m_invalid_fields, json[QString("invalidFields")]);
    m_invalid_fields_isSet = !json[QString("invalidFields")].isNull() && m_invalid_fields_isValid;

    m_merchant_reference_isValid = ::OpenAPI::fromJsonValue(m_merchant_reference, json[QString("merchantReference")]);
    m_merchant_reference_isSet = !json[QString("merchantReference")].isNull() && m_merchant_reference_isValid;

    m_original_reference_isValid = ::OpenAPI::fromJsonValue(m_original_reference, json[QString("originalReference")]);
    m_original_reference_isSet = !json[QString("originalReference")].isNull() && m_original_reference_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAIRefundFundsTransferNotificationContent::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRefundFundsTransferNotificationContent::asJsonObject() const {
    QJsonObject obj;
    if (m_amount.isSet()) {
        obj.insert(QString("amount"), ::OpenAPI::toJsonValue(m_amount));
    }
    if (m_invalid_fields.size() > 0) {
        obj.insert(QString("invalidFields"), ::OpenAPI::toJsonValue(m_invalid_fields));
    }
    if (m_merchant_reference_isSet) {
        obj.insert(QString("merchantReference"), ::OpenAPI::toJsonValue(m_merchant_reference));
    }
    if (m_original_reference_isSet) {
        obj.insert(QString("originalReference"), ::OpenAPI::toJsonValue(m_original_reference));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

OAIAmount OAIRefundFundsTransferNotificationContent::getAmount() const {
    return m_amount;
}
void OAIRefundFundsTransferNotificationContent::setAmount(const OAIAmount &amount) {
    m_amount = amount;
    m_amount_isSet = true;
}

bool OAIRefundFundsTransferNotificationContent::is_amount_Set() const{
    return m_amount_isSet;
}

bool OAIRefundFundsTransferNotificationContent::is_amount_Valid() const{
    return m_amount_isValid;
}

QList<OAIErrorFieldType> OAIRefundFundsTransferNotificationContent::getInvalidFields() const {
    return m_invalid_fields;
}
void OAIRefundFundsTransferNotificationContent::setInvalidFields(const QList<OAIErrorFieldType> &invalid_fields) {
    m_invalid_fields = invalid_fields;
    m_invalid_fields_isSet = true;
}

bool OAIRefundFundsTransferNotificationContent::is_invalid_fields_Set() const{
    return m_invalid_fields_isSet;
}

bool OAIRefundFundsTransferNotificationContent::is_invalid_fields_Valid() const{
    return m_invalid_fields_isValid;
}

QString OAIRefundFundsTransferNotificationContent::getMerchantReference() const {
    return m_merchant_reference;
}
void OAIRefundFundsTransferNotificationContent::setMerchantReference(const QString &merchant_reference) {
    m_merchant_reference = merchant_reference;
    m_merchant_reference_isSet = true;
}

bool OAIRefundFundsTransferNotificationContent::is_merchant_reference_Set() const{
    return m_merchant_reference_isSet;
}

bool OAIRefundFundsTransferNotificationContent::is_merchant_reference_Valid() const{
    return m_merchant_reference_isValid;
}

QString OAIRefundFundsTransferNotificationContent::getOriginalReference() const {
    return m_original_reference;
}
void OAIRefundFundsTransferNotificationContent::setOriginalReference(const QString &original_reference) {
    m_original_reference = original_reference;
    m_original_reference_isSet = true;
}

bool OAIRefundFundsTransferNotificationContent::is_original_reference_Set() const{
    return m_original_reference_isSet;
}

bool OAIRefundFundsTransferNotificationContent::is_original_reference_Valid() const{
    return m_original_reference_isValid;
}

OAIOperationStatus OAIRefundFundsTransferNotificationContent::getStatus() const {
    return m_status;
}
void OAIRefundFundsTransferNotificationContent::setStatus(const OAIOperationStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIRefundFundsTransferNotificationContent::is_status_Set() const{
    return m_status_isSet;
}

bool OAIRefundFundsTransferNotificationContent::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIRefundFundsTransferNotificationContent::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_amount.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_invalid_fields.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_merchant_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_original_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRefundFundsTransferNotificationContent::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_amount_isValid && m_original_reference_isValid && true;
}

} // namespace OpenAPI
