/**
 * Classic Platforms - Notifications
 * This API is used for the classic integration. If you are just starting your implementation, refer to our [new integration guide](https://docs.adyen.com/marketplaces-and-platforms) instead.  The Notification API sends notifications to the endpoints specified in a given subscription.  Subscriptions are managed through the Notification Configuration API. The API specifications listed here detail the format of each notification.  For more information, refer to our [documentation](https://docs.adyen.com/marketplaces-and-platforms/classic/notifications).
 *
 * The version of the OpenAPI document: 5
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAccountHoldersApi_H
#define OAI_OAIAccountHoldersApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAccountHolderCreateNotification.h"
#include "OAIAccountHolderStatusChangeNotification.h"
#include "OAIAccountHolderStoreStatusChangeNotification.h"
#include "OAIAccountHolderUpcomingDeadlineNotification.h"
#include "OAIAccountHolderUpdateNotification.h"
#include "OAIAccountHolderVerificationNotification.h"
#include "OAINotificationResponse.h"

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIAccountHoldersApi : public QObject {
    Q_OBJECT

public:
    OAIAccountHoldersApi(const int timeOut = 0);
    ~OAIAccountHoldersApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_account_holder_create_notification OAIAccountHolderCreateNotification [optional]
    */
    virtual void postACCOUNTHOLDERCREATED(const ::OpenAPI::OptionalParam<OAIAccountHolderCreateNotification> &oai_account_holder_create_notification = ::OpenAPI::OptionalParam<OAIAccountHolderCreateNotification>());

    /**
    * @param[in]  oai_account_holder_status_change_notification OAIAccountHolderStatusChangeNotification [optional]
    */
    virtual void postACCOUNTHOLDERSTATUSCHANGE(const ::OpenAPI::OptionalParam<OAIAccountHolderStatusChangeNotification> &oai_account_holder_status_change_notification = ::OpenAPI::OptionalParam<OAIAccountHolderStatusChangeNotification>());

    /**
    * @param[in]  oai_account_holder_store_status_change_notification OAIAccountHolderStoreStatusChangeNotification [optional]
    */
    virtual void postACCOUNTHOLDERSTORESTATUSCHANGE(const ::OpenAPI::OptionalParam<OAIAccountHolderStoreStatusChangeNotification> &oai_account_holder_store_status_change_notification = ::OpenAPI::OptionalParam<OAIAccountHolderStoreStatusChangeNotification>());

    /**
    * @param[in]  oai_account_holder_upcoming_deadline_notification OAIAccountHolderUpcomingDeadlineNotification [optional]
    */
    virtual void postACCOUNTHOLDERUPCOMINGDEADLINE(const ::OpenAPI::OptionalParam<OAIAccountHolderUpcomingDeadlineNotification> &oai_account_holder_upcoming_deadline_notification = ::OpenAPI::OptionalParam<OAIAccountHolderUpcomingDeadlineNotification>());

    /**
    * @param[in]  oai_account_holder_update_notification OAIAccountHolderUpdateNotification [optional]
    */
    virtual void postACCOUNTHOLDERUPDATED(const ::OpenAPI::OptionalParam<OAIAccountHolderUpdateNotification> &oai_account_holder_update_notification = ::OpenAPI::OptionalParam<OAIAccountHolderUpdateNotification>());

    /**
    * @param[in]  oai_account_holder_verification_notification OAIAccountHolderVerificationNotification [optional]
    */
    virtual void postACCOUNTHOLDERVERIFICATION(const ::OpenAPI::OptionalParam<OAIAccountHolderVerificationNotification> &oai_account_holder_verification_notification = ::OpenAPI::OptionalParam<OAIAccountHolderVerificationNotification>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void postACCOUNTHOLDERCREATEDCallback(OAIHttpRequestWorker *worker);
    void postACCOUNTHOLDERSTATUSCHANGECallback(OAIHttpRequestWorker *worker);
    void postACCOUNTHOLDERSTORESTATUSCHANGECallback(OAIHttpRequestWorker *worker);
    void postACCOUNTHOLDERUPCOMINGDEADLINECallback(OAIHttpRequestWorker *worker);
    void postACCOUNTHOLDERUPDATEDCallback(OAIHttpRequestWorker *worker);
    void postACCOUNTHOLDERVERIFICATIONCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void postACCOUNTHOLDERCREATEDSignal(OAINotificationResponse summary);
    void postACCOUNTHOLDERSTATUSCHANGESignal(OAINotificationResponse summary);
    void postACCOUNTHOLDERSTORESTATUSCHANGESignal(OAINotificationResponse summary);
    void postACCOUNTHOLDERUPCOMINGDEADLINESignal(OAINotificationResponse summary);
    void postACCOUNTHOLDERUPDATEDSignal(OAINotificationResponse summary);
    void postACCOUNTHOLDERVERIFICATIONSignal(OAINotificationResponse summary);


    void postACCOUNTHOLDERCREATEDSignalFull(OAIHttpRequestWorker *worker, OAINotificationResponse summary);
    void postACCOUNTHOLDERSTATUSCHANGESignalFull(OAIHttpRequestWorker *worker, OAINotificationResponse summary);
    void postACCOUNTHOLDERSTORESTATUSCHANGESignalFull(OAIHttpRequestWorker *worker, OAINotificationResponse summary);
    void postACCOUNTHOLDERUPCOMINGDEADLINESignalFull(OAIHttpRequestWorker *worker, OAINotificationResponse summary);
    void postACCOUNTHOLDERUPDATEDSignalFull(OAIHttpRequestWorker *worker, OAINotificationResponse summary);
    void postACCOUNTHOLDERVERIFICATIONSignalFull(OAIHttpRequestWorker *worker, OAINotificationResponse summary);

    Q_DECL_DEPRECATED_X("Use postACCOUNTHOLDERCREATEDSignalError() instead")
    void postACCOUNTHOLDERCREATEDSignalE(OAINotificationResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postACCOUNTHOLDERCREATEDSignalError(OAINotificationResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postACCOUNTHOLDERSTATUSCHANGESignalError() instead")
    void postACCOUNTHOLDERSTATUSCHANGESignalE(OAINotificationResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postACCOUNTHOLDERSTATUSCHANGESignalError(OAINotificationResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postACCOUNTHOLDERSTORESTATUSCHANGESignalError() instead")
    void postACCOUNTHOLDERSTORESTATUSCHANGESignalE(OAINotificationResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postACCOUNTHOLDERSTORESTATUSCHANGESignalError(OAINotificationResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postACCOUNTHOLDERUPCOMINGDEADLINESignalError() instead")
    void postACCOUNTHOLDERUPCOMINGDEADLINESignalE(OAINotificationResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postACCOUNTHOLDERUPCOMINGDEADLINESignalError(OAINotificationResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postACCOUNTHOLDERUPDATEDSignalError() instead")
    void postACCOUNTHOLDERUPDATEDSignalE(OAINotificationResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postACCOUNTHOLDERUPDATEDSignalError(OAINotificationResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postACCOUNTHOLDERVERIFICATIONSignalError() instead")
    void postACCOUNTHOLDERVERIFICATIONSignalE(OAINotificationResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postACCOUNTHOLDERVERIFICATIONSignalError(OAINotificationResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use postACCOUNTHOLDERCREATEDSignalErrorFull() instead")
    void postACCOUNTHOLDERCREATEDSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postACCOUNTHOLDERCREATEDSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postACCOUNTHOLDERSTATUSCHANGESignalErrorFull() instead")
    void postACCOUNTHOLDERSTATUSCHANGESignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postACCOUNTHOLDERSTATUSCHANGESignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postACCOUNTHOLDERSTORESTATUSCHANGESignalErrorFull() instead")
    void postACCOUNTHOLDERSTORESTATUSCHANGESignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postACCOUNTHOLDERSTORESTATUSCHANGESignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postACCOUNTHOLDERUPCOMINGDEADLINESignalErrorFull() instead")
    void postACCOUNTHOLDERUPCOMINGDEADLINESignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postACCOUNTHOLDERUPCOMINGDEADLINESignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postACCOUNTHOLDERUPDATEDSignalErrorFull() instead")
    void postACCOUNTHOLDERUPDATEDSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postACCOUNTHOLDERUPDATEDSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postACCOUNTHOLDERVERIFICATIONSignalErrorFull() instead")
    void postACCOUNTHOLDERVERIFICATIONSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postACCOUNTHOLDERVERIFICATIONSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
