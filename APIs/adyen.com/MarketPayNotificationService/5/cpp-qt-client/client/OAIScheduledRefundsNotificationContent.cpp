/**
 * Classic Platforms - Notifications
 * This API is used for the classic integration. If you are just starting your implementation, refer to our [new integration guide](https://docs.adyen.com/marketplaces-and-platforms) instead.  The Notification API sends notifications to the endpoints specified in a given subscription.  Subscriptions are managed through the Notification Configuration API. The API specifications listed here detail the format of each notification.  For more information, refer to our [documentation](https://docs.adyen.com/marketplaces-and-platforms/classic/notifications).
 *
 * The version of the OpenAPI document: 5
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIScheduledRefundsNotificationContent.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIScheduledRefundsNotificationContent::OAIScheduledRefundsNotificationContent(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIScheduledRefundsNotificationContent::OAIScheduledRefundsNotificationContent() {
    this->initializeModel();
}

OAIScheduledRefundsNotificationContent::~OAIScheduledRefundsNotificationContent() {}

void OAIScheduledRefundsNotificationContent::initializeModel() {

    m_account_code_isSet = false;
    m_account_code_isValid = false;

    m_account_holder_code_isSet = false;
    m_account_holder_code_isValid = false;

    m_invalid_fields_isSet = false;
    m_invalid_fields_isValid = false;

    m_last_payout_isSet = false;
    m_last_payout_isValid = false;

    m_refund_results_isSet = false;
    m_refund_results_isValid = false;
}

void OAIScheduledRefundsNotificationContent::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIScheduledRefundsNotificationContent::fromJsonObject(QJsonObject json) {

    m_account_code_isValid = ::OpenAPI::fromJsonValue(m_account_code, json[QString("accountCode")]);
    m_account_code_isSet = !json[QString("accountCode")].isNull() && m_account_code_isValid;

    m_account_holder_code_isValid = ::OpenAPI::fromJsonValue(m_account_holder_code, json[QString("accountHolderCode")]);
    m_account_holder_code_isSet = !json[QString("accountHolderCode")].isNull() && m_account_holder_code_isValid;

    m_invalid_fields_isValid = ::OpenAPI::fromJsonValue(m_invalid_fields, json[QString("invalidFields")]);
    m_invalid_fields_isSet = !json[QString("invalidFields")].isNull() && m_invalid_fields_isValid;

    m_last_payout_isValid = ::OpenAPI::fromJsonValue(m_last_payout, json[QString("lastPayout")]);
    m_last_payout_isSet = !json[QString("lastPayout")].isNull() && m_last_payout_isValid;

    m_refund_results_isValid = ::OpenAPI::fromJsonValue(m_refund_results, json[QString("refundResults")]);
    m_refund_results_isSet = !json[QString("refundResults")].isNull() && m_refund_results_isValid;
}

QString OAIScheduledRefundsNotificationContent::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIScheduledRefundsNotificationContent::asJsonObject() const {
    QJsonObject obj;
    if (m_account_code_isSet) {
        obj.insert(QString("accountCode"), ::OpenAPI::toJsonValue(m_account_code));
    }
    if (m_account_holder_code_isSet) {
        obj.insert(QString("accountHolderCode"), ::OpenAPI::toJsonValue(m_account_holder_code));
    }
    if (m_invalid_fields.size() > 0) {
        obj.insert(QString("invalidFields"), ::OpenAPI::toJsonValue(m_invalid_fields));
    }
    if (m_last_payout.isSet()) {
        obj.insert(QString("lastPayout"), ::OpenAPI::toJsonValue(m_last_payout));
    }
    if (m_refund_results.size() > 0) {
        obj.insert(QString("refundResults"), ::OpenAPI::toJsonValue(m_refund_results));
    }
    return obj;
}

QString OAIScheduledRefundsNotificationContent::getAccountCode() const {
    return m_account_code;
}
void OAIScheduledRefundsNotificationContent::setAccountCode(const QString &account_code) {
    m_account_code = account_code;
    m_account_code_isSet = true;
}

bool OAIScheduledRefundsNotificationContent::is_account_code_Set() const{
    return m_account_code_isSet;
}

bool OAIScheduledRefundsNotificationContent::is_account_code_Valid() const{
    return m_account_code_isValid;
}

QString OAIScheduledRefundsNotificationContent::getAccountHolderCode() const {
    return m_account_holder_code;
}
void OAIScheduledRefundsNotificationContent::setAccountHolderCode(const QString &account_holder_code) {
    m_account_holder_code = account_holder_code;
    m_account_holder_code_isSet = true;
}

bool OAIScheduledRefundsNotificationContent::is_account_holder_code_Set() const{
    return m_account_holder_code_isSet;
}

bool OAIScheduledRefundsNotificationContent::is_account_holder_code_Valid() const{
    return m_account_holder_code_isValid;
}

QList<OAIErrorFieldType> OAIScheduledRefundsNotificationContent::getInvalidFields() const {
    return m_invalid_fields;
}
void OAIScheduledRefundsNotificationContent::setInvalidFields(const QList<OAIErrorFieldType> &invalid_fields) {
    m_invalid_fields = invalid_fields;
    m_invalid_fields_isSet = true;
}

bool OAIScheduledRefundsNotificationContent::is_invalid_fields_Set() const{
    return m_invalid_fields_isSet;
}

bool OAIScheduledRefundsNotificationContent::is_invalid_fields_Valid() const{
    return m_invalid_fields_isValid;
}

OAITransaction OAIScheduledRefundsNotificationContent::getLastPayout() const {
    return m_last_payout;
}
void OAIScheduledRefundsNotificationContent::setLastPayout(const OAITransaction &last_payout) {
    m_last_payout = last_payout;
    m_last_payout_isSet = true;
}

bool OAIScheduledRefundsNotificationContent::is_last_payout_Set() const{
    return m_last_payout_isSet;
}

bool OAIScheduledRefundsNotificationContent::is_last_payout_Valid() const{
    return m_last_payout_isValid;
}

QList<OAIRefundResult> OAIScheduledRefundsNotificationContent::getRefundResults() const {
    return m_refund_results;
}
void OAIScheduledRefundsNotificationContent::setRefundResults(const QList<OAIRefundResult> &refund_results) {
    m_refund_results = refund_results;
    m_refund_results_isSet = true;
}

bool OAIScheduledRefundsNotificationContent::is_refund_results_Set() const{
    return m_refund_results_isSet;
}

bool OAIScheduledRefundsNotificationContent::is_refund_results_Valid() const{
    return m_refund_results_isValid;
}

bool OAIScheduledRefundsNotificationContent::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_account_holder_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_invalid_fields.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_payout.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_refund_results.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIScheduledRefundsNotificationContent::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
