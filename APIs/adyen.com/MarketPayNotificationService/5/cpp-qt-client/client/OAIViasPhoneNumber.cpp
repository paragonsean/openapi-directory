/**
 * Classic Platforms - Notifications
 * This API is used for the classic integration. If you are just starting your implementation, refer to our [new integration guide](https://docs.adyen.com/marketplaces-and-platforms) instead.  The Notification API sends notifications to the endpoints specified in a given subscription.  Subscriptions are managed through the Notification Configuration API. The API specifications listed here detail the format of each notification.  For more information, refer to our [documentation](https://docs.adyen.com/marketplaces-and-platforms/classic/notifications).
 *
 * The version of the OpenAPI document: 5
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIViasPhoneNumber.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIViasPhoneNumber::OAIViasPhoneNumber(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIViasPhoneNumber::OAIViasPhoneNumber() {
    this->initializeModel();
}

OAIViasPhoneNumber::~OAIViasPhoneNumber() {}

void OAIViasPhoneNumber::initializeModel() {

    m_phone_country_code_isSet = false;
    m_phone_country_code_isValid = false;

    m_phone_number_isSet = false;
    m_phone_number_isValid = false;

    m_phone_type_isSet = false;
    m_phone_type_isValid = false;
}

void OAIViasPhoneNumber::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIViasPhoneNumber::fromJsonObject(QJsonObject json) {

    m_phone_country_code_isValid = ::OpenAPI::fromJsonValue(m_phone_country_code, json[QString("phoneCountryCode")]);
    m_phone_country_code_isSet = !json[QString("phoneCountryCode")].isNull() && m_phone_country_code_isValid;

    m_phone_number_isValid = ::OpenAPI::fromJsonValue(m_phone_number, json[QString("phoneNumber")]);
    m_phone_number_isSet = !json[QString("phoneNumber")].isNull() && m_phone_number_isValid;

    m_phone_type_isValid = ::OpenAPI::fromJsonValue(m_phone_type, json[QString("phoneType")]);
    m_phone_type_isSet = !json[QString("phoneType")].isNull() && m_phone_type_isValid;
}

QString OAIViasPhoneNumber::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIViasPhoneNumber::asJsonObject() const {
    QJsonObject obj;
    if (m_phone_country_code_isSet) {
        obj.insert(QString("phoneCountryCode"), ::OpenAPI::toJsonValue(m_phone_country_code));
    }
    if (m_phone_number_isSet) {
        obj.insert(QString("phoneNumber"), ::OpenAPI::toJsonValue(m_phone_number));
    }
    if (m_phone_type_isSet) {
        obj.insert(QString("phoneType"), ::OpenAPI::toJsonValue(m_phone_type));
    }
    return obj;
}

QString OAIViasPhoneNumber::getPhoneCountryCode() const {
    return m_phone_country_code;
}
void OAIViasPhoneNumber::setPhoneCountryCode(const QString &phone_country_code) {
    m_phone_country_code = phone_country_code;
    m_phone_country_code_isSet = true;
}

bool OAIViasPhoneNumber::is_phone_country_code_Set() const{
    return m_phone_country_code_isSet;
}

bool OAIViasPhoneNumber::is_phone_country_code_Valid() const{
    return m_phone_country_code_isValid;
}

QString OAIViasPhoneNumber::getPhoneNumber() const {
    return m_phone_number;
}
void OAIViasPhoneNumber::setPhoneNumber(const QString &phone_number) {
    m_phone_number = phone_number;
    m_phone_number_isSet = true;
}

bool OAIViasPhoneNumber::is_phone_number_Set() const{
    return m_phone_number_isSet;
}

bool OAIViasPhoneNumber::is_phone_number_Valid() const{
    return m_phone_number_isValid;
}

QString OAIViasPhoneNumber::getPhoneType() const {
    return m_phone_type;
}
void OAIViasPhoneNumber::setPhoneType(const QString &phone_type) {
    m_phone_type = phone_type;
    m_phone_type_isSet = true;
}

bool OAIViasPhoneNumber::is_phone_type_Set() const{
    return m_phone_type_isSet;
}

bool OAIViasPhoneNumber::is_phone_type_Valid() const{
    return m_phone_type_isValid;
}

bool OAIViasPhoneNumber::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_phone_country_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phone_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phone_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIViasPhoneNumber::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
