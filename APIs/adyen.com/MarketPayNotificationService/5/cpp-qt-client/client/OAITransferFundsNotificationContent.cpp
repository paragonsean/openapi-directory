/**
 * Classic Platforms - Notifications
 * This API is used for the classic integration. If you are just starting your implementation, refer to our [new integration guide](https://docs.adyen.com/marketplaces-and-platforms) instead.  The Notification API sends notifications to the endpoints specified in a given subscription.  Subscriptions are managed through the Notification Configuration API. The API specifications listed here detail the format of each notification.  For more information, refer to our [documentation](https://docs.adyen.com/marketplaces-and-platforms/classic/notifications).
 *
 * The version of the OpenAPI document: 5
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITransferFundsNotificationContent.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITransferFundsNotificationContent::OAITransferFundsNotificationContent(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITransferFundsNotificationContent::OAITransferFundsNotificationContent() {
    this->initializeModel();
}

OAITransferFundsNotificationContent::~OAITransferFundsNotificationContent() {}

void OAITransferFundsNotificationContent::initializeModel() {

    m_amount_isSet = false;
    m_amount_isValid = false;

    m_destination_account_code_isSet = false;
    m_destination_account_code_isValid = false;

    m_invalid_fields_isSet = false;
    m_invalid_fields_isValid = false;

    m_merchant_reference_isSet = false;
    m_merchant_reference_isValid = false;

    m_source_account_code_isSet = false;
    m_source_account_code_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_transfer_code_isSet = false;
    m_transfer_code_isValid = false;
}

void OAITransferFundsNotificationContent::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITransferFundsNotificationContent::fromJsonObject(QJsonObject json) {

    m_amount_isValid = ::OpenAPI::fromJsonValue(m_amount, json[QString("amount")]);
    m_amount_isSet = !json[QString("amount")].isNull() && m_amount_isValid;

    m_destination_account_code_isValid = ::OpenAPI::fromJsonValue(m_destination_account_code, json[QString("destinationAccountCode")]);
    m_destination_account_code_isSet = !json[QString("destinationAccountCode")].isNull() && m_destination_account_code_isValid;

    m_invalid_fields_isValid = ::OpenAPI::fromJsonValue(m_invalid_fields, json[QString("invalidFields")]);
    m_invalid_fields_isSet = !json[QString("invalidFields")].isNull() && m_invalid_fields_isValid;

    m_merchant_reference_isValid = ::OpenAPI::fromJsonValue(m_merchant_reference, json[QString("merchantReference")]);
    m_merchant_reference_isSet = !json[QString("merchantReference")].isNull() && m_merchant_reference_isValid;

    m_source_account_code_isValid = ::OpenAPI::fromJsonValue(m_source_account_code, json[QString("sourceAccountCode")]);
    m_source_account_code_isSet = !json[QString("sourceAccountCode")].isNull() && m_source_account_code_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_transfer_code_isValid = ::OpenAPI::fromJsonValue(m_transfer_code, json[QString("transferCode")]);
    m_transfer_code_isSet = !json[QString("transferCode")].isNull() && m_transfer_code_isValid;
}

QString OAITransferFundsNotificationContent::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITransferFundsNotificationContent::asJsonObject() const {
    QJsonObject obj;
    if (m_amount.isSet()) {
        obj.insert(QString("amount"), ::OpenAPI::toJsonValue(m_amount));
    }
    if (m_destination_account_code_isSet) {
        obj.insert(QString("destinationAccountCode"), ::OpenAPI::toJsonValue(m_destination_account_code));
    }
    if (m_invalid_fields.size() > 0) {
        obj.insert(QString("invalidFields"), ::OpenAPI::toJsonValue(m_invalid_fields));
    }
    if (m_merchant_reference_isSet) {
        obj.insert(QString("merchantReference"), ::OpenAPI::toJsonValue(m_merchant_reference));
    }
    if (m_source_account_code_isSet) {
        obj.insert(QString("sourceAccountCode"), ::OpenAPI::toJsonValue(m_source_account_code));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_transfer_code_isSet) {
        obj.insert(QString("transferCode"), ::OpenAPI::toJsonValue(m_transfer_code));
    }
    return obj;
}

OAIAmount OAITransferFundsNotificationContent::getAmount() const {
    return m_amount;
}
void OAITransferFundsNotificationContent::setAmount(const OAIAmount &amount) {
    m_amount = amount;
    m_amount_isSet = true;
}

bool OAITransferFundsNotificationContent::is_amount_Set() const{
    return m_amount_isSet;
}

bool OAITransferFundsNotificationContent::is_amount_Valid() const{
    return m_amount_isValid;
}

QString OAITransferFundsNotificationContent::getDestinationAccountCode() const {
    return m_destination_account_code;
}
void OAITransferFundsNotificationContent::setDestinationAccountCode(const QString &destination_account_code) {
    m_destination_account_code = destination_account_code;
    m_destination_account_code_isSet = true;
}

bool OAITransferFundsNotificationContent::is_destination_account_code_Set() const{
    return m_destination_account_code_isSet;
}

bool OAITransferFundsNotificationContent::is_destination_account_code_Valid() const{
    return m_destination_account_code_isValid;
}

QList<OAIErrorFieldType> OAITransferFundsNotificationContent::getInvalidFields() const {
    return m_invalid_fields;
}
void OAITransferFundsNotificationContent::setInvalidFields(const QList<OAIErrorFieldType> &invalid_fields) {
    m_invalid_fields = invalid_fields;
    m_invalid_fields_isSet = true;
}

bool OAITransferFundsNotificationContent::is_invalid_fields_Set() const{
    return m_invalid_fields_isSet;
}

bool OAITransferFundsNotificationContent::is_invalid_fields_Valid() const{
    return m_invalid_fields_isValid;
}

QString OAITransferFundsNotificationContent::getMerchantReference() const {
    return m_merchant_reference;
}
void OAITransferFundsNotificationContent::setMerchantReference(const QString &merchant_reference) {
    m_merchant_reference = merchant_reference;
    m_merchant_reference_isSet = true;
}

bool OAITransferFundsNotificationContent::is_merchant_reference_Set() const{
    return m_merchant_reference_isSet;
}

bool OAITransferFundsNotificationContent::is_merchant_reference_Valid() const{
    return m_merchant_reference_isValid;
}

QString OAITransferFundsNotificationContent::getSourceAccountCode() const {
    return m_source_account_code;
}
void OAITransferFundsNotificationContent::setSourceAccountCode(const QString &source_account_code) {
    m_source_account_code = source_account_code;
    m_source_account_code_isSet = true;
}

bool OAITransferFundsNotificationContent::is_source_account_code_Set() const{
    return m_source_account_code_isSet;
}

bool OAITransferFundsNotificationContent::is_source_account_code_Valid() const{
    return m_source_account_code_isValid;
}

OAIOperationStatus OAITransferFundsNotificationContent::getStatus() const {
    return m_status;
}
void OAITransferFundsNotificationContent::setStatus(const OAIOperationStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAITransferFundsNotificationContent::is_status_Set() const{
    return m_status_isSet;
}

bool OAITransferFundsNotificationContent::is_status_Valid() const{
    return m_status_isValid;
}

QString OAITransferFundsNotificationContent::getTransferCode() const {
    return m_transfer_code;
}
void OAITransferFundsNotificationContent::setTransferCode(const QString &transfer_code) {
    m_transfer_code = transfer_code;
    m_transfer_code_isSet = true;
}

bool OAITransferFundsNotificationContent::is_transfer_code_Set() const{
    return m_transfer_code_isSet;
}

bool OAITransferFundsNotificationContent::is_transfer_code_Valid() const{
    return m_transfer_code_isValid;
}

bool OAITransferFundsNotificationContent::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_amount.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination_account_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_invalid_fields.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_merchant_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_account_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_transfer_code_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITransferFundsNotificationContent::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
