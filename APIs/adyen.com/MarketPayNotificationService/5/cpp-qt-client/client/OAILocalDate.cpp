/**
 * Classic Platforms - Notifications
 * This API is used for the classic integration. If you are just starting your implementation, refer to our [new integration guide](https://docs.adyen.com/marketplaces-and-platforms) instead.  The Notification API sends notifications to the endpoints specified in a given subscription.  Subscriptions are managed through the Notification Configuration API. The API specifications listed here detail the format of each notification.  For more information, refer to our [documentation](https://docs.adyen.com/marketplaces-and-platforms/classic/notifications).
 *
 * The version of the OpenAPI document: 5
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILocalDate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILocalDate::OAILocalDate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILocalDate::OAILocalDate() {
    this->initializeModel();
}

OAILocalDate::~OAILocalDate() {}

void OAILocalDate::initializeModel() {

    m_month_isSet = false;
    m_month_isValid = false;

    m_year_isSet = false;
    m_year_isValid = false;
}

void OAILocalDate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILocalDate::fromJsonObject(QJsonObject json) {

    m_month_isValid = ::OpenAPI::fromJsonValue(m_month, json[QString("month")]);
    m_month_isSet = !json[QString("month")].isNull() && m_month_isValid;

    m_year_isValid = ::OpenAPI::fromJsonValue(m_year, json[QString("year")]);
    m_year_isSet = !json[QString("year")].isNull() && m_year_isValid;
}

QString OAILocalDate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILocalDate::asJsonObject() const {
    QJsonObject obj;
    if (m_month_isSet) {
        obj.insert(QString("month"), ::OpenAPI::toJsonValue(m_month));
    }
    if (m_year_isSet) {
        obj.insert(QString("year"), ::OpenAPI::toJsonValue(m_year));
    }
    return obj;
}

qint32 OAILocalDate::getMonth() const {
    return m_month;
}
void OAILocalDate::setMonth(const qint32 &month) {
    m_month = month;
    m_month_isSet = true;
}

bool OAILocalDate::is_month_Set() const{
    return m_month_isSet;
}

bool OAILocalDate::is_month_Valid() const{
    return m_month_isValid;
}

qint32 OAILocalDate::getYear() const {
    return m_year;
}
void OAILocalDate::setYear(const qint32 &year) {
    m_year = year;
    m_year_isSet = true;
}

bool OAILocalDate::is_year_Set() const{
    return m_year_isSet;
}

bool OAILocalDate::is_year_Valid() const{
    return m_year_isValid;
}

bool OAILocalDate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_month_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_year_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILocalDate::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
