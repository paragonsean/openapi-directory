/*
 * Classic Platforms - Notifications
 * This API is used for the classic integration. If you are just starting your implementation, refer to our [new integration guide](https://docs.adyen.com/marketplaces-and-platforms) instead.  The Notification API sends notifications to the endpoints specified in a given subscription.  Subscriptions are managed through the Notification Configuration API. The API specifications listed here detail the format of each notification.  For more information, refer to our [documentation](https://docs.adyen.com/marketplaces-and-platforms/classic/notifications).
 *
 * The version of the OpenAPI document: 5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ErrorFieldType;
import org.openapitools.client.model.Message;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PaymentFailureNotificationContent
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:13:23.426814-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PaymentFailureNotificationContent {
  public static final String SERIALIZED_NAME_ERROR_FIELDS = "errorFields";
  @SerializedName(SERIALIZED_NAME_ERROR_FIELDS)
  private List<ErrorFieldType> errorFields = new ArrayList<>();

  public static final String SERIALIZED_NAME_ERROR_MESSAGE = "errorMessage";
  @SerializedName(SERIALIZED_NAME_ERROR_MESSAGE)
  private Message errorMessage;

  public static final String SERIALIZED_NAME_MODIFICATION_MERCHANT_REFERENCE = "modificationMerchantReference";
  @SerializedName(SERIALIZED_NAME_MODIFICATION_MERCHANT_REFERENCE)
  private String modificationMerchantReference;

  public static final String SERIALIZED_NAME_MODIFICATION_PSP_REFERENCE = "modificationPspReference";
  @SerializedName(SERIALIZED_NAME_MODIFICATION_PSP_REFERENCE)
  private String modificationPspReference;

  public static final String SERIALIZED_NAME_PAYMENT_MERCHANT_REFERENCE = "paymentMerchantReference";
  @SerializedName(SERIALIZED_NAME_PAYMENT_MERCHANT_REFERENCE)
  private String paymentMerchantReference;

  public static final String SERIALIZED_NAME_PAYMENT_PSP_REFERENCE = "paymentPspReference";
  @SerializedName(SERIALIZED_NAME_PAYMENT_PSP_REFERENCE)
  private String paymentPspReference;

  public PaymentFailureNotificationContent() {
  }

  public PaymentFailureNotificationContent errorFields(List<ErrorFieldType> errorFields) {
    this.errorFields = errorFields;
    return this;
  }

  public PaymentFailureNotificationContent addErrorFieldsItem(ErrorFieldType errorFieldsItem) {
    if (this.errorFields == null) {
      this.errorFields = new ArrayList<>();
    }
    this.errorFields.add(errorFieldsItem);
    return this;
  }

  /**
   * Missing or invalid fields that caused the payment error.
   * @return errorFields
   */
  @javax.annotation.Nullable
  public List<ErrorFieldType> getErrorFields() {
    return errorFields;
  }

  public void setErrorFields(List<ErrorFieldType> errorFields) {
    this.errorFields = errorFields;
  }


  public PaymentFailureNotificationContent errorMessage(Message errorMessage) {
    this.errorMessage = errorMessage;
    return this;
  }

  /**
   * The error message.
   * @return errorMessage
   */
  @javax.annotation.Nullable
  public Message getErrorMessage() {
    return errorMessage;
  }

  public void setErrorMessage(Message errorMessage) {
    this.errorMessage = errorMessage;
  }


  public PaymentFailureNotificationContent modificationMerchantReference(String modificationMerchantReference) {
    this.modificationMerchantReference = modificationMerchantReference;
    return this;
  }

  /**
   * The &#x60;reference&#x60; of the capture or refund.
   * @return modificationMerchantReference
   */
  @javax.annotation.Nullable
  public String getModificationMerchantReference() {
    return modificationMerchantReference;
  }

  public void setModificationMerchantReference(String modificationMerchantReference) {
    this.modificationMerchantReference = modificationMerchantReference;
  }


  public PaymentFailureNotificationContent modificationPspReference(String modificationPspReference) {
    this.modificationPspReference = modificationPspReference;
    return this;
  }

  /**
   * The &#x60;pspReference&#x60; of the capture or refund.
   * @return modificationPspReference
   */
  @javax.annotation.Nullable
  public String getModificationPspReference() {
    return modificationPspReference;
  }

  public void setModificationPspReference(String modificationPspReference) {
    this.modificationPspReference = modificationPspReference;
  }


  public PaymentFailureNotificationContent paymentMerchantReference(String paymentMerchantReference) {
    this.paymentMerchantReference = paymentMerchantReference;
    return this;
  }

  /**
   * The &#x60;reference&#x60; of the payment.
   * @return paymentMerchantReference
   */
  @javax.annotation.Nullable
  public String getPaymentMerchantReference() {
    return paymentMerchantReference;
  }

  public void setPaymentMerchantReference(String paymentMerchantReference) {
    this.paymentMerchantReference = paymentMerchantReference;
  }


  public PaymentFailureNotificationContent paymentPspReference(String paymentPspReference) {
    this.paymentPspReference = paymentPspReference;
    return this;
  }

  /**
   * The &#x60;pspReference&#x60; of the payment.
   * @return paymentPspReference
   */
  @javax.annotation.Nullable
  public String getPaymentPspReference() {
    return paymentPspReference;
  }

  public void setPaymentPspReference(String paymentPspReference) {
    this.paymentPspReference = paymentPspReference;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PaymentFailureNotificationContent paymentFailureNotificationContent = (PaymentFailureNotificationContent) o;
    return Objects.equals(this.errorFields, paymentFailureNotificationContent.errorFields) &&
        Objects.equals(this.errorMessage, paymentFailureNotificationContent.errorMessage) &&
        Objects.equals(this.modificationMerchantReference, paymentFailureNotificationContent.modificationMerchantReference) &&
        Objects.equals(this.modificationPspReference, paymentFailureNotificationContent.modificationPspReference) &&
        Objects.equals(this.paymentMerchantReference, paymentFailureNotificationContent.paymentMerchantReference) &&
        Objects.equals(this.paymentPspReference, paymentFailureNotificationContent.paymentPspReference);
  }

  @Override
  public int hashCode() {
    return Objects.hash(errorFields, errorMessage, modificationMerchantReference, modificationPspReference, paymentMerchantReference, paymentPspReference);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PaymentFailureNotificationContent {\n");
    sb.append("    errorFields: ").append(toIndentedString(errorFields)).append("\n");
    sb.append("    errorMessage: ").append(toIndentedString(errorMessage)).append("\n");
    sb.append("    modificationMerchantReference: ").append(toIndentedString(modificationMerchantReference)).append("\n");
    sb.append("    modificationPspReference: ").append(toIndentedString(modificationPspReference)).append("\n");
    sb.append("    paymentMerchantReference: ").append(toIndentedString(paymentMerchantReference)).append("\n");
    sb.append("    paymentPspReference: ").append(toIndentedString(paymentPspReference)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("errorFields");
    openapiFields.add("errorMessage");
    openapiFields.add("modificationMerchantReference");
    openapiFields.add("modificationPspReference");
    openapiFields.add("paymentMerchantReference");
    openapiFields.add("paymentPspReference");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PaymentFailureNotificationContent
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PaymentFailureNotificationContent.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PaymentFailureNotificationContent is not found in the empty JSON string", PaymentFailureNotificationContent.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PaymentFailureNotificationContent.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PaymentFailureNotificationContent` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("errorFields") != null && !jsonObj.get("errorFields").isJsonNull()) {
        JsonArray jsonArrayerrorFields = jsonObj.getAsJsonArray("errorFields");
        if (jsonArrayerrorFields != null) {
          // ensure the json data is an array
          if (!jsonObj.get("errorFields").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `errorFields` to be an array in the JSON string but got `%s`", jsonObj.get("errorFields").toString()));
          }

          // validate the optional field `errorFields` (array)
          for (int i = 0; i < jsonArrayerrorFields.size(); i++) {
            ErrorFieldType.validateJsonElement(jsonArrayerrorFields.get(i));
          };
        }
      }
      // validate the optional field `errorMessage`
      if (jsonObj.get("errorMessage") != null && !jsonObj.get("errorMessage").isJsonNull()) {
        Message.validateJsonElement(jsonObj.get("errorMessage"));
      }
      if ((jsonObj.get("modificationMerchantReference") != null && !jsonObj.get("modificationMerchantReference").isJsonNull()) && !jsonObj.get("modificationMerchantReference").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `modificationMerchantReference` to be a primitive type in the JSON string but got `%s`", jsonObj.get("modificationMerchantReference").toString()));
      }
      if ((jsonObj.get("modificationPspReference") != null && !jsonObj.get("modificationPspReference").isJsonNull()) && !jsonObj.get("modificationPspReference").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `modificationPspReference` to be a primitive type in the JSON string but got `%s`", jsonObj.get("modificationPspReference").toString()));
      }
      if ((jsonObj.get("paymentMerchantReference") != null && !jsonObj.get("paymentMerchantReference").isJsonNull()) && !jsonObj.get("paymentMerchantReference").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `paymentMerchantReference` to be a primitive type in the JSON string but got `%s`", jsonObj.get("paymentMerchantReference").toString()));
      }
      if ((jsonObj.get("paymentPspReference") != null && !jsonObj.get("paymentPspReference").isJsonNull()) && !jsonObj.get("paymentPspReference").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `paymentPspReference` to be a primitive type in the JSON string but got `%s`", jsonObj.get("paymentPspReference").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PaymentFailureNotificationContent.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PaymentFailureNotificationContent' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PaymentFailureNotificationContent> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PaymentFailureNotificationContent.class));

       return (TypeAdapter<T>) new TypeAdapter<PaymentFailureNotificationContent>() {
           @Override
           public void write(JsonWriter out, PaymentFailureNotificationContent value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PaymentFailureNotificationContent read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PaymentFailureNotificationContent given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PaymentFailureNotificationContent
   * @throws IOException if the JSON string is invalid with respect to PaymentFailureNotificationContent
   */
  public static PaymentFailureNotificationContent fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PaymentFailureNotificationContent.class);
  }

  /**
   * Convert an instance of PaymentFailureNotificationContent to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

