/*
 * Classic Platforms - Notifications
 * This API is used for the classic integration. If you are just starting your implementation, refer to our [new integration guide](https://docs.adyen.com/marketplaces-and-platforms) instead.  The Notification API sends notifications to the endpoints specified in a given subscription.  Subscriptions are managed through the Notification Configuration API. The API specifications listed here detail the format of each notification.  For more information, refer to our [documentation](https://docs.adyen.com/marketplaces-and-platforms/classic/notifications).
 *
 * The version of the OpenAPI document: 5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AccountHolderUpcomingDeadlineNotificationContent
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:13:23.426814-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AccountHolderUpcomingDeadlineNotificationContent {
  public static final String SERIALIZED_NAME_ACCOUNT_HOLDER_CODE = "accountHolderCode";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_HOLDER_CODE)
  private String accountHolderCode;

  /**
   * The event name that will be trigger if no action is taken.
   */
  @JsonAdapter(EventEnum.Adapter.class)
  public enum EventEnum {
    ACCESS_PII("AccessPii"),
    
    API_TIER_UPDATE("ApiTierUpdate"),
    
    CLOSE_ACCOUNT("CloseAccount"),
    
    CLOSE_STORES("CloseStores"),
    
    DELETE_BALANCE_ACCOUNTS("DeleteBalanceAccounts"),
    
    DELETE_BANK_ACCOUNTS("DeleteBankAccounts"),
    
    DELETE_LEGAL_ARRANGEMENTS("DeleteLegalArrangements"),
    
    DELETE_LIABLE_BANK_ACCOUNT("DeleteLiableBankAccount"),
    
    DELETE_PAYOUT_METHODS("DeletePayoutMethods"),
    
    DELETE_SHAREHOLDERS("DeleteShareholders"),
    
    DELETE_SIGNATORIES("DeleteSignatories"),
    
    INACTIVATE_ACCOUNT("InactivateAccount"),
    
    KYC_DEADLINE_EXTENSION("KYCDeadlineExtension"),
    
    MIGRATE_ACCOUNT_TO_BP("MigrateAccountToBP"),
    
    RECALCULATE_ACCOUNT_STATUS_AND_PROCESSING_TIER("RecalculateAccountStatusAndProcessingTier"),
    
    REFUND_NOT_PAID_OUT_TRANSFERS("RefundNotPaidOutTransfers"),
    
    RESOLVE_EVENTS("ResolveEvents"),
    
    SAVE_ACCOUNT_HOLDER("SaveAccountHolder"),
    
    SAVE_KYC_CHECK_STATUS("SaveKYCCheckStatus"),
    
    SAVE_PEP_CHECKS("SavePEPChecks"),
    
    SUSPEND_ACCOUNT("SuspendAccount"),
    
    UN_SUSPEND_ACCOUNT("UnSuspendAccount"),
    
    UPDATE_ACCOUNT_HOLDER_STATE("UpdateAccountHolderState"),
    
    VERIFICATION("Verification");

    private String value;

    EventEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EventEnum fromValue(String value) {
      for (EventEnum b : EventEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EventEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EventEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EventEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EventEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      EventEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_EVENT = "event";
  @SerializedName(SERIALIZED_NAME_EVENT)
  private EventEnum event;

  public static final String SERIALIZED_NAME_EXECUTION_DATE = "executionDate";
  @SerializedName(SERIALIZED_NAME_EXECUTION_DATE)
  private OffsetDateTime executionDate;

  public static final String SERIALIZED_NAME_REASON = "reason";
  @SerializedName(SERIALIZED_NAME_REASON)
  private String reason;

  public AccountHolderUpcomingDeadlineNotificationContent() {
  }

  public AccountHolderUpcomingDeadlineNotificationContent accountHolderCode(String accountHolderCode) {
    this.accountHolderCode = accountHolderCode;
    return this;
  }

  /**
   * The code of the account holder whom the event refers to.
   * @return accountHolderCode
   */
  @javax.annotation.Nullable
  public String getAccountHolderCode() {
    return accountHolderCode;
  }

  public void setAccountHolderCode(String accountHolderCode) {
    this.accountHolderCode = accountHolderCode;
  }


  public AccountHolderUpcomingDeadlineNotificationContent event(EventEnum event) {
    this.event = event;
    return this;
  }

  /**
   * The event name that will be trigger if no action is taken.
   * @return event
   */
  @javax.annotation.Nullable
  public EventEnum getEvent() {
    return event;
  }

  public void setEvent(EventEnum event) {
    this.event = event;
  }


  public AccountHolderUpcomingDeadlineNotificationContent executionDate(OffsetDateTime executionDate) {
    this.executionDate = executionDate;
    return this;
  }

  /**
   * The execution date scheduled for the event.
   * @return executionDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getExecutionDate() {
    return executionDate;
  }

  public void setExecutionDate(OffsetDateTime executionDate) {
    this.executionDate = executionDate;
  }


  public AccountHolderUpcomingDeadlineNotificationContent reason(String reason) {
    this.reason = reason;
    return this;
  }

  /**
   * The reason that leads to scheduling of the event.
   * @return reason
   */
  @javax.annotation.Nullable
  public String getReason() {
    return reason;
  }

  public void setReason(String reason) {
    this.reason = reason;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AccountHolderUpcomingDeadlineNotificationContent accountHolderUpcomingDeadlineNotificationContent = (AccountHolderUpcomingDeadlineNotificationContent) o;
    return Objects.equals(this.accountHolderCode, accountHolderUpcomingDeadlineNotificationContent.accountHolderCode) &&
        Objects.equals(this.event, accountHolderUpcomingDeadlineNotificationContent.event) &&
        Objects.equals(this.executionDate, accountHolderUpcomingDeadlineNotificationContent.executionDate) &&
        Objects.equals(this.reason, accountHolderUpcomingDeadlineNotificationContent.reason);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountHolderCode, event, executionDate, reason);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AccountHolderUpcomingDeadlineNotificationContent {\n");
    sb.append("    accountHolderCode: ").append(toIndentedString(accountHolderCode)).append("\n");
    sb.append("    event: ").append(toIndentedString(event)).append("\n");
    sb.append("    executionDate: ").append(toIndentedString(executionDate)).append("\n");
    sb.append("    reason: ").append(toIndentedString(reason)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accountHolderCode");
    openapiFields.add("event");
    openapiFields.add("executionDate");
    openapiFields.add("reason");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AccountHolderUpcomingDeadlineNotificationContent
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AccountHolderUpcomingDeadlineNotificationContent.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AccountHolderUpcomingDeadlineNotificationContent is not found in the empty JSON string", AccountHolderUpcomingDeadlineNotificationContent.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AccountHolderUpcomingDeadlineNotificationContent.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AccountHolderUpcomingDeadlineNotificationContent` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("accountHolderCode") != null && !jsonObj.get("accountHolderCode").isJsonNull()) && !jsonObj.get("accountHolderCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountHolderCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountHolderCode").toString()));
      }
      if ((jsonObj.get("event") != null && !jsonObj.get("event").isJsonNull()) && !jsonObj.get("event").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `event` to be a primitive type in the JSON string but got `%s`", jsonObj.get("event").toString()));
      }
      // validate the optional field `event`
      if (jsonObj.get("event") != null && !jsonObj.get("event").isJsonNull()) {
        EventEnum.validateJsonElement(jsonObj.get("event"));
      }
      if ((jsonObj.get("reason") != null && !jsonObj.get("reason").isJsonNull()) && !jsonObj.get("reason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reason").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AccountHolderUpcomingDeadlineNotificationContent.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AccountHolderUpcomingDeadlineNotificationContent' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AccountHolderUpcomingDeadlineNotificationContent> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AccountHolderUpcomingDeadlineNotificationContent.class));

       return (TypeAdapter<T>) new TypeAdapter<AccountHolderUpcomingDeadlineNotificationContent>() {
           @Override
           public void write(JsonWriter out, AccountHolderUpcomingDeadlineNotificationContent value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AccountHolderUpcomingDeadlineNotificationContent read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AccountHolderUpcomingDeadlineNotificationContent given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AccountHolderUpcomingDeadlineNotificationContent
   * @throws IOException if the JSON string is invalid with respect to AccountHolderUpcomingDeadlineNotificationContent
   */
  public static AccountHolderUpcomingDeadlineNotificationContent fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AccountHolderUpcomingDeadlineNotificationContent.class);
  }

  /**
   * Convert an instance of AccountHolderUpcomingDeadlineNotificationContent to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

