/*
 * Classic Platforms - Notifications
 * This API is used for the classic integration. If you are just starting your implementation, refer to our [new integration guide](https://docs.adyen.com/marketplaces-and-platforms) instead.  The Notification API sends notifications to the endpoints specified in a given subscription.  Subscriptions are managed through the Notification Configuration API. The API specifications listed here detail the format of each notification.  For more information, refer to our [documentation](https://docs.adyen.com/marketplaces-and-platforms/classic/notifications).
 *
 * The version of the OpenAPI document: 5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Amount;
import org.openapitools.client.model.BankAccountDetail;
import org.openapitools.client.model.ErrorFieldType;
import org.openapitools.client.model.ModelLocalDate;
import org.openapitools.client.model.OperationStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AccountHolderPayoutNotificationContent
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:13:23.426814-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AccountHolderPayoutNotificationContent {
  public static final String SERIALIZED_NAME_ACCOUNT_CODE = "accountCode";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_CODE)
  private String accountCode;

  public static final String SERIALIZED_NAME_ACCOUNT_HOLDER_CODE = "accountHolderCode";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_HOLDER_CODE)
  private String accountHolderCode;

  public static final String SERIALIZED_NAME_AMOUNT = "amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  private Amount amount;

  public static final String SERIALIZED_NAME_AMOUNTS = "amounts";
  @SerializedName(SERIALIZED_NAME_AMOUNTS)
  private List<Amount> amounts = new ArrayList<>();

  public static final String SERIALIZED_NAME_BANK_ACCOUNT_DETAIL = "bankAccountDetail";
  @SerializedName(SERIALIZED_NAME_BANK_ACCOUNT_DETAIL)
  private BankAccountDetail bankAccountDetail;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ESTIMATED_ARRIVAL_DATE = "estimatedArrivalDate";
  @SerializedName(SERIALIZED_NAME_ESTIMATED_ARRIVAL_DATE)
  private ModelLocalDate estimatedArrivalDate;

  public static final String SERIALIZED_NAME_INVALID_FIELDS = "invalidFields";
  @SerializedName(SERIALIZED_NAME_INVALID_FIELDS)
  private List<ErrorFieldType> invalidFields = new ArrayList<>();

  public static final String SERIALIZED_NAME_MERCHANT_REFERENCE = "merchantReference";
  @SerializedName(SERIALIZED_NAME_MERCHANT_REFERENCE)
  private String merchantReference;

  public static final String SERIALIZED_NAME_ORIGINAL_PSP_REFERENCE = "originalPspReference";
  @SerializedName(SERIALIZED_NAME_ORIGINAL_PSP_REFERENCE)
  private String originalPspReference;

  /**
   * Speed with which payouts for this account are processed. Permitted values: &#x60;STANDARD&#x60;, &#x60;SAME_DAY&#x60;.
   */
  @JsonAdapter(PayoutSpeedEnum.Adapter.class)
  public enum PayoutSpeedEnum {
    INSTANT("INSTANT"),
    
    SAME_DAY("SAME_DAY"),
    
    STANDARD("STANDARD");

    private String value;

    PayoutSpeedEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PayoutSpeedEnum fromValue(String value) {
      for (PayoutSpeedEnum b : PayoutSpeedEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PayoutSpeedEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PayoutSpeedEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PayoutSpeedEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PayoutSpeedEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PayoutSpeedEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PAYOUT_SPEED = "payoutSpeed";
  @SerializedName(SERIALIZED_NAME_PAYOUT_SPEED)
  private PayoutSpeedEnum payoutSpeed;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private OperationStatus status;

  public AccountHolderPayoutNotificationContent() {
  }

  public AccountHolderPayoutNotificationContent accountCode(String accountCode) {
    this.accountCode = accountCode;
    return this;
  }

  /**
   * The code of the account from which the payout was made.
   * @return accountCode
   */
  @javax.annotation.Nullable
  public String getAccountCode() {
    return accountCode;
  }

  public void setAccountCode(String accountCode) {
    this.accountCode = accountCode;
  }


  public AccountHolderPayoutNotificationContent accountHolderCode(String accountHolderCode) {
    this.accountHolderCode = accountHolderCode;
    return this;
  }

  /**
   * The code of the Account Holder to which the payout was made.
   * @return accountHolderCode
   */
  @javax.annotation.Nullable
  public String getAccountHolderCode() {
    return accountHolderCode;
  }

  public void setAccountHolderCode(String accountHolderCode) {
    this.accountHolderCode = accountHolderCode;
  }


  public AccountHolderPayoutNotificationContent amount(Amount amount) {
    this.amount = amount;
    return this;
  }

  /**
   * The payout amount.
   * @return amount
   */
  @javax.annotation.Nullable
  public Amount getAmount() {
    return amount;
  }

  public void setAmount(Amount amount) {
    this.amount = amount;
  }


  public AccountHolderPayoutNotificationContent amounts(List<Amount> amounts) {
    this.amounts = amounts;
    return this;
  }

  public AccountHolderPayoutNotificationContent addAmountsItem(Amount amountsItem) {
    if (this.amounts == null) {
      this.amounts = new ArrayList<>();
    }
    this.amounts.add(amountsItem);
    return this;
  }

  /**
   * The payout amounts (per currency).
   * @return amounts
   */
  @javax.annotation.Nullable
  public List<Amount> getAmounts() {
    return amounts;
  }

  public void setAmounts(List<Amount> amounts) {
    this.amounts = amounts;
  }


  public AccountHolderPayoutNotificationContent bankAccountDetail(BankAccountDetail bankAccountDetail) {
    this.bankAccountDetail = bankAccountDetail;
    return this;
  }

  /**
   * Details of the Bank Account to which the payout was made.
   * @return bankAccountDetail
   */
  @javax.annotation.Nullable
  public BankAccountDetail getBankAccountDetail() {
    return bankAccountDetail;
  }

  public void setBankAccountDetail(BankAccountDetail bankAccountDetail) {
    this.bankAccountDetail = bankAccountDetail;
  }


  public AccountHolderPayoutNotificationContent description(String description) {
    this.description = description;
    return this;
  }

  /**
   * A description of the payout.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public AccountHolderPayoutNotificationContent estimatedArrivalDate(ModelLocalDate estimatedArrivalDate) {
    this.estimatedArrivalDate = estimatedArrivalDate;
    return this;
  }

  /**
   * The estimated date of arrival.
   * @return estimatedArrivalDate
   */
  @javax.annotation.Nullable
  public ModelLocalDate getEstimatedArrivalDate() {
    return estimatedArrivalDate;
  }

  public void setEstimatedArrivalDate(ModelLocalDate estimatedArrivalDate) {
    this.estimatedArrivalDate = estimatedArrivalDate;
  }


  public AccountHolderPayoutNotificationContent invalidFields(List<ErrorFieldType> invalidFields) {
    this.invalidFields = invalidFields;
    return this;
  }

  public AccountHolderPayoutNotificationContent addInvalidFieldsItem(ErrorFieldType invalidFieldsItem) {
    if (this.invalidFields == null) {
      this.invalidFields = new ArrayList<>();
    }
    this.invalidFields.add(invalidFieldsItem);
    return this;
  }

  /**
   * Invalid fields list.
   * @return invalidFields
   */
  @javax.annotation.Nullable
  public List<ErrorFieldType> getInvalidFields() {
    return invalidFields;
  }

  public void setInvalidFields(List<ErrorFieldType> invalidFields) {
    this.invalidFields = invalidFields;
  }


  public AccountHolderPayoutNotificationContent merchantReference(String merchantReference) {
    this.merchantReference = merchantReference;
    return this;
  }

  /**
   * The merchant reference.
   * @return merchantReference
   */
  @javax.annotation.Nullable
  public String getMerchantReference() {
    return merchantReference;
  }

  public void setMerchantReference(String merchantReference) {
    this.merchantReference = merchantReference;
  }


  public AccountHolderPayoutNotificationContent originalPspReference(String originalPspReference) {
    this.originalPspReference = originalPspReference;
    return this;
  }

  /**
   * The PSP reference of the original payout.
   * @return originalPspReference
   */
  @javax.annotation.Nullable
  public String getOriginalPspReference() {
    return originalPspReference;
  }

  public void setOriginalPspReference(String originalPspReference) {
    this.originalPspReference = originalPspReference;
  }


  public AccountHolderPayoutNotificationContent payoutSpeed(PayoutSpeedEnum payoutSpeed) {
    this.payoutSpeed = payoutSpeed;
    return this;
  }

  /**
   * Speed with which payouts for this account are processed. Permitted values: &#x60;STANDARD&#x60;, &#x60;SAME_DAY&#x60;.
   * @return payoutSpeed
   */
  @javax.annotation.Nullable
  public PayoutSpeedEnum getPayoutSpeed() {
    return payoutSpeed;
  }

  public void setPayoutSpeed(PayoutSpeedEnum payoutSpeed) {
    this.payoutSpeed = payoutSpeed;
  }


  public AccountHolderPayoutNotificationContent status(OperationStatus status) {
    this.status = status;
    return this;
  }

  /**
   * The payout status.
   * @return status
   */
  @javax.annotation.Nullable
  public OperationStatus getStatus() {
    return status;
  }

  public void setStatus(OperationStatus status) {
    this.status = status;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AccountHolderPayoutNotificationContent accountHolderPayoutNotificationContent = (AccountHolderPayoutNotificationContent) o;
    return Objects.equals(this.accountCode, accountHolderPayoutNotificationContent.accountCode) &&
        Objects.equals(this.accountHolderCode, accountHolderPayoutNotificationContent.accountHolderCode) &&
        Objects.equals(this.amount, accountHolderPayoutNotificationContent.amount) &&
        Objects.equals(this.amounts, accountHolderPayoutNotificationContent.amounts) &&
        Objects.equals(this.bankAccountDetail, accountHolderPayoutNotificationContent.bankAccountDetail) &&
        Objects.equals(this.description, accountHolderPayoutNotificationContent.description) &&
        Objects.equals(this.estimatedArrivalDate, accountHolderPayoutNotificationContent.estimatedArrivalDate) &&
        Objects.equals(this.invalidFields, accountHolderPayoutNotificationContent.invalidFields) &&
        Objects.equals(this.merchantReference, accountHolderPayoutNotificationContent.merchantReference) &&
        Objects.equals(this.originalPspReference, accountHolderPayoutNotificationContent.originalPspReference) &&
        Objects.equals(this.payoutSpeed, accountHolderPayoutNotificationContent.payoutSpeed) &&
        Objects.equals(this.status, accountHolderPayoutNotificationContent.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountCode, accountHolderCode, amount, amounts, bankAccountDetail, description, estimatedArrivalDate, invalidFields, merchantReference, originalPspReference, payoutSpeed, status);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AccountHolderPayoutNotificationContent {\n");
    sb.append("    accountCode: ").append(toIndentedString(accountCode)).append("\n");
    sb.append("    accountHolderCode: ").append(toIndentedString(accountHolderCode)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    amounts: ").append(toIndentedString(amounts)).append("\n");
    sb.append("    bankAccountDetail: ").append(toIndentedString(bankAccountDetail)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    estimatedArrivalDate: ").append(toIndentedString(estimatedArrivalDate)).append("\n");
    sb.append("    invalidFields: ").append(toIndentedString(invalidFields)).append("\n");
    sb.append("    merchantReference: ").append(toIndentedString(merchantReference)).append("\n");
    sb.append("    originalPspReference: ").append(toIndentedString(originalPspReference)).append("\n");
    sb.append("    payoutSpeed: ").append(toIndentedString(payoutSpeed)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accountCode");
    openapiFields.add("accountHolderCode");
    openapiFields.add("amount");
    openapiFields.add("amounts");
    openapiFields.add("bankAccountDetail");
    openapiFields.add("description");
    openapiFields.add("estimatedArrivalDate");
    openapiFields.add("invalidFields");
    openapiFields.add("merchantReference");
    openapiFields.add("originalPspReference");
    openapiFields.add("payoutSpeed");
    openapiFields.add("status");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AccountHolderPayoutNotificationContent
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AccountHolderPayoutNotificationContent.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AccountHolderPayoutNotificationContent is not found in the empty JSON string", AccountHolderPayoutNotificationContent.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AccountHolderPayoutNotificationContent.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AccountHolderPayoutNotificationContent` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("accountCode") != null && !jsonObj.get("accountCode").isJsonNull()) && !jsonObj.get("accountCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountCode").toString()));
      }
      if ((jsonObj.get("accountHolderCode") != null && !jsonObj.get("accountHolderCode").isJsonNull()) && !jsonObj.get("accountHolderCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountHolderCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountHolderCode").toString()));
      }
      // validate the optional field `amount`
      if (jsonObj.get("amount") != null && !jsonObj.get("amount").isJsonNull()) {
        Amount.validateJsonElement(jsonObj.get("amount"));
      }
      if (jsonObj.get("amounts") != null && !jsonObj.get("amounts").isJsonNull()) {
        JsonArray jsonArrayamounts = jsonObj.getAsJsonArray("amounts");
        if (jsonArrayamounts != null) {
          // ensure the json data is an array
          if (!jsonObj.get("amounts").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `amounts` to be an array in the JSON string but got `%s`", jsonObj.get("amounts").toString()));
          }

          // validate the optional field `amounts` (array)
          for (int i = 0; i < jsonArrayamounts.size(); i++) {
            Amount.validateJsonElement(jsonArrayamounts.get(i));
          };
        }
      }
      // validate the optional field `bankAccountDetail`
      if (jsonObj.get("bankAccountDetail") != null && !jsonObj.get("bankAccountDetail").isJsonNull()) {
        BankAccountDetail.validateJsonElement(jsonObj.get("bankAccountDetail"));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // validate the optional field `estimatedArrivalDate`
      if (jsonObj.get("estimatedArrivalDate") != null && !jsonObj.get("estimatedArrivalDate").isJsonNull()) {
        ModelLocalDate.validateJsonElement(jsonObj.get("estimatedArrivalDate"));
      }
      if (jsonObj.get("invalidFields") != null && !jsonObj.get("invalidFields").isJsonNull()) {
        JsonArray jsonArrayinvalidFields = jsonObj.getAsJsonArray("invalidFields");
        if (jsonArrayinvalidFields != null) {
          // ensure the json data is an array
          if (!jsonObj.get("invalidFields").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `invalidFields` to be an array in the JSON string but got `%s`", jsonObj.get("invalidFields").toString()));
          }

          // validate the optional field `invalidFields` (array)
          for (int i = 0; i < jsonArrayinvalidFields.size(); i++) {
            ErrorFieldType.validateJsonElement(jsonArrayinvalidFields.get(i));
          };
        }
      }
      if ((jsonObj.get("merchantReference") != null && !jsonObj.get("merchantReference").isJsonNull()) && !jsonObj.get("merchantReference").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `merchantReference` to be a primitive type in the JSON string but got `%s`", jsonObj.get("merchantReference").toString()));
      }
      if ((jsonObj.get("originalPspReference") != null && !jsonObj.get("originalPspReference").isJsonNull()) && !jsonObj.get("originalPspReference").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `originalPspReference` to be a primitive type in the JSON string but got `%s`", jsonObj.get("originalPspReference").toString()));
      }
      if ((jsonObj.get("payoutSpeed") != null && !jsonObj.get("payoutSpeed").isJsonNull()) && !jsonObj.get("payoutSpeed").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payoutSpeed` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payoutSpeed").toString()));
      }
      // validate the optional field `payoutSpeed`
      if (jsonObj.get("payoutSpeed") != null && !jsonObj.get("payoutSpeed").isJsonNull()) {
        PayoutSpeedEnum.validateJsonElement(jsonObj.get("payoutSpeed"));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        OperationStatus.validateJsonElement(jsonObj.get("status"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AccountHolderPayoutNotificationContent.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AccountHolderPayoutNotificationContent' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AccountHolderPayoutNotificationContent> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AccountHolderPayoutNotificationContent.class));

       return (TypeAdapter<T>) new TypeAdapter<AccountHolderPayoutNotificationContent>() {
           @Override
           public void write(JsonWriter out, AccountHolderPayoutNotificationContent value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AccountHolderPayoutNotificationContent read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AccountHolderPayoutNotificationContent given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AccountHolderPayoutNotificationContent
   * @throws IOException if the JSON string is invalid with respect to AccountHolderPayoutNotificationContent
   */
  public static AccountHolderPayoutNotificationContent fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AccountHolderPayoutNotificationContent.class);
  }

  /**
   * Convert an instance of AccountHolderPayoutNotificationContent to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

