/*
 * Classic Platforms - Notifications
 * This API is used for the classic integration. If you are just starting your implementation, refer to our [new integration guide](https://docs.adyen.com/marketplaces-and-platforms) instead.  The Notification API sends notifications to the endpoints specified in a given subscription.  Subscriptions are managed through the Notification Configuration API. The API specifications listed here detail the format of each notification.  For more information, refer to our [documentation](https://docs.adyen.com/marketplaces-and-platforms/classic/notifications).
 *
 * The version of the OpenAPI document: 5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.BankAccountDetail;
import org.openapitools.client.model.BusinessDetails;
import org.openapitools.client.model.IndividualDetails;
import org.openapitools.client.model.PayoutMethod;
import org.openapitools.client.model.StoreDetail;
import org.openapitools.client.model.ViasAddress;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AccountHolderDetails
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:13:23.426814-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AccountHolderDetails {
  public static final String SERIALIZED_NAME_ADDRESS = "address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  private ViasAddress address;

  public static final String SERIALIZED_NAME_BANK_ACCOUNT_DETAILS = "bankAccountDetails";
  @SerializedName(SERIALIZED_NAME_BANK_ACCOUNT_DETAILS)
  private List<BankAccountDetail> bankAccountDetails = new ArrayList<>();

  public static final String SERIALIZED_NAME_BANK_AGGREGATOR_DATA_REFERENCE = "bankAggregatorDataReference";
  @SerializedName(SERIALIZED_NAME_BANK_AGGREGATOR_DATA_REFERENCE)
  private String bankAggregatorDataReference;

  public static final String SERIALIZED_NAME_BUSINESS_DETAILS = "businessDetails";
  @SerializedName(SERIALIZED_NAME_BUSINESS_DETAILS)
  private BusinessDetails businessDetails;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_FULL_PHONE_NUMBER = "fullPhoneNumber";
  @SerializedName(SERIALIZED_NAME_FULL_PHONE_NUMBER)
  private String fullPhoneNumber;

  public static final String SERIALIZED_NAME_INDIVIDUAL_DETAILS = "individualDetails";
  @SerializedName(SERIALIZED_NAME_INDIVIDUAL_DETAILS)
  private IndividualDetails individualDetails;

  public static final String SERIALIZED_NAME_LAST_REVIEW_DATE = "lastReviewDate";
  @SerializedName(SERIALIZED_NAME_LAST_REVIEW_DATE)
  private String lastReviewDate;

  public static final String SERIALIZED_NAME_MERCHANT_CATEGORY_CODE = "merchantCategoryCode";
  @SerializedName(SERIALIZED_NAME_MERCHANT_CATEGORY_CODE)
  private String merchantCategoryCode;

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private Map<String, String> metadata = new HashMap<>();

  public static final String SERIALIZED_NAME_PAYOUT_METHODS = "payoutMethods";
  @SerializedName(SERIALIZED_NAME_PAYOUT_METHODS)
  private List<PayoutMethod> payoutMethods = new ArrayList<>();

  public static final String SERIALIZED_NAME_PRINCIPAL_BUSINESS_ADDRESS = "principalBusinessAddress";
  @SerializedName(SERIALIZED_NAME_PRINCIPAL_BUSINESS_ADDRESS)
  private ViasAddress principalBusinessAddress;

  public static final String SERIALIZED_NAME_STORE_DETAILS = "storeDetails";
  @SerializedName(SERIALIZED_NAME_STORE_DETAILS)
  private List<StoreDetail> storeDetails = new ArrayList<>();

  public static final String SERIALIZED_NAME_WEB_ADDRESS = "webAddress";
  @SerializedName(SERIALIZED_NAME_WEB_ADDRESS)
  private String webAddress;

  public AccountHolderDetails() {
  }

  public AccountHolderDetails address(ViasAddress address) {
    this.address = address;
    return this;
  }

  /**
   * The address of the account holder.
   * @return address
   */
  @javax.annotation.Nonnull
  public ViasAddress getAddress() {
    return address;
  }

  public void setAddress(ViasAddress address) {
    this.address = address;
  }


  public AccountHolderDetails bankAccountDetails(List<BankAccountDetail> bankAccountDetails) {
    this.bankAccountDetails = bankAccountDetails;
    return this;
  }

  public AccountHolderDetails addBankAccountDetailsItem(BankAccountDetail bankAccountDetailsItem) {
    if (this.bankAccountDetails == null) {
      this.bankAccountDetails = new ArrayList<>();
    }
    this.bankAccountDetails.add(bankAccountDetailsItem);
    return this;
  }

  /**
   * Array of bank accounts associated with the account holder. For details about the required &#x60;bankAccountDetail&#x60; fields, see [Required information](https://docs.adyen.com/marketplaces-and-platforms/classic/verification-process/required-information).
   * @return bankAccountDetails
   */
  @javax.annotation.Nullable
  public List<BankAccountDetail> getBankAccountDetails() {
    return bankAccountDetails;
  }

  public void setBankAccountDetails(List<BankAccountDetail> bankAccountDetails) {
    this.bankAccountDetails = bankAccountDetails;
  }


  public AccountHolderDetails bankAggregatorDataReference(String bankAggregatorDataReference) {
    this.bankAggregatorDataReference = bankAggregatorDataReference;
    return this;
  }

  /**
   * The opaque reference value returned by the Adyen API during bank account login.
   * @return bankAggregatorDataReference
   */
  @javax.annotation.Nullable
  public String getBankAggregatorDataReference() {
    return bankAggregatorDataReference;
  }

  public void setBankAggregatorDataReference(String bankAggregatorDataReference) {
    this.bankAggregatorDataReference = bankAggregatorDataReference;
  }


  public AccountHolderDetails businessDetails(BusinessDetails businessDetails) {
    this.businessDetails = businessDetails;
    return this;
  }

  /**
   * Details about the business or nonprofit account holder. Required when creating an account holder with &#x60;legalEntity&#x60; **Business** or **NonProfit**.
   * @return businessDetails
   */
  @javax.annotation.Nullable
  public BusinessDetails getBusinessDetails() {
    return businessDetails;
  }

  public void setBusinessDetails(BusinessDetails businessDetails) {
    this.businessDetails = businessDetails;
  }


  public AccountHolderDetails email(String email) {
    this.email = email;
    return this;
  }

  /**
   * The email address of the account holder.
   * @return email
   */
  @javax.annotation.Nullable
  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }


  public AccountHolderDetails fullPhoneNumber(String fullPhoneNumber) {
    this.fullPhoneNumber = fullPhoneNumber;
    return this;
  }

  /**
   * The phone number of the account holder provided as a single string. It will be handled as a landline phone. **Examples:** \&quot;0031 6 11 22 33 44\&quot;, \&quot;+316/1122-3344\&quot;, \&quot;(0031) 611223344\&quot;
   * @return fullPhoneNumber
   */
  @javax.annotation.Nullable
  public String getFullPhoneNumber() {
    return fullPhoneNumber;
  }

  public void setFullPhoneNumber(String fullPhoneNumber) {
    this.fullPhoneNumber = fullPhoneNumber;
  }


  public AccountHolderDetails individualDetails(IndividualDetails individualDetails) {
    this.individualDetails = individualDetails;
    return this;
  }

  /**
   * Details about the individual account holder. Required when creating an account holder with &#x60;legalEntity&#x60; **Individual**. 
   * @return individualDetails
   */
  @javax.annotation.Nullable
  public IndividualDetails getIndividualDetails() {
    return individualDetails;
  }

  public void setIndividualDetails(IndividualDetails individualDetails) {
    this.individualDetails = individualDetails;
  }


  public AccountHolderDetails lastReviewDate(String lastReviewDate) {
    this.lastReviewDate = lastReviewDate;
    return this;
  }

  /**
   * Date when you last reviewed the account holder&#39;s information, in ISO-8601 YYYY-MM-DD format. For example, **2020-01-31**.
   * @return lastReviewDate
   */
  @javax.annotation.Nullable
  public String getLastReviewDate() {
    return lastReviewDate;
  }

  public void setLastReviewDate(String lastReviewDate) {
    this.lastReviewDate = lastReviewDate;
  }


  public AccountHolderDetails merchantCategoryCode(String merchantCategoryCode) {
    this.merchantCategoryCode = merchantCategoryCode;
    return this;
  }

  /**
   * The Merchant Category Code of the account holder. &gt; If not specified in the request, this will be derived from the platform account (which is configured by Adyen).
   * @return merchantCategoryCode
   */
  @javax.annotation.Nullable
  public String getMerchantCategoryCode() {
    return merchantCategoryCode;
  }

  public void setMerchantCategoryCode(String merchantCategoryCode) {
    this.merchantCategoryCode = merchantCategoryCode;
  }


  public AccountHolderDetails metadata(Map<String, String> metadata) {
    this.metadata = metadata;
    return this;
  }

  public AccountHolderDetails putMetadataItem(String key, String metadataItem) {
    if (this.metadata == null) {
      this.metadata = new HashMap<>();
    }
    this.metadata.put(key, metadataItem);
    return this;
  }

  /**
   * A set of key and value pairs for general use by the account holder or merchant. The keys do not have specific names and may be used for storing miscellaneous data as desired. &gt; The values being stored have a maximum length of eighty (80) characters and will be truncated if necessary. &gt; Note that during an update of metadata, the omission of existing key-value pairs will result in the deletion of those key-value pairs.
   * @return metadata
   */
  @javax.annotation.Nullable
  public Map<String, String> getMetadata() {
    return metadata;
  }

  public void setMetadata(Map<String, String> metadata) {
    this.metadata = metadata;
  }


  public AccountHolderDetails payoutMethods(List<PayoutMethod> payoutMethods) {
    this.payoutMethods = payoutMethods;
    return this;
  }

  public AccountHolderDetails addPayoutMethodsItem(PayoutMethod payoutMethodsItem) {
    if (this.payoutMethods == null) {
      this.payoutMethods = new ArrayList<>();
    }
    this.payoutMethods.add(payoutMethodsItem);
    return this;
  }

  /**
   * Array of tokenized card details associated with the account holder. For details about how you can use the tokens to pay out, refer to [Pay out to cards](https://docs.adyen.com/marketplaces-and-platforms/classic/payout-to-cards).
   * @return payoutMethods
   */
  @javax.annotation.Nullable
  public List<PayoutMethod> getPayoutMethods() {
    return payoutMethods;
  }

  public void setPayoutMethods(List<PayoutMethod> payoutMethods) {
    this.payoutMethods = payoutMethods;
  }


  public AccountHolderDetails principalBusinessAddress(ViasAddress principalBusinessAddress) {
    this.principalBusinessAddress = principalBusinessAddress;
    return this;
  }

  /**
   * The principal business address of the account holder.
   * @return principalBusinessAddress
   */
  @javax.annotation.Nullable
  public ViasAddress getPrincipalBusinessAddress() {
    return principalBusinessAddress;
  }

  public void setPrincipalBusinessAddress(ViasAddress principalBusinessAddress) {
    this.principalBusinessAddress = principalBusinessAddress;
  }


  public AccountHolderDetails storeDetails(List<StoreDetail> storeDetails) {
    this.storeDetails = storeDetails;
    return this;
  }

  public AccountHolderDetails addStoreDetailsItem(StoreDetail storeDetailsItem) {
    if (this.storeDetails == null) {
      this.storeDetails = new ArrayList<>();
    }
    this.storeDetails.add(storeDetailsItem);
    return this;
  }

  /**
   * Array of stores associated with the account holder. Required when onboarding account holders that have an Adyen [point of sale](https://docs.adyen.com/marketplaces-and-platforms/classic/platforms-for-pos).
   * @return storeDetails
   */
  @javax.annotation.Nullable
  public List<StoreDetail> getStoreDetails() {
    return storeDetails;
  }

  public void setStoreDetails(List<StoreDetail> storeDetails) {
    this.storeDetails = storeDetails;
  }


  public AccountHolderDetails webAddress(String webAddress) {
    this.webAddress = webAddress;
    return this;
  }

  /**
   * The URL of the website of the account holder.
   * @return webAddress
   */
  @javax.annotation.Nullable
  public String getWebAddress() {
    return webAddress;
  }

  public void setWebAddress(String webAddress) {
    this.webAddress = webAddress;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AccountHolderDetails accountHolderDetails = (AccountHolderDetails) o;
    return Objects.equals(this.address, accountHolderDetails.address) &&
        Objects.equals(this.bankAccountDetails, accountHolderDetails.bankAccountDetails) &&
        Objects.equals(this.bankAggregatorDataReference, accountHolderDetails.bankAggregatorDataReference) &&
        Objects.equals(this.businessDetails, accountHolderDetails.businessDetails) &&
        Objects.equals(this.email, accountHolderDetails.email) &&
        Objects.equals(this.fullPhoneNumber, accountHolderDetails.fullPhoneNumber) &&
        Objects.equals(this.individualDetails, accountHolderDetails.individualDetails) &&
        Objects.equals(this.lastReviewDate, accountHolderDetails.lastReviewDate) &&
        Objects.equals(this.merchantCategoryCode, accountHolderDetails.merchantCategoryCode) &&
        Objects.equals(this.metadata, accountHolderDetails.metadata) &&
        Objects.equals(this.payoutMethods, accountHolderDetails.payoutMethods) &&
        Objects.equals(this.principalBusinessAddress, accountHolderDetails.principalBusinessAddress) &&
        Objects.equals(this.storeDetails, accountHolderDetails.storeDetails) &&
        Objects.equals(this.webAddress, accountHolderDetails.webAddress);
  }

  @Override
  public int hashCode() {
    return Objects.hash(address, bankAccountDetails, bankAggregatorDataReference, businessDetails, email, fullPhoneNumber, individualDetails, lastReviewDate, merchantCategoryCode, metadata, payoutMethods, principalBusinessAddress, storeDetails, webAddress);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AccountHolderDetails {\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    bankAccountDetails: ").append(toIndentedString(bankAccountDetails)).append("\n");
    sb.append("    bankAggregatorDataReference: ").append(toIndentedString(bankAggregatorDataReference)).append("\n");
    sb.append("    businessDetails: ").append(toIndentedString(businessDetails)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    fullPhoneNumber: ").append(toIndentedString(fullPhoneNumber)).append("\n");
    sb.append("    individualDetails: ").append(toIndentedString(individualDetails)).append("\n");
    sb.append("    lastReviewDate: ").append(toIndentedString(lastReviewDate)).append("\n");
    sb.append("    merchantCategoryCode: ").append(toIndentedString(merchantCategoryCode)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    payoutMethods: ").append(toIndentedString(payoutMethods)).append("\n");
    sb.append("    principalBusinessAddress: ").append(toIndentedString(principalBusinessAddress)).append("\n");
    sb.append("    storeDetails: ").append(toIndentedString(storeDetails)).append("\n");
    sb.append("    webAddress: ").append(toIndentedString(webAddress)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("address");
    openapiFields.add("bankAccountDetails");
    openapiFields.add("bankAggregatorDataReference");
    openapiFields.add("businessDetails");
    openapiFields.add("email");
    openapiFields.add("fullPhoneNumber");
    openapiFields.add("individualDetails");
    openapiFields.add("lastReviewDate");
    openapiFields.add("merchantCategoryCode");
    openapiFields.add("metadata");
    openapiFields.add("payoutMethods");
    openapiFields.add("principalBusinessAddress");
    openapiFields.add("storeDetails");
    openapiFields.add("webAddress");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("address");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AccountHolderDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AccountHolderDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AccountHolderDetails is not found in the empty JSON string", AccountHolderDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AccountHolderDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AccountHolderDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AccountHolderDetails.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `address`
      ViasAddress.validateJsonElement(jsonObj.get("address"));
      if (jsonObj.get("bankAccountDetails") != null && !jsonObj.get("bankAccountDetails").isJsonNull()) {
        JsonArray jsonArraybankAccountDetails = jsonObj.getAsJsonArray("bankAccountDetails");
        if (jsonArraybankAccountDetails != null) {
          // ensure the json data is an array
          if (!jsonObj.get("bankAccountDetails").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `bankAccountDetails` to be an array in the JSON string but got `%s`", jsonObj.get("bankAccountDetails").toString()));
          }

          // validate the optional field `bankAccountDetails` (array)
          for (int i = 0; i < jsonArraybankAccountDetails.size(); i++) {
            BankAccountDetail.validateJsonElement(jsonArraybankAccountDetails.get(i));
          };
        }
      }
      if ((jsonObj.get("bankAggregatorDataReference") != null && !jsonObj.get("bankAggregatorDataReference").isJsonNull()) && !jsonObj.get("bankAggregatorDataReference").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bankAggregatorDataReference` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bankAggregatorDataReference").toString()));
      }
      // validate the optional field `businessDetails`
      if (jsonObj.get("businessDetails") != null && !jsonObj.get("businessDetails").isJsonNull()) {
        BusinessDetails.validateJsonElement(jsonObj.get("businessDetails"));
      }
      if ((jsonObj.get("email") != null && !jsonObj.get("email").isJsonNull()) && !jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if ((jsonObj.get("fullPhoneNumber") != null && !jsonObj.get("fullPhoneNumber").isJsonNull()) && !jsonObj.get("fullPhoneNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fullPhoneNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fullPhoneNumber").toString()));
      }
      // validate the optional field `individualDetails`
      if (jsonObj.get("individualDetails") != null && !jsonObj.get("individualDetails").isJsonNull()) {
        IndividualDetails.validateJsonElement(jsonObj.get("individualDetails"));
      }
      if ((jsonObj.get("lastReviewDate") != null && !jsonObj.get("lastReviewDate").isJsonNull()) && !jsonObj.get("lastReviewDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastReviewDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastReviewDate").toString()));
      }
      if ((jsonObj.get("merchantCategoryCode") != null && !jsonObj.get("merchantCategoryCode").isJsonNull()) && !jsonObj.get("merchantCategoryCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `merchantCategoryCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("merchantCategoryCode").toString()));
      }
      if (jsonObj.get("payoutMethods") != null && !jsonObj.get("payoutMethods").isJsonNull()) {
        JsonArray jsonArraypayoutMethods = jsonObj.getAsJsonArray("payoutMethods");
        if (jsonArraypayoutMethods != null) {
          // ensure the json data is an array
          if (!jsonObj.get("payoutMethods").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `payoutMethods` to be an array in the JSON string but got `%s`", jsonObj.get("payoutMethods").toString()));
          }

          // validate the optional field `payoutMethods` (array)
          for (int i = 0; i < jsonArraypayoutMethods.size(); i++) {
            PayoutMethod.validateJsonElement(jsonArraypayoutMethods.get(i));
          };
        }
      }
      // validate the optional field `principalBusinessAddress`
      if (jsonObj.get("principalBusinessAddress") != null && !jsonObj.get("principalBusinessAddress").isJsonNull()) {
        ViasAddress.validateJsonElement(jsonObj.get("principalBusinessAddress"));
      }
      if (jsonObj.get("storeDetails") != null && !jsonObj.get("storeDetails").isJsonNull()) {
        JsonArray jsonArraystoreDetails = jsonObj.getAsJsonArray("storeDetails");
        if (jsonArraystoreDetails != null) {
          // ensure the json data is an array
          if (!jsonObj.get("storeDetails").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `storeDetails` to be an array in the JSON string but got `%s`", jsonObj.get("storeDetails").toString()));
          }

          // validate the optional field `storeDetails` (array)
          for (int i = 0; i < jsonArraystoreDetails.size(); i++) {
            StoreDetail.validateJsonElement(jsonArraystoreDetails.get(i));
          };
        }
      }
      if ((jsonObj.get("webAddress") != null && !jsonObj.get("webAddress").isJsonNull()) && !jsonObj.get("webAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `webAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("webAddress").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AccountHolderDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AccountHolderDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AccountHolderDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AccountHolderDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<AccountHolderDetails>() {
           @Override
           public void write(JsonWriter out, AccountHolderDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AccountHolderDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AccountHolderDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AccountHolderDetails
   * @throws IOException if the JSON string is invalid with respect to AccountHolderDetails
   */
  public static AccountHolderDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AccountHolderDetails.class);
  }

  /**
   * Convert an instance of AccountHolderDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

