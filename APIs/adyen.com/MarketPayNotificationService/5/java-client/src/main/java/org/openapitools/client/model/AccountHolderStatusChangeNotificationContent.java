/*
 * Classic Platforms - Notifications
 * This API is used for the classic integration. If you are just starting your implementation, refer to our [new integration guide](https://docs.adyen.com/marketplaces-and-platforms) instead.  The Notification API sends notifications to the endpoints specified in a given subscription.  Subscriptions are managed through the Notification Configuration API. The API specifications listed here detail the format of each notification.  For more information, refer to our [documentation](https://docs.adyen.com/marketplaces-and-platforms/classic/notifications).
 *
 * The version of the OpenAPI document: 5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AccountHolderStatus;
import org.openapitools.client.model.ErrorFieldType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AccountHolderStatusChangeNotificationContent
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:13:23.426814-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AccountHolderStatusChangeNotificationContent {
  public static final String SERIALIZED_NAME_ACCOUNT_HOLDER_CODE = "accountHolderCode";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_HOLDER_CODE)
  private String accountHolderCode;

  public static final String SERIALIZED_NAME_INVALID_FIELDS = "invalidFields";
  @SerializedName(SERIALIZED_NAME_INVALID_FIELDS)
  private List<ErrorFieldType> invalidFields = new ArrayList<>();

  public static final String SERIALIZED_NAME_NEW_STATUS = "newStatus";
  @SerializedName(SERIALIZED_NAME_NEW_STATUS)
  private AccountHolderStatus newStatus;

  public static final String SERIALIZED_NAME_OLD_STATUS = "oldStatus";
  @SerializedName(SERIALIZED_NAME_OLD_STATUS)
  private AccountHolderStatus oldStatus;

  public static final String SERIALIZED_NAME_REASON = "reason";
  @SerializedName(SERIALIZED_NAME_REASON)
  private String reason;

  public AccountHolderStatusChangeNotificationContent() {
  }

  public AccountHolderStatusChangeNotificationContent accountHolderCode(String accountHolderCode) {
    this.accountHolderCode = accountHolderCode;
    return this;
  }

  /**
   * The code of the account holder.
   * @return accountHolderCode
   */
  @javax.annotation.Nonnull
  public String getAccountHolderCode() {
    return accountHolderCode;
  }

  public void setAccountHolderCode(String accountHolderCode) {
    this.accountHolderCode = accountHolderCode;
  }


  public AccountHolderStatusChangeNotificationContent invalidFields(List<ErrorFieldType> invalidFields) {
    this.invalidFields = invalidFields;
    return this;
  }

  public AccountHolderStatusChangeNotificationContent addInvalidFieldsItem(ErrorFieldType invalidFieldsItem) {
    if (this.invalidFields == null) {
      this.invalidFields = new ArrayList<>();
    }
    this.invalidFields.add(invalidFieldsItem);
    return this;
  }

  /**
   * in case the account holder has not been updated, contains account holder fields, that did not pass the validation.
   * @return invalidFields
   */
  @javax.annotation.Nullable
  public List<ErrorFieldType> getInvalidFields() {
    return invalidFields;
  }

  public void setInvalidFields(List<ErrorFieldType> invalidFields) {
    this.invalidFields = invalidFields;
  }


  public AccountHolderStatusChangeNotificationContent newStatus(AccountHolderStatus newStatus) {
    this.newStatus = newStatus;
    return this;
  }

  /**
   * The new status of the account holder.
   * @return newStatus
   */
  @javax.annotation.Nullable
  public AccountHolderStatus getNewStatus() {
    return newStatus;
  }

  public void setNewStatus(AccountHolderStatus newStatus) {
    this.newStatus = newStatus;
  }


  public AccountHolderStatusChangeNotificationContent oldStatus(AccountHolderStatus oldStatus) {
    this.oldStatus = oldStatus;
    return this;
  }

  /**
   * The former status of the account holder.
   * @return oldStatus
   */
  @javax.annotation.Nullable
  public AccountHolderStatus getOldStatus() {
    return oldStatus;
  }

  public void setOldStatus(AccountHolderStatus oldStatus) {
    this.oldStatus = oldStatus;
  }


  public AccountHolderStatusChangeNotificationContent reason(String reason) {
    this.reason = reason;
    return this;
  }

  /**
   * The reason for the status change.
   * @return reason
   */
  @javax.annotation.Nullable
  public String getReason() {
    return reason;
  }

  public void setReason(String reason) {
    this.reason = reason;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AccountHolderStatusChangeNotificationContent accountHolderStatusChangeNotificationContent = (AccountHolderStatusChangeNotificationContent) o;
    return Objects.equals(this.accountHolderCode, accountHolderStatusChangeNotificationContent.accountHolderCode) &&
        Objects.equals(this.invalidFields, accountHolderStatusChangeNotificationContent.invalidFields) &&
        Objects.equals(this.newStatus, accountHolderStatusChangeNotificationContent.newStatus) &&
        Objects.equals(this.oldStatus, accountHolderStatusChangeNotificationContent.oldStatus) &&
        Objects.equals(this.reason, accountHolderStatusChangeNotificationContent.reason);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountHolderCode, invalidFields, newStatus, oldStatus, reason);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AccountHolderStatusChangeNotificationContent {\n");
    sb.append("    accountHolderCode: ").append(toIndentedString(accountHolderCode)).append("\n");
    sb.append("    invalidFields: ").append(toIndentedString(invalidFields)).append("\n");
    sb.append("    newStatus: ").append(toIndentedString(newStatus)).append("\n");
    sb.append("    oldStatus: ").append(toIndentedString(oldStatus)).append("\n");
    sb.append("    reason: ").append(toIndentedString(reason)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accountHolderCode");
    openapiFields.add("invalidFields");
    openapiFields.add("newStatus");
    openapiFields.add("oldStatus");
    openapiFields.add("reason");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("accountHolderCode");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AccountHolderStatusChangeNotificationContent
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AccountHolderStatusChangeNotificationContent.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AccountHolderStatusChangeNotificationContent is not found in the empty JSON string", AccountHolderStatusChangeNotificationContent.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AccountHolderStatusChangeNotificationContent.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AccountHolderStatusChangeNotificationContent` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AccountHolderStatusChangeNotificationContent.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("accountHolderCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountHolderCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountHolderCode").toString()));
      }
      if (jsonObj.get("invalidFields") != null && !jsonObj.get("invalidFields").isJsonNull()) {
        JsonArray jsonArrayinvalidFields = jsonObj.getAsJsonArray("invalidFields");
        if (jsonArrayinvalidFields != null) {
          // ensure the json data is an array
          if (!jsonObj.get("invalidFields").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `invalidFields` to be an array in the JSON string but got `%s`", jsonObj.get("invalidFields").toString()));
          }

          // validate the optional field `invalidFields` (array)
          for (int i = 0; i < jsonArrayinvalidFields.size(); i++) {
            ErrorFieldType.validateJsonElement(jsonArrayinvalidFields.get(i));
          };
        }
      }
      // validate the optional field `newStatus`
      if (jsonObj.get("newStatus") != null && !jsonObj.get("newStatus").isJsonNull()) {
        AccountHolderStatus.validateJsonElement(jsonObj.get("newStatus"));
      }
      // validate the optional field `oldStatus`
      if (jsonObj.get("oldStatus") != null && !jsonObj.get("oldStatus").isJsonNull()) {
        AccountHolderStatus.validateJsonElement(jsonObj.get("oldStatus"));
      }
      if ((jsonObj.get("reason") != null && !jsonObj.get("reason").isJsonNull()) && !jsonObj.get("reason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reason").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AccountHolderStatusChangeNotificationContent.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AccountHolderStatusChangeNotificationContent' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AccountHolderStatusChangeNotificationContent> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AccountHolderStatusChangeNotificationContent.class));

       return (TypeAdapter<T>) new TypeAdapter<AccountHolderStatusChangeNotificationContent>() {
           @Override
           public void write(JsonWriter out, AccountHolderStatusChangeNotificationContent value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AccountHolderStatusChangeNotificationContent read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AccountHolderStatusChangeNotificationContent given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AccountHolderStatusChangeNotificationContent
   * @throws IOException if the JSON string is invalid with respect to AccountHolderStatusChangeNotificationContent
   */
  public static AccountHolderStatusChangeNotificationContent fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AccountHolderStatusChangeNotificationContent.class);
  }

  /**
   * Convert an instance of AccountHolderStatusChangeNotificationContent to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

