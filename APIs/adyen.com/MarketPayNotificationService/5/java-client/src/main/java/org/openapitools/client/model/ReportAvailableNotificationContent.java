/*
 * Classic Platforms - Notifications
 * This API is used for the classic integration. If you are just starting your implementation, refer to our [new integration guide](https://docs.adyen.com/marketplaces-and-platforms) instead.  The Notification API sends notifications to the endpoints specified in a given subscription.  Subscriptions are managed through the Notification Configuration API. The API specifications listed here detail the format of each notification.  For more information, refer to our [documentation](https://docs.adyen.com/marketplaces-and-platforms/classic/notifications).
 *
 * The version of the OpenAPI document: 5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ReportAvailableNotificationContent
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:13:23.426814-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ReportAvailableNotificationContent {
  public static final String SERIALIZED_NAME_ACCOUNT_CODE = "accountCode";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_CODE)
  private String accountCode;

  public static final String SERIALIZED_NAME_ACCOUNT_TYPE = "accountType";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_TYPE)
  private String accountType;

  public static final String SERIALIZED_NAME_EVENT_DATE = "eventDate";
  @SerializedName(SERIALIZED_NAME_EVENT_DATE)
  private OffsetDateTime eventDate;

  public static final String SERIALIZED_NAME_REMOTE_ACCESS_URL = "remoteAccessUrl";
  @SerializedName(SERIALIZED_NAME_REMOTE_ACCESS_URL)
  private String remoteAccessUrl;

  public static final String SERIALIZED_NAME_SUCCESS = "success";
  @SerializedName(SERIALIZED_NAME_SUCCESS)
  private Boolean success;

  public ReportAvailableNotificationContent() {
  }

  public ReportAvailableNotificationContent accountCode(String accountCode) {
    this.accountCode = accountCode;
    return this;
  }

  /**
   * The code of the Account to which the report applies.
   * @return accountCode
   */
  @javax.annotation.Nullable
  public String getAccountCode() {
    return accountCode;
  }

  public void setAccountCode(String accountCode) {
    this.accountCode = accountCode;
  }


  public ReportAvailableNotificationContent accountType(String accountType) {
    this.accountType = accountType;
    return this;
  }

  /**
   * The type of Account to which the report applies.
   * @return accountType
   */
  @javax.annotation.Nullable
  public String getAccountType() {
    return accountType;
  }

  public void setAccountType(String accountType) {
    this.accountType = accountType;
  }


  public ReportAvailableNotificationContent eventDate(OffsetDateTime eventDate) {
    this.eventDate = eventDate;
    return this;
  }

  /**
   * The date of the event to which the report applies.
   * @return eventDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getEventDate() {
    return eventDate;
  }

  public void setEventDate(OffsetDateTime eventDate) {
    this.eventDate = eventDate;
  }


  public ReportAvailableNotificationContent remoteAccessUrl(String remoteAccessUrl) {
    this.remoteAccessUrl = remoteAccessUrl;
    return this;
  }

  /**
   * The URL at which the report can be accessed.
   * @return remoteAccessUrl
   */
  @javax.annotation.Nullable
  public String getRemoteAccessUrl() {
    return remoteAccessUrl;
  }

  public void setRemoteAccessUrl(String remoteAccessUrl) {
    this.remoteAccessUrl = remoteAccessUrl;
  }


  public ReportAvailableNotificationContent success(Boolean success) {
    this.success = success;
    return this;
  }

  /**
   * Indicates whether the event resulted in a success.
   * @return success
   */
  @javax.annotation.Nullable
  public Boolean getSuccess() {
    return success;
  }

  public void setSuccess(Boolean success) {
    this.success = success;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReportAvailableNotificationContent reportAvailableNotificationContent = (ReportAvailableNotificationContent) o;
    return Objects.equals(this.accountCode, reportAvailableNotificationContent.accountCode) &&
        Objects.equals(this.accountType, reportAvailableNotificationContent.accountType) &&
        Objects.equals(this.eventDate, reportAvailableNotificationContent.eventDate) &&
        Objects.equals(this.remoteAccessUrl, reportAvailableNotificationContent.remoteAccessUrl) &&
        Objects.equals(this.success, reportAvailableNotificationContent.success);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountCode, accountType, eventDate, remoteAccessUrl, success);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReportAvailableNotificationContent {\n");
    sb.append("    accountCode: ").append(toIndentedString(accountCode)).append("\n");
    sb.append("    accountType: ").append(toIndentedString(accountType)).append("\n");
    sb.append("    eventDate: ").append(toIndentedString(eventDate)).append("\n");
    sb.append("    remoteAccessUrl: ").append(toIndentedString(remoteAccessUrl)).append("\n");
    sb.append("    success: ").append(toIndentedString(success)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accountCode");
    openapiFields.add("accountType");
    openapiFields.add("eventDate");
    openapiFields.add("remoteAccessUrl");
    openapiFields.add("success");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ReportAvailableNotificationContent
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ReportAvailableNotificationContent.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReportAvailableNotificationContent is not found in the empty JSON string", ReportAvailableNotificationContent.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ReportAvailableNotificationContent.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ReportAvailableNotificationContent` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("accountCode") != null && !jsonObj.get("accountCode").isJsonNull()) && !jsonObj.get("accountCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountCode").toString()));
      }
      if ((jsonObj.get("accountType") != null && !jsonObj.get("accountType").isJsonNull()) && !jsonObj.get("accountType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountType").toString()));
      }
      if ((jsonObj.get("remoteAccessUrl") != null && !jsonObj.get("remoteAccessUrl").isJsonNull()) && !jsonObj.get("remoteAccessUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `remoteAccessUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("remoteAccessUrl").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReportAvailableNotificationContent.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReportAvailableNotificationContent' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReportAvailableNotificationContent> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReportAvailableNotificationContent.class));

       return (TypeAdapter<T>) new TypeAdapter<ReportAvailableNotificationContent>() {
           @Override
           public void write(JsonWriter out, ReportAvailableNotificationContent value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ReportAvailableNotificationContent read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ReportAvailableNotificationContent given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ReportAvailableNotificationContent
   * @throws IOException if the JSON string is invalid with respect to ReportAvailableNotificationContent
   */
  public static ReportAvailableNotificationContent fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReportAvailableNotificationContent.class);
  }

  /**
   * Convert an instance of ReportAvailableNotificationContent to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

