/*
 * Classic Platforms - Notifications
 * This API is used for the classic integration. If you are just starting your implementation, refer to our [new integration guide](https://docs.adyen.com/marketplaces-and-platforms) instead.  The Notification API sends notifications to the endpoints specified in a given subscription.  Subscriptions are managed through the Notification Configuration API. The API specifications listed here detail the format of each notification.  For more information, refer to our [documentation](https://docs.adyen.com/marketplaces-and-platforms/classic/notifications).
 *
 * The version of the OpenAPI document: 5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AccountFundsBelowThresholdNotification;
import org.openapitools.client.model.AccountHolderPayoutNotification;
import org.openapitools.client.model.BeneficiarySetupNotification;
import org.openapitools.client.model.CompensateNegativeBalanceNotification;
import org.openapitools.client.model.DirectDebitInitiatedNotification;
import org.openapitools.client.model.NotificationResponse;
import org.openapitools.client.model.RefundFundsTransferNotification;
import org.openapitools.client.model.ScheduledRefundsNotification;
import org.openapitools.client.model.TransferFundsNotification;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for FundManagementApi
 */
@Disabled
public class FundManagementApiTest {

    private final FundManagementApi api = new FundManagementApi();

    /**
     * Liable account&#39;s funds are below configured threshold
     *
     * Adyen sends this notification when the current funds of your liable account are below the configured threshold.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postACCOUNTFUNDSBELOWTHRESHOLDTest() throws ApiException {
        AccountFundsBelowThresholdNotification accountFundsBelowThresholdNotification = null;
        NotificationResponse response = api.postACCOUNTFUNDSBELOWTHRESHOLD(accountFundsBelowThresholdNotification);
        // TODO: test validations
    }

    /**
     * Paid out to account holder
     *
     * Adyen sends this notification when a [payout request](https://docs.adyen.com/api-explorer/#/Fund/latest/post/payoutAccountHolder) to an account holder is processed and the payout is scheduled.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postACCOUNTHOLDERPAYOUTTest() throws ApiException {
        AccountHolderPayoutNotification accountHolderPayoutNotification = null;
        NotificationResponse response = api.postACCOUNTHOLDERPAYOUT(accountHolderPayoutNotification);
        // TODO: test validations
    }

    /**
     * Beneficiary defined
     *
     * Adyen sends this notification when a [benefactor/beneficiary relationship is created](https://docs.adyen.com/api-explorer/#/Fund/latest/post/transferFunds).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postBENEFICIARYSETUPTest() throws ApiException {
        BeneficiarySetupNotification beneficiarySetupNotification = null;
        NotificationResponse response = api.postBENEFICIARYSETUP(beneficiarySetupNotification);
        // TODO: test validations
    }

    /**
     * Negative account balances compensated
     *
     * Adyen sends this notification when funds are transferred from your platform&#39;s liable account to an overdrawn account to compensate for the overdraft.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postCOMPENSATENEGATIVEBALANCETest() throws ApiException {
        CompensateNegativeBalanceNotification compensateNegativeBalanceNotification = null;
        NotificationResponse response = api.postCOMPENSATENEGATIVEBALANCE(compensateNegativeBalanceNotification);
        // TODO: test validations
    }

    /**
     * Automated direct debit initiated
     *
     * Adyen sends this notification when a [direct debit is initiated](https://docs.adyen.com/api-explorer/#/Fund/latest/post/debitAccountHolder).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postDIRECTDEBITINITIATEDTest() throws ApiException {
        DirectDebitInitiatedNotification directDebitInitiatedNotification = null;
        NotificationResponse response = api.postDIRECTDEBITINITIATED(directDebitInitiatedNotification);
        // TODO: test validations
    }

    /**
     * Funds transfer between accounts refunded
     *
     * Adyen sends this notification when [funds transferred between accounts are refunded](https://docs.adyen.com/api-explorer/#/Fund/v6/latest/refundFundsTransfer).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postREFUNDFUNDSTRANSFERTest() throws ApiException {
        RefundFundsTransferNotification refundFundsTransferNotification = null;
        NotificationResponse response = api.postREFUNDFUNDSTRANSFER(refundFundsTransferNotification);
        // TODO: test validations
    }

    /**
     * &#39;Refund Transfers Not Paid Out&#39; call processed and refunds scheduled
     *
     * Adyen sends this notification when a request to [refund transfers that are not yet paid out](https://docs.adyen.com/api-explorer/#/Fund/latest/refundNotPaidOutTransfers) is processed and the associated refunds are scheduled.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postSCHEDULEDREFUNDSTest() throws ApiException {
        ScheduledRefundsNotification scheduledRefundsNotification = null;
        NotificationResponse response = api.postSCHEDULEDREFUNDS(scheduledRefundsNotification);
        // TODO: test validations
    }

    /**
     * Funds transferred between accounts
     *
     * Adyen sends this notification when [funds are transferred between accounts](https://docs.adyen.com/api-explorer/#/Fund/latest/post/transferFunds).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postTRANSFERFUNDSTest() throws ApiException {
        TransferFundsNotification transferFundsNotification = null;
        NotificationResponse response = api.postTRANSFERFUNDS(transferFundsNotification);
        // TODO: test validations
    }

}
