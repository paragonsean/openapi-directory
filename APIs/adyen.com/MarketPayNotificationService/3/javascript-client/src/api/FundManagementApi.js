/**
 * Classic Platforms - Notifications
 * This API is used for the classic integration. If you are just starting your implementation, refer to our [new integration guide](https://docs.adyen.com/marketplaces-and-platforms) instead.  The Notification API sends notifications to the endpoints specified in a given subscription.  Subscriptions are managed through the Notification Configuration API. The API specifications listed here detail the format of each notification.  For more information, refer to our [documentation](https://docs.adyen.com/marketplaces-and-platforms/classic/notifications).
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AccountFundsBelowThresholdNotification from '../model/AccountFundsBelowThresholdNotification';
import AccountHolderPayoutNotification from '../model/AccountHolderPayoutNotification';
import BeneficiarySetupNotification from '../model/BeneficiarySetupNotification';
import CompensateNegativeBalanceNotification from '../model/CompensateNegativeBalanceNotification';
import DirectDebitInitiatedNotification from '../model/DirectDebitInitiatedNotification';
import NotificationResponse from '../model/NotificationResponse';
import RefundFundsTransferNotification from '../model/RefundFundsTransferNotification';
import ScheduledRefundsNotification from '../model/ScheduledRefundsNotification';
import TransferFundsNotification from '../model/TransferFundsNotification';

/**
* FundManagement service.
* @module api/FundManagementApi
* @version 3
*/
export default class FundManagementApi {

    /**
    * Constructs a new FundManagementApi. 
    * @alias module:api/FundManagementApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the postACCOUNTFUNDSBELOWTHRESHOLD operation.
     * @callback module:api/FundManagementApi~postACCOUNTFUNDSBELOWTHRESHOLDCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Liable account's funds are below configured threshold
     * Adyen sends this notification when the current funds of your liable account are below the configured threshold.
     * @param {Object} opts Optional parameters
     * @param {} [accountFundsBelowThresholdNotification] 
     * @param {module:api/FundManagementApi~postACCOUNTFUNDSBELOWTHRESHOLDCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link }
     */
    postACCOUNTFUNDSBELOWTHRESHOLD() {
      let postBody = opts['accountFundsBelowThresholdNotification'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BasicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/ACCOUNT_FUNDS_BELOW_THRESHOLD', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postACCOUNTHOLDERPAYOUT operation.
     * @callback module:api/FundManagementApi~postACCOUNTHOLDERPAYOUTCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Paid out to account holder
     * Adyen sends this notification when a [payout request](https://docs.adyen.com/api-explorer/#/Fund/latest/post/payoutAccountHolder) to an account holder is processed and the payout is scheduled.
     * @param {Object} opts Optional parameters
     * @param {} [accountHolderPayoutNotification] 
     * @param {module:api/FundManagementApi~postACCOUNTHOLDERPAYOUTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link }
     */
    postACCOUNTHOLDERPAYOUT() {
      let postBody = opts['accountHolderPayoutNotification'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BasicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/ACCOUNT_HOLDER_PAYOUT', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postBENEFICIARYSETUP operation.
     * @callback module:api/FundManagementApi~postBENEFICIARYSETUPCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Beneficiary defined
     * Adyen sends this notification when a [benefactor/beneficiary relationship is created](https://docs.adyen.com/api-explorer/#/Fund/latest/post/transferFunds).
     * @param {Object} opts Optional parameters
     * @param {} [beneficiarySetupNotification] 
     * @param {module:api/FundManagementApi~postBENEFICIARYSETUPCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link }
     */
    postBENEFICIARYSETUP() {
      let postBody = opts['beneficiarySetupNotification'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BasicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/BENEFICIARY_SETUP', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postCOMPENSATENEGATIVEBALANCE operation.
     * @callback module:api/FundManagementApi~postCOMPENSATENEGATIVEBALANCECallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Negative account balances compensated
     * Adyen sends this notification when funds are transferred from your platform's liable account to an overdrawn account to compensate for the overdraft.
     * @param {Object} opts Optional parameters
     * @param {} [compensateNegativeBalanceNotification] 
     * @param {module:api/FundManagementApi~postCOMPENSATENEGATIVEBALANCECallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link }
     */
    postCOMPENSATENEGATIVEBALANCE() {
      let postBody = opts['compensateNegativeBalanceNotification'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BasicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/COMPENSATE_NEGATIVE_BALANCE', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postDIRECTDEBITINITIATED operation.
     * @callback module:api/FundManagementApi~postDIRECTDEBITINITIATEDCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Automated direct debit initiated
     * Adyen sends this notification when a [direct debit is initiated](https://docs.adyen.com/api-explorer/#/Fund/latest/post/debitAccountHolder).
     * @param {Object} opts Optional parameters
     * @param {} [directDebitInitiatedNotification] 
     * @param {module:api/FundManagementApi~postDIRECTDEBITINITIATEDCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link }
     */
    postDIRECTDEBITINITIATED() {
      let postBody = opts['directDebitInitiatedNotification'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BasicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/DIRECT_DEBIT_INITIATED', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postREFUNDFUNDSTRANSFER operation.
     * @callback module:api/FundManagementApi~postREFUNDFUNDSTRANSFERCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Funds transfer between accounts refunded
     * Adyen sends this notification when [funds transferred between accounts are refunded](https://docs.adyen.com/api-explorer/#/Fund/v6/latest/refundFundsTransfer).
     * @param {Object} opts Optional parameters
     * @param {} [refundFundsTransferNotification] 
     * @param {module:api/FundManagementApi~postREFUNDFUNDSTRANSFERCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link }
     */
    postREFUNDFUNDSTRANSFER() {
      let postBody = opts['refundFundsTransferNotification'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BasicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/REFUND_FUNDS_TRANSFER', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postSCHEDULEDREFUNDS operation.
     * @callback module:api/FundManagementApi~postSCHEDULEDREFUNDSCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 'Refund Transfers Not Paid Out' call processed and refunds scheduled
     * Adyen sends this notification when a request to [refund transfers that are not yet paid out](https://docs.adyen.com/api-explorer/#/Fund/latest/refundNotPaidOutTransfers) is processed and the associated refunds are scheduled.
     * @param {Object} opts Optional parameters
     * @param {} [scheduledRefundsNotification] 
     * @param {module:api/FundManagementApi~postSCHEDULEDREFUNDSCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link }
     */
    postSCHEDULEDREFUNDS() {
      let postBody = opts['scheduledRefundsNotification'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BasicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/SCHEDULED_REFUNDS', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postTRANSFERFUNDS operation.
     * @callback module:api/FundManagementApi~postTRANSFERFUNDSCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Funds transferred between accounts
     * Adyen sends this notification when [funds are transferred between accounts](https://docs.adyen.com/api-explorer/#/Fund/latest/post/transferFunds).
     * @param {Object} opts Optional parameters
     * @param {} [transferFundsNotification] 
     * @param {module:api/FundManagementApi~postTRANSFERFUNDSCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link }
     */
    postTRANSFERFUNDS() {
      let postBody = opts['transferFundsNotification'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BasicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/TRANSFER_FUNDS', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
