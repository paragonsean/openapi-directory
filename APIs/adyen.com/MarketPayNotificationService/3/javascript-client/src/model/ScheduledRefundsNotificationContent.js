/**
 * Classic Platforms - Notifications
 * This API is used for the classic integration. If you are just starting your implementation, refer to our [new integration guide](https://docs.adyen.com/marketplaces-and-platforms) instead.  The Notification API sends notifications to the endpoints specified in a given subscription.  Subscriptions are managed through the Notification Configuration API. The API specifications listed here detail the format of each notification.  For more information, refer to our [documentation](https://docs.adyen.com/marketplaces-and-platforms/classic/notifications).
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import RefundResultWrapper from './RefundResultWrapper';
import Transaction from './Transaction';

/**
 * The ScheduledRefundsNotificationContent model module.
 * @module model/ScheduledRefundsNotificationContent
 * @version 3
 */
class ScheduledRefundsNotificationContent {
    /**
     * Constructs a new <code>ScheduledRefundsNotificationContent</code>.
     * @alias module:model/ScheduledRefundsNotificationContent
     */
    constructor() { 
        
        ScheduledRefundsNotificationContent.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ScheduledRefundsNotificationContent</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ScheduledRefundsNotificationContent} obj Optional instance to populate.
     * @return {module:model/ScheduledRefundsNotificationContent} The populated <code>ScheduledRefundsNotificationContent</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ScheduledRefundsNotificationContent();

            if (data.hasOwnProperty('accountCode')) {
                obj['accountCode'] = ApiClient.convertToType(data['accountCode'], 'String');
            }
            if (data.hasOwnProperty('accountHolderCode')) {
                obj['accountHolderCode'] = ApiClient.convertToType(data['accountHolderCode'], 'String');
            }
            if (data.hasOwnProperty('lastPayout')) {
                obj['lastPayout'] = Transaction.constructFromObject(data['lastPayout']);
            }
            if (data.hasOwnProperty('refundResults')) {
                obj['refundResults'] = ApiClient.convertToType(data['refundResults'], [RefundResultWrapper]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ScheduledRefundsNotificationContent</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ScheduledRefundsNotificationContent</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['accountCode'] && !(typeof data['accountCode'] === 'string' || data['accountCode'] instanceof String)) {
            throw new Error("Expected the field `accountCode` to be a primitive type in the JSON string but got " + data['accountCode']);
        }
        // ensure the json data is a string
        if (data['accountHolderCode'] && !(typeof data['accountHolderCode'] === 'string' || data['accountHolderCode'] instanceof String)) {
            throw new Error("Expected the field `accountHolderCode` to be a primitive type in the JSON string but got " + data['accountHolderCode']);
        }
        // validate the optional field `lastPayout`
        if (data['lastPayout']) { // data not null
          Transaction.validateJSON(data['lastPayout']);
        }
        if (data['refundResults']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['refundResults'])) {
                throw new Error("Expected the field `refundResults` to be an array in the JSON data but got " + data['refundResults']);
            }
            // validate the optional field `refundResults` (array)
            for (const item of data['refundResults']) {
                RefundResultWrapper.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * The code of the account.
 * @member {String} accountCode
 */
ScheduledRefundsNotificationContent.prototype['accountCode'] = undefined;

/**
 * The code of the Account Holder.
 * @member {String} accountHolderCode
 */
ScheduledRefundsNotificationContent.prototype['accountHolderCode'] = undefined;

/**
 * The most recent payout (after which all transactions were scheduled to be refunded).
 * @member {module:model/Transaction} lastPayout
 */
ScheduledRefundsNotificationContent.prototype['lastPayout'] = undefined;

/**
 * A list of the refunds that have been scheduled and their results.
 * @member {Array.<module:model/RefundResultWrapper>} refundResults
 */
ScheduledRefundsNotificationContent.prototype['refundResults'] = undefined;






export default ScheduledRefundsNotificationContent;

