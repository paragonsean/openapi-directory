/**
 * Classic Platforms - Notifications
 * This API is used for the classic integration. If you are just starting your implementation, refer to our [new integration guide](https://docs.adyen.com/marketplaces-and-platforms) instead.  The Notification API sends notifications to the endpoints specified in a given subscription.  Subscriptions are managed through the Notification Configuration API. The API specifications listed here detail the format of each notification.  For more information, refer to our [documentation](https://docs.adyen.com/marketplaces-and-platforms/classic/notifications).
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CloseAccountResponse model module.
 * @module model/CloseAccountResponse
 * @version 3
 */
class CloseAccountResponse {
    /**
     * Constructs a new <code>CloseAccountResponse</code>.
     * @alias module:model/CloseAccountResponse
     */
    constructor() { 
        
        CloseAccountResponse.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CloseAccountResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CloseAccountResponse} obj Optional instance to populate.
     * @return {module:model/CloseAccountResponse} The populated <code>CloseAccountResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CloseAccountResponse();

            if (data.hasOwnProperty('pspReference')) {
                obj['pspReference'] = ApiClient.convertToType(data['pspReference'], 'String');
            }
            if (data.hasOwnProperty('resultCode')) {
                obj['resultCode'] = ApiClient.convertToType(data['resultCode'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('submittedAsync')) {
                obj['submittedAsync'] = ApiClient.convertToType(data['submittedAsync'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CloseAccountResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CloseAccountResponse</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['pspReference'] && !(typeof data['pspReference'] === 'string' || data['pspReference'] instanceof String)) {
            throw new Error("Expected the field `pspReference` to be a primitive type in the JSON string but got " + data['pspReference']);
        }
        // ensure the json data is a string
        if (data['resultCode'] && !(typeof data['resultCode'] === 'string' || data['resultCode'] instanceof String)) {
            throw new Error("Expected the field `resultCode` to be a primitive type in the JSON string but got " + data['resultCode']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }

        return true;
    }


}



/**
 * The reference of a request. Can be used to uniquely identify the request.
 * @member {String} pspReference
 */
CloseAccountResponse.prototype['pspReference'] = undefined;

/**
 * The result code.
 * @member {String} resultCode
 */
CloseAccountResponse.prototype['resultCode'] = undefined;

/**
 * The new status of the account. >Permitted values: `Active`, `Inactive`, `Suspended`, `Closed`.
 * @member {module:model/CloseAccountResponse.StatusEnum} status
 */
CloseAccountResponse.prototype['status'] = undefined;

/**
 * Indicates whether the request is processed asynchronously. Depending on the request's platform settings, the following scenarios may be applied: * **true**: The request is queued and will be executed when the providing service is available in the order in which the requests are received. * **false**: The processing of the request is immediately attempted; it may result in an error if the providing service is unavailable.
 * @member {Boolean} submittedAsync
 */
CloseAccountResponse.prototype['submittedAsync'] = undefined;





/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
CloseAccountResponse['StatusEnum'] = {

    /**
     * value: "Active"
     * @const
     */
    "Active": "Active",

    /**
     * value: "Closed"
     * @const
     */
    "Closed": "Closed",

    /**
     * value: "Inactive"
     * @const
     */
    "Inactive": "Inactive",

    /**
     * value: "Suspended"
     * @const
     */
    "Suspended": "Suspended"
};



export default CloseAccountResponse;

