# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.account_event_wrapper import AccountEventWrapper
from openapi_server.models.account_payout_state import AccountPayoutState
from openapi_server.models.account_processing_state import AccountProcessingState
from openapi_server import util


class AccountHolderStatus(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, events: List[AccountEventWrapper]=None, payout_state: AccountPayoutState=None, processing_state: AccountProcessingState=None, status: str=None, status_reason: str=None):
        """AccountHolderStatus - a model defined in OpenAPI

        :param events: The events of this AccountHolderStatus.
        :param payout_state: The payout_state of this AccountHolderStatus.
        :param processing_state: The processing_state of this AccountHolderStatus.
        :param status: The status of this AccountHolderStatus.
        :param status_reason: The status_reason of this AccountHolderStatus.
        """
        self.openapi_types = {
            'events': List[AccountEventWrapper],
            'payout_state': AccountPayoutState,
            'processing_state': AccountProcessingState,
            'status': str,
            'status_reason': str
        }

        self.attribute_map = {
            'events': 'events',
            'payout_state': 'payoutState',
            'processing_state': 'processingState',
            'status': 'status',
            'status_reason': 'statusReason'
        }

        self._events = events
        self._payout_state = payout_state
        self._processing_state = processing_state
        self._status = status
        self._status_reason = status_reason

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AccountHolderStatus':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AccountHolderStatus of this AccountHolderStatus.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def events(self):
        """Gets the events of this AccountHolderStatus.

        A list of events scheduled for the account holder.

        :return: The events of this AccountHolderStatus.
        :rtype: List[AccountEventWrapper]
        """
        return self._events

    @events.setter
    def events(self, events):
        """Sets the events of this AccountHolderStatus.

        A list of events scheduled for the account holder.

        :param events: The events of this AccountHolderStatus.
        :type events: List[AccountEventWrapper]
        """

        self._events = events

    @property
    def payout_state(self):
        """Gets the payout_state of this AccountHolderStatus.

        The payout state of the account holder.

        :return: The payout_state of this AccountHolderStatus.
        :rtype: AccountPayoutState
        """
        return self._payout_state

    @payout_state.setter
    def payout_state(self, payout_state):
        """Sets the payout_state of this AccountHolderStatus.

        The payout state of the account holder.

        :param payout_state: The payout_state of this AccountHolderStatus.
        :type payout_state: AccountPayoutState
        """

        self._payout_state = payout_state

    @property
    def processing_state(self):
        """Gets the processing_state of this AccountHolderStatus.

        The processing state of the account holder.

        :return: The processing_state of this AccountHolderStatus.
        :rtype: AccountProcessingState
        """
        return self._processing_state

    @processing_state.setter
    def processing_state(self, processing_state):
        """Sets the processing_state of this AccountHolderStatus.

        The processing state of the account holder.

        :param processing_state: The processing_state of this AccountHolderStatus.
        :type processing_state: AccountProcessingState
        """

        self._processing_state = processing_state

    @property
    def status(self):
        """Gets the status of this AccountHolderStatus.

        The status of the account holder. >Permitted values: `Active`, `Inactive`, `Suspended`, `Closed`.

        :return: The status of this AccountHolderStatus.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this AccountHolderStatus.

        The status of the account holder. >Permitted values: `Active`, `Inactive`, `Suspended`, `Closed`.

        :param status: The status of this AccountHolderStatus.
        :type status: str
        """
        allowed_values = ["Active", "Closed", "Inactive", "Suspended"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def status_reason(self):
        """Gets the status_reason of this AccountHolderStatus.

        The reason why the status was assigned to the account holder.

        :return: The status_reason of this AccountHolderStatus.
        :rtype: str
        """
        return self._status_reason

    @status_reason.setter
    def status_reason(self, status_reason):
        """Sets the status_reason of this AccountHolderStatus.

        The reason why the status was assigned to the account holder.

        :param status_reason: The status_reason of this AccountHolderStatus.
        :type status_reason: str
        """

        self._status_reason = status_reason
