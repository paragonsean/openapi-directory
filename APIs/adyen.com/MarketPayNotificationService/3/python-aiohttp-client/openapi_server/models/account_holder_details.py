# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.bank_account_detail_wrapper import BankAccountDetailWrapper
from openapi_server.models.business_details import BusinessDetails
from openapi_server.models.individual_details import IndividualDetails
from openapi_server.models.vias_address import ViasAddress
from openapi_server import util


class AccountHolderDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address: ViasAddress=None, bank_account_details: List[BankAccountDetailWrapper]=None, business_details: BusinessDetails=None, email: str=None, full_phone_number: str=None, individual_details: IndividualDetails=None, last_review_date: str=None, merchant_category_code: str=None, metadata: Dict[str, str]=None, principal_business_address: ViasAddress=None, web_address: str=None):
        """AccountHolderDetails - a model defined in OpenAPI

        :param address: The address of this AccountHolderDetails.
        :param bank_account_details: The bank_account_details of this AccountHolderDetails.
        :param business_details: The business_details of this AccountHolderDetails.
        :param email: The email of this AccountHolderDetails.
        :param full_phone_number: The full_phone_number of this AccountHolderDetails.
        :param individual_details: The individual_details of this AccountHolderDetails.
        :param last_review_date: The last_review_date of this AccountHolderDetails.
        :param merchant_category_code: The merchant_category_code of this AccountHolderDetails.
        :param metadata: The metadata of this AccountHolderDetails.
        :param principal_business_address: The principal_business_address of this AccountHolderDetails.
        :param web_address: The web_address of this AccountHolderDetails.
        """
        self.openapi_types = {
            'address': ViasAddress,
            'bank_account_details': List[BankAccountDetailWrapper],
            'business_details': BusinessDetails,
            'email': str,
            'full_phone_number': str,
            'individual_details': IndividualDetails,
            'last_review_date': str,
            'merchant_category_code': str,
            'metadata': Dict[str, str],
            'principal_business_address': ViasAddress,
            'web_address': str
        }

        self.attribute_map = {
            'address': 'address',
            'bank_account_details': 'bankAccountDetails',
            'business_details': 'businessDetails',
            'email': 'email',
            'full_phone_number': 'fullPhoneNumber',
            'individual_details': 'individualDetails',
            'last_review_date': 'lastReviewDate',
            'merchant_category_code': 'merchantCategoryCode',
            'metadata': 'metadata',
            'principal_business_address': 'principalBusinessAddress',
            'web_address': 'webAddress'
        }

        self._address = address
        self._bank_account_details = bank_account_details
        self._business_details = business_details
        self._email = email
        self._full_phone_number = full_phone_number
        self._individual_details = individual_details
        self._last_review_date = last_review_date
        self._merchant_category_code = merchant_category_code
        self._metadata = metadata
        self._principal_business_address = principal_business_address
        self._web_address = web_address

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AccountHolderDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AccountHolderDetails of this AccountHolderDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address(self):
        """Gets the address of this AccountHolderDetails.

        The address of the account holder.

        :return: The address of this AccountHolderDetails.
        :rtype: ViasAddress
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this AccountHolderDetails.

        The address of the account holder.

        :param address: The address of this AccountHolderDetails.
        :type address: ViasAddress
        """
        if address is None:
            raise ValueError("Invalid value for `address`, must not be `None`")

        self._address = address

    @property
    def bank_account_details(self):
        """Gets the bank_account_details of this AccountHolderDetails.

        Array of bank accounts associated with the account holder. For details about the required `bankAccountDetail` fields, see [Required information](https://docs.adyen.com/marketplaces-and-platforms/classic/verification-process/required-information).

        :return: The bank_account_details of this AccountHolderDetails.
        :rtype: List[BankAccountDetailWrapper]
        """
        return self._bank_account_details

    @bank_account_details.setter
    def bank_account_details(self, bank_account_details):
        """Sets the bank_account_details of this AccountHolderDetails.

        Array of bank accounts associated with the account holder. For details about the required `bankAccountDetail` fields, see [Required information](https://docs.adyen.com/marketplaces-and-platforms/classic/verification-process/required-information).

        :param bank_account_details: The bank_account_details of this AccountHolderDetails.
        :type bank_account_details: List[BankAccountDetailWrapper]
        """

        self._bank_account_details = bank_account_details

    @property
    def business_details(self):
        """Gets the business_details of this AccountHolderDetails.

        Details about the business or nonprofit account holder. Required when creating an account holder with `legalEntity` **Business** or **NonProfit**.

        :return: The business_details of this AccountHolderDetails.
        :rtype: BusinessDetails
        """
        return self._business_details

    @business_details.setter
    def business_details(self, business_details):
        """Sets the business_details of this AccountHolderDetails.

        Details about the business or nonprofit account holder. Required when creating an account holder with `legalEntity` **Business** or **NonProfit**.

        :param business_details: The business_details of this AccountHolderDetails.
        :type business_details: BusinessDetails
        """

        self._business_details = business_details

    @property
    def email(self):
        """Gets the email of this AccountHolderDetails.

        The email address of the account holder.

        :return: The email of this AccountHolderDetails.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this AccountHolderDetails.

        The email address of the account holder.

        :param email: The email of this AccountHolderDetails.
        :type email: str
        """

        self._email = email

    @property
    def full_phone_number(self):
        """Gets the full_phone_number of this AccountHolderDetails.

        The phone number of the account holder provided as a single string. It will be handled as a landline phone. **Examples:** \"0031 6 11 22 33 44\", \"+316/1122-3344\", \"(0031) 611223344\"

        :return: The full_phone_number of this AccountHolderDetails.
        :rtype: str
        """
        return self._full_phone_number

    @full_phone_number.setter
    def full_phone_number(self, full_phone_number):
        """Sets the full_phone_number of this AccountHolderDetails.

        The phone number of the account holder provided as a single string. It will be handled as a landline phone. **Examples:** \"0031 6 11 22 33 44\", \"+316/1122-3344\", \"(0031) 611223344\"

        :param full_phone_number: The full_phone_number of this AccountHolderDetails.
        :type full_phone_number: str
        """

        self._full_phone_number = full_phone_number

    @property
    def individual_details(self):
        """Gets the individual_details of this AccountHolderDetails.

        Details about the individual account holder. Required when creating an account holder with `legalEntity` **Individual**. 

        :return: The individual_details of this AccountHolderDetails.
        :rtype: IndividualDetails
        """
        return self._individual_details

    @individual_details.setter
    def individual_details(self, individual_details):
        """Sets the individual_details of this AccountHolderDetails.

        Details about the individual account holder. Required when creating an account holder with `legalEntity` **Individual**. 

        :param individual_details: The individual_details of this AccountHolderDetails.
        :type individual_details: IndividualDetails
        """

        self._individual_details = individual_details

    @property
    def last_review_date(self):
        """Gets the last_review_date of this AccountHolderDetails.

        Date when you last reviewed the account holder's information, in ISO-8601 YYYY-MM-DD format. For example, **2020-01-31**.

        :return: The last_review_date of this AccountHolderDetails.
        :rtype: str
        """
        return self._last_review_date

    @last_review_date.setter
    def last_review_date(self, last_review_date):
        """Sets the last_review_date of this AccountHolderDetails.

        Date when you last reviewed the account holder's information, in ISO-8601 YYYY-MM-DD format. For example, **2020-01-31**.

        :param last_review_date: The last_review_date of this AccountHolderDetails.
        :type last_review_date: str
        """

        self._last_review_date = last_review_date

    @property
    def merchant_category_code(self):
        """Gets the merchant_category_code of this AccountHolderDetails.

        The Merchant Category Code of the account holder. > If not specified in the request, this will be derived from the platform account (which is configured by Adyen).

        :return: The merchant_category_code of this AccountHolderDetails.
        :rtype: str
        """
        return self._merchant_category_code

    @merchant_category_code.setter
    def merchant_category_code(self, merchant_category_code):
        """Sets the merchant_category_code of this AccountHolderDetails.

        The Merchant Category Code of the account holder. > If not specified in the request, this will be derived from the platform account (which is configured by Adyen).

        :param merchant_category_code: The merchant_category_code of this AccountHolderDetails.
        :type merchant_category_code: str
        """

        self._merchant_category_code = merchant_category_code

    @property
    def metadata(self):
        """Gets the metadata of this AccountHolderDetails.

        A set of key and value pairs for general use by the account holder or merchant. The keys do not have specific names and may be used for storing miscellaneous data as desired. > The values being stored have a maximum length of eighty (80) characters and will be truncated if necessary. > Note that during an update of metadata, the omission of existing key-value pairs will result in the deletion of those key-value pairs.

        :return: The metadata of this AccountHolderDetails.
        :rtype: Dict[str, str]
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this AccountHolderDetails.

        A set of key and value pairs for general use by the account holder or merchant. The keys do not have specific names and may be used for storing miscellaneous data as desired. > The values being stored have a maximum length of eighty (80) characters and will be truncated if necessary. > Note that during an update of metadata, the omission of existing key-value pairs will result in the deletion of those key-value pairs.

        :param metadata: The metadata of this AccountHolderDetails.
        :type metadata: Dict[str, str]
        """

        self._metadata = metadata

    @property
    def principal_business_address(self):
        """Gets the principal_business_address of this AccountHolderDetails.

        The principal business address of the account holder.

        :return: The principal_business_address of this AccountHolderDetails.
        :rtype: ViasAddress
        """
        return self._principal_business_address

    @principal_business_address.setter
    def principal_business_address(self, principal_business_address):
        """Sets the principal_business_address of this AccountHolderDetails.

        The principal business address of the account holder.

        :param principal_business_address: The principal_business_address of this AccountHolderDetails.
        :type principal_business_address: ViasAddress
        """

        self._principal_business_address = principal_business_address

    @property
    def web_address(self):
        """Gets the web_address of this AccountHolderDetails.

        The URL of the website of the account holder.

        :return: The web_address of this AccountHolderDetails.
        :rtype: str
        """
        return self._web_address

    @web_address.setter
    def web_address(self, web_address):
        """Sets the web_address of this AccountHolderDetails.

        The URL of the website of the account holder.

        :param web_address: The web_address of this AccountHolderDetails.
        :type web_address: str
        """

        self._web_address = web_address
