# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.kyc_check_data_summary_item_wrapper import KYCCheckDataSummaryItemWrapper
from openapi_server import util


class AccountHolderVerificationNotificationContent(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_holder_code: str=None, bank_account_uuid: str=None, shareholder_code: str=None, signatory_code: str=None, status_summary_items: List[KYCCheckDataSummaryItemWrapper]=None, verification_status: str=None, verification_type: str=None):
        """AccountHolderVerificationNotificationContent - a model defined in OpenAPI

        :param account_holder_code: The account_holder_code of this AccountHolderVerificationNotificationContent.
        :param bank_account_uuid: The bank_account_uuid of this AccountHolderVerificationNotificationContent.
        :param shareholder_code: The shareholder_code of this AccountHolderVerificationNotificationContent.
        :param signatory_code: The signatory_code of this AccountHolderVerificationNotificationContent.
        :param status_summary_items: The status_summary_items of this AccountHolderVerificationNotificationContent.
        :param verification_status: The verification_status of this AccountHolderVerificationNotificationContent.
        :param verification_type: The verification_type of this AccountHolderVerificationNotificationContent.
        """
        self.openapi_types = {
            'account_holder_code': str,
            'bank_account_uuid': str,
            'shareholder_code': str,
            'signatory_code': str,
            'status_summary_items': List[KYCCheckDataSummaryItemWrapper],
            'verification_status': str,
            'verification_type': str
        }

        self.attribute_map = {
            'account_holder_code': 'accountHolderCode',
            'bank_account_uuid': 'bankAccountUUID',
            'shareholder_code': 'shareholderCode',
            'signatory_code': 'signatoryCode',
            'status_summary_items': 'statusSummaryItems',
            'verification_status': 'verificationStatus',
            'verification_type': 'verificationType'
        }

        self._account_holder_code = account_holder_code
        self._bank_account_uuid = bank_account_uuid
        self._shareholder_code = shareholder_code
        self._signatory_code = signatory_code
        self._status_summary_items = status_summary_items
        self._verification_status = verification_status
        self._verification_type = verification_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AccountHolderVerificationNotificationContent':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AccountHolderVerificationNotificationContent of this AccountHolderVerificationNotificationContent.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_holder_code(self):
        """Gets the account_holder_code of this AccountHolderVerificationNotificationContent.

        The code of the account holder.

        :return: The account_holder_code of this AccountHolderVerificationNotificationContent.
        :rtype: str
        """
        return self._account_holder_code

    @account_holder_code.setter
    def account_holder_code(self, account_holder_code):
        """Sets the account_holder_code of this AccountHolderVerificationNotificationContent.

        The code of the account holder.

        :param account_holder_code: The account_holder_code of this AccountHolderVerificationNotificationContent.
        :type account_holder_code: str
        """

        self._account_holder_code = account_holder_code

    @property
    def bank_account_uuid(self):
        """Gets the bank_account_uuid of this AccountHolderVerificationNotificationContent.

        The unique ID of the bank account that has been verified.

        :return: The bank_account_uuid of this AccountHolderVerificationNotificationContent.
        :rtype: str
        """
        return self._bank_account_uuid

    @bank_account_uuid.setter
    def bank_account_uuid(self, bank_account_uuid):
        """Sets the bank_account_uuid of this AccountHolderVerificationNotificationContent.

        The unique ID of the bank account that has been verified.

        :param bank_account_uuid: The bank_account_uuid of this AccountHolderVerificationNotificationContent.
        :type bank_account_uuid: str
        """

        self._bank_account_uuid = bank_account_uuid

    @property
    def shareholder_code(self):
        """Gets the shareholder_code of this AccountHolderVerificationNotificationContent.

        The code of the shareholder that has been verified.

        :return: The shareholder_code of this AccountHolderVerificationNotificationContent.
        :rtype: str
        """
        return self._shareholder_code

    @shareholder_code.setter
    def shareholder_code(self, shareholder_code):
        """Sets the shareholder_code of this AccountHolderVerificationNotificationContent.

        The code of the shareholder that has been verified.

        :param shareholder_code: The shareholder_code of this AccountHolderVerificationNotificationContent.
        :type shareholder_code: str
        """

        self._shareholder_code = shareholder_code

    @property
    def signatory_code(self):
        """Gets the signatory_code of this AccountHolderVerificationNotificationContent.

        The code of the signatory that has been verified.

        :return: The signatory_code of this AccountHolderVerificationNotificationContent.
        :rtype: str
        """
        return self._signatory_code

    @signatory_code.setter
    def signatory_code(self, signatory_code):
        """Sets the signatory_code of this AccountHolderVerificationNotificationContent.

        The code of the signatory that has been verified.

        :param signatory_code: The signatory_code of this AccountHolderVerificationNotificationContent.
        :type signatory_code: str
        """

        self._signatory_code = signatory_code

    @property
    def status_summary_items(self):
        """Gets the status_summary_items of this AccountHolderVerificationNotificationContent.

        A summary of the verification status.

        :return: The status_summary_items of this AccountHolderVerificationNotificationContent.
        :rtype: List[KYCCheckDataSummaryItemWrapper]
        """
        return self._status_summary_items

    @status_summary_items.setter
    def status_summary_items(self, status_summary_items):
        """Sets the status_summary_items of this AccountHolderVerificationNotificationContent.

        A summary of the verification status.

        :param status_summary_items: The status_summary_items of this AccountHolderVerificationNotificationContent.
        :type status_summary_items: List[KYCCheckDataSummaryItemWrapper]
        """

        self._status_summary_items = status_summary_items

    @property
    def verification_status(self):
        """Gets the verification_status of this AccountHolderVerificationNotificationContent.

        The status of verification.

        :return: The verification_status of this AccountHolderVerificationNotificationContent.
        :rtype: str
        """
        return self._verification_status

    @verification_status.setter
    def verification_status(self, verification_status):
        """Sets the verification_status of this AccountHolderVerificationNotificationContent.

        The status of verification.

        :param verification_status: The verification_status of this AccountHolderVerificationNotificationContent.
        :type verification_status: str
        """
        allowed_values = ["AWAITING_DATA", "DATA_PROVIDED", "FAILED", "INVALID_DATA", "PASSED", "PENDING", "PENDING_REVIEW", "RETRY_LIMIT_REACHED", "UNCHECKED"]  # noqa: E501
        if verification_status not in allowed_values:
            raise ValueError(
                "Invalid value for `verification_status` ({0}), must be one of {1}"
                .format(verification_status, allowed_values)
            )

        self._verification_status = verification_status

    @property
    def verification_type(self):
        """Gets the verification_type of this AccountHolderVerificationNotificationContent.

        The type of validation performed.

        :return: The verification_type of this AccountHolderVerificationNotificationContent.
        :rtype: str
        """
        return self._verification_type

    @verification_type.setter
    def verification_type(self, verification_type):
        """Sets the verification_type of this AccountHolderVerificationNotificationContent.

        The type of validation performed.

        :param verification_type: The verification_type of this AccountHolderVerificationNotificationContent.
        :type verification_type: str
        """
        allowed_values = ["BANK_ACCOUNT_VERIFICATION", "CARD_VERIFICATION", "COMPANY_VERIFICATION", "IDENTITY_VERIFICATION", "LEGAL_ARRANGEMENT_VERIFICATION", "NONPROFIT_VERIFICATION", "PASSPORT_VERIFICATION", "PAYOUT_METHOD_VERIFICATION", "PCI_VERIFICATION"]  # noqa: E501
        if verification_type not in allowed_values:
            raise ValueError(
                "Invalid value for `verification_type` ({0}), must be one of {1}"
                .format(verification_type, allowed_values)
            )

        self._verification_type = verification_type
