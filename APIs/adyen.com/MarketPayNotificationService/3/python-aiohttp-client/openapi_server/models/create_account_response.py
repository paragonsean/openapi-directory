# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.payout_schedule_response import PayoutScheduleResponse
from openapi_server import util


class CreateAccountResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_code: str=None, account_holder_code: str=None, payout_schedule: PayoutScheduleResponse=None, psp_reference: str=None, result_code: str=None, status: str=None, submitted_async: bool=None):
        """CreateAccountResponse - a model defined in OpenAPI

        :param account_code: The account_code of this CreateAccountResponse.
        :param account_holder_code: The account_holder_code of this CreateAccountResponse.
        :param payout_schedule: The payout_schedule of this CreateAccountResponse.
        :param psp_reference: The psp_reference of this CreateAccountResponse.
        :param result_code: The result_code of this CreateAccountResponse.
        :param status: The status of this CreateAccountResponse.
        :param submitted_async: The submitted_async of this CreateAccountResponse.
        """
        self.openapi_types = {
            'account_code': str,
            'account_holder_code': str,
            'payout_schedule': PayoutScheduleResponse,
            'psp_reference': str,
            'result_code': str,
            'status': str,
            'submitted_async': bool
        }

        self.attribute_map = {
            'account_code': 'accountCode',
            'account_holder_code': 'accountHolderCode',
            'payout_schedule': 'payoutSchedule',
            'psp_reference': 'pspReference',
            'result_code': 'resultCode',
            'status': 'status',
            'submitted_async': 'submittedAsync'
        }

        self._account_code = account_code
        self._account_holder_code = account_holder_code
        self._payout_schedule = payout_schedule
        self._psp_reference = psp_reference
        self._result_code = result_code
        self._status = status
        self._submitted_async = submitted_async

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateAccountResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateAccountResponse of this CreateAccountResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_code(self):
        """Gets the account_code of this CreateAccountResponse.

        The code of the new account.

        :return: The account_code of this CreateAccountResponse.
        :rtype: str
        """
        return self._account_code

    @account_code.setter
    def account_code(self, account_code):
        """Sets the account_code of this CreateAccountResponse.

        The code of the new account.

        :param account_code: The account_code of this CreateAccountResponse.
        :type account_code: str
        """

        self._account_code = account_code

    @property
    def account_holder_code(self):
        """Gets the account_holder_code of this CreateAccountResponse.

        The code of the account holder.

        :return: The account_holder_code of this CreateAccountResponse.
        :rtype: str
        """
        return self._account_holder_code

    @account_holder_code.setter
    def account_holder_code(self, account_holder_code):
        """Sets the account_holder_code of this CreateAccountResponse.

        The code of the account holder.

        :param account_holder_code: The account_holder_code of this CreateAccountResponse.
        :type account_holder_code: str
        """

        self._account_holder_code = account_holder_code

    @property
    def payout_schedule(self):
        """Gets the payout_schedule of this CreateAccountResponse.

        The payout schedule of the account.

        :return: The payout_schedule of this CreateAccountResponse.
        :rtype: PayoutScheduleResponse
        """
        return self._payout_schedule

    @payout_schedule.setter
    def payout_schedule(self, payout_schedule):
        """Sets the payout_schedule of this CreateAccountResponse.

        The payout schedule of the account.

        :param payout_schedule: The payout_schedule of this CreateAccountResponse.
        :type payout_schedule: PayoutScheduleResponse
        """

        self._payout_schedule = payout_schedule

    @property
    def psp_reference(self):
        """Gets the psp_reference of this CreateAccountResponse.

        The reference of a request. Can be used to uniquely identify the request.

        :return: The psp_reference of this CreateAccountResponse.
        :rtype: str
        """
        return self._psp_reference

    @psp_reference.setter
    def psp_reference(self, psp_reference):
        """Sets the psp_reference of this CreateAccountResponse.

        The reference of a request. Can be used to uniquely identify the request.

        :param psp_reference: The psp_reference of this CreateAccountResponse.
        :type psp_reference: str
        """

        self._psp_reference = psp_reference

    @property
    def result_code(self):
        """Gets the result_code of this CreateAccountResponse.

        The result code.

        :return: The result_code of this CreateAccountResponse.
        :rtype: str
        """
        return self._result_code

    @result_code.setter
    def result_code(self, result_code):
        """Sets the result_code of this CreateAccountResponse.

        The result code.

        :param result_code: The result_code of this CreateAccountResponse.
        :type result_code: str
        """

        self._result_code = result_code

    @property
    def status(self):
        """Gets the status of this CreateAccountResponse.

        The status of the account. >Permitted values: `Active`.

        :return: The status of this CreateAccountResponse.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this CreateAccountResponse.

        The status of the account. >Permitted values: `Active`.

        :param status: The status of this CreateAccountResponse.
        :type status: str
        """
        allowed_values = ["Active", "Closed", "Inactive", "Suspended"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def submitted_async(self):
        """Gets the submitted_async of this CreateAccountResponse.

        Indicates whether the request is processed asynchronously. Depending on the request's platform settings, the following scenarios may be applied: * **true**: The request is queued and will be executed when the providing service is available in the order in which the requests are received. * **false**: The processing of the request is immediately attempted; it may result in an error if the providing service is unavailable.

        :return: The submitted_async of this CreateAccountResponse.
        :rtype: bool
        """
        return self._submitted_async

    @submitted_async.setter
    def submitted_async(self, submitted_async):
        """Sets the submitted_async of this CreateAccountResponse.

        Indicates whether the request is processed asynchronously. Depending on the request's platform settings, the following scenarios may be applied: * **true**: The request is queued and will be executed when the providing service is available in the order in which the requests are received. * **false**: The processing of the request is immediately attempted; it may result in an error if the providing service is unavailable.

        :param submitted_async: The submitted_async of this CreateAccountResponse.
        :type submitted_async: bool
        """

        self._submitted_async = submitted_async
