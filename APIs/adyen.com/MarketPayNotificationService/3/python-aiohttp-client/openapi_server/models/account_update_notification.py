# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.update_account_response import UpdateAccountResponse
from openapi_server import util


class AccountUpdateNotification(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, content: UpdateAccountResponse=None, event_type: str=None, executing_user_key: str=None, live: bool=None, psp_reference: str=None):
        """AccountUpdateNotification - a model defined in OpenAPI

        :param content: The content of this AccountUpdateNotification.
        :param event_type: The event_type of this AccountUpdateNotification.
        :param executing_user_key: The executing_user_key of this AccountUpdateNotification.
        :param live: The live of this AccountUpdateNotification.
        :param psp_reference: The psp_reference of this AccountUpdateNotification.
        """
        self.openapi_types = {
            'content': UpdateAccountResponse,
            'event_type': str,
            'executing_user_key': str,
            'live': bool,
            'psp_reference': str
        }

        self.attribute_map = {
            'content': 'content',
            'event_type': 'eventType',
            'executing_user_key': 'executingUserKey',
            'live': 'live',
            'psp_reference': 'pspReference'
        }

        self._content = content
        self._event_type = event_type
        self._executing_user_key = executing_user_key
        self._live = live
        self._psp_reference = psp_reference

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AccountUpdateNotification':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AccountUpdateNotification of this AccountUpdateNotification.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def content(self):
        """Gets the content of this AccountUpdateNotification.

        The details of the Account update.

        :return: The content of this AccountUpdateNotification.
        :rtype: UpdateAccountResponse
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this AccountUpdateNotification.

        The details of the Account update.

        :param content: The content of this AccountUpdateNotification.
        :type content: UpdateAccountResponse
        """

        self._content = content

    @property
    def event_type(self):
        """Gets the event_type of this AccountUpdateNotification.

        The event type of the notification.

        :return: The event_type of this AccountUpdateNotification.
        :rtype: str
        """
        return self._event_type

    @event_type.setter
    def event_type(self, event_type):
        """Sets the event_type of this AccountUpdateNotification.

        The event type of the notification.

        :param event_type: The event_type of this AccountUpdateNotification.
        :type event_type: str
        """
        if event_type is None:
            raise ValueError("Invalid value for `event_type`, must not be `None`")

        self._event_type = event_type

    @property
    def executing_user_key(self):
        """Gets the executing_user_key of this AccountUpdateNotification.

        The user or process that has triggered the notification.

        :return: The executing_user_key of this AccountUpdateNotification.
        :rtype: str
        """
        return self._executing_user_key

    @executing_user_key.setter
    def executing_user_key(self, executing_user_key):
        """Sets the executing_user_key of this AccountUpdateNotification.

        The user or process that has triggered the notification.

        :param executing_user_key: The executing_user_key of this AccountUpdateNotification.
        :type executing_user_key: str
        """
        if executing_user_key is None:
            raise ValueError("Invalid value for `executing_user_key`, must not be `None`")

        self._executing_user_key = executing_user_key

    @property
    def live(self):
        """Gets the live of this AccountUpdateNotification.

        Indicates whether the notification originated from the live environment or the test environment. If true, the notification originated from the live environment. If false, the notification originated from the test environment.

        :return: The live of this AccountUpdateNotification.
        :rtype: bool
        """
        return self._live

    @live.setter
    def live(self, live):
        """Sets the live of this AccountUpdateNotification.

        Indicates whether the notification originated from the live environment or the test environment. If true, the notification originated from the live environment. If false, the notification originated from the test environment.

        :param live: The live of this AccountUpdateNotification.
        :type live: bool
        """
        if live is None:
            raise ValueError("Invalid value for `live`, must not be `None`")

        self._live = live

    @property
    def psp_reference(self):
        """Gets the psp_reference of this AccountUpdateNotification.

        The PSP reference of the request from which the notification originates.

        :return: The psp_reference of this AccountUpdateNotification.
        :rtype: str
        """
        return self._psp_reference

    @psp_reference.setter
    def psp_reference(self, psp_reference):
        """Sets the psp_reference of this AccountUpdateNotification.

        The PSP reference of the request from which the notification originates.

        :param psp_reference: The psp_reference of this AccountUpdateNotification.
        :type psp_reference: str
        """
        if psp_reference is None:
            raise ValueError("Invalid value for `psp_reference`, must not be `None`")

        self._psp_reference = psp_reference
