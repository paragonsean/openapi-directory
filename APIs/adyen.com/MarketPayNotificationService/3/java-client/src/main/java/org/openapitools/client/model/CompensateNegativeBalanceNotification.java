/*
 * Classic Platforms - Notifications
 * This API is used for the classic integration. If you are just starting your implementation, refer to our [new integration guide](https://docs.adyen.com/marketplaces-and-platforms) instead.  The Notification API sends notifications to the endpoints specified in a given subscription.  Subscriptions are managed through the Notification Configuration API. The API specifications listed here detail the format of each notification.  For more information, refer to our [documentation](https://docs.adyen.com/marketplaces-and-platforms/classic/notifications).
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.CompensateNegativeBalanceNotificationContent;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CompensateNegativeBalanceNotification
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:13:16.687289-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CompensateNegativeBalanceNotification {
  public static final String SERIALIZED_NAME_CONTENT = "content";
  @SerializedName(SERIALIZED_NAME_CONTENT)
  private CompensateNegativeBalanceNotificationContent content;

  public static final String SERIALIZED_NAME_EVENT_TYPE = "eventType";
  @SerializedName(SERIALIZED_NAME_EVENT_TYPE)
  private String eventType;

  public static final String SERIALIZED_NAME_EXECUTING_USER_KEY = "executingUserKey";
  @SerializedName(SERIALIZED_NAME_EXECUTING_USER_KEY)
  private String executingUserKey;

  public static final String SERIALIZED_NAME_LIVE = "live";
  @SerializedName(SERIALIZED_NAME_LIVE)
  private Boolean live;

  public static final String SERIALIZED_NAME_PSP_REFERENCE = "pspReference";
  @SerializedName(SERIALIZED_NAME_PSP_REFERENCE)
  private String pspReference;

  public CompensateNegativeBalanceNotification() {
  }

  public CompensateNegativeBalanceNotification content(CompensateNegativeBalanceNotificationContent content) {
    this.content = content;
    return this;
  }

  /**
   * Details of the negative balance compensation.
   * @return content
   */
  @javax.annotation.Nullable
  public CompensateNegativeBalanceNotificationContent getContent() {
    return content;
  }

  public void setContent(CompensateNegativeBalanceNotificationContent content) {
    this.content = content;
  }


  public CompensateNegativeBalanceNotification eventType(String eventType) {
    this.eventType = eventType;
    return this;
  }

  /**
   * The event type of the notification.
   * @return eventType
   */
  @javax.annotation.Nonnull
  public String getEventType() {
    return eventType;
  }

  public void setEventType(String eventType) {
    this.eventType = eventType;
  }


  public CompensateNegativeBalanceNotification executingUserKey(String executingUserKey) {
    this.executingUserKey = executingUserKey;
    return this;
  }

  /**
   * The user or process that has triggered the notification.
   * @return executingUserKey
   */
  @javax.annotation.Nonnull
  public String getExecutingUserKey() {
    return executingUserKey;
  }

  public void setExecutingUserKey(String executingUserKey) {
    this.executingUserKey = executingUserKey;
  }


  public CompensateNegativeBalanceNotification live(Boolean live) {
    this.live = live;
    return this;
  }

  /**
   * Indicates whether the notification originated from the live environment or the test environment. If true, the notification originated from the live environment. If false, the notification originated from the test environment.
   * @return live
   */
  @javax.annotation.Nonnull
  public Boolean getLive() {
    return live;
  }

  public void setLive(Boolean live) {
    this.live = live;
  }


  public CompensateNegativeBalanceNotification pspReference(String pspReference) {
    this.pspReference = pspReference;
    return this;
  }

  /**
   * The PSP reference of the request from which the notification originates.
   * @return pspReference
   */
  @javax.annotation.Nonnull
  public String getPspReference() {
    return pspReference;
  }

  public void setPspReference(String pspReference) {
    this.pspReference = pspReference;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CompensateNegativeBalanceNotification compensateNegativeBalanceNotification = (CompensateNegativeBalanceNotification) o;
    return Objects.equals(this.content, compensateNegativeBalanceNotification.content) &&
        Objects.equals(this.eventType, compensateNegativeBalanceNotification.eventType) &&
        Objects.equals(this.executingUserKey, compensateNegativeBalanceNotification.executingUserKey) &&
        Objects.equals(this.live, compensateNegativeBalanceNotification.live) &&
        Objects.equals(this.pspReference, compensateNegativeBalanceNotification.pspReference);
  }

  @Override
  public int hashCode() {
    return Objects.hash(content, eventType, executingUserKey, live, pspReference);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CompensateNegativeBalanceNotification {\n");
    sb.append("    content: ").append(toIndentedString(content)).append("\n");
    sb.append("    eventType: ").append(toIndentedString(eventType)).append("\n");
    sb.append("    executingUserKey: ").append(toIndentedString(executingUserKey)).append("\n");
    sb.append("    live: ").append(toIndentedString(live)).append("\n");
    sb.append("    pspReference: ").append(toIndentedString(pspReference)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("content");
    openapiFields.add("eventType");
    openapiFields.add("executingUserKey");
    openapiFields.add("live");
    openapiFields.add("pspReference");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("eventType");
    openapiRequiredFields.add("executingUserKey");
    openapiRequiredFields.add("live");
    openapiRequiredFields.add("pspReference");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CompensateNegativeBalanceNotification
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CompensateNegativeBalanceNotification.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CompensateNegativeBalanceNotification is not found in the empty JSON string", CompensateNegativeBalanceNotification.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CompensateNegativeBalanceNotification.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CompensateNegativeBalanceNotification` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CompensateNegativeBalanceNotification.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `content`
      if (jsonObj.get("content") != null && !jsonObj.get("content").isJsonNull()) {
        CompensateNegativeBalanceNotificationContent.validateJsonElement(jsonObj.get("content"));
      }
      if (!jsonObj.get("eventType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `eventType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("eventType").toString()));
      }
      if (!jsonObj.get("executingUserKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `executingUserKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("executingUserKey").toString()));
      }
      if (!jsonObj.get("pspReference").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pspReference` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pspReference").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CompensateNegativeBalanceNotification.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CompensateNegativeBalanceNotification' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CompensateNegativeBalanceNotification> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CompensateNegativeBalanceNotification.class));

       return (TypeAdapter<T>) new TypeAdapter<CompensateNegativeBalanceNotification>() {
           @Override
           public void write(JsonWriter out, CompensateNegativeBalanceNotification value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CompensateNegativeBalanceNotification read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CompensateNegativeBalanceNotification given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CompensateNegativeBalanceNotification
   * @throws IOException if the JSON string is invalid with respect to CompensateNegativeBalanceNotification
   */
  public static CompensateNegativeBalanceNotification fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CompensateNegativeBalanceNotification.class);
  }

  /**
   * Convert an instance of CompensateNegativeBalanceNotification to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

