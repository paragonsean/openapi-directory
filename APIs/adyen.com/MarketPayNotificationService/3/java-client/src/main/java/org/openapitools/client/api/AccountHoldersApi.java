/*
 * Classic Platforms - Notifications
 * This API is used for the classic integration. If you are just starting your implementation, refer to our [new integration guide](https://docs.adyen.com/marketplaces-and-platforms) instead.  The Notification API sends notifications to the endpoints specified in a given subscription.  Subscriptions are managed through the Notification Configuration API. The API specifications listed here detail the format of each notification.  For more information, refer to our [documentation](https://docs.adyen.com/marketplaces-and-platforms/classic/notifications).
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AccountHolderCreateNotification;
import org.openapitools.client.model.AccountHolderStatusChangeNotification;
import org.openapitools.client.model.AccountHolderStoreStatusChangeNotification;
import org.openapitools.client.model.AccountHolderUpcomingDeadlineNotification;
import org.openapitools.client.model.AccountHolderUpdateNotification;
import org.openapitools.client.model.AccountHolderVerificationNotification;
import org.openapitools.client.model.NotificationResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AccountHoldersApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AccountHoldersApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AccountHoldersApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for postACCOUNTHOLDERCREATED
     * @param accountHolderCreateNotification  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - the request has succeeded. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postACCOUNTHOLDERCREATEDCall(AccountHolderCreateNotification accountHolderCreateNotification, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = accountHolderCreateNotification;

        // create path and map variables
        String localVarPath = "/ACCOUNT_HOLDER_CREATED";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postACCOUNTHOLDERCREATEDValidateBeforeCall(AccountHolderCreateNotification accountHolderCreateNotification, final ApiCallback _callback) throws ApiException {
        return postACCOUNTHOLDERCREATEDCall(accountHolderCreateNotification, _callback);

    }

    /**
     * Account holder created
     * Adyen sends this webhook when [an account holder is created](https://docs.adyen.com/api-explorer/#/Account/latest/post/createAccountHolder).
     * @param accountHolderCreateNotification  (optional)
     * @return NotificationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - the request has succeeded. </td><td>  -  </td></tr>
     </table>
     */
    public NotificationResponse postACCOUNTHOLDERCREATED(AccountHolderCreateNotification accountHolderCreateNotification) throws ApiException {
        ApiResponse<NotificationResponse> localVarResp = postACCOUNTHOLDERCREATEDWithHttpInfo(accountHolderCreateNotification);
        return localVarResp.getData();
    }

    /**
     * Account holder created
     * Adyen sends this webhook when [an account holder is created](https://docs.adyen.com/api-explorer/#/Account/latest/post/createAccountHolder).
     * @param accountHolderCreateNotification  (optional)
     * @return ApiResponse&lt;NotificationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - the request has succeeded. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NotificationResponse> postACCOUNTHOLDERCREATEDWithHttpInfo(AccountHolderCreateNotification accountHolderCreateNotification) throws ApiException {
        okhttp3.Call localVarCall = postACCOUNTHOLDERCREATEDValidateBeforeCall(accountHolderCreateNotification, null);
        Type localVarReturnType = new TypeToken<NotificationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Account holder created (asynchronously)
     * Adyen sends this webhook when [an account holder is created](https://docs.adyen.com/api-explorer/#/Account/latest/post/createAccountHolder).
     * @param accountHolderCreateNotification  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - the request has succeeded. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postACCOUNTHOLDERCREATEDAsync(AccountHolderCreateNotification accountHolderCreateNotification, final ApiCallback<NotificationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = postACCOUNTHOLDERCREATEDValidateBeforeCall(accountHolderCreateNotification, _callback);
        Type localVarReturnType = new TypeToken<NotificationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postACCOUNTHOLDERSTATUSCHANGE
     * @param accountHolderStatusChangeNotification  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - the request has succeeded. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postACCOUNTHOLDERSTATUSCHANGECall(AccountHolderStatusChangeNotification accountHolderStatusChangeNotification, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = accountHolderStatusChangeNotification;

        // create path and map variables
        String localVarPath = "/ACCOUNT_HOLDER_STATUS_CHANGE";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postACCOUNTHOLDERSTATUSCHANGEValidateBeforeCall(AccountHolderStatusChangeNotification accountHolderStatusChangeNotification, final ApiCallback _callback) throws ApiException {
        return postACCOUNTHOLDERSTATUSCHANGECall(accountHolderStatusChangeNotification, _callback);

    }

    /**
     * Account holder status changed
     * Adyen sends this webhook when [the status of an account holder is changed](https://docs.adyen.com/api-explorer/#/Account/latest/post/updateAccountHolderState).
     * @param accountHolderStatusChangeNotification  (optional)
     * @return NotificationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - the request has succeeded. </td><td>  -  </td></tr>
     </table>
     */
    public NotificationResponse postACCOUNTHOLDERSTATUSCHANGE(AccountHolderStatusChangeNotification accountHolderStatusChangeNotification) throws ApiException {
        ApiResponse<NotificationResponse> localVarResp = postACCOUNTHOLDERSTATUSCHANGEWithHttpInfo(accountHolderStatusChangeNotification);
        return localVarResp.getData();
    }

    /**
     * Account holder status changed
     * Adyen sends this webhook when [the status of an account holder is changed](https://docs.adyen.com/api-explorer/#/Account/latest/post/updateAccountHolderState).
     * @param accountHolderStatusChangeNotification  (optional)
     * @return ApiResponse&lt;NotificationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - the request has succeeded. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NotificationResponse> postACCOUNTHOLDERSTATUSCHANGEWithHttpInfo(AccountHolderStatusChangeNotification accountHolderStatusChangeNotification) throws ApiException {
        okhttp3.Call localVarCall = postACCOUNTHOLDERSTATUSCHANGEValidateBeforeCall(accountHolderStatusChangeNotification, null);
        Type localVarReturnType = new TypeToken<NotificationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Account holder status changed (asynchronously)
     * Adyen sends this webhook when [the status of an account holder is changed](https://docs.adyen.com/api-explorer/#/Account/latest/post/updateAccountHolderState).
     * @param accountHolderStatusChangeNotification  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - the request has succeeded. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postACCOUNTHOLDERSTATUSCHANGEAsync(AccountHolderStatusChangeNotification accountHolderStatusChangeNotification, final ApiCallback<NotificationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = postACCOUNTHOLDERSTATUSCHANGEValidateBeforeCall(accountHolderStatusChangeNotification, _callback);
        Type localVarReturnType = new TypeToken<NotificationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postACCOUNTHOLDERSTORESTATUSCHANGE
     * @param accountHolderStoreStatusChangeNotification  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - the request has succeeded. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postACCOUNTHOLDERSTORESTATUSCHANGECall(AccountHolderStoreStatusChangeNotification accountHolderStoreStatusChangeNotification, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = accountHolderStoreStatusChangeNotification;

        // create path and map variables
        String localVarPath = "/ACCOUNT_HOLDER_STORE_STATUS_CHANGE";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postACCOUNTHOLDERSTORESTATUSCHANGEValidateBeforeCall(AccountHolderStoreStatusChangeNotification accountHolderStoreStatusChangeNotification, final ApiCallback _callback) throws ApiException {
        return postACCOUNTHOLDERSTORESTATUSCHANGECall(accountHolderStoreStatusChangeNotification, _callback);

    }

    /**
     * Store status changed
     * Adyen sends this webhook when [the status of a store](https://docs.adyen.com/api-explorer/#/Account/latest/post/createAccountHolder__reqParam_accountHolderDetails-storeDetails-status) associated with an account holder is changed.
     * @param accountHolderStoreStatusChangeNotification  (optional)
     * @return NotificationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - the request has succeeded. </td><td>  -  </td></tr>
     </table>
     */
    public NotificationResponse postACCOUNTHOLDERSTORESTATUSCHANGE(AccountHolderStoreStatusChangeNotification accountHolderStoreStatusChangeNotification) throws ApiException {
        ApiResponse<NotificationResponse> localVarResp = postACCOUNTHOLDERSTORESTATUSCHANGEWithHttpInfo(accountHolderStoreStatusChangeNotification);
        return localVarResp.getData();
    }

    /**
     * Store status changed
     * Adyen sends this webhook when [the status of a store](https://docs.adyen.com/api-explorer/#/Account/latest/post/createAccountHolder__reqParam_accountHolderDetails-storeDetails-status) associated with an account holder is changed.
     * @param accountHolderStoreStatusChangeNotification  (optional)
     * @return ApiResponse&lt;NotificationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - the request has succeeded. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NotificationResponse> postACCOUNTHOLDERSTORESTATUSCHANGEWithHttpInfo(AccountHolderStoreStatusChangeNotification accountHolderStoreStatusChangeNotification) throws ApiException {
        okhttp3.Call localVarCall = postACCOUNTHOLDERSTORESTATUSCHANGEValidateBeforeCall(accountHolderStoreStatusChangeNotification, null);
        Type localVarReturnType = new TypeToken<NotificationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Store status changed (asynchronously)
     * Adyen sends this webhook when [the status of a store](https://docs.adyen.com/api-explorer/#/Account/latest/post/createAccountHolder__reqParam_accountHolderDetails-storeDetails-status) associated with an account holder is changed.
     * @param accountHolderStoreStatusChangeNotification  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - the request has succeeded. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postACCOUNTHOLDERSTORESTATUSCHANGEAsync(AccountHolderStoreStatusChangeNotification accountHolderStoreStatusChangeNotification, final ApiCallback<NotificationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = postACCOUNTHOLDERSTORESTATUSCHANGEValidateBeforeCall(accountHolderStoreStatusChangeNotification, _callback);
        Type localVarReturnType = new TypeToken<NotificationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postACCOUNTHOLDERUPCOMINGDEADLINE
     * @param accountHolderUpcomingDeadlineNotification  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - the request has succeeded. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postACCOUNTHOLDERUPCOMINGDEADLINECall(AccountHolderUpcomingDeadlineNotification accountHolderUpcomingDeadlineNotification, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = accountHolderUpcomingDeadlineNotification;

        // create path and map variables
        String localVarPath = "/ACCOUNT_HOLDER_UPCOMING_DEADLINE";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postACCOUNTHOLDERUPCOMINGDEADLINEValidateBeforeCall(AccountHolderUpcomingDeadlineNotification accountHolderUpcomingDeadlineNotification, final ApiCallback _callback) throws ApiException {
        return postACCOUNTHOLDERUPCOMINGDEADLINECall(accountHolderUpcomingDeadlineNotification, _callback);

    }

    /**
     * Upcoming deadline
     * Adyen sends this notification when an account holder&#39;s deadline to fulfill the requirements of a specific event is coming up.
     * @param accountHolderUpcomingDeadlineNotification  (optional)
     * @return NotificationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - the request has succeeded. </td><td>  -  </td></tr>
     </table>
     */
    public NotificationResponse postACCOUNTHOLDERUPCOMINGDEADLINE(AccountHolderUpcomingDeadlineNotification accountHolderUpcomingDeadlineNotification) throws ApiException {
        ApiResponse<NotificationResponse> localVarResp = postACCOUNTHOLDERUPCOMINGDEADLINEWithHttpInfo(accountHolderUpcomingDeadlineNotification);
        return localVarResp.getData();
    }

    /**
     * Upcoming deadline
     * Adyen sends this notification when an account holder&#39;s deadline to fulfill the requirements of a specific event is coming up.
     * @param accountHolderUpcomingDeadlineNotification  (optional)
     * @return ApiResponse&lt;NotificationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - the request has succeeded. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NotificationResponse> postACCOUNTHOLDERUPCOMINGDEADLINEWithHttpInfo(AccountHolderUpcomingDeadlineNotification accountHolderUpcomingDeadlineNotification) throws ApiException {
        okhttp3.Call localVarCall = postACCOUNTHOLDERUPCOMINGDEADLINEValidateBeforeCall(accountHolderUpcomingDeadlineNotification, null);
        Type localVarReturnType = new TypeToken<NotificationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Upcoming deadline (asynchronously)
     * Adyen sends this notification when an account holder&#39;s deadline to fulfill the requirements of a specific event is coming up.
     * @param accountHolderUpcomingDeadlineNotification  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - the request has succeeded. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postACCOUNTHOLDERUPCOMINGDEADLINEAsync(AccountHolderUpcomingDeadlineNotification accountHolderUpcomingDeadlineNotification, final ApiCallback<NotificationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = postACCOUNTHOLDERUPCOMINGDEADLINEValidateBeforeCall(accountHolderUpcomingDeadlineNotification, _callback);
        Type localVarReturnType = new TypeToken<NotificationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postACCOUNTHOLDERUPDATED
     * @param accountHolderUpdateNotification  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - the request has succeeded. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postACCOUNTHOLDERUPDATEDCall(AccountHolderUpdateNotification accountHolderUpdateNotification, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = accountHolderUpdateNotification;

        // create path and map variables
        String localVarPath = "/ACCOUNT_HOLDER_UPDATED";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postACCOUNTHOLDERUPDATEDValidateBeforeCall(AccountHolderUpdateNotification accountHolderUpdateNotification, final ApiCallback _callback) throws ApiException {
        return postACCOUNTHOLDERUPDATEDCall(accountHolderUpdateNotification, _callback);

    }

    /**
     * Account holder updated
     * Adyen sends this webhook when [an account holder is updated](https://docs.adyen.com/api-explorer/#/Account/latest/post/updateAccountHolder).
     * @param accountHolderUpdateNotification  (optional)
     * @return NotificationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - the request has succeeded. </td><td>  -  </td></tr>
     </table>
     */
    public NotificationResponse postACCOUNTHOLDERUPDATED(AccountHolderUpdateNotification accountHolderUpdateNotification) throws ApiException {
        ApiResponse<NotificationResponse> localVarResp = postACCOUNTHOLDERUPDATEDWithHttpInfo(accountHolderUpdateNotification);
        return localVarResp.getData();
    }

    /**
     * Account holder updated
     * Adyen sends this webhook when [an account holder is updated](https://docs.adyen.com/api-explorer/#/Account/latest/post/updateAccountHolder).
     * @param accountHolderUpdateNotification  (optional)
     * @return ApiResponse&lt;NotificationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - the request has succeeded. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NotificationResponse> postACCOUNTHOLDERUPDATEDWithHttpInfo(AccountHolderUpdateNotification accountHolderUpdateNotification) throws ApiException {
        okhttp3.Call localVarCall = postACCOUNTHOLDERUPDATEDValidateBeforeCall(accountHolderUpdateNotification, null);
        Type localVarReturnType = new TypeToken<NotificationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Account holder updated (asynchronously)
     * Adyen sends this webhook when [an account holder is updated](https://docs.adyen.com/api-explorer/#/Account/latest/post/updateAccountHolder).
     * @param accountHolderUpdateNotification  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - the request has succeeded. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postACCOUNTHOLDERUPDATEDAsync(AccountHolderUpdateNotification accountHolderUpdateNotification, final ApiCallback<NotificationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = postACCOUNTHOLDERUPDATEDValidateBeforeCall(accountHolderUpdateNotification, _callback);
        Type localVarReturnType = new TypeToken<NotificationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postACCOUNTHOLDERVERIFICATION
     * @param accountHolderVerificationNotification  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - the request has succeeded. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postACCOUNTHOLDERVERIFICATIONCall(AccountHolderVerificationNotification accountHolderVerificationNotification, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = accountHolderVerificationNotification;

        // create path and map variables
        String localVarPath = "/ACCOUNT_HOLDER_VERIFICATION";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postACCOUNTHOLDERVERIFICATIONValidateBeforeCall(AccountHolderVerificationNotification accountHolderVerificationNotification, final ApiCallback _callback) throws ApiException {
        return postACCOUNTHOLDERVERIFICATIONCall(accountHolderVerificationNotification, _callback);

    }

    /**
     * Verification results received
     * Adyen sends this webhook when verification results are available.
     * @param accountHolderVerificationNotification  (optional)
     * @return NotificationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - the request has succeeded. </td><td>  -  </td></tr>
     </table>
     */
    public NotificationResponse postACCOUNTHOLDERVERIFICATION(AccountHolderVerificationNotification accountHolderVerificationNotification) throws ApiException {
        ApiResponse<NotificationResponse> localVarResp = postACCOUNTHOLDERVERIFICATIONWithHttpInfo(accountHolderVerificationNotification);
        return localVarResp.getData();
    }

    /**
     * Verification results received
     * Adyen sends this webhook when verification results are available.
     * @param accountHolderVerificationNotification  (optional)
     * @return ApiResponse&lt;NotificationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - the request has succeeded. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NotificationResponse> postACCOUNTHOLDERVERIFICATIONWithHttpInfo(AccountHolderVerificationNotification accountHolderVerificationNotification) throws ApiException {
        okhttp3.Call localVarCall = postACCOUNTHOLDERVERIFICATIONValidateBeforeCall(accountHolderVerificationNotification, null);
        Type localVarReturnType = new TypeToken<NotificationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Verification results received (asynchronously)
     * Adyen sends this webhook when verification results are available.
     * @param accountHolderVerificationNotification  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - the request has succeeded. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postACCOUNTHOLDERVERIFICATIONAsync(AccountHolderVerificationNotification accountHolderVerificationNotification, final ApiCallback<NotificationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = postACCOUNTHOLDERVERIFICATIONValidateBeforeCall(accountHolderVerificationNotification, _callback);
        Type localVarReturnType = new TypeToken<NotificationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
