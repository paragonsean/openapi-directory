/**
 * Classic Platforms - Notifications
 * This API is used for the classic integration. If you are just starting your implementation, refer to our [new integration guide](https://docs.adyen.com/marketplaces-and-platforms) instead.  The Notification API sends notifications to the endpoints specified in a given subscription.  Subscriptions are managed through the Notification Configuration API. The API specifications listed here detail the format of each notification.  For more information, refer to our [documentation](https://docs.adyen.com/marketplaces-and-platforms/classic/notifications).
 *
 * The version of the OpenAPI document: 3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIAccountHolderPayoutNotificationContent.h
 *
 * 
 */

#ifndef OAIAccountHolderPayoutNotificationContent_H
#define OAIAccountHolderPayoutNotificationContent_H

#include <QJsonObject>

#include "OAIAmount.h"
#include "OAIAmountWrapper.h"
#include "OAIBankAccountDetail.h"
#include "OAIOperationStatus.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIAmount;
class OAIAmountWrapper;
class OAIBankAccountDetail;
class OAIOperationStatus;

class OAIAccountHolderPayoutNotificationContent : public OAIObject {
public:
    OAIAccountHolderPayoutNotificationContent();
    OAIAccountHolderPayoutNotificationContent(QString json);
    ~OAIAccountHolderPayoutNotificationContent() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAccountCode() const;
    void setAccountCode(const QString &account_code);
    bool is_account_code_Set() const;
    bool is_account_code_Valid() const;

    QString getAccountHolderCode() const;
    void setAccountHolderCode(const QString &account_holder_code);
    bool is_account_holder_code_Set() const;
    bool is_account_holder_code_Valid() const;

    OAIAmount getAmount() const;
    void setAmount(const OAIAmount &amount);
    bool is_amount_Set() const;
    bool is_amount_Valid() const;

    QList<OAIAmountWrapper> getAmounts() const;
    void setAmounts(const QList<OAIAmountWrapper> &amounts);
    bool is_amounts_Set() const;
    bool is_amounts_Valid() const;

    OAIBankAccountDetail getBankAccountDetail() const;
    void setBankAccountDetail(const OAIBankAccountDetail &bank_account_detail);
    bool is_bank_account_detail_Set() const;
    bool is_bank_account_detail_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    QString getMerchantReference() const;
    void setMerchantReference(const QString &merchant_reference);
    bool is_merchant_reference_Set() const;
    bool is_merchant_reference_Valid() const;

    OAIOperationStatus getStatus() const;
    void setStatus(const OAIOperationStatus &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_account_code;
    bool m_account_code_isSet;
    bool m_account_code_isValid;

    QString m_account_holder_code;
    bool m_account_holder_code_isSet;
    bool m_account_holder_code_isValid;

    OAIAmount m_amount;
    bool m_amount_isSet;
    bool m_amount_isValid;

    QList<OAIAmountWrapper> m_amounts;
    bool m_amounts_isSet;
    bool m_amounts_isValid;

    OAIBankAccountDetail m_bank_account_detail;
    bool m_bank_account_detail_isSet;
    bool m_bank_account_detail_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    QString m_merchant_reference;
    bool m_merchant_reference_isSet;
    bool m_merchant_reference_isValid;

    OAIOperationStatus m_status;
    bool m_status_isSet;
    bool m_status_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIAccountHolderPayoutNotificationContent)

#endif // OAIAccountHolderPayoutNotificationContent_H
