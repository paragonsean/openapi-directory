/**
 * Classic Platforms - Notifications
 * This API is used for the classic integration. If you are just starting your implementation, refer to our [new integration guide](https://docs.adyen.com/marketplaces-and-platforms) instead.  The Notification API sends notifications to the endpoints specified in a given subscription.  Subscriptions are managed through the Notification Configuration API. The API specifications listed here detail the format of each notification.  For more information, refer to our [documentation](https://docs.adyen.com/marketplaces-and-platforms/classic/notifications).
 *
 * The version of the OpenAPI document: 3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIShareholderContact.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIShareholderContact::OAIShareholderContact(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIShareholderContact::OAIShareholderContact() {
    this->initializeModel();
}

OAIShareholderContact::~OAIShareholderContact() {}

void OAIShareholderContact::initializeModel() {

    m_address_isSet = false;
    m_address_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_full_phone_number_isSet = false;
    m_full_phone_number_isValid = false;

    m_job_title_isSet = false;
    m_job_title_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_personal_data_isSet = false;
    m_personal_data_isValid = false;

    m_phone_number_isSet = false;
    m_phone_number_isValid = false;

    m_shareholder_code_isSet = false;
    m_shareholder_code_isValid = false;

    m_shareholder_type_isSet = false;
    m_shareholder_type_isValid = false;

    m_web_address_isSet = false;
    m_web_address_isValid = false;
}

void OAIShareholderContact::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIShareholderContact::fromJsonObject(QJsonObject json) {

    m_address_isValid = ::OpenAPI::fromJsonValue(m_address, json[QString("address")]);
    m_address_isSet = !json[QString("address")].isNull() && m_address_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_full_phone_number_isValid = ::OpenAPI::fromJsonValue(m_full_phone_number, json[QString("fullPhoneNumber")]);
    m_full_phone_number_isSet = !json[QString("fullPhoneNumber")].isNull() && m_full_phone_number_isValid;

    m_job_title_isValid = ::OpenAPI::fromJsonValue(m_job_title, json[QString("jobTitle")]);
    m_job_title_isSet = !json[QString("jobTitle")].isNull() && m_job_title_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_personal_data_isValid = ::OpenAPI::fromJsonValue(m_personal_data, json[QString("personalData")]);
    m_personal_data_isSet = !json[QString("personalData")].isNull() && m_personal_data_isValid;

    m_phone_number_isValid = ::OpenAPI::fromJsonValue(m_phone_number, json[QString("phoneNumber")]);
    m_phone_number_isSet = !json[QString("phoneNumber")].isNull() && m_phone_number_isValid;

    m_shareholder_code_isValid = ::OpenAPI::fromJsonValue(m_shareholder_code, json[QString("shareholderCode")]);
    m_shareholder_code_isSet = !json[QString("shareholderCode")].isNull() && m_shareholder_code_isValid;

    m_shareholder_type_isValid = ::OpenAPI::fromJsonValue(m_shareholder_type, json[QString("shareholderType")]);
    m_shareholder_type_isSet = !json[QString("shareholderType")].isNull() && m_shareholder_type_isValid;

    m_web_address_isValid = ::OpenAPI::fromJsonValue(m_web_address, json[QString("webAddress")]);
    m_web_address_isSet = !json[QString("webAddress")].isNull() && m_web_address_isValid;
}

QString OAIShareholderContact::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIShareholderContact::asJsonObject() const {
    QJsonObject obj;
    if (m_address.isSet()) {
        obj.insert(QString("address"), ::OpenAPI::toJsonValue(m_address));
    }
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_full_phone_number_isSet) {
        obj.insert(QString("fullPhoneNumber"), ::OpenAPI::toJsonValue(m_full_phone_number));
    }
    if (m_job_title_isSet) {
        obj.insert(QString("jobTitle"), ::OpenAPI::toJsonValue(m_job_title));
    }
    if (m_name.isSet()) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_personal_data.isSet()) {
        obj.insert(QString("personalData"), ::OpenAPI::toJsonValue(m_personal_data));
    }
    if (m_phone_number.isSet()) {
        obj.insert(QString("phoneNumber"), ::OpenAPI::toJsonValue(m_phone_number));
    }
    if (m_shareholder_code_isSet) {
        obj.insert(QString("shareholderCode"), ::OpenAPI::toJsonValue(m_shareholder_code));
    }
    if (m_shareholder_type_isSet) {
        obj.insert(QString("shareholderType"), ::OpenAPI::toJsonValue(m_shareholder_type));
    }
    if (m_web_address_isSet) {
        obj.insert(QString("webAddress"), ::OpenAPI::toJsonValue(m_web_address));
    }
    return obj;
}

OAIViasAddress OAIShareholderContact::getAddress() const {
    return m_address;
}
void OAIShareholderContact::setAddress(const OAIViasAddress &address) {
    m_address = address;
    m_address_isSet = true;
}

bool OAIShareholderContact::is_address_Set() const{
    return m_address_isSet;
}

bool OAIShareholderContact::is_address_Valid() const{
    return m_address_isValid;
}

QString OAIShareholderContact::getEmail() const {
    return m_email;
}
void OAIShareholderContact::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAIShareholderContact::is_email_Set() const{
    return m_email_isSet;
}

bool OAIShareholderContact::is_email_Valid() const{
    return m_email_isValid;
}

QString OAIShareholderContact::getFullPhoneNumber() const {
    return m_full_phone_number;
}
void OAIShareholderContact::setFullPhoneNumber(const QString &full_phone_number) {
    m_full_phone_number = full_phone_number;
    m_full_phone_number_isSet = true;
}

bool OAIShareholderContact::is_full_phone_number_Set() const{
    return m_full_phone_number_isSet;
}

bool OAIShareholderContact::is_full_phone_number_Valid() const{
    return m_full_phone_number_isValid;
}

QString OAIShareholderContact::getJobTitle() const {
    return m_job_title;
}
void OAIShareholderContact::setJobTitle(const QString &job_title) {
    m_job_title = job_title;
    m_job_title_isSet = true;
}

bool OAIShareholderContact::is_job_title_Set() const{
    return m_job_title_isSet;
}

bool OAIShareholderContact::is_job_title_Valid() const{
    return m_job_title_isValid;
}

OAIViasName OAIShareholderContact::getName() const {
    return m_name;
}
void OAIShareholderContact::setName(const OAIViasName &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIShareholderContact::is_name_Set() const{
    return m_name_isSet;
}

bool OAIShareholderContact::is_name_Valid() const{
    return m_name_isValid;
}

OAIViasPersonalData OAIShareholderContact::getPersonalData() const {
    return m_personal_data;
}
void OAIShareholderContact::setPersonalData(const OAIViasPersonalData &personal_data) {
    m_personal_data = personal_data;
    m_personal_data_isSet = true;
}

bool OAIShareholderContact::is_personal_data_Set() const{
    return m_personal_data_isSet;
}

bool OAIShareholderContact::is_personal_data_Valid() const{
    return m_personal_data_isValid;
}

OAIViasPhoneNumber OAIShareholderContact::getPhoneNumber() const {
    return m_phone_number;
}
void OAIShareholderContact::setPhoneNumber(const OAIViasPhoneNumber &phone_number) {
    m_phone_number = phone_number;
    m_phone_number_isSet = true;
}

bool OAIShareholderContact::is_phone_number_Set() const{
    return m_phone_number_isSet;
}

bool OAIShareholderContact::is_phone_number_Valid() const{
    return m_phone_number_isValid;
}

QString OAIShareholderContact::getShareholderCode() const {
    return m_shareholder_code;
}
void OAIShareholderContact::setShareholderCode(const QString &shareholder_code) {
    m_shareholder_code = shareholder_code;
    m_shareholder_code_isSet = true;
}

bool OAIShareholderContact::is_shareholder_code_Set() const{
    return m_shareholder_code_isSet;
}

bool OAIShareholderContact::is_shareholder_code_Valid() const{
    return m_shareholder_code_isValid;
}

QString OAIShareholderContact::getShareholderType() const {
    return m_shareholder_type;
}
void OAIShareholderContact::setShareholderType(const QString &shareholder_type) {
    m_shareholder_type = shareholder_type;
    m_shareholder_type_isSet = true;
}

bool OAIShareholderContact::is_shareholder_type_Set() const{
    return m_shareholder_type_isSet;
}

bool OAIShareholderContact::is_shareholder_type_Valid() const{
    return m_shareholder_type_isValid;
}

QString OAIShareholderContact::getWebAddress() const {
    return m_web_address;
}
void OAIShareholderContact::setWebAddress(const QString &web_address) {
    m_web_address = web_address;
    m_web_address_isSet = true;
}

bool OAIShareholderContact::is_web_address_Set() const{
    return m_web_address_isSet;
}

bool OAIShareholderContact::is_web_address_Valid() const{
    return m_web_address_isValid;
}

bool OAIShareholderContact::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_address.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_full_phone_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_personal_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_phone_number.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_shareholder_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shareholder_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_web_address_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIShareholderContact::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
