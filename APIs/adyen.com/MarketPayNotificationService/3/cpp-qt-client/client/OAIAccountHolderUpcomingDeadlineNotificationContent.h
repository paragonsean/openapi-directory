/**
 * Classic Platforms - Notifications
 * This API is used for the classic integration. If you are just starting your implementation, refer to our [new integration guide](https://docs.adyen.com/marketplaces-and-platforms) instead.  The Notification API sends notifications to the endpoints specified in a given subscription.  Subscriptions are managed through the Notification Configuration API. The API specifications listed here detail the format of each notification.  For more information, refer to our [documentation](https://docs.adyen.com/marketplaces-and-platforms/classic/notifications).
 *
 * The version of the OpenAPI document: 3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIAccountHolderUpcomingDeadlineNotificationContent.h
 *
 * 
 */

#ifndef OAIAccountHolderUpcomingDeadlineNotificationContent_H
#define OAIAccountHolderUpcomingDeadlineNotificationContent_H

#include <QJsonObject>

#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIAccountHolderUpcomingDeadlineNotificationContent : public OAIObject {
public:
    OAIAccountHolderUpcomingDeadlineNotificationContent();
    OAIAccountHolderUpcomingDeadlineNotificationContent(QString json);
    ~OAIAccountHolderUpcomingDeadlineNotificationContent() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAccountHolderCode() const;
    void setAccountHolderCode(const QString &account_holder_code);
    bool is_account_holder_code_Set() const;
    bool is_account_holder_code_Valid() const;

    QString getEvent() const;
    void setEvent(const QString &event);
    bool is_event_Set() const;
    bool is_event_Valid() const;

    QDateTime getExecutionDate() const;
    void setExecutionDate(const QDateTime &execution_date);
    bool is_execution_date_Set() const;
    bool is_execution_date_Valid() const;

    QString getReason() const;
    void setReason(const QString &reason);
    bool is_reason_Set() const;
    bool is_reason_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_account_holder_code;
    bool m_account_holder_code_isSet;
    bool m_account_holder_code_isValid;

    QString m_event;
    bool m_event_isSet;
    bool m_event_isValid;

    QDateTime m_execution_date;
    bool m_execution_date_isSet;
    bool m_execution_date_isValid;

    QString m_reason;
    bool m_reason_isSet;
    bool m_reason_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIAccountHolderUpcomingDeadlineNotificationContent)

#endif // OAIAccountHolderUpcomingDeadlineNotificationContent_H
