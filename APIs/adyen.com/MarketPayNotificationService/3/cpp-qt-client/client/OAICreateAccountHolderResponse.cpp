/**
 * Classic Platforms - Notifications
 * This API is used for the classic integration. If you are just starting your implementation, refer to our [new integration guide](https://docs.adyen.com/marketplaces-and-platforms) instead.  The Notification API sends notifications to the endpoints specified in a given subscription.  Subscriptions are managed through the Notification Configuration API. The API specifications listed here detail the format of each notification.  For more information, refer to our [documentation](https://docs.adyen.com/marketplaces-and-platforms/classic/notifications).
 *
 * The version of the OpenAPI document: 3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateAccountHolderResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateAccountHolderResponse::OAICreateAccountHolderResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateAccountHolderResponse::OAICreateAccountHolderResponse() {
    this->initializeModel();
}

OAICreateAccountHolderResponse::~OAICreateAccountHolderResponse() {}

void OAICreateAccountHolderResponse::initializeModel() {

    m_account_code_isSet = false;
    m_account_code_isValid = false;

    m_account_holder_code_isSet = false;
    m_account_holder_code_isValid = false;

    m_account_holder_details_isSet = false;
    m_account_holder_details_isValid = false;

    m_account_holder_status_isSet = false;
    m_account_holder_status_isValid = false;

    m_invalid_fields_isSet = false;
    m_invalid_fields_isValid = false;

    m_psp_reference_isSet = false;
    m_psp_reference_isValid = false;

    m_result_code_isSet = false;
    m_result_code_isValid = false;

    m_submitted_async_isSet = false;
    m_submitted_async_isValid = false;

    m_verification_isSet = false;
    m_verification_isValid = false;
}

void OAICreateAccountHolderResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateAccountHolderResponse::fromJsonObject(QJsonObject json) {

    m_account_code_isValid = ::OpenAPI::fromJsonValue(m_account_code, json[QString("accountCode")]);
    m_account_code_isSet = !json[QString("accountCode")].isNull() && m_account_code_isValid;

    m_account_holder_code_isValid = ::OpenAPI::fromJsonValue(m_account_holder_code, json[QString("accountHolderCode")]);
    m_account_holder_code_isSet = !json[QString("accountHolderCode")].isNull() && m_account_holder_code_isValid;

    m_account_holder_details_isValid = ::OpenAPI::fromJsonValue(m_account_holder_details, json[QString("accountHolderDetails")]);
    m_account_holder_details_isSet = !json[QString("accountHolderDetails")].isNull() && m_account_holder_details_isValid;

    m_account_holder_status_isValid = ::OpenAPI::fromJsonValue(m_account_holder_status, json[QString("accountHolderStatus")]);
    m_account_holder_status_isSet = !json[QString("accountHolderStatus")].isNull() && m_account_holder_status_isValid;

    m_invalid_fields_isValid = ::OpenAPI::fromJsonValue(m_invalid_fields, json[QString("invalidFields")]);
    m_invalid_fields_isSet = !json[QString("invalidFields")].isNull() && m_invalid_fields_isValid;

    m_psp_reference_isValid = ::OpenAPI::fromJsonValue(m_psp_reference, json[QString("pspReference")]);
    m_psp_reference_isSet = !json[QString("pspReference")].isNull() && m_psp_reference_isValid;

    m_result_code_isValid = ::OpenAPI::fromJsonValue(m_result_code, json[QString("resultCode")]);
    m_result_code_isSet = !json[QString("resultCode")].isNull() && m_result_code_isValid;

    m_submitted_async_isValid = ::OpenAPI::fromJsonValue(m_submitted_async, json[QString("submittedAsync")]);
    m_submitted_async_isSet = !json[QString("submittedAsync")].isNull() && m_submitted_async_isValid;

    m_verification_isValid = ::OpenAPI::fromJsonValue(m_verification, json[QString("verification")]);
    m_verification_isSet = !json[QString("verification")].isNull() && m_verification_isValid;
}

QString OAICreateAccountHolderResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateAccountHolderResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_account_code_isSet) {
        obj.insert(QString("accountCode"), ::OpenAPI::toJsonValue(m_account_code));
    }
    if (m_account_holder_code_isSet) {
        obj.insert(QString("accountHolderCode"), ::OpenAPI::toJsonValue(m_account_holder_code));
    }
    if (m_account_holder_details.isSet()) {
        obj.insert(QString("accountHolderDetails"), ::OpenAPI::toJsonValue(m_account_holder_details));
    }
    if (m_account_holder_status.isSet()) {
        obj.insert(QString("accountHolderStatus"), ::OpenAPI::toJsonValue(m_account_holder_status));
    }
    if (m_invalid_fields.size() > 0) {
        obj.insert(QString("invalidFields"), ::OpenAPI::toJsonValue(m_invalid_fields));
    }
    if (m_psp_reference_isSet) {
        obj.insert(QString("pspReference"), ::OpenAPI::toJsonValue(m_psp_reference));
    }
    if (m_result_code_isSet) {
        obj.insert(QString("resultCode"), ::OpenAPI::toJsonValue(m_result_code));
    }
    if (m_submitted_async_isSet) {
        obj.insert(QString("submittedAsync"), ::OpenAPI::toJsonValue(m_submitted_async));
    }
    if (m_verification.isSet()) {
        obj.insert(QString("verification"), ::OpenAPI::toJsonValue(m_verification));
    }
    return obj;
}

QString OAICreateAccountHolderResponse::getAccountCode() const {
    return m_account_code;
}
void OAICreateAccountHolderResponse::setAccountCode(const QString &account_code) {
    m_account_code = account_code;
    m_account_code_isSet = true;
}

bool OAICreateAccountHolderResponse::is_account_code_Set() const{
    return m_account_code_isSet;
}

bool OAICreateAccountHolderResponse::is_account_code_Valid() const{
    return m_account_code_isValid;
}

QString OAICreateAccountHolderResponse::getAccountHolderCode() const {
    return m_account_holder_code;
}
void OAICreateAccountHolderResponse::setAccountHolderCode(const QString &account_holder_code) {
    m_account_holder_code = account_holder_code;
    m_account_holder_code_isSet = true;
}

bool OAICreateAccountHolderResponse::is_account_holder_code_Set() const{
    return m_account_holder_code_isSet;
}

bool OAICreateAccountHolderResponse::is_account_holder_code_Valid() const{
    return m_account_holder_code_isValid;
}

OAIAccountHolderDetails OAICreateAccountHolderResponse::getAccountHolderDetails() const {
    return m_account_holder_details;
}
void OAICreateAccountHolderResponse::setAccountHolderDetails(const OAIAccountHolderDetails &account_holder_details) {
    m_account_holder_details = account_holder_details;
    m_account_holder_details_isSet = true;
}

bool OAICreateAccountHolderResponse::is_account_holder_details_Set() const{
    return m_account_holder_details_isSet;
}

bool OAICreateAccountHolderResponse::is_account_holder_details_Valid() const{
    return m_account_holder_details_isValid;
}

OAIAccountHolderStatus OAICreateAccountHolderResponse::getAccountHolderStatus() const {
    return m_account_holder_status;
}
void OAICreateAccountHolderResponse::setAccountHolderStatus(const OAIAccountHolderStatus &account_holder_status) {
    m_account_holder_status = account_holder_status;
    m_account_holder_status_isSet = true;
}

bool OAICreateAccountHolderResponse::is_account_holder_status_Set() const{
    return m_account_holder_status_isSet;
}

bool OAICreateAccountHolderResponse::is_account_holder_status_Valid() const{
    return m_account_holder_status_isValid;
}

QList<OAIErrorFieldTypeWrapper> OAICreateAccountHolderResponse::getInvalidFields() const {
    return m_invalid_fields;
}
void OAICreateAccountHolderResponse::setInvalidFields(const QList<OAIErrorFieldTypeWrapper> &invalid_fields) {
    m_invalid_fields = invalid_fields;
    m_invalid_fields_isSet = true;
}

bool OAICreateAccountHolderResponse::is_invalid_fields_Set() const{
    return m_invalid_fields_isSet;
}

bool OAICreateAccountHolderResponse::is_invalid_fields_Valid() const{
    return m_invalid_fields_isValid;
}

QString OAICreateAccountHolderResponse::getPspReference() const {
    return m_psp_reference;
}
void OAICreateAccountHolderResponse::setPspReference(const QString &psp_reference) {
    m_psp_reference = psp_reference;
    m_psp_reference_isSet = true;
}

bool OAICreateAccountHolderResponse::is_psp_reference_Set() const{
    return m_psp_reference_isSet;
}

bool OAICreateAccountHolderResponse::is_psp_reference_Valid() const{
    return m_psp_reference_isValid;
}

QString OAICreateAccountHolderResponse::getResultCode() const {
    return m_result_code;
}
void OAICreateAccountHolderResponse::setResultCode(const QString &result_code) {
    m_result_code = result_code;
    m_result_code_isSet = true;
}

bool OAICreateAccountHolderResponse::is_result_code_Set() const{
    return m_result_code_isSet;
}

bool OAICreateAccountHolderResponse::is_result_code_Valid() const{
    return m_result_code_isValid;
}

bool OAICreateAccountHolderResponse::isSubmittedAsync() const {
    return m_submitted_async;
}
void OAICreateAccountHolderResponse::setSubmittedAsync(const bool &submitted_async) {
    m_submitted_async = submitted_async;
    m_submitted_async_isSet = true;
}

bool OAICreateAccountHolderResponse::is_submitted_async_Set() const{
    return m_submitted_async_isSet;
}

bool OAICreateAccountHolderResponse::is_submitted_async_Valid() const{
    return m_submitted_async_isValid;
}

OAIKYCVerificationResult OAICreateAccountHolderResponse::getVerification() const {
    return m_verification;
}
void OAICreateAccountHolderResponse::setVerification(const OAIKYCVerificationResult &verification) {
    m_verification = verification;
    m_verification_isSet = true;
}

bool OAICreateAccountHolderResponse::is_verification_Set() const{
    return m_verification_isSet;
}

bool OAICreateAccountHolderResponse::is_verification_Valid() const{
    return m_verification_isValid;
}

bool OAICreateAccountHolderResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_account_holder_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_account_holder_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_account_holder_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_invalid_fields.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_psp_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_result_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_submitted_async_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_verification.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateAccountHolderResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
