/**
 * Classic Platforms - Notifications
 * This API is used for the classic integration. If you are just starting your implementation, refer to our [new integration guide](https://docs.adyen.com/marketplaces-and-platforms) instead.  The Notification API sends notifications to the endpoints specified in a given subscription.  Subscriptions are managed through the Notification Configuration API. The API specifications listed here detail the format of each notification.  For more information, refer to our [documentation](https://docs.adyen.com/marketplaces-and-platforms/classic/notifications).
 *
 * The version of the OpenAPI document: 3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReportAvailableNotificationContent.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReportAvailableNotificationContent::OAIReportAvailableNotificationContent(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReportAvailableNotificationContent::OAIReportAvailableNotificationContent() {
    this->initializeModel();
}

OAIReportAvailableNotificationContent::~OAIReportAvailableNotificationContent() {}

void OAIReportAvailableNotificationContent::initializeModel() {

    m_account_code_isSet = false;
    m_account_code_isValid = false;

    m_account_type_isSet = false;
    m_account_type_isValid = false;

    m_event_date_isSet = false;
    m_event_date_isValid = false;

    m_remote_access_url_isSet = false;
    m_remote_access_url_isValid = false;

    m_success_isSet = false;
    m_success_isValid = false;
}

void OAIReportAvailableNotificationContent::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReportAvailableNotificationContent::fromJsonObject(QJsonObject json) {

    m_account_code_isValid = ::OpenAPI::fromJsonValue(m_account_code, json[QString("accountCode")]);
    m_account_code_isSet = !json[QString("accountCode")].isNull() && m_account_code_isValid;

    m_account_type_isValid = ::OpenAPI::fromJsonValue(m_account_type, json[QString("accountType")]);
    m_account_type_isSet = !json[QString("accountType")].isNull() && m_account_type_isValid;

    m_event_date_isValid = ::OpenAPI::fromJsonValue(m_event_date, json[QString("eventDate")]);
    m_event_date_isSet = !json[QString("eventDate")].isNull() && m_event_date_isValid;

    m_remote_access_url_isValid = ::OpenAPI::fromJsonValue(m_remote_access_url, json[QString("remoteAccessUrl")]);
    m_remote_access_url_isSet = !json[QString("remoteAccessUrl")].isNull() && m_remote_access_url_isValid;

    m_success_isValid = ::OpenAPI::fromJsonValue(m_success, json[QString("success")]);
    m_success_isSet = !json[QString("success")].isNull() && m_success_isValid;
}

QString OAIReportAvailableNotificationContent::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReportAvailableNotificationContent::asJsonObject() const {
    QJsonObject obj;
    if (m_account_code_isSet) {
        obj.insert(QString("accountCode"), ::OpenAPI::toJsonValue(m_account_code));
    }
    if (m_account_type_isSet) {
        obj.insert(QString("accountType"), ::OpenAPI::toJsonValue(m_account_type));
    }
    if (m_event_date_isSet) {
        obj.insert(QString("eventDate"), ::OpenAPI::toJsonValue(m_event_date));
    }
    if (m_remote_access_url_isSet) {
        obj.insert(QString("remoteAccessUrl"), ::OpenAPI::toJsonValue(m_remote_access_url));
    }
    if (m_success_isSet) {
        obj.insert(QString("success"), ::OpenAPI::toJsonValue(m_success));
    }
    return obj;
}

QString OAIReportAvailableNotificationContent::getAccountCode() const {
    return m_account_code;
}
void OAIReportAvailableNotificationContent::setAccountCode(const QString &account_code) {
    m_account_code = account_code;
    m_account_code_isSet = true;
}

bool OAIReportAvailableNotificationContent::is_account_code_Set() const{
    return m_account_code_isSet;
}

bool OAIReportAvailableNotificationContent::is_account_code_Valid() const{
    return m_account_code_isValid;
}

QString OAIReportAvailableNotificationContent::getAccountType() const {
    return m_account_type;
}
void OAIReportAvailableNotificationContent::setAccountType(const QString &account_type) {
    m_account_type = account_type;
    m_account_type_isSet = true;
}

bool OAIReportAvailableNotificationContent::is_account_type_Set() const{
    return m_account_type_isSet;
}

bool OAIReportAvailableNotificationContent::is_account_type_Valid() const{
    return m_account_type_isValid;
}

QDateTime OAIReportAvailableNotificationContent::getEventDate() const {
    return m_event_date;
}
void OAIReportAvailableNotificationContent::setEventDate(const QDateTime &event_date) {
    m_event_date = event_date;
    m_event_date_isSet = true;
}

bool OAIReportAvailableNotificationContent::is_event_date_Set() const{
    return m_event_date_isSet;
}

bool OAIReportAvailableNotificationContent::is_event_date_Valid() const{
    return m_event_date_isValid;
}

QString OAIReportAvailableNotificationContent::getRemoteAccessUrl() const {
    return m_remote_access_url;
}
void OAIReportAvailableNotificationContent::setRemoteAccessUrl(const QString &remote_access_url) {
    m_remote_access_url = remote_access_url;
    m_remote_access_url_isSet = true;
}

bool OAIReportAvailableNotificationContent::is_remote_access_url_Set() const{
    return m_remote_access_url_isSet;
}

bool OAIReportAvailableNotificationContent::is_remote_access_url_Valid() const{
    return m_remote_access_url_isValid;
}

bool OAIReportAvailableNotificationContent::isSuccess() const {
    return m_success;
}
void OAIReportAvailableNotificationContent::setSuccess(const bool &success) {
    m_success = success;
    m_success_isSet = true;
}

bool OAIReportAvailableNotificationContent::is_success_Set() const{
    return m_success_isSet;
}

bool OAIReportAvailableNotificationContent::is_success_Valid() const{
    return m_success_isValid;
}

bool OAIReportAvailableNotificationContent::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_account_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_remote_access_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_success_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReportAvailableNotificationContent::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
