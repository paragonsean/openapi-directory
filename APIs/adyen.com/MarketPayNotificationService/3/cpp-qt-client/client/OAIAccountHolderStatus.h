/**
 * Classic Platforms - Notifications
 * This API is used for the classic integration. If you are just starting your implementation, refer to our [new integration guide](https://docs.adyen.com/marketplaces-and-platforms) instead.  The Notification API sends notifications to the endpoints specified in a given subscription.  Subscriptions are managed through the Notification Configuration API. The API specifications listed here detail the format of each notification.  For more information, refer to our [documentation](https://docs.adyen.com/marketplaces-and-platforms/classic/notifications).
 *
 * The version of the OpenAPI document: 3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIAccountHolderStatus.h
 *
 * 
 */

#ifndef OAIAccountHolderStatus_H
#define OAIAccountHolderStatus_H

#include <QJsonObject>

#include "OAIAccountEventWrapper.h"
#include "OAIAccountPayoutState.h"
#include "OAIAccountProcessingState.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIAccountEventWrapper;
class OAIAccountPayoutState;
class OAIAccountProcessingState;

class OAIAccountHolderStatus : public OAIObject {
public:
    OAIAccountHolderStatus();
    OAIAccountHolderStatus(QString json);
    ~OAIAccountHolderStatus() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<OAIAccountEventWrapper> getEvents() const;
    void setEvents(const QList<OAIAccountEventWrapper> &events);
    bool is_events_Set() const;
    bool is_events_Valid() const;

    OAIAccountPayoutState getPayoutState() const;
    void setPayoutState(const OAIAccountPayoutState &payout_state);
    bool is_payout_state_Set() const;
    bool is_payout_state_Valid() const;

    OAIAccountProcessingState getProcessingState() const;
    void setProcessingState(const OAIAccountProcessingState &processing_state);
    bool is_processing_state_Set() const;
    bool is_processing_state_Valid() const;

    QString getStatus() const;
    void setStatus(const QString &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    QString getStatusReason() const;
    void setStatusReason(const QString &status_reason);
    bool is_status_reason_Set() const;
    bool is_status_reason_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<OAIAccountEventWrapper> m_events;
    bool m_events_isSet;
    bool m_events_isValid;

    OAIAccountPayoutState m_payout_state;
    bool m_payout_state_isSet;
    bool m_payout_state_isValid;

    OAIAccountProcessingState m_processing_state;
    bool m_processing_state_isSet;
    bool m_processing_state_isValid;

    QString m_status;
    bool m_status_isSet;
    bool m_status_isValid;

    QString m_status_reason;
    bool m_status_reason_isSet;
    bool m_status_reason_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIAccountHolderStatus)

#endif // OAIAccountHolderStatus_H
