/**
 * Classic Platforms - Notifications
 * This API is used for the classic integration. If you are just starting your implementation, refer to our [new integration guide](https://docs.adyen.com/marketplaces-and-platforms) instead.  The Notification API sends notifications to the endpoints specified in a given subscription.  Subscriptions are managed through the Notification Configuration API. The API specifications listed here detail the format of each notification.  For more information, refer to our [documentation](https://docs.adyen.com/marketplaces-and-platforms/classic/notifications).
 *
 * The version of the OpenAPI document: 3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAccountHolderPayoutNotificationContent.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAccountHolderPayoutNotificationContent::OAIAccountHolderPayoutNotificationContent(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAccountHolderPayoutNotificationContent::OAIAccountHolderPayoutNotificationContent() {
    this->initializeModel();
}

OAIAccountHolderPayoutNotificationContent::~OAIAccountHolderPayoutNotificationContent() {}

void OAIAccountHolderPayoutNotificationContent::initializeModel() {

    m_account_code_isSet = false;
    m_account_code_isValid = false;

    m_account_holder_code_isSet = false;
    m_account_holder_code_isValid = false;

    m_amount_isSet = false;
    m_amount_isValid = false;

    m_amounts_isSet = false;
    m_amounts_isValid = false;

    m_bank_account_detail_isSet = false;
    m_bank_account_detail_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_merchant_reference_isSet = false;
    m_merchant_reference_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIAccountHolderPayoutNotificationContent::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAccountHolderPayoutNotificationContent::fromJsonObject(QJsonObject json) {

    m_account_code_isValid = ::OpenAPI::fromJsonValue(m_account_code, json[QString("accountCode")]);
    m_account_code_isSet = !json[QString("accountCode")].isNull() && m_account_code_isValid;

    m_account_holder_code_isValid = ::OpenAPI::fromJsonValue(m_account_holder_code, json[QString("accountHolderCode")]);
    m_account_holder_code_isSet = !json[QString("accountHolderCode")].isNull() && m_account_holder_code_isValid;

    m_amount_isValid = ::OpenAPI::fromJsonValue(m_amount, json[QString("amount")]);
    m_amount_isSet = !json[QString("amount")].isNull() && m_amount_isValid;

    m_amounts_isValid = ::OpenAPI::fromJsonValue(m_amounts, json[QString("amounts")]);
    m_amounts_isSet = !json[QString("amounts")].isNull() && m_amounts_isValid;

    m_bank_account_detail_isValid = ::OpenAPI::fromJsonValue(m_bank_account_detail, json[QString("bankAccountDetail")]);
    m_bank_account_detail_isSet = !json[QString("bankAccountDetail")].isNull() && m_bank_account_detail_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_merchant_reference_isValid = ::OpenAPI::fromJsonValue(m_merchant_reference, json[QString("merchantReference")]);
    m_merchant_reference_isSet = !json[QString("merchantReference")].isNull() && m_merchant_reference_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAIAccountHolderPayoutNotificationContent::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAccountHolderPayoutNotificationContent::asJsonObject() const {
    QJsonObject obj;
    if (m_account_code_isSet) {
        obj.insert(QString("accountCode"), ::OpenAPI::toJsonValue(m_account_code));
    }
    if (m_account_holder_code_isSet) {
        obj.insert(QString("accountHolderCode"), ::OpenAPI::toJsonValue(m_account_holder_code));
    }
    if (m_amount.isSet()) {
        obj.insert(QString("amount"), ::OpenAPI::toJsonValue(m_amount));
    }
    if (m_amounts.size() > 0) {
        obj.insert(QString("amounts"), ::OpenAPI::toJsonValue(m_amounts));
    }
    if (m_bank_account_detail.isSet()) {
        obj.insert(QString("bankAccountDetail"), ::OpenAPI::toJsonValue(m_bank_account_detail));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_merchant_reference_isSet) {
        obj.insert(QString("merchantReference"), ::OpenAPI::toJsonValue(m_merchant_reference));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QString OAIAccountHolderPayoutNotificationContent::getAccountCode() const {
    return m_account_code;
}
void OAIAccountHolderPayoutNotificationContent::setAccountCode(const QString &account_code) {
    m_account_code = account_code;
    m_account_code_isSet = true;
}

bool OAIAccountHolderPayoutNotificationContent::is_account_code_Set() const{
    return m_account_code_isSet;
}

bool OAIAccountHolderPayoutNotificationContent::is_account_code_Valid() const{
    return m_account_code_isValid;
}

QString OAIAccountHolderPayoutNotificationContent::getAccountHolderCode() const {
    return m_account_holder_code;
}
void OAIAccountHolderPayoutNotificationContent::setAccountHolderCode(const QString &account_holder_code) {
    m_account_holder_code = account_holder_code;
    m_account_holder_code_isSet = true;
}

bool OAIAccountHolderPayoutNotificationContent::is_account_holder_code_Set() const{
    return m_account_holder_code_isSet;
}

bool OAIAccountHolderPayoutNotificationContent::is_account_holder_code_Valid() const{
    return m_account_holder_code_isValid;
}

OAIAmount OAIAccountHolderPayoutNotificationContent::getAmount() const {
    return m_amount;
}
void OAIAccountHolderPayoutNotificationContent::setAmount(const OAIAmount &amount) {
    m_amount = amount;
    m_amount_isSet = true;
}

bool OAIAccountHolderPayoutNotificationContent::is_amount_Set() const{
    return m_amount_isSet;
}

bool OAIAccountHolderPayoutNotificationContent::is_amount_Valid() const{
    return m_amount_isValid;
}

QList<OAIAmountWrapper> OAIAccountHolderPayoutNotificationContent::getAmounts() const {
    return m_amounts;
}
void OAIAccountHolderPayoutNotificationContent::setAmounts(const QList<OAIAmountWrapper> &amounts) {
    m_amounts = amounts;
    m_amounts_isSet = true;
}

bool OAIAccountHolderPayoutNotificationContent::is_amounts_Set() const{
    return m_amounts_isSet;
}

bool OAIAccountHolderPayoutNotificationContent::is_amounts_Valid() const{
    return m_amounts_isValid;
}

OAIBankAccountDetail OAIAccountHolderPayoutNotificationContent::getBankAccountDetail() const {
    return m_bank_account_detail;
}
void OAIAccountHolderPayoutNotificationContent::setBankAccountDetail(const OAIBankAccountDetail &bank_account_detail) {
    m_bank_account_detail = bank_account_detail;
    m_bank_account_detail_isSet = true;
}

bool OAIAccountHolderPayoutNotificationContent::is_bank_account_detail_Set() const{
    return m_bank_account_detail_isSet;
}

bool OAIAccountHolderPayoutNotificationContent::is_bank_account_detail_Valid() const{
    return m_bank_account_detail_isValid;
}

QString OAIAccountHolderPayoutNotificationContent::getDescription() const {
    return m_description;
}
void OAIAccountHolderPayoutNotificationContent::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIAccountHolderPayoutNotificationContent::is_description_Set() const{
    return m_description_isSet;
}

bool OAIAccountHolderPayoutNotificationContent::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIAccountHolderPayoutNotificationContent::getMerchantReference() const {
    return m_merchant_reference;
}
void OAIAccountHolderPayoutNotificationContent::setMerchantReference(const QString &merchant_reference) {
    m_merchant_reference = merchant_reference;
    m_merchant_reference_isSet = true;
}

bool OAIAccountHolderPayoutNotificationContent::is_merchant_reference_Set() const{
    return m_merchant_reference_isSet;
}

bool OAIAccountHolderPayoutNotificationContent::is_merchant_reference_Valid() const{
    return m_merchant_reference_isValid;
}

OAIOperationStatus OAIAccountHolderPayoutNotificationContent::getStatus() const {
    return m_status;
}
void OAIAccountHolderPayoutNotificationContent::setStatus(const OAIOperationStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIAccountHolderPayoutNotificationContent::is_status_Set() const{
    return m_status_isSet;
}

bool OAIAccountHolderPayoutNotificationContent::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIAccountHolderPayoutNotificationContent::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_account_holder_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_amount.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_amounts.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_bank_account_detail.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_merchant_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAccountHolderPayoutNotificationContent::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
