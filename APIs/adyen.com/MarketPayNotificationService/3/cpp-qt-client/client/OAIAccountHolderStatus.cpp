/**
 * Classic Platforms - Notifications
 * This API is used for the classic integration. If you are just starting your implementation, refer to our [new integration guide](https://docs.adyen.com/marketplaces-and-platforms) instead.  The Notification API sends notifications to the endpoints specified in a given subscription.  Subscriptions are managed through the Notification Configuration API. The API specifications listed here detail the format of each notification.  For more information, refer to our [documentation](https://docs.adyen.com/marketplaces-and-platforms/classic/notifications).
 *
 * The version of the OpenAPI document: 3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAccountHolderStatus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAccountHolderStatus::OAIAccountHolderStatus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAccountHolderStatus::OAIAccountHolderStatus() {
    this->initializeModel();
}

OAIAccountHolderStatus::~OAIAccountHolderStatus() {}

void OAIAccountHolderStatus::initializeModel() {

    m_events_isSet = false;
    m_events_isValid = false;

    m_payout_state_isSet = false;
    m_payout_state_isValid = false;

    m_processing_state_isSet = false;
    m_processing_state_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_status_reason_isSet = false;
    m_status_reason_isValid = false;
}

void OAIAccountHolderStatus::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAccountHolderStatus::fromJsonObject(QJsonObject json) {

    m_events_isValid = ::OpenAPI::fromJsonValue(m_events, json[QString("events")]);
    m_events_isSet = !json[QString("events")].isNull() && m_events_isValid;

    m_payout_state_isValid = ::OpenAPI::fromJsonValue(m_payout_state, json[QString("payoutState")]);
    m_payout_state_isSet = !json[QString("payoutState")].isNull() && m_payout_state_isValid;

    m_processing_state_isValid = ::OpenAPI::fromJsonValue(m_processing_state, json[QString("processingState")]);
    m_processing_state_isSet = !json[QString("processingState")].isNull() && m_processing_state_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_status_reason_isValid = ::OpenAPI::fromJsonValue(m_status_reason, json[QString("statusReason")]);
    m_status_reason_isSet = !json[QString("statusReason")].isNull() && m_status_reason_isValid;
}

QString OAIAccountHolderStatus::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAccountHolderStatus::asJsonObject() const {
    QJsonObject obj;
    if (m_events.size() > 0) {
        obj.insert(QString("events"), ::OpenAPI::toJsonValue(m_events));
    }
    if (m_payout_state.isSet()) {
        obj.insert(QString("payoutState"), ::OpenAPI::toJsonValue(m_payout_state));
    }
    if (m_processing_state.isSet()) {
        obj.insert(QString("processingState"), ::OpenAPI::toJsonValue(m_processing_state));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_status_reason_isSet) {
        obj.insert(QString("statusReason"), ::OpenAPI::toJsonValue(m_status_reason));
    }
    return obj;
}

QList<OAIAccountEventWrapper> OAIAccountHolderStatus::getEvents() const {
    return m_events;
}
void OAIAccountHolderStatus::setEvents(const QList<OAIAccountEventWrapper> &events) {
    m_events = events;
    m_events_isSet = true;
}

bool OAIAccountHolderStatus::is_events_Set() const{
    return m_events_isSet;
}

bool OAIAccountHolderStatus::is_events_Valid() const{
    return m_events_isValid;
}

OAIAccountPayoutState OAIAccountHolderStatus::getPayoutState() const {
    return m_payout_state;
}
void OAIAccountHolderStatus::setPayoutState(const OAIAccountPayoutState &payout_state) {
    m_payout_state = payout_state;
    m_payout_state_isSet = true;
}

bool OAIAccountHolderStatus::is_payout_state_Set() const{
    return m_payout_state_isSet;
}

bool OAIAccountHolderStatus::is_payout_state_Valid() const{
    return m_payout_state_isValid;
}

OAIAccountProcessingState OAIAccountHolderStatus::getProcessingState() const {
    return m_processing_state;
}
void OAIAccountHolderStatus::setProcessingState(const OAIAccountProcessingState &processing_state) {
    m_processing_state = processing_state;
    m_processing_state_isSet = true;
}

bool OAIAccountHolderStatus::is_processing_state_Set() const{
    return m_processing_state_isSet;
}

bool OAIAccountHolderStatus::is_processing_state_Valid() const{
    return m_processing_state_isValid;
}

QString OAIAccountHolderStatus::getStatus() const {
    return m_status;
}
void OAIAccountHolderStatus::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIAccountHolderStatus::is_status_Set() const{
    return m_status_isSet;
}

bool OAIAccountHolderStatus::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIAccountHolderStatus::getStatusReason() const {
    return m_status_reason;
}
void OAIAccountHolderStatus::setStatusReason(const QString &status_reason) {
    m_status_reason = status_reason;
    m_status_reason_isSet = true;
}

bool OAIAccountHolderStatus::is_status_reason_Set() const{
    return m_status_reason_isSet;
}

bool OAIAccountHolderStatus::is_status_reason_Valid() const{
    return m_status_reason_isValid;
}

bool OAIAccountHolderStatus::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_events.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_payout_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_processing_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_reason_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAccountHolderStatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_status_isValid && true;
}

} // namespace OpenAPI
