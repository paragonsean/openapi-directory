/**
 * Classic Platforms - Notifications
 * This API is used for the classic integration. If you are just starting your implementation, refer to our [new integration guide](https://docs.adyen.com/marketplaces-and-platforms) instead.  The Notification API sends notifications to the endpoints specified in a given subscription.  Subscriptions are managed through the Notification Configuration API. The API specifications listed here detail the format of each notification.  For more information, refer to our [documentation](https://docs.adyen.com/marketplaces-and-platforms/classic/notifications).
 *
 * The version of the OpenAPI document: 3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUltimateParentCompanyBusinessDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUltimateParentCompanyBusinessDetails::OAIUltimateParentCompanyBusinessDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUltimateParentCompanyBusinessDetails::OAIUltimateParentCompanyBusinessDetails() {
    this->initializeModel();
}

OAIUltimateParentCompanyBusinessDetails::~OAIUltimateParentCompanyBusinessDetails() {}

void OAIUltimateParentCompanyBusinessDetails::initializeModel() {

    m_legal_business_name_isSet = false;
    m_legal_business_name_isValid = false;

    m_registration_number_isSet = false;
    m_registration_number_isValid = false;

    m_stock_exchange_isSet = false;
    m_stock_exchange_isValid = false;

    m_stock_number_isSet = false;
    m_stock_number_isValid = false;

    m_stock_ticker_isSet = false;
    m_stock_ticker_isValid = false;
}

void OAIUltimateParentCompanyBusinessDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUltimateParentCompanyBusinessDetails::fromJsonObject(QJsonObject json) {

    m_legal_business_name_isValid = ::OpenAPI::fromJsonValue(m_legal_business_name, json[QString("legalBusinessName")]);
    m_legal_business_name_isSet = !json[QString("legalBusinessName")].isNull() && m_legal_business_name_isValid;

    m_registration_number_isValid = ::OpenAPI::fromJsonValue(m_registration_number, json[QString("registrationNumber")]);
    m_registration_number_isSet = !json[QString("registrationNumber")].isNull() && m_registration_number_isValid;

    m_stock_exchange_isValid = ::OpenAPI::fromJsonValue(m_stock_exchange, json[QString("stockExchange")]);
    m_stock_exchange_isSet = !json[QString("stockExchange")].isNull() && m_stock_exchange_isValid;

    m_stock_number_isValid = ::OpenAPI::fromJsonValue(m_stock_number, json[QString("stockNumber")]);
    m_stock_number_isSet = !json[QString("stockNumber")].isNull() && m_stock_number_isValid;

    m_stock_ticker_isValid = ::OpenAPI::fromJsonValue(m_stock_ticker, json[QString("stockTicker")]);
    m_stock_ticker_isSet = !json[QString("stockTicker")].isNull() && m_stock_ticker_isValid;
}

QString OAIUltimateParentCompanyBusinessDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUltimateParentCompanyBusinessDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_legal_business_name_isSet) {
        obj.insert(QString("legalBusinessName"), ::OpenAPI::toJsonValue(m_legal_business_name));
    }
    if (m_registration_number_isSet) {
        obj.insert(QString("registrationNumber"), ::OpenAPI::toJsonValue(m_registration_number));
    }
    if (m_stock_exchange_isSet) {
        obj.insert(QString("stockExchange"), ::OpenAPI::toJsonValue(m_stock_exchange));
    }
    if (m_stock_number_isSet) {
        obj.insert(QString("stockNumber"), ::OpenAPI::toJsonValue(m_stock_number));
    }
    if (m_stock_ticker_isSet) {
        obj.insert(QString("stockTicker"), ::OpenAPI::toJsonValue(m_stock_ticker));
    }
    return obj;
}

QString OAIUltimateParentCompanyBusinessDetails::getLegalBusinessName() const {
    return m_legal_business_name;
}
void OAIUltimateParentCompanyBusinessDetails::setLegalBusinessName(const QString &legal_business_name) {
    m_legal_business_name = legal_business_name;
    m_legal_business_name_isSet = true;
}

bool OAIUltimateParentCompanyBusinessDetails::is_legal_business_name_Set() const{
    return m_legal_business_name_isSet;
}

bool OAIUltimateParentCompanyBusinessDetails::is_legal_business_name_Valid() const{
    return m_legal_business_name_isValid;
}

QString OAIUltimateParentCompanyBusinessDetails::getRegistrationNumber() const {
    return m_registration_number;
}
void OAIUltimateParentCompanyBusinessDetails::setRegistrationNumber(const QString &registration_number) {
    m_registration_number = registration_number;
    m_registration_number_isSet = true;
}

bool OAIUltimateParentCompanyBusinessDetails::is_registration_number_Set() const{
    return m_registration_number_isSet;
}

bool OAIUltimateParentCompanyBusinessDetails::is_registration_number_Valid() const{
    return m_registration_number_isValid;
}

QString OAIUltimateParentCompanyBusinessDetails::getStockExchange() const {
    return m_stock_exchange;
}
void OAIUltimateParentCompanyBusinessDetails::setStockExchange(const QString &stock_exchange) {
    m_stock_exchange = stock_exchange;
    m_stock_exchange_isSet = true;
}

bool OAIUltimateParentCompanyBusinessDetails::is_stock_exchange_Set() const{
    return m_stock_exchange_isSet;
}

bool OAIUltimateParentCompanyBusinessDetails::is_stock_exchange_Valid() const{
    return m_stock_exchange_isValid;
}

QString OAIUltimateParentCompanyBusinessDetails::getStockNumber() const {
    return m_stock_number;
}
void OAIUltimateParentCompanyBusinessDetails::setStockNumber(const QString &stock_number) {
    m_stock_number = stock_number;
    m_stock_number_isSet = true;
}

bool OAIUltimateParentCompanyBusinessDetails::is_stock_number_Set() const{
    return m_stock_number_isSet;
}

bool OAIUltimateParentCompanyBusinessDetails::is_stock_number_Valid() const{
    return m_stock_number_isValid;
}

QString OAIUltimateParentCompanyBusinessDetails::getStockTicker() const {
    return m_stock_ticker;
}
void OAIUltimateParentCompanyBusinessDetails::setStockTicker(const QString &stock_ticker) {
    m_stock_ticker = stock_ticker;
    m_stock_ticker_isSet = true;
}

bool OAIUltimateParentCompanyBusinessDetails::is_stock_ticker_Set() const{
    return m_stock_ticker_isSet;
}

bool OAIUltimateParentCompanyBusinessDetails::is_stock_ticker_Valid() const{
    return m_stock_ticker_isValid;
}

bool OAIUltimateParentCompanyBusinessDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_legal_business_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_registration_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stock_exchange_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stock_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stock_ticker_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUltimateParentCompanyBusinessDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
