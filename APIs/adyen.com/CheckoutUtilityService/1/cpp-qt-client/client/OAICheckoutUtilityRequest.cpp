/**
 * Adyen Checkout Utility Service
 * A web service containing utility functions available for merchants integrating with Checkout APIs. ## Authentication Each request to the Checkout Utility API must be signed with an API key. For this, obtain an API Key from your Customer Area, as described in [How to get the Checkout API key](https://docs.adyen.com/developers/user-management/how-to-get-the-checkout-api-key). Then set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: Your_Checkout_API_key\" \\ ... ``` Note that when going live, you need to generate a new API Key to access the [live endpoints](https://docs.adyen.com/developers/api-reference/live-endpoints).  ## Versioning Checkout API supports versioning of its endpoints through a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://checkout-test.adyen.com/v1/originKeys ```
 *
 * The version of the OpenAPI document: 1
 * Contact: support@adyen.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICheckoutUtilityRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICheckoutUtilityRequest::OAICheckoutUtilityRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICheckoutUtilityRequest::OAICheckoutUtilityRequest() {
    this->initializeModel();
}

OAICheckoutUtilityRequest::~OAICheckoutUtilityRequest() {}

void OAICheckoutUtilityRequest::initializeModel() {

    m_origin_domains_isSet = false;
    m_origin_domains_isValid = false;
}

void OAICheckoutUtilityRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICheckoutUtilityRequest::fromJsonObject(QJsonObject json) {

    m_origin_domains_isValid = ::OpenAPI::fromJsonValue(m_origin_domains, json[QString("originDomains")]);
    m_origin_domains_isSet = !json[QString("originDomains")].isNull() && m_origin_domains_isValid;
}

QString OAICheckoutUtilityRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICheckoutUtilityRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_origin_domains.size() > 0) {
        obj.insert(QString("originDomains"), ::OpenAPI::toJsonValue(m_origin_domains));
    }
    return obj;
}

QList<QString> OAICheckoutUtilityRequest::getOriginDomains() const {
    return m_origin_domains;
}
void OAICheckoutUtilityRequest::setOriginDomains(const QList<QString> &origin_domains) {
    m_origin_domains = origin_domains;
    m_origin_domains_isSet = true;
}

bool OAICheckoutUtilityRequest::is_origin_domains_Set() const{
    return m_origin_domains_isSet;
}

bool OAICheckoutUtilityRequest::is_origin_domains_Valid() const{
    return m_origin_domains_isValid;
}

bool OAICheckoutUtilityRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_origin_domains.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICheckoutUtilityRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_origin_domains_isValid && true;
}

} // namespace OpenAPI
