/**
 * Configuration webhooks
 * Adyen sends webhooks to inform your system about events that occur in your platform. These events include, for example, when an account holder's capabilities are updated, or when a sweep configuration is created or updated.  When an event occurs, Adyen makes an HTTP POST request to a URL on your server and includes the details of the event in the request body.  You can use these webhooks to build your implementation. For example, you can use this information to update internal statuses when the status of a capability is changed.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.ConfigurationWebhooks);
  }
}(this, function(expect, ConfigurationWebhooks) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new ConfigurationWebhooks.Card();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Card', function() {
    it('should create an instance of Card', function() {
      // uncomment below and update the code to test Card
      //var instance = new ConfigurationWebhooks.Card();
      //expect(instance).to.be.a(ConfigurationWebhooks.Card);
    });

    it('should have the property authentication (base name: "authentication")', function() {
      // uncomment below and update the code to test the property authentication
      //var instance = new ConfigurationWebhooks.Card();
      //expect(instance).to.be();
    });

    it('should have the property bin (base name: "bin")', function() {
      // uncomment below and update the code to test the property bin
      //var instance = new ConfigurationWebhooks.Card();
      //expect(instance).to.be();
    });

    it('should have the property brand (base name: "brand")', function() {
      // uncomment below and update the code to test the property brand
      //var instance = new ConfigurationWebhooks.Card();
      //expect(instance).to.be();
    });

    it('should have the property brandVariant (base name: "brandVariant")', function() {
      // uncomment below and update the code to test the property brandVariant
      //var instance = new ConfigurationWebhooks.Card();
      //expect(instance).to.be();
    });

    it('should have the property cardholderName (base name: "cardholderName")', function() {
      // uncomment below and update the code to test the property cardholderName
      //var instance = new ConfigurationWebhooks.Card();
      //expect(instance).to.be();
    });

    it('should have the property configuration (base name: "configuration")', function() {
      // uncomment below and update the code to test the property configuration
      //var instance = new ConfigurationWebhooks.Card();
      //expect(instance).to.be();
    });

    it('should have the property cvc (base name: "cvc")', function() {
      // uncomment below and update the code to test the property cvc
      //var instance = new ConfigurationWebhooks.Card();
      //expect(instance).to.be();
    });

    it('should have the property deliveryContact (base name: "deliveryContact")', function() {
      // uncomment below and update the code to test the property deliveryContact
      //var instance = new ConfigurationWebhooks.Card();
      //expect(instance).to.be();
    });

    it('should have the property expiration (base name: "expiration")', function() {
      // uncomment below and update the code to test the property expiration
      //var instance = new ConfigurationWebhooks.Card();
      //expect(instance).to.be();
    });

    it('should have the property formFactor (base name: "formFactor")', function() {
      // uncomment below and update the code to test the property formFactor
      //var instance = new ConfigurationWebhooks.Card();
      //expect(instance).to.be();
    });

    it('should have the property lastFour (base name: "lastFour")', function() {
      // uncomment below and update the code to test the property lastFour
      //var instance = new ConfigurationWebhooks.Card();
      //expect(instance).to.be();
    });

    it('should have the property number (base name: "number")', function() {
      // uncomment below and update the code to test the property number
      //var instance = new ConfigurationWebhooks.Card();
      //expect(instance).to.be();
    });

    it('should have the property threeDSecure (base name: "threeDSecure")', function() {
      // uncomment below and update the code to test the property threeDSecure
      //var instance = new ConfigurationWebhooks.Card();
      //expect(instance).to.be();
    });

  });

}));
