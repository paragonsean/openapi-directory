/**
 * Configuration webhooks
 * Adyen sends webhooks to inform your system about events that occur in your platform. These events include, for example, when an account holder's capabilities are updated, or when a sweep configuration is created or updated.  When an event occurs, Adyen makes an HTTP POST request to a URL on your server and includes the details of the event in the request body.  You can use these webhooks to build your implementation. For example, you can use this information to update internal statuses when the status of a capability is changed.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.ConfigurationWebhooks);
  }
}(this, function(expect, ConfigurationWebhooks) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new ConfigurationWebhooks.CardConfiguration();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('CardConfiguration', function() {
    it('should create an instance of CardConfiguration', function() {
      // uncomment below and update the code to test CardConfiguration
      //var instance = new ConfigurationWebhooks.CardConfiguration();
      //expect(instance).to.be.a(ConfigurationWebhooks.CardConfiguration);
    });

    it('should have the property activation (base name: "activation")', function() {
      // uncomment below and update the code to test the property activation
      //var instance = new ConfigurationWebhooks.CardConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property activationUrl (base name: "activationUrl")', function() {
      // uncomment below and update the code to test the property activationUrl
      //var instance = new ConfigurationWebhooks.CardConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property bulkAddress (base name: "bulkAddress")', function() {
      // uncomment below and update the code to test the property bulkAddress
      //var instance = new ConfigurationWebhooks.CardConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property cardImageId (base name: "cardImageId")', function() {
      // uncomment below and update the code to test the property cardImageId
      //var instance = new ConfigurationWebhooks.CardConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property carrier (base name: "carrier")', function() {
      // uncomment below and update the code to test the property carrier
      //var instance = new ConfigurationWebhooks.CardConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property carrierImageId (base name: "carrierImageId")', function() {
      // uncomment below and update the code to test the property carrierImageId
      //var instance = new ConfigurationWebhooks.CardConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property configurationProfileId (base name: "configurationProfileId")', function() {
      // uncomment below and update the code to test the property configurationProfileId
      //var instance = new ConfigurationWebhooks.CardConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property currency (base name: "currency")', function() {
      // uncomment below and update the code to test the property currency
      //var instance = new ConfigurationWebhooks.CardConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property envelope (base name: "envelope")', function() {
      // uncomment below and update the code to test the property envelope
      //var instance = new ConfigurationWebhooks.CardConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property insert (base name: "insert")', function() {
      // uncomment below and update the code to test the property insert
      //var instance = new ConfigurationWebhooks.CardConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property language (base name: "language")', function() {
      // uncomment below and update the code to test the property language
      //var instance = new ConfigurationWebhooks.CardConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property logoImageId (base name: "logoImageId")', function() {
      // uncomment below and update the code to test the property logoImageId
      //var instance = new ConfigurationWebhooks.CardConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property pinMailer (base name: "pinMailer")', function() {
      // uncomment below and update the code to test the property pinMailer
      //var instance = new ConfigurationWebhooks.CardConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property shipmentMethod (base name: "shipmentMethod")', function() {
      // uncomment below and update the code to test the property shipmentMethod
      //var instance = new ConfigurationWebhooks.CardConfiguration();
      //expect(instance).to.be();
    });

  });

}));
