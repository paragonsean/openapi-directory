/**
 * Configuration webhooks
 * Adyen sends webhooks to inform your system about events that occur in your platform. These events include, for example, when an account holder's capabilities are updated, or when a sweep configuration is created or updated.  When an event occurs, Adyen makes an HTTP POST request to a URL on your server and includes the details of the event in the request body.  You can use these webhooks to build your implementation. For example, you can use this information to update internal statuses when the status of a capability is changed.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.ConfigurationWebhooks);
  }
}(this, function(expect, ConfigurationWebhooks) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new ConfigurationWebhooks.AccountHolderCapability();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('AccountHolderCapability', function() {
    it('should create an instance of AccountHolderCapability', function() {
      // uncomment below and update the code to test AccountHolderCapability
      //var instance = new ConfigurationWebhooks.AccountHolderCapability();
      //expect(instance).to.be.a(ConfigurationWebhooks.AccountHolderCapability);
    });

    it('should have the property allowed (base name: "allowed")', function() {
      // uncomment below and update the code to test the property allowed
      //var instance = new ConfigurationWebhooks.AccountHolderCapability();
      //expect(instance).to.be();
    });

    it('should have the property allowedLevel (base name: "allowedLevel")', function() {
      // uncomment below and update the code to test the property allowedLevel
      //var instance = new ConfigurationWebhooks.AccountHolderCapability();
      //expect(instance).to.be();
    });

    it('should have the property allowedSettings (base name: "allowedSettings")', function() {
      // uncomment below and update the code to test the property allowedSettings
      //var instance = new ConfigurationWebhooks.AccountHolderCapability();
      //expect(instance).to.be();
    });

    it('should have the property enabled (base name: "enabled")', function() {
      // uncomment below and update the code to test the property enabled
      //var instance = new ConfigurationWebhooks.AccountHolderCapability();
      //expect(instance).to.be();
    });

    it('should have the property problems (base name: "problems")', function() {
      // uncomment below and update the code to test the property problems
      //var instance = new ConfigurationWebhooks.AccountHolderCapability();
      //expect(instance).to.be();
    });

    it('should have the property requested (base name: "requested")', function() {
      // uncomment below and update the code to test the property requested
      //var instance = new ConfigurationWebhooks.AccountHolderCapability();
      //expect(instance).to.be();
    });

    it('should have the property requestedLevel (base name: "requestedLevel")', function() {
      // uncomment below and update the code to test the property requestedLevel
      //var instance = new ConfigurationWebhooks.AccountHolderCapability();
      //expect(instance).to.be();
    });

    it('should have the property requestedSettings (base name: "requestedSettings")', function() {
      // uncomment below and update the code to test the property requestedSettings
      //var instance = new ConfigurationWebhooks.AccountHolderCapability();
      //expect(instance).to.be();
    });

    it('should have the property transferInstruments (base name: "transferInstruments")', function() {
      // uncomment below and update the code to test the property transferInstruments
      //var instance = new ConfigurationWebhooks.AccountHolderCapability();
      //expect(instance).to.be();
    });

    it('should have the property verificationStatus (base name: "verificationStatus")', function() {
      // uncomment below and update the code to test the property verificationStatus
      //var instance = new ConfigurationWebhooks.AccountHolderCapability();
      //expect(instance).to.be();
    });

  });

}));
