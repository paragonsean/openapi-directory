/**
 * Configuration webhooks
 * Adyen sends webhooks to inform your system about events that occur in your platform. These events include, for example, when an account holder's capabilities are updated, or when a sweep configuration is created or updated.  When an event occurs, Adyen makes an HTTP POST request to a URL on your server and includes the details of the event in the request body.  You can use these webhooks to build your implementation. For example, you can use this information to update internal statuses when the status of a capability is changed.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.ConfigurationWebhooks);
  }
}(this, function(expect, ConfigurationWebhooks) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new ConfigurationWebhooks.SweepConfigurationV2();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('SweepConfigurationV2', function() {
    it('should create an instance of SweepConfigurationV2', function() {
      // uncomment below and update the code to test SweepConfigurationV2
      //var instance = new ConfigurationWebhooks.SweepConfigurationV2();
      //expect(instance).to.be.a(ConfigurationWebhooks.SweepConfigurationV2);
    });

    it('should have the property counterparty (base name: "counterparty")', function() {
      // uncomment below and update the code to test the property counterparty
      //var instance = new ConfigurationWebhooks.SweepConfigurationV2();
      //expect(instance).to.be();
    });

    it('should have the property currency (base name: "currency")', function() {
      // uncomment below and update the code to test the property currency
      //var instance = new ConfigurationWebhooks.SweepConfigurationV2();
      //expect(instance).to.be();
    });

    it('should have the property description (base name: "description")', function() {
      // uncomment below and update the code to test the property description
      //var instance = new ConfigurationWebhooks.SweepConfigurationV2();
      //expect(instance).to.be();
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instance = new ConfigurationWebhooks.SweepConfigurationV2();
      //expect(instance).to.be();
    });

    it('should have the property reason (base name: "reason")', function() {
      // uncomment below and update the code to test the property reason
      //var instance = new ConfigurationWebhooks.SweepConfigurationV2();
      //expect(instance).to.be();
    });

    it('should have the property schedule (base name: "schedule")', function() {
      // uncomment below and update the code to test the property schedule
      //var instance = new ConfigurationWebhooks.SweepConfigurationV2();
      //expect(instance).to.be();
    });

    it('should have the property status (base name: "status")', function() {
      // uncomment below and update the code to test the property status
      //var instance = new ConfigurationWebhooks.SweepConfigurationV2();
      //expect(instance).to.be();
    });

    it('should have the property sweepAmount (base name: "sweepAmount")', function() {
      // uncomment below and update the code to test the property sweepAmount
      //var instance = new ConfigurationWebhooks.SweepConfigurationV2();
      //expect(instance).to.be();
    });

    it('should have the property targetAmount (base name: "targetAmount")', function() {
      // uncomment below and update the code to test the property targetAmount
      //var instance = new ConfigurationWebhooks.SweepConfigurationV2();
      //expect(instance).to.be();
    });

    it('should have the property triggerAmount (base name: "triggerAmount")', function() {
      // uncomment below and update the code to test the property triggerAmount
      //var instance = new ConfigurationWebhooks.SweepConfigurationV2();
      //expect(instance).to.be();
    });

    it('should have the property type (base name: "type")', function() {
      // uncomment below and update the code to test the property type
      //var instance = new ConfigurationWebhooks.SweepConfigurationV2();
      //expect(instance).to.be();
    });

  });

}));
