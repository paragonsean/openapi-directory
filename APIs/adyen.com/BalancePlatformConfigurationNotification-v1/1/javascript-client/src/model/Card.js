/**
 * Configuration webhooks
 * Adyen sends webhooks to inform your system about events that occur in your platform. These events include, for example, when an account holder's capabilities are updated, or when a sweep configuration is created or updated.  When an event occurs, Adyen makes an HTTP POST request to a URL on your server and includes the details of the event in the request body.  You can use these webhooks to build your implementation. For example, you can use this information to update internal statuses when the status of a capability is changed.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Authentication from './Authentication';
import CardConfiguration from './CardConfiguration';
import Contact from './Contact';
import Expiry from './Expiry';

/**
 * The Card model module.
 * @module model/Card
 * @version 1
 */
class Card {
    /**
     * Constructs a new <code>Card</code>.
     * @alias module:model/Card
     * @param brand {String} The brand of the physical or the virtual card. Possible values: **visa**, **mc**.
     * @param brandVariant {String} The brand variant of the physical or the virtual card. For example, **visadebit** or **mcprepaid**. >Reach out to your Adyen contact to get the values relevant for your integration.
     * @param cardholderName {String} The name of the cardholder.  Maximum length: 26 characters.
     * @param formFactor {module:model/Card.FormFactorEnum} The form factor of the card. Possible values: **virtual**, **physical**.
     * @param number {String} The primary account number (PAN) of the card. > The PAN is masked by default and returned only for single-use virtual cards.
     */
    constructor(brand, brandVariant, cardholderName, formFactor, number) { 
        
        Card.initialize(this, brand, brandVariant, cardholderName, formFactor, number);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, brand, brandVariant, cardholderName, formFactor, number) { 
        obj['brand'] = brand;
        obj['brandVariant'] = brandVariant;
        obj['cardholderName'] = cardholderName;
        obj['formFactor'] = formFactor;
        obj['number'] = number;
    }

    /**
     * Constructs a <code>Card</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Card} obj Optional instance to populate.
     * @return {module:model/Card} The populated <code>Card</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Card();

            if (data.hasOwnProperty('authentication')) {
                obj['authentication'] = Authentication.constructFromObject(data['authentication']);
            }
            if (data.hasOwnProperty('bin')) {
                obj['bin'] = ApiClient.convertToType(data['bin'], 'String');
            }
            if (data.hasOwnProperty('brand')) {
                obj['brand'] = ApiClient.convertToType(data['brand'], 'String');
            }
            if (data.hasOwnProperty('brandVariant')) {
                obj['brandVariant'] = ApiClient.convertToType(data['brandVariant'], 'String');
            }
            if (data.hasOwnProperty('cardholderName')) {
                obj['cardholderName'] = ApiClient.convertToType(data['cardholderName'], 'String');
            }
            if (data.hasOwnProperty('configuration')) {
                obj['configuration'] = CardConfiguration.constructFromObject(data['configuration']);
            }
            if (data.hasOwnProperty('cvc')) {
                obj['cvc'] = ApiClient.convertToType(data['cvc'], 'String');
            }
            if (data.hasOwnProperty('deliveryContact')) {
                obj['deliveryContact'] = Contact.constructFromObject(data['deliveryContact']);
            }
            if (data.hasOwnProperty('expiration')) {
                obj['expiration'] = Expiry.constructFromObject(data['expiration']);
            }
            if (data.hasOwnProperty('formFactor')) {
                obj['formFactor'] = ApiClient.convertToType(data['formFactor'], 'String');
            }
            if (data.hasOwnProperty('lastFour')) {
                obj['lastFour'] = ApiClient.convertToType(data['lastFour'], 'String');
            }
            if (data.hasOwnProperty('number')) {
                obj['number'] = ApiClient.convertToType(data['number'], 'String');
            }
            if (data.hasOwnProperty('threeDSecure')) {
                obj['threeDSecure'] = ApiClient.convertToType(data['threeDSecure'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Card</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Card</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Card.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `authentication`
        if (data['authentication']) { // data not null
          Authentication.validateJSON(data['authentication']);
        }
        // ensure the json data is a string
        if (data['bin'] && !(typeof data['bin'] === 'string' || data['bin'] instanceof String)) {
            throw new Error("Expected the field `bin` to be a primitive type in the JSON string but got " + data['bin']);
        }
        // ensure the json data is a string
        if (data['brand'] && !(typeof data['brand'] === 'string' || data['brand'] instanceof String)) {
            throw new Error("Expected the field `brand` to be a primitive type in the JSON string but got " + data['brand']);
        }
        // ensure the json data is a string
        if (data['brandVariant'] && !(typeof data['brandVariant'] === 'string' || data['brandVariant'] instanceof String)) {
            throw new Error("Expected the field `brandVariant` to be a primitive type in the JSON string but got " + data['brandVariant']);
        }
        // ensure the json data is a string
        if (data['cardholderName'] && !(typeof data['cardholderName'] === 'string' || data['cardholderName'] instanceof String)) {
            throw new Error("Expected the field `cardholderName` to be a primitive type in the JSON string but got " + data['cardholderName']);
        }
        // validate the optional field `configuration`
        if (data['configuration']) { // data not null
          CardConfiguration.validateJSON(data['configuration']);
        }
        // ensure the json data is a string
        if (data['cvc'] && !(typeof data['cvc'] === 'string' || data['cvc'] instanceof String)) {
            throw new Error("Expected the field `cvc` to be a primitive type in the JSON string but got " + data['cvc']);
        }
        // validate the optional field `deliveryContact`
        if (data['deliveryContact']) { // data not null
          Contact.validateJSON(data['deliveryContact']);
        }
        // validate the optional field `expiration`
        if (data['expiration']) { // data not null
          Expiry.validateJSON(data['expiration']);
        }
        // ensure the json data is a string
        if (data['formFactor'] && !(typeof data['formFactor'] === 'string' || data['formFactor'] instanceof String)) {
            throw new Error("Expected the field `formFactor` to be a primitive type in the JSON string but got " + data['formFactor']);
        }
        // ensure the json data is a string
        if (data['lastFour'] && !(typeof data['lastFour'] === 'string' || data['lastFour'] instanceof String)) {
            throw new Error("Expected the field `lastFour` to be a primitive type in the JSON string but got " + data['lastFour']);
        }
        // ensure the json data is a string
        if (data['number'] && !(typeof data['number'] === 'string' || data['number'] instanceof String)) {
            throw new Error("Expected the field `number` to be a primitive type in the JSON string but got " + data['number']);
        }
        // ensure the json data is a string
        if (data['threeDSecure'] && !(typeof data['threeDSecure'] === 'string' || data['threeDSecure'] instanceof String)) {
            throw new Error("Expected the field `threeDSecure` to be a primitive type in the JSON string but got " + data['threeDSecure']);
        }

        return true;
    }


}

Card.RequiredProperties = ["brand", "brandVariant", "cardholderName", "formFactor", "number"];

/**
 * Contains the card user's password and mobile phone number. This is required when you issue cards that can be used to make online payments within the EEA and the UK, or can be added to digital wallets. Refer to [3D Secure and digital wallets](https://docs.adyen.com/issuing/3d-secure-and-wallets) for more information.
 * @member {module:model/Authentication} authentication
 */
Card.prototype['authentication'] = undefined;

/**
 * The bank identification number (BIN) of the card number.
 * @member {String} bin
 */
Card.prototype['bin'] = undefined;

/**
 * The brand of the physical or the virtual card. Possible values: **visa**, **mc**.
 * @member {String} brand
 */
Card.prototype['brand'] = undefined;

/**
 * The brand variant of the physical or the virtual card. For example, **visadebit** or **mcprepaid**. >Reach out to your Adyen contact to get the values relevant for your integration.
 * @member {String} brandVariant
 */
Card.prototype['brandVariant'] = undefined;

/**
 * The name of the cardholder.  Maximum length: 26 characters.
 * @member {String} cardholderName
 */
Card.prototype['cardholderName'] = undefined;

/**
 * Settings required when creating a physical or a virtual card.   Reach out to your Adyen contact to get the values that you can send in this object.
 * @member {module:model/CardConfiguration} configuration
 */
Card.prototype['configuration'] = undefined;

/**
 * The CVC2 value of the card. > The CVC2 is not sent by default. This is only returned in the `POST` response for single-use virtual cards.
 * @member {String} cvc
 */
Card.prototype['cvc'] = undefined;

/**
 * The delivery contact (name and address) for physical card delivery.
 * @member {module:model/Contact} deliveryContact
 */
Card.prototype['deliveryContact'] = undefined;

/**
 * The expiration date of the card.
 * @member {module:model/Expiry} expiration
 */
Card.prototype['expiration'] = undefined;

/**
 * The form factor of the card. Possible values: **virtual**, **physical**.
 * @member {module:model/Card.FormFactorEnum} formFactor
 */
Card.prototype['formFactor'] = undefined;

/**
 * Last last four digits of the card number.
 * @member {String} lastFour
 */
Card.prototype['lastFour'] = undefined;

/**
 * The primary account number (PAN) of the card. > The PAN is masked by default and returned only for single-use virtual cards.
 * @member {String} number
 */
Card.prototype['number'] = undefined;

/**
 * Allocates a specific product range for either a physical or a virtual card. Possible values: **fullySupported**, **secureCorporate**. >Reach out to your Adyen contact to get the values relevant for your integration.
 * @member {String} threeDSecure
 */
Card.prototype['threeDSecure'] = undefined;





/**
 * Allowed values for the <code>formFactor</code> property.
 * @enum {String}
 * @readonly
 */
Card['FormFactorEnum'] = {

    /**
     * value: "physical"
     * @const
     */
    "physical": "physical",

    /**
     * value: "unknown"
     * @const
     */
    "unknown": "unknown",

    /**
     * value: "virtual"
     * @const
     */
    "virtual": "virtual"
};



export default Card;

