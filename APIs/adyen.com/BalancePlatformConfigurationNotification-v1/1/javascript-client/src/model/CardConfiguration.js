/**
 * Configuration webhooks
 * Adyen sends webhooks to inform your system about events that occur in your platform. These events include, for example, when an account holder's capabilities are updated, or when a sweep configuration is created or updated.  When an event occurs, Adyen makes an HTTP POST request to a URL on your server and includes the details of the event in the request body.  You can use these webhooks to build your implementation. For example, you can use this information to update internal statuses when the status of a capability is changed.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BulkAddress from './BulkAddress';

/**
 * The CardConfiguration model module.
 * @module model/CardConfiguration
 * @version 1
 */
class CardConfiguration {
    /**
     * Constructs a new <code>CardConfiguration</code>.
     * @alias module:model/CardConfiguration
     * @param configurationProfileId {String} The ID of the card configuration profile that contains the settings of the card. For example, the envelope and PIN mailer designs or the logistics company handling the shipment. All the settings in the profile are applied to the card, unless you provide other fields to override them.  For example, send the `shipmentMethod` to override the logistics company defined in the card configuration profile.
     */
    constructor(configurationProfileId) { 
        
        CardConfiguration.initialize(this, configurationProfileId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, configurationProfileId) { 
        obj['configurationProfileId'] = configurationProfileId;
    }

    /**
     * Constructs a <code>CardConfiguration</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CardConfiguration} obj Optional instance to populate.
     * @return {module:model/CardConfiguration} The populated <code>CardConfiguration</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CardConfiguration();

            if (data.hasOwnProperty('activation')) {
                obj['activation'] = ApiClient.convertToType(data['activation'], 'String');
            }
            if (data.hasOwnProperty('activationUrl')) {
                obj['activationUrl'] = ApiClient.convertToType(data['activationUrl'], 'String');
            }
            if (data.hasOwnProperty('bulkAddress')) {
                obj['bulkAddress'] = BulkAddress.constructFromObject(data['bulkAddress']);
            }
            if (data.hasOwnProperty('cardImageId')) {
                obj['cardImageId'] = ApiClient.convertToType(data['cardImageId'], 'String');
            }
            if (data.hasOwnProperty('carrier')) {
                obj['carrier'] = ApiClient.convertToType(data['carrier'], 'String');
            }
            if (data.hasOwnProperty('carrierImageId')) {
                obj['carrierImageId'] = ApiClient.convertToType(data['carrierImageId'], 'String');
            }
            if (data.hasOwnProperty('configurationProfileId')) {
                obj['configurationProfileId'] = ApiClient.convertToType(data['configurationProfileId'], 'String');
            }
            if (data.hasOwnProperty('currency')) {
                obj['currency'] = ApiClient.convertToType(data['currency'], 'String');
            }
            if (data.hasOwnProperty('envelope')) {
                obj['envelope'] = ApiClient.convertToType(data['envelope'], 'String');
            }
            if (data.hasOwnProperty('insert')) {
                obj['insert'] = ApiClient.convertToType(data['insert'], 'String');
            }
            if (data.hasOwnProperty('language')) {
                obj['language'] = ApiClient.convertToType(data['language'], 'String');
            }
            if (data.hasOwnProperty('logoImageId')) {
                obj['logoImageId'] = ApiClient.convertToType(data['logoImageId'], 'String');
            }
            if (data.hasOwnProperty('pinMailer')) {
                obj['pinMailer'] = ApiClient.convertToType(data['pinMailer'], 'String');
            }
            if (data.hasOwnProperty('shipmentMethod')) {
                obj['shipmentMethod'] = ApiClient.convertToType(data['shipmentMethod'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CardConfiguration</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CardConfiguration</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CardConfiguration.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['activation'] && !(typeof data['activation'] === 'string' || data['activation'] instanceof String)) {
            throw new Error("Expected the field `activation` to be a primitive type in the JSON string but got " + data['activation']);
        }
        // ensure the json data is a string
        if (data['activationUrl'] && !(typeof data['activationUrl'] === 'string' || data['activationUrl'] instanceof String)) {
            throw new Error("Expected the field `activationUrl` to be a primitive type in the JSON string but got " + data['activationUrl']);
        }
        // validate the optional field `bulkAddress`
        if (data['bulkAddress']) { // data not null
          BulkAddress.validateJSON(data['bulkAddress']);
        }
        // ensure the json data is a string
        if (data['cardImageId'] && !(typeof data['cardImageId'] === 'string' || data['cardImageId'] instanceof String)) {
            throw new Error("Expected the field `cardImageId` to be a primitive type in the JSON string but got " + data['cardImageId']);
        }
        // ensure the json data is a string
        if (data['carrier'] && !(typeof data['carrier'] === 'string' || data['carrier'] instanceof String)) {
            throw new Error("Expected the field `carrier` to be a primitive type in the JSON string but got " + data['carrier']);
        }
        // ensure the json data is a string
        if (data['carrierImageId'] && !(typeof data['carrierImageId'] === 'string' || data['carrierImageId'] instanceof String)) {
            throw new Error("Expected the field `carrierImageId` to be a primitive type in the JSON string but got " + data['carrierImageId']);
        }
        // ensure the json data is a string
        if (data['configurationProfileId'] && !(typeof data['configurationProfileId'] === 'string' || data['configurationProfileId'] instanceof String)) {
            throw new Error("Expected the field `configurationProfileId` to be a primitive type in the JSON string but got " + data['configurationProfileId']);
        }
        // ensure the json data is a string
        if (data['currency'] && !(typeof data['currency'] === 'string' || data['currency'] instanceof String)) {
            throw new Error("Expected the field `currency` to be a primitive type in the JSON string but got " + data['currency']);
        }
        // ensure the json data is a string
        if (data['envelope'] && !(typeof data['envelope'] === 'string' || data['envelope'] instanceof String)) {
            throw new Error("Expected the field `envelope` to be a primitive type in the JSON string but got " + data['envelope']);
        }
        // ensure the json data is a string
        if (data['insert'] && !(typeof data['insert'] === 'string' || data['insert'] instanceof String)) {
            throw new Error("Expected the field `insert` to be a primitive type in the JSON string but got " + data['insert']);
        }
        // ensure the json data is a string
        if (data['language'] && !(typeof data['language'] === 'string' || data['language'] instanceof String)) {
            throw new Error("Expected the field `language` to be a primitive type in the JSON string but got " + data['language']);
        }
        // ensure the json data is a string
        if (data['logoImageId'] && !(typeof data['logoImageId'] === 'string' || data['logoImageId'] instanceof String)) {
            throw new Error("Expected the field `logoImageId` to be a primitive type in the JSON string but got " + data['logoImageId']);
        }
        // ensure the json data is a string
        if (data['pinMailer'] && !(typeof data['pinMailer'] === 'string' || data['pinMailer'] instanceof String)) {
            throw new Error("Expected the field `pinMailer` to be a primitive type in the JSON string but got " + data['pinMailer']);
        }
        // ensure the json data is a string
        if (data['shipmentMethod'] && !(typeof data['shipmentMethod'] === 'string' || data['shipmentMethod'] instanceof String)) {
            throw new Error("Expected the field `shipmentMethod` to be a primitive type in the JSON string but got " + data['shipmentMethod']);
        }

        return true;
    }


}

CardConfiguration.RequiredProperties = ["configurationProfileId"];

/**
 * Overrides the activation label design ID defined in the `configurationProfileId`. The activation label is attached to the card and contains the activation instructions.
 * @member {String} activation
 */
CardConfiguration.prototype['activation'] = undefined;

/**
 * Your app's URL, if you want to activate cards through your app. For example, **my-app://ref1236a7d**. A QR code is created based on this URL, and is included in the carrier. Before you use this field, reach out to your Adyen contact to set up the QR code process.   Maximum length: 255 characters.
 * @member {String} activationUrl
 */
CardConfiguration.prototype['activationUrl'] = undefined;

/**
 * Overrides the shipment bulk address defined in the `configurationProfileId`.
 * @member {module:model/BulkAddress} bulkAddress
 */
CardConfiguration.prototype['bulkAddress'] = undefined;

/**
 * The ID of the card image. This is the image that will be printed on the full front of the card.
 * @member {String} cardImageId
 */
CardConfiguration.prototype['cardImageId'] = undefined;

/**
 * Overrides the carrier design ID defined in the `configurationProfileId`. The carrier is the letter or packaging to which the card is attached.
 * @member {String} carrier
 */
CardConfiguration.prototype['carrier'] = undefined;

/**
 * The ID of the carrier image. This is the image that will printed on the letter to which the card is attached.
 * @member {String} carrierImageId
 */
CardConfiguration.prototype['carrierImageId'] = undefined;

/**
 * The ID of the card configuration profile that contains the settings of the card. For example, the envelope and PIN mailer designs or the logistics company handling the shipment. All the settings in the profile are applied to the card, unless you provide other fields to override them.  For example, send the `shipmentMethod` to override the logistics company defined in the card configuration profile.
 * @member {String} configurationProfileId
 */
CardConfiguration.prototype['configurationProfileId'] = undefined;

/**
 * The three-letter [ISO-4217](https://en.wikipedia.org/wiki/ISO_4217) currency code of the card. For example, **EUR**.
 * @member {String} currency
 */
CardConfiguration.prototype['currency'] = undefined;

/**
 * Overrides the envelope design ID defined in the `configurationProfileId`. 
 * @member {String} envelope
 */
CardConfiguration.prototype['envelope'] = undefined;

/**
 * Overrides the insert design ID defined in the `configurationProfileId`. An insert is any additional material, such as marketing materials, that are shipped together with the card.
 * @member {String} insert
 */
CardConfiguration.prototype['insert'] = undefined;

/**
 * The two-letter [ISO-639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) language code of the card. For example, **en**.
 * @member {String} language
 */
CardConfiguration.prototype['language'] = undefined;

/**
 * The ID of the logo image. This is the image that will be printed on the partial front of the card, such as a logo on the upper right corner.
 * @member {String} logoImageId
 */
CardConfiguration.prototype['logoImageId'] = undefined;

/**
 * Overrides the PIN mailer design ID defined in the `configurationProfileId`. The PIN mailer is the letter on which the PIN is printed.
 * @member {String} pinMailer
 */
CardConfiguration.prototype['pinMailer'] = undefined;

/**
 * Overrides the logistics company defined in the `configurationProfileId`.
 * @member {String} shipmentMethod
 */
CardConfiguration.prototype['shipmentMethod'] = undefined;






export default CardConfiguration;

