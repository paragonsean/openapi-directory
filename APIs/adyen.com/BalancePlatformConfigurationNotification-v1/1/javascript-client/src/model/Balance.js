/**
 * Configuration webhooks
 * Adyen sends webhooks to inform your system about events that occur in your platform. These events include, for example, when an account holder's capabilities are updated, or when a sweep configuration is created or updated.  When an event occurs, Adyen makes an HTTP POST request to a URL on your server and includes the details of the event in the request body.  You can use these webhooks to build your implementation. For example, you can use this information to update internal statuses when the status of a capability is changed.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Balance model module.
 * @module model/Balance
 * @version 1
 */
class Balance {
    /**
     * Constructs a new <code>Balance</code>.
     * @alias module:model/Balance
     * @param available {Number} The remaining amount available for spending.
     * @param balance {Number} The total amount in the balance.
     * @param currency {String} The three-character [ISO currency code](https://docs.adyen.com/development-resources/currency-codes) of the balance.
     * @param reserved {Number} The amount reserved for payments that have been authorised, but have not been captured yet.
     */
    constructor(available, balance, currency, reserved) { 
        
        Balance.initialize(this, available, balance, currency, reserved);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, available, balance, currency, reserved) { 
        obj['available'] = available;
        obj['balance'] = balance;
        obj['currency'] = currency;
        obj['reserved'] = reserved;
    }

    /**
     * Constructs a <code>Balance</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Balance} obj Optional instance to populate.
     * @return {module:model/Balance} The populated <code>Balance</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Balance();

            if (data.hasOwnProperty('available')) {
                obj['available'] = ApiClient.convertToType(data['available'], 'Number');
            }
            if (data.hasOwnProperty('balance')) {
                obj['balance'] = ApiClient.convertToType(data['balance'], 'Number');
            }
            if (data.hasOwnProperty('currency')) {
                obj['currency'] = ApiClient.convertToType(data['currency'], 'String');
            }
            if (data.hasOwnProperty('pending')) {
                obj['pending'] = ApiClient.convertToType(data['pending'], 'Number');
            }
            if (data.hasOwnProperty('reserved')) {
                obj['reserved'] = ApiClient.convertToType(data['reserved'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Balance</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Balance</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Balance.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['currency'] && !(typeof data['currency'] === 'string' || data['currency'] instanceof String)) {
            throw new Error("Expected the field `currency` to be a primitive type in the JSON string but got " + data['currency']);
        }

        return true;
    }


}

Balance.RequiredProperties = ["available", "balance", "currency", "reserved"];

/**
 * The remaining amount available for spending.
 * @member {Number} available
 */
Balance.prototype['available'] = undefined;

/**
 * The total amount in the balance.
 * @member {Number} balance
 */
Balance.prototype['balance'] = undefined;

/**
 * The three-character [ISO currency code](https://docs.adyen.com/development-resources/currency-codes) of the balance.
 * @member {String} currency
 */
Balance.prototype['currency'] = undefined;

/**
 * The amount pending to be paid out but not yet available in the balance.
 * @member {Number} pending
 */
Balance.prototype['pending'] = undefined;

/**
 * The amount reserved for payments that have been authorised, but have not been captured yet.
 * @member {Number} reserved
 */
Balance.prototype['reserved'] = undefined;






export default Balance;

