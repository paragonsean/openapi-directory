/**
 * Configuration webhooks
 * Adyen sends webhooks to inform your system about events that occur in your platform. These events include, for example, when an account holder's capabilities are updated, or when a sweep configuration is created or updated.  When an event occurs, Adyen makes an HTTP POST request to a URL on your server and includes the details of the event in the request body.  You can use these webhooks to build your implementation. For example, you can use this information to update internal statuses when the status of a capability is changed.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Balance from './Balance';
import PaymentInstrumentReference from './PaymentInstrumentReference';
import PlatformPaymentConfiguration from './PlatformPaymentConfiguration';

/**
 * The BalanceAccount model module.
 * @module model/BalanceAccount
 * @version 1
 */
class BalanceAccount {
    /**
     * Constructs a new <code>BalanceAccount</code>.
     * @alias module:model/BalanceAccount
     * @param accountHolderId {String} The unique identifier of the [account holder](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/post/accountHolders__resParam_id) associated with the balance account.
     * @param id {String} The unique identifier of the balance account.
     */
    constructor(accountHolderId, id) { 
        
        BalanceAccount.initialize(this, accountHolderId, id);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, accountHolderId, id) { 
        obj['accountHolderId'] = accountHolderId;
        obj['id'] = id;
    }

    /**
     * Constructs a <code>BalanceAccount</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BalanceAccount} obj Optional instance to populate.
     * @return {module:model/BalanceAccount} The populated <code>BalanceAccount</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BalanceAccount();

            if (data.hasOwnProperty('accountHolderId')) {
                obj['accountHolderId'] = ApiClient.convertToType(data['accountHolderId'], 'String');
            }
            if (data.hasOwnProperty('balances')) {
                obj['balances'] = ApiClient.convertToType(data['balances'], [Balance]);
            }
            if (data.hasOwnProperty('defaultCurrencyCode')) {
                obj['defaultCurrencyCode'] = ApiClient.convertToType(data['defaultCurrencyCode'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = ApiClient.convertToType(data['metadata'], {'String': 'String'});
            }
            if (data.hasOwnProperty('migratedAccountCode')) {
                obj['migratedAccountCode'] = ApiClient.convertToType(data['migratedAccountCode'], 'String');
            }
            if (data.hasOwnProperty('paymentInstruments')) {
                obj['paymentInstruments'] = ApiClient.convertToType(data['paymentInstruments'], [PaymentInstrumentReference]);
            }
            if (data.hasOwnProperty('platformPaymentConfiguration')) {
                obj['platformPaymentConfiguration'] = PlatformPaymentConfiguration.constructFromObject(data['platformPaymentConfiguration']);
            }
            if (data.hasOwnProperty('reference')) {
                obj['reference'] = ApiClient.convertToType(data['reference'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('timeZone')) {
                obj['timeZone'] = ApiClient.convertToType(data['timeZone'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BalanceAccount</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BalanceAccount</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of BalanceAccount.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['accountHolderId'] && !(typeof data['accountHolderId'] === 'string' || data['accountHolderId'] instanceof String)) {
            throw new Error("Expected the field `accountHolderId` to be a primitive type in the JSON string but got " + data['accountHolderId']);
        }
        if (data['balances']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['balances'])) {
                throw new Error("Expected the field `balances` to be an array in the JSON data but got " + data['balances']);
            }
            // validate the optional field `balances` (array)
            for (const item of data['balances']) {
                Balance.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['defaultCurrencyCode'] && !(typeof data['defaultCurrencyCode'] === 'string' || data['defaultCurrencyCode'] instanceof String)) {
            throw new Error("Expected the field `defaultCurrencyCode` to be a primitive type in the JSON string but got " + data['defaultCurrencyCode']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['migratedAccountCode'] && !(typeof data['migratedAccountCode'] === 'string' || data['migratedAccountCode'] instanceof String)) {
            throw new Error("Expected the field `migratedAccountCode` to be a primitive type in the JSON string but got " + data['migratedAccountCode']);
        }
        if (data['paymentInstruments']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['paymentInstruments'])) {
                throw new Error("Expected the field `paymentInstruments` to be an array in the JSON data but got " + data['paymentInstruments']);
            }
            // validate the optional field `paymentInstruments` (array)
            for (const item of data['paymentInstruments']) {
                PaymentInstrumentReference.validateJSON(item);
            };
        }
        // validate the optional field `platformPaymentConfiguration`
        if (data['platformPaymentConfiguration']) { // data not null
          PlatformPaymentConfiguration.validateJSON(data['platformPaymentConfiguration']);
        }
        // ensure the json data is a string
        if (data['reference'] && !(typeof data['reference'] === 'string' || data['reference'] instanceof String)) {
            throw new Error("Expected the field `reference` to be a primitive type in the JSON string but got " + data['reference']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['timeZone'] && !(typeof data['timeZone'] === 'string' || data['timeZone'] instanceof String)) {
            throw new Error("Expected the field `timeZone` to be a primitive type in the JSON string but got " + data['timeZone']);
        }

        return true;
    }


}

BalanceAccount.RequiredProperties = ["accountHolderId", "id"];

/**
 * The unique identifier of the [account holder](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/post/accountHolders__resParam_id) associated with the balance account.
 * @member {String} accountHolderId
 */
BalanceAccount.prototype['accountHolderId'] = undefined;

/**
 * List of balances with the amount and currency.
 * @member {Array.<module:model/Balance>} balances
 */
BalanceAccount.prototype['balances'] = undefined;

/**
 * The default three-character [ISO currency code](https://docs.adyen.com/development-resources/currency-codes) of the balance account. The default value is **EUR**. > After a balance account is created, you cannot change its default currency.
 * @member {String} defaultCurrencyCode
 */
BalanceAccount.prototype['defaultCurrencyCode'] = undefined;

/**
 * A human-readable description of the balance account, maximum 300 characters. You can use this parameter to distinguish between multiple balance accounts under an account holder.
 * @member {String} description
 */
BalanceAccount.prototype['description'] = undefined;

/**
 * The unique identifier of the balance account.
 * @member {String} id
 */
BalanceAccount.prototype['id'] = undefined;

/**
 * A set of key and value pairs for general use. The keys do not have specific names and may be used for storing miscellaneous data as desired. > Note that during an update of metadata, the omission of existing key-value pairs will result in the deletion of those key-value pairs.
 * @member {Object.<String, String>} metadata
 */
BalanceAccount.prototype['metadata'] = undefined;

/**
 * The unique identifier of the account of the migrated account holder in the classic integration.
 * @member {String} migratedAccountCode
 */
BalanceAccount.prototype['migratedAccountCode'] = undefined;

/**
 * List of [payment instruments](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/post/paymentInstruments) associated with the balance account.
 * @member {Array.<module:model/PaymentInstrumentReference>} paymentInstruments
 */
BalanceAccount.prototype['paymentInstruments'] = undefined;

/**
 * Contains key-value pairs to the configure the settlement model in a balance account.
 * @member {module:model/PlatformPaymentConfiguration} platformPaymentConfiguration
 */
BalanceAccount.prototype['platformPaymentConfiguration'] = undefined;

/**
 * Your reference for the balance account, maximum 150 characters.
 * @member {String} reference
 */
BalanceAccount.prototype['reference'] = undefined;

/**
 * The status of the balance account, set to **Active** by default.  
 * @member {module:model/BalanceAccount.StatusEnum} status
 */
BalanceAccount.prototype['status'] = undefined;

/**
 * The time zone of the balance account. For example, **Europe/Amsterdam**. Defaults to the time zone of the account holder if no time zone is set. For possible values, see the [list of time zone codes](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones).
 * @member {String} timeZone
 */
BalanceAccount.prototype['timeZone'] = undefined;





/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
BalanceAccount['StatusEnum'] = {

    /**
     * value: "Active"
     * @const
     */
    "Active": "Active",

    /**
     * value: "Closed"
     * @const
     */
    "Closed": "Closed",

    /**
     * value: "Inactive"
     * @const
     */
    "Inactive": "Inactive",

    /**
     * value: "Suspended"
     * @const
     */
    "Suspended": "Suspended"
};



export default BalanceAccount;

