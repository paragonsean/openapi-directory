/**
 * Configuration webhooks
 * Adyen sends webhooks to inform your system about events that occur in your platform. These events include, for example, when an account holder's capabilities are updated, or when a sweep configuration is created or updated.  When an event occurs, Adyen makes an HTTP POST request to a URL on your server and includes the details of the event in the request body.  You can use these webhooks to build your implementation. For example, you can use this information to update internal statuses when the status of a capability is changed.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AccountSupportingEntityCapability from './AccountSupportingEntityCapability';
import CapabilityProblem from './CapabilityProblem';
import CapabilitySettings from './CapabilitySettings';

/**
 * The AccountHolderCapability model module.
 * @module model/AccountHolderCapability
 * @version 1
 */
class AccountHolderCapability {
    /**
     * Constructs a new <code>AccountHolderCapability</code>.
     * @alias module:model/AccountHolderCapability
     */
    constructor() { 
        
        AccountHolderCapability.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AccountHolderCapability</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AccountHolderCapability} obj Optional instance to populate.
     * @return {module:model/AccountHolderCapability} The populated <code>AccountHolderCapability</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AccountHolderCapability();

            if (data.hasOwnProperty('allowed')) {
                obj['allowed'] = ApiClient.convertToType(data['allowed'], 'Boolean');
            }
            if (data.hasOwnProperty('allowedLevel')) {
                obj['allowedLevel'] = ApiClient.convertToType(data['allowedLevel'], 'String');
            }
            if (data.hasOwnProperty('allowedSettings')) {
                obj['allowedSettings'] = CapabilitySettings.constructFromObject(data['allowedSettings']);
            }
            if (data.hasOwnProperty('enabled')) {
                obj['enabled'] = ApiClient.convertToType(data['enabled'], 'Boolean');
            }
            if (data.hasOwnProperty('problems')) {
                obj['problems'] = ApiClient.convertToType(data['problems'], [CapabilityProblem]);
            }
            if (data.hasOwnProperty('requested')) {
                obj['requested'] = ApiClient.convertToType(data['requested'], 'Boolean');
            }
            if (data.hasOwnProperty('requestedLevel')) {
                obj['requestedLevel'] = ApiClient.convertToType(data['requestedLevel'], 'String');
            }
            if (data.hasOwnProperty('requestedSettings')) {
                obj['requestedSettings'] = CapabilitySettings.constructFromObject(data['requestedSettings']);
            }
            if (data.hasOwnProperty('transferInstruments')) {
                obj['transferInstruments'] = ApiClient.convertToType(data['transferInstruments'], [AccountSupportingEntityCapability]);
            }
            if (data.hasOwnProperty('verificationStatus')) {
                obj['verificationStatus'] = ApiClient.convertToType(data['verificationStatus'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AccountHolderCapability</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AccountHolderCapability</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['allowedLevel'] && !(typeof data['allowedLevel'] === 'string' || data['allowedLevel'] instanceof String)) {
            throw new Error("Expected the field `allowedLevel` to be a primitive type in the JSON string but got " + data['allowedLevel']);
        }
        // validate the optional field `allowedSettings`
        if (data['allowedSettings']) { // data not null
          CapabilitySettings.validateJSON(data['allowedSettings']);
        }
        if (data['problems']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['problems'])) {
                throw new Error("Expected the field `problems` to be an array in the JSON data but got " + data['problems']);
            }
            // validate the optional field `problems` (array)
            for (const item of data['problems']) {
                CapabilityProblem.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['requestedLevel'] && !(typeof data['requestedLevel'] === 'string' || data['requestedLevel'] instanceof String)) {
            throw new Error("Expected the field `requestedLevel` to be a primitive type in the JSON string but got " + data['requestedLevel']);
        }
        // validate the optional field `requestedSettings`
        if (data['requestedSettings']) { // data not null
          CapabilitySettings.validateJSON(data['requestedSettings']);
        }
        if (data['transferInstruments']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['transferInstruments'])) {
                throw new Error("Expected the field `transferInstruments` to be an array in the JSON data but got " + data['transferInstruments']);
            }
            // validate the optional field `transferInstruments` (array)
            for (const item of data['transferInstruments']) {
                AccountSupportingEntityCapability.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['verificationStatus'] && !(typeof data['verificationStatus'] === 'string' || data['verificationStatus'] instanceof String)) {
            throw new Error("Expected the field `verificationStatus` to be a primitive type in the JSON string but got " + data['verificationStatus']);
        }

        return true;
    }


}



/**
 * Indicates whether the capability is allowed. Adyen sets this to **true** if the verification is successful and the account holder is permitted to use the capability.
 * @member {Boolean} allowed
 */
AccountHolderCapability.prototype['allowed'] = undefined;

/**
 * The capability level that is allowed for the account holder.  Possible values: **notApplicable**, **low**, **medium**, **high**.
 * @member {module:model/AccountHolderCapability.AllowedLevelEnum} allowedLevel
 */
AccountHolderCapability.prototype['allowedLevel'] = undefined;

/**
 * A JSON object containing the settings that are allowed for the account holder.
 * @member {module:model/CapabilitySettings} allowedSettings
 */
AccountHolderCapability.prototype['allowedSettings'] = undefined;

/**
 * Indicates whether the capability is enabled. If **false**, the capability is temporarily disabled for the account holder.
 * @member {Boolean} enabled
 */
AccountHolderCapability.prototype['enabled'] = undefined;

/**
 * Contains verification errors and the actions that you can take to resolve them.
 * @member {Array.<module:model/CapabilityProblem>} problems
 */
AccountHolderCapability.prototype['problems'] = undefined;

/**
 * Indicates whether the capability is requested. To check whether the account holder is permitted to use the capability, refer to the `allowed` field.
 * @member {Boolean} requested
 */
AccountHolderCapability.prototype['requested'] = undefined;

/**
 * The requested level of the capability. Some capabilities, such as those used in [card issuing](https://docs.adyen.com/issuing/add-capabilities#capability-levels), have different levels. Levels increase the capability, but also require additional checks and increased monitoring.  Possible values: **notApplicable**, **low**, **medium**, **high**.
 * @member {module:model/AccountHolderCapability.RequestedLevelEnum} requestedLevel
 */
AccountHolderCapability.prototype['requestedLevel'] = undefined;

/**
 * A JSON object containing the settings that were requested for the account holder.
 * @member {module:model/CapabilitySettings} requestedSettings
 */
AccountHolderCapability.prototype['requestedSettings'] = undefined;

/**
 * Contains the status of the transfer instruments associated with this capability. 
 * @member {Array.<module:model/AccountSupportingEntityCapability>} transferInstruments
 */
AccountHolderCapability.prototype['transferInstruments'] = undefined;

/**
 * The status of the verification checks for the capability.  Possible values:  * **pending**: Adyen is running the verification.  * **invalid**: The verification failed. Check if the `errors` array contains more information.  * **valid**: The verification has been successfully completed.  * **rejected**: Adyen has verified the information, but found reasons to not allow the capability. 
 * @member {module:model/AccountHolderCapability.VerificationStatusEnum} verificationStatus
 */
AccountHolderCapability.prototype['verificationStatus'] = undefined;





/**
 * Allowed values for the <code>allowedLevel</code> property.
 * @enum {String}
 * @readonly
 */
AccountHolderCapability['AllowedLevelEnum'] = {

    /**
     * value: "high"
     * @const
     */
    "high": "high",

    /**
     * value: "low"
     * @const
     */
    "low": "low",

    /**
     * value: "medium"
     * @const
     */
    "medium": "medium",

    /**
     * value: "notApplicable"
     * @const
     */
    "notApplicable": "notApplicable"
};


/**
 * Allowed values for the <code>requestedLevel</code> property.
 * @enum {String}
 * @readonly
 */
AccountHolderCapability['RequestedLevelEnum'] = {

    /**
     * value: "high"
     * @const
     */
    "high": "high",

    /**
     * value: "low"
     * @const
     */
    "low": "low",

    /**
     * value: "medium"
     * @const
     */
    "medium": "medium",

    /**
     * value: "notApplicable"
     * @const
     */
    "notApplicable": "notApplicable"
};


/**
 * Allowed values for the <code>verificationStatus</code> property.
 * @enum {String}
 * @readonly
 */
AccountHolderCapability['VerificationStatusEnum'] = {

    /**
     * value: "invalid"
     * @const
     */
    "invalid": "invalid",

    /**
     * value: "pending"
     * @const
     */
    "pending": "pending",

    /**
     * value: "rejected"
     * @const
     */
    "rejected": "rejected",

    /**
     * value: "valid"
     * @const
     */
    "valid": "valid"
};



export default AccountHolderCapability;

