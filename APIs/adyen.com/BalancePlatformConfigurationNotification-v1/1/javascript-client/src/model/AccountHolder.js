/**
 * Configuration webhooks
 * Adyen sends webhooks to inform your system about events that occur in your platform. These events include, for example, when an account holder's capabilities are updated, or when a sweep configuration is created or updated.  When an event occurs, Adyen makes an HTTP POST request to a URL on your server and includes the details of the event in the request body.  You can use these webhooks to build your implementation. For example, you can use this information to update internal statuses when the status of a capability is changed.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AccountHolderCapability from './AccountHolderCapability';
import ContactDetails from './ContactDetails';
import VerificationDeadline from './VerificationDeadline';

/**
 * The AccountHolder model module.
 * @module model/AccountHolder
 * @version 1
 */
class AccountHolder {
    /**
     * Constructs a new <code>AccountHolder</code>.
     * @alias module:model/AccountHolder
     * @param id {String} The unique identifier of the account holder.
     * @param legalEntityId {String} The unique identifier of the [legal entity](https://docs.adyen.com/api-explorer/legalentity/latest/post/legalEntities#responses-200-id) associated with the account holder. Adyen performs a verification process against the legal entity of the account holder.
     */
    constructor(id, legalEntityId) { 
        
        AccountHolder.initialize(this, id, legalEntityId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, legalEntityId) { 
        obj['id'] = id;
        obj['legalEntityId'] = legalEntityId;
    }

    /**
     * Constructs a <code>AccountHolder</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AccountHolder} obj Optional instance to populate.
     * @return {module:model/AccountHolder} The populated <code>AccountHolder</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AccountHolder();

            if (data.hasOwnProperty('balancePlatform')) {
                obj['balancePlatform'] = ApiClient.convertToType(data['balancePlatform'], 'String');
            }
            if (data.hasOwnProperty('capabilities')) {
                obj['capabilities'] = ApiClient.convertToType(data['capabilities'], {'String': AccountHolderCapability});
            }
            if (data.hasOwnProperty('contactDetails')) {
                obj['contactDetails'] = ContactDetails.constructFromObject(data['contactDetails']);
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('legalEntityId')) {
                obj['legalEntityId'] = ApiClient.convertToType(data['legalEntityId'], 'String');
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = ApiClient.convertToType(data['metadata'], {'String': 'String'});
            }
            if (data.hasOwnProperty('migratedAccountHolderCode')) {
                obj['migratedAccountHolderCode'] = ApiClient.convertToType(data['migratedAccountHolderCode'], 'String');
            }
            if (data.hasOwnProperty('primaryBalanceAccount')) {
                obj['primaryBalanceAccount'] = ApiClient.convertToType(data['primaryBalanceAccount'], 'String');
            }
            if (data.hasOwnProperty('reference')) {
                obj['reference'] = ApiClient.convertToType(data['reference'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('timeZone')) {
                obj['timeZone'] = ApiClient.convertToType(data['timeZone'], 'String');
            }
            if (data.hasOwnProperty('verificationDeadlines')) {
                obj['verificationDeadlines'] = ApiClient.convertToType(data['verificationDeadlines'], [VerificationDeadline]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AccountHolder</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AccountHolder</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of AccountHolder.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['balancePlatform'] && !(typeof data['balancePlatform'] === 'string' || data['balancePlatform'] instanceof String)) {
            throw new Error("Expected the field `balancePlatform` to be a primitive type in the JSON string but got " + data['balancePlatform']);
        }
        // validate the optional field `contactDetails`
        if (data['contactDetails']) { // data not null
          ContactDetails.validateJSON(data['contactDetails']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['legalEntityId'] && !(typeof data['legalEntityId'] === 'string' || data['legalEntityId'] instanceof String)) {
            throw new Error("Expected the field `legalEntityId` to be a primitive type in the JSON string but got " + data['legalEntityId']);
        }
        // ensure the json data is a string
        if (data['migratedAccountHolderCode'] && !(typeof data['migratedAccountHolderCode'] === 'string' || data['migratedAccountHolderCode'] instanceof String)) {
            throw new Error("Expected the field `migratedAccountHolderCode` to be a primitive type in the JSON string but got " + data['migratedAccountHolderCode']);
        }
        // ensure the json data is a string
        if (data['primaryBalanceAccount'] && !(typeof data['primaryBalanceAccount'] === 'string' || data['primaryBalanceAccount'] instanceof String)) {
            throw new Error("Expected the field `primaryBalanceAccount` to be a primitive type in the JSON string but got " + data['primaryBalanceAccount']);
        }
        // ensure the json data is a string
        if (data['reference'] && !(typeof data['reference'] === 'string' || data['reference'] instanceof String)) {
            throw new Error("Expected the field `reference` to be a primitive type in the JSON string but got " + data['reference']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['timeZone'] && !(typeof data['timeZone'] === 'string' || data['timeZone'] instanceof String)) {
            throw new Error("Expected the field `timeZone` to be a primitive type in the JSON string but got " + data['timeZone']);
        }
        if (data['verificationDeadlines']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['verificationDeadlines'])) {
                throw new Error("Expected the field `verificationDeadlines` to be an array in the JSON data but got " + data['verificationDeadlines']);
            }
            // validate the optional field `verificationDeadlines` (array)
            for (const item of data['verificationDeadlines']) {
                VerificationDeadline.validateJSON(item);
            };
        }

        return true;
    }


}

AccountHolder.RequiredProperties = ["id", "legalEntityId"];

/**
 * The unique identifier of the [balance platform](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/get/balancePlatforms/{id}__queryParam_id) to which the account holder belongs. Required in the request if your API credentials can be used for multiple balance platforms.
 * @member {String} balancePlatform
 */
AccountHolder.prototype['balancePlatform'] = undefined;

/**
 * Contains key-value pairs that specify the actions that an account holder can do in your platform. The key is a capability required for your integration. For example, **issueCard** for Issuing. The value is an object containing the settings for the capability.
 * @member {Object.<String, module:model/AccountHolderCapability>} capabilities
 */
AccountHolder.prototype['capabilities'] = undefined;

/**
 * Contact details of the account holder.
 * @member {module:model/ContactDetails} contactDetails
 */
AccountHolder.prototype['contactDetails'] = undefined;

/**
 * Your description for the account holder, maximum 300 characters.
 * @member {String} description
 */
AccountHolder.prototype['description'] = undefined;

/**
 * The unique identifier of the account holder.
 * @member {String} id
 */
AccountHolder.prototype['id'] = undefined;

/**
 * The unique identifier of the [legal entity](https://docs.adyen.com/api-explorer/legalentity/latest/post/legalEntities#responses-200-id) associated with the account holder. Adyen performs a verification process against the legal entity of the account holder.
 * @member {String} legalEntityId
 */
AccountHolder.prototype['legalEntityId'] = undefined;

/**
 * A set of key and value pairs for general use. The keys do not have specific names and may be used for storing miscellaneous data as desired. > Note that during an update of metadata, the omission of existing key-value pairs will result in the deletion of those key-value pairs.
 * @member {Object.<String, String>} metadata
 */
AccountHolder.prototype['metadata'] = undefined;

/**
 * The unique identifier of the migrated account holder in the classic integration.
 * @member {String} migratedAccountHolderCode
 */
AccountHolder.prototype['migratedAccountHolderCode'] = undefined;

/**
 * The ID of the account holder's primary balance account. By default, this is set to the first balance account that you create for the account holder. To assign a different balance account, send a PATCH request.
 * @member {String} primaryBalanceAccount
 */
AccountHolder.prototype['primaryBalanceAccount'] = undefined;

/**
 * Your reference for the account holder, maximum 150 characters.
 * @member {String} reference
 */
AccountHolder.prototype['reference'] = undefined;

/**
 * The status of the account holder.  Possible values:    * **Active**: The account holder is active. This is the default status when creating an account holder.    * **Inactive (Deprecated)**: The account holder is temporarily inactive due to missing KYC details. You can set the account back to active by providing the missing KYC details.    * **Suspended**: The account holder is permanently deactivated by Adyen. This action cannot be undone.   * **Closed**: The account holder is permanently deactivated by you. This action cannot be undone.
 * @member {module:model/AccountHolder.StatusEnum} status
 */
AccountHolder.prototype['status'] = undefined;

/**
 * The time zone of the account holder. For example, **Europe/Amsterdam**. Defaults to the time zone of the balance platform if no time zone is set. For possible values, see the [list of time zone codes](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones).
 * @member {String} timeZone
 */
AccountHolder.prototype['timeZone'] = undefined;

/**
 * List of verification deadlines and the capabilities that will be disallowed if verification errors are not resolved.
 * @member {Array.<module:model/VerificationDeadline>} verificationDeadlines
 */
AccountHolder.prototype['verificationDeadlines'] = undefined;





/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
AccountHolder['StatusEnum'] = {

    /**
     * value: "Active"
     * @const
     */
    "Active": "Active",

    /**
     * value: "Closed"
     * @const
     */
    "Closed": "Closed",

    /**
     * value: "Inactive"
     * @const
     */
    "Inactive": "Inactive",

    /**
     * value: "Suspended"
     * @const
     */
    "Suspended": "Suspended"
};



export default AccountHolder;

