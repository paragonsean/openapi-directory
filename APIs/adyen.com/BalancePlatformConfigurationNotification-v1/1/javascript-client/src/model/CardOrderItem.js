/**
 * Configuration webhooks
 * Adyen sends webhooks to inform your system about events that occur in your platform. These events include, for example, when an account holder's capabilities are updated, or when a sweep configuration is created or updated.  When an event occurs, Adyen makes an HTTP POST request to a URL on your server and includes the details of the event in the request body.  You can use these webhooks to build your implementation. For example, you can use this information to update internal statuses when the status of a capability is changed.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CardOrderItemDeliveryStatus from './CardOrderItemDeliveryStatus';

/**
 * The CardOrderItem model module.
 * @module model/CardOrderItem
 * @version 1
 */
class CardOrderItem {
    /**
     * Constructs a new <code>CardOrderItem</code>.
     * @alias module:model/CardOrderItem
     */
    constructor() { 
        
        CardOrderItem.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CardOrderItem</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CardOrderItem} obj Optional instance to populate.
     * @return {module:model/CardOrderItem} The populated <code>CardOrderItem</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CardOrderItem();

            if (data.hasOwnProperty('balancePlatform')) {
                obj['balancePlatform'] = ApiClient.convertToType(data['balancePlatform'], 'String');
            }
            if (data.hasOwnProperty('card')) {
                obj['card'] = CardOrderItemDeliveryStatus.constructFromObject(data['card']);
            }
            if (data.hasOwnProperty('cardOrderItemId')) {
                obj['cardOrderItemId'] = ApiClient.convertToType(data['cardOrderItemId'], 'String');
            }
            if (data.hasOwnProperty('creationDate')) {
                obj['creationDate'] = ApiClient.convertToType(data['creationDate'], 'Date');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('paymentInstrumentId')) {
                obj['paymentInstrumentId'] = ApiClient.convertToType(data['paymentInstrumentId'], 'String');
            }
            if (data.hasOwnProperty('pin')) {
                obj['pin'] = CardOrderItemDeliveryStatus.constructFromObject(data['pin']);
            }
            if (data.hasOwnProperty('shippingMethod')) {
                obj['shippingMethod'] = ApiClient.convertToType(data['shippingMethod'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CardOrderItem</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CardOrderItem</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['balancePlatform'] && !(typeof data['balancePlatform'] === 'string' || data['balancePlatform'] instanceof String)) {
            throw new Error("Expected the field `balancePlatform` to be a primitive type in the JSON string but got " + data['balancePlatform']);
        }
        // validate the optional field `card`
        if (data['card']) { // data not null
          CardOrderItemDeliveryStatus.validateJSON(data['card']);
        }
        // ensure the json data is a string
        if (data['cardOrderItemId'] && !(typeof data['cardOrderItemId'] === 'string' || data['cardOrderItemId'] instanceof String)) {
            throw new Error("Expected the field `cardOrderItemId` to be a primitive type in the JSON string but got " + data['cardOrderItemId']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['paymentInstrumentId'] && !(typeof data['paymentInstrumentId'] === 'string' || data['paymentInstrumentId'] instanceof String)) {
            throw new Error("Expected the field `paymentInstrumentId` to be a primitive type in the JSON string but got " + data['paymentInstrumentId']);
        }
        // validate the optional field `pin`
        if (data['pin']) { // data not null
          CardOrderItemDeliveryStatus.validateJSON(data['pin']);
        }
        // ensure the json data is a string
        if (data['shippingMethod'] && !(typeof data['shippingMethod'] === 'string' || data['shippingMethod'] instanceof String)) {
            throw new Error("Expected the field `shippingMethod` to be a primitive type in the JSON string but got " + data['shippingMethod']);
        }

        return true;
    }


}



/**
 * The unique identifier of the balance platform.
 * @member {String} balancePlatform
 */
CardOrderItem.prototype['balancePlatform'] = undefined;

/**
 * The status of the card delivery.  Possible values: **created**, **rejected**, **processing**, **produced**, **shipped**, **delivered**, **notApplicable**, **unknown**. 
 * @member {module:model/CardOrderItemDeliveryStatus} card
 */
CardOrderItem.prototype['card'] = undefined;

/**
 * The unique identifier of the card order item.
 * @member {String} cardOrderItemId
 */
CardOrderItem.prototype['cardOrderItemId'] = undefined;

/**
 * The date and time when the event was triggered, in ISO 8601 extended format. For example, **2020-12-18T10:15:30+01:00**.
 * @member {Date} creationDate
 */
CardOrderItem.prototype['creationDate'] = undefined;

/**
 * The ID of the resource.
 * @member {String} id
 */
CardOrderItem.prototype['id'] = undefined;

/**
 * The unique identifier of the payment instrument related to the card order item.
 * @member {String} paymentInstrumentId
 */
CardOrderItem.prototype['paymentInstrumentId'] = undefined;

/**
 * Contains information about the status of the PIN delivery.
 * @member {module:model/CardOrderItemDeliveryStatus} pin
 */
CardOrderItem.prototype['pin'] = undefined;

/**
 * The shipping method used to deliver the card or the PIN.
 * @member {String} shippingMethod
 */
CardOrderItem.prototype['shippingMethod'] = undefined;






export default CardOrderItem;

