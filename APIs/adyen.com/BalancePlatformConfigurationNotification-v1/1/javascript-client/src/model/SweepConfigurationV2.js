/**
 * Configuration webhooks
 * Adyen sends webhooks to inform your system about events that occur in your platform. These events include, for example, when an account holder's capabilities are updated, or when a sweep configuration is created or updated.  When an event occurs, Adyen makes an HTTP POST request to a URL on your server and includes the details of the event in the request body.  You can use these webhooks to build your implementation. For example, you can use this information to update internal statuses when the status of a capability is changed.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Amount from './Amount';
import SweepCounterparty from './SweepCounterparty';
import SweepSchedule from './SweepSchedule';

/**
 * The SweepConfigurationV2 model module.
 * @module model/SweepConfigurationV2
 * @version 1
 */
class SweepConfigurationV2 {
    /**
     * Constructs a new <code>SweepConfigurationV2</code>.
     * @alias module:model/SweepConfigurationV2
     * @param counterparty {module:model/SweepCounterparty} The destination or the source of the funds, depending on the sweep `type`.  Either a `balanceAccountId`, `transferInstrumentId`, or `merchantAccount` is required.
     * @param currency {String} The three-character [ISO currency code](https://docs.adyen.com/development-resources/currency-codes) in uppercase. For example, **EUR**.  The sweep currency must match any of the [balances currencies](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/get/balanceAccounts/{id}__resParam_balances).
     * @param id {String} The unique identifier of the sweep.
     * @param schedule {module:model/SweepSchedule} The schedule when the `triggerAmount` is evaluated. If the balance meets the threshold, funds are pushed out of or pulled in to the balance account.
     */
    constructor(counterparty, currency, id, schedule) { 
        
        SweepConfigurationV2.initialize(this, counterparty, currency, id, schedule);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, counterparty, currency, id, schedule) { 
        obj['counterparty'] = counterparty;
        obj['currency'] = currency;
        obj['id'] = id;
        obj['schedule'] = schedule;
        obj['type'] = 'push';
    }

    /**
     * Constructs a <code>SweepConfigurationV2</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SweepConfigurationV2} obj Optional instance to populate.
     * @return {module:model/SweepConfigurationV2} The populated <code>SweepConfigurationV2</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SweepConfigurationV2();

            if (data.hasOwnProperty('counterparty')) {
                obj['counterparty'] = SweepCounterparty.constructFromObject(data['counterparty']);
            }
            if (data.hasOwnProperty('currency')) {
                obj['currency'] = ApiClient.convertToType(data['currency'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('reason')) {
                obj['reason'] = ApiClient.convertToType(data['reason'], 'String');
            }
            if (data.hasOwnProperty('schedule')) {
                obj['schedule'] = SweepSchedule.constructFromObject(data['schedule']);
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('sweepAmount')) {
                obj['sweepAmount'] = Amount.constructFromObject(data['sweepAmount']);
            }
            if (data.hasOwnProperty('targetAmount')) {
                obj['targetAmount'] = Amount.constructFromObject(data['targetAmount']);
            }
            if (data.hasOwnProperty('triggerAmount')) {
                obj['triggerAmount'] = Amount.constructFromObject(data['triggerAmount']);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SweepConfigurationV2</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SweepConfigurationV2</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of SweepConfigurationV2.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `counterparty`
        if (data['counterparty']) { // data not null
          SweepCounterparty.validateJSON(data['counterparty']);
        }
        // ensure the json data is a string
        if (data['currency'] && !(typeof data['currency'] === 'string' || data['currency'] instanceof String)) {
            throw new Error("Expected the field `currency` to be a primitive type in the JSON string but got " + data['currency']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['reason'] && !(typeof data['reason'] === 'string' || data['reason'] instanceof String)) {
            throw new Error("Expected the field `reason` to be a primitive type in the JSON string but got " + data['reason']);
        }
        // validate the optional field `schedule`
        if (data['schedule']) { // data not null
          SweepSchedule.validateJSON(data['schedule']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // validate the optional field `sweepAmount`
        if (data['sweepAmount']) { // data not null
          Amount.validateJSON(data['sweepAmount']);
        }
        // validate the optional field `targetAmount`
        if (data['targetAmount']) { // data not null
          Amount.validateJSON(data['targetAmount']);
        }
        // validate the optional field `triggerAmount`
        if (data['triggerAmount']) { // data not null
          Amount.validateJSON(data['triggerAmount']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

SweepConfigurationV2.RequiredProperties = ["counterparty", "currency", "id", "schedule"];

/**
 * The destination or the source of the funds, depending on the sweep `type`.  Either a `balanceAccountId`, `transferInstrumentId`, or `merchantAccount` is required.
 * @member {module:model/SweepCounterparty} counterparty
 */
SweepConfigurationV2.prototype['counterparty'] = undefined;

/**
 * The three-character [ISO currency code](https://docs.adyen.com/development-resources/currency-codes) in uppercase. For example, **EUR**.  The sweep currency must match any of the [balances currencies](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/get/balanceAccounts/{id}__resParam_balances).
 * @member {String} currency
 */
SweepConfigurationV2.prototype['currency'] = undefined;

/**
 * The message that will be used in the sweep transfer's description body with a maximum length of 140 characters.  If the message is longer after replacing placeholders, the message will be cut off at 140 characters.
 * @member {String} description
 */
SweepConfigurationV2.prototype['description'] = undefined;

/**
 * The unique identifier of the sweep.
 * @member {String} id
 */
SweepConfigurationV2.prototype['id'] = undefined;

/**
 * The reason for disabling the sweep.
 * @member {module:model/SweepConfigurationV2.ReasonEnum} reason
 */
SweepConfigurationV2.prototype['reason'] = undefined;

/**
 * The schedule when the `triggerAmount` is evaluated. If the balance meets the threshold, funds are pushed out of or pulled in to the balance account.
 * @member {module:model/SweepSchedule} schedule
 */
SweepConfigurationV2.prototype['schedule'] = undefined;

/**
 * The status of the sweep. If not provided, by default, this is set to **active**.  Possible values:    * **active**:  the sweep is enabled and funds will be pulled in or pushed out based on the defined configuration.    * **inactive**: the sweep is disabled and cannot be triggered.   
 * @member {module:model/SweepConfigurationV2.StatusEnum} status
 */
SweepConfigurationV2.prototype['status'] = undefined;

/**
 * The amount that must be pushed out or pulled in. You can configure either `sweepAmount` or `targetAmount`, not both.
 * @member {module:model/Amount} sweepAmount
 */
SweepConfigurationV2.prototype['sweepAmount'] = undefined;

/**
 * The amount that must be available in the balance account after the sweep. You can configure either `sweepAmount` or `targetAmount`, not both.
 * @member {module:model/Amount} targetAmount
 */
SweepConfigurationV2.prototype['targetAmount'] = undefined;

/**
 * The threshold amount that triggers the sweep. If not provided, by default, the amount is set to zero. The `triggerAmount` is evaluated according to the specified `schedule.type`.  * For `type` **pull**, if the balance is less than or equal to the `triggerAmount`, funds are pulled in to the balance account.  * For `type` **push**, if the balance is more than or equal to the `triggerAmount`, funds are pushed out of the balance account.
 * @member {module:model/Amount} triggerAmount
 */
SweepConfigurationV2.prototype['triggerAmount'] = undefined;

/**
 * The direction of sweep, whether pushing out or pulling in funds to the balance account. If not provided, by default, this is set to **push**.  Possible values:   * **push**: _push out funds_ to a destination balance account or transfer instrument.   * **pull**: _pull in funds_ from a source merchant account, transfer instrument, or balance account.
 * @member {module:model/SweepConfigurationV2.TypeEnum} type
 * @default 'push'
 */
SweepConfigurationV2.prototype['type'] = 'push';





/**
 * Allowed values for the <code>reason</code> property.
 * @enum {String}
 * @readonly
 */
SweepConfigurationV2['ReasonEnum'] = {

    /**
     * value: "amountLimitExceeded"
     * @const
     */
    "amountLimitExceeded": "amountLimitExceeded",

    /**
     * value: "approved"
     * @const
     */
    "approved": "approved",

    /**
     * value: "balanceAccountTemporarilyBlockedByTransactionRule"
     * @const
     */
    "balanceAccountTemporarilyBlockedByTransactionRule": "balanceAccountTemporarilyBlockedByTransactionRule",

    /**
     * value: "counterpartyAccountBlocked"
     * @const
     */
    "counterpartyAccountBlocked": "counterpartyAccountBlocked",

    /**
     * value: "counterpartyAccountClosed"
     * @const
     */
    "counterpartyAccountClosed": "counterpartyAccountClosed",

    /**
     * value: "counterpartyAccountNotFound"
     * @const
     */
    "counterpartyAccountNotFound": "counterpartyAccountNotFound",

    /**
     * value: "counterpartyAddressRequired"
     * @const
     */
    "counterpartyAddressRequired": "counterpartyAddressRequired",

    /**
     * value: "counterpartyBankTimedOut"
     * @const
     */
    "counterpartyBankTimedOut": "counterpartyBankTimedOut",

    /**
     * value: "counterpartyBankUnavailable"
     * @const
     */
    "counterpartyBankUnavailable": "counterpartyBankUnavailable",

    /**
     * value: "declinedByTransactionRule"
     * @const
     */
    "declinedByTransactionRule": "declinedByTransactionRule",

    /**
     * value: "error"
     * @const
     */
    "error": "error",

    /**
     * value: "notEnoughBalance"
     * @const
     */
    "notEnoughBalance": "notEnoughBalance",

    /**
     * value: "refusedByCounterpartyBank"
     * @const
     */
    "refusedByCounterpartyBank": "refusedByCounterpartyBank",

    /**
     * value: "routeNotFound"
     * @const
     */
    "routeNotFound": "routeNotFound",

    /**
     * value: "scaFailed"
     * @const
     */
    "scaFailed": "scaFailed",

    /**
     * value: "unknown"
     * @const
     */
    "unknown": "unknown"
};


/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
SweepConfigurationV2['StatusEnum'] = {

    /**
     * value: "active"
     * @const
     */
    "active": "active",

    /**
     * value: "inactive"
     * @const
     */
    "inactive": "inactive"
};


/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
SweepConfigurationV2['TypeEnum'] = {

    /**
     * value: "pull"
     * @const
     */
    "pull": "pull",

    /**
     * value: "push"
     * @const
     */
    "push": "push"
};



export default SweepConfigurationV2;

