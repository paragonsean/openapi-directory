/**
 * Configuration webhooks
 * Adyen sends webhooks to inform your system about events that occur in your platform. These events include, for example, when an account holder's capabilities are updated, or when a sweep configuration is created or updated.  When an event occurs, Adyen makes an HTTP POST request to a URL on your server and includes the details of the event in the request body.  You can use these webhooks to build your implementation. For example, you can use this information to update internal statuses when the status of a capability is changed.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Card from './Card';
import PaymentInstrumentBankAccount from './PaymentInstrumentBankAccount';

/**
 * The PaymentInstrument model module.
 * @module model/PaymentInstrument
 * @version 1
 */
class PaymentInstrument {
    /**
     * Constructs a new <code>PaymentInstrument</code>.
     * @alias module:model/PaymentInstrument
     * @param balanceAccountId {String} The unique identifier of the [balance account](https://docs.adyen.com/api-explorer/#/balanceplatform/v1/post/balanceAccounts__resParam_id) associated with the payment instrument.
     * @param id {String} The unique identifier of the payment instrument.
     * @param issuingCountryCode {String} The two-character [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code where the payment instrument is issued. For example, **NL** or **US**.
     * @param type {module:model/PaymentInstrument.TypeEnum} Type of payment instrument.  Possible value: **card**, **bankAccount**. 
     */
    constructor(balanceAccountId, id, issuingCountryCode, type) { 
        
        PaymentInstrument.initialize(this, balanceAccountId, id, issuingCountryCode, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, balanceAccountId, id, issuingCountryCode, type) { 
        obj['balanceAccountId'] = balanceAccountId;
        obj['id'] = id;
        obj['issuingCountryCode'] = issuingCountryCode;
        obj['type'] = type;
    }

    /**
     * Constructs a <code>PaymentInstrument</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PaymentInstrument} obj Optional instance to populate.
     * @return {module:model/PaymentInstrument} The populated <code>PaymentInstrument</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PaymentInstrument();

            if (data.hasOwnProperty('balanceAccountId')) {
                obj['balanceAccountId'] = ApiClient.convertToType(data['balanceAccountId'], 'String');
            }
            if (data.hasOwnProperty('bankAccount')) {
                obj['bankAccount'] = PaymentInstrumentBankAccount.constructFromObject(data['bankAccount']);
            }
            if (data.hasOwnProperty('card')) {
                obj['card'] = Card.constructFromObject(data['card']);
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('issuingCountryCode')) {
                obj['issuingCountryCode'] = ApiClient.convertToType(data['issuingCountryCode'], 'String');
            }
            if (data.hasOwnProperty('paymentInstrumentGroupId')) {
                obj['paymentInstrumentGroupId'] = ApiClient.convertToType(data['paymentInstrumentGroupId'], 'String');
            }
            if (data.hasOwnProperty('reference')) {
                obj['reference'] = ApiClient.convertToType(data['reference'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PaymentInstrument</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PaymentInstrument</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PaymentInstrument.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['balanceAccountId'] && !(typeof data['balanceAccountId'] === 'string' || data['balanceAccountId'] instanceof String)) {
            throw new Error("Expected the field `balanceAccountId` to be a primitive type in the JSON string but got " + data['balanceAccountId']);
        }
        // validate the optional field `bankAccount`
        if (data['bankAccount']) { // data not null
          PaymentInstrumentBankAccount.validateJSON(data['bankAccount']);
        }
        // validate the optional field `card`
        if (data['card']) { // data not null
          Card.validateJSON(data['card']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['issuingCountryCode'] && !(typeof data['issuingCountryCode'] === 'string' || data['issuingCountryCode'] instanceof String)) {
            throw new Error("Expected the field `issuingCountryCode` to be a primitive type in the JSON string but got " + data['issuingCountryCode']);
        }
        // ensure the json data is a string
        if (data['paymentInstrumentGroupId'] && !(typeof data['paymentInstrumentGroupId'] === 'string' || data['paymentInstrumentGroupId'] instanceof String)) {
            throw new Error("Expected the field `paymentInstrumentGroupId` to be a primitive type in the JSON string but got " + data['paymentInstrumentGroupId']);
        }
        // ensure the json data is a string
        if (data['reference'] && !(typeof data['reference'] === 'string' || data['reference'] instanceof String)) {
            throw new Error("Expected the field `reference` to be a primitive type in the JSON string but got " + data['reference']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

PaymentInstrument.RequiredProperties = ["balanceAccountId", "id", "issuingCountryCode", "type"];

/**
 * The unique identifier of the [balance account](https://docs.adyen.com/api-explorer/#/balanceplatform/v1/post/balanceAccounts__resParam_id) associated with the payment instrument.
 * @member {String} balanceAccountId
 */
PaymentInstrument.prototype['balanceAccountId'] = undefined;

/**
 * @member {module:model/PaymentInstrumentBankAccount} bankAccount
 */
PaymentInstrument.prototype['bankAccount'] = undefined;

/**
 * Contains information about the card payment instrument. Returned when you create a payment instrument with `type` **card**.
 * @member {module:model/Card} card
 */
PaymentInstrument.prototype['card'] = undefined;

/**
 * Your description for the payment instrument, maximum 300 characters.
 * @member {String} description
 */
PaymentInstrument.prototype['description'] = undefined;

/**
 * The unique identifier of the payment instrument.
 * @member {String} id
 */
PaymentInstrument.prototype['id'] = undefined;

/**
 * The two-character [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code where the payment instrument is issued. For example, **NL** or **US**.
 * @member {String} issuingCountryCode
 */
PaymentInstrument.prototype['issuingCountryCode'] = undefined;

/**
 * The unique identifier of the [payment instrument group](https://docs.adyen.com/api-explorer/#/balanceplatform/v1/post/paymentInstrumentGroups__resParam_id) to which the payment instrument belongs.
 * @member {String} paymentInstrumentGroupId
 */
PaymentInstrument.prototype['paymentInstrumentGroupId'] = undefined;

/**
 * Your reference for the payment instrument, maximum 150 characters.
 * @member {String} reference
 */
PaymentInstrument.prototype['reference'] = undefined;

/**
 * The status of the payment instrument. If a status is not specified when creating a payment instrument, it is set to **Active** by default. However, there can be exceptions for cards based on the `card.formFactor` and the `issuingCountryCode`. For example, when issuing physical cards in the US, the default status is **Requested**.  Possible values:    * **Active**:  The payment instrument is active and can be used to make payments.    * **Requested**: The payment instrument has been requested. This state is applicable for physical cards.   * **Inactive**: The payment instrument is inactive and cannot be used to make payments.    * **Suspended**: The payment instrument is temporarily suspended and cannot be used to make payments.    * **Closed**: The payment instrument is permanently closed. This action cannot be undone.   * **Stolen**    * **Lost**   
 * @member {module:model/PaymentInstrument.StatusEnum} status
 */
PaymentInstrument.prototype['status'] = undefined;

/**
 * Type of payment instrument.  Possible value: **card**, **bankAccount**. 
 * @member {module:model/PaymentInstrument.TypeEnum} type
 */
PaymentInstrument.prototype['type'] = undefined;





/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
PaymentInstrument['StatusEnum'] = {

    /**
     * value: "Active"
     * @const
     */
    "Active": "Active",

    /**
     * value: "Closed"
     * @const
     */
    "Closed": "Closed",

    /**
     * value: "Inactive"
     * @const
     */
    "Inactive": "Inactive",

    /**
     * value: "Lost"
     * @const
     */
    "Lost": "Lost",

    /**
     * value: "Requested"
     * @const
     */
    "Requested": "Requested",

    /**
     * value: "Stolen"
     * @const
     */
    "Stolen": "Stolen",

    /**
     * value: "Suspended"
     * @const
     */
    "Suspended": "Suspended",

    /**
     * value: "blocked"
     * @const
     */
    "blocked": "blocked",

    /**
     * value: "discarded"
     * @const
     */
    "discarded": "discarded"
};


/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
PaymentInstrument['TypeEnum'] = {

    /**
     * value: "bankAccount"
     * @const
     */
    "bankAccount": "bankAccount",

    /**
     * value: "card"
     * @const
     */
    "card": "card"
};



export default PaymentInstrument;

