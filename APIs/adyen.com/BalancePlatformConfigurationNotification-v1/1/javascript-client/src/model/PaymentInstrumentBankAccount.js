/**
 * Configuration webhooks
 * Adyen sends webhooks to inform your system about events that occur in your platform. These events include, for example, when an account holder's capabilities are updated, or when a sweep configuration is created or updated.  When an event occurs, Adyen makes an HTTP POST request to a URL on your server and includes the details of the event in the request body.  You can use these webhooks to build your implementation. For example, you can use this information to update internal statuses when the status of a capability is changed.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import IbanAccountIdentification from './IbanAccountIdentification';
import USLocalAccountIdentification from './USLocalAccountIdentification';

/**
 * The PaymentInstrumentBankAccount model module.
 * @module model/PaymentInstrumentBankAccount
 * @version 1
 */
class PaymentInstrumentBankAccount {
    /**
     * Constructs a new <code>PaymentInstrumentBankAccount</code>.
     * Contains the business account details. Returned when you create a payment instrument with &#x60;type&#x60; **bankAccount**.
     * @alias module:model/PaymentInstrumentBankAccount
     * @param {(module:model/IbanAccountIdentification|module:model/USLocalAccountIdentification)} instance The actual instance to initialize PaymentInstrumentBankAccount.
     */
    constructor(instance = null) {
        if (instance === null) {
            this.actualInstance = null;
            return;
        }
        var match = 0;
        var errorMessages = [];
        try {
            if (typeof instance === "IbanAccountIdentification") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                IbanAccountIdentification.validateJSON(instance); // throw an exception if no match
                // create IbanAccountIdentification from JS object
                this.actualInstance = IbanAccountIdentification.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into IbanAccountIdentification
            errorMessages.push("Failed to construct IbanAccountIdentification: " + err)
        }

        try {
            if (typeof instance === "USLocalAccountIdentification") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                USLocalAccountIdentification.validateJSON(instance); // throw an exception if no match
                // create USLocalAccountIdentification from JS object
                this.actualInstance = USLocalAccountIdentification.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into USLocalAccountIdentification
            errorMessages.push("Failed to construct USLocalAccountIdentification: " + err)
        }

        if (match > 1) {
            throw new Error("Multiple matches found constructing `PaymentInstrumentBankAccount` with oneOf schemas IbanAccountIdentification, USLocalAccountIdentification. Input: " + JSON.stringify(instance));
        } else if (match === 0) {
            this.actualInstance = null; // clear the actual instance in case there are multiple matches
            throw new Error("No match found constructing `PaymentInstrumentBankAccount` with oneOf schemas IbanAccountIdentification, USLocalAccountIdentification. Details: " +
                            errorMessages.join(", "));
        } else { // only 1 match
            // the input is valid
        }
    }

    /**
     * Constructs a <code>PaymentInstrumentBankAccount</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PaymentInstrumentBankAccount} obj Optional instance to populate.
     * @return {module:model/PaymentInstrumentBankAccount} The populated <code>PaymentInstrumentBankAccount</code> instance.
     */
    static constructFromObject(data, obj) {
        return new PaymentInstrumentBankAccount(data);
    }

    /**
     * Gets the actual instance, which can be <code>IbanAccountIdentification</code>, <code>USLocalAccountIdentification</code>.
     * @return {(module:model/IbanAccountIdentification|module:model/USLocalAccountIdentification)} The actual instance.
     */
    getActualInstance() {
        return this.actualInstance;
    }

    /**
     * Sets the actual instance, which can be <code>IbanAccountIdentification</code>, <code>USLocalAccountIdentification</code>.
     * @param {(module:model/IbanAccountIdentification|module:model/USLocalAccountIdentification)} obj The actual instance.
     */
    setActualInstance(obj) {
       this.actualInstance = PaymentInstrumentBankAccount.constructFromObject(obj).getActualInstance();
    }

    /**
     * Returns the JSON representation of the actual instance.
     * @return {string}
     */
    toJSON = function(){
        return this.getActualInstance();
    }

    /**
     * Create an instance of PaymentInstrumentBankAccount from a JSON string.
     * @param {string} json_string JSON string.
     * @return {module:model/PaymentInstrumentBankAccount} An instance of PaymentInstrumentBankAccount.
     */
    static fromJSON = function(json_string){
        return PaymentInstrumentBankAccount.constructFromObject(JSON.parse(json_string));
    }
}

/**
 * The form factor of bank account.
 * @member {String} formFactor
 * @default 'physical'
 */
PaymentInstrumentBankAccount.prototype['formFactor'] = 'physical';

/**
 * The international bank account number as defined in the [ISO-13616](https://www.iso.org/standard/81090.html) standard.
 * @member {String} iban
 */
PaymentInstrumentBankAccount.prototype['iban'] = undefined;

/**
 * **iban**
 * @member {module:model/PaymentInstrumentBankAccount.TypeEnum} type
 * @default 'iban'
 */
PaymentInstrumentBankAccount.prototype['type'] = 'iban';

/**
 * The bank account number, without separators or whitespace.
 * @member {String} accountNumber
 */
PaymentInstrumentBankAccount.prototype['accountNumber'] = undefined;

/**
 * The bank account type.  Possible values: **checking** or **savings**. Defaults to **checking**.
 * @member {module:model/PaymentInstrumentBankAccount.AccountTypeEnum} accountType
 * @default 'checking'
 */
PaymentInstrumentBankAccount.prototype['accountType'] = 'checking';

/**
 * The 9-digit [routing number](https://en.wikipedia.org/wiki/ABA_routing_transit_number), without separators or whitespace.
 * @member {String} routingNumber
 */
PaymentInstrumentBankAccount.prototype['routingNumber'] = undefined;


PaymentInstrumentBankAccount.OneOf = ["IbanAccountIdentification", "USLocalAccountIdentification"];

export default PaymentInstrumentBankAccount;

