/*
 * Configuration webhooks
 * Adyen sends webhooks to inform your system about events that occur in your platform. These events include, for example, when an account holder's capabilities are updated, or when a sweep configuration is created or updated.  When an event occurs, Adyen makes an HTTP POST request to a URL on your server and includes the details of the event in the request body.  You can use these webhooks to build your implementation. For example, you can use this information to update internal statuses when the status of a capability is changed.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.Balance;
import org.openapitools.client.model.PaymentInstrumentReference;
import org.openapitools.client.model.PlatformPaymentConfiguration;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for BalanceAccount
 */
public class BalanceAccountTest {
    private final BalanceAccount model = new BalanceAccount();

    /**
     * Model tests for BalanceAccount
     */
    @Test
    public void testBalanceAccount() {
        // TODO: test BalanceAccount
    }

    /**
     * Test the property 'accountHolderId'
     */
    @Test
    public void accountHolderIdTest() {
        // TODO: test accountHolderId
    }

    /**
     * Test the property 'balances'
     */
    @Test
    public void balancesTest() {
        // TODO: test balances
    }

    /**
     * Test the property 'defaultCurrencyCode'
     */
    @Test
    public void defaultCurrencyCodeTest() {
        // TODO: test defaultCurrencyCode
    }

    /**
     * Test the property 'description'
     */
    @Test
    public void descriptionTest() {
        // TODO: test description
    }

    /**
     * Test the property 'id'
     */
    @Test
    public void idTest() {
        // TODO: test id
    }

    /**
     * Test the property 'metadata'
     */
    @Test
    public void metadataTest() {
        // TODO: test metadata
    }

    /**
     * Test the property 'migratedAccountCode'
     */
    @Test
    public void migratedAccountCodeTest() {
        // TODO: test migratedAccountCode
    }

    /**
     * Test the property 'paymentInstruments'
     */
    @Test
    public void paymentInstrumentsTest() {
        // TODO: test paymentInstruments
    }

    /**
     * Test the property 'platformPaymentConfiguration'
     */
    @Test
    public void platformPaymentConfigurationTest() {
        // TODO: test platformPaymentConfiguration
    }

    /**
     * Test the property 'reference'
     */
    @Test
    public void referenceTest() {
        // TODO: test reference
    }

    /**
     * Test the property 'status'
     */
    @Test
    public void statusTest() {
        // TODO: test status
    }

    /**
     * Test the property 'timeZone'
     */
    @Test
    public void timeZoneTest() {
        // TODO: test timeZone
    }

}
