/*
 * Configuration webhooks
 * Adyen sends webhooks to inform your system about events that occur in your platform. These events include, for example, when an account holder's capabilities are updated, or when a sweep configuration is created or updated.  When an event occurs, Adyen makes an HTTP POST request to a URL on your server and includes the details of the event in the request body.  You can use these webhooks to build your implementation. For example, you can use this information to update internal statuses when the status of a capability is changed.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.CardOrderItemDeliveryStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CardOrderItem
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:13:44.650290-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CardOrderItem {
  public static final String SERIALIZED_NAME_BALANCE_PLATFORM = "balancePlatform";
  @SerializedName(SERIALIZED_NAME_BALANCE_PLATFORM)
  private String balancePlatform;

  public static final String SERIALIZED_NAME_CARD = "card";
  @SerializedName(SERIALIZED_NAME_CARD)
  private CardOrderItemDeliveryStatus card;

  public static final String SERIALIZED_NAME_CARD_ORDER_ITEM_ID = "cardOrderItemId";
  @SerializedName(SERIALIZED_NAME_CARD_ORDER_ITEM_ID)
  private String cardOrderItemId;

  public static final String SERIALIZED_NAME_CREATION_DATE = "creationDate";
  @SerializedName(SERIALIZED_NAME_CREATION_DATE)
  private OffsetDateTime creationDate;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_PAYMENT_INSTRUMENT_ID = "paymentInstrumentId";
  @SerializedName(SERIALIZED_NAME_PAYMENT_INSTRUMENT_ID)
  private String paymentInstrumentId;

  public static final String SERIALIZED_NAME_PIN = "pin";
  @SerializedName(SERIALIZED_NAME_PIN)
  private CardOrderItemDeliveryStatus pin;

  public static final String SERIALIZED_NAME_SHIPPING_METHOD = "shippingMethod";
  @SerializedName(SERIALIZED_NAME_SHIPPING_METHOD)
  private String shippingMethod;

  public CardOrderItem() {
  }

  public CardOrderItem balancePlatform(String balancePlatform) {
    this.balancePlatform = balancePlatform;
    return this;
  }

  /**
   * The unique identifier of the balance platform.
   * @return balancePlatform
   */
  @javax.annotation.Nullable
  public String getBalancePlatform() {
    return balancePlatform;
  }

  public void setBalancePlatform(String balancePlatform) {
    this.balancePlatform = balancePlatform;
  }


  public CardOrderItem card(CardOrderItemDeliveryStatus card) {
    this.card = card;
    return this;
  }

  /**
   * The status of the card delivery.  Possible values: **created**, **rejected**, **processing**, **produced**, **shipped**, **delivered**, **notApplicable**, **unknown**. 
   * @return card
   */
  @javax.annotation.Nullable
  public CardOrderItemDeliveryStatus getCard() {
    return card;
  }

  public void setCard(CardOrderItemDeliveryStatus card) {
    this.card = card;
  }


  public CardOrderItem cardOrderItemId(String cardOrderItemId) {
    this.cardOrderItemId = cardOrderItemId;
    return this;
  }

  /**
   * The unique identifier of the card order item.
   * @return cardOrderItemId
   */
  @javax.annotation.Nullable
  public String getCardOrderItemId() {
    return cardOrderItemId;
  }

  public void setCardOrderItemId(String cardOrderItemId) {
    this.cardOrderItemId = cardOrderItemId;
  }


  public CardOrderItem creationDate(OffsetDateTime creationDate) {
    this.creationDate = creationDate;
    return this;
  }

  /**
   * The date and time when the event was triggered, in ISO 8601 extended format. For example, **2020-12-18T10:15:30+01:00**.
   * @return creationDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreationDate() {
    return creationDate;
  }

  public void setCreationDate(OffsetDateTime creationDate) {
    this.creationDate = creationDate;
  }


  public CardOrderItem id(String id) {
    this.id = id;
    return this;
  }

  /**
   * The ID of the resource.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public CardOrderItem paymentInstrumentId(String paymentInstrumentId) {
    this.paymentInstrumentId = paymentInstrumentId;
    return this;
  }

  /**
   * The unique identifier of the payment instrument related to the card order item.
   * @return paymentInstrumentId
   */
  @javax.annotation.Nullable
  public String getPaymentInstrumentId() {
    return paymentInstrumentId;
  }

  public void setPaymentInstrumentId(String paymentInstrumentId) {
    this.paymentInstrumentId = paymentInstrumentId;
  }


  public CardOrderItem pin(CardOrderItemDeliveryStatus pin) {
    this.pin = pin;
    return this;
  }

  /**
   * Contains information about the status of the PIN delivery.
   * @return pin
   */
  @javax.annotation.Nullable
  public CardOrderItemDeliveryStatus getPin() {
    return pin;
  }

  public void setPin(CardOrderItemDeliveryStatus pin) {
    this.pin = pin;
  }


  public CardOrderItem shippingMethod(String shippingMethod) {
    this.shippingMethod = shippingMethod;
    return this;
  }

  /**
   * The shipping method used to deliver the card or the PIN.
   * @return shippingMethod
   */
  @javax.annotation.Nullable
  public String getShippingMethod() {
    return shippingMethod;
  }

  public void setShippingMethod(String shippingMethod) {
    this.shippingMethod = shippingMethod;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CardOrderItem cardOrderItem = (CardOrderItem) o;
    return Objects.equals(this.balancePlatform, cardOrderItem.balancePlatform) &&
        Objects.equals(this.card, cardOrderItem.card) &&
        Objects.equals(this.cardOrderItemId, cardOrderItem.cardOrderItemId) &&
        Objects.equals(this.creationDate, cardOrderItem.creationDate) &&
        Objects.equals(this.id, cardOrderItem.id) &&
        Objects.equals(this.paymentInstrumentId, cardOrderItem.paymentInstrumentId) &&
        Objects.equals(this.pin, cardOrderItem.pin) &&
        Objects.equals(this.shippingMethod, cardOrderItem.shippingMethod);
  }

  @Override
  public int hashCode() {
    return Objects.hash(balancePlatform, card, cardOrderItemId, creationDate, id, paymentInstrumentId, pin, shippingMethod);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CardOrderItem {\n");
    sb.append("    balancePlatform: ").append(toIndentedString(balancePlatform)).append("\n");
    sb.append("    card: ").append(toIndentedString(card)).append("\n");
    sb.append("    cardOrderItemId: ").append(toIndentedString(cardOrderItemId)).append("\n");
    sb.append("    creationDate: ").append(toIndentedString(creationDate)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    paymentInstrumentId: ").append(toIndentedString(paymentInstrumentId)).append("\n");
    sb.append("    pin: ").append(toIndentedString(pin)).append("\n");
    sb.append("    shippingMethod: ").append(toIndentedString(shippingMethod)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("balancePlatform");
    openapiFields.add("card");
    openapiFields.add("cardOrderItemId");
    openapiFields.add("creationDate");
    openapiFields.add("id");
    openapiFields.add("paymentInstrumentId");
    openapiFields.add("pin");
    openapiFields.add("shippingMethod");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CardOrderItem
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CardOrderItem.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CardOrderItem is not found in the empty JSON string", CardOrderItem.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CardOrderItem.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CardOrderItem` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("balancePlatform") != null && !jsonObj.get("balancePlatform").isJsonNull()) && !jsonObj.get("balancePlatform").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `balancePlatform` to be a primitive type in the JSON string but got `%s`", jsonObj.get("balancePlatform").toString()));
      }
      // validate the optional field `card`
      if (jsonObj.get("card") != null && !jsonObj.get("card").isJsonNull()) {
        CardOrderItemDeliveryStatus.validateJsonElement(jsonObj.get("card"));
      }
      if ((jsonObj.get("cardOrderItemId") != null && !jsonObj.get("cardOrderItemId").isJsonNull()) && !jsonObj.get("cardOrderItemId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cardOrderItemId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cardOrderItemId").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("paymentInstrumentId") != null && !jsonObj.get("paymentInstrumentId").isJsonNull()) && !jsonObj.get("paymentInstrumentId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `paymentInstrumentId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("paymentInstrumentId").toString()));
      }
      // validate the optional field `pin`
      if (jsonObj.get("pin") != null && !jsonObj.get("pin").isJsonNull()) {
        CardOrderItemDeliveryStatus.validateJsonElement(jsonObj.get("pin"));
      }
      if ((jsonObj.get("shippingMethod") != null && !jsonObj.get("shippingMethod").isJsonNull()) && !jsonObj.get("shippingMethod").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shippingMethod` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shippingMethod").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CardOrderItem.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CardOrderItem' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CardOrderItem> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CardOrderItem.class));

       return (TypeAdapter<T>) new TypeAdapter<CardOrderItem>() {
           @Override
           public void write(JsonWriter out, CardOrderItem value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CardOrderItem read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CardOrderItem given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CardOrderItem
   * @throws IOException if the JSON string is invalid with respect to CardOrderItem
   */
  public static CardOrderItem fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CardOrderItem.class);
  }

  /**
   * Convert an instance of CardOrderItem to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

