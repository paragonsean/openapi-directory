/**
 * Configuration webhooks
 * Adyen sends webhooks to inform your system about events that occur in your platform. These events include, for example, when an account holder's capabilities are updated, or when a sweep configuration is created or updated.  When an event occurs, Adyen makes an HTTP POST request to a URL on your server and includes the details of the event in the request body.  You can use these webhooks to build your implementation. For example, you can use this information to update internal statuses when the status of a capability is changed.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICapabilityProblem.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICapabilityProblem::OAICapabilityProblem(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICapabilityProblem::OAICapabilityProblem() {
    this->initializeModel();
}

OAICapabilityProblem::~OAICapabilityProblem() {}

void OAICapabilityProblem::initializeModel() {

    m_entity_isSet = false;
    m_entity_isValid = false;

    m_verification_errors_isSet = false;
    m_verification_errors_isValid = false;
}

void OAICapabilityProblem::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICapabilityProblem::fromJsonObject(QJsonObject json) {

    m_entity_isValid = ::OpenAPI::fromJsonValue(m_entity, json[QString("entity")]);
    m_entity_isSet = !json[QString("entity")].isNull() && m_entity_isValid;

    m_verification_errors_isValid = ::OpenAPI::fromJsonValue(m_verification_errors, json[QString("verificationErrors")]);
    m_verification_errors_isSet = !json[QString("verificationErrors")].isNull() && m_verification_errors_isValid;
}

QString OAICapabilityProblem::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICapabilityProblem::asJsonObject() const {
    QJsonObject obj;
    if (m_entity.isSet()) {
        obj.insert(QString("entity"), ::OpenAPI::toJsonValue(m_entity));
    }
    if (m_verification_errors.size() > 0) {
        obj.insert(QString("verificationErrors"), ::OpenAPI::toJsonValue(m_verification_errors));
    }
    return obj;
}

OAICapabilityProblemEntity OAICapabilityProblem::getEntity() const {
    return m_entity;
}
void OAICapabilityProblem::setEntity(const OAICapabilityProblemEntity &entity) {
    m_entity = entity;
    m_entity_isSet = true;
}

bool OAICapabilityProblem::is_entity_Set() const{
    return m_entity_isSet;
}

bool OAICapabilityProblem::is_entity_Valid() const{
    return m_entity_isValid;
}

QList<OAIVerificationError> OAICapabilityProblem::getVerificationErrors() const {
    return m_verification_errors;
}
void OAICapabilityProblem::setVerificationErrors(const QList<OAIVerificationError> &verification_errors) {
    m_verification_errors = verification_errors;
    m_verification_errors_isSet = true;
}

bool OAICapabilityProblem::is_verification_errors_Set() const{
    return m_verification_errors_isSet;
}

bool OAICapabilityProblem::is_verification_errors_Valid() const{
    return m_verification_errors_isValid;
}

bool OAICapabilityProblem::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_entity.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_verification_errors.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICapabilityProblem::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
