/**
 * Configuration webhooks
 * Adyen sends webhooks to inform your system about events that occur in your platform. These events include, for example, when an account holder's capabilities are updated, or when a sweep configuration is created or updated.  When an event occurs, Adyen makes an HTTP POST request to a URL on your server and includes the details of the event in the request body.  You can use these webhooks to build your implementation. For example, you can use this information to update internal statuses when the status of a capability is changed.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPersonalData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPersonalData::OAIPersonalData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPersonalData::OAIPersonalData() {
    this->initializeModel();
}

OAIPersonalData::~OAIPersonalData() {}

void OAIPersonalData::initializeModel() {

    m_date_of_birth_isSet = false;
    m_date_of_birth_isValid = false;

    m_id_number_isSet = false;
    m_id_number_isValid = false;

    m_nationality_isSet = false;
    m_nationality_isValid = false;
}

void OAIPersonalData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPersonalData::fromJsonObject(QJsonObject json) {

    m_date_of_birth_isValid = ::OpenAPI::fromJsonValue(m_date_of_birth, json[QString("dateOfBirth")]);
    m_date_of_birth_isSet = !json[QString("dateOfBirth")].isNull() && m_date_of_birth_isValid;

    m_id_number_isValid = ::OpenAPI::fromJsonValue(m_id_number, json[QString("idNumber")]);
    m_id_number_isSet = !json[QString("idNumber")].isNull() && m_id_number_isValid;

    m_nationality_isValid = ::OpenAPI::fromJsonValue(m_nationality, json[QString("nationality")]);
    m_nationality_isSet = !json[QString("nationality")].isNull() && m_nationality_isValid;
}

QString OAIPersonalData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPersonalData::asJsonObject() const {
    QJsonObject obj;
    if (m_date_of_birth_isSet) {
        obj.insert(QString("dateOfBirth"), ::OpenAPI::toJsonValue(m_date_of_birth));
    }
    if (m_id_number_isSet) {
        obj.insert(QString("idNumber"), ::OpenAPI::toJsonValue(m_id_number));
    }
    if (m_nationality_isSet) {
        obj.insert(QString("nationality"), ::OpenAPI::toJsonValue(m_nationality));
    }
    return obj;
}

QString OAIPersonalData::getDateOfBirth() const {
    return m_date_of_birth;
}
void OAIPersonalData::setDateOfBirth(const QString &date_of_birth) {
    m_date_of_birth = date_of_birth;
    m_date_of_birth_isSet = true;
}

bool OAIPersonalData::is_date_of_birth_Set() const{
    return m_date_of_birth_isSet;
}

bool OAIPersonalData::is_date_of_birth_Valid() const{
    return m_date_of_birth_isValid;
}

QString OAIPersonalData::getIdNumber() const {
    return m_id_number;
}
void OAIPersonalData::setIdNumber(const QString &id_number) {
    m_id_number = id_number;
    m_id_number_isSet = true;
}

bool OAIPersonalData::is_id_number_Set() const{
    return m_id_number_isSet;
}

bool OAIPersonalData::is_id_number_Valid() const{
    return m_id_number_isValid;
}

QString OAIPersonalData::getNationality() const {
    return m_nationality;
}
void OAIPersonalData::setNationality(const QString &nationality) {
    m_nationality = nationality;
    m_nationality_isSet = true;
}

bool OAIPersonalData::is_nationality_Set() const{
    return m_nationality_isSet;
}

bool OAIPersonalData::is_nationality_Valid() const{
    return m_nationality_isValid;
}

bool OAIPersonalData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_date_of_birth_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_nationality_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPersonalData::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
