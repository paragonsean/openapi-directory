/**
 * Configuration webhooks
 * Adyen sends webhooks to inform your system about events that occur in your platform. These events include, for example, when an account holder's capabilities are updated, or when a sweep configuration is created or updated.  When an event occurs, Adyen makes an HTTP POST request to a URL on your server and includes the details of the event in the request body.  You can use these webhooks to build your implementation. For example, you can use this information to update internal statuses when the status of a capability is changed.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISweepCounterparty.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISweepCounterparty::OAISweepCounterparty(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISweepCounterparty::OAISweepCounterparty() {
    this->initializeModel();
}

OAISweepCounterparty::~OAISweepCounterparty() {}

void OAISweepCounterparty::initializeModel() {

    m_balance_account_id_isSet = false;
    m_balance_account_id_isValid = false;

    m_merchant_account_isSet = false;
    m_merchant_account_isValid = false;

    m_transfer_instrument_id_isSet = false;
    m_transfer_instrument_id_isValid = false;
}

void OAISweepCounterparty::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISweepCounterparty::fromJsonObject(QJsonObject json) {

    m_balance_account_id_isValid = ::OpenAPI::fromJsonValue(m_balance_account_id, json[QString("balanceAccountId")]);
    m_balance_account_id_isSet = !json[QString("balanceAccountId")].isNull() && m_balance_account_id_isValid;

    m_merchant_account_isValid = ::OpenAPI::fromJsonValue(m_merchant_account, json[QString("merchantAccount")]);
    m_merchant_account_isSet = !json[QString("merchantAccount")].isNull() && m_merchant_account_isValid;

    m_transfer_instrument_id_isValid = ::OpenAPI::fromJsonValue(m_transfer_instrument_id, json[QString("transferInstrumentId")]);
    m_transfer_instrument_id_isSet = !json[QString("transferInstrumentId")].isNull() && m_transfer_instrument_id_isValid;
}

QString OAISweepCounterparty::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISweepCounterparty::asJsonObject() const {
    QJsonObject obj;
    if (m_balance_account_id_isSet) {
        obj.insert(QString("balanceAccountId"), ::OpenAPI::toJsonValue(m_balance_account_id));
    }
    if (m_merchant_account_isSet) {
        obj.insert(QString("merchantAccount"), ::OpenAPI::toJsonValue(m_merchant_account));
    }
    if (m_transfer_instrument_id_isSet) {
        obj.insert(QString("transferInstrumentId"), ::OpenAPI::toJsonValue(m_transfer_instrument_id));
    }
    return obj;
}

QString OAISweepCounterparty::getBalanceAccountId() const {
    return m_balance_account_id;
}
void OAISweepCounterparty::setBalanceAccountId(const QString &balance_account_id) {
    m_balance_account_id = balance_account_id;
    m_balance_account_id_isSet = true;
}

bool OAISweepCounterparty::is_balance_account_id_Set() const{
    return m_balance_account_id_isSet;
}

bool OAISweepCounterparty::is_balance_account_id_Valid() const{
    return m_balance_account_id_isValid;
}

QString OAISweepCounterparty::getMerchantAccount() const {
    return m_merchant_account;
}
void OAISweepCounterparty::setMerchantAccount(const QString &merchant_account) {
    m_merchant_account = merchant_account;
    m_merchant_account_isSet = true;
}

bool OAISweepCounterparty::is_merchant_account_Set() const{
    return m_merchant_account_isSet;
}

bool OAISweepCounterparty::is_merchant_account_Valid() const{
    return m_merchant_account_isValid;
}

QString OAISweepCounterparty::getTransferInstrumentId() const {
    return m_transfer_instrument_id;
}
void OAISweepCounterparty::setTransferInstrumentId(const QString &transfer_instrument_id) {
    m_transfer_instrument_id = transfer_instrument_id;
    m_transfer_instrument_id_isSet = true;
}

bool OAISweepCounterparty::is_transfer_instrument_id_Set() const{
    return m_transfer_instrument_id_isSet;
}

bool OAISweepCounterparty::is_transfer_instrument_id_Valid() const{
    return m_transfer_instrument_id_isValid;
}

bool OAISweepCounterparty::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_balance_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_merchant_account_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transfer_instrument_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISweepCounterparty::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
