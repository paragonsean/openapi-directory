/**
 * Configuration webhooks
 * Adyen sends webhooks to inform your system about events that occur in your platform. These events include, for example, when an account holder's capabilities are updated, or when a sweep configuration is created or updated.  When an event occurs, Adyen makes an HTTP POST request to a URL on your server and includes the details of the event in the request body.  You can use these webhooks to build your implementation. For example, you can use this information to update internal statuses when the status of a capability is changed.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIVerificationError_recursive.h
 *
 * 
 */

#ifndef OAIVerificationError_recursive_H
#define OAIVerificationError_recursive_H

#include <QJsonObject>

#include "OAIRemediatingAction.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIRemediatingAction;

class OAIVerificationError_recursive : public OAIObject {
public:
    OAIVerificationError_recursive();
    OAIVerificationError_recursive(QString json);
    ~OAIVerificationError_recursive() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<QString> getCapabilities() const;
    void setCapabilities(const QList<QString> &capabilities);
    bool is_capabilities_Set() const;
    bool is_capabilities_Valid() const;

    QString getCode() const;
    void setCode(const QString &code);
    bool is_code_Set() const;
    bool is_code_Valid() const;

    QString getMessage() const;
    void setMessage(const QString &message);
    bool is_message_Set() const;
    bool is_message_Valid() const;

    QList<OAIRemediatingAction> getRemediatingActions() const;
    void setRemediatingActions(const QList<OAIRemediatingAction> &remediating_actions);
    bool is_remediating_actions_Set() const;
    bool is_remediating_actions_Valid() const;

    QString getType() const;
    void setType(const QString &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<QString> m_capabilities;
    bool m_capabilities_isSet;
    bool m_capabilities_isValid;

    QString m_code;
    bool m_code_isSet;
    bool m_code_isValid;

    QString m_message;
    bool m_message_isSet;
    bool m_message_isValid;

    QList<OAIRemediatingAction> m_remediating_actions;
    bool m_remediating_actions_isSet;
    bool m_remediating_actions_isValid;

    QString m_type;
    bool m_type_isSet;
    bool m_type_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIVerificationError_recursive)

#endif // OAIVerificationError_recursive_H
