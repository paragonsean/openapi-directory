/**
 * Configuration webhooks
 * Adyen sends webhooks to inform your system about events that occur in your platform. These events include, for example, when an account holder's capabilities are updated, or when a sweep configuration is created or updated.  When an event occurs, Adyen makes an HTTP POST request to a URL on your server and includes the details of the event in the request body.  You can use these webhooks to build your implementation. For example, you can use this information to update internal statuses when the status of a capability is changed.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIContactDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIContactDetails::OAIContactDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIContactDetails::OAIContactDetails() {
    this->initializeModel();
}

OAIContactDetails::~OAIContactDetails() {}

void OAIContactDetails::initializeModel() {

    m_address_isSet = false;
    m_address_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_phone_isSet = false;
    m_phone_isValid = false;

    m_web_address_isSet = false;
    m_web_address_isValid = false;
}

void OAIContactDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIContactDetails::fromJsonObject(QJsonObject json) {

    m_address_isValid = ::OpenAPI::fromJsonValue(m_address, json[QString("address")]);
    m_address_isSet = !json[QString("address")].isNull() && m_address_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_phone_isValid = ::OpenAPI::fromJsonValue(m_phone, json[QString("phone")]);
    m_phone_isSet = !json[QString("phone")].isNull() && m_phone_isValid;

    m_web_address_isValid = ::OpenAPI::fromJsonValue(m_web_address, json[QString("webAddress")]);
    m_web_address_isSet = !json[QString("webAddress")].isNull() && m_web_address_isValid;
}

QString OAIContactDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIContactDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_address.isSet()) {
        obj.insert(QString("address"), ::OpenAPI::toJsonValue(m_address));
    }
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_phone.isSet()) {
        obj.insert(QString("phone"), ::OpenAPI::toJsonValue(m_phone));
    }
    if (m_web_address_isSet) {
        obj.insert(QString("webAddress"), ::OpenAPI::toJsonValue(m_web_address));
    }
    return obj;
}

OAIAddress OAIContactDetails::getAddress() const {
    return m_address;
}
void OAIContactDetails::setAddress(const OAIAddress &address) {
    m_address = address;
    m_address_isSet = true;
}

bool OAIContactDetails::is_address_Set() const{
    return m_address_isSet;
}

bool OAIContactDetails::is_address_Valid() const{
    return m_address_isValid;
}

QString OAIContactDetails::getEmail() const {
    return m_email;
}
void OAIContactDetails::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAIContactDetails::is_email_Set() const{
    return m_email_isSet;
}

bool OAIContactDetails::is_email_Valid() const{
    return m_email_isValid;
}

OAIPhone OAIContactDetails::getPhone() const {
    return m_phone;
}
void OAIContactDetails::setPhone(const OAIPhone &phone) {
    m_phone = phone;
    m_phone_isSet = true;
}

bool OAIContactDetails::is_phone_Set() const{
    return m_phone_isSet;
}

bool OAIContactDetails::is_phone_Valid() const{
    return m_phone_isValid;
}

QString OAIContactDetails::getWebAddress() const {
    return m_web_address;
}
void OAIContactDetails::setWebAddress(const QString &web_address) {
    m_web_address = web_address;
    m_web_address_isSet = true;
}

bool OAIContactDetails::is_web_address_Set() const{
    return m_web_address_isSet;
}

bool OAIContactDetails::is_web_address_Valid() const{
    return m_web_address_isValid;
}

bool OAIContactDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_address.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phone.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_web_address_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIContactDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_address_isValid && m_email_isValid && m_phone_isValid && true;
}

} // namespace OpenAPI
