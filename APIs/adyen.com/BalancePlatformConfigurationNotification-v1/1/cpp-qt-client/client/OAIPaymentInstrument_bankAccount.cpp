/**
 * Configuration webhooks
 * Adyen sends webhooks to inform your system about events that occur in your platform. These events include, for example, when an account holder's capabilities are updated, or when a sweep configuration is created or updated.  When an event occurs, Adyen makes an HTTP POST request to a URL on your server and includes the details of the event in the request body.  You can use these webhooks to build your implementation. For example, you can use this information to update internal statuses when the status of a capability is changed.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPaymentInstrument_bankAccount.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPaymentInstrument_bankAccount::OAIPaymentInstrument_bankAccount(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPaymentInstrument_bankAccount::OAIPaymentInstrument_bankAccount() {
    this->initializeModel();
}

OAIPaymentInstrument_bankAccount::~OAIPaymentInstrument_bankAccount() {}

void OAIPaymentInstrument_bankAccount::initializeModel() {

    m_form_factor_isSet = false;
    m_form_factor_isValid = false;

    m_iban_isSet = false;
    m_iban_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_account_number_isSet = false;
    m_account_number_isValid = false;

    m_account_type_isSet = false;
    m_account_type_isValid = false;

    m_routing_number_isSet = false;
    m_routing_number_isValid = false;
}

void OAIPaymentInstrument_bankAccount::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPaymentInstrument_bankAccount::fromJsonObject(QJsonObject json) {

    m_form_factor_isValid = ::OpenAPI::fromJsonValue(m_form_factor, json[QString("formFactor")]);
    m_form_factor_isSet = !json[QString("formFactor")].isNull() && m_form_factor_isValid;

    m_iban_isValid = ::OpenAPI::fromJsonValue(m_iban, json[QString("iban")]);
    m_iban_isSet = !json[QString("iban")].isNull() && m_iban_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_account_number_isValid = ::OpenAPI::fromJsonValue(m_account_number, json[QString("accountNumber")]);
    m_account_number_isSet = !json[QString("accountNumber")].isNull() && m_account_number_isValid;

    m_account_type_isValid = ::OpenAPI::fromJsonValue(m_account_type, json[QString("accountType")]);
    m_account_type_isSet = !json[QString("accountType")].isNull() && m_account_type_isValid;

    m_routing_number_isValid = ::OpenAPI::fromJsonValue(m_routing_number, json[QString("routingNumber")]);
    m_routing_number_isSet = !json[QString("routingNumber")].isNull() && m_routing_number_isValid;
}

QString OAIPaymentInstrument_bankAccount::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPaymentInstrument_bankAccount::asJsonObject() const {
    QJsonObject obj;
    if (m_form_factor_isSet) {
        obj.insert(QString("formFactor"), ::OpenAPI::toJsonValue(m_form_factor));
    }
    if (m_iban_isSet) {
        obj.insert(QString("iban"), ::OpenAPI::toJsonValue(m_iban));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_account_number_isSet) {
        obj.insert(QString("accountNumber"), ::OpenAPI::toJsonValue(m_account_number));
    }
    if (m_account_type_isSet) {
        obj.insert(QString("accountType"), ::OpenAPI::toJsonValue(m_account_type));
    }
    if (m_routing_number_isSet) {
        obj.insert(QString("routingNumber"), ::OpenAPI::toJsonValue(m_routing_number));
    }
    return obj;
}

QString OAIPaymentInstrument_bankAccount::getFormFactor() const {
    return m_form_factor;
}
void OAIPaymentInstrument_bankAccount::setFormFactor(const QString &form_factor) {
    m_form_factor = form_factor;
    m_form_factor_isSet = true;
}

bool OAIPaymentInstrument_bankAccount::is_form_factor_Set() const{
    return m_form_factor_isSet;
}

bool OAIPaymentInstrument_bankAccount::is_form_factor_Valid() const{
    return m_form_factor_isValid;
}

QString OAIPaymentInstrument_bankAccount::getIban() const {
    return m_iban;
}
void OAIPaymentInstrument_bankAccount::setIban(const QString &iban) {
    m_iban = iban;
    m_iban_isSet = true;
}

bool OAIPaymentInstrument_bankAccount::is_iban_Set() const{
    return m_iban_isSet;
}

bool OAIPaymentInstrument_bankAccount::is_iban_Valid() const{
    return m_iban_isValid;
}

QString OAIPaymentInstrument_bankAccount::getType() const {
    return m_type;
}
void OAIPaymentInstrument_bankAccount::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIPaymentInstrument_bankAccount::is_type_Set() const{
    return m_type_isSet;
}

bool OAIPaymentInstrument_bankAccount::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIPaymentInstrument_bankAccount::getAccountNumber() const {
    return m_account_number;
}
void OAIPaymentInstrument_bankAccount::setAccountNumber(const QString &account_number) {
    m_account_number = account_number;
    m_account_number_isSet = true;
}

bool OAIPaymentInstrument_bankAccount::is_account_number_Set() const{
    return m_account_number_isSet;
}

bool OAIPaymentInstrument_bankAccount::is_account_number_Valid() const{
    return m_account_number_isValid;
}

QString OAIPaymentInstrument_bankAccount::getAccountType() const {
    return m_account_type;
}
void OAIPaymentInstrument_bankAccount::setAccountType(const QString &account_type) {
    m_account_type = account_type;
    m_account_type_isSet = true;
}

bool OAIPaymentInstrument_bankAccount::is_account_type_Set() const{
    return m_account_type_isSet;
}

bool OAIPaymentInstrument_bankAccount::is_account_type_Valid() const{
    return m_account_type_isValid;
}

QString OAIPaymentInstrument_bankAccount::getRoutingNumber() const {
    return m_routing_number;
}
void OAIPaymentInstrument_bankAccount::setRoutingNumber(const QString &routing_number) {
    m_routing_number = routing_number;
    m_routing_number_isSet = true;
}

bool OAIPaymentInstrument_bankAccount::is_routing_number_Set() const{
    return m_routing_number_isSet;
}

bool OAIPaymentInstrument_bankAccount::is_routing_number_Valid() const{
    return m_routing_number_isValid;
}

bool OAIPaymentInstrument_bankAccount::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_form_factor_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_iban_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_account_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_account_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_routing_number_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPaymentInstrument_bankAccount::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_iban_isValid && m_type_isValid && m_account_number_isValid && m_routing_number_isValid && true;
}

} // namespace OpenAPI
