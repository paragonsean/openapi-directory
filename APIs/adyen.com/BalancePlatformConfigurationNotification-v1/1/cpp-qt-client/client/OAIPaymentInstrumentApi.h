/**
 * Configuration webhooks
 * Adyen sends webhooks to inform your system about events that occur in your platform. These events include, for example, when an account holder's capabilities are updated, or when a sweep configuration is created or updated.  When an event occurs, Adyen makes an HTTP POST request to a URL on your server and includes the details of the event in the request body.  You can use these webhooks to build your implementation. For example, you can use this information to update internal statuses when the status of a capability is changed.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIPaymentInstrumentApi_H
#define OAI_OAIPaymentInstrumentApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIBalancePlatformNotificationResponse.h"
#include "OAIPaymentNotificationRequest.h"

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIPaymentInstrumentApi : public QObject {
    Q_OBJECT

public:
    OAIPaymentInstrumentApi(const int timeOut = 0);
    ~OAIPaymentInstrumentApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_payment_notification_request OAIPaymentNotificationRequest [optional]
    */
    virtual void postBalancePlatform_paymentInstrument_created(const ::OpenAPI::OptionalParam<OAIPaymentNotificationRequest> &oai_payment_notification_request = ::OpenAPI::OptionalParam<OAIPaymentNotificationRequest>());

    /**
    * @param[in]  oai_payment_notification_request OAIPaymentNotificationRequest [optional]
    */
    virtual void postBalancePlatform_paymentInstrument_updated(const ::OpenAPI::OptionalParam<OAIPaymentNotificationRequest> &oai_payment_notification_request = ::OpenAPI::OptionalParam<OAIPaymentNotificationRequest>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void postBalancePlatform_paymentInstrument_createdCallback(OAIHttpRequestWorker *worker);
    void postBalancePlatform_paymentInstrument_updatedCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void postBalancePlatform_paymentInstrument_createdSignal(OAIBalancePlatformNotificationResponse summary);
    void postBalancePlatform_paymentInstrument_updatedSignal(OAIBalancePlatformNotificationResponse summary);


    void postBalancePlatform_paymentInstrument_createdSignalFull(OAIHttpRequestWorker *worker, OAIBalancePlatformNotificationResponse summary);
    void postBalancePlatform_paymentInstrument_updatedSignalFull(OAIHttpRequestWorker *worker, OAIBalancePlatformNotificationResponse summary);

    Q_DECL_DEPRECATED_X("Use postBalancePlatform_paymentInstrument_createdSignalError() instead")
    void postBalancePlatform_paymentInstrument_createdSignalE(OAIBalancePlatformNotificationResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postBalancePlatform_paymentInstrument_createdSignalError(OAIBalancePlatformNotificationResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postBalancePlatform_paymentInstrument_updatedSignalError() instead")
    void postBalancePlatform_paymentInstrument_updatedSignalE(OAIBalancePlatformNotificationResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postBalancePlatform_paymentInstrument_updatedSignalError(OAIBalancePlatformNotificationResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use postBalancePlatform_paymentInstrument_createdSignalErrorFull() instead")
    void postBalancePlatform_paymentInstrument_createdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postBalancePlatform_paymentInstrument_createdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postBalancePlatform_paymentInstrument_updatedSignalErrorFull() instead")
    void postBalancePlatform_paymentInstrument_updatedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postBalancePlatform_paymentInstrument_updatedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
