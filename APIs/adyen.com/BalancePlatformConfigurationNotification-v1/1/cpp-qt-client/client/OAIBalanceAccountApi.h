/**
 * Configuration webhooks
 * Adyen sends webhooks to inform your system about events that occur in your platform. These events include, for example, when an account holder's capabilities are updated, or when a sweep configuration is created or updated.  When an event occurs, Adyen makes an HTTP POST request to a URL on your server and includes the details of the event in the request body.  You can use these webhooks to build your implementation. For example, you can use this information to update internal statuses when the status of a capability is changed.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIBalanceAccountApi_H
#define OAI_OAIBalanceAccountApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIBalanceAccountNotificationRequest.h"
#include "OAIBalancePlatformNotificationResponse.h"
#include "OAISweepConfigurationNotificationRequest.h"

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIBalanceAccountApi : public QObject {
    Q_OBJECT

public:
    OAIBalanceAccountApi(const int timeOut = 0);
    ~OAIBalanceAccountApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_sweep_configuration_notification_request OAISweepConfigurationNotificationRequest [optional]
    */
    virtual void postBalancePlatform_balanceAccountSweep_created(const ::OpenAPI::OptionalParam<OAISweepConfigurationNotificationRequest> &oai_sweep_configuration_notification_request = ::OpenAPI::OptionalParam<OAISweepConfigurationNotificationRequest>());

    /**
    * @param[in]  oai_sweep_configuration_notification_request OAISweepConfigurationNotificationRequest [optional]
    */
    virtual void postBalancePlatform_balanceAccountSweep_deleted(const ::OpenAPI::OptionalParam<OAISweepConfigurationNotificationRequest> &oai_sweep_configuration_notification_request = ::OpenAPI::OptionalParam<OAISweepConfigurationNotificationRequest>());

    /**
    * @param[in]  oai_sweep_configuration_notification_request OAISweepConfigurationNotificationRequest [optional]
    */
    virtual void postBalancePlatform_balanceAccountSweep_updated(const ::OpenAPI::OptionalParam<OAISweepConfigurationNotificationRequest> &oai_sweep_configuration_notification_request = ::OpenAPI::OptionalParam<OAISweepConfigurationNotificationRequest>());

    /**
    * @param[in]  oai_balance_account_notification_request OAIBalanceAccountNotificationRequest [optional]
    */
    virtual void postBalancePlatform_balanceAccount_created(const ::OpenAPI::OptionalParam<OAIBalanceAccountNotificationRequest> &oai_balance_account_notification_request = ::OpenAPI::OptionalParam<OAIBalanceAccountNotificationRequest>());

    /**
    * @param[in]  oai_balance_account_notification_request OAIBalanceAccountNotificationRequest [optional]
    */
    virtual void postBalancePlatform_balanceAccount_updated(const ::OpenAPI::OptionalParam<OAIBalanceAccountNotificationRequest> &oai_balance_account_notification_request = ::OpenAPI::OptionalParam<OAIBalanceAccountNotificationRequest>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void postBalancePlatform_balanceAccountSweep_createdCallback(OAIHttpRequestWorker *worker);
    void postBalancePlatform_balanceAccountSweep_deletedCallback(OAIHttpRequestWorker *worker);
    void postBalancePlatform_balanceAccountSweep_updatedCallback(OAIHttpRequestWorker *worker);
    void postBalancePlatform_balanceAccount_createdCallback(OAIHttpRequestWorker *worker);
    void postBalancePlatform_balanceAccount_updatedCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void postBalancePlatform_balanceAccountSweep_createdSignal(OAIBalancePlatformNotificationResponse summary);
    void postBalancePlatform_balanceAccountSweep_deletedSignal(OAIBalancePlatformNotificationResponse summary);
    void postBalancePlatform_balanceAccountSweep_updatedSignal(OAIBalancePlatformNotificationResponse summary);
    void postBalancePlatform_balanceAccount_createdSignal(OAIBalancePlatformNotificationResponse summary);
    void postBalancePlatform_balanceAccount_updatedSignal(OAIBalancePlatformNotificationResponse summary);


    void postBalancePlatform_balanceAccountSweep_createdSignalFull(OAIHttpRequestWorker *worker, OAIBalancePlatformNotificationResponse summary);
    void postBalancePlatform_balanceAccountSweep_deletedSignalFull(OAIHttpRequestWorker *worker, OAIBalancePlatformNotificationResponse summary);
    void postBalancePlatform_balanceAccountSweep_updatedSignalFull(OAIHttpRequestWorker *worker, OAIBalancePlatformNotificationResponse summary);
    void postBalancePlatform_balanceAccount_createdSignalFull(OAIHttpRequestWorker *worker, OAIBalancePlatformNotificationResponse summary);
    void postBalancePlatform_balanceAccount_updatedSignalFull(OAIHttpRequestWorker *worker, OAIBalancePlatformNotificationResponse summary);

    Q_DECL_DEPRECATED_X("Use postBalancePlatform_balanceAccountSweep_createdSignalError() instead")
    void postBalancePlatform_balanceAccountSweep_createdSignalE(OAIBalancePlatformNotificationResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postBalancePlatform_balanceAccountSweep_createdSignalError(OAIBalancePlatformNotificationResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postBalancePlatform_balanceAccountSweep_deletedSignalError() instead")
    void postBalancePlatform_balanceAccountSweep_deletedSignalE(OAIBalancePlatformNotificationResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postBalancePlatform_balanceAccountSweep_deletedSignalError(OAIBalancePlatformNotificationResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postBalancePlatform_balanceAccountSweep_updatedSignalError() instead")
    void postBalancePlatform_balanceAccountSweep_updatedSignalE(OAIBalancePlatformNotificationResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postBalancePlatform_balanceAccountSweep_updatedSignalError(OAIBalancePlatformNotificationResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postBalancePlatform_balanceAccount_createdSignalError() instead")
    void postBalancePlatform_balanceAccount_createdSignalE(OAIBalancePlatformNotificationResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postBalancePlatform_balanceAccount_createdSignalError(OAIBalancePlatformNotificationResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postBalancePlatform_balanceAccount_updatedSignalError() instead")
    void postBalancePlatform_balanceAccount_updatedSignalE(OAIBalancePlatformNotificationResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postBalancePlatform_balanceAccount_updatedSignalError(OAIBalancePlatformNotificationResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use postBalancePlatform_balanceAccountSweep_createdSignalErrorFull() instead")
    void postBalancePlatform_balanceAccountSweep_createdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postBalancePlatform_balanceAccountSweep_createdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postBalancePlatform_balanceAccountSweep_deletedSignalErrorFull() instead")
    void postBalancePlatform_balanceAccountSweep_deletedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postBalancePlatform_balanceAccountSweep_deletedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postBalancePlatform_balanceAccountSweep_updatedSignalErrorFull() instead")
    void postBalancePlatform_balanceAccountSweep_updatedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postBalancePlatform_balanceAccountSweep_updatedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postBalancePlatform_balanceAccount_createdSignalErrorFull() instead")
    void postBalancePlatform_balanceAccount_createdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postBalancePlatform_balanceAccount_createdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postBalancePlatform_balanceAccount_updatedSignalErrorFull() instead")
    void postBalancePlatform_balanceAccount_updatedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postBalancePlatform_balanceAccount_updatedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
