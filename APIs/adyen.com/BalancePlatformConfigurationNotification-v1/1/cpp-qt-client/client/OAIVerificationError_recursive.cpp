/**
 * Configuration webhooks
 * Adyen sends webhooks to inform your system about events that occur in your platform. These events include, for example, when an account holder's capabilities are updated, or when a sweep configuration is created or updated.  When an event occurs, Adyen makes an HTTP POST request to a URL on your server and includes the details of the event in the request body.  You can use these webhooks to build your implementation. For example, you can use this information to update internal statuses when the status of a capability is changed.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVerificationError_recursive.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVerificationError_recursive::OAIVerificationError_recursive(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVerificationError_recursive::OAIVerificationError_recursive() {
    this->initializeModel();
}

OAIVerificationError_recursive::~OAIVerificationError_recursive() {}

void OAIVerificationError_recursive::initializeModel() {

    m_capabilities_isSet = false;
    m_capabilities_isValid = false;

    m_code_isSet = false;
    m_code_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_remediating_actions_isSet = false;
    m_remediating_actions_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIVerificationError_recursive::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVerificationError_recursive::fromJsonObject(QJsonObject json) {

    m_capabilities_isValid = ::OpenAPI::fromJsonValue(m_capabilities, json[QString("capabilities")]);
    m_capabilities_isSet = !json[QString("capabilities")].isNull() && m_capabilities_isValid;

    m_code_isValid = ::OpenAPI::fromJsonValue(m_code, json[QString("code")]);
    m_code_isSet = !json[QString("code")].isNull() && m_code_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_remediating_actions_isValid = ::OpenAPI::fromJsonValue(m_remediating_actions, json[QString("remediatingActions")]);
    m_remediating_actions_isSet = !json[QString("remediatingActions")].isNull() && m_remediating_actions_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIVerificationError_recursive::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVerificationError_recursive::asJsonObject() const {
    QJsonObject obj;
    if (m_capabilities.size() > 0) {
        obj.insert(QString("capabilities"), ::OpenAPI::toJsonValue(m_capabilities));
    }
    if (m_code_isSet) {
        obj.insert(QString("code"), ::OpenAPI::toJsonValue(m_code));
    }
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_remediating_actions.size() > 0) {
        obj.insert(QString("remediatingActions"), ::OpenAPI::toJsonValue(m_remediating_actions));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QList<QString> OAIVerificationError_recursive::getCapabilities() const {
    return m_capabilities;
}
void OAIVerificationError_recursive::setCapabilities(const QList<QString> &capabilities) {
    m_capabilities = capabilities;
    m_capabilities_isSet = true;
}

bool OAIVerificationError_recursive::is_capabilities_Set() const{
    return m_capabilities_isSet;
}

bool OAIVerificationError_recursive::is_capabilities_Valid() const{
    return m_capabilities_isValid;
}

QString OAIVerificationError_recursive::getCode() const {
    return m_code;
}
void OAIVerificationError_recursive::setCode(const QString &code) {
    m_code = code;
    m_code_isSet = true;
}

bool OAIVerificationError_recursive::is_code_Set() const{
    return m_code_isSet;
}

bool OAIVerificationError_recursive::is_code_Valid() const{
    return m_code_isValid;
}

QString OAIVerificationError_recursive::getMessage() const {
    return m_message;
}
void OAIVerificationError_recursive::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIVerificationError_recursive::is_message_Set() const{
    return m_message_isSet;
}

bool OAIVerificationError_recursive::is_message_Valid() const{
    return m_message_isValid;
}

QList<OAIRemediatingAction> OAIVerificationError_recursive::getRemediatingActions() const {
    return m_remediating_actions;
}
void OAIVerificationError_recursive::setRemediatingActions(const QList<OAIRemediatingAction> &remediating_actions) {
    m_remediating_actions = remediating_actions;
    m_remediating_actions_isSet = true;
}

bool OAIVerificationError_recursive::is_remediating_actions_Set() const{
    return m_remediating_actions_isSet;
}

bool OAIVerificationError_recursive::is_remediating_actions_Valid() const{
    return m_remediating_actions_isValid;
}

QString OAIVerificationError_recursive::getType() const {
    return m_type;
}
void OAIVerificationError_recursive::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIVerificationError_recursive::is_type_Set() const{
    return m_type_isSet;
}

bool OAIVerificationError_recursive::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIVerificationError_recursive::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_capabilities.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_remediating_actions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVerificationError_recursive::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
