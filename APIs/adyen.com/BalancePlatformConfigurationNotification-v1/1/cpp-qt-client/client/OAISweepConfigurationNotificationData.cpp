/**
 * Configuration webhooks
 * Adyen sends webhooks to inform your system about events that occur in your platform. These events include, for example, when an account holder's capabilities are updated, or when a sweep configuration is created or updated.  When an event occurs, Adyen makes an HTTP POST request to a URL on your server and includes the details of the event in the request body.  You can use these webhooks to build your implementation. For example, you can use this information to update internal statuses when the status of a capability is changed.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISweepConfigurationNotificationData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISweepConfigurationNotificationData::OAISweepConfigurationNotificationData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISweepConfigurationNotificationData::OAISweepConfigurationNotificationData() {
    this->initializeModel();
}

OAISweepConfigurationNotificationData::~OAISweepConfigurationNotificationData() {}

void OAISweepConfigurationNotificationData::initializeModel() {

    m_account_id_isSet = false;
    m_account_id_isValid = false;

    m_balance_platform_isSet = false;
    m_balance_platform_isValid = false;

    m_sweep_isSet = false;
    m_sweep_isValid = false;
}

void OAISweepConfigurationNotificationData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISweepConfigurationNotificationData::fromJsonObject(QJsonObject json) {

    m_account_id_isValid = ::OpenAPI::fromJsonValue(m_account_id, json[QString("accountId")]);
    m_account_id_isSet = !json[QString("accountId")].isNull() && m_account_id_isValid;

    m_balance_platform_isValid = ::OpenAPI::fromJsonValue(m_balance_platform, json[QString("balancePlatform")]);
    m_balance_platform_isSet = !json[QString("balancePlatform")].isNull() && m_balance_platform_isValid;

    m_sweep_isValid = ::OpenAPI::fromJsonValue(m_sweep, json[QString("sweep")]);
    m_sweep_isSet = !json[QString("sweep")].isNull() && m_sweep_isValid;
}

QString OAISweepConfigurationNotificationData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISweepConfigurationNotificationData::asJsonObject() const {
    QJsonObject obj;
    if (m_account_id_isSet) {
        obj.insert(QString("accountId"), ::OpenAPI::toJsonValue(m_account_id));
    }
    if (m_balance_platform_isSet) {
        obj.insert(QString("balancePlatform"), ::OpenAPI::toJsonValue(m_balance_platform));
    }
    if (m_sweep.isSet()) {
        obj.insert(QString("sweep"), ::OpenAPI::toJsonValue(m_sweep));
    }
    return obj;
}

QString OAISweepConfigurationNotificationData::getAccountId() const {
    return m_account_id;
}
void OAISweepConfigurationNotificationData::setAccountId(const QString &account_id) {
    m_account_id = account_id;
    m_account_id_isSet = true;
}

bool OAISweepConfigurationNotificationData::is_account_id_Set() const{
    return m_account_id_isSet;
}

bool OAISweepConfigurationNotificationData::is_account_id_Valid() const{
    return m_account_id_isValid;
}

QString OAISweepConfigurationNotificationData::getBalancePlatform() const {
    return m_balance_platform;
}
void OAISweepConfigurationNotificationData::setBalancePlatform(const QString &balance_platform) {
    m_balance_platform = balance_platform;
    m_balance_platform_isSet = true;
}

bool OAISweepConfigurationNotificationData::is_balance_platform_Set() const{
    return m_balance_platform_isSet;
}

bool OAISweepConfigurationNotificationData::is_balance_platform_Valid() const{
    return m_balance_platform_isValid;
}

OAISweepConfigurationV2 OAISweepConfigurationNotificationData::getSweep() const {
    return m_sweep;
}
void OAISweepConfigurationNotificationData::setSweep(const OAISweepConfigurationV2 &sweep) {
    m_sweep = sweep;
    m_sweep_isSet = true;
}

bool OAISweepConfigurationNotificationData::is_sweep_Set() const{
    return m_sweep_isSet;
}

bool OAISweepConfigurationNotificationData::is_sweep_Valid() const{
    return m_sweep_isValid;
}

bool OAISweepConfigurationNotificationData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_balance_platform_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sweep.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISweepConfigurationNotificationData::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
