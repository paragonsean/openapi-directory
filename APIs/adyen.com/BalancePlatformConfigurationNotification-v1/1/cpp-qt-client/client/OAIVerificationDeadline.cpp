/**
 * Configuration webhooks
 * Adyen sends webhooks to inform your system about events that occur in your platform. These events include, for example, when an account holder's capabilities are updated, or when a sweep configuration is created or updated.  When an event occurs, Adyen makes an HTTP POST request to a URL on your server and includes the details of the event in the request body.  You can use these webhooks to build your implementation. For example, you can use this information to update internal statuses when the status of a capability is changed.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVerificationDeadline.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVerificationDeadline::OAIVerificationDeadline(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVerificationDeadline::OAIVerificationDeadline() {
    this->initializeModel();
}

OAIVerificationDeadline::~OAIVerificationDeadline() {}

void OAIVerificationDeadline::initializeModel() {

    m_capabilities_isSet = false;
    m_capabilities_isValid = false;

    m_entity_ids_isSet = false;
    m_entity_ids_isValid = false;

    m_expires_at_isSet = false;
    m_expires_at_isValid = false;
}

void OAIVerificationDeadline::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVerificationDeadline::fromJsonObject(QJsonObject json) {

    m_capabilities_isValid = ::OpenAPI::fromJsonValue(m_capabilities, json[QString("capabilities")]);
    m_capabilities_isSet = !json[QString("capabilities")].isNull() && m_capabilities_isValid;

    m_entity_ids_isValid = ::OpenAPI::fromJsonValue(m_entity_ids, json[QString("entityIds")]);
    m_entity_ids_isSet = !json[QString("entityIds")].isNull() && m_entity_ids_isValid;

    m_expires_at_isValid = ::OpenAPI::fromJsonValue(m_expires_at, json[QString("expiresAt")]);
    m_expires_at_isSet = !json[QString("expiresAt")].isNull() && m_expires_at_isValid;
}

QString OAIVerificationDeadline::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVerificationDeadline::asJsonObject() const {
    QJsonObject obj;
    if (m_capabilities.size() > 0) {
        obj.insert(QString("capabilities"), ::OpenAPI::toJsonValue(m_capabilities));
    }
    if (m_entity_ids.size() > 0) {
        obj.insert(QString("entityIds"), ::OpenAPI::toJsonValue(m_entity_ids));
    }
    if (m_expires_at_isSet) {
        obj.insert(QString("expiresAt"), ::OpenAPI::toJsonValue(m_expires_at));
    }
    return obj;
}

QList<QString> OAIVerificationDeadline::getCapabilities() const {
    return m_capabilities;
}
void OAIVerificationDeadline::setCapabilities(const QList<QString> &capabilities) {
    m_capabilities = capabilities;
    m_capabilities_isSet = true;
}

bool OAIVerificationDeadline::is_capabilities_Set() const{
    return m_capabilities_isSet;
}

bool OAIVerificationDeadline::is_capabilities_Valid() const{
    return m_capabilities_isValid;
}

QList<QString> OAIVerificationDeadline::getEntityIds() const {
    return m_entity_ids;
}
void OAIVerificationDeadline::setEntityIds(const QList<QString> &entity_ids) {
    m_entity_ids = entity_ids;
    m_entity_ids_isSet = true;
}

bool OAIVerificationDeadline::is_entity_ids_Set() const{
    return m_entity_ids_isSet;
}

bool OAIVerificationDeadline::is_entity_ids_Valid() const{
    return m_entity_ids_isValid;
}

QDateTime OAIVerificationDeadline::getExpiresAt() const {
    return m_expires_at;
}
void OAIVerificationDeadline::setExpiresAt(const QDateTime &expires_at) {
    m_expires_at = expires_at;
    m_expires_at_isSet = true;
}

bool OAIVerificationDeadline::is_expires_at_Set() const{
    return m_expires_at_isSet;
}

bool OAIVerificationDeadline::is_expires_at_Valid() const{
    return m_expires_at_isValid;
}

bool OAIVerificationDeadline::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_capabilities.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_entity_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_expires_at_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVerificationDeadline::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_capabilities_isValid && m_expires_at_isValid && true;
}

} // namespace OpenAPI
