/**
 * Configuration webhooks
 * Adyen sends webhooks to inform your system about events that occur in your platform. These events include, for example, when an account holder's capabilities are updated, or when a sweep configuration is created or updated.  When an event occurs, Adyen makes an HTTP POST request to a URL on your server and includes the details of the event in the request body.  You can use these webhooks to build your implementation. For example, you can use this information to update internal statuses when the status of a capability is changed.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUSLocalAccountIdentification.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUSLocalAccountIdentification::OAIUSLocalAccountIdentification(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUSLocalAccountIdentification::OAIUSLocalAccountIdentification() {
    this->initializeModel();
}

OAIUSLocalAccountIdentification::~OAIUSLocalAccountIdentification() {}

void OAIUSLocalAccountIdentification::initializeModel() {

    m_account_number_isSet = false;
    m_account_number_isValid = false;

    m_account_type_isSet = false;
    m_account_type_isValid = false;

    m_form_factor_isSet = false;
    m_form_factor_isValid = false;

    m_routing_number_isSet = false;
    m_routing_number_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIUSLocalAccountIdentification::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUSLocalAccountIdentification::fromJsonObject(QJsonObject json) {

    m_account_number_isValid = ::OpenAPI::fromJsonValue(m_account_number, json[QString("accountNumber")]);
    m_account_number_isSet = !json[QString("accountNumber")].isNull() && m_account_number_isValid;

    m_account_type_isValid = ::OpenAPI::fromJsonValue(m_account_type, json[QString("accountType")]);
    m_account_type_isSet = !json[QString("accountType")].isNull() && m_account_type_isValid;

    m_form_factor_isValid = ::OpenAPI::fromJsonValue(m_form_factor, json[QString("formFactor")]);
    m_form_factor_isSet = !json[QString("formFactor")].isNull() && m_form_factor_isValid;

    m_routing_number_isValid = ::OpenAPI::fromJsonValue(m_routing_number, json[QString("routingNumber")]);
    m_routing_number_isSet = !json[QString("routingNumber")].isNull() && m_routing_number_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIUSLocalAccountIdentification::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUSLocalAccountIdentification::asJsonObject() const {
    QJsonObject obj;
    if (m_account_number_isSet) {
        obj.insert(QString("accountNumber"), ::OpenAPI::toJsonValue(m_account_number));
    }
    if (m_account_type_isSet) {
        obj.insert(QString("accountType"), ::OpenAPI::toJsonValue(m_account_type));
    }
    if (m_form_factor_isSet) {
        obj.insert(QString("formFactor"), ::OpenAPI::toJsonValue(m_form_factor));
    }
    if (m_routing_number_isSet) {
        obj.insert(QString("routingNumber"), ::OpenAPI::toJsonValue(m_routing_number));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIUSLocalAccountIdentification::getAccountNumber() const {
    return m_account_number;
}
void OAIUSLocalAccountIdentification::setAccountNumber(const QString &account_number) {
    m_account_number = account_number;
    m_account_number_isSet = true;
}

bool OAIUSLocalAccountIdentification::is_account_number_Set() const{
    return m_account_number_isSet;
}

bool OAIUSLocalAccountIdentification::is_account_number_Valid() const{
    return m_account_number_isValid;
}

QString OAIUSLocalAccountIdentification::getAccountType() const {
    return m_account_type;
}
void OAIUSLocalAccountIdentification::setAccountType(const QString &account_type) {
    m_account_type = account_type;
    m_account_type_isSet = true;
}

bool OAIUSLocalAccountIdentification::is_account_type_Set() const{
    return m_account_type_isSet;
}

bool OAIUSLocalAccountIdentification::is_account_type_Valid() const{
    return m_account_type_isValid;
}

QString OAIUSLocalAccountIdentification::getFormFactor() const {
    return m_form_factor;
}
void OAIUSLocalAccountIdentification::setFormFactor(const QString &form_factor) {
    m_form_factor = form_factor;
    m_form_factor_isSet = true;
}

bool OAIUSLocalAccountIdentification::is_form_factor_Set() const{
    return m_form_factor_isSet;
}

bool OAIUSLocalAccountIdentification::is_form_factor_Valid() const{
    return m_form_factor_isValid;
}

QString OAIUSLocalAccountIdentification::getRoutingNumber() const {
    return m_routing_number;
}
void OAIUSLocalAccountIdentification::setRoutingNumber(const QString &routing_number) {
    m_routing_number = routing_number;
    m_routing_number_isSet = true;
}

bool OAIUSLocalAccountIdentification::is_routing_number_Set() const{
    return m_routing_number_isSet;
}

bool OAIUSLocalAccountIdentification::is_routing_number_Valid() const{
    return m_routing_number_isValid;
}

QString OAIUSLocalAccountIdentification::getType() const {
    return m_type;
}
void OAIUSLocalAccountIdentification::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIUSLocalAccountIdentification::is_type_Set() const{
    return m_type_isSet;
}

bool OAIUSLocalAccountIdentification::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIUSLocalAccountIdentification::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_account_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_form_factor_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_routing_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUSLocalAccountIdentification::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_account_number_isValid && m_routing_number_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
