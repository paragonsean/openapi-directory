/**
 * Configuration webhooks
 * Adyen sends webhooks to inform your system about events that occur in your platform. These events include, for example, when an account holder's capabilities are updated, or when a sweep configuration is created or updated.  When an event occurs, Adyen makes an HTTP POST request to a URL on your server and includes the details of the event in the request body.  You can use these webhooks to build your implementation. For example, you can use this information to update internal statuses when the status of a capability is changed.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICapabilitySettings.h
 *
 * 
 */

#ifndef OAICapabilitySettings_H
#define OAICapabilitySettings_H

#include <QJsonObject>

#include "OAIAmount.h"
#include <QList>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIAmount;

class OAICapabilitySettings : public OAIObject {
public:
    OAICapabilitySettings();
    OAICapabilitySettings(QString json);
    ~OAICapabilitySettings() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QMap<QString, OAIAmount> getAmountPerIndustry() const;
    void setAmountPerIndustry(const QMap<QString, OAIAmount> &amount_per_industry);
    bool is_amount_per_industry_Set() const;
    bool is_amount_per_industry_Valid() const;

    bool isAuthorizedCardUsers() const;
    void setAuthorizedCardUsers(const bool &authorized_card_users);
    bool is_authorized_card_users_Set() const;
    bool is_authorized_card_users_Valid() const;

    QList<QString> getFundingSource() const;
    void setFundingSource(const QList<QString> &funding_source);
    bool is_funding_source_Set() const;
    bool is_funding_source_Valid() const;

    QString getInterval() const;
    void setInterval(const QString &interval);
    bool is_interval_Set() const;
    bool is_interval_Valid() const;

    OAIAmount getMaxAmount() const;
    void setMaxAmount(const OAIAmount &max_amount);
    bool is_max_amount_Set() const;
    bool is_max_amount_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QMap<QString, OAIAmount> m_amount_per_industry;
    bool m_amount_per_industry_isSet;
    bool m_amount_per_industry_isValid;

    bool m_authorized_card_users;
    bool m_authorized_card_users_isSet;
    bool m_authorized_card_users_isValid;

    QList<QString> m_funding_source;
    bool m_funding_source_isSet;
    bool m_funding_source_isValid;

    QString m_interval;
    bool m_interval_isSet;
    bool m_interval_isValid;

    OAIAmount m_max_amount;
    bool m_max_amount_isSet;
    bool m_max_amount_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICapabilitySettings)

#endif // OAICapabilitySettings_H
