/**
 * Configuration webhooks
 * Adyen sends webhooks to inform your system about events that occur in your platform. These events include, for example, when an account holder's capabilities are updated, or when a sweep configuration is created or updated.  When an event occurs, Adyen makes an HTTP POST request to a URL on your server and includes the details of the event in the request body.  You can use these webhooks to build your implementation. For example, you can use this information to update internal statuses when the status of a capability is changed.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPaymentInstrumentNotificationData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPaymentInstrumentNotificationData::OAIPaymentInstrumentNotificationData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPaymentInstrumentNotificationData::OAIPaymentInstrumentNotificationData() {
    this->initializeModel();
}

OAIPaymentInstrumentNotificationData::~OAIPaymentInstrumentNotificationData() {}

void OAIPaymentInstrumentNotificationData::initializeModel() {

    m_balance_platform_isSet = false;
    m_balance_platform_isValid = false;

    m_payment_instrument_isSet = false;
    m_payment_instrument_isValid = false;
}

void OAIPaymentInstrumentNotificationData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPaymentInstrumentNotificationData::fromJsonObject(QJsonObject json) {

    m_balance_platform_isValid = ::OpenAPI::fromJsonValue(m_balance_platform, json[QString("balancePlatform")]);
    m_balance_platform_isSet = !json[QString("balancePlatform")].isNull() && m_balance_platform_isValid;

    m_payment_instrument_isValid = ::OpenAPI::fromJsonValue(m_payment_instrument, json[QString("paymentInstrument")]);
    m_payment_instrument_isSet = !json[QString("paymentInstrument")].isNull() && m_payment_instrument_isValid;
}

QString OAIPaymentInstrumentNotificationData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPaymentInstrumentNotificationData::asJsonObject() const {
    QJsonObject obj;
    if (m_balance_platform_isSet) {
        obj.insert(QString("balancePlatform"), ::OpenAPI::toJsonValue(m_balance_platform));
    }
    if (m_payment_instrument.isSet()) {
        obj.insert(QString("paymentInstrument"), ::OpenAPI::toJsonValue(m_payment_instrument));
    }
    return obj;
}

QString OAIPaymentInstrumentNotificationData::getBalancePlatform() const {
    return m_balance_platform;
}
void OAIPaymentInstrumentNotificationData::setBalancePlatform(const QString &balance_platform) {
    m_balance_platform = balance_platform;
    m_balance_platform_isSet = true;
}

bool OAIPaymentInstrumentNotificationData::is_balance_platform_Set() const{
    return m_balance_platform_isSet;
}

bool OAIPaymentInstrumentNotificationData::is_balance_platform_Valid() const{
    return m_balance_platform_isValid;
}

OAIPaymentInstrument OAIPaymentInstrumentNotificationData::getPaymentInstrument() const {
    return m_payment_instrument;
}
void OAIPaymentInstrumentNotificationData::setPaymentInstrument(const OAIPaymentInstrument &payment_instrument) {
    m_payment_instrument = payment_instrument;
    m_payment_instrument_isSet = true;
}

bool OAIPaymentInstrumentNotificationData::is_payment_instrument_Set() const{
    return m_payment_instrument_isSet;
}

bool OAIPaymentInstrumentNotificationData::is_payment_instrument_Valid() const{
    return m_payment_instrument_isValid;
}

bool OAIPaymentInstrumentNotificationData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_balance_platform_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_instrument.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPaymentInstrumentNotificationData::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
