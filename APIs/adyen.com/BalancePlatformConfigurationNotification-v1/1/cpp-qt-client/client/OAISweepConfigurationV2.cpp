/**
 * Configuration webhooks
 * Adyen sends webhooks to inform your system about events that occur in your platform. These events include, for example, when an account holder's capabilities are updated, or when a sweep configuration is created or updated.  When an event occurs, Adyen makes an HTTP POST request to a URL on your server and includes the details of the event in the request body.  You can use these webhooks to build your implementation. For example, you can use this information to update internal statuses when the status of a capability is changed.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISweepConfigurationV2.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISweepConfigurationV2::OAISweepConfigurationV2(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISweepConfigurationV2::OAISweepConfigurationV2() {
    this->initializeModel();
}

OAISweepConfigurationV2::~OAISweepConfigurationV2() {}

void OAISweepConfigurationV2::initializeModel() {

    m_counterparty_isSet = false;
    m_counterparty_isValid = false;

    m_currency_isSet = false;
    m_currency_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_reason_isSet = false;
    m_reason_isValid = false;

    m_schedule_isSet = false;
    m_schedule_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_sweep_amount_isSet = false;
    m_sweep_amount_isValid = false;

    m_target_amount_isSet = false;
    m_target_amount_isValid = false;

    m_trigger_amount_isSet = false;
    m_trigger_amount_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAISweepConfigurationV2::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISweepConfigurationV2::fromJsonObject(QJsonObject json) {

    m_counterparty_isValid = ::OpenAPI::fromJsonValue(m_counterparty, json[QString("counterparty")]);
    m_counterparty_isSet = !json[QString("counterparty")].isNull() && m_counterparty_isValid;

    m_currency_isValid = ::OpenAPI::fromJsonValue(m_currency, json[QString("currency")]);
    m_currency_isSet = !json[QString("currency")].isNull() && m_currency_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_reason_isValid = ::OpenAPI::fromJsonValue(m_reason, json[QString("reason")]);
    m_reason_isSet = !json[QString("reason")].isNull() && m_reason_isValid;

    m_schedule_isValid = ::OpenAPI::fromJsonValue(m_schedule, json[QString("schedule")]);
    m_schedule_isSet = !json[QString("schedule")].isNull() && m_schedule_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_sweep_amount_isValid = ::OpenAPI::fromJsonValue(m_sweep_amount, json[QString("sweepAmount")]);
    m_sweep_amount_isSet = !json[QString("sweepAmount")].isNull() && m_sweep_amount_isValid;

    m_target_amount_isValid = ::OpenAPI::fromJsonValue(m_target_amount, json[QString("targetAmount")]);
    m_target_amount_isSet = !json[QString("targetAmount")].isNull() && m_target_amount_isValid;

    m_trigger_amount_isValid = ::OpenAPI::fromJsonValue(m_trigger_amount, json[QString("triggerAmount")]);
    m_trigger_amount_isSet = !json[QString("triggerAmount")].isNull() && m_trigger_amount_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAISweepConfigurationV2::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISweepConfigurationV2::asJsonObject() const {
    QJsonObject obj;
    if (m_counterparty.isSet()) {
        obj.insert(QString("counterparty"), ::OpenAPI::toJsonValue(m_counterparty));
    }
    if (m_currency_isSet) {
        obj.insert(QString("currency"), ::OpenAPI::toJsonValue(m_currency));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_reason_isSet) {
        obj.insert(QString("reason"), ::OpenAPI::toJsonValue(m_reason));
    }
    if (m_schedule.isSet()) {
        obj.insert(QString("schedule"), ::OpenAPI::toJsonValue(m_schedule));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_sweep_amount.isSet()) {
        obj.insert(QString("sweepAmount"), ::OpenAPI::toJsonValue(m_sweep_amount));
    }
    if (m_target_amount.isSet()) {
        obj.insert(QString("targetAmount"), ::OpenAPI::toJsonValue(m_target_amount));
    }
    if (m_trigger_amount.isSet()) {
        obj.insert(QString("triggerAmount"), ::OpenAPI::toJsonValue(m_trigger_amount));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

OAISweepCounterparty OAISweepConfigurationV2::getCounterparty() const {
    return m_counterparty;
}
void OAISweepConfigurationV2::setCounterparty(const OAISweepCounterparty &counterparty) {
    m_counterparty = counterparty;
    m_counterparty_isSet = true;
}

bool OAISweepConfigurationV2::is_counterparty_Set() const{
    return m_counterparty_isSet;
}

bool OAISweepConfigurationV2::is_counterparty_Valid() const{
    return m_counterparty_isValid;
}

QString OAISweepConfigurationV2::getCurrency() const {
    return m_currency;
}
void OAISweepConfigurationV2::setCurrency(const QString &currency) {
    m_currency = currency;
    m_currency_isSet = true;
}

bool OAISweepConfigurationV2::is_currency_Set() const{
    return m_currency_isSet;
}

bool OAISweepConfigurationV2::is_currency_Valid() const{
    return m_currency_isValid;
}

QString OAISweepConfigurationV2::getDescription() const {
    return m_description;
}
void OAISweepConfigurationV2::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAISweepConfigurationV2::is_description_Set() const{
    return m_description_isSet;
}

bool OAISweepConfigurationV2::is_description_Valid() const{
    return m_description_isValid;
}

QString OAISweepConfigurationV2::getId() const {
    return m_id;
}
void OAISweepConfigurationV2::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAISweepConfigurationV2::is_id_Set() const{
    return m_id_isSet;
}

bool OAISweepConfigurationV2::is_id_Valid() const{
    return m_id_isValid;
}

QString OAISweepConfigurationV2::getReason() const {
    return m_reason;
}
void OAISweepConfigurationV2::setReason(const QString &reason) {
    m_reason = reason;
    m_reason_isSet = true;
}

bool OAISweepConfigurationV2::is_reason_Set() const{
    return m_reason_isSet;
}

bool OAISweepConfigurationV2::is_reason_Valid() const{
    return m_reason_isValid;
}

OAISweepSchedule OAISweepConfigurationV2::getSchedule() const {
    return m_schedule;
}
void OAISweepConfigurationV2::setSchedule(const OAISweepSchedule &schedule) {
    m_schedule = schedule;
    m_schedule_isSet = true;
}

bool OAISweepConfigurationV2::is_schedule_Set() const{
    return m_schedule_isSet;
}

bool OAISweepConfigurationV2::is_schedule_Valid() const{
    return m_schedule_isValid;
}

QString OAISweepConfigurationV2::getStatus() const {
    return m_status;
}
void OAISweepConfigurationV2::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAISweepConfigurationV2::is_status_Set() const{
    return m_status_isSet;
}

bool OAISweepConfigurationV2::is_status_Valid() const{
    return m_status_isValid;
}

OAIAmount OAISweepConfigurationV2::getSweepAmount() const {
    return m_sweep_amount;
}
void OAISweepConfigurationV2::setSweepAmount(const OAIAmount &sweep_amount) {
    m_sweep_amount = sweep_amount;
    m_sweep_amount_isSet = true;
}

bool OAISweepConfigurationV2::is_sweep_amount_Set() const{
    return m_sweep_amount_isSet;
}

bool OAISweepConfigurationV2::is_sweep_amount_Valid() const{
    return m_sweep_amount_isValid;
}

OAIAmount OAISweepConfigurationV2::getTargetAmount() const {
    return m_target_amount;
}
void OAISweepConfigurationV2::setTargetAmount(const OAIAmount &target_amount) {
    m_target_amount = target_amount;
    m_target_amount_isSet = true;
}

bool OAISweepConfigurationV2::is_target_amount_Set() const{
    return m_target_amount_isSet;
}

bool OAISweepConfigurationV2::is_target_amount_Valid() const{
    return m_target_amount_isValid;
}

OAIAmount OAISweepConfigurationV2::getTriggerAmount() const {
    return m_trigger_amount;
}
void OAISweepConfigurationV2::setTriggerAmount(const OAIAmount &trigger_amount) {
    m_trigger_amount = trigger_amount;
    m_trigger_amount_isSet = true;
}

bool OAISweepConfigurationV2::is_trigger_amount_Set() const{
    return m_trigger_amount_isSet;
}

bool OAISweepConfigurationV2::is_trigger_amount_Valid() const{
    return m_trigger_amount_isValid;
}

QString OAISweepConfigurationV2::getType() const {
    return m_type;
}
void OAISweepConfigurationV2::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAISweepConfigurationV2::is_type_Set() const{
    return m_type_isSet;
}

bool OAISweepConfigurationV2::is_type_Valid() const{
    return m_type_isValid;
}

bool OAISweepConfigurationV2::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_counterparty.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schedule.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sweep_amount.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_amount.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_trigger_amount.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISweepConfigurationV2::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_counterparty_isValid && m_currency_isValid && m_id_isValid && m_schedule_isValid && true;
}

} // namespace OpenAPI
