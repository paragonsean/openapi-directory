/**
 * Configuration webhooks
 * Adyen sends webhooks to inform your system about events that occur in your platform. These events include, for example, when an account holder's capabilities are updated, or when a sweep configuration is created or updated.  When an event occurs, Adyen makes an HTTP POST request to a URL on your server and includes the details of the event in the request body.  You can use these webhooks to build your implementation. For example, you can use this information to update internal statuses when the status of a capability is changed.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAccountHolderNotificationData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAccountHolderNotificationData::OAIAccountHolderNotificationData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAccountHolderNotificationData::OAIAccountHolderNotificationData() {
    this->initializeModel();
}

OAIAccountHolderNotificationData::~OAIAccountHolderNotificationData() {}

void OAIAccountHolderNotificationData::initializeModel() {

    m_account_holder_isSet = false;
    m_account_holder_isValid = false;

    m_balance_platform_isSet = false;
    m_balance_platform_isValid = false;
}

void OAIAccountHolderNotificationData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAccountHolderNotificationData::fromJsonObject(QJsonObject json) {

    m_account_holder_isValid = ::OpenAPI::fromJsonValue(m_account_holder, json[QString("accountHolder")]);
    m_account_holder_isSet = !json[QString("accountHolder")].isNull() && m_account_holder_isValid;

    m_balance_platform_isValid = ::OpenAPI::fromJsonValue(m_balance_platform, json[QString("balancePlatform")]);
    m_balance_platform_isSet = !json[QString("balancePlatform")].isNull() && m_balance_platform_isValid;
}

QString OAIAccountHolderNotificationData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAccountHolderNotificationData::asJsonObject() const {
    QJsonObject obj;
    if (m_account_holder.isSet()) {
        obj.insert(QString("accountHolder"), ::OpenAPI::toJsonValue(m_account_holder));
    }
    if (m_balance_platform_isSet) {
        obj.insert(QString("balancePlatform"), ::OpenAPI::toJsonValue(m_balance_platform));
    }
    return obj;
}

OAIAccountHolder OAIAccountHolderNotificationData::getAccountHolder() const {
    return m_account_holder;
}
void OAIAccountHolderNotificationData::setAccountHolder(const OAIAccountHolder &account_holder) {
    m_account_holder = account_holder;
    m_account_holder_isSet = true;
}

bool OAIAccountHolderNotificationData::is_account_holder_Set() const{
    return m_account_holder_isSet;
}

bool OAIAccountHolderNotificationData::is_account_holder_Valid() const{
    return m_account_holder_isValid;
}

QString OAIAccountHolderNotificationData::getBalancePlatform() const {
    return m_balance_platform;
}
void OAIAccountHolderNotificationData::setBalancePlatform(const QString &balance_platform) {
    m_balance_platform = balance_platform;
    m_balance_platform_isSet = true;
}

bool OAIAccountHolderNotificationData::is_balance_platform_Set() const{
    return m_balance_platform_isSet;
}

bool OAIAccountHolderNotificationData::is_balance_platform_Valid() const{
    return m_balance_platform_isValid;
}

bool OAIAccountHolderNotificationData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_holder.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_balance_platform_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAccountHolderNotificationData::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
