/**
 * Configuration webhooks
 * Adyen sends webhooks to inform your system about events that occur in your platform. These events include, for example, when an account holder's capabilities are updated, or when a sweep configuration is created or updated.  When an event occurs, Adyen makes an HTTP POST request to a URL on your server and includes the details of the event in the request body.  You can use these webhooks to build your implementation. For example, you can use this information to update internal statuses when the status of a capability is changed.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPaymentInstrumentReference.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPaymentInstrumentReference::OAIPaymentInstrumentReference(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPaymentInstrumentReference::OAIPaymentInstrumentReference() {
    this->initializeModel();
}

OAIPaymentInstrumentReference::~OAIPaymentInstrumentReference() {}

void OAIPaymentInstrumentReference::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;
}

void OAIPaymentInstrumentReference::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPaymentInstrumentReference::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;
}

QString OAIPaymentInstrumentReference::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPaymentInstrumentReference::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    return obj;
}

QString OAIPaymentInstrumentReference::getId() const {
    return m_id;
}
void OAIPaymentInstrumentReference::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIPaymentInstrumentReference::is_id_Set() const{
    return m_id_isSet;
}

bool OAIPaymentInstrumentReference::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIPaymentInstrumentReference::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPaymentInstrumentReference::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && true;
}

} // namespace OpenAPI
