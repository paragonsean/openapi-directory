/**
 * Configuration webhooks
 * Adyen sends webhooks to inform your system about events that occur in your platform. These events include, for example, when an account holder's capabilities are updated, or when a sweep configuration is created or updated.  When an event occurs, Adyen makes an HTTP POST request to a URL on your server and includes the details of the event in the request body.  You can use these webhooks to build your implementation. For example, you can use this information to update internal statuses when the status of a capability is changed.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIContact.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIContact::OAIContact(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIContact::OAIContact() {
    this->initializeModel();
}

OAIContact::~OAIContact() {}

void OAIContact::initializeModel() {

    m_address_isSet = false;
    m_address_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_full_phone_number_isSet = false;
    m_full_phone_number_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_personal_data_isSet = false;
    m_personal_data_isValid = false;

    m_phone_number_isSet = false;
    m_phone_number_isValid = false;

    m_web_address_isSet = false;
    m_web_address_isValid = false;
}

void OAIContact::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIContact::fromJsonObject(QJsonObject json) {

    m_address_isValid = ::OpenAPI::fromJsonValue(m_address, json[QString("address")]);
    m_address_isSet = !json[QString("address")].isNull() && m_address_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_full_phone_number_isValid = ::OpenAPI::fromJsonValue(m_full_phone_number, json[QString("fullPhoneNumber")]);
    m_full_phone_number_isSet = !json[QString("fullPhoneNumber")].isNull() && m_full_phone_number_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_personal_data_isValid = ::OpenAPI::fromJsonValue(m_personal_data, json[QString("personalData")]);
    m_personal_data_isSet = !json[QString("personalData")].isNull() && m_personal_data_isValid;

    m_phone_number_isValid = ::OpenAPI::fromJsonValue(m_phone_number, json[QString("phoneNumber")]);
    m_phone_number_isSet = !json[QString("phoneNumber")].isNull() && m_phone_number_isValid;

    m_web_address_isValid = ::OpenAPI::fromJsonValue(m_web_address, json[QString("webAddress")]);
    m_web_address_isSet = !json[QString("webAddress")].isNull() && m_web_address_isValid;
}

QString OAIContact::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIContact::asJsonObject() const {
    QJsonObject obj;
    if (m_address.isSet()) {
        obj.insert(QString("address"), ::OpenAPI::toJsonValue(m_address));
    }
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_full_phone_number_isSet) {
        obj.insert(QString("fullPhoneNumber"), ::OpenAPI::toJsonValue(m_full_phone_number));
    }
    if (m_name.isSet()) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_personal_data.isSet()) {
        obj.insert(QString("personalData"), ::OpenAPI::toJsonValue(m_personal_data));
    }
    if (m_phone_number.isSet()) {
        obj.insert(QString("phoneNumber"), ::OpenAPI::toJsonValue(m_phone_number));
    }
    if (m_web_address_isSet) {
        obj.insert(QString("webAddress"), ::OpenAPI::toJsonValue(m_web_address));
    }
    return obj;
}

OAIAddress OAIContact::getAddress() const {
    return m_address;
}
void OAIContact::setAddress(const OAIAddress &address) {
    m_address = address;
    m_address_isSet = true;
}

bool OAIContact::is_address_Set() const{
    return m_address_isSet;
}

bool OAIContact::is_address_Valid() const{
    return m_address_isValid;
}

QString OAIContact::getEmail() const {
    return m_email;
}
void OAIContact::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAIContact::is_email_Set() const{
    return m_email_isSet;
}

bool OAIContact::is_email_Valid() const{
    return m_email_isValid;
}

QString OAIContact::getFullPhoneNumber() const {
    return m_full_phone_number;
}
void OAIContact::setFullPhoneNumber(const QString &full_phone_number) {
    m_full_phone_number = full_phone_number;
    m_full_phone_number_isSet = true;
}

bool OAIContact::is_full_phone_number_Set() const{
    return m_full_phone_number_isSet;
}

bool OAIContact::is_full_phone_number_Valid() const{
    return m_full_phone_number_isValid;
}

OAIName OAIContact::getName() const {
    return m_name;
}
void OAIContact::setName(const OAIName &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIContact::is_name_Set() const{
    return m_name_isSet;
}

bool OAIContact::is_name_Valid() const{
    return m_name_isValid;
}

OAIPersonalData OAIContact::getPersonalData() const {
    return m_personal_data;
}
void OAIContact::setPersonalData(const OAIPersonalData &personal_data) {
    m_personal_data = personal_data;
    m_personal_data_isSet = true;
}

bool OAIContact::is_personal_data_Set() const{
    return m_personal_data_isSet;
}

bool OAIContact::is_personal_data_Valid() const{
    return m_personal_data_isValid;
}

OAIPhoneNumber OAIContact::getPhoneNumber() const {
    return m_phone_number;
}
void OAIContact::setPhoneNumber(const OAIPhoneNumber &phone_number) {
    m_phone_number = phone_number;
    m_phone_number_isSet = true;
}

bool OAIContact::is_phone_number_Set() const{
    return m_phone_number_isSet;
}

bool OAIContact::is_phone_number_Valid() const{
    return m_phone_number_isValid;
}

QString OAIContact::getWebAddress() const {
    return m_web_address;
}
void OAIContact::setWebAddress(const QString &web_address) {
    m_web_address = web_address;
    m_web_address_isSet = true;
}

bool OAIContact::is_web_address_Set() const{
    return m_web_address_isSet;
}

bool OAIContact::is_web_address_Valid() const{
    return m_web_address_isValid;
}

bool OAIContact::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_address.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_full_phone_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_personal_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_phone_number.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_web_address_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIContact::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
