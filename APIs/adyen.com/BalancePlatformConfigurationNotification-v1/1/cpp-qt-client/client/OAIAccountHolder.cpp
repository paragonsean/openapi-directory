/**
 * Configuration webhooks
 * Adyen sends webhooks to inform your system about events that occur in your platform. These events include, for example, when an account holder's capabilities are updated, or when a sweep configuration is created or updated.  When an event occurs, Adyen makes an HTTP POST request to a URL on your server and includes the details of the event in the request body.  You can use these webhooks to build your implementation. For example, you can use this information to update internal statuses when the status of a capability is changed.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAccountHolder.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAccountHolder::OAIAccountHolder(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAccountHolder::OAIAccountHolder() {
    this->initializeModel();
}

OAIAccountHolder::~OAIAccountHolder() {}

void OAIAccountHolder::initializeModel() {

    m_balance_platform_isSet = false;
    m_balance_platform_isValid = false;

    m_capabilities_isSet = false;
    m_capabilities_isValid = false;

    m_contact_details_isSet = false;
    m_contact_details_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_legal_entity_id_isSet = false;
    m_legal_entity_id_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_migrated_account_holder_code_isSet = false;
    m_migrated_account_holder_code_isValid = false;

    m_primary_balance_account_isSet = false;
    m_primary_balance_account_isValid = false;

    m_reference_isSet = false;
    m_reference_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_time_zone_isSet = false;
    m_time_zone_isValid = false;

    m_verification_deadlines_isSet = false;
    m_verification_deadlines_isValid = false;
}

void OAIAccountHolder::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAccountHolder::fromJsonObject(QJsonObject json) {

    m_balance_platform_isValid = ::OpenAPI::fromJsonValue(m_balance_platform, json[QString("balancePlatform")]);
    m_balance_platform_isSet = !json[QString("balancePlatform")].isNull() && m_balance_platform_isValid;

    m_capabilities_isValid = ::OpenAPI::fromJsonValue(m_capabilities, json[QString("capabilities")]);
    m_capabilities_isSet = !json[QString("capabilities")].isNull() && m_capabilities_isValid;

    m_contact_details_isValid = ::OpenAPI::fromJsonValue(m_contact_details, json[QString("contactDetails")]);
    m_contact_details_isSet = !json[QString("contactDetails")].isNull() && m_contact_details_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_legal_entity_id_isValid = ::OpenAPI::fromJsonValue(m_legal_entity_id, json[QString("legalEntityId")]);
    m_legal_entity_id_isSet = !json[QString("legalEntityId")].isNull() && m_legal_entity_id_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_migrated_account_holder_code_isValid = ::OpenAPI::fromJsonValue(m_migrated_account_holder_code, json[QString("migratedAccountHolderCode")]);
    m_migrated_account_holder_code_isSet = !json[QString("migratedAccountHolderCode")].isNull() && m_migrated_account_holder_code_isValid;

    m_primary_balance_account_isValid = ::OpenAPI::fromJsonValue(m_primary_balance_account, json[QString("primaryBalanceAccount")]);
    m_primary_balance_account_isSet = !json[QString("primaryBalanceAccount")].isNull() && m_primary_balance_account_isValid;

    m_reference_isValid = ::OpenAPI::fromJsonValue(m_reference, json[QString("reference")]);
    m_reference_isSet = !json[QString("reference")].isNull() && m_reference_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_time_zone_isValid = ::OpenAPI::fromJsonValue(m_time_zone, json[QString("timeZone")]);
    m_time_zone_isSet = !json[QString("timeZone")].isNull() && m_time_zone_isValid;

    m_verification_deadlines_isValid = ::OpenAPI::fromJsonValue(m_verification_deadlines, json[QString("verificationDeadlines")]);
    m_verification_deadlines_isSet = !json[QString("verificationDeadlines")].isNull() && m_verification_deadlines_isValid;
}

QString OAIAccountHolder::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAccountHolder::asJsonObject() const {
    QJsonObject obj;
    if (m_balance_platform_isSet) {
        obj.insert(QString("balancePlatform"), ::OpenAPI::toJsonValue(m_balance_platform));
    }
    if (m_capabilities.size() > 0) {
        obj.insert(QString("capabilities"), ::OpenAPI::toJsonValue(m_capabilities));
    }
    if (m_contact_details.isSet()) {
        obj.insert(QString("contactDetails"), ::OpenAPI::toJsonValue(m_contact_details));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_legal_entity_id_isSet) {
        obj.insert(QString("legalEntityId"), ::OpenAPI::toJsonValue(m_legal_entity_id));
    }
    if (m_metadata.size() > 0) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_migrated_account_holder_code_isSet) {
        obj.insert(QString("migratedAccountHolderCode"), ::OpenAPI::toJsonValue(m_migrated_account_holder_code));
    }
    if (m_primary_balance_account_isSet) {
        obj.insert(QString("primaryBalanceAccount"), ::OpenAPI::toJsonValue(m_primary_balance_account));
    }
    if (m_reference_isSet) {
        obj.insert(QString("reference"), ::OpenAPI::toJsonValue(m_reference));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_time_zone_isSet) {
        obj.insert(QString("timeZone"), ::OpenAPI::toJsonValue(m_time_zone));
    }
    if (m_verification_deadlines.size() > 0) {
        obj.insert(QString("verificationDeadlines"), ::OpenAPI::toJsonValue(m_verification_deadlines));
    }
    return obj;
}

QString OAIAccountHolder::getBalancePlatform() const {
    return m_balance_platform;
}
void OAIAccountHolder::setBalancePlatform(const QString &balance_platform) {
    m_balance_platform = balance_platform;
    m_balance_platform_isSet = true;
}

bool OAIAccountHolder::is_balance_platform_Set() const{
    return m_balance_platform_isSet;
}

bool OAIAccountHolder::is_balance_platform_Valid() const{
    return m_balance_platform_isValid;
}

QMap<QString, OAIAccountHolderCapability> OAIAccountHolder::getCapabilities() const {
    return m_capabilities;
}
void OAIAccountHolder::setCapabilities(const QMap<QString, OAIAccountHolderCapability> &capabilities) {
    m_capabilities = capabilities;
    m_capabilities_isSet = true;
}

bool OAIAccountHolder::is_capabilities_Set() const{
    return m_capabilities_isSet;
}

bool OAIAccountHolder::is_capabilities_Valid() const{
    return m_capabilities_isValid;
}

OAIContactDetails OAIAccountHolder::getContactDetails() const {
    return m_contact_details;
}
void OAIAccountHolder::setContactDetails(const OAIContactDetails &contact_details) {
    m_contact_details = contact_details;
    m_contact_details_isSet = true;
}

bool OAIAccountHolder::is_contact_details_Set() const{
    return m_contact_details_isSet;
}

bool OAIAccountHolder::is_contact_details_Valid() const{
    return m_contact_details_isValid;
}

QString OAIAccountHolder::getDescription() const {
    return m_description;
}
void OAIAccountHolder::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIAccountHolder::is_description_Set() const{
    return m_description_isSet;
}

bool OAIAccountHolder::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIAccountHolder::getId() const {
    return m_id;
}
void OAIAccountHolder::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIAccountHolder::is_id_Set() const{
    return m_id_isSet;
}

bool OAIAccountHolder::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIAccountHolder::getLegalEntityId() const {
    return m_legal_entity_id;
}
void OAIAccountHolder::setLegalEntityId(const QString &legal_entity_id) {
    m_legal_entity_id = legal_entity_id;
    m_legal_entity_id_isSet = true;
}

bool OAIAccountHolder::is_legal_entity_id_Set() const{
    return m_legal_entity_id_isSet;
}

bool OAIAccountHolder::is_legal_entity_id_Valid() const{
    return m_legal_entity_id_isValid;
}

QMap<QString, QString> OAIAccountHolder::getMetadata() const {
    return m_metadata;
}
void OAIAccountHolder::setMetadata(const QMap<QString, QString> &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAIAccountHolder::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAIAccountHolder::is_metadata_Valid() const{
    return m_metadata_isValid;
}

QString OAIAccountHolder::getMigratedAccountHolderCode() const {
    return m_migrated_account_holder_code;
}
void OAIAccountHolder::setMigratedAccountHolderCode(const QString &migrated_account_holder_code) {
    m_migrated_account_holder_code = migrated_account_holder_code;
    m_migrated_account_holder_code_isSet = true;
}

bool OAIAccountHolder::is_migrated_account_holder_code_Set() const{
    return m_migrated_account_holder_code_isSet;
}

bool OAIAccountHolder::is_migrated_account_holder_code_Valid() const{
    return m_migrated_account_holder_code_isValid;
}

QString OAIAccountHolder::getPrimaryBalanceAccount() const {
    return m_primary_balance_account;
}
void OAIAccountHolder::setPrimaryBalanceAccount(const QString &primary_balance_account) {
    m_primary_balance_account = primary_balance_account;
    m_primary_balance_account_isSet = true;
}

bool OAIAccountHolder::is_primary_balance_account_Set() const{
    return m_primary_balance_account_isSet;
}

bool OAIAccountHolder::is_primary_balance_account_Valid() const{
    return m_primary_balance_account_isValid;
}

QString OAIAccountHolder::getReference() const {
    return m_reference;
}
void OAIAccountHolder::setReference(const QString &reference) {
    m_reference = reference;
    m_reference_isSet = true;
}

bool OAIAccountHolder::is_reference_Set() const{
    return m_reference_isSet;
}

bool OAIAccountHolder::is_reference_Valid() const{
    return m_reference_isValid;
}

QString OAIAccountHolder::getStatus() const {
    return m_status;
}
void OAIAccountHolder::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIAccountHolder::is_status_Set() const{
    return m_status_isSet;
}

bool OAIAccountHolder::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIAccountHolder::getTimeZone() const {
    return m_time_zone;
}
void OAIAccountHolder::setTimeZone(const QString &time_zone) {
    m_time_zone = time_zone;
    m_time_zone_isSet = true;
}

bool OAIAccountHolder::is_time_zone_Set() const{
    return m_time_zone_isSet;
}

bool OAIAccountHolder::is_time_zone_Valid() const{
    return m_time_zone_isValid;
}

QList<OAIVerificationDeadline> OAIAccountHolder::getVerificationDeadlines() const {
    return m_verification_deadlines;
}
void OAIAccountHolder::setVerificationDeadlines(const QList<OAIVerificationDeadline> &verification_deadlines) {
    m_verification_deadlines = verification_deadlines;
    m_verification_deadlines_isSet = true;
}

bool OAIAccountHolder::is_verification_deadlines_Set() const{
    return m_verification_deadlines_isSet;
}

bool OAIAccountHolder::is_verification_deadlines_Valid() const{
    return m_verification_deadlines_isValid;
}

bool OAIAccountHolder::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_balance_platform_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_capabilities.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_contact_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_legal_entity_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_migrated_account_holder_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary_balance_account_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_zone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_verification_deadlines.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAccountHolder::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && m_legal_entity_id_isValid && true;
}

} // namespace OpenAPI
