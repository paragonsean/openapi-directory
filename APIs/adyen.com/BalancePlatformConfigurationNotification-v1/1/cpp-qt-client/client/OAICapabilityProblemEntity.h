/**
 * Configuration webhooks
 * Adyen sends webhooks to inform your system about events that occur in your platform. These events include, for example, when an account holder's capabilities are updated, or when a sweep configuration is created or updated.  When an event occurs, Adyen makes an HTTP POST request to a URL on your server and includes the details of the event in the request body.  You can use these webhooks to build your implementation. For example, you can use this information to update internal statuses when the status of a capability is changed.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICapabilityProblemEntity.h
 *
 * 
 */

#ifndef OAICapabilityProblemEntity_H
#define OAICapabilityProblemEntity_H

#include <QJsonObject>

#include "OAICapabilityProblemEntity_recursive.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAICapabilityProblemEntity_recursive;

class OAICapabilityProblemEntity : public OAIObject {
public:
    OAICapabilityProblemEntity();
    OAICapabilityProblemEntity(QString json);
    ~OAICapabilityProblemEntity() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<QString> getDocuments() const;
    void setDocuments(const QList<QString> &documents);
    bool is_documents_Set() const;
    bool is_documents_Valid() const;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    OAICapabilityProblemEntity_recursive getOwner() const;
    void setOwner(const OAICapabilityProblemEntity_recursive &owner);
    bool is_owner_Set() const;
    bool is_owner_Valid() const;

    QString getType() const;
    void setType(const QString &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<QString> m_documents;
    bool m_documents_isSet;
    bool m_documents_isValid;

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    OAICapabilityProblemEntity_recursive m_owner;
    bool m_owner_isSet;
    bool m_owner_isValid;

    QString m_type;
    bool m_type_isSet;
    bool m_type_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICapabilityProblemEntity)

#endif // OAICapabilityProblemEntity_H
