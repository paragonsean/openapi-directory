/**
 * Configuration webhooks
 * Adyen sends webhooks to inform your system about events that occur in your platform. These events include, for example, when an account holder's capabilities are updated, or when a sweep configuration is created or updated.  When an event occurs, Adyen makes an HTTP POST request to a URL on your server and includes the details of the event in the request body.  You can use these webhooks to build your implementation. For example, you can use this information to update internal statuses when the status of a capability is changed.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAICardOrderApi_H
#define OAI_OAICardOrderApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIBalancePlatformNotificationResponse.h"
#include "OAICardOrderNotificationRequest.h"

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAICardOrderApi : public QObject {
    Q_OBJECT

public:
    OAICardOrderApi(const int timeOut = 0);
    ~OAICardOrderApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_card_order_notification_request OAICardOrderNotificationRequest [optional]
    */
    virtual void postBalancePlatform_cardorder_created(const ::OpenAPI::OptionalParam<OAICardOrderNotificationRequest> &oai_card_order_notification_request = ::OpenAPI::OptionalParam<OAICardOrderNotificationRequest>());

    /**
    * @param[in]  oai_card_order_notification_request OAICardOrderNotificationRequest [optional]
    */
    virtual void postBalancePlatform_cardorder_updated(const ::OpenAPI::OptionalParam<OAICardOrderNotificationRequest> &oai_card_order_notification_request = ::OpenAPI::OptionalParam<OAICardOrderNotificationRequest>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void postBalancePlatform_cardorder_createdCallback(OAIHttpRequestWorker *worker);
    void postBalancePlatform_cardorder_updatedCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void postBalancePlatform_cardorder_createdSignal(OAIBalancePlatformNotificationResponse summary);
    void postBalancePlatform_cardorder_updatedSignal(OAIBalancePlatformNotificationResponse summary);


    void postBalancePlatform_cardorder_createdSignalFull(OAIHttpRequestWorker *worker, OAIBalancePlatformNotificationResponse summary);
    void postBalancePlatform_cardorder_updatedSignalFull(OAIHttpRequestWorker *worker, OAIBalancePlatformNotificationResponse summary);

    Q_DECL_DEPRECATED_X("Use postBalancePlatform_cardorder_createdSignalError() instead")
    void postBalancePlatform_cardorder_createdSignalE(OAIBalancePlatformNotificationResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postBalancePlatform_cardorder_createdSignalError(OAIBalancePlatformNotificationResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postBalancePlatform_cardorder_updatedSignalError() instead")
    void postBalancePlatform_cardorder_updatedSignalE(OAIBalancePlatformNotificationResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postBalancePlatform_cardorder_updatedSignalError(OAIBalancePlatformNotificationResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use postBalancePlatform_cardorder_createdSignalErrorFull() instead")
    void postBalancePlatform_cardorder_createdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postBalancePlatform_cardorder_createdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postBalancePlatform_cardorder_updatedSignalErrorFull() instead")
    void postBalancePlatform_cardorder_updatedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postBalancePlatform_cardorder_updatedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
