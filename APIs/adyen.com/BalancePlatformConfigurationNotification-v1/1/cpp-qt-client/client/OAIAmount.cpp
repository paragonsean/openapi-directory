/**
 * Configuration webhooks
 * Adyen sends webhooks to inform your system about events that occur in your platform. These events include, for example, when an account holder's capabilities are updated, or when a sweep configuration is created or updated.  When an event occurs, Adyen makes an HTTP POST request to a URL on your server and includes the details of the event in the request body.  You can use these webhooks to build your implementation. For example, you can use this information to update internal statuses when the status of a capability is changed.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAmount.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAmount::OAIAmount(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAmount::OAIAmount() {
    this->initializeModel();
}

OAIAmount::~OAIAmount() {}

void OAIAmount::initializeModel() {

    m_currency_isSet = false;
    m_currency_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAIAmount::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAmount::fromJsonObject(QJsonObject json) {

    m_currency_isValid = ::OpenAPI::fromJsonValue(m_currency, json[QString("currency")]);
    m_currency_isSet = !json[QString("currency")].isNull() && m_currency_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;
}

QString OAIAmount::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAmount::asJsonObject() const {
    QJsonObject obj;
    if (m_currency_isSet) {
        obj.insert(QString("currency"), ::OpenAPI::toJsonValue(m_currency));
    }
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

QString OAIAmount::getCurrency() const {
    return m_currency;
}
void OAIAmount::setCurrency(const QString &currency) {
    m_currency = currency;
    m_currency_isSet = true;
}

bool OAIAmount::is_currency_Set() const{
    return m_currency_isSet;
}

bool OAIAmount::is_currency_Valid() const{
    return m_currency_isValid;
}

qint64 OAIAmount::getValue() const {
    return m_value;
}
void OAIAmount::setValue(const qint64 &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIAmount::is_value_Set() const{
    return m_value_isSet;
}

bool OAIAmount::is_value_Valid() const{
    return m_value_isValid;
}

bool OAIAmount::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAmount::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_currency_isValid && m_value_isValid && true;
}

} // namespace OpenAPI
