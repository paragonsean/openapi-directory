/**
 * Configuration webhooks
 * Adyen sends webhooks to inform your system about events that occur in your platform. These events include, for example, when an account holder's capabilities are updated, or when a sweep configuration is created or updated.  When an event occurs, Adyen makes an HTTP POST request to a URL on your server and includes the details of the event in the request body.  You can use these webhooks to build your implementation. For example, you can use this information to update internal statuses when the status of a capability is changed.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExpiry.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExpiry::OAIExpiry(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExpiry::OAIExpiry() {
    this->initializeModel();
}

OAIExpiry::~OAIExpiry() {}

void OAIExpiry::initializeModel() {

    m_month_isSet = false;
    m_month_isValid = false;

    m_year_isSet = false;
    m_year_isValid = false;
}

void OAIExpiry::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExpiry::fromJsonObject(QJsonObject json) {

    m_month_isValid = ::OpenAPI::fromJsonValue(m_month, json[QString("month")]);
    m_month_isSet = !json[QString("month")].isNull() && m_month_isValid;

    m_year_isValid = ::OpenAPI::fromJsonValue(m_year, json[QString("year")]);
    m_year_isSet = !json[QString("year")].isNull() && m_year_isValid;
}

QString OAIExpiry::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExpiry::asJsonObject() const {
    QJsonObject obj;
    if (m_month_isSet) {
        obj.insert(QString("month"), ::OpenAPI::toJsonValue(m_month));
    }
    if (m_year_isSet) {
        obj.insert(QString("year"), ::OpenAPI::toJsonValue(m_year));
    }
    return obj;
}

QString OAIExpiry::getMonth() const {
    return m_month;
}
void OAIExpiry::setMonth(const QString &month) {
    m_month = month;
    m_month_isSet = true;
}

bool OAIExpiry::is_month_Set() const{
    return m_month_isSet;
}

bool OAIExpiry::is_month_Valid() const{
    return m_month_isValid;
}

QString OAIExpiry::getYear() const {
    return m_year;
}
void OAIExpiry::setYear(const QString &year) {
    m_year = year;
    m_year_isSet = true;
}

bool OAIExpiry::is_year_Set() const{
    return m_year_isSet;
}

bool OAIExpiry::is_year_Valid() const{
    return m_year_isValid;
}

bool OAIExpiry::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_month_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_year_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExpiry::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
