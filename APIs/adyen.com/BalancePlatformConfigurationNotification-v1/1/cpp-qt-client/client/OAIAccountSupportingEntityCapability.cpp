/**
 * Configuration webhooks
 * Adyen sends webhooks to inform your system about events that occur in your platform. These events include, for example, when an account holder's capabilities are updated, or when a sweep configuration is created or updated.  When an event occurs, Adyen makes an HTTP POST request to a URL on your server and includes the details of the event in the request body.  You can use these webhooks to build your implementation. For example, you can use this information to update internal statuses when the status of a capability is changed.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAccountSupportingEntityCapability.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAccountSupportingEntityCapability::OAIAccountSupportingEntityCapability(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAccountSupportingEntityCapability::OAIAccountSupportingEntityCapability() {
    this->initializeModel();
}

OAIAccountSupportingEntityCapability::~OAIAccountSupportingEntityCapability() {}

void OAIAccountSupportingEntityCapability::initializeModel() {

    m_allowed_isSet = false;
    m_allowed_isValid = false;

    m_allowed_level_isSet = false;
    m_allowed_level_isValid = false;

    m_enabled_isSet = false;
    m_enabled_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_requested_isSet = false;
    m_requested_isValid = false;

    m_requested_level_isSet = false;
    m_requested_level_isValid = false;

    m_verification_status_isSet = false;
    m_verification_status_isValid = false;
}

void OAIAccountSupportingEntityCapability::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAccountSupportingEntityCapability::fromJsonObject(QJsonObject json) {

    m_allowed_isValid = ::OpenAPI::fromJsonValue(m_allowed, json[QString("allowed")]);
    m_allowed_isSet = !json[QString("allowed")].isNull() && m_allowed_isValid;

    m_allowed_level_isValid = ::OpenAPI::fromJsonValue(m_allowed_level, json[QString("allowedLevel")]);
    m_allowed_level_isSet = !json[QString("allowedLevel")].isNull() && m_allowed_level_isValid;

    m_enabled_isValid = ::OpenAPI::fromJsonValue(m_enabled, json[QString("enabled")]);
    m_enabled_isSet = !json[QString("enabled")].isNull() && m_enabled_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_requested_isValid = ::OpenAPI::fromJsonValue(m_requested, json[QString("requested")]);
    m_requested_isSet = !json[QString("requested")].isNull() && m_requested_isValid;

    m_requested_level_isValid = ::OpenAPI::fromJsonValue(m_requested_level, json[QString("requestedLevel")]);
    m_requested_level_isSet = !json[QString("requestedLevel")].isNull() && m_requested_level_isValid;

    m_verification_status_isValid = ::OpenAPI::fromJsonValue(m_verification_status, json[QString("verificationStatus")]);
    m_verification_status_isSet = !json[QString("verificationStatus")].isNull() && m_verification_status_isValid;
}

QString OAIAccountSupportingEntityCapability::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAccountSupportingEntityCapability::asJsonObject() const {
    QJsonObject obj;
    if (m_allowed_isSet) {
        obj.insert(QString("allowed"), ::OpenAPI::toJsonValue(m_allowed));
    }
    if (m_allowed_level_isSet) {
        obj.insert(QString("allowedLevel"), ::OpenAPI::toJsonValue(m_allowed_level));
    }
    if (m_enabled_isSet) {
        obj.insert(QString("enabled"), ::OpenAPI::toJsonValue(m_enabled));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_requested_isSet) {
        obj.insert(QString("requested"), ::OpenAPI::toJsonValue(m_requested));
    }
    if (m_requested_level_isSet) {
        obj.insert(QString("requestedLevel"), ::OpenAPI::toJsonValue(m_requested_level));
    }
    if (m_verification_status_isSet) {
        obj.insert(QString("verificationStatus"), ::OpenAPI::toJsonValue(m_verification_status));
    }
    return obj;
}

bool OAIAccountSupportingEntityCapability::isAllowed() const {
    return m_allowed;
}
void OAIAccountSupportingEntityCapability::setAllowed(const bool &allowed) {
    m_allowed = allowed;
    m_allowed_isSet = true;
}

bool OAIAccountSupportingEntityCapability::is_allowed_Set() const{
    return m_allowed_isSet;
}

bool OAIAccountSupportingEntityCapability::is_allowed_Valid() const{
    return m_allowed_isValid;
}

QString OAIAccountSupportingEntityCapability::getAllowedLevel() const {
    return m_allowed_level;
}
void OAIAccountSupportingEntityCapability::setAllowedLevel(const QString &allowed_level) {
    m_allowed_level = allowed_level;
    m_allowed_level_isSet = true;
}

bool OAIAccountSupportingEntityCapability::is_allowed_level_Set() const{
    return m_allowed_level_isSet;
}

bool OAIAccountSupportingEntityCapability::is_allowed_level_Valid() const{
    return m_allowed_level_isValid;
}

bool OAIAccountSupportingEntityCapability::isEnabled() const {
    return m_enabled;
}
void OAIAccountSupportingEntityCapability::setEnabled(const bool &enabled) {
    m_enabled = enabled;
    m_enabled_isSet = true;
}

bool OAIAccountSupportingEntityCapability::is_enabled_Set() const{
    return m_enabled_isSet;
}

bool OAIAccountSupportingEntityCapability::is_enabled_Valid() const{
    return m_enabled_isValid;
}

QString OAIAccountSupportingEntityCapability::getId() const {
    return m_id;
}
void OAIAccountSupportingEntityCapability::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIAccountSupportingEntityCapability::is_id_Set() const{
    return m_id_isSet;
}

bool OAIAccountSupportingEntityCapability::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIAccountSupportingEntityCapability::isRequested() const {
    return m_requested;
}
void OAIAccountSupportingEntityCapability::setRequested(const bool &requested) {
    m_requested = requested;
    m_requested_isSet = true;
}

bool OAIAccountSupportingEntityCapability::is_requested_Set() const{
    return m_requested_isSet;
}

bool OAIAccountSupportingEntityCapability::is_requested_Valid() const{
    return m_requested_isValid;
}

QString OAIAccountSupportingEntityCapability::getRequestedLevel() const {
    return m_requested_level;
}
void OAIAccountSupportingEntityCapability::setRequestedLevel(const QString &requested_level) {
    m_requested_level = requested_level;
    m_requested_level_isSet = true;
}

bool OAIAccountSupportingEntityCapability::is_requested_level_Set() const{
    return m_requested_level_isSet;
}

bool OAIAccountSupportingEntityCapability::is_requested_level_Valid() const{
    return m_requested_level_isValid;
}

QString OAIAccountSupportingEntityCapability::getVerificationStatus() const {
    return m_verification_status;
}
void OAIAccountSupportingEntityCapability::setVerificationStatus(const QString &verification_status) {
    m_verification_status = verification_status;
    m_verification_status_isSet = true;
}

bool OAIAccountSupportingEntityCapability::is_verification_status_Set() const{
    return m_verification_status_isSet;
}

bool OAIAccountSupportingEntityCapability::is_verification_status_Valid() const{
    return m_verification_status_isValid;
}

bool OAIAccountSupportingEntityCapability::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allowed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_allowed_level_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_requested_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_requested_level_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_verification_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAccountSupportingEntityCapability::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
