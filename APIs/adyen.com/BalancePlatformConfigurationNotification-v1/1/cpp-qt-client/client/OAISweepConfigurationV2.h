/**
 * Configuration webhooks
 * Adyen sends webhooks to inform your system about events that occur in your platform. These events include, for example, when an account holder's capabilities are updated, or when a sweep configuration is created or updated.  When an event occurs, Adyen makes an HTTP POST request to a URL on your server and includes the details of the event in the request body.  You can use these webhooks to build your implementation. For example, you can use this information to update internal statuses when the status of a capability is changed.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAISweepConfigurationV2.h
 *
 * 
 */

#ifndef OAISweepConfigurationV2_H
#define OAISweepConfigurationV2_H

#include <QJsonObject>

#include "OAIAmount.h"
#include "OAISweepCounterparty.h"
#include "OAISweepSchedule.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAISweepCounterparty;
class OAISweepSchedule;
class OAIAmount;

class OAISweepConfigurationV2 : public OAIObject {
public:
    OAISweepConfigurationV2();
    OAISweepConfigurationV2(QString json);
    ~OAISweepConfigurationV2() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAISweepCounterparty getCounterparty() const;
    void setCounterparty(const OAISweepCounterparty &counterparty);
    bool is_counterparty_Set() const;
    bool is_counterparty_Valid() const;

    QString getCurrency() const;
    void setCurrency(const QString &currency);
    bool is_currency_Set() const;
    bool is_currency_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    QString getReason() const;
    void setReason(const QString &reason);
    bool is_reason_Set() const;
    bool is_reason_Valid() const;

    OAISweepSchedule getSchedule() const;
    void setSchedule(const OAISweepSchedule &schedule);
    bool is_schedule_Set() const;
    bool is_schedule_Valid() const;

    QString getStatus() const;
    void setStatus(const QString &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    OAIAmount getSweepAmount() const;
    void setSweepAmount(const OAIAmount &sweep_amount);
    bool is_sweep_amount_Set() const;
    bool is_sweep_amount_Valid() const;

    OAIAmount getTargetAmount() const;
    void setTargetAmount(const OAIAmount &target_amount);
    bool is_target_amount_Set() const;
    bool is_target_amount_Valid() const;

    OAIAmount getTriggerAmount() const;
    void setTriggerAmount(const OAIAmount &trigger_amount);
    bool is_trigger_amount_Set() const;
    bool is_trigger_amount_Valid() const;

    QString getType() const;
    void setType(const QString &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAISweepCounterparty m_counterparty;
    bool m_counterparty_isSet;
    bool m_counterparty_isValid;

    QString m_currency;
    bool m_currency_isSet;
    bool m_currency_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    QString m_reason;
    bool m_reason_isSet;
    bool m_reason_isValid;

    OAISweepSchedule m_schedule;
    bool m_schedule_isSet;
    bool m_schedule_isValid;

    QString m_status;
    bool m_status_isSet;
    bool m_status_isValid;

    OAIAmount m_sweep_amount;
    bool m_sweep_amount_isSet;
    bool m_sweep_amount_isValid;

    OAIAmount m_target_amount;
    bool m_target_amount_isSet;
    bool m_target_amount_isValid;

    OAIAmount m_trigger_amount;
    bool m_trigger_amount_isSet;
    bool m_trigger_amount_isValid;

    QString m_type;
    bool m_type_isSet;
    bool m_type_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAISweepConfigurationV2)

#endif // OAISweepConfigurationV2_H
