/**
 * Configuration webhooks
 * Adyen sends webhooks to inform your system about events that occur in your platform. These events include, for example, when an account holder's capabilities are updated, or when a sweep configuration is created or updated.  When an event occurs, Adyen makes an HTTP POST request to a URL on your server and includes the details of the event in the request body.  You can use these webhooks to build your implementation. For example, you can use this information to update internal statuses when the status of a capability is changed.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPaymentInstrument.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPaymentInstrument::OAIPaymentInstrument(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPaymentInstrument::OAIPaymentInstrument() {
    this->initializeModel();
}

OAIPaymentInstrument::~OAIPaymentInstrument() {}

void OAIPaymentInstrument::initializeModel() {

    m_balance_account_id_isSet = false;
    m_balance_account_id_isValid = false;

    m_bank_account_isSet = false;
    m_bank_account_isValid = false;

    m_card_isSet = false;
    m_card_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_issuing_country_code_isSet = false;
    m_issuing_country_code_isValid = false;

    m_payment_instrument_group_id_isSet = false;
    m_payment_instrument_group_id_isValid = false;

    m_reference_isSet = false;
    m_reference_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIPaymentInstrument::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPaymentInstrument::fromJsonObject(QJsonObject json) {

    m_balance_account_id_isValid = ::OpenAPI::fromJsonValue(m_balance_account_id, json[QString("balanceAccountId")]);
    m_balance_account_id_isSet = !json[QString("balanceAccountId")].isNull() && m_balance_account_id_isValid;

    m_bank_account_isValid = ::OpenAPI::fromJsonValue(m_bank_account, json[QString("bankAccount")]);
    m_bank_account_isSet = !json[QString("bankAccount")].isNull() && m_bank_account_isValid;

    m_card_isValid = ::OpenAPI::fromJsonValue(m_card, json[QString("card")]);
    m_card_isSet = !json[QString("card")].isNull() && m_card_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_issuing_country_code_isValid = ::OpenAPI::fromJsonValue(m_issuing_country_code, json[QString("issuingCountryCode")]);
    m_issuing_country_code_isSet = !json[QString("issuingCountryCode")].isNull() && m_issuing_country_code_isValid;

    m_payment_instrument_group_id_isValid = ::OpenAPI::fromJsonValue(m_payment_instrument_group_id, json[QString("paymentInstrumentGroupId")]);
    m_payment_instrument_group_id_isSet = !json[QString("paymentInstrumentGroupId")].isNull() && m_payment_instrument_group_id_isValid;

    m_reference_isValid = ::OpenAPI::fromJsonValue(m_reference, json[QString("reference")]);
    m_reference_isSet = !json[QString("reference")].isNull() && m_reference_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIPaymentInstrument::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPaymentInstrument::asJsonObject() const {
    QJsonObject obj;
    if (m_balance_account_id_isSet) {
        obj.insert(QString("balanceAccountId"), ::OpenAPI::toJsonValue(m_balance_account_id));
    }
    if (m_bank_account.isSet()) {
        obj.insert(QString("bankAccount"), ::OpenAPI::toJsonValue(m_bank_account));
    }
    if (m_card.isSet()) {
        obj.insert(QString("card"), ::OpenAPI::toJsonValue(m_card));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_issuing_country_code_isSet) {
        obj.insert(QString("issuingCountryCode"), ::OpenAPI::toJsonValue(m_issuing_country_code));
    }
    if (m_payment_instrument_group_id_isSet) {
        obj.insert(QString("paymentInstrumentGroupId"), ::OpenAPI::toJsonValue(m_payment_instrument_group_id));
    }
    if (m_reference_isSet) {
        obj.insert(QString("reference"), ::OpenAPI::toJsonValue(m_reference));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIPaymentInstrument::getBalanceAccountId() const {
    return m_balance_account_id;
}
void OAIPaymentInstrument::setBalanceAccountId(const QString &balance_account_id) {
    m_balance_account_id = balance_account_id;
    m_balance_account_id_isSet = true;
}

bool OAIPaymentInstrument::is_balance_account_id_Set() const{
    return m_balance_account_id_isSet;
}

bool OAIPaymentInstrument::is_balance_account_id_Valid() const{
    return m_balance_account_id_isValid;
}

OAIPaymentInstrument_bankAccount OAIPaymentInstrument::getBankAccount() const {
    return m_bank_account;
}
void OAIPaymentInstrument::setBankAccount(const OAIPaymentInstrument_bankAccount &bank_account) {
    m_bank_account = bank_account;
    m_bank_account_isSet = true;
}

bool OAIPaymentInstrument::is_bank_account_Set() const{
    return m_bank_account_isSet;
}

bool OAIPaymentInstrument::is_bank_account_Valid() const{
    return m_bank_account_isValid;
}

OAICard OAIPaymentInstrument::getCard() const {
    return m_card;
}
void OAIPaymentInstrument::setCard(const OAICard &card) {
    m_card = card;
    m_card_isSet = true;
}

bool OAIPaymentInstrument::is_card_Set() const{
    return m_card_isSet;
}

bool OAIPaymentInstrument::is_card_Valid() const{
    return m_card_isValid;
}

QString OAIPaymentInstrument::getDescription() const {
    return m_description;
}
void OAIPaymentInstrument::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIPaymentInstrument::is_description_Set() const{
    return m_description_isSet;
}

bool OAIPaymentInstrument::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIPaymentInstrument::getId() const {
    return m_id;
}
void OAIPaymentInstrument::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIPaymentInstrument::is_id_Set() const{
    return m_id_isSet;
}

bool OAIPaymentInstrument::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIPaymentInstrument::getIssuingCountryCode() const {
    return m_issuing_country_code;
}
void OAIPaymentInstrument::setIssuingCountryCode(const QString &issuing_country_code) {
    m_issuing_country_code = issuing_country_code;
    m_issuing_country_code_isSet = true;
}

bool OAIPaymentInstrument::is_issuing_country_code_Set() const{
    return m_issuing_country_code_isSet;
}

bool OAIPaymentInstrument::is_issuing_country_code_Valid() const{
    return m_issuing_country_code_isValid;
}

QString OAIPaymentInstrument::getPaymentInstrumentGroupId() const {
    return m_payment_instrument_group_id;
}
void OAIPaymentInstrument::setPaymentInstrumentGroupId(const QString &payment_instrument_group_id) {
    m_payment_instrument_group_id = payment_instrument_group_id;
    m_payment_instrument_group_id_isSet = true;
}

bool OAIPaymentInstrument::is_payment_instrument_group_id_Set() const{
    return m_payment_instrument_group_id_isSet;
}

bool OAIPaymentInstrument::is_payment_instrument_group_id_Valid() const{
    return m_payment_instrument_group_id_isValid;
}

QString OAIPaymentInstrument::getReference() const {
    return m_reference;
}
void OAIPaymentInstrument::setReference(const QString &reference) {
    m_reference = reference;
    m_reference_isSet = true;
}

bool OAIPaymentInstrument::is_reference_Set() const{
    return m_reference_isSet;
}

bool OAIPaymentInstrument::is_reference_Valid() const{
    return m_reference_isValid;
}

QString OAIPaymentInstrument::getStatus() const {
    return m_status;
}
void OAIPaymentInstrument::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIPaymentInstrument::is_status_Set() const{
    return m_status_isSet;
}

bool OAIPaymentInstrument::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIPaymentInstrument::getType() const {
    return m_type;
}
void OAIPaymentInstrument::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIPaymentInstrument::is_type_Set() const{
    return m_type_isSet;
}

bool OAIPaymentInstrument::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIPaymentInstrument::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_balance_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bank_account.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_card.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_issuing_country_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_instrument_group_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPaymentInstrument::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_balance_account_id_isValid && m_id_isValid && m_issuing_country_code_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
