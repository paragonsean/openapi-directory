/**
 * Configuration webhooks
 * Adyen sends webhooks to inform your system about events that occur in your platform. These events include, for example, when an account holder's capabilities are updated, or when a sweep configuration is created or updated.  When an event occurs, Adyen makes an HTTP POST request to a URL on your server and includes the details of the event in the request body.  You can use these webhooks to build your implementation. For example, you can use this information to update internal statuses when the status of a capability is changed.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICard.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICard::OAICard(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICard::OAICard() {
    this->initializeModel();
}

OAICard::~OAICard() {}

void OAICard::initializeModel() {

    m_authentication_isSet = false;
    m_authentication_isValid = false;

    m_bin_isSet = false;
    m_bin_isValid = false;

    m_brand_isSet = false;
    m_brand_isValid = false;

    m_brand_variant_isSet = false;
    m_brand_variant_isValid = false;

    m_cardholder_name_isSet = false;
    m_cardholder_name_isValid = false;

    m_configuration_isSet = false;
    m_configuration_isValid = false;

    m_cvc_isSet = false;
    m_cvc_isValid = false;

    m_delivery_contact_isSet = false;
    m_delivery_contact_isValid = false;

    m_expiration_isSet = false;
    m_expiration_isValid = false;

    m_form_factor_isSet = false;
    m_form_factor_isValid = false;

    m_last_four_isSet = false;
    m_last_four_isValid = false;

    m_number_isSet = false;
    m_number_isValid = false;

    m_three_d_secure_isSet = false;
    m_three_d_secure_isValid = false;
}

void OAICard::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICard::fromJsonObject(QJsonObject json) {

    m_authentication_isValid = ::OpenAPI::fromJsonValue(m_authentication, json[QString("authentication")]);
    m_authentication_isSet = !json[QString("authentication")].isNull() && m_authentication_isValid;

    m_bin_isValid = ::OpenAPI::fromJsonValue(m_bin, json[QString("bin")]);
    m_bin_isSet = !json[QString("bin")].isNull() && m_bin_isValid;

    m_brand_isValid = ::OpenAPI::fromJsonValue(m_brand, json[QString("brand")]);
    m_brand_isSet = !json[QString("brand")].isNull() && m_brand_isValid;

    m_brand_variant_isValid = ::OpenAPI::fromJsonValue(m_brand_variant, json[QString("brandVariant")]);
    m_brand_variant_isSet = !json[QString("brandVariant")].isNull() && m_brand_variant_isValid;

    m_cardholder_name_isValid = ::OpenAPI::fromJsonValue(m_cardholder_name, json[QString("cardholderName")]);
    m_cardholder_name_isSet = !json[QString("cardholderName")].isNull() && m_cardholder_name_isValid;

    m_configuration_isValid = ::OpenAPI::fromJsonValue(m_configuration, json[QString("configuration")]);
    m_configuration_isSet = !json[QString("configuration")].isNull() && m_configuration_isValid;

    m_cvc_isValid = ::OpenAPI::fromJsonValue(m_cvc, json[QString("cvc")]);
    m_cvc_isSet = !json[QString("cvc")].isNull() && m_cvc_isValid;

    m_delivery_contact_isValid = ::OpenAPI::fromJsonValue(m_delivery_contact, json[QString("deliveryContact")]);
    m_delivery_contact_isSet = !json[QString("deliveryContact")].isNull() && m_delivery_contact_isValid;

    m_expiration_isValid = ::OpenAPI::fromJsonValue(m_expiration, json[QString("expiration")]);
    m_expiration_isSet = !json[QString("expiration")].isNull() && m_expiration_isValid;

    m_form_factor_isValid = ::OpenAPI::fromJsonValue(m_form_factor, json[QString("formFactor")]);
    m_form_factor_isSet = !json[QString("formFactor")].isNull() && m_form_factor_isValid;

    m_last_four_isValid = ::OpenAPI::fromJsonValue(m_last_four, json[QString("lastFour")]);
    m_last_four_isSet = !json[QString("lastFour")].isNull() && m_last_four_isValid;

    m_number_isValid = ::OpenAPI::fromJsonValue(m_number, json[QString("number")]);
    m_number_isSet = !json[QString("number")].isNull() && m_number_isValid;

    m_three_d_secure_isValid = ::OpenAPI::fromJsonValue(m_three_d_secure, json[QString("threeDSecure")]);
    m_three_d_secure_isSet = !json[QString("threeDSecure")].isNull() && m_three_d_secure_isValid;
}

QString OAICard::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICard::asJsonObject() const {
    QJsonObject obj;
    if (m_authentication.isSet()) {
        obj.insert(QString("authentication"), ::OpenAPI::toJsonValue(m_authentication));
    }
    if (m_bin_isSet) {
        obj.insert(QString("bin"), ::OpenAPI::toJsonValue(m_bin));
    }
    if (m_brand_isSet) {
        obj.insert(QString("brand"), ::OpenAPI::toJsonValue(m_brand));
    }
    if (m_brand_variant_isSet) {
        obj.insert(QString("brandVariant"), ::OpenAPI::toJsonValue(m_brand_variant));
    }
    if (m_cardholder_name_isSet) {
        obj.insert(QString("cardholderName"), ::OpenAPI::toJsonValue(m_cardholder_name));
    }
    if (m_configuration.isSet()) {
        obj.insert(QString("configuration"), ::OpenAPI::toJsonValue(m_configuration));
    }
    if (m_cvc_isSet) {
        obj.insert(QString("cvc"), ::OpenAPI::toJsonValue(m_cvc));
    }
    if (m_delivery_contact.isSet()) {
        obj.insert(QString("deliveryContact"), ::OpenAPI::toJsonValue(m_delivery_contact));
    }
    if (m_expiration.isSet()) {
        obj.insert(QString("expiration"), ::OpenAPI::toJsonValue(m_expiration));
    }
    if (m_form_factor_isSet) {
        obj.insert(QString("formFactor"), ::OpenAPI::toJsonValue(m_form_factor));
    }
    if (m_last_four_isSet) {
        obj.insert(QString("lastFour"), ::OpenAPI::toJsonValue(m_last_four));
    }
    if (m_number_isSet) {
        obj.insert(QString("number"), ::OpenAPI::toJsonValue(m_number));
    }
    if (m_three_d_secure_isSet) {
        obj.insert(QString("threeDSecure"), ::OpenAPI::toJsonValue(m_three_d_secure));
    }
    return obj;
}

OAIAuthentication OAICard::getAuthentication() const {
    return m_authentication;
}
void OAICard::setAuthentication(const OAIAuthentication &authentication) {
    m_authentication = authentication;
    m_authentication_isSet = true;
}

bool OAICard::is_authentication_Set() const{
    return m_authentication_isSet;
}

bool OAICard::is_authentication_Valid() const{
    return m_authentication_isValid;
}

QString OAICard::getBin() const {
    return m_bin;
}
void OAICard::setBin(const QString &bin) {
    m_bin = bin;
    m_bin_isSet = true;
}

bool OAICard::is_bin_Set() const{
    return m_bin_isSet;
}

bool OAICard::is_bin_Valid() const{
    return m_bin_isValid;
}

QString OAICard::getBrand() const {
    return m_brand;
}
void OAICard::setBrand(const QString &brand) {
    m_brand = brand;
    m_brand_isSet = true;
}

bool OAICard::is_brand_Set() const{
    return m_brand_isSet;
}

bool OAICard::is_brand_Valid() const{
    return m_brand_isValid;
}

QString OAICard::getBrandVariant() const {
    return m_brand_variant;
}
void OAICard::setBrandVariant(const QString &brand_variant) {
    m_brand_variant = brand_variant;
    m_brand_variant_isSet = true;
}

bool OAICard::is_brand_variant_Set() const{
    return m_brand_variant_isSet;
}

bool OAICard::is_brand_variant_Valid() const{
    return m_brand_variant_isValid;
}

QString OAICard::getCardholderName() const {
    return m_cardholder_name;
}
void OAICard::setCardholderName(const QString &cardholder_name) {
    m_cardholder_name = cardholder_name;
    m_cardholder_name_isSet = true;
}

bool OAICard::is_cardholder_name_Set() const{
    return m_cardholder_name_isSet;
}

bool OAICard::is_cardholder_name_Valid() const{
    return m_cardholder_name_isValid;
}

OAICardConfiguration OAICard::getConfiguration() const {
    return m_configuration;
}
void OAICard::setConfiguration(const OAICardConfiguration &configuration) {
    m_configuration = configuration;
    m_configuration_isSet = true;
}

bool OAICard::is_configuration_Set() const{
    return m_configuration_isSet;
}

bool OAICard::is_configuration_Valid() const{
    return m_configuration_isValid;
}

QString OAICard::getCvc() const {
    return m_cvc;
}
void OAICard::setCvc(const QString &cvc) {
    m_cvc = cvc;
    m_cvc_isSet = true;
}

bool OAICard::is_cvc_Set() const{
    return m_cvc_isSet;
}

bool OAICard::is_cvc_Valid() const{
    return m_cvc_isValid;
}

OAIContact OAICard::getDeliveryContact() const {
    return m_delivery_contact;
}
void OAICard::setDeliveryContact(const OAIContact &delivery_contact) {
    m_delivery_contact = delivery_contact;
    m_delivery_contact_isSet = true;
}

bool OAICard::is_delivery_contact_Set() const{
    return m_delivery_contact_isSet;
}

bool OAICard::is_delivery_contact_Valid() const{
    return m_delivery_contact_isValid;
}

OAIExpiry OAICard::getExpiration() const {
    return m_expiration;
}
void OAICard::setExpiration(const OAIExpiry &expiration) {
    m_expiration = expiration;
    m_expiration_isSet = true;
}

bool OAICard::is_expiration_Set() const{
    return m_expiration_isSet;
}

bool OAICard::is_expiration_Valid() const{
    return m_expiration_isValid;
}

QString OAICard::getFormFactor() const {
    return m_form_factor;
}
void OAICard::setFormFactor(const QString &form_factor) {
    m_form_factor = form_factor;
    m_form_factor_isSet = true;
}

bool OAICard::is_form_factor_Set() const{
    return m_form_factor_isSet;
}

bool OAICard::is_form_factor_Valid() const{
    return m_form_factor_isValid;
}

QString OAICard::getLastFour() const {
    return m_last_four;
}
void OAICard::setLastFour(const QString &last_four) {
    m_last_four = last_four;
    m_last_four_isSet = true;
}

bool OAICard::is_last_four_Set() const{
    return m_last_four_isSet;
}

bool OAICard::is_last_four_Valid() const{
    return m_last_four_isValid;
}

QString OAICard::getNumber() const {
    return m_number;
}
void OAICard::setNumber(const QString &number) {
    m_number = number;
    m_number_isSet = true;
}

bool OAICard::is_number_Set() const{
    return m_number_isSet;
}

bool OAICard::is_number_Valid() const{
    return m_number_isValid;
}

QString OAICard::getThreeDSecure() const {
    return m_three_d_secure;
}
void OAICard::setThreeDSecure(const QString &three_d_secure) {
    m_three_d_secure = three_d_secure;
    m_three_d_secure_isSet = true;
}

bool OAICard::is_three_d_secure_Set() const{
    return m_three_d_secure_isSet;
}

bool OAICard::is_three_d_secure_Valid() const{
    return m_three_d_secure_isValid;
}

bool OAICard::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_authentication.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_bin_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_brand_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_brand_variant_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cardholder_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cvc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_delivery_contact.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_expiration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_form_factor_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_four_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_three_d_secure_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICard::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_brand_isValid && m_brand_variant_isValid && m_cardholder_name_isValid && m_form_factor_isValid && m_number_isValid && true;
}

} // namespace OpenAPI
