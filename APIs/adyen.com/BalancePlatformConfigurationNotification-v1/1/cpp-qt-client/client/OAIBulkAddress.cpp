/**
 * Configuration webhooks
 * Adyen sends webhooks to inform your system about events that occur in your platform. These events include, for example, when an account holder's capabilities are updated, or when a sweep configuration is created or updated.  When an event occurs, Adyen makes an HTTP POST request to a URL on your server and includes the details of the event in the request body.  You can use these webhooks to build your implementation. For example, you can use this information to update internal statuses when the status of a capability is changed.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBulkAddress.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBulkAddress::OAIBulkAddress(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBulkAddress::OAIBulkAddress() {
    this->initializeModel();
}

OAIBulkAddress::~OAIBulkAddress() {}

void OAIBulkAddress::initializeModel() {

    m_city_isSet = false;
    m_city_isValid = false;

    m_company_isSet = false;
    m_company_isValid = false;

    m_country_isSet = false;
    m_country_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_house_number_or_name_isSet = false;
    m_house_number_or_name_isValid = false;

    m_mobile_isSet = false;
    m_mobile_isValid = false;

    m_postal_code_isSet = false;
    m_postal_code_isValid = false;

    m_state_or_province_isSet = false;
    m_state_or_province_isValid = false;

    m_street_isSet = false;
    m_street_isValid = false;
}

void OAIBulkAddress::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBulkAddress::fromJsonObject(QJsonObject json) {

    m_city_isValid = ::OpenAPI::fromJsonValue(m_city, json[QString("city")]);
    m_city_isSet = !json[QString("city")].isNull() && m_city_isValid;

    m_company_isValid = ::OpenAPI::fromJsonValue(m_company, json[QString("company")]);
    m_company_isSet = !json[QString("company")].isNull() && m_company_isValid;

    m_country_isValid = ::OpenAPI::fromJsonValue(m_country, json[QString("country")]);
    m_country_isSet = !json[QString("country")].isNull() && m_country_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_house_number_or_name_isValid = ::OpenAPI::fromJsonValue(m_house_number_or_name, json[QString("houseNumberOrName")]);
    m_house_number_or_name_isSet = !json[QString("houseNumberOrName")].isNull() && m_house_number_or_name_isValid;

    m_mobile_isValid = ::OpenAPI::fromJsonValue(m_mobile, json[QString("mobile")]);
    m_mobile_isSet = !json[QString("mobile")].isNull() && m_mobile_isValid;

    m_postal_code_isValid = ::OpenAPI::fromJsonValue(m_postal_code, json[QString("postalCode")]);
    m_postal_code_isSet = !json[QString("postalCode")].isNull() && m_postal_code_isValid;

    m_state_or_province_isValid = ::OpenAPI::fromJsonValue(m_state_or_province, json[QString("stateOrProvince")]);
    m_state_or_province_isSet = !json[QString("stateOrProvince")].isNull() && m_state_or_province_isValid;

    m_street_isValid = ::OpenAPI::fromJsonValue(m_street, json[QString("street")]);
    m_street_isSet = !json[QString("street")].isNull() && m_street_isValid;
}

QString OAIBulkAddress::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBulkAddress::asJsonObject() const {
    QJsonObject obj;
    if (m_city_isSet) {
        obj.insert(QString("city"), ::OpenAPI::toJsonValue(m_city));
    }
    if (m_company_isSet) {
        obj.insert(QString("company"), ::OpenAPI::toJsonValue(m_company));
    }
    if (m_country_isSet) {
        obj.insert(QString("country"), ::OpenAPI::toJsonValue(m_country));
    }
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_house_number_or_name_isSet) {
        obj.insert(QString("houseNumberOrName"), ::OpenAPI::toJsonValue(m_house_number_or_name));
    }
    if (m_mobile_isSet) {
        obj.insert(QString("mobile"), ::OpenAPI::toJsonValue(m_mobile));
    }
    if (m_postal_code_isSet) {
        obj.insert(QString("postalCode"), ::OpenAPI::toJsonValue(m_postal_code));
    }
    if (m_state_or_province_isSet) {
        obj.insert(QString("stateOrProvince"), ::OpenAPI::toJsonValue(m_state_or_province));
    }
    if (m_street_isSet) {
        obj.insert(QString("street"), ::OpenAPI::toJsonValue(m_street));
    }
    return obj;
}

QString OAIBulkAddress::getCity() const {
    return m_city;
}
void OAIBulkAddress::setCity(const QString &city) {
    m_city = city;
    m_city_isSet = true;
}

bool OAIBulkAddress::is_city_Set() const{
    return m_city_isSet;
}

bool OAIBulkAddress::is_city_Valid() const{
    return m_city_isValid;
}

QString OAIBulkAddress::getCompany() const {
    return m_company;
}
void OAIBulkAddress::setCompany(const QString &company) {
    m_company = company;
    m_company_isSet = true;
}

bool OAIBulkAddress::is_company_Set() const{
    return m_company_isSet;
}

bool OAIBulkAddress::is_company_Valid() const{
    return m_company_isValid;
}

QString OAIBulkAddress::getCountry() const {
    return m_country;
}
void OAIBulkAddress::setCountry(const QString &country) {
    m_country = country;
    m_country_isSet = true;
}

bool OAIBulkAddress::is_country_Set() const{
    return m_country_isSet;
}

bool OAIBulkAddress::is_country_Valid() const{
    return m_country_isValid;
}

QString OAIBulkAddress::getEmail() const {
    return m_email;
}
void OAIBulkAddress::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAIBulkAddress::is_email_Set() const{
    return m_email_isSet;
}

bool OAIBulkAddress::is_email_Valid() const{
    return m_email_isValid;
}

QString OAIBulkAddress::getHouseNumberOrName() const {
    return m_house_number_or_name;
}
void OAIBulkAddress::setHouseNumberOrName(const QString &house_number_or_name) {
    m_house_number_or_name = house_number_or_name;
    m_house_number_or_name_isSet = true;
}

bool OAIBulkAddress::is_house_number_or_name_Set() const{
    return m_house_number_or_name_isSet;
}

bool OAIBulkAddress::is_house_number_or_name_Valid() const{
    return m_house_number_or_name_isValid;
}

QString OAIBulkAddress::getMobile() const {
    return m_mobile;
}
void OAIBulkAddress::setMobile(const QString &mobile) {
    m_mobile = mobile;
    m_mobile_isSet = true;
}

bool OAIBulkAddress::is_mobile_Set() const{
    return m_mobile_isSet;
}

bool OAIBulkAddress::is_mobile_Valid() const{
    return m_mobile_isValid;
}

QString OAIBulkAddress::getPostalCode() const {
    return m_postal_code;
}
void OAIBulkAddress::setPostalCode(const QString &postal_code) {
    m_postal_code = postal_code;
    m_postal_code_isSet = true;
}

bool OAIBulkAddress::is_postal_code_Set() const{
    return m_postal_code_isSet;
}

bool OAIBulkAddress::is_postal_code_Valid() const{
    return m_postal_code_isValid;
}

QString OAIBulkAddress::getStateOrProvince() const {
    return m_state_or_province;
}
void OAIBulkAddress::setStateOrProvince(const QString &state_or_province) {
    m_state_or_province = state_or_province;
    m_state_or_province_isSet = true;
}

bool OAIBulkAddress::is_state_or_province_Set() const{
    return m_state_or_province_isSet;
}

bool OAIBulkAddress::is_state_or_province_Valid() const{
    return m_state_or_province_isValid;
}

QString OAIBulkAddress::getStreet() const {
    return m_street;
}
void OAIBulkAddress::setStreet(const QString &street) {
    m_street = street;
    m_street_isSet = true;
}

bool OAIBulkAddress::is_street_Set() const{
    return m_street_isSet;
}

bool OAIBulkAddress::is_street_Valid() const{
    return m_street_isValid;
}

bool OAIBulkAddress::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_city_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_company_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_house_number_or_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mobile_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_postal_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_or_province_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_street_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBulkAddress::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_country_isValid && true;
}

} // namespace OpenAPI
