/**
 * Configuration webhooks
 * Adyen sends webhooks to inform your system about events that occur in your platform. These events include, for example, when an account holder's capabilities are updated, or when a sweep configuration is created or updated.  When an event occurs, Adyen makes an HTTP POST request to a URL on your server and includes the details of the event in the request body.  You can use these webhooks to build your implementation. For example, you can use this information to update internal statuses when the status of a capability is changed.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBalanceAccount.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBalanceAccount::OAIBalanceAccount(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBalanceAccount::OAIBalanceAccount() {
    this->initializeModel();
}

OAIBalanceAccount::~OAIBalanceAccount() {}

void OAIBalanceAccount::initializeModel() {

    m_account_holder_id_isSet = false;
    m_account_holder_id_isValid = false;

    m_balances_isSet = false;
    m_balances_isValid = false;

    m_default_currency_code_isSet = false;
    m_default_currency_code_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_migrated_account_code_isSet = false;
    m_migrated_account_code_isValid = false;

    m_payment_instruments_isSet = false;
    m_payment_instruments_isValid = false;

    m_platform_payment_configuration_isSet = false;
    m_platform_payment_configuration_isValid = false;

    m_reference_isSet = false;
    m_reference_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_time_zone_isSet = false;
    m_time_zone_isValid = false;
}

void OAIBalanceAccount::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBalanceAccount::fromJsonObject(QJsonObject json) {

    m_account_holder_id_isValid = ::OpenAPI::fromJsonValue(m_account_holder_id, json[QString("accountHolderId")]);
    m_account_holder_id_isSet = !json[QString("accountHolderId")].isNull() && m_account_holder_id_isValid;

    m_balances_isValid = ::OpenAPI::fromJsonValue(m_balances, json[QString("balances")]);
    m_balances_isSet = !json[QString("balances")].isNull() && m_balances_isValid;

    m_default_currency_code_isValid = ::OpenAPI::fromJsonValue(m_default_currency_code, json[QString("defaultCurrencyCode")]);
    m_default_currency_code_isSet = !json[QString("defaultCurrencyCode")].isNull() && m_default_currency_code_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_migrated_account_code_isValid = ::OpenAPI::fromJsonValue(m_migrated_account_code, json[QString("migratedAccountCode")]);
    m_migrated_account_code_isSet = !json[QString("migratedAccountCode")].isNull() && m_migrated_account_code_isValid;

    m_payment_instruments_isValid = ::OpenAPI::fromJsonValue(m_payment_instruments, json[QString("paymentInstruments")]);
    m_payment_instruments_isSet = !json[QString("paymentInstruments")].isNull() && m_payment_instruments_isValid;

    m_platform_payment_configuration_isValid = ::OpenAPI::fromJsonValue(m_platform_payment_configuration, json[QString("platformPaymentConfiguration")]);
    m_platform_payment_configuration_isSet = !json[QString("platformPaymentConfiguration")].isNull() && m_platform_payment_configuration_isValid;

    m_reference_isValid = ::OpenAPI::fromJsonValue(m_reference, json[QString("reference")]);
    m_reference_isSet = !json[QString("reference")].isNull() && m_reference_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_time_zone_isValid = ::OpenAPI::fromJsonValue(m_time_zone, json[QString("timeZone")]);
    m_time_zone_isSet = !json[QString("timeZone")].isNull() && m_time_zone_isValid;
}

QString OAIBalanceAccount::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBalanceAccount::asJsonObject() const {
    QJsonObject obj;
    if (m_account_holder_id_isSet) {
        obj.insert(QString("accountHolderId"), ::OpenAPI::toJsonValue(m_account_holder_id));
    }
    if (m_balances.size() > 0) {
        obj.insert(QString("balances"), ::OpenAPI::toJsonValue(m_balances));
    }
    if (m_default_currency_code_isSet) {
        obj.insert(QString("defaultCurrencyCode"), ::OpenAPI::toJsonValue(m_default_currency_code));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_metadata.size() > 0) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_migrated_account_code_isSet) {
        obj.insert(QString("migratedAccountCode"), ::OpenAPI::toJsonValue(m_migrated_account_code));
    }
    if (m_payment_instruments.size() > 0) {
        obj.insert(QString("paymentInstruments"), ::OpenAPI::toJsonValue(m_payment_instruments));
    }
    if (m_platform_payment_configuration.isSet()) {
        obj.insert(QString("platformPaymentConfiguration"), ::OpenAPI::toJsonValue(m_platform_payment_configuration));
    }
    if (m_reference_isSet) {
        obj.insert(QString("reference"), ::OpenAPI::toJsonValue(m_reference));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_time_zone_isSet) {
        obj.insert(QString("timeZone"), ::OpenAPI::toJsonValue(m_time_zone));
    }
    return obj;
}

QString OAIBalanceAccount::getAccountHolderId() const {
    return m_account_holder_id;
}
void OAIBalanceAccount::setAccountHolderId(const QString &account_holder_id) {
    m_account_holder_id = account_holder_id;
    m_account_holder_id_isSet = true;
}

bool OAIBalanceAccount::is_account_holder_id_Set() const{
    return m_account_holder_id_isSet;
}

bool OAIBalanceAccount::is_account_holder_id_Valid() const{
    return m_account_holder_id_isValid;
}

QList<OAIBalance> OAIBalanceAccount::getBalances() const {
    return m_balances;
}
void OAIBalanceAccount::setBalances(const QList<OAIBalance> &balances) {
    m_balances = balances;
    m_balances_isSet = true;
}

bool OAIBalanceAccount::is_balances_Set() const{
    return m_balances_isSet;
}

bool OAIBalanceAccount::is_balances_Valid() const{
    return m_balances_isValid;
}

QString OAIBalanceAccount::getDefaultCurrencyCode() const {
    return m_default_currency_code;
}
void OAIBalanceAccount::setDefaultCurrencyCode(const QString &default_currency_code) {
    m_default_currency_code = default_currency_code;
    m_default_currency_code_isSet = true;
}

bool OAIBalanceAccount::is_default_currency_code_Set() const{
    return m_default_currency_code_isSet;
}

bool OAIBalanceAccount::is_default_currency_code_Valid() const{
    return m_default_currency_code_isValid;
}

QString OAIBalanceAccount::getDescription() const {
    return m_description;
}
void OAIBalanceAccount::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIBalanceAccount::is_description_Set() const{
    return m_description_isSet;
}

bool OAIBalanceAccount::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIBalanceAccount::getId() const {
    return m_id;
}
void OAIBalanceAccount::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIBalanceAccount::is_id_Set() const{
    return m_id_isSet;
}

bool OAIBalanceAccount::is_id_Valid() const{
    return m_id_isValid;
}

QMap<QString, QString> OAIBalanceAccount::getMetadata() const {
    return m_metadata;
}
void OAIBalanceAccount::setMetadata(const QMap<QString, QString> &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAIBalanceAccount::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAIBalanceAccount::is_metadata_Valid() const{
    return m_metadata_isValid;
}

QString OAIBalanceAccount::getMigratedAccountCode() const {
    return m_migrated_account_code;
}
void OAIBalanceAccount::setMigratedAccountCode(const QString &migrated_account_code) {
    m_migrated_account_code = migrated_account_code;
    m_migrated_account_code_isSet = true;
}

bool OAIBalanceAccount::is_migrated_account_code_Set() const{
    return m_migrated_account_code_isSet;
}

bool OAIBalanceAccount::is_migrated_account_code_Valid() const{
    return m_migrated_account_code_isValid;
}

QList<OAIPaymentInstrumentReference> OAIBalanceAccount::getPaymentInstruments() const {
    return m_payment_instruments;
}
void OAIBalanceAccount::setPaymentInstruments(const QList<OAIPaymentInstrumentReference> &payment_instruments) {
    m_payment_instruments = payment_instruments;
    m_payment_instruments_isSet = true;
}

bool OAIBalanceAccount::is_payment_instruments_Set() const{
    return m_payment_instruments_isSet;
}

bool OAIBalanceAccount::is_payment_instruments_Valid() const{
    return m_payment_instruments_isValid;
}

OAIPlatformPaymentConfiguration OAIBalanceAccount::getPlatformPaymentConfiguration() const {
    return m_platform_payment_configuration;
}
void OAIBalanceAccount::setPlatformPaymentConfiguration(const OAIPlatformPaymentConfiguration &platform_payment_configuration) {
    m_platform_payment_configuration = platform_payment_configuration;
    m_platform_payment_configuration_isSet = true;
}

bool OAIBalanceAccount::is_platform_payment_configuration_Set() const{
    return m_platform_payment_configuration_isSet;
}

bool OAIBalanceAccount::is_platform_payment_configuration_Valid() const{
    return m_platform_payment_configuration_isValid;
}

QString OAIBalanceAccount::getReference() const {
    return m_reference;
}
void OAIBalanceAccount::setReference(const QString &reference) {
    m_reference = reference;
    m_reference_isSet = true;
}

bool OAIBalanceAccount::is_reference_Set() const{
    return m_reference_isSet;
}

bool OAIBalanceAccount::is_reference_Valid() const{
    return m_reference_isValid;
}

QString OAIBalanceAccount::getStatus() const {
    return m_status;
}
void OAIBalanceAccount::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIBalanceAccount::is_status_Set() const{
    return m_status_isSet;
}

bool OAIBalanceAccount::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIBalanceAccount::getTimeZone() const {
    return m_time_zone;
}
void OAIBalanceAccount::setTimeZone(const QString &time_zone) {
    m_time_zone = time_zone;
    m_time_zone_isSet = true;
}

bool OAIBalanceAccount::is_time_zone_Set() const{
    return m_time_zone_isSet;
}

bool OAIBalanceAccount::is_time_zone_Valid() const{
    return m_time_zone_isValid;
}

bool OAIBalanceAccount::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_holder_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_balances.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_currency_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_migrated_account_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_instruments.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_platform_payment_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_zone_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBalanceAccount::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_account_holder_id_isValid && m_id_isValid && true;
}

} // namespace OpenAPI
