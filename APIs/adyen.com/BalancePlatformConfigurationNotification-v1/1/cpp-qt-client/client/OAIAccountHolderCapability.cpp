/**
 * Configuration webhooks
 * Adyen sends webhooks to inform your system about events that occur in your platform. These events include, for example, when an account holder's capabilities are updated, or when a sweep configuration is created or updated.  When an event occurs, Adyen makes an HTTP POST request to a URL on your server and includes the details of the event in the request body.  You can use these webhooks to build your implementation. For example, you can use this information to update internal statuses when the status of a capability is changed.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAccountHolderCapability.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAccountHolderCapability::OAIAccountHolderCapability(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAccountHolderCapability::OAIAccountHolderCapability() {
    this->initializeModel();
}

OAIAccountHolderCapability::~OAIAccountHolderCapability() {}

void OAIAccountHolderCapability::initializeModel() {

    m_allowed_isSet = false;
    m_allowed_isValid = false;

    m_allowed_level_isSet = false;
    m_allowed_level_isValid = false;

    m_allowed_settings_isSet = false;
    m_allowed_settings_isValid = false;

    m_enabled_isSet = false;
    m_enabled_isValid = false;

    m_problems_isSet = false;
    m_problems_isValid = false;

    m_requested_isSet = false;
    m_requested_isValid = false;

    m_requested_level_isSet = false;
    m_requested_level_isValid = false;

    m_requested_settings_isSet = false;
    m_requested_settings_isValid = false;

    m_transfer_instruments_isSet = false;
    m_transfer_instruments_isValid = false;

    m_verification_status_isSet = false;
    m_verification_status_isValid = false;
}

void OAIAccountHolderCapability::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAccountHolderCapability::fromJsonObject(QJsonObject json) {

    m_allowed_isValid = ::OpenAPI::fromJsonValue(m_allowed, json[QString("allowed")]);
    m_allowed_isSet = !json[QString("allowed")].isNull() && m_allowed_isValid;

    m_allowed_level_isValid = ::OpenAPI::fromJsonValue(m_allowed_level, json[QString("allowedLevel")]);
    m_allowed_level_isSet = !json[QString("allowedLevel")].isNull() && m_allowed_level_isValid;

    m_allowed_settings_isValid = ::OpenAPI::fromJsonValue(m_allowed_settings, json[QString("allowedSettings")]);
    m_allowed_settings_isSet = !json[QString("allowedSettings")].isNull() && m_allowed_settings_isValid;

    m_enabled_isValid = ::OpenAPI::fromJsonValue(m_enabled, json[QString("enabled")]);
    m_enabled_isSet = !json[QString("enabled")].isNull() && m_enabled_isValid;

    m_problems_isValid = ::OpenAPI::fromJsonValue(m_problems, json[QString("problems")]);
    m_problems_isSet = !json[QString("problems")].isNull() && m_problems_isValid;

    m_requested_isValid = ::OpenAPI::fromJsonValue(m_requested, json[QString("requested")]);
    m_requested_isSet = !json[QString("requested")].isNull() && m_requested_isValid;

    m_requested_level_isValid = ::OpenAPI::fromJsonValue(m_requested_level, json[QString("requestedLevel")]);
    m_requested_level_isSet = !json[QString("requestedLevel")].isNull() && m_requested_level_isValid;

    m_requested_settings_isValid = ::OpenAPI::fromJsonValue(m_requested_settings, json[QString("requestedSettings")]);
    m_requested_settings_isSet = !json[QString("requestedSettings")].isNull() && m_requested_settings_isValid;

    m_transfer_instruments_isValid = ::OpenAPI::fromJsonValue(m_transfer_instruments, json[QString("transferInstruments")]);
    m_transfer_instruments_isSet = !json[QString("transferInstruments")].isNull() && m_transfer_instruments_isValid;

    m_verification_status_isValid = ::OpenAPI::fromJsonValue(m_verification_status, json[QString("verificationStatus")]);
    m_verification_status_isSet = !json[QString("verificationStatus")].isNull() && m_verification_status_isValid;
}

QString OAIAccountHolderCapability::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAccountHolderCapability::asJsonObject() const {
    QJsonObject obj;
    if (m_allowed_isSet) {
        obj.insert(QString("allowed"), ::OpenAPI::toJsonValue(m_allowed));
    }
    if (m_allowed_level_isSet) {
        obj.insert(QString("allowedLevel"), ::OpenAPI::toJsonValue(m_allowed_level));
    }
    if (m_allowed_settings.isSet()) {
        obj.insert(QString("allowedSettings"), ::OpenAPI::toJsonValue(m_allowed_settings));
    }
    if (m_enabled_isSet) {
        obj.insert(QString("enabled"), ::OpenAPI::toJsonValue(m_enabled));
    }
    if (m_problems.size() > 0) {
        obj.insert(QString("problems"), ::OpenAPI::toJsonValue(m_problems));
    }
    if (m_requested_isSet) {
        obj.insert(QString("requested"), ::OpenAPI::toJsonValue(m_requested));
    }
    if (m_requested_level_isSet) {
        obj.insert(QString("requestedLevel"), ::OpenAPI::toJsonValue(m_requested_level));
    }
    if (m_requested_settings.isSet()) {
        obj.insert(QString("requestedSettings"), ::OpenAPI::toJsonValue(m_requested_settings));
    }
    if (m_transfer_instruments.size() > 0) {
        obj.insert(QString("transferInstruments"), ::OpenAPI::toJsonValue(m_transfer_instruments));
    }
    if (m_verification_status_isSet) {
        obj.insert(QString("verificationStatus"), ::OpenAPI::toJsonValue(m_verification_status));
    }
    return obj;
}

bool OAIAccountHolderCapability::isAllowed() const {
    return m_allowed;
}
void OAIAccountHolderCapability::setAllowed(const bool &allowed) {
    m_allowed = allowed;
    m_allowed_isSet = true;
}

bool OAIAccountHolderCapability::is_allowed_Set() const{
    return m_allowed_isSet;
}

bool OAIAccountHolderCapability::is_allowed_Valid() const{
    return m_allowed_isValid;
}

QString OAIAccountHolderCapability::getAllowedLevel() const {
    return m_allowed_level;
}
void OAIAccountHolderCapability::setAllowedLevel(const QString &allowed_level) {
    m_allowed_level = allowed_level;
    m_allowed_level_isSet = true;
}

bool OAIAccountHolderCapability::is_allowed_level_Set() const{
    return m_allowed_level_isSet;
}

bool OAIAccountHolderCapability::is_allowed_level_Valid() const{
    return m_allowed_level_isValid;
}

OAICapabilitySettings OAIAccountHolderCapability::getAllowedSettings() const {
    return m_allowed_settings;
}
void OAIAccountHolderCapability::setAllowedSettings(const OAICapabilitySettings &allowed_settings) {
    m_allowed_settings = allowed_settings;
    m_allowed_settings_isSet = true;
}

bool OAIAccountHolderCapability::is_allowed_settings_Set() const{
    return m_allowed_settings_isSet;
}

bool OAIAccountHolderCapability::is_allowed_settings_Valid() const{
    return m_allowed_settings_isValid;
}

bool OAIAccountHolderCapability::isEnabled() const {
    return m_enabled;
}
void OAIAccountHolderCapability::setEnabled(const bool &enabled) {
    m_enabled = enabled;
    m_enabled_isSet = true;
}

bool OAIAccountHolderCapability::is_enabled_Set() const{
    return m_enabled_isSet;
}

bool OAIAccountHolderCapability::is_enabled_Valid() const{
    return m_enabled_isValid;
}

QList<OAICapabilityProblem> OAIAccountHolderCapability::getProblems() const {
    return m_problems;
}
void OAIAccountHolderCapability::setProblems(const QList<OAICapabilityProblem> &problems) {
    m_problems = problems;
    m_problems_isSet = true;
}

bool OAIAccountHolderCapability::is_problems_Set() const{
    return m_problems_isSet;
}

bool OAIAccountHolderCapability::is_problems_Valid() const{
    return m_problems_isValid;
}

bool OAIAccountHolderCapability::isRequested() const {
    return m_requested;
}
void OAIAccountHolderCapability::setRequested(const bool &requested) {
    m_requested = requested;
    m_requested_isSet = true;
}

bool OAIAccountHolderCapability::is_requested_Set() const{
    return m_requested_isSet;
}

bool OAIAccountHolderCapability::is_requested_Valid() const{
    return m_requested_isValid;
}

QString OAIAccountHolderCapability::getRequestedLevel() const {
    return m_requested_level;
}
void OAIAccountHolderCapability::setRequestedLevel(const QString &requested_level) {
    m_requested_level = requested_level;
    m_requested_level_isSet = true;
}

bool OAIAccountHolderCapability::is_requested_level_Set() const{
    return m_requested_level_isSet;
}

bool OAIAccountHolderCapability::is_requested_level_Valid() const{
    return m_requested_level_isValid;
}

OAICapabilitySettings OAIAccountHolderCapability::getRequestedSettings() const {
    return m_requested_settings;
}
void OAIAccountHolderCapability::setRequestedSettings(const OAICapabilitySettings &requested_settings) {
    m_requested_settings = requested_settings;
    m_requested_settings_isSet = true;
}

bool OAIAccountHolderCapability::is_requested_settings_Set() const{
    return m_requested_settings_isSet;
}

bool OAIAccountHolderCapability::is_requested_settings_Valid() const{
    return m_requested_settings_isValid;
}

QList<OAIAccountSupportingEntityCapability> OAIAccountHolderCapability::getTransferInstruments() const {
    return m_transfer_instruments;
}
void OAIAccountHolderCapability::setTransferInstruments(const QList<OAIAccountSupportingEntityCapability> &transfer_instruments) {
    m_transfer_instruments = transfer_instruments;
    m_transfer_instruments_isSet = true;
}

bool OAIAccountHolderCapability::is_transfer_instruments_Set() const{
    return m_transfer_instruments_isSet;
}

bool OAIAccountHolderCapability::is_transfer_instruments_Valid() const{
    return m_transfer_instruments_isValid;
}

QString OAIAccountHolderCapability::getVerificationStatus() const {
    return m_verification_status;
}
void OAIAccountHolderCapability::setVerificationStatus(const QString &verification_status) {
    m_verification_status = verification_status;
    m_verification_status_isSet = true;
}

bool OAIAccountHolderCapability::is_verification_status_Set() const{
    return m_verification_status_isSet;
}

bool OAIAccountHolderCapability::is_verification_status_Valid() const{
    return m_verification_status_isValid;
}

bool OAIAccountHolderCapability::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allowed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_allowed_level_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_allowed_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_problems.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_requested_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_requested_level_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_requested_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_transfer_instruments.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_verification_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAccountHolderCapability::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
