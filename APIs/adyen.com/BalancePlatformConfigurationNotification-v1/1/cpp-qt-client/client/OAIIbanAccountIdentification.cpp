/**
 * Configuration webhooks
 * Adyen sends webhooks to inform your system about events that occur in your platform. These events include, for example, when an account holder's capabilities are updated, or when a sweep configuration is created or updated.  When an event occurs, Adyen makes an HTTP POST request to a URL on your server and includes the details of the event in the request body.  You can use these webhooks to build your implementation. For example, you can use this information to update internal statuses when the status of a capability is changed.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIbanAccountIdentification.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIbanAccountIdentification::OAIIbanAccountIdentification(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIbanAccountIdentification::OAIIbanAccountIdentification() {
    this->initializeModel();
}

OAIIbanAccountIdentification::~OAIIbanAccountIdentification() {}

void OAIIbanAccountIdentification::initializeModel() {

    m_form_factor_isSet = false;
    m_form_factor_isValid = false;

    m_iban_isSet = false;
    m_iban_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIIbanAccountIdentification::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIbanAccountIdentification::fromJsonObject(QJsonObject json) {

    m_form_factor_isValid = ::OpenAPI::fromJsonValue(m_form_factor, json[QString("formFactor")]);
    m_form_factor_isSet = !json[QString("formFactor")].isNull() && m_form_factor_isValid;

    m_iban_isValid = ::OpenAPI::fromJsonValue(m_iban, json[QString("iban")]);
    m_iban_isSet = !json[QString("iban")].isNull() && m_iban_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIIbanAccountIdentification::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIbanAccountIdentification::asJsonObject() const {
    QJsonObject obj;
    if (m_form_factor_isSet) {
        obj.insert(QString("formFactor"), ::OpenAPI::toJsonValue(m_form_factor));
    }
    if (m_iban_isSet) {
        obj.insert(QString("iban"), ::OpenAPI::toJsonValue(m_iban));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIIbanAccountIdentification::getFormFactor() const {
    return m_form_factor;
}
void OAIIbanAccountIdentification::setFormFactor(const QString &form_factor) {
    m_form_factor = form_factor;
    m_form_factor_isSet = true;
}

bool OAIIbanAccountIdentification::is_form_factor_Set() const{
    return m_form_factor_isSet;
}

bool OAIIbanAccountIdentification::is_form_factor_Valid() const{
    return m_form_factor_isValid;
}

QString OAIIbanAccountIdentification::getIban() const {
    return m_iban;
}
void OAIIbanAccountIdentification::setIban(const QString &iban) {
    m_iban = iban;
    m_iban_isSet = true;
}

bool OAIIbanAccountIdentification::is_iban_Set() const{
    return m_iban_isSet;
}

bool OAIIbanAccountIdentification::is_iban_Valid() const{
    return m_iban_isValid;
}

QString OAIIbanAccountIdentification::getType() const {
    return m_type;
}
void OAIIbanAccountIdentification::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIIbanAccountIdentification::is_type_Set() const{
    return m_type_isSet;
}

bool OAIIbanAccountIdentification::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIIbanAccountIdentification::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_form_factor_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_iban_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIbanAccountIdentification::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_iban_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
