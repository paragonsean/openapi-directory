/**
 * Configuration webhooks
 * Adyen sends webhooks to inform your system about events that occur in your platform. These events include, for example, when an account holder's capabilities are updated, or when a sweep configuration is created or updated.  When an event occurs, Adyen makes an HTTP POST request to a URL on your server and includes the details of the event in the request body.  You can use these webhooks to build your implementation. For example, you can use this information to update internal statuses when the status of a capability is changed.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPhoneNumber.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPhoneNumber::OAIPhoneNumber(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPhoneNumber::OAIPhoneNumber() {
    this->initializeModel();
}

OAIPhoneNumber::~OAIPhoneNumber() {}

void OAIPhoneNumber::initializeModel() {

    m_phone_country_code_isSet = false;
    m_phone_country_code_isValid = false;

    m_phone_number_isSet = false;
    m_phone_number_isValid = false;

    m_phone_type_isSet = false;
    m_phone_type_isValid = false;
}

void OAIPhoneNumber::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPhoneNumber::fromJsonObject(QJsonObject json) {

    m_phone_country_code_isValid = ::OpenAPI::fromJsonValue(m_phone_country_code, json[QString("phoneCountryCode")]);
    m_phone_country_code_isSet = !json[QString("phoneCountryCode")].isNull() && m_phone_country_code_isValid;

    m_phone_number_isValid = ::OpenAPI::fromJsonValue(m_phone_number, json[QString("phoneNumber")]);
    m_phone_number_isSet = !json[QString("phoneNumber")].isNull() && m_phone_number_isValid;

    m_phone_type_isValid = ::OpenAPI::fromJsonValue(m_phone_type, json[QString("phoneType")]);
    m_phone_type_isSet = !json[QString("phoneType")].isNull() && m_phone_type_isValid;
}

QString OAIPhoneNumber::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPhoneNumber::asJsonObject() const {
    QJsonObject obj;
    if (m_phone_country_code_isSet) {
        obj.insert(QString("phoneCountryCode"), ::OpenAPI::toJsonValue(m_phone_country_code));
    }
    if (m_phone_number_isSet) {
        obj.insert(QString("phoneNumber"), ::OpenAPI::toJsonValue(m_phone_number));
    }
    if (m_phone_type_isSet) {
        obj.insert(QString("phoneType"), ::OpenAPI::toJsonValue(m_phone_type));
    }
    return obj;
}

QString OAIPhoneNumber::getPhoneCountryCode() const {
    return m_phone_country_code;
}
void OAIPhoneNumber::setPhoneCountryCode(const QString &phone_country_code) {
    m_phone_country_code = phone_country_code;
    m_phone_country_code_isSet = true;
}

bool OAIPhoneNumber::is_phone_country_code_Set() const{
    return m_phone_country_code_isSet;
}

bool OAIPhoneNumber::is_phone_country_code_Valid() const{
    return m_phone_country_code_isValid;
}

QString OAIPhoneNumber::getPhoneNumber() const {
    return m_phone_number;
}
void OAIPhoneNumber::setPhoneNumber(const QString &phone_number) {
    m_phone_number = phone_number;
    m_phone_number_isSet = true;
}

bool OAIPhoneNumber::is_phone_number_Set() const{
    return m_phone_number_isSet;
}

bool OAIPhoneNumber::is_phone_number_Valid() const{
    return m_phone_number_isValid;
}

QString OAIPhoneNumber::getPhoneType() const {
    return m_phone_type;
}
void OAIPhoneNumber::setPhoneType(const QString &phone_type) {
    m_phone_type = phone_type;
    m_phone_type_isSet = true;
}

bool OAIPhoneNumber::is_phone_type_Set() const{
    return m_phone_type_isSet;
}

bool OAIPhoneNumber::is_phone_type_Valid() const{
    return m_phone_type_isValid;
}

bool OAIPhoneNumber::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_phone_country_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phone_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phone_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPhoneNumber::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
