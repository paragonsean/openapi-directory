/**
 * Configuration webhooks
 * Adyen sends webhooks to inform your system about events that occur in your platform. These events include, for example, when an account holder's capabilities are updated, or when a sweep configuration is created or updated.  When an event occurs, Adyen makes an HTTP POST request to a URL on your server and includes the details of the event in the request body.  You can use these webhooks to build your implementation. For example, you can use this information to update internal statuses when the status of a capability is changed.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISweepSchedule.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISweepSchedule::OAISweepSchedule(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISweepSchedule::OAISweepSchedule() {
    this->initializeModel();
}

OAISweepSchedule::~OAISweepSchedule() {}

void OAISweepSchedule::initializeModel() {

    m_cron_expression_isSet = false;
    m_cron_expression_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAISweepSchedule::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISweepSchedule::fromJsonObject(QJsonObject json) {

    m_cron_expression_isValid = ::OpenAPI::fromJsonValue(m_cron_expression, json[QString("cronExpression")]);
    m_cron_expression_isSet = !json[QString("cronExpression")].isNull() && m_cron_expression_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAISweepSchedule::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISweepSchedule::asJsonObject() const {
    QJsonObject obj;
    if (m_cron_expression_isSet) {
        obj.insert(QString("cronExpression"), ::OpenAPI::toJsonValue(m_cron_expression));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAISweepSchedule::getCronExpression() const {
    return m_cron_expression;
}
void OAISweepSchedule::setCronExpression(const QString &cron_expression) {
    m_cron_expression = cron_expression;
    m_cron_expression_isSet = true;
}

bool OAISweepSchedule::is_cron_expression_Set() const{
    return m_cron_expression_isSet;
}

bool OAISweepSchedule::is_cron_expression_Valid() const{
    return m_cron_expression_isValid;
}

QString OAISweepSchedule::getType() const {
    return m_type;
}
void OAISweepSchedule::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAISweepSchedule::is_type_Set() const{
    return m_type_isSet;
}

bool OAISweepSchedule::is_type_Valid() const{
    return m_type_isValid;
}

bool OAISweepSchedule::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cron_expression_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISweepSchedule::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_type_isValid && true;
}

} // namespace OpenAPI
