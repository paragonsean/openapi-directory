/**
 * Configuration webhooks
 * Adyen sends webhooks to inform your system about events that occur in your platform. These events include, for example, when an account holder's capabilities are updated, or when a sweep configuration is created or updated.  When an event occurs, Adyen makes an HTTP POST request to a URL on your server and includes the details of the event in the request body.  You can use these webhooks to build your implementation. For example, you can use this information to update internal statuses when the status of a capability is changed.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBalance.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBalance::OAIBalance(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBalance::OAIBalance() {
    this->initializeModel();
}

OAIBalance::~OAIBalance() {}

void OAIBalance::initializeModel() {

    m_available_isSet = false;
    m_available_isValid = false;

    m_balance_isSet = false;
    m_balance_isValid = false;

    m_currency_isSet = false;
    m_currency_isValid = false;

    m_pending_isSet = false;
    m_pending_isValid = false;

    m_reserved_isSet = false;
    m_reserved_isValid = false;
}

void OAIBalance::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBalance::fromJsonObject(QJsonObject json) {

    m_available_isValid = ::OpenAPI::fromJsonValue(m_available, json[QString("available")]);
    m_available_isSet = !json[QString("available")].isNull() && m_available_isValid;

    m_balance_isValid = ::OpenAPI::fromJsonValue(m_balance, json[QString("balance")]);
    m_balance_isSet = !json[QString("balance")].isNull() && m_balance_isValid;

    m_currency_isValid = ::OpenAPI::fromJsonValue(m_currency, json[QString("currency")]);
    m_currency_isSet = !json[QString("currency")].isNull() && m_currency_isValid;

    m_pending_isValid = ::OpenAPI::fromJsonValue(m_pending, json[QString("pending")]);
    m_pending_isSet = !json[QString("pending")].isNull() && m_pending_isValid;

    m_reserved_isValid = ::OpenAPI::fromJsonValue(m_reserved, json[QString("reserved")]);
    m_reserved_isSet = !json[QString("reserved")].isNull() && m_reserved_isValid;
}

QString OAIBalance::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBalance::asJsonObject() const {
    QJsonObject obj;
    if (m_available_isSet) {
        obj.insert(QString("available"), ::OpenAPI::toJsonValue(m_available));
    }
    if (m_balance_isSet) {
        obj.insert(QString("balance"), ::OpenAPI::toJsonValue(m_balance));
    }
    if (m_currency_isSet) {
        obj.insert(QString("currency"), ::OpenAPI::toJsonValue(m_currency));
    }
    if (m_pending_isSet) {
        obj.insert(QString("pending"), ::OpenAPI::toJsonValue(m_pending));
    }
    if (m_reserved_isSet) {
        obj.insert(QString("reserved"), ::OpenAPI::toJsonValue(m_reserved));
    }
    return obj;
}

qint64 OAIBalance::getAvailable() const {
    return m_available;
}
void OAIBalance::setAvailable(const qint64 &available) {
    m_available = available;
    m_available_isSet = true;
}

bool OAIBalance::is_available_Set() const{
    return m_available_isSet;
}

bool OAIBalance::is_available_Valid() const{
    return m_available_isValid;
}

qint64 OAIBalance::getBalance() const {
    return m_balance;
}
void OAIBalance::setBalance(const qint64 &balance) {
    m_balance = balance;
    m_balance_isSet = true;
}

bool OAIBalance::is_balance_Set() const{
    return m_balance_isSet;
}

bool OAIBalance::is_balance_Valid() const{
    return m_balance_isValid;
}

QString OAIBalance::getCurrency() const {
    return m_currency;
}
void OAIBalance::setCurrency(const QString &currency) {
    m_currency = currency;
    m_currency_isSet = true;
}

bool OAIBalance::is_currency_Set() const{
    return m_currency_isSet;
}

bool OAIBalance::is_currency_Valid() const{
    return m_currency_isValid;
}

qint64 OAIBalance::getPending() const {
    return m_pending;
}
void OAIBalance::setPending(const qint64 &pending) {
    m_pending = pending;
    m_pending_isSet = true;
}

bool OAIBalance::is_pending_Set() const{
    return m_pending_isSet;
}

bool OAIBalance::is_pending_Valid() const{
    return m_pending_isValid;
}

qint64 OAIBalance::getReserved() const {
    return m_reserved;
}
void OAIBalance::setReserved(const qint64 &reserved) {
    m_reserved = reserved;
    m_reserved_isSet = true;
}

bool OAIBalance::is_reserved_Set() const{
    return m_reserved_isSet;
}

bool OAIBalance::is_reserved_Valid() const{
    return m_reserved_isValid;
}

bool OAIBalance::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_available_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_balance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pending_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reserved_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBalance::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_available_isValid && m_balance_isValid && m_currency_isValid && m_reserved_isValid && true;
}

} // namespace OpenAPI
