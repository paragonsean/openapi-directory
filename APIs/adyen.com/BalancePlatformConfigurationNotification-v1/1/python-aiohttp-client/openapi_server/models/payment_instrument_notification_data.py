# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.payment_instrument import PaymentInstrument
from openapi_server import util


class PaymentInstrumentNotificationData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, balance_platform: str=None, payment_instrument: PaymentInstrument=None):
        """PaymentInstrumentNotificationData - a model defined in OpenAPI

        :param balance_platform: The balance_platform of this PaymentInstrumentNotificationData.
        :param payment_instrument: The payment_instrument of this PaymentInstrumentNotificationData.
        """
        self.openapi_types = {
            'balance_platform': str,
            'payment_instrument': PaymentInstrument
        }

        self.attribute_map = {
            'balance_platform': 'balancePlatform',
            'payment_instrument': 'paymentInstrument'
        }

        self._balance_platform = balance_platform
        self._payment_instrument = payment_instrument

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PaymentInstrumentNotificationData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PaymentInstrumentNotificationData of this PaymentInstrumentNotificationData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def balance_platform(self):
        """Gets the balance_platform of this PaymentInstrumentNotificationData.

        The unique identifier of the balance platform.

        :return: The balance_platform of this PaymentInstrumentNotificationData.
        :rtype: str
        """
        return self._balance_platform

    @balance_platform.setter
    def balance_platform(self, balance_platform):
        """Sets the balance_platform of this PaymentInstrumentNotificationData.

        The unique identifier of the balance platform.

        :param balance_platform: The balance_platform of this PaymentInstrumentNotificationData.
        :type balance_platform: str
        """

        self._balance_platform = balance_platform

    @property
    def payment_instrument(self):
        """Gets the payment_instrument of this PaymentInstrumentNotificationData.

        Contains information about the payment instrument resource that triggered the event.

        :return: The payment_instrument of this PaymentInstrumentNotificationData.
        :rtype: PaymentInstrument
        """
        return self._payment_instrument

    @payment_instrument.setter
    def payment_instrument(self, payment_instrument):
        """Sets the payment_instrument of this PaymentInstrumentNotificationData.

        Contains information about the payment instrument resource that triggered the event.

        :param payment_instrument: The payment_instrument of this PaymentInstrumentNotificationData.
        :type payment_instrument: PaymentInstrument
        """

        self._payment_instrument = payment_instrument
