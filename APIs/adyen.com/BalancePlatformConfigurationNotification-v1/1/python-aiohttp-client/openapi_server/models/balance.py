# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Balance(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, available: int=None, balance: int=None, currency: str=None, pending: int=None, reserved: int=None):
        """Balance - a model defined in OpenAPI

        :param available: The available of this Balance.
        :param balance: The balance of this Balance.
        :param currency: The currency of this Balance.
        :param pending: The pending of this Balance.
        :param reserved: The reserved of this Balance.
        """
        self.openapi_types = {
            'available': int,
            'balance': int,
            'currency': str,
            'pending': int,
            'reserved': int
        }

        self.attribute_map = {
            'available': 'available',
            'balance': 'balance',
            'currency': 'currency',
            'pending': 'pending',
            'reserved': 'reserved'
        }

        self._available = available
        self._balance = balance
        self._currency = currency
        self._pending = pending
        self._reserved = reserved

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Balance':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Balance of this Balance.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def available(self):
        """Gets the available of this Balance.

        The remaining amount available for spending.

        :return: The available of this Balance.
        :rtype: int
        """
        return self._available

    @available.setter
    def available(self, available):
        """Sets the available of this Balance.

        The remaining amount available for spending.

        :param available: The available of this Balance.
        :type available: int
        """
        if available is None:
            raise ValueError("Invalid value for `available`, must not be `None`")

        self._available = available

    @property
    def balance(self):
        """Gets the balance of this Balance.

        The total amount in the balance.

        :return: The balance of this Balance.
        :rtype: int
        """
        return self._balance

    @balance.setter
    def balance(self, balance):
        """Sets the balance of this Balance.

        The total amount in the balance.

        :param balance: The balance of this Balance.
        :type balance: int
        """
        if balance is None:
            raise ValueError("Invalid value for `balance`, must not be `None`")

        self._balance = balance

    @property
    def currency(self):
        """Gets the currency of this Balance.

        The three-character [ISO currency code](https://docs.adyen.com/development-resources/currency-codes) of the balance.

        :return: The currency of this Balance.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this Balance.

        The three-character [ISO currency code](https://docs.adyen.com/development-resources/currency-codes) of the balance.

        :param currency: The currency of this Balance.
        :type currency: str
        """
        if currency is None:
            raise ValueError("Invalid value for `currency`, must not be `None`")

        self._currency = currency

    @property
    def pending(self):
        """Gets the pending of this Balance.

        The amount pending to be paid out but not yet available in the balance.

        :return: The pending of this Balance.
        :rtype: int
        """
        return self._pending

    @pending.setter
    def pending(self, pending):
        """Sets the pending of this Balance.

        The amount pending to be paid out but not yet available in the balance.

        :param pending: The pending of this Balance.
        :type pending: int
        """

        self._pending = pending

    @property
    def reserved(self):
        """Gets the reserved of this Balance.

        The amount reserved for payments that have been authorised, but have not been captured yet.

        :return: The reserved of this Balance.
        :rtype: int
        """
        return self._reserved

    @reserved.setter
    def reserved(self, reserved):
        """Sets the reserved of this Balance.

        The amount reserved for payments that have been authorised, but have not been captured yet.

        :param reserved: The reserved of this Balance.
        :type reserved: int
        """
        if reserved is None:
            raise ValueError("Invalid value for `reserved`, must not be `None`")

        self._reserved = reserved
