# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PersonalData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, date_of_birth: str=None, id_number: str=None, nationality: str=None):
        """PersonalData - a model defined in OpenAPI

        :param date_of_birth: The date_of_birth of this PersonalData.
        :param id_number: The id_number of this PersonalData.
        :param nationality: The nationality of this PersonalData.
        """
        self.openapi_types = {
            'date_of_birth': str,
            'id_number': str,
            'nationality': str
        }

        self.attribute_map = {
            'date_of_birth': 'dateOfBirth',
            'id_number': 'idNumber',
            'nationality': 'nationality'
        }

        self._date_of_birth = date_of_birth
        self._id_number = id_number
        self._nationality = nationality

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PersonalData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PersonalData of this PersonalData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def date_of_birth(self):
        """Gets the date_of_birth of this PersonalData.

        The date of birth of the person. The date should be in ISO-8601 format yyyy-mm-dd (e.g. 2000-01-31).

        :return: The date_of_birth of this PersonalData.
        :rtype: str
        """
        return self._date_of_birth

    @date_of_birth.setter
    def date_of_birth(self, date_of_birth):
        """Sets the date_of_birth of this PersonalData.

        The date of birth of the person. The date should be in ISO-8601 format yyyy-mm-dd (e.g. 2000-01-31).

        :param date_of_birth: The date_of_birth of this PersonalData.
        :type date_of_birth: str
        """

        self._date_of_birth = date_of_birth

    @property
    def id_number(self):
        """Gets the id_number of this PersonalData.

        An ID number of the person.

        :return: The id_number of this PersonalData.
        :rtype: str
        """
        return self._id_number

    @id_number.setter
    def id_number(self, id_number):
        """Sets the id_number of this PersonalData.

        An ID number of the person.

        :param id_number: The id_number of this PersonalData.
        :type id_number: str
        """

        self._id_number = id_number

    @property
    def nationality(self):
        """Gets the nationality of this PersonalData.

        The nationality of the person represented by a two-character country code. >The permitted country codes are defined in ISO-3166-1 alpha-2 (e.g. 'NL').

        :return: The nationality of this PersonalData.
        :rtype: str
        """
        return self._nationality

    @nationality.setter
    def nationality(self, nationality):
        """Sets the nationality of this PersonalData.

        The nationality of the person represented by a two-character country code. >The permitted country codes are defined in ISO-3166-1 alpha-2 (e.g. 'NL').

        :param nationality: The nationality of this PersonalData.
        :type nationality: str
        """
        if nationality is not None and len(nationality) > 2:
            raise ValueError("Invalid value for `nationality`, length must be less than or equal to `2`")
        if nationality is not None and len(nationality) < 2:
            raise ValueError("Invalid value for `nationality`, length must be greater than or equal to `2`")

        self._nationality = nationality
