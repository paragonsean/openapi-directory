# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.capability_problem_entity_recursive import CapabilityProblemEntityRecursive
from openapi_server import util


class CapabilityProblemEntity(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, documents: List[str]=None, id: str=None, owner: CapabilityProblemEntityRecursive=None, type: str=None):
        """CapabilityProblemEntity - a model defined in OpenAPI

        :param documents: The documents of this CapabilityProblemEntity.
        :param id: The id of this CapabilityProblemEntity.
        :param owner: The owner of this CapabilityProblemEntity.
        :param type: The type of this CapabilityProblemEntity.
        """
        self.openapi_types = {
            'documents': List[str],
            'id': str,
            'owner': CapabilityProblemEntityRecursive,
            'type': str
        }

        self.attribute_map = {
            'documents': 'documents',
            'id': 'id',
            'owner': 'owner',
            'type': 'type'
        }

        self._documents = documents
        self._id = id
        self._owner = owner
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CapabilityProblemEntity':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CapabilityProblemEntity of this CapabilityProblemEntity.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def documents(self):
        """Gets the documents of this CapabilityProblemEntity.

        List of document IDs to which the verification errors related to the capabilities correspond to.

        :return: The documents of this CapabilityProblemEntity.
        :rtype: List[str]
        """
        return self._documents

    @documents.setter
    def documents(self, documents):
        """Sets the documents of this CapabilityProblemEntity.

        List of document IDs to which the verification errors related to the capabilities correspond to.

        :param documents: The documents of this CapabilityProblemEntity.
        :type documents: List[str]
        """

        self._documents = documents

    @property
    def id(self):
        """Gets the id of this CapabilityProblemEntity.

        The ID of the entity.

        :return: The id of this CapabilityProblemEntity.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CapabilityProblemEntity.

        The ID of the entity.

        :param id: The id of this CapabilityProblemEntity.
        :type id: str
        """

        self._id = id

    @property
    def owner(self):
        """Gets the owner of this CapabilityProblemEntity.

        Contains details about the owner of the entity that has an error.

        :return: The owner of this CapabilityProblemEntity.
        :rtype: CapabilityProblemEntityRecursive
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this CapabilityProblemEntity.

        Contains details about the owner of the entity that has an error.

        :param owner: The owner of this CapabilityProblemEntity.
        :type owner: CapabilityProblemEntityRecursive
        """

        self._owner = owner

    @property
    def type(self):
        """Gets the type of this CapabilityProblemEntity.

        Type of entity.   Possible values: **LegalEntity**, **BankAccount**, **Document**.

        :return: The type of this CapabilityProblemEntity.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CapabilityProblemEntity.

        Type of entity.   Possible values: **LegalEntity**, **BankAccount**, **Document**.

        :param type: The type of this CapabilityProblemEntity.
        :type type: str
        """
        allowed_values = ["BankAccount", "Document", "LegalEntity"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
