# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.authentication import Authentication
from openapi_server.models.card_configuration import CardConfiguration
from openapi_server.models.contact import Contact
from openapi_server.models.expiry import Expiry
from openapi_server import util


class Card(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, authentication: Authentication=None, bin: str=None, brand: str=None, brand_variant: str=None, cardholder_name: str=None, configuration: CardConfiguration=None, cvc: str=None, delivery_contact: Contact=None, expiration: Expiry=None, form_factor: str=None, last_four: str=None, number: str=None, three_d_secure: str=None):
        """Card - a model defined in OpenAPI

        :param authentication: The authentication of this Card.
        :param bin: The bin of this Card.
        :param brand: The brand of this Card.
        :param brand_variant: The brand_variant of this Card.
        :param cardholder_name: The cardholder_name of this Card.
        :param configuration: The configuration of this Card.
        :param cvc: The cvc of this Card.
        :param delivery_contact: The delivery_contact of this Card.
        :param expiration: The expiration of this Card.
        :param form_factor: The form_factor of this Card.
        :param last_four: The last_four of this Card.
        :param number: The number of this Card.
        :param three_d_secure: The three_d_secure of this Card.
        """
        self.openapi_types = {
            'authentication': Authentication,
            'bin': str,
            'brand': str,
            'brand_variant': str,
            'cardholder_name': str,
            'configuration': CardConfiguration,
            'cvc': str,
            'delivery_contact': Contact,
            'expiration': Expiry,
            'form_factor': str,
            'last_four': str,
            'number': str,
            'three_d_secure': str
        }

        self.attribute_map = {
            'authentication': 'authentication',
            'bin': 'bin',
            'brand': 'brand',
            'brand_variant': 'brandVariant',
            'cardholder_name': 'cardholderName',
            'configuration': 'configuration',
            'cvc': 'cvc',
            'delivery_contact': 'deliveryContact',
            'expiration': 'expiration',
            'form_factor': 'formFactor',
            'last_four': 'lastFour',
            'number': 'number',
            'three_d_secure': 'threeDSecure'
        }

        self._authentication = authentication
        self._bin = bin
        self._brand = brand
        self._brand_variant = brand_variant
        self._cardholder_name = cardholder_name
        self._configuration = configuration
        self._cvc = cvc
        self._delivery_contact = delivery_contact
        self._expiration = expiration
        self._form_factor = form_factor
        self._last_four = last_four
        self._number = number
        self._three_d_secure = three_d_secure

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Card':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Card of this Card.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def authentication(self):
        """Gets the authentication of this Card.

        Contains the card user's password and mobile phone number. This is required when you issue cards that can be used to make online payments within the EEA and the UK, or can be added to digital wallets. Refer to [3D Secure and digital wallets](https://docs.adyen.com/issuing/3d-secure-and-wallets) for more information.

        :return: The authentication of this Card.
        :rtype: Authentication
        """
        return self._authentication

    @authentication.setter
    def authentication(self, authentication):
        """Sets the authentication of this Card.

        Contains the card user's password and mobile phone number. This is required when you issue cards that can be used to make online payments within the EEA and the UK, or can be added to digital wallets. Refer to [3D Secure and digital wallets](https://docs.adyen.com/issuing/3d-secure-and-wallets) for more information.

        :param authentication: The authentication of this Card.
        :type authentication: Authentication
        """

        self._authentication = authentication

    @property
    def bin(self):
        """Gets the bin of this Card.

        The bank identification number (BIN) of the card number.

        :return: The bin of this Card.
        :rtype: str
        """
        return self._bin

    @bin.setter
    def bin(self, bin):
        """Sets the bin of this Card.

        The bank identification number (BIN) of the card number.

        :param bin: The bin of this Card.
        :type bin: str
        """

        self._bin = bin

    @property
    def brand(self):
        """Gets the brand of this Card.

        The brand of the physical or the virtual card. Possible values: **visa**, **mc**.

        :return: The brand of this Card.
        :rtype: str
        """
        return self._brand

    @brand.setter
    def brand(self, brand):
        """Sets the brand of this Card.

        The brand of the physical or the virtual card. Possible values: **visa**, **mc**.

        :param brand: The brand of this Card.
        :type brand: str
        """
        if brand is None:
            raise ValueError("Invalid value for `brand`, must not be `None`")

        self._brand = brand

    @property
    def brand_variant(self):
        """Gets the brand_variant of this Card.

        The brand variant of the physical or the virtual card. For example, **visadebit** or **mcprepaid**. >Reach out to your Adyen contact to get the values relevant for your integration.

        :return: The brand_variant of this Card.
        :rtype: str
        """
        return self._brand_variant

    @brand_variant.setter
    def brand_variant(self, brand_variant):
        """Sets the brand_variant of this Card.

        The brand variant of the physical or the virtual card. For example, **visadebit** or **mcprepaid**. >Reach out to your Adyen contact to get the values relevant for your integration.

        :param brand_variant: The brand_variant of this Card.
        :type brand_variant: str
        """
        if brand_variant is None:
            raise ValueError("Invalid value for `brand_variant`, must not be `None`")

        self._brand_variant = brand_variant

    @property
    def cardholder_name(self):
        """Gets the cardholder_name of this Card.

        The name of the cardholder.  Maximum length: 26 characters.

        :return: The cardholder_name of this Card.
        :rtype: str
        """
        return self._cardholder_name

    @cardholder_name.setter
    def cardholder_name(self, cardholder_name):
        """Sets the cardholder_name of this Card.

        The name of the cardholder.  Maximum length: 26 characters.

        :param cardholder_name: The cardholder_name of this Card.
        :type cardholder_name: str
        """
        if cardholder_name is None:
            raise ValueError("Invalid value for `cardholder_name`, must not be `None`")
        if cardholder_name is not None and len(cardholder_name) > 26:
            raise ValueError("Invalid value for `cardholder_name`, length must be less than or equal to `26`")

        self._cardholder_name = cardholder_name

    @property
    def configuration(self):
        """Gets the configuration of this Card.

        Settings required when creating a physical or a virtual card.   Reach out to your Adyen contact to get the values that you can send in this object.

        :return: The configuration of this Card.
        :rtype: CardConfiguration
        """
        return self._configuration

    @configuration.setter
    def configuration(self, configuration):
        """Sets the configuration of this Card.

        Settings required when creating a physical or a virtual card.   Reach out to your Adyen contact to get the values that you can send in this object.

        :param configuration: The configuration of this Card.
        :type configuration: CardConfiguration
        """

        self._configuration = configuration

    @property
    def cvc(self):
        """Gets the cvc of this Card.

        The CVC2 value of the card. > The CVC2 is not sent by default. This is only returned in the `POST` response for single-use virtual cards.

        :return: The cvc of this Card.
        :rtype: str
        """
        return self._cvc

    @cvc.setter
    def cvc(self, cvc):
        """Sets the cvc of this Card.

        The CVC2 value of the card. > The CVC2 is not sent by default. This is only returned in the `POST` response for single-use virtual cards.

        :param cvc: The cvc of this Card.
        :type cvc: str
        """

        self._cvc = cvc

    @property
    def delivery_contact(self):
        """Gets the delivery_contact of this Card.

        The delivery contact (name and address) for physical card delivery.

        :return: The delivery_contact of this Card.
        :rtype: Contact
        """
        return self._delivery_contact

    @delivery_contact.setter
    def delivery_contact(self, delivery_contact):
        """Sets the delivery_contact of this Card.

        The delivery contact (name and address) for physical card delivery.

        :param delivery_contact: The delivery_contact of this Card.
        :type delivery_contact: Contact
        """

        self._delivery_contact = delivery_contact

    @property
    def expiration(self):
        """Gets the expiration of this Card.

        The expiration date of the card.

        :return: The expiration of this Card.
        :rtype: Expiry
        """
        return self._expiration

    @expiration.setter
    def expiration(self, expiration):
        """Sets the expiration of this Card.

        The expiration date of the card.

        :param expiration: The expiration of this Card.
        :type expiration: Expiry
        """

        self._expiration = expiration

    @property
    def form_factor(self):
        """Gets the form_factor of this Card.

        The form factor of the card. Possible values: **virtual**, **physical**.

        :return: The form_factor of this Card.
        :rtype: str
        """
        return self._form_factor

    @form_factor.setter
    def form_factor(self, form_factor):
        """Sets the form_factor of this Card.

        The form factor of the card. Possible values: **virtual**, **physical**.

        :param form_factor: The form_factor of this Card.
        :type form_factor: str
        """
        allowed_values = ["physical", "unknown", "virtual"]  # noqa: E501
        if form_factor not in allowed_values:
            raise ValueError(
                "Invalid value for `form_factor` ({0}), must be one of {1}"
                .format(form_factor, allowed_values)
            )

        self._form_factor = form_factor

    @property
    def last_four(self):
        """Gets the last_four of this Card.

        Last last four digits of the card number.

        :return: The last_four of this Card.
        :rtype: str
        """
        return self._last_four

    @last_four.setter
    def last_four(self, last_four):
        """Sets the last_four of this Card.

        Last last four digits of the card number.

        :param last_four: The last_four of this Card.
        :type last_four: str
        """

        self._last_four = last_four

    @property
    def number(self):
        """Gets the number of this Card.

        The primary account number (PAN) of the card. > The PAN is masked by default and returned only for single-use virtual cards.

        :return: The number of this Card.
        :rtype: str
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this Card.

        The primary account number (PAN) of the card. > The PAN is masked by default and returned only for single-use virtual cards.

        :param number: The number of this Card.
        :type number: str
        """
        if number is None:
            raise ValueError("Invalid value for `number`, must not be `None`")

        self._number = number

    @property
    def three_d_secure(self):
        """Gets the three_d_secure of this Card.

        Allocates a specific product range for either a physical or a virtual card. Possible values: **fullySupported**, **secureCorporate**. >Reach out to your Adyen contact to get the values relevant for your integration.

        :return: The three_d_secure of this Card.
        :rtype: str
        """
        return self._three_d_secure

    @three_d_secure.setter
    def three_d_secure(self, three_d_secure):
        """Sets the three_d_secure of this Card.

        Allocates a specific product range for either a physical or a virtual card. Possible values: **fullySupported**, **secureCorporate**. >Reach out to your Adyen contact to get the values relevant for your integration.

        :param three_d_secure: The three_d_secure of this Card.
        :type three_d_secure: str
        """

        self._three_d_secure = three_d_secure
