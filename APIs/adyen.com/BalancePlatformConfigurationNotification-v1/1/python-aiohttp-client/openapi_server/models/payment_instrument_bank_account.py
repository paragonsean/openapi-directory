# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.iban_account_identification import IbanAccountIdentification
from openapi_server.models.us_local_account_identification import USLocalAccountIdentification
from openapi_server import util


class PaymentInstrumentBankAccount(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, form_factor: str='physical', iban: str=None, type: str='iban', account_number: str=None, account_type: str='checking', routing_number: str=None):
        """PaymentInstrumentBankAccount - a model defined in OpenAPI

        :param form_factor: The form_factor of this PaymentInstrumentBankAccount.
        :param iban: The iban of this PaymentInstrumentBankAccount.
        :param type: The type of this PaymentInstrumentBankAccount.
        :param account_number: The account_number of this PaymentInstrumentBankAccount.
        :param account_type: The account_type of this PaymentInstrumentBankAccount.
        :param routing_number: The routing_number of this PaymentInstrumentBankAccount.
        """
        self.openapi_types = {
            'form_factor': str,
            'iban': str,
            'type': str,
            'account_number': str,
            'account_type': str,
            'routing_number': str
        }

        self.attribute_map = {
            'form_factor': 'formFactor',
            'iban': 'iban',
            'type': 'type',
            'account_number': 'accountNumber',
            'account_type': 'accountType',
            'routing_number': 'routingNumber'
        }

        self._form_factor = form_factor
        self._iban = iban
        self._type = type
        self._account_number = account_number
        self._account_type = account_type
        self._routing_number = routing_number

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PaymentInstrumentBankAccount':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PaymentInstrument_bankAccount of this PaymentInstrumentBankAccount.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def form_factor(self):
        """Gets the form_factor of this PaymentInstrumentBankAccount.

        The form factor of bank account.

        :return: The form_factor of this PaymentInstrumentBankAccount.
        :rtype: str
        """
        return self._form_factor

    @form_factor.setter
    def form_factor(self, form_factor):
        """Sets the form_factor of this PaymentInstrumentBankAccount.

        The form factor of bank account.

        :param form_factor: The form_factor of this PaymentInstrumentBankAccount.
        :type form_factor: str
        """

        self._form_factor = form_factor

    @property
    def iban(self):
        """Gets the iban of this PaymentInstrumentBankAccount.

        The international bank account number as defined in the [ISO-13616](https://www.iso.org/standard/81090.html) standard.

        :return: The iban of this PaymentInstrumentBankAccount.
        :rtype: str
        """
        return self._iban

    @iban.setter
    def iban(self, iban):
        """Sets the iban of this PaymentInstrumentBankAccount.

        The international bank account number as defined in the [ISO-13616](https://www.iso.org/standard/81090.html) standard.

        :param iban: The iban of this PaymentInstrumentBankAccount.
        :type iban: str
        """
        if iban is None:
            raise ValueError("Invalid value for `iban`, must not be `None`")

        self._iban = iban

    @property
    def type(self):
        """Gets the type of this PaymentInstrumentBankAccount.

        **iban**

        :return: The type of this PaymentInstrumentBankAccount.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this PaymentInstrumentBankAccount.

        **iban**

        :param type: The type of this PaymentInstrumentBankAccount.
        :type type: str
        """
        allowed_values = ["iban", "usLocal"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def account_number(self):
        """Gets the account_number of this PaymentInstrumentBankAccount.

        The bank account number, without separators or whitespace.

        :return: The account_number of this PaymentInstrumentBankAccount.
        :rtype: str
        """
        return self._account_number

    @account_number.setter
    def account_number(self, account_number):
        """Sets the account_number of this PaymentInstrumentBankAccount.

        The bank account number, without separators or whitespace.

        :param account_number: The account_number of this PaymentInstrumentBankAccount.
        :type account_number: str
        """
        if account_number is None:
            raise ValueError("Invalid value for `account_number`, must not be `None`")
        if account_number is not None and len(account_number) > 18:
            raise ValueError("Invalid value for `account_number`, length must be less than or equal to `18`")
        if account_number is not None and len(account_number) < 2:
            raise ValueError("Invalid value for `account_number`, length must be greater than or equal to `2`")

        self._account_number = account_number

    @property
    def account_type(self):
        """Gets the account_type of this PaymentInstrumentBankAccount.

        The bank account type.  Possible values: **checking** or **savings**. Defaults to **checking**.

        :return: The account_type of this PaymentInstrumentBankAccount.
        :rtype: str
        """
        return self._account_type

    @account_type.setter
    def account_type(self, account_type):
        """Sets the account_type of this PaymentInstrumentBankAccount.

        The bank account type.  Possible values: **checking** or **savings**. Defaults to **checking**.

        :param account_type: The account_type of this PaymentInstrumentBankAccount.
        :type account_type: str
        """
        allowed_values = ["checking", "savings"]  # noqa: E501
        if account_type not in allowed_values:
            raise ValueError(
                "Invalid value for `account_type` ({0}), must be one of {1}"
                .format(account_type, allowed_values)
            )

        self._account_type = account_type

    @property
    def routing_number(self):
        """Gets the routing_number of this PaymentInstrumentBankAccount.

        The 9-digit [routing number](https://en.wikipedia.org/wiki/ABA_routing_transit_number), without separators or whitespace.

        :return: The routing_number of this PaymentInstrumentBankAccount.
        :rtype: str
        """
        return self._routing_number

    @routing_number.setter
    def routing_number(self, routing_number):
        """Sets the routing_number of this PaymentInstrumentBankAccount.

        The 9-digit [routing number](https://en.wikipedia.org/wiki/ABA_routing_transit_number), without separators or whitespace.

        :param routing_number: The routing_number of this PaymentInstrumentBankAccount.
        :type routing_number: str
        """
        if routing_number is None:
            raise ValueError("Invalid value for `routing_number`, must not be `None`")
        if routing_number is not None and len(routing_number) > 9:
            raise ValueError("Invalid value for `routing_number`, length must be less than or equal to `9`")
        if routing_number is not None and len(routing_number) < 9:
            raise ValueError("Invalid value for `routing_number`, length must be greater than or equal to `9`")

        self._routing_number = routing_number
