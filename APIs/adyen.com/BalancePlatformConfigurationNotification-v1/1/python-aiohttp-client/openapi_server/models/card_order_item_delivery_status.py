# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CardOrderItemDeliveryStatus(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, error_message: str=None, status: str=None, tracking_number: str=None):
        """CardOrderItemDeliveryStatus - a model defined in OpenAPI

        :param error_message: The error_message of this CardOrderItemDeliveryStatus.
        :param status: The status of this CardOrderItemDeliveryStatus.
        :param tracking_number: The tracking_number of this CardOrderItemDeliveryStatus.
        """
        self.openapi_types = {
            'error_message': str,
            'status': str,
            'tracking_number': str
        }

        self.attribute_map = {
            'error_message': 'errorMessage',
            'status': 'status',
            'tracking_number': 'trackingNumber'
        }

        self._error_message = error_message
        self._status = status
        self._tracking_number = tracking_number

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CardOrderItemDeliveryStatus':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CardOrderItemDeliveryStatus of this CardOrderItemDeliveryStatus.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def error_message(self):
        """Gets the error_message of this CardOrderItemDeliveryStatus.

        An error message.

        :return: The error_message of this CardOrderItemDeliveryStatus.
        :rtype: str
        """
        return self._error_message

    @error_message.setter
    def error_message(self, error_message):
        """Sets the error_message of this CardOrderItemDeliveryStatus.

        An error message.

        :param error_message: The error_message of this CardOrderItemDeliveryStatus.
        :type error_message: str
        """

        self._error_message = error_message

    @property
    def status(self):
        """Gets the status of this CardOrderItemDeliveryStatus.

        The status of the PIN delivery.

        :return: The status of this CardOrderItemDeliveryStatus.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this CardOrderItemDeliveryStatus.

        The status of the PIN delivery.

        :param status: The status of this CardOrderItemDeliveryStatus.
        :type status: str
        """
        allowed_values = ["created", "delivered", "notApplicable", "processing", "produced", "rejected", "shipped", "unknown"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def tracking_number(self):
        """Gets the tracking_number of this CardOrderItemDeliveryStatus.

        The tracking number of the PIN delivery.

        :return: The tracking_number of this CardOrderItemDeliveryStatus.
        :rtype: str
        """
        return self._tracking_number

    @tracking_number.setter
    def tracking_number(self, tracking_number):
        """Sets the tracking_number of this CardOrderItemDeliveryStatus.

        The tracking number of the PIN delivery.

        :param tracking_number: The tracking_number of this CardOrderItemDeliveryStatus.
        :type tracking_number: str
        """

        self._tracking_number = tracking_number
