# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.amount import Amount
from openapi_server.models.sweep_counterparty import SweepCounterparty
from openapi_server.models.sweep_schedule import SweepSchedule
from openapi_server import util


class SweepConfigurationV2(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, counterparty: SweepCounterparty=None, currency: str=None, description: str=None, id: str=None, reason: str=None, schedule: SweepSchedule=None, status: str=None, sweep_amount: Amount=None, target_amount: Amount=None, trigger_amount: Amount=None, type: str='push'):
        """SweepConfigurationV2 - a model defined in OpenAPI

        :param counterparty: The counterparty of this SweepConfigurationV2.
        :param currency: The currency of this SweepConfigurationV2.
        :param description: The description of this SweepConfigurationV2.
        :param id: The id of this SweepConfigurationV2.
        :param reason: The reason of this SweepConfigurationV2.
        :param schedule: The schedule of this SweepConfigurationV2.
        :param status: The status of this SweepConfigurationV2.
        :param sweep_amount: The sweep_amount of this SweepConfigurationV2.
        :param target_amount: The target_amount of this SweepConfigurationV2.
        :param trigger_amount: The trigger_amount of this SweepConfigurationV2.
        :param type: The type of this SweepConfigurationV2.
        """
        self.openapi_types = {
            'counterparty': SweepCounterparty,
            'currency': str,
            'description': str,
            'id': str,
            'reason': str,
            'schedule': SweepSchedule,
            'status': str,
            'sweep_amount': Amount,
            'target_amount': Amount,
            'trigger_amount': Amount,
            'type': str
        }

        self.attribute_map = {
            'counterparty': 'counterparty',
            'currency': 'currency',
            'description': 'description',
            'id': 'id',
            'reason': 'reason',
            'schedule': 'schedule',
            'status': 'status',
            'sweep_amount': 'sweepAmount',
            'target_amount': 'targetAmount',
            'trigger_amount': 'triggerAmount',
            'type': 'type'
        }

        self._counterparty = counterparty
        self._currency = currency
        self._description = description
        self._id = id
        self._reason = reason
        self._schedule = schedule
        self._status = status
        self._sweep_amount = sweep_amount
        self._target_amount = target_amount
        self._trigger_amount = trigger_amount
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SweepConfigurationV2':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SweepConfigurationV2 of this SweepConfigurationV2.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def counterparty(self):
        """Gets the counterparty of this SweepConfigurationV2.

        The destination or the source of the funds, depending on the sweep `type`.  Either a `balanceAccountId`, `transferInstrumentId`, or `merchantAccount` is required.

        :return: The counterparty of this SweepConfigurationV2.
        :rtype: SweepCounterparty
        """
        return self._counterparty

    @counterparty.setter
    def counterparty(self, counterparty):
        """Sets the counterparty of this SweepConfigurationV2.

        The destination or the source of the funds, depending on the sweep `type`.  Either a `balanceAccountId`, `transferInstrumentId`, or `merchantAccount` is required.

        :param counterparty: The counterparty of this SweepConfigurationV2.
        :type counterparty: SweepCounterparty
        """
        if counterparty is None:
            raise ValueError("Invalid value for `counterparty`, must not be `None`")

        self._counterparty = counterparty

    @property
    def currency(self):
        """Gets the currency of this SweepConfigurationV2.

        The three-character [ISO currency code](https://docs.adyen.com/development-resources/currency-codes) in uppercase. For example, **EUR**.  The sweep currency must match any of the [balances currencies](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/get/balanceAccounts/{id}__resParam_balances).

        :return: The currency of this SweepConfigurationV2.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this SweepConfigurationV2.

        The three-character [ISO currency code](https://docs.adyen.com/development-resources/currency-codes) in uppercase. For example, **EUR**.  The sweep currency must match any of the [balances currencies](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/get/balanceAccounts/{id}__resParam_balances).

        :param currency: The currency of this SweepConfigurationV2.
        :type currency: str
        """
        if currency is None:
            raise ValueError("Invalid value for `currency`, must not be `None`")

        self._currency = currency

    @property
    def description(self):
        """Gets the description of this SweepConfigurationV2.

        The message that will be used in the sweep transfer's description body with a maximum length of 140 characters.  If the message is longer after replacing placeholders, the message will be cut off at 140 characters.

        :return: The description of this SweepConfigurationV2.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this SweepConfigurationV2.

        The message that will be used in the sweep transfer's description body with a maximum length of 140 characters.  If the message is longer after replacing placeholders, the message will be cut off at 140 characters.

        :param description: The description of this SweepConfigurationV2.
        :type description: str
        """

        self._description = description

    @property
    def id(self):
        """Gets the id of this SweepConfigurationV2.

        The unique identifier of the sweep.

        :return: The id of this SweepConfigurationV2.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SweepConfigurationV2.

        The unique identifier of the sweep.

        :param id: The id of this SweepConfigurationV2.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def reason(self):
        """Gets the reason of this SweepConfigurationV2.

        The reason for disabling the sweep.

        :return: The reason of this SweepConfigurationV2.
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this SweepConfigurationV2.

        The reason for disabling the sweep.

        :param reason: The reason of this SweepConfigurationV2.
        :type reason: str
        """
        allowed_values = ["amountLimitExceeded", "approved", "balanceAccountTemporarilyBlockedByTransactionRule", "counterpartyAccountBlocked", "counterpartyAccountClosed", "counterpartyAccountNotFound", "counterpartyAddressRequired", "counterpartyBankTimedOut", "counterpartyBankUnavailable", "declinedByTransactionRule", "error", "notEnoughBalance", "refusedByCounterpartyBank", "routeNotFound", "scaFailed", "unknown"]  # noqa: E501
        if reason not in allowed_values:
            raise ValueError(
                "Invalid value for `reason` ({0}), must be one of {1}"
                .format(reason, allowed_values)
            )

        self._reason = reason

    @property
    def schedule(self):
        """Gets the schedule of this SweepConfigurationV2.

        The schedule when the `triggerAmount` is evaluated. If the balance meets the threshold, funds are pushed out of or pulled in to the balance account.

        :return: The schedule of this SweepConfigurationV2.
        :rtype: SweepSchedule
        """
        return self._schedule

    @schedule.setter
    def schedule(self, schedule):
        """Sets the schedule of this SweepConfigurationV2.

        The schedule when the `triggerAmount` is evaluated. If the balance meets the threshold, funds are pushed out of or pulled in to the balance account.

        :param schedule: The schedule of this SweepConfigurationV2.
        :type schedule: SweepSchedule
        """
        if schedule is None:
            raise ValueError("Invalid value for `schedule`, must not be `None`")

        self._schedule = schedule

    @property
    def status(self):
        """Gets the status of this SweepConfigurationV2.

        The status of the sweep. If not provided, by default, this is set to **active**.  Possible values:    * **active**:  the sweep is enabled and funds will be pulled in or pushed out based on the defined configuration.    * **inactive**: the sweep is disabled and cannot be triggered.   

        :return: The status of this SweepConfigurationV2.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this SweepConfigurationV2.

        The status of the sweep. If not provided, by default, this is set to **active**.  Possible values:    * **active**:  the sweep is enabled and funds will be pulled in or pushed out based on the defined configuration.    * **inactive**: the sweep is disabled and cannot be triggered.   

        :param status: The status of this SweepConfigurationV2.
        :type status: str
        """
        allowed_values = ["active", "inactive"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def sweep_amount(self):
        """Gets the sweep_amount of this SweepConfigurationV2.

        The amount that must be pushed out or pulled in. You can configure either `sweepAmount` or `targetAmount`, not both.

        :return: The sweep_amount of this SweepConfigurationV2.
        :rtype: Amount
        """
        return self._sweep_amount

    @sweep_amount.setter
    def sweep_amount(self, sweep_amount):
        """Sets the sweep_amount of this SweepConfigurationV2.

        The amount that must be pushed out or pulled in. You can configure either `sweepAmount` or `targetAmount`, not both.

        :param sweep_amount: The sweep_amount of this SweepConfigurationV2.
        :type sweep_amount: Amount
        """

        self._sweep_amount = sweep_amount

    @property
    def target_amount(self):
        """Gets the target_amount of this SweepConfigurationV2.

        The amount that must be available in the balance account after the sweep. You can configure either `sweepAmount` or `targetAmount`, not both.

        :return: The target_amount of this SweepConfigurationV2.
        :rtype: Amount
        """
        return self._target_amount

    @target_amount.setter
    def target_amount(self, target_amount):
        """Sets the target_amount of this SweepConfigurationV2.

        The amount that must be available in the balance account after the sweep. You can configure either `sweepAmount` or `targetAmount`, not both.

        :param target_amount: The target_amount of this SweepConfigurationV2.
        :type target_amount: Amount
        """

        self._target_amount = target_amount

    @property
    def trigger_amount(self):
        """Gets the trigger_amount of this SweepConfigurationV2.

        The threshold amount that triggers the sweep. If not provided, by default, the amount is set to zero. The `triggerAmount` is evaluated according to the specified `schedule.type`.  * For `type` **pull**, if the balance is less than or equal to the `triggerAmount`, funds are pulled in to the balance account.  * For `type` **push**, if the balance is more than or equal to the `triggerAmount`, funds are pushed out of the balance account.

        :return: The trigger_amount of this SweepConfigurationV2.
        :rtype: Amount
        """
        return self._trigger_amount

    @trigger_amount.setter
    def trigger_amount(self, trigger_amount):
        """Sets the trigger_amount of this SweepConfigurationV2.

        The threshold amount that triggers the sweep. If not provided, by default, the amount is set to zero. The `triggerAmount` is evaluated according to the specified `schedule.type`.  * For `type` **pull**, if the balance is less than or equal to the `triggerAmount`, funds are pulled in to the balance account.  * For `type` **push**, if the balance is more than or equal to the `triggerAmount`, funds are pushed out of the balance account.

        :param trigger_amount: The trigger_amount of this SweepConfigurationV2.
        :type trigger_amount: Amount
        """

        self._trigger_amount = trigger_amount

    @property
    def type(self):
        """Gets the type of this SweepConfigurationV2.

        The direction of sweep, whether pushing out or pulling in funds to the balance account. If not provided, by default, this is set to **push**.  Possible values:   * **push**: _push out funds_ to a destination balance account or transfer instrument.   * **pull**: _pull in funds_ from a source merchant account, transfer instrument, or balance account.

        :return: The type of this SweepConfigurationV2.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this SweepConfigurationV2.

        The direction of sweep, whether pushing out or pulling in funds to the balance account. If not provided, by default, this is set to **push**.  Possible values:   * **push**: _push out funds_ to a destination balance account or transfer instrument.   * **pull**: _pull in funds_ from a source merchant account, transfer instrument, or balance account.

        :param type: The type of this SweepConfigurationV2.
        :type type: str
        """
        allowed_values = ["pull", "push"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
