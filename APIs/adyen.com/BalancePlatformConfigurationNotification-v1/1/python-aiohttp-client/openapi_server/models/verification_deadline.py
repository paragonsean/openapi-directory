# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class VerificationDeadline(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, capabilities: List[str]=None, entity_ids: List[str]=None, expires_at: datetime=None):
        """VerificationDeadline - a model defined in OpenAPI

        :param capabilities: The capabilities of this VerificationDeadline.
        :param entity_ids: The entity_ids of this VerificationDeadline.
        :param expires_at: The expires_at of this VerificationDeadline.
        """
        self.openapi_types = {
            'capabilities': List[str],
            'entity_ids': List[str],
            'expires_at': datetime
        }

        self.attribute_map = {
            'capabilities': 'capabilities',
            'entity_ids': 'entityIds',
            'expires_at': 'expiresAt'
        }

        self._capabilities = capabilities
        self._entity_ids = entity_ids
        self._expires_at = expires_at

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VerificationDeadline':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VerificationDeadline of this VerificationDeadline.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def capabilities(self):
        """Gets the capabilities of this VerificationDeadline.

        The names of the capabilities to be disallowed.

        :return: The capabilities of this VerificationDeadline.
        :rtype: List[str]
        """
        return self._capabilities

    @capabilities.setter
    def capabilities(self, capabilities):
        """Sets the capabilities of this VerificationDeadline.

        The names of the capabilities to be disallowed.

        :param capabilities: The capabilities of this VerificationDeadline.
        :type capabilities: List[str]
        """
        allowed_values = ["acceptExternalFunding", "acceptPspFunding", "acceptTransactionInRestrictedCountries", "acceptTransactionInRestrictedCountriesCommercial", "acceptTransactionInRestrictedCountriesConsumer", "acceptTransactionInRestrictedIndustries", "acceptTransactionInRestrictedIndustriesCommercial", "acceptTransactionInRestrictedIndustriesConsumer", "acquiring", "atmWithdrawal", "atmWithdrawalCommercial", "atmWithdrawalConsumer", "atmWithdrawalInRestrictedCountries", "atmWithdrawalInRestrictedCountriesCommercial", "atmWithdrawalInRestrictedCountriesConsumer", "authorisedPaymentInstrumentUser", "getGrantOffers", "issueBankAccount", "issueCard", "issueCardCommercial", "issueCardConsumer", "localAcceptance", "payout", "payoutToTransferInstrument", "processing", "receiveFromBalanceAccount", "receiveFromPlatformPayments", "receiveFromThirdParty", "receiveFromTransferInstrument", "receiveGrants", "receivePayments", "sendToBalanceAccount", "sendToThirdParty", "sendToTransferInstrument", "thirdPartyFunding", "useCard", "useCardCommercial", "useCardConsumer", "useCardInRestrictedCountries", "useCardInRestrictedCountriesCommercial", "useCardInRestrictedCountriesConsumer", "useCardInRestrictedIndustries", "useCardInRestrictedIndustriesCommercial", "useCardInRestrictedIndustriesConsumer", "withdrawFromAtm", "withdrawFromAtmCommercial", "withdrawFromAtmConsumer", "withdrawFromAtmInRestrictedCountries", "withdrawFromAtmInRestrictedCountriesCommercial", "withdrawFromAtmInRestrictedCountriesConsumer"]  # noqa: E501
        if not set(capabilities).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `capabilities` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(capabilities) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._capabilities = capabilities

    @property
    def entity_ids(self):
        """Gets the entity_ids of this VerificationDeadline.

        The unique identifiers of the bank account(s) that the deadline applies to

        :return: The entity_ids of this VerificationDeadline.
        :rtype: List[str]
        """
        return self._entity_ids

    @entity_ids.setter
    def entity_ids(self, entity_ids):
        """Sets the entity_ids of this VerificationDeadline.

        The unique identifiers of the bank account(s) that the deadline applies to

        :param entity_ids: The entity_ids of this VerificationDeadline.
        :type entity_ids: List[str]
        """

        self._entity_ids = entity_ids

    @property
    def expires_at(self):
        """Gets the expires_at of this VerificationDeadline.

        The date that verification is due by before capabilities are disallowed.

        :return: The expires_at of this VerificationDeadline.
        :rtype: datetime
        """
        return self._expires_at

    @expires_at.setter
    def expires_at(self, expires_at):
        """Sets the expires_at of this VerificationDeadline.

        The date that verification is due by before capabilities are disallowed.

        :param expires_at: The expires_at of this VerificationDeadline.
        :type expires_at: datetime
        """
        if expires_at is None:
            raise ValueError("Invalid value for `expires_at`, must not be `None`")

        self._expires_at = expires_at
