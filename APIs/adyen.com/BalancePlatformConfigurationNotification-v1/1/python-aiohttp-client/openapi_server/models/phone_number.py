# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PhoneNumber(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, phone_country_code: str=None, phone_number: str=None, phone_type: str=None):
        """PhoneNumber - a model defined in OpenAPI

        :param phone_country_code: The phone_country_code of this PhoneNumber.
        :param phone_number: The phone_number of this PhoneNumber.
        :param phone_type: The phone_type of this PhoneNumber.
        """
        self.openapi_types = {
            'phone_country_code': str,
            'phone_number': str,
            'phone_type': str
        }

        self.attribute_map = {
            'phone_country_code': 'phoneCountryCode',
            'phone_number': 'phoneNumber',
            'phone_type': 'phoneType'
        }

        self._phone_country_code = phone_country_code
        self._phone_number = phone_number
        self._phone_type = phone_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PhoneNumber':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PhoneNumber of this PhoneNumber.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def phone_country_code(self):
        """Gets the phone_country_code of this PhoneNumber.

        The two-character ISO-3166-1 alpha-2 country code of the phone number. For example, **US** or **NL**.

        :return: The phone_country_code of this PhoneNumber.
        :rtype: str
        """
        return self._phone_country_code

    @phone_country_code.setter
    def phone_country_code(self, phone_country_code):
        """Sets the phone_country_code of this PhoneNumber.

        The two-character ISO-3166-1 alpha-2 country code of the phone number. For example, **US** or **NL**.

        :param phone_country_code: The phone_country_code of this PhoneNumber.
        :type phone_country_code: str
        """

        self._phone_country_code = phone_country_code

    @property
    def phone_number(self):
        """Gets the phone_number of this PhoneNumber.

        The phone number. The inclusion of the phone number country code is not necessary.

        :return: The phone_number of this PhoneNumber.
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """Sets the phone_number of this PhoneNumber.

        The phone number. The inclusion of the phone number country code is not necessary.

        :param phone_number: The phone_number of this PhoneNumber.
        :type phone_number: str
        """

        self._phone_number = phone_number

    @property
    def phone_type(self):
        """Gets the phone_type of this PhoneNumber.

        The type of the phone number. Possible values: **Landline**, **Mobile**, **SIP**, **Fax**.

        :return: The phone_type of this PhoneNumber.
        :rtype: str
        """
        return self._phone_type

    @phone_type.setter
    def phone_type(self, phone_type):
        """Sets the phone_type of this PhoneNumber.

        The type of the phone number. Possible values: **Landline**, **Mobile**, **SIP**, **Fax**.

        :param phone_type: The phone_type of this PhoneNumber.
        :type phone_type: str
        """
        allowed_values = ["Fax", "Landline", "Mobile", "SIP"]  # noqa: E501
        if phone_type not in allowed_values:
            raise ValueError(
                "Invalid value for `phone_type` ({0}), must be one of {1}"
                .format(phone_type, allowed_values)
            )

        self._phone_type = phone_type
