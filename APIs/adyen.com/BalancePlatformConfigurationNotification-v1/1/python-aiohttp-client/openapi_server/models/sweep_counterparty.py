# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SweepCounterparty(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, balance_account_id: str=None, merchant_account: str=None, transfer_instrument_id: str=None):
        """SweepCounterparty - a model defined in OpenAPI

        :param balance_account_id: The balance_account_id of this SweepCounterparty.
        :param merchant_account: The merchant_account of this SweepCounterparty.
        :param transfer_instrument_id: The transfer_instrument_id of this SweepCounterparty.
        """
        self.openapi_types = {
            'balance_account_id': str,
            'merchant_account': str,
            'transfer_instrument_id': str
        }

        self.attribute_map = {
            'balance_account_id': 'balanceAccountId',
            'merchant_account': 'merchantAccount',
            'transfer_instrument_id': 'transferInstrumentId'
        }

        self._balance_account_id = balance_account_id
        self._merchant_account = merchant_account
        self._transfer_instrument_id = transfer_instrument_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SweepCounterparty':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SweepCounterparty of this SweepCounterparty.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def balance_account_id(self):
        """Gets the balance_account_id of this SweepCounterparty.

        The unique identifier of the destination or source [balance account](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/post/balanceAccounts__resParam_id).   You can only use this for periodic sweep schedules such as `schedule.type` **daily** or **monthly**.

        :return: The balance_account_id of this SweepCounterparty.
        :rtype: str
        """
        return self._balance_account_id

    @balance_account_id.setter
    def balance_account_id(self, balance_account_id):
        """Sets the balance_account_id of this SweepCounterparty.

        The unique identifier of the destination or source [balance account](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/post/balanceAccounts__resParam_id).   You can only use this for periodic sweep schedules such as `schedule.type` **daily** or **monthly**.

        :param balance_account_id: The balance_account_id of this SweepCounterparty.
        :type balance_account_id: str
        """

        self._balance_account_id = balance_account_id

    @property
    def merchant_account(self):
        """Gets the merchant_account of this SweepCounterparty.

        The merchant account that will be the source of funds.  You can only use this parameter with sweeps of `type` **pull** and `schedule.type` **balance**, and if you are processing payments with Adyen.

        :return: The merchant_account of this SweepCounterparty.
        :rtype: str
        """
        return self._merchant_account

    @merchant_account.setter
    def merchant_account(self, merchant_account):
        """Sets the merchant_account of this SweepCounterparty.

        The merchant account that will be the source of funds.  You can only use this parameter with sweeps of `type` **pull** and `schedule.type` **balance**, and if you are processing payments with Adyen.

        :param merchant_account: The merchant_account of this SweepCounterparty.
        :type merchant_account: str
        """

        self._merchant_account = merchant_account

    @property
    def transfer_instrument_id(self):
        """Gets the transfer_instrument_id of this SweepCounterparty.

        The unique identifier of the destination or source [transfer instrument](https://docs.adyen.com/api-explorer/legalentity/latest/post/transferInstruments#responses-200-id) depending on the sweep `type`  . To [set up automated top-up sweeps to balance accounts](https://docs.adyen.com/marketplaces-and-platforms/top-up-balance-account/#before-you-begin), use this parameter in combination with a `merchantAccount` and a sweep `type` of **pull**. Top-up sweeps start a direct debit request from the source transfer instrument. Contact Adyen Support to enable this feature.

        :return: The transfer_instrument_id of this SweepCounterparty.
        :rtype: str
        """
        return self._transfer_instrument_id

    @transfer_instrument_id.setter
    def transfer_instrument_id(self, transfer_instrument_id):
        """Sets the transfer_instrument_id of this SweepCounterparty.

        The unique identifier of the destination or source [transfer instrument](https://docs.adyen.com/api-explorer/legalentity/latest/post/transferInstruments#responses-200-id) depending on the sweep `type`  . To [set up automated top-up sweeps to balance accounts](https://docs.adyen.com/marketplaces-and-platforms/top-up-balance-account/#before-you-begin), use this parameter in combination with a `merchantAccount` and a sweep `type` of **pull**. Top-up sweeps start a direct debit request from the source transfer instrument. Contact Adyen Support to enable this feature.

        :param transfer_instrument_id: The transfer_instrument_id of this SweepCounterparty.
        :type transfer_instrument_id: str
        """

        self._transfer_instrument_id = transfer_instrument_id
