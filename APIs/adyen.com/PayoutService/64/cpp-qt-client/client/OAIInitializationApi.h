/**
 * Adyen Payout API
 * A set of API endpoints that allow you to store payout details, confirm, or decline a payout.  For more information, refer to [Online payouts](https://docs.adyen.com/online-payments/online-payouts). ## Authentication To use the Payout API, you need to have [two API credentials](https://docs.adyen.com/online-payments/online-payouts#payouts-to-bank-accounts-and-wallets): one for storing payout details and submitting payouts, and another one for confirming or declining payouts. If you don't have the required API credentials, contact our [Support Team](https://www.adyen.help/hc/en-us/requests/new).  If using an API key, add an `X-API-Key` header with the API key as the value, for example:   ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ```  Alternatively, you can use the username and password to connect to the API using [basic authentication](https://docs.adyen.com/development-resources/api-credentials#basic-authentication).  The following example shows how to authenticate your request with basic authentication when submitting a payout:  ``` curl -U \"storePayout@Company.YOUR_COMPANY_ACCOUNT\":\"YOUR_BASIC_AUTHENTICATION_PASSWORD\" \\ -H \"Content-Type: application/json\" \\ ... ```  ## Versioning Payments API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://pal-test.adyen.com/pal/servlet/Payout/v64/payout ```  ## Going live  To authenticate to the live endpoints, you need [API credentials](https://docs.adyen.com/development-resources/api-credentials) from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account: ```  https://{PREFIX}-pal-live.adyenpayments.com/pal/servlet/Payout/v64/payout ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.
 *
 * The version of the OpenAPI document: 64
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIInitializationApi_H
#define OAI_OAIInitializationApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIServiceError.h"
#include "OAIStoreDetailAndSubmitRequest.h"
#include "OAIStoreDetailAndSubmitResponse.h"
#include "OAIStoreDetailRequest.h"
#include "OAIStoreDetailResponse.h"
#include "OAISubmitRequest.h"
#include "OAISubmitResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIInitializationApi : public QObject {
    Q_OBJECT

public:
    OAIInitializationApi(const int timeOut = 0);
    ~OAIInitializationApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_store_detail_request OAIStoreDetailRequest [optional]
    */
    virtual void postStoreDetail(const ::OpenAPI::OptionalParam<OAIStoreDetailRequest> &oai_store_detail_request = ::OpenAPI::OptionalParam<OAIStoreDetailRequest>());

    /**
    * @param[in]  oai_store_detail_and_submit_request OAIStoreDetailAndSubmitRequest [optional]
    */
    virtual void postStoreDetailAndSubmitThirdParty(const ::OpenAPI::OptionalParam<OAIStoreDetailAndSubmitRequest> &oai_store_detail_and_submit_request = ::OpenAPI::OptionalParam<OAIStoreDetailAndSubmitRequest>());

    /**
    * @param[in]  oai_submit_request OAISubmitRequest [optional]
    */
    virtual void postSubmitThirdParty(const ::OpenAPI::OptionalParam<OAISubmitRequest> &oai_submit_request = ::OpenAPI::OptionalParam<OAISubmitRequest>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void postStoreDetailCallback(OAIHttpRequestWorker *worker);
    void postStoreDetailAndSubmitThirdPartyCallback(OAIHttpRequestWorker *worker);
    void postSubmitThirdPartyCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void postStoreDetailSignal(OAIStoreDetailResponse summary);
    void postStoreDetailAndSubmitThirdPartySignal(OAIStoreDetailAndSubmitResponse summary);
    void postSubmitThirdPartySignal(OAISubmitResponse summary);


    void postStoreDetailSignalFull(OAIHttpRequestWorker *worker, OAIStoreDetailResponse summary);
    void postStoreDetailAndSubmitThirdPartySignalFull(OAIHttpRequestWorker *worker, OAIStoreDetailAndSubmitResponse summary);
    void postSubmitThirdPartySignalFull(OAIHttpRequestWorker *worker, OAISubmitResponse summary);

    Q_DECL_DEPRECATED_X("Use postStoreDetailSignalError() instead")
    void postStoreDetailSignalE(OAIStoreDetailResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postStoreDetailSignalError(OAIStoreDetailResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postStoreDetailAndSubmitThirdPartySignalError() instead")
    void postStoreDetailAndSubmitThirdPartySignalE(OAIStoreDetailAndSubmitResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postStoreDetailAndSubmitThirdPartySignalError(OAIStoreDetailAndSubmitResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postSubmitThirdPartySignalError() instead")
    void postSubmitThirdPartySignalE(OAISubmitResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postSubmitThirdPartySignalError(OAISubmitResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use postStoreDetailSignalErrorFull() instead")
    void postStoreDetailSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postStoreDetailSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postStoreDetailAndSubmitThirdPartySignalErrorFull() instead")
    void postStoreDetailAndSubmitThirdPartySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postStoreDetailAndSubmitThirdPartySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postSubmitThirdPartySignalErrorFull() instead")
    void postSubmitThirdPartySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postSubmitThirdPartySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
