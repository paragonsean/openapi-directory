/**
 * Adyen Payout API
 * A set of API endpoints that allow you to store payout details, confirm, or decline a payout.  For more information, refer to [Online payouts](https://docs.adyen.com/online-payments/online-payouts). ## Authentication To use the Payout API, you need to have [two API credentials](https://docs.adyen.com/online-payments/online-payouts#payouts-to-bank-accounts-and-wallets): one for storing payout details and submitting payouts, and another one for confirming or declining payouts. If you don't have the required API credentials, contact our [Support Team](https://www.adyen.help/hc/en-us/requests/new).  If using an API key, add an `X-API-Key` header with the API key as the value, for example:   ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ```  Alternatively, you can use the username and password to connect to the API using [basic authentication](https://docs.adyen.com/development-resources/api-credentials#basic-authentication).  The following example shows how to authenticate your request with basic authentication when submitting a payout:  ``` curl -U \"storePayout@Company.YOUR_COMPANY_ACCOUNT\":\"YOUR_BASIC_AUTHENTICATION_PASSWORD\" \\ -H \"Content-Type: application/json\" \\ ... ```  ## Versioning Payments API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://pal-test.adyen.com/pal/servlet/Payout/v64/payout ```  ## Going live  To authenticate to the live endpoints, you need [API credentials](https://docs.adyen.com/development-resources/api-credentials) from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account: ```  https://{PREFIX}-pal-live.adyenpayments.com/pal/servlet/Payout/v64/payout ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.
 *
 * The version of the OpenAPI document: 64
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStoreDetailRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStoreDetailRequest::OAIStoreDetailRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStoreDetailRequest::OAIStoreDetailRequest() {
    this->initializeModel();
}

OAIStoreDetailRequest::~OAIStoreDetailRequest() {}

void OAIStoreDetailRequest::initializeModel() {

    m_additional_data_isSet = false;
    m_additional_data_isValid = false;

    m_bank_isSet = false;
    m_bank_isValid = false;

    m_billing_address_isSet = false;
    m_billing_address_isValid = false;

    m_card_isSet = false;
    m_card_isValid = false;

    m_date_of_birth_isSet = false;
    m_date_of_birth_isValid = false;

    m_entity_type_isSet = false;
    m_entity_type_isValid = false;

    m_fraud_offset_isSet = false;
    m_fraud_offset_isValid = false;

    m_merchant_account_isSet = false;
    m_merchant_account_isValid = false;

    m_nationality_isSet = false;
    m_nationality_isValid = false;

    m_recurring_isSet = false;
    m_recurring_isValid = false;

    m_selected_brand_isSet = false;
    m_selected_brand_isValid = false;

    m_shopper_email_isSet = false;
    m_shopper_email_isValid = false;

    m_shopper_name_isSet = false;
    m_shopper_name_isValid = false;

    m_shopper_reference_isSet = false;
    m_shopper_reference_isValid = false;

    m_social_security_number_isSet = false;
    m_social_security_number_isValid = false;

    m_telephone_number_isSet = false;
    m_telephone_number_isValid = false;
}

void OAIStoreDetailRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStoreDetailRequest::fromJsonObject(QJsonObject json) {

    m_additional_data_isValid = ::OpenAPI::fromJsonValue(m_additional_data, json[QString("additionalData")]);
    m_additional_data_isSet = !json[QString("additionalData")].isNull() && m_additional_data_isValid;

    m_bank_isValid = ::OpenAPI::fromJsonValue(m_bank, json[QString("bank")]);
    m_bank_isSet = !json[QString("bank")].isNull() && m_bank_isValid;

    m_billing_address_isValid = ::OpenAPI::fromJsonValue(m_billing_address, json[QString("billingAddress")]);
    m_billing_address_isSet = !json[QString("billingAddress")].isNull() && m_billing_address_isValid;

    m_card_isValid = ::OpenAPI::fromJsonValue(m_card, json[QString("card")]);
    m_card_isSet = !json[QString("card")].isNull() && m_card_isValid;

    m_date_of_birth_isValid = ::OpenAPI::fromJsonValue(m_date_of_birth, json[QString("dateOfBirth")]);
    m_date_of_birth_isSet = !json[QString("dateOfBirth")].isNull() && m_date_of_birth_isValid;

    m_entity_type_isValid = ::OpenAPI::fromJsonValue(m_entity_type, json[QString("entityType")]);
    m_entity_type_isSet = !json[QString("entityType")].isNull() && m_entity_type_isValid;

    m_fraud_offset_isValid = ::OpenAPI::fromJsonValue(m_fraud_offset, json[QString("fraudOffset")]);
    m_fraud_offset_isSet = !json[QString("fraudOffset")].isNull() && m_fraud_offset_isValid;

    m_merchant_account_isValid = ::OpenAPI::fromJsonValue(m_merchant_account, json[QString("merchantAccount")]);
    m_merchant_account_isSet = !json[QString("merchantAccount")].isNull() && m_merchant_account_isValid;

    m_nationality_isValid = ::OpenAPI::fromJsonValue(m_nationality, json[QString("nationality")]);
    m_nationality_isSet = !json[QString("nationality")].isNull() && m_nationality_isValid;

    m_recurring_isValid = ::OpenAPI::fromJsonValue(m_recurring, json[QString("recurring")]);
    m_recurring_isSet = !json[QString("recurring")].isNull() && m_recurring_isValid;

    m_selected_brand_isValid = ::OpenAPI::fromJsonValue(m_selected_brand, json[QString("selectedBrand")]);
    m_selected_brand_isSet = !json[QString("selectedBrand")].isNull() && m_selected_brand_isValid;

    m_shopper_email_isValid = ::OpenAPI::fromJsonValue(m_shopper_email, json[QString("shopperEmail")]);
    m_shopper_email_isSet = !json[QString("shopperEmail")].isNull() && m_shopper_email_isValid;

    m_shopper_name_isValid = ::OpenAPI::fromJsonValue(m_shopper_name, json[QString("shopperName")]);
    m_shopper_name_isSet = !json[QString("shopperName")].isNull() && m_shopper_name_isValid;

    m_shopper_reference_isValid = ::OpenAPI::fromJsonValue(m_shopper_reference, json[QString("shopperReference")]);
    m_shopper_reference_isSet = !json[QString("shopperReference")].isNull() && m_shopper_reference_isValid;

    m_social_security_number_isValid = ::OpenAPI::fromJsonValue(m_social_security_number, json[QString("socialSecurityNumber")]);
    m_social_security_number_isSet = !json[QString("socialSecurityNumber")].isNull() && m_social_security_number_isValid;

    m_telephone_number_isValid = ::OpenAPI::fromJsonValue(m_telephone_number, json[QString("telephoneNumber")]);
    m_telephone_number_isSet = !json[QString("telephoneNumber")].isNull() && m_telephone_number_isValid;
}

QString OAIStoreDetailRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStoreDetailRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_additional_data.size() > 0) {
        obj.insert(QString("additionalData"), ::OpenAPI::toJsonValue(m_additional_data));
    }
    if (m_bank.isSet()) {
        obj.insert(QString("bank"), ::OpenAPI::toJsonValue(m_bank));
    }
    if (m_billing_address.isSet()) {
        obj.insert(QString("billingAddress"), ::OpenAPI::toJsonValue(m_billing_address));
    }
    if (m_card.isSet()) {
        obj.insert(QString("card"), ::OpenAPI::toJsonValue(m_card));
    }
    if (m_date_of_birth_isSet) {
        obj.insert(QString("dateOfBirth"), ::OpenAPI::toJsonValue(m_date_of_birth));
    }
    if (m_entity_type_isSet) {
        obj.insert(QString("entityType"), ::OpenAPI::toJsonValue(m_entity_type));
    }
    if (m_fraud_offset_isSet) {
        obj.insert(QString("fraudOffset"), ::OpenAPI::toJsonValue(m_fraud_offset));
    }
    if (m_merchant_account_isSet) {
        obj.insert(QString("merchantAccount"), ::OpenAPI::toJsonValue(m_merchant_account));
    }
    if (m_nationality_isSet) {
        obj.insert(QString("nationality"), ::OpenAPI::toJsonValue(m_nationality));
    }
    if (m_recurring.isSet()) {
        obj.insert(QString("recurring"), ::OpenAPI::toJsonValue(m_recurring));
    }
    if (m_selected_brand_isSet) {
        obj.insert(QString("selectedBrand"), ::OpenAPI::toJsonValue(m_selected_brand));
    }
    if (m_shopper_email_isSet) {
        obj.insert(QString("shopperEmail"), ::OpenAPI::toJsonValue(m_shopper_email));
    }
    if (m_shopper_name.isSet()) {
        obj.insert(QString("shopperName"), ::OpenAPI::toJsonValue(m_shopper_name));
    }
    if (m_shopper_reference_isSet) {
        obj.insert(QString("shopperReference"), ::OpenAPI::toJsonValue(m_shopper_reference));
    }
    if (m_social_security_number_isSet) {
        obj.insert(QString("socialSecurityNumber"), ::OpenAPI::toJsonValue(m_social_security_number));
    }
    if (m_telephone_number_isSet) {
        obj.insert(QString("telephoneNumber"), ::OpenAPI::toJsonValue(m_telephone_number));
    }
    return obj;
}

QMap<QString, QString> OAIStoreDetailRequest::getAdditionalData() const {
    return m_additional_data;
}
void OAIStoreDetailRequest::setAdditionalData(const QMap<QString, QString> &additional_data) {
    m_additional_data = additional_data;
    m_additional_data_isSet = true;
}

bool OAIStoreDetailRequest::is_additional_data_Set() const{
    return m_additional_data_isSet;
}

bool OAIStoreDetailRequest::is_additional_data_Valid() const{
    return m_additional_data_isValid;
}

OAIBankAccount OAIStoreDetailRequest::getBank() const {
    return m_bank;
}
void OAIStoreDetailRequest::setBank(const OAIBankAccount &bank) {
    m_bank = bank;
    m_bank_isSet = true;
}

bool OAIStoreDetailRequest::is_bank_Set() const{
    return m_bank_isSet;
}

bool OAIStoreDetailRequest::is_bank_Valid() const{
    return m_bank_isValid;
}

OAIAddress OAIStoreDetailRequest::getBillingAddress() const {
    return m_billing_address;
}
void OAIStoreDetailRequest::setBillingAddress(const OAIAddress &billing_address) {
    m_billing_address = billing_address;
    m_billing_address_isSet = true;
}

bool OAIStoreDetailRequest::is_billing_address_Set() const{
    return m_billing_address_isSet;
}

bool OAIStoreDetailRequest::is_billing_address_Valid() const{
    return m_billing_address_isValid;
}

OAICard OAIStoreDetailRequest::getCard() const {
    return m_card;
}
void OAIStoreDetailRequest::setCard(const OAICard &card) {
    m_card = card;
    m_card_isSet = true;
}

bool OAIStoreDetailRequest::is_card_Set() const{
    return m_card_isSet;
}

bool OAIStoreDetailRequest::is_card_Valid() const{
    return m_card_isValid;
}

QDate OAIStoreDetailRequest::getDateOfBirth() const {
    return m_date_of_birth;
}
void OAIStoreDetailRequest::setDateOfBirth(const QDate &date_of_birth) {
    m_date_of_birth = date_of_birth;
    m_date_of_birth_isSet = true;
}

bool OAIStoreDetailRequest::is_date_of_birth_Set() const{
    return m_date_of_birth_isSet;
}

bool OAIStoreDetailRequest::is_date_of_birth_Valid() const{
    return m_date_of_birth_isValid;
}

QString OAIStoreDetailRequest::getEntityType() const {
    return m_entity_type;
}
void OAIStoreDetailRequest::setEntityType(const QString &entity_type) {
    m_entity_type = entity_type;
    m_entity_type_isSet = true;
}

bool OAIStoreDetailRequest::is_entity_type_Set() const{
    return m_entity_type_isSet;
}

bool OAIStoreDetailRequest::is_entity_type_Valid() const{
    return m_entity_type_isValid;
}

qint32 OAIStoreDetailRequest::getFraudOffset() const {
    return m_fraud_offset;
}
void OAIStoreDetailRequest::setFraudOffset(const qint32 &fraud_offset) {
    m_fraud_offset = fraud_offset;
    m_fraud_offset_isSet = true;
}

bool OAIStoreDetailRequest::is_fraud_offset_Set() const{
    return m_fraud_offset_isSet;
}

bool OAIStoreDetailRequest::is_fraud_offset_Valid() const{
    return m_fraud_offset_isValid;
}

QString OAIStoreDetailRequest::getMerchantAccount() const {
    return m_merchant_account;
}
void OAIStoreDetailRequest::setMerchantAccount(const QString &merchant_account) {
    m_merchant_account = merchant_account;
    m_merchant_account_isSet = true;
}

bool OAIStoreDetailRequest::is_merchant_account_Set() const{
    return m_merchant_account_isSet;
}

bool OAIStoreDetailRequest::is_merchant_account_Valid() const{
    return m_merchant_account_isValid;
}

QString OAIStoreDetailRequest::getNationality() const {
    return m_nationality;
}
void OAIStoreDetailRequest::setNationality(const QString &nationality) {
    m_nationality = nationality;
    m_nationality_isSet = true;
}

bool OAIStoreDetailRequest::is_nationality_Set() const{
    return m_nationality_isSet;
}

bool OAIStoreDetailRequest::is_nationality_Valid() const{
    return m_nationality_isValid;
}

OAIRecurring OAIStoreDetailRequest::getRecurring() const {
    return m_recurring;
}
void OAIStoreDetailRequest::setRecurring(const OAIRecurring &recurring) {
    m_recurring = recurring;
    m_recurring_isSet = true;
}

bool OAIStoreDetailRequest::is_recurring_Set() const{
    return m_recurring_isSet;
}

bool OAIStoreDetailRequest::is_recurring_Valid() const{
    return m_recurring_isValid;
}

QString OAIStoreDetailRequest::getSelectedBrand() const {
    return m_selected_brand;
}
void OAIStoreDetailRequest::setSelectedBrand(const QString &selected_brand) {
    m_selected_brand = selected_brand;
    m_selected_brand_isSet = true;
}

bool OAIStoreDetailRequest::is_selected_brand_Set() const{
    return m_selected_brand_isSet;
}

bool OAIStoreDetailRequest::is_selected_brand_Valid() const{
    return m_selected_brand_isValid;
}

QString OAIStoreDetailRequest::getShopperEmail() const {
    return m_shopper_email;
}
void OAIStoreDetailRequest::setShopperEmail(const QString &shopper_email) {
    m_shopper_email = shopper_email;
    m_shopper_email_isSet = true;
}

bool OAIStoreDetailRequest::is_shopper_email_Set() const{
    return m_shopper_email_isSet;
}

bool OAIStoreDetailRequest::is_shopper_email_Valid() const{
    return m_shopper_email_isValid;
}

OAIName OAIStoreDetailRequest::getShopperName() const {
    return m_shopper_name;
}
void OAIStoreDetailRequest::setShopperName(const OAIName &shopper_name) {
    m_shopper_name = shopper_name;
    m_shopper_name_isSet = true;
}

bool OAIStoreDetailRequest::is_shopper_name_Set() const{
    return m_shopper_name_isSet;
}

bool OAIStoreDetailRequest::is_shopper_name_Valid() const{
    return m_shopper_name_isValid;
}

QString OAIStoreDetailRequest::getShopperReference() const {
    return m_shopper_reference;
}
void OAIStoreDetailRequest::setShopperReference(const QString &shopper_reference) {
    m_shopper_reference = shopper_reference;
    m_shopper_reference_isSet = true;
}

bool OAIStoreDetailRequest::is_shopper_reference_Set() const{
    return m_shopper_reference_isSet;
}

bool OAIStoreDetailRequest::is_shopper_reference_Valid() const{
    return m_shopper_reference_isValid;
}

QString OAIStoreDetailRequest::getSocialSecurityNumber() const {
    return m_social_security_number;
}
void OAIStoreDetailRequest::setSocialSecurityNumber(const QString &social_security_number) {
    m_social_security_number = social_security_number;
    m_social_security_number_isSet = true;
}

bool OAIStoreDetailRequest::is_social_security_number_Set() const{
    return m_social_security_number_isSet;
}

bool OAIStoreDetailRequest::is_social_security_number_Valid() const{
    return m_social_security_number_isValid;
}

QString OAIStoreDetailRequest::getTelephoneNumber() const {
    return m_telephone_number;
}
void OAIStoreDetailRequest::setTelephoneNumber(const QString &telephone_number) {
    m_telephone_number = telephone_number;
    m_telephone_number_isSet = true;
}

bool OAIStoreDetailRequest::is_telephone_number_Set() const{
    return m_telephone_number_isSet;
}

bool OAIStoreDetailRequest::is_telephone_number_Valid() const{
    return m_telephone_number_isValid;
}

bool OAIStoreDetailRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_additional_data.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_bank.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_billing_address.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_card.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_of_birth_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_entity_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fraud_offset_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_merchant_account_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_nationality_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recurring.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_selected_brand_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shopper_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shopper_name.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_shopper_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_social_security_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_telephone_number_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStoreDetailRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_date_of_birth_isValid && m_entity_type_isValid && m_merchant_account_isValid && m_nationality_isValid && m_recurring_isValid && m_shopper_email_isValid && m_shopper_reference_isValid && true;
}

} // namespace OpenAPI
