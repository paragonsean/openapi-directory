/**
 * Adyen Payout API
 * A set of API endpoints that allow you to store payout details, confirm, or decline a payout.  For more information, refer to [Online payouts](https://docs.adyen.com/online-payments/online-payouts). ## Authentication To use the Payout API, you need to have [two API credentials](https://docs.adyen.com/online-payments/online-payouts#payouts-to-bank-accounts-and-wallets): one for storing payout details and submitting payouts, and another one for confirming or declining payouts. If you don't have the required API credentials, contact our [Support Team](https://www.adyen.help/hc/en-us/requests/new).  If using an API key, add an `X-API-Key` header with the API key as the value, for example:   ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ```  Alternatively, you can use the username and password to connect to the API using [basic authentication](https://docs.adyen.com/development-resources/api-credentials#basic-authentication).  The following example shows how to authenticate your request with basic authentication when submitting a payout:  ``` curl -U \"storePayout@Company.YOUR_COMPANY_ACCOUNT\":\"YOUR_BASIC_AUTHENTICATION_PASSWORD\" \\ -H \"Content-Type: application/json\" \\ ... ```  ## Versioning Payments API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://pal-test.adyen.com/pal/servlet/Payout/v64/payout ```  ## Going live  To authenticate to the live endpoints, you need [API credentials](https://docs.adyen.com/development-resources/api-credentials) from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account: ```  https://{PREFIX}-pal-live.adyenpayments.com/pal/servlet/Payout/v64/payout ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.
 *
 * The version of the OpenAPI document: 64
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Address from './Address';
import BankAccount from './BankAccount';
import Card from './Card';
import Name from './Name';
import Recurring from './Recurring';

/**
 * The StoreDetailRequest model module.
 * @module model/StoreDetailRequest
 * @version 64
 */
class StoreDetailRequest {
    /**
     * Constructs a new <code>StoreDetailRequest</code>.
     * @alias module:model/StoreDetailRequest
     * @param dateOfBirth {Date} The date of birth. Format: [ISO-8601](https://www.w3.org/TR/NOTE-datetime); example: YYYY-MM-DD For Paysafecard it must be the same as used when registering the Paysafecard account. > This field is mandatory for natural persons.
     * @param entityType {module:model/StoreDetailRequest.EntityTypeEnum} The type of the entity the payout is processed for.
     * @param merchantAccount {String} The merchant account identifier, with which you want to process the transaction.
     * @param nationality {String} The shopper's nationality.  A valid value is an ISO 2-character country code (e.g. 'NL').
     * @param recurring {module:model/Recurring} A container for the type of recurring contract to be retrieved.  The recurring.contract must be set to `PAYOUT`
     * @param shopperEmail {String} The shopper's email address.
     * @param shopperReference {String} The shopper's reference for the payment transaction.
     */
    constructor(dateOfBirth, entityType, merchantAccount, nationality, recurring, shopperEmail, shopperReference) { 
        
        StoreDetailRequest.initialize(this, dateOfBirth, entityType, merchantAccount, nationality, recurring, shopperEmail, shopperReference);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, dateOfBirth, entityType, merchantAccount, nationality, recurring, shopperEmail, shopperReference) { 
        obj['dateOfBirth'] = dateOfBirth;
        obj['entityType'] = entityType;
        obj['merchantAccount'] = merchantAccount;
        obj['nationality'] = nationality;
        obj['recurring'] = recurring;
        obj['shopperEmail'] = shopperEmail;
        obj['shopperReference'] = shopperReference;
    }

    /**
     * Constructs a <code>StoreDetailRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/StoreDetailRequest} obj Optional instance to populate.
     * @return {module:model/StoreDetailRequest} The populated <code>StoreDetailRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new StoreDetailRequest();

            if (data.hasOwnProperty('additionalData')) {
                obj['additionalData'] = ApiClient.convertToType(data['additionalData'], {'String': 'String'});
            }
            if (data.hasOwnProperty('bank')) {
                obj['bank'] = BankAccount.constructFromObject(data['bank']);
            }
            if (data.hasOwnProperty('billingAddress')) {
                obj['billingAddress'] = Address.constructFromObject(data['billingAddress']);
            }
            if (data.hasOwnProperty('card')) {
                obj['card'] = Card.constructFromObject(data['card']);
            }
            if (data.hasOwnProperty('dateOfBirth')) {
                obj['dateOfBirth'] = ApiClient.convertToType(data['dateOfBirth'], 'Date');
            }
            if (data.hasOwnProperty('entityType')) {
                obj['entityType'] = ApiClient.convertToType(data['entityType'], 'String');
            }
            if (data.hasOwnProperty('fraudOffset')) {
                obj['fraudOffset'] = ApiClient.convertToType(data['fraudOffset'], 'Number');
            }
            if (data.hasOwnProperty('merchantAccount')) {
                obj['merchantAccount'] = ApiClient.convertToType(data['merchantAccount'], 'String');
            }
            if (data.hasOwnProperty('nationality')) {
                obj['nationality'] = ApiClient.convertToType(data['nationality'], 'String');
            }
            if (data.hasOwnProperty('recurring')) {
                obj['recurring'] = Recurring.constructFromObject(data['recurring']);
            }
            if (data.hasOwnProperty('selectedBrand')) {
                obj['selectedBrand'] = ApiClient.convertToType(data['selectedBrand'], 'String');
            }
            if (data.hasOwnProperty('shopperEmail')) {
                obj['shopperEmail'] = ApiClient.convertToType(data['shopperEmail'], 'String');
            }
            if (data.hasOwnProperty('shopperName')) {
                obj['shopperName'] = Name.constructFromObject(data['shopperName']);
            }
            if (data.hasOwnProperty('shopperReference')) {
                obj['shopperReference'] = ApiClient.convertToType(data['shopperReference'], 'String');
            }
            if (data.hasOwnProperty('socialSecurityNumber')) {
                obj['socialSecurityNumber'] = ApiClient.convertToType(data['socialSecurityNumber'], 'String');
            }
            if (data.hasOwnProperty('telephoneNumber')) {
                obj['telephoneNumber'] = ApiClient.convertToType(data['telephoneNumber'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>StoreDetailRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>StoreDetailRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of StoreDetailRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `bank`
        if (data['bank']) { // data not null
          BankAccount.validateJSON(data['bank']);
        }
        // validate the optional field `billingAddress`
        if (data['billingAddress']) { // data not null
          Address.validateJSON(data['billingAddress']);
        }
        // validate the optional field `card`
        if (data['card']) { // data not null
          Card.validateJSON(data['card']);
        }
        // ensure the json data is a string
        if (data['entityType'] && !(typeof data['entityType'] === 'string' || data['entityType'] instanceof String)) {
            throw new Error("Expected the field `entityType` to be a primitive type in the JSON string but got " + data['entityType']);
        }
        // ensure the json data is a string
        if (data['merchantAccount'] && !(typeof data['merchantAccount'] === 'string' || data['merchantAccount'] instanceof String)) {
            throw new Error("Expected the field `merchantAccount` to be a primitive type in the JSON string but got " + data['merchantAccount']);
        }
        // ensure the json data is a string
        if (data['nationality'] && !(typeof data['nationality'] === 'string' || data['nationality'] instanceof String)) {
            throw new Error("Expected the field `nationality` to be a primitive type in the JSON string but got " + data['nationality']);
        }
        // validate the optional field `recurring`
        if (data['recurring']) { // data not null
          Recurring.validateJSON(data['recurring']);
        }
        // ensure the json data is a string
        if (data['selectedBrand'] && !(typeof data['selectedBrand'] === 'string' || data['selectedBrand'] instanceof String)) {
            throw new Error("Expected the field `selectedBrand` to be a primitive type in the JSON string but got " + data['selectedBrand']);
        }
        // ensure the json data is a string
        if (data['shopperEmail'] && !(typeof data['shopperEmail'] === 'string' || data['shopperEmail'] instanceof String)) {
            throw new Error("Expected the field `shopperEmail` to be a primitive type in the JSON string but got " + data['shopperEmail']);
        }
        // validate the optional field `shopperName`
        if (data['shopperName']) { // data not null
          Name.validateJSON(data['shopperName']);
        }
        // ensure the json data is a string
        if (data['shopperReference'] && !(typeof data['shopperReference'] === 'string' || data['shopperReference'] instanceof String)) {
            throw new Error("Expected the field `shopperReference` to be a primitive type in the JSON string but got " + data['shopperReference']);
        }
        // ensure the json data is a string
        if (data['socialSecurityNumber'] && !(typeof data['socialSecurityNumber'] === 'string' || data['socialSecurityNumber'] instanceof String)) {
            throw new Error("Expected the field `socialSecurityNumber` to be a primitive type in the JSON string but got " + data['socialSecurityNumber']);
        }
        // ensure the json data is a string
        if (data['telephoneNumber'] && !(typeof data['telephoneNumber'] === 'string' || data['telephoneNumber'] instanceof String)) {
            throw new Error("Expected the field `telephoneNumber` to be a primitive type in the JSON string but got " + data['telephoneNumber']);
        }

        return true;
    }


}

StoreDetailRequest.RequiredProperties = ["dateOfBirth", "entityType", "merchantAccount", "nationality", "recurring", "shopperEmail", "shopperReference"];

/**
 * This field contains additional data, which may be required for a particular request.
 * @member {Object.<String, String>} additionalData
 */
StoreDetailRequest.prototype['additionalData'] = undefined;

/**
 * A container for bank account data. > This field is mandatory if `card` is not provided.
 * @member {module:model/BankAccount} bank
 */
StoreDetailRequest.prototype['bank'] = undefined;

/**
 * The billing address.  > The `billingAddress` object is required for cross-border payouts to and from Canada. Include all of the fields within this object.
 * @member {module:model/Address} billingAddress
 */
StoreDetailRequest.prototype['billingAddress'] = undefined;

/**
 * A container for card data. > This field is mandatory if `bank` is not provided.
 * @member {module:model/Card} card
 */
StoreDetailRequest.prototype['card'] = undefined;

/**
 * The date of birth. Format: [ISO-8601](https://www.w3.org/TR/NOTE-datetime); example: YYYY-MM-DD For Paysafecard it must be the same as used when registering the Paysafecard account. > This field is mandatory for natural persons.
 * @member {Date} dateOfBirth
 */
StoreDetailRequest.prototype['dateOfBirth'] = undefined;

/**
 * The type of the entity the payout is processed for.
 * @member {module:model/StoreDetailRequest.EntityTypeEnum} entityType
 */
StoreDetailRequest.prototype['entityType'] = undefined;

/**
 * An integer value that is added to the normal fraud score. The value can be either positive or negative.
 * @member {Number} fraudOffset
 */
StoreDetailRequest.prototype['fraudOffset'] = undefined;

/**
 * The merchant account identifier, with which you want to process the transaction.
 * @member {String} merchantAccount
 */
StoreDetailRequest.prototype['merchantAccount'] = undefined;

/**
 * The shopper's nationality.  A valid value is an ISO 2-character country code (e.g. 'NL').
 * @member {String} nationality
 */
StoreDetailRequest.prototype['nationality'] = undefined;

/**
 * A container for the type of recurring contract to be retrieved.  The recurring.contract must be set to `PAYOUT`
 * @member {module:model/Recurring} recurring
 */
StoreDetailRequest.prototype['recurring'] = undefined;

/**
 * The name of the brand to make a payout to.  For Paysafecard it must be set to `paysafecard`.
 * @member {String} selectedBrand
 */
StoreDetailRequest.prototype['selectedBrand'] = undefined;

/**
 * The shopper's email address.
 * @member {String} shopperEmail
 */
StoreDetailRequest.prototype['shopperEmail'] = undefined;

/**
 * The shopper's name.  When the `entityType` is `Company`, the `shopperName.lastName` must contain the company name.
 * @member {module:model/Name} shopperName
 */
StoreDetailRequest.prototype['shopperName'] = undefined;

/**
 * The shopper's reference for the payment transaction.
 * @member {String} shopperReference
 */
StoreDetailRequest.prototype['shopperReference'] = undefined;

/**
 * The shopper's social security number.
 * @member {String} socialSecurityNumber
 */
StoreDetailRequest.prototype['socialSecurityNumber'] = undefined;

/**
 * The shopper's phone number.
 * @member {String} telephoneNumber
 */
StoreDetailRequest.prototype['telephoneNumber'] = undefined;





/**
 * Allowed values for the <code>entityType</code> property.
 * @enum {String}
 * @readonly
 */
StoreDetailRequest['EntityTypeEnum'] = {

    /**
     * value: "NaturalPerson"
     * @const
     */
    "NaturalPerson": "NaturalPerson",

    /**
     * value: "Company"
     * @const
     */
    "Company": "Company"
};



export default StoreDetailRequest;

