/**
 * Adyen Payout API
 * A set of API endpoints that allow you to store payout details, confirm, or decline a payout.  For more information, refer to [Online payouts](https://docs.adyen.com/online-payments/online-payouts). ## Authentication To use the Payout API, you need to have [two API credentials](https://docs.adyen.com/online-payments/online-payouts#payouts-to-bank-accounts-and-wallets): one for storing payout details and submitting payouts, and another one for confirming or declining payouts. If you don't have the required API credentials, contact our [Support Team](https://www.adyen.help/hc/en-us/requests/new).  If using an API key, add an `X-API-Key` header with the API key as the value, for example:   ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ```  Alternatively, you can use the username and password to connect to the API using [basic authentication](https://docs.adyen.com/development-resources/api-credentials#basic-authentication).  The following example shows how to authenticate your request with basic authentication when submitting a payout:  ``` curl -U \"storePayout@Company.YOUR_COMPANY_ACCOUNT\":\"YOUR_BASIC_AUTHENTICATION_PASSWORD\" \\ -H \"Content-Type: application/json\" \\ ... ```  ## Versioning Payments API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://pal-test.adyen.com/pal/servlet/Payout/v67/payout ```  ## Going live  To authenticate to the live endpoints, you need [API credentials](https://docs.adyen.com/development-resources/api-credentials) from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account: ```  https://{PREFIX}-pal-live.adyenpayments.com/pal/servlet/Payout/v67/payout ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.
 *
 * The version of the OpenAPI document: 67
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Card model module.
 * @module model/Card
 * @version 67
 */
class Card {
    /**
     * Constructs a new <code>Card</code>.
     * @alias module:model/Card
     */
    constructor() { 
        
        Card.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Card</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Card} obj Optional instance to populate.
     * @return {module:model/Card} The populated <code>Card</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Card();

            if (data.hasOwnProperty('cvc')) {
                obj['cvc'] = ApiClient.convertToType(data['cvc'], 'String');
            }
            if (data.hasOwnProperty('expiryMonth')) {
                obj['expiryMonth'] = ApiClient.convertToType(data['expiryMonth'], 'String');
            }
            if (data.hasOwnProperty('expiryYear')) {
                obj['expiryYear'] = ApiClient.convertToType(data['expiryYear'], 'String');
            }
            if (data.hasOwnProperty('holderName')) {
                obj['holderName'] = ApiClient.convertToType(data['holderName'], 'String');
            }
            if (data.hasOwnProperty('issueNumber')) {
                obj['issueNumber'] = ApiClient.convertToType(data['issueNumber'], 'String');
            }
            if (data.hasOwnProperty('number')) {
                obj['number'] = ApiClient.convertToType(data['number'], 'String');
            }
            if (data.hasOwnProperty('startMonth')) {
                obj['startMonth'] = ApiClient.convertToType(data['startMonth'], 'String');
            }
            if (data.hasOwnProperty('startYear')) {
                obj['startYear'] = ApiClient.convertToType(data['startYear'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Card</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Card</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['cvc'] && !(typeof data['cvc'] === 'string' || data['cvc'] instanceof String)) {
            throw new Error("Expected the field `cvc` to be a primitive type in the JSON string but got " + data['cvc']);
        }
        // ensure the json data is a string
        if (data['expiryMonth'] && !(typeof data['expiryMonth'] === 'string' || data['expiryMonth'] instanceof String)) {
            throw new Error("Expected the field `expiryMonth` to be a primitive type in the JSON string but got " + data['expiryMonth']);
        }
        // ensure the json data is a string
        if (data['expiryYear'] && !(typeof data['expiryYear'] === 'string' || data['expiryYear'] instanceof String)) {
            throw new Error("Expected the field `expiryYear` to be a primitive type in the JSON string but got " + data['expiryYear']);
        }
        // ensure the json data is a string
        if (data['holderName'] && !(typeof data['holderName'] === 'string' || data['holderName'] instanceof String)) {
            throw new Error("Expected the field `holderName` to be a primitive type in the JSON string but got " + data['holderName']);
        }
        // ensure the json data is a string
        if (data['issueNumber'] && !(typeof data['issueNumber'] === 'string' || data['issueNumber'] instanceof String)) {
            throw new Error("Expected the field `issueNumber` to be a primitive type in the JSON string but got " + data['issueNumber']);
        }
        // ensure the json data is a string
        if (data['number'] && !(typeof data['number'] === 'string' || data['number'] instanceof String)) {
            throw new Error("Expected the field `number` to be a primitive type in the JSON string but got " + data['number']);
        }
        // ensure the json data is a string
        if (data['startMonth'] && !(typeof data['startMonth'] === 'string' || data['startMonth'] instanceof String)) {
            throw new Error("Expected the field `startMonth` to be a primitive type in the JSON string but got " + data['startMonth']);
        }
        // ensure the json data is a string
        if (data['startYear'] && !(typeof data['startYear'] === 'string' || data['startYear'] instanceof String)) {
            throw new Error("Expected the field `startYear` to be a primitive type in the JSON string but got " + data['startYear']);
        }

        return true;
    }


}



/**
 * The [card verification code](https://docs.adyen.com/payments-fundamentals/payment-glossary#card-security-code-cvc-cvv-cid) (1-20 characters). Depending on the card brand, it is known also as: * CVV2/CVC2 – length: 3 digits * CID – length: 4 digits > If you are using [Client-Side Encryption](https://docs.adyen.com/classic-integration/cse-integration-ecommerce), the CVC code is present in the encrypted data. You must never post the card details to the server. > This field must be always present in a [one-click payment request](https://docs.adyen.com/classic-integration/recurring-payments). > When this value is returned in a response, it is always empty because it is not stored.
 * @member {String} cvc
 */
Card.prototype['cvc'] = undefined;

/**
 * The card expiry month. Format: 2 digits, zero-padded for single digits. For example: * 03 = March * 11 = November
 * @member {String} expiryMonth
 */
Card.prototype['expiryMonth'] = undefined;

/**
 * The card expiry year. Format: 4 digits. For example: 2020
 * @member {String} expiryYear
 */
Card.prototype['expiryYear'] = undefined;

/**
 * The name of the cardholder, as printed on the card.
 * @member {String} holderName
 */
Card.prototype['holderName'] = undefined;

/**
 * The issue number of the card (for some UK debit cards only).
 * @member {String} issueNumber
 */
Card.prototype['issueNumber'] = undefined;

/**
 * The card number (4-19 characters). Do not use any separators. When this value is returned in a response, only the last 4 digits of the card number are returned.
 * @member {String} number
 */
Card.prototype['number'] = undefined;

/**
 * The month component of the start date (for some UK debit cards only).
 * @member {String} startMonth
 */
Card.prototype['startMonth'] = undefined;

/**
 * The year component of the start date (for some UK debit cards only).
 * @member {String} startYear
 */
Card.prototype['startYear'] = undefined;






export default Card;

