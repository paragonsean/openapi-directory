/**
 * Adyen Payout API
 * A set of API endpoints that allow you to store payout details, confirm, or decline a payout.  For more information, refer to [Online payouts](https://docs.adyen.com/online-payments/online-payouts). ## Authentication To use the Payout API, you need to have [two API credentials](https://docs.adyen.com/online-payments/online-payouts#payouts-to-bank-accounts-and-wallets): one for storing payout details and submitting payouts, and another one for confirming or declining payouts. If you don't have the required API credentials, contact our [Support Team](https://www.adyen.help/hc/en-us/requests/new).  If using an API key, add an `X-API-Key` header with the API key as the value, for example:   ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ```  Alternatively, you can use the username and password to connect to the API using [basic authentication](https://docs.adyen.com/development-resources/api-credentials#basic-authentication).  The following example shows how to authenticate your request with basic authentication when submitting a payout:  ``` curl -U \"storePayout@Company.YOUR_COMPANY_ACCOUNT\":\"YOUR_BASIC_AUTHENTICATION_PASSWORD\" \\ -H \"Content-Type: application/json\" \\ ... ```  ## Versioning Payments API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://pal-test.adyen.com/pal/servlet/Payout/v67/payout ```  ## Going live  To authenticate to the live endpoints, you need [API credentials](https://docs.adyen.com/development-resources/api-credentials) from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account: ```  https://{PREFIX}-pal-live.adyenpayments.com/pal/servlet/Payout/v67/payout ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.
 *
 * The version of the OpenAPI document: 67
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Amount from './Amount';
import Name from './Name';
import Recurring from './Recurring';

/**
 * The SubmitRequest model module.
 * @module model/SubmitRequest
 * @version 67
 */
class SubmitRequest {
    /**
     * Constructs a new <code>SubmitRequest</code>.
     * @alias module:model/SubmitRequest
     * @param amount {module:model/Amount} A container object for the payable amount information of the transaction.
     * @param merchantAccount {String} The merchant account identifier you want to process the transaction request with.
     * @param recurring {module:model/Recurring} A container for the type of recurring contract to be retrieved.  The `recurring.contract` must be set to \"PAYOUT\".
     * @param reference {String} The merchant reference for this payout. This reference will be used in all communication to the merchant about the status of the payout. Although it is a good idea to make sure it is unique, this is not a requirement.
     * @param selectedRecurringDetailReference {String} This is the `recurringDetailReference` you want to use for this payout.  You can use the value LATEST to select the most recently used recurring detail.
     * @param shopperEmail {String} The shopper's email address.
     * @param shopperReference {String} The shopper's reference for the payout transaction.
     */
    constructor(amount, merchantAccount, recurring, reference, selectedRecurringDetailReference, shopperEmail, shopperReference) { 
        
        SubmitRequest.initialize(this, amount, merchantAccount, recurring, reference, selectedRecurringDetailReference, shopperEmail, shopperReference);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, amount, merchantAccount, recurring, reference, selectedRecurringDetailReference, shopperEmail, shopperReference) { 
        obj['amount'] = amount;
        obj['merchantAccount'] = merchantAccount;
        obj['recurring'] = recurring;
        obj['reference'] = reference;
        obj['selectedRecurringDetailReference'] = selectedRecurringDetailReference;
        obj['shopperEmail'] = shopperEmail;
        obj['shopperReference'] = shopperReference;
    }

    /**
     * Constructs a <code>SubmitRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SubmitRequest} obj Optional instance to populate.
     * @return {module:model/SubmitRequest} The populated <code>SubmitRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SubmitRequest();

            if (data.hasOwnProperty('additionalData')) {
                obj['additionalData'] = ApiClient.convertToType(data['additionalData'], {'String': 'String'});
            }
            if (data.hasOwnProperty('amount')) {
                obj['amount'] = Amount.constructFromObject(data['amount']);
            }
            if (data.hasOwnProperty('dateOfBirth')) {
                obj['dateOfBirth'] = ApiClient.convertToType(data['dateOfBirth'], 'Date');
            }
            if (data.hasOwnProperty('entityType')) {
                obj['entityType'] = ApiClient.convertToType(data['entityType'], 'String');
            }
            if (data.hasOwnProperty('fraudOffset')) {
                obj['fraudOffset'] = ApiClient.convertToType(data['fraudOffset'], 'Number');
            }
            if (data.hasOwnProperty('merchantAccount')) {
                obj['merchantAccount'] = ApiClient.convertToType(data['merchantAccount'], 'String');
            }
            if (data.hasOwnProperty('nationality')) {
                obj['nationality'] = ApiClient.convertToType(data['nationality'], 'String');
            }
            if (data.hasOwnProperty('recurring')) {
                obj['recurring'] = Recurring.constructFromObject(data['recurring']);
            }
            if (data.hasOwnProperty('reference')) {
                obj['reference'] = ApiClient.convertToType(data['reference'], 'String');
            }
            if (data.hasOwnProperty('selectedRecurringDetailReference')) {
                obj['selectedRecurringDetailReference'] = ApiClient.convertToType(data['selectedRecurringDetailReference'], 'String');
            }
            if (data.hasOwnProperty('shopperEmail')) {
                obj['shopperEmail'] = ApiClient.convertToType(data['shopperEmail'], 'String');
            }
            if (data.hasOwnProperty('shopperName')) {
                obj['shopperName'] = Name.constructFromObject(data['shopperName']);
            }
            if (data.hasOwnProperty('shopperReference')) {
                obj['shopperReference'] = ApiClient.convertToType(data['shopperReference'], 'String');
            }
            if (data.hasOwnProperty('shopperStatement')) {
                obj['shopperStatement'] = ApiClient.convertToType(data['shopperStatement'], 'String');
            }
            if (data.hasOwnProperty('socialSecurityNumber')) {
                obj['socialSecurityNumber'] = ApiClient.convertToType(data['socialSecurityNumber'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SubmitRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SubmitRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of SubmitRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `amount`
        if (data['amount']) { // data not null
          Amount.validateJSON(data['amount']);
        }
        // ensure the json data is a string
        if (data['entityType'] && !(typeof data['entityType'] === 'string' || data['entityType'] instanceof String)) {
            throw new Error("Expected the field `entityType` to be a primitive type in the JSON string but got " + data['entityType']);
        }
        // ensure the json data is a string
        if (data['merchantAccount'] && !(typeof data['merchantAccount'] === 'string' || data['merchantAccount'] instanceof String)) {
            throw new Error("Expected the field `merchantAccount` to be a primitive type in the JSON string but got " + data['merchantAccount']);
        }
        // ensure the json data is a string
        if (data['nationality'] && !(typeof data['nationality'] === 'string' || data['nationality'] instanceof String)) {
            throw new Error("Expected the field `nationality` to be a primitive type in the JSON string but got " + data['nationality']);
        }
        // validate the optional field `recurring`
        if (data['recurring']) { // data not null
          Recurring.validateJSON(data['recurring']);
        }
        // ensure the json data is a string
        if (data['reference'] && !(typeof data['reference'] === 'string' || data['reference'] instanceof String)) {
            throw new Error("Expected the field `reference` to be a primitive type in the JSON string but got " + data['reference']);
        }
        // ensure the json data is a string
        if (data['selectedRecurringDetailReference'] && !(typeof data['selectedRecurringDetailReference'] === 'string' || data['selectedRecurringDetailReference'] instanceof String)) {
            throw new Error("Expected the field `selectedRecurringDetailReference` to be a primitive type in the JSON string but got " + data['selectedRecurringDetailReference']);
        }
        // ensure the json data is a string
        if (data['shopperEmail'] && !(typeof data['shopperEmail'] === 'string' || data['shopperEmail'] instanceof String)) {
            throw new Error("Expected the field `shopperEmail` to be a primitive type in the JSON string but got " + data['shopperEmail']);
        }
        // validate the optional field `shopperName`
        if (data['shopperName']) { // data not null
          Name.validateJSON(data['shopperName']);
        }
        // ensure the json data is a string
        if (data['shopperReference'] && !(typeof data['shopperReference'] === 'string' || data['shopperReference'] instanceof String)) {
            throw new Error("Expected the field `shopperReference` to be a primitive type in the JSON string but got " + data['shopperReference']);
        }
        // ensure the json data is a string
        if (data['shopperStatement'] && !(typeof data['shopperStatement'] === 'string' || data['shopperStatement'] instanceof String)) {
            throw new Error("Expected the field `shopperStatement` to be a primitive type in the JSON string but got " + data['shopperStatement']);
        }
        // ensure the json data is a string
        if (data['socialSecurityNumber'] && !(typeof data['socialSecurityNumber'] === 'string' || data['socialSecurityNumber'] instanceof String)) {
            throw new Error("Expected the field `socialSecurityNumber` to be a primitive type in the JSON string but got " + data['socialSecurityNumber']);
        }

        return true;
    }


}

SubmitRequest.RequiredProperties = ["amount", "merchantAccount", "recurring", "reference", "selectedRecurringDetailReference", "shopperEmail", "shopperReference"];

/**
 * This field contains additional data, which may be required for a particular request.
 * @member {Object.<String, String>} additionalData
 */
SubmitRequest.prototype['additionalData'] = undefined;

/**
 * A container object for the payable amount information of the transaction.
 * @member {module:model/Amount} amount
 */
SubmitRequest.prototype['amount'] = undefined;

/**
 * The date of birth. Format: ISO-8601; example: YYYY-MM-DD  For Paysafecard it must be the same as used when registering the Paysafecard account.  > This field is mandatory for natural persons.  > This field is required to update the existing `dateOfBirth` that is associated with this recurring contract.
 * @member {Date} dateOfBirth
 */
SubmitRequest.prototype['dateOfBirth'] = undefined;

/**
 * The type of the entity the payout is processed for.  Allowed values: * NaturalPerson * Company > This field is required to update the existing `entityType` that is associated with this recurring contract.
 * @member {module:model/SubmitRequest.EntityTypeEnum} entityType
 */
SubmitRequest.prototype['entityType'] = undefined;

/**
 * An integer value that is added to the normal fraud score. The value can be either positive or negative.
 * @member {Number} fraudOffset
 */
SubmitRequest.prototype['fraudOffset'] = undefined;

/**
 * The merchant account identifier you want to process the transaction request with.
 * @member {String} merchantAccount
 */
SubmitRequest.prototype['merchantAccount'] = undefined;

/**
 * The shopper's nationality.  A valid value is an ISO 2-character country code (e.g. 'NL').  > This field is required to update the existing nationality that is associated with this recurring contract.
 * @member {String} nationality
 */
SubmitRequest.prototype['nationality'] = undefined;

/**
 * A container for the type of recurring contract to be retrieved.  The `recurring.contract` must be set to \"PAYOUT\".
 * @member {module:model/Recurring} recurring
 */
SubmitRequest.prototype['recurring'] = undefined;

/**
 * The merchant reference for this payout. This reference will be used in all communication to the merchant about the status of the payout. Although it is a good idea to make sure it is unique, this is not a requirement.
 * @member {String} reference
 */
SubmitRequest.prototype['reference'] = undefined;

/**
 * This is the `recurringDetailReference` you want to use for this payout.  You can use the value LATEST to select the most recently used recurring detail.
 * @member {String} selectedRecurringDetailReference
 */
SubmitRequest.prototype['selectedRecurringDetailReference'] = undefined;

/**
 * The shopper's email address.
 * @member {String} shopperEmail
 */
SubmitRequest.prototype['shopperEmail'] = undefined;

/**
 * The shopper's name.  In case the `entityType` is `Company`, the `shopperName.lastName` must contain the company name.  > This field is required to update the existing `shopperName` associated with a recurring contract.
 * @member {module:model/Name} shopperName
 */
SubmitRequest.prototype['shopperName'] = undefined;

/**
 * The shopper's reference for the payout transaction.
 * @member {String} shopperReference
 */
SubmitRequest.prototype['shopperReference'] = undefined;

/**
 * The description of this payout. This description is shown on the bank statement of the shopper (if this is supported by the chosen payment method).
 * @member {String} shopperStatement
 */
SubmitRequest.prototype['shopperStatement'] = undefined;

/**
 * The shopper's social security number.
 * @member {String} socialSecurityNumber
 */
SubmitRequest.prototype['socialSecurityNumber'] = undefined;





/**
 * Allowed values for the <code>entityType</code> property.
 * @enum {String}
 * @readonly
 */
SubmitRequest['EntityTypeEnum'] = {

    /**
     * value: "NaturalPerson"
     * @const
     */
    "NaturalPerson": "NaturalPerson",

    /**
     * value: "Company"
     * @const
     */
    "Company": "Company"
};



export default SubmitRequest;

