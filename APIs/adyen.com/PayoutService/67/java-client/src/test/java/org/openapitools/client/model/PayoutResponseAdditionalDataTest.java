/*
 * Adyen Payout API
 * A set of API endpoints that allow you to store payout details, confirm, or decline a payout.  For more information, refer to [Online payouts](https://docs.adyen.com/online-payments/online-payouts). ## Authentication To use the Payout API, you need to have [two API credentials](https://docs.adyen.com/online-payments/online-payouts#payouts-to-bank-accounts-and-wallets): one for storing payout details and submitting payouts, and another one for confirming or declining payouts. If you don't have the required API credentials, contact our [Support Team](https://www.adyen.help/hc/en-us/requests/new).  If using an API key, add an `X-API-Key` header with the API key as the value, for example:   ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ```  Alternatively, you can use the username and password to connect to the API using [basic authentication](https://docs.adyen.com/development-resources/api-credentials#basic-authentication).  The following example shows how to authenticate your request with basic authentication when submitting a payout:  ``` curl -U \"storePayout@Company.YOUR_COMPANY_ACCOUNT\":\"YOUR_BASIC_AUTHENTICATION_PASSWORD\" \\ -H \"Content-Type: application/json\" \\ ... ```  ## Versioning Payments API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://pal-test.adyen.com/pal/servlet/Payout/v67/payout ```  ## Going live  To authenticate to the live endpoints, you need [API credentials](https://docs.adyen.com/development-resources/api-credentials) from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account: ```  https://{PREFIX}-pal-live.adyenpayments.com/pal/servlet/Payout/v67/payout ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.
 *
 * The version of the OpenAPI document: 67
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ResponseAdditionalData3DSecure;
import org.openapitools.client.model.ResponseAdditionalDataBillingAddress;
import org.openapitools.client.model.ResponseAdditionalDataCard;
import org.openapitools.client.model.ResponseAdditionalDataCommon;
import org.openapitools.client.model.ResponseAdditionalDataDomesticError;
import org.openapitools.client.model.ResponseAdditionalDataInstallments;
import org.openapitools.client.model.ResponseAdditionalDataNetworkTokens;
import org.openapitools.client.model.ResponseAdditionalDataOpi;
import org.openapitools.client.model.ResponseAdditionalDataSepa;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for PayoutResponseAdditionalData
 */
public class PayoutResponseAdditionalDataTest {
    private final PayoutResponseAdditionalData model = new PayoutResponseAdditionalData();

    /**
     * Model tests for PayoutResponseAdditionalData
     */
    @Test
    public void testPayoutResponseAdditionalData() {
        // TODO: test PayoutResponseAdditionalData
    }

    /**
     * Test the property 'cardHolderInfo'
     */
    @Test
    public void cardHolderInfoTest() {
        // TODO: test cardHolderInfo
    }

    /**
     * Test the property 'cavv'
     */
    @Test
    public void cavvTest() {
        // TODO: test cavv
    }

    /**
     * Test the property 'cavvAlgorithm'
     */
    @Test
    public void cavvAlgorithmTest() {
        // TODO: test cavvAlgorithm
    }

    /**
     * Test the property 'scaExemptionRequested'
     */
    @Test
    public void scaExemptionRequestedTest() {
        // TODO: test scaExemptionRequested
    }

    /**
     * Test the property 'threeds2CardEnrolled'
     */
    @Test
    public void threeds2CardEnrolledTest() {
        // TODO: test threeds2CardEnrolled
    }

    /**
     * Test the property 'billingAddressCity'
     */
    @Test
    public void billingAddressCityTest() {
        // TODO: test billingAddressCity
    }

    /**
     * Test the property 'billingAddressCountry'
     */
    @Test
    public void billingAddressCountryTest() {
        // TODO: test billingAddressCountry
    }

    /**
     * Test the property 'billingAddressHouseNumberOrName'
     */
    @Test
    public void billingAddressHouseNumberOrNameTest() {
        // TODO: test billingAddressHouseNumberOrName
    }

    /**
     * Test the property 'billingAddressPostalCode'
     */
    @Test
    public void billingAddressPostalCodeTest() {
        // TODO: test billingAddressPostalCode
    }

    /**
     * Test the property 'billingAddressStateOrProvince'
     */
    @Test
    public void billingAddressStateOrProvinceTest() {
        // TODO: test billingAddressStateOrProvince
    }

    /**
     * Test the property 'billingAddressStreet'
     */
    @Test
    public void billingAddressStreetTest() {
        // TODO: test billingAddressStreet
    }

    /**
     * Test the property 'cardBin'
     */
    @Test
    public void cardBinTest() {
        // TODO: test cardBin
    }

    /**
     * Test the property 'cardHolderName'
     */
    @Test
    public void cardHolderNameTest() {
        // TODO: test cardHolderName
    }

    /**
     * Test the property 'cardIssuingBank'
     */
    @Test
    public void cardIssuingBankTest() {
        // TODO: test cardIssuingBank
    }

    /**
     * Test the property 'cardIssuingCountry'
     */
    @Test
    public void cardIssuingCountryTest() {
        // TODO: test cardIssuingCountry
    }

    /**
     * Test the property 'cardIssuingCurrency'
     */
    @Test
    public void cardIssuingCurrencyTest() {
        // TODO: test cardIssuingCurrency
    }

    /**
     * Test the property 'cardPaymentMethod'
     */
    @Test
    public void cardPaymentMethodTest() {
        // TODO: test cardPaymentMethod
    }

    /**
     * Test the property 'cardSummary'
     */
    @Test
    public void cardSummaryTest() {
        // TODO: test cardSummary
    }

    /**
     * Test the property 'issuerBin'
     */
    @Test
    public void issuerBinTest() {
        // TODO: test issuerBin
    }

    /**
     * Test the property 'acquirerAccountCode'
     */
    @Test
    public void acquirerAccountCodeTest() {
        // TODO: test acquirerAccountCode
    }

    /**
     * Test the property 'acquirerCode'
     */
    @Test
    public void acquirerCodeTest() {
        // TODO: test acquirerCode
    }

    /**
     * Test the property 'acquirerReference'
     */
    @Test
    public void acquirerReferenceTest() {
        // TODO: test acquirerReference
    }

    /**
     * Test the property 'alias'
     */
    @Test
    public void aliasTest() {
        // TODO: test alias
    }

    /**
     * Test the property 'aliasType'
     */
    @Test
    public void aliasTypeTest() {
        // TODO: test aliasType
    }

    /**
     * Test the property 'authCode'
     */
    @Test
    public void authCodeTest() {
        // TODO: test authCode
    }

    /**
     * Test the property 'authorisationMid'
     */
    @Test
    public void authorisationMidTest() {
        // TODO: test authorisationMid
    }

    /**
     * Test the property 'authorisedAmountCurrency'
     */
    @Test
    public void authorisedAmountCurrencyTest() {
        // TODO: test authorisedAmountCurrency
    }

    /**
     * Test the property 'authorisedAmountValue'
     */
    @Test
    public void authorisedAmountValueTest() {
        // TODO: test authorisedAmountValue
    }

    /**
     * Test the property 'avsResult'
     */
    @Test
    public void avsResultTest() {
        // TODO: test avsResult
    }

    /**
     * Test the property 'avsResultRaw'
     */
    @Test
    public void avsResultRawTest() {
        // TODO: test avsResultRaw
    }

    /**
     * Test the property 'bic'
     */
    @Test
    public void bicTest() {
        // TODO: test bic
    }

    /**
     * Test the property 'coBrandedWith'
     */
    @Test
    public void coBrandedWithTest() {
        // TODO: test coBrandedWith
    }

    /**
     * Test the property 'cvcResult'
     */
    @Test
    public void cvcResultTest() {
        // TODO: test cvcResult
    }

    /**
     * Test the property 'cvcResultRaw'
     */
    @Test
    public void cvcResultRawTest() {
        // TODO: test cvcResultRaw
    }

    /**
     * Test the property 'dsTransID'
     */
    @Test
    public void dsTransIDTest() {
        // TODO: test dsTransID
    }

    /**
     * Test the property 'eci'
     */
    @Test
    public void eciTest() {
        // TODO: test eci
    }

    /**
     * Test the property 'expiryDate'
     */
    @Test
    public void expiryDateTest() {
        // TODO: test expiryDate
    }

    /**
     * Test the property 'extraCostsCurrency'
     */
    @Test
    public void extraCostsCurrencyTest() {
        // TODO: test extraCostsCurrency
    }

    /**
     * Test the property 'extraCostsValue'
     */
    @Test
    public void extraCostsValueTest() {
        // TODO: test extraCostsValue
    }

    /**
     * Test the property 'fraudCheckItemNrFraudCheckname'
     */
    @Test
    public void fraudCheckItemNrFraudChecknameTest() {
        // TODO: test fraudCheckItemNrFraudCheckname
    }

    /**
     * Test the property 'fraudManualReview'
     */
    @Test
    public void fraudManualReviewTest() {
        // TODO: test fraudManualReview
    }

    /**
     * Test the property 'fraudResultType'
     */
    @Test
    public void fraudResultTypeTest() {
        // TODO: test fraudResultType
    }

    /**
     * Test the property 'fundingSource'
     */
    @Test
    public void fundingSourceTest() {
        // TODO: test fundingSource
    }

    /**
     * Test the property 'fundsAvailability'
     */
    @Test
    public void fundsAvailabilityTest() {
        // TODO: test fundsAvailability
    }

    /**
     * Test the property 'inferredRefusalReason'
     */
    @Test
    public void inferredRefusalReasonTest() {
        // TODO: test inferredRefusalReason
    }

    /**
     * Test the property 'isCardCommercial'
     */
    @Test
    public void isCardCommercialTest() {
        // TODO: test isCardCommercial
    }

    /**
     * Test the property 'issuerCountry'
     */
    @Test
    public void issuerCountryTest() {
        // TODO: test issuerCountry
    }

    /**
     * Test the property 'liabilityShift'
     */
    @Test
    public void liabilityShiftTest() {
        // TODO: test liabilityShift
    }

    /**
     * Test the property 'mcBankNetReferenceNumber'
     */
    @Test
    public void mcBankNetReferenceNumberTest() {
        // TODO: test mcBankNetReferenceNumber
    }

    /**
     * Test the property 'merchantAdviceCode'
     */
    @Test
    public void merchantAdviceCodeTest() {
        // TODO: test merchantAdviceCode
    }

    /**
     * Test the property 'merchantReference'
     */
    @Test
    public void merchantReferenceTest() {
        // TODO: test merchantReference
    }

    /**
     * Test the property 'networkTxReference'
     */
    @Test
    public void networkTxReferenceTest() {
        // TODO: test networkTxReference
    }

    /**
     * Test the property 'ownerName'
     */
    @Test
    public void ownerNameTest() {
        // TODO: test ownerName
    }

    /**
     * Test the property 'paymentAccountReference'
     */
    @Test
    public void paymentAccountReferenceTest() {
        // TODO: test paymentAccountReference
    }

    /**
     * Test the property 'paymentMethod'
     */
    @Test
    public void paymentMethodTest() {
        // TODO: test paymentMethod
    }

    /**
     * Test the property 'paymentMethodVariant'
     */
    @Test
    public void paymentMethodVariantTest() {
        // TODO: test paymentMethodVariant
    }

    /**
     * Test the property 'payoutEligible'
     */
    @Test
    public void payoutEligibleTest() {
        // TODO: test payoutEligible
    }

    /**
     * Test the property 'realtimeAccountUpdaterStatus'
     */
    @Test
    public void realtimeAccountUpdaterStatusTest() {
        // TODO: test realtimeAccountUpdaterStatus
    }

    /**
     * Test the property 'receiptFreeText'
     */
    @Test
    public void receiptFreeTextTest() {
        // TODO: test receiptFreeText
    }

    /**
     * Test the property 'recurringContractTypes'
     */
    @Test
    public void recurringContractTypesTest() {
        // TODO: test recurringContractTypes
    }

    /**
     * Test the property 'recurringFirstPspReference'
     */
    @Test
    public void recurringFirstPspReferenceTest() {
        // TODO: test recurringFirstPspReference
    }

    /**
     * Test the property 'recurringRecurringDetailReference'
     */
    @Test
    public void recurringRecurringDetailReferenceTest() {
        // TODO: test recurringRecurringDetailReference
    }

    /**
     * Test the property 'recurringShopperReference'
     */
    @Test
    public void recurringShopperReferenceTest() {
        // TODO: test recurringShopperReference
    }

    /**
     * Test the property 'recurringProcessingModel'
     */
    @Test
    public void recurringProcessingModelTest() {
        // TODO: test recurringProcessingModel
    }

    /**
     * Test the property 'referred'
     */
    @Test
    public void referredTest() {
        // TODO: test referred
    }

    /**
     * Test the property 'refusalReasonRaw'
     */
    @Test
    public void refusalReasonRawTest() {
        // TODO: test refusalReasonRaw
    }

    /**
     * Test the property 'requestAmount'
     */
    @Test
    public void requestAmountTest() {
        // TODO: test requestAmount
    }

    /**
     * Test the property 'requestCurrencyCode'
     */
    @Test
    public void requestCurrencyCodeTest() {
        // TODO: test requestCurrencyCode
    }

    /**
     * Test the property 'shopperInteraction'
     */
    @Test
    public void shopperInteractionTest() {
        // TODO: test shopperInteraction
    }

    /**
     * Test the property 'shopperReference'
     */
    @Test
    public void shopperReferenceTest() {
        // TODO: test shopperReference
    }

    /**
     * Test the property 'terminalId'
     */
    @Test
    public void terminalIdTest() {
        // TODO: test terminalId
    }

    /**
     * Test the property 'threeDAuthenticated'
     */
    @Test
    public void threeDAuthenticatedTest() {
        // TODO: test threeDAuthenticated
    }

    /**
     * Test the property 'threeDAuthenticatedResponse'
     */
    @Test
    public void threeDAuthenticatedResponseTest() {
        // TODO: test threeDAuthenticatedResponse
    }

    /**
     * Test the property 'threeDOffered'
     */
    @Test
    public void threeDOfferedTest() {
        // TODO: test threeDOffered
    }

    /**
     * Test the property 'threeDOfferedResponse'
     */
    @Test
    public void threeDOfferedResponseTest() {
        // TODO: test threeDOfferedResponse
    }

    /**
     * Test the property 'threeDSVersion'
     */
    @Test
    public void threeDSVersionTest() {
        // TODO: test threeDSVersion
    }

    /**
     * Test the property 'visaTransactionId'
     */
    @Test
    public void visaTransactionIdTest() {
        // TODO: test visaTransactionId
    }

    /**
     * Test the property 'xid'
     */
    @Test
    public void xidTest() {
        // TODO: test xid
    }

    /**
     * Test the property 'domesticRefusalReasonRaw'
     */
    @Test
    public void domesticRefusalReasonRawTest() {
        // TODO: test domesticRefusalReasonRaw
    }

    /**
     * Test the property 'domesticShopperAdvice'
     */
    @Test
    public void domesticShopperAdviceTest() {
        // TODO: test domesticShopperAdvice
    }

    /**
     * Test the property 'installmentPaymentDataInstallmentType'
     */
    @Test
    public void installmentPaymentDataInstallmentTypeTest() {
        // TODO: test installmentPaymentDataInstallmentType
    }

    /**
     * Test the property 'installmentPaymentDataOptionItemNrAnnualPercentageRate'
     */
    @Test
    public void installmentPaymentDataOptionItemNrAnnualPercentageRateTest() {
        // TODO: test installmentPaymentDataOptionItemNrAnnualPercentageRate
    }

    /**
     * Test the property 'installmentPaymentDataOptionItemNrFirstInstallmentAmount'
     */
    @Test
    public void installmentPaymentDataOptionItemNrFirstInstallmentAmountTest() {
        // TODO: test installmentPaymentDataOptionItemNrFirstInstallmentAmount
    }

    /**
     * Test the property 'installmentPaymentDataOptionItemNrInstallmentFee'
     */
    @Test
    public void installmentPaymentDataOptionItemNrInstallmentFeeTest() {
        // TODO: test installmentPaymentDataOptionItemNrInstallmentFee
    }

    /**
     * Test the property 'installmentPaymentDataOptionItemNrInterestRate'
     */
    @Test
    public void installmentPaymentDataOptionItemNrInterestRateTest() {
        // TODO: test installmentPaymentDataOptionItemNrInterestRate
    }

    /**
     * Test the property 'installmentPaymentDataOptionItemNrMaximumNumberOfInstallments'
     */
    @Test
    public void installmentPaymentDataOptionItemNrMaximumNumberOfInstallmentsTest() {
        // TODO: test installmentPaymentDataOptionItemNrMaximumNumberOfInstallments
    }

    /**
     * Test the property 'installmentPaymentDataOptionItemNrMinimumNumberOfInstallments'
     */
    @Test
    public void installmentPaymentDataOptionItemNrMinimumNumberOfInstallmentsTest() {
        // TODO: test installmentPaymentDataOptionItemNrMinimumNumberOfInstallments
    }

    /**
     * Test the property 'installmentPaymentDataOptionItemNrNumberOfInstallments'
     */
    @Test
    public void installmentPaymentDataOptionItemNrNumberOfInstallmentsTest() {
        // TODO: test installmentPaymentDataOptionItemNrNumberOfInstallments
    }

    /**
     * Test the property 'installmentPaymentDataOptionItemNrSubsequentInstallmentAmount'
     */
    @Test
    public void installmentPaymentDataOptionItemNrSubsequentInstallmentAmountTest() {
        // TODO: test installmentPaymentDataOptionItemNrSubsequentInstallmentAmount
    }

    /**
     * Test the property 'installmentPaymentDataOptionItemNrTotalAmountDue'
     */
    @Test
    public void installmentPaymentDataOptionItemNrTotalAmountDueTest() {
        // TODO: test installmentPaymentDataOptionItemNrTotalAmountDue
    }

    /**
     * Test the property 'installmentPaymentDataPaymentOptions'
     */
    @Test
    public void installmentPaymentDataPaymentOptionsTest() {
        // TODO: test installmentPaymentDataPaymentOptions
    }

    /**
     * Test the property 'installmentsValue'
     */
    @Test
    public void installmentsValueTest() {
        // TODO: test installmentsValue
    }

    /**
     * Test the property 'networkTokenAvailable'
     */
    @Test
    public void networkTokenAvailableTest() {
        // TODO: test networkTokenAvailable
    }

    /**
     * Test the property 'networkTokenBin'
     */
    @Test
    public void networkTokenBinTest() {
        // TODO: test networkTokenBin
    }

    /**
     * Test the property 'networkTokenTokenSummary'
     */
    @Test
    public void networkTokenTokenSummaryTest() {
        // TODO: test networkTokenTokenSummary
    }

    /**
     * Test the property 'opiTransToken'
     */
    @Test
    public void opiTransTokenTest() {
        // TODO: test opiTransToken
    }

    /**
     * Test the property 'sepadirectdebitDateOfSignature'
     */
    @Test
    public void sepadirectdebitDateOfSignatureTest() {
        // TODO: test sepadirectdebitDateOfSignature
    }

    /**
     * Test the property 'sepadirectdebitMandateId'
     */
    @Test
    public void sepadirectdebitMandateIdTest() {
        // TODO: test sepadirectdebitMandateId
    }

    /**
     * Test the property 'sepadirectdebitSequenceType'
     */
    @Test
    public void sepadirectdebitSequenceTypeTest() {
        // TODO: test sepadirectdebitSequenceType
    }

}
