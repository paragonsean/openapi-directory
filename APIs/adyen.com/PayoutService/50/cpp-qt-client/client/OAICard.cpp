/**
 * Adyen Payout API
 * A set of API endpoints that allow you to store payout details, confirm, or decline a payout.  For more information, refer to [Online payouts](https://docs.adyen.com/online-payments/online-payouts). ## Authentication To use the Payout API, you need to have [two API credentials](https://docs.adyen.com/online-payments/online-payouts#payouts-to-bank-accounts-and-wallets): one for storing payout details and submitting payouts, and another one for confirming or declining payouts. If you don't have the required API credentials, contact our [Support Team](https://www.adyen.help/hc/en-us/requests/new).  If using an API key, add an `X-API-Key` header with the API key as the value, for example:   ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ```  Alternatively, you can use the username and password to connect to the API using [basic authentication](https://docs.adyen.com/development-resources/api-credentials#basic-authentication).  The following example shows how to authenticate your request with basic authentication when submitting a payout:  ``` curl -U \"storePayout@Company.YOUR_COMPANY_ACCOUNT\":\"YOUR_BASIC_AUTHENTICATION_PASSWORD\" \\ -H \"Content-Type: application/json\" \\ ... ```  ## Versioning Payments API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://pal-test.adyen.com/pal/servlet/Payout/v50/payout ```  ## Going live  To authenticate to the live endpoints, you need [API credentials](https://docs.adyen.com/development-resources/api-credentials) from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account: ```  https://{PREFIX}-pal-live.adyenpayments.com/pal/servlet/Payout/v50/payout ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.
 *
 * The version of the OpenAPI document: 50
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICard.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICard::OAICard(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICard::OAICard() {
    this->initializeModel();
}

OAICard::~OAICard() {}

void OAICard::initializeModel() {

    m_cvc_isSet = false;
    m_cvc_isValid = false;

    m_expiry_month_isSet = false;
    m_expiry_month_isValid = false;

    m_expiry_year_isSet = false;
    m_expiry_year_isValid = false;

    m_holder_name_isSet = false;
    m_holder_name_isValid = false;

    m_issue_number_isSet = false;
    m_issue_number_isValid = false;

    m_number_isSet = false;
    m_number_isValid = false;

    m_start_month_isSet = false;
    m_start_month_isValid = false;

    m_start_year_isSet = false;
    m_start_year_isValid = false;
}

void OAICard::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICard::fromJsonObject(QJsonObject json) {

    m_cvc_isValid = ::OpenAPI::fromJsonValue(m_cvc, json[QString("cvc")]);
    m_cvc_isSet = !json[QString("cvc")].isNull() && m_cvc_isValid;

    m_expiry_month_isValid = ::OpenAPI::fromJsonValue(m_expiry_month, json[QString("expiryMonth")]);
    m_expiry_month_isSet = !json[QString("expiryMonth")].isNull() && m_expiry_month_isValid;

    m_expiry_year_isValid = ::OpenAPI::fromJsonValue(m_expiry_year, json[QString("expiryYear")]);
    m_expiry_year_isSet = !json[QString("expiryYear")].isNull() && m_expiry_year_isValid;

    m_holder_name_isValid = ::OpenAPI::fromJsonValue(m_holder_name, json[QString("holderName")]);
    m_holder_name_isSet = !json[QString("holderName")].isNull() && m_holder_name_isValid;

    m_issue_number_isValid = ::OpenAPI::fromJsonValue(m_issue_number, json[QString("issueNumber")]);
    m_issue_number_isSet = !json[QString("issueNumber")].isNull() && m_issue_number_isValid;

    m_number_isValid = ::OpenAPI::fromJsonValue(m_number, json[QString("number")]);
    m_number_isSet = !json[QString("number")].isNull() && m_number_isValid;

    m_start_month_isValid = ::OpenAPI::fromJsonValue(m_start_month, json[QString("startMonth")]);
    m_start_month_isSet = !json[QString("startMonth")].isNull() && m_start_month_isValid;

    m_start_year_isValid = ::OpenAPI::fromJsonValue(m_start_year, json[QString("startYear")]);
    m_start_year_isSet = !json[QString("startYear")].isNull() && m_start_year_isValid;
}

QString OAICard::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICard::asJsonObject() const {
    QJsonObject obj;
    if (m_cvc_isSet) {
        obj.insert(QString("cvc"), ::OpenAPI::toJsonValue(m_cvc));
    }
    if (m_expiry_month_isSet) {
        obj.insert(QString("expiryMonth"), ::OpenAPI::toJsonValue(m_expiry_month));
    }
    if (m_expiry_year_isSet) {
        obj.insert(QString("expiryYear"), ::OpenAPI::toJsonValue(m_expiry_year));
    }
    if (m_holder_name_isSet) {
        obj.insert(QString("holderName"), ::OpenAPI::toJsonValue(m_holder_name));
    }
    if (m_issue_number_isSet) {
        obj.insert(QString("issueNumber"), ::OpenAPI::toJsonValue(m_issue_number));
    }
    if (m_number_isSet) {
        obj.insert(QString("number"), ::OpenAPI::toJsonValue(m_number));
    }
    if (m_start_month_isSet) {
        obj.insert(QString("startMonth"), ::OpenAPI::toJsonValue(m_start_month));
    }
    if (m_start_year_isSet) {
        obj.insert(QString("startYear"), ::OpenAPI::toJsonValue(m_start_year));
    }
    return obj;
}

QString OAICard::getCvc() const {
    return m_cvc;
}
void OAICard::setCvc(const QString &cvc) {
    m_cvc = cvc;
    m_cvc_isSet = true;
}

bool OAICard::is_cvc_Set() const{
    return m_cvc_isSet;
}

bool OAICard::is_cvc_Valid() const{
    return m_cvc_isValid;
}

QString OAICard::getExpiryMonth() const {
    return m_expiry_month;
}
void OAICard::setExpiryMonth(const QString &expiry_month) {
    m_expiry_month = expiry_month;
    m_expiry_month_isSet = true;
}

bool OAICard::is_expiry_month_Set() const{
    return m_expiry_month_isSet;
}

bool OAICard::is_expiry_month_Valid() const{
    return m_expiry_month_isValid;
}

QString OAICard::getExpiryYear() const {
    return m_expiry_year;
}
void OAICard::setExpiryYear(const QString &expiry_year) {
    m_expiry_year = expiry_year;
    m_expiry_year_isSet = true;
}

bool OAICard::is_expiry_year_Set() const{
    return m_expiry_year_isSet;
}

bool OAICard::is_expiry_year_Valid() const{
    return m_expiry_year_isValid;
}

QString OAICard::getHolderName() const {
    return m_holder_name;
}
void OAICard::setHolderName(const QString &holder_name) {
    m_holder_name = holder_name;
    m_holder_name_isSet = true;
}

bool OAICard::is_holder_name_Set() const{
    return m_holder_name_isSet;
}

bool OAICard::is_holder_name_Valid() const{
    return m_holder_name_isValid;
}

QString OAICard::getIssueNumber() const {
    return m_issue_number;
}
void OAICard::setIssueNumber(const QString &issue_number) {
    m_issue_number = issue_number;
    m_issue_number_isSet = true;
}

bool OAICard::is_issue_number_Set() const{
    return m_issue_number_isSet;
}

bool OAICard::is_issue_number_Valid() const{
    return m_issue_number_isValid;
}

QString OAICard::getNumber() const {
    return m_number;
}
void OAICard::setNumber(const QString &number) {
    m_number = number;
    m_number_isSet = true;
}

bool OAICard::is_number_Set() const{
    return m_number_isSet;
}

bool OAICard::is_number_Valid() const{
    return m_number_isValid;
}

QString OAICard::getStartMonth() const {
    return m_start_month;
}
void OAICard::setStartMonth(const QString &start_month) {
    m_start_month = start_month;
    m_start_month_isSet = true;
}

bool OAICard::is_start_month_Set() const{
    return m_start_month_isSet;
}

bool OAICard::is_start_month_Valid() const{
    return m_start_month_isValid;
}

QString OAICard::getStartYear() const {
    return m_start_year;
}
void OAICard::setStartYear(const QString &start_year) {
    m_start_year = start_year;
    m_start_year_isSet = true;
}

bool OAICard::is_start_year_Set() const{
    return m_start_year_isSet;
}

bool OAICard::is_start_year_Valid() const{
    return m_start_year_isValid;
}

bool OAICard::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cvc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expiry_month_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expiry_year_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_holder_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_issue_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_month_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_year_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICard::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
