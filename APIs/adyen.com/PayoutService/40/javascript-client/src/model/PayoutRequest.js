/**
 * Adyen Payout API
 * A set of API endpoints that allow you to store payout details, confirm, or decline a payout.  For more information, refer to [Online payouts](https://docs.adyen.com/online-payments/online-payouts). ## Authentication To use the Payout API, you need to have [two API credentials](https://docs.adyen.com/online-payments/online-payouts#payouts-to-bank-accounts-and-wallets): one for storing payout details and submitting payouts, and another one for confirming or declining payouts. If you don't have the required API credentials, contact our [Support Team](https://www.adyen.help/hc/en-us/requests/new).  If using an API key, add an `X-API-Key` header with the API key as the value, for example:   ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ```  Alternatively, you can use the username and password to connect to the API using [basic authentication](https://docs.adyen.com/development-resources/api-credentials#basic-authentication).  The following example shows how to authenticate your request with basic authentication when submitting a payout:  ``` curl -U \"storePayout@Company.YOUR_COMPANY_ACCOUNT\":\"YOUR_BASIC_AUTHENTICATION_PASSWORD\" \\ -H \"Content-Type: application/json\" \\ ... ```  ## Versioning Payments API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://pal-test.adyen.com/pal/servlet/Payout/v40/payout ```  ## Going live  To authenticate to the live endpoints, you need [API credentials](https://docs.adyen.com/development-resources/api-credentials) from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account: ```  https://{PREFIX}-pal-live.adyenpayments.com/pal/servlet/Payout/v40/payout ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.
 *
 * The version of the OpenAPI document: 40
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Address from './Address';
import Amount from './Amount';
import Card from './Card';
import FundSource from './FundSource';
import Name from './Name';
import Recurring from './Recurring';

/**
 * The PayoutRequest model module.
 * @module model/PayoutRequest
 * @version 40
 */
class PayoutRequest {
    /**
     * Constructs a new <code>PayoutRequest</code>.
     * @alias module:model/PayoutRequest
     * @param amount {module:model/Amount} The amount information for the transaction (in [minor units](https://docs.adyen.com/development-resources/currency-codes)). For [BIN or card verification](https://docs.adyen.com/payment-methods/cards/bin-data-and-card-verification) requests, set amount to 0 (zero).
     * @param merchantAccount {String} The merchant account identifier, with which you want to process the transaction.
     * @param reference {String} The reference to uniquely identify a payment. This reference is used in all communication with you about the payment status. We recommend using a unique value per payment; however, it is not a requirement. If you need to provide multiple references for a transaction, separate them with hyphens (\"-\"). Maximum length: 80 characters.
     */
    constructor(amount, merchantAccount, reference) { 
        
        PayoutRequest.initialize(this, amount, merchantAccount, reference);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, amount, merchantAccount, reference) { 
        obj['amount'] = amount;
        obj['merchantAccount'] = merchantAccount;
        obj['reference'] = reference;
    }

    /**
     * Constructs a <code>PayoutRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PayoutRequest} obj Optional instance to populate.
     * @return {module:model/PayoutRequest} The populated <code>PayoutRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PayoutRequest();

            if (data.hasOwnProperty('amount')) {
                obj['amount'] = Amount.constructFromObject(data['amount']);
            }
            if (data.hasOwnProperty('billingAddress')) {
                obj['billingAddress'] = Address.constructFromObject(data['billingAddress']);
            }
            if (data.hasOwnProperty('card')) {
                obj['card'] = Card.constructFromObject(data['card']);
            }
            if (data.hasOwnProperty('fraudOffset')) {
                obj['fraudOffset'] = ApiClient.convertToType(data['fraudOffset'], 'Number');
            }
            if (data.hasOwnProperty('fundSource')) {
                obj['fundSource'] = FundSource.constructFromObject(data['fundSource']);
            }
            if (data.hasOwnProperty('merchantAccount')) {
                obj['merchantAccount'] = ApiClient.convertToType(data['merchantAccount'], 'String');
            }
            if (data.hasOwnProperty('recurring')) {
                obj['recurring'] = Recurring.constructFromObject(data['recurring']);
            }
            if (data.hasOwnProperty('reference')) {
                obj['reference'] = ApiClient.convertToType(data['reference'], 'String');
            }
            if (data.hasOwnProperty('selectedRecurringDetailReference')) {
                obj['selectedRecurringDetailReference'] = ApiClient.convertToType(data['selectedRecurringDetailReference'], 'String');
            }
            if (data.hasOwnProperty('shopperEmail')) {
                obj['shopperEmail'] = ApiClient.convertToType(data['shopperEmail'], 'String');
            }
            if (data.hasOwnProperty('shopperInteraction')) {
                obj['shopperInteraction'] = ApiClient.convertToType(data['shopperInteraction'], 'String');
            }
            if (data.hasOwnProperty('shopperName')) {
                obj['shopperName'] = Name.constructFromObject(data['shopperName']);
            }
            if (data.hasOwnProperty('shopperReference')) {
                obj['shopperReference'] = ApiClient.convertToType(data['shopperReference'], 'String');
            }
            if (data.hasOwnProperty('telephoneNumber')) {
                obj['telephoneNumber'] = ApiClient.convertToType(data['telephoneNumber'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PayoutRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PayoutRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PayoutRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `amount`
        if (data['amount']) { // data not null
          Amount.validateJSON(data['amount']);
        }
        // validate the optional field `billingAddress`
        if (data['billingAddress']) { // data not null
          Address.validateJSON(data['billingAddress']);
        }
        // validate the optional field `card`
        if (data['card']) { // data not null
          Card.validateJSON(data['card']);
        }
        // validate the optional field `fundSource`
        if (data['fundSource']) { // data not null
          FundSource.validateJSON(data['fundSource']);
        }
        // ensure the json data is a string
        if (data['merchantAccount'] && !(typeof data['merchantAccount'] === 'string' || data['merchantAccount'] instanceof String)) {
            throw new Error("Expected the field `merchantAccount` to be a primitive type in the JSON string but got " + data['merchantAccount']);
        }
        // validate the optional field `recurring`
        if (data['recurring']) { // data not null
          Recurring.validateJSON(data['recurring']);
        }
        // ensure the json data is a string
        if (data['reference'] && !(typeof data['reference'] === 'string' || data['reference'] instanceof String)) {
            throw new Error("Expected the field `reference` to be a primitive type in the JSON string but got " + data['reference']);
        }
        // ensure the json data is a string
        if (data['selectedRecurringDetailReference'] && !(typeof data['selectedRecurringDetailReference'] === 'string' || data['selectedRecurringDetailReference'] instanceof String)) {
            throw new Error("Expected the field `selectedRecurringDetailReference` to be a primitive type in the JSON string but got " + data['selectedRecurringDetailReference']);
        }
        // ensure the json data is a string
        if (data['shopperEmail'] && !(typeof data['shopperEmail'] === 'string' || data['shopperEmail'] instanceof String)) {
            throw new Error("Expected the field `shopperEmail` to be a primitive type in the JSON string but got " + data['shopperEmail']);
        }
        // ensure the json data is a string
        if (data['shopperInteraction'] && !(typeof data['shopperInteraction'] === 'string' || data['shopperInteraction'] instanceof String)) {
            throw new Error("Expected the field `shopperInteraction` to be a primitive type in the JSON string but got " + data['shopperInteraction']);
        }
        // validate the optional field `shopperName`
        if (data['shopperName']) { // data not null
          Name.validateJSON(data['shopperName']);
        }
        // ensure the json data is a string
        if (data['shopperReference'] && !(typeof data['shopperReference'] === 'string' || data['shopperReference'] instanceof String)) {
            throw new Error("Expected the field `shopperReference` to be a primitive type in the JSON string but got " + data['shopperReference']);
        }
        // ensure the json data is a string
        if (data['telephoneNumber'] && !(typeof data['telephoneNumber'] === 'string' || data['telephoneNumber'] instanceof String)) {
            throw new Error("Expected the field `telephoneNumber` to be a primitive type in the JSON string but got " + data['telephoneNumber']);
        }

        return true;
    }


}

PayoutRequest.RequiredProperties = ["amount", "merchantAccount", "reference"];

/**
 * The amount information for the transaction (in [minor units](https://docs.adyen.com/development-resources/currency-codes)). For [BIN or card verification](https://docs.adyen.com/payment-methods/cards/bin-data-and-card-verification) requests, set amount to 0 (zero).
 * @member {module:model/Amount} amount
 */
PayoutRequest.prototype['amount'] = undefined;

/**
 * The address where to send the invoice. > The `billingAddress` object is required in the following scenarios. Include all of the fields within this object. >* For 3D Secure 2 transactions in all browser-based and mobile implementations. >* For cross-border payouts to and from Canada.
 * @member {module:model/Address} billingAddress
 */
PayoutRequest.prototype['billingAddress'] = undefined;

/**
 * A container for card data. > Either `bankAccount` or `card` field must be provided in a payment request.
 * @member {module:model/Card} card
 */
PayoutRequest.prototype['card'] = undefined;

/**
 * An integer value that is added to the normal fraud score. The value can be either positive or negative.
 * @member {Number} fraudOffset
 */
PayoutRequest.prototype['fraudOffset'] = undefined;

/**
 * The person or entity funding the money.
 * @member {module:model/FundSource} fundSource
 */
PayoutRequest.prototype['fundSource'] = undefined;

/**
 * The merchant account identifier, with which you want to process the transaction.
 * @member {String} merchantAccount
 */
PayoutRequest.prototype['merchantAccount'] = undefined;

/**
 * The recurring settings for the payment. Use this property when you want to enable [recurring payments](https://docs.adyen.com/classic-integration/recurring-payments).
 * @member {module:model/Recurring} recurring
 */
PayoutRequest.prototype['recurring'] = undefined;

/**
 * The reference to uniquely identify a payment. This reference is used in all communication with you about the payment status. We recommend using a unique value per payment; however, it is not a requirement. If you need to provide multiple references for a transaction, separate them with hyphens (\"-\"). Maximum length: 80 characters.
 * @member {String} reference
 */
PayoutRequest.prototype['reference'] = undefined;

/**
 * The `recurringDetailReference` you want to use for this payment. The value `LATEST` can be used to select the most recently stored recurring detail.
 * @member {String} selectedRecurringDetailReference
 */
PayoutRequest.prototype['selectedRecurringDetailReference'] = undefined;

/**
 * The shopper's email address. We recommend that you provide this data, as it is used in velocity fraud checks. > For 3D Secure 2 transactions, schemes require `shopperEmail` for all browser-based and mobile implementations.
 * @member {String} shopperEmail
 */
PayoutRequest.prototype['shopperEmail'] = undefined;

/**
 * Specifies the sales channel, through which the shopper gives their card details, and whether the shopper is a returning customer. For the web service API, Adyen assumes Ecommerce shopper interaction by default.  This field has the following possible values: * `Ecommerce` - Online transactions where the cardholder is present (online). For better authorisation rates, we recommend sending the card security code (CSC) along with the request. * `ContAuth` - Card on file and/or subscription transactions, where the cardholder is known to the merchant (returning customer). If the shopper is present (online), you can supply also the CSC to improve authorisation (one-click payment). * `Moto` - Mail-order and telephone-order transactions where the shopper is in contact with the merchant via email or telephone. * `POS` - Point-of-sale transactions where the shopper is physically present to make a payment using a secure payment terminal.
 * @member {module:model/PayoutRequest.ShopperInteractionEnum} shopperInteraction
 */
PayoutRequest.prototype['shopperInteraction'] = undefined;

/**
 * The shopper's full name.
 * @member {module:model/Name} shopperName
 */
PayoutRequest.prototype['shopperName'] = undefined;

/**
 * Required for recurring payments.  Your reference to uniquely identify this shopper, for example user ID or account ID. Minimum length: 3 characters. > Your reference must not include personally identifiable information (PII), for example name or email address.
 * @member {String} shopperReference
 */
PayoutRequest.prototype['shopperReference'] = undefined;

/**
 * The shopper's telephone number.
 * @member {String} telephoneNumber
 */
PayoutRequest.prototype['telephoneNumber'] = undefined;





/**
 * Allowed values for the <code>shopperInteraction</code> property.
 * @enum {String}
 * @readonly
 */
PayoutRequest['ShopperInteractionEnum'] = {

    /**
     * value: "Ecommerce"
     * @const
     */
    "Ecommerce": "Ecommerce",

    /**
     * value: "ContAuth"
     * @const
     */
    "ContAuth": "ContAuth",

    /**
     * value: "Moto"
     * @const
     */
    "Moto": "Moto",

    /**
     * value: "POS"
     * @const
     */
    "POS": "POS"
};



export default PayoutRequest;

