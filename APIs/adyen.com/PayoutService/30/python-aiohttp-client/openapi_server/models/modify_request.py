# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ModifyRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, additional_data: Dict[str, str]=None, merchant_account: str=None, original_reference: str=None):
        """ModifyRequest - a model defined in OpenAPI

        :param additional_data: The additional_data of this ModifyRequest.
        :param merchant_account: The merchant_account of this ModifyRequest.
        :param original_reference: The original_reference of this ModifyRequest.
        """
        self.openapi_types = {
            'additional_data': Dict[str, str],
            'merchant_account': str,
            'original_reference': str
        }

        self.attribute_map = {
            'additional_data': 'additionalData',
            'merchant_account': 'merchantAccount',
            'original_reference': 'originalReference'
        }

        self._additional_data = additional_data
        self._merchant_account = merchant_account
        self._original_reference = original_reference

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ModifyRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ModifyRequest of this ModifyRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def additional_data(self):
        """Gets the additional_data of this ModifyRequest.

        This field contains additional data, which may be required for a particular payout request.

        :return: The additional_data of this ModifyRequest.
        :rtype: Dict[str, str]
        """
        return self._additional_data

    @additional_data.setter
    def additional_data(self, additional_data):
        """Sets the additional_data of this ModifyRequest.

        This field contains additional data, which may be required for a particular payout request.

        :param additional_data: The additional_data of this ModifyRequest.
        :type additional_data: Dict[str, str]
        """

        self._additional_data = additional_data

    @property
    def merchant_account(self):
        """Gets the merchant_account of this ModifyRequest.

        The merchant account identifier, with which you want to process the transaction.

        :return: The merchant_account of this ModifyRequest.
        :rtype: str
        """
        return self._merchant_account

    @merchant_account.setter
    def merchant_account(self, merchant_account):
        """Sets the merchant_account of this ModifyRequest.

        The merchant account identifier, with which you want to process the transaction.

        :param merchant_account: The merchant_account of this ModifyRequest.
        :type merchant_account: str
        """
        if merchant_account is None:
            raise ValueError("Invalid value for `merchant_account`, must not be `None`")

        self._merchant_account = merchant_account

    @property
    def original_reference(self):
        """Gets the original_reference of this ModifyRequest.

        The PSP reference received in the `/submitThirdParty` response.

        :return: The original_reference of this ModifyRequest.
        :rtype: str
        """
        return self._original_reference

    @original_reference.setter
    def original_reference(self, original_reference):
        """Sets the original_reference of this ModifyRequest.

        The PSP reference received in the `/submitThirdParty` response.

        :param original_reference: The original_reference of this ModifyRequest.
        :type original_reference: str
        """
        if original_reference is None:
            raise ValueError("Invalid value for `original_reference`, must not be `None`")

        self._original_reference = original_reference
