# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.address import Address
from openapi_server.models.amount import Amount
from openapi_server.models.bank_account import BankAccount
from openapi_server.models.card import Card
from openapi_server.models.name import Name
from openapi_server.models.recurring import Recurring
from openapi_server import util


class StoreDetailAndSubmitRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, additional_data: Dict[str, str]=None, amount: Amount=None, bank: BankAccount=None, billing_address: Address=None, card: Card=None, date_of_birth: date=None, entity_type: str=None, fraud_offset: int=None, merchant_account: str=None, nationality: str=None, recurring: Recurring=None, reference: str=None, selected_brand: str=None, shopper_email: str=None, shopper_name: Name=None, shopper_reference: str=None, shopper_statement: str=None, social_security_number: str=None):
        """StoreDetailAndSubmitRequest - a model defined in OpenAPI

        :param additional_data: The additional_data of this StoreDetailAndSubmitRequest.
        :param amount: The amount of this StoreDetailAndSubmitRequest.
        :param bank: The bank of this StoreDetailAndSubmitRequest.
        :param billing_address: The billing_address of this StoreDetailAndSubmitRequest.
        :param card: The card of this StoreDetailAndSubmitRequest.
        :param date_of_birth: The date_of_birth of this StoreDetailAndSubmitRequest.
        :param entity_type: The entity_type of this StoreDetailAndSubmitRequest.
        :param fraud_offset: The fraud_offset of this StoreDetailAndSubmitRequest.
        :param merchant_account: The merchant_account of this StoreDetailAndSubmitRequest.
        :param nationality: The nationality of this StoreDetailAndSubmitRequest.
        :param recurring: The recurring of this StoreDetailAndSubmitRequest.
        :param reference: The reference of this StoreDetailAndSubmitRequest.
        :param selected_brand: The selected_brand of this StoreDetailAndSubmitRequest.
        :param shopper_email: The shopper_email of this StoreDetailAndSubmitRequest.
        :param shopper_name: The shopper_name of this StoreDetailAndSubmitRequest.
        :param shopper_reference: The shopper_reference of this StoreDetailAndSubmitRequest.
        :param shopper_statement: The shopper_statement of this StoreDetailAndSubmitRequest.
        :param social_security_number: The social_security_number of this StoreDetailAndSubmitRequest.
        """
        self.openapi_types = {
            'additional_data': Dict[str, str],
            'amount': Amount,
            'bank': BankAccount,
            'billing_address': Address,
            'card': Card,
            'date_of_birth': date,
            'entity_type': str,
            'fraud_offset': int,
            'merchant_account': str,
            'nationality': str,
            'recurring': Recurring,
            'reference': str,
            'selected_brand': str,
            'shopper_email': str,
            'shopper_name': Name,
            'shopper_reference': str,
            'shopper_statement': str,
            'social_security_number': str
        }

        self.attribute_map = {
            'additional_data': 'additionalData',
            'amount': 'amount',
            'bank': 'bank',
            'billing_address': 'billingAddress',
            'card': 'card',
            'date_of_birth': 'dateOfBirth',
            'entity_type': 'entityType',
            'fraud_offset': 'fraudOffset',
            'merchant_account': 'merchantAccount',
            'nationality': 'nationality',
            'recurring': 'recurring',
            'reference': 'reference',
            'selected_brand': 'selectedBrand',
            'shopper_email': 'shopperEmail',
            'shopper_name': 'shopperName',
            'shopper_reference': 'shopperReference',
            'shopper_statement': 'shopperStatement',
            'social_security_number': 'socialSecurityNumber'
        }

        self._additional_data = additional_data
        self._amount = amount
        self._bank = bank
        self._billing_address = billing_address
        self._card = card
        self._date_of_birth = date_of_birth
        self._entity_type = entity_type
        self._fraud_offset = fraud_offset
        self._merchant_account = merchant_account
        self._nationality = nationality
        self._recurring = recurring
        self._reference = reference
        self._selected_brand = selected_brand
        self._shopper_email = shopper_email
        self._shopper_name = shopper_name
        self._shopper_reference = shopper_reference
        self._shopper_statement = shopper_statement
        self._social_security_number = social_security_number

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StoreDetailAndSubmitRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StoreDetailAndSubmitRequest of this StoreDetailAndSubmitRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def additional_data(self):
        """Gets the additional_data of this StoreDetailAndSubmitRequest.

        This field contains additional data, which may be required for a particular request.

        :return: The additional_data of this StoreDetailAndSubmitRequest.
        :rtype: Dict[str, str]
        """
        return self._additional_data

    @additional_data.setter
    def additional_data(self, additional_data):
        """Sets the additional_data of this StoreDetailAndSubmitRequest.

        This field contains additional data, which may be required for a particular request.

        :param additional_data: The additional_data of this StoreDetailAndSubmitRequest.
        :type additional_data: Dict[str, str]
        """

        self._additional_data = additional_data

    @property
    def amount(self):
        """Gets the amount of this StoreDetailAndSubmitRequest.

        A container object for the payable amount information of the transaction.

        :return: The amount of this StoreDetailAndSubmitRequest.
        :rtype: Amount
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this StoreDetailAndSubmitRequest.

        A container object for the payable amount information of the transaction.

        :param amount: The amount of this StoreDetailAndSubmitRequest.
        :type amount: Amount
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")

        self._amount = amount

    @property
    def bank(self):
        """Gets the bank of this StoreDetailAndSubmitRequest.

        A container for bank account data. > This field is mandatory if `card` is not provided.

        :return: The bank of this StoreDetailAndSubmitRequest.
        :rtype: BankAccount
        """
        return self._bank

    @bank.setter
    def bank(self, bank):
        """Sets the bank of this StoreDetailAndSubmitRequest.

        A container for bank account data. > This field is mandatory if `card` is not provided.

        :param bank: The bank of this StoreDetailAndSubmitRequest.
        :type bank: BankAccount
        """

        self._bank = bank

    @property
    def billing_address(self):
        """Gets the billing_address of this StoreDetailAndSubmitRequest.

        The billing address.  > The `billingAddress` object is required for cross-border payouts to and from Canada. Include all of the fields within this object.

        :return: The billing_address of this StoreDetailAndSubmitRequest.
        :rtype: Address
        """
        return self._billing_address

    @billing_address.setter
    def billing_address(self, billing_address):
        """Sets the billing_address of this StoreDetailAndSubmitRequest.

        The billing address.  > The `billingAddress` object is required for cross-border payouts to and from Canada. Include all of the fields within this object.

        :param billing_address: The billing_address of this StoreDetailAndSubmitRequest.
        :type billing_address: Address
        """

        self._billing_address = billing_address

    @property
    def card(self):
        """Gets the card of this StoreDetailAndSubmitRequest.

        A container for card data. > This field is mandatory if `bank` is not provided.

        :return: The card of this StoreDetailAndSubmitRequest.
        :rtype: Card
        """
        return self._card

    @card.setter
    def card(self, card):
        """Sets the card of this StoreDetailAndSubmitRequest.

        A container for card data. > This field is mandatory if `bank` is not provided.

        :param card: The card of this StoreDetailAndSubmitRequest.
        :type card: Card
        """

        self._card = card

    @property
    def date_of_birth(self):
        """Gets the date_of_birth of this StoreDetailAndSubmitRequest.

        The date of birth. Format: [ISO-8601](https://www.w3.org/TR/NOTE-datetime); example: YYYY-MM-DD For Paysafecard it must be the same as used when registering the Paysafecard account. > This field is mandatory for natural persons.

        :return: The date_of_birth of this StoreDetailAndSubmitRequest.
        :rtype: date
        """
        return self._date_of_birth

    @date_of_birth.setter
    def date_of_birth(self, date_of_birth):
        """Sets the date_of_birth of this StoreDetailAndSubmitRequest.

        The date of birth. Format: [ISO-8601](https://www.w3.org/TR/NOTE-datetime); example: YYYY-MM-DD For Paysafecard it must be the same as used when registering the Paysafecard account. > This field is mandatory for natural persons.

        :param date_of_birth: The date_of_birth of this StoreDetailAndSubmitRequest.
        :type date_of_birth: date
        """
        if date_of_birth is None:
            raise ValueError("Invalid value for `date_of_birth`, must not be `None`")

        self._date_of_birth = date_of_birth

    @property
    def entity_type(self):
        """Gets the entity_type of this StoreDetailAndSubmitRequest.

        The type of the entity the payout is processed for.

        :return: The entity_type of this StoreDetailAndSubmitRequest.
        :rtype: str
        """
        return self._entity_type

    @entity_type.setter
    def entity_type(self, entity_type):
        """Sets the entity_type of this StoreDetailAndSubmitRequest.

        The type of the entity the payout is processed for.

        :param entity_type: The entity_type of this StoreDetailAndSubmitRequest.
        :type entity_type: str
        """
        allowed_values = ["NaturalPerson", "Company"]  # noqa: E501
        if entity_type not in allowed_values:
            raise ValueError(
                "Invalid value for `entity_type` ({0}), must be one of {1}"
                .format(entity_type, allowed_values)
            )

        self._entity_type = entity_type

    @property
    def fraud_offset(self):
        """Gets the fraud_offset of this StoreDetailAndSubmitRequest.

        An integer value that is added to the normal fraud score. The value can be either positive or negative.

        :return: The fraud_offset of this StoreDetailAndSubmitRequest.
        :rtype: int
        """
        return self._fraud_offset

    @fraud_offset.setter
    def fraud_offset(self, fraud_offset):
        """Sets the fraud_offset of this StoreDetailAndSubmitRequest.

        An integer value that is added to the normal fraud score. The value can be either positive or negative.

        :param fraud_offset: The fraud_offset of this StoreDetailAndSubmitRequest.
        :type fraud_offset: int
        """

        self._fraud_offset = fraud_offset

    @property
    def merchant_account(self):
        """Gets the merchant_account of this StoreDetailAndSubmitRequest.

        The merchant account identifier, with which you want to process the transaction.

        :return: The merchant_account of this StoreDetailAndSubmitRequest.
        :rtype: str
        """
        return self._merchant_account

    @merchant_account.setter
    def merchant_account(self, merchant_account):
        """Sets the merchant_account of this StoreDetailAndSubmitRequest.

        The merchant account identifier, with which you want to process the transaction.

        :param merchant_account: The merchant_account of this StoreDetailAndSubmitRequest.
        :type merchant_account: str
        """
        if merchant_account is None:
            raise ValueError("Invalid value for `merchant_account`, must not be `None`")

        self._merchant_account = merchant_account

    @property
    def nationality(self):
        """Gets the nationality of this StoreDetailAndSubmitRequest.

        The shopper's nationality.  A valid value is an ISO 2-character country code (e.g. 'NL').

        :return: The nationality of this StoreDetailAndSubmitRequest.
        :rtype: str
        """
        return self._nationality

    @nationality.setter
    def nationality(self, nationality):
        """Sets the nationality of this StoreDetailAndSubmitRequest.

        The shopper's nationality.  A valid value is an ISO 2-character country code (e.g. 'NL').

        :param nationality: The nationality of this StoreDetailAndSubmitRequest.
        :type nationality: str
        """
        if nationality is None:
            raise ValueError("Invalid value for `nationality`, must not be `None`")
        if nationality is not None and len(nationality) > 2:
            raise ValueError("Invalid value for `nationality`, length must be less than or equal to `2`")

        self._nationality = nationality

    @property
    def recurring(self):
        """Gets the recurring of this StoreDetailAndSubmitRequest.

        A container for the type of recurring contract to be retrieved.  The recurring.contract must be set to `PAYOUT`

        :return: The recurring of this StoreDetailAndSubmitRequest.
        :rtype: Recurring
        """
        return self._recurring

    @recurring.setter
    def recurring(self, recurring):
        """Sets the recurring of this StoreDetailAndSubmitRequest.

        A container for the type of recurring contract to be retrieved.  The recurring.contract must be set to `PAYOUT`

        :param recurring: The recurring of this StoreDetailAndSubmitRequest.
        :type recurring: Recurring
        """
        if recurring is None:
            raise ValueError("Invalid value for `recurring`, must not be `None`")

        self._recurring = recurring

    @property
    def reference(self):
        """Gets the reference of this StoreDetailAndSubmitRequest.

        The merchant reference for this payment. This reference will be used in all communication to the merchant about the status of the payout. Although it is a good idea to make sure it is unique, this is not a requirement.

        :return: The reference of this StoreDetailAndSubmitRequest.
        :rtype: str
        """
        return self._reference

    @reference.setter
    def reference(self, reference):
        """Sets the reference of this StoreDetailAndSubmitRequest.

        The merchant reference for this payment. This reference will be used in all communication to the merchant about the status of the payout. Although it is a good idea to make sure it is unique, this is not a requirement.

        :param reference: The reference of this StoreDetailAndSubmitRequest.
        :type reference: str
        """
        if reference is None:
            raise ValueError("Invalid value for `reference`, must not be `None`")

        self._reference = reference

    @property
    def selected_brand(self):
        """Gets the selected_brand of this StoreDetailAndSubmitRequest.

        The name of the brand to make a payout to.  For Paysafecard it must be set to `paysafecard`.

        :return: The selected_brand of this StoreDetailAndSubmitRequest.
        :rtype: str
        """
        return self._selected_brand

    @selected_brand.setter
    def selected_brand(self, selected_brand):
        """Sets the selected_brand of this StoreDetailAndSubmitRequest.

        The name of the brand to make a payout to.  For Paysafecard it must be set to `paysafecard`.

        :param selected_brand: The selected_brand of this StoreDetailAndSubmitRequest.
        :type selected_brand: str
        """

        self._selected_brand = selected_brand

    @property
    def shopper_email(self):
        """Gets the shopper_email of this StoreDetailAndSubmitRequest.

        The shopper's email address.

        :return: The shopper_email of this StoreDetailAndSubmitRequest.
        :rtype: str
        """
        return self._shopper_email

    @shopper_email.setter
    def shopper_email(self, shopper_email):
        """Sets the shopper_email of this StoreDetailAndSubmitRequest.

        The shopper's email address.

        :param shopper_email: The shopper_email of this StoreDetailAndSubmitRequest.
        :type shopper_email: str
        """
        if shopper_email is None:
            raise ValueError("Invalid value for `shopper_email`, must not be `None`")

        self._shopper_email = shopper_email

    @property
    def shopper_name(self):
        """Gets the shopper_name of this StoreDetailAndSubmitRequest.

        The shopper's name.  When the `entityType` is `Company`, the `shopperName.lastName` must contain the company name.

        :return: The shopper_name of this StoreDetailAndSubmitRequest.
        :rtype: Name
        """
        return self._shopper_name

    @shopper_name.setter
    def shopper_name(self, shopper_name):
        """Sets the shopper_name of this StoreDetailAndSubmitRequest.

        The shopper's name.  When the `entityType` is `Company`, the `shopperName.lastName` must contain the company name.

        :param shopper_name: The shopper_name of this StoreDetailAndSubmitRequest.
        :type shopper_name: Name
        """

        self._shopper_name = shopper_name

    @property
    def shopper_reference(self):
        """Gets the shopper_reference of this StoreDetailAndSubmitRequest.

        The shopper's reference for the payment transaction.

        :return: The shopper_reference of this StoreDetailAndSubmitRequest.
        :rtype: str
        """
        return self._shopper_reference

    @shopper_reference.setter
    def shopper_reference(self, shopper_reference):
        """Sets the shopper_reference of this StoreDetailAndSubmitRequest.

        The shopper's reference for the payment transaction.

        :param shopper_reference: The shopper_reference of this StoreDetailAndSubmitRequest.
        :type shopper_reference: str
        """
        if shopper_reference is None:
            raise ValueError("Invalid value for `shopper_reference`, must not be `None`")

        self._shopper_reference = shopper_reference

    @property
    def shopper_statement(self):
        """Gets the shopper_statement of this StoreDetailAndSubmitRequest.

        The description of this payout. This description is shown on the bank statement of the shopper (if this is supported by the chosen payment method).

        :return: The shopper_statement of this StoreDetailAndSubmitRequest.
        :rtype: str
        """
        return self._shopper_statement

    @shopper_statement.setter
    def shopper_statement(self, shopper_statement):
        """Sets the shopper_statement of this StoreDetailAndSubmitRequest.

        The description of this payout. This description is shown on the bank statement of the shopper (if this is supported by the chosen payment method).

        :param shopper_statement: The shopper_statement of this StoreDetailAndSubmitRequest.
        :type shopper_statement: str
        """

        self._shopper_statement = shopper_statement

    @property
    def social_security_number(self):
        """Gets the social_security_number of this StoreDetailAndSubmitRequest.

        The shopper's social security number.

        :return: The social_security_number of this StoreDetailAndSubmitRequest.
        :rtype: str
        """
        return self._social_security_number

    @social_security_number.setter
    def social_security_number(self, social_security_number):
        """Sets the social_security_number of this StoreDetailAndSubmitRequest.

        The shopper's social security number.

        :param social_security_number: The social_security_number of this StoreDetailAndSubmitRequest.
        :type social_security_number: str
        """

        self._social_security_number = social_security_number
