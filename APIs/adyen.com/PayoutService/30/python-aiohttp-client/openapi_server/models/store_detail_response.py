# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class StoreDetailResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, additional_data: Dict[str, str]=None, psp_reference: str=None, recurring_detail_reference: str=None, result_code: str=None):
        """StoreDetailResponse - a model defined in OpenAPI

        :param additional_data: The additional_data of this StoreDetailResponse.
        :param psp_reference: The psp_reference of this StoreDetailResponse.
        :param recurring_detail_reference: The recurring_detail_reference of this StoreDetailResponse.
        :param result_code: The result_code of this StoreDetailResponse.
        """
        self.openapi_types = {
            'additional_data': Dict[str, str],
            'psp_reference': str,
            'recurring_detail_reference': str,
            'result_code': str
        }

        self.attribute_map = {
            'additional_data': 'additionalData',
            'psp_reference': 'pspReference',
            'recurring_detail_reference': 'recurringDetailReference',
            'result_code': 'resultCode'
        }

        self._additional_data = additional_data
        self._psp_reference = psp_reference
        self._recurring_detail_reference = recurring_detail_reference
        self._result_code = result_code

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StoreDetailResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StoreDetailResponse of this StoreDetailResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def additional_data(self):
        """Gets the additional_data of this StoreDetailResponse.

        This field contains additional data, which may be returned in a particular response.

        :return: The additional_data of this StoreDetailResponse.
        :rtype: Dict[str, str]
        """
        return self._additional_data

    @additional_data.setter
    def additional_data(self, additional_data):
        """Sets the additional_data of this StoreDetailResponse.

        This field contains additional data, which may be returned in a particular response.

        :param additional_data: The additional_data of this StoreDetailResponse.
        :type additional_data: Dict[str, str]
        """

        self._additional_data = additional_data

    @property
    def psp_reference(self):
        """Gets the psp_reference of this StoreDetailResponse.

        A new reference to uniquely identify this request.

        :return: The psp_reference of this StoreDetailResponse.
        :rtype: str
        """
        return self._psp_reference

    @psp_reference.setter
    def psp_reference(self, psp_reference):
        """Sets the psp_reference of this StoreDetailResponse.

        A new reference to uniquely identify this request.

        :param psp_reference: The psp_reference of this StoreDetailResponse.
        :type psp_reference: str
        """
        if psp_reference is None:
            raise ValueError("Invalid value for `psp_reference`, must not be `None`")

        self._psp_reference = psp_reference

    @property
    def recurring_detail_reference(self):
        """Gets the recurring_detail_reference of this StoreDetailResponse.

        The token which you can use later on for submitting the payout.

        :return: The recurring_detail_reference of this StoreDetailResponse.
        :rtype: str
        """
        return self._recurring_detail_reference

    @recurring_detail_reference.setter
    def recurring_detail_reference(self, recurring_detail_reference):
        """Sets the recurring_detail_reference of this StoreDetailResponse.

        The token which you can use later on for submitting the payout.

        :param recurring_detail_reference: The recurring_detail_reference of this StoreDetailResponse.
        :type recurring_detail_reference: str
        """
        if recurring_detail_reference is None:
            raise ValueError("Invalid value for `recurring_detail_reference`, must not be `None`")

        self._recurring_detail_reference = recurring_detail_reference

    @property
    def result_code(self):
        """Gets the result_code of this StoreDetailResponse.

        The result code of the transaction. `Success` indicates that the details were stored successfully.

        :return: The result_code of this StoreDetailResponse.
        :rtype: str
        """
        return self._result_code

    @result_code.setter
    def result_code(self, result_code):
        """Sets the result_code of this StoreDetailResponse.

        The result code of the transaction. `Success` indicates that the details were stored successfully.

        :param result_code: The result_code of this StoreDetailResponse.
        :type result_code: str
        """
        if result_code is None:
            raise ValueError("Invalid value for `result_code`, must not be `None`")

        self._result_code = result_code
