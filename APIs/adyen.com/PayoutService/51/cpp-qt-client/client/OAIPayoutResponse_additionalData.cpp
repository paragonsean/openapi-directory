/**
 * Adyen Payout API
 * A set of API endpoints that allow you to store payout details, confirm, or decline a payout.  For more information, refer to [Online payouts](https://docs.adyen.com/online-payments/online-payouts). ## Authentication To use the Payout API, you need to have [two API credentials](https://docs.adyen.com/online-payments/online-payouts#payouts-to-bank-accounts-and-wallets): one for storing payout details and submitting payouts, and another one for confirming or declining payouts. If you don't have the required API credentials, contact our [Support Team](https://www.adyen.help/hc/en-us/requests/new).  If using an API key, add an `X-API-Key` header with the API key as the value, for example:   ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ```  Alternatively, you can use the username and password to connect to the API using [basic authentication](https://docs.adyen.com/development-resources/api-credentials#basic-authentication).  The following example shows how to authenticate your request with basic authentication when submitting a payout:  ``` curl -U \"storePayout@Company.YOUR_COMPANY_ACCOUNT\":\"YOUR_BASIC_AUTHENTICATION_PASSWORD\" \\ -H \"Content-Type: application/json\" \\ ... ```  ## Versioning Payments API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://pal-test.adyen.com/pal/servlet/Payout/v51/payout ```  ## Going live  To authenticate to the live endpoints, you need [API credentials](https://docs.adyen.com/development-resources/api-credentials) from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account: ```  https://{PREFIX}-pal-live.adyenpayments.com/pal/servlet/Payout/v51/payout ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.
 *
 * The version of the OpenAPI document: 51
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPayoutResponse_additionalData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPayoutResponse_additionalData::OAIPayoutResponse_additionalData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPayoutResponse_additionalData::OAIPayoutResponse_additionalData() {
    this->initializeModel();
}

OAIPayoutResponse_additionalData::~OAIPayoutResponse_additionalData() {}

void OAIPayoutResponse_additionalData::initializeModel() {

    m_card_holder_info_isSet = false;
    m_card_holder_info_isValid = false;

    m_cavv_isSet = false;
    m_cavv_isValid = false;

    m_cavv_algorithm_isSet = false;
    m_cavv_algorithm_isValid = false;

    m_sca_exemption_requested_isSet = false;
    m_sca_exemption_requested_isValid = false;

    m_threeds2_card_enrolled_isSet = false;
    m_threeds2_card_enrolled_isValid = false;

    m_billing_address_city_isSet = false;
    m_billing_address_city_isValid = false;

    m_billing_address_country_isSet = false;
    m_billing_address_country_isValid = false;

    m_billing_address_house_number_or_name_isSet = false;
    m_billing_address_house_number_or_name_isValid = false;

    m_billing_address_postal_code_isSet = false;
    m_billing_address_postal_code_isValid = false;

    m_billing_address_state_or_province_isSet = false;
    m_billing_address_state_or_province_isValid = false;

    m_billing_address_street_isSet = false;
    m_billing_address_street_isValid = false;

    m_card_bin_isSet = false;
    m_card_bin_isValid = false;

    m_card_holder_name_isSet = false;
    m_card_holder_name_isValid = false;

    m_card_issuing_bank_isSet = false;
    m_card_issuing_bank_isValid = false;

    m_card_issuing_country_isSet = false;
    m_card_issuing_country_isValid = false;

    m_card_issuing_currency_isSet = false;
    m_card_issuing_currency_isValid = false;

    m_card_payment_method_isSet = false;
    m_card_payment_method_isValid = false;

    m_card_summary_isSet = false;
    m_card_summary_isValid = false;

    m_issuer_bin_isSet = false;
    m_issuer_bin_isValid = false;

    m_acquirer_account_code_isSet = false;
    m_acquirer_account_code_isValid = false;

    m_acquirer_code_isSet = false;
    m_acquirer_code_isValid = false;

    m_acquirer_reference_isSet = false;
    m_acquirer_reference_isValid = false;

    m_alias_isSet = false;
    m_alias_isValid = false;

    m_alias_type_isSet = false;
    m_alias_type_isValid = false;

    m_auth_code_isSet = false;
    m_auth_code_isValid = false;

    m_authorisation_mid_isSet = false;
    m_authorisation_mid_isValid = false;

    m_authorised_amount_currency_isSet = false;
    m_authorised_amount_currency_isValid = false;

    m_authorised_amount_value_isSet = false;
    m_authorised_amount_value_isValid = false;

    m_avs_result_isSet = false;
    m_avs_result_isValid = false;

    m_avs_result_raw_isSet = false;
    m_avs_result_raw_isValid = false;

    m_bic_isSet = false;
    m_bic_isValid = false;

    m_co_branded_with_isSet = false;
    m_co_branded_with_isValid = false;

    m_cvc_result_isSet = false;
    m_cvc_result_isValid = false;

    m_cvc_result_raw_isSet = false;
    m_cvc_result_raw_isValid = false;

    m_ds_trans_id_isSet = false;
    m_ds_trans_id_isValid = false;

    m_eci_isSet = false;
    m_eci_isValid = false;

    m_expiry_date_isSet = false;
    m_expiry_date_isValid = false;

    m_extra_costs_currency_isSet = false;
    m_extra_costs_currency_isValid = false;

    m_extra_costs_value_isSet = false;
    m_extra_costs_value_isValid = false;

    m_fraud_check__item_nr__fraud_checkname_isSet = false;
    m_fraud_check__item_nr__fraud_checkname_isValid = false;

    m_fraud_manual_review_isSet = false;
    m_fraud_manual_review_isValid = false;

    m_fraud_result_type_isSet = false;
    m_fraud_result_type_isValid = false;

    m_funding_source_isSet = false;
    m_funding_source_isValid = false;

    m_funds_availability_isSet = false;
    m_funds_availability_isValid = false;

    m_inferred_refusal_reason_isSet = false;
    m_inferred_refusal_reason_isValid = false;

    m_is_card_commercial_isSet = false;
    m_is_card_commercial_isValid = false;

    m_issuer_country_isSet = false;
    m_issuer_country_isValid = false;

    m_liability_shift_isSet = false;
    m_liability_shift_isValid = false;

    m_mc_bank_net_reference_number_isSet = false;
    m_mc_bank_net_reference_number_isValid = false;

    m_merchant_advice_code_isSet = false;
    m_merchant_advice_code_isValid = false;

    m_merchant_reference_isSet = false;
    m_merchant_reference_isValid = false;

    m_network_tx_reference_isSet = false;
    m_network_tx_reference_isValid = false;

    m_non_scheme_transaction_limit_isSet = false;
    m_non_scheme_transaction_limit_isValid = false;

    m_non_scheme_transaction_limit_ccy_isSet = false;
    m_non_scheme_transaction_limit_ccy_isValid = false;

    m_owner_name_isSet = false;
    m_owner_name_isValid = false;

    m_payment_account_reference_isSet = false;
    m_payment_account_reference_isValid = false;

    m_payment_method_isSet = false;
    m_payment_method_isValid = false;

    m_payment_method_variant_isSet = false;
    m_payment_method_variant_isValid = false;

    m_payout_eligible_isSet = false;
    m_payout_eligible_isValid = false;

    m_realtime_account_updater_status_isSet = false;
    m_realtime_account_updater_status_isValid = false;

    m_receipt_free_text_isSet = false;
    m_receipt_free_text_isValid = false;

    m_recurring_contract_types_isSet = false;
    m_recurring_contract_types_isValid = false;

    m_recurring_first_psp_reference_isSet = false;
    m_recurring_first_psp_reference_isValid = false;

    m_recurring_recurring_detail_reference_isSet = false;
    m_recurring_recurring_detail_reference_isValid = false;

    m_recurring_shopper_reference_isSet = false;
    m_recurring_shopper_reference_isValid = false;

    m_recurring_processing_model_isSet = false;
    m_recurring_processing_model_isValid = false;

    m_referred_isSet = false;
    m_referred_isValid = false;

    m_refusal_reason_raw_isSet = false;
    m_refusal_reason_raw_isValid = false;

    m_request_amount_isSet = false;
    m_request_amount_isValid = false;

    m_request_currency_code_isSet = false;
    m_request_currency_code_isValid = false;

    m_shopper_interaction_isSet = false;
    m_shopper_interaction_isValid = false;

    m_shopper_reference_isSet = false;
    m_shopper_reference_isValid = false;

    m_terminal_id_isSet = false;
    m_terminal_id_isValid = false;

    m_three_d_authenticated_isSet = false;
    m_three_d_authenticated_isValid = false;

    m_three_d_authenticated_response_isSet = false;
    m_three_d_authenticated_response_isValid = false;

    m_three_d_offered_isSet = false;
    m_three_d_offered_isValid = false;

    m_three_d_offered_response_isSet = false;
    m_three_d_offered_response_isValid = false;

    m_three_ds_version_isSet = false;
    m_three_ds_version_isValid = false;

    m_visa_transaction_id_isSet = false;
    m_visa_transaction_id_isValid = false;

    m_xid_isSet = false;
    m_xid_isValid = false;

    m_domestic_refusal_reason_raw_isSet = false;
    m_domestic_refusal_reason_raw_isValid = false;

    m_domestic_shopper_advice_isSet = false;
    m_domestic_shopper_advice_isValid = false;

    m_installment_payment_data_installment_type_isSet = false;
    m_installment_payment_data_installment_type_isValid = false;

    m_installment_payment_data_option_item_nr_annual_percentage_rate_isSet = false;
    m_installment_payment_data_option_item_nr_annual_percentage_rate_isValid = false;

    m_installment_payment_data_option_item_nr_first_installment_amount_isSet = false;
    m_installment_payment_data_option_item_nr_first_installment_amount_isValid = false;

    m_installment_payment_data_option_item_nr_installment_fee_isSet = false;
    m_installment_payment_data_option_item_nr_installment_fee_isValid = false;

    m_installment_payment_data_option_item_nr_interest_rate_isSet = false;
    m_installment_payment_data_option_item_nr_interest_rate_isValid = false;

    m_installment_payment_data_option_item_nr_maximum_number_of_installments_isSet = false;
    m_installment_payment_data_option_item_nr_maximum_number_of_installments_isValid = false;

    m_installment_payment_data_option_item_nr_minimum_number_of_installments_isSet = false;
    m_installment_payment_data_option_item_nr_minimum_number_of_installments_isValid = false;

    m_installment_payment_data_option_item_nr_number_of_installments_isSet = false;
    m_installment_payment_data_option_item_nr_number_of_installments_isValid = false;

    m_installment_payment_data_option_item_nr_subsequent_installment_amount_isSet = false;
    m_installment_payment_data_option_item_nr_subsequent_installment_amount_isValid = false;

    m_installment_payment_data_option_item_nr_total_amount_due_isSet = false;
    m_installment_payment_data_option_item_nr_total_amount_due_isValid = false;

    m_installment_payment_data_payment_options_isSet = false;
    m_installment_payment_data_payment_options_isValid = false;

    m_installments_value_isSet = false;
    m_installments_value_isValid = false;

    m_network_token_available_isSet = false;
    m_network_token_available_isValid = false;

    m_network_token_bin_isSet = false;
    m_network_token_bin_isValid = false;

    m_network_token_token_summary_isSet = false;
    m_network_token_token_summary_isValid = false;

    m_opi_trans_token_isSet = false;
    m_opi_trans_token_isValid = false;

    m_sepadirectdebit_date_of_signature_isSet = false;
    m_sepadirectdebit_date_of_signature_isValid = false;

    m_sepadirectdebit_mandate_id_isSet = false;
    m_sepadirectdebit_mandate_id_isValid = false;

    m_sepadirectdebit_sequence_type_isSet = false;
    m_sepadirectdebit_sequence_type_isValid = false;
}

void OAIPayoutResponse_additionalData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPayoutResponse_additionalData::fromJsonObject(QJsonObject json) {

    m_card_holder_info_isValid = ::OpenAPI::fromJsonValue(m_card_holder_info, json[QString("cardHolderInfo")]);
    m_card_holder_info_isSet = !json[QString("cardHolderInfo")].isNull() && m_card_holder_info_isValid;

    m_cavv_isValid = ::OpenAPI::fromJsonValue(m_cavv, json[QString("cavv")]);
    m_cavv_isSet = !json[QString("cavv")].isNull() && m_cavv_isValid;

    m_cavv_algorithm_isValid = ::OpenAPI::fromJsonValue(m_cavv_algorithm, json[QString("cavvAlgorithm")]);
    m_cavv_algorithm_isSet = !json[QString("cavvAlgorithm")].isNull() && m_cavv_algorithm_isValid;

    m_sca_exemption_requested_isValid = ::OpenAPI::fromJsonValue(m_sca_exemption_requested, json[QString("scaExemptionRequested")]);
    m_sca_exemption_requested_isSet = !json[QString("scaExemptionRequested")].isNull() && m_sca_exemption_requested_isValid;

    m_threeds2_card_enrolled_isValid = ::OpenAPI::fromJsonValue(m_threeds2_card_enrolled, json[QString("threeds2.cardEnrolled")]);
    m_threeds2_card_enrolled_isSet = !json[QString("threeds2.cardEnrolled")].isNull() && m_threeds2_card_enrolled_isValid;

    m_billing_address_city_isValid = ::OpenAPI::fromJsonValue(m_billing_address_city, json[QString("billingAddress.city")]);
    m_billing_address_city_isSet = !json[QString("billingAddress.city")].isNull() && m_billing_address_city_isValid;

    m_billing_address_country_isValid = ::OpenAPI::fromJsonValue(m_billing_address_country, json[QString("billingAddress.country")]);
    m_billing_address_country_isSet = !json[QString("billingAddress.country")].isNull() && m_billing_address_country_isValid;

    m_billing_address_house_number_or_name_isValid = ::OpenAPI::fromJsonValue(m_billing_address_house_number_or_name, json[QString("billingAddress.houseNumberOrName")]);
    m_billing_address_house_number_or_name_isSet = !json[QString("billingAddress.houseNumberOrName")].isNull() && m_billing_address_house_number_or_name_isValid;

    m_billing_address_postal_code_isValid = ::OpenAPI::fromJsonValue(m_billing_address_postal_code, json[QString("billingAddress.postalCode")]);
    m_billing_address_postal_code_isSet = !json[QString("billingAddress.postalCode")].isNull() && m_billing_address_postal_code_isValid;

    m_billing_address_state_or_province_isValid = ::OpenAPI::fromJsonValue(m_billing_address_state_or_province, json[QString("billingAddress.stateOrProvince")]);
    m_billing_address_state_or_province_isSet = !json[QString("billingAddress.stateOrProvince")].isNull() && m_billing_address_state_or_province_isValid;

    m_billing_address_street_isValid = ::OpenAPI::fromJsonValue(m_billing_address_street, json[QString("billingAddress.street")]);
    m_billing_address_street_isSet = !json[QString("billingAddress.street")].isNull() && m_billing_address_street_isValid;

    m_card_bin_isValid = ::OpenAPI::fromJsonValue(m_card_bin, json[QString("cardBin")]);
    m_card_bin_isSet = !json[QString("cardBin")].isNull() && m_card_bin_isValid;

    m_card_holder_name_isValid = ::OpenAPI::fromJsonValue(m_card_holder_name, json[QString("cardHolderName")]);
    m_card_holder_name_isSet = !json[QString("cardHolderName")].isNull() && m_card_holder_name_isValid;

    m_card_issuing_bank_isValid = ::OpenAPI::fromJsonValue(m_card_issuing_bank, json[QString("cardIssuingBank")]);
    m_card_issuing_bank_isSet = !json[QString("cardIssuingBank")].isNull() && m_card_issuing_bank_isValid;

    m_card_issuing_country_isValid = ::OpenAPI::fromJsonValue(m_card_issuing_country, json[QString("cardIssuingCountry")]);
    m_card_issuing_country_isSet = !json[QString("cardIssuingCountry")].isNull() && m_card_issuing_country_isValid;

    m_card_issuing_currency_isValid = ::OpenAPI::fromJsonValue(m_card_issuing_currency, json[QString("cardIssuingCurrency")]);
    m_card_issuing_currency_isSet = !json[QString("cardIssuingCurrency")].isNull() && m_card_issuing_currency_isValid;

    m_card_payment_method_isValid = ::OpenAPI::fromJsonValue(m_card_payment_method, json[QString("cardPaymentMethod")]);
    m_card_payment_method_isSet = !json[QString("cardPaymentMethod")].isNull() && m_card_payment_method_isValid;

    m_card_summary_isValid = ::OpenAPI::fromJsonValue(m_card_summary, json[QString("cardSummary")]);
    m_card_summary_isSet = !json[QString("cardSummary")].isNull() && m_card_summary_isValid;

    m_issuer_bin_isValid = ::OpenAPI::fromJsonValue(m_issuer_bin, json[QString("issuerBin")]);
    m_issuer_bin_isSet = !json[QString("issuerBin")].isNull() && m_issuer_bin_isValid;

    m_acquirer_account_code_isValid = ::OpenAPI::fromJsonValue(m_acquirer_account_code, json[QString("acquirerAccountCode")]);
    m_acquirer_account_code_isSet = !json[QString("acquirerAccountCode")].isNull() && m_acquirer_account_code_isValid;

    m_acquirer_code_isValid = ::OpenAPI::fromJsonValue(m_acquirer_code, json[QString("acquirerCode")]);
    m_acquirer_code_isSet = !json[QString("acquirerCode")].isNull() && m_acquirer_code_isValid;

    m_acquirer_reference_isValid = ::OpenAPI::fromJsonValue(m_acquirer_reference, json[QString("acquirerReference")]);
    m_acquirer_reference_isSet = !json[QString("acquirerReference")].isNull() && m_acquirer_reference_isValid;

    m_alias_isValid = ::OpenAPI::fromJsonValue(m_alias, json[QString("alias")]);
    m_alias_isSet = !json[QString("alias")].isNull() && m_alias_isValid;

    m_alias_type_isValid = ::OpenAPI::fromJsonValue(m_alias_type, json[QString("aliasType")]);
    m_alias_type_isSet = !json[QString("aliasType")].isNull() && m_alias_type_isValid;

    m_auth_code_isValid = ::OpenAPI::fromJsonValue(m_auth_code, json[QString("authCode")]);
    m_auth_code_isSet = !json[QString("authCode")].isNull() && m_auth_code_isValid;

    m_authorisation_mid_isValid = ::OpenAPI::fromJsonValue(m_authorisation_mid, json[QString("authorisationMid")]);
    m_authorisation_mid_isSet = !json[QString("authorisationMid")].isNull() && m_authorisation_mid_isValid;

    m_authorised_amount_currency_isValid = ::OpenAPI::fromJsonValue(m_authorised_amount_currency, json[QString("authorisedAmountCurrency")]);
    m_authorised_amount_currency_isSet = !json[QString("authorisedAmountCurrency")].isNull() && m_authorised_amount_currency_isValid;

    m_authorised_amount_value_isValid = ::OpenAPI::fromJsonValue(m_authorised_amount_value, json[QString("authorisedAmountValue")]);
    m_authorised_amount_value_isSet = !json[QString("authorisedAmountValue")].isNull() && m_authorised_amount_value_isValid;

    m_avs_result_isValid = ::OpenAPI::fromJsonValue(m_avs_result, json[QString("avsResult")]);
    m_avs_result_isSet = !json[QString("avsResult")].isNull() && m_avs_result_isValid;

    m_avs_result_raw_isValid = ::OpenAPI::fromJsonValue(m_avs_result_raw, json[QString("avsResultRaw")]);
    m_avs_result_raw_isSet = !json[QString("avsResultRaw")].isNull() && m_avs_result_raw_isValid;

    m_bic_isValid = ::OpenAPI::fromJsonValue(m_bic, json[QString("bic")]);
    m_bic_isSet = !json[QString("bic")].isNull() && m_bic_isValid;

    m_co_branded_with_isValid = ::OpenAPI::fromJsonValue(m_co_branded_with, json[QString("coBrandedWith")]);
    m_co_branded_with_isSet = !json[QString("coBrandedWith")].isNull() && m_co_branded_with_isValid;

    m_cvc_result_isValid = ::OpenAPI::fromJsonValue(m_cvc_result, json[QString("cvcResult")]);
    m_cvc_result_isSet = !json[QString("cvcResult")].isNull() && m_cvc_result_isValid;

    m_cvc_result_raw_isValid = ::OpenAPI::fromJsonValue(m_cvc_result_raw, json[QString("cvcResultRaw")]);
    m_cvc_result_raw_isSet = !json[QString("cvcResultRaw")].isNull() && m_cvc_result_raw_isValid;

    m_ds_trans_id_isValid = ::OpenAPI::fromJsonValue(m_ds_trans_id, json[QString("dsTransID")]);
    m_ds_trans_id_isSet = !json[QString("dsTransID")].isNull() && m_ds_trans_id_isValid;

    m_eci_isValid = ::OpenAPI::fromJsonValue(m_eci, json[QString("eci")]);
    m_eci_isSet = !json[QString("eci")].isNull() && m_eci_isValid;

    m_expiry_date_isValid = ::OpenAPI::fromJsonValue(m_expiry_date, json[QString("expiryDate")]);
    m_expiry_date_isSet = !json[QString("expiryDate")].isNull() && m_expiry_date_isValid;

    m_extra_costs_currency_isValid = ::OpenAPI::fromJsonValue(m_extra_costs_currency, json[QString("extraCostsCurrency")]);
    m_extra_costs_currency_isSet = !json[QString("extraCostsCurrency")].isNull() && m_extra_costs_currency_isValid;

    m_extra_costs_value_isValid = ::OpenAPI::fromJsonValue(m_extra_costs_value, json[QString("extraCostsValue")]);
    m_extra_costs_value_isSet = !json[QString("extraCostsValue")].isNull() && m_extra_costs_value_isValid;

    m_fraud_check__item_nr__fraud_checkname_isValid = ::OpenAPI::fromJsonValue(m_fraud_check__item_nr__fraud_checkname, json[QString("fraudCheck-[itemNr]-[FraudCheckname]")]);
    m_fraud_check__item_nr__fraud_checkname_isSet = !json[QString("fraudCheck-[itemNr]-[FraudCheckname]")].isNull() && m_fraud_check__item_nr__fraud_checkname_isValid;

    m_fraud_manual_review_isValid = ::OpenAPI::fromJsonValue(m_fraud_manual_review, json[QString("fraudManualReview")]);
    m_fraud_manual_review_isSet = !json[QString("fraudManualReview")].isNull() && m_fraud_manual_review_isValid;

    m_fraud_result_type_isValid = ::OpenAPI::fromJsonValue(m_fraud_result_type, json[QString("fraudResultType")]);
    m_fraud_result_type_isSet = !json[QString("fraudResultType")].isNull() && m_fraud_result_type_isValid;

    m_funding_source_isValid = ::OpenAPI::fromJsonValue(m_funding_source, json[QString("fundingSource")]);
    m_funding_source_isSet = !json[QString("fundingSource")].isNull() && m_funding_source_isValid;

    m_funds_availability_isValid = ::OpenAPI::fromJsonValue(m_funds_availability, json[QString("fundsAvailability")]);
    m_funds_availability_isSet = !json[QString("fundsAvailability")].isNull() && m_funds_availability_isValid;

    m_inferred_refusal_reason_isValid = ::OpenAPI::fromJsonValue(m_inferred_refusal_reason, json[QString("inferredRefusalReason")]);
    m_inferred_refusal_reason_isSet = !json[QString("inferredRefusalReason")].isNull() && m_inferred_refusal_reason_isValid;

    m_is_card_commercial_isValid = ::OpenAPI::fromJsonValue(m_is_card_commercial, json[QString("isCardCommercial")]);
    m_is_card_commercial_isSet = !json[QString("isCardCommercial")].isNull() && m_is_card_commercial_isValid;

    m_issuer_country_isValid = ::OpenAPI::fromJsonValue(m_issuer_country, json[QString("issuerCountry")]);
    m_issuer_country_isSet = !json[QString("issuerCountry")].isNull() && m_issuer_country_isValid;

    m_liability_shift_isValid = ::OpenAPI::fromJsonValue(m_liability_shift, json[QString("liabilityShift")]);
    m_liability_shift_isSet = !json[QString("liabilityShift")].isNull() && m_liability_shift_isValid;

    m_mc_bank_net_reference_number_isValid = ::OpenAPI::fromJsonValue(m_mc_bank_net_reference_number, json[QString("mcBankNetReferenceNumber")]);
    m_mc_bank_net_reference_number_isSet = !json[QString("mcBankNetReferenceNumber")].isNull() && m_mc_bank_net_reference_number_isValid;

    m_merchant_advice_code_isValid = ::OpenAPI::fromJsonValue(m_merchant_advice_code, json[QString("merchantAdviceCode")]);
    m_merchant_advice_code_isSet = !json[QString("merchantAdviceCode")].isNull() && m_merchant_advice_code_isValid;

    m_merchant_reference_isValid = ::OpenAPI::fromJsonValue(m_merchant_reference, json[QString("merchantReference")]);
    m_merchant_reference_isSet = !json[QString("merchantReference")].isNull() && m_merchant_reference_isValid;

    m_network_tx_reference_isValid = ::OpenAPI::fromJsonValue(m_network_tx_reference, json[QString("networkTxReference")]);
    m_network_tx_reference_isSet = !json[QString("networkTxReference")].isNull() && m_network_tx_reference_isValid;

    m_non_scheme_transaction_limit_isValid = ::OpenAPI::fromJsonValue(m_non_scheme_transaction_limit, json[QString("nonScheme.transactionLimit")]);
    m_non_scheme_transaction_limit_isSet = !json[QString("nonScheme.transactionLimit")].isNull() && m_non_scheme_transaction_limit_isValid;

    m_non_scheme_transaction_limit_ccy_isValid = ::OpenAPI::fromJsonValue(m_non_scheme_transaction_limit_ccy, json[QString("nonScheme.transactionLimitCcy")]);
    m_non_scheme_transaction_limit_ccy_isSet = !json[QString("nonScheme.transactionLimitCcy")].isNull() && m_non_scheme_transaction_limit_ccy_isValid;

    m_owner_name_isValid = ::OpenAPI::fromJsonValue(m_owner_name, json[QString("ownerName")]);
    m_owner_name_isSet = !json[QString("ownerName")].isNull() && m_owner_name_isValid;

    m_payment_account_reference_isValid = ::OpenAPI::fromJsonValue(m_payment_account_reference, json[QString("paymentAccountReference")]);
    m_payment_account_reference_isSet = !json[QString("paymentAccountReference")].isNull() && m_payment_account_reference_isValid;

    m_payment_method_isValid = ::OpenAPI::fromJsonValue(m_payment_method, json[QString("paymentMethod")]);
    m_payment_method_isSet = !json[QString("paymentMethod")].isNull() && m_payment_method_isValid;

    m_payment_method_variant_isValid = ::OpenAPI::fromJsonValue(m_payment_method_variant, json[QString("paymentMethodVariant")]);
    m_payment_method_variant_isSet = !json[QString("paymentMethodVariant")].isNull() && m_payment_method_variant_isValid;

    m_payout_eligible_isValid = ::OpenAPI::fromJsonValue(m_payout_eligible, json[QString("payoutEligible")]);
    m_payout_eligible_isSet = !json[QString("payoutEligible")].isNull() && m_payout_eligible_isValid;

    m_realtime_account_updater_status_isValid = ::OpenAPI::fromJsonValue(m_realtime_account_updater_status, json[QString("realtimeAccountUpdaterStatus")]);
    m_realtime_account_updater_status_isSet = !json[QString("realtimeAccountUpdaterStatus")].isNull() && m_realtime_account_updater_status_isValid;

    m_receipt_free_text_isValid = ::OpenAPI::fromJsonValue(m_receipt_free_text, json[QString("receiptFreeText")]);
    m_receipt_free_text_isSet = !json[QString("receiptFreeText")].isNull() && m_receipt_free_text_isValid;

    m_recurring_contract_types_isValid = ::OpenAPI::fromJsonValue(m_recurring_contract_types, json[QString("recurring.contractTypes")]);
    m_recurring_contract_types_isSet = !json[QString("recurring.contractTypes")].isNull() && m_recurring_contract_types_isValid;

    m_recurring_first_psp_reference_isValid = ::OpenAPI::fromJsonValue(m_recurring_first_psp_reference, json[QString("recurring.firstPspReference")]);
    m_recurring_first_psp_reference_isSet = !json[QString("recurring.firstPspReference")].isNull() && m_recurring_first_psp_reference_isValid;

    m_recurring_recurring_detail_reference_isValid = ::OpenAPI::fromJsonValue(m_recurring_recurring_detail_reference, json[QString("recurring.recurringDetailReference")]);
    m_recurring_recurring_detail_reference_isSet = !json[QString("recurring.recurringDetailReference")].isNull() && m_recurring_recurring_detail_reference_isValid;

    m_recurring_shopper_reference_isValid = ::OpenAPI::fromJsonValue(m_recurring_shopper_reference, json[QString("recurring.shopperReference")]);
    m_recurring_shopper_reference_isSet = !json[QString("recurring.shopperReference")].isNull() && m_recurring_shopper_reference_isValid;

    m_recurring_processing_model_isValid = ::OpenAPI::fromJsonValue(m_recurring_processing_model, json[QString("recurringProcessingModel")]);
    m_recurring_processing_model_isSet = !json[QString("recurringProcessingModel")].isNull() && m_recurring_processing_model_isValid;

    m_referred_isValid = ::OpenAPI::fromJsonValue(m_referred, json[QString("referred")]);
    m_referred_isSet = !json[QString("referred")].isNull() && m_referred_isValid;

    m_refusal_reason_raw_isValid = ::OpenAPI::fromJsonValue(m_refusal_reason_raw, json[QString("refusalReasonRaw")]);
    m_refusal_reason_raw_isSet = !json[QString("refusalReasonRaw")].isNull() && m_refusal_reason_raw_isValid;

    m_request_amount_isValid = ::OpenAPI::fromJsonValue(m_request_amount, json[QString("requestAmount")]);
    m_request_amount_isSet = !json[QString("requestAmount")].isNull() && m_request_amount_isValid;

    m_request_currency_code_isValid = ::OpenAPI::fromJsonValue(m_request_currency_code, json[QString("requestCurrencyCode")]);
    m_request_currency_code_isSet = !json[QString("requestCurrencyCode")].isNull() && m_request_currency_code_isValid;

    m_shopper_interaction_isValid = ::OpenAPI::fromJsonValue(m_shopper_interaction, json[QString("shopperInteraction")]);
    m_shopper_interaction_isSet = !json[QString("shopperInteraction")].isNull() && m_shopper_interaction_isValid;

    m_shopper_reference_isValid = ::OpenAPI::fromJsonValue(m_shopper_reference, json[QString("shopperReference")]);
    m_shopper_reference_isSet = !json[QString("shopperReference")].isNull() && m_shopper_reference_isValid;

    m_terminal_id_isValid = ::OpenAPI::fromJsonValue(m_terminal_id, json[QString("terminalId")]);
    m_terminal_id_isSet = !json[QString("terminalId")].isNull() && m_terminal_id_isValid;

    m_three_d_authenticated_isValid = ::OpenAPI::fromJsonValue(m_three_d_authenticated, json[QString("threeDAuthenticated")]);
    m_three_d_authenticated_isSet = !json[QString("threeDAuthenticated")].isNull() && m_three_d_authenticated_isValid;

    m_three_d_authenticated_response_isValid = ::OpenAPI::fromJsonValue(m_three_d_authenticated_response, json[QString("threeDAuthenticatedResponse")]);
    m_three_d_authenticated_response_isSet = !json[QString("threeDAuthenticatedResponse")].isNull() && m_three_d_authenticated_response_isValid;

    m_three_d_offered_isValid = ::OpenAPI::fromJsonValue(m_three_d_offered, json[QString("threeDOffered")]);
    m_three_d_offered_isSet = !json[QString("threeDOffered")].isNull() && m_three_d_offered_isValid;

    m_three_d_offered_response_isValid = ::OpenAPI::fromJsonValue(m_three_d_offered_response, json[QString("threeDOfferedResponse")]);
    m_three_d_offered_response_isSet = !json[QString("threeDOfferedResponse")].isNull() && m_three_d_offered_response_isValid;

    m_three_ds_version_isValid = ::OpenAPI::fromJsonValue(m_three_ds_version, json[QString("threeDSVersion")]);
    m_three_ds_version_isSet = !json[QString("threeDSVersion")].isNull() && m_three_ds_version_isValid;

    m_visa_transaction_id_isValid = ::OpenAPI::fromJsonValue(m_visa_transaction_id, json[QString("visaTransactionId")]);
    m_visa_transaction_id_isSet = !json[QString("visaTransactionId")].isNull() && m_visa_transaction_id_isValid;

    m_xid_isValid = ::OpenAPI::fromJsonValue(m_xid, json[QString("xid")]);
    m_xid_isSet = !json[QString("xid")].isNull() && m_xid_isValid;

    m_domestic_refusal_reason_raw_isValid = ::OpenAPI::fromJsonValue(m_domestic_refusal_reason_raw, json[QString("domesticRefusalReasonRaw")]);
    m_domestic_refusal_reason_raw_isSet = !json[QString("domesticRefusalReasonRaw")].isNull() && m_domestic_refusal_reason_raw_isValid;

    m_domestic_shopper_advice_isValid = ::OpenAPI::fromJsonValue(m_domestic_shopper_advice, json[QString("domesticShopperAdvice")]);
    m_domestic_shopper_advice_isSet = !json[QString("domesticShopperAdvice")].isNull() && m_domestic_shopper_advice_isValid;

    m_installment_payment_data_installment_type_isValid = ::OpenAPI::fromJsonValue(m_installment_payment_data_installment_type, json[QString("installmentPaymentData.installmentType")]);
    m_installment_payment_data_installment_type_isSet = !json[QString("installmentPaymentData.installmentType")].isNull() && m_installment_payment_data_installment_type_isValid;

    m_installment_payment_data_option_item_nr_annual_percentage_rate_isValid = ::OpenAPI::fromJsonValue(m_installment_payment_data_option_item_nr_annual_percentage_rate, json[QString("installmentPaymentData.option[itemNr].annualPercentageRate")]);
    m_installment_payment_data_option_item_nr_annual_percentage_rate_isSet = !json[QString("installmentPaymentData.option[itemNr].annualPercentageRate")].isNull() && m_installment_payment_data_option_item_nr_annual_percentage_rate_isValid;

    m_installment_payment_data_option_item_nr_first_installment_amount_isValid = ::OpenAPI::fromJsonValue(m_installment_payment_data_option_item_nr_first_installment_amount, json[QString("installmentPaymentData.option[itemNr].firstInstallmentAmount")]);
    m_installment_payment_data_option_item_nr_first_installment_amount_isSet = !json[QString("installmentPaymentData.option[itemNr].firstInstallmentAmount")].isNull() && m_installment_payment_data_option_item_nr_first_installment_amount_isValid;

    m_installment_payment_data_option_item_nr_installment_fee_isValid = ::OpenAPI::fromJsonValue(m_installment_payment_data_option_item_nr_installment_fee, json[QString("installmentPaymentData.option[itemNr].installmentFee")]);
    m_installment_payment_data_option_item_nr_installment_fee_isSet = !json[QString("installmentPaymentData.option[itemNr].installmentFee")].isNull() && m_installment_payment_data_option_item_nr_installment_fee_isValid;

    m_installment_payment_data_option_item_nr_interest_rate_isValid = ::OpenAPI::fromJsonValue(m_installment_payment_data_option_item_nr_interest_rate, json[QString("installmentPaymentData.option[itemNr].interestRate")]);
    m_installment_payment_data_option_item_nr_interest_rate_isSet = !json[QString("installmentPaymentData.option[itemNr].interestRate")].isNull() && m_installment_payment_data_option_item_nr_interest_rate_isValid;

    m_installment_payment_data_option_item_nr_maximum_number_of_installments_isValid = ::OpenAPI::fromJsonValue(m_installment_payment_data_option_item_nr_maximum_number_of_installments, json[QString("installmentPaymentData.option[itemNr].maximumNumberOfInstallments")]);
    m_installment_payment_data_option_item_nr_maximum_number_of_installments_isSet = !json[QString("installmentPaymentData.option[itemNr].maximumNumberOfInstallments")].isNull() && m_installment_payment_data_option_item_nr_maximum_number_of_installments_isValid;

    m_installment_payment_data_option_item_nr_minimum_number_of_installments_isValid = ::OpenAPI::fromJsonValue(m_installment_payment_data_option_item_nr_minimum_number_of_installments, json[QString("installmentPaymentData.option[itemNr].minimumNumberOfInstallments")]);
    m_installment_payment_data_option_item_nr_minimum_number_of_installments_isSet = !json[QString("installmentPaymentData.option[itemNr].minimumNumberOfInstallments")].isNull() && m_installment_payment_data_option_item_nr_minimum_number_of_installments_isValid;

    m_installment_payment_data_option_item_nr_number_of_installments_isValid = ::OpenAPI::fromJsonValue(m_installment_payment_data_option_item_nr_number_of_installments, json[QString("installmentPaymentData.option[itemNr].numberOfInstallments")]);
    m_installment_payment_data_option_item_nr_number_of_installments_isSet = !json[QString("installmentPaymentData.option[itemNr].numberOfInstallments")].isNull() && m_installment_payment_data_option_item_nr_number_of_installments_isValid;

    m_installment_payment_data_option_item_nr_subsequent_installment_amount_isValid = ::OpenAPI::fromJsonValue(m_installment_payment_data_option_item_nr_subsequent_installment_amount, json[QString("installmentPaymentData.option[itemNr].subsequentInstallmentAmount")]);
    m_installment_payment_data_option_item_nr_subsequent_installment_amount_isSet = !json[QString("installmentPaymentData.option[itemNr].subsequentInstallmentAmount")].isNull() && m_installment_payment_data_option_item_nr_subsequent_installment_amount_isValid;

    m_installment_payment_data_option_item_nr_total_amount_due_isValid = ::OpenAPI::fromJsonValue(m_installment_payment_data_option_item_nr_total_amount_due, json[QString("installmentPaymentData.option[itemNr].totalAmountDue")]);
    m_installment_payment_data_option_item_nr_total_amount_due_isSet = !json[QString("installmentPaymentData.option[itemNr].totalAmountDue")].isNull() && m_installment_payment_data_option_item_nr_total_amount_due_isValid;

    m_installment_payment_data_payment_options_isValid = ::OpenAPI::fromJsonValue(m_installment_payment_data_payment_options, json[QString("installmentPaymentData.paymentOptions")]);
    m_installment_payment_data_payment_options_isSet = !json[QString("installmentPaymentData.paymentOptions")].isNull() && m_installment_payment_data_payment_options_isValid;

    m_installments_value_isValid = ::OpenAPI::fromJsonValue(m_installments_value, json[QString("installments.value")]);
    m_installments_value_isSet = !json[QString("installments.value")].isNull() && m_installments_value_isValid;

    m_network_token_available_isValid = ::OpenAPI::fromJsonValue(m_network_token_available, json[QString("networkToken.available")]);
    m_network_token_available_isSet = !json[QString("networkToken.available")].isNull() && m_network_token_available_isValid;

    m_network_token_bin_isValid = ::OpenAPI::fromJsonValue(m_network_token_bin, json[QString("networkToken.bin")]);
    m_network_token_bin_isSet = !json[QString("networkToken.bin")].isNull() && m_network_token_bin_isValid;

    m_network_token_token_summary_isValid = ::OpenAPI::fromJsonValue(m_network_token_token_summary, json[QString("networkToken.tokenSummary")]);
    m_network_token_token_summary_isSet = !json[QString("networkToken.tokenSummary")].isNull() && m_network_token_token_summary_isValid;

    m_opi_trans_token_isValid = ::OpenAPI::fromJsonValue(m_opi_trans_token, json[QString("opi.transToken")]);
    m_opi_trans_token_isSet = !json[QString("opi.transToken")].isNull() && m_opi_trans_token_isValid;

    m_sepadirectdebit_date_of_signature_isValid = ::OpenAPI::fromJsonValue(m_sepadirectdebit_date_of_signature, json[QString("sepadirectdebit.dateOfSignature")]);
    m_sepadirectdebit_date_of_signature_isSet = !json[QString("sepadirectdebit.dateOfSignature")].isNull() && m_sepadirectdebit_date_of_signature_isValid;

    m_sepadirectdebit_mandate_id_isValid = ::OpenAPI::fromJsonValue(m_sepadirectdebit_mandate_id, json[QString("sepadirectdebit.mandateId")]);
    m_sepadirectdebit_mandate_id_isSet = !json[QString("sepadirectdebit.mandateId")].isNull() && m_sepadirectdebit_mandate_id_isValid;

    m_sepadirectdebit_sequence_type_isValid = ::OpenAPI::fromJsonValue(m_sepadirectdebit_sequence_type, json[QString("sepadirectdebit.sequenceType")]);
    m_sepadirectdebit_sequence_type_isSet = !json[QString("sepadirectdebit.sequenceType")].isNull() && m_sepadirectdebit_sequence_type_isValid;
}

QString OAIPayoutResponse_additionalData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPayoutResponse_additionalData::asJsonObject() const {
    QJsonObject obj;
    if (m_card_holder_info_isSet) {
        obj.insert(QString("cardHolderInfo"), ::OpenAPI::toJsonValue(m_card_holder_info));
    }
    if (m_cavv_isSet) {
        obj.insert(QString("cavv"), ::OpenAPI::toJsonValue(m_cavv));
    }
    if (m_cavv_algorithm_isSet) {
        obj.insert(QString("cavvAlgorithm"), ::OpenAPI::toJsonValue(m_cavv_algorithm));
    }
    if (m_sca_exemption_requested_isSet) {
        obj.insert(QString("scaExemptionRequested"), ::OpenAPI::toJsonValue(m_sca_exemption_requested));
    }
    if (m_threeds2_card_enrolled_isSet) {
        obj.insert(QString("threeds2.cardEnrolled"), ::OpenAPI::toJsonValue(m_threeds2_card_enrolled));
    }
    if (m_billing_address_city_isSet) {
        obj.insert(QString("billingAddress.city"), ::OpenAPI::toJsonValue(m_billing_address_city));
    }
    if (m_billing_address_country_isSet) {
        obj.insert(QString("billingAddress.country"), ::OpenAPI::toJsonValue(m_billing_address_country));
    }
    if (m_billing_address_house_number_or_name_isSet) {
        obj.insert(QString("billingAddress.houseNumberOrName"), ::OpenAPI::toJsonValue(m_billing_address_house_number_or_name));
    }
    if (m_billing_address_postal_code_isSet) {
        obj.insert(QString("billingAddress.postalCode"), ::OpenAPI::toJsonValue(m_billing_address_postal_code));
    }
    if (m_billing_address_state_or_province_isSet) {
        obj.insert(QString("billingAddress.stateOrProvince"), ::OpenAPI::toJsonValue(m_billing_address_state_or_province));
    }
    if (m_billing_address_street_isSet) {
        obj.insert(QString("billingAddress.street"), ::OpenAPI::toJsonValue(m_billing_address_street));
    }
    if (m_card_bin_isSet) {
        obj.insert(QString("cardBin"), ::OpenAPI::toJsonValue(m_card_bin));
    }
    if (m_card_holder_name_isSet) {
        obj.insert(QString("cardHolderName"), ::OpenAPI::toJsonValue(m_card_holder_name));
    }
    if (m_card_issuing_bank_isSet) {
        obj.insert(QString("cardIssuingBank"), ::OpenAPI::toJsonValue(m_card_issuing_bank));
    }
    if (m_card_issuing_country_isSet) {
        obj.insert(QString("cardIssuingCountry"), ::OpenAPI::toJsonValue(m_card_issuing_country));
    }
    if (m_card_issuing_currency_isSet) {
        obj.insert(QString("cardIssuingCurrency"), ::OpenAPI::toJsonValue(m_card_issuing_currency));
    }
    if (m_card_payment_method_isSet) {
        obj.insert(QString("cardPaymentMethod"), ::OpenAPI::toJsonValue(m_card_payment_method));
    }
    if (m_card_summary_isSet) {
        obj.insert(QString("cardSummary"), ::OpenAPI::toJsonValue(m_card_summary));
    }
    if (m_issuer_bin_isSet) {
        obj.insert(QString("issuerBin"), ::OpenAPI::toJsonValue(m_issuer_bin));
    }
    if (m_acquirer_account_code_isSet) {
        obj.insert(QString("acquirerAccountCode"), ::OpenAPI::toJsonValue(m_acquirer_account_code));
    }
    if (m_acquirer_code_isSet) {
        obj.insert(QString("acquirerCode"), ::OpenAPI::toJsonValue(m_acquirer_code));
    }
    if (m_acquirer_reference_isSet) {
        obj.insert(QString("acquirerReference"), ::OpenAPI::toJsonValue(m_acquirer_reference));
    }
    if (m_alias_isSet) {
        obj.insert(QString("alias"), ::OpenAPI::toJsonValue(m_alias));
    }
    if (m_alias_type_isSet) {
        obj.insert(QString("aliasType"), ::OpenAPI::toJsonValue(m_alias_type));
    }
    if (m_auth_code_isSet) {
        obj.insert(QString("authCode"), ::OpenAPI::toJsonValue(m_auth_code));
    }
    if (m_authorisation_mid_isSet) {
        obj.insert(QString("authorisationMid"), ::OpenAPI::toJsonValue(m_authorisation_mid));
    }
    if (m_authorised_amount_currency_isSet) {
        obj.insert(QString("authorisedAmountCurrency"), ::OpenAPI::toJsonValue(m_authorised_amount_currency));
    }
    if (m_authorised_amount_value_isSet) {
        obj.insert(QString("authorisedAmountValue"), ::OpenAPI::toJsonValue(m_authorised_amount_value));
    }
    if (m_avs_result_isSet) {
        obj.insert(QString("avsResult"), ::OpenAPI::toJsonValue(m_avs_result));
    }
    if (m_avs_result_raw_isSet) {
        obj.insert(QString("avsResultRaw"), ::OpenAPI::toJsonValue(m_avs_result_raw));
    }
    if (m_bic_isSet) {
        obj.insert(QString("bic"), ::OpenAPI::toJsonValue(m_bic));
    }
    if (m_co_branded_with_isSet) {
        obj.insert(QString("coBrandedWith"), ::OpenAPI::toJsonValue(m_co_branded_with));
    }
    if (m_cvc_result_isSet) {
        obj.insert(QString("cvcResult"), ::OpenAPI::toJsonValue(m_cvc_result));
    }
    if (m_cvc_result_raw_isSet) {
        obj.insert(QString("cvcResultRaw"), ::OpenAPI::toJsonValue(m_cvc_result_raw));
    }
    if (m_ds_trans_id_isSet) {
        obj.insert(QString("dsTransID"), ::OpenAPI::toJsonValue(m_ds_trans_id));
    }
    if (m_eci_isSet) {
        obj.insert(QString("eci"), ::OpenAPI::toJsonValue(m_eci));
    }
    if (m_expiry_date_isSet) {
        obj.insert(QString("expiryDate"), ::OpenAPI::toJsonValue(m_expiry_date));
    }
    if (m_extra_costs_currency_isSet) {
        obj.insert(QString("extraCostsCurrency"), ::OpenAPI::toJsonValue(m_extra_costs_currency));
    }
    if (m_extra_costs_value_isSet) {
        obj.insert(QString("extraCostsValue"), ::OpenAPI::toJsonValue(m_extra_costs_value));
    }
    if (m_fraud_check__item_nr__fraud_checkname_isSet) {
        obj.insert(QString("fraudCheck-[itemNr]-[FraudCheckname]"), ::OpenAPI::toJsonValue(m_fraud_check__item_nr__fraud_checkname));
    }
    if (m_fraud_manual_review_isSet) {
        obj.insert(QString("fraudManualReview"), ::OpenAPI::toJsonValue(m_fraud_manual_review));
    }
    if (m_fraud_result_type_isSet) {
        obj.insert(QString("fraudResultType"), ::OpenAPI::toJsonValue(m_fraud_result_type));
    }
    if (m_funding_source_isSet) {
        obj.insert(QString("fundingSource"), ::OpenAPI::toJsonValue(m_funding_source));
    }
    if (m_funds_availability_isSet) {
        obj.insert(QString("fundsAvailability"), ::OpenAPI::toJsonValue(m_funds_availability));
    }
    if (m_inferred_refusal_reason_isSet) {
        obj.insert(QString("inferredRefusalReason"), ::OpenAPI::toJsonValue(m_inferred_refusal_reason));
    }
    if (m_is_card_commercial_isSet) {
        obj.insert(QString("isCardCommercial"), ::OpenAPI::toJsonValue(m_is_card_commercial));
    }
    if (m_issuer_country_isSet) {
        obj.insert(QString("issuerCountry"), ::OpenAPI::toJsonValue(m_issuer_country));
    }
    if (m_liability_shift_isSet) {
        obj.insert(QString("liabilityShift"), ::OpenAPI::toJsonValue(m_liability_shift));
    }
    if (m_mc_bank_net_reference_number_isSet) {
        obj.insert(QString("mcBankNetReferenceNumber"), ::OpenAPI::toJsonValue(m_mc_bank_net_reference_number));
    }
    if (m_merchant_advice_code_isSet) {
        obj.insert(QString("merchantAdviceCode"), ::OpenAPI::toJsonValue(m_merchant_advice_code));
    }
    if (m_merchant_reference_isSet) {
        obj.insert(QString("merchantReference"), ::OpenAPI::toJsonValue(m_merchant_reference));
    }
    if (m_network_tx_reference_isSet) {
        obj.insert(QString("networkTxReference"), ::OpenAPI::toJsonValue(m_network_tx_reference));
    }
    if (m_non_scheme_transaction_limit_isSet) {
        obj.insert(QString("nonScheme.transactionLimit"), ::OpenAPI::toJsonValue(m_non_scheme_transaction_limit));
    }
    if (m_non_scheme_transaction_limit_ccy_isSet) {
        obj.insert(QString("nonScheme.transactionLimitCcy"), ::OpenAPI::toJsonValue(m_non_scheme_transaction_limit_ccy));
    }
    if (m_owner_name_isSet) {
        obj.insert(QString("ownerName"), ::OpenAPI::toJsonValue(m_owner_name));
    }
    if (m_payment_account_reference_isSet) {
        obj.insert(QString("paymentAccountReference"), ::OpenAPI::toJsonValue(m_payment_account_reference));
    }
    if (m_payment_method_isSet) {
        obj.insert(QString("paymentMethod"), ::OpenAPI::toJsonValue(m_payment_method));
    }
    if (m_payment_method_variant_isSet) {
        obj.insert(QString("paymentMethodVariant"), ::OpenAPI::toJsonValue(m_payment_method_variant));
    }
    if (m_payout_eligible_isSet) {
        obj.insert(QString("payoutEligible"), ::OpenAPI::toJsonValue(m_payout_eligible));
    }
    if (m_realtime_account_updater_status_isSet) {
        obj.insert(QString("realtimeAccountUpdaterStatus"), ::OpenAPI::toJsonValue(m_realtime_account_updater_status));
    }
    if (m_receipt_free_text_isSet) {
        obj.insert(QString("receiptFreeText"), ::OpenAPI::toJsonValue(m_receipt_free_text));
    }
    if (m_recurring_contract_types_isSet) {
        obj.insert(QString("recurring.contractTypes"), ::OpenAPI::toJsonValue(m_recurring_contract_types));
    }
    if (m_recurring_first_psp_reference_isSet) {
        obj.insert(QString("recurring.firstPspReference"), ::OpenAPI::toJsonValue(m_recurring_first_psp_reference));
    }
    if (m_recurring_recurring_detail_reference_isSet) {
        obj.insert(QString("recurring.recurringDetailReference"), ::OpenAPI::toJsonValue(m_recurring_recurring_detail_reference));
    }
    if (m_recurring_shopper_reference_isSet) {
        obj.insert(QString("recurring.shopperReference"), ::OpenAPI::toJsonValue(m_recurring_shopper_reference));
    }
    if (m_recurring_processing_model_isSet) {
        obj.insert(QString("recurringProcessingModel"), ::OpenAPI::toJsonValue(m_recurring_processing_model));
    }
    if (m_referred_isSet) {
        obj.insert(QString("referred"), ::OpenAPI::toJsonValue(m_referred));
    }
    if (m_refusal_reason_raw_isSet) {
        obj.insert(QString("refusalReasonRaw"), ::OpenAPI::toJsonValue(m_refusal_reason_raw));
    }
    if (m_request_amount_isSet) {
        obj.insert(QString("requestAmount"), ::OpenAPI::toJsonValue(m_request_amount));
    }
    if (m_request_currency_code_isSet) {
        obj.insert(QString("requestCurrencyCode"), ::OpenAPI::toJsonValue(m_request_currency_code));
    }
    if (m_shopper_interaction_isSet) {
        obj.insert(QString("shopperInteraction"), ::OpenAPI::toJsonValue(m_shopper_interaction));
    }
    if (m_shopper_reference_isSet) {
        obj.insert(QString("shopperReference"), ::OpenAPI::toJsonValue(m_shopper_reference));
    }
    if (m_terminal_id_isSet) {
        obj.insert(QString("terminalId"), ::OpenAPI::toJsonValue(m_terminal_id));
    }
    if (m_three_d_authenticated_isSet) {
        obj.insert(QString("threeDAuthenticated"), ::OpenAPI::toJsonValue(m_three_d_authenticated));
    }
    if (m_three_d_authenticated_response_isSet) {
        obj.insert(QString("threeDAuthenticatedResponse"), ::OpenAPI::toJsonValue(m_three_d_authenticated_response));
    }
    if (m_three_d_offered_isSet) {
        obj.insert(QString("threeDOffered"), ::OpenAPI::toJsonValue(m_three_d_offered));
    }
    if (m_three_d_offered_response_isSet) {
        obj.insert(QString("threeDOfferedResponse"), ::OpenAPI::toJsonValue(m_three_d_offered_response));
    }
    if (m_three_ds_version_isSet) {
        obj.insert(QString("threeDSVersion"), ::OpenAPI::toJsonValue(m_three_ds_version));
    }
    if (m_visa_transaction_id_isSet) {
        obj.insert(QString("visaTransactionId"), ::OpenAPI::toJsonValue(m_visa_transaction_id));
    }
    if (m_xid_isSet) {
        obj.insert(QString("xid"), ::OpenAPI::toJsonValue(m_xid));
    }
    if (m_domestic_refusal_reason_raw_isSet) {
        obj.insert(QString("domesticRefusalReasonRaw"), ::OpenAPI::toJsonValue(m_domestic_refusal_reason_raw));
    }
    if (m_domestic_shopper_advice_isSet) {
        obj.insert(QString("domesticShopperAdvice"), ::OpenAPI::toJsonValue(m_domestic_shopper_advice));
    }
    if (m_installment_payment_data_installment_type_isSet) {
        obj.insert(QString("installmentPaymentData.installmentType"), ::OpenAPI::toJsonValue(m_installment_payment_data_installment_type));
    }
    if (m_installment_payment_data_option_item_nr_annual_percentage_rate_isSet) {
        obj.insert(QString("installmentPaymentData.option[itemNr].annualPercentageRate"), ::OpenAPI::toJsonValue(m_installment_payment_data_option_item_nr_annual_percentage_rate));
    }
    if (m_installment_payment_data_option_item_nr_first_installment_amount_isSet) {
        obj.insert(QString("installmentPaymentData.option[itemNr].firstInstallmentAmount"), ::OpenAPI::toJsonValue(m_installment_payment_data_option_item_nr_first_installment_amount));
    }
    if (m_installment_payment_data_option_item_nr_installment_fee_isSet) {
        obj.insert(QString("installmentPaymentData.option[itemNr].installmentFee"), ::OpenAPI::toJsonValue(m_installment_payment_data_option_item_nr_installment_fee));
    }
    if (m_installment_payment_data_option_item_nr_interest_rate_isSet) {
        obj.insert(QString("installmentPaymentData.option[itemNr].interestRate"), ::OpenAPI::toJsonValue(m_installment_payment_data_option_item_nr_interest_rate));
    }
    if (m_installment_payment_data_option_item_nr_maximum_number_of_installments_isSet) {
        obj.insert(QString("installmentPaymentData.option[itemNr].maximumNumberOfInstallments"), ::OpenAPI::toJsonValue(m_installment_payment_data_option_item_nr_maximum_number_of_installments));
    }
    if (m_installment_payment_data_option_item_nr_minimum_number_of_installments_isSet) {
        obj.insert(QString("installmentPaymentData.option[itemNr].minimumNumberOfInstallments"), ::OpenAPI::toJsonValue(m_installment_payment_data_option_item_nr_minimum_number_of_installments));
    }
    if (m_installment_payment_data_option_item_nr_number_of_installments_isSet) {
        obj.insert(QString("installmentPaymentData.option[itemNr].numberOfInstallments"), ::OpenAPI::toJsonValue(m_installment_payment_data_option_item_nr_number_of_installments));
    }
    if (m_installment_payment_data_option_item_nr_subsequent_installment_amount_isSet) {
        obj.insert(QString("installmentPaymentData.option[itemNr].subsequentInstallmentAmount"), ::OpenAPI::toJsonValue(m_installment_payment_data_option_item_nr_subsequent_installment_amount));
    }
    if (m_installment_payment_data_option_item_nr_total_amount_due_isSet) {
        obj.insert(QString("installmentPaymentData.option[itemNr].totalAmountDue"), ::OpenAPI::toJsonValue(m_installment_payment_data_option_item_nr_total_amount_due));
    }
    if (m_installment_payment_data_payment_options_isSet) {
        obj.insert(QString("installmentPaymentData.paymentOptions"), ::OpenAPI::toJsonValue(m_installment_payment_data_payment_options));
    }
    if (m_installments_value_isSet) {
        obj.insert(QString("installments.value"), ::OpenAPI::toJsonValue(m_installments_value));
    }
    if (m_network_token_available_isSet) {
        obj.insert(QString("networkToken.available"), ::OpenAPI::toJsonValue(m_network_token_available));
    }
    if (m_network_token_bin_isSet) {
        obj.insert(QString("networkToken.bin"), ::OpenAPI::toJsonValue(m_network_token_bin));
    }
    if (m_network_token_token_summary_isSet) {
        obj.insert(QString("networkToken.tokenSummary"), ::OpenAPI::toJsonValue(m_network_token_token_summary));
    }
    if (m_opi_trans_token_isSet) {
        obj.insert(QString("opi.transToken"), ::OpenAPI::toJsonValue(m_opi_trans_token));
    }
    if (m_sepadirectdebit_date_of_signature_isSet) {
        obj.insert(QString("sepadirectdebit.dateOfSignature"), ::OpenAPI::toJsonValue(m_sepadirectdebit_date_of_signature));
    }
    if (m_sepadirectdebit_mandate_id_isSet) {
        obj.insert(QString("sepadirectdebit.mandateId"), ::OpenAPI::toJsonValue(m_sepadirectdebit_mandate_id));
    }
    if (m_sepadirectdebit_sequence_type_isSet) {
        obj.insert(QString("sepadirectdebit.sequenceType"), ::OpenAPI::toJsonValue(m_sepadirectdebit_sequence_type));
    }
    return obj;
}

QString OAIPayoutResponse_additionalData::getCardHolderInfo() const {
    return m_card_holder_info;
}
void OAIPayoutResponse_additionalData::setCardHolderInfo(const QString &card_holder_info) {
    m_card_holder_info = card_holder_info;
    m_card_holder_info_isSet = true;
}

bool OAIPayoutResponse_additionalData::is_card_holder_info_Set() const{
    return m_card_holder_info_isSet;
}

bool OAIPayoutResponse_additionalData::is_card_holder_info_Valid() const{
    return m_card_holder_info_isValid;
}

QString OAIPayoutResponse_additionalData::getCavv() const {
    return m_cavv;
}
void OAIPayoutResponse_additionalData::setCavv(const QString &cavv) {
    m_cavv = cavv;
    m_cavv_isSet = true;
}

bool OAIPayoutResponse_additionalData::is_cavv_Set() const{
    return m_cavv_isSet;
}

bool OAIPayoutResponse_additionalData::is_cavv_Valid() const{
    return m_cavv_isValid;
}

QString OAIPayoutResponse_additionalData::getCavvAlgorithm() const {
    return m_cavv_algorithm;
}
void OAIPayoutResponse_additionalData::setCavvAlgorithm(const QString &cavv_algorithm) {
    m_cavv_algorithm = cavv_algorithm;
    m_cavv_algorithm_isSet = true;
}

bool OAIPayoutResponse_additionalData::is_cavv_algorithm_Set() const{
    return m_cavv_algorithm_isSet;
}

bool OAIPayoutResponse_additionalData::is_cavv_algorithm_Valid() const{
    return m_cavv_algorithm_isValid;
}

QString OAIPayoutResponse_additionalData::getScaExemptionRequested() const {
    return m_sca_exemption_requested;
}
void OAIPayoutResponse_additionalData::setScaExemptionRequested(const QString &sca_exemption_requested) {
    m_sca_exemption_requested = sca_exemption_requested;
    m_sca_exemption_requested_isSet = true;
}

bool OAIPayoutResponse_additionalData::is_sca_exemption_requested_Set() const{
    return m_sca_exemption_requested_isSet;
}

bool OAIPayoutResponse_additionalData::is_sca_exemption_requested_Valid() const{
    return m_sca_exemption_requested_isValid;
}

bool OAIPayoutResponse_additionalData::isThreeds2CardEnrolled() const {
    return m_threeds2_card_enrolled;
}
void OAIPayoutResponse_additionalData::setThreeds2CardEnrolled(const bool &threeds2_card_enrolled) {
    m_threeds2_card_enrolled = threeds2_card_enrolled;
    m_threeds2_card_enrolled_isSet = true;
}

bool OAIPayoutResponse_additionalData::is_threeds2_card_enrolled_Set() const{
    return m_threeds2_card_enrolled_isSet;
}

bool OAIPayoutResponse_additionalData::is_threeds2_card_enrolled_Valid() const{
    return m_threeds2_card_enrolled_isValid;
}

QString OAIPayoutResponse_additionalData::getBillingAddressCity() const {
    return m_billing_address_city;
}
void OAIPayoutResponse_additionalData::setBillingAddressCity(const QString &billing_address_city) {
    m_billing_address_city = billing_address_city;
    m_billing_address_city_isSet = true;
}

bool OAIPayoutResponse_additionalData::is_billing_address_city_Set() const{
    return m_billing_address_city_isSet;
}

bool OAIPayoutResponse_additionalData::is_billing_address_city_Valid() const{
    return m_billing_address_city_isValid;
}

QString OAIPayoutResponse_additionalData::getBillingAddressCountry() const {
    return m_billing_address_country;
}
void OAIPayoutResponse_additionalData::setBillingAddressCountry(const QString &billing_address_country) {
    m_billing_address_country = billing_address_country;
    m_billing_address_country_isSet = true;
}

bool OAIPayoutResponse_additionalData::is_billing_address_country_Set() const{
    return m_billing_address_country_isSet;
}

bool OAIPayoutResponse_additionalData::is_billing_address_country_Valid() const{
    return m_billing_address_country_isValid;
}

QString OAIPayoutResponse_additionalData::getBillingAddressHouseNumberOrName() const {
    return m_billing_address_house_number_or_name;
}
void OAIPayoutResponse_additionalData::setBillingAddressHouseNumberOrName(const QString &billing_address_house_number_or_name) {
    m_billing_address_house_number_or_name = billing_address_house_number_or_name;
    m_billing_address_house_number_or_name_isSet = true;
}

bool OAIPayoutResponse_additionalData::is_billing_address_house_number_or_name_Set() const{
    return m_billing_address_house_number_or_name_isSet;
}

bool OAIPayoutResponse_additionalData::is_billing_address_house_number_or_name_Valid() const{
    return m_billing_address_house_number_or_name_isValid;
}

QString OAIPayoutResponse_additionalData::getBillingAddressPostalCode() const {
    return m_billing_address_postal_code;
}
void OAIPayoutResponse_additionalData::setBillingAddressPostalCode(const QString &billing_address_postal_code) {
    m_billing_address_postal_code = billing_address_postal_code;
    m_billing_address_postal_code_isSet = true;
}

bool OAIPayoutResponse_additionalData::is_billing_address_postal_code_Set() const{
    return m_billing_address_postal_code_isSet;
}

bool OAIPayoutResponse_additionalData::is_billing_address_postal_code_Valid() const{
    return m_billing_address_postal_code_isValid;
}

QString OAIPayoutResponse_additionalData::getBillingAddressStateOrProvince() const {
    return m_billing_address_state_or_province;
}
void OAIPayoutResponse_additionalData::setBillingAddressStateOrProvince(const QString &billing_address_state_or_province) {
    m_billing_address_state_or_province = billing_address_state_or_province;
    m_billing_address_state_or_province_isSet = true;
}

bool OAIPayoutResponse_additionalData::is_billing_address_state_or_province_Set() const{
    return m_billing_address_state_or_province_isSet;
}

bool OAIPayoutResponse_additionalData::is_billing_address_state_or_province_Valid() const{
    return m_billing_address_state_or_province_isValid;
}

QString OAIPayoutResponse_additionalData::getBillingAddressStreet() const {
    return m_billing_address_street;
}
void OAIPayoutResponse_additionalData::setBillingAddressStreet(const QString &billing_address_street) {
    m_billing_address_street = billing_address_street;
    m_billing_address_street_isSet = true;
}

bool OAIPayoutResponse_additionalData::is_billing_address_street_Set() const{
    return m_billing_address_street_isSet;
}

bool OAIPayoutResponse_additionalData::is_billing_address_street_Valid() const{
    return m_billing_address_street_isValid;
}

QString OAIPayoutResponse_additionalData::getCardBin() const {
    return m_card_bin;
}
void OAIPayoutResponse_additionalData::setCardBin(const QString &card_bin) {
    m_card_bin = card_bin;
    m_card_bin_isSet = true;
}

bool OAIPayoutResponse_additionalData::is_card_bin_Set() const{
    return m_card_bin_isSet;
}

bool OAIPayoutResponse_additionalData::is_card_bin_Valid() const{
    return m_card_bin_isValid;
}

QString OAIPayoutResponse_additionalData::getCardHolderName() const {
    return m_card_holder_name;
}
void OAIPayoutResponse_additionalData::setCardHolderName(const QString &card_holder_name) {
    m_card_holder_name = card_holder_name;
    m_card_holder_name_isSet = true;
}

bool OAIPayoutResponse_additionalData::is_card_holder_name_Set() const{
    return m_card_holder_name_isSet;
}

bool OAIPayoutResponse_additionalData::is_card_holder_name_Valid() const{
    return m_card_holder_name_isValid;
}

QString OAIPayoutResponse_additionalData::getCardIssuingBank() const {
    return m_card_issuing_bank;
}
void OAIPayoutResponse_additionalData::setCardIssuingBank(const QString &card_issuing_bank) {
    m_card_issuing_bank = card_issuing_bank;
    m_card_issuing_bank_isSet = true;
}

bool OAIPayoutResponse_additionalData::is_card_issuing_bank_Set() const{
    return m_card_issuing_bank_isSet;
}

bool OAIPayoutResponse_additionalData::is_card_issuing_bank_Valid() const{
    return m_card_issuing_bank_isValid;
}

QString OAIPayoutResponse_additionalData::getCardIssuingCountry() const {
    return m_card_issuing_country;
}
void OAIPayoutResponse_additionalData::setCardIssuingCountry(const QString &card_issuing_country) {
    m_card_issuing_country = card_issuing_country;
    m_card_issuing_country_isSet = true;
}

bool OAIPayoutResponse_additionalData::is_card_issuing_country_Set() const{
    return m_card_issuing_country_isSet;
}

bool OAIPayoutResponse_additionalData::is_card_issuing_country_Valid() const{
    return m_card_issuing_country_isValid;
}

QString OAIPayoutResponse_additionalData::getCardIssuingCurrency() const {
    return m_card_issuing_currency;
}
void OAIPayoutResponse_additionalData::setCardIssuingCurrency(const QString &card_issuing_currency) {
    m_card_issuing_currency = card_issuing_currency;
    m_card_issuing_currency_isSet = true;
}

bool OAIPayoutResponse_additionalData::is_card_issuing_currency_Set() const{
    return m_card_issuing_currency_isSet;
}

bool OAIPayoutResponse_additionalData::is_card_issuing_currency_Valid() const{
    return m_card_issuing_currency_isValid;
}

QString OAIPayoutResponse_additionalData::getCardPaymentMethod() const {
    return m_card_payment_method;
}
void OAIPayoutResponse_additionalData::setCardPaymentMethod(const QString &card_payment_method) {
    m_card_payment_method = card_payment_method;
    m_card_payment_method_isSet = true;
}

bool OAIPayoutResponse_additionalData::is_card_payment_method_Set() const{
    return m_card_payment_method_isSet;
}

bool OAIPayoutResponse_additionalData::is_card_payment_method_Valid() const{
    return m_card_payment_method_isValid;
}

QString OAIPayoutResponse_additionalData::getCardSummary() const {
    return m_card_summary;
}
void OAIPayoutResponse_additionalData::setCardSummary(const QString &card_summary) {
    m_card_summary = card_summary;
    m_card_summary_isSet = true;
}

bool OAIPayoutResponse_additionalData::is_card_summary_Set() const{
    return m_card_summary_isSet;
}

bool OAIPayoutResponse_additionalData::is_card_summary_Valid() const{
    return m_card_summary_isValid;
}

QString OAIPayoutResponse_additionalData::getIssuerBin() const {
    return m_issuer_bin;
}
void OAIPayoutResponse_additionalData::setIssuerBin(const QString &issuer_bin) {
    m_issuer_bin = issuer_bin;
    m_issuer_bin_isSet = true;
}

bool OAIPayoutResponse_additionalData::is_issuer_bin_Set() const{
    return m_issuer_bin_isSet;
}

bool OAIPayoutResponse_additionalData::is_issuer_bin_Valid() const{
    return m_issuer_bin_isValid;
}

QString OAIPayoutResponse_additionalData::getAcquirerAccountCode() const {
    return m_acquirer_account_code;
}
void OAIPayoutResponse_additionalData::setAcquirerAccountCode(const QString &acquirer_account_code) {
    m_acquirer_account_code = acquirer_account_code;
    m_acquirer_account_code_isSet = true;
}

bool OAIPayoutResponse_additionalData::is_acquirer_account_code_Set() const{
    return m_acquirer_account_code_isSet;
}

bool OAIPayoutResponse_additionalData::is_acquirer_account_code_Valid() const{
    return m_acquirer_account_code_isValid;
}

QString OAIPayoutResponse_additionalData::getAcquirerCode() const {
    return m_acquirer_code;
}
void OAIPayoutResponse_additionalData::setAcquirerCode(const QString &acquirer_code) {
    m_acquirer_code = acquirer_code;
    m_acquirer_code_isSet = true;
}

bool OAIPayoutResponse_additionalData::is_acquirer_code_Set() const{
    return m_acquirer_code_isSet;
}

bool OAIPayoutResponse_additionalData::is_acquirer_code_Valid() const{
    return m_acquirer_code_isValid;
}

QString OAIPayoutResponse_additionalData::getAcquirerReference() const {
    return m_acquirer_reference;
}
void OAIPayoutResponse_additionalData::setAcquirerReference(const QString &acquirer_reference) {
    m_acquirer_reference = acquirer_reference;
    m_acquirer_reference_isSet = true;
}

bool OAIPayoutResponse_additionalData::is_acquirer_reference_Set() const{
    return m_acquirer_reference_isSet;
}

bool OAIPayoutResponse_additionalData::is_acquirer_reference_Valid() const{
    return m_acquirer_reference_isValid;
}

QString OAIPayoutResponse_additionalData::getAlias() const {
    return m_alias;
}
void OAIPayoutResponse_additionalData::setAlias(const QString &alias) {
    m_alias = alias;
    m_alias_isSet = true;
}

bool OAIPayoutResponse_additionalData::is_alias_Set() const{
    return m_alias_isSet;
}

bool OAIPayoutResponse_additionalData::is_alias_Valid() const{
    return m_alias_isValid;
}

QString OAIPayoutResponse_additionalData::getAliasType() const {
    return m_alias_type;
}
void OAIPayoutResponse_additionalData::setAliasType(const QString &alias_type) {
    m_alias_type = alias_type;
    m_alias_type_isSet = true;
}

bool OAIPayoutResponse_additionalData::is_alias_type_Set() const{
    return m_alias_type_isSet;
}

bool OAIPayoutResponse_additionalData::is_alias_type_Valid() const{
    return m_alias_type_isValid;
}

QString OAIPayoutResponse_additionalData::getAuthCode() const {
    return m_auth_code;
}
void OAIPayoutResponse_additionalData::setAuthCode(const QString &auth_code) {
    m_auth_code = auth_code;
    m_auth_code_isSet = true;
}

bool OAIPayoutResponse_additionalData::is_auth_code_Set() const{
    return m_auth_code_isSet;
}

bool OAIPayoutResponse_additionalData::is_auth_code_Valid() const{
    return m_auth_code_isValid;
}

QString OAIPayoutResponse_additionalData::getAuthorisationMid() const {
    return m_authorisation_mid;
}
void OAIPayoutResponse_additionalData::setAuthorisationMid(const QString &authorisation_mid) {
    m_authorisation_mid = authorisation_mid;
    m_authorisation_mid_isSet = true;
}

bool OAIPayoutResponse_additionalData::is_authorisation_mid_Set() const{
    return m_authorisation_mid_isSet;
}

bool OAIPayoutResponse_additionalData::is_authorisation_mid_Valid() const{
    return m_authorisation_mid_isValid;
}

QString OAIPayoutResponse_additionalData::getAuthorisedAmountCurrency() const {
    return m_authorised_amount_currency;
}
void OAIPayoutResponse_additionalData::setAuthorisedAmountCurrency(const QString &authorised_amount_currency) {
    m_authorised_amount_currency = authorised_amount_currency;
    m_authorised_amount_currency_isSet = true;
}

bool OAIPayoutResponse_additionalData::is_authorised_amount_currency_Set() const{
    return m_authorised_amount_currency_isSet;
}

bool OAIPayoutResponse_additionalData::is_authorised_amount_currency_Valid() const{
    return m_authorised_amount_currency_isValid;
}

QString OAIPayoutResponse_additionalData::getAuthorisedAmountValue() const {
    return m_authorised_amount_value;
}
void OAIPayoutResponse_additionalData::setAuthorisedAmountValue(const QString &authorised_amount_value) {
    m_authorised_amount_value = authorised_amount_value;
    m_authorised_amount_value_isSet = true;
}

bool OAIPayoutResponse_additionalData::is_authorised_amount_value_Set() const{
    return m_authorised_amount_value_isSet;
}

bool OAIPayoutResponse_additionalData::is_authorised_amount_value_Valid() const{
    return m_authorised_amount_value_isValid;
}

QString OAIPayoutResponse_additionalData::getAvsResult() const {
    return m_avs_result;
}
void OAIPayoutResponse_additionalData::setAvsResult(const QString &avs_result) {
    m_avs_result = avs_result;
    m_avs_result_isSet = true;
}

bool OAIPayoutResponse_additionalData::is_avs_result_Set() const{
    return m_avs_result_isSet;
}

bool OAIPayoutResponse_additionalData::is_avs_result_Valid() const{
    return m_avs_result_isValid;
}

QString OAIPayoutResponse_additionalData::getAvsResultRaw() const {
    return m_avs_result_raw;
}
void OAIPayoutResponse_additionalData::setAvsResultRaw(const QString &avs_result_raw) {
    m_avs_result_raw = avs_result_raw;
    m_avs_result_raw_isSet = true;
}

bool OAIPayoutResponse_additionalData::is_avs_result_raw_Set() const{
    return m_avs_result_raw_isSet;
}

bool OAIPayoutResponse_additionalData::is_avs_result_raw_Valid() const{
    return m_avs_result_raw_isValid;
}

QString OAIPayoutResponse_additionalData::getBic() const {
    return m_bic;
}
void OAIPayoutResponse_additionalData::setBic(const QString &bic) {
    m_bic = bic;
    m_bic_isSet = true;
}

bool OAIPayoutResponse_additionalData::is_bic_Set() const{
    return m_bic_isSet;
}

bool OAIPayoutResponse_additionalData::is_bic_Valid() const{
    return m_bic_isValid;
}

QString OAIPayoutResponse_additionalData::getCoBrandedWith() const {
    return m_co_branded_with;
}
void OAIPayoutResponse_additionalData::setCoBrandedWith(const QString &co_branded_with) {
    m_co_branded_with = co_branded_with;
    m_co_branded_with_isSet = true;
}

bool OAIPayoutResponse_additionalData::is_co_branded_with_Set() const{
    return m_co_branded_with_isSet;
}

bool OAIPayoutResponse_additionalData::is_co_branded_with_Valid() const{
    return m_co_branded_with_isValid;
}

QString OAIPayoutResponse_additionalData::getCvcResult() const {
    return m_cvc_result;
}
void OAIPayoutResponse_additionalData::setCvcResult(const QString &cvc_result) {
    m_cvc_result = cvc_result;
    m_cvc_result_isSet = true;
}

bool OAIPayoutResponse_additionalData::is_cvc_result_Set() const{
    return m_cvc_result_isSet;
}

bool OAIPayoutResponse_additionalData::is_cvc_result_Valid() const{
    return m_cvc_result_isValid;
}

QString OAIPayoutResponse_additionalData::getCvcResultRaw() const {
    return m_cvc_result_raw;
}
void OAIPayoutResponse_additionalData::setCvcResultRaw(const QString &cvc_result_raw) {
    m_cvc_result_raw = cvc_result_raw;
    m_cvc_result_raw_isSet = true;
}

bool OAIPayoutResponse_additionalData::is_cvc_result_raw_Set() const{
    return m_cvc_result_raw_isSet;
}

bool OAIPayoutResponse_additionalData::is_cvc_result_raw_Valid() const{
    return m_cvc_result_raw_isValid;
}

QString OAIPayoutResponse_additionalData::getDsTransId() const {
    return m_ds_trans_id;
}
void OAIPayoutResponse_additionalData::setDsTransId(const QString &ds_trans_id) {
    m_ds_trans_id = ds_trans_id;
    m_ds_trans_id_isSet = true;
}

bool OAIPayoutResponse_additionalData::is_ds_trans_id_Set() const{
    return m_ds_trans_id_isSet;
}

bool OAIPayoutResponse_additionalData::is_ds_trans_id_Valid() const{
    return m_ds_trans_id_isValid;
}

QString OAIPayoutResponse_additionalData::getEci() const {
    return m_eci;
}
void OAIPayoutResponse_additionalData::setEci(const QString &eci) {
    m_eci = eci;
    m_eci_isSet = true;
}

bool OAIPayoutResponse_additionalData::is_eci_Set() const{
    return m_eci_isSet;
}

bool OAIPayoutResponse_additionalData::is_eci_Valid() const{
    return m_eci_isValid;
}

QString OAIPayoutResponse_additionalData::getExpiryDate() const {
    return m_expiry_date;
}
void OAIPayoutResponse_additionalData::setExpiryDate(const QString &expiry_date) {
    m_expiry_date = expiry_date;
    m_expiry_date_isSet = true;
}

bool OAIPayoutResponse_additionalData::is_expiry_date_Set() const{
    return m_expiry_date_isSet;
}

bool OAIPayoutResponse_additionalData::is_expiry_date_Valid() const{
    return m_expiry_date_isValid;
}

QString OAIPayoutResponse_additionalData::getExtraCostsCurrency() const {
    return m_extra_costs_currency;
}
void OAIPayoutResponse_additionalData::setExtraCostsCurrency(const QString &extra_costs_currency) {
    m_extra_costs_currency = extra_costs_currency;
    m_extra_costs_currency_isSet = true;
}

bool OAIPayoutResponse_additionalData::is_extra_costs_currency_Set() const{
    return m_extra_costs_currency_isSet;
}

bool OAIPayoutResponse_additionalData::is_extra_costs_currency_Valid() const{
    return m_extra_costs_currency_isValid;
}

QString OAIPayoutResponse_additionalData::getExtraCostsValue() const {
    return m_extra_costs_value;
}
void OAIPayoutResponse_additionalData::setExtraCostsValue(const QString &extra_costs_value) {
    m_extra_costs_value = extra_costs_value;
    m_extra_costs_value_isSet = true;
}

bool OAIPayoutResponse_additionalData::is_extra_costs_value_Set() const{
    return m_extra_costs_value_isSet;
}

bool OAIPayoutResponse_additionalData::is_extra_costs_value_Valid() const{
    return m_extra_costs_value_isValid;
}

QString OAIPayoutResponse_additionalData::getFraudCheckItemNrFraudCheckname() const {
    return m_fraud_check__item_nr__fraud_checkname;
}
void OAIPayoutResponse_additionalData::setFraudCheckItemNrFraudCheckname(const QString &fraud_check__item_nr__fraud_checkname) {
    m_fraud_check__item_nr__fraud_checkname = fraud_check__item_nr__fraud_checkname;
    m_fraud_check__item_nr__fraud_checkname_isSet = true;
}

bool OAIPayoutResponse_additionalData::is_fraud_check__item_nr__fraud_checkname_Set() const{
    return m_fraud_check__item_nr__fraud_checkname_isSet;
}

bool OAIPayoutResponse_additionalData::is_fraud_check__item_nr__fraud_checkname_Valid() const{
    return m_fraud_check__item_nr__fraud_checkname_isValid;
}

QString OAIPayoutResponse_additionalData::getFraudManualReview() const {
    return m_fraud_manual_review;
}
void OAIPayoutResponse_additionalData::setFraudManualReview(const QString &fraud_manual_review) {
    m_fraud_manual_review = fraud_manual_review;
    m_fraud_manual_review_isSet = true;
}

bool OAIPayoutResponse_additionalData::is_fraud_manual_review_Set() const{
    return m_fraud_manual_review_isSet;
}

bool OAIPayoutResponse_additionalData::is_fraud_manual_review_Valid() const{
    return m_fraud_manual_review_isValid;
}

QString OAIPayoutResponse_additionalData::getFraudResultType() const {
    return m_fraud_result_type;
}
void OAIPayoutResponse_additionalData::setFraudResultType(const QString &fraud_result_type) {
    m_fraud_result_type = fraud_result_type;
    m_fraud_result_type_isSet = true;
}

bool OAIPayoutResponse_additionalData::is_fraud_result_type_Set() const{
    return m_fraud_result_type_isSet;
}

bool OAIPayoutResponse_additionalData::is_fraud_result_type_Valid() const{
    return m_fraud_result_type_isValid;
}

QString OAIPayoutResponse_additionalData::getFundingSource() const {
    return m_funding_source;
}
void OAIPayoutResponse_additionalData::setFundingSource(const QString &funding_source) {
    m_funding_source = funding_source;
    m_funding_source_isSet = true;
}

bool OAIPayoutResponse_additionalData::is_funding_source_Set() const{
    return m_funding_source_isSet;
}

bool OAIPayoutResponse_additionalData::is_funding_source_Valid() const{
    return m_funding_source_isValid;
}

QString OAIPayoutResponse_additionalData::getFundsAvailability() const {
    return m_funds_availability;
}
void OAIPayoutResponse_additionalData::setFundsAvailability(const QString &funds_availability) {
    m_funds_availability = funds_availability;
    m_funds_availability_isSet = true;
}

bool OAIPayoutResponse_additionalData::is_funds_availability_Set() const{
    return m_funds_availability_isSet;
}

bool OAIPayoutResponse_additionalData::is_funds_availability_Valid() const{
    return m_funds_availability_isValid;
}

QString OAIPayoutResponse_additionalData::getInferredRefusalReason() const {
    return m_inferred_refusal_reason;
}
void OAIPayoutResponse_additionalData::setInferredRefusalReason(const QString &inferred_refusal_reason) {
    m_inferred_refusal_reason = inferred_refusal_reason;
    m_inferred_refusal_reason_isSet = true;
}

bool OAIPayoutResponse_additionalData::is_inferred_refusal_reason_Set() const{
    return m_inferred_refusal_reason_isSet;
}

bool OAIPayoutResponse_additionalData::is_inferred_refusal_reason_Valid() const{
    return m_inferred_refusal_reason_isValid;
}

QString OAIPayoutResponse_additionalData::getIsCardCommercial() const {
    return m_is_card_commercial;
}
void OAIPayoutResponse_additionalData::setIsCardCommercial(const QString &is_card_commercial) {
    m_is_card_commercial = is_card_commercial;
    m_is_card_commercial_isSet = true;
}

bool OAIPayoutResponse_additionalData::is_is_card_commercial_Set() const{
    return m_is_card_commercial_isSet;
}

bool OAIPayoutResponse_additionalData::is_is_card_commercial_Valid() const{
    return m_is_card_commercial_isValid;
}

QString OAIPayoutResponse_additionalData::getIssuerCountry() const {
    return m_issuer_country;
}
void OAIPayoutResponse_additionalData::setIssuerCountry(const QString &issuer_country) {
    m_issuer_country = issuer_country;
    m_issuer_country_isSet = true;
}

bool OAIPayoutResponse_additionalData::is_issuer_country_Set() const{
    return m_issuer_country_isSet;
}

bool OAIPayoutResponse_additionalData::is_issuer_country_Valid() const{
    return m_issuer_country_isValid;
}

QString OAIPayoutResponse_additionalData::getLiabilityShift() const {
    return m_liability_shift;
}
void OAIPayoutResponse_additionalData::setLiabilityShift(const QString &liability_shift) {
    m_liability_shift = liability_shift;
    m_liability_shift_isSet = true;
}

bool OAIPayoutResponse_additionalData::is_liability_shift_Set() const{
    return m_liability_shift_isSet;
}

bool OAIPayoutResponse_additionalData::is_liability_shift_Valid() const{
    return m_liability_shift_isValid;
}

QString OAIPayoutResponse_additionalData::getMcBankNetReferenceNumber() const {
    return m_mc_bank_net_reference_number;
}
void OAIPayoutResponse_additionalData::setMcBankNetReferenceNumber(const QString &mc_bank_net_reference_number) {
    m_mc_bank_net_reference_number = mc_bank_net_reference_number;
    m_mc_bank_net_reference_number_isSet = true;
}

bool OAIPayoutResponse_additionalData::is_mc_bank_net_reference_number_Set() const{
    return m_mc_bank_net_reference_number_isSet;
}

bool OAIPayoutResponse_additionalData::is_mc_bank_net_reference_number_Valid() const{
    return m_mc_bank_net_reference_number_isValid;
}

QString OAIPayoutResponse_additionalData::getMerchantAdviceCode() const {
    return m_merchant_advice_code;
}
void OAIPayoutResponse_additionalData::setMerchantAdviceCode(const QString &merchant_advice_code) {
    m_merchant_advice_code = merchant_advice_code;
    m_merchant_advice_code_isSet = true;
}

bool OAIPayoutResponse_additionalData::is_merchant_advice_code_Set() const{
    return m_merchant_advice_code_isSet;
}

bool OAIPayoutResponse_additionalData::is_merchant_advice_code_Valid() const{
    return m_merchant_advice_code_isValid;
}

QString OAIPayoutResponse_additionalData::getMerchantReference() const {
    return m_merchant_reference;
}
void OAIPayoutResponse_additionalData::setMerchantReference(const QString &merchant_reference) {
    m_merchant_reference = merchant_reference;
    m_merchant_reference_isSet = true;
}

bool OAIPayoutResponse_additionalData::is_merchant_reference_Set() const{
    return m_merchant_reference_isSet;
}

bool OAIPayoutResponse_additionalData::is_merchant_reference_Valid() const{
    return m_merchant_reference_isValid;
}

QString OAIPayoutResponse_additionalData::getNetworkTxReference() const {
    return m_network_tx_reference;
}
void OAIPayoutResponse_additionalData::setNetworkTxReference(const QString &network_tx_reference) {
    m_network_tx_reference = network_tx_reference;
    m_network_tx_reference_isSet = true;
}

bool OAIPayoutResponse_additionalData::is_network_tx_reference_Set() const{
    return m_network_tx_reference_isSet;
}

bool OAIPayoutResponse_additionalData::is_network_tx_reference_Valid() const{
    return m_network_tx_reference_isValid;
}

QString OAIPayoutResponse_additionalData::getNonSchemeTransactionLimit() const {
    return m_non_scheme_transaction_limit;
}
void OAIPayoutResponse_additionalData::setNonSchemeTransactionLimit(const QString &non_scheme_transaction_limit) {
    m_non_scheme_transaction_limit = non_scheme_transaction_limit;
    m_non_scheme_transaction_limit_isSet = true;
}

bool OAIPayoutResponse_additionalData::is_non_scheme_transaction_limit_Set() const{
    return m_non_scheme_transaction_limit_isSet;
}

bool OAIPayoutResponse_additionalData::is_non_scheme_transaction_limit_Valid() const{
    return m_non_scheme_transaction_limit_isValid;
}

QString OAIPayoutResponse_additionalData::getNonSchemeTransactionLimitCcy() const {
    return m_non_scheme_transaction_limit_ccy;
}
void OAIPayoutResponse_additionalData::setNonSchemeTransactionLimitCcy(const QString &non_scheme_transaction_limit_ccy) {
    m_non_scheme_transaction_limit_ccy = non_scheme_transaction_limit_ccy;
    m_non_scheme_transaction_limit_ccy_isSet = true;
}

bool OAIPayoutResponse_additionalData::is_non_scheme_transaction_limit_ccy_Set() const{
    return m_non_scheme_transaction_limit_ccy_isSet;
}

bool OAIPayoutResponse_additionalData::is_non_scheme_transaction_limit_ccy_Valid() const{
    return m_non_scheme_transaction_limit_ccy_isValid;
}

QString OAIPayoutResponse_additionalData::getOwnerName() const {
    return m_owner_name;
}
void OAIPayoutResponse_additionalData::setOwnerName(const QString &owner_name) {
    m_owner_name = owner_name;
    m_owner_name_isSet = true;
}

bool OAIPayoutResponse_additionalData::is_owner_name_Set() const{
    return m_owner_name_isSet;
}

bool OAIPayoutResponse_additionalData::is_owner_name_Valid() const{
    return m_owner_name_isValid;
}

QString OAIPayoutResponse_additionalData::getPaymentAccountReference() const {
    return m_payment_account_reference;
}
void OAIPayoutResponse_additionalData::setPaymentAccountReference(const QString &payment_account_reference) {
    m_payment_account_reference = payment_account_reference;
    m_payment_account_reference_isSet = true;
}

bool OAIPayoutResponse_additionalData::is_payment_account_reference_Set() const{
    return m_payment_account_reference_isSet;
}

bool OAIPayoutResponse_additionalData::is_payment_account_reference_Valid() const{
    return m_payment_account_reference_isValid;
}

QString OAIPayoutResponse_additionalData::getPaymentMethod() const {
    return m_payment_method;
}
void OAIPayoutResponse_additionalData::setPaymentMethod(const QString &payment_method) {
    m_payment_method = payment_method;
    m_payment_method_isSet = true;
}

bool OAIPayoutResponse_additionalData::is_payment_method_Set() const{
    return m_payment_method_isSet;
}

bool OAIPayoutResponse_additionalData::is_payment_method_Valid() const{
    return m_payment_method_isValid;
}

QString OAIPayoutResponse_additionalData::getPaymentMethodVariant() const {
    return m_payment_method_variant;
}
void OAIPayoutResponse_additionalData::setPaymentMethodVariant(const QString &payment_method_variant) {
    m_payment_method_variant = payment_method_variant;
    m_payment_method_variant_isSet = true;
}

bool OAIPayoutResponse_additionalData::is_payment_method_variant_Set() const{
    return m_payment_method_variant_isSet;
}

bool OAIPayoutResponse_additionalData::is_payment_method_variant_Valid() const{
    return m_payment_method_variant_isValid;
}

QString OAIPayoutResponse_additionalData::getPayoutEligible() const {
    return m_payout_eligible;
}
void OAIPayoutResponse_additionalData::setPayoutEligible(const QString &payout_eligible) {
    m_payout_eligible = payout_eligible;
    m_payout_eligible_isSet = true;
}

bool OAIPayoutResponse_additionalData::is_payout_eligible_Set() const{
    return m_payout_eligible_isSet;
}

bool OAIPayoutResponse_additionalData::is_payout_eligible_Valid() const{
    return m_payout_eligible_isValid;
}

QString OAIPayoutResponse_additionalData::getRealtimeAccountUpdaterStatus() const {
    return m_realtime_account_updater_status;
}
void OAIPayoutResponse_additionalData::setRealtimeAccountUpdaterStatus(const QString &realtime_account_updater_status) {
    m_realtime_account_updater_status = realtime_account_updater_status;
    m_realtime_account_updater_status_isSet = true;
}

bool OAIPayoutResponse_additionalData::is_realtime_account_updater_status_Set() const{
    return m_realtime_account_updater_status_isSet;
}

bool OAIPayoutResponse_additionalData::is_realtime_account_updater_status_Valid() const{
    return m_realtime_account_updater_status_isValid;
}

QString OAIPayoutResponse_additionalData::getReceiptFreeText() const {
    return m_receipt_free_text;
}
void OAIPayoutResponse_additionalData::setReceiptFreeText(const QString &receipt_free_text) {
    m_receipt_free_text = receipt_free_text;
    m_receipt_free_text_isSet = true;
}

bool OAIPayoutResponse_additionalData::is_receipt_free_text_Set() const{
    return m_receipt_free_text_isSet;
}

bool OAIPayoutResponse_additionalData::is_receipt_free_text_Valid() const{
    return m_receipt_free_text_isValid;
}

QString OAIPayoutResponse_additionalData::getRecurringContractTypes() const {
    return m_recurring_contract_types;
}
void OAIPayoutResponse_additionalData::setRecurringContractTypes(const QString &recurring_contract_types) {
    m_recurring_contract_types = recurring_contract_types;
    m_recurring_contract_types_isSet = true;
}

bool OAIPayoutResponse_additionalData::is_recurring_contract_types_Set() const{
    return m_recurring_contract_types_isSet;
}

bool OAIPayoutResponse_additionalData::is_recurring_contract_types_Valid() const{
    return m_recurring_contract_types_isValid;
}

QString OAIPayoutResponse_additionalData::getRecurringFirstPspReference() const {
    return m_recurring_first_psp_reference;
}
void OAIPayoutResponse_additionalData::setRecurringFirstPspReference(const QString &recurring_first_psp_reference) {
    m_recurring_first_psp_reference = recurring_first_psp_reference;
    m_recurring_first_psp_reference_isSet = true;
}

bool OAIPayoutResponse_additionalData::is_recurring_first_psp_reference_Set() const{
    return m_recurring_first_psp_reference_isSet;
}

bool OAIPayoutResponse_additionalData::is_recurring_first_psp_reference_Valid() const{
    return m_recurring_first_psp_reference_isValid;
}

QString OAIPayoutResponse_additionalData::getRecurringRecurringDetailReference() const {
    return m_recurring_recurring_detail_reference;
}
void OAIPayoutResponse_additionalData::setRecurringRecurringDetailReference(const QString &recurring_recurring_detail_reference) {
    m_recurring_recurring_detail_reference = recurring_recurring_detail_reference;
    m_recurring_recurring_detail_reference_isSet = true;
}

bool OAIPayoutResponse_additionalData::is_recurring_recurring_detail_reference_Set() const{
    return m_recurring_recurring_detail_reference_isSet;
}

bool OAIPayoutResponse_additionalData::is_recurring_recurring_detail_reference_Valid() const{
    return m_recurring_recurring_detail_reference_isValid;
}

QString OAIPayoutResponse_additionalData::getRecurringShopperReference() const {
    return m_recurring_shopper_reference;
}
void OAIPayoutResponse_additionalData::setRecurringShopperReference(const QString &recurring_shopper_reference) {
    m_recurring_shopper_reference = recurring_shopper_reference;
    m_recurring_shopper_reference_isSet = true;
}

bool OAIPayoutResponse_additionalData::is_recurring_shopper_reference_Set() const{
    return m_recurring_shopper_reference_isSet;
}

bool OAIPayoutResponse_additionalData::is_recurring_shopper_reference_Valid() const{
    return m_recurring_shopper_reference_isValid;
}

QString OAIPayoutResponse_additionalData::getRecurringProcessingModel() const {
    return m_recurring_processing_model;
}
void OAIPayoutResponse_additionalData::setRecurringProcessingModel(const QString &recurring_processing_model) {
    m_recurring_processing_model = recurring_processing_model;
    m_recurring_processing_model_isSet = true;
}

bool OAIPayoutResponse_additionalData::is_recurring_processing_model_Set() const{
    return m_recurring_processing_model_isSet;
}

bool OAIPayoutResponse_additionalData::is_recurring_processing_model_Valid() const{
    return m_recurring_processing_model_isValid;
}

QString OAIPayoutResponse_additionalData::getReferred() const {
    return m_referred;
}
void OAIPayoutResponse_additionalData::setReferred(const QString &referred) {
    m_referred = referred;
    m_referred_isSet = true;
}

bool OAIPayoutResponse_additionalData::is_referred_Set() const{
    return m_referred_isSet;
}

bool OAIPayoutResponse_additionalData::is_referred_Valid() const{
    return m_referred_isValid;
}

QString OAIPayoutResponse_additionalData::getRefusalReasonRaw() const {
    return m_refusal_reason_raw;
}
void OAIPayoutResponse_additionalData::setRefusalReasonRaw(const QString &refusal_reason_raw) {
    m_refusal_reason_raw = refusal_reason_raw;
    m_refusal_reason_raw_isSet = true;
}

bool OAIPayoutResponse_additionalData::is_refusal_reason_raw_Set() const{
    return m_refusal_reason_raw_isSet;
}

bool OAIPayoutResponse_additionalData::is_refusal_reason_raw_Valid() const{
    return m_refusal_reason_raw_isValid;
}

QString OAIPayoutResponse_additionalData::getRequestAmount() const {
    return m_request_amount;
}
void OAIPayoutResponse_additionalData::setRequestAmount(const QString &request_amount) {
    m_request_amount = request_amount;
    m_request_amount_isSet = true;
}

bool OAIPayoutResponse_additionalData::is_request_amount_Set() const{
    return m_request_amount_isSet;
}

bool OAIPayoutResponse_additionalData::is_request_amount_Valid() const{
    return m_request_amount_isValid;
}

QString OAIPayoutResponse_additionalData::getRequestCurrencyCode() const {
    return m_request_currency_code;
}
void OAIPayoutResponse_additionalData::setRequestCurrencyCode(const QString &request_currency_code) {
    m_request_currency_code = request_currency_code;
    m_request_currency_code_isSet = true;
}

bool OAIPayoutResponse_additionalData::is_request_currency_code_Set() const{
    return m_request_currency_code_isSet;
}

bool OAIPayoutResponse_additionalData::is_request_currency_code_Valid() const{
    return m_request_currency_code_isValid;
}

QString OAIPayoutResponse_additionalData::getShopperInteraction() const {
    return m_shopper_interaction;
}
void OAIPayoutResponse_additionalData::setShopperInteraction(const QString &shopper_interaction) {
    m_shopper_interaction = shopper_interaction;
    m_shopper_interaction_isSet = true;
}

bool OAIPayoutResponse_additionalData::is_shopper_interaction_Set() const{
    return m_shopper_interaction_isSet;
}

bool OAIPayoutResponse_additionalData::is_shopper_interaction_Valid() const{
    return m_shopper_interaction_isValid;
}

QString OAIPayoutResponse_additionalData::getShopperReference() const {
    return m_shopper_reference;
}
void OAIPayoutResponse_additionalData::setShopperReference(const QString &shopper_reference) {
    m_shopper_reference = shopper_reference;
    m_shopper_reference_isSet = true;
}

bool OAIPayoutResponse_additionalData::is_shopper_reference_Set() const{
    return m_shopper_reference_isSet;
}

bool OAIPayoutResponse_additionalData::is_shopper_reference_Valid() const{
    return m_shopper_reference_isValid;
}

QString OAIPayoutResponse_additionalData::getTerminalId() const {
    return m_terminal_id;
}
void OAIPayoutResponse_additionalData::setTerminalId(const QString &terminal_id) {
    m_terminal_id = terminal_id;
    m_terminal_id_isSet = true;
}

bool OAIPayoutResponse_additionalData::is_terminal_id_Set() const{
    return m_terminal_id_isSet;
}

bool OAIPayoutResponse_additionalData::is_terminal_id_Valid() const{
    return m_terminal_id_isValid;
}

QString OAIPayoutResponse_additionalData::getThreeDAuthenticated() const {
    return m_three_d_authenticated;
}
void OAIPayoutResponse_additionalData::setThreeDAuthenticated(const QString &three_d_authenticated) {
    m_three_d_authenticated = three_d_authenticated;
    m_three_d_authenticated_isSet = true;
}

bool OAIPayoutResponse_additionalData::is_three_d_authenticated_Set() const{
    return m_three_d_authenticated_isSet;
}

bool OAIPayoutResponse_additionalData::is_three_d_authenticated_Valid() const{
    return m_three_d_authenticated_isValid;
}

QString OAIPayoutResponse_additionalData::getThreeDAuthenticatedResponse() const {
    return m_three_d_authenticated_response;
}
void OAIPayoutResponse_additionalData::setThreeDAuthenticatedResponse(const QString &three_d_authenticated_response) {
    m_three_d_authenticated_response = three_d_authenticated_response;
    m_three_d_authenticated_response_isSet = true;
}

bool OAIPayoutResponse_additionalData::is_three_d_authenticated_response_Set() const{
    return m_three_d_authenticated_response_isSet;
}

bool OAIPayoutResponse_additionalData::is_three_d_authenticated_response_Valid() const{
    return m_three_d_authenticated_response_isValid;
}

QString OAIPayoutResponse_additionalData::getThreeDOffered() const {
    return m_three_d_offered;
}
void OAIPayoutResponse_additionalData::setThreeDOffered(const QString &three_d_offered) {
    m_three_d_offered = three_d_offered;
    m_three_d_offered_isSet = true;
}

bool OAIPayoutResponse_additionalData::is_three_d_offered_Set() const{
    return m_three_d_offered_isSet;
}

bool OAIPayoutResponse_additionalData::is_three_d_offered_Valid() const{
    return m_three_d_offered_isValid;
}

QString OAIPayoutResponse_additionalData::getThreeDOfferedResponse() const {
    return m_three_d_offered_response;
}
void OAIPayoutResponse_additionalData::setThreeDOfferedResponse(const QString &three_d_offered_response) {
    m_three_d_offered_response = three_d_offered_response;
    m_three_d_offered_response_isSet = true;
}

bool OAIPayoutResponse_additionalData::is_three_d_offered_response_Set() const{
    return m_three_d_offered_response_isSet;
}

bool OAIPayoutResponse_additionalData::is_three_d_offered_response_Valid() const{
    return m_three_d_offered_response_isValid;
}

QString OAIPayoutResponse_additionalData::getThreeDsVersion() const {
    return m_three_ds_version;
}
void OAIPayoutResponse_additionalData::setThreeDsVersion(const QString &three_ds_version) {
    m_three_ds_version = three_ds_version;
    m_three_ds_version_isSet = true;
}

bool OAIPayoutResponse_additionalData::is_three_ds_version_Set() const{
    return m_three_ds_version_isSet;
}

bool OAIPayoutResponse_additionalData::is_three_ds_version_Valid() const{
    return m_three_ds_version_isValid;
}

QString OAIPayoutResponse_additionalData::getVisaTransactionId() const {
    return m_visa_transaction_id;
}
void OAIPayoutResponse_additionalData::setVisaTransactionId(const QString &visa_transaction_id) {
    m_visa_transaction_id = visa_transaction_id;
    m_visa_transaction_id_isSet = true;
}

bool OAIPayoutResponse_additionalData::is_visa_transaction_id_Set() const{
    return m_visa_transaction_id_isSet;
}

bool OAIPayoutResponse_additionalData::is_visa_transaction_id_Valid() const{
    return m_visa_transaction_id_isValid;
}

QString OAIPayoutResponse_additionalData::getXid() const {
    return m_xid;
}
void OAIPayoutResponse_additionalData::setXid(const QString &xid) {
    m_xid = xid;
    m_xid_isSet = true;
}

bool OAIPayoutResponse_additionalData::is_xid_Set() const{
    return m_xid_isSet;
}

bool OAIPayoutResponse_additionalData::is_xid_Valid() const{
    return m_xid_isValid;
}

QString OAIPayoutResponse_additionalData::getDomesticRefusalReasonRaw() const {
    return m_domestic_refusal_reason_raw;
}
void OAIPayoutResponse_additionalData::setDomesticRefusalReasonRaw(const QString &domestic_refusal_reason_raw) {
    m_domestic_refusal_reason_raw = domestic_refusal_reason_raw;
    m_domestic_refusal_reason_raw_isSet = true;
}

bool OAIPayoutResponse_additionalData::is_domestic_refusal_reason_raw_Set() const{
    return m_domestic_refusal_reason_raw_isSet;
}

bool OAIPayoutResponse_additionalData::is_domestic_refusal_reason_raw_Valid() const{
    return m_domestic_refusal_reason_raw_isValid;
}

QString OAIPayoutResponse_additionalData::getDomesticShopperAdvice() const {
    return m_domestic_shopper_advice;
}
void OAIPayoutResponse_additionalData::setDomesticShopperAdvice(const QString &domestic_shopper_advice) {
    m_domestic_shopper_advice = domestic_shopper_advice;
    m_domestic_shopper_advice_isSet = true;
}

bool OAIPayoutResponse_additionalData::is_domestic_shopper_advice_Set() const{
    return m_domestic_shopper_advice_isSet;
}

bool OAIPayoutResponse_additionalData::is_domestic_shopper_advice_Valid() const{
    return m_domestic_shopper_advice_isValid;
}

QString OAIPayoutResponse_additionalData::getInstallmentPaymentDataInstallmentType() const {
    return m_installment_payment_data_installment_type;
}
void OAIPayoutResponse_additionalData::setInstallmentPaymentDataInstallmentType(const QString &installment_payment_data_installment_type) {
    m_installment_payment_data_installment_type = installment_payment_data_installment_type;
    m_installment_payment_data_installment_type_isSet = true;
}

bool OAIPayoutResponse_additionalData::is_installment_payment_data_installment_type_Set() const{
    return m_installment_payment_data_installment_type_isSet;
}

bool OAIPayoutResponse_additionalData::is_installment_payment_data_installment_type_Valid() const{
    return m_installment_payment_data_installment_type_isValid;
}

QString OAIPayoutResponse_additionalData::getInstallmentPaymentDataOptionItemNrAnnualPercentageRate() const {
    return m_installment_payment_data_option_item_nr_annual_percentage_rate;
}
void OAIPayoutResponse_additionalData::setInstallmentPaymentDataOptionItemNrAnnualPercentageRate(const QString &installment_payment_data_option_item_nr_annual_percentage_rate) {
    m_installment_payment_data_option_item_nr_annual_percentage_rate = installment_payment_data_option_item_nr_annual_percentage_rate;
    m_installment_payment_data_option_item_nr_annual_percentage_rate_isSet = true;
}

bool OAIPayoutResponse_additionalData::is_installment_payment_data_option_item_nr_annual_percentage_rate_Set() const{
    return m_installment_payment_data_option_item_nr_annual_percentage_rate_isSet;
}

bool OAIPayoutResponse_additionalData::is_installment_payment_data_option_item_nr_annual_percentage_rate_Valid() const{
    return m_installment_payment_data_option_item_nr_annual_percentage_rate_isValid;
}

QString OAIPayoutResponse_additionalData::getInstallmentPaymentDataOptionItemNrFirstInstallmentAmount() const {
    return m_installment_payment_data_option_item_nr_first_installment_amount;
}
void OAIPayoutResponse_additionalData::setInstallmentPaymentDataOptionItemNrFirstInstallmentAmount(const QString &installment_payment_data_option_item_nr_first_installment_amount) {
    m_installment_payment_data_option_item_nr_first_installment_amount = installment_payment_data_option_item_nr_first_installment_amount;
    m_installment_payment_data_option_item_nr_first_installment_amount_isSet = true;
}

bool OAIPayoutResponse_additionalData::is_installment_payment_data_option_item_nr_first_installment_amount_Set() const{
    return m_installment_payment_data_option_item_nr_first_installment_amount_isSet;
}

bool OAIPayoutResponse_additionalData::is_installment_payment_data_option_item_nr_first_installment_amount_Valid() const{
    return m_installment_payment_data_option_item_nr_first_installment_amount_isValid;
}

QString OAIPayoutResponse_additionalData::getInstallmentPaymentDataOptionItemNrInstallmentFee() const {
    return m_installment_payment_data_option_item_nr_installment_fee;
}
void OAIPayoutResponse_additionalData::setInstallmentPaymentDataOptionItemNrInstallmentFee(const QString &installment_payment_data_option_item_nr_installment_fee) {
    m_installment_payment_data_option_item_nr_installment_fee = installment_payment_data_option_item_nr_installment_fee;
    m_installment_payment_data_option_item_nr_installment_fee_isSet = true;
}

bool OAIPayoutResponse_additionalData::is_installment_payment_data_option_item_nr_installment_fee_Set() const{
    return m_installment_payment_data_option_item_nr_installment_fee_isSet;
}

bool OAIPayoutResponse_additionalData::is_installment_payment_data_option_item_nr_installment_fee_Valid() const{
    return m_installment_payment_data_option_item_nr_installment_fee_isValid;
}

QString OAIPayoutResponse_additionalData::getInstallmentPaymentDataOptionItemNrInterestRate() const {
    return m_installment_payment_data_option_item_nr_interest_rate;
}
void OAIPayoutResponse_additionalData::setInstallmentPaymentDataOptionItemNrInterestRate(const QString &installment_payment_data_option_item_nr_interest_rate) {
    m_installment_payment_data_option_item_nr_interest_rate = installment_payment_data_option_item_nr_interest_rate;
    m_installment_payment_data_option_item_nr_interest_rate_isSet = true;
}

bool OAIPayoutResponse_additionalData::is_installment_payment_data_option_item_nr_interest_rate_Set() const{
    return m_installment_payment_data_option_item_nr_interest_rate_isSet;
}

bool OAIPayoutResponse_additionalData::is_installment_payment_data_option_item_nr_interest_rate_Valid() const{
    return m_installment_payment_data_option_item_nr_interest_rate_isValid;
}

QString OAIPayoutResponse_additionalData::getInstallmentPaymentDataOptionItemNrMaximumNumberOfInstallments() const {
    return m_installment_payment_data_option_item_nr_maximum_number_of_installments;
}
void OAIPayoutResponse_additionalData::setInstallmentPaymentDataOptionItemNrMaximumNumberOfInstallments(const QString &installment_payment_data_option_item_nr_maximum_number_of_installments) {
    m_installment_payment_data_option_item_nr_maximum_number_of_installments = installment_payment_data_option_item_nr_maximum_number_of_installments;
    m_installment_payment_data_option_item_nr_maximum_number_of_installments_isSet = true;
}

bool OAIPayoutResponse_additionalData::is_installment_payment_data_option_item_nr_maximum_number_of_installments_Set() const{
    return m_installment_payment_data_option_item_nr_maximum_number_of_installments_isSet;
}

bool OAIPayoutResponse_additionalData::is_installment_payment_data_option_item_nr_maximum_number_of_installments_Valid() const{
    return m_installment_payment_data_option_item_nr_maximum_number_of_installments_isValid;
}

QString OAIPayoutResponse_additionalData::getInstallmentPaymentDataOptionItemNrMinimumNumberOfInstallments() const {
    return m_installment_payment_data_option_item_nr_minimum_number_of_installments;
}
void OAIPayoutResponse_additionalData::setInstallmentPaymentDataOptionItemNrMinimumNumberOfInstallments(const QString &installment_payment_data_option_item_nr_minimum_number_of_installments) {
    m_installment_payment_data_option_item_nr_minimum_number_of_installments = installment_payment_data_option_item_nr_minimum_number_of_installments;
    m_installment_payment_data_option_item_nr_minimum_number_of_installments_isSet = true;
}

bool OAIPayoutResponse_additionalData::is_installment_payment_data_option_item_nr_minimum_number_of_installments_Set() const{
    return m_installment_payment_data_option_item_nr_minimum_number_of_installments_isSet;
}

bool OAIPayoutResponse_additionalData::is_installment_payment_data_option_item_nr_minimum_number_of_installments_Valid() const{
    return m_installment_payment_data_option_item_nr_minimum_number_of_installments_isValid;
}

QString OAIPayoutResponse_additionalData::getInstallmentPaymentDataOptionItemNrNumberOfInstallments() const {
    return m_installment_payment_data_option_item_nr_number_of_installments;
}
void OAIPayoutResponse_additionalData::setInstallmentPaymentDataOptionItemNrNumberOfInstallments(const QString &installment_payment_data_option_item_nr_number_of_installments) {
    m_installment_payment_data_option_item_nr_number_of_installments = installment_payment_data_option_item_nr_number_of_installments;
    m_installment_payment_data_option_item_nr_number_of_installments_isSet = true;
}

bool OAIPayoutResponse_additionalData::is_installment_payment_data_option_item_nr_number_of_installments_Set() const{
    return m_installment_payment_data_option_item_nr_number_of_installments_isSet;
}

bool OAIPayoutResponse_additionalData::is_installment_payment_data_option_item_nr_number_of_installments_Valid() const{
    return m_installment_payment_data_option_item_nr_number_of_installments_isValid;
}

QString OAIPayoutResponse_additionalData::getInstallmentPaymentDataOptionItemNrSubsequentInstallmentAmount() const {
    return m_installment_payment_data_option_item_nr_subsequent_installment_amount;
}
void OAIPayoutResponse_additionalData::setInstallmentPaymentDataOptionItemNrSubsequentInstallmentAmount(const QString &installment_payment_data_option_item_nr_subsequent_installment_amount) {
    m_installment_payment_data_option_item_nr_subsequent_installment_amount = installment_payment_data_option_item_nr_subsequent_installment_amount;
    m_installment_payment_data_option_item_nr_subsequent_installment_amount_isSet = true;
}

bool OAIPayoutResponse_additionalData::is_installment_payment_data_option_item_nr_subsequent_installment_amount_Set() const{
    return m_installment_payment_data_option_item_nr_subsequent_installment_amount_isSet;
}

bool OAIPayoutResponse_additionalData::is_installment_payment_data_option_item_nr_subsequent_installment_amount_Valid() const{
    return m_installment_payment_data_option_item_nr_subsequent_installment_amount_isValid;
}

QString OAIPayoutResponse_additionalData::getInstallmentPaymentDataOptionItemNrTotalAmountDue() const {
    return m_installment_payment_data_option_item_nr_total_amount_due;
}
void OAIPayoutResponse_additionalData::setInstallmentPaymentDataOptionItemNrTotalAmountDue(const QString &installment_payment_data_option_item_nr_total_amount_due) {
    m_installment_payment_data_option_item_nr_total_amount_due = installment_payment_data_option_item_nr_total_amount_due;
    m_installment_payment_data_option_item_nr_total_amount_due_isSet = true;
}

bool OAIPayoutResponse_additionalData::is_installment_payment_data_option_item_nr_total_amount_due_Set() const{
    return m_installment_payment_data_option_item_nr_total_amount_due_isSet;
}

bool OAIPayoutResponse_additionalData::is_installment_payment_data_option_item_nr_total_amount_due_Valid() const{
    return m_installment_payment_data_option_item_nr_total_amount_due_isValid;
}

QString OAIPayoutResponse_additionalData::getInstallmentPaymentDataPaymentOptions() const {
    return m_installment_payment_data_payment_options;
}
void OAIPayoutResponse_additionalData::setInstallmentPaymentDataPaymentOptions(const QString &installment_payment_data_payment_options) {
    m_installment_payment_data_payment_options = installment_payment_data_payment_options;
    m_installment_payment_data_payment_options_isSet = true;
}

bool OAIPayoutResponse_additionalData::is_installment_payment_data_payment_options_Set() const{
    return m_installment_payment_data_payment_options_isSet;
}

bool OAIPayoutResponse_additionalData::is_installment_payment_data_payment_options_Valid() const{
    return m_installment_payment_data_payment_options_isValid;
}

QString OAIPayoutResponse_additionalData::getInstallmentsValue() const {
    return m_installments_value;
}
void OAIPayoutResponse_additionalData::setInstallmentsValue(const QString &installments_value) {
    m_installments_value = installments_value;
    m_installments_value_isSet = true;
}

bool OAIPayoutResponse_additionalData::is_installments_value_Set() const{
    return m_installments_value_isSet;
}

bool OAIPayoutResponse_additionalData::is_installments_value_Valid() const{
    return m_installments_value_isValid;
}

QString OAIPayoutResponse_additionalData::getNetworkTokenAvailable() const {
    return m_network_token_available;
}
void OAIPayoutResponse_additionalData::setNetworkTokenAvailable(const QString &network_token_available) {
    m_network_token_available = network_token_available;
    m_network_token_available_isSet = true;
}

bool OAIPayoutResponse_additionalData::is_network_token_available_Set() const{
    return m_network_token_available_isSet;
}

bool OAIPayoutResponse_additionalData::is_network_token_available_Valid() const{
    return m_network_token_available_isValid;
}

QString OAIPayoutResponse_additionalData::getNetworkTokenBin() const {
    return m_network_token_bin;
}
void OAIPayoutResponse_additionalData::setNetworkTokenBin(const QString &network_token_bin) {
    m_network_token_bin = network_token_bin;
    m_network_token_bin_isSet = true;
}

bool OAIPayoutResponse_additionalData::is_network_token_bin_Set() const{
    return m_network_token_bin_isSet;
}

bool OAIPayoutResponse_additionalData::is_network_token_bin_Valid() const{
    return m_network_token_bin_isValid;
}

QString OAIPayoutResponse_additionalData::getNetworkTokenTokenSummary() const {
    return m_network_token_token_summary;
}
void OAIPayoutResponse_additionalData::setNetworkTokenTokenSummary(const QString &network_token_token_summary) {
    m_network_token_token_summary = network_token_token_summary;
    m_network_token_token_summary_isSet = true;
}

bool OAIPayoutResponse_additionalData::is_network_token_token_summary_Set() const{
    return m_network_token_token_summary_isSet;
}

bool OAIPayoutResponse_additionalData::is_network_token_token_summary_Valid() const{
    return m_network_token_token_summary_isValid;
}

QString OAIPayoutResponse_additionalData::getOpiTransToken() const {
    return m_opi_trans_token;
}
void OAIPayoutResponse_additionalData::setOpiTransToken(const QString &opi_trans_token) {
    m_opi_trans_token = opi_trans_token;
    m_opi_trans_token_isSet = true;
}

bool OAIPayoutResponse_additionalData::is_opi_trans_token_Set() const{
    return m_opi_trans_token_isSet;
}

bool OAIPayoutResponse_additionalData::is_opi_trans_token_Valid() const{
    return m_opi_trans_token_isValid;
}

QString OAIPayoutResponse_additionalData::getSepadirectdebitDateOfSignature() const {
    return m_sepadirectdebit_date_of_signature;
}
void OAIPayoutResponse_additionalData::setSepadirectdebitDateOfSignature(const QString &sepadirectdebit_date_of_signature) {
    m_sepadirectdebit_date_of_signature = sepadirectdebit_date_of_signature;
    m_sepadirectdebit_date_of_signature_isSet = true;
}

bool OAIPayoutResponse_additionalData::is_sepadirectdebit_date_of_signature_Set() const{
    return m_sepadirectdebit_date_of_signature_isSet;
}

bool OAIPayoutResponse_additionalData::is_sepadirectdebit_date_of_signature_Valid() const{
    return m_sepadirectdebit_date_of_signature_isValid;
}

QString OAIPayoutResponse_additionalData::getSepadirectdebitMandateId() const {
    return m_sepadirectdebit_mandate_id;
}
void OAIPayoutResponse_additionalData::setSepadirectdebitMandateId(const QString &sepadirectdebit_mandate_id) {
    m_sepadirectdebit_mandate_id = sepadirectdebit_mandate_id;
    m_sepadirectdebit_mandate_id_isSet = true;
}

bool OAIPayoutResponse_additionalData::is_sepadirectdebit_mandate_id_Set() const{
    return m_sepadirectdebit_mandate_id_isSet;
}

bool OAIPayoutResponse_additionalData::is_sepadirectdebit_mandate_id_Valid() const{
    return m_sepadirectdebit_mandate_id_isValid;
}

QString OAIPayoutResponse_additionalData::getSepadirectdebitSequenceType() const {
    return m_sepadirectdebit_sequence_type;
}
void OAIPayoutResponse_additionalData::setSepadirectdebitSequenceType(const QString &sepadirectdebit_sequence_type) {
    m_sepadirectdebit_sequence_type = sepadirectdebit_sequence_type;
    m_sepadirectdebit_sequence_type_isSet = true;
}

bool OAIPayoutResponse_additionalData::is_sepadirectdebit_sequence_type_Set() const{
    return m_sepadirectdebit_sequence_type_isSet;
}

bool OAIPayoutResponse_additionalData::is_sepadirectdebit_sequence_type_Valid() const{
    return m_sepadirectdebit_sequence_type_isValid;
}

bool OAIPayoutResponse_additionalData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_card_holder_info_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cavv_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cavv_algorithm_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sca_exemption_requested_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_threeds2_card_enrolled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_billing_address_city_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_billing_address_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_billing_address_house_number_or_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_billing_address_postal_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_billing_address_state_or_province_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_billing_address_street_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_card_bin_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_card_holder_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_card_issuing_bank_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_card_issuing_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_card_issuing_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_card_payment_method_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_card_summary_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_issuer_bin_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_acquirer_account_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_acquirer_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_acquirer_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_alias_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_alias_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auth_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_authorisation_mid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_authorised_amount_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_authorised_amount_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_avs_result_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_avs_result_raw_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bic_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_co_branded_with_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cvc_result_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cvc_result_raw_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ds_trans_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_eci_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expiry_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_extra_costs_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_extra_costs_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fraud_check__item_nr__fraud_checkname_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fraud_manual_review_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fraud_result_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_funding_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_funds_availability_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_inferred_refusal_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_card_commercial_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_issuer_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_liability_shift_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mc_bank_net_reference_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_merchant_advice_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_merchant_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_tx_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_non_scheme_transaction_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_non_scheme_transaction_limit_ccy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_account_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_method_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_method_variant_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payout_eligible_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_realtime_account_updater_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_receipt_free_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recurring_contract_types_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recurring_first_psp_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recurring_recurring_detail_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recurring_shopper_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recurring_processing_model_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_referred_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_refusal_reason_raw_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_currency_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shopper_interaction_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shopper_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_terminal_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_three_d_authenticated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_three_d_authenticated_response_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_three_d_offered_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_three_d_offered_response_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_three_ds_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_visa_transaction_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_xid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_domestic_refusal_reason_raw_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_domestic_shopper_advice_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_installment_payment_data_installment_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_installment_payment_data_option_item_nr_annual_percentage_rate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_installment_payment_data_option_item_nr_first_installment_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_installment_payment_data_option_item_nr_installment_fee_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_installment_payment_data_option_item_nr_interest_rate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_installment_payment_data_option_item_nr_maximum_number_of_installments_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_installment_payment_data_option_item_nr_minimum_number_of_installments_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_installment_payment_data_option_item_nr_number_of_installments_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_installment_payment_data_option_item_nr_subsequent_installment_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_installment_payment_data_option_item_nr_total_amount_due_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_installment_payment_data_payment_options_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_installments_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_token_available_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_token_bin_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_token_token_summary_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_opi_trans_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sepadirectdebit_date_of_signature_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sepadirectdebit_mandate_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sepadirectdebit_sequence_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPayoutResponse_additionalData::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
