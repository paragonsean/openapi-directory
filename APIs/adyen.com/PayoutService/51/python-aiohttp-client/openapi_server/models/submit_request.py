# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.amount import Amount
from openapi_server.models.name import Name
from openapi_server.models.recurring import Recurring
from openapi_server import util


class SubmitRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, additional_data: Dict[str, str]=None, amount: Amount=None, date_of_birth: date=None, entity_type: str=None, fraud_offset: int=None, merchant_account: str=None, nationality: str=None, recurring: Recurring=None, reference: str=None, selected_recurring_detail_reference: str=None, shopper_email: str=None, shopper_name: Name=None, shopper_reference: str=None, shopper_statement: str=None, social_security_number: str=None):
        """SubmitRequest - a model defined in OpenAPI

        :param additional_data: The additional_data of this SubmitRequest.
        :param amount: The amount of this SubmitRequest.
        :param date_of_birth: The date_of_birth of this SubmitRequest.
        :param entity_type: The entity_type of this SubmitRequest.
        :param fraud_offset: The fraud_offset of this SubmitRequest.
        :param merchant_account: The merchant_account of this SubmitRequest.
        :param nationality: The nationality of this SubmitRequest.
        :param recurring: The recurring of this SubmitRequest.
        :param reference: The reference of this SubmitRequest.
        :param selected_recurring_detail_reference: The selected_recurring_detail_reference of this SubmitRequest.
        :param shopper_email: The shopper_email of this SubmitRequest.
        :param shopper_name: The shopper_name of this SubmitRequest.
        :param shopper_reference: The shopper_reference of this SubmitRequest.
        :param shopper_statement: The shopper_statement of this SubmitRequest.
        :param social_security_number: The social_security_number of this SubmitRequest.
        """
        self.openapi_types = {
            'additional_data': Dict[str, str],
            'amount': Amount,
            'date_of_birth': date,
            'entity_type': str,
            'fraud_offset': int,
            'merchant_account': str,
            'nationality': str,
            'recurring': Recurring,
            'reference': str,
            'selected_recurring_detail_reference': str,
            'shopper_email': str,
            'shopper_name': Name,
            'shopper_reference': str,
            'shopper_statement': str,
            'social_security_number': str
        }

        self.attribute_map = {
            'additional_data': 'additionalData',
            'amount': 'amount',
            'date_of_birth': 'dateOfBirth',
            'entity_type': 'entityType',
            'fraud_offset': 'fraudOffset',
            'merchant_account': 'merchantAccount',
            'nationality': 'nationality',
            'recurring': 'recurring',
            'reference': 'reference',
            'selected_recurring_detail_reference': 'selectedRecurringDetailReference',
            'shopper_email': 'shopperEmail',
            'shopper_name': 'shopperName',
            'shopper_reference': 'shopperReference',
            'shopper_statement': 'shopperStatement',
            'social_security_number': 'socialSecurityNumber'
        }

        self._additional_data = additional_data
        self._amount = amount
        self._date_of_birth = date_of_birth
        self._entity_type = entity_type
        self._fraud_offset = fraud_offset
        self._merchant_account = merchant_account
        self._nationality = nationality
        self._recurring = recurring
        self._reference = reference
        self._selected_recurring_detail_reference = selected_recurring_detail_reference
        self._shopper_email = shopper_email
        self._shopper_name = shopper_name
        self._shopper_reference = shopper_reference
        self._shopper_statement = shopper_statement
        self._social_security_number = social_security_number

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SubmitRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SubmitRequest of this SubmitRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def additional_data(self):
        """Gets the additional_data of this SubmitRequest.

        This field contains additional data, which may be required for a particular request.

        :return: The additional_data of this SubmitRequest.
        :rtype: Dict[str, str]
        """
        return self._additional_data

    @additional_data.setter
    def additional_data(self, additional_data):
        """Sets the additional_data of this SubmitRequest.

        This field contains additional data, which may be required for a particular request.

        :param additional_data: The additional_data of this SubmitRequest.
        :type additional_data: Dict[str, str]
        """

        self._additional_data = additional_data

    @property
    def amount(self):
        """Gets the amount of this SubmitRequest.

        A container object for the payable amount information of the transaction.

        :return: The amount of this SubmitRequest.
        :rtype: Amount
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this SubmitRequest.

        A container object for the payable amount information of the transaction.

        :param amount: The amount of this SubmitRequest.
        :type amount: Amount
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")

        self._amount = amount

    @property
    def date_of_birth(self):
        """Gets the date_of_birth of this SubmitRequest.

        The date of birth. Format: ISO-8601; example: YYYY-MM-DD  For Paysafecard it must be the same as used when registering the Paysafecard account.  > This field is mandatory for natural persons.  > This field is required to update the existing `dateOfBirth` that is associated with this recurring contract.

        :return: The date_of_birth of this SubmitRequest.
        :rtype: date
        """
        return self._date_of_birth

    @date_of_birth.setter
    def date_of_birth(self, date_of_birth):
        """Sets the date_of_birth of this SubmitRequest.

        The date of birth. Format: ISO-8601; example: YYYY-MM-DD  For Paysafecard it must be the same as used when registering the Paysafecard account.  > This field is mandatory for natural persons.  > This field is required to update the existing `dateOfBirth` that is associated with this recurring contract.

        :param date_of_birth: The date_of_birth of this SubmitRequest.
        :type date_of_birth: date
        """

        self._date_of_birth = date_of_birth

    @property
    def entity_type(self):
        """Gets the entity_type of this SubmitRequest.

        The type of the entity the payout is processed for.  Allowed values: * NaturalPerson * Company > This field is required to update the existing `entityType` that is associated with this recurring contract.

        :return: The entity_type of this SubmitRequest.
        :rtype: str
        """
        return self._entity_type

    @entity_type.setter
    def entity_type(self, entity_type):
        """Sets the entity_type of this SubmitRequest.

        The type of the entity the payout is processed for.  Allowed values: * NaturalPerson * Company > This field is required to update the existing `entityType` that is associated with this recurring contract.

        :param entity_type: The entity_type of this SubmitRequest.
        :type entity_type: str
        """
        allowed_values = ["NaturalPerson", "Company"]  # noqa: E501
        if entity_type not in allowed_values:
            raise ValueError(
                "Invalid value for `entity_type` ({0}), must be one of {1}"
                .format(entity_type, allowed_values)
            )

        self._entity_type = entity_type

    @property
    def fraud_offset(self):
        """Gets the fraud_offset of this SubmitRequest.

        An integer value that is added to the normal fraud score. The value can be either positive or negative.

        :return: The fraud_offset of this SubmitRequest.
        :rtype: int
        """
        return self._fraud_offset

    @fraud_offset.setter
    def fraud_offset(self, fraud_offset):
        """Sets the fraud_offset of this SubmitRequest.

        An integer value that is added to the normal fraud score. The value can be either positive or negative.

        :param fraud_offset: The fraud_offset of this SubmitRequest.
        :type fraud_offset: int
        """

        self._fraud_offset = fraud_offset

    @property
    def merchant_account(self):
        """Gets the merchant_account of this SubmitRequest.

        The merchant account identifier you want to process the transaction request with.

        :return: The merchant_account of this SubmitRequest.
        :rtype: str
        """
        return self._merchant_account

    @merchant_account.setter
    def merchant_account(self, merchant_account):
        """Sets the merchant_account of this SubmitRequest.

        The merchant account identifier you want to process the transaction request with.

        :param merchant_account: The merchant_account of this SubmitRequest.
        :type merchant_account: str
        """
        if merchant_account is None:
            raise ValueError("Invalid value for `merchant_account`, must not be `None`")

        self._merchant_account = merchant_account

    @property
    def nationality(self):
        """Gets the nationality of this SubmitRequest.

        The shopper's nationality.  A valid value is an ISO 2-character country code (e.g. 'NL').  > This field is required to update the existing nationality that is associated with this recurring contract.

        :return: The nationality of this SubmitRequest.
        :rtype: str
        """
        return self._nationality

    @nationality.setter
    def nationality(self, nationality):
        """Sets the nationality of this SubmitRequest.

        The shopper's nationality.  A valid value is an ISO 2-character country code (e.g. 'NL').  > This field is required to update the existing nationality that is associated with this recurring contract.

        :param nationality: The nationality of this SubmitRequest.
        :type nationality: str
        """

        self._nationality = nationality

    @property
    def recurring(self):
        """Gets the recurring of this SubmitRequest.

        A container for the type of recurring contract to be retrieved.  The `recurring.contract` must be set to \"PAYOUT\".

        :return: The recurring of this SubmitRequest.
        :rtype: Recurring
        """
        return self._recurring

    @recurring.setter
    def recurring(self, recurring):
        """Sets the recurring of this SubmitRequest.

        A container for the type of recurring contract to be retrieved.  The `recurring.contract` must be set to \"PAYOUT\".

        :param recurring: The recurring of this SubmitRequest.
        :type recurring: Recurring
        """
        if recurring is None:
            raise ValueError("Invalid value for `recurring`, must not be `None`")

        self._recurring = recurring

    @property
    def reference(self):
        """Gets the reference of this SubmitRequest.

        The merchant reference for this payout. This reference will be used in all communication to the merchant about the status of the payout. Although it is a good idea to make sure it is unique, this is not a requirement.

        :return: The reference of this SubmitRequest.
        :rtype: str
        """
        return self._reference

    @reference.setter
    def reference(self, reference):
        """Sets the reference of this SubmitRequest.

        The merchant reference for this payout. This reference will be used in all communication to the merchant about the status of the payout. Although it is a good idea to make sure it is unique, this is not a requirement.

        :param reference: The reference of this SubmitRequest.
        :type reference: str
        """
        if reference is None:
            raise ValueError("Invalid value for `reference`, must not be `None`")

        self._reference = reference

    @property
    def selected_recurring_detail_reference(self):
        """Gets the selected_recurring_detail_reference of this SubmitRequest.

        This is the `recurringDetailReference` you want to use for this payout.  You can use the value LATEST to select the most recently used recurring detail.

        :return: The selected_recurring_detail_reference of this SubmitRequest.
        :rtype: str
        """
        return self._selected_recurring_detail_reference

    @selected_recurring_detail_reference.setter
    def selected_recurring_detail_reference(self, selected_recurring_detail_reference):
        """Sets the selected_recurring_detail_reference of this SubmitRequest.

        This is the `recurringDetailReference` you want to use for this payout.  You can use the value LATEST to select the most recently used recurring detail.

        :param selected_recurring_detail_reference: The selected_recurring_detail_reference of this SubmitRequest.
        :type selected_recurring_detail_reference: str
        """
        if selected_recurring_detail_reference is None:
            raise ValueError("Invalid value for `selected_recurring_detail_reference`, must not be `None`")

        self._selected_recurring_detail_reference = selected_recurring_detail_reference

    @property
    def shopper_email(self):
        """Gets the shopper_email of this SubmitRequest.

        The shopper's email address.

        :return: The shopper_email of this SubmitRequest.
        :rtype: str
        """
        return self._shopper_email

    @shopper_email.setter
    def shopper_email(self, shopper_email):
        """Sets the shopper_email of this SubmitRequest.

        The shopper's email address.

        :param shopper_email: The shopper_email of this SubmitRequest.
        :type shopper_email: str
        """
        if shopper_email is None:
            raise ValueError("Invalid value for `shopper_email`, must not be `None`")

        self._shopper_email = shopper_email

    @property
    def shopper_name(self):
        """Gets the shopper_name of this SubmitRequest.

        The shopper's name.  In case the `entityType` is `Company`, the `shopperName.lastName` must contain the company name.  > This field is required to update the existing `shopperName` associated with a recurring contract.

        :return: The shopper_name of this SubmitRequest.
        :rtype: Name
        """
        return self._shopper_name

    @shopper_name.setter
    def shopper_name(self, shopper_name):
        """Sets the shopper_name of this SubmitRequest.

        The shopper's name.  In case the `entityType` is `Company`, the `shopperName.lastName` must contain the company name.  > This field is required to update the existing `shopperName` associated with a recurring contract.

        :param shopper_name: The shopper_name of this SubmitRequest.
        :type shopper_name: Name
        """

        self._shopper_name = shopper_name

    @property
    def shopper_reference(self):
        """Gets the shopper_reference of this SubmitRequest.

        The shopper's reference for the payout transaction.

        :return: The shopper_reference of this SubmitRequest.
        :rtype: str
        """
        return self._shopper_reference

    @shopper_reference.setter
    def shopper_reference(self, shopper_reference):
        """Sets the shopper_reference of this SubmitRequest.

        The shopper's reference for the payout transaction.

        :param shopper_reference: The shopper_reference of this SubmitRequest.
        :type shopper_reference: str
        """
        if shopper_reference is None:
            raise ValueError("Invalid value for `shopper_reference`, must not be `None`")

        self._shopper_reference = shopper_reference

    @property
    def shopper_statement(self):
        """Gets the shopper_statement of this SubmitRequest.

        The description of this payout. This description is shown on the bank statement of the shopper (if this is supported by the chosen payment method).

        :return: The shopper_statement of this SubmitRequest.
        :rtype: str
        """
        return self._shopper_statement

    @shopper_statement.setter
    def shopper_statement(self, shopper_statement):
        """Sets the shopper_statement of this SubmitRequest.

        The description of this payout. This description is shown on the bank statement of the shopper (if this is supported by the chosen payment method).

        :param shopper_statement: The shopper_statement of this SubmitRequest.
        :type shopper_statement: str
        """

        self._shopper_statement = shopper_statement

    @property
    def social_security_number(self):
        """Gets the social_security_number of this SubmitRequest.

        The shopper's social security number.

        :return: The social_security_number of this SubmitRequest.
        :rtype: str
        """
        return self._social_security_number

    @social_security_number.setter
    def social_security_number(self, social_security_number):
        """Sets the social_security_number of this SubmitRequest.

        The shopper's social security number.

        :param social_security_number: The social_security_number of this SubmitRequest.
        :type social_security_number: str
        """

        self._social_security_number = social_security_number
