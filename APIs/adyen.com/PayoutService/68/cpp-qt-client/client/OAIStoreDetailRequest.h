/**
 * Adyen Payout API
 * A set of API endpoints that allow you to store payout details, confirm, or decline a payout.  For more information, refer to [Online payouts](https://docs.adyen.com/online-payments/online-payouts). ## Authentication To use the Payout API, you need to have [two API credentials](https://docs.adyen.com/online-payments/online-payouts#payouts-to-bank-accounts-and-wallets): one for storing payout details and submitting payouts, and another one for confirming or declining payouts. If you don't have the required API credentials, contact our [Support Team](https://www.adyen.help/hc/en-us/requests/new).  If using an API key, add an `X-API-Key` header with the API key as the value, for example:   ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ```  Alternatively, you can use the username and password to connect to the API using [basic authentication](https://docs.adyen.com/development-resources/api-credentials#basic-authentication).  The following example shows how to authenticate your request with basic authentication when submitting a payout:  ``` curl -U \"storePayout@Company.YOUR_COMPANY_ACCOUNT\":\"YOUR_BASIC_AUTHENTICATION_PASSWORD\" \\ -H \"Content-Type: application/json\" \\ ... ```  ## Versioning Payments API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://pal-test.adyen.com/pal/servlet/Payout/v68/payout ```  ## Going live  To authenticate to the live endpoints, you need [API credentials](https://docs.adyen.com/development-resources/api-credentials) from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account: ```  https://{PREFIX}-pal-live.adyenpayments.com/pal/servlet/Payout/v68/payout ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.
 *
 * The version of the OpenAPI document: 68
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIStoreDetailRequest.h
 *
 * 
 */

#ifndef OAIStoreDetailRequest_H
#define OAIStoreDetailRequest_H

#include <QJsonObject>

#include "OAIAddress.h"
#include "OAIBankAccount.h"
#include "OAICard.h"
#include "OAIName.h"
#include "OAIRecurring.h"
#include <QDate>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIBankAccount;
class OAIAddress;
class OAICard;
class OAIRecurring;
class OAIName;

class OAIStoreDetailRequest : public OAIObject {
public:
    OAIStoreDetailRequest();
    OAIStoreDetailRequest(QString json);
    ~OAIStoreDetailRequest() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QMap<QString, QString> getAdditionalData() const;
    void setAdditionalData(const QMap<QString, QString> &additional_data);
    bool is_additional_data_Set() const;
    bool is_additional_data_Valid() const;

    OAIBankAccount getBank() const;
    void setBank(const OAIBankAccount &bank);
    bool is_bank_Set() const;
    bool is_bank_Valid() const;

    OAIAddress getBillingAddress() const;
    void setBillingAddress(const OAIAddress &billing_address);
    bool is_billing_address_Set() const;
    bool is_billing_address_Valid() const;

    OAICard getCard() const;
    void setCard(const OAICard &card);
    bool is_card_Set() const;
    bool is_card_Valid() const;

    QDate getDateOfBirth() const;
    void setDateOfBirth(const QDate &date_of_birth);
    bool is_date_of_birth_Set() const;
    bool is_date_of_birth_Valid() const;

    QString getEntityType() const;
    void setEntityType(const QString &entity_type);
    bool is_entity_type_Set() const;
    bool is_entity_type_Valid() const;

    qint32 getFraudOffset() const;
    void setFraudOffset(const qint32 &fraud_offset);
    bool is_fraud_offset_Set() const;
    bool is_fraud_offset_Valid() const;

    QString getMerchantAccount() const;
    void setMerchantAccount(const QString &merchant_account);
    bool is_merchant_account_Set() const;
    bool is_merchant_account_Valid() const;

    QString getNationality() const;
    void setNationality(const QString &nationality);
    bool is_nationality_Set() const;
    bool is_nationality_Valid() const;

    OAIRecurring getRecurring() const;
    void setRecurring(const OAIRecurring &recurring);
    bool is_recurring_Set() const;
    bool is_recurring_Valid() const;

    QString getSelectedBrand() const;
    void setSelectedBrand(const QString &selected_brand);
    bool is_selected_brand_Set() const;
    bool is_selected_brand_Valid() const;

    QString getShopperEmail() const;
    void setShopperEmail(const QString &shopper_email);
    bool is_shopper_email_Set() const;
    bool is_shopper_email_Valid() const;

    OAIName getShopperName() const;
    void setShopperName(const OAIName &shopper_name);
    bool is_shopper_name_Set() const;
    bool is_shopper_name_Valid() const;

    QString getShopperReference() const;
    void setShopperReference(const QString &shopper_reference);
    bool is_shopper_reference_Set() const;
    bool is_shopper_reference_Valid() const;

    QString getSocialSecurityNumber() const;
    void setSocialSecurityNumber(const QString &social_security_number);
    bool is_social_security_number_Set() const;
    bool is_social_security_number_Valid() const;

    QString getTelephoneNumber() const;
    void setTelephoneNumber(const QString &telephone_number);
    bool is_telephone_number_Set() const;
    bool is_telephone_number_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QMap<QString, QString> m_additional_data;
    bool m_additional_data_isSet;
    bool m_additional_data_isValid;

    OAIBankAccount m_bank;
    bool m_bank_isSet;
    bool m_bank_isValid;

    OAIAddress m_billing_address;
    bool m_billing_address_isSet;
    bool m_billing_address_isValid;

    OAICard m_card;
    bool m_card_isSet;
    bool m_card_isValid;

    QDate m_date_of_birth;
    bool m_date_of_birth_isSet;
    bool m_date_of_birth_isValid;

    QString m_entity_type;
    bool m_entity_type_isSet;
    bool m_entity_type_isValid;

    qint32 m_fraud_offset;
    bool m_fraud_offset_isSet;
    bool m_fraud_offset_isValid;

    QString m_merchant_account;
    bool m_merchant_account_isSet;
    bool m_merchant_account_isValid;

    QString m_nationality;
    bool m_nationality_isSet;
    bool m_nationality_isValid;

    OAIRecurring m_recurring;
    bool m_recurring_isSet;
    bool m_recurring_isValid;

    QString m_selected_brand;
    bool m_selected_brand_isSet;
    bool m_selected_brand_isValid;

    QString m_shopper_email;
    bool m_shopper_email_isSet;
    bool m_shopper_email_isValid;

    OAIName m_shopper_name;
    bool m_shopper_name_isSet;
    bool m_shopper_name_isValid;

    QString m_shopper_reference;
    bool m_shopper_reference_isSet;
    bool m_shopper_reference_isValid;

    QString m_social_security_number;
    bool m_social_security_number_isSet;
    bool m_social_security_number_isValid;

    QString m_telephone_number;
    bool m_telephone_number_isSet;
    bool m_telephone_number_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIStoreDetailRequest)

#endif // OAIStoreDetailRequest_H
