/**
 * Adyen Payout API
 * A set of API endpoints that allow you to store payout details, confirm, or decline a payout.  For more information, refer to [Online payouts](https://docs.adyen.com/online-payments/online-payouts). ## Authentication To use the Payout API, you need to have [two API credentials](https://docs.adyen.com/online-payments/online-payouts#payouts-to-bank-accounts-and-wallets): one for storing payout details and submitting payouts, and another one for confirming or declining payouts. If you don't have the required API credentials, contact our [Support Team](https://www.adyen.help/hc/en-us/requests/new).  If using an API key, add an `X-API-Key` header with the API key as the value, for example:   ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ```  Alternatively, you can use the username and password to connect to the API using [basic authentication](https://docs.adyen.com/development-resources/api-credentials#basic-authentication).  The following example shows how to authenticate your request with basic authentication when submitting a payout:  ``` curl -U \"storePayout@Company.YOUR_COMPANY_ACCOUNT\":\"YOUR_BASIC_AUTHENTICATION_PASSWORD\" \\ -H \"Content-Type: application/json\" \\ ... ```  ## Versioning Payments API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://pal-test.adyen.com/pal/servlet/Payout/v68/payout ```  ## Going live  To authenticate to the live endpoints, you need [API credentials](https://docs.adyen.com/development-resources/api-credentials) from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account: ```  https://{PREFIX}-pal-live.adyenpayments.com/pal/servlet/Payout/v68/payout ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.
 *
 * The version of the OpenAPI document: 68
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIResponseAdditionalDataNetworkTokens.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIResponseAdditionalDataNetworkTokens::OAIResponseAdditionalDataNetworkTokens(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIResponseAdditionalDataNetworkTokens::OAIResponseAdditionalDataNetworkTokens() {
    this->initializeModel();
}

OAIResponseAdditionalDataNetworkTokens::~OAIResponseAdditionalDataNetworkTokens() {}

void OAIResponseAdditionalDataNetworkTokens::initializeModel() {

    m_network_token_available_isSet = false;
    m_network_token_available_isValid = false;

    m_network_token_bin_isSet = false;
    m_network_token_bin_isValid = false;

    m_network_token_token_summary_isSet = false;
    m_network_token_token_summary_isValid = false;
}

void OAIResponseAdditionalDataNetworkTokens::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIResponseAdditionalDataNetworkTokens::fromJsonObject(QJsonObject json) {

    m_network_token_available_isValid = ::OpenAPI::fromJsonValue(m_network_token_available, json[QString("networkToken.available")]);
    m_network_token_available_isSet = !json[QString("networkToken.available")].isNull() && m_network_token_available_isValid;

    m_network_token_bin_isValid = ::OpenAPI::fromJsonValue(m_network_token_bin, json[QString("networkToken.bin")]);
    m_network_token_bin_isSet = !json[QString("networkToken.bin")].isNull() && m_network_token_bin_isValid;

    m_network_token_token_summary_isValid = ::OpenAPI::fromJsonValue(m_network_token_token_summary, json[QString("networkToken.tokenSummary")]);
    m_network_token_token_summary_isSet = !json[QString("networkToken.tokenSummary")].isNull() && m_network_token_token_summary_isValid;
}

QString OAIResponseAdditionalDataNetworkTokens::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIResponseAdditionalDataNetworkTokens::asJsonObject() const {
    QJsonObject obj;
    if (m_network_token_available_isSet) {
        obj.insert(QString("networkToken.available"), ::OpenAPI::toJsonValue(m_network_token_available));
    }
    if (m_network_token_bin_isSet) {
        obj.insert(QString("networkToken.bin"), ::OpenAPI::toJsonValue(m_network_token_bin));
    }
    if (m_network_token_token_summary_isSet) {
        obj.insert(QString("networkToken.tokenSummary"), ::OpenAPI::toJsonValue(m_network_token_token_summary));
    }
    return obj;
}

QString OAIResponseAdditionalDataNetworkTokens::getNetworkTokenAvailable() const {
    return m_network_token_available;
}
void OAIResponseAdditionalDataNetworkTokens::setNetworkTokenAvailable(const QString &network_token_available) {
    m_network_token_available = network_token_available;
    m_network_token_available_isSet = true;
}

bool OAIResponseAdditionalDataNetworkTokens::is_network_token_available_Set() const{
    return m_network_token_available_isSet;
}

bool OAIResponseAdditionalDataNetworkTokens::is_network_token_available_Valid() const{
    return m_network_token_available_isValid;
}

QString OAIResponseAdditionalDataNetworkTokens::getNetworkTokenBin() const {
    return m_network_token_bin;
}
void OAIResponseAdditionalDataNetworkTokens::setNetworkTokenBin(const QString &network_token_bin) {
    m_network_token_bin = network_token_bin;
    m_network_token_bin_isSet = true;
}

bool OAIResponseAdditionalDataNetworkTokens::is_network_token_bin_Set() const{
    return m_network_token_bin_isSet;
}

bool OAIResponseAdditionalDataNetworkTokens::is_network_token_bin_Valid() const{
    return m_network_token_bin_isValid;
}

QString OAIResponseAdditionalDataNetworkTokens::getNetworkTokenTokenSummary() const {
    return m_network_token_token_summary;
}
void OAIResponseAdditionalDataNetworkTokens::setNetworkTokenTokenSummary(const QString &network_token_token_summary) {
    m_network_token_token_summary = network_token_token_summary;
    m_network_token_token_summary_isSet = true;
}

bool OAIResponseAdditionalDataNetworkTokens::is_network_token_token_summary_Set() const{
    return m_network_token_token_summary_isSet;
}

bool OAIResponseAdditionalDataNetworkTokens::is_network_token_token_summary_Valid() const{
    return m_network_token_token_summary_isValid;
}

bool OAIResponseAdditionalDataNetworkTokens::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_network_token_available_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_token_bin_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_token_token_summary_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIResponseAdditionalDataNetworkTokens::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
