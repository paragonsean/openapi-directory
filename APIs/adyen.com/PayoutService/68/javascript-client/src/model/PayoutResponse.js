/**
 * Adyen Payout API
 * A set of API endpoints that allow you to store payout details, confirm, or decline a payout.  For more information, refer to [Online payouts](https://docs.adyen.com/online-payments/online-payouts). ## Authentication To use the Payout API, you need to have [two API credentials](https://docs.adyen.com/online-payments/online-payouts#payouts-to-bank-accounts-and-wallets): one for storing payout details and submitting payouts, and another one for confirming or declining payouts. If you don't have the required API credentials, contact our [Support Team](https://www.adyen.help/hc/en-us/requests/new).  If using an API key, add an `X-API-Key` header with the API key as the value, for example:   ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ```  Alternatively, you can use the username and password to connect to the API using [basic authentication](https://docs.adyen.com/development-resources/api-credentials#basic-authentication).  The following example shows how to authenticate your request with basic authentication when submitting a payout:  ``` curl -U \"storePayout@Company.YOUR_COMPANY_ACCOUNT\":\"YOUR_BASIC_AUTHENTICATION_PASSWORD\" \\ -H \"Content-Type: application/json\" \\ ... ```  ## Versioning Payments API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://pal-test.adyen.com/pal/servlet/Payout/v68/payout ```  ## Going live  To authenticate to the live endpoints, you need [API credentials](https://docs.adyen.com/development-resources/api-credentials) from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account: ```  https://{PREFIX}-pal-live.adyenpayments.com/pal/servlet/Payout/v68/payout ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.
 *
 * The version of the OpenAPI document: 68
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Amount from './Amount';
import FraudResult from './FraudResult';
import PayoutResponseAdditionalData from './PayoutResponseAdditionalData';

/**
 * The PayoutResponse model module.
 * @module model/PayoutResponse
 * @version 68
 */
class PayoutResponse {
    /**
     * Constructs a new <code>PayoutResponse</code>.
     * @alias module:model/PayoutResponse
     */
    constructor() { 
        
        PayoutResponse.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PayoutResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PayoutResponse} obj Optional instance to populate.
     * @return {module:model/PayoutResponse} The populated <code>PayoutResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PayoutResponse();

            if (data.hasOwnProperty('additionalData')) {
                obj['additionalData'] = PayoutResponseAdditionalData.constructFromObject(data['additionalData']);
            }
            if (data.hasOwnProperty('authCode')) {
                obj['authCode'] = ApiClient.convertToType(data['authCode'], 'String');
            }
            if (data.hasOwnProperty('dccAmount')) {
                obj['dccAmount'] = Amount.constructFromObject(data['dccAmount']);
            }
            if (data.hasOwnProperty('dccSignature')) {
                obj['dccSignature'] = ApiClient.convertToType(data['dccSignature'], 'String');
            }
            if (data.hasOwnProperty('fraudResult')) {
                obj['fraudResult'] = FraudResult.constructFromObject(data['fraudResult']);
            }
            if (data.hasOwnProperty('issuerUrl')) {
                obj['issuerUrl'] = ApiClient.convertToType(data['issuerUrl'], 'String');
            }
            if (data.hasOwnProperty('md')) {
                obj['md'] = ApiClient.convertToType(data['md'], 'String');
            }
            if (data.hasOwnProperty('paRequest')) {
                obj['paRequest'] = ApiClient.convertToType(data['paRequest'], 'String');
            }
            if (data.hasOwnProperty('pspReference')) {
                obj['pspReference'] = ApiClient.convertToType(data['pspReference'], 'String');
            }
            if (data.hasOwnProperty('refusalReason')) {
                obj['refusalReason'] = ApiClient.convertToType(data['refusalReason'], 'String');
            }
            if (data.hasOwnProperty('resultCode')) {
                obj['resultCode'] = ApiClient.convertToType(data['resultCode'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PayoutResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PayoutResponse</code>.
     */
    static validateJSON(data) {
        // validate the optional field `additionalData`
        if (data['additionalData']) { // data not null
          PayoutResponseAdditionalData.validateJSON(data['additionalData']);
        }
        // ensure the json data is a string
        if (data['authCode'] && !(typeof data['authCode'] === 'string' || data['authCode'] instanceof String)) {
            throw new Error("Expected the field `authCode` to be a primitive type in the JSON string but got " + data['authCode']);
        }
        // validate the optional field `dccAmount`
        if (data['dccAmount']) { // data not null
          Amount.validateJSON(data['dccAmount']);
        }
        // ensure the json data is a string
        if (data['dccSignature'] && !(typeof data['dccSignature'] === 'string' || data['dccSignature'] instanceof String)) {
            throw new Error("Expected the field `dccSignature` to be a primitive type in the JSON string but got " + data['dccSignature']);
        }
        // validate the optional field `fraudResult`
        if (data['fraudResult']) { // data not null
          FraudResult.validateJSON(data['fraudResult']);
        }
        // ensure the json data is a string
        if (data['issuerUrl'] && !(typeof data['issuerUrl'] === 'string' || data['issuerUrl'] instanceof String)) {
            throw new Error("Expected the field `issuerUrl` to be a primitive type in the JSON string but got " + data['issuerUrl']);
        }
        // ensure the json data is a string
        if (data['md'] && !(typeof data['md'] === 'string' || data['md'] instanceof String)) {
            throw new Error("Expected the field `md` to be a primitive type in the JSON string but got " + data['md']);
        }
        // ensure the json data is a string
        if (data['paRequest'] && !(typeof data['paRequest'] === 'string' || data['paRequest'] instanceof String)) {
            throw new Error("Expected the field `paRequest` to be a primitive type in the JSON string but got " + data['paRequest']);
        }
        // ensure the json data is a string
        if (data['pspReference'] && !(typeof data['pspReference'] === 'string' || data['pspReference'] instanceof String)) {
            throw new Error("Expected the field `pspReference` to be a primitive type in the JSON string but got " + data['pspReference']);
        }
        // ensure the json data is a string
        if (data['refusalReason'] && !(typeof data['refusalReason'] === 'string' || data['refusalReason'] instanceof String)) {
            throw new Error("Expected the field `refusalReason` to be a primitive type in the JSON string but got " + data['refusalReason']);
        }
        // ensure the json data is a string
        if (data['resultCode'] && !(typeof data['resultCode'] === 'string' || data['resultCode'] instanceof String)) {
            throw new Error("Expected the field `resultCode` to be a primitive type in the JSON string but got " + data['resultCode']);
        }

        return true;
    }


}



/**
 * @member {module:model/PayoutResponseAdditionalData} additionalData
 */
PayoutResponse.prototype['additionalData'] = undefined;

/**
 * Authorisation code: * When the payment is authorised successfully, this field holds the authorisation code for the payment. * When the payment is not authorised, this field is empty.
 * @member {String} authCode
 */
PayoutResponse.prototype['authCode'] = undefined;

/**
 * Includes the currency of the conversion and the value of the transaction. > This value only applies if you have implemented Dynamic Currency Conversion. For more information, [contact Support](https://www.adyen.help/hc/en-us/requests/new).
 * @member {module:model/Amount} dccAmount
 */
PayoutResponse.prototype['dccAmount'] = undefined;

/**
 * Cryptographic signature used to verify `dccQuote`. > This value only applies if you have implemented Dynamic Currency Conversion. For more information, [contact Support](https://www.adyen.help/hc/en-us/requests/new).
 * @member {String} dccSignature
 */
PayoutResponse.prototype['dccSignature'] = undefined;

/**
 * The fraud result properties of the payment.
 * @member {module:model/FraudResult} fraudResult
 */
PayoutResponse.prototype['fraudResult'] = undefined;

/**
 * The URL to direct the shopper to. > In case of SecurePlus, do not redirect a shopper to this URL.
 * @member {String} issuerUrl
 */
PayoutResponse.prototype['issuerUrl'] = undefined;

/**
 * The payment session.
 * @member {String} md
 */
PayoutResponse.prototype['md'] = undefined;

/**
 * The 3D request data for the issuer.  If the value is **CUPSecurePlus-CollectSMSVerificationCode**, collect an SMS code from the shopper and pass it in the `/authorise3D` request. For more information, see [3D Secure](https://docs.adyen.com/classic-integration/3d-secure).
 * @member {String} paRequest
 */
PayoutResponse.prototype['paRequest'] = undefined;

/**
 * Adyen's 16-character reference associated with the transaction/request. This value is globally unique; quote it when communicating with us about this request.
 * @member {String} pspReference
 */
PayoutResponse.prototype['pspReference'] = undefined;

/**
 * If the payment's authorisation is refused or an error occurs during authorisation, this field holds Adyen's mapped reason for the refusal or a description of the error. When a transaction fails, the authorisation response includes `resultCode` and `refusalReason` values.  For more information, see [Refusal reasons](https://docs.adyen.com/development-resources/refusal-reasons).
 * @member {String} refusalReason
 */
PayoutResponse.prototype['refusalReason'] = undefined;

/**
 * The result of the payment. For more information, see [Result codes](https://docs.adyen.com/online-payments/payment-result-codes).  Possible values:  * **AuthenticationFinished** – The payment has been successfully authenticated with 3D Secure 2. Returned for 3D Secure 2 authentication-only transactions. * **AuthenticationNotRequired** – The transaction does not require 3D Secure authentication. Returned for [standalone authentication-only integrations](https://docs.adyen.com/online-payments/3d-secure/other-3ds-flows/authentication-only). * **Authorised** – The payment was successfully authorised. This state serves as an indicator to proceed with the delivery of goods and services. This is a final state. * **Cancelled** – Indicates the payment has been cancelled (either by the shopper or the merchant) before processing was completed. This is a final state. * **ChallengeShopper** – The issuer requires further shopper interaction before the payment can be authenticated. Returned for 3D Secure 2 transactions. * **Error** – There was an error when the payment was being processed. The reason is given in the `refusalReason` field. This is a final state. * **IdentifyShopper** – The issuer requires the shopper's device fingerprint before the payment can be authenticated. Returned for 3D Secure 2 transactions. * **PartiallyAuthorised** – The payment has been authorised for a partial amount. This happens for card payments when the merchant supports Partial Authorisations and the cardholder has insufficient funds. * **Pending** – Indicates that it is not possible to obtain the final status of the payment. This can happen if the systems providing final status information for the payment are unavailable, or if the shopper needs to take further action to complete the payment. * **PresentToShopper** – Indicates that the response contains additional information that you need to present to a shopper, so that they can use it to complete a payment. * **Received** – Indicates the payment has successfully been received by Adyen, and will be processed. This is the initial state for all payments. * **RedirectShopper** – Indicates the shopper should be redirected to an external web page or app to complete the authorisation. * **Refused** – Indicates the payment was refused. The reason is given in the `refusalReason` field. This is a final state.
 * @member {module:model/PayoutResponse.ResultCodeEnum} resultCode
 */
PayoutResponse.prototype['resultCode'] = undefined;





/**
 * Allowed values for the <code>resultCode</code> property.
 * @enum {String}
 * @readonly
 */
PayoutResponse['ResultCodeEnum'] = {

    /**
     * value: "AuthenticationFinished"
     * @const
     */
    "AuthenticationFinished": "AuthenticationFinished",

    /**
     * value: "AuthenticationNotRequired"
     * @const
     */
    "AuthenticationNotRequired": "AuthenticationNotRequired",

    /**
     * value: "Authorised"
     * @const
     */
    "Authorised": "Authorised",

    /**
     * value: "Cancelled"
     * @const
     */
    "Cancelled": "Cancelled",

    /**
     * value: "ChallengeShopper"
     * @const
     */
    "ChallengeShopper": "ChallengeShopper",

    /**
     * value: "Error"
     * @const
     */
    "Error": "Error",

    /**
     * value: "IdentifyShopper"
     * @const
     */
    "IdentifyShopper": "IdentifyShopper",

    /**
     * value: "PartiallyAuthorised"
     * @const
     */
    "PartiallyAuthorised": "PartiallyAuthorised",

    /**
     * value: "Pending"
     * @const
     */
    "Pending": "Pending",

    /**
     * value: "PresentToShopper"
     * @const
     */
    "PresentToShopper": "PresentToShopper",

    /**
     * value: "Received"
     * @const
     */
    "Received": "Received",

    /**
     * value: "RedirectShopper"
     * @const
     */
    "RedirectShopper": "RedirectShopper",

    /**
     * value: "Refused"
     * @const
     */
    "Refused": "Refused",

    /**
     * value: "Success"
     * @const
     */
    "Success": "Success"
};



export default PayoutResponse;

