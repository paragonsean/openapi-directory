/**
 * Adyen Payout API
 * A set of API endpoints that allow you to store payout details, confirm, or decline a payout.  For more information, refer to [Online payouts](https://docs.adyen.com/online-payments/online-payouts). ## Authentication To use the Payout API, you need to have [two API credentials](https://docs.adyen.com/online-payments/online-payouts#payouts-to-bank-accounts-and-wallets): one for storing payout details and submitting payouts, and another one for confirming or declining payouts. If you don't have the required API credentials, contact our [Support Team](https://www.adyen.help/hc/en-us/requests/new).  If using an API key, add an `X-API-Key` header with the API key as the value, for example:   ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ```  Alternatively, you can use the username and password to connect to the API using [basic authentication](https://docs.adyen.com/development-resources/api-credentials#basic-authentication).  The following example shows how to authenticate your request with basic authentication when submitting a payout:  ``` curl -U \"storePayout@Company.YOUR_COMPANY_ACCOUNT\":\"YOUR_BASIC_AUTHENTICATION_PASSWORD\" \\ -H \"Content-Type: application/json\" \\ ... ```  ## Versioning Payments API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://pal-test.adyen.com/pal/servlet/Payout/v68/payout ```  ## Going live  To authenticate to the live endpoints, you need [API credentials](https://docs.adyen.com/development-resources/api-credentials) from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account: ```  https://{PREFIX}-pal-live.adyenpayments.com/pal/servlet/Payout/v68/payout ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.
 *
 * The version of the OpenAPI document: 68
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Address from './Address';
import Card from './Card';
import Name from './Name';

/**
 * The FundSource model module.
 * @module model/FundSource
 * @version 68
 */
class FundSource {
    /**
     * Constructs a new <code>FundSource</code>.
     * @alias module:model/FundSource
     */
    constructor() { 
        
        FundSource.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>FundSource</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FundSource} obj Optional instance to populate.
     * @return {module:model/FundSource} The populated <code>FundSource</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FundSource();

            if (data.hasOwnProperty('additionalData')) {
                obj['additionalData'] = ApiClient.convertToType(data['additionalData'], {'String': 'String'});
            }
            if (data.hasOwnProperty('billingAddress')) {
                obj['billingAddress'] = Address.constructFromObject(data['billingAddress']);
            }
            if (data.hasOwnProperty('card')) {
                obj['card'] = Card.constructFromObject(data['card']);
            }
            if (data.hasOwnProperty('shopperEmail')) {
                obj['shopperEmail'] = ApiClient.convertToType(data['shopperEmail'], 'String');
            }
            if (data.hasOwnProperty('shopperName')) {
                obj['shopperName'] = Name.constructFromObject(data['shopperName']);
            }
            if (data.hasOwnProperty('telephoneNumber')) {
                obj['telephoneNumber'] = ApiClient.convertToType(data['telephoneNumber'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>FundSource</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FundSource</code>.
     */
    static validateJSON(data) {
        // validate the optional field `billingAddress`
        if (data['billingAddress']) { // data not null
          Address.validateJSON(data['billingAddress']);
        }
        // validate the optional field `card`
        if (data['card']) { // data not null
          Card.validateJSON(data['card']);
        }
        // ensure the json data is a string
        if (data['shopperEmail'] && !(typeof data['shopperEmail'] === 'string' || data['shopperEmail'] instanceof String)) {
            throw new Error("Expected the field `shopperEmail` to be a primitive type in the JSON string but got " + data['shopperEmail']);
        }
        // validate the optional field `shopperName`
        if (data['shopperName']) { // data not null
          Name.validateJSON(data['shopperName']);
        }
        // ensure the json data is a string
        if (data['telephoneNumber'] && !(typeof data['telephoneNumber'] === 'string' || data['telephoneNumber'] instanceof String)) {
            throw new Error("Expected the field `telephoneNumber` to be a primitive type in the JSON string but got " + data['telephoneNumber']);
        }

        return true;
    }


}



/**
 * A map of name-value pairs for passing additional or industry-specific data.
 * @member {Object.<String, String>} additionalData
 */
FundSource.prototype['additionalData'] = undefined;

/**
 * The address where to send the invoice.
 * @member {module:model/Address} billingAddress
 */
FundSource.prototype['billingAddress'] = undefined;

/**
 * Credit card data.  Optional if `shopperReference` and `selectedRecurringDetailReference` are provided.
 * @member {module:model/Card} card
 */
FundSource.prototype['card'] = undefined;

/**
 * Email address of the person.
 * @member {String} shopperEmail
 */
FundSource.prototype['shopperEmail'] = undefined;

/**
 * Name of the person.
 * @member {module:model/Name} shopperName
 */
FundSource.prototype['shopperName'] = undefined;

/**
 * Phone number of the person
 * @member {String} telephoneNumber
 */
FundSource.prototype['telephoneNumber'] = undefined;






export default FundSource;

