# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.address import Address
from openapi_server.models.amount import Amount
from openapi_server.models.card import Card
from openapi_server.models.fund_source import FundSource
from openapi_server.models.name import Name
from openapi_server.models.recurring import Recurring
from openapi_server import util


class PayoutRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amount: Amount=None, billing_address: Address=None, card: Card=None, fraud_offset: int=None, fund_source: FundSource=None, merchant_account: str=None, recurring: Recurring=None, reference: str=None, selected_recurring_detail_reference: str=None, shopper_email: str=None, shopper_interaction: str=None, shopper_name: Name=None, shopper_reference: str=None, telephone_number: str=None):
        """PayoutRequest - a model defined in OpenAPI

        :param amount: The amount of this PayoutRequest.
        :param billing_address: The billing_address of this PayoutRequest.
        :param card: The card of this PayoutRequest.
        :param fraud_offset: The fraud_offset of this PayoutRequest.
        :param fund_source: The fund_source of this PayoutRequest.
        :param merchant_account: The merchant_account of this PayoutRequest.
        :param recurring: The recurring of this PayoutRequest.
        :param reference: The reference of this PayoutRequest.
        :param selected_recurring_detail_reference: The selected_recurring_detail_reference of this PayoutRequest.
        :param shopper_email: The shopper_email of this PayoutRequest.
        :param shopper_interaction: The shopper_interaction of this PayoutRequest.
        :param shopper_name: The shopper_name of this PayoutRequest.
        :param shopper_reference: The shopper_reference of this PayoutRequest.
        :param telephone_number: The telephone_number of this PayoutRequest.
        """
        self.openapi_types = {
            'amount': Amount,
            'billing_address': Address,
            'card': Card,
            'fraud_offset': int,
            'fund_source': FundSource,
            'merchant_account': str,
            'recurring': Recurring,
            'reference': str,
            'selected_recurring_detail_reference': str,
            'shopper_email': str,
            'shopper_interaction': str,
            'shopper_name': Name,
            'shopper_reference': str,
            'telephone_number': str
        }

        self.attribute_map = {
            'amount': 'amount',
            'billing_address': 'billingAddress',
            'card': 'card',
            'fraud_offset': 'fraudOffset',
            'fund_source': 'fundSource',
            'merchant_account': 'merchantAccount',
            'recurring': 'recurring',
            'reference': 'reference',
            'selected_recurring_detail_reference': 'selectedRecurringDetailReference',
            'shopper_email': 'shopperEmail',
            'shopper_interaction': 'shopperInteraction',
            'shopper_name': 'shopperName',
            'shopper_reference': 'shopperReference',
            'telephone_number': 'telephoneNumber'
        }

        self._amount = amount
        self._billing_address = billing_address
        self._card = card
        self._fraud_offset = fraud_offset
        self._fund_source = fund_source
        self._merchant_account = merchant_account
        self._recurring = recurring
        self._reference = reference
        self._selected_recurring_detail_reference = selected_recurring_detail_reference
        self._shopper_email = shopper_email
        self._shopper_interaction = shopper_interaction
        self._shopper_name = shopper_name
        self._shopper_reference = shopper_reference
        self._telephone_number = telephone_number

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PayoutRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PayoutRequest of this PayoutRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amount(self):
        """Gets the amount of this PayoutRequest.

        The amount information for the transaction (in [minor units](https://docs.adyen.com/development-resources/currency-codes)). For [BIN or card verification](https://docs.adyen.com/payment-methods/cards/bin-data-and-card-verification) requests, set amount to 0 (zero).

        :return: The amount of this PayoutRequest.
        :rtype: Amount
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this PayoutRequest.

        The amount information for the transaction (in [minor units](https://docs.adyen.com/development-resources/currency-codes)). For [BIN or card verification](https://docs.adyen.com/payment-methods/cards/bin-data-and-card-verification) requests, set amount to 0 (zero).

        :param amount: The amount of this PayoutRequest.
        :type amount: Amount
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")

        self._amount = amount

    @property
    def billing_address(self):
        """Gets the billing_address of this PayoutRequest.

        The address where to send the invoice. > The `billingAddress` object is required in the following scenarios. Include all of the fields within this object. >* For 3D Secure 2 transactions in all browser-based and mobile implementations. >* For cross-border payouts to and from Canada.

        :return: The billing_address of this PayoutRequest.
        :rtype: Address
        """
        return self._billing_address

    @billing_address.setter
    def billing_address(self, billing_address):
        """Sets the billing_address of this PayoutRequest.

        The address where to send the invoice. > The `billingAddress` object is required in the following scenarios. Include all of the fields within this object. >* For 3D Secure 2 transactions in all browser-based and mobile implementations. >* For cross-border payouts to and from Canada.

        :param billing_address: The billing_address of this PayoutRequest.
        :type billing_address: Address
        """

        self._billing_address = billing_address

    @property
    def card(self):
        """Gets the card of this PayoutRequest.

        A container for card data. > Either `bankAccount` or `card` field must be provided in a payment request.

        :return: The card of this PayoutRequest.
        :rtype: Card
        """
        return self._card

    @card.setter
    def card(self, card):
        """Sets the card of this PayoutRequest.

        A container for card data. > Either `bankAccount` or `card` field must be provided in a payment request.

        :param card: The card of this PayoutRequest.
        :type card: Card
        """

        self._card = card

    @property
    def fraud_offset(self):
        """Gets the fraud_offset of this PayoutRequest.

        An integer value that is added to the normal fraud score. The value can be either positive or negative.

        :return: The fraud_offset of this PayoutRequest.
        :rtype: int
        """
        return self._fraud_offset

    @fraud_offset.setter
    def fraud_offset(self, fraud_offset):
        """Sets the fraud_offset of this PayoutRequest.

        An integer value that is added to the normal fraud score. The value can be either positive or negative.

        :param fraud_offset: The fraud_offset of this PayoutRequest.
        :type fraud_offset: int
        """

        self._fraud_offset = fraud_offset

    @property
    def fund_source(self):
        """Gets the fund_source of this PayoutRequest.

        The person or entity funding the money.

        :return: The fund_source of this PayoutRequest.
        :rtype: FundSource
        """
        return self._fund_source

    @fund_source.setter
    def fund_source(self, fund_source):
        """Sets the fund_source of this PayoutRequest.

        The person or entity funding the money.

        :param fund_source: The fund_source of this PayoutRequest.
        :type fund_source: FundSource
        """

        self._fund_source = fund_source

    @property
    def merchant_account(self):
        """Gets the merchant_account of this PayoutRequest.

        The merchant account identifier, with which you want to process the transaction.

        :return: The merchant_account of this PayoutRequest.
        :rtype: str
        """
        return self._merchant_account

    @merchant_account.setter
    def merchant_account(self, merchant_account):
        """Sets the merchant_account of this PayoutRequest.

        The merchant account identifier, with which you want to process the transaction.

        :param merchant_account: The merchant_account of this PayoutRequest.
        :type merchant_account: str
        """
        if merchant_account is None:
            raise ValueError("Invalid value for `merchant_account`, must not be `None`")

        self._merchant_account = merchant_account

    @property
    def recurring(self):
        """Gets the recurring of this PayoutRequest.

        The recurring settings for the payment. Use this property when you want to enable [recurring payments](https://docs.adyen.com/classic-integration/recurring-payments).

        :return: The recurring of this PayoutRequest.
        :rtype: Recurring
        """
        return self._recurring

    @recurring.setter
    def recurring(self, recurring):
        """Sets the recurring of this PayoutRequest.

        The recurring settings for the payment. Use this property when you want to enable [recurring payments](https://docs.adyen.com/classic-integration/recurring-payments).

        :param recurring: The recurring of this PayoutRequest.
        :type recurring: Recurring
        """

        self._recurring = recurring

    @property
    def reference(self):
        """Gets the reference of this PayoutRequest.

        The reference to uniquely identify a payment. This reference is used in all communication with you about the payment status. We recommend using a unique value per payment; however, it is not a requirement. If you need to provide multiple references for a transaction, separate them with hyphens (\"-\"). Maximum length: 80 characters.

        :return: The reference of this PayoutRequest.
        :rtype: str
        """
        return self._reference

    @reference.setter
    def reference(self, reference):
        """Sets the reference of this PayoutRequest.

        The reference to uniquely identify a payment. This reference is used in all communication with you about the payment status. We recommend using a unique value per payment; however, it is not a requirement. If you need to provide multiple references for a transaction, separate them with hyphens (\"-\"). Maximum length: 80 characters.

        :param reference: The reference of this PayoutRequest.
        :type reference: str
        """
        if reference is None:
            raise ValueError("Invalid value for `reference`, must not be `None`")

        self._reference = reference

    @property
    def selected_recurring_detail_reference(self):
        """Gets the selected_recurring_detail_reference of this PayoutRequest.

        The `recurringDetailReference` you want to use for this payment. The value `LATEST` can be used to select the most recently stored recurring detail.

        :return: The selected_recurring_detail_reference of this PayoutRequest.
        :rtype: str
        """
        return self._selected_recurring_detail_reference

    @selected_recurring_detail_reference.setter
    def selected_recurring_detail_reference(self, selected_recurring_detail_reference):
        """Sets the selected_recurring_detail_reference of this PayoutRequest.

        The `recurringDetailReference` you want to use for this payment. The value `LATEST` can be used to select the most recently stored recurring detail.

        :param selected_recurring_detail_reference: The selected_recurring_detail_reference of this PayoutRequest.
        :type selected_recurring_detail_reference: str
        """

        self._selected_recurring_detail_reference = selected_recurring_detail_reference

    @property
    def shopper_email(self):
        """Gets the shopper_email of this PayoutRequest.

        The shopper's email address. We recommend that you provide this data, as it is used in velocity fraud checks. > For 3D Secure 2 transactions, schemes require `shopperEmail` for all browser-based and mobile implementations.

        :return: The shopper_email of this PayoutRequest.
        :rtype: str
        """
        return self._shopper_email

    @shopper_email.setter
    def shopper_email(self, shopper_email):
        """Sets the shopper_email of this PayoutRequest.

        The shopper's email address. We recommend that you provide this data, as it is used in velocity fraud checks. > For 3D Secure 2 transactions, schemes require `shopperEmail` for all browser-based and mobile implementations.

        :param shopper_email: The shopper_email of this PayoutRequest.
        :type shopper_email: str
        """

        self._shopper_email = shopper_email

    @property
    def shopper_interaction(self):
        """Gets the shopper_interaction of this PayoutRequest.

        Specifies the sales channel, through which the shopper gives their card details, and whether the shopper is a returning customer. For the web service API, Adyen assumes Ecommerce shopper interaction by default.  This field has the following possible values: * `Ecommerce` - Online transactions where the cardholder is present (online). For better authorisation rates, we recommend sending the card security code (CSC) along with the request. * `ContAuth` - Card on file and/or subscription transactions, where the cardholder is known to the merchant (returning customer). If the shopper is present (online), you can supply also the CSC to improve authorisation (one-click payment). * `Moto` - Mail-order and telephone-order transactions where the shopper is in contact with the merchant via email or telephone. * `POS` - Point-of-sale transactions where the shopper is physically present to make a payment using a secure payment terminal.

        :return: The shopper_interaction of this PayoutRequest.
        :rtype: str
        """
        return self._shopper_interaction

    @shopper_interaction.setter
    def shopper_interaction(self, shopper_interaction):
        """Sets the shopper_interaction of this PayoutRequest.

        Specifies the sales channel, through which the shopper gives their card details, and whether the shopper is a returning customer. For the web service API, Adyen assumes Ecommerce shopper interaction by default.  This field has the following possible values: * `Ecommerce` - Online transactions where the cardholder is present (online). For better authorisation rates, we recommend sending the card security code (CSC) along with the request. * `ContAuth` - Card on file and/or subscription transactions, where the cardholder is known to the merchant (returning customer). If the shopper is present (online), you can supply also the CSC to improve authorisation (one-click payment). * `Moto` - Mail-order and telephone-order transactions where the shopper is in contact with the merchant via email or telephone. * `POS` - Point-of-sale transactions where the shopper is physically present to make a payment using a secure payment terminal.

        :param shopper_interaction: The shopper_interaction of this PayoutRequest.
        :type shopper_interaction: str
        """
        allowed_values = ["Ecommerce", "ContAuth", "Moto", "POS"]  # noqa: E501
        if shopper_interaction not in allowed_values:
            raise ValueError(
                "Invalid value for `shopper_interaction` ({0}), must be one of {1}"
                .format(shopper_interaction, allowed_values)
            )

        self._shopper_interaction = shopper_interaction

    @property
    def shopper_name(self):
        """Gets the shopper_name of this PayoutRequest.

        The shopper's full name.

        :return: The shopper_name of this PayoutRequest.
        :rtype: Name
        """
        return self._shopper_name

    @shopper_name.setter
    def shopper_name(self, shopper_name):
        """Sets the shopper_name of this PayoutRequest.

        The shopper's full name.

        :param shopper_name: The shopper_name of this PayoutRequest.
        :type shopper_name: Name
        """

        self._shopper_name = shopper_name

    @property
    def shopper_reference(self):
        """Gets the shopper_reference of this PayoutRequest.

        Required for recurring payments.  Your reference to uniquely identify this shopper, for example user ID or account ID. Minimum length: 3 characters. > Your reference must not include personally identifiable information (PII), for example name or email address.

        :return: The shopper_reference of this PayoutRequest.
        :rtype: str
        """
        return self._shopper_reference

    @shopper_reference.setter
    def shopper_reference(self, shopper_reference):
        """Sets the shopper_reference of this PayoutRequest.

        Required for recurring payments.  Your reference to uniquely identify this shopper, for example user ID or account ID. Minimum length: 3 characters. > Your reference must not include personally identifiable information (PII), for example name or email address.

        :param shopper_reference: The shopper_reference of this PayoutRequest.
        :type shopper_reference: str
        """

        self._shopper_reference = shopper_reference

    @property
    def telephone_number(self):
        """Gets the telephone_number of this PayoutRequest.

        The shopper's telephone number.

        :return: The telephone_number of this PayoutRequest.
        :rtype: str
        """
        return self._telephone_number

    @telephone_number.setter
    def telephone_number(self, telephone_number):
        """Sets the telephone_number of this PayoutRequest.

        The shopper's telephone number.

        :param telephone_number: The telephone_number of this PayoutRequest.
        :type telephone_number: str
        """

        self._telephone_number = telephone_number
