/**
 * Adyen Payout API
 * A set of API endpoints that allow you to store payout details, confirm, or decline a payout.  For more information, refer to [Online payouts](https://docs.adyen.com/online-payments/online-payouts). ## Authentication To use the Payout API, you need to have [two API credentials](https://docs.adyen.com/online-payments/online-payouts#payouts-to-bank-accounts-and-wallets): one for storing payout details and submitting payouts, and another one for confirming or declining payouts. If you don't have the required API credentials, contact our [Support Team](https://www.adyen.help/hc/en-us/requests/new).  If using an API key, add an `X-API-Key` header with the API key as the value, for example:   ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ```  Alternatively, you can use the username and password to connect to the API using [basic authentication](https://docs.adyen.com/development-resources/api-credentials#basic-authentication).  The following example shows how to authenticate your request with basic authentication when submitting a payout:  ``` curl -U \"storePayout@Company.YOUR_COMPANY_ACCOUNT\":\"YOUR_BASIC_AUTHENTICATION_PASSWORD\" \\ -H \"Content-Type: application/json\" \\ ... ```  ## Versioning Payments API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://pal-test.adyen.com/pal/servlet/Payout/v52/payout ```  ## Going live  To authenticate to the live endpoints, you need [API credentials](https://docs.adyen.com/development-resources/api-credentials) from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account: ```  https://{PREFIX}-pal-live.adyenpayments.com/pal/servlet/Payout/v52/payout ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.
 *
 * The version of the OpenAPI document: 52
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPayoutRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPayoutRequest::OAIPayoutRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPayoutRequest::OAIPayoutRequest() {
    this->initializeModel();
}

OAIPayoutRequest::~OAIPayoutRequest() {}

void OAIPayoutRequest::initializeModel() {

    m_amount_isSet = false;
    m_amount_isValid = false;

    m_billing_address_isSet = false;
    m_billing_address_isValid = false;

    m_card_isSet = false;
    m_card_isValid = false;

    m_fraud_offset_isSet = false;
    m_fraud_offset_isValid = false;

    m_fund_source_isSet = false;
    m_fund_source_isValid = false;

    m_merchant_account_isSet = false;
    m_merchant_account_isValid = false;

    m_recurring_isSet = false;
    m_recurring_isValid = false;

    m_reference_isSet = false;
    m_reference_isValid = false;

    m_selected_recurring_detail_reference_isSet = false;
    m_selected_recurring_detail_reference_isValid = false;

    m_shopper_email_isSet = false;
    m_shopper_email_isValid = false;

    m_shopper_interaction_isSet = false;
    m_shopper_interaction_isValid = false;

    m_shopper_name_isSet = false;
    m_shopper_name_isValid = false;

    m_shopper_reference_isSet = false;
    m_shopper_reference_isValid = false;

    m_telephone_number_isSet = false;
    m_telephone_number_isValid = false;
}

void OAIPayoutRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPayoutRequest::fromJsonObject(QJsonObject json) {

    m_amount_isValid = ::OpenAPI::fromJsonValue(m_amount, json[QString("amount")]);
    m_amount_isSet = !json[QString("amount")].isNull() && m_amount_isValid;

    m_billing_address_isValid = ::OpenAPI::fromJsonValue(m_billing_address, json[QString("billingAddress")]);
    m_billing_address_isSet = !json[QString("billingAddress")].isNull() && m_billing_address_isValid;

    m_card_isValid = ::OpenAPI::fromJsonValue(m_card, json[QString("card")]);
    m_card_isSet = !json[QString("card")].isNull() && m_card_isValid;

    m_fraud_offset_isValid = ::OpenAPI::fromJsonValue(m_fraud_offset, json[QString("fraudOffset")]);
    m_fraud_offset_isSet = !json[QString("fraudOffset")].isNull() && m_fraud_offset_isValid;

    m_fund_source_isValid = ::OpenAPI::fromJsonValue(m_fund_source, json[QString("fundSource")]);
    m_fund_source_isSet = !json[QString("fundSource")].isNull() && m_fund_source_isValid;

    m_merchant_account_isValid = ::OpenAPI::fromJsonValue(m_merchant_account, json[QString("merchantAccount")]);
    m_merchant_account_isSet = !json[QString("merchantAccount")].isNull() && m_merchant_account_isValid;

    m_recurring_isValid = ::OpenAPI::fromJsonValue(m_recurring, json[QString("recurring")]);
    m_recurring_isSet = !json[QString("recurring")].isNull() && m_recurring_isValid;

    m_reference_isValid = ::OpenAPI::fromJsonValue(m_reference, json[QString("reference")]);
    m_reference_isSet = !json[QString("reference")].isNull() && m_reference_isValid;

    m_selected_recurring_detail_reference_isValid = ::OpenAPI::fromJsonValue(m_selected_recurring_detail_reference, json[QString("selectedRecurringDetailReference")]);
    m_selected_recurring_detail_reference_isSet = !json[QString("selectedRecurringDetailReference")].isNull() && m_selected_recurring_detail_reference_isValid;

    m_shopper_email_isValid = ::OpenAPI::fromJsonValue(m_shopper_email, json[QString("shopperEmail")]);
    m_shopper_email_isSet = !json[QString("shopperEmail")].isNull() && m_shopper_email_isValid;

    m_shopper_interaction_isValid = ::OpenAPI::fromJsonValue(m_shopper_interaction, json[QString("shopperInteraction")]);
    m_shopper_interaction_isSet = !json[QString("shopperInteraction")].isNull() && m_shopper_interaction_isValid;

    m_shopper_name_isValid = ::OpenAPI::fromJsonValue(m_shopper_name, json[QString("shopperName")]);
    m_shopper_name_isSet = !json[QString("shopperName")].isNull() && m_shopper_name_isValid;

    m_shopper_reference_isValid = ::OpenAPI::fromJsonValue(m_shopper_reference, json[QString("shopperReference")]);
    m_shopper_reference_isSet = !json[QString("shopperReference")].isNull() && m_shopper_reference_isValid;

    m_telephone_number_isValid = ::OpenAPI::fromJsonValue(m_telephone_number, json[QString("telephoneNumber")]);
    m_telephone_number_isSet = !json[QString("telephoneNumber")].isNull() && m_telephone_number_isValid;
}

QString OAIPayoutRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPayoutRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_amount.isSet()) {
        obj.insert(QString("amount"), ::OpenAPI::toJsonValue(m_amount));
    }
    if (m_billing_address.isSet()) {
        obj.insert(QString("billingAddress"), ::OpenAPI::toJsonValue(m_billing_address));
    }
    if (m_card.isSet()) {
        obj.insert(QString("card"), ::OpenAPI::toJsonValue(m_card));
    }
    if (m_fraud_offset_isSet) {
        obj.insert(QString("fraudOffset"), ::OpenAPI::toJsonValue(m_fraud_offset));
    }
    if (m_fund_source.isSet()) {
        obj.insert(QString("fundSource"), ::OpenAPI::toJsonValue(m_fund_source));
    }
    if (m_merchant_account_isSet) {
        obj.insert(QString("merchantAccount"), ::OpenAPI::toJsonValue(m_merchant_account));
    }
    if (m_recurring.isSet()) {
        obj.insert(QString("recurring"), ::OpenAPI::toJsonValue(m_recurring));
    }
    if (m_reference_isSet) {
        obj.insert(QString("reference"), ::OpenAPI::toJsonValue(m_reference));
    }
    if (m_selected_recurring_detail_reference_isSet) {
        obj.insert(QString("selectedRecurringDetailReference"), ::OpenAPI::toJsonValue(m_selected_recurring_detail_reference));
    }
    if (m_shopper_email_isSet) {
        obj.insert(QString("shopperEmail"), ::OpenAPI::toJsonValue(m_shopper_email));
    }
    if (m_shopper_interaction_isSet) {
        obj.insert(QString("shopperInteraction"), ::OpenAPI::toJsonValue(m_shopper_interaction));
    }
    if (m_shopper_name.isSet()) {
        obj.insert(QString("shopperName"), ::OpenAPI::toJsonValue(m_shopper_name));
    }
    if (m_shopper_reference_isSet) {
        obj.insert(QString("shopperReference"), ::OpenAPI::toJsonValue(m_shopper_reference));
    }
    if (m_telephone_number_isSet) {
        obj.insert(QString("telephoneNumber"), ::OpenAPI::toJsonValue(m_telephone_number));
    }
    return obj;
}

OAIAmount OAIPayoutRequest::getAmount() const {
    return m_amount;
}
void OAIPayoutRequest::setAmount(const OAIAmount &amount) {
    m_amount = amount;
    m_amount_isSet = true;
}

bool OAIPayoutRequest::is_amount_Set() const{
    return m_amount_isSet;
}

bool OAIPayoutRequest::is_amount_Valid() const{
    return m_amount_isValid;
}

OAIAddress OAIPayoutRequest::getBillingAddress() const {
    return m_billing_address;
}
void OAIPayoutRequest::setBillingAddress(const OAIAddress &billing_address) {
    m_billing_address = billing_address;
    m_billing_address_isSet = true;
}

bool OAIPayoutRequest::is_billing_address_Set() const{
    return m_billing_address_isSet;
}

bool OAIPayoutRequest::is_billing_address_Valid() const{
    return m_billing_address_isValid;
}

OAICard OAIPayoutRequest::getCard() const {
    return m_card;
}
void OAIPayoutRequest::setCard(const OAICard &card) {
    m_card = card;
    m_card_isSet = true;
}

bool OAIPayoutRequest::is_card_Set() const{
    return m_card_isSet;
}

bool OAIPayoutRequest::is_card_Valid() const{
    return m_card_isValid;
}

qint32 OAIPayoutRequest::getFraudOffset() const {
    return m_fraud_offset;
}
void OAIPayoutRequest::setFraudOffset(const qint32 &fraud_offset) {
    m_fraud_offset = fraud_offset;
    m_fraud_offset_isSet = true;
}

bool OAIPayoutRequest::is_fraud_offset_Set() const{
    return m_fraud_offset_isSet;
}

bool OAIPayoutRequest::is_fraud_offset_Valid() const{
    return m_fraud_offset_isValid;
}

OAIFundSource OAIPayoutRequest::getFundSource() const {
    return m_fund_source;
}
void OAIPayoutRequest::setFundSource(const OAIFundSource &fund_source) {
    m_fund_source = fund_source;
    m_fund_source_isSet = true;
}

bool OAIPayoutRequest::is_fund_source_Set() const{
    return m_fund_source_isSet;
}

bool OAIPayoutRequest::is_fund_source_Valid() const{
    return m_fund_source_isValid;
}

QString OAIPayoutRequest::getMerchantAccount() const {
    return m_merchant_account;
}
void OAIPayoutRequest::setMerchantAccount(const QString &merchant_account) {
    m_merchant_account = merchant_account;
    m_merchant_account_isSet = true;
}

bool OAIPayoutRequest::is_merchant_account_Set() const{
    return m_merchant_account_isSet;
}

bool OAIPayoutRequest::is_merchant_account_Valid() const{
    return m_merchant_account_isValid;
}

OAIRecurring OAIPayoutRequest::getRecurring() const {
    return m_recurring;
}
void OAIPayoutRequest::setRecurring(const OAIRecurring &recurring) {
    m_recurring = recurring;
    m_recurring_isSet = true;
}

bool OAIPayoutRequest::is_recurring_Set() const{
    return m_recurring_isSet;
}

bool OAIPayoutRequest::is_recurring_Valid() const{
    return m_recurring_isValid;
}

QString OAIPayoutRequest::getReference() const {
    return m_reference;
}
void OAIPayoutRequest::setReference(const QString &reference) {
    m_reference = reference;
    m_reference_isSet = true;
}

bool OAIPayoutRequest::is_reference_Set() const{
    return m_reference_isSet;
}

bool OAIPayoutRequest::is_reference_Valid() const{
    return m_reference_isValid;
}

QString OAIPayoutRequest::getSelectedRecurringDetailReference() const {
    return m_selected_recurring_detail_reference;
}
void OAIPayoutRequest::setSelectedRecurringDetailReference(const QString &selected_recurring_detail_reference) {
    m_selected_recurring_detail_reference = selected_recurring_detail_reference;
    m_selected_recurring_detail_reference_isSet = true;
}

bool OAIPayoutRequest::is_selected_recurring_detail_reference_Set() const{
    return m_selected_recurring_detail_reference_isSet;
}

bool OAIPayoutRequest::is_selected_recurring_detail_reference_Valid() const{
    return m_selected_recurring_detail_reference_isValid;
}

QString OAIPayoutRequest::getShopperEmail() const {
    return m_shopper_email;
}
void OAIPayoutRequest::setShopperEmail(const QString &shopper_email) {
    m_shopper_email = shopper_email;
    m_shopper_email_isSet = true;
}

bool OAIPayoutRequest::is_shopper_email_Set() const{
    return m_shopper_email_isSet;
}

bool OAIPayoutRequest::is_shopper_email_Valid() const{
    return m_shopper_email_isValid;
}

QString OAIPayoutRequest::getShopperInteraction() const {
    return m_shopper_interaction;
}
void OAIPayoutRequest::setShopperInteraction(const QString &shopper_interaction) {
    m_shopper_interaction = shopper_interaction;
    m_shopper_interaction_isSet = true;
}

bool OAIPayoutRequest::is_shopper_interaction_Set() const{
    return m_shopper_interaction_isSet;
}

bool OAIPayoutRequest::is_shopper_interaction_Valid() const{
    return m_shopper_interaction_isValid;
}

OAIName OAIPayoutRequest::getShopperName() const {
    return m_shopper_name;
}
void OAIPayoutRequest::setShopperName(const OAIName &shopper_name) {
    m_shopper_name = shopper_name;
    m_shopper_name_isSet = true;
}

bool OAIPayoutRequest::is_shopper_name_Set() const{
    return m_shopper_name_isSet;
}

bool OAIPayoutRequest::is_shopper_name_Valid() const{
    return m_shopper_name_isValid;
}

QString OAIPayoutRequest::getShopperReference() const {
    return m_shopper_reference;
}
void OAIPayoutRequest::setShopperReference(const QString &shopper_reference) {
    m_shopper_reference = shopper_reference;
    m_shopper_reference_isSet = true;
}

bool OAIPayoutRequest::is_shopper_reference_Set() const{
    return m_shopper_reference_isSet;
}

bool OAIPayoutRequest::is_shopper_reference_Valid() const{
    return m_shopper_reference_isValid;
}

QString OAIPayoutRequest::getTelephoneNumber() const {
    return m_telephone_number;
}
void OAIPayoutRequest::setTelephoneNumber(const QString &telephone_number) {
    m_telephone_number = telephone_number;
    m_telephone_number_isSet = true;
}

bool OAIPayoutRequest::is_telephone_number_Set() const{
    return m_telephone_number_isSet;
}

bool OAIPayoutRequest::is_telephone_number_Valid() const{
    return m_telephone_number_isValid;
}

bool OAIPayoutRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_amount.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_billing_address.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_card.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_fraud_offset_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fund_source.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_merchant_account_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recurring.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_selected_recurring_detail_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shopper_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shopper_interaction_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shopper_name.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_shopper_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_telephone_number_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPayoutRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_amount_isValid && m_merchant_account_isValid && m_reference_isValid && true;
}

} // namespace OpenAPI
