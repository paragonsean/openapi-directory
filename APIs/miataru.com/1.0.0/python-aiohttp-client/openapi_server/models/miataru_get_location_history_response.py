# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.miataru_get_location_history_response_miataru_server_config import MiataruGetLocationHistoryResponseMiataruServerConfig
from openapi_server.models.miataru_location import MiataruLocation
from openapi_server import util


class MiataruGetLocationHistoryResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, miataru_location: List[MiataruLocation]=None, miataru_server_config: MiataruGetLocationHistoryResponseMiataruServerConfig=None):
        """MiataruGetLocationHistoryResponse - a model defined in OpenAPI

        :param miataru_location: The miataru_location of this MiataruGetLocationHistoryResponse.
        :param miataru_server_config: The miataru_server_config of this MiataruGetLocationHistoryResponse.
        """
        self.openapi_types = {
            'miataru_location': List[MiataruLocation],
            'miataru_server_config': MiataruGetLocationHistoryResponseMiataruServerConfig
        }

        self.attribute_map = {
            'miataru_location': 'MiataruLocation',
            'miataru_server_config': 'MiataruServerConfig'
        }

        self._miataru_location = miataru_location
        self._miataru_server_config = miataru_server_config

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MiataruGetLocationHistoryResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MiataruGetLocationHistoryResponse of this MiataruGetLocationHistoryResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def miataru_location(self):
        """Gets the miataru_location of this MiataruGetLocationHistoryResponse.

        holds all location information of a given device or is an empty array if device not found or no location information is stored.

        :return: The miataru_location of this MiataruGetLocationHistoryResponse.
        :rtype: List[MiataruLocation]
        """
        return self._miataru_location

    @miataru_location.setter
    def miataru_location(self, miataru_location):
        """Sets the miataru_location of this MiataruGetLocationHistoryResponse.

        holds all location information of a given device or is an empty array if device not found or no location information is stored.

        :param miataru_location: The miataru_location of this MiataruGetLocationHistoryResponse.
        :type miataru_location: List[MiataruLocation]
        """
        if miataru_location is None:
            raise ValueError("Invalid value for `miataru_location`, must not be `None`")

        self._miataru_location = miataru_location

    @property
    def miataru_server_config(self):
        """Gets the miataru_server_config of this MiataruGetLocationHistoryResponse.


        :return: The miataru_server_config of this MiataruGetLocationHistoryResponse.
        :rtype: MiataruGetLocationHistoryResponseMiataruServerConfig
        """
        return self._miataru_server_config

    @miataru_server_config.setter
    def miataru_server_config(self, miataru_server_config):
        """Sets the miataru_server_config of this MiataruGetLocationHistoryResponse.


        :param miataru_server_config: The miataru_server_config of this MiataruGetLocationHistoryResponse.
        :type miataru_server_config: MiataruGetLocationHistoryResponseMiataruServerConfig
        """
        if miataru_server_config is None:
            raise ValueError("Invalid value for `miataru_server_config`, must not be `None`")

        self._miataru_server_config = miataru_server_config
