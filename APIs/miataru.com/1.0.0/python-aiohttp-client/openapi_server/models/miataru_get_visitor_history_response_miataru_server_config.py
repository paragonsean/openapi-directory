# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class MiataruGetVisitorHistoryResponseMiataruServerConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, available_visitor_history: str=None, maximum_number_of_visitor_history: str=None):
        """MiataruGetVisitorHistoryResponseMiataruServerConfig - a model defined in OpenAPI

        :param available_visitor_history: The available_visitor_history of this MiataruGetVisitorHistoryResponseMiataruServerConfig.
        :param maximum_number_of_visitor_history: The maximum_number_of_visitor_history of this MiataruGetVisitorHistoryResponseMiataruServerConfig.
        """
        self.openapi_types = {
            'available_visitor_history': str,
            'maximum_number_of_visitor_history': str
        }

        self.attribute_map = {
            'available_visitor_history': 'AvailableVisitorHistory',
            'maximum_number_of_visitor_history': 'MaximumNumberOfVisitorHistory'
        }

        self._available_visitor_history = available_visitor_history
        self._maximum_number_of_visitor_history = maximum_number_of_visitor_history

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MiataruGetVisitorHistoryResponseMiataruServerConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MiataruGetVisitorHistoryResponse_MiataruServerConfig of this MiataruGetVisitorHistoryResponseMiataruServerConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def available_visitor_history(self):
        """Gets the available_visitor_history of this MiataruGetVisitorHistoryResponseMiataruServerConfig.

        the number of available visitor history entries for this device. If the client requested more Visitor Updates than there are available the server will return those available.

        :return: The available_visitor_history of this MiataruGetVisitorHistoryResponseMiataruServerConfig.
        :rtype: str
        """
        return self._available_visitor_history

    @available_visitor_history.setter
    def available_visitor_history(self, available_visitor_history):
        """Sets the available_visitor_history of this MiataruGetVisitorHistoryResponseMiataruServerConfig.

        the number of available visitor history entries for this device. If the client requested more Visitor Updates than there are available the server will return those available.

        :param available_visitor_history: The available_visitor_history of this MiataruGetVisitorHistoryResponseMiataruServerConfig.
        :type available_visitor_history: str
        """
        if available_visitor_history is None:
            raise ValueError("Invalid value for `available_visitor_history`, must not be `None`")

        self._available_visitor_history = available_visitor_history

    @property
    def maximum_number_of_visitor_history(self):
        """Gets the maximum_number_of_visitor_history of this MiataruGetVisitorHistoryResponseMiataruServerConfig.

        a server-side setting that controls up to how many Visitors the server is storing in the Visitor History before it removes the oldest one.

        :return: The maximum_number_of_visitor_history of this MiataruGetVisitorHistoryResponseMiataruServerConfig.
        :rtype: str
        """
        return self._maximum_number_of_visitor_history

    @maximum_number_of_visitor_history.setter
    def maximum_number_of_visitor_history(self, maximum_number_of_visitor_history):
        """Sets the maximum_number_of_visitor_history of this MiataruGetVisitorHistoryResponseMiataruServerConfig.

        a server-side setting that controls up to how many Visitors the server is storing in the Visitor History before it removes the oldest one.

        :param maximum_number_of_visitor_history: The maximum_number_of_visitor_history of this MiataruGetVisitorHistoryResponseMiataruServerConfig.
        :type maximum_number_of_visitor_history: str
        """
        if maximum_number_of_visitor_history is None:
            raise ValueError("Invalid value for `maximum_number_of_visitor_history`, must not be `None`")

        self._maximum_number_of_visitor_history = maximum_number_of_visitor_history
