# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class MiataruUpdateLocationRequestMiataruConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, enable_location_history: str='False', location_data_retention_time: str='30'):
        """MiataruUpdateLocationRequestMiataruConfig - a model defined in OpenAPI

        :param enable_location_history: The enable_location_history of this MiataruUpdateLocationRequestMiataruConfig.
        :param location_data_retention_time: The location_data_retention_time of this MiataruUpdateLocationRequestMiataruConfig.
        """
        self.openapi_types = {
            'enable_location_history': str,
            'location_data_retention_time': str
        }

        self.attribute_map = {
            'enable_location_history': 'EnableLocationHistory',
            'location_data_retention_time': 'LocationDataRetentionTime'
        }

        self._enable_location_history = enable_location_history
        self._location_data_retention_time = location_data_retention_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MiataruUpdateLocationRequestMiataruConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MiataruUpdateLocationRequest_MiataruConfig of this MiataruUpdateLocationRequestMiataruConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def enable_location_history(self):
        """Gets the enable_location_history of this MiataruUpdateLocationRequestMiataruConfig.

        If the client tells the server to store a location history the server automatically disables the pre-configured data time-out behavior that removes location data after a given amount of time. Nevertheless the user is limited to the server-side pre-configured amount of location history entries. This is either True or False.

        :return: The enable_location_history of this MiataruUpdateLocationRequestMiataruConfig.
        :rtype: str
        """
        return self._enable_location_history

    @enable_location_history.setter
    def enable_location_history(self, enable_location_history):
        """Sets the enable_location_history of this MiataruUpdateLocationRequestMiataruConfig.

        If the client tells the server to store a location history the server automatically disables the pre-configured data time-out behavior that removes location data after a given amount of time. Nevertheless the user is limited to the server-side pre-configured amount of location history entries. This is either True or False.

        :param enable_location_history: The enable_location_history of this MiataruUpdateLocationRequestMiataruConfig.
        :type enable_location_history: str
        """
        if enable_location_history is None:
            raise ValueError("Invalid value for `enable_location_history`, must not be `None`")

        self._enable_location_history = enable_location_history

    @property
    def location_data_retention_time(self):
        """Gets the location_data_retention_time of this MiataruUpdateLocationRequestMiataruConfig.

        The LocationDataRetentionTime is the amount of minutes the server will keep that Location Data before it is removed/deleted automatically.

        :return: The location_data_retention_time of this MiataruUpdateLocationRequestMiataruConfig.
        :rtype: str
        """
        return self._location_data_retention_time

    @location_data_retention_time.setter
    def location_data_retention_time(self, location_data_retention_time):
        """Sets the location_data_retention_time of this MiataruUpdateLocationRequestMiataruConfig.

        The LocationDataRetentionTime is the amount of minutes the server will keep that Location Data before it is removed/deleted automatically.

        :param location_data_retention_time: The location_data_retention_time of this MiataruUpdateLocationRequestMiataruConfig.
        :type location_data_retention_time: str
        """
        if location_data_retention_time is None:
            raise ValueError("Invalid value for `location_data_retention_time`, must not be `None`")

        self._location_data_retention_time = location_data_retention_time
