# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class MiataruLocation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, device: str='7b8e6e0ee5296db345162dc2ef652c1350761823', horizontal_accuracy: str='50', latitude: str='41.079351', longitude: str='-4.394531', timestamp: str='1441360863'):
        """MiataruLocation - a model defined in OpenAPI

        :param device: The device of this MiataruLocation.
        :param horizontal_accuracy: The horizontal_accuracy of this MiataruLocation.
        :param latitude: The latitude of this MiataruLocation.
        :param longitude: The longitude of this MiataruLocation.
        :param timestamp: The timestamp of this MiataruLocation.
        """
        self.openapi_types = {
            'device': str,
            'horizontal_accuracy': str,
            'latitude': str,
            'longitude': str,
            'timestamp': str
        }

        self.attribute_map = {
            'device': 'Device',
            'horizontal_accuracy': 'HorizontalAccuracy',
            'latitude': 'Latitude',
            'longitude': 'Longitude',
            'timestamp': 'Timestamp'
        }

        self._device = device
        self._horizontal_accuracy = horizontal_accuracy
        self._latitude = latitude
        self._longitude = longitude
        self._timestamp = timestamp

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MiataruLocation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MiataruLocation of this MiataruLocation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def device(self):
        """Gets the device of this MiataruLocation.

        the unique id of this device. This needs to be unique as it is the only piece of information directly pointing towards this one device. Generating a GUID per device is recommended.

        :return: The device of this MiataruLocation.
        :rtype: str
        """
        return self._device

    @device.setter
    def device(self, device):
        """Sets the device of this MiataruLocation.

        the unique id of this device. This needs to be unique as it is the only piece of information directly pointing towards this one device. Generating a GUID per device is recommended.

        :param device: The device of this MiataruLocation.
        :type device: str
        """
        if device is None:
            raise ValueError("Invalid value for `device`, must not be `None`")

        self._device = device

    @property
    def horizontal_accuracy(self):
        """Gets the horizontal_accuracy of this MiataruLocation.

        the accuracy of this location update in meters

        :return: The horizontal_accuracy of this MiataruLocation.
        :rtype: str
        """
        return self._horizontal_accuracy

    @horizontal_accuracy.setter
    def horizontal_accuracy(self, horizontal_accuracy):
        """Sets the horizontal_accuracy of this MiataruLocation.

        the accuracy of this location update in meters

        :param horizontal_accuracy: The horizontal_accuracy of this MiataruLocation.
        :type horizontal_accuracy: str
        """
        if horizontal_accuracy is None:
            raise ValueError("Invalid value for `horizontal_accuracy`, must not be `None`")

        self._horizontal_accuracy = horizontal_accuracy

    @property
    def latitude(self):
        """Gets the latitude of this MiataruLocation.

        latitude of the position that is reported

        :return: The latitude of this MiataruLocation.
        :rtype: str
        """
        return self._latitude

    @latitude.setter
    def latitude(self, latitude):
        """Sets the latitude of this MiataruLocation.

        latitude of the position that is reported

        :param latitude: The latitude of this MiataruLocation.
        :type latitude: str
        """
        if latitude is None:
            raise ValueError("Invalid value for `latitude`, must not be `None`")

        self._latitude = latitude

    @property
    def longitude(self):
        """Gets the longitude of this MiataruLocation.

        longitude of the position that is reported

        :return: The longitude of this MiataruLocation.
        :rtype: str
        """
        return self._longitude

    @longitude.setter
    def longitude(self, longitude):
        """Sets the longitude of this MiataruLocation.

        longitude of the position that is reported

        :param longitude: The longitude of this MiataruLocation.
        :type longitude: str
        """
        if longitude is None:
            raise ValueError("Invalid value for `longitude`, must not be `None`")

        self._longitude = longitude

    @property
    def timestamp(self):
        """Gets the timestamp of this MiataruLocation.

        the javascript timestamp of this location update

        :return: The timestamp of this MiataruLocation.
        :rtype: str
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this MiataruLocation.

        the javascript timestamp of this location update

        :param timestamp: The timestamp of this MiataruLocation.
        :type timestamp: str
        """
        if timestamp is None:
            raise ValueError("Invalid value for `timestamp`, must not be `None`")

        self._timestamp = timestamp
