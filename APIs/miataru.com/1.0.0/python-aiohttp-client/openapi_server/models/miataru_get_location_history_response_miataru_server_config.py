# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class MiataruGetLocationHistoryResponseMiataruServerConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, available_device_location_updates: str=None, maximum_number_of_location_updates: str=None):
        """MiataruGetLocationHistoryResponseMiataruServerConfig - a model defined in OpenAPI

        :param available_device_location_updates: The available_device_location_updates of this MiataruGetLocationHistoryResponseMiataruServerConfig.
        :param maximum_number_of_location_updates: The maximum_number_of_location_updates of this MiataruGetLocationHistoryResponseMiataruServerConfig.
        """
        self.openapi_types = {
            'available_device_location_updates': str,
            'maximum_number_of_location_updates': str
        }

        self.attribute_map = {
            'available_device_location_updates': 'AvailableDeviceLocationUpdates',
            'maximum_number_of_location_updates': 'MaximumNumberOfLocationUpdates'
        }

        self._available_device_location_updates = available_device_location_updates
        self._maximum_number_of_location_updates = maximum_number_of_location_updates

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MiataruGetLocationHistoryResponseMiataruServerConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MiataruGetLocationHistoryResponse_MiataruServerConfig of this MiataruGetLocationHistoryResponseMiataruServerConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def available_device_location_updates(self):
        """Gets the available_device_location_updates of this MiataruGetLocationHistoryResponseMiataruServerConfig.

        the number of locations stored for this particular device

        :return: The available_device_location_updates of this MiataruGetLocationHistoryResponseMiataruServerConfig.
        :rtype: str
        """
        return self._available_device_location_updates

    @available_device_location_updates.setter
    def available_device_location_updates(self, available_device_location_updates):
        """Sets the available_device_location_updates of this MiataruGetLocationHistoryResponseMiataruServerConfig.

        the number of locations stored for this particular device

        :param available_device_location_updates: The available_device_location_updates of this MiataruGetLocationHistoryResponseMiataruServerConfig.
        :type available_device_location_updates: str
        """
        if available_device_location_updates is None:
            raise ValueError("Invalid value for `available_device_location_updates`, must not be `None`")

        self._available_device_location_updates = available_device_location_updates

    @property
    def maximum_number_of_location_updates(self):
        """Gets the maximum_number_of_location_updates of this MiataruGetLocationHistoryResponseMiataruServerConfig.

        the amount of locations the server is storing per device at maximum before it will remove the oldest one (FiFo)

        :return: The maximum_number_of_location_updates of this MiataruGetLocationHistoryResponseMiataruServerConfig.
        :rtype: str
        """
        return self._maximum_number_of_location_updates

    @maximum_number_of_location_updates.setter
    def maximum_number_of_location_updates(self, maximum_number_of_location_updates):
        """Sets the maximum_number_of_location_updates of this MiataruGetLocationHistoryResponseMiataruServerConfig.

        the amount of locations the server is storing per device at maximum before it will remove the oldest one (FiFo)

        :param maximum_number_of_location_updates: The maximum_number_of_location_updates of this MiataruGetLocationHistoryResponseMiataruServerConfig.
        :type maximum_number_of_location_updates: str
        """
        if maximum_number_of_location_updates is None:
            raise ValueError("Invalid value for `maximum_number_of_location_updates`, must not be `None`")

        self._maximum_number_of_location_updates = maximum_number_of_location_updates
