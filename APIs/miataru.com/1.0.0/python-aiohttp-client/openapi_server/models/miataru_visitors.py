# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class MiataruVisitors(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, device_id: str=None, time_stamp: str=None):
        """MiataruVisitors - a model defined in OpenAPI

        :param device_id: The device_id of this MiataruVisitors.
        :param time_stamp: The time_stamp of this MiataruVisitors.
        """
        self.openapi_types = {
            'device_id': str,
            'time_stamp': str
        }

        self.attribute_map = {
            'device_id': 'DeviceID',
            'time_stamp': 'TimeStamp'
        }

        self._device_id = device_id
        self._time_stamp = time_stamp

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MiataruVisitors':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MiataruVisitors of this MiataruVisitors.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def device_id(self):
        """Gets the device_id of this MiataruVisitors.

        the device id of the visiting device. If this is an empty string the deviceID is unknown/was not reported.

        :return: The device_id of this MiataruVisitors.
        :rtype: str
        """
        return self._device_id

    @device_id.setter
    def device_id(self, device_id):
        """Sets the device_id of this MiataruVisitors.

        the device id of the visiting device. If this is an empty string the deviceID is unknown/was not reported.

        :param device_id: The device_id of this MiataruVisitors.
        :type device_id: str
        """
        if device_id is None:
            raise ValueError("Invalid value for `device_id`, must not be `None`")

        self._device_id = device_id

    @property
    def time_stamp(self):
        """Gets the time_stamp of this MiataruVisitors.

        the javascript timestamp of the visit

        :return: The time_stamp of this MiataruVisitors.
        :rtype: str
        """
        return self._time_stamp

    @time_stamp.setter
    def time_stamp(self, time_stamp):
        """Sets the time_stamp of this MiataruVisitors.

        the javascript timestamp of the visit

        :param time_stamp: The time_stamp of this MiataruVisitors.
        :type time_stamp: str
        """
        if time_stamp is None:
            raise ValueError("Invalid value for `time_stamp`, must not be `None`")

        self._time_stamp = time_stamp
