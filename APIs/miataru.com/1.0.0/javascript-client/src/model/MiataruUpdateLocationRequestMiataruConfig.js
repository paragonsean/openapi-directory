/**
 * Miataru
 * The Miataru API is very simple and straight forward. Generally you're posting (HTTP POST) a JSON formatted request to a service method locations and you get back a JSON formatted answer. Please take into consideration that this has the request-for-comment status and that it can change while there's work done on client and server applications. Versioning therefore is done by prepending the version number - /v1/ for version 1 - to the method call.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@miataru.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The MiataruUpdateLocationRequestMiataruConfig model module.
 * @module model/MiataruUpdateLocationRequestMiataruConfig
 * @version 1.0.0
 */
class MiataruUpdateLocationRequestMiataruConfig {
    /**
     * Constructs a new <code>MiataruUpdateLocationRequestMiataruConfig</code>.
     * the configuration for this request.
     * @alias module:model/MiataruUpdateLocationRequestMiataruConfig
     * @param enableLocationHistory {String} If the client tells the server to store a location history the server automatically disables the pre-configured data time-out behavior that removes location data after a given amount of time. Nevertheless the user is limited to the server-side pre-configured amount of location history entries. This is either True or False.
     * @param locationDataRetentionTime {String} The LocationDataRetentionTime is the amount of minutes the server will keep that Location Data before it is removed/deleted automatically.
     */
    constructor(enableLocationHistory, locationDataRetentionTime) { 
        
        MiataruUpdateLocationRequestMiataruConfig.initialize(this, enableLocationHistory, locationDataRetentionTime);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, enableLocationHistory, locationDataRetentionTime) { 
        obj['EnableLocationHistory'] = enableLocationHistory || 'False';
        obj['LocationDataRetentionTime'] = locationDataRetentionTime || '30';
    }

    /**
     * Constructs a <code>MiataruUpdateLocationRequestMiataruConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MiataruUpdateLocationRequestMiataruConfig} obj Optional instance to populate.
     * @return {module:model/MiataruUpdateLocationRequestMiataruConfig} The populated <code>MiataruUpdateLocationRequestMiataruConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MiataruUpdateLocationRequestMiataruConfig();

            if (data.hasOwnProperty('EnableLocationHistory')) {
                obj['EnableLocationHistory'] = ApiClient.convertToType(data['EnableLocationHistory'], 'String');
            }
            if (data.hasOwnProperty('LocationDataRetentionTime')) {
                obj['LocationDataRetentionTime'] = ApiClient.convertToType(data['LocationDataRetentionTime'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MiataruUpdateLocationRequestMiataruConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MiataruUpdateLocationRequestMiataruConfig</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of MiataruUpdateLocationRequestMiataruConfig.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['EnableLocationHistory'] && !(typeof data['EnableLocationHistory'] === 'string' || data['EnableLocationHistory'] instanceof String)) {
            throw new Error("Expected the field `EnableLocationHistory` to be a primitive type in the JSON string but got " + data['EnableLocationHistory']);
        }
        // ensure the json data is a string
        if (data['LocationDataRetentionTime'] && !(typeof data['LocationDataRetentionTime'] === 'string' || data['LocationDataRetentionTime'] instanceof String)) {
            throw new Error("Expected the field `LocationDataRetentionTime` to be a primitive type in the JSON string but got " + data['LocationDataRetentionTime']);
        }

        return true;
    }


}

MiataruUpdateLocationRequestMiataruConfig.RequiredProperties = ["EnableLocationHistory", "LocationDataRetentionTime"];

/**
 * If the client tells the server to store a location history the server automatically disables the pre-configured data time-out behavior that removes location data after a given amount of time. Nevertheless the user is limited to the server-side pre-configured amount of location history entries. This is either True or False.
 * @member {String} EnableLocationHistory
 * @default 'False'
 */
MiataruUpdateLocationRequestMiataruConfig.prototype['EnableLocationHistory'] = 'False';

/**
 * The LocationDataRetentionTime is the amount of minutes the server will keep that Location Data before it is removed/deleted automatically.
 * @member {String} LocationDataRetentionTime
 * @default '30'
 */
MiataruUpdateLocationRequestMiataruConfig.prototype['LocationDataRetentionTime'] = '30';






export default MiataruUpdateLocationRequestMiataruConfig;

