/**
 * Miataru
 * The Miataru API is very simple and straight forward. Generally you're posting (HTTP POST) a JSON formatted request to a service method locations and you get back a JSON formatted answer. Please take into consideration that this has the request-for-comment status and that it can change while there's work done on client and server applications. Versioning therefore is done by prepending the version number - /v1/ for version 1 - to the method call.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@miataru.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The MiataruLocation model module.
 * @module model/MiataruLocation
 * @version 1.0.0
 */
class MiataruLocation {
    /**
     * Constructs a new <code>MiataruLocation</code>.
     * @alias module:model/MiataruLocation
     * @param device {String} the unique id of this device. This needs to be unique as it is the only piece of information directly pointing towards this one device. Generating a GUID per device is recommended.
     * @param horizontalAccuracy {String} the accuracy of this location update in meters
     * @param latitude {String} latitude of the position that is reported
     * @param longitude {String} longitude of the position that is reported
     * @param timestamp {String} the javascript timestamp of this location update
     */
    constructor(device, horizontalAccuracy, latitude, longitude, timestamp) { 
        
        MiataruLocation.initialize(this, device, horizontalAccuracy, latitude, longitude, timestamp);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, device, horizontalAccuracy, latitude, longitude, timestamp) { 
        obj['Device'] = device || '7b8e6e0ee5296db345162dc2ef652c1350761823';
        obj['HorizontalAccuracy'] = horizontalAccuracy || '50';
        obj['Latitude'] = latitude || '41.079351';
        obj['Longitude'] = longitude || '-4.394531';
        obj['Timestamp'] = timestamp || '1441360863';
    }

    /**
     * Constructs a <code>MiataruLocation</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MiataruLocation} obj Optional instance to populate.
     * @return {module:model/MiataruLocation} The populated <code>MiataruLocation</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MiataruLocation();

            if (data.hasOwnProperty('Device')) {
                obj['Device'] = ApiClient.convertToType(data['Device'], 'String');
            }
            if (data.hasOwnProperty('HorizontalAccuracy')) {
                obj['HorizontalAccuracy'] = ApiClient.convertToType(data['HorizontalAccuracy'], 'String');
            }
            if (data.hasOwnProperty('Latitude')) {
                obj['Latitude'] = ApiClient.convertToType(data['Latitude'], 'String');
            }
            if (data.hasOwnProperty('Longitude')) {
                obj['Longitude'] = ApiClient.convertToType(data['Longitude'], 'String');
            }
            if (data.hasOwnProperty('Timestamp')) {
                obj['Timestamp'] = ApiClient.convertToType(data['Timestamp'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MiataruLocation</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MiataruLocation</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of MiataruLocation.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['Device'] && !(typeof data['Device'] === 'string' || data['Device'] instanceof String)) {
            throw new Error("Expected the field `Device` to be a primitive type in the JSON string but got " + data['Device']);
        }
        // ensure the json data is a string
        if (data['HorizontalAccuracy'] && !(typeof data['HorizontalAccuracy'] === 'string' || data['HorizontalAccuracy'] instanceof String)) {
            throw new Error("Expected the field `HorizontalAccuracy` to be a primitive type in the JSON string but got " + data['HorizontalAccuracy']);
        }
        // ensure the json data is a string
        if (data['Latitude'] && !(typeof data['Latitude'] === 'string' || data['Latitude'] instanceof String)) {
            throw new Error("Expected the field `Latitude` to be a primitive type in the JSON string but got " + data['Latitude']);
        }
        // ensure the json data is a string
        if (data['Longitude'] && !(typeof data['Longitude'] === 'string' || data['Longitude'] instanceof String)) {
            throw new Error("Expected the field `Longitude` to be a primitive type in the JSON string but got " + data['Longitude']);
        }
        // ensure the json data is a string
        if (data['Timestamp'] && !(typeof data['Timestamp'] === 'string' || data['Timestamp'] instanceof String)) {
            throw new Error("Expected the field `Timestamp` to be a primitive type in the JSON string but got " + data['Timestamp']);
        }

        return true;
    }


}

MiataruLocation.RequiredProperties = ["Device", "HorizontalAccuracy", "Latitude", "Longitude", "Timestamp"];

/**
 * the unique id of this device. This needs to be unique as it is the only piece of information directly pointing towards this one device. Generating a GUID per device is recommended.
 * @member {String} Device
 * @default '7b8e6e0ee5296db345162dc2ef652c1350761823'
 */
MiataruLocation.prototype['Device'] = '7b8e6e0ee5296db345162dc2ef652c1350761823';

/**
 * the accuracy of this location update in meters
 * @member {String} HorizontalAccuracy
 * @default '50'
 */
MiataruLocation.prototype['HorizontalAccuracy'] = '50';

/**
 * latitude of the position that is reported
 * @member {String} Latitude
 * @default '41.079351'
 */
MiataruLocation.prototype['Latitude'] = '41.079351';

/**
 * longitude of the position that is reported
 * @member {String} Longitude
 * @default '-4.394531'
 */
MiataruLocation.prototype['Longitude'] = '-4.394531';

/**
 * the javascript timestamp of this location update
 * @member {String} Timestamp
 * @default '1441360863'
 */
MiataruLocation.prototype['Timestamp'] = '1441360863';






export default MiataruLocation;

