/**
 * Miataru
 * The Miataru API is very simple and straight forward. Generally you're posting (HTTP POST) a JSON formatted request to a service method locations and you get back a JSON formatted answer. Please take into consideration that this has the request-for-comment status and that it can change while there's work done on client and server applications. Versioning therefore is done by prepending the version number - /v1/ for version 1 - to the method call.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@miataru.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The MiataruGetVisitorHistoryResponseMiataruServerConfig model module.
 * @module model/MiataruGetVisitorHistoryResponseMiataruServerConfig
 * @version 1.0.0
 */
class MiataruGetVisitorHistoryResponseMiataruServerConfig {
    /**
     * Constructs a new <code>MiataruGetVisitorHistoryResponseMiataruServerConfig</code>.
     * holds information about the server side settings of the visitor history and about the available device related visitor history.
     * @alias module:model/MiataruGetVisitorHistoryResponseMiataruServerConfig
     * @param availableVisitorHistory {String} the number of available visitor history entries for this device. If the client requested more Visitor Updates than there are available the server will return those available.
     * @param maximumNumberOfVisitorHistory {String} a server-side setting that controls up to how many Visitors the server is storing in the Visitor History before it removes the oldest one.
     */
    constructor(availableVisitorHistory, maximumNumberOfVisitorHistory) { 
        
        MiataruGetVisitorHistoryResponseMiataruServerConfig.initialize(this, availableVisitorHistory, maximumNumberOfVisitorHistory);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, availableVisitorHistory, maximumNumberOfVisitorHistory) { 
        obj['AvailableVisitorHistory'] = availableVisitorHistory;
        obj['MaximumNumberOfVisitorHistory'] = maximumNumberOfVisitorHistory;
    }

    /**
     * Constructs a <code>MiataruGetVisitorHistoryResponseMiataruServerConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MiataruGetVisitorHistoryResponseMiataruServerConfig} obj Optional instance to populate.
     * @return {module:model/MiataruGetVisitorHistoryResponseMiataruServerConfig} The populated <code>MiataruGetVisitorHistoryResponseMiataruServerConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MiataruGetVisitorHistoryResponseMiataruServerConfig();

            if (data.hasOwnProperty('AvailableVisitorHistory')) {
                obj['AvailableVisitorHistory'] = ApiClient.convertToType(data['AvailableVisitorHistory'], 'String');
            }
            if (data.hasOwnProperty('MaximumNumberOfVisitorHistory')) {
                obj['MaximumNumberOfVisitorHistory'] = ApiClient.convertToType(data['MaximumNumberOfVisitorHistory'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MiataruGetVisitorHistoryResponseMiataruServerConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MiataruGetVisitorHistoryResponseMiataruServerConfig</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of MiataruGetVisitorHistoryResponseMiataruServerConfig.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['AvailableVisitorHistory'] && !(typeof data['AvailableVisitorHistory'] === 'string' || data['AvailableVisitorHistory'] instanceof String)) {
            throw new Error("Expected the field `AvailableVisitorHistory` to be a primitive type in the JSON string but got " + data['AvailableVisitorHistory']);
        }
        // ensure the json data is a string
        if (data['MaximumNumberOfVisitorHistory'] && !(typeof data['MaximumNumberOfVisitorHistory'] === 'string' || data['MaximumNumberOfVisitorHistory'] instanceof String)) {
            throw new Error("Expected the field `MaximumNumberOfVisitorHistory` to be a primitive type in the JSON string but got " + data['MaximumNumberOfVisitorHistory']);
        }

        return true;
    }


}

MiataruGetVisitorHistoryResponseMiataruServerConfig.RequiredProperties = ["AvailableVisitorHistory", "MaximumNumberOfVisitorHistory"];

/**
 * the number of available visitor history entries for this device. If the client requested more Visitor Updates than there are available the server will return those available.
 * @member {String} AvailableVisitorHistory
 */
MiataruGetVisitorHistoryResponseMiataruServerConfig.prototype['AvailableVisitorHistory'] = undefined;

/**
 * a server-side setting that controls up to how many Visitors the server is storing in the Visitor History before it removes the oldest one.
 * @member {String} MaximumNumberOfVisitorHistory
 */
MiataruGetVisitorHistoryResponseMiataruServerConfig.prototype['MaximumNumberOfVisitorHistory'] = undefined;






export default MiataruGetVisitorHistoryResponseMiataruServerConfig;

