/**
 * Miataru
 * The Miataru API is very simple and straight forward. Generally you're posting (HTTP POST) a JSON formatted request to a service method locations and you get back a JSON formatted answer. Please take into consideration that this has the request-for-comment status and that it can change while there's work done on client and server applications. Versioning therefore is done by prepending the version number - /v1/ for version 1 - to the method call.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@miataru.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMiataruGetLocationGeoJSONResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMiataruGetLocationGeoJSONResponse::OAIMiataruGetLocationGeoJSONResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMiataruGetLocationGeoJSONResponse::OAIMiataruGetLocationGeoJSONResponse() {
    this->initializeModel();
}

OAIMiataruGetLocationGeoJSONResponse::~OAIMiataruGetLocationGeoJSONResponse() {}

void OAIMiataruGetLocationGeoJSONResponse::initializeModel() {

    m_geometry_isSet = false;
    m_geometry_isValid = false;

    m_properties_isSet = false;
    m_properties_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIMiataruGetLocationGeoJSONResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMiataruGetLocationGeoJSONResponse::fromJsonObject(QJsonObject json) {

    m_geometry_isValid = ::OpenAPI::fromJsonValue(m_geometry, json[QString("geometry")]);
    m_geometry_isSet = !json[QString("geometry")].isNull() && m_geometry_isValid;

    m_properties_isValid = ::OpenAPI::fromJsonValue(m_properties, json[QString("properties")]);
    m_properties_isSet = !json[QString("properties")].isNull() && m_properties_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIMiataruGetLocationGeoJSONResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMiataruGetLocationGeoJSONResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_geometry.isSet()) {
        obj.insert(QString("geometry"), ::OpenAPI::toJsonValue(m_geometry));
    }
    if (m_properties.isSet()) {
        obj.insert(QString("properties"), ::OpenAPI::toJsonValue(m_properties));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

OAIMiataruGetLocationGeoJSONResponse_geometry OAIMiataruGetLocationGeoJSONResponse::getGeometry() const {
    return m_geometry;
}
void OAIMiataruGetLocationGeoJSONResponse::setGeometry(const OAIMiataruGetLocationGeoJSONResponse_geometry &geometry) {
    m_geometry = geometry;
    m_geometry_isSet = true;
}

bool OAIMiataruGetLocationGeoJSONResponse::is_geometry_Set() const{
    return m_geometry_isSet;
}

bool OAIMiataruGetLocationGeoJSONResponse::is_geometry_Valid() const{
    return m_geometry_isValid;
}

OAIMiataruGetLocationGeoJSONResponse_properties OAIMiataruGetLocationGeoJSONResponse::getProperties() const {
    return m_properties;
}
void OAIMiataruGetLocationGeoJSONResponse::setProperties(const OAIMiataruGetLocationGeoJSONResponse_properties &properties) {
    m_properties = properties;
    m_properties_isSet = true;
}

bool OAIMiataruGetLocationGeoJSONResponse::is_properties_Set() const{
    return m_properties_isSet;
}

bool OAIMiataruGetLocationGeoJSONResponse::is_properties_Valid() const{
    return m_properties_isValid;
}

QString OAIMiataruGetLocationGeoJSONResponse::getType() const {
    return m_type;
}
void OAIMiataruGetLocationGeoJSONResponse::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIMiataruGetLocationGeoJSONResponse::is_type_Set() const{
    return m_type_isSet;
}

bool OAIMiataruGetLocationGeoJSONResponse::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIMiataruGetLocationGeoJSONResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_geometry.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMiataruGetLocationGeoJSONResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_geometry_isValid && m_properties_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
