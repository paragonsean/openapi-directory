/**
 * Miataru
 * The Miataru API is very simple and straight forward. Generally you're posting (HTTP POST) a JSON formatted request to a service method locations and you get back a JSON formatted answer. Please take into consideration that this has the request-for-comment status and that it can change while there's work done on client and server applications. Versioning therefore is done by prepending the version number - /v1/ for version 1 - to the method call.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@miataru.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMiataruUpdateLocationRequest_MiataruConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMiataruUpdateLocationRequest_MiataruConfig::OAIMiataruUpdateLocationRequest_MiataruConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMiataruUpdateLocationRequest_MiataruConfig::OAIMiataruUpdateLocationRequest_MiataruConfig() {
    this->initializeModel();
}

OAIMiataruUpdateLocationRequest_MiataruConfig::~OAIMiataruUpdateLocationRequest_MiataruConfig() {}

void OAIMiataruUpdateLocationRequest_MiataruConfig::initializeModel() {

    m_enable_location_history_isSet = false;
    m_enable_location_history_isValid = false;

    m_location_data_retention_time_isSet = false;
    m_location_data_retention_time_isValid = false;
}

void OAIMiataruUpdateLocationRequest_MiataruConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMiataruUpdateLocationRequest_MiataruConfig::fromJsonObject(QJsonObject json) {

    m_enable_location_history_isValid = ::OpenAPI::fromJsonValue(m_enable_location_history, json[QString("EnableLocationHistory")]);
    m_enable_location_history_isSet = !json[QString("EnableLocationHistory")].isNull() && m_enable_location_history_isValid;

    m_location_data_retention_time_isValid = ::OpenAPI::fromJsonValue(m_location_data_retention_time, json[QString("LocationDataRetentionTime")]);
    m_location_data_retention_time_isSet = !json[QString("LocationDataRetentionTime")].isNull() && m_location_data_retention_time_isValid;
}

QString OAIMiataruUpdateLocationRequest_MiataruConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMiataruUpdateLocationRequest_MiataruConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_enable_location_history_isSet) {
        obj.insert(QString("EnableLocationHistory"), ::OpenAPI::toJsonValue(m_enable_location_history));
    }
    if (m_location_data_retention_time_isSet) {
        obj.insert(QString("LocationDataRetentionTime"), ::OpenAPI::toJsonValue(m_location_data_retention_time));
    }
    return obj;
}

QString OAIMiataruUpdateLocationRequest_MiataruConfig::getEnableLocationHistory() const {
    return m_enable_location_history;
}
void OAIMiataruUpdateLocationRequest_MiataruConfig::setEnableLocationHistory(const QString &enable_location_history) {
    m_enable_location_history = enable_location_history;
    m_enable_location_history_isSet = true;
}

bool OAIMiataruUpdateLocationRequest_MiataruConfig::is_enable_location_history_Set() const{
    return m_enable_location_history_isSet;
}

bool OAIMiataruUpdateLocationRequest_MiataruConfig::is_enable_location_history_Valid() const{
    return m_enable_location_history_isValid;
}

QString OAIMiataruUpdateLocationRequest_MiataruConfig::getLocationDataRetentionTime() const {
    return m_location_data_retention_time;
}
void OAIMiataruUpdateLocationRequest_MiataruConfig::setLocationDataRetentionTime(const QString &location_data_retention_time) {
    m_location_data_retention_time = location_data_retention_time;
    m_location_data_retention_time_isSet = true;
}

bool OAIMiataruUpdateLocationRequest_MiataruConfig::is_location_data_retention_time_Set() const{
    return m_location_data_retention_time_isSet;
}

bool OAIMiataruUpdateLocationRequest_MiataruConfig::is_location_data_retention_time_Valid() const{
    return m_location_data_retention_time_isValid;
}

bool OAIMiataruUpdateLocationRequest_MiataruConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_enable_location_history_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_data_retention_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMiataruUpdateLocationRequest_MiataruConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_enable_location_history_isValid && m_location_data_retention_time_isValid && true;
}

} // namespace OpenAPI
