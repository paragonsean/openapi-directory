/**
 * Miataru
 * The Miataru API is very simple and straight forward. Generally you're posting (HTTP POST) a JSON formatted request to a service method locations and you get back a JSON formatted answer. Please take into consideration that this has the request-for-comment status and that it can change while there's work done on client and server applications. Versioning therefore is done by prepending the version number - /v1/ for version 1 - to the method call.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@miataru.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMiataruLocation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMiataruLocation::OAIMiataruLocation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMiataruLocation::OAIMiataruLocation() {
    this->initializeModel();
}

OAIMiataruLocation::~OAIMiataruLocation() {}

void OAIMiataruLocation::initializeModel() {

    m_device_isSet = false;
    m_device_isValid = false;

    m_horizontal_accuracy_isSet = false;
    m_horizontal_accuracy_isValid = false;

    m_latitude_isSet = false;
    m_latitude_isValid = false;

    m_longitude_isSet = false;
    m_longitude_isValid = false;

    m_timestamp_isSet = false;
    m_timestamp_isValid = false;
}

void OAIMiataruLocation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMiataruLocation::fromJsonObject(QJsonObject json) {

    m_device_isValid = ::OpenAPI::fromJsonValue(m_device, json[QString("Device")]);
    m_device_isSet = !json[QString("Device")].isNull() && m_device_isValid;

    m_horizontal_accuracy_isValid = ::OpenAPI::fromJsonValue(m_horizontal_accuracy, json[QString("HorizontalAccuracy")]);
    m_horizontal_accuracy_isSet = !json[QString("HorizontalAccuracy")].isNull() && m_horizontal_accuracy_isValid;

    m_latitude_isValid = ::OpenAPI::fromJsonValue(m_latitude, json[QString("Latitude")]);
    m_latitude_isSet = !json[QString("Latitude")].isNull() && m_latitude_isValid;

    m_longitude_isValid = ::OpenAPI::fromJsonValue(m_longitude, json[QString("Longitude")]);
    m_longitude_isSet = !json[QString("Longitude")].isNull() && m_longitude_isValid;

    m_timestamp_isValid = ::OpenAPI::fromJsonValue(m_timestamp, json[QString("Timestamp")]);
    m_timestamp_isSet = !json[QString("Timestamp")].isNull() && m_timestamp_isValid;
}

QString OAIMiataruLocation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMiataruLocation::asJsonObject() const {
    QJsonObject obj;
    if (m_device_isSet) {
        obj.insert(QString("Device"), ::OpenAPI::toJsonValue(m_device));
    }
    if (m_horizontal_accuracy_isSet) {
        obj.insert(QString("HorizontalAccuracy"), ::OpenAPI::toJsonValue(m_horizontal_accuracy));
    }
    if (m_latitude_isSet) {
        obj.insert(QString("Latitude"), ::OpenAPI::toJsonValue(m_latitude));
    }
    if (m_longitude_isSet) {
        obj.insert(QString("Longitude"), ::OpenAPI::toJsonValue(m_longitude));
    }
    if (m_timestamp_isSet) {
        obj.insert(QString("Timestamp"), ::OpenAPI::toJsonValue(m_timestamp));
    }
    return obj;
}

QString OAIMiataruLocation::getDevice() const {
    return m_device;
}
void OAIMiataruLocation::setDevice(const QString &device) {
    m_device = device;
    m_device_isSet = true;
}

bool OAIMiataruLocation::is_device_Set() const{
    return m_device_isSet;
}

bool OAIMiataruLocation::is_device_Valid() const{
    return m_device_isValid;
}

QString OAIMiataruLocation::getHorizontalAccuracy() const {
    return m_horizontal_accuracy;
}
void OAIMiataruLocation::setHorizontalAccuracy(const QString &horizontal_accuracy) {
    m_horizontal_accuracy = horizontal_accuracy;
    m_horizontal_accuracy_isSet = true;
}

bool OAIMiataruLocation::is_horizontal_accuracy_Set() const{
    return m_horizontal_accuracy_isSet;
}

bool OAIMiataruLocation::is_horizontal_accuracy_Valid() const{
    return m_horizontal_accuracy_isValid;
}

QString OAIMiataruLocation::getLatitude() const {
    return m_latitude;
}
void OAIMiataruLocation::setLatitude(const QString &latitude) {
    m_latitude = latitude;
    m_latitude_isSet = true;
}

bool OAIMiataruLocation::is_latitude_Set() const{
    return m_latitude_isSet;
}

bool OAIMiataruLocation::is_latitude_Valid() const{
    return m_latitude_isValid;
}

QString OAIMiataruLocation::getLongitude() const {
    return m_longitude;
}
void OAIMiataruLocation::setLongitude(const QString &longitude) {
    m_longitude = longitude;
    m_longitude_isSet = true;
}

bool OAIMiataruLocation::is_longitude_Set() const{
    return m_longitude_isSet;
}

bool OAIMiataruLocation::is_longitude_Valid() const{
    return m_longitude_isValid;
}

QString OAIMiataruLocation::getTimestamp() const {
    return m_timestamp;
}
void OAIMiataruLocation::setTimestamp(const QString &timestamp) {
    m_timestamp = timestamp;
    m_timestamp_isSet = true;
}

bool OAIMiataruLocation::is_timestamp_Set() const{
    return m_timestamp_isSet;
}

bool OAIMiataruLocation::is_timestamp_Valid() const{
    return m_timestamp_isValid;
}

bool OAIMiataruLocation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_device_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_horizontal_accuracy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_latitude_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_longitude_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMiataruLocation::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_device_isValid && m_horizontal_accuracy_isValid && m_latitude_isValid && m_longitude_isValid && m_timestamp_isValid && true;
}

} // namespace OpenAPI
