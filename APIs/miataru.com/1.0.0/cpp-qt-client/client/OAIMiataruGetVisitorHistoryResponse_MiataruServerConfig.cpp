/**
 * Miataru
 * The Miataru API is very simple and straight forward. Generally you're posting (HTTP POST) a JSON formatted request to a service method locations and you get back a JSON formatted answer. Please take into consideration that this has the request-for-comment status and that it can change while there's work done on client and server applications. Versioning therefore is done by prepending the version number - /v1/ for version 1 - to the method call.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@miataru.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMiataruGetVisitorHistoryResponse_MiataruServerConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMiataruGetVisitorHistoryResponse_MiataruServerConfig::OAIMiataruGetVisitorHistoryResponse_MiataruServerConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMiataruGetVisitorHistoryResponse_MiataruServerConfig::OAIMiataruGetVisitorHistoryResponse_MiataruServerConfig() {
    this->initializeModel();
}

OAIMiataruGetVisitorHistoryResponse_MiataruServerConfig::~OAIMiataruGetVisitorHistoryResponse_MiataruServerConfig() {}

void OAIMiataruGetVisitorHistoryResponse_MiataruServerConfig::initializeModel() {

    m_available_visitor_history_isSet = false;
    m_available_visitor_history_isValid = false;

    m_maximum_number_of_visitor_history_isSet = false;
    m_maximum_number_of_visitor_history_isValid = false;
}

void OAIMiataruGetVisitorHistoryResponse_MiataruServerConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMiataruGetVisitorHistoryResponse_MiataruServerConfig::fromJsonObject(QJsonObject json) {

    m_available_visitor_history_isValid = ::OpenAPI::fromJsonValue(m_available_visitor_history, json[QString("AvailableVisitorHistory")]);
    m_available_visitor_history_isSet = !json[QString("AvailableVisitorHistory")].isNull() && m_available_visitor_history_isValid;

    m_maximum_number_of_visitor_history_isValid = ::OpenAPI::fromJsonValue(m_maximum_number_of_visitor_history, json[QString("MaximumNumberOfVisitorHistory")]);
    m_maximum_number_of_visitor_history_isSet = !json[QString("MaximumNumberOfVisitorHistory")].isNull() && m_maximum_number_of_visitor_history_isValid;
}

QString OAIMiataruGetVisitorHistoryResponse_MiataruServerConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMiataruGetVisitorHistoryResponse_MiataruServerConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_available_visitor_history_isSet) {
        obj.insert(QString("AvailableVisitorHistory"), ::OpenAPI::toJsonValue(m_available_visitor_history));
    }
    if (m_maximum_number_of_visitor_history_isSet) {
        obj.insert(QString("MaximumNumberOfVisitorHistory"), ::OpenAPI::toJsonValue(m_maximum_number_of_visitor_history));
    }
    return obj;
}

QString OAIMiataruGetVisitorHistoryResponse_MiataruServerConfig::getAvailableVisitorHistory() const {
    return m_available_visitor_history;
}
void OAIMiataruGetVisitorHistoryResponse_MiataruServerConfig::setAvailableVisitorHistory(const QString &available_visitor_history) {
    m_available_visitor_history = available_visitor_history;
    m_available_visitor_history_isSet = true;
}

bool OAIMiataruGetVisitorHistoryResponse_MiataruServerConfig::is_available_visitor_history_Set() const{
    return m_available_visitor_history_isSet;
}

bool OAIMiataruGetVisitorHistoryResponse_MiataruServerConfig::is_available_visitor_history_Valid() const{
    return m_available_visitor_history_isValid;
}

QString OAIMiataruGetVisitorHistoryResponse_MiataruServerConfig::getMaximumNumberOfVisitorHistory() const {
    return m_maximum_number_of_visitor_history;
}
void OAIMiataruGetVisitorHistoryResponse_MiataruServerConfig::setMaximumNumberOfVisitorHistory(const QString &maximum_number_of_visitor_history) {
    m_maximum_number_of_visitor_history = maximum_number_of_visitor_history;
    m_maximum_number_of_visitor_history_isSet = true;
}

bool OAIMiataruGetVisitorHistoryResponse_MiataruServerConfig::is_maximum_number_of_visitor_history_Set() const{
    return m_maximum_number_of_visitor_history_isSet;
}

bool OAIMiataruGetVisitorHistoryResponse_MiataruServerConfig::is_maximum_number_of_visitor_history_Valid() const{
    return m_maximum_number_of_visitor_history_isValid;
}

bool OAIMiataruGetVisitorHistoryResponse_MiataruServerConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_available_visitor_history_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_maximum_number_of_visitor_history_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMiataruGetVisitorHistoryResponse_MiataruServerConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_available_visitor_history_isValid && m_maximum_number_of_visitor_history_isValid && true;
}

} // namespace OpenAPI
