/**
 * Miataru
 * The Miataru API is very simple and straight forward. Generally you're posting (HTTP POST) a JSON formatted request to a service method locations and you get back a JSON formatted answer. Please take into consideration that this has the request-for-comment status and that it can change while there's work done on client and server applications. Versioning therefore is done by prepending the version number - /v1/ for version 1 - to the method call.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@miataru.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMiataruGetLocationHistoryRequest_MiataruConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMiataruGetLocationHistoryRequest_MiataruConfig::OAIMiataruGetLocationHistoryRequest_MiataruConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMiataruGetLocationHistoryRequest_MiataruConfig::OAIMiataruGetLocationHistoryRequest_MiataruConfig() {
    this->initializeModel();
}

OAIMiataruGetLocationHistoryRequest_MiataruConfig::~OAIMiataruGetLocationHistoryRequest_MiataruConfig() {}

void OAIMiataruGetLocationHistoryRequest_MiataruConfig::initializeModel() {

    m_request_miataru_device_id_isSet = false;
    m_request_miataru_device_id_isValid = false;
}

void OAIMiataruGetLocationHistoryRequest_MiataruConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMiataruGetLocationHistoryRequest_MiataruConfig::fromJsonObject(QJsonObject json) {

    m_request_miataru_device_id_isValid = ::OpenAPI::fromJsonValue(m_request_miataru_device_id, json[QString("RequestMiataruDeviceID")]);
    m_request_miataru_device_id_isSet = !json[QString("RequestMiataruDeviceID")].isNull() && m_request_miataru_device_id_isValid;
}

QString OAIMiataruGetLocationHistoryRequest_MiataruConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMiataruGetLocationHistoryRequest_MiataruConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_request_miataru_device_id_isSet) {
        obj.insert(QString("RequestMiataruDeviceID"), ::OpenAPI::toJsonValue(m_request_miataru_device_id));
    }
    return obj;
}

QString OAIMiataruGetLocationHistoryRequest_MiataruConfig::getRequestMiataruDeviceId() const {
    return m_request_miataru_device_id;
}
void OAIMiataruGetLocationHistoryRequest_MiataruConfig::setRequestMiataruDeviceId(const QString &request_miataru_device_id) {
    m_request_miataru_device_id = request_miataru_device_id;
    m_request_miataru_device_id_isSet = true;
}

bool OAIMiataruGetLocationHistoryRequest_MiataruConfig::is_request_miataru_device_id_Set() const{
    return m_request_miataru_device_id_isSet;
}

bool OAIMiataruGetLocationHistoryRequest_MiataruConfig::is_request_miataru_device_id_Valid() const{
    return m_request_miataru_device_id_isValid;
}

bool OAIMiataruGetLocationHistoryRequest_MiataruConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_request_miataru_device_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMiataruGetLocationHistoryRequest_MiataruConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_request_miataru_device_id_isValid && true;
}

} // namespace OpenAPI
