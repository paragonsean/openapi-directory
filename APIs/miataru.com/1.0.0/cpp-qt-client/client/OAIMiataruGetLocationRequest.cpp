/**
 * Miataru
 * The Miataru API is very simple and straight forward. Generally you're posting (HTTP POST) a JSON formatted request to a service method locations and you get back a JSON formatted answer. Please take into consideration that this has the request-for-comment status and that it can change while there's work done on client and server applications. Versioning therefore is done by prepending the version number - /v1/ for version 1 - to the method call.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@miataru.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMiataruGetLocationRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMiataruGetLocationRequest::OAIMiataruGetLocationRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMiataruGetLocationRequest::OAIMiataruGetLocationRequest() {
    this->initializeModel();
}

OAIMiataruGetLocationRequest::~OAIMiataruGetLocationRequest() {}

void OAIMiataruGetLocationRequest::initializeModel() {

    m_miataru_config_isSet = false;
    m_miataru_config_isValid = false;

    m_miataru_get_location_isSet = false;
    m_miataru_get_location_isValid = false;
}

void OAIMiataruGetLocationRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMiataruGetLocationRequest::fromJsonObject(QJsonObject json) {

    m_miataru_config_isValid = ::OpenAPI::fromJsonValue(m_miataru_config, json[QString("MiataruConfig")]);
    m_miataru_config_isSet = !json[QString("MiataruConfig")].isNull() && m_miataru_config_isValid;

    m_miataru_get_location_isValid = ::OpenAPI::fromJsonValue(m_miataru_get_location, json[QString("MiataruGetLocation")]);
    m_miataru_get_location_isSet = !json[QString("MiataruGetLocation")].isNull() && m_miataru_get_location_isValid;
}

QString OAIMiataruGetLocationRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMiataruGetLocationRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_miataru_config.isSet()) {
        obj.insert(QString("MiataruConfig"), ::OpenAPI::toJsonValue(m_miataru_config));
    }
    if (m_miataru_get_location.size() > 0) {
        obj.insert(QString("MiataruGetLocation"), ::OpenAPI::toJsonValue(m_miataru_get_location));
    }
    return obj;
}

OAIMiataruGetLocationHistoryRequest_MiataruConfig OAIMiataruGetLocationRequest::getMiataruConfig() const {
    return m_miataru_config;
}
void OAIMiataruGetLocationRequest::setMiataruConfig(const OAIMiataruGetLocationHistoryRequest_MiataruConfig &miataru_config) {
    m_miataru_config = miataru_config;
    m_miataru_config_isSet = true;
}

bool OAIMiataruGetLocationRequest::is_miataru_config_Set() const{
    return m_miataru_config_isSet;
}

bool OAIMiataruGetLocationRequest::is_miataru_config_Valid() const{
    return m_miataru_config_isValid;
}

QList<OAIMiataruGetLocationDevice> OAIMiataruGetLocationRequest::getMiataruGetLocation() const {
    return m_miataru_get_location;
}
void OAIMiataruGetLocationRequest::setMiataruGetLocation(const QList<OAIMiataruGetLocationDevice> &miataru_get_location) {
    m_miataru_get_location = miataru_get_location;
    m_miataru_get_location_isSet = true;
}

bool OAIMiataruGetLocationRequest::is_miataru_get_location_Set() const{
    return m_miataru_get_location_isSet;
}

bool OAIMiataruGetLocationRequest::is_miataru_get_location_Valid() const{
    return m_miataru_get_location_isValid;
}

bool OAIMiataruGetLocationRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_miataru_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_miataru_get_location.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMiataruGetLocationRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_miataru_get_location_isValid && true;
}

} // namespace OpenAPI
