/**
 * Miataru
 * The Miataru API is very simple and straight forward. Generally you're posting (HTTP POST) a JSON formatted request to a service method locations and you get back a JSON formatted answer. Please take into consideration that this has the request-for-comment status and that it can change while there's work done on client and server applications. Versioning therefore is done by prepending the version number - /v1/ for version 1 - to the method call.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@miataru.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMiataruGetVisitorHistoryResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMiataruGetVisitorHistoryResponse::OAIMiataruGetVisitorHistoryResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMiataruGetVisitorHistoryResponse::OAIMiataruGetVisitorHistoryResponse() {
    this->initializeModel();
}

OAIMiataruGetVisitorHistoryResponse::~OAIMiataruGetVisitorHistoryResponse() {}

void OAIMiataruGetVisitorHistoryResponse::initializeModel() {

    m_miataru_server_config_isSet = false;
    m_miataru_server_config_isValid = false;

    m_miataru_visitors_isSet = false;
    m_miataru_visitors_isValid = false;
}

void OAIMiataruGetVisitorHistoryResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMiataruGetVisitorHistoryResponse::fromJsonObject(QJsonObject json) {

    m_miataru_server_config_isValid = ::OpenAPI::fromJsonValue(m_miataru_server_config, json[QString("MiataruServerConfig")]);
    m_miataru_server_config_isSet = !json[QString("MiataruServerConfig")].isNull() && m_miataru_server_config_isValid;

    m_miataru_visitors_isValid = ::OpenAPI::fromJsonValue(m_miataru_visitors, json[QString("MiataruVisitors")]);
    m_miataru_visitors_isSet = !json[QString("MiataruVisitors")].isNull() && m_miataru_visitors_isValid;
}

QString OAIMiataruGetVisitorHistoryResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMiataruGetVisitorHistoryResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_miataru_server_config.isSet()) {
        obj.insert(QString("MiataruServerConfig"), ::OpenAPI::toJsonValue(m_miataru_server_config));
    }
    if (m_miataru_visitors.size() > 0) {
        obj.insert(QString("MiataruVisitors"), ::OpenAPI::toJsonValue(m_miataru_visitors));
    }
    return obj;
}

OAIMiataruGetVisitorHistoryResponse_MiataruServerConfig OAIMiataruGetVisitorHistoryResponse::getMiataruServerConfig() const {
    return m_miataru_server_config;
}
void OAIMiataruGetVisitorHistoryResponse::setMiataruServerConfig(const OAIMiataruGetVisitorHistoryResponse_MiataruServerConfig &miataru_server_config) {
    m_miataru_server_config = miataru_server_config;
    m_miataru_server_config_isSet = true;
}

bool OAIMiataruGetVisitorHistoryResponse::is_miataru_server_config_Set() const{
    return m_miataru_server_config_isSet;
}

bool OAIMiataruGetVisitorHistoryResponse::is_miataru_server_config_Valid() const{
    return m_miataru_server_config_isValid;
}

QList<OAIMiataruVisitors> OAIMiataruGetVisitorHistoryResponse::getMiataruVisitors() const {
    return m_miataru_visitors;
}
void OAIMiataruGetVisitorHistoryResponse::setMiataruVisitors(const QList<OAIMiataruVisitors> &miataru_visitors) {
    m_miataru_visitors = miataru_visitors;
    m_miataru_visitors_isSet = true;
}

bool OAIMiataruGetVisitorHistoryResponse::is_miataru_visitors_Set() const{
    return m_miataru_visitors_isSet;
}

bool OAIMiataruGetVisitorHistoryResponse::is_miataru_visitors_Valid() const{
    return m_miataru_visitors_isValid;
}

bool OAIMiataruGetVisitorHistoryResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_miataru_server_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_miataru_visitors.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMiataruGetVisitorHistoryResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_miataru_server_config_isValid && m_miataru_visitors_isValid && true;
}

} // namespace OpenAPI
