/**
 * Miataru
 * The Miataru API is very simple and straight forward. Generally you're posting (HTTP POST) a JSON formatted request to a service method locations and you get back a JSON formatted answer. Please take into consideration that this has the request-for-comment status and that it can change while there's work done on client and server applications. Versioning therefore is done by prepending the version number - /v1/ for version 1 - to the method call.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@miataru.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMiataruGetLocationHistoryResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMiataruGetLocationHistoryResponse::OAIMiataruGetLocationHistoryResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMiataruGetLocationHistoryResponse::OAIMiataruGetLocationHistoryResponse() {
    this->initializeModel();
}

OAIMiataruGetLocationHistoryResponse::~OAIMiataruGetLocationHistoryResponse() {}

void OAIMiataruGetLocationHistoryResponse::initializeModel() {

    m_miataru_location_isSet = false;
    m_miataru_location_isValid = false;

    m_miataru_server_config_isSet = false;
    m_miataru_server_config_isValid = false;
}

void OAIMiataruGetLocationHistoryResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMiataruGetLocationHistoryResponse::fromJsonObject(QJsonObject json) {

    m_miataru_location_isValid = ::OpenAPI::fromJsonValue(m_miataru_location, json[QString("MiataruLocation")]);
    m_miataru_location_isSet = !json[QString("MiataruLocation")].isNull() && m_miataru_location_isValid;

    m_miataru_server_config_isValid = ::OpenAPI::fromJsonValue(m_miataru_server_config, json[QString("MiataruServerConfig")]);
    m_miataru_server_config_isSet = !json[QString("MiataruServerConfig")].isNull() && m_miataru_server_config_isValid;
}

QString OAIMiataruGetLocationHistoryResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMiataruGetLocationHistoryResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_miataru_location.size() > 0) {
        obj.insert(QString("MiataruLocation"), ::OpenAPI::toJsonValue(m_miataru_location));
    }
    if (m_miataru_server_config.isSet()) {
        obj.insert(QString("MiataruServerConfig"), ::OpenAPI::toJsonValue(m_miataru_server_config));
    }
    return obj;
}

QList<OAIMiataruLocation> OAIMiataruGetLocationHistoryResponse::getMiataruLocation() const {
    return m_miataru_location;
}
void OAIMiataruGetLocationHistoryResponse::setMiataruLocation(const QList<OAIMiataruLocation> &miataru_location) {
    m_miataru_location = miataru_location;
    m_miataru_location_isSet = true;
}

bool OAIMiataruGetLocationHistoryResponse::is_miataru_location_Set() const{
    return m_miataru_location_isSet;
}

bool OAIMiataruGetLocationHistoryResponse::is_miataru_location_Valid() const{
    return m_miataru_location_isValid;
}

OAIMiataruGetLocationHistoryResponse_MiataruServerConfig OAIMiataruGetLocationHistoryResponse::getMiataruServerConfig() const {
    return m_miataru_server_config;
}
void OAIMiataruGetLocationHistoryResponse::setMiataruServerConfig(const OAIMiataruGetLocationHistoryResponse_MiataruServerConfig &miataru_server_config) {
    m_miataru_server_config = miataru_server_config;
    m_miataru_server_config_isSet = true;
}

bool OAIMiataruGetLocationHistoryResponse::is_miataru_server_config_Set() const{
    return m_miataru_server_config_isSet;
}

bool OAIMiataruGetLocationHistoryResponse::is_miataru_server_config_Valid() const{
    return m_miataru_server_config_isValid;
}

bool OAIMiataruGetLocationHistoryResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_miataru_location.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_miataru_server_config.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMiataruGetLocationHistoryResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_miataru_location_isValid && m_miataru_server_config_isValid && true;
}

} // namespace OpenAPI
