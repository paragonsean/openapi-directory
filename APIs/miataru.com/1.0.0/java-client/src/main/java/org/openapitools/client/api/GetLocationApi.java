/*
 * Miataru
 * The Miataru API is very simple and straight forward. Generally you're posting (HTTP POST) a JSON formatted request to a service method locations and you get back a JSON formatted answer. Please take into consideration that this has the request-for-comment status and that it can change while there's work done on client and server applications. Versioning therefore is done by prepending the version number - /v1/ for version 1 - to the method call.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@miataru.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.MiataruGetLocationGeoJSONResponse;
import org.openapitools.client.model.MiataruGetLocationHistoryRequest;
import org.openapitools.client.model.MiataruGetLocationHistoryResponse;
import org.openapitools.client.model.MiataruGetLocationRequest;
import org.openapitools.client.model.MiataruGetLocationResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class GetLocationApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public GetLocationApi() {
        this(Configuration.getDefaultApiClient());
    }

    public GetLocationApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getLocation
     * @param body the complex JSON formatted datastructure to get the location of one or more devices. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> successful location responses </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLocationCall(MiataruGetLocationRequest body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/GetLocation";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getLocationValidateBeforeCall(MiataruGetLocationRequest body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling getLocation(Async)");
        }

        return getLocationCall(body, _callback);

    }

    /**
     * 
     * To retrieve a specific devices latest known location the /GetLocation method is used. Please note that the MiataruConfig portion is optional. RequestMiataruDeviceID should be the ID of the device the request is sent from (or an identifier like an URL).
     * @param body the complex JSON formatted datastructure to get the location of one or more devices. (required)
     * @return MiataruGetLocationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> successful location responses </td><td>  -  </td></tr>
     </table>
     */
    public MiataruGetLocationResponse getLocation(MiataruGetLocationRequest body) throws ApiException {
        ApiResponse<MiataruGetLocationResponse> localVarResp = getLocationWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * 
     * To retrieve a specific devices latest known location the /GetLocation method is used. Please note that the MiataruConfig portion is optional. RequestMiataruDeviceID should be the ID of the device the request is sent from (or an identifier like an URL).
     * @param body the complex JSON formatted datastructure to get the location of one or more devices. (required)
     * @return ApiResponse&lt;MiataruGetLocationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> successful location responses </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MiataruGetLocationResponse> getLocationWithHttpInfo(MiataruGetLocationRequest body) throws ApiException {
        okhttp3.Call localVarCall = getLocationValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<MiataruGetLocationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * To retrieve a specific devices latest known location the /GetLocation method is used. Please note that the MiataruConfig portion is optional. RequestMiataruDeviceID should be the ID of the device the request is sent from (or an identifier like an URL).
     * @param body the complex JSON formatted datastructure to get the location of one or more devices. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> successful location responses </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLocationAsync(MiataruGetLocationRequest body, final ApiCallback<MiataruGetLocationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getLocationValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<MiataruGetLocationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getLocationGeoJSON
     * @param deviceID the unique device ID of the device the location is requested from (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> geoJSON formatted device location </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLocationGeoJSONCall(String deviceID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/GetLocationGeoJSON/{deviceID}"
            .replace("{" + "deviceID" + "}", localVarApiClient.escapeString(deviceID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getLocationGeoJSONValidateBeforeCall(String deviceID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'deviceID' is set
        if (deviceID == null) {
            throw new ApiException("Missing the required parameter 'deviceID' when calling getLocationGeoJSON(Async)");
        }

        return getLocationGeoJSONCall(deviceID, _callback);

    }

    /**
     * 
     * Retrieves a devices Location in GeoJSON format.
     * @param deviceID the unique device ID of the device the location is requested from (required)
     * @return MiataruGetLocationGeoJSONResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> geoJSON formatted device location </td><td>  -  </td></tr>
     </table>
     */
    public MiataruGetLocationGeoJSONResponse getLocationGeoJSON(String deviceID) throws ApiException {
        ApiResponse<MiataruGetLocationGeoJSONResponse> localVarResp = getLocationGeoJSONWithHttpInfo(deviceID);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieves a devices Location in GeoJSON format.
     * @param deviceID the unique device ID of the device the location is requested from (required)
     * @return ApiResponse&lt;MiataruGetLocationGeoJSONResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> geoJSON formatted device location </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MiataruGetLocationGeoJSONResponse> getLocationGeoJSONWithHttpInfo(String deviceID) throws ApiException {
        okhttp3.Call localVarCall = getLocationGeoJSONValidateBeforeCall(deviceID, null);
        Type localVarReturnType = new TypeToken<MiataruGetLocationGeoJSONResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieves a devices Location in GeoJSON format.
     * @param deviceID the unique device ID of the device the location is requested from (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> geoJSON formatted device location </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLocationGeoJSONAsync(String deviceID, final ApiCallback<MiataruGetLocationGeoJSONResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getLocationGeoJSONValidateBeforeCall(deviceID, _callback);
        Type localVarReturnType = new TypeToken<MiataruGetLocationGeoJSONResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getLocationHistory
     * @param body the complex JSON formatted datastructure to get the location history of one device (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> successful location history response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLocationHistoryCall(MiataruGetLocationHistoryRequest body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/GetLocationHistory";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getLocationHistoryValidateBeforeCall(MiataruGetLocationHistoryRequest body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling getLocationHistory(Async)");
        }

        return getLocationHistoryCall(body, _callback);

    }

    /**
     * 
     * Location History is stored on the server only if the client told the server to do so using the “EnableLocationHistory” setting in the Location Update requests. For transitions of enabling/disabling that functionality - Everytime a Location Update is received by the server with “EnableLocationHistory&#x3D;false” the server removes all stored Location History till that point. There is a server-side setting that controls up to how many Location Updates the server is storing in the Location History before it removes the oldest one. To request the Location History of a particular device the client sends the following POST request to the GetLocationHistory service URL. Please note that the MiataruConfig portion is optional. RequestMiataruDeviceID should be the ID of the device the request is sent from (or an identifier like an URL).
     * @param body the complex JSON formatted datastructure to get the location history of one device (required)
     * @return MiataruGetLocationHistoryResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> successful location history response </td><td>  -  </td></tr>
     </table>
     */
    public MiataruGetLocationHistoryResponse getLocationHistory(MiataruGetLocationHistoryRequest body) throws ApiException {
        ApiResponse<MiataruGetLocationHistoryResponse> localVarResp = getLocationHistoryWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * 
     * Location History is stored on the server only if the client told the server to do so using the “EnableLocationHistory” setting in the Location Update requests. For transitions of enabling/disabling that functionality - Everytime a Location Update is received by the server with “EnableLocationHistory&#x3D;false” the server removes all stored Location History till that point. There is a server-side setting that controls up to how many Location Updates the server is storing in the Location History before it removes the oldest one. To request the Location History of a particular device the client sends the following POST request to the GetLocationHistory service URL. Please note that the MiataruConfig portion is optional. RequestMiataruDeviceID should be the ID of the device the request is sent from (or an identifier like an URL).
     * @param body the complex JSON formatted datastructure to get the location history of one device (required)
     * @return ApiResponse&lt;MiataruGetLocationHistoryResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> successful location history response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MiataruGetLocationHistoryResponse> getLocationHistoryWithHttpInfo(MiataruGetLocationHistoryRequest body) throws ApiException {
        okhttp3.Call localVarCall = getLocationHistoryValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<MiataruGetLocationHistoryResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Location History is stored on the server only if the client told the server to do so using the “EnableLocationHistory” setting in the Location Update requests. For transitions of enabling/disabling that functionality - Everytime a Location Update is received by the server with “EnableLocationHistory&#x3D;false” the server removes all stored Location History till that point. There is a server-side setting that controls up to how many Location Updates the server is storing in the Location History before it removes the oldest one. To request the Location History of a particular device the client sends the following POST request to the GetLocationHistory service URL. Please note that the MiataruConfig portion is optional. RequestMiataruDeviceID should be the ID of the device the request is sent from (or an identifier like an URL).
     * @param body the complex JSON formatted datastructure to get the location history of one device (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> successful location history response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLocationHistoryAsync(MiataruGetLocationHistoryRequest body, final ApiCallback<MiataruGetLocationHistoryResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getLocationHistoryValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<MiataruGetLocationHistoryResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
