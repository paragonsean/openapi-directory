/*
 * Miataru
 * The Miataru API is very simple and straight forward. Generally you're posting (HTTP POST) a JSON formatted request to a service method locations and you get back a JSON formatted answer. Please take into consideration that this has the request-for-comment status and that it can change while there's work done on client and server applications. Versioning therefore is done by prepending the version number - /v1/ for version 1 - to the method call.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@miataru.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.MiataruGetLocationHistoryResponseMiataruServerConfig;
import org.openapitools.client.model.MiataruLocation;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * MiataruGetLocationHistoryResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:10:16.886691-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MiataruGetLocationHistoryResponse {
  public static final String SERIALIZED_NAME_MIATARU_LOCATION = "MiataruLocation";
  @SerializedName(SERIALIZED_NAME_MIATARU_LOCATION)
  private List<MiataruLocation> miataruLocation = new ArrayList<>();

  public static final String SERIALIZED_NAME_MIATARU_SERVER_CONFIG = "MiataruServerConfig";
  @SerializedName(SERIALIZED_NAME_MIATARU_SERVER_CONFIG)
  private MiataruGetLocationHistoryResponseMiataruServerConfig miataruServerConfig;

  public MiataruGetLocationHistoryResponse() {
  }

  public MiataruGetLocationHistoryResponse miataruLocation(List<MiataruLocation> miataruLocation) {
    this.miataruLocation = miataruLocation;
    return this;
  }

  public MiataruGetLocationHistoryResponse addMiataruLocationItem(MiataruLocation miataruLocationItem) {
    if (this.miataruLocation == null) {
      this.miataruLocation = new ArrayList<>();
    }
    this.miataruLocation.add(miataruLocationItem);
    return this;
  }

  /**
   * holds all location information of a given device or is an empty array if device not found or no location information is stored.
   * @return miataruLocation
   */
  @javax.annotation.Nonnull
  public List<MiataruLocation> getMiataruLocation() {
    return miataruLocation;
  }

  public void setMiataruLocation(List<MiataruLocation> miataruLocation) {
    this.miataruLocation = miataruLocation;
  }


  public MiataruGetLocationHistoryResponse miataruServerConfig(MiataruGetLocationHistoryResponseMiataruServerConfig miataruServerConfig) {
    this.miataruServerConfig = miataruServerConfig;
    return this;
  }

  /**
   * Get miataruServerConfig
   * @return miataruServerConfig
   */
  @javax.annotation.Nonnull
  public MiataruGetLocationHistoryResponseMiataruServerConfig getMiataruServerConfig() {
    return miataruServerConfig;
  }

  public void setMiataruServerConfig(MiataruGetLocationHistoryResponseMiataruServerConfig miataruServerConfig) {
    this.miataruServerConfig = miataruServerConfig;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MiataruGetLocationHistoryResponse miataruGetLocationHistoryResponse = (MiataruGetLocationHistoryResponse) o;
    return Objects.equals(this.miataruLocation, miataruGetLocationHistoryResponse.miataruLocation) &&
        Objects.equals(this.miataruServerConfig, miataruGetLocationHistoryResponse.miataruServerConfig);
  }

  @Override
  public int hashCode() {
    return Objects.hash(miataruLocation, miataruServerConfig);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MiataruGetLocationHistoryResponse {\n");
    sb.append("    miataruLocation: ").append(toIndentedString(miataruLocation)).append("\n");
    sb.append("    miataruServerConfig: ").append(toIndentedString(miataruServerConfig)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("MiataruLocation");
    openapiFields.add("MiataruServerConfig");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("MiataruLocation");
    openapiRequiredFields.add("MiataruServerConfig");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MiataruGetLocationHistoryResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MiataruGetLocationHistoryResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MiataruGetLocationHistoryResponse is not found in the empty JSON string", MiataruGetLocationHistoryResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MiataruGetLocationHistoryResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MiataruGetLocationHistoryResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : MiataruGetLocationHistoryResponse.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the json data is an array
      if (!jsonObj.get("MiataruLocation").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `MiataruLocation` to be an array in the JSON string but got `%s`", jsonObj.get("MiataruLocation").toString()));
      }

      JsonArray jsonArraymiataruLocation = jsonObj.getAsJsonArray("MiataruLocation");
      // validate the required field `MiataruLocation` (array)
      for (int i = 0; i < jsonArraymiataruLocation.size(); i++) {
        MiataruLocation.validateJsonElement(jsonArraymiataruLocation.get(i));
      };
      // validate the required field `MiataruServerConfig`
      MiataruGetLocationHistoryResponseMiataruServerConfig.validateJsonElement(jsonObj.get("MiataruServerConfig"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MiataruGetLocationHistoryResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MiataruGetLocationHistoryResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MiataruGetLocationHistoryResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MiataruGetLocationHistoryResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<MiataruGetLocationHistoryResponse>() {
           @Override
           public void write(JsonWriter out, MiataruGetLocationHistoryResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MiataruGetLocationHistoryResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MiataruGetLocationHistoryResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MiataruGetLocationHistoryResponse
   * @throws IOException if the JSON string is invalid with respect to MiataruGetLocationHistoryResponse
   */
  public static MiataruGetLocationHistoryResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MiataruGetLocationHistoryResponse.class);
  }

  /**
   * Convert an instance of MiataruGetLocationHistoryResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

