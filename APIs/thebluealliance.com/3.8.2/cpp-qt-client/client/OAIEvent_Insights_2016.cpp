/**
 * The Blue Alliance API v3
 * # Overview    Information and statistics about FIRST Robotics Competition teams and events.   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).
 *
 * The version of the OpenAPI document: 3.8.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEvent_Insights_2016.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEvent_Insights_2016::OAIEvent_Insights_2016(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEvent_Insights_2016::OAIEvent_Insights_2016() {
    this->initializeModel();
}

OAIEvent_Insights_2016::~OAIEvent_Insights_2016() {}

void OAIEvent_Insights_2016::initializeModel() {

    m_a_cheval_de_frise_isSet = false;
    m_a_cheval_de_frise_isValid = false;

    m_a_portcullis_isSet = false;
    m_a_portcullis_isValid = false;

    m_b_moat_isSet = false;
    m_b_moat_isValid = false;

    m_b_ramparts_isSet = false;
    m_b_ramparts_isValid = false;

    m_c_drawbridge_isSet = false;
    m_c_drawbridge_isValid = false;

    m_c_sally_port_isSet = false;
    m_c_sally_port_isValid = false;

    m_d_rock_wall_isSet = false;
    m_d_rock_wall_isValid = false;

    m_d_rough_terrain_isSet = false;
    m_d_rough_terrain_isValid = false;

    m_low_bar_isSet = false;
    m_low_bar_isValid = false;

    m_average_auto_score_isSet = false;
    m_average_auto_score_isValid = false;

    m_average_boulder_score_isSet = false;
    m_average_boulder_score_isValid = false;

    m_average_crossing_score_isSet = false;
    m_average_crossing_score_isValid = false;

    m_average_foul_score_isSet = false;
    m_average_foul_score_isValid = false;

    m_average_high_goals_isSet = false;
    m_average_high_goals_isValid = false;

    m_average_low_goals_isSet = false;
    m_average_low_goals_isValid = false;

    m_average_score_isSet = false;
    m_average_score_isValid = false;

    m_average_tower_score_isSet = false;
    m_average_tower_score_isValid = false;

    m_average_win_margin_isSet = false;
    m_average_win_margin_isValid = false;

    m_average_win_score_isSet = false;
    m_average_win_score_isValid = false;

    m_breaches_isSet = false;
    m_breaches_isValid = false;

    m_captures_isSet = false;
    m_captures_isValid = false;

    m_challenges_isSet = false;
    m_challenges_isValid = false;

    m_high_score_isSet = false;
    m_high_score_isValid = false;

    m_scales_isSet = false;
    m_scales_isValid = false;
}

void OAIEvent_Insights_2016::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEvent_Insights_2016::fromJsonObject(QJsonObject json) {

    m_a_cheval_de_frise_isValid = ::OpenAPI::fromJsonValue(m_a_cheval_de_frise, json[QString("A_ChevalDeFrise")]);
    m_a_cheval_de_frise_isSet = !json[QString("A_ChevalDeFrise")].isNull() && m_a_cheval_de_frise_isValid;

    m_a_portcullis_isValid = ::OpenAPI::fromJsonValue(m_a_portcullis, json[QString("A_Portcullis")]);
    m_a_portcullis_isSet = !json[QString("A_Portcullis")].isNull() && m_a_portcullis_isValid;

    m_b_moat_isValid = ::OpenAPI::fromJsonValue(m_b_moat, json[QString("B_Moat")]);
    m_b_moat_isSet = !json[QString("B_Moat")].isNull() && m_b_moat_isValid;

    m_b_ramparts_isValid = ::OpenAPI::fromJsonValue(m_b_ramparts, json[QString("B_Ramparts")]);
    m_b_ramparts_isSet = !json[QString("B_Ramparts")].isNull() && m_b_ramparts_isValid;

    m_c_drawbridge_isValid = ::OpenAPI::fromJsonValue(m_c_drawbridge, json[QString("C_Drawbridge")]);
    m_c_drawbridge_isSet = !json[QString("C_Drawbridge")].isNull() && m_c_drawbridge_isValid;

    m_c_sally_port_isValid = ::OpenAPI::fromJsonValue(m_c_sally_port, json[QString("C_SallyPort")]);
    m_c_sally_port_isSet = !json[QString("C_SallyPort")].isNull() && m_c_sally_port_isValid;

    m_d_rock_wall_isValid = ::OpenAPI::fromJsonValue(m_d_rock_wall, json[QString("D_RockWall")]);
    m_d_rock_wall_isSet = !json[QString("D_RockWall")].isNull() && m_d_rock_wall_isValid;

    m_d_rough_terrain_isValid = ::OpenAPI::fromJsonValue(m_d_rough_terrain, json[QString("D_RoughTerrain")]);
    m_d_rough_terrain_isSet = !json[QString("D_RoughTerrain")].isNull() && m_d_rough_terrain_isValid;

    m_low_bar_isValid = ::OpenAPI::fromJsonValue(m_low_bar, json[QString("LowBar")]);
    m_low_bar_isSet = !json[QString("LowBar")].isNull() && m_low_bar_isValid;

    m_average_auto_score_isValid = ::OpenAPI::fromJsonValue(m_average_auto_score, json[QString("average_auto_score")]);
    m_average_auto_score_isSet = !json[QString("average_auto_score")].isNull() && m_average_auto_score_isValid;

    m_average_boulder_score_isValid = ::OpenAPI::fromJsonValue(m_average_boulder_score, json[QString("average_boulder_score")]);
    m_average_boulder_score_isSet = !json[QString("average_boulder_score")].isNull() && m_average_boulder_score_isValid;

    m_average_crossing_score_isValid = ::OpenAPI::fromJsonValue(m_average_crossing_score, json[QString("average_crossing_score")]);
    m_average_crossing_score_isSet = !json[QString("average_crossing_score")].isNull() && m_average_crossing_score_isValid;

    m_average_foul_score_isValid = ::OpenAPI::fromJsonValue(m_average_foul_score, json[QString("average_foul_score")]);
    m_average_foul_score_isSet = !json[QString("average_foul_score")].isNull() && m_average_foul_score_isValid;

    m_average_high_goals_isValid = ::OpenAPI::fromJsonValue(m_average_high_goals, json[QString("average_high_goals")]);
    m_average_high_goals_isSet = !json[QString("average_high_goals")].isNull() && m_average_high_goals_isValid;

    m_average_low_goals_isValid = ::OpenAPI::fromJsonValue(m_average_low_goals, json[QString("average_low_goals")]);
    m_average_low_goals_isSet = !json[QString("average_low_goals")].isNull() && m_average_low_goals_isValid;

    m_average_score_isValid = ::OpenAPI::fromJsonValue(m_average_score, json[QString("average_score")]);
    m_average_score_isSet = !json[QString("average_score")].isNull() && m_average_score_isValid;

    m_average_tower_score_isValid = ::OpenAPI::fromJsonValue(m_average_tower_score, json[QString("average_tower_score")]);
    m_average_tower_score_isSet = !json[QString("average_tower_score")].isNull() && m_average_tower_score_isValid;

    m_average_win_margin_isValid = ::OpenAPI::fromJsonValue(m_average_win_margin, json[QString("average_win_margin")]);
    m_average_win_margin_isSet = !json[QString("average_win_margin")].isNull() && m_average_win_margin_isValid;

    m_average_win_score_isValid = ::OpenAPI::fromJsonValue(m_average_win_score, json[QString("average_win_score")]);
    m_average_win_score_isSet = !json[QString("average_win_score")].isNull() && m_average_win_score_isValid;

    m_breaches_isValid = ::OpenAPI::fromJsonValue(m_breaches, json[QString("breaches")]);
    m_breaches_isSet = !json[QString("breaches")].isNull() && m_breaches_isValid;

    m_captures_isValid = ::OpenAPI::fromJsonValue(m_captures, json[QString("captures")]);
    m_captures_isSet = !json[QString("captures")].isNull() && m_captures_isValid;

    m_challenges_isValid = ::OpenAPI::fromJsonValue(m_challenges, json[QString("challenges")]);
    m_challenges_isSet = !json[QString("challenges")].isNull() && m_challenges_isValid;

    m_high_score_isValid = ::OpenAPI::fromJsonValue(m_high_score, json[QString("high_score")]);
    m_high_score_isSet = !json[QString("high_score")].isNull() && m_high_score_isValid;

    m_scales_isValid = ::OpenAPI::fromJsonValue(m_scales, json[QString("scales")]);
    m_scales_isSet = !json[QString("scales")].isNull() && m_scales_isValid;
}

QString OAIEvent_Insights_2016::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEvent_Insights_2016::asJsonObject() const {
    QJsonObject obj;
    if (m_a_cheval_de_frise.size() > 0) {
        obj.insert(QString("A_ChevalDeFrise"), ::OpenAPI::toJsonValue(m_a_cheval_de_frise));
    }
    if (m_a_portcullis.size() > 0) {
        obj.insert(QString("A_Portcullis"), ::OpenAPI::toJsonValue(m_a_portcullis));
    }
    if (m_b_moat.size() > 0) {
        obj.insert(QString("B_Moat"), ::OpenAPI::toJsonValue(m_b_moat));
    }
    if (m_b_ramparts.size() > 0) {
        obj.insert(QString("B_Ramparts"), ::OpenAPI::toJsonValue(m_b_ramparts));
    }
    if (m_c_drawbridge.size() > 0) {
        obj.insert(QString("C_Drawbridge"), ::OpenAPI::toJsonValue(m_c_drawbridge));
    }
    if (m_c_sally_port.size() > 0) {
        obj.insert(QString("C_SallyPort"), ::OpenAPI::toJsonValue(m_c_sally_port));
    }
    if (m_d_rock_wall.size() > 0) {
        obj.insert(QString("D_RockWall"), ::OpenAPI::toJsonValue(m_d_rock_wall));
    }
    if (m_d_rough_terrain.size() > 0) {
        obj.insert(QString("D_RoughTerrain"), ::OpenAPI::toJsonValue(m_d_rough_terrain));
    }
    if (m_low_bar.size() > 0) {
        obj.insert(QString("LowBar"), ::OpenAPI::toJsonValue(m_low_bar));
    }
    if (m_average_auto_score_isSet) {
        obj.insert(QString("average_auto_score"), ::OpenAPI::toJsonValue(m_average_auto_score));
    }
    if (m_average_boulder_score_isSet) {
        obj.insert(QString("average_boulder_score"), ::OpenAPI::toJsonValue(m_average_boulder_score));
    }
    if (m_average_crossing_score_isSet) {
        obj.insert(QString("average_crossing_score"), ::OpenAPI::toJsonValue(m_average_crossing_score));
    }
    if (m_average_foul_score_isSet) {
        obj.insert(QString("average_foul_score"), ::OpenAPI::toJsonValue(m_average_foul_score));
    }
    if (m_average_high_goals_isSet) {
        obj.insert(QString("average_high_goals"), ::OpenAPI::toJsonValue(m_average_high_goals));
    }
    if (m_average_low_goals_isSet) {
        obj.insert(QString("average_low_goals"), ::OpenAPI::toJsonValue(m_average_low_goals));
    }
    if (m_average_score_isSet) {
        obj.insert(QString("average_score"), ::OpenAPI::toJsonValue(m_average_score));
    }
    if (m_average_tower_score_isSet) {
        obj.insert(QString("average_tower_score"), ::OpenAPI::toJsonValue(m_average_tower_score));
    }
    if (m_average_win_margin_isSet) {
        obj.insert(QString("average_win_margin"), ::OpenAPI::toJsonValue(m_average_win_margin));
    }
    if (m_average_win_score_isSet) {
        obj.insert(QString("average_win_score"), ::OpenAPI::toJsonValue(m_average_win_score));
    }
    if (m_breaches.size() > 0) {
        obj.insert(QString("breaches"), ::OpenAPI::toJsonValue(m_breaches));
    }
    if (m_captures.size() > 0) {
        obj.insert(QString("captures"), ::OpenAPI::toJsonValue(m_captures));
    }
    if (m_challenges.size() > 0) {
        obj.insert(QString("challenges"), ::OpenAPI::toJsonValue(m_challenges));
    }
    if (m_high_score.size() > 0) {
        obj.insert(QString("high_score"), ::OpenAPI::toJsonValue(m_high_score));
    }
    if (m_scales.size() > 0) {
        obj.insert(QString("scales"), ::OpenAPI::toJsonValue(m_scales));
    }
    return obj;
}

QList<float> OAIEvent_Insights_2016::getAChevalDeFrise() const {
    return m_a_cheval_de_frise;
}
void OAIEvent_Insights_2016::setAChevalDeFrise(const QList<float> &a_cheval_de_frise) {
    m_a_cheval_de_frise = a_cheval_de_frise;
    m_a_cheval_de_frise_isSet = true;
}

bool OAIEvent_Insights_2016::is_a_cheval_de_frise_Set() const{
    return m_a_cheval_de_frise_isSet;
}

bool OAIEvent_Insights_2016::is_a_cheval_de_frise_Valid() const{
    return m_a_cheval_de_frise_isValid;
}

QList<float> OAIEvent_Insights_2016::getAPortcullis() const {
    return m_a_portcullis;
}
void OAIEvent_Insights_2016::setAPortcullis(const QList<float> &a_portcullis) {
    m_a_portcullis = a_portcullis;
    m_a_portcullis_isSet = true;
}

bool OAIEvent_Insights_2016::is_a_portcullis_Set() const{
    return m_a_portcullis_isSet;
}

bool OAIEvent_Insights_2016::is_a_portcullis_Valid() const{
    return m_a_portcullis_isValid;
}

QList<float> OAIEvent_Insights_2016::getBMoat() const {
    return m_b_moat;
}
void OAIEvent_Insights_2016::setBMoat(const QList<float> &b_moat) {
    m_b_moat = b_moat;
    m_b_moat_isSet = true;
}

bool OAIEvent_Insights_2016::is_b_moat_Set() const{
    return m_b_moat_isSet;
}

bool OAIEvent_Insights_2016::is_b_moat_Valid() const{
    return m_b_moat_isValid;
}

QList<float> OAIEvent_Insights_2016::getBRamparts() const {
    return m_b_ramparts;
}
void OAIEvent_Insights_2016::setBRamparts(const QList<float> &b_ramparts) {
    m_b_ramparts = b_ramparts;
    m_b_ramparts_isSet = true;
}

bool OAIEvent_Insights_2016::is_b_ramparts_Set() const{
    return m_b_ramparts_isSet;
}

bool OAIEvent_Insights_2016::is_b_ramparts_Valid() const{
    return m_b_ramparts_isValid;
}

QList<float> OAIEvent_Insights_2016::getCDrawbridge() const {
    return m_c_drawbridge;
}
void OAIEvent_Insights_2016::setCDrawbridge(const QList<float> &c_drawbridge) {
    m_c_drawbridge = c_drawbridge;
    m_c_drawbridge_isSet = true;
}

bool OAIEvent_Insights_2016::is_c_drawbridge_Set() const{
    return m_c_drawbridge_isSet;
}

bool OAIEvent_Insights_2016::is_c_drawbridge_Valid() const{
    return m_c_drawbridge_isValid;
}

QList<float> OAIEvent_Insights_2016::getCSallyPort() const {
    return m_c_sally_port;
}
void OAIEvent_Insights_2016::setCSallyPort(const QList<float> &c_sally_port) {
    m_c_sally_port = c_sally_port;
    m_c_sally_port_isSet = true;
}

bool OAIEvent_Insights_2016::is_c_sally_port_Set() const{
    return m_c_sally_port_isSet;
}

bool OAIEvent_Insights_2016::is_c_sally_port_Valid() const{
    return m_c_sally_port_isValid;
}

QList<float> OAIEvent_Insights_2016::getDRockWall() const {
    return m_d_rock_wall;
}
void OAIEvent_Insights_2016::setDRockWall(const QList<float> &d_rock_wall) {
    m_d_rock_wall = d_rock_wall;
    m_d_rock_wall_isSet = true;
}

bool OAIEvent_Insights_2016::is_d_rock_wall_Set() const{
    return m_d_rock_wall_isSet;
}

bool OAIEvent_Insights_2016::is_d_rock_wall_Valid() const{
    return m_d_rock_wall_isValid;
}

QList<float> OAIEvent_Insights_2016::getDRoughTerrain() const {
    return m_d_rough_terrain;
}
void OAIEvent_Insights_2016::setDRoughTerrain(const QList<float> &d_rough_terrain) {
    m_d_rough_terrain = d_rough_terrain;
    m_d_rough_terrain_isSet = true;
}

bool OAIEvent_Insights_2016::is_d_rough_terrain_Set() const{
    return m_d_rough_terrain_isSet;
}

bool OAIEvent_Insights_2016::is_d_rough_terrain_Valid() const{
    return m_d_rough_terrain_isValid;
}

QList<float> OAIEvent_Insights_2016::getLowBar() const {
    return m_low_bar;
}
void OAIEvent_Insights_2016::setLowBar(const QList<float> &low_bar) {
    m_low_bar = low_bar;
    m_low_bar_isSet = true;
}

bool OAIEvent_Insights_2016::is_low_bar_Set() const{
    return m_low_bar_isSet;
}

bool OAIEvent_Insights_2016::is_low_bar_Valid() const{
    return m_low_bar_isValid;
}

float OAIEvent_Insights_2016::getAverageAutoScore() const {
    return m_average_auto_score;
}
void OAIEvent_Insights_2016::setAverageAutoScore(const float &average_auto_score) {
    m_average_auto_score = average_auto_score;
    m_average_auto_score_isSet = true;
}

bool OAIEvent_Insights_2016::is_average_auto_score_Set() const{
    return m_average_auto_score_isSet;
}

bool OAIEvent_Insights_2016::is_average_auto_score_Valid() const{
    return m_average_auto_score_isValid;
}

float OAIEvent_Insights_2016::getAverageBoulderScore() const {
    return m_average_boulder_score;
}
void OAIEvent_Insights_2016::setAverageBoulderScore(const float &average_boulder_score) {
    m_average_boulder_score = average_boulder_score;
    m_average_boulder_score_isSet = true;
}

bool OAIEvent_Insights_2016::is_average_boulder_score_Set() const{
    return m_average_boulder_score_isSet;
}

bool OAIEvent_Insights_2016::is_average_boulder_score_Valid() const{
    return m_average_boulder_score_isValid;
}

float OAIEvent_Insights_2016::getAverageCrossingScore() const {
    return m_average_crossing_score;
}
void OAIEvent_Insights_2016::setAverageCrossingScore(const float &average_crossing_score) {
    m_average_crossing_score = average_crossing_score;
    m_average_crossing_score_isSet = true;
}

bool OAIEvent_Insights_2016::is_average_crossing_score_Set() const{
    return m_average_crossing_score_isSet;
}

bool OAIEvent_Insights_2016::is_average_crossing_score_Valid() const{
    return m_average_crossing_score_isValid;
}

float OAIEvent_Insights_2016::getAverageFoulScore() const {
    return m_average_foul_score;
}
void OAIEvent_Insights_2016::setAverageFoulScore(const float &average_foul_score) {
    m_average_foul_score = average_foul_score;
    m_average_foul_score_isSet = true;
}

bool OAIEvent_Insights_2016::is_average_foul_score_Set() const{
    return m_average_foul_score_isSet;
}

bool OAIEvent_Insights_2016::is_average_foul_score_Valid() const{
    return m_average_foul_score_isValid;
}

float OAIEvent_Insights_2016::getAverageHighGoals() const {
    return m_average_high_goals;
}
void OAIEvent_Insights_2016::setAverageHighGoals(const float &average_high_goals) {
    m_average_high_goals = average_high_goals;
    m_average_high_goals_isSet = true;
}

bool OAIEvent_Insights_2016::is_average_high_goals_Set() const{
    return m_average_high_goals_isSet;
}

bool OAIEvent_Insights_2016::is_average_high_goals_Valid() const{
    return m_average_high_goals_isValid;
}

float OAIEvent_Insights_2016::getAverageLowGoals() const {
    return m_average_low_goals;
}
void OAIEvent_Insights_2016::setAverageLowGoals(const float &average_low_goals) {
    m_average_low_goals = average_low_goals;
    m_average_low_goals_isSet = true;
}

bool OAIEvent_Insights_2016::is_average_low_goals_Set() const{
    return m_average_low_goals_isSet;
}

bool OAIEvent_Insights_2016::is_average_low_goals_Valid() const{
    return m_average_low_goals_isValid;
}

float OAIEvent_Insights_2016::getAverageScore() const {
    return m_average_score;
}
void OAIEvent_Insights_2016::setAverageScore(const float &average_score) {
    m_average_score = average_score;
    m_average_score_isSet = true;
}

bool OAIEvent_Insights_2016::is_average_score_Set() const{
    return m_average_score_isSet;
}

bool OAIEvent_Insights_2016::is_average_score_Valid() const{
    return m_average_score_isValid;
}

float OAIEvent_Insights_2016::getAverageTowerScore() const {
    return m_average_tower_score;
}
void OAIEvent_Insights_2016::setAverageTowerScore(const float &average_tower_score) {
    m_average_tower_score = average_tower_score;
    m_average_tower_score_isSet = true;
}

bool OAIEvent_Insights_2016::is_average_tower_score_Set() const{
    return m_average_tower_score_isSet;
}

bool OAIEvent_Insights_2016::is_average_tower_score_Valid() const{
    return m_average_tower_score_isValid;
}

float OAIEvent_Insights_2016::getAverageWinMargin() const {
    return m_average_win_margin;
}
void OAIEvent_Insights_2016::setAverageWinMargin(const float &average_win_margin) {
    m_average_win_margin = average_win_margin;
    m_average_win_margin_isSet = true;
}

bool OAIEvent_Insights_2016::is_average_win_margin_Set() const{
    return m_average_win_margin_isSet;
}

bool OAIEvent_Insights_2016::is_average_win_margin_Valid() const{
    return m_average_win_margin_isValid;
}

float OAIEvent_Insights_2016::getAverageWinScore() const {
    return m_average_win_score;
}
void OAIEvent_Insights_2016::setAverageWinScore(const float &average_win_score) {
    m_average_win_score = average_win_score;
    m_average_win_score_isSet = true;
}

bool OAIEvent_Insights_2016::is_average_win_score_Set() const{
    return m_average_win_score_isSet;
}

bool OAIEvent_Insights_2016::is_average_win_score_Valid() const{
    return m_average_win_score_isValid;
}

QList<float> OAIEvent_Insights_2016::getBreaches() const {
    return m_breaches;
}
void OAIEvent_Insights_2016::setBreaches(const QList<float> &breaches) {
    m_breaches = breaches;
    m_breaches_isSet = true;
}

bool OAIEvent_Insights_2016::is_breaches_Set() const{
    return m_breaches_isSet;
}

bool OAIEvent_Insights_2016::is_breaches_Valid() const{
    return m_breaches_isValid;
}

QList<float> OAIEvent_Insights_2016::getCaptures() const {
    return m_captures;
}
void OAIEvent_Insights_2016::setCaptures(const QList<float> &captures) {
    m_captures = captures;
    m_captures_isSet = true;
}

bool OAIEvent_Insights_2016::is_captures_Set() const{
    return m_captures_isSet;
}

bool OAIEvent_Insights_2016::is_captures_Valid() const{
    return m_captures_isValid;
}

QList<float> OAIEvent_Insights_2016::getChallenges() const {
    return m_challenges;
}
void OAIEvent_Insights_2016::setChallenges(const QList<float> &challenges) {
    m_challenges = challenges;
    m_challenges_isSet = true;
}

bool OAIEvent_Insights_2016::is_challenges_Set() const{
    return m_challenges_isSet;
}

bool OAIEvent_Insights_2016::is_challenges_Valid() const{
    return m_challenges_isValid;
}

QList<QString> OAIEvent_Insights_2016::getHighScore() const {
    return m_high_score;
}
void OAIEvent_Insights_2016::setHighScore(const QList<QString> &high_score) {
    m_high_score = high_score;
    m_high_score_isSet = true;
}

bool OAIEvent_Insights_2016::is_high_score_Set() const{
    return m_high_score_isSet;
}

bool OAIEvent_Insights_2016::is_high_score_Valid() const{
    return m_high_score_isValid;
}

QList<float> OAIEvent_Insights_2016::getScales() const {
    return m_scales;
}
void OAIEvent_Insights_2016::setScales(const QList<float> &scales) {
    m_scales = scales;
    m_scales_isSet = true;
}

bool OAIEvent_Insights_2016::is_scales_Set() const{
    return m_scales_isSet;
}

bool OAIEvent_Insights_2016::is_scales_Valid() const{
    return m_scales_isValid;
}

bool OAIEvent_Insights_2016::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_a_cheval_de_frise.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_a_portcullis.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_b_moat.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_b_ramparts.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_c_drawbridge.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_c_sally_port.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_d_rock_wall.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_d_rough_terrain.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_low_bar.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_average_auto_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_average_boulder_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_average_crossing_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_average_foul_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_average_high_goals_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_average_low_goals_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_average_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_average_tower_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_average_win_margin_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_average_win_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_breaches.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_captures.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_challenges.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_high_score.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_scales.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEvent_Insights_2016::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_a_cheval_de_frise_isValid && m_a_portcullis_isValid && m_b_moat_isValid && m_b_ramparts_isValid && m_c_drawbridge_isValid && m_c_sally_port_isValid && m_d_rock_wall_isValid && m_d_rough_terrain_isValid && m_low_bar_isValid && m_average_auto_score_isValid && m_average_boulder_score_isValid && m_average_crossing_score_isValid && m_average_foul_score_isValid && m_average_high_goals_isValid && m_average_low_goals_isValid && m_average_score_isValid && m_average_tower_score_isValid && m_average_win_margin_isValid && m_average_win_score_isValid && m_breaches_isValid && m_captures_isValid && m_challenges_isValid && m_high_score_isValid && m_scales_isValid && true;
}

} // namespace OpenAPI
