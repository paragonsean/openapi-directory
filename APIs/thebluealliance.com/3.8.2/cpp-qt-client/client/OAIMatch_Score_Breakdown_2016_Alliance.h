/**
 * The Blue Alliance API v3
 * # Overview    Information and statistics about FIRST Robotics Competition teams and events.   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).
 *
 * The version of the OpenAPI document: 3.8.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIMatch_Score_Breakdown_2016_Alliance.h
 *
 * 
 */

#ifndef OAIMatch_Score_Breakdown_2016_Alliance_H
#define OAIMatch_Score_Breakdown_2016_Alliance_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIMatch_Score_Breakdown_2016_Alliance : public OAIObject {
public:
    OAIMatch_Score_Breakdown_2016_Alliance();
    OAIMatch_Score_Breakdown_2016_Alliance(QString json);
    ~OAIMatch_Score_Breakdown_2016_Alliance() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getAdjustPoints() const;
    void setAdjustPoints(const qint32 &adjust_points);
    bool is_adjust_points_Set() const;
    bool is_adjust_points_Valid() const;

    qint32 getAutoBoulderPoints() const;
    void setAutoBoulderPoints(const qint32 &auto_boulder_points);
    bool is_auto_boulder_points_Set() const;
    bool is_auto_boulder_points_Valid() const;

    qint32 getAutoBouldersHigh() const;
    void setAutoBouldersHigh(const qint32 &auto_boulders_high);
    bool is_auto_boulders_high_Set() const;
    bool is_auto_boulders_high_Valid() const;

    qint32 getAutoBouldersLow() const;
    void setAutoBouldersLow(const qint32 &auto_boulders_low);
    bool is_auto_boulders_low_Set() const;
    bool is_auto_boulders_low_Valid() const;

    qint32 getAutoCrossingPoints() const;
    void setAutoCrossingPoints(const qint32 &auto_crossing_points);
    bool is_auto_crossing_points_Set() const;
    bool is_auto_crossing_points_Valid() const;

    qint32 getAutoPoints() const;
    void setAutoPoints(const qint32 &auto_points);
    bool is_auto_points_Set() const;
    bool is_auto_points_Valid() const;

    qint32 getAutoReachPoints() const;
    void setAutoReachPoints(const qint32 &auto_reach_points);
    bool is_auto_reach_points_Set() const;
    bool is_auto_reach_points_Valid() const;

    qint32 getBreachPoints() const;
    void setBreachPoints(const qint32 &breach_points);
    bool is_breach_points_Set() const;
    bool is_breach_points_Valid() const;

    qint32 getCapturePoints() const;
    void setCapturePoints(const qint32 &capture_points);
    bool is_capture_points_Set() const;
    bool is_capture_points_Valid() const;

    qint32 getFoulCount() const;
    void setFoulCount(const qint32 &foul_count);
    bool is_foul_count_Set() const;
    bool is_foul_count_Valid() const;

    qint32 getFoulPoints() const;
    void setFoulPoints(const qint32 &foul_points);
    bool is_foul_points_Set() const;
    bool is_foul_points_Valid() const;

    qint32 getPosition1crossings() const;
    void setPosition1crossings(const qint32 &position1crossings);
    bool is_position1crossings_Set() const;
    bool is_position1crossings_Valid() const;

    QString getPosition2() const;
    void setPosition2(const QString &position2);
    bool is_position2_Set() const;
    bool is_position2_Valid() const;

    qint32 getPosition2crossings() const;
    void setPosition2crossings(const qint32 &position2crossings);
    bool is_position2crossings_Set() const;
    bool is_position2crossings_Valid() const;

    QString getPosition3() const;
    void setPosition3(const QString &position3);
    bool is_position3_Set() const;
    bool is_position3_Valid() const;

    qint32 getPosition3crossings() const;
    void setPosition3crossings(const qint32 &position3crossings);
    bool is_position3crossings_Set() const;
    bool is_position3crossings_Valid() const;

    QString getPosition4() const;
    void setPosition4(const QString &position4);
    bool is_position4_Set() const;
    bool is_position4_Valid() const;

    qint32 getPosition4crossings() const;
    void setPosition4crossings(const qint32 &position4crossings);
    bool is_position4crossings_Set() const;
    bool is_position4crossings_Valid() const;

    QString getPosition5() const;
    void setPosition5(const QString &position5);
    bool is_position5_Set() const;
    bool is_position5_Valid() const;

    qint32 getPosition5crossings() const;
    void setPosition5crossings(const qint32 &position5crossings);
    bool is_position5crossings_Set() const;
    bool is_position5crossings_Valid() const;

    QString getRobot1Auto() const;
    void setRobot1Auto(const QString &robot1_auto);
    bool is_robot1_auto_Set() const;
    bool is_robot1_auto_Valid() const;

    QString getRobot2Auto() const;
    void setRobot2Auto(const QString &robot2_auto);
    bool is_robot2_auto_Set() const;
    bool is_robot2_auto_Valid() const;

    QString getRobot3Auto() const;
    void setRobot3Auto(const QString &robot3_auto);
    bool is_robot3_auto_Set() const;
    bool is_robot3_auto_Valid() const;

    qint32 getTechFoulCount() const;
    void setTechFoulCount(const qint32 &tech_foul_count);
    bool is_tech_foul_count_Set() const;
    bool is_tech_foul_count_Valid() const;

    qint32 getTeleopBoulderPoints() const;
    void setTeleopBoulderPoints(const qint32 &teleop_boulder_points);
    bool is_teleop_boulder_points_Set() const;
    bool is_teleop_boulder_points_Valid() const;

    qint32 getTeleopBouldersHigh() const;
    void setTeleopBouldersHigh(const qint32 &teleop_boulders_high);
    bool is_teleop_boulders_high_Set() const;
    bool is_teleop_boulders_high_Valid() const;

    qint32 getTeleopBouldersLow() const;
    void setTeleopBouldersLow(const qint32 &teleop_boulders_low);
    bool is_teleop_boulders_low_Set() const;
    bool is_teleop_boulders_low_Valid() const;

    qint32 getTeleopChallengePoints() const;
    void setTeleopChallengePoints(const qint32 &teleop_challenge_points);
    bool is_teleop_challenge_points_Set() const;
    bool is_teleop_challenge_points_Valid() const;

    qint32 getTeleopCrossingPoints() const;
    void setTeleopCrossingPoints(const qint32 &teleop_crossing_points);
    bool is_teleop_crossing_points_Set() const;
    bool is_teleop_crossing_points_Valid() const;

    bool isTeleopDefensesBreached() const;
    void setTeleopDefensesBreached(const bool &teleop_defenses_breached);
    bool is_teleop_defenses_breached_Set() const;
    bool is_teleop_defenses_breached_Valid() const;

    qint32 getTeleopPoints() const;
    void setTeleopPoints(const qint32 &teleop_points);
    bool is_teleop_points_Set() const;
    bool is_teleop_points_Valid() const;

    qint32 getTeleopScalePoints() const;
    void setTeleopScalePoints(const qint32 &teleop_scale_points);
    bool is_teleop_scale_points_Set() const;
    bool is_teleop_scale_points_Valid() const;

    qint32 getTeleopTowerCaptured() const;
    void setTeleopTowerCaptured(const qint32 &teleop_tower_captured);
    bool is_teleop_tower_captured_Set() const;
    bool is_teleop_tower_captured_Valid() const;

    qint32 getTotalPoints() const;
    void setTotalPoints(const qint32 &total_points);
    bool is_total_points_Set() const;
    bool is_total_points_Valid() const;

    qint32 getTowerEndStrength() const;
    void setTowerEndStrength(const qint32 &tower_end_strength);
    bool is_tower_end_strength_Set() const;
    bool is_tower_end_strength_Valid() const;

    QString getTowerFaceA() const;
    void setTowerFaceA(const QString &tower_face_a);
    bool is_tower_face_a_Set() const;
    bool is_tower_face_a_Valid() const;

    QString getTowerFaceB() const;
    void setTowerFaceB(const QString &tower_face_b);
    bool is_tower_face_b_Set() const;
    bool is_tower_face_b_Valid() const;

    QString getTowerFaceC() const;
    void setTowerFaceC(const QString &tower_face_c);
    bool is_tower_face_c_Set() const;
    bool is_tower_face_c_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_adjust_points;
    bool m_adjust_points_isSet;
    bool m_adjust_points_isValid;

    qint32 m_auto_boulder_points;
    bool m_auto_boulder_points_isSet;
    bool m_auto_boulder_points_isValid;

    qint32 m_auto_boulders_high;
    bool m_auto_boulders_high_isSet;
    bool m_auto_boulders_high_isValid;

    qint32 m_auto_boulders_low;
    bool m_auto_boulders_low_isSet;
    bool m_auto_boulders_low_isValid;

    qint32 m_auto_crossing_points;
    bool m_auto_crossing_points_isSet;
    bool m_auto_crossing_points_isValid;

    qint32 m_auto_points;
    bool m_auto_points_isSet;
    bool m_auto_points_isValid;

    qint32 m_auto_reach_points;
    bool m_auto_reach_points_isSet;
    bool m_auto_reach_points_isValid;

    qint32 m_breach_points;
    bool m_breach_points_isSet;
    bool m_breach_points_isValid;

    qint32 m_capture_points;
    bool m_capture_points_isSet;
    bool m_capture_points_isValid;

    qint32 m_foul_count;
    bool m_foul_count_isSet;
    bool m_foul_count_isValid;

    qint32 m_foul_points;
    bool m_foul_points_isSet;
    bool m_foul_points_isValid;

    qint32 m_position1crossings;
    bool m_position1crossings_isSet;
    bool m_position1crossings_isValid;

    QString m_position2;
    bool m_position2_isSet;
    bool m_position2_isValid;

    qint32 m_position2crossings;
    bool m_position2crossings_isSet;
    bool m_position2crossings_isValid;

    QString m_position3;
    bool m_position3_isSet;
    bool m_position3_isValid;

    qint32 m_position3crossings;
    bool m_position3crossings_isSet;
    bool m_position3crossings_isValid;

    QString m_position4;
    bool m_position4_isSet;
    bool m_position4_isValid;

    qint32 m_position4crossings;
    bool m_position4crossings_isSet;
    bool m_position4crossings_isValid;

    QString m_position5;
    bool m_position5_isSet;
    bool m_position5_isValid;

    qint32 m_position5crossings;
    bool m_position5crossings_isSet;
    bool m_position5crossings_isValid;

    QString m_robot1_auto;
    bool m_robot1_auto_isSet;
    bool m_robot1_auto_isValid;

    QString m_robot2_auto;
    bool m_robot2_auto_isSet;
    bool m_robot2_auto_isValid;

    QString m_robot3_auto;
    bool m_robot3_auto_isSet;
    bool m_robot3_auto_isValid;

    qint32 m_tech_foul_count;
    bool m_tech_foul_count_isSet;
    bool m_tech_foul_count_isValid;

    qint32 m_teleop_boulder_points;
    bool m_teleop_boulder_points_isSet;
    bool m_teleop_boulder_points_isValid;

    qint32 m_teleop_boulders_high;
    bool m_teleop_boulders_high_isSet;
    bool m_teleop_boulders_high_isValid;

    qint32 m_teleop_boulders_low;
    bool m_teleop_boulders_low_isSet;
    bool m_teleop_boulders_low_isValid;

    qint32 m_teleop_challenge_points;
    bool m_teleop_challenge_points_isSet;
    bool m_teleop_challenge_points_isValid;

    qint32 m_teleop_crossing_points;
    bool m_teleop_crossing_points_isSet;
    bool m_teleop_crossing_points_isValid;

    bool m_teleop_defenses_breached;
    bool m_teleop_defenses_breached_isSet;
    bool m_teleop_defenses_breached_isValid;

    qint32 m_teleop_points;
    bool m_teleop_points_isSet;
    bool m_teleop_points_isValid;

    qint32 m_teleop_scale_points;
    bool m_teleop_scale_points_isSet;
    bool m_teleop_scale_points_isValid;

    qint32 m_teleop_tower_captured;
    bool m_teleop_tower_captured_isSet;
    bool m_teleop_tower_captured_isValid;

    qint32 m_total_points;
    bool m_total_points_isSet;
    bool m_total_points_isValid;

    qint32 m_tower_end_strength;
    bool m_tower_end_strength_isSet;
    bool m_tower_end_strength_isValid;

    QString m_tower_face_a;
    bool m_tower_face_a_isSet;
    bool m_tower_face_a_isValid;

    QString m_tower_face_b;
    bool m_tower_face_b_isSet;
    bool m_tower_face_b_isValid;

    QString m_tower_face_c;
    bool m_tower_face_c_isSet;
    bool m_tower_face_c_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIMatch_Score_Breakdown_2016_Alliance)

#endif // OAIMatch_Score_Breakdown_2016_Alliance_H
