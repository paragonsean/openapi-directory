/**
 * The Blue Alliance API v3
 * # Overview    Information and statistics about FIRST Robotics Competition teams and events.   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).
 *
 * The version of the OpenAPI document: 3.8.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIEvent_Insights_2016.h
 *
 * Insights for FIRST Stronghold qualification and elimination matches.
 */

#ifndef OAIEvent_Insights_2016_H
#define OAIEvent_Insights_2016_H

#include <QJsonObject>

#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIEvent_Insights_2016 : public OAIObject {
public:
    OAIEvent_Insights_2016();
    OAIEvent_Insights_2016(QString json);
    ~OAIEvent_Insights_2016() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<float> getAChevalDeFrise() const;
    void setAChevalDeFrise(const QList<float> &a_cheval_de_frise);
    bool is_a_cheval_de_frise_Set() const;
    bool is_a_cheval_de_frise_Valid() const;

    QList<float> getAPortcullis() const;
    void setAPortcullis(const QList<float> &a_portcullis);
    bool is_a_portcullis_Set() const;
    bool is_a_portcullis_Valid() const;

    QList<float> getBMoat() const;
    void setBMoat(const QList<float> &b_moat);
    bool is_b_moat_Set() const;
    bool is_b_moat_Valid() const;

    QList<float> getBRamparts() const;
    void setBRamparts(const QList<float> &b_ramparts);
    bool is_b_ramparts_Set() const;
    bool is_b_ramparts_Valid() const;

    QList<float> getCDrawbridge() const;
    void setCDrawbridge(const QList<float> &c_drawbridge);
    bool is_c_drawbridge_Set() const;
    bool is_c_drawbridge_Valid() const;

    QList<float> getCSallyPort() const;
    void setCSallyPort(const QList<float> &c_sally_port);
    bool is_c_sally_port_Set() const;
    bool is_c_sally_port_Valid() const;

    QList<float> getDRockWall() const;
    void setDRockWall(const QList<float> &d_rock_wall);
    bool is_d_rock_wall_Set() const;
    bool is_d_rock_wall_Valid() const;

    QList<float> getDRoughTerrain() const;
    void setDRoughTerrain(const QList<float> &d_rough_terrain);
    bool is_d_rough_terrain_Set() const;
    bool is_d_rough_terrain_Valid() const;

    QList<float> getLowBar() const;
    void setLowBar(const QList<float> &low_bar);
    bool is_low_bar_Set() const;
    bool is_low_bar_Valid() const;

    float getAverageAutoScore() const;
    void setAverageAutoScore(const float &average_auto_score);
    bool is_average_auto_score_Set() const;
    bool is_average_auto_score_Valid() const;

    float getAverageBoulderScore() const;
    void setAverageBoulderScore(const float &average_boulder_score);
    bool is_average_boulder_score_Set() const;
    bool is_average_boulder_score_Valid() const;

    float getAverageCrossingScore() const;
    void setAverageCrossingScore(const float &average_crossing_score);
    bool is_average_crossing_score_Set() const;
    bool is_average_crossing_score_Valid() const;

    float getAverageFoulScore() const;
    void setAverageFoulScore(const float &average_foul_score);
    bool is_average_foul_score_Set() const;
    bool is_average_foul_score_Valid() const;

    float getAverageHighGoals() const;
    void setAverageHighGoals(const float &average_high_goals);
    bool is_average_high_goals_Set() const;
    bool is_average_high_goals_Valid() const;

    float getAverageLowGoals() const;
    void setAverageLowGoals(const float &average_low_goals);
    bool is_average_low_goals_Set() const;
    bool is_average_low_goals_Valid() const;

    float getAverageScore() const;
    void setAverageScore(const float &average_score);
    bool is_average_score_Set() const;
    bool is_average_score_Valid() const;

    float getAverageTowerScore() const;
    void setAverageTowerScore(const float &average_tower_score);
    bool is_average_tower_score_Set() const;
    bool is_average_tower_score_Valid() const;

    float getAverageWinMargin() const;
    void setAverageWinMargin(const float &average_win_margin);
    bool is_average_win_margin_Set() const;
    bool is_average_win_margin_Valid() const;

    float getAverageWinScore() const;
    void setAverageWinScore(const float &average_win_score);
    bool is_average_win_score_Set() const;
    bool is_average_win_score_Valid() const;

    QList<float> getBreaches() const;
    void setBreaches(const QList<float> &breaches);
    bool is_breaches_Set() const;
    bool is_breaches_Valid() const;

    QList<float> getCaptures() const;
    void setCaptures(const QList<float> &captures);
    bool is_captures_Set() const;
    bool is_captures_Valid() const;

    QList<float> getChallenges() const;
    void setChallenges(const QList<float> &challenges);
    bool is_challenges_Set() const;
    bool is_challenges_Valid() const;

    QList<QString> getHighScore() const;
    void setHighScore(const QList<QString> &high_score);
    bool is_high_score_Set() const;
    bool is_high_score_Valid() const;

    QList<float> getScales() const;
    void setScales(const QList<float> &scales);
    bool is_scales_Set() const;
    bool is_scales_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<float> m_a_cheval_de_frise;
    bool m_a_cheval_de_frise_isSet;
    bool m_a_cheval_de_frise_isValid;

    QList<float> m_a_portcullis;
    bool m_a_portcullis_isSet;
    bool m_a_portcullis_isValid;

    QList<float> m_b_moat;
    bool m_b_moat_isSet;
    bool m_b_moat_isValid;

    QList<float> m_b_ramparts;
    bool m_b_ramparts_isSet;
    bool m_b_ramparts_isValid;

    QList<float> m_c_drawbridge;
    bool m_c_drawbridge_isSet;
    bool m_c_drawbridge_isValid;

    QList<float> m_c_sally_port;
    bool m_c_sally_port_isSet;
    bool m_c_sally_port_isValid;

    QList<float> m_d_rock_wall;
    bool m_d_rock_wall_isSet;
    bool m_d_rock_wall_isValid;

    QList<float> m_d_rough_terrain;
    bool m_d_rough_terrain_isSet;
    bool m_d_rough_terrain_isValid;

    QList<float> m_low_bar;
    bool m_low_bar_isSet;
    bool m_low_bar_isValid;

    float m_average_auto_score;
    bool m_average_auto_score_isSet;
    bool m_average_auto_score_isValid;

    float m_average_boulder_score;
    bool m_average_boulder_score_isSet;
    bool m_average_boulder_score_isValid;

    float m_average_crossing_score;
    bool m_average_crossing_score_isSet;
    bool m_average_crossing_score_isValid;

    float m_average_foul_score;
    bool m_average_foul_score_isSet;
    bool m_average_foul_score_isValid;

    float m_average_high_goals;
    bool m_average_high_goals_isSet;
    bool m_average_high_goals_isValid;

    float m_average_low_goals;
    bool m_average_low_goals_isSet;
    bool m_average_low_goals_isValid;

    float m_average_score;
    bool m_average_score_isSet;
    bool m_average_score_isValid;

    float m_average_tower_score;
    bool m_average_tower_score_isSet;
    bool m_average_tower_score_isValid;

    float m_average_win_margin;
    bool m_average_win_margin_isSet;
    bool m_average_win_margin_isValid;

    float m_average_win_score;
    bool m_average_win_score_isSet;
    bool m_average_win_score_isValid;

    QList<float> m_breaches;
    bool m_breaches_isSet;
    bool m_breaches_isValid;

    QList<float> m_captures;
    bool m_captures_isSet;
    bool m_captures_isValid;

    QList<float> m_challenges;
    bool m_challenges_isSet;
    bool m_challenges_isValid;

    QList<QString> m_high_score;
    bool m_high_score_isSet;
    bool m_high_score_isValid;

    QList<float> m_scales;
    bool m_scales_isSet;
    bool m_scales_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIEvent_Insights_2016)

#endif // OAIEvent_Insights_2016_H
