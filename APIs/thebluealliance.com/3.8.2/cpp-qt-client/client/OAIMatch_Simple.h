/**
 * The Blue Alliance API v3
 * # Overview    Information and statistics about FIRST Robotics Competition teams and events.   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).
 *
 * The version of the OpenAPI document: 3.8.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIMatch_Simple.h
 *
 * 
 */

#ifndef OAIMatch_Simple_H
#define OAIMatch_Simple_H

#include <QJsonObject>

#include "OAIMatch_alliances.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIMatch_alliances;

class OAIMatch_Simple : public OAIObject {
public:
    OAIMatch_Simple();
    OAIMatch_Simple(QString json);
    ~OAIMatch_Simple() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint64 getActualTime() const;
    void setActualTime(const qint64 &actual_time);
    bool is_actual_time_Set() const;
    bool is_actual_time_Valid() const;

    OAIMatch_alliances getAlliances() const;
    void setAlliances(const OAIMatch_alliances &alliances);
    bool is_alliances_Set() const;
    bool is_alliances_Valid() const;

    QString getCompLevel() const;
    void setCompLevel(const QString &comp_level);
    bool is_comp_level_Set() const;
    bool is_comp_level_Valid() const;

    QString getEventKey() const;
    void setEventKey(const QString &event_key);
    bool is_event_key_Set() const;
    bool is_event_key_Valid() const;

    QString getKey() const;
    void setKey(const QString &key);
    bool is_key_Set() const;
    bool is_key_Valid() const;

    qint32 getMatchNumber() const;
    void setMatchNumber(const qint32 &match_number);
    bool is_match_number_Set() const;
    bool is_match_number_Valid() const;

    qint64 getPredictedTime() const;
    void setPredictedTime(const qint64 &predicted_time);
    bool is_predicted_time_Set() const;
    bool is_predicted_time_Valid() const;

    qint32 getSetNumber() const;
    void setSetNumber(const qint32 &set_number);
    bool is_set_number_Set() const;
    bool is_set_number_Valid() const;

    qint64 getTime() const;
    void setTime(const qint64 &time);
    bool is_time_Set() const;
    bool is_time_Valid() const;

    QString getWinningAlliance() const;
    void setWinningAlliance(const QString &winning_alliance);
    bool is_winning_alliance_Set() const;
    bool is_winning_alliance_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint64 m_actual_time;
    bool m_actual_time_isSet;
    bool m_actual_time_isValid;

    OAIMatch_alliances m_alliances;
    bool m_alliances_isSet;
    bool m_alliances_isValid;

    QString m_comp_level;
    bool m_comp_level_isSet;
    bool m_comp_level_isValid;

    QString m_event_key;
    bool m_event_key_isSet;
    bool m_event_key_isValid;

    QString m_key;
    bool m_key_isSet;
    bool m_key_isValid;

    qint32 m_match_number;
    bool m_match_number_isSet;
    bool m_match_number_isValid;

    qint64 m_predicted_time;
    bool m_predicted_time_isSet;
    bool m_predicted_time_isValid;

    qint32 m_set_number;
    bool m_set_number_isSet;
    bool m_set_number_isValid;

    qint64 m_time;
    bool m_time_isSet;
    bool m_time_isValid;

    QString m_winning_alliance;
    bool m_winning_alliance_isSet;
    bool m_winning_alliance_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIMatch_Simple)

#endif // OAIMatch_Simple_H
