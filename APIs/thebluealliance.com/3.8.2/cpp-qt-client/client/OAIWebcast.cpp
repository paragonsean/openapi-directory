/**
 * The Blue Alliance API v3
 * # Overview    Information and statistics about FIRST Robotics Competition teams and events.   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).
 *
 * The version of the OpenAPI document: 3.8.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWebcast.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWebcast::OAIWebcast(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWebcast::OAIWebcast() {
    this->initializeModel();
}

OAIWebcast::~OAIWebcast() {}

void OAIWebcast::initializeModel() {

    m_channel_isSet = false;
    m_channel_isValid = false;

    m_date_isSet = false;
    m_date_isValid = false;

    m_file_isSet = false;
    m_file_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIWebcast::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWebcast::fromJsonObject(QJsonObject json) {

    m_channel_isValid = ::OpenAPI::fromJsonValue(m_channel, json[QString("channel")]);
    m_channel_isSet = !json[QString("channel")].isNull() && m_channel_isValid;

    m_date_isValid = ::OpenAPI::fromJsonValue(m_date, json[QString("date")]);
    m_date_isSet = !json[QString("date")].isNull() && m_date_isValid;

    m_file_isValid = ::OpenAPI::fromJsonValue(m_file, json[QString("file")]);
    m_file_isSet = !json[QString("file")].isNull() && m_file_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIWebcast::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWebcast::asJsonObject() const {
    QJsonObject obj;
    if (m_channel_isSet) {
        obj.insert(QString("channel"), ::OpenAPI::toJsonValue(m_channel));
    }
    if (m_date_isSet) {
        obj.insert(QString("date"), ::OpenAPI::toJsonValue(m_date));
    }
    if (m_file_isSet) {
        obj.insert(QString("file"), ::OpenAPI::toJsonValue(m_file));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIWebcast::getChannel() const {
    return m_channel;
}
void OAIWebcast::setChannel(const QString &channel) {
    m_channel = channel;
    m_channel_isSet = true;
}

bool OAIWebcast::is_channel_Set() const{
    return m_channel_isSet;
}

bool OAIWebcast::is_channel_Valid() const{
    return m_channel_isValid;
}

QString OAIWebcast::getDate() const {
    return m_date;
}
void OAIWebcast::setDate(const QString &date) {
    m_date = date;
    m_date_isSet = true;
}

bool OAIWebcast::is_date_Set() const{
    return m_date_isSet;
}

bool OAIWebcast::is_date_Valid() const{
    return m_date_isValid;
}

QString OAIWebcast::getFile() const {
    return m_file;
}
void OAIWebcast::setFile(const QString &file) {
    m_file = file;
    m_file_isSet = true;
}

bool OAIWebcast::is_file_Set() const{
    return m_file_isSet;
}

bool OAIWebcast::is_file_Valid() const{
    return m_file_isValid;
}

QString OAIWebcast::getType() const {
    return m_type;
}
void OAIWebcast::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIWebcast::is_type_Set() const{
    return m_type_isSet;
}

bool OAIWebcast::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIWebcast::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_channel_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWebcast::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_channel_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
