/**
 * The Blue Alliance API v3
 * # Overview    Information and statistics about FIRST Robotics Competition teams and events.   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).
 *
 * The version of the OpenAPI document: 3.8.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDistrict_Ranking_event_points_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDistrict_Ranking_event_points_inner::OAIDistrict_Ranking_event_points_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDistrict_Ranking_event_points_inner::OAIDistrict_Ranking_event_points_inner() {
    this->initializeModel();
}

OAIDistrict_Ranking_event_points_inner::~OAIDistrict_Ranking_event_points_inner() {}

void OAIDistrict_Ranking_event_points_inner::initializeModel() {

    m_alliance_points_isSet = false;
    m_alliance_points_isValid = false;

    m_award_points_isSet = false;
    m_award_points_isValid = false;

    m_district_cmp_isSet = false;
    m_district_cmp_isValid = false;

    m_elim_points_isSet = false;
    m_elim_points_isValid = false;

    m_event_key_isSet = false;
    m_event_key_isValid = false;

    m_qual_points_isSet = false;
    m_qual_points_isValid = false;

    m_total_isSet = false;
    m_total_isValid = false;
}

void OAIDistrict_Ranking_event_points_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDistrict_Ranking_event_points_inner::fromJsonObject(QJsonObject json) {

    m_alliance_points_isValid = ::OpenAPI::fromJsonValue(m_alliance_points, json[QString("alliance_points")]);
    m_alliance_points_isSet = !json[QString("alliance_points")].isNull() && m_alliance_points_isValid;

    m_award_points_isValid = ::OpenAPI::fromJsonValue(m_award_points, json[QString("award_points")]);
    m_award_points_isSet = !json[QString("award_points")].isNull() && m_award_points_isValid;

    m_district_cmp_isValid = ::OpenAPI::fromJsonValue(m_district_cmp, json[QString("district_cmp")]);
    m_district_cmp_isSet = !json[QString("district_cmp")].isNull() && m_district_cmp_isValid;

    m_elim_points_isValid = ::OpenAPI::fromJsonValue(m_elim_points, json[QString("elim_points")]);
    m_elim_points_isSet = !json[QString("elim_points")].isNull() && m_elim_points_isValid;

    m_event_key_isValid = ::OpenAPI::fromJsonValue(m_event_key, json[QString("event_key")]);
    m_event_key_isSet = !json[QString("event_key")].isNull() && m_event_key_isValid;

    m_qual_points_isValid = ::OpenAPI::fromJsonValue(m_qual_points, json[QString("qual_points")]);
    m_qual_points_isSet = !json[QString("qual_points")].isNull() && m_qual_points_isValid;

    m_total_isValid = ::OpenAPI::fromJsonValue(m_total, json[QString("total")]);
    m_total_isSet = !json[QString("total")].isNull() && m_total_isValid;
}

QString OAIDistrict_Ranking_event_points_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDistrict_Ranking_event_points_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_alliance_points_isSet) {
        obj.insert(QString("alliance_points"), ::OpenAPI::toJsonValue(m_alliance_points));
    }
    if (m_award_points_isSet) {
        obj.insert(QString("award_points"), ::OpenAPI::toJsonValue(m_award_points));
    }
    if (m_district_cmp_isSet) {
        obj.insert(QString("district_cmp"), ::OpenAPI::toJsonValue(m_district_cmp));
    }
    if (m_elim_points_isSet) {
        obj.insert(QString("elim_points"), ::OpenAPI::toJsonValue(m_elim_points));
    }
    if (m_event_key_isSet) {
        obj.insert(QString("event_key"), ::OpenAPI::toJsonValue(m_event_key));
    }
    if (m_qual_points_isSet) {
        obj.insert(QString("qual_points"), ::OpenAPI::toJsonValue(m_qual_points));
    }
    if (m_total_isSet) {
        obj.insert(QString("total"), ::OpenAPI::toJsonValue(m_total));
    }
    return obj;
}

qint32 OAIDistrict_Ranking_event_points_inner::getAlliancePoints() const {
    return m_alliance_points;
}
void OAIDistrict_Ranking_event_points_inner::setAlliancePoints(const qint32 &alliance_points) {
    m_alliance_points = alliance_points;
    m_alliance_points_isSet = true;
}

bool OAIDistrict_Ranking_event_points_inner::is_alliance_points_Set() const{
    return m_alliance_points_isSet;
}

bool OAIDistrict_Ranking_event_points_inner::is_alliance_points_Valid() const{
    return m_alliance_points_isValid;
}

qint32 OAIDistrict_Ranking_event_points_inner::getAwardPoints() const {
    return m_award_points;
}
void OAIDistrict_Ranking_event_points_inner::setAwardPoints(const qint32 &award_points) {
    m_award_points = award_points;
    m_award_points_isSet = true;
}

bool OAIDistrict_Ranking_event_points_inner::is_award_points_Set() const{
    return m_award_points_isSet;
}

bool OAIDistrict_Ranking_event_points_inner::is_award_points_Valid() const{
    return m_award_points_isValid;
}

bool OAIDistrict_Ranking_event_points_inner::isDistrictCmp() const {
    return m_district_cmp;
}
void OAIDistrict_Ranking_event_points_inner::setDistrictCmp(const bool &district_cmp) {
    m_district_cmp = district_cmp;
    m_district_cmp_isSet = true;
}

bool OAIDistrict_Ranking_event_points_inner::is_district_cmp_Set() const{
    return m_district_cmp_isSet;
}

bool OAIDistrict_Ranking_event_points_inner::is_district_cmp_Valid() const{
    return m_district_cmp_isValid;
}

qint32 OAIDistrict_Ranking_event_points_inner::getElimPoints() const {
    return m_elim_points;
}
void OAIDistrict_Ranking_event_points_inner::setElimPoints(const qint32 &elim_points) {
    m_elim_points = elim_points;
    m_elim_points_isSet = true;
}

bool OAIDistrict_Ranking_event_points_inner::is_elim_points_Set() const{
    return m_elim_points_isSet;
}

bool OAIDistrict_Ranking_event_points_inner::is_elim_points_Valid() const{
    return m_elim_points_isValid;
}

QString OAIDistrict_Ranking_event_points_inner::getEventKey() const {
    return m_event_key;
}
void OAIDistrict_Ranking_event_points_inner::setEventKey(const QString &event_key) {
    m_event_key = event_key;
    m_event_key_isSet = true;
}

bool OAIDistrict_Ranking_event_points_inner::is_event_key_Set() const{
    return m_event_key_isSet;
}

bool OAIDistrict_Ranking_event_points_inner::is_event_key_Valid() const{
    return m_event_key_isValid;
}

qint32 OAIDistrict_Ranking_event_points_inner::getQualPoints() const {
    return m_qual_points;
}
void OAIDistrict_Ranking_event_points_inner::setQualPoints(const qint32 &qual_points) {
    m_qual_points = qual_points;
    m_qual_points_isSet = true;
}

bool OAIDistrict_Ranking_event_points_inner::is_qual_points_Set() const{
    return m_qual_points_isSet;
}

bool OAIDistrict_Ranking_event_points_inner::is_qual_points_Valid() const{
    return m_qual_points_isValid;
}

qint32 OAIDistrict_Ranking_event_points_inner::getTotal() const {
    return m_total;
}
void OAIDistrict_Ranking_event_points_inner::setTotal(const qint32 &total) {
    m_total = total;
    m_total_isSet = true;
}

bool OAIDistrict_Ranking_event_points_inner::is_total_Set() const{
    return m_total_isSet;
}

bool OAIDistrict_Ranking_event_points_inner::is_total_Valid() const{
    return m_total_isValid;
}

bool OAIDistrict_Ranking_event_points_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_alliance_points_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_award_points_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_district_cmp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_elim_points_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_qual_points_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDistrict_Ranking_event_points_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_alliance_points_isValid && m_award_points_isValid && m_district_cmp_isValid && m_elim_points_isValid && m_event_key_isValid && m_qual_points_isValid && m_total_isValid && true;
}

} // namespace OpenAPI
