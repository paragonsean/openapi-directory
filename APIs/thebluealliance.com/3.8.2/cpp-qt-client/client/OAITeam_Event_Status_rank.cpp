/**
 * The Blue Alliance API v3
 * # Overview    Information and statistics about FIRST Robotics Competition teams and events.   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).
 *
 * The version of the OpenAPI document: 3.8.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITeam_Event_Status_rank.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITeam_Event_Status_rank::OAITeam_Event_Status_rank(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITeam_Event_Status_rank::OAITeam_Event_Status_rank() {
    this->initializeModel();
}

OAITeam_Event_Status_rank::~OAITeam_Event_Status_rank() {}

void OAITeam_Event_Status_rank::initializeModel() {

    m_num_teams_isSet = false;
    m_num_teams_isValid = false;

    m_ranking_isSet = false;
    m_ranking_isValid = false;

    m_sort_order_info_isSet = false;
    m_sort_order_info_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAITeam_Event_Status_rank::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITeam_Event_Status_rank::fromJsonObject(QJsonObject json) {

    m_num_teams_isValid = ::OpenAPI::fromJsonValue(m_num_teams, json[QString("num_teams")]);
    m_num_teams_isSet = !json[QString("num_teams")].isNull() && m_num_teams_isValid;

    m_ranking_isValid = ::OpenAPI::fromJsonValue(m_ranking, json[QString("ranking")]);
    m_ranking_isSet = !json[QString("ranking")].isNull() && m_ranking_isValid;

    m_sort_order_info_isValid = ::OpenAPI::fromJsonValue(m_sort_order_info, json[QString("sort_order_info")]);
    m_sort_order_info_isSet = !json[QString("sort_order_info")].isNull() && m_sort_order_info_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAITeam_Event_Status_rank::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITeam_Event_Status_rank::asJsonObject() const {
    QJsonObject obj;
    if (m_num_teams_isSet) {
        obj.insert(QString("num_teams"), ::OpenAPI::toJsonValue(m_num_teams));
    }
    if (m_ranking.isSet()) {
        obj.insert(QString("ranking"), ::OpenAPI::toJsonValue(m_ranking));
    }
    if (m_sort_order_info.size() > 0) {
        obj.insert(QString("sort_order_info"), ::OpenAPI::toJsonValue(m_sort_order_info));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

qint32 OAITeam_Event_Status_rank::getNumTeams() const {
    return m_num_teams;
}
void OAITeam_Event_Status_rank::setNumTeams(const qint32 &num_teams) {
    m_num_teams = num_teams;
    m_num_teams_isSet = true;
}

bool OAITeam_Event_Status_rank::is_num_teams_Set() const{
    return m_num_teams_isSet;
}

bool OAITeam_Event_Status_rank::is_num_teams_Valid() const{
    return m_num_teams_isValid;
}

OAITeam_Event_Status_rank_ranking OAITeam_Event_Status_rank::getRanking() const {
    return m_ranking;
}
void OAITeam_Event_Status_rank::setRanking(const OAITeam_Event_Status_rank_ranking &ranking) {
    m_ranking = ranking;
    m_ranking_isSet = true;
}

bool OAITeam_Event_Status_rank::is_ranking_Set() const{
    return m_ranking_isSet;
}

bool OAITeam_Event_Status_rank::is_ranking_Valid() const{
    return m_ranking_isValid;
}

QList<OAITeam_Event_Status_rank_sort_order_info_inner> OAITeam_Event_Status_rank::getSortOrderInfo() const {
    return m_sort_order_info;
}
void OAITeam_Event_Status_rank::setSortOrderInfo(const QList<OAITeam_Event_Status_rank_sort_order_info_inner> &sort_order_info) {
    m_sort_order_info = sort_order_info;
    m_sort_order_info_isSet = true;
}

bool OAITeam_Event_Status_rank::is_sort_order_info_Set() const{
    return m_sort_order_info_isSet;
}

bool OAITeam_Event_Status_rank::is_sort_order_info_Valid() const{
    return m_sort_order_info_isValid;
}

QString OAITeam_Event_Status_rank::getStatus() const {
    return m_status;
}
void OAITeam_Event_Status_rank::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAITeam_Event_Status_rank::is_status_Set() const{
    return m_status_isSet;
}

bool OAITeam_Event_Status_rank::is_status_Valid() const{
    return m_status_isValid;
}

bool OAITeam_Event_Status_rank::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_num_teams_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ranking.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sort_order_info.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITeam_Event_Status_rank::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
