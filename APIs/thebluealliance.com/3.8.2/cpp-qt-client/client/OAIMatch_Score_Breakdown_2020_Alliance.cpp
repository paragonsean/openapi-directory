/**
 * The Blue Alliance API v3
 * # Overview    Information and statistics about FIRST Robotics Competition teams and events.   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).
 *
 * The version of the OpenAPI document: 3.8.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMatch_Score_Breakdown_2020_Alliance.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMatch_Score_Breakdown_2020_Alliance::OAIMatch_Score_Breakdown_2020_Alliance(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMatch_Score_Breakdown_2020_Alliance::OAIMatch_Score_Breakdown_2020_Alliance() {
    this->initializeModel();
}

OAIMatch_Score_Breakdown_2020_Alliance::~OAIMatch_Score_Breakdown_2020_Alliance() {}

void OAIMatch_Score_Breakdown_2020_Alliance::initializeModel() {

    m_adjust_points_isSet = false;
    m_adjust_points_isValid = false;

    m_auto_cell_points_isSet = false;
    m_auto_cell_points_isValid = false;

    m_auto_cells_bottom_isSet = false;
    m_auto_cells_bottom_isValid = false;

    m_auto_cells_inner_isSet = false;
    m_auto_cells_inner_isValid = false;

    m_auto_cells_outer_isSet = false;
    m_auto_cells_outer_isValid = false;

    m_auto_init_line_points_isSet = false;
    m_auto_init_line_points_isValid = false;

    m_auto_points_isSet = false;
    m_auto_points_isValid = false;

    m_control_panel_points_isSet = false;
    m_control_panel_points_isValid = false;

    m_endgame_points_isSet = false;
    m_endgame_points_isValid = false;

    m_endgame_robot1_isSet = false;
    m_endgame_robot1_isValid = false;

    m_endgame_robot2_isSet = false;
    m_endgame_robot2_isValid = false;

    m_endgame_robot3_isSet = false;
    m_endgame_robot3_isValid = false;

    m_endgame_rung_is_level_isSet = false;
    m_endgame_rung_is_level_isValid = false;

    m_foul_count_isSet = false;
    m_foul_count_isValid = false;

    m_foul_points_isSet = false;
    m_foul_points_isValid = false;

    m_init_line_robot1_isSet = false;
    m_init_line_robot1_isValid = false;

    m_init_line_robot2_isSet = false;
    m_init_line_robot2_isValid = false;

    m_init_line_robot3_isSet = false;
    m_init_line_robot3_isValid = false;

    m_rp_isSet = false;
    m_rp_isValid = false;

    m_shield_energized_ranking_point_isSet = false;
    m_shield_energized_ranking_point_isValid = false;

    m_shield_operational_ranking_point_isSet = false;
    m_shield_operational_ranking_point_isValid = false;

    m_stage1_activated_isSet = false;
    m_stage1_activated_isValid = false;

    m_stage2_activated_isSet = false;
    m_stage2_activated_isValid = false;

    m_stage3_activated_isSet = false;
    m_stage3_activated_isValid = false;

    m_stage3_target_color_isSet = false;
    m_stage3_target_color_isValid = false;

    m_tba_num_robots_hanging_isSet = false;
    m_tba_num_robots_hanging_isValid = false;

    m_tba_shield_energized_ranking_point_from_foul_isSet = false;
    m_tba_shield_energized_ranking_point_from_foul_isValid = false;

    m_tech_foul_count_isSet = false;
    m_tech_foul_count_isValid = false;

    m_teleop_cell_points_isSet = false;
    m_teleop_cell_points_isValid = false;

    m_teleop_cells_bottom_isSet = false;
    m_teleop_cells_bottom_isValid = false;

    m_teleop_cells_inner_isSet = false;
    m_teleop_cells_inner_isValid = false;

    m_teleop_cells_outer_isSet = false;
    m_teleop_cells_outer_isValid = false;

    m_teleop_points_isSet = false;
    m_teleop_points_isValid = false;

    m_total_points_isSet = false;
    m_total_points_isValid = false;
}

void OAIMatch_Score_Breakdown_2020_Alliance::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMatch_Score_Breakdown_2020_Alliance::fromJsonObject(QJsonObject json) {

    m_adjust_points_isValid = ::OpenAPI::fromJsonValue(m_adjust_points, json[QString("adjustPoints")]);
    m_adjust_points_isSet = !json[QString("adjustPoints")].isNull() && m_adjust_points_isValid;

    m_auto_cell_points_isValid = ::OpenAPI::fromJsonValue(m_auto_cell_points, json[QString("autoCellPoints")]);
    m_auto_cell_points_isSet = !json[QString("autoCellPoints")].isNull() && m_auto_cell_points_isValid;

    m_auto_cells_bottom_isValid = ::OpenAPI::fromJsonValue(m_auto_cells_bottom, json[QString("autoCellsBottom")]);
    m_auto_cells_bottom_isSet = !json[QString("autoCellsBottom")].isNull() && m_auto_cells_bottom_isValid;

    m_auto_cells_inner_isValid = ::OpenAPI::fromJsonValue(m_auto_cells_inner, json[QString("autoCellsInner")]);
    m_auto_cells_inner_isSet = !json[QString("autoCellsInner")].isNull() && m_auto_cells_inner_isValid;

    m_auto_cells_outer_isValid = ::OpenAPI::fromJsonValue(m_auto_cells_outer, json[QString("autoCellsOuter")]);
    m_auto_cells_outer_isSet = !json[QString("autoCellsOuter")].isNull() && m_auto_cells_outer_isValid;

    m_auto_init_line_points_isValid = ::OpenAPI::fromJsonValue(m_auto_init_line_points, json[QString("autoInitLinePoints")]);
    m_auto_init_line_points_isSet = !json[QString("autoInitLinePoints")].isNull() && m_auto_init_line_points_isValid;

    m_auto_points_isValid = ::OpenAPI::fromJsonValue(m_auto_points, json[QString("autoPoints")]);
    m_auto_points_isSet = !json[QString("autoPoints")].isNull() && m_auto_points_isValid;

    m_control_panel_points_isValid = ::OpenAPI::fromJsonValue(m_control_panel_points, json[QString("controlPanelPoints")]);
    m_control_panel_points_isSet = !json[QString("controlPanelPoints")].isNull() && m_control_panel_points_isValid;

    m_endgame_points_isValid = ::OpenAPI::fromJsonValue(m_endgame_points, json[QString("endgamePoints")]);
    m_endgame_points_isSet = !json[QString("endgamePoints")].isNull() && m_endgame_points_isValid;

    m_endgame_robot1_isValid = ::OpenAPI::fromJsonValue(m_endgame_robot1, json[QString("endgameRobot1")]);
    m_endgame_robot1_isSet = !json[QString("endgameRobot1")].isNull() && m_endgame_robot1_isValid;

    m_endgame_robot2_isValid = ::OpenAPI::fromJsonValue(m_endgame_robot2, json[QString("endgameRobot2")]);
    m_endgame_robot2_isSet = !json[QString("endgameRobot2")].isNull() && m_endgame_robot2_isValid;

    m_endgame_robot3_isValid = ::OpenAPI::fromJsonValue(m_endgame_robot3, json[QString("endgameRobot3")]);
    m_endgame_robot3_isSet = !json[QString("endgameRobot3")].isNull() && m_endgame_robot3_isValid;

    m_endgame_rung_is_level_isValid = ::OpenAPI::fromJsonValue(m_endgame_rung_is_level, json[QString("endgameRungIsLevel")]);
    m_endgame_rung_is_level_isSet = !json[QString("endgameRungIsLevel")].isNull() && m_endgame_rung_is_level_isValid;

    m_foul_count_isValid = ::OpenAPI::fromJsonValue(m_foul_count, json[QString("foulCount")]);
    m_foul_count_isSet = !json[QString("foulCount")].isNull() && m_foul_count_isValid;

    m_foul_points_isValid = ::OpenAPI::fromJsonValue(m_foul_points, json[QString("foulPoints")]);
    m_foul_points_isSet = !json[QString("foulPoints")].isNull() && m_foul_points_isValid;

    m_init_line_robot1_isValid = ::OpenAPI::fromJsonValue(m_init_line_robot1, json[QString("initLineRobot1")]);
    m_init_line_robot1_isSet = !json[QString("initLineRobot1")].isNull() && m_init_line_robot1_isValid;

    m_init_line_robot2_isValid = ::OpenAPI::fromJsonValue(m_init_line_robot2, json[QString("initLineRobot2")]);
    m_init_line_robot2_isSet = !json[QString("initLineRobot2")].isNull() && m_init_line_robot2_isValid;

    m_init_line_robot3_isValid = ::OpenAPI::fromJsonValue(m_init_line_robot3, json[QString("initLineRobot3")]);
    m_init_line_robot3_isSet = !json[QString("initLineRobot3")].isNull() && m_init_line_robot3_isValid;

    m_rp_isValid = ::OpenAPI::fromJsonValue(m_rp, json[QString("rp")]);
    m_rp_isSet = !json[QString("rp")].isNull() && m_rp_isValid;

    m_shield_energized_ranking_point_isValid = ::OpenAPI::fromJsonValue(m_shield_energized_ranking_point, json[QString("shieldEnergizedRankingPoint")]);
    m_shield_energized_ranking_point_isSet = !json[QString("shieldEnergizedRankingPoint")].isNull() && m_shield_energized_ranking_point_isValid;

    m_shield_operational_ranking_point_isValid = ::OpenAPI::fromJsonValue(m_shield_operational_ranking_point, json[QString("shieldOperationalRankingPoint")]);
    m_shield_operational_ranking_point_isSet = !json[QString("shieldOperationalRankingPoint")].isNull() && m_shield_operational_ranking_point_isValid;

    m_stage1_activated_isValid = ::OpenAPI::fromJsonValue(m_stage1_activated, json[QString("stage1Activated")]);
    m_stage1_activated_isSet = !json[QString("stage1Activated")].isNull() && m_stage1_activated_isValid;

    m_stage2_activated_isValid = ::OpenAPI::fromJsonValue(m_stage2_activated, json[QString("stage2Activated")]);
    m_stage2_activated_isSet = !json[QString("stage2Activated")].isNull() && m_stage2_activated_isValid;

    m_stage3_activated_isValid = ::OpenAPI::fromJsonValue(m_stage3_activated, json[QString("stage3Activated")]);
    m_stage3_activated_isSet = !json[QString("stage3Activated")].isNull() && m_stage3_activated_isValid;

    m_stage3_target_color_isValid = ::OpenAPI::fromJsonValue(m_stage3_target_color, json[QString("stage3TargetColor")]);
    m_stage3_target_color_isSet = !json[QString("stage3TargetColor")].isNull() && m_stage3_target_color_isValid;

    m_tba_num_robots_hanging_isValid = ::OpenAPI::fromJsonValue(m_tba_num_robots_hanging, json[QString("tba_numRobotsHanging")]);
    m_tba_num_robots_hanging_isSet = !json[QString("tba_numRobotsHanging")].isNull() && m_tba_num_robots_hanging_isValid;

    m_tba_shield_energized_ranking_point_from_foul_isValid = ::OpenAPI::fromJsonValue(m_tba_shield_energized_ranking_point_from_foul, json[QString("tba_shieldEnergizedRankingPointFromFoul")]);
    m_tba_shield_energized_ranking_point_from_foul_isSet = !json[QString("tba_shieldEnergizedRankingPointFromFoul")].isNull() && m_tba_shield_energized_ranking_point_from_foul_isValid;

    m_tech_foul_count_isValid = ::OpenAPI::fromJsonValue(m_tech_foul_count, json[QString("techFoulCount")]);
    m_tech_foul_count_isSet = !json[QString("techFoulCount")].isNull() && m_tech_foul_count_isValid;

    m_teleop_cell_points_isValid = ::OpenAPI::fromJsonValue(m_teleop_cell_points, json[QString("teleopCellPoints")]);
    m_teleop_cell_points_isSet = !json[QString("teleopCellPoints")].isNull() && m_teleop_cell_points_isValid;

    m_teleop_cells_bottom_isValid = ::OpenAPI::fromJsonValue(m_teleop_cells_bottom, json[QString("teleopCellsBottom")]);
    m_teleop_cells_bottom_isSet = !json[QString("teleopCellsBottom")].isNull() && m_teleop_cells_bottom_isValid;

    m_teleop_cells_inner_isValid = ::OpenAPI::fromJsonValue(m_teleop_cells_inner, json[QString("teleopCellsInner")]);
    m_teleop_cells_inner_isSet = !json[QString("teleopCellsInner")].isNull() && m_teleop_cells_inner_isValid;

    m_teleop_cells_outer_isValid = ::OpenAPI::fromJsonValue(m_teleop_cells_outer, json[QString("teleopCellsOuter")]);
    m_teleop_cells_outer_isSet = !json[QString("teleopCellsOuter")].isNull() && m_teleop_cells_outer_isValid;

    m_teleop_points_isValid = ::OpenAPI::fromJsonValue(m_teleop_points, json[QString("teleopPoints")]);
    m_teleop_points_isSet = !json[QString("teleopPoints")].isNull() && m_teleop_points_isValid;

    m_total_points_isValid = ::OpenAPI::fromJsonValue(m_total_points, json[QString("totalPoints")]);
    m_total_points_isSet = !json[QString("totalPoints")].isNull() && m_total_points_isValid;
}

QString OAIMatch_Score_Breakdown_2020_Alliance::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMatch_Score_Breakdown_2020_Alliance::asJsonObject() const {
    QJsonObject obj;
    if (m_adjust_points_isSet) {
        obj.insert(QString("adjustPoints"), ::OpenAPI::toJsonValue(m_adjust_points));
    }
    if (m_auto_cell_points_isSet) {
        obj.insert(QString("autoCellPoints"), ::OpenAPI::toJsonValue(m_auto_cell_points));
    }
    if (m_auto_cells_bottom_isSet) {
        obj.insert(QString("autoCellsBottom"), ::OpenAPI::toJsonValue(m_auto_cells_bottom));
    }
    if (m_auto_cells_inner_isSet) {
        obj.insert(QString("autoCellsInner"), ::OpenAPI::toJsonValue(m_auto_cells_inner));
    }
    if (m_auto_cells_outer_isSet) {
        obj.insert(QString("autoCellsOuter"), ::OpenAPI::toJsonValue(m_auto_cells_outer));
    }
    if (m_auto_init_line_points_isSet) {
        obj.insert(QString("autoInitLinePoints"), ::OpenAPI::toJsonValue(m_auto_init_line_points));
    }
    if (m_auto_points_isSet) {
        obj.insert(QString("autoPoints"), ::OpenAPI::toJsonValue(m_auto_points));
    }
    if (m_control_panel_points_isSet) {
        obj.insert(QString("controlPanelPoints"), ::OpenAPI::toJsonValue(m_control_panel_points));
    }
    if (m_endgame_points_isSet) {
        obj.insert(QString("endgamePoints"), ::OpenAPI::toJsonValue(m_endgame_points));
    }
    if (m_endgame_robot1_isSet) {
        obj.insert(QString("endgameRobot1"), ::OpenAPI::toJsonValue(m_endgame_robot1));
    }
    if (m_endgame_robot2_isSet) {
        obj.insert(QString("endgameRobot2"), ::OpenAPI::toJsonValue(m_endgame_robot2));
    }
    if (m_endgame_robot3_isSet) {
        obj.insert(QString("endgameRobot3"), ::OpenAPI::toJsonValue(m_endgame_robot3));
    }
    if (m_endgame_rung_is_level_isSet) {
        obj.insert(QString("endgameRungIsLevel"), ::OpenAPI::toJsonValue(m_endgame_rung_is_level));
    }
    if (m_foul_count_isSet) {
        obj.insert(QString("foulCount"), ::OpenAPI::toJsonValue(m_foul_count));
    }
    if (m_foul_points_isSet) {
        obj.insert(QString("foulPoints"), ::OpenAPI::toJsonValue(m_foul_points));
    }
    if (m_init_line_robot1_isSet) {
        obj.insert(QString("initLineRobot1"), ::OpenAPI::toJsonValue(m_init_line_robot1));
    }
    if (m_init_line_robot2_isSet) {
        obj.insert(QString("initLineRobot2"), ::OpenAPI::toJsonValue(m_init_line_robot2));
    }
    if (m_init_line_robot3_isSet) {
        obj.insert(QString("initLineRobot3"), ::OpenAPI::toJsonValue(m_init_line_robot3));
    }
    if (m_rp_isSet) {
        obj.insert(QString("rp"), ::OpenAPI::toJsonValue(m_rp));
    }
    if (m_shield_energized_ranking_point_isSet) {
        obj.insert(QString("shieldEnergizedRankingPoint"), ::OpenAPI::toJsonValue(m_shield_energized_ranking_point));
    }
    if (m_shield_operational_ranking_point_isSet) {
        obj.insert(QString("shieldOperationalRankingPoint"), ::OpenAPI::toJsonValue(m_shield_operational_ranking_point));
    }
    if (m_stage1_activated_isSet) {
        obj.insert(QString("stage1Activated"), ::OpenAPI::toJsonValue(m_stage1_activated));
    }
    if (m_stage2_activated_isSet) {
        obj.insert(QString("stage2Activated"), ::OpenAPI::toJsonValue(m_stage2_activated));
    }
    if (m_stage3_activated_isSet) {
        obj.insert(QString("stage3Activated"), ::OpenAPI::toJsonValue(m_stage3_activated));
    }
    if (m_stage3_target_color_isSet) {
        obj.insert(QString("stage3TargetColor"), ::OpenAPI::toJsonValue(m_stage3_target_color));
    }
    if (m_tba_num_robots_hanging_isSet) {
        obj.insert(QString("tba_numRobotsHanging"), ::OpenAPI::toJsonValue(m_tba_num_robots_hanging));
    }
    if (m_tba_shield_energized_ranking_point_from_foul_isSet) {
        obj.insert(QString("tba_shieldEnergizedRankingPointFromFoul"), ::OpenAPI::toJsonValue(m_tba_shield_energized_ranking_point_from_foul));
    }
    if (m_tech_foul_count_isSet) {
        obj.insert(QString("techFoulCount"), ::OpenAPI::toJsonValue(m_tech_foul_count));
    }
    if (m_teleop_cell_points_isSet) {
        obj.insert(QString("teleopCellPoints"), ::OpenAPI::toJsonValue(m_teleop_cell_points));
    }
    if (m_teleop_cells_bottom_isSet) {
        obj.insert(QString("teleopCellsBottom"), ::OpenAPI::toJsonValue(m_teleop_cells_bottom));
    }
    if (m_teleop_cells_inner_isSet) {
        obj.insert(QString("teleopCellsInner"), ::OpenAPI::toJsonValue(m_teleop_cells_inner));
    }
    if (m_teleop_cells_outer_isSet) {
        obj.insert(QString("teleopCellsOuter"), ::OpenAPI::toJsonValue(m_teleop_cells_outer));
    }
    if (m_teleop_points_isSet) {
        obj.insert(QString("teleopPoints"), ::OpenAPI::toJsonValue(m_teleop_points));
    }
    if (m_total_points_isSet) {
        obj.insert(QString("totalPoints"), ::OpenAPI::toJsonValue(m_total_points));
    }
    return obj;
}

qint32 OAIMatch_Score_Breakdown_2020_Alliance::getAdjustPoints() const {
    return m_adjust_points;
}
void OAIMatch_Score_Breakdown_2020_Alliance::setAdjustPoints(const qint32 &adjust_points) {
    m_adjust_points = adjust_points;
    m_adjust_points_isSet = true;
}

bool OAIMatch_Score_Breakdown_2020_Alliance::is_adjust_points_Set() const{
    return m_adjust_points_isSet;
}

bool OAIMatch_Score_Breakdown_2020_Alliance::is_adjust_points_Valid() const{
    return m_adjust_points_isValid;
}

qint32 OAIMatch_Score_Breakdown_2020_Alliance::getAutoCellPoints() const {
    return m_auto_cell_points;
}
void OAIMatch_Score_Breakdown_2020_Alliance::setAutoCellPoints(const qint32 &auto_cell_points) {
    m_auto_cell_points = auto_cell_points;
    m_auto_cell_points_isSet = true;
}

bool OAIMatch_Score_Breakdown_2020_Alliance::is_auto_cell_points_Set() const{
    return m_auto_cell_points_isSet;
}

bool OAIMatch_Score_Breakdown_2020_Alliance::is_auto_cell_points_Valid() const{
    return m_auto_cell_points_isValid;
}

qint32 OAIMatch_Score_Breakdown_2020_Alliance::getAutoCellsBottom() const {
    return m_auto_cells_bottom;
}
void OAIMatch_Score_Breakdown_2020_Alliance::setAutoCellsBottom(const qint32 &auto_cells_bottom) {
    m_auto_cells_bottom = auto_cells_bottom;
    m_auto_cells_bottom_isSet = true;
}

bool OAIMatch_Score_Breakdown_2020_Alliance::is_auto_cells_bottom_Set() const{
    return m_auto_cells_bottom_isSet;
}

bool OAIMatch_Score_Breakdown_2020_Alliance::is_auto_cells_bottom_Valid() const{
    return m_auto_cells_bottom_isValid;
}

qint32 OAIMatch_Score_Breakdown_2020_Alliance::getAutoCellsInner() const {
    return m_auto_cells_inner;
}
void OAIMatch_Score_Breakdown_2020_Alliance::setAutoCellsInner(const qint32 &auto_cells_inner) {
    m_auto_cells_inner = auto_cells_inner;
    m_auto_cells_inner_isSet = true;
}

bool OAIMatch_Score_Breakdown_2020_Alliance::is_auto_cells_inner_Set() const{
    return m_auto_cells_inner_isSet;
}

bool OAIMatch_Score_Breakdown_2020_Alliance::is_auto_cells_inner_Valid() const{
    return m_auto_cells_inner_isValid;
}

qint32 OAIMatch_Score_Breakdown_2020_Alliance::getAutoCellsOuter() const {
    return m_auto_cells_outer;
}
void OAIMatch_Score_Breakdown_2020_Alliance::setAutoCellsOuter(const qint32 &auto_cells_outer) {
    m_auto_cells_outer = auto_cells_outer;
    m_auto_cells_outer_isSet = true;
}

bool OAIMatch_Score_Breakdown_2020_Alliance::is_auto_cells_outer_Set() const{
    return m_auto_cells_outer_isSet;
}

bool OAIMatch_Score_Breakdown_2020_Alliance::is_auto_cells_outer_Valid() const{
    return m_auto_cells_outer_isValid;
}

qint32 OAIMatch_Score_Breakdown_2020_Alliance::getAutoInitLinePoints() const {
    return m_auto_init_line_points;
}
void OAIMatch_Score_Breakdown_2020_Alliance::setAutoInitLinePoints(const qint32 &auto_init_line_points) {
    m_auto_init_line_points = auto_init_line_points;
    m_auto_init_line_points_isSet = true;
}

bool OAIMatch_Score_Breakdown_2020_Alliance::is_auto_init_line_points_Set() const{
    return m_auto_init_line_points_isSet;
}

bool OAIMatch_Score_Breakdown_2020_Alliance::is_auto_init_line_points_Valid() const{
    return m_auto_init_line_points_isValid;
}

qint32 OAIMatch_Score_Breakdown_2020_Alliance::getAutoPoints() const {
    return m_auto_points;
}
void OAIMatch_Score_Breakdown_2020_Alliance::setAutoPoints(const qint32 &auto_points) {
    m_auto_points = auto_points;
    m_auto_points_isSet = true;
}

bool OAIMatch_Score_Breakdown_2020_Alliance::is_auto_points_Set() const{
    return m_auto_points_isSet;
}

bool OAIMatch_Score_Breakdown_2020_Alliance::is_auto_points_Valid() const{
    return m_auto_points_isValid;
}

qint32 OAIMatch_Score_Breakdown_2020_Alliance::getControlPanelPoints() const {
    return m_control_panel_points;
}
void OAIMatch_Score_Breakdown_2020_Alliance::setControlPanelPoints(const qint32 &control_panel_points) {
    m_control_panel_points = control_panel_points;
    m_control_panel_points_isSet = true;
}

bool OAIMatch_Score_Breakdown_2020_Alliance::is_control_panel_points_Set() const{
    return m_control_panel_points_isSet;
}

bool OAIMatch_Score_Breakdown_2020_Alliance::is_control_panel_points_Valid() const{
    return m_control_panel_points_isValid;
}

qint32 OAIMatch_Score_Breakdown_2020_Alliance::getEndgamePoints() const {
    return m_endgame_points;
}
void OAIMatch_Score_Breakdown_2020_Alliance::setEndgamePoints(const qint32 &endgame_points) {
    m_endgame_points = endgame_points;
    m_endgame_points_isSet = true;
}

bool OAIMatch_Score_Breakdown_2020_Alliance::is_endgame_points_Set() const{
    return m_endgame_points_isSet;
}

bool OAIMatch_Score_Breakdown_2020_Alliance::is_endgame_points_Valid() const{
    return m_endgame_points_isValid;
}

QString OAIMatch_Score_Breakdown_2020_Alliance::getEndgameRobot1() const {
    return m_endgame_robot1;
}
void OAIMatch_Score_Breakdown_2020_Alliance::setEndgameRobot1(const QString &endgame_robot1) {
    m_endgame_robot1 = endgame_robot1;
    m_endgame_robot1_isSet = true;
}

bool OAIMatch_Score_Breakdown_2020_Alliance::is_endgame_robot1_Set() const{
    return m_endgame_robot1_isSet;
}

bool OAIMatch_Score_Breakdown_2020_Alliance::is_endgame_robot1_Valid() const{
    return m_endgame_robot1_isValid;
}

QString OAIMatch_Score_Breakdown_2020_Alliance::getEndgameRobot2() const {
    return m_endgame_robot2;
}
void OAIMatch_Score_Breakdown_2020_Alliance::setEndgameRobot2(const QString &endgame_robot2) {
    m_endgame_robot2 = endgame_robot2;
    m_endgame_robot2_isSet = true;
}

bool OAIMatch_Score_Breakdown_2020_Alliance::is_endgame_robot2_Set() const{
    return m_endgame_robot2_isSet;
}

bool OAIMatch_Score_Breakdown_2020_Alliance::is_endgame_robot2_Valid() const{
    return m_endgame_robot2_isValid;
}

QString OAIMatch_Score_Breakdown_2020_Alliance::getEndgameRobot3() const {
    return m_endgame_robot3;
}
void OAIMatch_Score_Breakdown_2020_Alliance::setEndgameRobot3(const QString &endgame_robot3) {
    m_endgame_robot3 = endgame_robot3;
    m_endgame_robot3_isSet = true;
}

bool OAIMatch_Score_Breakdown_2020_Alliance::is_endgame_robot3_Set() const{
    return m_endgame_robot3_isSet;
}

bool OAIMatch_Score_Breakdown_2020_Alliance::is_endgame_robot3_Valid() const{
    return m_endgame_robot3_isValid;
}

QString OAIMatch_Score_Breakdown_2020_Alliance::getEndgameRungIsLevel() const {
    return m_endgame_rung_is_level;
}
void OAIMatch_Score_Breakdown_2020_Alliance::setEndgameRungIsLevel(const QString &endgame_rung_is_level) {
    m_endgame_rung_is_level = endgame_rung_is_level;
    m_endgame_rung_is_level_isSet = true;
}

bool OAIMatch_Score_Breakdown_2020_Alliance::is_endgame_rung_is_level_Set() const{
    return m_endgame_rung_is_level_isSet;
}

bool OAIMatch_Score_Breakdown_2020_Alliance::is_endgame_rung_is_level_Valid() const{
    return m_endgame_rung_is_level_isValid;
}

qint32 OAIMatch_Score_Breakdown_2020_Alliance::getFoulCount() const {
    return m_foul_count;
}
void OAIMatch_Score_Breakdown_2020_Alliance::setFoulCount(const qint32 &foul_count) {
    m_foul_count = foul_count;
    m_foul_count_isSet = true;
}

bool OAIMatch_Score_Breakdown_2020_Alliance::is_foul_count_Set() const{
    return m_foul_count_isSet;
}

bool OAIMatch_Score_Breakdown_2020_Alliance::is_foul_count_Valid() const{
    return m_foul_count_isValid;
}

qint32 OAIMatch_Score_Breakdown_2020_Alliance::getFoulPoints() const {
    return m_foul_points;
}
void OAIMatch_Score_Breakdown_2020_Alliance::setFoulPoints(const qint32 &foul_points) {
    m_foul_points = foul_points;
    m_foul_points_isSet = true;
}

bool OAIMatch_Score_Breakdown_2020_Alliance::is_foul_points_Set() const{
    return m_foul_points_isSet;
}

bool OAIMatch_Score_Breakdown_2020_Alliance::is_foul_points_Valid() const{
    return m_foul_points_isValid;
}

QString OAIMatch_Score_Breakdown_2020_Alliance::getInitLineRobot1() const {
    return m_init_line_robot1;
}
void OAIMatch_Score_Breakdown_2020_Alliance::setInitLineRobot1(const QString &init_line_robot1) {
    m_init_line_robot1 = init_line_robot1;
    m_init_line_robot1_isSet = true;
}

bool OAIMatch_Score_Breakdown_2020_Alliance::is_init_line_robot1_Set() const{
    return m_init_line_robot1_isSet;
}

bool OAIMatch_Score_Breakdown_2020_Alliance::is_init_line_robot1_Valid() const{
    return m_init_line_robot1_isValid;
}

QString OAIMatch_Score_Breakdown_2020_Alliance::getInitLineRobot2() const {
    return m_init_line_robot2;
}
void OAIMatch_Score_Breakdown_2020_Alliance::setInitLineRobot2(const QString &init_line_robot2) {
    m_init_line_robot2 = init_line_robot2;
    m_init_line_robot2_isSet = true;
}

bool OAIMatch_Score_Breakdown_2020_Alliance::is_init_line_robot2_Set() const{
    return m_init_line_robot2_isSet;
}

bool OAIMatch_Score_Breakdown_2020_Alliance::is_init_line_robot2_Valid() const{
    return m_init_line_robot2_isValid;
}

QString OAIMatch_Score_Breakdown_2020_Alliance::getInitLineRobot3() const {
    return m_init_line_robot3;
}
void OAIMatch_Score_Breakdown_2020_Alliance::setInitLineRobot3(const QString &init_line_robot3) {
    m_init_line_robot3 = init_line_robot3;
    m_init_line_robot3_isSet = true;
}

bool OAIMatch_Score_Breakdown_2020_Alliance::is_init_line_robot3_Set() const{
    return m_init_line_robot3_isSet;
}

bool OAIMatch_Score_Breakdown_2020_Alliance::is_init_line_robot3_Valid() const{
    return m_init_line_robot3_isValid;
}

qint32 OAIMatch_Score_Breakdown_2020_Alliance::getRp() const {
    return m_rp;
}
void OAIMatch_Score_Breakdown_2020_Alliance::setRp(const qint32 &rp) {
    m_rp = rp;
    m_rp_isSet = true;
}

bool OAIMatch_Score_Breakdown_2020_Alliance::is_rp_Set() const{
    return m_rp_isSet;
}

bool OAIMatch_Score_Breakdown_2020_Alliance::is_rp_Valid() const{
    return m_rp_isValid;
}

bool OAIMatch_Score_Breakdown_2020_Alliance::isShieldEnergizedRankingPoint() const {
    return m_shield_energized_ranking_point;
}
void OAIMatch_Score_Breakdown_2020_Alliance::setShieldEnergizedRankingPoint(const bool &shield_energized_ranking_point) {
    m_shield_energized_ranking_point = shield_energized_ranking_point;
    m_shield_energized_ranking_point_isSet = true;
}

bool OAIMatch_Score_Breakdown_2020_Alliance::is_shield_energized_ranking_point_Set() const{
    return m_shield_energized_ranking_point_isSet;
}

bool OAIMatch_Score_Breakdown_2020_Alliance::is_shield_energized_ranking_point_Valid() const{
    return m_shield_energized_ranking_point_isValid;
}

bool OAIMatch_Score_Breakdown_2020_Alliance::isShieldOperationalRankingPoint() const {
    return m_shield_operational_ranking_point;
}
void OAIMatch_Score_Breakdown_2020_Alliance::setShieldOperationalRankingPoint(const bool &shield_operational_ranking_point) {
    m_shield_operational_ranking_point = shield_operational_ranking_point;
    m_shield_operational_ranking_point_isSet = true;
}

bool OAIMatch_Score_Breakdown_2020_Alliance::is_shield_operational_ranking_point_Set() const{
    return m_shield_operational_ranking_point_isSet;
}

bool OAIMatch_Score_Breakdown_2020_Alliance::is_shield_operational_ranking_point_Valid() const{
    return m_shield_operational_ranking_point_isValid;
}

bool OAIMatch_Score_Breakdown_2020_Alliance::isStage1Activated() const {
    return m_stage1_activated;
}
void OAIMatch_Score_Breakdown_2020_Alliance::setStage1Activated(const bool &stage1_activated) {
    m_stage1_activated = stage1_activated;
    m_stage1_activated_isSet = true;
}

bool OAIMatch_Score_Breakdown_2020_Alliance::is_stage1_activated_Set() const{
    return m_stage1_activated_isSet;
}

bool OAIMatch_Score_Breakdown_2020_Alliance::is_stage1_activated_Valid() const{
    return m_stage1_activated_isValid;
}

bool OAIMatch_Score_Breakdown_2020_Alliance::isStage2Activated() const {
    return m_stage2_activated;
}
void OAIMatch_Score_Breakdown_2020_Alliance::setStage2Activated(const bool &stage2_activated) {
    m_stage2_activated = stage2_activated;
    m_stage2_activated_isSet = true;
}

bool OAIMatch_Score_Breakdown_2020_Alliance::is_stage2_activated_Set() const{
    return m_stage2_activated_isSet;
}

bool OAIMatch_Score_Breakdown_2020_Alliance::is_stage2_activated_Valid() const{
    return m_stage2_activated_isValid;
}

bool OAIMatch_Score_Breakdown_2020_Alliance::isStage3Activated() const {
    return m_stage3_activated;
}
void OAIMatch_Score_Breakdown_2020_Alliance::setStage3Activated(const bool &stage3_activated) {
    m_stage3_activated = stage3_activated;
    m_stage3_activated_isSet = true;
}

bool OAIMatch_Score_Breakdown_2020_Alliance::is_stage3_activated_Set() const{
    return m_stage3_activated_isSet;
}

bool OAIMatch_Score_Breakdown_2020_Alliance::is_stage3_activated_Valid() const{
    return m_stage3_activated_isValid;
}

QString OAIMatch_Score_Breakdown_2020_Alliance::getStage3TargetColor() const {
    return m_stage3_target_color;
}
void OAIMatch_Score_Breakdown_2020_Alliance::setStage3TargetColor(const QString &stage3_target_color) {
    m_stage3_target_color = stage3_target_color;
    m_stage3_target_color_isSet = true;
}

bool OAIMatch_Score_Breakdown_2020_Alliance::is_stage3_target_color_Set() const{
    return m_stage3_target_color_isSet;
}

bool OAIMatch_Score_Breakdown_2020_Alliance::is_stage3_target_color_Valid() const{
    return m_stage3_target_color_isValid;
}

qint32 OAIMatch_Score_Breakdown_2020_Alliance::getTbaNumRobotsHanging() const {
    return m_tba_num_robots_hanging;
}
void OAIMatch_Score_Breakdown_2020_Alliance::setTbaNumRobotsHanging(const qint32 &tba_num_robots_hanging) {
    m_tba_num_robots_hanging = tba_num_robots_hanging;
    m_tba_num_robots_hanging_isSet = true;
}

bool OAIMatch_Score_Breakdown_2020_Alliance::is_tba_num_robots_hanging_Set() const{
    return m_tba_num_robots_hanging_isSet;
}

bool OAIMatch_Score_Breakdown_2020_Alliance::is_tba_num_robots_hanging_Valid() const{
    return m_tba_num_robots_hanging_isValid;
}

bool OAIMatch_Score_Breakdown_2020_Alliance::isTbaShieldEnergizedRankingPointFromFoul() const {
    return m_tba_shield_energized_ranking_point_from_foul;
}
void OAIMatch_Score_Breakdown_2020_Alliance::setTbaShieldEnergizedRankingPointFromFoul(const bool &tba_shield_energized_ranking_point_from_foul) {
    m_tba_shield_energized_ranking_point_from_foul = tba_shield_energized_ranking_point_from_foul;
    m_tba_shield_energized_ranking_point_from_foul_isSet = true;
}

bool OAIMatch_Score_Breakdown_2020_Alliance::is_tba_shield_energized_ranking_point_from_foul_Set() const{
    return m_tba_shield_energized_ranking_point_from_foul_isSet;
}

bool OAIMatch_Score_Breakdown_2020_Alliance::is_tba_shield_energized_ranking_point_from_foul_Valid() const{
    return m_tba_shield_energized_ranking_point_from_foul_isValid;
}

qint32 OAIMatch_Score_Breakdown_2020_Alliance::getTechFoulCount() const {
    return m_tech_foul_count;
}
void OAIMatch_Score_Breakdown_2020_Alliance::setTechFoulCount(const qint32 &tech_foul_count) {
    m_tech_foul_count = tech_foul_count;
    m_tech_foul_count_isSet = true;
}

bool OAIMatch_Score_Breakdown_2020_Alliance::is_tech_foul_count_Set() const{
    return m_tech_foul_count_isSet;
}

bool OAIMatch_Score_Breakdown_2020_Alliance::is_tech_foul_count_Valid() const{
    return m_tech_foul_count_isValid;
}

qint32 OAIMatch_Score_Breakdown_2020_Alliance::getTeleopCellPoints() const {
    return m_teleop_cell_points;
}
void OAIMatch_Score_Breakdown_2020_Alliance::setTeleopCellPoints(const qint32 &teleop_cell_points) {
    m_teleop_cell_points = teleop_cell_points;
    m_teleop_cell_points_isSet = true;
}

bool OAIMatch_Score_Breakdown_2020_Alliance::is_teleop_cell_points_Set() const{
    return m_teleop_cell_points_isSet;
}

bool OAIMatch_Score_Breakdown_2020_Alliance::is_teleop_cell_points_Valid() const{
    return m_teleop_cell_points_isValid;
}

qint32 OAIMatch_Score_Breakdown_2020_Alliance::getTeleopCellsBottom() const {
    return m_teleop_cells_bottom;
}
void OAIMatch_Score_Breakdown_2020_Alliance::setTeleopCellsBottom(const qint32 &teleop_cells_bottom) {
    m_teleop_cells_bottom = teleop_cells_bottom;
    m_teleop_cells_bottom_isSet = true;
}

bool OAIMatch_Score_Breakdown_2020_Alliance::is_teleop_cells_bottom_Set() const{
    return m_teleop_cells_bottom_isSet;
}

bool OAIMatch_Score_Breakdown_2020_Alliance::is_teleop_cells_bottom_Valid() const{
    return m_teleop_cells_bottom_isValid;
}

qint32 OAIMatch_Score_Breakdown_2020_Alliance::getTeleopCellsInner() const {
    return m_teleop_cells_inner;
}
void OAIMatch_Score_Breakdown_2020_Alliance::setTeleopCellsInner(const qint32 &teleop_cells_inner) {
    m_teleop_cells_inner = teleop_cells_inner;
    m_teleop_cells_inner_isSet = true;
}

bool OAIMatch_Score_Breakdown_2020_Alliance::is_teleop_cells_inner_Set() const{
    return m_teleop_cells_inner_isSet;
}

bool OAIMatch_Score_Breakdown_2020_Alliance::is_teleop_cells_inner_Valid() const{
    return m_teleop_cells_inner_isValid;
}

qint32 OAIMatch_Score_Breakdown_2020_Alliance::getTeleopCellsOuter() const {
    return m_teleop_cells_outer;
}
void OAIMatch_Score_Breakdown_2020_Alliance::setTeleopCellsOuter(const qint32 &teleop_cells_outer) {
    m_teleop_cells_outer = teleop_cells_outer;
    m_teleop_cells_outer_isSet = true;
}

bool OAIMatch_Score_Breakdown_2020_Alliance::is_teleop_cells_outer_Set() const{
    return m_teleop_cells_outer_isSet;
}

bool OAIMatch_Score_Breakdown_2020_Alliance::is_teleop_cells_outer_Valid() const{
    return m_teleop_cells_outer_isValid;
}

qint32 OAIMatch_Score_Breakdown_2020_Alliance::getTeleopPoints() const {
    return m_teleop_points;
}
void OAIMatch_Score_Breakdown_2020_Alliance::setTeleopPoints(const qint32 &teleop_points) {
    m_teleop_points = teleop_points;
    m_teleop_points_isSet = true;
}

bool OAIMatch_Score_Breakdown_2020_Alliance::is_teleop_points_Set() const{
    return m_teleop_points_isSet;
}

bool OAIMatch_Score_Breakdown_2020_Alliance::is_teleop_points_Valid() const{
    return m_teleop_points_isValid;
}

qint32 OAIMatch_Score_Breakdown_2020_Alliance::getTotalPoints() const {
    return m_total_points;
}
void OAIMatch_Score_Breakdown_2020_Alliance::setTotalPoints(const qint32 &total_points) {
    m_total_points = total_points;
    m_total_points_isSet = true;
}

bool OAIMatch_Score_Breakdown_2020_Alliance::is_total_points_Set() const{
    return m_total_points_isSet;
}

bool OAIMatch_Score_Breakdown_2020_Alliance::is_total_points_Valid() const{
    return m_total_points_isValid;
}

bool OAIMatch_Score_Breakdown_2020_Alliance::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_adjust_points_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auto_cell_points_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auto_cells_bottom_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auto_cells_inner_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auto_cells_outer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auto_init_line_points_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auto_points_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_control_panel_points_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_endgame_points_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_endgame_robot1_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_endgame_robot2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_endgame_robot3_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_endgame_rung_is_level_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_foul_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_foul_points_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_init_line_robot1_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_init_line_robot2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_init_line_robot3_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shield_energized_ranking_point_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shield_operational_ranking_point_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stage1_activated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stage2_activated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stage3_activated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stage3_target_color_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tba_num_robots_hanging_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tba_shield_energized_ranking_point_from_foul_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tech_foul_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_teleop_cell_points_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_teleop_cells_bottom_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_teleop_cells_inner_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_teleop_cells_outer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_teleop_points_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_points_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMatch_Score_Breakdown_2020_Alliance::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
