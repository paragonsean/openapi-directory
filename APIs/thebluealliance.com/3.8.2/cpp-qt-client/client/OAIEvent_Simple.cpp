/**
 * The Blue Alliance API v3
 * # Overview    Information and statistics about FIRST Robotics Competition teams and events.   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).
 *
 * The version of the OpenAPI document: 3.8.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEvent_Simple.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEvent_Simple::OAIEvent_Simple(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEvent_Simple::OAIEvent_Simple() {
    this->initializeModel();
}

OAIEvent_Simple::~OAIEvent_Simple() {}

void OAIEvent_Simple::initializeModel() {

    m_city_isSet = false;
    m_city_isValid = false;

    m_country_isSet = false;
    m_country_isValid = false;

    m_district_isSet = false;
    m_district_isValid = false;

    m_end_date_isSet = false;
    m_end_date_isValid = false;

    m_event_code_isSet = false;
    m_event_code_isValid = false;

    m_event_type_isSet = false;
    m_event_type_isValid = false;

    m_key_isSet = false;
    m_key_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_start_date_isSet = false;
    m_start_date_isValid = false;

    m_state_prov_isSet = false;
    m_state_prov_isValid = false;

    m_year_isSet = false;
    m_year_isValid = false;
}

void OAIEvent_Simple::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEvent_Simple::fromJsonObject(QJsonObject json) {

    m_city_isValid = ::OpenAPI::fromJsonValue(m_city, json[QString("city")]);
    m_city_isSet = !json[QString("city")].isNull() && m_city_isValid;

    m_country_isValid = ::OpenAPI::fromJsonValue(m_country, json[QString("country")]);
    m_country_isSet = !json[QString("country")].isNull() && m_country_isValid;

    m_district_isValid = ::OpenAPI::fromJsonValue(m_district, json[QString("district")]);
    m_district_isSet = !json[QString("district")].isNull() && m_district_isValid;

    m_end_date_isValid = ::OpenAPI::fromJsonValue(m_end_date, json[QString("end_date")]);
    m_end_date_isSet = !json[QString("end_date")].isNull() && m_end_date_isValid;

    m_event_code_isValid = ::OpenAPI::fromJsonValue(m_event_code, json[QString("event_code")]);
    m_event_code_isSet = !json[QString("event_code")].isNull() && m_event_code_isValid;

    m_event_type_isValid = ::OpenAPI::fromJsonValue(m_event_type, json[QString("event_type")]);
    m_event_type_isSet = !json[QString("event_type")].isNull() && m_event_type_isValid;

    m_key_isValid = ::OpenAPI::fromJsonValue(m_key, json[QString("key")]);
    m_key_isSet = !json[QString("key")].isNull() && m_key_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_start_date_isValid = ::OpenAPI::fromJsonValue(m_start_date, json[QString("start_date")]);
    m_start_date_isSet = !json[QString("start_date")].isNull() && m_start_date_isValid;

    m_state_prov_isValid = ::OpenAPI::fromJsonValue(m_state_prov, json[QString("state_prov")]);
    m_state_prov_isSet = !json[QString("state_prov")].isNull() && m_state_prov_isValid;

    m_year_isValid = ::OpenAPI::fromJsonValue(m_year, json[QString("year")]);
    m_year_isSet = !json[QString("year")].isNull() && m_year_isValid;
}

QString OAIEvent_Simple::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEvent_Simple::asJsonObject() const {
    QJsonObject obj;
    if (m_city_isSet) {
        obj.insert(QString("city"), ::OpenAPI::toJsonValue(m_city));
    }
    if (m_country_isSet) {
        obj.insert(QString("country"), ::OpenAPI::toJsonValue(m_country));
    }
    if (m_district.isSet()) {
        obj.insert(QString("district"), ::OpenAPI::toJsonValue(m_district));
    }
    if (m_end_date_isSet) {
        obj.insert(QString("end_date"), ::OpenAPI::toJsonValue(m_end_date));
    }
    if (m_event_code_isSet) {
        obj.insert(QString("event_code"), ::OpenAPI::toJsonValue(m_event_code));
    }
    if (m_event_type_isSet) {
        obj.insert(QString("event_type"), ::OpenAPI::toJsonValue(m_event_type));
    }
    if (m_key_isSet) {
        obj.insert(QString("key"), ::OpenAPI::toJsonValue(m_key));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_start_date_isSet) {
        obj.insert(QString("start_date"), ::OpenAPI::toJsonValue(m_start_date));
    }
    if (m_state_prov_isSet) {
        obj.insert(QString("state_prov"), ::OpenAPI::toJsonValue(m_state_prov));
    }
    if (m_year_isSet) {
        obj.insert(QString("year"), ::OpenAPI::toJsonValue(m_year));
    }
    return obj;
}

QString OAIEvent_Simple::getCity() const {
    return m_city;
}
void OAIEvent_Simple::setCity(const QString &city) {
    m_city = city;
    m_city_isSet = true;
}

bool OAIEvent_Simple::is_city_Set() const{
    return m_city_isSet;
}

bool OAIEvent_Simple::is_city_Valid() const{
    return m_city_isValid;
}

QString OAIEvent_Simple::getCountry() const {
    return m_country;
}
void OAIEvent_Simple::setCountry(const QString &country) {
    m_country = country;
    m_country_isSet = true;
}

bool OAIEvent_Simple::is_country_Set() const{
    return m_country_isSet;
}

bool OAIEvent_Simple::is_country_Valid() const{
    return m_country_isValid;
}

OAIDistrict_List OAIEvent_Simple::getDistrict() const {
    return m_district;
}
void OAIEvent_Simple::setDistrict(const OAIDistrict_List &district) {
    m_district = district;
    m_district_isSet = true;
}

bool OAIEvent_Simple::is_district_Set() const{
    return m_district_isSet;
}

bool OAIEvent_Simple::is_district_Valid() const{
    return m_district_isValid;
}

QDate OAIEvent_Simple::getEndDate() const {
    return m_end_date;
}
void OAIEvent_Simple::setEndDate(const QDate &end_date) {
    m_end_date = end_date;
    m_end_date_isSet = true;
}

bool OAIEvent_Simple::is_end_date_Set() const{
    return m_end_date_isSet;
}

bool OAIEvent_Simple::is_end_date_Valid() const{
    return m_end_date_isValid;
}

QString OAIEvent_Simple::getEventCode() const {
    return m_event_code;
}
void OAIEvent_Simple::setEventCode(const QString &event_code) {
    m_event_code = event_code;
    m_event_code_isSet = true;
}

bool OAIEvent_Simple::is_event_code_Set() const{
    return m_event_code_isSet;
}

bool OAIEvent_Simple::is_event_code_Valid() const{
    return m_event_code_isValid;
}

qint32 OAIEvent_Simple::getEventType() const {
    return m_event_type;
}
void OAIEvent_Simple::setEventType(const qint32 &event_type) {
    m_event_type = event_type;
    m_event_type_isSet = true;
}

bool OAIEvent_Simple::is_event_type_Set() const{
    return m_event_type_isSet;
}

bool OAIEvent_Simple::is_event_type_Valid() const{
    return m_event_type_isValid;
}

QString OAIEvent_Simple::getKey() const {
    return m_key;
}
void OAIEvent_Simple::setKey(const QString &key) {
    m_key = key;
    m_key_isSet = true;
}

bool OAIEvent_Simple::is_key_Set() const{
    return m_key_isSet;
}

bool OAIEvent_Simple::is_key_Valid() const{
    return m_key_isValid;
}

QString OAIEvent_Simple::getName() const {
    return m_name;
}
void OAIEvent_Simple::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIEvent_Simple::is_name_Set() const{
    return m_name_isSet;
}

bool OAIEvent_Simple::is_name_Valid() const{
    return m_name_isValid;
}

QDate OAIEvent_Simple::getStartDate() const {
    return m_start_date;
}
void OAIEvent_Simple::setStartDate(const QDate &start_date) {
    m_start_date = start_date;
    m_start_date_isSet = true;
}

bool OAIEvent_Simple::is_start_date_Set() const{
    return m_start_date_isSet;
}

bool OAIEvent_Simple::is_start_date_Valid() const{
    return m_start_date_isValid;
}

QString OAIEvent_Simple::getStateProv() const {
    return m_state_prov;
}
void OAIEvent_Simple::setStateProv(const QString &state_prov) {
    m_state_prov = state_prov;
    m_state_prov_isSet = true;
}

bool OAIEvent_Simple::is_state_prov_Set() const{
    return m_state_prov_isSet;
}

bool OAIEvent_Simple::is_state_prov_Valid() const{
    return m_state_prov_isValid;
}

qint32 OAIEvent_Simple::getYear() const {
    return m_year;
}
void OAIEvent_Simple::setYear(const qint32 &year) {
    m_year = year;
    m_year_isSet = true;
}

bool OAIEvent_Simple::is_year_Set() const{
    return m_year_isSet;
}

bool OAIEvent_Simple::is_year_Valid() const{
    return m_year_isValid;
}

bool OAIEvent_Simple::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_city_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_district.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_prov_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_year_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEvent_Simple::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_end_date_isValid && m_event_code_isValid && m_event_type_isValid && m_key_isValid && m_name_isValid && m_start_date_isValid && m_year_isValid && true;
}

} // namespace OpenAPI
