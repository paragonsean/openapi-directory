/**
 * The Blue Alliance API v3
 * # Overview    Information and statistics about FIRST Robotics Competition teams and events.   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).
 *
 * The version of the OpenAPI document: 3.8.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIEvent_Insights_2017.h
 *
 * Insights for FIRST STEAMWORKS qualification and elimination matches.
 */

#ifndef OAIEvent_Insights_2017_H
#define OAIEvent_Insights_2017_H

#include <QJsonObject>

#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIEvent_Insights_2017 : public OAIObject {
public:
    OAIEvent_Insights_2017();
    OAIEvent_Insights_2017(QString json);
    ~OAIEvent_Insights_2017() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    float getAverageFoulScore() const;
    void setAverageFoulScore(const float &average_foul_score);
    bool is_average_foul_score_Set() const;
    bool is_average_foul_score_Valid() const;

    float getAverageFuelPoints() const;
    void setAverageFuelPoints(const float &average_fuel_points);
    bool is_average_fuel_points_Set() const;
    bool is_average_fuel_points_Valid() const;

    float getAverageFuelPointsAuto() const;
    void setAverageFuelPointsAuto(const float &average_fuel_points_auto);
    bool is_average_fuel_points_auto_Set() const;
    bool is_average_fuel_points_auto_Valid() const;

    float getAverageFuelPointsTeleop() const;
    void setAverageFuelPointsTeleop(const float &average_fuel_points_teleop);
    bool is_average_fuel_points_teleop_Set() const;
    bool is_average_fuel_points_teleop_Valid() const;

    float getAverageHighGoals() const;
    void setAverageHighGoals(const float &average_high_goals);
    bool is_average_high_goals_Set() const;
    bool is_average_high_goals_Valid() const;

    float getAverageHighGoalsAuto() const;
    void setAverageHighGoalsAuto(const float &average_high_goals_auto);
    bool is_average_high_goals_auto_Set() const;
    bool is_average_high_goals_auto_Valid() const;

    float getAverageHighGoalsTeleop() const;
    void setAverageHighGoalsTeleop(const float &average_high_goals_teleop);
    bool is_average_high_goals_teleop_Set() const;
    bool is_average_high_goals_teleop_Valid() const;

    float getAverageLowGoals() const;
    void setAverageLowGoals(const float &average_low_goals);
    bool is_average_low_goals_Set() const;
    bool is_average_low_goals_Valid() const;

    float getAverageLowGoalsAuto() const;
    void setAverageLowGoalsAuto(const float &average_low_goals_auto);
    bool is_average_low_goals_auto_Set() const;
    bool is_average_low_goals_auto_Valid() const;

    float getAverageLowGoalsTeleop() const;
    void setAverageLowGoalsTeleop(const float &average_low_goals_teleop);
    bool is_average_low_goals_teleop_Set() const;
    bool is_average_low_goals_teleop_Valid() const;

    float getAverageMobilityPointsAuto() const;
    void setAverageMobilityPointsAuto(const float &average_mobility_points_auto);
    bool is_average_mobility_points_auto_Set() const;
    bool is_average_mobility_points_auto_Valid() const;

    float getAveragePointsAuto() const;
    void setAveragePointsAuto(const float &average_points_auto);
    bool is_average_points_auto_Set() const;
    bool is_average_points_auto_Valid() const;

    float getAveragePointsTeleop() const;
    void setAveragePointsTeleop(const float &average_points_teleop);
    bool is_average_points_teleop_Set() const;
    bool is_average_points_teleop_Valid() const;

    float getAverageRotorPoints() const;
    void setAverageRotorPoints(const float &average_rotor_points);
    bool is_average_rotor_points_Set() const;
    bool is_average_rotor_points_Valid() const;

    float getAverageRotorPointsAuto() const;
    void setAverageRotorPointsAuto(const float &average_rotor_points_auto);
    bool is_average_rotor_points_auto_Set() const;
    bool is_average_rotor_points_auto_Valid() const;

    float getAverageRotorPointsTeleop() const;
    void setAverageRotorPointsTeleop(const float &average_rotor_points_teleop);
    bool is_average_rotor_points_teleop_Set() const;
    bool is_average_rotor_points_teleop_Valid() const;

    float getAverageScore() const;
    void setAverageScore(const float &average_score);
    bool is_average_score_Set() const;
    bool is_average_score_Valid() const;

    float getAverageTakeoffPointsTeleop() const;
    void setAverageTakeoffPointsTeleop(const float &average_takeoff_points_teleop);
    bool is_average_takeoff_points_teleop_Set() const;
    bool is_average_takeoff_points_teleop_Valid() const;

    float getAverageWinMargin() const;
    void setAverageWinMargin(const float &average_win_margin);
    bool is_average_win_margin_Set() const;
    bool is_average_win_margin_Valid() const;

    float getAverageWinScore() const;
    void setAverageWinScore(const float &average_win_score);
    bool is_average_win_score_Set() const;
    bool is_average_win_score_Valid() const;

    QList<QString> getHighKpa() const;
    void setHighKpa(const QList<QString> &high_kpa);
    bool is_high_kpa_Set() const;
    bool is_high_kpa_Valid() const;

    QList<QString> getHighScore() const;
    void setHighScore(const QList<QString> &high_score);
    bool is_high_score_Set() const;
    bool is_high_score_Valid() const;

    QList<float> getKpaAchieved() const;
    void setKpaAchieved(const QList<float> &kpa_achieved);
    bool is_kpa_achieved_Set() const;
    bool is_kpa_achieved_Valid() const;

    QList<float> getMobilityCounts() const;
    void setMobilityCounts(const QList<float> &mobility_counts);
    bool is_mobility_counts_Set() const;
    bool is_mobility_counts_Valid() const;

    QList<float> getRotor1Engaged() const;
    void setRotor1Engaged(const QList<float> &rotor_1_engaged);
    bool is_rotor_1_engaged_Set() const;
    bool is_rotor_1_engaged_Valid() const;

    QList<float> getRotor1EngagedAuto() const;
    void setRotor1EngagedAuto(const QList<float> &rotor_1_engaged_auto);
    bool is_rotor_1_engaged_auto_Set() const;
    bool is_rotor_1_engaged_auto_Valid() const;

    QList<float> getRotor2Engaged() const;
    void setRotor2Engaged(const QList<float> &rotor_2_engaged);
    bool is_rotor_2_engaged_Set() const;
    bool is_rotor_2_engaged_Valid() const;

    QList<float> getRotor2EngagedAuto() const;
    void setRotor2EngagedAuto(const QList<float> &rotor_2_engaged_auto);
    bool is_rotor_2_engaged_auto_Set() const;
    bool is_rotor_2_engaged_auto_Valid() const;

    QList<float> getRotor3Engaged() const;
    void setRotor3Engaged(const QList<float> &rotor_3_engaged);
    bool is_rotor_3_engaged_Set() const;
    bool is_rotor_3_engaged_Valid() const;

    QList<float> getRotor4Engaged() const;
    void setRotor4Engaged(const QList<float> &rotor_4_engaged);
    bool is_rotor_4_engaged_Set() const;
    bool is_rotor_4_engaged_Valid() const;

    QList<float> getTakeoffCounts() const;
    void setTakeoffCounts(const QList<float> &takeoff_counts);
    bool is_takeoff_counts_Set() const;
    bool is_takeoff_counts_Valid() const;

    QList<float> getUnicornMatches() const;
    void setUnicornMatches(const QList<float> &unicorn_matches);
    bool is_unicorn_matches_Set() const;
    bool is_unicorn_matches_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    float m_average_foul_score;
    bool m_average_foul_score_isSet;
    bool m_average_foul_score_isValid;

    float m_average_fuel_points;
    bool m_average_fuel_points_isSet;
    bool m_average_fuel_points_isValid;

    float m_average_fuel_points_auto;
    bool m_average_fuel_points_auto_isSet;
    bool m_average_fuel_points_auto_isValid;

    float m_average_fuel_points_teleop;
    bool m_average_fuel_points_teleop_isSet;
    bool m_average_fuel_points_teleop_isValid;

    float m_average_high_goals;
    bool m_average_high_goals_isSet;
    bool m_average_high_goals_isValid;

    float m_average_high_goals_auto;
    bool m_average_high_goals_auto_isSet;
    bool m_average_high_goals_auto_isValid;

    float m_average_high_goals_teleop;
    bool m_average_high_goals_teleop_isSet;
    bool m_average_high_goals_teleop_isValid;

    float m_average_low_goals;
    bool m_average_low_goals_isSet;
    bool m_average_low_goals_isValid;

    float m_average_low_goals_auto;
    bool m_average_low_goals_auto_isSet;
    bool m_average_low_goals_auto_isValid;

    float m_average_low_goals_teleop;
    bool m_average_low_goals_teleop_isSet;
    bool m_average_low_goals_teleop_isValid;

    float m_average_mobility_points_auto;
    bool m_average_mobility_points_auto_isSet;
    bool m_average_mobility_points_auto_isValid;

    float m_average_points_auto;
    bool m_average_points_auto_isSet;
    bool m_average_points_auto_isValid;

    float m_average_points_teleop;
    bool m_average_points_teleop_isSet;
    bool m_average_points_teleop_isValid;

    float m_average_rotor_points;
    bool m_average_rotor_points_isSet;
    bool m_average_rotor_points_isValid;

    float m_average_rotor_points_auto;
    bool m_average_rotor_points_auto_isSet;
    bool m_average_rotor_points_auto_isValid;

    float m_average_rotor_points_teleop;
    bool m_average_rotor_points_teleop_isSet;
    bool m_average_rotor_points_teleop_isValid;

    float m_average_score;
    bool m_average_score_isSet;
    bool m_average_score_isValid;

    float m_average_takeoff_points_teleop;
    bool m_average_takeoff_points_teleop_isSet;
    bool m_average_takeoff_points_teleop_isValid;

    float m_average_win_margin;
    bool m_average_win_margin_isSet;
    bool m_average_win_margin_isValid;

    float m_average_win_score;
    bool m_average_win_score_isSet;
    bool m_average_win_score_isValid;

    QList<QString> m_high_kpa;
    bool m_high_kpa_isSet;
    bool m_high_kpa_isValid;

    QList<QString> m_high_score;
    bool m_high_score_isSet;
    bool m_high_score_isValid;

    QList<float> m_kpa_achieved;
    bool m_kpa_achieved_isSet;
    bool m_kpa_achieved_isValid;

    QList<float> m_mobility_counts;
    bool m_mobility_counts_isSet;
    bool m_mobility_counts_isValid;

    QList<float> m_rotor_1_engaged;
    bool m_rotor_1_engaged_isSet;
    bool m_rotor_1_engaged_isValid;

    QList<float> m_rotor_1_engaged_auto;
    bool m_rotor_1_engaged_auto_isSet;
    bool m_rotor_1_engaged_auto_isValid;

    QList<float> m_rotor_2_engaged;
    bool m_rotor_2_engaged_isSet;
    bool m_rotor_2_engaged_isValid;

    QList<float> m_rotor_2_engaged_auto;
    bool m_rotor_2_engaged_auto_isSet;
    bool m_rotor_2_engaged_auto_isValid;

    QList<float> m_rotor_3_engaged;
    bool m_rotor_3_engaged_isSet;
    bool m_rotor_3_engaged_isValid;

    QList<float> m_rotor_4_engaged;
    bool m_rotor_4_engaged_isSet;
    bool m_rotor_4_engaged_isValid;

    QList<float> m_takeoff_counts;
    bool m_takeoff_counts_isSet;
    bool m_takeoff_counts_isValid;

    QList<float> m_unicorn_matches;
    bool m_unicorn_matches_isSet;
    bool m_unicorn_matches_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIEvent_Insights_2017)

#endif // OAIEvent_Insights_2017_H
