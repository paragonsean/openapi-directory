/**
 * The Blue Alliance API v3
 * # Overview    Information and statistics about FIRST Robotics Competition teams and events.   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).
 *
 * The version of the OpenAPI document: 3.8.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEvent_Insights_2018.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEvent_Insights_2018::OAIEvent_Insights_2018(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEvent_Insights_2018::OAIEvent_Insights_2018() {
    this->initializeModel();
}

OAIEvent_Insights_2018::~OAIEvent_Insights_2018() {}

void OAIEvent_Insights_2018::initializeModel() {

    m_auto_quest_achieved_isSet = false;
    m_auto_quest_achieved_isValid = false;

    m_average_boost_played_isSet = false;
    m_average_boost_played_isValid = false;

    m_average_endgame_points_isSet = false;
    m_average_endgame_points_isValid = false;

    m_average_force_played_isSet = false;
    m_average_force_played_isValid = false;

    m_average_foul_score_isSet = false;
    m_average_foul_score_isValid = false;

    m_average_points_auto_isSet = false;
    m_average_points_auto_isValid = false;

    m_average_points_teleop_isSet = false;
    m_average_points_teleop_isValid = false;

    m_average_run_points_auto_isSet = false;
    m_average_run_points_auto_isValid = false;

    m_average_scale_ownership_points_isSet = false;
    m_average_scale_ownership_points_isValid = false;

    m_average_scale_ownership_points_auto_isSet = false;
    m_average_scale_ownership_points_auto_isValid = false;

    m_average_scale_ownership_points_teleop_isSet = false;
    m_average_scale_ownership_points_teleop_isValid = false;

    m_average_score_isSet = false;
    m_average_score_isValid = false;

    m_average_switch_ownership_points_isSet = false;
    m_average_switch_ownership_points_isValid = false;

    m_average_switch_ownership_points_auto_isSet = false;
    m_average_switch_ownership_points_auto_isValid = false;

    m_average_switch_ownership_points_teleop_isSet = false;
    m_average_switch_ownership_points_teleop_isValid = false;

    m_average_vault_points_isSet = false;
    m_average_vault_points_isValid = false;

    m_average_win_margin_isSet = false;
    m_average_win_margin_isValid = false;

    m_average_win_score_isSet = false;
    m_average_win_score_isValid = false;

    m_boost_played_counts_isSet = false;
    m_boost_played_counts_isValid = false;

    m_climb_counts_isSet = false;
    m_climb_counts_isValid = false;

    m_face_the_boss_achieved_isSet = false;
    m_face_the_boss_achieved_isValid = false;

    m_force_played_counts_isSet = false;
    m_force_played_counts_isValid = false;

    m_high_score_isSet = false;
    m_high_score_isValid = false;

    m_levitate_played_counts_isSet = false;
    m_levitate_played_counts_isValid = false;

    m_run_counts_auto_isSet = false;
    m_run_counts_auto_isValid = false;

    m_scale_neutral_percentage_isSet = false;
    m_scale_neutral_percentage_isValid = false;

    m_scale_neutral_percentage_auto_isSet = false;
    m_scale_neutral_percentage_auto_isValid = false;

    m_scale_neutral_percentage_teleop_isSet = false;
    m_scale_neutral_percentage_teleop_isValid = false;

    m_switch_owned_counts_auto_isSet = false;
    m_switch_owned_counts_auto_isValid = false;

    m_unicorn_matches_isSet = false;
    m_unicorn_matches_isValid = false;

    m_winning_opp_switch_denial_percentage_teleop_isSet = false;
    m_winning_opp_switch_denial_percentage_teleop_isValid = false;

    m_winning_own_switch_ownership_percentage_isSet = false;
    m_winning_own_switch_ownership_percentage_isValid = false;

    m_winning_own_switch_ownership_percentage_auto_isSet = false;
    m_winning_own_switch_ownership_percentage_auto_isValid = false;

    m_winning_own_switch_ownership_percentage_teleop_isSet = false;
    m_winning_own_switch_ownership_percentage_teleop_isValid = false;

    m_winning_scale_ownership_percentage_isSet = false;
    m_winning_scale_ownership_percentage_isValid = false;

    m_winning_scale_ownership_percentage_auto_isSet = false;
    m_winning_scale_ownership_percentage_auto_isValid = false;

    m_winning_scale_ownership_percentage_teleop_isSet = false;
    m_winning_scale_ownership_percentage_teleop_isValid = false;
}

void OAIEvent_Insights_2018::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEvent_Insights_2018::fromJsonObject(QJsonObject json) {

    m_auto_quest_achieved_isValid = ::OpenAPI::fromJsonValue(m_auto_quest_achieved, json[QString("auto_quest_achieved")]);
    m_auto_quest_achieved_isSet = !json[QString("auto_quest_achieved")].isNull() && m_auto_quest_achieved_isValid;

    m_average_boost_played_isValid = ::OpenAPI::fromJsonValue(m_average_boost_played, json[QString("average_boost_played")]);
    m_average_boost_played_isSet = !json[QString("average_boost_played")].isNull() && m_average_boost_played_isValid;

    m_average_endgame_points_isValid = ::OpenAPI::fromJsonValue(m_average_endgame_points, json[QString("average_endgame_points")]);
    m_average_endgame_points_isSet = !json[QString("average_endgame_points")].isNull() && m_average_endgame_points_isValid;

    m_average_force_played_isValid = ::OpenAPI::fromJsonValue(m_average_force_played, json[QString("average_force_played")]);
    m_average_force_played_isSet = !json[QString("average_force_played")].isNull() && m_average_force_played_isValid;

    m_average_foul_score_isValid = ::OpenAPI::fromJsonValue(m_average_foul_score, json[QString("average_foul_score")]);
    m_average_foul_score_isSet = !json[QString("average_foul_score")].isNull() && m_average_foul_score_isValid;

    m_average_points_auto_isValid = ::OpenAPI::fromJsonValue(m_average_points_auto, json[QString("average_points_auto")]);
    m_average_points_auto_isSet = !json[QString("average_points_auto")].isNull() && m_average_points_auto_isValid;

    m_average_points_teleop_isValid = ::OpenAPI::fromJsonValue(m_average_points_teleop, json[QString("average_points_teleop")]);
    m_average_points_teleop_isSet = !json[QString("average_points_teleop")].isNull() && m_average_points_teleop_isValid;

    m_average_run_points_auto_isValid = ::OpenAPI::fromJsonValue(m_average_run_points_auto, json[QString("average_run_points_auto")]);
    m_average_run_points_auto_isSet = !json[QString("average_run_points_auto")].isNull() && m_average_run_points_auto_isValid;

    m_average_scale_ownership_points_isValid = ::OpenAPI::fromJsonValue(m_average_scale_ownership_points, json[QString("average_scale_ownership_points")]);
    m_average_scale_ownership_points_isSet = !json[QString("average_scale_ownership_points")].isNull() && m_average_scale_ownership_points_isValid;

    m_average_scale_ownership_points_auto_isValid = ::OpenAPI::fromJsonValue(m_average_scale_ownership_points_auto, json[QString("average_scale_ownership_points_auto")]);
    m_average_scale_ownership_points_auto_isSet = !json[QString("average_scale_ownership_points_auto")].isNull() && m_average_scale_ownership_points_auto_isValid;

    m_average_scale_ownership_points_teleop_isValid = ::OpenAPI::fromJsonValue(m_average_scale_ownership_points_teleop, json[QString("average_scale_ownership_points_teleop")]);
    m_average_scale_ownership_points_teleop_isSet = !json[QString("average_scale_ownership_points_teleop")].isNull() && m_average_scale_ownership_points_teleop_isValid;

    m_average_score_isValid = ::OpenAPI::fromJsonValue(m_average_score, json[QString("average_score")]);
    m_average_score_isSet = !json[QString("average_score")].isNull() && m_average_score_isValid;

    m_average_switch_ownership_points_isValid = ::OpenAPI::fromJsonValue(m_average_switch_ownership_points, json[QString("average_switch_ownership_points")]);
    m_average_switch_ownership_points_isSet = !json[QString("average_switch_ownership_points")].isNull() && m_average_switch_ownership_points_isValid;

    m_average_switch_ownership_points_auto_isValid = ::OpenAPI::fromJsonValue(m_average_switch_ownership_points_auto, json[QString("average_switch_ownership_points_auto")]);
    m_average_switch_ownership_points_auto_isSet = !json[QString("average_switch_ownership_points_auto")].isNull() && m_average_switch_ownership_points_auto_isValid;

    m_average_switch_ownership_points_teleop_isValid = ::OpenAPI::fromJsonValue(m_average_switch_ownership_points_teleop, json[QString("average_switch_ownership_points_teleop")]);
    m_average_switch_ownership_points_teleop_isSet = !json[QString("average_switch_ownership_points_teleop")].isNull() && m_average_switch_ownership_points_teleop_isValid;

    m_average_vault_points_isValid = ::OpenAPI::fromJsonValue(m_average_vault_points, json[QString("average_vault_points")]);
    m_average_vault_points_isSet = !json[QString("average_vault_points")].isNull() && m_average_vault_points_isValid;

    m_average_win_margin_isValid = ::OpenAPI::fromJsonValue(m_average_win_margin, json[QString("average_win_margin")]);
    m_average_win_margin_isSet = !json[QString("average_win_margin")].isNull() && m_average_win_margin_isValid;

    m_average_win_score_isValid = ::OpenAPI::fromJsonValue(m_average_win_score, json[QString("average_win_score")]);
    m_average_win_score_isSet = !json[QString("average_win_score")].isNull() && m_average_win_score_isValid;

    m_boost_played_counts_isValid = ::OpenAPI::fromJsonValue(m_boost_played_counts, json[QString("boost_played_counts")]);
    m_boost_played_counts_isSet = !json[QString("boost_played_counts")].isNull() && m_boost_played_counts_isValid;

    m_climb_counts_isValid = ::OpenAPI::fromJsonValue(m_climb_counts, json[QString("climb_counts")]);
    m_climb_counts_isSet = !json[QString("climb_counts")].isNull() && m_climb_counts_isValid;

    m_face_the_boss_achieved_isValid = ::OpenAPI::fromJsonValue(m_face_the_boss_achieved, json[QString("face_the_boss_achieved")]);
    m_face_the_boss_achieved_isSet = !json[QString("face_the_boss_achieved")].isNull() && m_face_the_boss_achieved_isValid;

    m_force_played_counts_isValid = ::OpenAPI::fromJsonValue(m_force_played_counts, json[QString("force_played_counts")]);
    m_force_played_counts_isSet = !json[QString("force_played_counts")].isNull() && m_force_played_counts_isValid;

    m_high_score_isValid = ::OpenAPI::fromJsonValue(m_high_score, json[QString("high_score")]);
    m_high_score_isSet = !json[QString("high_score")].isNull() && m_high_score_isValid;

    m_levitate_played_counts_isValid = ::OpenAPI::fromJsonValue(m_levitate_played_counts, json[QString("levitate_played_counts")]);
    m_levitate_played_counts_isSet = !json[QString("levitate_played_counts")].isNull() && m_levitate_played_counts_isValid;

    m_run_counts_auto_isValid = ::OpenAPI::fromJsonValue(m_run_counts_auto, json[QString("run_counts_auto")]);
    m_run_counts_auto_isSet = !json[QString("run_counts_auto")].isNull() && m_run_counts_auto_isValid;

    m_scale_neutral_percentage_isValid = ::OpenAPI::fromJsonValue(m_scale_neutral_percentage, json[QString("scale_neutral_percentage")]);
    m_scale_neutral_percentage_isSet = !json[QString("scale_neutral_percentage")].isNull() && m_scale_neutral_percentage_isValid;

    m_scale_neutral_percentage_auto_isValid = ::OpenAPI::fromJsonValue(m_scale_neutral_percentage_auto, json[QString("scale_neutral_percentage_auto")]);
    m_scale_neutral_percentage_auto_isSet = !json[QString("scale_neutral_percentage_auto")].isNull() && m_scale_neutral_percentage_auto_isValid;

    m_scale_neutral_percentage_teleop_isValid = ::OpenAPI::fromJsonValue(m_scale_neutral_percentage_teleop, json[QString("scale_neutral_percentage_teleop")]);
    m_scale_neutral_percentage_teleop_isSet = !json[QString("scale_neutral_percentage_teleop")].isNull() && m_scale_neutral_percentage_teleop_isValid;

    m_switch_owned_counts_auto_isValid = ::OpenAPI::fromJsonValue(m_switch_owned_counts_auto, json[QString("switch_owned_counts_auto")]);
    m_switch_owned_counts_auto_isSet = !json[QString("switch_owned_counts_auto")].isNull() && m_switch_owned_counts_auto_isValid;

    m_unicorn_matches_isValid = ::OpenAPI::fromJsonValue(m_unicorn_matches, json[QString("unicorn_matches")]);
    m_unicorn_matches_isSet = !json[QString("unicorn_matches")].isNull() && m_unicorn_matches_isValid;

    m_winning_opp_switch_denial_percentage_teleop_isValid = ::OpenAPI::fromJsonValue(m_winning_opp_switch_denial_percentage_teleop, json[QString("winning_opp_switch_denial_percentage_teleop")]);
    m_winning_opp_switch_denial_percentage_teleop_isSet = !json[QString("winning_opp_switch_denial_percentage_teleop")].isNull() && m_winning_opp_switch_denial_percentage_teleop_isValid;

    m_winning_own_switch_ownership_percentage_isValid = ::OpenAPI::fromJsonValue(m_winning_own_switch_ownership_percentage, json[QString("winning_own_switch_ownership_percentage")]);
    m_winning_own_switch_ownership_percentage_isSet = !json[QString("winning_own_switch_ownership_percentage")].isNull() && m_winning_own_switch_ownership_percentage_isValid;

    m_winning_own_switch_ownership_percentage_auto_isValid = ::OpenAPI::fromJsonValue(m_winning_own_switch_ownership_percentage_auto, json[QString("winning_own_switch_ownership_percentage_auto")]);
    m_winning_own_switch_ownership_percentage_auto_isSet = !json[QString("winning_own_switch_ownership_percentage_auto")].isNull() && m_winning_own_switch_ownership_percentage_auto_isValid;

    m_winning_own_switch_ownership_percentage_teleop_isValid = ::OpenAPI::fromJsonValue(m_winning_own_switch_ownership_percentage_teleop, json[QString("winning_own_switch_ownership_percentage_teleop")]);
    m_winning_own_switch_ownership_percentage_teleop_isSet = !json[QString("winning_own_switch_ownership_percentage_teleop")].isNull() && m_winning_own_switch_ownership_percentage_teleop_isValid;

    m_winning_scale_ownership_percentage_isValid = ::OpenAPI::fromJsonValue(m_winning_scale_ownership_percentage, json[QString("winning_scale_ownership_percentage")]);
    m_winning_scale_ownership_percentage_isSet = !json[QString("winning_scale_ownership_percentage")].isNull() && m_winning_scale_ownership_percentage_isValid;

    m_winning_scale_ownership_percentage_auto_isValid = ::OpenAPI::fromJsonValue(m_winning_scale_ownership_percentage_auto, json[QString("winning_scale_ownership_percentage_auto")]);
    m_winning_scale_ownership_percentage_auto_isSet = !json[QString("winning_scale_ownership_percentage_auto")].isNull() && m_winning_scale_ownership_percentage_auto_isValid;

    m_winning_scale_ownership_percentage_teleop_isValid = ::OpenAPI::fromJsonValue(m_winning_scale_ownership_percentage_teleop, json[QString("winning_scale_ownership_percentage_teleop")]);
    m_winning_scale_ownership_percentage_teleop_isSet = !json[QString("winning_scale_ownership_percentage_teleop")].isNull() && m_winning_scale_ownership_percentage_teleop_isValid;
}

QString OAIEvent_Insights_2018::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEvent_Insights_2018::asJsonObject() const {
    QJsonObject obj;
    if (m_auto_quest_achieved.size() > 0) {
        obj.insert(QString("auto_quest_achieved"), ::OpenAPI::toJsonValue(m_auto_quest_achieved));
    }
    if (m_average_boost_played_isSet) {
        obj.insert(QString("average_boost_played"), ::OpenAPI::toJsonValue(m_average_boost_played));
    }
    if (m_average_endgame_points_isSet) {
        obj.insert(QString("average_endgame_points"), ::OpenAPI::toJsonValue(m_average_endgame_points));
    }
    if (m_average_force_played_isSet) {
        obj.insert(QString("average_force_played"), ::OpenAPI::toJsonValue(m_average_force_played));
    }
    if (m_average_foul_score_isSet) {
        obj.insert(QString("average_foul_score"), ::OpenAPI::toJsonValue(m_average_foul_score));
    }
    if (m_average_points_auto_isSet) {
        obj.insert(QString("average_points_auto"), ::OpenAPI::toJsonValue(m_average_points_auto));
    }
    if (m_average_points_teleop_isSet) {
        obj.insert(QString("average_points_teleop"), ::OpenAPI::toJsonValue(m_average_points_teleop));
    }
    if (m_average_run_points_auto_isSet) {
        obj.insert(QString("average_run_points_auto"), ::OpenAPI::toJsonValue(m_average_run_points_auto));
    }
    if (m_average_scale_ownership_points_isSet) {
        obj.insert(QString("average_scale_ownership_points"), ::OpenAPI::toJsonValue(m_average_scale_ownership_points));
    }
    if (m_average_scale_ownership_points_auto_isSet) {
        obj.insert(QString("average_scale_ownership_points_auto"), ::OpenAPI::toJsonValue(m_average_scale_ownership_points_auto));
    }
    if (m_average_scale_ownership_points_teleop_isSet) {
        obj.insert(QString("average_scale_ownership_points_teleop"), ::OpenAPI::toJsonValue(m_average_scale_ownership_points_teleop));
    }
    if (m_average_score_isSet) {
        obj.insert(QString("average_score"), ::OpenAPI::toJsonValue(m_average_score));
    }
    if (m_average_switch_ownership_points_isSet) {
        obj.insert(QString("average_switch_ownership_points"), ::OpenAPI::toJsonValue(m_average_switch_ownership_points));
    }
    if (m_average_switch_ownership_points_auto_isSet) {
        obj.insert(QString("average_switch_ownership_points_auto"), ::OpenAPI::toJsonValue(m_average_switch_ownership_points_auto));
    }
    if (m_average_switch_ownership_points_teleop_isSet) {
        obj.insert(QString("average_switch_ownership_points_teleop"), ::OpenAPI::toJsonValue(m_average_switch_ownership_points_teleop));
    }
    if (m_average_vault_points_isSet) {
        obj.insert(QString("average_vault_points"), ::OpenAPI::toJsonValue(m_average_vault_points));
    }
    if (m_average_win_margin_isSet) {
        obj.insert(QString("average_win_margin"), ::OpenAPI::toJsonValue(m_average_win_margin));
    }
    if (m_average_win_score_isSet) {
        obj.insert(QString("average_win_score"), ::OpenAPI::toJsonValue(m_average_win_score));
    }
    if (m_boost_played_counts.size() > 0) {
        obj.insert(QString("boost_played_counts"), ::OpenAPI::toJsonValue(m_boost_played_counts));
    }
    if (m_climb_counts.size() > 0) {
        obj.insert(QString("climb_counts"), ::OpenAPI::toJsonValue(m_climb_counts));
    }
    if (m_face_the_boss_achieved.size() > 0) {
        obj.insert(QString("face_the_boss_achieved"), ::OpenAPI::toJsonValue(m_face_the_boss_achieved));
    }
    if (m_force_played_counts.size() > 0) {
        obj.insert(QString("force_played_counts"), ::OpenAPI::toJsonValue(m_force_played_counts));
    }
    if (m_high_score.size() > 0) {
        obj.insert(QString("high_score"), ::OpenAPI::toJsonValue(m_high_score));
    }
    if (m_levitate_played_counts.size() > 0) {
        obj.insert(QString("levitate_played_counts"), ::OpenAPI::toJsonValue(m_levitate_played_counts));
    }
    if (m_run_counts_auto.size() > 0) {
        obj.insert(QString("run_counts_auto"), ::OpenAPI::toJsonValue(m_run_counts_auto));
    }
    if (m_scale_neutral_percentage_isSet) {
        obj.insert(QString("scale_neutral_percentage"), ::OpenAPI::toJsonValue(m_scale_neutral_percentage));
    }
    if (m_scale_neutral_percentage_auto_isSet) {
        obj.insert(QString("scale_neutral_percentage_auto"), ::OpenAPI::toJsonValue(m_scale_neutral_percentage_auto));
    }
    if (m_scale_neutral_percentage_teleop_isSet) {
        obj.insert(QString("scale_neutral_percentage_teleop"), ::OpenAPI::toJsonValue(m_scale_neutral_percentage_teleop));
    }
    if (m_switch_owned_counts_auto.size() > 0) {
        obj.insert(QString("switch_owned_counts_auto"), ::OpenAPI::toJsonValue(m_switch_owned_counts_auto));
    }
    if (m_unicorn_matches.size() > 0) {
        obj.insert(QString("unicorn_matches"), ::OpenAPI::toJsonValue(m_unicorn_matches));
    }
    if (m_winning_opp_switch_denial_percentage_teleop_isSet) {
        obj.insert(QString("winning_opp_switch_denial_percentage_teleop"), ::OpenAPI::toJsonValue(m_winning_opp_switch_denial_percentage_teleop));
    }
    if (m_winning_own_switch_ownership_percentage_isSet) {
        obj.insert(QString("winning_own_switch_ownership_percentage"), ::OpenAPI::toJsonValue(m_winning_own_switch_ownership_percentage));
    }
    if (m_winning_own_switch_ownership_percentage_auto_isSet) {
        obj.insert(QString("winning_own_switch_ownership_percentage_auto"), ::OpenAPI::toJsonValue(m_winning_own_switch_ownership_percentage_auto));
    }
    if (m_winning_own_switch_ownership_percentage_teleop_isSet) {
        obj.insert(QString("winning_own_switch_ownership_percentage_teleop"), ::OpenAPI::toJsonValue(m_winning_own_switch_ownership_percentage_teleop));
    }
    if (m_winning_scale_ownership_percentage_isSet) {
        obj.insert(QString("winning_scale_ownership_percentage"), ::OpenAPI::toJsonValue(m_winning_scale_ownership_percentage));
    }
    if (m_winning_scale_ownership_percentage_auto_isSet) {
        obj.insert(QString("winning_scale_ownership_percentage_auto"), ::OpenAPI::toJsonValue(m_winning_scale_ownership_percentage_auto));
    }
    if (m_winning_scale_ownership_percentage_teleop_isSet) {
        obj.insert(QString("winning_scale_ownership_percentage_teleop"), ::OpenAPI::toJsonValue(m_winning_scale_ownership_percentage_teleop));
    }
    return obj;
}

QList<float> OAIEvent_Insights_2018::getAutoQuestAchieved() const {
    return m_auto_quest_achieved;
}
void OAIEvent_Insights_2018::setAutoQuestAchieved(const QList<float> &auto_quest_achieved) {
    m_auto_quest_achieved = auto_quest_achieved;
    m_auto_quest_achieved_isSet = true;
}

bool OAIEvent_Insights_2018::is_auto_quest_achieved_Set() const{
    return m_auto_quest_achieved_isSet;
}

bool OAIEvent_Insights_2018::is_auto_quest_achieved_Valid() const{
    return m_auto_quest_achieved_isValid;
}

float OAIEvent_Insights_2018::getAverageBoostPlayed() const {
    return m_average_boost_played;
}
void OAIEvent_Insights_2018::setAverageBoostPlayed(const float &average_boost_played) {
    m_average_boost_played = average_boost_played;
    m_average_boost_played_isSet = true;
}

bool OAIEvent_Insights_2018::is_average_boost_played_Set() const{
    return m_average_boost_played_isSet;
}

bool OAIEvent_Insights_2018::is_average_boost_played_Valid() const{
    return m_average_boost_played_isValid;
}

float OAIEvent_Insights_2018::getAverageEndgamePoints() const {
    return m_average_endgame_points;
}
void OAIEvent_Insights_2018::setAverageEndgamePoints(const float &average_endgame_points) {
    m_average_endgame_points = average_endgame_points;
    m_average_endgame_points_isSet = true;
}

bool OAIEvent_Insights_2018::is_average_endgame_points_Set() const{
    return m_average_endgame_points_isSet;
}

bool OAIEvent_Insights_2018::is_average_endgame_points_Valid() const{
    return m_average_endgame_points_isValid;
}

float OAIEvent_Insights_2018::getAverageForcePlayed() const {
    return m_average_force_played;
}
void OAIEvent_Insights_2018::setAverageForcePlayed(const float &average_force_played) {
    m_average_force_played = average_force_played;
    m_average_force_played_isSet = true;
}

bool OAIEvent_Insights_2018::is_average_force_played_Set() const{
    return m_average_force_played_isSet;
}

bool OAIEvent_Insights_2018::is_average_force_played_Valid() const{
    return m_average_force_played_isValid;
}

float OAIEvent_Insights_2018::getAverageFoulScore() const {
    return m_average_foul_score;
}
void OAIEvent_Insights_2018::setAverageFoulScore(const float &average_foul_score) {
    m_average_foul_score = average_foul_score;
    m_average_foul_score_isSet = true;
}

bool OAIEvent_Insights_2018::is_average_foul_score_Set() const{
    return m_average_foul_score_isSet;
}

bool OAIEvent_Insights_2018::is_average_foul_score_Valid() const{
    return m_average_foul_score_isValid;
}

float OAIEvent_Insights_2018::getAveragePointsAuto() const {
    return m_average_points_auto;
}
void OAIEvent_Insights_2018::setAveragePointsAuto(const float &average_points_auto) {
    m_average_points_auto = average_points_auto;
    m_average_points_auto_isSet = true;
}

bool OAIEvent_Insights_2018::is_average_points_auto_Set() const{
    return m_average_points_auto_isSet;
}

bool OAIEvent_Insights_2018::is_average_points_auto_Valid() const{
    return m_average_points_auto_isValid;
}

float OAIEvent_Insights_2018::getAveragePointsTeleop() const {
    return m_average_points_teleop;
}
void OAIEvent_Insights_2018::setAveragePointsTeleop(const float &average_points_teleop) {
    m_average_points_teleop = average_points_teleop;
    m_average_points_teleop_isSet = true;
}

bool OAIEvent_Insights_2018::is_average_points_teleop_Set() const{
    return m_average_points_teleop_isSet;
}

bool OAIEvent_Insights_2018::is_average_points_teleop_Valid() const{
    return m_average_points_teleop_isValid;
}

float OAIEvent_Insights_2018::getAverageRunPointsAuto() const {
    return m_average_run_points_auto;
}
void OAIEvent_Insights_2018::setAverageRunPointsAuto(const float &average_run_points_auto) {
    m_average_run_points_auto = average_run_points_auto;
    m_average_run_points_auto_isSet = true;
}

bool OAIEvent_Insights_2018::is_average_run_points_auto_Set() const{
    return m_average_run_points_auto_isSet;
}

bool OAIEvent_Insights_2018::is_average_run_points_auto_Valid() const{
    return m_average_run_points_auto_isValid;
}

float OAIEvent_Insights_2018::getAverageScaleOwnershipPoints() const {
    return m_average_scale_ownership_points;
}
void OAIEvent_Insights_2018::setAverageScaleOwnershipPoints(const float &average_scale_ownership_points) {
    m_average_scale_ownership_points = average_scale_ownership_points;
    m_average_scale_ownership_points_isSet = true;
}

bool OAIEvent_Insights_2018::is_average_scale_ownership_points_Set() const{
    return m_average_scale_ownership_points_isSet;
}

bool OAIEvent_Insights_2018::is_average_scale_ownership_points_Valid() const{
    return m_average_scale_ownership_points_isValid;
}

float OAIEvent_Insights_2018::getAverageScaleOwnershipPointsAuto() const {
    return m_average_scale_ownership_points_auto;
}
void OAIEvent_Insights_2018::setAverageScaleOwnershipPointsAuto(const float &average_scale_ownership_points_auto) {
    m_average_scale_ownership_points_auto = average_scale_ownership_points_auto;
    m_average_scale_ownership_points_auto_isSet = true;
}

bool OAIEvent_Insights_2018::is_average_scale_ownership_points_auto_Set() const{
    return m_average_scale_ownership_points_auto_isSet;
}

bool OAIEvent_Insights_2018::is_average_scale_ownership_points_auto_Valid() const{
    return m_average_scale_ownership_points_auto_isValid;
}

float OAIEvent_Insights_2018::getAverageScaleOwnershipPointsTeleop() const {
    return m_average_scale_ownership_points_teleop;
}
void OAIEvent_Insights_2018::setAverageScaleOwnershipPointsTeleop(const float &average_scale_ownership_points_teleop) {
    m_average_scale_ownership_points_teleop = average_scale_ownership_points_teleop;
    m_average_scale_ownership_points_teleop_isSet = true;
}

bool OAIEvent_Insights_2018::is_average_scale_ownership_points_teleop_Set() const{
    return m_average_scale_ownership_points_teleop_isSet;
}

bool OAIEvent_Insights_2018::is_average_scale_ownership_points_teleop_Valid() const{
    return m_average_scale_ownership_points_teleop_isValid;
}

float OAIEvent_Insights_2018::getAverageScore() const {
    return m_average_score;
}
void OAIEvent_Insights_2018::setAverageScore(const float &average_score) {
    m_average_score = average_score;
    m_average_score_isSet = true;
}

bool OAIEvent_Insights_2018::is_average_score_Set() const{
    return m_average_score_isSet;
}

bool OAIEvent_Insights_2018::is_average_score_Valid() const{
    return m_average_score_isValid;
}

float OAIEvent_Insights_2018::getAverageSwitchOwnershipPoints() const {
    return m_average_switch_ownership_points;
}
void OAIEvent_Insights_2018::setAverageSwitchOwnershipPoints(const float &average_switch_ownership_points) {
    m_average_switch_ownership_points = average_switch_ownership_points;
    m_average_switch_ownership_points_isSet = true;
}

bool OAIEvent_Insights_2018::is_average_switch_ownership_points_Set() const{
    return m_average_switch_ownership_points_isSet;
}

bool OAIEvent_Insights_2018::is_average_switch_ownership_points_Valid() const{
    return m_average_switch_ownership_points_isValid;
}

float OAIEvent_Insights_2018::getAverageSwitchOwnershipPointsAuto() const {
    return m_average_switch_ownership_points_auto;
}
void OAIEvent_Insights_2018::setAverageSwitchOwnershipPointsAuto(const float &average_switch_ownership_points_auto) {
    m_average_switch_ownership_points_auto = average_switch_ownership_points_auto;
    m_average_switch_ownership_points_auto_isSet = true;
}

bool OAIEvent_Insights_2018::is_average_switch_ownership_points_auto_Set() const{
    return m_average_switch_ownership_points_auto_isSet;
}

bool OAIEvent_Insights_2018::is_average_switch_ownership_points_auto_Valid() const{
    return m_average_switch_ownership_points_auto_isValid;
}

float OAIEvent_Insights_2018::getAverageSwitchOwnershipPointsTeleop() const {
    return m_average_switch_ownership_points_teleop;
}
void OAIEvent_Insights_2018::setAverageSwitchOwnershipPointsTeleop(const float &average_switch_ownership_points_teleop) {
    m_average_switch_ownership_points_teleop = average_switch_ownership_points_teleop;
    m_average_switch_ownership_points_teleop_isSet = true;
}

bool OAIEvent_Insights_2018::is_average_switch_ownership_points_teleop_Set() const{
    return m_average_switch_ownership_points_teleop_isSet;
}

bool OAIEvent_Insights_2018::is_average_switch_ownership_points_teleop_Valid() const{
    return m_average_switch_ownership_points_teleop_isValid;
}

float OAIEvent_Insights_2018::getAverageVaultPoints() const {
    return m_average_vault_points;
}
void OAIEvent_Insights_2018::setAverageVaultPoints(const float &average_vault_points) {
    m_average_vault_points = average_vault_points;
    m_average_vault_points_isSet = true;
}

bool OAIEvent_Insights_2018::is_average_vault_points_Set() const{
    return m_average_vault_points_isSet;
}

bool OAIEvent_Insights_2018::is_average_vault_points_Valid() const{
    return m_average_vault_points_isValid;
}

float OAIEvent_Insights_2018::getAverageWinMargin() const {
    return m_average_win_margin;
}
void OAIEvent_Insights_2018::setAverageWinMargin(const float &average_win_margin) {
    m_average_win_margin = average_win_margin;
    m_average_win_margin_isSet = true;
}

bool OAIEvent_Insights_2018::is_average_win_margin_Set() const{
    return m_average_win_margin_isSet;
}

bool OAIEvent_Insights_2018::is_average_win_margin_Valid() const{
    return m_average_win_margin_isValid;
}

float OAIEvent_Insights_2018::getAverageWinScore() const {
    return m_average_win_score;
}
void OAIEvent_Insights_2018::setAverageWinScore(const float &average_win_score) {
    m_average_win_score = average_win_score;
    m_average_win_score_isSet = true;
}

bool OAIEvent_Insights_2018::is_average_win_score_Set() const{
    return m_average_win_score_isSet;
}

bool OAIEvent_Insights_2018::is_average_win_score_Valid() const{
    return m_average_win_score_isValid;
}

QList<float> OAIEvent_Insights_2018::getBoostPlayedCounts() const {
    return m_boost_played_counts;
}
void OAIEvent_Insights_2018::setBoostPlayedCounts(const QList<float> &boost_played_counts) {
    m_boost_played_counts = boost_played_counts;
    m_boost_played_counts_isSet = true;
}

bool OAIEvent_Insights_2018::is_boost_played_counts_Set() const{
    return m_boost_played_counts_isSet;
}

bool OAIEvent_Insights_2018::is_boost_played_counts_Valid() const{
    return m_boost_played_counts_isValid;
}

QList<float> OAIEvent_Insights_2018::getClimbCounts() const {
    return m_climb_counts;
}
void OAIEvent_Insights_2018::setClimbCounts(const QList<float> &climb_counts) {
    m_climb_counts = climb_counts;
    m_climb_counts_isSet = true;
}

bool OAIEvent_Insights_2018::is_climb_counts_Set() const{
    return m_climb_counts_isSet;
}

bool OAIEvent_Insights_2018::is_climb_counts_Valid() const{
    return m_climb_counts_isValid;
}

QList<float> OAIEvent_Insights_2018::getFaceTheBossAchieved() const {
    return m_face_the_boss_achieved;
}
void OAIEvent_Insights_2018::setFaceTheBossAchieved(const QList<float> &face_the_boss_achieved) {
    m_face_the_boss_achieved = face_the_boss_achieved;
    m_face_the_boss_achieved_isSet = true;
}

bool OAIEvent_Insights_2018::is_face_the_boss_achieved_Set() const{
    return m_face_the_boss_achieved_isSet;
}

bool OAIEvent_Insights_2018::is_face_the_boss_achieved_Valid() const{
    return m_face_the_boss_achieved_isValid;
}

QList<float> OAIEvent_Insights_2018::getForcePlayedCounts() const {
    return m_force_played_counts;
}
void OAIEvent_Insights_2018::setForcePlayedCounts(const QList<float> &force_played_counts) {
    m_force_played_counts = force_played_counts;
    m_force_played_counts_isSet = true;
}

bool OAIEvent_Insights_2018::is_force_played_counts_Set() const{
    return m_force_played_counts_isSet;
}

bool OAIEvent_Insights_2018::is_force_played_counts_Valid() const{
    return m_force_played_counts_isValid;
}

QList<QString> OAIEvent_Insights_2018::getHighScore() const {
    return m_high_score;
}
void OAIEvent_Insights_2018::setHighScore(const QList<QString> &high_score) {
    m_high_score = high_score;
    m_high_score_isSet = true;
}

bool OAIEvent_Insights_2018::is_high_score_Set() const{
    return m_high_score_isSet;
}

bool OAIEvent_Insights_2018::is_high_score_Valid() const{
    return m_high_score_isValid;
}

QList<float> OAIEvent_Insights_2018::getLevitatePlayedCounts() const {
    return m_levitate_played_counts;
}
void OAIEvent_Insights_2018::setLevitatePlayedCounts(const QList<float> &levitate_played_counts) {
    m_levitate_played_counts = levitate_played_counts;
    m_levitate_played_counts_isSet = true;
}

bool OAIEvent_Insights_2018::is_levitate_played_counts_Set() const{
    return m_levitate_played_counts_isSet;
}

bool OAIEvent_Insights_2018::is_levitate_played_counts_Valid() const{
    return m_levitate_played_counts_isValid;
}

QList<float> OAIEvent_Insights_2018::getRunCountsAuto() const {
    return m_run_counts_auto;
}
void OAIEvent_Insights_2018::setRunCountsAuto(const QList<float> &run_counts_auto) {
    m_run_counts_auto = run_counts_auto;
    m_run_counts_auto_isSet = true;
}

bool OAIEvent_Insights_2018::is_run_counts_auto_Set() const{
    return m_run_counts_auto_isSet;
}

bool OAIEvent_Insights_2018::is_run_counts_auto_Valid() const{
    return m_run_counts_auto_isValid;
}

float OAIEvent_Insights_2018::getScaleNeutralPercentage() const {
    return m_scale_neutral_percentage;
}
void OAIEvent_Insights_2018::setScaleNeutralPercentage(const float &scale_neutral_percentage) {
    m_scale_neutral_percentage = scale_neutral_percentage;
    m_scale_neutral_percentage_isSet = true;
}

bool OAIEvent_Insights_2018::is_scale_neutral_percentage_Set() const{
    return m_scale_neutral_percentage_isSet;
}

bool OAIEvent_Insights_2018::is_scale_neutral_percentage_Valid() const{
    return m_scale_neutral_percentage_isValid;
}

float OAIEvent_Insights_2018::getScaleNeutralPercentageAuto() const {
    return m_scale_neutral_percentage_auto;
}
void OAIEvent_Insights_2018::setScaleNeutralPercentageAuto(const float &scale_neutral_percentage_auto) {
    m_scale_neutral_percentage_auto = scale_neutral_percentage_auto;
    m_scale_neutral_percentage_auto_isSet = true;
}

bool OAIEvent_Insights_2018::is_scale_neutral_percentage_auto_Set() const{
    return m_scale_neutral_percentage_auto_isSet;
}

bool OAIEvent_Insights_2018::is_scale_neutral_percentage_auto_Valid() const{
    return m_scale_neutral_percentage_auto_isValid;
}

float OAIEvent_Insights_2018::getScaleNeutralPercentageTeleop() const {
    return m_scale_neutral_percentage_teleop;
}
void OAIEvent_Insights_2018::setScaleNeutralPercentageTeleop(const float &scale_neutral_percentage_teleop) {
    m_scale_neutral_percentage_teleop = scale_neutral_percentage_teleop;
    m_scale_neutral_percentage_teleop_isSet = true;
}

bool OAIEvent_Insights_2018::is_scale_neutral_percentage_teleop_Set() const{
    return m_scale_neutral_percentage_teleop_isSet;
}

bool OAIEvent_Insights_2018::is_scale_neutral_percentage_teleop_Valid() const{
    return m_scale_neutral_percentage_teleop_isValid;
}

QList<float> OAIEvent_Insights_2018::getSwitchOwnedCountsAuto() const {
    return m_switch_owned_counts_auto;
}
void OAIEvent_Insights_2018::setSwitchOwnedCountsAuto(const QList<float> &switch_owned_counts_auto) {
    m_switch_owned_counts_auto = switch_owned_counts_auto;
    m_switch_owned_counts_auto_isSet = true;
}

bool OAIEvent_Insights_2018::is_switch_owned_counts_auto_Set() const{
    return m_switch_owned_counts_auto_isSet;
}

bool OAIEvent_Insights_2018::is_switch_owned_counts_auto_Valid() const{
    return m_switch_owned_counts_auto_isValid;
}

QList<float> OAIEvent_Insights_2018::getUnicornMatches() const {
    return m_unicorn_matches;
}
void OAIEvent_Insights_2018::setUnicornMatches(const QList<float> &unicorn_matches) {
    m_unicorn_matches = unicorn_matches;
    m_unicorn_matches_isSet = true;
}

bool OAIEvent_Insights_2018::is_unicorn_matches_Set() const{
    return m_unicorn_matches_isSet;
}

bool OAIEvent_Insights_2018::is_unicorn_matches_Valid() const{
    return m_unicorn_matches_isValid;
}

float OAIEvent_Insights_2018::getWinningOppSwitchDenialPercentageTeleop() const {
    return m_winning_opp_switch_denial_percentage_teleop;
}
void OAIEvent_Insights_2018::setWinningOppSwitchDenialPercentageTeleop(const float &winning_opp_switch_denial_percentage_teleop) {
    m_winning_opp_switch_denial_percentage_teleop = winning_opp_switch_denial_percentage_teleop;
    m_winning_opp_switch_denial_percentage_teleop_isSet = true;
}

bool OAIEvent_Insights_2018::is_winning_opp_switch_denial_percentage_teleop_Set() const{
    return m_winning_opp_switch_denial_percentage_teleop_isSet;
}

bool OAIEvent_Insights_2018::is_winning_opp_switch_denial_percentage_teleop_Valid() const{
    return m_winning_opp_switch_denial_percentage_teleop_isValid;
}

float OAIEvent_Insights_2018::getWinningOwnSwitchOwnershipPercentage() const {
    return m_winning_own_switch_ownership_percentage;
}
void OAIEvent_Insights_2018::setWinningOwnSwitchOwnershipPercentage(const float &winning_own_switch_ownership_percentage) {
    m_winning_own_switch_ownership_percentage = winning_own_switch_ownership_percentage;
    m_winning_own_switch_ownership_percentage_isSet = true;
}

bool OAIEvent_Insights_2018::is_winning_own_switch_ownership_percentage_Set() const{
    return m_winning_own_switch_ownership_percentage_isSet;
}

bool OAIEvent_Insights_2018::is_winning_own_switch_ownership_percentage_Valid() const{
    return m_winning_own_switch_ownership_percentage_isValid;
}

float OAIEvent_Insights_2018::getWinningOwnSwitchOwnershipPercentageAuto() const {
    return m_winning_own_switch_ownership_percentage_auto;
}
void OAIEvent_Insights_2018::setWinningOwnSwitchOwnershipPercentageAuto(const float &winning_own_switch_ownership_percentage_auto) {
    m_winning_own_switch_ownership_percentage_auto = winning_own_switch_ownership_percentage_auto;
    m_winning_own_switch_ownership_percentage_auto_isSet = true;
}

bool OAIEvent_Insights_2018::is_winning_own_switch_ownership_percentage_auto_Set() const{
    return m_winning_own_switch_ownership_percentage_auto_isSet;
}

bool OAIEvent_Insights_2018::is_winning_own_switch_ownership_percentage_auto_Valid() const{
    return m_winning_own_switch_ownership_percentage_auto_isValid;
}

float OAIEvent_Insights_2018::getWinningOwnSwitchOwnershipPercentageTeleop() const {
    return m_winning_own_switch_ownership_percentage_teleop;
}
void OAIEvent_Insights_2018::setWinningOwnSwitchOwnershipPercentageTeleop(const float &winning_own_switch_ownership_percentage_teleop) {
    m_winning_own_switch_ownership_percentage_teleop = winning_own_switch_ownership_percentage_teleop;
    m_winning_own_switch_ownership_percentage_teleop_isSet = true;
}

bool OAIEvent_Insights_2018::is_winning_own_switch_ownership_percentage_teleop_Set() const{
    return m_winning_own_switch_ownership_percentage_teleop_isSet;
}

bool OAIEvent_Insights_2018::is_winning_own_switch_ownership_percentage_teleop_Valid() const{
    return m_winning_own_switch_ownership_percentage_teleop_isValid;
}

float OAIEvent_Insights_2018::getWinningScaleOwnershipPercentage() const {
    return m_winning_scale_ownership_percentage;
}
void OAIEvent_Insights_2018::setWinningScaleOwnershipPercentage(const float &winning_scale_ownership_percentage) {
    m_winning_scale_ownership_percentage = winning_scale_ownership_percentage;
    m_winning_scale_ownership_percentage_isSet = true;
}

bool OAIEvent_Insights_2018::is_winning_scale_ownership_percentage_Set() const{
    return m_winning_scale_ownership_percentage_isSet;
}

bool OAIEvent_Insights_2018::is_winning_scale_ownership_percentage_Valid() const{
    return m_winning_scale_ownership_percentage_isValid;
}

float OAIEvent_Insights_2018::getWinningScaleOwnershipPercentageAuto() const {
    return m_winning_scale_ownership_percentage_auto;
}
void OAIEvent_Insights_2018::setWinningScaleOwnershipPercentageAuto(const float &winning_scale_ownership_percentage_auto) {
    m_winning_scale_ownership_percentage_auto = winning_scale_ownership_percentage_auto;
    m_winning_scale_ownership_percentage_auto_isSet = true;
}

bool OAIEvent_Insights_2018::is_winning_scale_ownership_percentage_auto_Set() const{
    return m_winning_scale_ownership_percentage_auto_isSet;
}

bool OAIEvent_Insights_2018::is_winning_scale_ownership_percentage_auto_Valid() const{
    return m_winning_scale_ownership_percentage_auto_isValid;
}

float OAIEvent_Insights_2018::getWinningScaleOwnershipPercentageTeleop() const {
    return m_winning_scale_ownership_percentage_teleop;
}
void OAIEvent_Insights_2018::setWinningScaleOwnershipPercentageTeleop(const float &winning_scale_ownership_percentage_teleop) {
    m_winning_scale_ownership_percentage_teleop = winning_scale_ownership_percentage_teleop;
    m_winning_scale_ownership_percentage_teleop_isSet = true;
}

bool OAIEvent_Insights_2018::is_winning_scale_ownership_percentage_teleop_Set() const{
    return m_winning_scale_ownership_percentage_teleop_isSet;
}

bool OAIEvent_Insights_2018::is_winning_scale_ownership_percentage_teleop_Valid() const{
    return m_winning_scale_ownership_percentage_teleop_isValid;
}

bool OAIEvent_Insights_2018::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_auto_quest_achieved.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_average_boost_played_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_average_endgame_points_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_average_force_played_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_average_foul_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_average_points_auto_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_average_points_teleop_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_average_run_points_auto_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_average_scale_ownership_points_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_average_scale_ownership_points_auto_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_average_scale_ownership_points_teleop_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_average_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_average_switch_ownership_points_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_average_switch_ownership_points_auto_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_average_switch_ownership_points_teleop_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_average_vault_points_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_average_win_margin_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_average_win_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_boost_played_counts.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_climb_counts.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_face_the_boss_achieved.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_force_played_counts.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_high_score.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_levitate_played_counts.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_run_counts_auto.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_scale_neutral_percentage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scale_neutral_percentage_auto_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scale_neutral_percentage_teleop_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_switch_owned_counts_auto.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_unicorn_matches.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_winning_opp_switch_denial_percentage_teleop_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_winning_own_switch_ownership_percentage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_winning_own_switch_ownership_percentage_auto_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_winning_own_switch_ownership_percentage_teleop_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_winning_scale_ownership_percentage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_winning_scale_ownership_percentage_auto_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_winning_scale_ownership_percentage_teleop_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEvent_Insights_2018::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_auto_quest_achieved_isValid && m_average_boost_played_isValid && m_average_endgame_points_isValid && m_average_force_played_isValid && m_average_foul_score_isValid && m_average_points_auto_isValid && m_average_points_teleop_isValid && m_average_run_points_auto_isValid && m_average_scale_ownership_points_isValid && m_average_scale_ownership_points_auto_isValid && m_average_scale_ownership_points_teleop_isValid && m_average_score_isValid && m_average_switch_ownership_points_isValid && m_average_switch_ownership_points_auto_isValid && m_average_switch_ownership_points_teleop_isValid && m_average_vault_points_isValid && m_average_win_margin_isValid && m_average_win_score_isValid && m_boost_played_counts_isValid && m_climb_counts_isValid && m_face_the_boss_achieved_isValid && m_force_played_counts_isValid && m_high_score_isValid && m_levitate_played_counts_isValid && m_run_counts_auto_isValid && m_scale_neutral_percentage_isValid && m_scale_neutral_percentage_auto_isValid && m_scale_neutral_percentage_teleop_isValid && m_switch_owned_counts_auto_isValid && m_unicorn_matches_isValid && m_winning_opp_switch_denial_percentage_teleop_isValid && m_winning_own_switch_ownership_percentage_isValid && m_winning_own_switch_ownership_percentage_auto_isValid && m_winning_own_switch_ownership_percentage_teleop_isValid && m_winning_scale_ownership_percentage_isValid && m_winning_scale_ownership_percentage_auto_isValid && m_winning_scale_ownership_percentage_teleop_isValid && true;
}

} // namespace OpenAPI
