/**
 * The Blue Alliance API v3
 * # Overview    Information and statistics about FIRST Robotics Competition teams and events.   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).
 *
 * The version of the OpenAPI document: 3.8.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMatch_Score_Breakdown_2017_Alliance.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMatch_Score_Breakdown_2017_Alliance::OAIMatch_Score_Breakdown_2017_Alliance(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMatch_Score_Breakdown_2017_Alliance::OAIMatch_Score_Breakdown_2017_Alliance() {
    this->initializeModel();
}

OAIMatch_Score_Breakdown_2017_Alliance::~OAIMatch_Score_Breakdown_2017_Alliance() {}

void OAIMatch_Score_Breakdown_2017_Alliance::initializeModel() {

    m_adjust_points_isSet = false;
    m_adjust_points_isValid = false;

    m_auto_fuel_high_isSet = false;
    m_auto_fuel_high_isValid = false;

    m_auto_fuel_low_isSet = false;
    m_auto_fuel_low_isValid = false;

    m_auto_fuel_points_isSet = false;
    m_auto_fuel_points_isValid = false;

    m_auto_mobility_points_isSet = false;
    m_auto_mobility_points_isValid = false;

    m_auto_points_isSet = false;
    m_auto_points_isValid = false;

    m_auto_rotor_points_isSet = false;
    m_auto_rotor_points_isValid = false;

    m_foul_count_isSet = false;
    m_foul_count_isValid = false;

    m_foul_points_isSet = false;
    m_foul_points_isValid = false;

    m_k_pa_bonus_points_isSet = false;
    m_k_pa_bonus_points_isValid = false;

    m_k_pa_ranking_point_achieved_isSet = false;
    m_k_pa_ranking_point_achieved_isValid = false;

    m_robot1_auto_isSet = false;
    m_robot1_auto_isValid = false;

    m_robot2_auto_isSet = false;
    m_robot2_auto_isValid = false;

    m_robot3_auto_isSet = false;
    m_robot3_auto_isValid = false;

    m_rotor1_auto_isSet = false;
    m_rotor1_auto_isValid = false;

    m_rotor1_engaged_isSet = false;
    m_rotor1_engaged_isValid = false;

    m_rotor2_auto_isSet = false;
    m_rotor2_auto_isValid = false;

    m_rotor2_engaged_isSet = false;
    m_rotor2_engaged_isValid = false;

    m_rotor3_engaged_isSet = false;
    m_rotor3_engaged_isValid = false;

    m_rotor4_engaged_isSet = false;
    m_rotor4_engaged_isValid = false;

    m_rotor_bonus_points_isSet = false;
    m_rotor_bonus_points_isValid = false;

    m_rotor_ranking_point_achieved_isSet = false;
    m_rotor_ranking_point_achieved_isValid = false;

    m_tech_foul_count_isSet = false;
    m_tech_foul_count_isValid = false;

    m_teleop_fuel_high_isSet = false;
    m_teleop_fuel_high_isValid = false;

    m_teleop_fuel_low_isSet = false;
    m_teleop_fuel_low_isValid = false;

    m_teleop_fuel_points_isSet = false;
    m_teleop_fuel_points_isValid = false;

    m_teleop_points_isSet = false;
    m_teleop_points_isValid = false;

    m_teleop_rotor_points_isSet = false;
    m_teleop_rotor_points_isValid = false;

    m_teleop_takeoff_points_isSet = false;
    m_teleop_takeoff_points_isValid = false;

    m_total_points_isSet = false;
    m_total_points_isValid = false;

    m_touchpad_far_isSet = false;
    m_touchpad_far_isValid = false;

    m_touchpad_middle_isSet = false;
    m_touchpad_middle_isValid = false;

    m_touchpad_near_isSet = false;
    m_touchpad_near_isValid = false;
}

void OAIMatch_Score_Breakdown_2017_Alliance::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMatch_Score_Breakdown_2017_Alliance::fromJsonObject(QJsonObject json) {

    m_adjust_points_isValid = ::OpenAPI::fromJsonValue(m_adjust_points, json[QString("adjustPoints")]);
    m_adjust_points_isSet = !json[QString("adjustPoints")].isNull() && m_adjust_points_isValid;

    m_auto_fuel_high_isValid = ::OpenAPI::fromJsonValue(m_auto_fuel_high, json[QString("autoFuelHigh")]);
    m_auto_fuel_high_isSet = !json[QString("autoFuelHigh")].isNull() && m_auto_fuel_high_isValid;

    m_auto_fuel_low_isValid = ::OpenAPI::fromJsonValue(m_auto_fuel_low, json[QString("autoFuelLow")]);
    m_auto_fuel_low_isSet = !json[QString("autoFuelLow")].isNull() && m_auto_fuel_low_isValid;

    m_auto_fuel_points_isValid = ::OpenAPI::fromJsonValue(m_auto_fuel_points, json[QString("autoFuelPoints")]);
    m_auto_fuel_points_isSet = !json[QString("autoFuelPoints")].isNull() && m_auto_fuel_points_isValid;

    m_auto_mobility_points_isValid = ::OpenAPI::fromJsonValue(m_auto_mobility_points, json[QString("autoMobilityPoints")]);
    m_auto_mobility_points_isSet = !json[QString("autoMobilityPoints")].isNull() && m_auto_mobility_points_isValid;

    m_auto_points_isValid = ::OpenAPI::fromJsonValue(m_auto_points, json[QString("autoPoints")]);
    m_auto_points_isSet = !json[QString("autoPoints")].isNull() && m_auto_points_isValid;

    m_auto_rotor_points_isValid = ::OpenAPI::fromJsonValue(m_auto_rotor_points, json[QString("autoRotorPoints")]);
    m_auto_rotor_points_isSet = !json[QString("autoRotorPoints")].isNull() && m_auto_rotor_points_isValid;

    m_foul_count_isValid = ::OpenAPI::fromJsonValue(m_foul_count, json[QString("foulCount")]);
    m_foul_count_isSet = !json[QString("foulCount")].isNull() && m_foul_count_isValid;

    m_foul_points_isValid = ::OpenAPI::fromJsonValue(m_foul_points, json[QString("foulPoints")]);
    m_foul_points_isSet = !json[QString("foulPoints")].isNull() && m_foul_points_isValid;

    m_k_pa_bonus_points_isValid = ::OpenAPI::fromJsonValue(m_k_pa_bonus_points, json[QString("kPaBonusPoints")]);
    m_k_pa_bonus_points_isSet = !json[QString("kPaBonusPoints")].isNull() && m_k_pa_bonus_points_isValid;

    m_k_pa_ranking_point_achieved_isValid = ::OpenAPI::fromJsonValue(m_k_pa_ranking_point_achieved, json[QString("kPaRankingPointAchieved")]);
    m_k_pa_ranking_point_achieved_isSet = !json[QString("kPaRankingPointAchieved")].isNull() && m_k_pa_ranking_point_achieved_isValid;

    m_robot1_auto_isValid = ::OpenAPI::fromJsonValue(m_robot1_auto, json[QString("robot1Auto")]);
    m_robot1_auto_isSet = !json[QString("robot1Auto")].isNull() && m_robot1_auto_isValid;

    m_robot2_auto_isValid = ::OpenAPI::fromJsonValue(m_robot2_auto, json[QString("robot2Auto")]);
    m_robot2_auto_isSet = !json[QString("robot2Auto")].isNull() && m_robot2_auto_isValid;

    m_robot3_auto_isValid = ::OpenAPI::fromJsonValue(m_robot3_auto, json[QString("robot3Auto")]);
    m_robot3_auto_isSet = !json[QString("robot3Auto")].isNull() && m_robot3_auto_isValid;

    m_rotor1_auto_isValid = ::OpenAPI::fromJsonValue(m_rotor1_auto, json[QString("rotor1Auto")]);
    m_rotor1_auto_isSet = !json[QString("rotor1Auto")].isNull() && m_rotor1_auto_isValid;

    m_rotor1_engaged_isValid = ::OpenAPI::fromJsonValue(m_rotor1_engaged, json[QString("rotor1Engaged")]);
    m_rotor1_engaged_isSet = !json[QString("rotor1Engaged")].isNull() && m_rotor1_engaged_isValid;

    m_rotor2_auto_isValid = ::OpenAPI::fromJsonValue(m_rotor2_auto, json[QString("rotor2Auto")]);
    m_rotor2_auto_isSet = !json[QString("rotor2Auto")].isNull() && m_rotor2_auto_isValid;

    m_rotor2_engaged_isValid = ::OpenAPI::fromJsonValue(m_rotor2_engaged, json[QString("rotor2Engaged")]);
    m_rotor2_engaged_isSet = !json[QString("rotor2Engaged")].isNull() && m_rotor2_engaged_isValid;

    m_rotor3_engaged_isValid = ::OpenAPI::fromJsonValue(m_rotor3_engaged, json[QString("rotor3Engaged")]);
    m_rotor3_engaged_isSet = !json[QString("rotor3Engaged")].isNull() && m_rotor3_engaged_isValid;

    m_rotor4_engaged_isValid = ::OpenAPI::fromJsonValue(m_rotor4_engaged, json[QString("rotor4Engaged")]);
    m_rotor4_engaged_isSet = !json[QString("rotor4Engaged")].isNull() && m_rotor4_engaged_isValid;

    m_rotor_bonus_points_isValid = ::OpenAPI::fromJsonValue(m_rotor_bonus_points, json[QString("rotorBonusPoints")]);
    m_rotor_bonus_points_isSet = !json[QString("rotorBonusPoints")].isNull() && m_rotor_bonus_points_isValid;

    m_rotor_ranking_point_achieved_isValid = ::OpenAPI::fromJsonValue(m_rotor_ranking_point_achieved, json[QString("rotorRankingPointAchieved")]);
    m_rotor_ranking_point_achieved_isSet = !json[QString("rotorRankingPointAchieved")].isNull() && m_rotor_ranking_point_achieved_isValid;

    m_tech_foul_count_isValid = ::OpenAPI::fromJsonValue(m_tech_foul_count, json[QString("techFoulCount")]);
    m_tech_foul_count_isSet = !json[QString("techFoulCount")].isNull() && m_tech_foul_count_isValid;

    m_teleop_fuel_high_isValid = ::OpenAPI::fromJsonValue(m_teleop_fuel_high, json[QString("teleopFuelHigh")]);
    m_teleop_fuel_high_isSet = !json[QString("teleopFuelHigh")].isNull() && m_teleop_fuel_high_isValid;

    m_teleop_fuel_low_isValid = ::OpenAPI::fromJsonValue(m_teleop_fuel_low, json[QString("teleopFuelLow")]);
    m_teleop_fuel_low_isSet = !json[QString("teleopFuelLow")].isNull() && m_teleop_fuel_low_isValid;

    m_teleop_fuel_points_isValid = ::OpenAPI::fromJsonValue(m_teleop_fuel_points, json[QString("teleopFuelPoints")]);
    m_teleop_fuel_points_isSet = !json[QString("teleopFuelPoints")].isNull() && m_teleop_fuel_points_isValid;

    m_teleop_points_isValid = ::OpenAPI::fromJsonValue(m_teleop_points, json[QString("teleopPoints")]);
    m_teleop_points_isSet = !json[QString("teleopPoints")].isNull() && m_teleop_points_isValid;

    m_teleop_rotor_points_isValid = ::OpenAPI::fromJsonValue(m_teleop_rotor_points, json[QString("teleopRotorPoints")]);
    m_teleop_rotor_points_isSet = !json[QString("teleopRotorPoints")].isNull() && m_teleop_rotor_points_isValid;

    m_teleop_takeoff_points_isValid = ::OpenAPI::fromJsonValue(m_teleop_takeoff_points, json[QString("teleopTakeoffPoints")]);
    m_teleop_takeoff_points_isSet = !json[QString("teleopTakeoffPoints")].isNull() && m_teleop_takeoff_points_isValid;

    m_total_points_isValid = ::OpenAPI::fromJsonValue(m_total_points, json[QString("totalPoints")]);
    m_total_points_isSet = !json[QString("totalPoints")].isNull() && m_total_points_isValid;

    m_touchpad_far_isValid = ::OpenAPI::fromJsonValue(m_touchpad_far, json[QString("touchpadFar")]);
    m_touchpad_far_isSet = !json[QString("touchpadFar")].isNull() && m_touchpad_far_isValid;

    m_touchpad_middle_isValid = ::OpenAPI::fromJsonValue(m_touchpad_middle, json[QString("touchpadMiddle")]);
    m_touchpad_middle_isSet = !json[QString("touchpadMiddle")].isNull() && m_touchpad_middle_isValid;

    m_touchpad_near_isValid = ::OpenAPI::fromJsonValue(m_touchpad_near, json[QString("touchpadNear")]);
    m_touchpad_near_isSet = !json[QString("touchpadNear")].isNull() && m_touchpad_near_isValid;
}

QString OAIMatch_Score_Breakdown_2017_Alliance::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMatch_Score_Breakdown_2017_Alliance::asJsonObject() const {
    QJsonObject obj;
    if (m_adjust_points_isSet) {
        obj.insert(QString("adjustPoints"), ::OpenAPI::toJsonValue(m_adjust_points));
    }
    if (m_auto_fuel_high_isSet) {
        obj.insert(QString("autoFuelHigh"), ::OpenAPI::toJsonValue(m_auto_fuel_high));
    }
    if (m_auto_fuel_low_isSet) {
        obj.insert(QString("autoFuelLow"), ::OpenAPI::toJsonValue(m_auto_fuel_low));
    }
    if (m_auto_fuel_points_isSet) {
        obj.insert(QString("autoFuelPoints"), ::OpenAPI::toJsonValue(m_auto_fuel_points));
    }
    if (m_auto_mobility_points_isSet) {
        obj.insert(QString("autoMobilityPoints"), ::OpenAPI::toJsonValue(m_auto_mobility_points));
    }
    if (m_auto_points_isSet) {
        obj.insert(QString("autoPoints"), ::OpenAPI::toJsonValue(m_auto_points));
    }
    if (m_auto_rotor_points_isSet) {
        obj.insert(QString("autoRotorPoints"), ::OpenAPI::toJsonValue(m_auto_rotor_points));
    }
    if (m_foul_count_isSet) {
        obj.insert(QString("foulCount"), ::OpenAPI::toJsonValue(m_foul_count));
    }
    if (m_foul_points_isSet) {
        obj.insert(QString("foulPoints"), ::OpenAPI::toJsonValue(m_foul_points));
    }
    if (m_k_pa_bonus_points_isSet) {
        obj.insert(QString("kPaBonusPoints"), ::OpenAPI::toJsonValue(m_k_pa_bonus_points));
    }
    if (m_k_pa_ranking_point_achieved_isSet) {
        obj.insert(QString("kPaRankingPointAchieved"), ::OpenAPI::toJsonValue(m_k_pa_ranking_point_achieved));
    }
    if (m_robot1_auto_isSet) {
        obj.insert(QString("robot1Auto"), ::OpenAPI::toJsonValue(m_robot1_auto));
    }
    if (m_robot2_auto_isSet) {
        obj.insert(QString("robot2Auto"), ::OpenAPI::toJsonValue(m_robot2_auto));
    }
    if (m_robot3_auto_isSet) {
        obj.insert(QString("robot3Auto"), ::OpenAPI::toJsonValue(m_robot3_auto));
    }
    if (m_rotor1_auto_isSet) {
        obj.insert(QString("rotor1Auto"), ::OpenAPI::toJsonValue(m_rotor1_auto));
    }
    if (m_rotor1_engaged_isSet) {
        obj.insert(QString("rotor1Engaged"), ::OpenAPI::toJsonValue(m_rotor1_engaged));
    }
    if (m_rotor2_auto_isSet) {
        obj.insert(QString("rotor2Auto"), ::OpenAPI::toJsonValue(m_rotor2_auto));
    }
    if (m_rotor2_engaged_isSet) {
        obj.insert(QString("rotor2Engaged"), ::OpenAPI::toJsonValue(m_rotor2_engaged));
    }
    if (m_rotor3_engaged_isSet) {
        obj.insert(QString("rotor3Engaged"), ::OpenAPI::toJsonValue(m_rotor3_engaged));
    }
    if (m_rotor4_engaged_isSet) {
        obj.insert(QString("rotor4Engaged"), ::OpenAPI::toJsonValue(m_rotor4_engaged));
    }
    if (m_rotor_bonus_points_isSet) {
        obj.insert(QString("rotorBonusPoints"), ::OpenAPI::toJsonValue(m_rotor_bonus_points));
    }
    if (m_rotor_ranking_point_achieved_isSet) {
        obj.insert(QString("rotorRankingPointAchieved"), ::OpenAPI::toJsonValue(m_rotor_ranking_point_achieved));
    }
    if (m_tech_foul_count_isSet) {
        obj.insert(QString("techFoulCount"), ::OpenAPI::toJsonValue(m_tech_foul_count));
    }
    if (m_teleop_fuel_high_isSet) {
        obj.insert(QString("teleopFuelHigh"), ::OpenAPI::toJsonValue(m_teleop_fuel_high));
    }
    if (m_teleop_fuel_low_isSet) {
        obj.insert(QString("teleopFuelLow"), ::OpenAPI::toJsonValue(m_teleop_fuel_low));
    }
    if (m_teleop_fuel_points_isSet) {
        obj.insert(QString("teleopFuelPoints"), ::OpenAPI::toJsonValue(m_teleop_fuel_points));
    }
    if (m_teleop_points_isSet) {
        obj.insert(QString("teleopPoints"), ::OpenAPI::toJsonValue(m_teleop_points));
    }
    if (m_teleop_rotor_points_isSet) {
        obj.insert(QString("teleopRotorPoints"), ::OpenAPI::toJsonValue(m_teleop_rotor_points));
    }
    if (m_teleop_takeoff_points_isSet) {
        obj.insert(QString("teleopTakeoffPoints"), ::OpenAPI::toJsonValue(m_teleop_takeoff_points));
    }
    if (m_total_points_isSet) {
        obj.insert(QString("totalPoints"), ::OpenAPI::toJsonValue(m_total_points));
    }
    if (m_touchpad_far_isSet) {
        obj.insert(QString("touchpadFar"), ::OpenAPI::toJsonValue(m_touchpad_far));
    }
    if (m_touchpad_middle_isSet) {
        obj.insert(QString("touchpadMiddle"), ::OpenAPI::toJsonValue(m_touchpad_middle));
    }
    if (m_touchpad_near_isSet) {
        obj.insert(QString("touchpadNear"), ::OpenAPI::toJsonValue(m_touchpad_near));
    }
    return obj;
}

qint32 OAIMatch_Score_Breakdown_2017_Alliance::getAdjustPoints() const {
    return m_adjust_points;
}
void OAIMatch_Score_Breakdown_2017_Alliance::setAdjustPoints(const qint32 &adjust_points) {
    m_adjust_points = adjust_points;
    m_adjust_points_isSet = true;
}

bool OAIMatch_Score_Breakdown_2017_Alliance::is_adjust_points_Set() const{
    return m_adjust_points_isSet;
}

bool OAIMatch_Score_Breakdown_2017_Alliance::is_adjust_points_Valid() const{
    return m_adjust_points_isValid;
}

qint32 OAIMatch_Score_Breakdown_2017_Alliance::getAutoFuelHigh() const {
    return m_auto_fuel_high;
}
void OAIMatch_Score_Breakdown_2017_Alliance::setAutoFuelHigh(const qint32 &auto_fuel_high) {
    m_auto_fuel_high = auto_fuel_high;
    m_auto_fuel_high_isSet = true;
}

bool OAIMatch_Score_Breakdown_2017_Alliance::is_auto_fuel_high_Set() const{
    return m_auto_fuel_high_isSet;
}

bool OAIMatch_Score_Breakdown_2017_Alliance::is_auto_fuel_high_Valid() const{
    return m_auto_fuel_high_isValid;
}

qint32 OAIMatch_Score_Breakdown_2017_Alliance::getAutoFuelLow() const {
    return m_auto_fuel_low;
}
void OAIMatch_Score_Breakdown_2017_Alliance::setAutoFuelLow(const qint32 &auto_fuel_low) {
    m_auto_fuel_low = auto_fuel_low;
    m_auto_fuel_low_isSet = true;
}

bool OAIMatch_Score_Breakdown_2017_Alliance::is_auto_fuel_low_Set() const{
    return m_auto_fuel_low_isSet;
}

bool OAIMatch_Score_Breakdown_2017_Alliance::is_auto_fuel_low_Valid() const{
    return m_auto_fuel_low_isValid;
}

qint32 OAIMatch_Score_Breakdown_2017_Alliance::getAutoFuelPoints() const {
    return m_auto_fuel_points;
}
void OAIMatch_Score_Breakdown_2017_Alliance::setAutoFuelPoints(const qint32 &auto_fuel_points) {
    m_auto_fuel_points = auto_fuel_points;
    m_auto_fuel_points_isSet = true;
}

bool OAIMatch_Score_Breakdown_2017_Alliance::is_auto_fuel_points_Set() const{
    return m_auto_fuel_points_isSet;
}

bool OAIMatch_Score_Breakdown_2017_Alliance::is_auto_fuel_points_Valid() const{
    return m_auto_fuel_points_isValid;
}

qint32 OAIMatch_Score_Breakdown_2017_Alliance::getAutoMobilityPoints() const {
    return m_auto_mobility_points;
}
void OAIMatch_Score_Breakdown_2017_Alliance::setAutoMobilityPoints(const qint32 &auto_mobility_points) {
    m_auto_mobility_points = auto_mobility_points;
    m_auto_mobility_points_isSet = true;
}

bool OAIMatch_Score_Breakdown_2017_Alliance::is_auto_mobility_points_Set() const{
    return m_auto_mobility_points_isSet;
}

bool OAIMatch_Score_Breakdown_2017_Alliance::is_auto_mobility_points_Valid() const{
    return m_auto_mobility_points_isValid;
}

qint32 OAIMatch_Score_Breakdown_2017_Alliance::getAutoPoints() const {
    return m_auto_points;
}
void OAIMatch_Score_Breakdown_2017_Alliance::setAutoPoints(const qint32 &auto_points) {
    m_auto_points = auto_points;
    m_auto_points_isSet = true;
}

bool OAIMatch_Score_Breakdown_2017_Alliance::is_auto_points_Set() const{
    return m_auto_points_isSet;
}

bool OAIMatch_Score_Breakdown_2017_Alliance::is_auto_points_Valid() const{
    return m_auto_points_isValid;
}

qint32 OAIMatch_Score_Breakdown_2017_Alliance::getAutoRotorPoints() const {
    return m_auto_rotor_points;
}
void OAIMatch_Score_Breakdown_2017_Alliance::setAutoRotorPoints(const qint32 &auto_rotor_points) {
    m_auto_rotor_points = auto_rotor_points;
    m_auto_rotor_points_isSet = true;
}

bool OAIMatch_Score_Breakdown_2017_Alliance::is_auto_rotor_points_Set() const{
    return m_auto_rotor_points_isSet;
}

bool OAIMatch_Score_Breakdown_2017_Alliance::is_auto_rotor_points_Valid() const{
    return m_auto_rotor_points_isValid;
}

qint32 OAIMatch_Score_Breakdown_2017_Alliance::getFoulCount() const {
    return m_foul_count;
}
void OAIMatch_Score_Breakdown_2017_Alliance::setFoulCount(const qint32 &foul_count) {
    m_foul_count = foul_count;
    m_foul_count_isSet = true;
}

bool OAIMatch_Score_Breakdown_2017_Alliance::is_foul_count_Set() const{
    return m_foul_count_isSet;
}

bool OAIMatch_Score_Breakdown_2017_Alliance::is_foul_count_Valid() const{
    return m_foul_count_isValid;
}

qint32 OAIMatch_Score_Breakdown_2017_Alliance::getFoulPoints() const {
    return m_foul_points;
}
void OAIMatch_Score_Breakdown_2017_Alliance::setFoulPoints(const qint32 &foul_points) {
    m_foul_points = foul_points;
    m_foul_points_isSet = true;
}

bool OAIMatch_Score_Breakdown_2017_Alliance::is_foul_points_Set() const{
    return m_foul_points_isSet;
}

bool OAIMatch_Score_Breakdown_2017_Alliance::is_foul_points_Valid() const{
    return m_foul_points_isValid;
}

qint32 OAIMatch_Score_Breakdown_2017_Alliance::getKPaBonusPoints() const {
    return m_k_pa_bonus_points;
}
void OAIMatch_Score_Breakdown_2017_Alliance::setKPaBonusPoints(const qint32 &k_pa_bonus_points) {
    m_k_pa_bonus_points = k_pa_bonus_points;
    m_k_pa_bonus_points_isSet = true;
}

bool OAIMatch_Score_Breakdown_2017_Alliance::is_k_pa_bonus_points_Set() const{
    return m_k_pa_bonus_points_isSet;
}

bool OAIMatch_Score_Breakdown_2017_Alliance::is_k_pa_bonus_points_Valid() const{
    return m_k_pa_bonus_points_isValid;
}

bool OAIMatch_Score_Breakdown_2017_Alliance::isKPaRankingPointAchieved() const {
    return m_k_pa_ranking_point_achieved;
}
void OAIMatch_Score_Breakdown_2017_Alliance::setKPaRankingPointAchieved(const bool &k_pa_ranking_point_achieved) {
    m_k_pa_ranking_point_achieved = k_pa_ranking_point_achieved;
    m_k_pa_ranking_point_achieved_isSet = true;
}

bool OAIMatch_Score_Breakdown_2017_Alliance::is_k_pa_ranking_point_achieved_Set() const{
    return m_k_pa_ranking_point_achieved_isSet;
}

bool OAIMatch_Score_Breakdown_2017_Alliance::is_k_pa_ranking_point_achieved_Valid() const{
    return m_k_pa_ranking_point_achieved_isValid;
}

QString OAIMatch_Score_Breakdown_2017_Alliance::getRobot1Auto() const {
    return m_robot1_auto;
}
void OAIMatch_Score_Breakdown_2017_Alliance::setRobot1Auto(const QString &robot1_auto) {
    m_robot1_auto = robot1_auto;
    m_robot1_auto_isSet = true;
}

bool OAIMatch_Score_Breakdown_2017_Alliance::is_robot1_auto_Set() const{
    return m_robot1_auto_isSet;
}

bool OAIMatch_Score_Breakdown_2017_Alliance::is_robot1_auto_Valid() const{
    return m_robot1_auto_isValid;
}

QString OAIMatch_Score_Breakdown_2017_Alliance::getRobot2Auto() const {
    return m_robot2_auto;
}
void OAIMatch_Score_Breakdown_2017_Alliance::setRobot2Auto(const QString &robot2_auto) {
    m_robot2_auto = robot2_auto;
    m_robot2_auto_isSet = true;
}

bool OAIMatch_Score_Breakdown_2017_Alliance::is_robot2_auto_Set() const{
    return m_robot2_auto_isSet;
}

bool OAIMatch_Score_Breakdown_2017_Alliance::is_robot2_auto_Valid() const{
    return m_robot2_auto_isValid;
}

QString OAIMatch_Score_Breakdown_2017_Alliance::getRobot3Auto() const {
    return m_robot3_auto;
}
void OAIMatch_Score_Breakdown_2017_Alliance::setRobot3Auto(const QString &robot3_auto) {
    m_robot3_auto = robot3_auto;
    m_robot3_auto_isSet = true;
}

bool OAIMatch_Score_Breakdown_2017_Alliance::is_robot3_auto_Set() const{
    return m_robot3_auto_isSet;
}

bool OAIMatch_Score_Breakdown_2017_Alliance::is_robot3_auto_Valid() const{
    return m_robot3_auto_isValid;
}

bool OAIMatch_Score_Breakdown_2017_Alliance::isRotor1Auto() const {
    return m_rotor1_auto;
}
void OAIMatch_Score_Breakdown_2017_Alliance::setRotor1Auto(const bool &rotor1_auto) {
    m_rotor1_auto = rotor1_auto;
    m_rotor1_auto_isSet = true;
}

bool OAIMatch_Score_Breakdown_2017_Alliance::is_rotor1_auto_Set() const{
    return m_rotor1_auto_isSet;
}

bool OAIMatch_Score_Breakdown_2017_Alliance::is_rotor1_auto_Valid() const{
    return m_rotor1_auto_isValid;
}

bool OAIMatch_Score_Breakdown_2017_Alliance::isRotor1Engaged() const {
    return m_rotor1_engaged;
}
void OAIMatch_Score_Breakdown_2017_Alliance::setRotor1Engaged(const bool &rotor1_engaged) {
    m_rotor1_engaged = rotor1_engaged;
    m_rotor1_engaged_isSet = true;
}

bool OAIMatch_Score_Breakdown_2017_Alliance::is_rotor1_engaged_Set() const{
    return m_rotor1_engaged_isSet;
}

bool OAIMatch_Score_Breakdown_2017_Alliance::is_rotor1_engaged_Valid() const{
    return m_rotor1_engaged_isValid;
}

bool OAIMatch_Score_Breakdown_2017_Alliance::isRotor2Auto() const {
    return m_rotor2_auto;
}
void OAIMatch_Score_Breakdown_2017_Alliance::setRotor2Auto(const bool &rotor2_auto) {
    m_rotor2_auto = rotor2_auto;
    m_rotor2_auto_isSet = true;
}

bool OAIMatch_Score_Breakdown_2017_Alliance::is_rotor2_auto_Set() const{
    return m_rotor2_auto_isSet;
}

bool OAIMatch_Score_Breakdown_2017_Alliance::is_rotor2_auto_Valid() const{
    return m_rotor2_auto_isValid;
}

bool OAIMatch_Score_Breakdown_2017_Alliance::isRotor2Engaged() const {
    return m_rotor2_engaged;
}
void OAIMatch_Score_Breakdown_2017_Alliance::setRotor2Engaged(const bool &rotor2_engaged) {
    m_rotor2_engaged = rotor2_engaged;
    m_rotor2_engaged_isSet = true;
}

bool OAIMatch_Score_Breakdown_2017_Alliance::is_rotor2_engaged_Set() const{
    return m_rotor2_engaged_isSet;
}

bool OAIMatch_Score_Breakdown_2017_Alliance::is_rotor2_engaged_Valid() const{
    return m_rotor2_engaged_isValid;
}

bool OAIMatch_Score_Breakdown_2017_Alliance::isRotor3Engaged() const {
    return m_rotor3_engaged;
}
void OAIMatch_Score_Breakdown_2017_Alliance::setRotor3Engaged(const bool &rotor3_engaged) {
    m_rotor3_engaged = rotor3_engaged;
    m_rotor3_engaged_isSet = true;
}

bool OAIMatch_Score_Breakdown_2017_Alliance::is_rotor3_engaged_Set() const{
    return m_rotor3_engaged_isSet;
}

bool OAIMatch_Score_Breakdown_2017_Alliance::is_rotor3_engaged_Valid() const{
    return m_rotor3_engaged_isValid;
}

bool OAIMatch_Score_Breakdown_2017_Alliance::isRotor4Engaged() const {
    return m_rotor4_engaged;
}
void OAIMatch_Score_Breakdown_2017_Alliance::setRotor4Engaged(const bool &rotor4_engaged) {
    m_rotor4_engaged = rotor4_engaged;
    m_rotor4_engaged_isSet = true;
}

bool OAIMatch_Score_Breakdown_2017_Alliance::is_rotor4_engaged_Set() const{
    return m_rotor4_engaged_isSet;
}

bool OAIMatch_Score_Breakdown_2017_Alliance::is_rotor4_engaged_Valid() const{
    return m_rotor4_engaged_isValid;
}

qint32 OAIMatch_Score_Breakdown_2017_Alliance::getRotorBonusPoints() const {
    return m_rotor_bonus_points;
}
void OAIMatch_Score_Breakdown_2017_Alliance::setRotorBonusPoints(const qint32 &rotor_bonus_points) {
    m_rotor_bonus_points = rotor_bonus_points;
    m_rotor_bonus_points_isSet = true;
}

bool OAIMatch_Score_Breakdown_2017_Alliance::is_rotor_bonus_points_Set() const{
    return m_rotor_bonus_points_isSet;
}

bool OAIMatch_Score_Breakdown_2017_Alliance::is_rotor_bonus_points_Valid() const{
    return m_rotor_bonus_points_isValid;
}

bool OAIMatch_Score_Breakdown_2017_Alliance::isRotorRankingPointAchieved() const {
    return m_rotor_ranking_point_achieved;
}
void OAIMatch_Score_Breakdown_2017_Alliance::setRotorRankingPointAchieved(const bool &rotor_ranking_point_achieved) {
    m_rotor_ranking_point_achieved = rotor_ranking_point_achieved;
    m_rotor_ranking_point_achieved_isSet = true;
}

bool OAIMatch_Score_Breakdown_2017_Alliance::is_rotor_ranking_point_achieved_Set() const{
    return m_rotor_ranking_point_achieved_isSet;
}

bool OAIMatch_Score_Breakdown_2017_Alliance::is_rotor_ranking_point_achieved_Valid() const{
    return m_rotor_ranking_point_achieved_isValid;
}

qint32 OAIMatch_Score_Breakdown_2017_Alliance::getTechFoulCount() const {
    return m_tech_foul_count;
}
void OAIMatch_Score_Breakdown_2017_Alliance::setTechFoulCount(const qint32 &tech_foul_count) {
    m_tech_foul_count = tech_foul_count;
    m_tech_foul_count_isSet = true;
}

bool OAIMatch_Score_Breakdown_2017_Alliance::is_tech_foul_count_Set() const{
    return m_tech_foul_count_isSet;
}

bool OAIMatch_Score_Breakdown_2017_Alliance::is_tech_foul_count_Valid() const{
    return m_tech_foul_count_isValid;
}

qint32 OAIMatch_Score_Breakdown_2017_Alliance::getTeleopFuelHigh() const {
    return m_teleop_fuel_high;
}
void OAIMatch_Score_Breakdown_2017_Alliance::setTeleopFuelHigh(const qint32 &teleop_fuel_high) {
    m_teleop_fuel_high = teleop_fuel_high;
    m_teleop_fuel_high_isSet = true;
}

bool OAIMatch_Score_Breakdown_2017_Alliance::is_teleop_fuel_high_Set() const{
    return m_teleop_fuel_high_isSet;
}

bool OAIMatch_Score_Breakdown_2017_Alliance::is_teleop_fuel_high_Valid() const{
    return m_teleop_fuel_high_isValid;
}

qint32 OAIMatch_Score_Breakdown_2017_Alliance::getTeleopFuelLow() const {
    return m_teleop_fuel_low;
}
void OAIMatch_Score_Breakdown_2017_Alliance::setTeleopFuelLow(const qint32 &teleop_fuel_low) {
    m_teleop_fuel_low = teleop_fuel_low;
    m_teleop_fuel_low_isSet = true;
}

bool OAIMatch_Score_Breakdown_2017_Alliance::is_teleop_fuel_low_Set() const{
    return m_teleop_fuel_low_isSet;
}

bool OAIMatch_Score_Breakdown_2017_Alliance::is_teleop_fuel_low_Valid() const{
    return m_teleop_fuel_low_isValid;
}

qint32 OAIMatch_Score_Breakdown_2017_Alliance::getTeleopFuelPoints() const {
    return m_teleop_fuel_points;
}
void OAIMatch_Score_Breakdown_2017_Alliance::setTeleopFuelPoints(const qint32 &teleop_fuel_points) {
    m_teleop_fuel_points = teleop_fuel_points;
    m_teleop_fuel_points_isSet = true;
}

bool OAIMatch_Score_Breakdown_2017_Alliance::is_teleop_fuel_points_Set() const{
    return m_teleop_fuel_points_isSet;
}

bool OAIMatch_Score_Breakdown_2017_Alliance::is_teleop_fuel_points_Valid() const{
    return m_teleop_fuel_points_isValid;
}

qint32 OAIMatch_Score_Breakdown_2017_Alliance::getTeleopPoints() const {
    return m_teleop_points;
}
void OAIMatch_Score_Breakdown_2017_Alliance::setTeleopPoints(const qint32 &teleop_points) {
    m_teleop_points = teleop_points;
    m_teleop_points_isSet = true;
}

bool OAIMatch_Score_Breakdown_2017_Alliance::is_teleop_points_Set() const{
    return m_teleop_points_isSet;
}

bool OAIMatch_Score_Breakdown_2017_Alliance::is_teleop_points_Valid() const{
    return m_teleop_points_isValid;
}

qint32 OAIMatch_Score_Breakdown_2017_Alliance::getTeleopRotorPoints() const {
    return m_teleop_rotor_points;
}
void OAIMatch_Score_Breakdown_2017_Alliance::setTeleopRotorPoints(const qint32 &teleop_rotor_points) {
    m_teleop_rotor_points = teleop_rotor_points;
    m_teleop_rotor_points_isSet = true;
}

bool OAIMatch_Score_Breakdown_2017_Alliance::is_teleop_rotor_points_Set() const{
    return m_teleop_rotor_points_isSet;
}

bool OAIMatch_Score_Breakdown_2017_Alliance::is_teleop_rotor_points_Valid() const{
    return m_teleop_rotor_points_isValid;
}

qint32 OAIMatch_Score_Breakdown_2017_Alliance::getTeleopTakeoffPoints() const {
    return m_teleop_takeoff_points;
}
void OAIMatch_Score_Breakdown_2017_Alliance::setTeleopTakeoffPoints(const qint32 &teleop_takeoff_points) {
    m_teleop_takeoff_points = teleop_takeoff_points;
    m_teleop_takeoff_points_isSet = true;
}

bool OAIMatch_Score_Breakdown_2017_Alliance::is_teleop_takeoff_points_Set() const{
    return m_teleop_takeoff_points_isSet;
}

bool OAIMatch_Score_Breakdown_2017_Alliance::is_teleop_takeoff_points_Valid() const{
    return m_teleop_takeoff_points_isValid;
}

qint32 OAIMatch_Score_Breakdown_2017_Alliance::getTotalPoints() const {
    return m_total_points;
}
void OAIMatch_Score_Breakdown_2017_Alliance::setTotalPoints(const qint32 &total_points) {
    m_total_points = total_points;
    m_total_points_isSet = true;
}

bool OAIMatch_Score_Breakdown_2017_Alliance::is_total_points_Set() const{
    return m_total_points_isSet;
}

bool OAIMatch_Score_Breakdown_2017_Alliance::is_total_points_Valid() const{
    return m_total_points_isValid;
}

QString OAIMatch_Score_Breakdown_2017_Alliance::getTouchpadFar() const {
    return m_touchpad_far;
}
void OAIMatch_Score_Breakdown_2017_Alliance::setTouchpadFar(const QString &touchpad_far) {
    m_touchpad_far = touchpad_far;
    m_touchpad_far_isSet = true;
}

bool OAIMatch_Score_Breakdown_2017_Alliance::is_touchpad_far_Set() const{
    return m_touchpad_far_isSet;
}

bool OAIMatch_Score_Breakdown_2017_Alliance::is_touchpad_far_Valid() const{
    return m_touchpad_far_isValid;
}

QString OAIMatch_Score_Breakdown_2017_Alliance::getTouchpadMiddle() const {
    return m_touchpad_middle;
}
void OAIMatch_Score_Breakdown_2017_Alliance::setTouchpadMiddle(const QString &touchpad_middle) {
    m_touchpad_middle = touchpad_middle;
    m_touchpad_middle_isSet = true;
}

bool OAIMatch_Score_Breakdown_2017_Alliance::is_touchpad_middle_Set() const{
    return m_touchpad_middle_isSet;
}

bool OAIMatch_Score_Breakdown_2017_Alliance::is_touchpad_middle_Valid() const{
    return m_touchpad_middle_isValid;
}

QString OAIMatch_Score_Breakdown_2017_Alliance::getTouchpadNear() const {
    return m_touchpad_near;
}
void OAIMatch_Score_Breakdown_2017_Alliance::setTouchpadNear(const QString &touchpad_near) {
    m_touchpad_near = touchpad_near;
    m_touchpad_near_isSet = true;
}

bool OAIMatch_Score_Breakdown_2017_Alliance::is_touchpad_near_Set() const{
    return m_touchpad_near_isSet;
}

bool OAIMatch_Score_Breakdown_2017_Alliance::is_touchpad_near_Valid() const{
    return m_touchpad_near_isValid;
}

bool OAIMatch_Score_Breakdown_2017_Alliance::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_adjust_points_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auto_fuel_high_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auto_fuel_low_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auto_fuel_points_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auto_mobility_points_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auto_points_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auto_rotor_points_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_foul_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_foul_points_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_k_pa_bonus_points_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_k_pa_ranking_point_achieved_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_robot1_auto_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_robot2_auto_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_robot3_auto_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rotor1_auto_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rotor1_engaged_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rotor2_auto_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rotor2_engaged_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rotor3_engaged_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rotor4_engaged_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rotor_bonus_points_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rotor_ranking_point_achieved_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tech_foul_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_teleop_fuel_high_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_teleop_fuel_low_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_teleop_fuel_points_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_teleop_points_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_teleop_rotor_points_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_teleop_takeoff_points_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_points_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_touchpad_far_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_touchpad_middle_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_touchpad_near_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMatch_Score_Breakdown_2017_Alliance::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
