/**
 * The Blue Alliance API v3
 * # Overview    Information and statistics about FIRST Robotics Competition teams and events.   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).
 *
 * The version of the OpenAPI document: 3.8.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIEvent_Insights_2018.h
 *
 * Insights for FIRST Power Up qualification and elimination matches.
 */

#ifndef OAIEvent_Insights_2018_H
#define OAIEvent_Insights_2018_H

#include <QJsonObject>

#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIEvent_Insights_2018 : public OAIObject {
public:
    OAIEvent_Insights_2018();
    OAIEvent_Insights_2018(QString json);
    ~OAIEvent_Insights_2018() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<float> getAutoQuestAchieved() const;
    void setAutoQuestAchieved(const QList<float> &auto_quest_achieved);
    bool is_auto_quest_achieved_Set() const;
    bool is_auto_quest_achieved_Valid() const;

    float getAverageBoostPlayed() const;
    void setAverageBoostPlayed(const float &average_boost_played);
    bool is_average_boost_played_Set() const;
    bool is_average_boost_played_Valid() const;

    float getAverageEndgamePoints() const;
    void setAverageEndgamePoints(const float &average_endgame_points);
    bool is_average_endgame_points_Set() const;
    bool is_average_endgame_points_Valid() const;

    float getAverageForcePlayed() const;
    void setAverageForcePlayed(const float &average_force_played);
    bool is_average_force_played_Set() const;
    bool is_average_force_played_Valid() const;

    float getAverageFoulScore() const;
    void setAverageFoulScore(const float &average_foul_score);
    bool is_average_foul_score_Set() const;
    bool is_average_foul_score_Valid() const;

    float getAveragePointsAuto() const;
    void setAveragePointsAuto(const float &average_points_auto);
    bool is_average_points_auto_Set() const;
    bool is_average_points_auto_Valid() const;

    float getAveragePointsTeleop() const;
    void setAveragePointsTeleop(const float &average_points_teleop);
    bool is_average_points_teleop_Set() const;
    bool is_average_points_teleop_Valid() const;

    float getAverageRunPointsAuto() const;
    void setAverageRunPointsAuto(const float &average_run_points_auto);
    bool is_average_run_points_auto_Set() const;
    bool is_average_run_points_auto_Valid() const;

    float getAverageScaleOwnershipPoints() const;
    void setAverageScaleOwnershipPoints(const float &average_scale_ownership_points);
    bool is_average_scale_ownership_points_Set() const;
    bool is_average_scale_ownership_points_Valid() const;

    float getAverageScaleOwnershipPointsAuto() const;
    void setAverageScaleOwnershipPointsAuto(const float &average_scale_ownership_points_auto);
    bool is_average_scale_ownership_points_auto_Set() const;
    bool is_average_scale_ownership_points_auto_Valid() const;

    float getAverageScaleOwnershipPointsTeleop() const;
    void setAverageScaleOwnershipPointsTeleop(const float &average_scale_ownership_points_teleop);
    bool is_average_scale_ownership_points_teleop_Set() const;
    bool is_average_scale_ownership_points_teleop_Valid() const;

    float getAverageScore() const;
    void setAverageScore(const float &average_score);
    bool is_average_score_Set() const;
    bool is_average_score_Valid() const;

    float getAverageSwitchOwnershipPoints() const;
    void setAverageSwitchOwnershipPoints(const float &average_switch_ownership_points);
    bool is_average_switch_ownership_points_Set() const;
    bool is_average_switch_ownership_points_Valid() const;

    float getAverageSwitchOwnershipPointsAuto() const;
    void setAverageSwitchOwnershipPointsAuto(const float &average_switch_ownership_points_auto);
    bool is_average_switch_ownership_points_auto_Set() const;
    bool is_average_switch_ownership_points_auto_Valid() const;

    float getAverageSwitchOwnershipPointsTeleop() const;
    void setAverageSwitchOwnershipPointsTeleop(const float &average_switch_ownership_points_teleop);
    bool is_average_switch_ownership_points_teleop_Set() const;
    bool is_average_switch_ownership_points_teleop_Valid() const;

    float getAverageVaultPoints() const;
    void setAverageVaultPoints(const float &average_vault_points);
    bool is_average_vault_points_Set() const;
    bool is_average_vault_points_Valid() const;

    float getAverageWinMargin() const;
    void setAverageWinMargin(const float &average_win_margin);
    bool is_average_win_margin_Set() const;
    bool is_average_win_margin_Valid() const;

    float getAverageWinScore() const;
    void setAverageWinScore(const float &average_win_score);
    bool is_average_win_score_Set() const;
    bool is_average_win_score_Valid() const;

    QList<float> getBoostPlayedCounts() const;
    void setBoostPlayedCounts(const QList<float> &boost_played_counts);
    bool is_boost_played_counts_Set() const;
    bool is_boost_played_counts_Valid() const;

    QList<float> getClimbCounts() const;
    void setClimbCounts(const QList<float> &climb_counts);
    bool is_climb_counts_Set() const;
    bool is_climb_counts_Valid() const;

    QList<float> getFaceTheBossAchieved() const;
    void setFaceTheBossAchieved(const QList<float> &face_the_boss_achieved);
    bool is_face_the_boss_achieved_Set() const;
    bool is_face_the_boss_achieved_Valid() const;

    QList<float> getForcePlayedCounts() const;
    void setForcePlayedCounts(const QList<float> &force_played_counts);
    bool is_force_played_counts_Set() const;
    bool is_force_played_counts_Valid() const;

    QList<QString> getHighScore() const;
    void setHighScore(const QList<QString> &high_score);
    bool is_high_score_Set() const;
    bool is_high_score_Valid() const;

    QList<float> getLevitatePlayedCounts() const;
    void setLevitatePlayedCounts(const QList<float> &levitate_played_counts);
    bool is_levitate_played_counts_Set() const;
    bool is_levitate_played_counts_Valid() const;

    QList<float> getRunCountsAuto() const;
    void setRunCountsAuto(const QList<float> &run_counts_auto);
    bool is_run_counts_auto_Set() const;
    bool is_run_counts_auto_Valid() const;

    float getScaleNeutralPercentage() const;
    void setScaleNeutralPercentage(const float &scale_neutral_percentage);
    bool is_scale_neutral_percentage_Set() const;
    bool is_scale_neutral_percentage_Valid() const;

    float getScaleNeutralPercentageAuto() const;
    void setScaleNeutralPercentageAuto(const float &scale_neutral_percentage_auto);
    bool is_scale_neutral_percentage_auto_Set() const;
    bool is_scale_neutral_percentage_auto_Valid() const;

    float getScaleNeutralPercentageTeleop() const;
    void setScaleNeutralPercentageTeleop(const float &scale_neutral_percentage_teleop);
    bool is_scale_neutral_percentage_teleop_Set() const;
    bool is_scale_neutral_percentage_teleop_Valid() const;

    QList<float> getSwitchOwnedCountsAuto() const;
    void setSwitchOwnedCountsAuto(const QList<float> &switch_owned_counts_auto);
    bool is_switch_owned_counts_auto_Set() const;
    bool is_switch_owned_counts_auto_Valid() const;

    QList<float> getUnicornMatches() const;
    void setUnicornMatches(const QList<float> &unicorn_matches);
    bool is_unicorn_matches_Set() const;
    bool is_unicorn_matches_Valid() const;

    float getWinningOppSwitchDenialPercentageTeleop() const;
    void setWinningOppSwitchDenialPercentageTeleop(const float &winning_opp_switch_denial_percentage_teleop);
    bool is_winning_opp_switch_denial_percentage_teleop_Set() const;
    bool is_winning_opp_switch_denial_percentage_teleop_Valid() const;

    float getWinningOwnSwitchOwnershipPercentage() const;
    void setWinningOwnSwitchOwnershipPercentage(const float &winning_own_switch_ownership_percentage);
    bool is_winning_own_switch_ownership_percentage_Set() const;
    bool is_winning_own_switch_ownership_percentage_Valid() const;

    float getWinningOwnSwitchOwnershipPercentageAuto() const;
    void setWinningOwnSwitchOwnershipPercentageAuto(const float &winning_own_switch_ownership_percentage_auto);
    bool is_winning_own_switch_ownership_percentage_auto_Set() const;
    bool is_winning_own_switch_ownership_percentage_auto_Valid() const;

    float getWinningOwnSwitchOwnershipPercentageTeleop() const;
    void setWinningOwnSwitchOwnershipPercentageTeleop(const float &winning_own_switch_ownership_percentage_teleop);
    bool is_winning_own_switch_ownership_percentage_teleop_Set() const;
    bool is_winning_own_switch_ownership_percentage_teleop_Valid() const;

    float getWinningScaleOwnershipPercentage() const;
    void setWinningScaleOwnershipPercentage(const float &winning_scale_ownership_percentage);
    bool is_winning_scale_ownership_percentage_Set() const;
    bool is_winning_scale_ownership_percentage_Valid() const;

    float getWinningScaleOwnershipPercentageAuto() const;
    void setWinningScaleOwnershipPercentageAuto(const float &winning_scale_ownership_percentage_auto);
    bool is_winning_scale_ownership_percentage_auto_Set() const;
    bool is_winning_scale_ownership_percentage_auto_Valid() const;

    float getWinningScaleOwnershipPercentageTeleop() const;
    void setWinningScaleOwnershipPercentageTeleop(const float &winning_scale_ownership_percentage_teleop);
    bool is_winning_scale_ownership_percentage_teleop_Set() const;
    bool is_winning_scale_ownership_percentage_teleop_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<float> m_auto_quest_achieved;
    bool m_auto_quest_achieved_isSet;
    bool m_auto_quest_achieved_isValid;

    float m_average_boost_played;
    bool m_average_boost_played_isSet;
    bool m_average_boost_played_isValid;

    float m_average_endgame_points;
    bool m_average_endgame_points_isSet;
    bool m_average_endgame_points_isValid;

    float m_average_force_played;
    bool m_average_force_played_isSet;
    bool m_average_force_played_isValid;

    float m_average_foul_score;
    bool m_average_foul_score_isSet;
    bool m_average_foul_score_isValid;

    float m_average_points_auto;
    bool m_average_points_auto_isSet;
    bool m_average_points_auto_isValid;

    float m_average_points_teleop;
    bool m_average_points_teleop_isSet;
    bool m_average_points_teleop_isValid;

    float m_average_run_points_auto;
    bool m_average_run_points_auto_isSet;
    bool m_average_run_points_auto_isValid;

    float m_average_scale_ownership_points;
    bool m_average_scale_ownership_points_isSet;
    bool m_average_scale_ownership_points_isValid;

    float m_average_scale_ownership_points_auto;
    bool m_average_scale_ownership_points_auto_isSet;
    bool m_average_scale_ownership_points_auto_isValid;

    float m_average_scale_ownership_points_teleop;
    bool m_average_scale_ownership_points_teleop_isSet;
    bool m_average_scale_ownership_points_teleop_isValid;

    float m_average_score;
    bool m_average_score_isSet;
    bool m_average_score_isValid;

    float m_average_switch_ownership_points;
    bool m_average_switch_ownership_points_isSet;
    bool m_average_switch_ownership_points_isValid;

    float m_average_switch_ownership_points_auto;
    bool m_average_switch_ownership_points_auto_isSet;
    bool m_average_switch_ownership_points_auto_isValid;

    float m_average_switch_ownership_points_teleop;
    bool m_average_switch_ownership_points_teleop_isSet;
    bool m_average_switch_ownership_points_teleop_isValid;

    float m_average_vault_points;
    bool m_average_vault_points_isSet;
    bool m_average_vault_points_isValid;

    float m_average_win_margin;
    bool m_average_win_margin_isSet;
    bool m_average_win_margin_isValid;

    float m_average_win_score;
    bool m_average_win_score_isSet;
    bool m_average_win_score_isValid;

    QList<float> m_boost_played_counts;
    bool m_boost_played_counts_isSet;
    bool m_boost_played_counts_isValid;

    QList<float> m_climb_counts;
    bool m_climb_counts_isSet;
    bool m_climb_counts_isValid;

    QList<float> m_face_the_boss_achieved;
    bool m_face_the_boss_achieved_isSet;
    bool m_face_the_boss_achieved_isValid;

    QList<float> m_force_played_counts;
    bool m_force_played_counts_isSet;
    bool m_force_played_counts_isValid;

    QList<QString> m_high_score;
    bool m_high_score_isSet;
    bool m_high_score_isValid;

    QList<float> m_levitate_played_counts;
    bool m_levitate_played_counts_isSet;
    bool m_levitate_played_counts_isValid;

    QList<float> m_run_counts_auto;
    bool m_run_counts_auto_isSet;
    bool m_run_counts_auto_isValid;

    float m_scale_neutral_percentage;
    bool m_scale_neutral_percentage_isSet;
    bool m_scale_neutral_percentage_isValid;

    float m_scale_neutral_percentage_auto;
    bool m_scale_neutral_percentage_auto_isSet;
    bool m_scale_neutral_percentage_auto_isValid;

    float m_scale_neutral_percentage_teleop;
    bool m_scale_neutral_percentage_teleop_isSet;
    bool m_scale_neutral_percentage_teleop_isValid;

    QList<float> m_switch_owned_counts_auto;
    bool m_switch_owned_counts_auto_isSet;
    bool m_switch_owned_counts_auto_isValid;

    QList<float> m_unicorn_matches;
    bool m_unicorn_matches_isSet;
    bool m_unicorn_matches_isValid;

    float m_winning_opp_switch_denial_percentage_teleop;
    bool m_winning_opp_switch_denial_percentage_teleop_isSet;
    bool m_winning_opp_switch_denial_percentage_teleop_isValid;

    float m_winning_own_switch_ownership_percentage;
    bool m_winning_own_switch_ownership_percentage_isSet;
    bool m_winning_own_switch_ownership_percentage_isValid;

    float m_winning_own_switch_ownership_percentage_auto;
    bool m_winning_own_switch_ownership_percentage_auto_isSet;
    bool m_winning_own_switch_ownership_percentage_auto_isValid;

    float m_winning_own_switch_ownership_percentage_teleop;
    bool m_winning_own_switch_ownership_percentage_teleop_isSet;
    bool m_winning_own_switch_ownership_percentage_teleop_isValid;

    float m_winning_scale_ownership_percentage;
    bool m_winning_scale_ownership_percentage_isSet;
    bool m_winning_scale_ownership_percentage_isValid;

    float m_winning_scale_ownership_percentage_auto;
    bool m_winning_scale_ownership_percentage_auto_isSet;
    bool m_winning_scale_ownership_percentage_auto_isValid;

    float m_winning_scale_ownership_percentage_teleop;
    bool m_winning_scale_ownership_percentage_teleop_isSet;
    bool m_winning_scale_ownership_percentage_teleop_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIEvent_Insights_2018)

#endif // OAIEvent_Insights_2018_H
