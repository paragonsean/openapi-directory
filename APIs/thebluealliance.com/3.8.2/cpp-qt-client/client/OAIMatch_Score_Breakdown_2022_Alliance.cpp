/**
 * The Blue Alliance API v3
 * # Overview    Information and statistics about FIRST Robotics Competition teams and events.   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).
 *
 * The version of the OpenAPI document: 3.8.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMatch_Score_Breakdown_2022_Alliance.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMatch_Score_Breakdown_2022_Alliance::OAIMatch_Score_Breakdown_2022_Alliance(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMatch_Score_Breakdown_2022_Alliance::OAIMatch_Score_Breakdown_2022_Alliance() {
    this->initializeModel();
}

OAIMatch_Score_Breakdown_2022_Alliance::~OAIMatch_Score_Breakdown_2022_Alliance() {}

void OAIMatch_Score_Breakdown_2022_Alliance::initializeModel() {

    m_adjust_points_isSet = false;
    m_adjust_points_isValid = false;

    m_auto_cargo_lower_blue_isSet = false;
    m_auto_cargo_lower_blue_isValid = false;

    m_auto_cargo_lower_far_isSet = false;
    m_auto_cargo_lower_far_isValid = false;

    m_auto_cargo_lower_near_isSet = false;
    m_auto_cargo_lower_near_isValid = false;

    m_auto_cargo_lower_red_isSet = false;
    m_auto_cargo_lower_red_isValid = false;

    m_auto_cargo_points_isSet = false;
    m_auto_cargo_points_isValid = false;

    m_auto_cargo_total_isSet = false;
    m_auto_cargo_total_isValid = false;

    m_auto_cargo_upper_blue_isSet = false;
    m_auto_cargo_upper_blue_isValid = false;

    m_auto_cargo_upper_far_isSet = false;
    m_auto_cargo_upper_far_isValid = false;

    m_auto_cargo_upper_near_isSet = false;
    m_auto_cargo_upper_near_isValid = false;

    m_auto_cargo_upper_red_isSet = false;
    m_auto_cargo_upper_red_isValid = false;

    m_auto_points_isSet = false;
    m_auto_points_isValid = false;

    m_auto_taxi_points_isSet = false;
    m_auto_taxi_points_isValid = false;

    m_cargo_bonus_ranking_point_isSet = false;
    m_cargo_bonus_ranking_point_isValid = false;

    m_endgame_points_isSet = false;
    m_endgame_points_isValid = false;

    m_endgame_robot1_isSet = false;
    m_endgame_robot1_isValid = false;

    m_endgame_robot2_isSet = false;
    m_endgame_robot2_isValid = false;

    m_endgame_robot3_isSet = false;
    m_endgame_robot3_isValid = false;

    m_foul_count_isSet = false;
    m_foul_count_isValid = false;

    m_foul_points_isSet = false;
    m_foul_points_isValid = false;

    m_hangar_bonus_ranking_point_isSet = false;
    m_hangar_bonus_ranking_point_isValid = false;

    m_match_cargo_total_isSet = false;
    m_match_cargo_total_isValid = false;

    m_quintet_achieved_isSet = false;
    m_quintet_achieved_isValid = false;

    m_rp_isSet = false;
    m_rp_isValid = false;

    m_taxi_robot1_isSet = false;
    m_taxi_robot1_isValid = false;

    m_taxi_robot2_isSet = false;
    m_taxi_robot2_isValid = false;

    m_taxi_robot3_isSet = false;
    m_taxi_robot3_isValid = false;

    m_tech_foul_count_isSet = false;
    m_tech_foul_count_isValid = false;

    m_teleop_cargo_lower_blue_isSet = false;
    m_teleop_cargo_lower_blue_isValid = false;

    m_teleop_cargo_lower_far_isSet = false;
    m_teleop_cargo_lower_far_isValid = false;

    m_teleop_cargo_lower_near_isSet = false;
    m_teleop_cargo_lower_near_isValid = false;

    m_teleop_cargo_lower_red_isSet = false;
    m_teleop_cargo_lower_red_isValid = false;

    m_teleop_cargo_points_isSet = false;
    m_teleop_cargo_points_isValid = false;

    m_teleop_cargo_total_isSet = false;
    m_teleop_cargo_total_isValid = false;

    m_teleop_cargo_upper_blue_isSet = false;
    m_teleop_cargo_upper_blue_isValid = false;

    m_teleop_cargo_upper_far_isSet = false;
    m_teleop_cargo_upper_far_isValid = false;

    m_teleop_cargo_upper_near_isSet = false;
    m_teleop_cargo_upper_near_isValid = false;

    m_teleop_cargo_upper_red_isSet = false;
    m_teleop_cargo_upper_red_isValid = false;

    m_teleop_points_isSet = false;
    m_teleop_points_isValid = false;

    m_total_points_isSet = false;
    m_total_points_isValid = false;
}

void OAIMatch_Score_Breakdown_2022_Alliance::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMatch_Score_Breakdown_2022_Alliance::fromJsonObject(QJsonObject json) {

    m_adjust_points_isValid = ::OpenAPI::fromJsonValue(m_adjust_points, json[QString("adjustPoints")]);
    m_adjust_points_isSet = !json[QString("adjustPoints")].isNull() && m_adjust_points_isValid;

    m_auto_cargo_lower_blue_isValid = ::OpenAPI::fromJsonValue(m_auto_cargo_lower_blue, json[QString("autoCargoLowerBlue")]);
    m_auto_cargo_lower_blue_isSet = !json[QString("autoCargoLowerBlue")].isNull() && m_auto_cargo_lower_blue_isValid;

    m_auto_cargo_lower_far_isValid = ::OpenAPI::fromJsonValue(m_auto_cargo_lower_far, json[QString("autoCargoLowerFar")]);
    m_auto_cargo_lower_far_isSet = !json[QString("autoCargoLowerFar")].isNull() && m_auto_cargo_lower_far_isValid;

    m_auto_cargo_lower_near_isValid = ::OpenAPI::fromJsonValue(m_auto_cargo_lower_near, json[QString("autoCargoLowerNear")]);
    m_auto_cargo_lower_near_isSet = !json[QString("autoCargoLowerNear")].isNull() && m_auto_cargo_lower_near_isValid;

    m_auto_cargo_lower_red_isValid = ::OpenAPI::fromJsonValue(m_auto_cargo_lower_red, json[QString("autoCargoLowerRed")]);
    m_auto_cargo_lower_red_isSet = !json[QString("autoCargoLowerRed")].isNull() && m_auto_cargo_lower_red_isValid;

    m_auto_cargo_points_isValid = ::OpenAPI::fromJsonValue(m_auto_cargo_points, json[QString("autoCargoPoints")]);
    m_auto_cargo_points_isSet = !json[QString("autoCargoPoints")].isNull() && m_auto_cargo_points_isValid;

    m_auto_cargo_total_isValid = ::OpenAPI::fromJsonValue(m_auto_cargo_total, json[QString("autoCargoTotal")]);
    m_auto_cargo_total_isSet = !json[QString("autoCargoTotal")].isNull() && m_auto_cargo_total_isValid;

    m_auto_cargo_upper_blue_isValid = ::OpenAPI::fromJsonValue(m_auto_cargo_upper_blue, json[QString("autoCargoUpperBlue")]);
    m_auto_cargo_upper_blue_isSet = !json[QString("autoCargoUpperBlue")].isNull() && m_auto_cargo_upper_blue_isValid;

    m_auto_cargo_upper_far_isValid = ::OpenAPI::fromJsonValue(m_auto_cargo_upper_far, json[QString("autoCargoUpperFar")]);
    m_auto_cargo_upper_far_isSet = !json[QString("autoCargoUpperFar")].isNull() && m_auto_cargo_upper_far_isValid;

    m_auto_cargo_upper_near_isValid = ::OpenAPI::fromJsonValue(m_auto_cargo_upper_near, json[QString("autoCargoUpperNear")]);
    m_auto_cargo_upper_near_isSet = !json[QString("autoCargoUpperNear")].isNull() && m_auto_cargo_upper_near_isValid;

    m_auto_cargo_upper_red_isValid = ::OpenAPI::fromJsonValue(m_auto_cargo_upper_red, json[QString("autoCargoUpperRed")]);
    m_auto_cargo_upper_red_isSet = !json[QString("autoCargoUpperRed")].isNull() && m_auto_cargo_upper_red_isValid;

    m_auto_points_isValid = ::OpenAPI::fromJsonValue(m_auto_points, json[QString("autoPoints")]);
    m_auto_points_isSet = !json[QString("autoPoints")].isNull() && m_auto_points_isValid;

    m_auto_taxi_points_isValid = ::OpenAPI::fromJsonValue(m_auto_taxi_points, json[QString("autoTaxiPoints")]);
    m_auto_taxi_points_isSet = !json[QString("autoTaxiPoints")].isNull() && m_auto_taxi_points_isValid;

    m_cargo_bonus_ranking_point_isValid = ::OpenAPI::fromJsonValue(m_cargo_bonus_ranking_point, json[QString("cargoBonusRankingPoint")]);
    m_cargo_bonus_ranking_point_isSet = !json[QString("cargoBonusRankingPoint")].isNull() && m_cargo_bonus_ranking_point_isValid;

    m_endgame_points_isValid = ::OpenAPI::fromJsonValue(m_endgame_points, json[QString("endgamePoints")]);
    m_endgame_points_isSet = !json[QString("endgamePoints")].isNull() && m_endgame_points_isValid;

    m_endgame_robot1_isValid = ::OpenAPI::fromJsonValue(m_endgame_robot1, json[QString("endgameRobot1")]);
    m_endgame_robot1_isSet = !json[QString("endgameRobot1")].isNull() && m_endgame_robot1_isValid;

    m_endgame_robot2_isValid = ::OpenAPI::fromJsonValue(m_endgame_robot2, json[QString("endgameRobot2")]);
    m_endgame_robot2_isSet = !json[QString("endgameRobot2")].isNull() && m_endgame_robot2_isValid;

    m_endgame_robot3_isValid = ::OpenAPI::fromJsonValue(m_endgame_robot3, json[QString("endgameRobot3")]);
    m_endgame_robot3_isSet = !json[QString("endgameRobot3")].isNull() && m_endgame_robot3_isValid;

    m_foul_count_isValid = ::OpenAPI::fromJsonValue(m_foul_count, json[QString("foulCount")]);
    m_foul_count_isSet = !json[QString("foulCount")].isNull() && m_foul_count_isValid;

    m_foul_points_isValid = ::OpenAPI::fromJsonValue(m_foul_points, json[QString("foulPoints")]);
    m_foul_points_isSet = !json[QString("foulPoints")].isNull() && m_foul_points_isValid;

    m_hangar_bonus_ranking_point_isValid = ::OpenAPI::fromJsonValue(m_hangar_bonus_ranking_point, json[QString("hangarBonusRankingPoint")]);
    m_hangar_bonus_ranking_point_isSet = !json[QString("hangarBonusRankingPoint")].isNull() && m_hangar_bonus_ranking_point_isValid;

    m_match_cargo_total_isValid = ::OpenAPI::fromJsonValue(m_match_cargo_total, json[QString("matchCargoTotal")]);
    m_match_cargo_total_isSet = !json[QString("matchCargoTotal")].isNull() && m_match_cargo_total_isValid;

    m_quintet_achieved_isValid = ::OpenAPI::fromJsonValue(m_quintet_achieved, json[QString("quintetAchieved")]);
    m_quintet_achieved_isSet = !json[QString("quintetAchieved")].isNull() && m_quintet_achieved_isValid;

    m_rp_isValid = ::OpenAPI::fromJsonValue(m_rp, json[QString("rp")]);
    m_rp_isSet = !json[QString("rp")].isNull() && m_rp_isValid;

    m_taxi_robot1_isValid = ::OpenAPI::fromJsonValue(m_taxi_robot1, json[QString("taxiRobot1")]);
    m_taxi_robot1_isSet = !json[QString("taxiRobot1")].isNull() && m_taxi_robot1_isValid;

    m_taxi_robot2_isValid = ::OpenAPI::fromJsonValue(m_taxi_robot2, json[QString("taxiRobot2")]);
    m_taxi_robot2_isSet = !json[QString("taxiRobot2")].isNull() && m_taxi_robot2_isValid;

    m_taxi_robot3_isValid = ::OpenAPI::fromJsonValue(m_taxi_robot3, json[QString("taxiRobot3")]);
    m_taxi_robot3_isSet = !json[QString("taxiRobot3")].isNull() && m_taxi_robot3_isValid;

    m_tech_foul_count_isValid = ::OpenAPI::fromJsonValue(m_tech_foul_count, json[QString("techFoulCount")]);
    m_tech_foul_count_isSet = !json[QString("techFoulCount")].isNull() && m_tech_foul_count_isValid;

    m_teleop_cargo_lower_blue_isValid = ::OpenAPI::fromJsonValue(m_teleop_cargo_lower_blue, json[QString("teleopCargoLowerBlue")]);
    m_teleop_cargo_lower_blue_isSet = !json[QString("teleopCargoLowerBlue")].isNull() && m_teleop_cargo_lower_blue_isValid;

    m_teleop_cargo_lower_far_isValid = ::OpenAPI::fromJsonValue(m_teleop_cargo_lower_far, json[QString("teleopCargoLowerFar")]);
    m_teleop_cargo_lower_far_isSet = !json[QString("teleopCargoLowerFar")].isNull() && m_teleop_cargo_lower_far_isValid;

    m_teleop_cargo_lower_near_isValid = ::OpenAPI::fromJsonValue(m_teleop_cargo_lower_near, json[QString("teleopCargoLowerNear")]);
    m_teleop_cargo_lower_near_isSet = !json[QString("teleopCargoLowerNear")].isNull() && m_teleop_cargo_lower_near_isValid;

    m_teleop_cargo_lower_red_isValid = ::OpenAPI::fromJsonValue(m_teleop_cargo_lower_red, json[QString("teleopCargoLowerRed")]);
    m_teleop_cargo_lower_red_isSet = !json[QString("teleopCargoLowerRed")].isNull() && m_teleop_cargo_lower_red_isValid;

    m_teleop_cargo_points_isValid = ::OpenAPI::fromJsonValue(m_teleop_cargo_points, json[QString("teleopCargoPoints")]);
    m_teleop_cargo_points_isSet = !json[QString("teleopCargoPoints")].isNull() && m_teleop_cargo_points_isValid;

    m_teleop_cargo_total_isValid = ::OpenAPI::fromJsonValue(m_teleop_cargo_total, json[QString("teleopCargoTotal")]);
    m_teleop_cargo_total_isSet = !json[QString("teleopCargoTotal")].isNull() && m_teleop_cargo_total_isValid;

    m_teleop_cargo_upper_blue_isValid = ::OpenAPI::fromJsonValue(m_teleop_cargo_upper_blue, json[QString("teleopCargoUpperBlue")]);
    m_teleop_cargo_upper_blue_isSet = !json[QString("teleopCargoUpperBlue")].isNull() && m_teleop_cargo_upper_blue_isValid;

    m_teleop_cargo_upper_far_isValid = ::OpenAPI::fromJsonValue(m_teleop_cargo_upper_far, json[QString("teleopCargoUpperFar")]);
    m_teleop_cargo_upper_far_isSet = !json[QString("teleopCargoUpperFar")].isNull() && m_teleop_cargo_upper_far_isValid;

    m_teleop_cargo_upper_near_isValid = ::OpenAPI::fromJsonValue(m_teleop_cargo_upper_near, json[QString("teleopCargoUpperNear")]);
    m_teleop_cargo_upper_near_isSet = !json[QString("teleopCargoUpperNear")].isNull() && m_teleop_cargo_upper_near_isValid;

    m_teleop_cargo_upper_red_isValid = ::OpenAPI::fromJsonValue(m_teleop_cargo_upper_red, json[QString("teleopCargoUpperRed")]);
    m_teleop_cargo_upper_red_isSet = !json[QString("teleopCargoUpperRed")].isNull() && m_teleop_cargo_upper_red_isValid;

    m_teleop_points_isValid = ::OpenAPI::fromJsonValue(m_teleop_points, json[QString("teleopPoints")]);
    m_teleop_points_isSet = !json[QString("teleopPoints")].isNull() && m_teleop_points_isValid;

    m_total_points_isValid = ::OpenAPI::fromJsonValue(m_total_points, json[QString("totalPoints")]);
    m_total_points_isSet = !json[QString("totalPoints")].isNull() && m_total_points_isValid;
}

QString OAIMatch_Score_Breakdown_2022_Alliance::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMatch_Score_Breakdown_2022_Alliance::asJsonObject() const {
    QJsonObject obj;
    if (m_adjust_points_isSet) {
        obj.insert(QString("adjustPoints"), ::OpenAPI::toJsonValue(m_adjust_points));
    }
    if (m_auto_cargo_lower_blue_isSet) {
        obj.insert(QString("autoCargoLowerBlue"), ::OpenAPI::toJsonValue(m_auto_cargo_lower_blue));
    }
    if (m_auto_cargo_lower_far_isSet) {
        obj.insert(QString("autoCargoLowerFar"), ::OpenAPI::toJsonValue(m_auto_cargo_lower_far));
    }
    if (m_auto_cargo_lower_near_isSet) {
        obj.insert(QString("autoCargoLowerNear"), ::OpenAPI::toJsonValue(m_auto_cargo_lower_near));
    }
    if (m_auto_cargo_lower_red_isSet) {
        obj.insert(QString("autoCargoLowerRed"), ::OpenAPI::toJsonValue(m_auto_cargo_lower_red));
    }
    if (m_auto_cargo_points_isSet) {
        obj.insert(QString("autoCargoPoints"), ::OpenAPI::toJsonValue(m_auto_cargo_points));
    }
    if (m_auto_cargo_total_isSet) {
        obj.insert(QString("autoCargoTotal"), ::OpenAPI::toJsonValue(m_auto_cargo_total));
    }
    if (m_auto_cargo_upper_blue_isSet) {
        obj.insert(QString("autoCargoUpperBlue"), ::OpenAPI::toJsonValue(m_auto_cargo_upper_blue));
    }
    if (m_auto_cargo_upper_far_isSet) {
        obj.insert(QString("autoCargoUpperFar"), ::OpenAPI::toJsonValue(m_auto_cargo_upper_far));
    }
    if (m_auto_cargo_upper_near_isSet) {
        obj.insert(QString("autoCargoUpperNear"), ::OpenAPI::toJsonValue(m_auto_cargo_upper_near));
    }
    if (m_auto_cargo_upper_red_isSet) {
        obj.insert(QString("autoCargoUpperRed"), ::OpenAPI::toJsonValue(m_auto_cargo_upper_red));
    }
    if (m_auto_points_isSet) {
        obj.insert(QString("autoPoints"), ::OpenAPI::toJsonValue(m_auto_points));
    }
    if (m_auto_taxi_points_isSet) {
        obj.insert(QString("autoTaxiPoints"), ::OpenAPI::toJsonValue(m_auto_taxi_points));
    }
    if (m_cargo_bonus_ranking_point_isSet) {
        obj.insert(QString("cargoBonusRankingPoint"), ::OpenAPI::toJsonValue(m_cargo_bonus_ranking_point));
    }
    if (m_endgame_points_isSet) {
        obj.insert(QString("endgamePoints"), ::OpenAPI::toJsonValue(m_endgame_points));
    }
    if (m_endgame_robot1_isSet) {
        obj.insert(QString("endgameRobot1"), ::OpenAPI::toJsonValue(m_endgame_robot1));
    }
    if (m_endgame_robot2_isSet) {
        obj.insert(QString("endgameRobot2"), ::OpenAPI::toJsonValue(m_endgame_robot2));
    }
    if (m_endgame_robot3_isSet) {
        obj.insert(QString("endgameRobot3"), ::OpenAPI::toJsonValue(m_endgame_robot3));
    }
    if (m_foul_count_isSet) {
        obj.insert(QString("foulCount"), ::OpenAPI::toJsonValue(m_foul_count));
    }
    if (m_foul_points_isSet) {
        obj.insert(QString("foulPoints"), ::OpenAPI::toJsonValue(m_foul_points));
    }
    if (m_hangar_bonus_ranking_point_isSet) {
        obj.insert(QString("hangarBonusRankingPoint"), ::OpenAPI::toJsonValue(m_hangar_bonus_ranking_point));
    }
    if (m_match_cargo_total_isSet) {
        obj.insert(QString("matchCargoTotal"), ::OpenAPI::toJsonValue(m_match_cargo_total));
    }
    if (m_quintet_achieved_isSet) {
        obj.insert(QString("quintetAchieved"), ::OpenAPI::toJsonValue(m_quintet_achieved));
    }
    if (m_rp_isSet) {
        obj.insert(QString("rp"), ::OpenAPI::toJsonValue(m_rp));
    }
    if (m_taxi_robot1_isSet) {
        obj.insert(QString("taxiRobot1"), ::OpenAPI::toJsonValue(m_taxi_robot1));
    }
    if (m_taxi_robot2_isSet) {
        obj.insert(QString("taxiRobot2"), ::OpenAPI::toJsonValue(m_taxi_robot2));
    }
    if (m_taxi_robot3_isSet) {
        obj.insert(QString("taxiRobot3"), ::OpenAPI::toJsonValue(m_taxi_robot3));
    }
    if (m_tech_foul_count_isSet) {
        obj.insert(QString("techFoulCount"), ::OpenAPI::toJsonValue(m_tech_foul_count));
    }
    if (m_teleop_cargo_lower_blue_isSet) {
        obj.insert(QString("teleopCargoLowerBlue"), ::OpenAPI::toJsonValue(m_teleop_cargo_lower_blue));
    }
    if (m_teleop_cargo_lower_far_isSet) {
        obj.insert(QString("teleopCargoLowerFar"), ::OpenAPI::toJsonValue(m_teleop_cargo_lower_far));
    }
    if (m_teleop_cargo_lower_near_isSet) {
        obj.insert(QString("teleopCargoLowerNear"), ::OpenAPI::toJsonValue(m_teleop_cargo_lower_near));
    }
    if (m_teleop_cargo_lower_red_isSet) {
        obj.insert(QString("teleopCargoLowerRed"), ::OpenAPI::toJsonValue(m_teleop_cargo_lower_red));
    }
    if (m_teleop_cargo_points_isSet) {
        obj.insert(QString("teleopCargoPoints"), ::OpenAPI::toJsonValue(m_teleop_cargo_points));
    }
    if (m_teleop_cargo_total_isSet) {
        obj.insert(QString("teleopCargoTotal"), ::OpenAPI::toJsonValue(m_teleop_cargo_total));
    }
    if (m_teleop_cargo_upper_blue_isSet) {
        obj.insert(QString("teleopCargoUpperBlue"), ::OpenAPI::toJsonValue(m_teleop_cargo_upper_blue));
    }
    if (m_teleop_cargo_upper_far_isSet) {
        obj.insert(QString("teleopCargoUpperFar"), ::OpenAPI::toJsonValue(m_teleop_cargo_upper_far));
    }
    if (m_teleop_cargo_upper_near_isSet) {
        obj.insert(QString("teleopCargoUpperNear"), ::OpenAPI::toJsonValue(m_teleop_cargo_upper_near));
    }
    if (m_teleop_cargo_upper_red_isSet) {
        obj.insert(QString("teleopCargoUpperRed"), ::OpenAPI::toJsonValue(m_teleop_cargo_upper_red));
    }
    if (m_teleop_points_isSet) {
        obj.insert(QString("teleopPoints"), ::OpenAPI::toJsonValue(m_teleop_points));
    }
    if (m_total_points_isSet) {
        obj.insert(QString("totalPoints"), ::OpenAPI::toJsonValue(m_total_points));
    }
    return obj;
}

qint32 OAIMatch_Score_Breakdown_2022_Alliance::getAdjustPoints() const {
    return m_adjust_points;
}
void OAIMatch_Score_Breakdown_2022_Alliance::setAdjustPoints(const qint32 &adjust_points) {
    m_adjust_points = adjust_points;
    m_adjust_points_isSet = true;
}

bool OAIMatch_Score_Breakdown_2022_Alliance::is_adjust_points_Set() const{
    return m_adjust_points_isSet;
}

bool OAIMatch_Score_Breakdown_2022_Alliance::is_adjust_points_Valid() const{
    return m_adjust_points_isValid;
}

qint32 OAIMatch_Score_Breakdown_2022_Alliance::getAutoCargoLowerBlue() const {
    return m_auto_cargo_lower_blue;
}
void OAIMatch_Score_Breakdown_2022_Alliance::setAutoCargoLowerBlue(const qint32 &auto_cargo_lower_blue) {
    m_auto_cargo_lower_blue = auto_cargo_lower_blue;
    m_auto_cargo_lower_blue_isSet = true;
}

bool OAIMatch_Score_Breakdown_2022_Alliance::is_auto_cargo_lower_blue_Set() const{
    return m_auto_cargo_lower_blue_isSet;
}

bool OAIMatch_Score_Breakdown_2022_Alliance::is_auto_cargo_lower_blue_Valid() const{
    return m_auto_cargo_lower_blue_isValid;
}

qint32 OAIMatch_Score_Breakdown_2022_Alliance::getAutoCargoLowerFar() const {
    return m_auto_cargo_lower_far;
}
void OAIMatch_Score_Breakdown_2022_Alliance::setAutoCargoLowerFar(const qint32 &auto_cargo_lower_far) {
    m_auto_cargo_lower_far = auto_cargo_lower_far;
    m_auto_cargo_lower_far_isSet = true;
}

bool OAIMatch_Score_Breakdown_2022_Alliance::is_auto_cargo_lower_far_Set() const{
    return m_auto_cargo_lower_far_isSet;
}

bool OAIMatch_Score_Breakdown_2022_Alliance::is_auto_cargo_lower_far_Valid() const{
    return m_auto_cargo_lower_far_isValid;
}

qint32 OAIMatch_Score_Breakdown_2022_Alliance::getAutoCargoLowerNear() const {
    return m_auto_cargo_lower_near;
}
void OAIMatch_Score_Breakdown_2022_Alliance::setAutoCargoLowerNear(const qint32 &auto_cargo_lower_near) {
    m_auto_cargo_lower_near = auto_cargo_lower_near;
    m_auto_cargo_lower_near_isSet = true;
}

bool OAIMatch_Score_Breakdown_2022_Alliance::is_auto_cargo_lower_near_Set() const{
    return m_auto_cargo_lower_near_isSet;
}

bool OAIMatch_Score_Breakdown_2022_Alliance::is_auto_cargo_lower_near_Valid() const{
    return m_auto_cargo_lower_near_isValid;
}

qint32 OAIMatch_Score_Breakdown_2022_Alliance::getAutoCargoLowerRed() const {
    return m_auto_cargo_lower_red;
}
void OAIMatch_Score_Breakdown_2022_Alliance::setAutoCargoLowerRed(const qint32 &auto_cargo_lower_red) {
    m_auto_cargo_lower_red = auto_cargo_lower_red;
    m_auto_cargo_lower_red_isSet = true;
}

bool OAIMatch_Score_Breakdown_2022_Alliance::is_auto_cargo_lower_red_Set() const{
    return m_auto_cargo_lower_red_isSet;
}

bool OAIMatch_Score_Breakdown_2022_Alliance::is_auto_cargo_lower_red_Valid() const{
    return m_auto_cargo_lower_red_isValid;
}

qint32 OAIMatch_Score_Breakdown_2022_Alliance::getAutoCargoPoints() const {
    return m_auto_cargo_points;
}
void OAIMatch_Score_Breakdown_2022_Alliance::setAutoCargoPoints(const qint32 &auto_cargo_points) {
    m_auto_cargo_points = auto_cargo_points;
    m_auto_cargo_points_isSet = true;
}

bool OAIMatch_Score_Breakdown_2022_Alliance::is_auto_cargo_points_Set() const{
    return m_auto_cargo_points_isSet;
}

bool OAIMatch_Score_Breakdown_2022_Alliance::is_auto_cargo_points_Valid() const{
    return m_auto_cargo_points_isValid;
}

qint32 OAIMatch_Score_Breakdown_2022_Alliance::getAutoCargoTotal() const {
    return m_auto_cargo_total;
}
void OAIMatch_Score_Breakdown_2022_Alliance::setAutoCargoTotal(const qint32 &auto_cargo_total) {
    m_auto_cargo_total = auto_cargo_total;
    m_auto_cargo_total_isSet = true;
}

bool OAIMatch_Score_Breakdown_2022_Alliance::is_auto_cargo_total_Set() const{
    return m_auto_cargo_total_isSet;
}

bool OAIMatch_Score_Breakdown_2022_Alliance::is_auto_cargo_total_Valid() const{
    return m_auto_cargo_total_isValid;
}

qint32 OAIMatch_Score_Breakdown_2022_Alliance::getAutoCargoUpperBlue() const {
    return m_auto_cargo_upper_blue;
}
void OAIMatch_Score_Breakdown_2022_Alliance::setAutoCargoUpperBlue(const qint32 &auto_cargo_upper_blue) {
    m_auto_cargo_upper_blue = auto_cargo_upper_blue;
    m_auto_cargo_upper_blue_isSet = true;
}

bool OAIMatch_Score_Breakdown_2022_Alliance::is_auto_cargo_upper_blue_Set() const{
    return m_auto_cargo_upper_blue_isSet;
}

bool OAIMatch_Score_Breakdown_2022_Alliance::is_auto_cargo_upper_blue_Valid() const{
    return m_auto_cargo_upper_blue_isValid;
}

qint32 OAIMatch_Score_Breakdown_2022_Alliance::getAutoCargoUpperFar() const {
    return m_auto_cargo_upper_far;
}
void OAIMatch_Score_Breakdown_2022_Alliance::setAutoCargoUpperFar(const qint32 &auto_cargo_upper_far) {
    m_auto_cargo_upper_far = auto_cargo_upper_far;
    m_auto_cargo_upper_far_isSet = true;
}

bool OAIMatch_Score_Breakdown_2022_Alliance::is_auto_cargo_upper_far_Set() const{
    return m_auto_cargo_upper_far_isSet;
}

bool OAIMatch_Score_Breakdown_2022_Alliance::is_auto_cargo_upper_far_Valid() const{
    return m_auto_cargo_upper_far_isValid;
}

qint32 OAIMatch_Score_Breakdown_2022_Alliance::getAutoCargoUpperNear() const {
    return m_auto_cargo_upper_near;
}
void OAIMatch_Score_Breakdown_2022_Alliance::setAutoCargoUpperNear(const qint32 &auto_cargo_upper_near) {
    m_auto_cargo_upper_near = auto_cargo_upper_near;
    m_auto_cargo_upper_near_isSet = true;
}

bool OAIMatch_Score_Breakdown_2022_Alliance::is_auto_cargo_upper_near_Set() const{
    return m_auto_cargo_upper_near_isSet;
}

bool OAIMatch_Score_Breakdown_2022_Alliance::is_auto_cargo_upper_near_Valid() const{
    return m_auto_cargo_upper_near_isValid;
}

qint32 OAIMatch_Score_Breakdown_2022_Alliance::getAutoCargoUpperRed() const {
    return m_auto_cargo_upper_red;
}
void OAIMatch_Score_Breakdown_2022_Alliance::setAutoCargoUpperRed(const qint32 &auto_cargo_upper_red) {
    m_auto_cargo_upper_red = auto_cargo_upper_red;
    m_auto_cargo_upper_red_isSet = true;
}

bool OAIMatch_Score_Breakdown_2022_Alliance::is_auto_cargo_upper_red_Set() const{
    return m_auto_cargo_upper_red_isSet;
}

bool OAIMatch_Score_Breakdown_2022_Alliance::is_auto_cargo_upper_red_Valid() const{
    return m_auto_cargo_upper_red_isValid;
}

qint32 OAIMatch_Score_Breakdown_2022_Alliance::getAutoPoints() const {
    return m_auto_points;
}
void OAIMatch_Score_Breakdown_2022_Alliance::setAutoPoints(const qint32 &auto_points) {
    m_auto_points = auto_points;
    m_auto_points_isSet = true;
}

bool OAIMatch_Score_Breakdown_2022_Alliance::is_auto_points_Set() const{
    return m_auto_points_isSet;
}

bool OAIMatch_Score_Breakdown_2022_Alliance::is_auto_points_Valid() const{
    return m_auto_points_isValid;
}

qint32 OAIMatch_Score_Breakdown_2022_Alliance::getAutoTaxiPoints() const {
    return m_auto_taxi_points;
}
void OAIMatch_Score_Breakdown_2022_Alliance::setAutoTaxiPoints(const qint32 &auto_taxi_points) {
    m_auto_taxi_points = auto_taxi_points;
    m_auto_taxi_points_isSet = true;
}

bool OAIMatch_Score_Breakdown_2022_Alliance::is_auto_taxi_points_Set() const{
    return m_auto_taxi_points_isSet;
}

bool OAIMatch_Score_Breakdown_2022_Alliance::is_auto_taxi_points_Valid() const{
    return m_auto_taxi_points_isValid;
}

bool OAIMatch_Score_Breakdown_2022_Alliance::isCargoBonusRankingPoint() const {
    return m_cargo_bonus_ranking_point;
}
void OAIMatch_Score_Breakdown_2022_Alliance::setCargoBonusRankingPoint(const bool &cargo_bonus_ranking_point) {
    m_cargo_bonus_ranking_point = cargo_bonus_ranking_point;
    m_cargo_bonus_ranking_point_isSet = true;
}

bool OAIMatch_Score_Breakdown_2022_Alliance::is_cargo_bonus_ranking_point_Set() const{
    return m_cargo_bonus_ranking_point_isSet;
}

bool OAIMatch_Score_Breakdown_2022_Alliance::is_cargo_bonus_ranking_point_Valid() const{
    return m_cargo_bonus_ranking_point_isValid;
}

qint32 OAIMatch_Score_Breakdown_2022_Alliance::getEndgamePoints() const {
    return m_endgame_points;
}
void OAIMatch_Score_Breakdown_2022_Alliance::setEndgamePoints(const qint32 &endgame_points) {
    m_endgame_points = endgame_points;
    m_endgame_points_isSet = true;
}

bool OAIMatch_Score_Breakdown_2022_Alliance::is_endgame_points_Set() const{
    return m_endgame_points_isSet;
}

bool OAIMatch_Score_Breakdown_2022_Alliance::is_endgame_points_Valid() const{
    return m_endgame_points_isValid;
}

QString OAIMatch_Score_Breakdown_2022_Alliance::getEndgameRobot1() const {
    return m_endgame_robot1;
}
void OAIMatch_Score_Breakdown_2022_Alliance::setEndgameRobot1(const QString &endgame_robot1) {
    m_endgame_robot1 = endgame_robot1;
    m_endgame_robot1_isSet = true;
}

bool OAIMatch_Score_Breakdown_2022_Alliance::is_endgame_robot1_Set() const{
    return m_endgame_robot1_isSet;
}

bool OAIMatch_Score_Breakdown_2022_Alliance::is_endgame_robot1_Valid() const{
    return m_endgame_robot1_isValid;
}

QString OAIMatch_Score_Breakdown_2022_Alliance::getEndgameRobot2() const {
    return m_endgame_robot2;
}
void OAIMatch_Score_Breakdown_2022_Alliance::setEndgameRobot2(const QString &endgame_robot2) {
    m_endgame_robot2 = endgame_robot2;
    m_endgame_robot2_isSet = true;
}

bool OAIMatch_Score_Breakdown_2022_Alliance::is_endgame_robot2_Set() const{
    return m_endgame_robot2_isSet;
}

bool OAIMatch_Score_Breakdown_2022_Alliance::is_endgame_robot2_Valid() const{
    return m_endgame_robot2_isValid;
}

QString OAIMatch_Score_Breakdown_2022_Alliance::getEndgameRobot3() const {
    return m_endgame_robot3;
}
void OAIMatch_Score_Breakdown_2022_Alliance::setEndgameRobot3(const QString &endgame_robot3) {
    m_endgame_robot3 = endgame_robot3;
    m_endgame_robot3_isSet = true;
}

bool OAIMatch_Score_Breakdown_2022_Alliance::is_endgame_robot3_Set() const{
    return m_endgame_robot3_isSet;
}

bool OAIMatch_Score_Breakdown_2022_Alliance::is_endgame_robot3_Valid() const{
    return m_endgame_robot3_isValid;
}

qint32 OAIMatch_Score_Breakdown_2022_Alliance::getFoulCount() const {
    return m_foul_count;
}
void OAIMatch_Score_Breakdown_2022_Alliance::setFoulCount(const qint32 &foul_count) {
    m_foul_count = foul_count;
    m_foul_count_isSet = true;
}

bool OAIMatch_Score_Breakdown_2022_Alliance::is_foul_count_Set() const{
    return m_foul_count_isSet;
}

bool OAIMatch_Score_Breakdown_2022_Alliance::is_foul_count_Valid() const{
    return m_foul_count_isValid;
}

qint32 OAIMatch_Score_Breakdown_2022_Alliance::getFoulPoints() const {
    return m_foul_points;
}
void OAIMatch_Score_Breakdown_2022_Alliance::setFoulPoints(const qint32 &foul_points) {
    m_foul_points = foul_points;
    m_foul_points_isSet = true;
}

bool OAIMatch_Score_Breakdown_2022_Alliance::is_foul_points_Set() const{
    return m_foul_points_isSet;
}

bool OAIMatch_Score_Breakdown_2022_Alliance::is_foul_points_Valid() const{
    return m_foul_points_isValid;
}

bool OAIMatch_Score_Breakdown_2022_Alliance::isHangarBonusRankingPoint() const {
    return m_hangar_bonus_ranking_point;
}
void OAIMatch_Score_Breakdown_2022_Alliance::setHangarBonusRankingPoint(const bool &hangar_bonus_ranking_point) {
    m_hangar_bonus_ranking_point = hangar_bonus_ranking_point;
    m_hangar_bonus_ranking_point_isSet = true;
}

bool OAIMatch_Score_Breakdown_2022_Alliance::is_hangar_bonus_ranking_point_Set() const{
    return m_hangar_bonus_ranking_point_isSet;
}

bool OAIMatch_Score_Breakdown_2022_Alliance::is_hangar_bonus_ranking_point_Valid() const{
    return m_hangar_bonus_ranking_point_isValid;
}

qint32 OAIMatch_Score_Breakdown_2022_Alliance::getMatchCargoTotal() const {
    return m_match_cargo_total;
}
void OAIMatch_Score_Breakdown_2022_Alliance::setMatchCargoTotal(const qint32 &match_cargo_total) {
    m_match_cargo_total = match_cargo_total;
    m_match_cargo_total_isSet = true;
}

bool OAIMatch_Score_Breakdown_2022_Alliance::is_match_cargo_total_Set() const{
    return m_match_cargo_total_isSet;
}

bool OAIMatch_Score_Breakdown_2022_Alliance::is_match_cargo_total_Valid() const{
    return m_match_cargo_total_isValid;
}

bool OAIMatch_Score_Breakdown_2022_Alliance::isQuintetAchieved() const {
    return m_quintet_achieved;
}
void OAIMatch_Score_Breakdown_2022_Alliance::setQuintetAchieved(const bool &quintet_achieved) {
    m_quintet_achieved = quintet_achieved;
    m_quintet_achieved_isSet = true;
}

bool OAIMatch_Score_Breakdown_2022_Alliance::is_quintet_achieved_Set() const{
    return m_quintet_achieved_isSet;
}

bool OAIMatch_Score_Breakdown_2022_Alliance::is_quintet_achieved_Valid() const{
    return m_quintet_achieved_isValid;
}

qint32 OAIMatch_Score_Breakdown_2022_Alliance::getRp() const {
    return m_rp;
}
void OAIMatch_Score_Breakdown_2022_Alliance::setRp(const qint32 &rp) {
    m_rp = rp;
    m_rp_isSet = true;
}

bool OAIMatch_Score_Breakdown_2022_Alliance::is_rp_Set() const{
    return m_rp_isSet;
}

bool OAIMatch_Score_Breakdown_2022_Alliance::is_rp_Valid() const{
    return m_rp_isValid;
}

QString OAIMatch_Score_Breakdown_2022_Alliance::getTaxiRobot1() const {
    return m_taxi_robot1;
}
void OAIMatch_Score_Breakdown_2022_Alliance::setTaxiRobot1(const QString &taxi_robot1) {
    m_taxi_robot1 = taxi_robot1;
    m_taxi_robot1_isSet = true;
}

bool OAIMatch_Score_Breakdown_2022_Alliance::is_taxi_robot1_Set() const{
    return m_taxi_robot1_isSet;
}

bool OAIMatch_Score_Breakdown_2022_Alliance::is_taxi_robot1_Valid() const{
    return m_taxi_robot1_isValid;
}

QString OAIMatch_Score_Breakdown_2022_Alliance::getTaxiRobot2() const {
    return m_taxi_robot2;
}
void OAIMatch_Score_Breakdown_2022_Alliance::setTaxiRobot2(const QString &taxi_robot2) {
    m_taxi_robot2 = taxi_robot2;
    m_taxi_robot2_isSet = true;
}

bool OAIMatch_Score_Breakdown_2022_Alliance::is_taxi_robot2_Set() const{
    return m_taxi_robot2_isSet;
}

bool OAIMatch_Score_Breakdown_2022_Alliance::is_taxi_robot2_Valid() const{
    return m_taxi_robot2_isValid;
}

QString OAIMatch_Score_Breakdown_2022_Alliance::getTaxiRobot3() const {
    return m_taxi_robot3;
}
void OAIMatch_Score_Breakdown_2022_Alliance::setTaxiRobot3(const QString &taxi_robot3) {
    m_taxi_robot3 = taxi_robot3;
    m_taxi_robot3_isSet = true;
}

bool OAIMatch_Score_Breakdown_2022_Alliance::is_taxi_robot3_Set() const{
    return m_taxi_robot3_isSet;
}

bool OAIMatch_Score_Breakdown_2022_Alliance::is_taxi_robot3_Valid() const{
    return m_taxi_robot3_isValid;
}

qint32 OAIMatch_Score_Breakdown_2022_Alliance::getTechFoulCount() const {
    return m_tech_foul_count;
}
void OAIMatch_Score_Breakdown_2022_Alliance::setTechFoulCount(const qint32 &tech_foul_count) {
    m_tech_foul_count = tech_foul_count;
    m_tech_foul_count_isSet = true;
}

bool OAIMatch_Score_Breakdown_2022_Alliance::is_tech_foul_count_Set() const{
    return m_tech_foul_count_isSet;
}

bool OAIMatch_Score_Breakdown_2022_Alliance::is_tech_foul_count_Valid() const{
    return m_tech_foul_count_isValid;
}

qint32 OAIMatch_Score_Breakdown_2022_Alliance::getTeleopCargoLowerBlue() const {
    return m_teleop_cargo_lower_blue;
}
void OAIMatch_Score_Breakdown_2022_Alliance::setTeleopCargoLowerBlue(const qint32 &teleop_cargo_lower_blue) {
    m_teleop_cargo_lower_blue = teleop_cargo_lower_blue;
    m_teleop_cargo_lower_blue_isSet = true;
}

bool OAIMatch_Score_Breakdown_2022_Alliance::is_teleop_cargo_lower_blue_Set() const{
    return m_teleop_cargo_lower_blue_isSet;
}

bool OAIMatch_Score_Breakdown_2022_Alliance::is_teleop_cargo_lower_blue_Valid() const{
    return m_teleop_cargo_lower_blue_isValid;
}

qint32 OAIMatch_Score_Breakdown_2022_Alliance::getTeleopCargoLowerFar() const {
    return m_teleop_cargo_lower_far;
}
void OAIMatch_Score_Breakdown_2022_Alliance::setTeleopCargoLowerFar(const qint32 &teleop_cargo_lower_far) {
    m_teleop_cargo_lower_far = teleop_cargo_lower_far;
    m_teleop_cargo_lower_far_isSet = true;
}

bool OAIMatch_Score_Breakdown_2022_Alliance::is_teleop_cargo_lower_far_Set() const{
    return m_teleop_cargo_lower_far_isSet;
}

bool OAIMatch_Score_Breakdown_2022_Alliance::is_teleop_cargo_lower_far_Valid() const{
    return m_teleop_cargo_lower_far_isValid;
}

qint32 OAIMatch_Score_Breakdown_2022_Alliance::getTeleopCargoLowerNear() const {
    return m_teleop_cargo_lower_near;
}
void OAIMatch_Score_Breakdown_2022_Alliance::setTeleopCargoLowerNear(const qint32 &teleop_cargo_lower_near) {
    m_teleop_cargo_lower_near = teleop_cargo_lower_near;
    m_teleop_cargo_lower_near_isSet = true;
}

bool OAIMatch_Score_Breakdown_2022_Alliance::is_teleop_cargo_lower_near_Set() const{
    return m_teleop_cargo_lower_near_isSet;
}

bool OAIMatch_Score_Breakdown_2022_Alliance::is_teleop_cargo_lower_near_Valid() const{
    return m_teleop_cargo_lower_near_isValid;
}

qint32 OAIMatch_Score_Breakdown_2022_Alliance::getTeleopCargoLowerRed() const {
    return m_teleop_cargo_lower_red;
}
void OAIMatch_Score_Breakdown_2022_Alliance::setTeleopCargoLowerRed(const qint32 &teleop_cargo_lower_red) {
    m_teleop_cargo_lower_red = teleop_cargo_lower_red;
    m_teleop_cargo_lower_red_isSet = true;
}

bool OAIMatch_Score_Breakdown_2022_Alliance::is_teleop_cargo_lower_red_Set() const{
    return m_teleop_cargo_lower_red_isSet;
}

bool OAIMatch_Score_Breakdown_2022_Alliance::is_teleop_cargo_lower_red_Valid() const{
    return m_teleop_cargo_lower_red_isValid;
}

qint32 OAIMatch_Score_Breakdown_2022_Alliance::getTeleopCargoPoints() const {
    return m_teleop_cargo_points;
}
void OAIMatch_Score_Breakdown_2022_Alliance::setTeleopCargoPoints(const qint32 &teleop_cargo_points) {
    m_teleop_cargo_points = teleop_cargo_points;
    m_teleop_cargo_points_isSet = true;
}

bool OAIMatch_Score_Breakdown_2022_Alliance::is_teleop_cargo_points_Set() const{
    return m_teleop_cargo_points_isSet;
}

bool OAIMatch_Score_Breakdown_2022_Alliance::is_teleop_cargo_points_Valid() const{
    return m_teleop_cargo_points_isValid;
}

qint32 OAIMatch_Score_Breakdown_2022_Alliance::getTeleopCargoTotal() const {
    return m_teleop_cargo_total;
}
void OAIMatch_Score_Breakdown_2022_Alliance::setTeleopCargoTotal(const qint32 &teleop_cargo_total) {
    m_teleop_cargo_total = teleop_cargo_total;
    m_teleop_cargo_total_isSet = true;
}

bool OAIMatch_Score_Breakdown_2022_Alliance::is_teleop_cargo_total_Set() const{
    return m_teleop_cargo_total_isSet;
}

bool OAIMatch_Score_Breakdown_2022_Alliance::is_teleop_cargo_total_Valid() const{
    return m_teleop_cargo_total_isValid;
}

qint32 OAIMatch_Score_Breakdown_2022_Alliance::getTeleopCargoUpperBlue() const {
    return m_teleop_cargo_upper_blue;
}
void OAIMatch_Score_Breakdown_2022_Alliance::setTeleopCargoUpperBlue(const qint32 &teleop_cargo_upper_blue) {
    m_teleop_cargo_upper_blue = teleop_cargo_upper_blue;
    m_teleop_cargo_upper_blue_isSet = true;
}

bool OAIMatch_Score_Breakdown_2022_Alliance::is_teleop_cargo_upper_blue_Set() const{
    return m_teleop_cargo_upper_blue_isSet;
}

bool OAIMatch_Score_Breakdown_2022_Alliance::is_teleop_cargo_upper_blue_Valid() const{
    return m_teleop_cargo_upper_blue_isValid;
}

qint32 OAIMatch_Score_Breakdown_2022_Alliance::getTeleopCargoUpperFar() const {
    return m_teleop_cargo_upper_far;
}
void OAIMatch_Score_Breakdown_2022_Alliance::setTeleopCargoUpperFar(const qint32 &teleop_cargo_upper_far) {
    m_teleop_cargo_upper_far = teleop_cargo_upper_far;
    m_teleop_cargo_upper_far_isSet = true;
}

bool OAIMatch_Score_Breakdown_2022_Alliance::is_teleop_cargo_upper_far_Set() const{
    return m_teleop_cargo_upper_far_isSet;
}

bool OAIMatch_Score_Breakdown_2022_Alliance::is_teleop_cargo_upper_far_Valid() const{
    return m_teleop_cargo_upper_far_isValid;
}

qint32 OAIMatch_Score_Breakdown_2022_Alliance::getTeleopCargoUpperNear() const {
    return m_teleop_cargo_upper_near;
}
void OAIMatch_Score_Breakdown_2022_Alliance::setTeleopCargoUpperNear(const qint32 &teleop_cargo_upper_near) {
    m_teleop_cargo_upper_near = teleop_cargo_upper_near;
    m_teleop_cargo_upper_near_isSet = true;
}

bool OAIMatch_Score_Breakdown_2022_Alliance::is_teleop_cargo_upper_near_Set() const{
    return m_teleop_cargo_upper_near_isSet;
}

bool OAIMatch_Score_Breakdown_2022_Alliance::is_teleop_cargo_upper_near_Valid() const{
    return m_teleop_cargo_upper_near_isValid;
}

qint32 OAIMatch_Score_Breakdown_2022_Alliance::getTeleopCargoUpperRed() const {
    return m_teleop_cargo_upper_red;
}
void OAIMatch_Score_Breakdown_2022_Alliance::setTeleopCargoUpperRed(const qint32 &teleop_cargo_upper_red) {
    m_teleop_cargo_upper_red = teleop_cargo_upper_red;
    m_teleop_cargo_upper_red_isSet = true;
}

bool OAIMatch_Score_Breakdown_2022_Alliance::is_teleop_cargo_upper_red_Set() const{
    return m_teleop_cargo_upper_red_isSet;
}

bool OAIMatch_Score_Breakdown_2022_Alliance::is_teleop_cargo_upper_red_Valid() const{
    return m_teleop_cargo_upper_red_isValid;
}

qint32 OAIMatch_Score_Breakdown_2022_Alliance::getTeleopPoints() const {
    return m_teleop_points;
}
void OAIMatch_Score_Breakdown_2022_Alliance::setTeleopPoints(const qint32 &teleop_points) {
    m_teleop_points = teleop_points;
    m_teleop_points_isSet = true;
}

bool OAIMatch_Score_Breakdown_2022_Alliance::is_teleop_points_Set() const{
    return m_teleop_points_isSet;
}

bool OAIMatch_Score_Breakdown_2022_Alliance::is_teleop_points_Valid() const{
    return m_teleop_points_isValid;
}

qint32 OAIMatch_Score_Breakdown_2022_Alliance::getTotalPoints() const {
    return m_total_points;
}
void OAIMatch_Score_Breakdown_2022_Alliance::setTotalPoints(const qint32 &total_points) {
    m_total_points = total_points;
    m_total_points_isSet = true;
}

bool OAIMatch_Score_Breakdown_2022_Alliance::is_total_points_Set() const{
    return m_total_points_isSet;
}

bool OAIMatch_Score_Breakdown_2022_Alliance::is_total_points_Valid() const{
    return m_total_points_isValid;
}

bool OAIMatch_Score_Breakdown_2022_Alliance::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_adjust_points_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auto_cargo_lower_blue_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auto_cargo_lower_far_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auto_cargo_lower_near_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auto_cargo_lower_red_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auto_cargo_points_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auto_cargo_total_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auto_cargo_upper_blue_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auto_cargo_upper_far_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auto_cargo_upper_near_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auto_cargo_upper_red_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auto_points_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auto_taxi_points_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cargo_bonus_ranking_point_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_endgame_points_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_endgame_robot1_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_endgame_robot2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_endgame_robot3_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_foul_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_foul_points_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hangar_bonus_ranking_point_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_match_cargo_total_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quintet_achieved_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_taxi_robot1_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_taxi_robot2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_taxi_robot3_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tech_foul_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_teleop_cargo_lower_blue_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_teleop_cargo_lower_far_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_teleop_cargo_lower_near_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_teleop_cargo_lower_red_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_teleop_cargo_points_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_teleop_cargo_total_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_teleop_cargo_upper_blue_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_teleop_cargo_upper_far_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_teleop_cargo_upper_near_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_teleop_cargo_upper_red_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_teleop_points_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_points_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMatch_Score_Breakdown_2022_Alliance::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
