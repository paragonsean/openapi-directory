/**
 * The Blue Alliance API v3
 * # Overview    Information and statistics about FIRST Robotics Competition teams and events.   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).
 *
 * The version of the OpenAPI document: 3.8.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIListApi_H
#define OAI_OAIListApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIDistrict_Ranking.h"
#include "OAIEvent.h"
#include "OAIEvent_Simple.h"
#include "OAITeam.h"
#include "OAITeam_Event_Status.h"
#include "OAITeam_Simple.h"
#include <QMap>
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIListApi : public QObject {
    Q_OBJECT

public:
    OAIListApi(const int timeOut = 0);
    ~OAIListApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  district_key QString [required]
    * @param[in]  if_none_match QString [optional]
    */
    virtual void getDistrictEventsKeys(const QString &district_key, const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  district_key QString [required]
    * @param[in]  if_none_match QString [optional]
    */
    virtual void getDistrictEventsSimple(const QString &district_key, const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  district_key QString [required]
    * @param[in]  if_none_match QString [optional]
    */
    virtual void getDistrictEvents(const QString &district_key, const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  district_key QString [required]
    * @param[in]  if_none_match QString [optional]
    */
    virtual void getDistrictRankings(const QString &district_key, const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  district_key QString [required]
    * @param[in]  if_none_match QString [optional]
    */
    virtual void getDistrictTeamsKeys(const QString &district_key, const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  district_key QString [required]
    * @param[in]  if_none_match QString [optional]
    */
    virtual void getDistrictTeamsSimple(const QString &district_key, const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  district_key QString [required]
    * @param[in]  if_none_match QString [optional]
    */
    virtual void getDistrictTeams(const QString &district_key, const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  event_key QString [required]
    * @param[in]  if_none_match QString [optional]
    */
    virtual void getEventTeamsKeys(const QString &event_key, const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  event_key QString [required]
    * @param[in]  if_none_match QString [optional]
    */
    virtual void getEventTeamsSimple(const QString &event_key, const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  event_key QString [required]
    * @param[in]  if_none_match QString [optional]
    */
    virtual void getEventTeamsStatuses(const QString &event_key, const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  event_key QString [required]
    * @param[in]  if_none_match QString [optional]
    */
    virtual void getEventTeams(const QString &event_key, const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  year qint32 [required]
    * @param[in]  if_none_match QString [optional]
    */
    virtual void getEventsByYearKeys(const qint32 &year, const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  year qint32 [required]
    * @param[in]  if_none_match QString [optional]
    */
    virtual void getEventsByYearSimple(const qint32 &year, const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  year qint32 [required]
    * @param[in]  if_none_match QString [optional]
    */
    virtual void getEventsByYear(const qint32 &year, const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  team_key QString [required]
    * @param[in]  year qint32 [required]
    * @param[in]  if_none_match QString [optional]
    */
    virtual void getTeamEventsStatusesByYear(const QString &team_key, const qint32 &year, const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  year qint32 [required]
    * @param[in]  page_num qint32 [required]
    * @param[in]  if_none_match QString [optional]
    */
    virtual void getTeamsByYearKeys(const qint32 &year, const qint32 &page_num, const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  year qint32 [required]
    * @param[in]  page_num qint32 [required]
    * @param[in]  if_none_match QString [optional]
    */
    virtual void getTeamsByYearSimple(const qint32 &year, const qint32 &page_num, const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  year qint32 [required]
    * @param[in]  page_num qint32 [required]
    * @param[in]  if_none_match QString [optional]
    */
    virtual void getTeamsByYear(const qint32 &year, const qint32 &page_num, const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  page_num qint32 [required]
    * @param[in]  if_none_match QString [optional]
    */
    virtual void getTeamsKeys(const qint32 &page_num, const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  page_num qint32 [required]
    * @param[in]  if_none_match QString [optional]
    */
    virtual void getTeamsSimple(const qint32 &page_num, const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  page_num qint32 [required]
    * @param[in]  if_none_match QString [optional]
    */
    virtual void getTeams(const qint32 &page_num, const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getDistrictEventsKeysCallback(OAIHttpRequestWorker *worker);
    void getDistrictEventsSimpleCallback(OAIHttpRequestWorker *worker);
    void getDistrictEventsCallback(OAIHttpRequestWorker *worker);
    void getDistrictRankingsCallback(OAIHttpRequestWorker *worker);
    void getDistrictTeamsKeysCallback(OAIHttpRequestWorker *worker);
    void getDistrictTeamsSimpleCallback(OAIHttpRequestWorker *worker);
    void getDistrictTeamsCallback(OAIHttpRequestWorker *worker);
    void getEventTeamsKeysCallback(OAIHttpRequestWorker *worker);
    void getEventTeamsSimpleCallback(OAIHttpRequestWorker *worker);
    void getEventTeamsStatusesCallback(OAIHttpRequestWorker *worker);
    void getEventTeamsCallback(OAIHttpRequestWorker *worker);
    void getEventsByYearKeysCallback(OAIHttpRequestWorker *worker);
    void getEventsByYearSimpleCallback(OAIHttpRequestWorker *worker);
    void getEventsByYearCallback(OAIHttpRequestWorker *worker);
    void getTeamEventsStatusesByYearCallback(OAIHttpRequestWorker *worker);
    void getTeamsByYearKeysCallback(OAIHttpRequestWorker *worker);
    void getTeamsByYearSimpleCallback(OAIHttpRequestWorker *worker);
    void getTeamsByYearCallback(OAIHttpRequestWorker *worker);
    void getTeamsKeysCallback(OAIHttpRequestWorker *worker);
    void getTeamsSimpleCallback(OAIHttpRequestWorker *worker);
    void getTeamsCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getDistrictEventsKeysSignal(QList<QString> summary);
    void getDistrictEventsSimpleSignal(QList<OAIEvent_Simple> summary);
    void getDistrictEventsSignal(QList<OAIEvent> summary);
    void getDistrictRankingsSignal(QList<OAIDistrict_Ranking> summary);
    void getDistrictTeamsKeysSignal(QList<QString> summary);
    void getDistrictTeamsSimpleSignal(QList<OAITeam_Simple> summary);
    void getDistrictTeamsSignal(QList<OAITeam> summary);
    void getEventTeamsKeysSignal(QList<QString> summary);
    void getEventTeamsSimpleSignal(QList<OAITeam_Simple> summary);
    void getEventTeamsStatusesSignal(QMap<QString, OAITeam_Event_Status> summary);
    void getEventTeamsSignal(QList<OAITeam> summary);
    void getEventsByYearKeysSignal(QList<QString> summary);
    void getEventsByYearSimpleSignal(QList<OAIEvent_Simple> summary);
    void getEventsByYearSignal(QList<OAIEvent> summary);
    void getTeamEventsStatusesByYearSignal(QMap<QString, OAITeam_Event_Status> summary);
    void getTeamsByYearKeysSignal(QList<QString> summary);
    void getTeamsByYearSimpleSignal(QList<OAITeam_Simple> summary);
    void getTeamsByYearSignal(QList<OAITeam> summary);
    void getTeamsKeysSignal(QList<QString> summary);
    void getTeamsSimpleSignal(QList<OAITeam_Simple> summary);
    void getTeamsSignal(QList<OAITeam> summary);


    void getDistrictEventsKeysSignalFull(OAIHttpRequestWorker *worker, QList<QString> summary);
    void getDistrictEventsSimpleSignalFull(OAIHttpRequestWorker *worker, QList<OAIEvent_Simple> summary);
    void getDistrictEventsSignalFull(OAIHttpRequestWorker *worker, QList<OAIEvent> summary);
    void getDistrictRankingsSignalFull(OAIHttpRequestWorker *worker, QList<OAIDistrict_Ranking> summary);
    void getDistrictTeamsKeysSignalFull(OAIHttpRequestWorker *worker, QList<QString> summary);
    void getDistrictTeamsSimpleSignalFull(OAIHttpRequestWorker *worker, QList<OAITeam_Simple> summary);
    void getDistrictTeamsSignalFull(OAIHttpRequestWorker *worker, QList<OAITeam> summary);
    void getEventTeamsKeysSignalFull(OAIHttpRequestWorker *worker, QList<QString> summary);
    void getEventTeamsSimpleSignalFull(OAIHttpRequestWorker *worker, QList<OAITeam_Simple> summary);
    void getEventTeamsStatusesSignalFull(OAIHttpRequestWorker *worker, QMap<QString, OAITeam_Event_Status> summary);
    void getEventTeamsSignalFull(OAIHttpRequestWorker *worker, QList<OAITeam> summary);
    void getEventsByYearKeysSignalFull(OAIHttpRequestWorker *worker, QList<QString> summary);
    void getEventsByYearSimpleSignalFull(OAIHttpRequestWorker *worker, QList<OAIEvent_Simple> summary);
    void getEventsByYearSignalFull(OAIHttpRequestWorker *worker, QList<OAIEvent> summary);
    void getTeamEventsStatusesByYearSignalFull(OAIHttpRequestWorker *worker, QMap<QString, OAITeam_Event_Status> summary);
    void getTeamsByYearKeysSignalFull(OAIHttpRequestWorker *worker, QList<QString> summary);
    void getTeamsByYearSimpleSignalFull(OAIHttpRequestWorker *worker, QList<OAITeam_Simple> summary);
    void getTeamsByYearSignalFull(OAIHttpRequestWorker *worker, QList<OAITeam> summary);
    void getTeamsKeysSignalFull(OAIHttpRequestWorker *worker, QList<QString> summary);
    void getTeamsSimpleSignalFull(OAIHttpRequestWorker *worker, QList<OAITeam_Simple> summary);
    void getTeamsSignalFull(OAIHttpRequestWorker *worker, QList<OAITeam> summary);

    Q_DECL_DEPRECATED_X("Use getDistrictEventsKeysSignalError() instead")
    void getDistrictEventsKeysSignalE(QList<QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDistrictEventsKeysSignalError(QList<QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDistrictEventsSimpleSignalError() instead")
    void getDistrictEventsSimpleSignalE(QList<OAIEvent_Simple> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDistrictEventsSimpleSignalError(QList<OAIEvent_Simple> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDistrictEventsSignalError() instead")
    void getDistrictEventsSignalE(QList<OAIEvent> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDistrictEventsSignalError(QList<OAIEvent> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDistrictRankingsSignalError() instead")
    void getDistrictRankingsSignalE(QList<OAIDistrict_Ranking> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDistrictRankingsSignalError(QList<OAIDistrict_Ranking> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDistrictTeamsKeysSignalError() instead")
    void getDistrictTeamsKeysSignalE(QList<QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDistrictTeamsKeysSignalError(QList<QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDistrictTeamsSimpleSignalError() instead")
    void getDistrictTeamsSimpleSignalE(QList<OAITeam_Simple> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDistrictTeamsSimpleSignalError(QList<OAITeam_Simple> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDistrictTeamsSignalError() instead")
    void getDistrictTeamsSignalE(QList<OAITeam> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDistrictTeamsSignalError(QList<OAITeam> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEventTeamsKeysSignalError() instead")
    void getEventTeamsKeysSignalE(QList<QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getEventTeamsKeysSignalError(QList<QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEventTeamsSimpleSignalError() instead")
    void getEventTeamsSimpleSignalE(QList<OAITeam_Simple> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getEventTeamsSimpleSignalError(QList<OAITeam_Simple> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEventTeamsStatusesSignalError() instead")
    void getEventTeamsStatusesSignalE(QMap<QString, OAITeam_Event_Status> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getEventTeamsStatusesSignalError(QMap<QString, OAITeam_Event_Status> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEventTeamsSignalError() instead")
    void getEventTeamsSignalE(QList<OAITeam> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getEventTeamsSignalError(QList<OAITeam> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEventsByYearKeysSignalError() instead")
    void getEventsByYearKeysSignalE(QList<QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getEventsByYearKeysSignalError(QList<QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEventsByYearSimpleSignalError() instead")
    void getEventsByYearSimpleSignalE(QList<OAIEvent_Simple> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getEventsByYearSimpleSignalError(QList<OAIEvent_Simple> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEventsByYearSignalError() instead")
    void getEventsByYearSignalE(QList<OAIEvent> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getEventsByYearSignalError(QList<OAIEvent> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTeamEventsStatusesByYearSignalError() instead")
    void getTeamEventsStatusesByYearSignalE(QMap<QString, OAITeam_Event_Status> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTeamEventsStatusesByYearSignalError(QMap<QString, OAITeam_Event_Status> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTeamsByYearKeysSignalError() instead")
    void getTeamsByYearKeysSignalE(QList<QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTeamsByYearKeysSignalError(QList<QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTeamsByYearSimpleSignalError() instead")
    void getTeamsByYearSimpleSignalE(QList<OAITeam_Simple> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTeamsByYearSimpleSignalError(QList<OAITeam_Simple> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTeamsByYearSignalError() instead")
    void getTeamsByYearSignalE(QList<OAITeam> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTeamsByYearSignalError(QList<OAITeam> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTeamsKeysSignalError() instead")
    void getTeamsKeysSignalE(QList<QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTeamsKeysSignalError(QList<QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTeamsSimpleSignalError() instead")
    void getTeamsSimpleSignalE(QList<OAITeam_Simple> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTeamsSimpleSignalError(QList<OAITeam_Simple> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTeamsSignalError() instead")
    void getTeamsSignalE(QList<OAITeam> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTeamsSignalError(QList<OAITeam> summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getDistrictEventsKeysSignalErrorFull() instead")
    void getDistrictEventsKeysSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDistrictEventsKeysSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDistrictEventsSimpleSignalErrorFull() instead")
    void getDistrictEventsSimpleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDistrictEventsSimpleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDistrictEventsSignalErrorFull() instead")
    void getDistrictEventsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDistrictEventsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDistrictRankingsSignalErrorFull() instead")
    void getDistrictRankingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDistrictRankingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDistrictTeamsKeysSignalErrorFull() instead")
    void getDistrictTeamsKeysSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDistrictTeamsKeysSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDistrictTeamsSimpleSignalErrorFull() instead")
    void getDistrictTeamsSimpleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDistrictTeamsSimpleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDistrictTeamsSignalErrorFull() instead")
    void getDistrictTeamsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDistrictTeamsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEventTeamsKeysSignalErrorFull() instead")
    void getEventTeamsKeysSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getEventTeamsKeysSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEventTeamsSimpleSignalErrorFull() instead")
    void getEventTeamsSimpleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getEventTeamsSimpleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEventTeamsStatusesSignalErrorFull() instead")
    void getEventTeamsStatusesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getEventTeamsStatusesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEventTeamsSignalErrorFull() instead")
    void getEventTeamsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getEventTeamsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEventsByYearKeysSignalErrorFull() instead")
    void getEventsByYearKeysSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getEventsByYearKeysSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEventsByYearSimpleSignalErrorFull() instead")
    void getEventsByYearSimpleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getEventsByYearSimpleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEventsByYearSignalErrorFull() instead")
    void getEventsByYearSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getEventsByYearSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTeamEventsStatusesByYearSignalErrorFull() instead")
    void getTeamEventsStatusesByYearSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTeamEventsStatusesByYearSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTeamsByYearKeysSignalErrorFull() instead")
    void getTeamsByYearKeysSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTeamsByYearKeysSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTeamsByYearSimpleSignalErrorFull() instead")
    void getTeamsByYearSimpleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTeamsByYearSimpleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTeamsByYearSignalErrorFull() instead")
    void getTeamsByYearSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTeamsByYearSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTeamsKeysSignalErrorFull() instead")
    void getTeamsKeysSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTeamsKeysSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTeamsSimpleSignalErrorFull() instead")
    void getTeamsSimpleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTeamsSimpleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTeamsSignalErrorFull() instead")
    void getTeamsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTeamsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
