/**
 * The Blue Alliance API v3
 * # Overview    Information and statistics about FIRST Robotics Competition teams and events.   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).
 *
 * The version of the OpenAPI document: 3.8.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIMatch_Score_Breakdown_2015_Alliance.h
 *
 * 
 */

#ifndef OAIMatch_Score_Breakdown_2015_Alliance_H
#define OAIMatch_Score_Breakdown_2015_Alliance_H

#include <QJsonObject>


#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIMatch_Score_Breakdown_2015_Alliance : public OAIObject {
public:
    OAIMatch_Score_Breakdown_2015_Alliance();
    OAIMatch_Score_Breakdown_2015_Alliance(QString json);
    ~OAIMatch_Score_Breakdown_2015_Alliance() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getAdjustPoints() const;
    void setAdjustPoints(const qint32 &adjust_points);
    bool is_adjust_points_Set() const;
    bool is_adjust_points_Valid() const;

    qint32 getAutoPoints() const;
    void setAutoPoints(const qint32 &auto_points);
    bool is_auto_points_Set() const;
    bool is_auto_points_Valid() const;

    qint32 getContainerCountLevel1() const;
    void setContainerCountLevel1(const qint32 &container_count_level1);
    bool is_container_count_level1_Set() const;
    bool is_container_count_level1_Valid() const;

    qint32 getContainerCountLevel2() const;
    void setContainerCountLevel2(const qint32 &container_count_level2);
    bool is_container_count_level2_Set() const;
    bool is_container_count_level2_Valid() const;

    qint32 getContainerCountLevel3() const;
    void setContainerCountLevel3(const qint32 &container_count_level3);
    bool is_container_count_level3_Set() const;
    bool is_container_count_level3_Valid() const;

    qint32 getContainerCountLevel4() const;
    void setContainerCountLevel4(const qint32 &container_count_level4);
    bool is_container_count_level4_Set() const;
    bool is_container_count_level4_Valid() const;

    qint32 getContainerCountLevel5() const;
    void setContainerCountLevel5(const qint32 &container_count_level5);
    bool is_container_count_level5_Set() const;
    bool is_container_count_level5_Valid() const;

    qint32 getContainerCountLevel6() const;
    void setContainerCountLevel6(const qint32 &container_count_level6);
    bool is_container_count_level6_Set() const;
    bool is_container_count_level6_Valid() const;

    qint32 getContainerPoints() const;
    void setContainerPoints(const qint32 &container_points);
    bool is_container_points_Set() const;
    bool is_container_points_Valid() const;

    bool isContainerSet() const;
    void setContainerSet(const bool &container_set);
    bool is_container_set_Set() const;
    bool is_container_set_Valid() const;

    qint32 getFoulCount() const;
    void setFoulCount(const qint32 &foul_count);
    bool is_foul_count_Set() const;
    bool is_foul_count_Valid() const;

    qint32 getFoulPoints() const;
    void setFoulPoints(const qint32 &foul_points);
    bool is_foul_points_Set() const;
    bool is_foul_points_Valid() const;

    qint32 getLitterCountContainer() const;
    void setLitterCountContainer(const qint32 &litter_count_container);
    bool is_litter_count_container_Set() const;
    bool is_litter_count_container_Valid() const;

    qint32 getLitterCountLandfill() const;
    void setLitterCountLandfill(const qint32 &litter_count_landfill);
    bool is_litter_count_landfill_Set() const;
    bool is_litter_count_landfill_Valid() const;

    qint32 getLitterCountUnprocessed() const;
    void setLitterCountUnprocessed(const qint32 &litter_count_unprocessed);
    bool is_litter_count_unprocessed_Set() const;
    bool is_litter_count_unprocessed_Valid() const;

    qint32 getLitterPoints() const;
    void setLitterPoints(const qint32 &litter_points);
    bool is_litter_points_Set() const;
    bool is_litter_points_Valid() const;

    bool isRobotSet() const;
    void setRobotSet(const bool &robot_set);
    bool is_robot_set_Set() const;
    bool is_robot_set_Valid() const;

    qint32 getTeleopPoints() const;
    void setTeleopPoints(const qint32 &teleop_points);
    bool is_teleop_points_Set() const;
    bool is_teleop_points_Valid() const;

    qint32 getTotalPoints() const;
    void setTotalPoints(const qint32 &total_points);
    bool is_total_points_Set() const;
    bool is_total_points_Valid() const;

    qint32 getToteCountFar() const;
    void setToteCountFar(const qint32 &tote_count_far);
    bool is_tote_count_far_Set() const;
    bool is_tote_count_far_Valid() const;

    qint32 getToteCountNear() const;
    void setToteCountNear(const qint32 &tote_count_near);
    bool is_tote_count_near_Set() const;
    bool is_tote_count_near_Valid() const;

    qint32 getTotePoints() const;
    void setTotePoints(const qint32 &tote_points);
    bool is_tote_points_Set() const;
    bool is_tote_points_Valid() const;

    bool isToteSet() const;
    void setToteSet(const bool &tote_set);
    bool is_tote_set_Set() const;
    bool is_tote_set_Valid() const;

    bool isToteStack() const;
    void setToteStack(const bool &tote_stack);
    bool is_tote_stack_Set() const;
    bool is_tote_stack_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_adjust_points;
    bool m_adjust_points_isSet;
    bool m_adjust_points_isValid;

    qint32 m_auto_points;
    bool m_auto_points_isSet;
    bool m_auto_points_isValid;

    qint32 m_container_count_level1;
    bool m_container_count_level1_isSet;
    bool m_container_count_level1_isValid;

    qint32 m_container_count_level2;
    bool m_container_count_level2_isSet;
    bool m_container_count_level2_isValid;

    qint32 m_container_count_level3;
    bool m_container_count_level3_isSet;
    bool m_container_count_level3_isValid;

    qint32 m_container_count_level4;
    bool m_container_count_level4_isSet;
    bool m_container_count_level4_isValid;

    qint32 m_container_count_level5;
    bool m_container_count_level5_isSet;
    bool m_container_count_level5_isValid;

    qint32 m_container_count_level6;
    bool m_container_count_level6_isSet;
    bool m_container_count_level6_isValid;

    qint32 m_container_points;
    bool m_container_points_isSet;
    bool m_container_points_isValid;

    bool m_container_set;
    bool m_container_set_isSet;
    bool m_container_set_isValid;

    qint32 m_foul_count;
    bool m_foul_count_isSet;
    bool m_foul_count_isValid;

    qint32 m_foul_points;
    bool m_foul_points_isSet;
    bool m_foul_points_isValid;

    qint32 m_litter_count_container;
    bool m_litter_count_container_isSet;
    bool m_litter_count_container_isValid;

    qint32 m_litter_count_landfill;
    bool m_litter_count_landfill_isSet;
    bool m_litter_count_landfill_isValid;

    qint32 m_litter_count_unprocessed;
    bool m_litter_count_unprocessed_isSet;
    bool m_litter_count_unprocessed_isValid;

    qint32 m_litter_points;
    bool m_litter_points_isSet;
    bool m_litter_points_isValid;

    bool m_robot_set;
    bool m_robot_set_isSet;
    bool m_robot_set_isValid;

    qint32 m_teleop_points;
    bool m_teleop_points_isSet;
    bool m_teleop_points_isValid;

    qint32 m_total_points;
    bool m_total_points_isSet;
    bool m_total_points_isValid;

    qint32 m_tote_count_far;
    bool m_tote_count_far_isSet;
    bool m_tote_count_far_isValid;

    qint32 m_tote_count_near;
    bool m_tote_count_near_isSet;
    bool m_tote_count_near_isValid;

    qint32 m_tote_points;
    bool m_tote_points_isSet;
    bool m_tote_points_isValid;

    bool m_tote_set;
    bool m_tote_set_isSet;
    bool m_tote_set_isValid;

    bool m_tote_stack;
    bool m_tote_stack_isSet;
    bool m_tote_stack_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIMatch_Score_Breakdown_2015_Alliance)

#endif // OAIMatch_Score_Breakdown_2015_Alliance_H
