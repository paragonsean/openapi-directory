/**
 * The Blue Alliance API v3
 * # Overview    Information and statistics about FIRST Robotics Competition teams and events.   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).
 *
 * The version of the OpenAPI document: 3.8.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIMatchApi_H
#define OAI_OAIMatchApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIMatch.h"
#include "OAIMatch_Simple.h"
#include "OAIObject.h"
#include "OAIZebra.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIMatchApi : public QObject {
    Q_OBJECT

public:
    OAIMatchApi(const int timeOut = 0);
    ~OAIMatchApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  event_key QString [required]
    * @param[in]  if_none_match QString [optional]
    */
    virtual void getEventMatchTimeseries(const QString &event_key, const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  event_key QString [required]
    * @param[in]  if_none_match QString [optional]
    */
    virtual void getEventMatchesKeys(const QString &event_key, const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  event_key QString [required]
    * @param[in]  if_none_match QString [optional]
    */
    virtual void getEventMatchesSimple(const QString &event_key, const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  event_key QString [required]
    * @param[in]  if_none_match QString [optional]
    */
    virtual void getEventMatches(const QString &event_key, const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  match_key QString [required]
    * @param[in]  if_none_match QString [optional]
    */
    virtual void getMatch(const QString &match_key, const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  match_key QString [required]
    * @param[in]  if_none_match QString [optional]
    */
    virtual void getMatchSimple(const QString &match_key, const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  match_key QString [required]
    * @param[in]  if_none_match QString [optional]
    */
    virtual void getMatchTimeseries(const QString &match_key, const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  match_key QString [required]
    * @param[in]  if_none_match QString [optional]
    */
    virtual void getMatchZebra(const QString &match_key, const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  team_key QString [required]
    * @param[in]  event_key QString [required]
    * @param[in]  if_none_match QString [optional]
    */
    virtual void getTeamEventMatchesKeys(const QString &team_key, const QString &event_key, const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  team_key QString [required]
    * @param[in]  event_key QString [required]
    * @param[in]  if_none_match QString [optional]
    */
    virtual void getTeamEventMatchesSimple(const QString &team_key, const QString &event_key, const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  team_key QString [required]
    * @param[in]  event_key QString [required]
    * @param[in]  if_none_match QString [optional]
    */
    virtual void getTeamEventMatches(const QString &team_key, const QString &event_key, const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  team_key QString [required]
    * @param[in]  year qint32 [required]
    * @param[in]  if_none_match QString [optional]
    */
    virtual void getTeamMatchesByYearKeys(const QString &team_key, const qint32 &year, const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  team_key QString [required]
    * @param[in]  year qint32 [required]
    * @param[in]  if_none_match QString [optional]
    */
    virtual void getTeamMatchesByYearSimple(const QString &team_key, const qint32 &year, const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  team_key QString [required]
    * @param[in]  year qint32 [required]
    * @param[in]  if_none_match QString [optional]
    */
    virtual void getTeamMatchesByYear(const QString &team_key, const qint32 &year, const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getEventMatchTimeseriesCallback(OAIHttpRequestWorker *worker);
    void getEventMatchesKeysCallback(OAIHttpRequestWorker *worker);
    void getEventMatchesSimpleCallback(OAIHttpRequestWorker *worker);
    void getEventMatchesCallback(OAIHttpRequestWorker *worker);
    void getMatchCallback(OAIHttpRequestWorker *worker);
    void getMatchSimpleCallback(OAIHttpRequestWorker *worker);
    void getMatchTimeseriesCallback(OAIHttpRequestWorker *worker);
    void getMatchZebraCallback(OAIHttpRequestWorker *worker);
    void getTeamEventMatchesKeysCallback(OAIHttpRequestWorker *worker);
    void getTeamEventMatchesSimpleCallback(OAIHttpRequestWorker *worker);
    void getTeamEventMatchesCallback(OAIHttpRequestWorker *worker);
    void getTeamMatchesByYearKeysCallback(OAIHttpRequestWorker *worker);
    void getTeamMatchesByYearSimpleCallback(OAIHttpRequestWorker *worker);
    void getTeamMatchesByYearCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getEventMatchTimeseriesSignal(QList<QString> summary);
    void getEventMatchesKeysSignal(QList<QString> summary);
    void getEventMatchesSimpleSignal(QList<OAIMatch_Simple> summary);
    void getEventMatchesSignal(QList<OAIMatch> summary);
    void getMatchSignal(OAIMatch summary);
    void getMatchSimpleSignal(OAIMatch_Simple summary);
    void getMatchTimeseriesSignal(QList<OAIObject> summary);
    void getMatchZebraSignal(OAIZebra summary);
    void getTeamEventMatchesKeysSignal(QList<QString> summary);
    void getTeamEventMatchesSimpleSignal(QList<OAIMatch> summary);
    void getTeamEventMatchesSignal(QList<OAIMatch> summary);
    void getTeamMatchesByYearKeysSignal(QList<QString> summary);
    void getTeamMatchesByYearSimpleSignal(QList<OAIMatch_Simple> summary);
    void getTeamMatchesByYearSignal(QList<OAIMatch> summary);


    void getEventMatchTimeseriesSignalFull(OAIHttpRequestWorker *worker, QList<QString> summary);
    void getEventMatchesKeysSignalFull(OAIHttpRequestWorker *worker, QList<QString> summary);
    void getEventMatchesSimpleSignalFull(OAIHttpRequestWorker *worker, QList<OAIMatch_Simple> summary);
    void getEventMatchesSignalFull(OAIHttpRequestWorker *worker, QList<OAIMatch> summary);
    void getMatchSignalFull(OAIHttpRequestWorker *worker, OAIMatch summary);
    void getMatchSimpleSignalFull(OAIHttpRequestWorker *worker, OAIMatch_Simple summary);
    void getMatchTimeseriesSignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void getMatchZebraSignalFull(OAIHttpRequestWorker *worker, OAIZebra summary);
    void getTeamEventMatchesKeysSignalFull(OAIHttpRequestWorker *worker, QList<QString> summary);
    void getTeamEventMatchesSimpleSignalFull(OAIHttpRequestWorker *worker, QList<OAIMatch> summary);
    void getTeamEventMatchesSignalFull(OAIHttpRequestWorker *worker, QList<OAIMatch> summary);
    void getTeamMatchesByYearKeysSignalFull(OAIHttpRequestWorker *worker, QList<QString> summary);
    void getTeamMatchesByYearSimpleSignalFull(OAIHttpRequestWorker *worker, QList<OAIMatch_Simple> summary);
    void getTeamMatchesByYearSignalFull(OAIHttpRequestWorker *worker, QList<OAIMatch> summary);

    Q_DECL_DEPRECATED_X("Use getEventMatchTimeseriesSignalError() instead")
    void getEventMatchTimeseriesSignalE(QList<QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getEventMatchTimeseriesSignalError(QList<QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEventMatchesKeysSignalError() instead")
    void getEventMatchesKeysSignalE(QList<QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getEventMatchesKeysSignalError(QList<QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEventMatchesSimpleSignalError() instead")
    void getEventMatchesSimpleSignalE(QList<OAIMatch_Simple> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getEventMatchesSimpleSignalError(QList<OAIMatch_Simple> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEventMatchesSignalError() instead")
    void getEventMatchesSignalE(QList<OAIMatch> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getEventMatchesSignalError(QList<OAIMatch> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMatchSignalError() instead")
    void getMatchSignalE(OAIMatch summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getMatchSignalError(OAIMatch summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMatchSimpleSignalError() instead")
    void getMatchSimpleSignalE(OAIMatch_Simple summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getMatchSimpleSignalError(OAIMatch_Simple summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMatchTimeseriesSignalError() instead")
    void getMatchTimeseriesSignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getMatchTimeseriesSignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMatchZebraSignalError() instead")
    void getMatchZebraSignalE(OAIZebra summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getMatchZebraSignalError(OAIZebra summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTeamEventMatchesKeysSignalError() instead")
    void getTeamEventMatchesKeysSignalE(QList<QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTeamEventMatchesKeysSignalError(QList<QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTeamEventMatchesSimpleSignalError() instead")
    void getTeamEventMatchesSimpleSignalE(QList<OAIMatch> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTeamEventMatchesSimpleSignalError(QList<OAIMatch> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTeamEventMatchesSignalError() instead")
    void getTeamEventMatchesSignalE(QList<OAIMatch> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTeamEventMatchesSignalError(QList<OAIMatch> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTeamMatchesByYearKeysSignalError() instead")
    void getTeamMatchesByYearKeysSignalE(QList<QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTeamMatchesByYearKeysSignalError(QList<QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTeamMatchesByYearSimpleSignalError() instead")
    void getTeamMatchesByYearSimpleSignalE(QList<OAIMatch_Simple> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTeamMatchesByYearSimpleSignalError(QList<OAIMatch_Simple> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTeamMatchesByYearSignalError() instead")
    void getTeamMatchesByYearSignalE(QList<OAIMatch> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTeamMatchesByYearSignalError(QList<OAIMatch> summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getEventMatchTimeseriesSignalErrorFull() instead")
    void getEventMatchTimeseriesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getEventMatchTimeseriesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEventMatchesKeysSignalErrorFull() instead")
    void getEventMatchesKeysSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getEventMatchesKeysSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEventMatchesSimpleSignalErrorFull() instead")
    void getEventMatchesSimpleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getEventMatchesSimpleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEventMatchesSignalErrorFull() instead")
    void getEventMatchesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getEventMatchesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMatchSignalErrorFull() instead")
    void getMatchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getMatchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMatchSimpleSignalErrorFull() instead")
    void getMatchSimpleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getMatchSimpleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMatchTimeseriesSignalErrorFull() instead")
    void getMatchTimeseriesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getMatchTimeseriesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMatchZebraSignalErrorFull() instead")
    void getMatchZebraSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getMatchZebraSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTeamEventMatchesKeysSignalErrorFull() instead")
    void getTeamEventMatchesKeysSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTeamEventMatchesKeysSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTeamEventMatchesSimpleSignalErrorFull() instead")
    void getTeamEventMatchesSimpleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTeamEventMatchesSimpleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTeamEventMatchesSignalErrorFull() instead")
    void getTeamEventMatchesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTeamEventMatchesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTeamMatchesByYearKeysSignalErrorFull() instead")
    void getTeamMatchesByYearKeysSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTeamMatchesByYearKeysSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTeamMatchesByYearSimpleSignalErrorFull() instead")
    void getTeamMatchesByYearSimpleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTeamMatchesByYearSimpleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTeamMatchesByYearSignalErrorFull() instead")
    void getTeamMatchesByYearSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTeamMatchesByYearSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
