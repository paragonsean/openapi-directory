/**
 * The Blue Alliance API v3
 * # Overview    Information and statistics about FIRST Robotics Competition teams and events.   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).
 *
 * The version of the OpenAPI document: 3.8.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEvent_District_Points_tiebreakers_value.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEvent_District_Points_tiebreakers_value::OAIEvent_District_Points_tiebreakers_value(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEvent_District_Points_tiebreakers_value::OAIEvent_District_Points_tiebreakers_value() {
    this->initializeModel();
}

OAIEvent_District_Points_tiebreakers_value::~OAIEvent_District_Points_tiebreakers_value() {}

void OAIEvent_District_Points_tiebreakers_value::initializeModel() {

    m_highest_qual_scores_isSet = false;
    m_highest_qual_scores_isValid = false;

    m_qual_wins_isSet = false;
    m_qual_wins_isValid = false;
}

void OAIEvent_District_Points_tiebreakers_value::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEvent_District_Points_tiebreakers_value::fromJsonObject(QJsonObject json) {

    m_highest_qual_scores_isValid = ::OpenAPI::fromJsonValue(m_highest_qual_scores, json[QString("highest_qual_scores")]);
    m_highest_qual_scores_isSet = !json[QString("highest_qual_scores")].isNull() && m_highest_qual_scores_isValid;

    m_qual_wins_isValid = ::OpenAPI::fromJsonValue(m_qual_wins, json[QString("qual_wins")]);
    m_qual_wins_isSet = !json[QString("qual_wins")].isNull() && m_qual_wins_isValid;
}

QString OAIEvent_District_Points_tiebreakers_value::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEvent_District_Points_tiebreakers_value::asJsonObject() const {
    QJsonObject obj;
    if (m_highest_qual_scores.size() > 0) {
        obj.insert(QString("highest_qual_scores"), ::OpenAPI::toJsonValue(m_highest_qual_scores));
    }
    if (m_qual_wins_isSet) {
        obj.insert(QString("qual_wins"), ::OpenAPI::toJsonValue(m_qual_wins));
    }
    return obj;
}

QList<qint32> OAIEvent_District_Points_tiebreakers_value::getHighestQualScores() const {
    return m_highest_qual_scores;
}
void OAIEvent_District_Points_tiebreakers_value::setHighestQualScores(const QList<qint32> &highest_qual_scores) {
    m_highest_qual_scores = highest_qual_scores;
    m_highest_qual_scores_isSet = true;
}

bool OAIEvent_District_Points_tiebreakers_value::is_highest_qual_scores_Set() const{
    return m_highest_qual_scores_isSet;
}

bool OAIEvent_District_Points_tiebreakers_value::is_highest_qual_scores_Valid() const{
    return m_highest_qual_scores_isValid;
}

qint32 OAIEvent_District_Points_tiebreakers_value::getQualWins() const {
    return m_qual_wins;
}
void OAIEvent_District_Points_tiebreakers_value::setQualWins(const qint32 &qual_wins) {
    m_qual_wins = qual_wins;
    m_qual_wins_isSet = true;
}

bool OAIEvent_District_Points_tiebreakers_value::is_qual_wins_Set() const{
    return m_qual_wins_isSet;
}

bool OAIEvent_District_Points_tiebreakers_value::is_qual_wins_Valid() const{
    return m_qual_wins_isValid;
}

bool OAIEvent_District_Points_tiebreakers_value::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_highest_qual_scores.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_qual_wins_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEvent_District_Points_tiebreakers_value::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
