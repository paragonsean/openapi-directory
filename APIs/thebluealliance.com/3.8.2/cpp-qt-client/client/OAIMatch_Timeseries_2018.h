/**
 * The Blue Alliance API v3
 * # Overview    Information and statistics about FIRST Robotics Competition teams and events.   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).
 *
 * The version of the OpenAPI document: 3.8.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIMatch_Timeseries_2018.h
 *
 * Timeseries data for the 2018 game *FIRST* POWER UP. *WARNING:* This is *not* official data, and is subject to a significant possibility of error, or missing data. Do not rely on this data for any purpose. In fact, pretend we made it up. *WARNING:* This model is currently under active development and may change at any time, including in breaking ways.
 */

#ifndef OAIMatch_Timeseries_2018_H
#define OAIMatch_Timeseries_2018_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIMatch_Timeseries_2018 : public OAIObject {
public:
    OAIMatch_Timeseries_2018();
    OAIMatch_Timeseries_2018(QString json);
    ~OAIMatch_Timeseries_2018() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getBlueAutoQuest() const;
    void setBlueAutoQuest(const qint32 &blue_auto_quest);
    bool is_blue_auto_quest_Set() const;
    bool is_blue_auto_quest_Valid() const;

    qint32 getBlueBoostCount() const;
    void setBlueBoostCount(const qint32 &blue_boost_count);
    bool is_blue_boost_count_Set() const;
    bool is_blue_boost_count_Valid() const;

    qint32 getBlueBoostPlayed() const;
    void setBlueBoostPlayed(const qint32 &blue_boost_played);
    bool is_blue_boost_played_Set() const;
    bool is_blue_boost_played_Valid() const;

    QString getBlueCurrentPowerup() const;
    void setBlueCurrentPowerup(const QString &blue_current_powerup);
    bool is_blue_current_powerup_Set() const;
    bool is_blue_current_powerup_Valid() const;

    qint32 getBlueFaceTheBoss() const;
    void setBlueFaceTheBoss(const qint32 &blue_face_the_boss);
    bool is_blue_face_the_boss_Set() const;
    bool is_blue_face_the_boss_Valid() const;

    qint32 getBlueForceCount() const;
    void setBlueForceCount(const qint32 &blue_force_count);
    bool is_blue_force_count_Set() const;
    bool is_blue_force_count_Valid() const;

    qint32 getBlueForcePlayed() const;
    void setBlueForcePlayed(const qint32 &blue_force_played);
    bool is_blue_force_played_Set() const;
    bool is_blue_force_played_Valid() const;

    qint32 getBlueLevitateCount() const;
    void setBlueLevitateCount(const qint32 &blue_levitate_count);
    bool is_blue_levitate_count_Set() const;
    bool is_blue_levitate_count_Valid() const;

    qint32 getBlueLevitatePlayed() const;
    void setBlueLevitatePlayed(const qint32 &blue_levitate_played);
    bool is_blue_levitate_played_Set() const;
    bool is_blue_levitate_played_Valid() const;

    QString getBluePowerupTimeRemaining() const;
    void setBluePowerupTimeRemaining(const QString &blue_powerup_time_remaining);
    bool is_blue_powerup_time_remaining_Set() const;
    bool is_blue_powerup_time_remaining_Valid() const;

    qint32 getBlueScaleOwned() const;
    void setBlueScaleOwned(const qint32 &blue_scale_owned);
    bool is_blue_scale_owned_Set() const;
    bool is_blue_scale_owned_Valid() const;

    qint32 getBlueScore() const;
    void setBlueScore(const qint32 &blue_score);
    bool is_blue_score_Set() const;
    bool is_blue_score_Valid() const;

    qint32 getBlueSwitchOwned() const;
    void setBlueSwitchOwned(const qint32 &blue_switch_owned);
    bool is_blue_switch_owned_Set() const;
    bool is_blue_switch_owned_Valid() const;

    QString getEventKey() const;
    void setEventKey(const QString &event_key);
    bool is_event_key_Set() const;
    bool is_event_key_Valid() const;

    QString getMatchId() const;
    void setMatchId(const QString &match_id);
    bool is_match_id_Set() const;
    bool is_match_id_Valid() const;

    QString getMode() const;
    void setMode(const QString &mode);
    bool is_mode_Set() const;
    bool is_mode_Valid() const;

    qint32 getPlay() const;
    void setPlay(const qint32 &play);
    bool is_play_Set() const;
    bool is_play_Valid() const;

    qint32 getRedAutoQuest() const;
    void setRedAutoQuest(const qint32 &red_auto_quest);
    bool is_red_auto_quest_Set() const;
    bool is_red_auto_quest_Valid() const;

    qint32 getRedBoostCount() const;
    void setRedBoostCount(const qint32 &red_boost_count);
    bool is_red_boost_count_Set() const;
    bool is_red_boost_count_Valid() const;

    qint32 getRedBoostPlayed() const;
    void setRedBoostPlayed(const qint32 &red_boost_played);
    bool is_red_boost_played_Set() const;
    bool is_red_boost_played_Valid() const;

    QString getRedCurrentPowerup() const;
    void setRedCurrentPowerup(const QString &red_current_powerup);
    bool is_red_current_powerup_Set() const;
    bool is_red_current_powerup_Valid() const;

    qint32 getRedFaceTheBoss() const;
    void setRedFaceTheBoss(const qint32 &red_face_the_boss);
    bool is_red_face_the_boss_Set() const;
    bool is_red_face_the_boss_Valid() const;

    qint32 getRedForceCount() const;
    void setRedForceCount(const qint32 &red_force_count);
    bool is_red_force_count_Set() const;
    bool is_red_force_count_Valid() const;

    qint32 getRedForcePlayed() const;
    void setRedForcePlayed(const qint32 &red_force_played);
    bool is_red_force_played_Set() const;
    bool is_red_force_played_Valid() const;

    qint32 getRedLevitateCount() const;
    void setRedLevitateCount(const qint32 &red_levitate_count);
    bool is_red_levitate_count_Set() const;
    bool is_red_levitate_count_Valid() const;

    qint32 getRedLevitatePlayed() const;
    void setRedLevitatePlayed(const qint32 &red_levitate_played);
    bool is_red_levitate_played_Set() const;
    bool is_red_levitate_played_Valid() const;

    QString getRedPowerupTimeRemaining() const;
    void setRedPowerupTimeRemaining(const QString &red_powerup_time_remaining);
    bool is_red_powerup_time_remaining_Set() const;
    bool is_red_powerup_time_remaining_Valid() const;

    qint32 getRedScaleOwned() const;
    void setRedScaleOwned(const qint32 &red_scale_owned);
    bool is_red_scale_owned_Set() const;
    bool is_red_scale_owned_Valid() const;

    qint32 getRedScore() const;
    void setRedScore(const qint32 &red_score);
    bool is_red_score_Set() const;
    bool is_red_score_Valid() const;

    qint32 getRedSwitchOwned() const;
    void setRedSwitchOwned(const qint32 &red_switch_owned);
    bool is_red_switch_owned_Set() const;
    bool is_red_switch_owned_Valid() const;

    qint32 getTimeRemaining() const;
    void setTimeRemaining(const qint32 &time_remaining);
    bool is_time_remaining_Set() const;
    bool is_time_remaining_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_blue_auto_quest;
    bool m_blue_auto_quest_isSet;
    bool m_blue_auto_quest_isValid;

    qint32 m_blue_boost_count;
    bool m_blue_boost_count_isSet;
    bool m_blue_boost_count_isValid;

    qint32 m_blue_boost_played;
    bool m_blue_boost_played_isSet;
    bool m_blue_boost_played_isValid;

    QString m_blue_current_powerup;
    bool m_blue_current_powerup_isSet;
    bool m_blue_current_powerup_isValid;

    qint32 m_blue_face_the_boss;
    bool m_blue_face_the_boss_isSet;
    bool m_blue_face_the_boss_isValid;

    qint32 m_blue_force_count;
    bool m_blue_force_count_isSet;
    bool m_blue_force_count_isValid;

    qint32 m_blue_force_played;
    bool m_blue_force_played_isSet;
    bool m_blue_force_played_isValid;

    qint32 m_blue_levitate_count;
    bool m_blue_levitate_count_isSet;
    bool m_blue_levitate_count_isValid;

    qint32 m_blue_levitate_played;
    bool m_blue_levitate_played_isSet;
    bool m_blue_levitate_played_isValid;

    QString m_blue_powerup_time_remaining;
    bool m_blue_powerup_time_remaining_isSet;
    bool m_blue_powerup_time_remaining_isValid;

    qint32 m_blue_scale_owned;
    bool m_blue_scale_owned_isSet;
    bool m_blue_scale_owned_isValid;

    qint32 m_blue_score;
    bool m_blue_score_isSet;
    bool m_blue_score_isValid;

    qint32 m_blue_switch_owned;
    bool m_blue_switch_owned_isSet;
    bool m_blue_switch_owned_isValid;

    QString m_event_key;
    bool m_event_key_isSet;
    bool m_event_key_isValid;

    QString m_match_id;
    bool m_match_id_isSet;
    bool m_match_id_isValid;

    QString m_mode;
    bool m_mode_isSet;
    bool m_mode_isValid;

    qint32 m_play;
    bool m_play_isSet;
    bool m_play_isValid;

    qint32 m_red_auto_quest;
    bool m_red_auto_quest_isSet;
    bool m_red_auto_quest_isValid;

    qint32 m_red_boost_count;
    bool m_red_boost_count_isSet;
    bool m_red_boost_count_isValid;

    qint32 m_red_boost_played;
    bool m_red_boost_played_isSet;
    bool m_red_boost_played_isValid;

    QString m_red_current_powerup;
    bool m_red_current_powerup_isSet;
    bool m_red_current_powerup_isValid;

    qint32 m_red_face_the_boss;
    bool m_red_face_the_boss_isSet;
    bool m_red_face_the_boss_isValid;

    qint32 m_red_force_count;
    bool m_red_force_count_isSet;
    bool m_red_force_count_isValid;

    qint32 m_red_force_played;
    bool m_red_force_played_isSet;
    bool m_red_force_played_isValid;

    qint32 m_red_levitate_count;
    bool m_red_levitate_count_isSet;
    bool m_red_levitate_count_isValid;

    qint32 m_red_levitate_played;
    bool m_red_levitate_played_isSet;
    bool m_red_levitate_played_isValid;

    QString m_red_powerup_time_remaining;
    bool m_red_powerup_time_remaining_isSet;
    bool m_red_powerup_time_remaining_isValid;

    qint32 m_red_scale_owned;
    bool m_red_scale_owned_isSet;
    bool m_red_scale_owned_isValid;

    qint32 m_red_score;
    bool m_red_score_isSet;
    bool m_red_score_isValid;

    qint32 m_red_switch_owned;
    bool m_red_switch_owned_isSet;
    bool m_red_switch_owned_isValid;

    qint32 m_time_remaining;
    bool m_time_remaining_isSet;
    bool m_time_remaining_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIMatch_Timeseries_2018)

#endif // OAIMatch_Timeseries_2018_H
