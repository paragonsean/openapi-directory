/**
 * The Blue Alliance API v3
 * # Overview    Information and statistics about FIRST Robotics Competition teams and events.   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).
 *
 * The version of the OpenAPI document: 3.8.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMatch_Score_Breakdown_2023_Alliance_links_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMatch_Score_Breakdown_2023_Alliance_links_inner::OAIMatch_Score_Breakdown_2023_Alliance_links_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMatch_Score_Breakdown_2023_Alliance_links_inner::OAIMatch_Score_Breakdown_2023_Alliance_links_inner() {
    this->initializeModel();
}

OAIMatch_Score_Breakdown_2023_Alliance_links_inner::~OAIMatch_Score_Breakdown_2023_Alliance_links_inner() {}

void OAIMatch_Score_Breakdown_2023_Alliance_links_inner::initializeModel() {

    m_nodes_isSet = false;
    m_nodes_isValid = false;

    m_row_isSet = false;
    m_row_isValid = false;
}

void OAIMatch_Score_Breakdown_2023_Alliance_links_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMatch_Score_Breakdown_2023_Alliance_links_inner::fromJsonObject(QJsonObject json) {

    m_nodes_isValid = ::OpenAPI::fromJsonValue(m_nodes, json[QString("nodes")]);
    m_nodes_isSet = !json[QString("nodes")].isNull() && m_nodes_isValid;

    m_row_isValid = ::OpenAPI::fromJsonValue(m_row, json[QString("row")]);
    m_row_isSet = !json[QString("row")].isNull() && m_row_isValid;
}

QString OAIMatch_Score_Breakdown_2023_Alliance_links_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMatch_Score_Breakdown_2023_Alliance_links_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_nodes.size() > 0) {
        obj.insert(QString("nodes"), ::OpenAPI::toJsonValue(m_nodes));
    }
    if (m_row_isSet) {
        obj.insert(QString("row"), ::OpenAPI::toJsonValue(m_row));
    }
    return obj;
}

QList<QString> OAIMatch_Score_Breakdown_2023_Alliance_links_inner::getNodes() const {
    return m_nodes;
}
void OAIMatch_Score_Breakdown_2023_Alliance_links_inner::setNodes(const QList<QString> &nodes) {
    m_nodes = nodes;
    m_nodes_isSet = true;
}

bool OAIMatch_Score_Breakdown_2023_Alliance_links_inner::is_nodes_Set() const{
    return m_nodes_isSet;
}

bool OAIMatch_Score_Breakdown_2023_Alliance_links_inner::is_nodes_Valid() const{
    return m_nodes_isValid;
}

QString OAIMatch_Score_Breakdown_2023_Alliance_links_inner::getRow() const {
    return m_row;
}
void OAIMatch_Score_Breakdown_2023_Alliance_links_inner::setRow(const QString &row) {
    m_row = row;
    m_row_isSet = true;
}

bool OAIMatch_Score_Breakdown_2023_Alliance_links_inner::is_row_Set() const{
    return m_row_isSet;
}

bool OAIMatch_Score_Breakdown_2023_Alliance_links_inner::is_row_Valid() const{
    return m_row_isValid;
}

bool OAIMatch_Score_Breakdown_2023_Alliance_links_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_nodes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_row_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMatch_Score_Breakdown_2023_Alliance_links_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
