/**
 * The Blue Alliance API v3
 * # Overview    Information and statistics about FIRST Robotics Competition teams and events.   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).
 *
 * The version of the OpenAPI document: 3.8.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMatch_Score_Breakdown_2016_Alliance.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMatch_Score_Breakdown_2016_Alliance::OAIMatch_Score_Breakdown_2016_Alliance(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMatch_Score_Breakdown_2016_Alliance::OAIMatch_Score_Breakdown_2016_Alliance() {
    this->initializeModel();
}

OAIMatch_Score_Breakdown_2016_Alliance::~OAIMatch_Score_Breakdown_2016_Alliance() {}

void OAIMatch_Score_Breakdown_2016_Alliance::initializeModel() {

    m_adjust_points_isSet = false;
    m_adjust_points_isValid = false;

    m_auto_boulder_points_isSet = false;
    m_auto_boulder_points_isValid = false;

    m_auto_boulders_high_isSet = false;
    m_auto_boulders_high_isValid = false;

    m_auto_boulders_low_isSet = false;
    m_auto_boulders_low_isValid = false;

    m_auto_crossing_points_isSet = false;
    m_auto_crossing_points_isValid = false;

    m_auto_points_isSet = false;
    m_auto_points_isValid = false;

    m_auto_reach_points_isSet = false;
    m_auto_reach_points_isValid = false;

    m_breach_points_isSet = false;
    m_breach_points_isValid = false;

    m_capture_points_isSet = false;
    m_capture_points_isValid = false;

    m_foul_count_isSet = false;
    m_foul_count_isValid = false;

    m_foul_points_isSet = false;
    m_foul_points_isValid = false;

    m_position1crossings_isSet = false;
    m_position1crossings_isValid = false;

    m_position2_isSet = false;
    m_position2_isValid = false;

    m_position2crossings_isSet = false;
    m_position2crossings_isValid = false;

    m_position3_isSet = false;
    m_position3_isValid = false;

    m_position3crossings_isSet = false;
    m_position3crossings_isValid = false;

    m_position4_isSet = false;
    m_position4_isValid = false;

    m_position4crossings_isSet = false;
    m_position4crossings_isValid = false;

    m_position5_isSet = false;
    m_position5_isValid = false;

    m_position5crossings_isSet = false;
    m_position5crossings_isValid = false;

    m_robot1_auto_isSet = false;
    m_robot1_auto_isValid = false;

    m_robot2_auto_isSet = false;
    m_robot2_auto_isValid = false;

    m_robot3_auto_isSet = false;
    m_robot3_auto_isValid = false;

    m_tech_foul_count_isSet = false;
    m_tech_foul_count_isValid = false;

    m_teleop_boulder_points_isSet = false;
    m_teleop_boulder_points_isValid = false;

    m_teleop_boulders_high_isSet = false;
    m_teleop_boulders_high_isValid = false;

    m_teleop_boulders_low_isSet = false;
    m_teleop_boulders_low_isValid = false;

    m_teleop_challenge_points_isSet = false;
    m_teleop_challenge_points_isValid = false;

    m_teleop_crossing_points_isSet = false;
    m_teleop_crossing_points_isValid = false;

    m_teleop_defenses_breached_isSet = false;
    m_teleop_defenses_breached_isValid = false;

    m_teleop_points_isSet = false;
    m_teleop_points_isValid = false;

    m_teleop_scale_points_isSet = false;
    m_teleop_scale_points_isValid = false;

    m_teleop_tower_captured_isSet = false;
    m_teleop_tower_captured_isValid = false;

    m_total_points_isSet = false;
    m_total_points_isValid = false;

    m_tower_end_strength_isSet = false;
    m_tower_end_strength_isValid = false;

    m_tower_face_a_isSet = false;
    m_tower_face_a_isValid = false;

    m_tower_face_b_isSet = false;
    m_tower_face_b_isValid = false;

    m_tower_face_c_isSet = false;
    m_tower_face_c_isValid = false;
}

void OAIMatch_Score_Breakdown_2016_Alliance::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMatch_Score_Breakdown_2016_Alliance::fromJsonObject(QJsonObject json) {

    m_adjust_points_isValid = ::OpenAPI::fromJsonValue(m_adjust_points, json[QString("adjustPoints")]);
    m_adjust_points_isSet = !json[QString("adjustPoints")].isNull() && m_adjust_points_isValid;

    m_auto_boulder_points_isValid = ::OpenAPI::fromJsonValue(m_auto_boulder_points, json[QString("autoBoulderPoints")]);
    m_auto_boulder_points_isSet = !json[QString("autoBoulderPoints")].isNull() && m_auto_boulder_points_isValid;

    m_auto_boulders_high_isValid = ::OpenAPI::fromJsonValue(m_auto_boulders_high, json[QString("autoBouldersHigh")]);
    m_auto_boulders_high_isSet = !json[QString("autoBouldersHigh")].isNull() && m_auto_boulders_high_isValid;

    m_auto_boulders_low_isValid = ::OpenAPI::fromJsonValue(m_auto_boulders_low, json[QString("autoBouldersLow")]);
    m_auto_boulders_low_isSet = !json[QString("autoBouldersLow")].isNull() && m_auto_boulders_low_isValid;

    m_auto_crossing_points_isValid = ::OpenAPI::fromJsonValue(m_auto_crossing_points, json[QString("autoCrossingPoints")]);
    m_auto_crossing_points_isSet = !json[QString("autoCrossingPoints")].isNull() && m_auto_crossing_points_isValid;

    m_auto_points_isValid = ::OpenAPI::fromJsonValue(m_auto_points, json[QString("autoPoints")]);
    m_auto_points_isSet = !json[QString("autoPoints")].isNull() && m_auto_points_isValid;

    m_auto_reach_points_isValid = ::OpenAPI::fromJsonValue(m_auto_reach_points, json[QString("autoReachPoints")]);
    m_auto_reach_points_isSet = !json[QString("autoReachPoints")].isNull() && m_auto_reach_points_isValid;

    m_breach_points_isValid = ::OpenAPI::fromJsonValue(m_breach_points, json[QString("breachPoints")]);
    m_breach_points_isSet = !json[QString("breachPoints")].isNull() && m_breach_points_isValid;

    m_capture_points_isValid = ::OpenAPI::fromJsonValue(m_capture_points, json[QString("capturePoints")]);
    m_capture_points_isSet = !json[QString("capturePoints")].isNull() && m_capture_points_isValid;

    m_foul_count_isValid = ::OpenAPI::fromJsonValue(m_foul_count, json[QString("foulCount")]);
    m_foul_count_isSet = !json[QString("foulCount")].isNull() && m_foul_count_isValid;

    m_foul_points_isValid = ::OpenAPI::fromJsonValue(m_foul_points, json[QString("foulPoints")]);
    m_foul_points_isSet = !json[QString("foulPoints")].isNull() && m_foul_points_isValid;

    m_position1crossings_isValid = ::OpenAPI::fromJsonValue(m_position1crossings, json[QString("position1crossings")]);
    m_position1crossings_isSet = !json[QString("position1crossings")].isNull() && m_position1crossings_isValid;

    m_position2_isValid = ::OpenAPI::fromJsonValue(m_position2, json[QString("position2")]);
    m_position2_isSet = !json[QString("position2")].isNull() && m_position2_isValid;

    m_position2crossings_isValid = ::OpenAPI::fromJsonValue(m_position2crossings, json[QString("position2crossings")]);
    m_position2crossings_isSet = !json[QString("position2crossings")].isNull() && m_position2crossings_isValid;

    m_position3_isValid = ::OpenAPI::fromJsonValue(m_position3, json[QString("position3")]);
    m_position3_isSet = !json[QString("position3")].isNull() && m_position3_isValid;

    m_position3crossings_isValid = ::OpenAPI::fromJsonValue(m_position3crossings, json[QString("position3crossings")]);
    m_position3crossings_isSet = !json[QString("position3crossings")].isNull() && m_position3crossings_isValid;

    m_position4_isValid = ::OpenAPI::fromJsonValue(m_position4, json[QString("position4")]);
    m_position4_isSet = !json[QString("position4")].isNull() && m_position4_isValid;

    m_position4crossings_isValid = ::OpenAPI::fromJsonValue(m_position4crossings, json[QString("position4crossings")]);
    m_position4crossings_isSet = !json[QString("position4crossings")].isNull() && m_position4crossings_isValid;

    m_position5_isValid = ::OpenAPI::fromJsonValue(m_position5, json[QString("position5")]);
    m_position5_isSet = !json[QString("position5")].isNull() && m_position5_isValid;

    m_position5crossings_isValid = ::OpenAPI::fromJsonValue(m_position5crossings, json[QString("position5crossings")]);
    m_position5crossings_isSet = !json[QString("position5crossings")].isNull() && m_position5crossings_isValid;

    m_robot1_auto_isValid = ::OpenAPI::fromJsonValue(m_robot1_auto, json[QString("robot1Auto")]);
    m_robot1_auto_isSet = !json[QString("robot1Auto")].isNull() && m_robot1_auto_isValid;

    m_robot2_auto_isValid = ::OpenAPI::fromJsonValue(m_robot2_auto, json[QString("robot2Auto")]);
    m_robot2_auto_isSet = !json[QString("robot2Auto")].isNull() && m_robot2_auto_isValid;

    m_robot3_auto_isValid = ::OpenAPI::fromJsonValue(m_robot3_auto, json[QString("robot3Auto")]);
    m_robot3_auto_isSet = !json[QString("robot3Auto")].isNull() && m_robot3_auto_isValid;

    m_tech_foul_count_isValid = ::OpenAPI::fromJsonValue(m_tech_foul_count, json[QString("techFoulCount")]);
    m_tech_foul_count_isSet = !json[QString("techFoulCount")].isNull() && m_tech_foul_count_isValid;

    m_teleop_boulder_points_isValid = ::OpenAPI::fromJsonValue(m_teleop_boulder_points, json[QString("teleopBoulderPoints")]);
    m_teleop_boulder_points_isSet = !json[QString("teleopBoulderPoints")].isNull() && m_teleop_boulder_points_isValid;

    m_teleop_boulders_high_isValid = ::OpenAPI::fromJsonValue(m_teleop_boulders_high, json[QString("teleopBouldersHigh")]);
    m_teleop_boulders_high_isSet = !json[QString("teleopBouldersHigh")].isNull() && m_teleop_boulders_high_isValid;

    m_teleop_boulders_low_isValid = ::OpenAPI::fromJsonValue(m_teleop_boulders_low, json[QString("teleopBouldersLow")]);
    m_teleop_boulders_low_isSet = !json[QString("teleopBouldersLow")].isNull() && m_teleop_boulders_low_isValid;

    m_teleop_challenge_points_isValid = ::OpenAPI::fromJsonValue(m_teleop_challenge_points, json[QString("teleopChallengePoints")]);
    m_teleop_challenge_points_isSet = !json[QString("teleopChallengePoints")].isNull() && m_teleop_challenge_points_isValid;

    m_teleop_crossing_points_isValid = ::OpenAPI::fromJsonValue(m_teleop_crossing_points, json[QString("teleopCrossingPoints")]);
    m_teleop_crossing_points_isSet = !json[QString("teleopCrossingPoints")].isNull() && m_teleop_crossing_points_isValid;

    m_teleop_defenses_breached_isValid = ::OpenAPI::fromJsonValue(m_teleop_defenses_breached, json[QString("teleopDefensesBreached")]);
    m_teleop_defenses_breached_isSet = !json[QString("teleopDefensesBreached")].isNull() && m_teleop_defenses_breached_isValid;

    m_teleop_points_isValid = ::OpenAPI::fromJsonValue(m_teleop_points, json[QString("teleopPoints")]);
    m_teleop_points_isSet = !json[QString("teleopPoints")].isNull() && m_teleop_points_isValid;

    m_teleop_scale_points_isValid = ::OpenAPI::fromJsonValue(m_teleop_scale_points, json[QString("teleopScalePoints")]);
    m_teleop_scale_points_isSet = !json[QString("teleopScalePoints")].isNull() && m_teleop_scale_points_isValid;

    m_teleop_tower_captured_isValid = ::OpenAPI::fromJsonValue(m_teleop_tower_captured, json[QString("teleopTowerCaptured")]);
    m_teleop_tower_captured_isSet = !json[QString("teleopTowerCaptured")].isNull() && m_teleop_tower_captured_isValid;

    m_total_points_isValid = ::OpenAPI::fromJsonValue(m_total_points, json[QString("totalPoints")]);
    m_total_points_isSet = !json[QString("totalPoints")].isNull() && m_total_points_isValid;

    m_tower_end_strength_isValid = ::OpenAPI::fromJsonValue(m_tower_end_strength, json[QString("towerEndStrength")]);
    m_tower_end_strength_isSet = !json[QString("towerEndStrength")].isNull() && m_tower_end_strength_isValid;

    m_tower_face_a_isValid = ::OpenAPI::fromJsonValue(m_tower_face_a, json[QString("towerFaceA")]);
    m_tower_face_a_isSet = !json[QString("towerFaceA")].isNull() && m_tower_face_a_isValid;

    m_tower_face_b_isValid = ::OpenAPI::fromJsonValue(m_tower_face_b, json[QString("towerFaceB")]);
    m_tower_face_b_isSet = !json[QString("towerFaceB")].isNull() && m_tower_face_b_isValid;

    m_tower_face_c_isValid = ::OpenAPI::fromJsonValue(m_tower_face_c, json[QString("towerFaceC")]);
    m_tower_face_c_isSet = !json[QString("towerFaceC")].isNull() && m_tower_face_c_isValid;
}

QString OAIMatch_Score_Breakdown_2016_Alliance::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMatch_Score_Breakdown_2016_Alliance::asJsonObject() const {
    QJsonObject obj;
    if (m_adjust_points_isSet) {
        obj.insert(QString("adjustPoints"), ::OpenAPI::toJsonValue(m_adjust_points));
    }
    if (m_auto_boulder_points_isSet) {
        obj.insert(QString("autoBoulderPoints"), ::OpenAPI::toJsonValue(m_auto_boulder_points));
    }
    if (m_auto_boulders_high_isSet) {
        obj.insert(QString("autoBouldersHigh"), ::OpenAPI::toJsonValue(m_auto_boulders_high));
    }
    if (m_auto_boulders_low_isSet) {
        obj.insert(QString("autoBouldersLow"), ::OpenAPI::toJsonValue(m_auto_boulders_low));
    }
    if (m_auto_crossing_points_isSet) {
        obj.insert(QString("autoCrossingPoints"), ::OpenAPI::toJsonValue(m_auto_crossing_points));
    }
    if (m_auto_points_isSet) {
        obj.insert(QString("autoPoints"), ::OpenAPI::toJsonValue(m_auto_points));
    }
    if (m_auto_reach_points_isSet) {
        obj.insert(QString("autoReachPoints"), ::OpenAPI::toJsonValue(m_auto_reach_points));
    }
    if (m_breach_points_isSet) {
        obj.insert(QString("breachPoints"), ::OpenAPI::toJsonValue(m_breach_points));
    }
    if (m_capture_points_isSet) {
        obj.insert(QString("capturePoints"), ::OpenAPI::toJsonValue(m_capture_points));
    }
    if (m_foul_count_isSet) {
        obj.insert(QString("foulCount"), ::OpenAPI::toJsonValue(m_foul_count));
    }
    if (m_foul_points_isSet) {
        obj.insert(QString("foulPoints"), ::OpenAPI::toJsonValue(m_foul_points));
    }
    if (m_position1crossings_isSet) {
        obj.insert(QString("position1crossings"), ::OpenAPI::toJsonValue(m_position1crossings));
    }
    if (m_position2_isSet) {
        obj.insert(QString("position2"), ::OpenAPI::toJsonValue(m_position2));
    }
    if (m_position2crossings_isSet) {
        obj.insert(QString("position2crossings"), ::OpenAPI::toJsonValue(m_position2crossings));
    }
    if (m_position3_isSet) {
        obj.insert(QString("position3"), ::OpenAPI::toJsonValue(m_position3));
    }
    if (m_position3crossings_isSet) {
        obj.insert(QString("position3crossings"), ::OpenAPI::toJsonValue(m_position3crossings));
    }
    if (m_position4_isSet) {
        obj.insert(QString("position4"), ::OpenAPI::toJsonValue(m_position4));
    }
    if (m_position4crossings_isSet) {
        obj.insert(QString("position4crossings"), ::OpenAPI::toJsonValue(m_position4crossings));
    }
    if (m_position5_isSet) {
        obj.insert(QString("position5"), ::OpenAPI::toJsonValue(m_position5));
    }
    if (m_position5crossings_isSet) {
        obj.insert(QString("position5crossings"), ::OpenAPI::toJsonValue(m_position5crossings));
    }
    if (m_robot1_auto_isSet) {
        obj.insert(QString("robot1Auto"), ::OpenAPI::toJsonValue(m_robot1_auto));
    }
    if (m_robot2_auto_isSet) {
        obj.insert(QString("robot2Auto"), ::OpenAPI::toJsonValue(m_robot2_auto));
    }
    if (m_robot3_auto_isSet) {
        obj.insert(QString("robot3Auto"), ::OpenAPI::toJsonValue(m_robot3_auto));
    }
    if (m_tech_foul_count_isSet) {
        obj.insert(QString("techFoulCount"), ::OpenAPI::toJsonValue(m_tech_foul_count));
    }
    if (m_teleop_boulder_points_isSet) {
        obj.insert(QString("teleopBoulderPoints"), ::OpenAPI::toJsonValue(m_teleop_boulder_points));
    }
    if (m_teleop_boulders_high_isSet) {
        obj.insert(QString("teleopBouldersHigh"), ::OpenAPI::toJsonValue(m_teleop_boulders_high));
    }
    if (m_teleop_boulders_low_isSet) {
        obj.insert(QString("teleopBouldersLow"), ::OpenAPI::toJsonValue(m_teleop_boulders_low));
    }
    if (m_teleop_challenge_points_isSet) {
        obj.insert(QString("teleopChallengePoints"), ::OpenAPI::toJsonValue(m_teleop_challenge_points));
    }
    if (m_teleop_crossing_points_isSet) {
        obj.insert(QString("teleopCrossingPoints"), ::OpenAPI::toJsonValue(m_teleop_crossing_points));
    }
    if (m_teleop_defenses_breached_isSet) {
        obj.insert(QString("teleopDefensesBreached"), ::OpenAPI::toJsonValue(m_teleop_defenses_breached));
    }
    if (m_teleop_points_isSet) {
        obj.insert(QString("teleopPoints"), ::OpenAPI::toJsonValue(m_teleop_points));
    }
    if (m_teleop_scale_points_isSet) {
        obj.insert(QString("teleopScalePoints"), ::OpenAPI::toJsonValue(m_teleop_scale_points));
    }
    if (m_teleop_tower_captured_isSet) {
        obj.insert(QString("teleopTowerCaptured"), ::OpenAPI::toJsonValue(m_teleop_tower_captured));
    }
    if (m_total_points_isSet) {
        obj.insert(QString("totalPoints"), ::OpenAPI::toJsonValue(m_total_points));
    }
    if (m_tower_end_strength_isSet) {
        obj.insert(QString("towerEndStrength"), ::OpenAPI::toJsonValue(m_tower_end_strength));
    }
    if (m_tower_face_a_isSet) {
        obj.insert(QString("towerFaceA"), ::OpenAPI::toJsonValue(m_tower_face_a));
    }
    if (m_tower_face_b_isSet) {
        obj.insert(QString("towerFaceB"), ::OpenAPI::toJsonValue(m_tower_face_b));
    }
    if (m_tower_face_c_isSet) {
        obj.insert(QString("towerFaceC"), ::OpenAPI::toJsonValue(m_tower_face_c));
    }
    return obj;
}

qint32 OAIMatch_Score_Breakdown_2016_Alliance::getAdjustPoints() const {
    return m_adjust_points;
}
void OAIMatch_Score_Breakdown_2016_Alliance::setAdjustPoints(const qint32 &adjust_points) {
    m_adjust_points = adjust_points;
    m_adjust_points_isSet = true;
}

bool OAIMatch_Score_Breakdown_2016_Alliance::is_adjust_points_Set() const{
    return m_adjust_points_isSet;
}

bool OAIMatch_Score_Breakdown_2016_Alliance::is_adjust_points_Valid() const{
    return m_adjust_points_isValid;
}

qint32 OAIMatch_Score_Breakdown_2016_Alliance::getAutoBoulderPoints() const {
    return m_auto_boulder_points;
}
void OAIMatch_Score_Breakdown_2016_Alliance::setAutoBoulderPoints(const qint32 &auto_boulder_points) {
    m_auto_boulder_points = auto_boulder_points;
    m_auto_boulder_points_isSet = true;
}

bool OAIMatch_Score_Breakdown_2016_Alliance::is_auto_boulder_points_Set() const{
    return m_auto_boulder_points_isSet;
}

bool OAIMatch_Score_Breakdown_2016_Alliance::is_auto_boulder_points_Valid() const{
    return m_auto_boulder_points_isValid;
}

qint32 OAIMatch_Score_Breakdown_2016_Alliance::getAutoBouldersHigh() const {
    return m_auto_boulders_high;
}
void OAIMatch_Score_Breakdown_2016_Alliance::setAutoBouldersHigh(const qint32 &auto_boulders_high) {
    m_auto_boulders_high = auto_boulders_high;
    m_auto_boulders_high_isSet = true;
}

bool OAIMatch_Score_Breakdown_2016_Alliance::is_auto_boulders_high_Set() const{
    return m_auto_boulders_high_isSet;
}

bool OAIMatch_Score_Breakdown_2016_Alliance::is_auto_boulders_high_Valid() const{
    return m_auto_boulders_high_isValid;
}

qint32 OAIMatch_Score_Breakdown_2016_Alliance::getAutoBouldersLow() const {
    return m_auto_boulders_low;
}
void OAIMatch_Score_Breakdown_2016_Alliance::setAutoBouldersLow(const qint32 &auto_boulders_low) {
    m_auto_boulders_low = auto_boulders_low;
    m_auto_boulders_low_isSet = true;
}

bool OAIMatch_Score_Breakdown_2016_Alliance::is_auto_boulders_low_Set() const{
    return m_auto_boulders_low_isSet;
}

bool OAIMatch_Score_Breakdown_2016_Alliance::is_auto_boulders_low_Valid() const{
    return m_auto_boulders_low_isValid;
}

qint32 OAIMatch_Score_Breakdown_2016_Alliance::getAutoCrossingPoints() const {
    return m_auto_crossing_points;
}
void OAIMatch_Score_Breakdown_2016_Alliance::setAutoCrossingPoints(const qint32 &auto_crossing_points) {
    m_auto_crossing_points = auto_crossing_points;
    m_auto_crossing_points_isSet = true;
}

bool OAIMatch_Score_Breakdown_2016_Alliance::is_auto_crossing_points_Set() const{
    return m_auto_crossing_points_isSet;
}

bool OAIMatch_Score_Breakdown_2016_Alliance::is_auto_crossing_points_Valid() const{
    return m_auto_crossing_points_isValid;
}

qint32 OAIMatch_Score_Breakdown_2016_Alliance::getAutoPoints() const {
    return m_auto_points;
}
void OAIMatch_Score_Breakdown_2016_Alliance::setAutoPoints(const qint32 &auto_points) {
    m_auto_points = auto_points;
    m_auto_points_isSet = true;
}

bool OAIMatch_Score_Breakdown_2016_Alliance::is_auto_points_Set() const{
    return m_auto_points_isSet;
}

bool OAIMatch_Score_Breakdown_2016_Alliance::is_auto_points_Valid() const{
    return m_auto_points_isValid;
}

qint32 OAIMatch_Score_Breakdown_2016_Alliance::getAutoReachPoints() const {
    return m_auto_reach_points;
}
void OAIMatch_Score_Breakdown_2016_Alliance::setAutoReachPoints(const qint32 &auto_reach_points) {
    m_auto_reach_points = auto_reach_points;
    m_auto_reach_points_isSet = true;
}

bool OAIMatch_Score_Breakdown_2016_Alliance::is_auto_reach_points_Set() const{
    return m_auto_reach_points_isSet;
}

bool OAIMatch_Score_Breakdown_2016_Alliance::is_auto_reach_points_Valid() const{
    return m_auto_reach_points_isValid;
}

qint32 OAIMatch_Score_Breakdown_2016_Alliance::getBreachPoints() const {
    return m_breach_points;
}
void OAIMatch_Score_Breakdown_2016_Alliance::setBreachPoints(const qint32 &breach_points) {
    m_breach_points = breach_points;
    m_breach_points_isSet = true;
}

bool OAIMatch_Score_Breakdown_2016_Alliance::is_breach_points_Set() const{
    return m_breach_points_isSet;
}

bool OAIMatch_Score_Breakdown_2016_Alliance::is_breach_points_Valid() const{
    return m_breach_points_isValid;
}

qint32 OAIMatch_Score_Breakdown_2016_Alliance::getCapturePoints() const {
    return m_capture_points;
}
void OAIMatch_Score_Breakdown_2016_Alliance::setCapturePoints(const qint32 &capture_points) {
    m_capture_points = capture_points;
    m_capture_points_isSet = true;
}

bool OAIMatch_Score_Breakdown_2016_Alliance::is_capture_points_Set() const{
    return m_capture_points_isSet;
}

bool OAIMatch_Score_Breakdown_2016_Alliance::is_capture_points_Valid() const{
    return m_capture_points_isValid;
}

qint32 OAIMatch_Score_Breakdown_2016_Alliance::getFoulCount() const {
    return m_foul_count;
}
void OAIMatch_Score_Breakdown_2016_Alliance::setFoulCount(const qint32 &foul_count) {
    m_foul_count = foul_count;
    m_foul_count_isSet = true;
}

bool OAIMatch_Score_Breakdown_2016_Alliance::is_foul_count_Set() const{
    return m_foul_count_isSet;
}

bool OAIMatch_Score_Breakdown_2016_Alliance::is_foul_count_Valid() const{
    return m_foul_count_isValid;
}

qint32 OAIMatch_Score_Breakdown_2016_Alliance::getFoulPoints() const {
    return m_foul_points;
}
void OAIMatch_Score_Breakdown_2016_Alliance::setFoulPoints(const qint32 &foul_points) {
    m_foul_points = foul_points;
    m_foul_points_isSet = true;
}

bool OAIMatch_Score_Breakdown_2016_Alliance::is_foul_points_Set() const{
    return m_foul_points_isSet;
}

bool OAIMatch_Score_Breakdown_2016_Alliance::is_foul_points_Valid() const{
    return m_foul_points_isValid;
}

qint32 OAIMatch_Score_Breakdown_2016_Alliance::getPosition1crossings() const {
    return m_position1crossings;
}
void OAIMatch_Score_Breakdown_2016_Alliance::setPosition1crossings(const qint32 &position1crossings) {
    m_position1crossings = position1crossings;
    m_position1crossings_isSet = true;
}

bool OAIMatch_Score_Breakdown_2016_Alliance::is_position1crossings_Set() const{
    return m_position1crossings_isSet;
}

bool OAIMatch_Score_Breakdown_2016_Alliance::is_position1crossings_Valid() const{
    return m_position1crossings_isValid;
}

QString OAIMatch_Score_Breakdown_2016_Alliance::getPosition2() const {
    return m_position2;
}
void OAIMatch_Score_Breakdown_2016_Alliance::setPosition2(const QString &position2) {
    m_position2 = position2;
    m_position2_isSet = true;
}

bool OAIMatch_Score_Breakdown_2016_Alliance::is_position2_Set() const{
    return m_position2_isSet;
}

bool OAIMatch_Score_Breakdown_2016_Alliance::is_position2_Valid() const{
    return m_position2_isValid;
}

qint32 OAIMatch_Score_Breakdown_2016_Alliance::getPosition2crossings() const {
    return m_position2crossings;
}
void OAIMatch_Score_Breakdown_2016_Alliance::setPosition2crossings(const qint32 &position2crossings) {
    m_position2crossings = position2crossings;
    m_position2crossings_isSet = true;
}

bool OAIMatch_Score_Breakdown_2016_Alliance::is_position2crossings_Set() const{
    return m_position2crossings_isSet;
}

bool OAIMatch_Score_Breakdown_2016_Alliance::is_position2crossings_Valid() const{
    return m_position2crossings_isValid;
}

QString OAIMatch_Score_Breakdown_2016_Alliance::getPosition3() const {
    return m_position3;
}
void OAIMatch_Score_Breakdown_2016_Alliance::setPosition3(const QString &position3) {
    m_position3 = position3;
    m_position3_isSet = true;
}

bool OAIMatch_Score_Breakdown_2016_Alliance::is_position3_Set() const{
    return m_position3_isSet;
}

bool OAIMatch_Score_Breakdown_2016_Alliance::is_position3_Valid() const{
    return m_position3_isValid;
}

qint32 OAIMatch_Score_Breakdown_2016_Alliance::getPosition3crossings() const {
    return m_position3crossings;
}
void OAIMatch_Score_Breakdown_2016_Alliance::setPosition3crossings(const qint32 &position3crossings) {
    m_position3crossings = position3crossings;
    m_position3crossings_isSet = true;
}

bool OAIMatch_Score_Breakdown_2016_Alliance::is_position3crossings_Set() const{
    return m_position3crossings_isSet;
}

bool OAIMatch_Score_Breakdown_2016_Alliance::is_position3crossings_Valid() const{
    return m_position3crossings_isValid;
}

QString OAIMatch_Score_Breakdown_2016_Alliance::getPosition4() const {
    return m_position4;
}
void OAIMatch_Score_Breakdown_2016_Alliance::setPosition4(const QString &position4) {
    m_position4 = position4;
    m_position4_isSet = true;
}

bool OAIMatch_Score_Breakdown_2016_Alliance::is_position4_Set() const{
    return m_position4_isSet;
}

bool OAIMatch_Score_Breakdown_2016_Alliance::is_position4_Valid() const{
    return m_position4_isValid;
}

qint32 OAIMatch_Score_Breakdown_2016_Alliance::getPosition4crossings() const {
    return m_position4crossings;
}
void OAIMatch_Score_Breakdown_2016_Alliance::setPosition4crossings(const qint32 &position4crossings) {
    m_position4crossings = position4crossings;
    m_position4crossings_isSet = true;
}

bool OAIMatch_Score_Breakdown_2016_Alliance::is_position4crossings_Set() const{
    return m_position4crossings_isSet;
}

bool OAIMatch_Score_Breakdown_2016_Alliance::is_position4crossings_Valid() const{
    return m_position4crossings_isValid;
}

QString OAIMatch_Score_Breakdown_2016_Alliance::getPosition5() const {
    return m_position5;
}
void OAIMatch_Score_Breakdown_2016_Alliance::setPosition5(const QString &position5) {
    m_position5 = position5;
    m_position5_isSet = true;
}

bool OAIMatch_Score_Breakdown_2016_Alliance::is_position5_Set() const{
    return m_position5_isSet;
}

bool OAIMatch_Score_Breakdown_2016_Alliance::is_position5_Valid() const{
    return m_position5_isValid;
}

qint32 OAIMatch_Score_Breakdown_2016_Alliance::getPosition5crossings() const {
    return m_position5crossings;
}
void OAIMatch_Score_Breakdown_2016_Alliance::setPosition5crossings(const qint32 &position5crossings) {
    m_position5crossings = position5crossings;
    m_position5crossings_isSet = true;
}

bool OAIMatch_Score_Breakdown_2016_Alliance::is_position5crossings_Set() const{
    return m_position5crossings_isSet;
}

bool OAIMatch_Score_Breakdown_2016_Alliance::is_position5crossings_Valid() const{
    return m_position5crossings_isValid;
}

QString OAIMatch_Score_Breakdown_2016_Alliance::getRobot1Auto() const {
    return m_robot1_auto;
}
void OAIMatch_Score_Breakdown_2016_Alliance::setRobot1Auto(const QString &robot1_auto) {
    m_robot1_auto = robot1_auto;
    m_robot1_auto_isSet = true;
}

bool OAIMatch_Score_Breakdown_2016_Alliance::is_robot1_auto_Set() const{
    return m_robot1_auto_isSet;
}

bool OAIMatch_Score_Breakdown_2016_Alliance::is_robot1_auto_Valid() const{
    return m_robot1_auto_isValid;
}

QString OAIMatch_Score_Breakdown_2016_Alliance::getRobot2Auto() const {
    return m_robot2_auto;
}
void OAIMatch_Score_Breakdown_2016_Alliance::setRobot2Auto(const QString &robot2_auto) {
    m_robot2_auto = robot2_auto;
    m_robot2_auto_isSet = true;
}

bool OAIMatch_Score_Breakdown_2016_Alliance::is_robot2_auto_Set() const{
    return m_robot2_auto_isSet;
}

bool OAIMatch_Score_Breakdown_2016_Alliance::is_robot2_auto_Valid() const{
    return m_robot2_auto_isValid;
}

QString OAIMatch_Score_Breakdown_2016_Alliance::getRobot3Auto() const {
    return m_robot3_auto;
}
void OAIMatch_Score_Breakdown_2016_Alliance::setRobot3Auto(const QString &robot3_auto) {
    m_robot3_auto = robot3_auto;
    m_robot3_auto_isSet = true;
}

bool OAIMatch_Score_Breakdown_2016_Alliance::is_robot3_auto_Set() const{
    return m_robot3_auto_isSet;
}

bool OAIMatch_Score_Breakdown_2016_Alliance::is_robot3_auto_Valid() const{
    return m_robot3_auto_isValid;
}

qint32 OAIMatch_Score_Breakdown_2016_Alliance::getTechFoulCount() const {
    return m_tech_foul_count;
}
void OAIMatch_Score_Breakdown_2016_Alliance::setTechFoulCount(const qint32 &tech_foul_count) {
    m_tech_foul_count = tech_foul_count;
    m_tech_foul_count_isSet = true;
}

bool OAIMatch_Score_Breakdown_2016_Alliance::is_tech_foul_count_Set() const{
    return m_tech_foul_count_isSet;
}

bool OAIMatch_Score_Breakdown_2016_Alliance::is_tech_foul_count_Valid() const{
    return m_tech_foul_count_isValid;
}

qint32 OAIMatch_Score_Breakdown_2016_Alliance::getTeleopBoulderPoints() const {
    return m_teleop_boulder_points;
}
void OAIMatch_Score_Breakdown_2016_Alliance::setTeleopBoulderPoints(const qint32 &teleop_boulder_points) {
    m_teleop_boulder_points = teleop_boulder_points;
    m_teleop_boulder_points_isSet = true;
}

bool OAIMatch_Score_Breakdown_2016_Alliance::is_teleop_boulder_points_Set() const{
    return m_teleop_boulder_points_isSet;
}

bool OAIMatch_Score_Breakdown_2016_Alliance::is_teleop_boulder_points_Valid() const{
    return m_teleop_boulder_points_isValid;
}

qint32 OAIMatch_Score_Breakdown_2016_Alliance::getTeleopBouldersHigh() const {
    return m_teleop_boulders_high;
}
void OAIMatch_Score_Breakdown_2016_Alliance::setTeleopBouldersHigh(const qint32 &teleop_boulders_high) {
    m_teleop_boulders_high = teleop_boulders_high;
    m_teleop_boulders_high_isSet = true;
}

bool OAIMatch_Score_Breakdown_2016_Alliance::is_teleop_boulders_high_Set() const{
    return m_teleop_boulders_high_isSet;
}

bool OAIMatch_Score_Breakdown_2016_Alliance::is_teleop_boulders_high_Valid() const{
    return m_teleop_boulders_high_isValid;
}

qint32 OAIMatch_Score_Breakdown_2016_Alliance::getTeleopBouldersLow() const {
    return m_teleop_boulders_low;
}
void OAIMatch_Score_Breakdown_2016_Alliance::setTeleopBouldersLow(const qint32 &teleop_boulders_low) {
    m_teleop_boulders_low = teleop_boulders_low;
    m_teleop_boulders_low_isSet = true;
}

bool OAIMatch_Score_Breakdown_2016_Alliance::is_teleop_boulders_low_Set() const{
    return m_teleop_boulders_low_isSet;
}

bool OAIMatch_Score_Breakdown_2016_Alliance::is_teleop_boulders_low_Valid() const{
    return m_teleop_boulders_low_isValid;
}

qint32 OAIMatch_Score_Breakdown_2016_Alliance::getTeleopChallengePoints() const {
    return m_teleop_challenge_points;
}
void OAIMatch_Score_Breakdown_2016_Alliance::setTeleopChallengePoints(const qint32 &teleop_challenge_points) {
    m_teleop_challenge_points = teleop_challenge_points;
    m_teleop_challenge_points_isSet = true;
}

bool OAIMatch_Score_Breakdown_2016_Alliance::is_teleop_challenge_points_Set() const{
    return m_teleop_challenge_points_isSet;
}

bool OAIMatch_Score_Breakdown_2016_Alliance::is_teleop_challenge_points_Valid() const{
    return m_teleop_challenge_points_isValid;
}

qint32 OAIMatch_Score_Breakdown_2016_Alliance::getTeleopCrossingPoints() const {
    return m_teleop_crossing_points;
}
void OAIMatch_Score_Breakdown_2016_Alliance::setTeleopCrossingPoints(const qint32 &teleop_crossing_points) {
    m_teleop_crossing_points = teleop_crossing_points;
    m_teleop_crossing_points_isSet = true;
}

bool OAIMatch_Score_Breakdown_2016_Alliance::is_teleop_crossing_points_Set() const{
    return m_teleop_crossing_points_isSet;
}

bool OAIMatch_Score_Breakdown_2016_Alliance::is_teleop_crossing_points_Valid() const{
    return m_teleop_crossing_points_isValid;
}

bool OAIMatch_Score_Breakdown_2016_Alliance::isTeleopDefensesBreached() const {
    return m_teleop_defenses_breached;
}
void OAIMatch_Score_Breakdown_2016_Alliance::setTeleopDefensesBreached(const bool &teleop_defenses_breached) {
    m_teleop_defenses_breached = teleop_defenses_breached;
    m_teleop_defenses_breached_isSet = true;
}

bool OAIMatch_Score_Breakdown_2016_Alliance::is_teleop_defenses_breached_Set() const{
    return m_teleop_defenses_breached_isSet;
}

bool OAIMatch_Score_Breakdown_2016_Alliance::is_teleop_defenses_breached_Valid() const{
    return m_teleop_defenses_breached_isValid;
}

qint32 OAIMatch_Score_Breakdown_2016_Alliance::getTeleopPoints() const {
    return m_teleop_points;
}
void OAIMatch_Score_Breakdown_2016_Alliance::setTeleopPoints(const qint32 &teleop_points) {
    m_teleop_points = teleop_points;
    m_teleop_points_isSet = true;
}

bool OAIMatch_Score_Breakdown_2016_Alliance::is_teleop_points_Set() const{
    return m_teleop_points_isSet;
}

bool OAIMatch_Score_Breakdown_2016_Alliance::is_teleop_points_Valid() const{
    return m_teleop_points_isValid;
}

qint32 OAIMatch_Score_Breakdown_2016_Alliance::getTeleopScalePoints() const {
    return m_teleop_scale_points;
}
void OAIMatch_Score_Breakdown_2016_Alliance::setTeleopScalePoints(const qint32 &teleop_scale_points) {
    m_teleop_scale_points = teleop_scale_points;
    m_teleop_scale_points_isSet = true;
}

bool OAIMatch_Score_Breakdown_2016_Alliance::is_teleop_scale_points_Set() const{
    return m_teleop_scale_points_isSet;
}

bool OAIMatch_Score_Breakdown_2016_Alliance::is_teleop_scale_points_Valid() const{
    return m_teleop_scale_points_isValid;
}

qint32 OAIMatch_Score_Breakdown_2016_Alliance::getTeleopTowerCaptured() const {
    return m_teleop_tower_captured;
}
void OAIMatch_Score_Breakdown_2016_Alliance::setTeleopTowerCaptured(const qint32 &teleop_tower_captured) {
    m_teleop_tower_captured = teleop_tower_captured;
    m_teleop_tower_captured_isSet = true;
}

bool OAIMatch_Score_Breakdown_2016_Alliance::is_teleop_tower_captured_Set() const{
    return m_teleop_tower_captured_isSet;
}

bool OAIMatch_Score_Breakdown_2016_Alliance::is_teleop_tower_captured_Valid() const{
    return m_teleop_tower_captured_isValid;
}

qint32 OAIMatch_Score_Breakdown_2016_Alliance::getTotalPoints() const {
    return m_total_points;
}
void OAIMatch_Score_Breakdown_2016_Alliance::setTotalPoints(const qint32 &total_points) {
    m_total_points = total_points;
    m_total_points_isSet = true;
}

bool OAIMatch_Score_Breakdown_2016_Alliance::is_total_points_Set() const{
    return m_total_points_isSet;
}

bool OAIMatch_Score_Breakdown_2016_Alliance::is_total_points_Valid() const{
    return m_total_points_isValid;
}

qint32 OAIMatch_Score_Breakdown_2016_Alliance::getTowerEndStrength() const {
    return m_tower_end_strength;
}
void OAIMatch_Score_Breakdown_2016_Alliance::setTowerEndStrength(const qint32 &tower_end_strength) {
    m_tower_end_strength = tower_end_strength;
    m_tower_end_strength_isSet = true;
}

bool OAIMatch_Score_Breakdown_2016_Alliance::is_tower_end_strength_Set() const{
    return m_tower_end_strength_isSet;
}

bool OAIMatch_Score_Breakdown_2016_Alliance::is_tower_end_strength_Valid() const{
    return m_tower_end_strength_isValid;
}

QString OAIMatch_Score_Breakdown_2016_Alliance::getTowerFaceA() const {
    return m_tower_face_a;
}
void OAIMatch_Score_Breakdown_2016_Alliance::setTowerFaceA(const QString &tower_face_a) {
    m_tower_face_a = tower_face_a;
    m_tower_face_a_isSet = true;
}

bool OAIMatch_Score_Breakdown_2016_Alliance::is_tower_face_a_Set() const{
    return m_tower_face_a_isSet;
}

bool OAIMatch_Score_Breakdown_2016_Alliance::is_tower_face_a_Valid() const{
    return m_tower_face_a_isValid;
}

QString OAIMatch_Score_Breakdown_2016_Alliance::getTowerFaceB() const {
    return m_tower_face_b;
}
void OAIMatch_Score_Breakdown_2016_Alliance::setTowerFaceB(const QString &tower_face_b) {
    m_tower_face_b = tower_face_b;
    m_tower_face_b_isSet = true;
}

bool OAIMatch_Score_Breakdown_2016_Alliance::is_tower_face_b_Set() const{
    return m_tower_face_b_isSet;
}

bool OAIMatch_Score_Breakdown_2016_Alliance::is_tower_face_b_Valid() const{
    return m_tower_face_b_isValid;
}

QString OAIMatch_Score_Breakdown_2016_Alliance::getTowerFaceC() const {
    return m_tower_face_c;
}
void OAIMatch_Score_Breakdown_2016_Alliance::setTowerFaceC(const QString &tower_face_c) {
    m_tower_face_c = tower_face_c;
    m_tower_face_c_isSet = true;
}

bool OAIMatch_Score_Breakdown_2016_Alliance::is_tower_face_c_Set() const{
    return m_tower_face_c_isSet;
}

bool OAIMatch_Score_Breakdown_2016_Alliance::is_tower_face_c_Valid() const{
    return m_tower_face_c_isValid;
}

bool OAIMatch_Score_Breakdown_2016_Alliance::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_adjust_points_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auto_boulder_points_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auto_boulders_high_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auto_boulders_low_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auto_crossing_points_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auto_points_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auto_reach_points_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_breach_points_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_capture_points_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_foul_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_foul_points_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_position1crossings_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_position2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_position2crossings_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_position3_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_position3crossings_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_position4_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_position4crossings_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_position5_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_position5crossings_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_robot1_auto_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_robot2_auto_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_robot3_auto_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tech_foul_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_teleop_boulder_points_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_teleop_boulders_high_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_teleop_boulders_low_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_teleop_challenge_points_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_teleop_crossing_points_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_teleop_defenses_breached_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_teleop_points_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_teleop_scale_points_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_teleop_tower_captured_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_points_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tower_end_strength_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tower_face_a_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tower_face_b_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tower_face_c_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMatch_Score_Breakdown_2016_Alliance::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
