/**
 * The Blue Alliance API v3
 * # Overview    Information and statistics about FIRST Robotics Competition teams and events.   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).
 *
 * The version of the OpenAPI document: 3.8.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMedia.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMedia::OAIMedia(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMedia::OAIMedia() {
    this->initializeModel();
}

OAIMedia::~OAIMedia() {}

void OAIMedia::initializeModel() {

    m_details_isSet = false;
    m_details_isValid = false;

    m_direct_url_isSet = false;
    m_direct_url_isValid = false;

    m_foreign_key_isSet = false;
    m_foreign_key_isValid = false;

    m_preferred_isSet = false;
    m_preferred_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_view_url_isSet = false;
    m_view_url_isValid = false;
}

void OAIMedia::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMedia::fromJsonObject(QJsonObject json) {

    m_details_isValid = ::OpenAPI::fromJsonValue(m_details, json[QString("details")]);
    m_details_isSet = !json[QString("details")].isNull() && m_details_isValid;

    m_direct_url_isValid = ::OpenAPI::fromJsonValue(m_direct_url, json[QString("direct_url")]);
    m_direct_url_isSet = !json[QString("direct_url")].isNull() && m_direct_url_isValid;

    m_foreign_key_isValid = ::OpenAPI::fromJsonValue(m_foreign_key, json[QString("foreign_key")]);
    m_foreign_key_isSet = !json[QString("foreign_key")].isNull() && m_foreign_key_isValid;

    m_preferred_isValid = ::OpenAPI::fromJsonValue(m_preferred, json[QString("preferred")]);
    m_preferred_isSet = !json[QString("preferred")].isNull() && m_preferred_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_view_url_isValid = ::OpenAPI::fromJsonValue(m_view_url, json[QString("view_url")]);
    m_view_url_isSet = !json[QString("view_url")].isNull() && m_view_url_isValid;
}

QString OAIMedia::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMedia::asJsonObject() const {
    QJsonObject obj;
    if (m_details_isSet) {
        obj.insert(QString("details"), ::OpenAPI::toJsonValue(m_details));
    }
    if (m_direct_url_isSet) {
        obj.insert(QString("direct_url"), ::OpenAPI::toJsonValue(m_direct_url));
    }
    if (m_foreign_key_isSet) {
        obj.insert(QString("foreign_key"), ::OpenAPI::toJsonValue(m_foreign_key));
    }
    if (m_preferred_isSet) {
        obj.insert(QString("preferred"), ::OpenAPI::toJsonValue(m_preferred));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_view_url_isSet) {
        obj.insert(QString("view_url"), ::OpenAPI::toJsonValue(m_view_url));
    }
    return obj;
}

OAIObject OAIMedia::getDetails() const {
    return m_details;
}
void OAIMedia::setDetails(const OAIObject &details) {
    m_details = details;
    m_details_isSet = true;
}

bool OAIMedia::is_details_Set() const{
    return m_details_isSet;
}

bool OAIMedia::is_details_Valid() const{
    return m_details_isValid;
}

QString OAIMedia::getDirectUrl() const {
    return m_direct_url;
}
void OAIMedia::setDirectUrl(const QString &direct_url) {
    m_direct_url = direct_url;
    m_direct_url_isSet = true;
}

bool OAIMedia::is_direct_url_Set() const{
    return m_direct_url_isSet;
}

bool OAIMedia::is_direct_url_Valid() const{
    return m_direct_url_isValid;
}

QString OAIMedia::getForeignKey() const {
    return m_foreign_key;
}
void OAIMedia::setForeignKey(const QString &foreign_key) {
    m_foreign_key = foreign_key;
    m_foreign_key_isSet = true;
}

bool OAIMedia::is_foreign_key_Set() const{
    return m_foreign_key_isSet;
}

bool OAIMedia::is_foreign_key_Valid() const{
    return m_foreign_key_isValid;
}

bool OAIMedia::isPreferred() const {
    return m_preferred;
}
void OAIMedia::setPreferred(const bool &preferred) {
    m_preferred = preferred;
    m_preferred_isSet = true;
}

bool OAIMedia::is_preferred_Set() const{
    return m_preferred_isSet;
}

bool OAIMedia::is_preferred_Valid() const{
    return m_preferred_isValid;
}

QString OAIMedia::getType() const {
    return m_type;
}
void OAIMedia::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIMedia::is_type_Set() const{
    return m_type_isSet;
}

bool OAIMedia::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIMedia::getViewUrl() const {
    return m_view_url;
}
void OAIMedia::setViewUrl(const QString &view_url) {
    m_view_url = view_url;
    m_view_url_isSet = true;
}

bool OAIMedia::is_view_url_Set() const{
    return m_view_url_isSet;
}

bool OAIMedia::is_view_url_Valid() const{
    return m_view_url_isValid;
}

bool OAIMedia::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_details_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_direct_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_foreign_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_preferred_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_view_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMedia::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_foreign_key_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
