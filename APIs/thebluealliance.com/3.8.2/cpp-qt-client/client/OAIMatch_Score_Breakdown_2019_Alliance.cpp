/**
 * The Blue Alliance API v3
 * # Overview    Information and statistics about FIRST Robotics Competition teams and events.   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).
 *
 * The version of the OpenAPI document: 3.8.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMatch_Score_Breakdown_2019_Alliance.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMatch_Score_Breakdown_2019_Alliance::OAIMatch_Score_Breakdown_2019_Alliance(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMatch_Score_Breakdown_2019_Alliance::OAIMatch_Score_Breakdown_2019_Alliance() {
    this->initializeModel();
}

OAIMatch_Score_Breakdown_2019_Alliance::~OAIMatch_Score_Breakdown_2019_Alliance() {}

void OAIMatch_Score_Breakdown_2019_Alliance::initializeModel() {

    m_adjust_points_isSet = false;
    m_adjust_points_isValid = false;

    m_auto_points_isSet = false;
    m_auto_points_isValid = false;

    m_bay1_isSet = false;
    m_bay1_isValid = false;

    m_bay2_isSet = false;
    m_bay2_isValid = false;

    m_bay3_isSet = false;
    m_bay3_isValid = false;

    m_bay4_isSet = false;
    m_bay4_isValid = false;

    m_bay5_isSet = false;
    m_bay5_isValid = false;

    m_bay6_isSet = false;
    m_bay6_isValid = false;

    m_bay7_isSet = false;
    m_bay7_isValid = false;

    m_bay8_isSet = false;
    m_bay8_isValid = false;

    m_cargo_points_isSet = false;
    m_cargo_points_isValid = false;

    m_complete_rocket_ranking_point_isSet = false;
    m_complete_rocket_ranking_point_isValid = false;

    m_completed_rocket_far_isSet = false;
    m_completed_rocket_far_isValid = false;

    m_completed_rocket_near_isSet = false;
    m_completed_rocket_near_isValid = false;

    m_endgame_robot1_isSet = false;
    m_endgame_robot1_isValid = false;

    m_endgame_robot2_isSet = false;
    m_endgame_robot2_isValid = false;

    m_endgame_robot3_isSet = false;
    m_endgame_robot3_isValid = false;

    m_foul_count_isSet = false;
    m_foul_count_isValid = false;

    m_foul_points_isSet = false;
    m_foul_points_isValid = false;

    m_hab_climb_points_isSet = false;
    m_hab_climb_points_isValid = false;

    m_hab_docking_ranking_point_isSet = false;
    m_hab_docking_ranking_point_isValid = false;

    m_hab_line_robot1_isSet = false;
    m_hab_line_robot1_isValid = false;

    m_hab_line_robot2_isSet = false;
    m_hab_line_robot2_isValid = false;

    m_hab_line_robot3_isSet = false;
    m_hab_line_robot3_isValid = false;

    m_hatch_panel_points_isSet = false;
    m_hatch_panel_points_isValid = false;

    m_low_left_rocket_far_isSet = false;
    m_low_left_rocket_far_isValid = false;

    m_low_left_rocket_near_isSet = false;
    m_low_left_rocket_near_isValid = false;

    m_low_right_rocket_far_isSet = false;
    m_low_right_rocket_far_isValid = false;

    m_low_right_rocket_near_isSet = false;
    m_low_right_rocket_near_isValid = false;

    m_mid_left_rocket_far_isSet = false;
    m_mid_left_rocket_far_isValid = false;

    m_mid_left_rocket_near_isSet = false;
    m_mid_left_rocket_near_isValid = false;

    m_mid_right_rocket_far_isSet = false;
    m_mid_right_rocket_far_isValid = false;

    m_mid_right_rocket_near_isSet = false;
    m_mid_right_rocket_near_isValid = false;

    m_pre_match_bay1_isSet = false;
    m_pre_match_bay1_isValid = false;

    m_pre_match_bay2_isSet = false;
    m_pre_match_bay2_isValid = false;

    m_pre_match_bay3_isSet = false;
    m_pre_match_bay3_isValid = false;

    m_pre_match_bay6_isSet = false;
    m_pre_match_bay6_isValid = false;

    m_pre_match_bay7_isSet = false;
    m_pre_match_bay7_isValid = false;

    m_pre_match_bay8_isSet = false;
    m_pre_match_bay8_isValid = false;

    m_pre_match_level_robot1_isSet = false;
    m_pre_match_level_robot1_isValid = false;

    m_pre_match_level_robot2_isSet = false;
    m_pre_match_level_robot2_isValid = false;

    m_pre_match_level_robot3_isSet = false;
    m_pre_match_level_robot3_isValid = false;

    m_rp_isSet = false;
    m_rp_isValid = false;

    m_sand_storm_bonus_points_isSet = false;
    m_sand_storm_bonus_points_isValid = false;

    m_tech_foul_count_isSet = false;
    m_tech_foul_count_isValid = false;

    m_teleop_points_isSet = false;
    m_teleop_points_isValid = false;

    m_top_left_rocket_far_isSet = false;
    m_top_left_rocket_far_isValid = false;

    m_top_left_rocket_near_isSet = false;
    m_top_left_rocket_near_isValid = false;

    m_top_right_rocket_far_isSet = false;
    m_top_right_rocket_far_isValid = false;

    m_top_right_rocket_near_isSet = false;
    m_top_right_rocket_near_isValid = false;

    m_total_points_isSet = false;
    m_total_points_isValid = false;
}

void OAIMatch_Score_Breakdown_2019_Alliance::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMatch_Score_Breakdown_2019_Alliance::fromJsonObject(QJsonObject json) {

    m_adjust_points_isValid = ::OpenAPI::fromJsonValue(m_adjust_points, json[QString("adjustPoints")]);
    m_adjust_points_isSet = !json[QString("adjustPoints")].isNull() && m_adjust_points_isValid;

    m_auto_points_isValid = ::OpenAPI::fromJsonValue(m_auto_points, json[QString("autoPoints")]);
    m_auto_points_isSet = !json[QString("autoPoints")].isNull() && m_auto_points_isValid;

    m_bay1_isValid = ::OpenAPI::fromJsonValue(m_bay1, json[QString("bay1")]);
    m_bay1_isSet = !json[QString("bay1")].isNull() && m_bay1_isValid;

    m_bay2_isValid = ::OpenAPI::fromJsonValue(m_bay2, json[QString("bay2")]);
    m_bay2_isSet = !json[QString("bay2")].isNull() && m_bay2_isValid;

    m_bay3_isValid = ::OpenAPI::fromJsonValue(m_bay3, json[QString("bay3")]);
    m_bay3_isSet = !json[QString("bay3")].isNull() && m_bay3_isValid;

    m_bay4_isValid = ::OpenAPI::fromJsonValue(m_bay4, json[QString("bay4")]);
    m_bay4_isSet = !json[QString("bay4")].isNull() && m_bay4_isValid;

    m_bay5_isValid = ::OpenAPI::fromJsonValue(m_bay5, json[QString("bay5")]);
    m_bay5_isSet = !json[QString("bay5")].isNull() && m_bay5_isValid;

    m_bay6_isValid = ::OpenAPI::fromJsonValue(m_bay6, json[QString("bay6")]);
    m_bay6_isSet = !json[QString("bay6")].isNull() && m_bay6_isValid;

    m_bay7_isValid = ::OpenAPI::fromJsonValue(m_bay7, json[QString("bay7")]);
    m_bay7_isSet = !json[QString("bay7")].isNull() && m_bay7_isValid;

    m_bay8_isValid = ::OpenAPI::fromJsonValue(m_bay8, json[QString("bay8")]);
    m_bay8_isSet = !json[QString("bay8")].isNull() && m_bay8_isValid;

    m_cargo_points_isValid = ::OpenAPI::fromJsonValue(m_cargo_points, json[QString("cargoPoints")]);
    m_cargo_points_isSet = !json[QString("cargoPoints")].isNull() && m_cargo_points_isValid;

    m_complete_rocket_ranking_point_isValid = ::OpenAPI::fromJsonValue(m_complete_rocket_ranking_point, json[QString("completeRocketRankingPoint")]);
    m_complete_rocket_ranking_point_isSet = !json[QString("completeRocketRankingPoint")].isNull() && m_complete_rocket_ranking_point_isValid;

    m_completed_rocket_far_isValid = ::OpenAPI::fromJsonValue(m_completed_rocket_far, json[QString("completedRocketFar")]);
    m_completed_rocket_far_isSet = !json[QString("completedRocketFar")].isNull() && m_completed_rocket_far_isValid;

    m_completed_rocket_near_isValid = ::OpenAPI::fromJsonValue(m_completed_rocket_near, json[QString("completedRocketNear")]);
    m_completed_rocket_near_isSet = !json[QString("completedRocketNear")].isNull() && m_completed_rocket_near_isValid;

    m_endgame_robot1_isValid = ::OpenAPI::fromJsonValue(m_endgame_robot1, json[QString("endgameRobot1")]);
    m_endgame_robot1_isSet = !json[QString("endgameRobot1")].isNull() && m_endgame_robot1_isValid;

    m_endgame_robot2_isValid = ::OpenAPI::fromJsonValue(m_endgame_robot2, json[QString("endgameRobot2")]);
    m_endgame_robot2_isSet = !json[QString("endgameRobot2")].isNull() && m_endgame_robot2_isValid;

    m_endgame_robot3_isValid = ::OpenAPI::fromJsonValue(m_endgame_robot3, json[QString("endgameRobot3")]);
    m_endgame_robot3_isSet = !json[QString("endgameRobot3")].isNull() && m_endgame_robot3_isValid;

    m_foul_count_isValid = ::OpenAPI::fromJsonValue(m_foul_count, json[QString("foulCount")]);
    m_foul_count_isSet = !json[QString("foulCount")].isNull() && m_foul_count_isValid;

    m_foul_points_isValid = ::OpenAPI::fromJsonValue(m_foul_points, json[QString("foulPoints")]);
    m_foul_points_isSet = !json[QString("foulPoints")].isNull() && m_foul_points_isValid;

    m_hab_climb_points_isValid = ::OpenAPI::fromJsonValue(m_hab_climb_points, json[QString("habClimbPoints")]);
    m_hab_climb_points_isSet = !json[QString("habClimbPoints")].isNull() && m_hab_climb_points_isValid;

    m_hab_docking_ranking_point_isValid = ::OpenAPI::fromJsonValue(m_hab_docking_ranking_point, json[QString("habDockingRankingPoint")]);
    m_hab_docking_ranking_point_isSet = !json[QString("habDockingRankingPoint")].isNull() && m_hab_docking_ranking_point_isValid;

    m_hab_line_robot1_isValid = ::OpenAPI::fromJsonValue(m_hab_line_robot1, json[QString("habLineRobot1")]);
    m_hab_line_robot1_isSet = !json[QString("habLineRobot1")].isNull() && m_hab_line_robot1_isValid;

    m_hab_line_robot2_isValid = ::OpenAPI::fromJsonValue(m_hab_line_robot2, json[QString("habLineRobot2")]);
    m_hab_line_robot2_isSet = !json[QString("habLineRobot2")].isNull() && m_hab_line_robot2_isValid;

    m_hab_line_robot3_isValid = ::OpenAPI::fromJsonValue(m_hab_line_robot3, json[QString("habLineRobot3")]);
    m_hab_line_robot3_isSet = !json[QString("habLineRobot3")].isNull() && m_hab_line_robot3_isValid;

    m_hatch_panel_points_isValid = ::OpenAPI::fromJsonValue(m_hatch_panel_points, json[QString("hatchPanelPoints")]);
    m_hatch_panel_points_isSet = !json[QString("hatchPanelPoints")].isNull() && m_hatch_panel_points_isValid;

    m_low_left_rocket_far_isValid = ::OpenAPI::fromJsonValue(m_low_left_rocket_far, json[QString("lowLeftRocketFar")]);
    m_low_left_rocket_far_isSet = !json[QString("lowLeftRocketFar")].isNull() && m_low_left_rocket_far_isValid;

    m_low_left_rocket_near_isValid = ::OpenAPI::fromJsonValue(m_low_left_rocket_near, json[QString("lowLeftRocketNear")]);
    m_low_left_rocket_near_isSet = !json[QString("lowLeftRocketNear")].isNull() && m_low_left_rocket_near_isValid;

    m_low_right_rocket_far_isValid = ::OpenAPI::fromJsonValue(m_low_right_rocket_far, json[QString("lowRightRocketFar")]);
    m_low_right_rocket_far_isSet = !json[QString("lowRightRocketFar")].isNull() && m_low_right_rocket_far_isValid;

    m_low_right_rocket_near_isValid = ::OpenAPI::fromJsonValue(m_low_right_rocket_near, json[QString("lowRightRocketNear")]);
    m_low_right_rocket_near_isSet = !json[QString("lowRightRocketNear")].isNull() && m_low_right_rocket_near_isValid;

    m_mid_left_rocket_far_isValid = ::OpenAPI::fromJsonValue(m_mid_left_rocket_far, json[QString("midLeftRocketFar")]);
    m_mid_left_rocket_far_isSet = !json[QString("midLeftRocketFar")].isNull() && m_mid_left_rocket_far_isValid;

    m_mid_left_rocket_near_isValid = ::OpenAPI::fromJsonValue(m_mid_left_rocket_near, json[QString("midLeftRocketNear")]);
    m_mid_left_rocket_near_isSet = !json[QString("midLeftRocketNear")].isNull() && m_mid_left_rocket_near_isValid;

    m_mid_right_rocket_far_isValid = ::OpenAPI::fromJsonValue(m_mid_right_rocket_far, json[QString("midRightRocketFar")]);
    m_mid_right_rocket_far_isSet = !json[QString("midRightRocketFar")].isNull() && m_mid_right_rocket_far_isValid;

    m_mid_right_rocket_near_isValid = ::OpenAPI::fromJsonValue(m_mid_right_rocket_near, json[QString("midRightRocketNear")]);
    m_mid_right_rocket_near_isSet = !json[QString("midRightRocketNear")].isNull() && m_mid_right_rocket_near_isValid;

    m_pre_match_bay1_isValid = ::OpenAPI::fromJsonValue(m_pre_match_bay1, json[QString("preMatchBay1")]);
    m_pre_match_bay1_isSet = !json[QString("preMatchBay1")].isNull() && m_pre_match_bay1_isValid;

    m_pre_match_bay2_isValid = ::OpenAPI::fromJsonValue(m_pre_match_bay2, json[QString("preMatchBay2")]);
    m_pre_match_bay2_isSet = !json[QString("preMatchBay2")].isNull() && m_pre_match_bay2_isValid;

    m_pre_match_bay3_isValid = ::OpenAPI::fromJsonValue(m_pre_match_bay3, json[QString("preMatchBay3")]);
    m_pre_match_bay3_isSet = !json[QString("preMatchBay3")].isNull() && m_pre_match_bay3_isValid;

    m_pre_match_bay6_isValid = ::OpenAPI::fromJsonValue(m_pre_match_bay6, json[QString("preMatchBay6")]);
    m_pre_match_bay6_isSet = !json[QString("preMatchBay6")].isNull() && m_pre_match_bay6_isValid;

    m_pre_match_bay7_isValid = ::OpenAPI::fromJsonValue(m_pre_match_bay7, json[QString("preMatchBay7")]);
    m_pre_match_bay7_isSet = !json[QString("preMatchBay7")].isNull() && m_pre_match_bay7_isValid;

    m_pre_match_bay8_isValid = ::OpenAPI::fromJsonValue(m_pre_match_bay8, json[QString("preMatchBay8")]);
    m_pre_match_bay8_isSet = !json[QString("preMatchBay8")].isNull() && m_pre_match_bay8_isValid;

    m_pre_match_level_robot1_isValid = ::OpenAPI::fromJsonValue(m_pre_match_level_robot1, json[QString("preMatchLevelRobot1")]);
    m_pre_match_level_robot1_isSet = !json[QString("preMatchLevelRobot1")].isNull() && m_pre_match_level_robot1_isValid;

    m_pre_match_level_robot2_isValid = ::OpenAPI::fromJsonValue(m_pre_match_level_robot2, json[QString("preMatchLevelRobot2")]);
    m_pre_match_level_robot2_isSet = !json[QString("preMatchLevelRobot2")].isNull() && m_pre_match_level_robot2_isValid;

    m_pre_match_level_robot3_isValid = ::OpenAPI::fromJsonValue(m_pre_match_level_robot3, json[QString("preMatchLevelRobot3")]);
    m_pre_match_level_robot3_isSet = !json[QString("preMatchLevelRobot3")].isNull() && m_pre_match_level_robot3_isValid;

    m_rp_isValid = ::OpenAPI::fromJsonValue(m_rp, json[QString("rp")]);
    m_rp_isSet = !json[QString("rp")].isNull() && m_rp_isValid;

    m_sand_storm_bonus_points_isValid = ::OpenAPI::fromJsonValue(m_sand_storm_bonus_points, json[QString("sandStormBonusPoints")]);
    m_sand_storm_bonus_points_isSet = !json[QString("sandStormBonusPoints")].isNull() && m_sand_storm_bonus_points_isValid;

    m_tech_foul_count_isValid = ::OpenAPI::fromJsonValue(m_tech_foul_count, json[QString("techFoulCount")]);
    m_tech_foul_count_isSet = !json[QString("techFoulCount")].isNull() && m_tech_foul_count_isValid;

    m_teleop_points_isValid = ::OpenAPI::fromJsonValue(m_teleop_points, json[QString("teleopPoints")]);
    m_teleop_points_isSet = !json[QString("teleopPoints")].isNull() && m_teleop_points_isValid;

    m_top_left_rocket_far_isValid = ::OpenAPI::fromJsonValue(m_top_left_rocket_far, json[QString("topLeftRocketFar")]);
    m_top_left_rocket_far_isSet = !json[QString("topLeftRocketFar")].isNull() && m_top_left_rocket_far_isValid;

    m_top_left_rocket_near_isValid = ::OpenAPI::fromJsonValue(m_top_left_rocket_near, json[QString("topLeftRocketNear")]);
    m_top_left_rocket_near_isSet = !json[QString("topLeftRocketNear")].isNull() && m_top_left_rocket_near_isValid;

    m_top_right_rocket_far_isValid = ::OpenAPI::fromJsonValue(m_top_right_rocket_far, json[QString("topRightRocketFar")]);
    m_top_right_rocket_far_isSet = !json[QString("topRightRocketFar")].isNull() && m_top_right_rocket_far_isValid;

    m_top_right_rocket_near_isValid = ::OpenAPI::fromJsonValue(m_top_right_rocket_near, json[QString("topRightRocketNear")]);
    m_top_right_rocket_near_isSet = !json[QString("topRightRocketNear")].isNull() && m_top_right_rocket_near_isValid;

    m_total_points_isValid = ::OpenAPI::fromJsonValue(m_total_points, json[QString("totalPoints")]);
    m_total_points_isSet = !json[QString("totalPoints")].isNull() && m_total_points_isValid;
}

QString OAIMatch_Score_Breakdown_2019_Alliance::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMatch_Score_Breakdown_2019_Alliance::asJsonObject() const {
    QJsonObject obj;
    if (m_adjust_points_isSet) {
        obj.insert(QString("adjustPoints"), ::OpenAPI::toJsonValue(m_adjust_points));
    }
    if (m_auto_points_isSet) {
        obj.insert(QString("autoPoints"), ::OpenAPI::toJsonValue(m_auto_points));
    }
    if (m_bay1_isSet) {
        obj.insert(QString("bay1"), ::OpenAPI::toJsonValue(m_bay1));
    }
    if (m_bay2_isSet) {
        obj.insert(QString("bay2"), ::OpenAPI::toJsonValue(m_bay2));
    }
    if (m_bay3_isSet) {
        obj.insert(QString("bay3"), ::OpenAPI::toJsonValue(m_bay3));
    }
    if (m_bay4_isSet) {
        obj.insert(QString("bay4"), ::OpenAPI::toJsonValue(m_bay4));
    }
    if (m_bay5_isSet) {
        obj.insert(QString("bay5"), ::OpenAPI::toJsonValue(m_bay5));
    }
    if (m_bay6_isSet) {
        obj.insert(QString("bay6"), ::OpenAPI::toJsonValue(m_bay6));
    }
    if (m_bay7_isSet) {
        obj.insert(QString("bay7"), ::OpenAPI::toJsonValue(m_bay7));
    }
    if (m_bay8_isSet) {
        obj.insert(QString("bay8"), ::OpenAPI::toJsonValue(m_bay8));
    }
    if (m_cargo_points_isSet) {
        obj.insert(QString("cargoPoints"), ::OpenAPI::toJsonValue(m_cargo_points));
    }
    if (m_complete_rocket_ranking_point_isSet) {
        obj.insert(QString("completeRocketRankingPoint"), ::OpenAPI::toJsonValue(m_complete_rocket_ranking_point));
    }
    if (m_completed_rocket_far_isSet) {
        obj.insert(QString("completedRocketFar"), ::OpenAPI::toJsonValue(m_completed_rocket_far));
    }
    if (m_completed_rocket_near_isSet) {
        obj.insert(QString("completedRocketNear"), ::OpenAPI::toJsonValue(m_completed_rocket_near));
    }
    if (m_endgame_robot1_isSet) {
        obj.insert(QString("endgameRobot1"), ::OpenAPI::toJsonValue(m_endgame_robot1));
    }
    if (m_endgame_robot2_isSet) {
        obj.insert(QString("endgameRobot2"), ::OpenAPI::toJsonValue(m_endgame_robot2));
    }
    if (m_endgame_robot3_isSet) {
        obj.insert(QString("endgameRobot3"), ::OpenAPI::toJsonValue(m_endgame_robot3));
    }
    if (m_foul_count_isSet) {
        obj.insert(QString("foulCount"), ::OpenAPI::toJsonValue(m_foul_count));
    }
    if (m_foul_points_isSet) {
        obj.insert(QString("foulPoints"), ::OpenAPI::toJsonValue(m_foul_points));
    }
    if (m_hab_climb_points_isSet) {
        obj.insert(QString("habClimbPoints"), ::OpenAPI::toJsonValue(m_hab_climb_points));
    }
    if (m_hab_docking_ranking_point_isSet) {
        obj.insert(QString("habDockingRankingPoint"), ::OpenAPI::toJsonValue(m_hab_docking_ranking_point));
    }
    if (m_hab_line_robot1_isSet) {
        obj.insert(QString("habLineRobot1"), ::OpenAPI::toJsonValue(m_hab_line_robot1));
    }
    if (m_hab_line_robot2_isSet) {
        obj.insert(QString("habLineRobot2"), ::OpenAPI::toJsonValue(m_hab_line_robot2));
    }
    if (m_hab_line_robot3_isSet) {
        obj.insert(QString("habLineRobot3"), ::OpenAPI::toJsonValue(m_hab_line_robot3));
    }
    if (m_hatch_panel_points_isSet) {
        obj.insert(QString("hatchPanelPoints"), ::OpenAPI::toJsonValue(m_hatch_panel_points));
    }
    if (m_low_left_rocket_far_isSet) {
        obj.insert(QString("lowLeftRocketFar"), ::OpenAPI::toJsonValue(m_low_left_rocket_far));
    }
    if (m_low_left_rocket_near_isSet) {
        obj.insert(QString("lowLeftRocketNear"), ::OpenAPI::toJsonValue(m_low_left_rocket_near));
    }
    if (m_low_right_rocket_far_isSet) {
        obj.insert(QString("lowRightRocketFar"), ::OpenAPI::toJsonValue(m_low_right_rocket_far));
    }
    if (m_low_right_rocket_near_isSet) {
        obj.insert(QString("lowRightRocketNear"), ::OpenAPI::toJsonValue(m_low_right_rocket_near));
    }
    if (m_mid_left_rocket_far_isSet) {
        obj.insert(QString("midLeftRocketFar"), ::OpenAPI::toJsonValue(m_mid_left_rocket_far));
    }
    if (m_mid_left_rocket_near_isSet) {
        obj.insert(QString("midLeftRocketNear"), ::OpenAPI::toJsonValue(m_mid_left_rocket_near));
    }
    if (m_mid_right_rocket_far_isSet) {
        obj.insert(QString("midRightRocketFar"), ::OpenAPI::toJsonValue(m_mid_right_rocket_far));
    }
    if (m_mid_right_rocket_near_isSet) {
        obj.insert(QString("midRightRocketNear"), ::OpenAPI::toJsonValue(m_mid_right_rocket_near));
    }
    if (m_pre_match_bay1_isSet) {
        obj.insert(QString("preMatchBay1"), ::OpenAPI::toJsonValue(m_pre_match_bay1));
    }
    if (m_pre_match_bay2_isSet) {
        obj.insert(QString("preMatchBay2"), ::OpenAPI::toJsonValue(m_pre_match_bay2));
    }
    if (m_pre_match_bay3_isSet) {
        obj.insert(QString("preMatchBay3"), ::OpenAPI::toJsonValue(m_pre_match_bay3));
    }
    if (m_pre_match_bay6_isSet) {
        obj.insert(QString("preMatchBay6"), ::OpenAPI::toJsonValue(m_pre_match_bay6));
    }
    if (m_pre_match_bay7_isSet) {
        obj.insert(QString("preMatchBay7"), ::OpenAPI::toJsonValue(m_pre_match_bay7));
    }
    if (m_pre_match_bay8_isSet) {
        obj.insert(QString("preMatchBay8"), ::OpenAPI::toJsonValue(m_pre_match_bay8));
    }
    if (m_pre_match_level_robot1_isSet) {
        obj.insert(QString("preMatchLevelRobot1"), ::OpenAPI::toJsonValue(m_pre_match_level_robot1));
    }
    if (m_pre_match_level_robot2_isSet) {
        obj.insert(QString("preMatchLevelRobot2"), ::OpenAPI::toJsonValue(m_pre_match_level_robot2));
    }
    if (m_pre_match_level_robot3_isSet) {
        obj.insert(QString("preMatchLevelRobot3"), ::OpenAPI::toJsonValue(m_pre_match_level_robot3));
    }
    if (m_rp_isSet) {
        obj.insert(QString("rp"), ::OpenAPI::toJsonValue(m_rp));
    }
    if (m_sand_storm_bonus_points_isSet) {
        obj.insert(QString("sandStormBonusPoints"), ::OpenAPI::toJsonValue(m_sand_storm_bonus_points));
    }
    if (m_tech_foul_count_isSet) {
        obj.insert(QString("techFoulCount"), ::OpenAPI::toJsonValue(m_tech_foul_count));
    }
    if (m_teleop_points_isSet) {
        obj.insert(QString("teleopPoints"), ::OpenAPI::toJsonValue(m_teleop_points));
    }
    if (m_top_left_rocket_far_isSet) {
        obj.insert(QString("topLeftRocketFar"), ::OpenAPI::toJsonValue(m_top_left_rocket_far));
    }
    if (m_top_left_rocket_near_isSet) {
        obj.insert(QString("topLeftRocketNear"), ::OpenAPI::toJsonValue(m_top_left_rocket_near));
    }
    if (m_top_right_rocket_far_isSet) {
        obj.insert(QString("topRightRocketFar"), ::OpenAPI::toJsonValue(m_top_right_rocket_far));
    }
    if (m_top_right_rocket_near_isSet) {
        obj.insert(QString("topRightRocketNear"), ::OpenAPI::toJsonValue(m_top_right_rocket_near));
    }
    if (m_total_points_isSet) {
        obj.insert(QString("totalPoints"), ::OpenAPI::toJsonValue(m_total_points));
    }
    return obj;
}

qint32 OAIMatch_Score_Breakdown_2019_Alliance::getAdjustPoints() const {
    return m_adjust_points;
}
void OAIMatch_Score_Breakdown_2019_Alliance::setAdjustPoints(const qint32 &adjust_points) {
    m_adjust_points = adjust_points;
    m_adjust_points_isSet = true;
}

bool OAIMatch_Score_Breakdown_2019_Alliance::is_adjust_points_Set() const{
    return m_adjust_points_isSet;
}

bool OAIMatch_Score_Breakdown_2019_Alliance::is_adjust_points_Valid() const{
    return m_adjust_points_isValid;
}

qint32 OAIMatch_Score_Breakdown_2019_Alliance::getAutoPoints() const {
    return m_auto_points;
}
void OAIMatch_Score_Breakdown_2019_Alliance::setAutoPoints(const qint32 &auto_points) {
    m_auto_points = auto_points;
    m_auto_points_isSet = true;
}

bool OAIMatch_Score_Breakdown_2019_Alliance::is_auto_points_Set() const{
    return m_auto_points_isSet;
}

bool OAIMatch_Score_Breakdown_2019_Alliance::is_auto_points_Valid() const{
    return m_auto_points_isValid;
}

QString OAIMatch_Score_Breakdown_2019_Alliance::getBay1() const {
    return m_bay1;
}
void OAIMatch_Score_Breakdown_2019_Alliance::setBay1(const QString &bay1) {
    m_bay1 = bay1;
    m_bay1_isSet = true;
}

bool OAIMatch_Score_Breakdown_2019_Alliance::is_bay1_Set() const{
    return m_bay1_isSet;
}

bool OAIMatch_Score_Breakdown_2019_Alliance::is_bay1_Valid() const{
    return m_bay1_isValid;
}

QString OAIMatch_Score_Breakdown_2019_Alliance::getBay2() const {
    return m_bay2;
}
void OAIMatch_Score_Breakdown_2019_Alliance::setBay2(const QString &bay2) {
    m_bay2 = bay2;
    m_bay2_isSet = true;
}

bool OAIMatch_Score_Breakdown_2019_Alliance::is_bay2_Set() const{
    return m_bay2_isSet;
}

bool OAIMatch_Score_Breakdown_2019_Alliance::is_bay2_Valid() const{
    return m_bay2_isValid;
}

QString OAIMatch_Score_Breakdown_2019_Alliance::getBay3() const {
    return m_bay3;
}
void OAIMatch_Score_Breakdown_2019_Alliance::setBay3(const QString &bay3) {
    m_bay3 = bay3;
    m_bay3_isSet = true;
}

bool OAIMatch_Score_Breakdown_2019_Alliance::is_bay3_Set() const{
    return m_bay3_isSet;
}

bool OAIMatch_Score_Breakdown_2019_Alliance::is_bay3_Valid() const{
    return m_bay3_isValid;
}

QString OAIMatch_Score_Breakdown_2019_Alliance::getBay4() const {
    return m_bay4;
}
void OAIMatch_Score_Breakdown_2019_Alliance::setBay4(const QString &bay4) {
    m_bay4 = bay4;
    m_bay4_isSet = true;
}

bool OAIMatch_Score_Breakdown_2019_Alliance::is_bay4_Set() const{
    return m_bay4_isSet;
}

bool OAIMatch_Score_Breakdown_2019_Alliance::is_bay4_Valid() const{
    return m_bay4_isValid;
}

QString OAIMatch_Score_Breakdown_2019_Alliance::getBay5() const {
    return m_bay5;
}
void OAIMatch_Score_Breakdown_2019_Alliance::setBay5(const QString &bay5) {
    m_bay5 = bay5;
    m_bay5_isSet = true;
}

bool OAIMatch_Score_Breakdown_2019_Alliance::is_bay5_Set() const{
    return m_bay5_isSet;
}

bool OAIMatch_Score_Breakdown_2019_Alliance::is_bay5_Valid() const{
    return m_bay5_isValid;
}

QString OAIMatch_Score_Breakdown_2019_Alliance::getBay6() const {
    return m_bay6;
}
void OAIMatch_Score_Breakdown_2019_Alliance::setBay6(const QString &bay6) {
    m_bay6 = bay6;
    m_bay6_isSet = true;
}

bool OAIMatch_Score_Breakdown_2019_Alliance::is_bay6_Set() const{
    return m_bay6_isSet;
}

bool OAIMatch_Score_Breakdown_2019_Alliance::is_bay6_Valid() const{
    return m_bay6_isValid;
}

QString OAIMatch_Score_Breakdown_2019_Alliance::getBay7() const {
    return m_bay7;
}
void OAIMatch_Score_Breakdown_2019_Alliance::setBay7(const QString &bay7) {
    m_bay7 = bay7;
    m_bay7_isSet = true;
}

bool OAIMatch_Score_Breakdown_2019_Alliance::is_bay7_Set() const{
    return m_bay7_isSet;
}

bool OAIMatch_Score_Breakdown_2019_Alliance::is_bay7_Valid() const{
    return m_bay7_isValid;
}

QString OAIMatch_Score_Breakdown_2019_Alliance::getBay8() const {
    return m_bay8;
}
void OAIMatch_Score_Breakdown_2019_Alliance::setBay8(const QString &bay8) {
    m_bay8 = bay8;
    m_bay8_isSet = true;
}

bool OAIMatch_Score_Breakdown_2019_Alliance::is_bay8_Set() const{
    return m_bay8_isSet;
}

bool OAIMatch_Score_Breakdown_2019_Alliance::is_bay8_Valid() const{
    return m_bay8_isValid;
}

qint32 OAIMatch_Score_Breakdown_2019_Alliance::getCargoPoints() const {
    return m_cargo_points;
}
void OAIMatch_Score_Breakdown_2019_Alliance::setCargoPoints(const qint32 &cargo_points) {
    m_cargo_points = cargo_points;
    m_cargo_points_isSet = true;
}

bool OAIMatch_Score_Breakdown_2019_Alliance::is_cargo_points_Set() const{
    return m_cargo_points_isSet;
}

bool OAIMatch_Score_Breakdown_2019_Alliance::is_cargo_points_Valid() const{
    return m_cargo_points_isValid;
}

bool OAIMatch_Score_Breakdown_2019_Alliance::isCompleteRocketRankingPoint() const {
    return m_complete_rocket_ranking_point;
}
void OAIMatch_Score_Breakdown_2019_Alliance::setCompleteRocketRankingPoint(const bool &complete_rocket_ranking_point) {
    m_complete_rocket_ranking_point = complete_rocket_ranking_point;
    m_complete_rocket_ranking_point_isSet = true;
}

bool OAIMatch_Score_Breakdown_2019_Alliance::is_complete_rocket_ranking_point_Set() const{
    return m_complete_rocket_ranking_point_isSet;
}

bool OAIMatch_Score_Breakdown_2019_Alliance::is_complete_rocket_ranking_point_Valid() const{
    return m_complete_rocket_ranking_point_isValid;
}

bool OAIMatch_Score_Breakdown_2019_Alliance::isCompletedRocketFar() const {
    return m_completed_rocket_far;
}
void OAIMatch_Score_Breakdown_2019_Alliance::setCompletedRocketFar(const bool &completed_rocket_far) {
    m_completed_rocket_far = completed_rocket_far;
    m_completed_rocket_far_isSet = true;
}

bool OAIMatch_Score_Breakdown_2019_Alliance::is_completed_rocket_far_Set() const{
    return m_completed_rocket_far_isSet;
}

bool OAIMatch_Score_Breakdown_2019_Alliance::is_completed_rocket_far_Valid() const{
    return m_completed_rocket_far_isValid;
}

bool OAIMatch_Score_Breakdown_2019_Alliance::isCompletedRocketNear() const {
    return m_completed_rocket_near;
}
void OAIMatch_Score_Breakdown_2019_Alliance::setCompletedRocketNear(const bool &completed_rocket_near) {
    m_completed_rocket_near = completed_rocket_near;
    m_completed_rocket_near_isSet = true;
}

bool OAIMatch_Score_Breakdown_2019_Alliance::is_completed_rocket_near_Set() const{
    return m_completed_rocket_near_isSet;
}

bool OAIMatch_Score_Breakdown_2019_Alliance::is_completed_rocket_near_Valid() const{
    return m_completed_rocket_near_isValid;
}

QString OAIMatch_Score_Breakdown_2019_Alliance::getEndgameRobot1() const {
    return m_endgame_robot1;
}
void OAIMatch_Score_Breakdown_2019_Alliance::setEndgameRobot1(const QString &endgame_robot1) {
    m_endgame_robot1 = endgame_robot1;
    m_endgame_robot1_isSet = true;
}

bool OAIMatch_Score_Breakdown_2019_Alliance::is_endgame_robot1_Set() const{
    return m_endgame_robot1_isSet;
}

bool OAIMatch_Score_Breakdown_2019_Alliance::is_endgame_robot1_Valid() const{
    return m_endgame_robot1_isValid;
}

QString OAIMatch_Score_Breakdown_2019_Alliance::getEndgameRobot2() const {
    return m_endgame_robot2;
}
void OAIMatch_Score_Breakdown_2019_Alliance::setEndgameRobot2(const QString &endgame_robot2) {
    m_endgame_robot2 = endgame_robot2;
    m_endgame_robot2_isSet = true;
}

bool OAIMatch_Score_Breakdown_2019_Alliance::is_endgame_robot2_Set() const{
    return m_endgame_robot2_isSet;
}

bool OAIMatch_Score_Breakdown_2019_Alliance::is_endgame_robot2_Valid() const{
    return m_endgame_robot2_isValid;
}

QString OAIMatch_Score_Breakdown_2019_Alliance::getEndgameRobot3() const {
    return m_endgame_robot3;
}
void OAIMatch_Score_Breakdown_2019_Alliance::setEndgameRobot3(const QString &endgame_robot3) {
    m_endgame_robot3 = endgame_robot3;
    m_endgame_robot3_isSet = true;
}

bool OAIMatch_Score_Breakdown_2019_Alliance::is_endgame_robot3_Set() const{
    return m_endgame_robot3_isSet;
}

bool OAIMatch_Score_Breakdown_2019_Alliance::is_endgame_robot3_Valid() const{
    return m_endgame_robot3_isValid;
}

qint32 OAIMatch_Score_Breakdown_2019_Alliance::getFoulCount() const {
    return m_foul_count;
}
void OAIMatch_Score_Breakdown_2019_Alliance::setFoulCount(const qint32 &foul_count) {
    m_foul_count = foul_count;
    m_foul_count_isSet = true;
}

bool OAIMatch_Score_Breakdown_2019_Alliance::is_foul_count_Set() const{
    return m_foul_count_isSet;
}

bool OAIMatch_Score_Breakdown_2019_Alliance::is_foul_count_Valid() const{
    return m_foul_count_isValid;
}

qint32 OAIMatch_Score_Breakdown_2019_Alliance::getFoulPoints() const {
    return m_foul_points;
}
void OAIMatch_Score_Breakdown_2019_Alliance::setFoulPoints(const qint32 &foul_points) {
    m_foul_points = foul_points;
    m_foul_points_isSet = true;
}

bool OAIMatch_Score_Breakdown_2019_Alliance::is_foul_points_Set() const{
    return m_foul_points_isSet;
}

bool OAIMatch_Score_Breakdown_2019_Alliance::is_foul_points_Valid() const{
    return m_foul_points_isValid;
}

qint32 OAIMatch_Score_Breakdown_2019_Alliance::getHabClimbPoints() const {
    return m_hab_climb_points;
}
void OAIMatch_Score_Breakdown_2019_Alliance::setHabClimbPoints(const qint32 &hab_climb_points) {
    m_hab_climb_points = hab_climb_points;
    m_hab_climb_points_isSet = true;
}

bool OAIMatch_Score_Breakdown_2019_Alliance::is_hab_climb_points_Set() const{
    return m_hab_climb_points_isSet;
}

bool OAIMatch_Score_Breakdown_2019_Alliance::is_hab_climb_points_Valid() const{
    return m_hab_climb_points_isValid;
}

bool OAIMatch_Score_Breakdown_2019_Alliance::isHabDockingRankingPoint() const {
    return m_hab_docking_ranking_point;
}
void OAIMatch_Score_Breakdown_2019_Alliance::setHabDockingRankingPoint(const bool &hab_docking_ranking_point) {
    m_hab_docking_ranking_point = hab_docking_ranking_point;
    m_hab_docking_ranking_point_isSet = true;
}

bool OAIMatch_Score_Breakdown_2019_Alliance::is_hab_docking_ranking_point_Set() const{
    return m_hab_docking_ranking_point_isSet;
}

bool OAIMatch_Score_Breakdown_2019_Alliance::is_hab_docking_ranking_point_Valid() const{
    return m_hab_docking_ranking_point_isValid;
}

QString OAIMatch_Score_Breakdown_2019_Alliance::getHabLineRobot1() const {
    return m_hab_line_robot1;
}
void OAIMatch_Score_Breakdown_2019_Alliance::setHabLineRobot1(const QString &hab_line_robot1) {
    m_hab_line_robot1 = hab_line_robot1;
    m_hab_line_robot1_isSet = true;
}

bool OAIMatch_Score_Breakdown_2019_Alliance::is_hab_line_robot1_Set() const{
    return m_hab_line_robot1_isSet;
}

bool OAIMatch_Score_Breakdown_2019_Alliance::is_hab_line_robot1_Valid() const{
    return m_hab_line_robot1_isValid;
}

QString OAIMatch_Score_Breakdown_2019_Alliance::getHabLineRobot2() const {
    return m_hab_line_robot2;
}
void OAIMatch_Score_Breakdown_2019_Alliance::setHabLineRobot2(const QString &hab_line_robot2) {
    m_hab_line_robot2 = hab_line_robot2;
    m_hab_line_robot2_isSet = true;
}

bool OAIMatch_Score_Breakdown_2019_Alliance::is_hab_line_robot2_Set() const{
    return m_hab_line_robot2_isSet;
}

bool OAIMatch_Score_Breakdown_2019_Alliance::is_hab_line_robot2_Valid() const{
    return m_hab_line_robot2_isValid;
}

QString OAIMatch_Score_Breakdown_2019_Alliance::getHabLineRobot3() const {
    return m_hab_line_robot3;
}
void OAIMatch_Score_Breakdown_2019_Alliance::setHabLineRobot3(const QString &hab_line_robot3) {
    m_hab_line_robot3 = hab_line_robot3;
    m_hab_line_robot3_isSet = true;
}

bool OAIMatch_Score_Breakdown_2019_Alliance::is_hab_line_robot3_Set() const{
    return m_hab_line_robot3_isSet;
}

bool OAIMatch_Score_Breakdown_2019_Alliance::is_hab_line_robot3_Valid() const{
    return m_hab_line_robot3_isValid;
}

qint32 OAIMatch_Score_Breakdown_2019_Alliance::getHatchPanelPoints() const {
    return m_hatch_panel_points;
}
void OAIMatch_Score_Breakdown_2019_Alliance::setHatchPanelPoints(const qint32 &hatch_panel_points) {
    m_hatch_panel_points = hatch_panel_points;
    m_hatch_panel_points_isSet = true;
}

bool OAIMatch_Score_Breakdown_2019_Alliance::is_hatch_panel_points_Set() const{
    return m_hatch_panel_points_isSet;
}

bool OAIMatch_Score_Breakdown_2019_Alliance::is_hatch_panel_points_Valid() const{
    return m_hatch_panel_points_isValid;
}

QString OAIMatch_Score_Breakdown_2019_Alliance::getLowLeftRocketFar() const {
    return m_low_left_rocket_far;
}
void OAIMatch_Score_Breakdown_2019_Alliance::setLowLeftRocketFar(const QString &low_left_rocket_far) {
    m_low_left_rocket_far = low_left_rocket_far;
    m_low_left_rocket_far_isSet = true;
}

bool OAIMatch_Score_Breakdown_2019_Alliance::is_low_left_rocket_far_Set() const{
    return m_low_left_rocket_far_isSet;
}

bool OAIMatch_Score_Breakdown_2019_Alliance::is_low_left_rocket_far_Valid() const{
    return m_low_left_rocket_far_isValid;
}

QString OAIMatch_Score_Breakdown_2019_Alliance::getLowLeftRocketNear() const {
    return m_low_left_rocket_near;
}
void OAIMatch_Score_Breakdown_2019_Alliance::setLowLeftRocketNear(const QString &low_left_rocket_near) {
    m_low_left_rocket_near = low_left_rocket_near;
    m_low_left_rocket_near_isSet = true;
}

bool OAIMatch_Score_Breakdown_2019_Alliance::is_low_left_rocket_near_Set() const{
    return m_low_left_rocket_near_isSet;
}

bool OAIMatch_Score_Breakdown_2019_Alliance::is_low_left_rocket_near_Valid() const{
    return m_low_left_rocket_near_isValid;
}

QString OAIMatch_Score_Breakdown_2019_Alliance::getLowRightRocketFar() const {
    return m_low_right_rocket_far;
}
void OAIMatch_Score_Breakdown_2019_Alliance::setLowRightRocketFar(const QString &low_right_rocket_far) {
    m_low_right_rocket_far = low_right_rocket_far;
    m_low_right_rocket_far_isSet = true;
}

bool OAIMatch_Score_Breakdown_2019_Alliance::is_low_right_rocket_far_Set() const{
    return m_low_right_rocket_far_isSet;
}

bool OAIMatch_Score_Breakdown_2019_Alliance::is_low_right_rocket_far_Valid() const{
    return m_low_right_rocket_far_isValid;
}

QString OAIMatch_Score_Breakdown_2019_Alliance::getLowRightRocketNear() const {
    return m_low_right_rocket_near;
}
void OAIMatch_Score_Breakdown_2019_Alliance::setLowRightRocketNear(const QString &low_right_rocket_near) {
    m_low_right_rocket_near = low_right_rocket_near;
    m_low_right_rocket_near_isSet = true;
}

bool OAIMatch_Score_Breakdown_2019_Alliance::is_low_right_rocket_near_Set() const{
    return m_low_right_rocket_near_isSet;
}

bool OAIMatch_Score_Breakdown_2019_Alliance::is_low_right_rocket_near_Valid() const{
    return m_low_right_rocket_near_isValid;
}

QString OAIMatch_Score_Breakdown_2019_Alliance::getMidLeftRocketFar() const {
    return m_mid_left_rocket_far;
}
void OAIMatch_Score_Breakdown_2019_Alliance::setMidLeftRocketFar(const QString &mid_left_rocket_far) {
    m_mid_left_rocket_far = mid_left_rocket_far;
    m_mid_left_rocket_far_isSet = true;
}

bool OAIMatch_Score_Breakdown_2019_Alliance::is_mid_left_rocket_far_Set() const{
    return m_mid_left_rocket_far_isSet;
}

bool OAIMatch_Score_Breakdown_2019_Alliance::is_mid_left_rocket_far_Valid() const{
    return m_mid_left_rocket_far_isValid;
}

QString OAIMatch_Score_Breakdown_2019_Alliance::getMidLeftRocketNear() const {
    return m_mid_left_rocket_near;
}
void OAIMatch_Score_Breakdown_2019_Alliance::setMidLeftRocketNear(const QString &mid_left_rocket_near) {
    m_mid_left_rocket_near = mid_left_rocket_near;
    m_mid_left_rocket_near_isSet = true;
}

bool OAIMatch_Score_Breakdown_2019_Alliance::is_mid_left_rocket_near_Set() const{
    return m_mid_left_rocket_near_isSet;
}

bool OAIMatch_Score_Breakdown_2019_Alliance::is_mid_left_rocket_near_Valid() const{
    return m_mid_left_rocket_near_isValid;
}

QString OAIMatch_Score_Breakdown_2019_Alliance::getMidRightRocketFar() const {
    return m_mid_right_rocket_far;
}
void OAIMatch_Score_Breakdown_2019_Alliance::setMidRightRocketFar(const QString &mid_right_rocket_far) {
    m_mid_right_rocket_far = mid_right_rocket_far;
    m_mid_right_rocket_far_isSet = true;
}

bool OAIMatch_Score_Breakdown_2019_Alliance::is_mid_right_rocket_far_Set() const{
    return m_mid_right_rocket_far_isSet;
}

bool OAIMatch_Score_Breakdown_2019_Alliance::is_mid_right_rocket_far_Valid() const{
    return m_mid_right_rocket_far_isValid;
}

QString OAIMatch_Score_Breakdown_2019_Alliance::getMidRightRocketNear() const {
    return m_mid_right_rocket_near;
}
void OAIMatch_Score_Breakdown_2019_Alliance::setMidRightRocketNear(const QString &mid_right_rocket_near) {
    m_mid_right_rocket_near = mid_right_rocket_near;
    m_mid_right_rocket_near_isSet = true;
}

bool OAIMatch_Score_Breakdown_2019_Alliance::is_mid_right_rocket_near_Set() const{
    return m_mid_right_rocket_near_isSet;
}

bool OAIMatch_Score_Breakdown_2019_Alliance::is_mid_right_rocket_near_Valid() const{
    return m_mid_right_rocket_near_isValid;
}

QString OAIMatch_Score_Breakdown_2019_Alliance::getPreMatchBay1() const {
    return m_pre_match_bay1;
}
void OAIMatch_Score_Breakdown_2019_Alliance::setPreMatchBay1(const QString &pre_match_bay1) {
    m_pre_match_bay1 = pre_match_bay1;
    m_pre_match_bay1_isSet = true;
}

bool OAIMatch_Score_Breakdown_2019_Alliance::is_pre_match_bay1_Set() const{
    return m_pre_match_bay1_isSet;
}

bool OAIMatch_Score_Breakdown_2019_Alliance::is_pre_match_bay1_Valid() const{
    return m_pre_match_bay1_isValid;
}

QString OAIMatch_Score_Breakdown_2019_Alliance::getPreMatchBay2() const {
    return m_pre_match_bay2;
}
void OAIMatch_Score_Breakdown_2019_Alliance::setPreMatchBay2(const QString &pre_match_bay2) {
    m_pre_match_bay2 = pre_match_bay2;
    m_pre_match_bay2_isSet = true;
}

bool OAIMatch_Score_Breakdown_2019_Alliance::is_pre_match_bay2_Set() const{
    return m_pre_match_bay2_isSet;
}

bool OAIMatch_Score_Breakdown_2019_Alliance::is_pre_match_bay2_Valid() const{
    return m_pre_match_bay2_isValid;
}

QString OAIMatch_Score_Breakdown_2019_Alliance::getPreMatchBay3() const {
    return m_pre_match_bay3;
}
void OAIMatch_Score_Breakdown_2019_Alliance::setPreMatchBay3(const QString &pre_match_bay3) {
    m_pre_match_bay3 = pre_match_bay3;
    m_pre_match_bay3_isSet = true;
}

bool OAIMatch_Score_Breakdown_2019_Alliance::is_pre_match_bay3_Set() const{
    return m_pre_match_bay3_isSet;
}

bool OAIMatch_Score_Breakdown_2019_Alliance::is_pre_match_bay3_Valid() const{
    return m_pre_match_bay3_isValid;
}

QString OAIMatch_Score_Breakdown_2019_Alliance::getPreMatchBay6() const {
    return m_pre_match_bay6;
}
void OAIMatch_Score_Breakdown_2019_Alliance::setPreMatchBay6(const QString &pre_match_bay6) {
    m_pre_match_bay6 = pre_match_bay6;
    m_pre_match_bay6_isSet = true;
}

bool OAIMatch_Score_Breakdown_2019_Alliance::is_pre_match_bay6_Set() const{
    return m_pre_match_bay6_isSet;
}

bool OAIMatch_Score_Breakdown_2019_Alliance::is_pre_match_bay6_Valid() const{
    return m_pre_match_bay6_isValid;
}

QString OAIMatch_Score_Breakdown_2019_Alliance::getPreMatchBay7() const {
    return m_pre_match_bay7;
}
void OAIMatch_Score_Breakdown_2019_Alliance::setPreMatchBay7(const QString &pre_match_bay7) {
    m_pre_match_bay7 = pre_match_bay7;
    m_pre_match_bay7_isSet = true;
}

bool OAIMatch_Score_Breakdown_2019_Alliance::is_pre_match_bay7_Set() const{
    return m_pre_match_bay7_isSet;
}

bool OAIMatch_Score_Breakdown_2019_Alliance::is_pre_match_bay7_Valid() const{
    return m_pre_match_bay7_isValid;
}

QString OAIMatch_Score_Breakdown_2019_Alliance::getPreMatchBay8() const {
    return m_pre_match_bay8;
}
void OAIMatch_Score_Breakdown_2019_Alliance::setPreMatchBay8(const QString &pre_match_bay8) {
    m_pre_match_bay8 = pre_match_bay8;
    m_pre_match_bay8_isSet = true;
}

bool OAIMatch_Score_Breakdown_2019_Alliance::is_pre_match_bay8_Set() const{
    return m_pre_match_bay8_isSet;
}

bool OAIMatch_Score_Breakdown_2019_Alliance::is_pre_match_bay8_Valid() const{
    return m_pre_match_bay8_isValid;
}

QString OAIMatch_Score_Breakdown_2019_Alliance::getPreMatchLevelRobot1() const {
    return m_pre_match_level_robot1;
}
void OAIMatch_Score_Breakdown_2019_Alliance::setPreMatchLevelRobot1(const QString &pre_match_level_robot1) {
    m_pre_match_level_robot1 = pre_match_level_robot1;
    m_pre_match_level_robot1_isSet = true;
}

bool OAIMatch_Score_Breakdown_2019_Alliance::is_pre_match_level_robot1_Set() const{
    return m_pre_match_level_robot1_isSet;
}

bool OAIMatch_Score_Breakdown_2019_Alliance::is_pre_match_level_robot1_Valid() const{
    return m_pre_match_level_robot1_isValid;
}

QString OAIMatch_Score_Breakdown_2019_Alliance::getPreMatchLevelRobot2() const {
    return m_pre_match_level_robot2;
}
void OAIMatch_Score_Breakdown_2019_Alliance::setPreMatchLevelRobot2(const QString &pre_match_level_robot2) {
    m_pre_match_level_robot2 = pre_match_level_robot2;
    m_pre_match_level_robot2_isSet = true;
}

bool OAIMatch_Score_Breakdown_2019_Alliance::is_pre_match_level_robot2_Set() const{
    return m_pre_match_level_robot2_isSet;
}

bool OAIMatch_Score_Breakdown_2019_Alliance::is_pre_match_level_robot2_Valid() const{
    return m_pre_match_level_robot2_isValid;
}

QString OAIMatch_Score_Breakdown_2019_Alliance::getPreMatchLevelRobot3() const {
    return m_pre_match_level_robot3;
}
void OAIMatch_Score_Breakdown_2019_Alliance::setPreMatchLevelRobot3(const QString &pre_match_level_robot3) {
    m_pre_match_level_robot3 = pre_match_level_robot3;
    m_pre_match_level_robot3_isSet = true;
}

bool OAIMatch_Score_Breakdown_2019_Alliance::is_pre_match_level_robot3_Set() const{
    return m_pre_match_level_robot3_isSet;
}

bool OAIMatch_Score_Breakdown_2019_Alliance::is_pre_match_level_robot3_Valid() const{
    return m_pre_match_level_robot3_isValid;
}

qint32 OAIMatch_Score_Breakdown_2019_Alliance::getRp() const {
    return m_rp;
}
void OAIMatch_Score_Breakdown_2019_Alliance::setRp(const qint32 &rp) {
    m_rp = rp;
    m_rp_isSet = true;
}

bool OAIMatch_Score_Breakdown_2019_Alliance::is_rp_Set() const{
    return m_rp_isSet;
}

bool OAIMatch_Score_Breakdown_2019_Alliance::is_rp_Valid() const{
    return m_rp_isValid;
}

qint32 OAIMatch_Score_Breakdown_2019_Alliance::getSandStormBonusPoints() const {
    return m_sand_storm_bonus_points;
}
void OAIMatch_Score_Breakdown_2019_Alliance::setSandStormBonusPoints(const qint32 &sand_storm_bonus_points) {
    m_sand_storm_bonus_points = sand_storm_bonus_points;
    m_sand_storm_bonus_points_isSet = true;
}

bool OAIMatch_Score_Breakdown_2019_Alliance::is_sand_storm_bonus_points_Set() const{
    return m_sand_storm_bonus_points_isSet;
}

bool OAIMatch_Score_Breakdown_2019_Alliance::is_sand_storm_bonus_points_Valid() const{
    return m_sand_storm_bonus_points_isValid;
}

qint32 OAIMatch_Score_Breakdown_2019_Alliance::getTechFoulCount() const {
    return m_tech_foul_count;
}
void OAIMatch_Score_Breakdown_2019_Alliance::setTechFoulCount(const qint32 &tech_foul_count) {
    m_tech_foul_count = tech_foul_count;
    m_tech_foul_count_isSet = true;
}

bool OAIMatch_Score_Breakdown_2019_Alliance::is_tech_foul_count_Set() const{
    return m_tech_foul_count_isSet;
}

bool OAIMatch_Score_Breakdown_2019_Alliance::is_tech_foul_count_Valid() const{
    return m_tech_foul_count_isValid;
}

qint32 OAIMatch_Score_Breakdown_2019_Alliance::getTeleopPoints() const {
    return m_teleop_points;
}
void OAIMatch_Score_Breakdown_2019_Alliance::setTeleopPoints(const qint32 &teleop_points) {
    m_teleop_points = teleop_points;
    m_teleop_points_isSet = true;
}

bool OAIMatch_Score_Breakdown_2019_Alliance::is_teleop_points_Set() const{
    return m_teleop_points_isSet;
}

bool OAIMatch_Score_Breakdown_2019_Alliance::is_teleop_points_Valid() const{
    return m_teleop_points_isValid;
}

QString OAIMatch_Score_Breakdown_2019_Alliance::getTopLeftRocketFar() const {
    return m_top_left_rocket_far;
}
void OAIMatch_Score_Breakdown_2019_Alliance::setTopLeftRocketFar(const QString &top_left_rocket_far) {
    m_top_left_rocket_far = top_left_rocket_far;
    m_top_left_rocket_far_isSet = true;
}

bool OAIMatch_Score_Breakdown_2019_Alliance::is_top_left_rocket_far_Set() const{
    return m_top_left_rocket_far_isSet;
}

bool OAIMatch_Score_Breakdown_2019_Alliance::is_top_left_rocket_far_Valid() const{
    return m_top_left_rocket_far_isValid;
}

QString OAIMatch_Score_Breakdown_2019_Alliance::getTopLeftRocketNear() const {
    return m_top_left_rocket_near;
}
void OAIMatch_Score_Breakdown_2019_Alliance::setTopLeftRocketNear(const QString &top_left_rocket_near) {
    m_top_left_rocket_near = top_left_rocket_near;
    m_top_left_rocket_near_isSet = true;
}

bool OAIMatch_Score_Breakdown_2019_Alliance::is_top_left_rocket_near_Set() const{
    return m_top_left_rocket_near_isSet;
}

bool OAIMatch_Score_Breakdown_2019_Alliance::is_top_left_rocket_near_Valid() const{
    return m_top_left_rocket_near_isValid;
}

QString OAIMatch_Score_Breakdown_2019_Alliance::getTopRightRocketFar() const {
    return m_top_right_rocket_far;
}
void OAIMatch_Score_Breakdown_2019_Alliance::setTopRightRocketFar(const QString &top_right_rocket_far) {
    m_top_right_rocket_far = top_right_rocket_far;
    m_top_right_rocket_far_isSet = true;
}

bool OAIMatch_Score_Breakdown_2019_Alliance::is_top_right_rocket_far_Set() const{
    return m_top_right_rocket_far_isSet;
}

bool OAIMatch_Score_Breakdown_2019_Alliance::is_top_right_rocket_far_Valid() const{
    return m_top_right_rocket_far_isValid;
}

QString OAIMatch_Score_Breakdown_2019_Alliance::getTopRightRocketNear() const {
    return m_top_right_rocket_near;
}
void OAIMatch_Score_Breakdown_2019_Alliance::setTopRightRocketNear(const QString &top_right_rocket_near) {
    m_top_right_rocket_near = top_right_rocket_near;
    m_top_right_rocket_near_isSet = true;
}

bool OAIMatch_Score_Breakdown_2019_Alliance::is_top_right_rocket_near_Set() const{
    return m_top_right_rocket_near_isSet;
}

bool OAIMatch_Score_Breakdown_2019_Alliance::is_top_right_rocket_near_Valid() const{
    return m_top_right_rocket_near_isValid;
}

qint32 OAIMatch_Score_Breakdown_2019_Alliance::getTotalPoints() const {
    return m_total_points;
}
void OAIMatch_Score_Breakdown_2019_Alliance::setTotalPoints(const qint32 &total_points) {
    m_total_points = total_points;
    m_total_points_isSet = true;
}

bool OAIMatch_Score_Breakdown_2019_Alliance::is_total_points_Set() const{
    return m_total_points_isSet;
}

bool OAIMatch_Score_Breakdown_2019_Alliance::is_total_points_Valid() const{
    return m_total_points_isValid;
}

bool OAIMatch_Score_Breakdown_2019_Alliance::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_adjust_points_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auto_points_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bay1_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bay2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bay3_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bay4_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bay5_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bay6_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bay7_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bay8_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cargo_points_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_complete_rocket_ranking_point_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_completed_rocket_far_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_completed_rocket_near_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_endgame_robot1_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_endgame_robot2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_endgame_robot3_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_foul_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_foul_points_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hab_climb_points_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hab_docking_ranking_point_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hab_line_robot1_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hab_line_robot2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hab_line_robot3_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hatch_panel_points_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_low_left_rocket_far_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_low_left_rocket_near_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_low_right_rocket_far_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_low_right_rocket_near_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mid_left_rocket_far_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mid_left_rocket_near_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mid_right_rocket_far_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mid_right_rocket_near_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pre_match_bay1_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pre_match_bay2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pre_match_bay3_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pre_match_bay6_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pre_match_bay7_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pre_match_bay8_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pre_match_level_robot1_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pre_match_level_robot2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pre_match_level_robot3_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sand_storm_bonus_points_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tech_foul_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_teleop_points_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_top_left_rocket_far_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_top_left_rocket_near_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_top_right_rocket_far_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_top_right_rocket_near_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_points_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMatch_Score_Breakdown_2019_Alliance::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
