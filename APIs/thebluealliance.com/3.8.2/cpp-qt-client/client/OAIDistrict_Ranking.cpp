/**
 * The Blue Alliance API v3
 * # Overview    Information and statistics about FIRST Robotics Competition teams and events.   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).
 *
 * The version of the OpenAPI document: 3.8.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDistrict_Ranking.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDistrict_Ranking::OAIDistrict_Ranking(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDistrict_Ranking::OAIDistrict_Ranking() {
    this->initializeModel();
}

OAIDistrict_Ranking::~OAIDistrict_Ranking() {}

void OAIDistrict_Ranking::initializeModel() {

    m_event_points_isSet = false;
    m_event_points_isValid = false;

    m_point_total_isSet = false;
    m_point_total_isValid = false;

    m_rank_isSet = false;
    m_rank_isValid = false;

    m_rookie_bonus_isSet = false;
    m_rookie_bonus_isValid = false;

    m_team_key_isSet = false;
    m_team_key_isValid = false;
}

void OAIDistrict_Ranking::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDistrict_Ranking::fromJsonObject(QJsonObject json) {

    m_event_points_isValid = ::OpenAPI::fromJsonValue(m_event_points, json[QString("event_points")]);
    m_event_points_isSet = !json[QString("event_points")].isNull() && m_event_points_isValid;

    m_point_total_isValid = ::OpenAPI::fromJsonValue(m_point_total, json[QString("point_total")]);
    m_point_total_isSet = !json[QString("point_total")].isNull() && m_point_total_isValid;

    m_rank_isValid = ::OpenAPI::fromJsonValue(m_rank, json[QString("rank")]);
    m_rank_isSet = !json[QString("rank")].isNull() && m_rank_isValid;

    m_rookie_bonus_isValid = ::OpenAPI::fromJsonValue(m_rookie_bonus, json[QString("rookie_bonus")]);
    m_rookie_bonus_isSet = !json[QString("rookie_bonus")].isNull() && m_rookie_bonus_isValid;

    m_team_key_isValid = ::OpenAPI::fromJsonValue(m_team_key, json[QString("team_key")]);
    m_team_key_isSet = !json[QString("team_key")].isNull() && m_team_key_isValid;
}

QString OAIDistrict_Ranking::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDistrict_Ranking::asJsonObject() const {
    QJsonObject obj;
    if (m_event_points.size() > 0) {
        obj.insert(QString("event_points"), ::OpenAPI::toJsonValue(m_event_points));
    }
    if (m_point_total_isSet) {
        obj.insert(QString("point_total"), ::OpenAPI::toJsonValue(m_point_total));
    }
    if (m_rank_isSet) {
        obj.insert(QString("rank"), ::OpenAPI::toJsonValue(m_rank));
    }
    if (m_rookie_bonus_isSet) {
        obj.insert(QString("rookie_bonus"), ::OpenAPI::toJsonValue(m_rookie_bonus));
    }
    if (m_team_key_isSet) {
        obj.insert(QString("team_key"), ::OpenAPI::toJsonValue(m_team_key));
    }
    return obj;
}

QList<OAIDistrict_Ranking_event_points_inner> OAIDistrict_Ranking::getEventPoints() const {
    return m_event_points;
}
void OAIDistrict_Ranking::setEventPoints(const QList<OAIDistrict_Ranking_event_points_inner> &event_points) {
    m_event_points = event_points;
    m_event_points_isSet = true;
}

bool OAIDistrict_Ranking::is_event_points_Set() const{
    return m_event_points_isSet;
}

bool OAIDistrict_Ranking::is_event_points_Valid() const{
    return m_event_points_isValid;
}

qint32 OAIDistrict_Ranking::getPointTotal() const {
    return m_point_total;
}
void OAIDistrict_Ranking::setPointTotal(const qint32 &point_total) {
    m_point_total = point_total;
    m_point_total_isSet = true;
}

bool OAIDistrict_Ranking::is_point_total_Set() const{
    return m_point_total_isSet;
}

bool OAIDistrict_Ranking::is_point_total_Valid() const{
    return m_point_total_isValid;
}

qint32 OAIDistrict_Ranking::getRank() const {
    return m_rank;
}
void OAIDistrict_Ranking::setRank(const qint32 &rank) {
    m_rank = rank;
    m_rank_isSet = true;
}

bool OAIDistrict_Ranking::is_rank_Set() const{
    return m_rank_isSet;
}

bool OAIDistrict_Ranking::is_rank_Valid() const{
    return m_rank_isValid;
}

qint32 OAIDistrict_Ranking::getRookieBonus() const {
    return m_rookie_bonus;
}
void OAIDistrict_Ranking::setRookieBonus(const qint32 &rookie_bonus) {
    m_rookie_bonus = rookie_bonus;
    m_rookie_bonus_isSet = true;
}

bool OAIDistrict_Ranking::is_rookie_bonus_Set() const{
    return m_rookie_bonus_isSet;
}

bool OAIDistrict_Ranking::is_rookie_bonus_Valid() const{
    return m_rookie_bonus_isValid;
}

QString OAIDistrict_Ranking::getTeamKey() const {
    return m_team_key;
}
void OAIDistrict_Ranking::setTeamKey(const QString &team_key) {
    m_team_key = team_key;
    m_team_key_isSet = true;
}

bool OAIDistrict_Ranking::is_team_key_Set() const{
    return m_team_key_isSet;
}

bool OAIDistrict_Ranking::is_team_key_Valid() const{
    return m_team_key_isValid;
}

bool OAIDistrict_Ranking::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_event_points.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_point_total_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rank_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rookie_bonus_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_team_key_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDistrict_Ranking::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_point_total_isValid && m_rank_isValid && m_team_key_isValid && true;
}

} // namespace OpenAPI
