/**
 * The Blue Alliance API v3
 * # Overview    Information and statistics about FIRST Robotics Competition teams and events.   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).
 *
 * The version of the OpenAPI document: 3.8.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMatch_Score_Breakdown_2023_Alliance.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMatch_Score_Breakdown_2023_Alliance::OAIMatch_Score_Breakdown_2023_Alliance(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMatch_Score_Breakdown_2023_Alliance::OAIMatch_Score_Breakdown_2023_Alliance() {
    this->initializeModel();
}

OAIMatch_Score_Breakdown_2023_Alliance::~OAIMatch_Score_Breakdown_2023_Alliance() {}

void OAIMatch_Score_Breakdown_2023_Alliance::initializeModel() {

    m_activation_bonus_achieved_isSet = false;
    m_activation_bonus_achieved_isValid = false;

    m_adjust_points_isSet = false;
    m_adjust_points_isValid = false;

    m_auto_bridge_state_isSet = false;
    m_auto_bridge_state_isValid = false;

    m_auto_charge_station_points_isSet = false;
    m_auto_charge_station_points_isValid = false;

    m_auto_charge_station_robot1_isSet = false;
    m_auto_charge_station_robot1_isValid = false;

    m_auto_charge_station_robot2_isSet = false;
    m_auto_charge_station_robot2_isValid = false;

    m_auto_charge_station_robot3_isSet = false;
    m_auto_charge_station_robot3_isValid = false;

    m_auto_community_isSet = false;
    m_auto_community_isValid = false;

    m_auto_docked_isSet = false;
    m_auto_docked_isValid = false;

    m_auto_game_piece_count_isSet = false;
    m_auto_game_piece_count_isValid = false;

    m_auto_game_piece_points_isSet = false;
    m_auto_game_piece_points_isValid = false;

    m_auto_mobility_points_isSet = false;
    m_auto_mobility_points_isValid = false;

    m_auto_points_isSet = false;
    m_auto_points_isValid = false;

    m_coop_game_piece_count_isSet = false;
    m_coop_game_piece_count_isValid = false;

    m_coopertition_criteria_met_isSet = false;
    m_coopertition_criteria_met_isValid = false;

    m_end_game_bridge_state_isSet = false;
    m_end_game_bridge_state_isValid = false;

    m_end_game_charge_station_points_isSet = false;
    m_end_game_charge_station_points_isValid = false;

    m_end_game_charge_station_robot1_isSet = false;
    m_end_game_charge_station_robot1_isValid = false;

    m_end_game_charge_station_robot2_isSet = false;
    m_end_game_charge_station_robot2_isValid = false;

    m_end_game_charge_station_robot3_isSet = false;
    m_end_game_charge_station_robot3_isValid = false;

    m_end_game_park_points_isSet = false;
    m_end_game_park_points_isValid = false;

    m_extra_game_piece_count_isSet = false;
    m_extra_game_piece_count_isValid = false;

    m_foul_count_isSet = false;
    m_foul_count_isValid = false;

    m_foul_points_isSet = false;
    m_foul_points_isValid = false;

    m_link_points_isSet = false;
    m_link_points_isValid = false;

    m_links_isSet = false;
    m_links_isValid = false;

    m_mobility_robot1_isSet = false;
    m_mobility_robot1_isValid = false;

    m_mobility_robot2_isSet = false;
    m_mobility_robot2_isValid = false;

    m_mobility_robot3_isSet = false;
    m_mobility_robot3_isValid = false;

    m_rp_isSet = false;
    m_rp_isValid = false;

    m_sustainability_bonus_achieved_isSet = false;
    m_sustainability_bonus_achieved_isValid = false;

    m_tech_foul_count_isSet = false;
    m_tech_foul_count_isValid = false;

    m_teleop_community_isSet = false;
    m_teleop_community_isValid = false;

    m_teleop_game_piece_count_isSet = false;
    m_teleop_game_piece_count_isValid = false;

    m_teleop_game_piece_points_isSet = false;
    m_teleop_game_piece_points_isValid = false;

    m_teleop_points_isSet = false;
    m_teleop_points_isValid = false;

    m_total_charge_station_points_isSet = false;
    m_total_charge_station_points_isValid = false;

    m_total_points_isSet = false;
    m_total_points_isValid = false;
}

void OAIMatch_Score_Breakdown_2023_Alliance::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMatch_Score_Breakdown_2023_Alliance::fromJsonObject(QJsonObject json) {

    m_activation_bonus_achieved_isValid = ::OpenAPI::fromJsonValue(m_activation_bonus_achieved, json[QString("activationBonusAchieved")]);
    m_activation_bonus_achieved_isSet = !json[QString("activationBonusAchieved")].isNull() && m_activation_bonus_achieved_isValid;

    m_adjust_points_isValid = ::OpenAPI::fromJsonValue(m_adjust_points, json[QString("adjustPoints")]);
    m_adjust_points_isSet = !json[QString("adjustPoints")].isNull() && m_adjust_points_isValid;

    m_auto_bridge_state_isValid = ::OpenAPI::fromJsonValue(m_auto_bridge_state, json[QString("autoBridgeState")]);
    m_auto_bridge_state_isSet = !json[QString("autoBridgeState")].isNull() && m_auto_bridge_state_isValid;

    m_auto_charge_station_points_isValid = ::OpenAPI::fromJsonValue(m_auto_charge_station_points, json[QString("autoChargeStationPoints")]);
    m_auto_charge_station_points_isSet = !json[QString("autoChargeStationPoints")].isNull() && m_auto_charge_station_points_isValid;

    m_auto_charge_station_robot1_isValid = ::OpenAPI::fromJsonValue(m_auto_charge_station_robot1, json[QString("autoChargeStationRobot1")]);
    m_auto_charge_station_robot1_isSet = !json[QString("autoChargeStationRobot1")].isNull() && m_auto_charge_station_robot1_isValid;

    m_auto_charge_station_robot2_isValid = ::OpenAPI::fromJsonValue(m_auto_charge_station_robot2, json[QString("autoChargeStationRobot2")]);
    m_auto_charge_station_robot2_isSet = !json[QString("autoChargeStationRobot2")].isNull() && m_auto_charge_station_robot2_isValid;

    m_auto_charge_station_robot3_isValid = ::OpenAPI::fromJsonValue(m_auto_charge_station_robot3, json[QString("autoChargeStationRobot3")]);
    m_auto_charge_station_robot3_isSet = !json[QString("autoChargeStationRobot3")].isNull() && m_auto_charge_station_robot3_isValid;

    m_auto_community_isValid = ::OpenAPI::fromJsonValue(m_auto_community, json[QString("autoCommunity")]);
    m_auto_community_isSet = !json[QString("autoCommunity")].isNull() && m_auto_community_isValid;

    m_auto_docked_isValid = ::OpenAPI::fromJsonValue(m_auto_docked, json[QString("autoDocked")]);
    m_auto_docked_isSet = !json[QString("autoDocked")].isNull() && m_auto_docked_isValid;

    m_auto_game_piece_count_isValid = ::OpenAPI::fromJsonValue(m_auto_game_piece_count, json[QString("autoGamePieceCount")]);
    m_auto_game_piece_count_isSet = !json[QString("autoGamePieceCount")].isNull() && m_auto_game_piece_count_isValid;

    m_auto_game_piece_points_isValid = ::OpenAPI::fromJsonValue(m_auto_game_piece_points, json[QString("autoGamePiecePoints")]);
    m_auto_game_piece_points_isSet = !json[QString("autoGamePiecePoints")].isNull() && m_auto_game_piece_points_isValid;

    m_auto_mobility_points_isValid = ::OpenAPI::fromJsonValue(m_auto_mobility_points, json[QString("autoMobilityPoints")]);
    m_auto_mobility_points_isSet = !json[QString("autoMobilityPoints")].isNull() && m_auto_mobility_points_isValid;

    m_auto_points_isValid = ::OpenAPI::fromJsonValue(m_auto_points, json[QString("autoPoints")]);
    m_auto_points_isSet = !json[QString("autoPoints")].isNull() && m_auto_points_isValid;

    m_coop_game_piece_count_isValid = ::OpenAPI::fromJsonValue(m_coop_game_piece_count, json[QString("coopGamePieceCount")]);
    m_coop_game_piece_count_isSet = !json[QString("coopGamePieceCount")].isNull() && m_coop_game_piece_count_isValid;

    m_coopertition_criteria_met_isValid = ::OpenAPI::fromJsonValue(m_coopertition_criteria_met, json[QString("coopertitionCriteriaMet")]);
    m_coopertition_criteria_met_isSet = !json[QString("coopertitionCriteriaMet")].isNull() && m_coopertition_criteria_met_isValid;

    m_end_game_bridge_state_isValid = ::OpenAPI::fromJsonValue(m_end_game_bridge_state, json[QString("endGameBridgeState")]);
    m_end_game_bridge_state_isSet = !json[QString("endGameBridgeState")].isNull() && m_end_game_bridge_state_isValid;

    m_end_game_charge_station_points_isValid = ::OpenAPI::fromJsonValue(m_end_game_charge_station_points, json[QString("endGameChargeStationPoints")]);
    m_end_game_charge_station_points_isSet = !json[QString("endGameChargeStationPoints")].isNull() && m_end_game_charge_station_points_isValid;

    m_end_game_charge_station_robot1_isValid = ::OpenAPI::fromJsonValue(m_end_game_charge_station_robot1, json[QString("endGameChargeStationRobot1")]);
    m_end_game_charge_station_robot1_isSet = !json[QString("endGameChargeStationRobot1")].isNull() && m_end_game_charge_station_robot1_isValid;

    m_end_game_charge_station_robot2_isValid = ::OpenAPI::fromJsonValue(m_end_game_charge_station_robot2, json[QString("endGameChargeStationRobot2")]);
    m_end_game_charge_station_robot2_isSet = !json[QString("endGameChargeStationRobot2")].isNull() && m_end_game_charge_station_robot2_isValid;

    m_end_game_charge_station_robot3_isValid = ::OpenAPI::fromJsonValue(m_end_game_charge_station_robot3, json[QString("endGameChargeStationRobot3")]);
    m_end_game_charge_station_robot3_isSet = !json[QString("endGameChargeStationRobot3")].isNull() && m_end_game_charge_station_robot3_isValid;

    m_end_game_park_points_isValid = ::OpenAPI::fromJsonValue(m_end_game_park_points, json[QString("endGameParkPoints")]);
    m_end_game_park_points_isSet = !json[QString("endGameParkPoints")].isNull() && m_end_game_park_points_isValid;

    m_extra_game_piece_count_isValid = ::OpenAPI::fromJsonValue(m_extra_game_piece_count, json[QString("extraGamePieceCount")]);
    m_extra_game_piece_count_isSet = !json[QString("extraGamePieceCount")].isNull() && m_extra_game_piece_count_isValid;

    m_foul_count_isValid = ::OpenAPI::fromJsonValue(m_foul_count, json[QString("foulCount")]);
    m_foul_count_isSet = !json[QString("foulCount")].isNull() && m_foul_count_isValid;

    m_foul_points_isValid = ::OpenAPI::fromJsonValue(m_foul_points, json[QString("foulPoints")]);
    m_foul_points_isSet = !json[QString("foulPoints")].isNull() && m_foul_points_isValid;

    m_link_points_isValid = ::OpenAPI::fromJsonValue(m_link_points, json[QString("linkPoints")]);
    m_link_points_isSet = !json[QString("linkPoints")].isNull() && m_link_points_isValid;

    m_links_isValid = ::OpenAPI::fromJsonValue(m_links, json[QString("links")]);
    m_links_isSet = !json[QString("links")].isNull() && m_links_isValid;

    m_mobility_robot1_isValid = ::OpenAPI::fromJsonValue(m_mobility_robot1, json[QString("mobilityRobot1")]);
    m_mobility_robot1_isSet = !json[QString("mobilityRobot1")].isNull() && m_mobility_robot1_isValid;

    m_mobility_robot2_isValid = ::OpenAPI::fromJsonValue(m_mobility_robot2, json[QString("mobilityRobot2")]);
    m_mobility_robot2_isSet = !json[QString("mobilityRobot2")].isNull() && m_mobility_robot2_isValid;

    m_mobility_robot3_isValid = ::OpenAPI::fromJsonValue(m_mobility_robot3, json[QString("mobilityRobot3")]);
    m_mobility_robot3_isSet = !json[QString("mobilityRobot3")].isNull() && m_mobility_robot3_isValid;

    m_rp_isValid = ::OpenAPI::fromJsonValue(m_rp, json[QString("rp")]);
    m_rp_isSet = !json[QString("rp")].isNull() && m_rp_isValid;

    m_sustainability_bonus_achieved_isValid = ::OpenAPI::fromJsonValue(m_sustainability_bonus_achieved, json[QString("sustainabilityBonusAchieved")]);
    m_sustainability_bonus_achieved_isSet = !json[QString("sustainabilityBonusAchieved")].isNull() && m_sustainability_bonus_achieved_isValid;

    m_tech_foul_count_isValid = ::OpenAPI::fromJsonValue(m_tech_foul_count, json[QString("techFoulCount")]);
    m_tech_foul_count_isSet = !json[QString("techFoulCount")].isNull() && m_tech_foul_count_isValid;

    m_teleop_community_isValid = ::OpenAPI::fromJsonValue(m_teleop_community, json[QString("teleopCommunity")]);
    m_teleop_community_isSet = !json[QString("teleopCommunity")].isNull() && m_teleop_community_isValid;

    m_teleop_game_piece_count_isValid = ::OpenAPI::fromJsonValue(m_teleop_game_piece_count, json[QString("teleopGamePieceCount")]);
    m_teleop_game_piece_count_isSet = !json[QString("teleopGamePieceCount")].isNull() && m_teleop_game_piece_count_isValid;

    m_teleop_game_piece_points_isValid = ::OpenAPI::fromJsonValue(m_teleop_game_piece_points, json[QString("teleopGamePiecePoints")]);
    m_teleop_game_piece_points_isSet = !json[QString("teleopGamePiecePoints")].isNull() && m_teleop_game_piece_points_isValid;

    m_teleop_points_isValid = ::OpenAPI::fromJsonValue(m_teleop_points, json[QString("teleopPoints")]);
    m_teleop_points_isSet = !json[QString("teleopPoints")].isNull() && m_teleop_points_isValid;

    m_total_charge_station_points_isValid = ::OpenAPI::fromJsonValue(m_total_charge_station_points, json[QString("totalChargeStationPoints")]);
    m_total_charge_station_points_isSet = !json[QString("totalChargeStationPoints")].isNull() && m_total_charge_station_points_isValid;

    m_total_points_isValid = ::OpenAPI::fromJsonValue(m_total_points, json[QString("totalPoints")]);
    m_total_points_isSet = !json[QString("totalPoints")].isNull() && m_total_points_isValid;
}

QString OAIMatch_Score_Breakdown_2023_Alliance::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMatch_Score_Breakdown_2023_Alliance::asJsonObject() const {
    QJsonObject obj;
    if (m_activation_bonus_achieved_isSet) {
        obj.insert(QString("activationBonusAchieved"), ::OpenAPI::toJsonValue(m_activation_bonus_achieved));
    }
    if (m_adjust_points_isSet) {
        obj.insert(QString("adjustPoints"), ::OpenAPI::toJsonValue(m_adjust_points));
    }
    if (m_auto_bridge_state_isSet) {
        obj.insert(QString("autoBridgeState"), ::OpenAPI::toJsonValue(m_auto_bridge_state));
    }
    if (m_auto_charge_station_points_isSet) {
        obj.insert(QString("autoChargeStationPoints"), ::OpenAPI::toJsonValue(m_auto_charge_station_points));
    }
    if (m_auto_charge_station_robot1_isSet) {
        obj.insert(QString("autoChargeStationRobot1"), ::OpenAPI::toJsonValue(m_auto_charge_station_robot1));
    }
    if (m_auto_charge_station_robot2_isSet) {
        obj.insert(QString("autoChargeStationRobot2"), ::OpenAPI::toJsonValue(m_auto_charge_station_robot2));
    }
    if (m_auto_charge_station_robot3_isSet) {
        obj.insert(QString("autoChargeStationRobot3"), ::OpenAPI::toJsonValue(m_auto_charge_station_robot3));
    }
    if (m_auto_community.isSet()) {
        obj.insert(QString("autoCommunity"), ::OpenAPI::toJsonValue(m_auto_community));
    }
    if (m_auto_docked_isSet) {
        obj.insert(QString("autoDocked"), ::OpenAPI::toJsonValue(m_auto_docked));
    }
    if (m_auto_game_piece_count_isSet) {
        obj.insert(QString("autoGamePieceCount"), ::OpenAPI::toJsonValue(m_auto_game_piece_count));
    }
    if (m_auto_game_piece_points_isSet) {
        obj.insert(QString("autoGamePiecePoints"), ::OpenAPI::toJsonValue(m_auto_game_piece_points));
    }
    if (m_auto_mobility_points_isSet) {
        obj.insert(QString("autoMobilityPoints"), ::OpenAPI::toJsonValue(m_auto_mobility_points));
    }
    if (m_auto_points_isSet) {
        obj.insert(QString("autoPoints"), ::OpenAPI::toJsonValue(m_auto_points));
    }
    if (m_coop_game_piece_count_isSet) {
        obj.insert(QString("coopGamePieceCount"), ::OpenAPI::toJsonValue(m_coop_game_piece_count));
    }
    if (m_coopertition_criteria_met_isSet) {
        obj.insert(QString("coopertitionCriteriaMet"), ::OpenAPI::toJsonValue(m_coopertition_criteria_met));
    }
    if (m_end_game_bridge_state_isSet) {
        obj.insert(QString("endGameBridgeState"), ::OpenAPI::toJsonValue(m_end_game_bridge_state));
    }
    if (m_end_game_charge_station_points_isSet) {
        obj.insert(QString("endGameChargeStationPoints"), ::OpenAPI::toJsonValue(m_end_game_charge_station_points));
    }
    if (m_end_game_charge_station_robot1_isSet) {
        obj.insert(QString("endGameChargeStationRobot1"), ::OpenAPI::toJsonValue(m_end_game_charge_station_robot1));
    }
    if (m_end_game_charge_station_robot2_isSet) {
        obj.insert(QString("endGameChargeStationRobot2"), ::OpenAPI::toJsonValue(m_end_game_charge_station_robot2));
    }
    if (m_end_game_charge_station_robot3_isSet) {
        obj.insert(QString("endGameChargeStationRobot3"), ::OpenAPI::toJsonValue(m_end_game_charge_station_robot3));
    }
    if (m_end_game_park_points_isSet) {
        obj.insert(QString("endGameParkPoints"), ::OpenAPI::toJsonValue(m_end_game_park_points));
    }
    if (m_extra_game_piece_count_isSet) {
        obj.insert(QString("extraGamePieceCount"), ::OpenAPI::toJsonValue(m_extra_game_piece_count));
    }
    if (m_foul_count_isSet) {
        obj.insert(QString("foulCount"), ::OpenAPI::toJsonValue(m_foul_count));
    }
    if (m_foul_points_isSet) {
        obj.insert(QString("foulPoints"), ::OpenAPI::toJsonValue(m_foul_points));
    }
    if (m_link_points_isSet) {
        obj.insert(QString("linkPoints"), ::OpenAPI::toJsonValue(m_link_points));
    }
    if (m_links.size() > 0) {
        obj.insert(QString("links"), ::OpenAPI::toJsonValue(m_links));
    }
    if (m_mobility_robot1_isSet) {
        obj.insert(QString("mobilityRobot1"), ::OpenAPI::toJsonValue(m_mobility_robot1));
    }
    if (m_mobility_robot2_isSet) {
        obj.insert(QString("mobilityRobot2"), ::OpenAPI::toJsonValue(m_mobility_robot2));
    }
    if (m_mobility_robot3_isSet) {
        obj.insert(QString("mobilityRobot3"), ::OpenAPI::toJsonValue(m_mobility_robot3));
    }
    if (m_rp_isSet) {
        obj.insert(QString("rp"), ::OpenAPI::toJsonValue(m_rp));
    }
    if (m_sustainability_bonus_achieved_isSet) {
        obj.insert(QString("sustainabilityBonusAchieved"), ::OpenAPI::toJsonValue(m_sustainability_bonus_achieved));
    }
    if (m_tech_foul_count_isSet) {
        obj.insert(QString("techFoulCount"), ::OpenAPI::toJsonValue(m_tech_foul_count));
    }
    if (m_teleop_community.isSet()) {
        obj.insert(QString("teleopCommunity"), ::OpenAPI::toJsonValue(m_teleop_community));
    }
    if (m_teleop_game_piece_count_isSet) {
        obj.insert(QString("teleopGamePieceCount"), ::OpenAPI::toJsonValue(m_teleop_game_piece_count));
    }
    if (m_teleop_game_piece_points_isSet) {
        obj.insert(QString("teleopGamePiecePoints"), ::OpenAPI::toJsonValue(m_teleop_game_piece_points));
    }
    if (m_teleop_points_isSet) {
        obj.insert(QString("teleopPoints"), ::OpenAPI::toJsonValue(m_teleop_points));
    }
    if (m_total_charge_station_points_isSet) {
        obj.insert(QString("totalChargeStationPoints"), ::OpenAPI::toJsonValue(m_total_charge_station_points));
    }
    if (m_total_points_isSet) {
        obj.insert(QString("totalPoints"), ::OpenAPI::toJsonValue(m_total_points));
    }
    return obj;
}

bool OAIMatch_Score_Breakdown_2023_Alliance::isActivationBonusAchieved() const {
    return m_activation_bonus_achieved;
}
void OAIMatch_Score_Breakdown_2023_Alliance::setActivationBonusAchieved(const bool &activation_bonus_achieved) {
    m_activation_bonus_achieved = activation_bonus_achieved;
    m_activation_bonus_achieved_isSet = true;
}

bool OAIMatch_Score_Breakdown_2023_Alliance::is_activation_bonus_achieved_Set() const{
    return m_activation_bonus_achieved_isSet;
}

bool OAIMatch_Score_Breakdown_2023_Alliance::is_activation_bonus_achieved_Valid() const{
    return m_activation_bonus_achieved_isValid;
}

qint32 OAIMatch_Score_Breakdown_2023_Alliance::getAdjustPoints() const {
    return m_adjust_points;
}
void OAIMatch_Score_Breakdown_2023_Alliance::setAdjustPoints(const qint32 &adjust_points) {
    m_adjust_points = adjust_points;
    m_adjust_points_isSet = true;
}

bool OAIMatch_Score_Breakdown_2023_Alliance::is_adjust_points_Set() const{
    return m_adjust_points_isSet;
}

bool OAIMatch_Score_Breakdown_2023_Alliance::is_adjust_points_Valid() const{
    return m_adjust_points_isValid;
}

QString OAIMatch_Score_Breakdown_2023_Alliance::getAutoBridgeState() const {
    return m_auto_bridge_state;
}
void OAIMatch_Score_Breakdown_2023_Alliance::setAutoBridgeState(const QString &auto_bridge_state) {
    m_auto_bridge_state = auto_bridge_state;
    m_auto_bridge_state_isSet = true;
}

bool OAIMatch_Score_Breakdown_2023_Alliance::is_auto_bridge_state_Set() const{
    return m_auto_bridge_state_isSet;
}

bool OAIMatch_Score_Breakdown_2023_Alliance::is_auto_bridge_state_Valid() const{
    return m_auto_bridge_state_isValid;
}

qint32 OAIMatch_Score_Breakdown_2023_Alliance::getAutoChargeStationPoints() const {
    return m_auto_charge_station_points;
}
void OAIMatch_Score_Breakdown_2023_Alliance::setAutoChargeStationPoints(const qint32 &auto_charge_station_points) {
    m_auto_charge_station_points = auto_charge_station_points;
    m_auto_charge_station_points_isSet = true;
}

bool OAIMatch_Score_Breakdown_2023_Alliance::is_auto_charge_station_points_Set() const{
    return m_auto_charge_station_points_isSet;
}

bool OAIMatch_Score_Breakdown_2023_Alliance::is_auto_charge_station_points_Valid() const{
    return m_auto_charge_station_points_isValid;
}

QString OAIMatch_Score_Breakdown_2023_Alliance::getAutoChargeStationRobot1() const {
    return m_auto_charge_station_robot1;
}
void OAIMatch_Score_Breakdown_2023_Alliance::setAutoChargeStationRobot1(const QString &auto_charge_station_robot1) {
    m_auto_charge_station_robot1 = auto_charge_station_robot1;
    m_auto_charge_station_robot1_isSet = true;
}

bool OAIMatch_Score_Breakdown_2023_Alliance::is_auto_charge_station_robot1_Set() const{
    return m_auto_charge_station_robot1_isSet;
}

bool OAIMatch_Score_Breakdown_2023_Alliance::is_auto_charge_station_robot1_Valid() const{
    return m_auto_charge_station_robot1_isValid;
}

QString OAIMatch_Score_Breakdown_2023_Alliance::getAutoChargeStationRobot2() const {
    return m_auto_charge_station_robot2;
}
void OAIMatch_Score_Breakdown_2023_Alliance::setAutoChargeStationRobot2(const QString &auto_charge_station_robot2) {
    m_auto_charge_station_robot2 = auto_charge_station_robot2;
    m_auto_charge_station_robot2_isSet = true;
}

bool OAIMatch_Score_Breakdown_2023_Alliance::is_auto_charge_station_robot2_Set() const{
    return m_auto_charge_station_robot2_isSet;
}

bool OAIMatch_Score_Breakdown_2023_Alliance::is_auto_charge_station_robot2_Valid() const{
    return m_auto_charge_station_robot2_isValid;
}

QString OAIMatch_Score_Breakdown_2023_Alliance::getAutoChargeStationRobot3() const {
    return m_auto_charge_station_robot3;
}
void OAIMatch_Score_Breakdown_2023_Alliance::setAutoChargeStationRobot3(const QString &auto_charge_station_robot3) {
    m_auto_charge_station_robot3 = auto_charge_station_robot3;
    m_auto_charge_station_robot3_isSet = true;
}

bool OAIMatch_Score_Breakdown_2023_Alliance::is_auto_charge_station_robot3_Set() const{
    return m_auto_charge_station_robot3_isSet;
}

bool OAIMatch_Score_Breakdown_2023_Alliance::is_auto_charge_station_robot3_Valid() const{
    return m_auto_charge_station_robot3_isValid;
}

OAIMatch_Score_Breakdown_2023_Alliance_autoCommunity OAIMatch_Score_Breakdown_2023_Alliance::getAutoCommunity() const {
    return m_auto_community;
}
void OAIMatch_Score_Breakdown_2023_Alliance::setAutoCommunity(const OAIMatch_Score_Breakdown_2023_Alliance_autoCommunity &auto_community) {
    m_auto_community = auto_community;
    m_auto_community_isSet = true;
}

bool OAIMatch_Score_Breakdown_2023_Alliance::is_auto_community_Set() const{
    return m_auto_community_isSet;
}

bool OAIMatch_Score_Breakdown_2023_Alliance::is_auto_community_Valid() const{
    return m_auto_community_isValid;
}

bool OAIMatch_Score_Breakdown_2023_Alliance::isAutoDocked() const {
    return m_auto_docked;
}
void OAIMatch_Score_Breakdown_2023_Alliance::setAutoDocked(const bool &auto_docked) {
    m_auto_docked = auto_docked;
    m_auto_docked_isSet = true;
}

bool OAIMatch_Score_Breakdown_2023_Alliance::is_auto_docked_Set() const{
    return m_auto_docked_isSet;
}

bool OAIMatch_Score_Breakdown_2023_Alliance::is_auto_docked_Valid() const{
    return m_auto_docked_isValid;
}

qint32 OAIMatch_Score_Breakdown_2023_Alliance::getAutoGamePieceCount() const {
    return m_auto_game_piece_count;
}
void OAIMatch_Score_Breakdown_2023_Alliance::setAutoGamePieceCount(const qint32 &auto_game_piece_count) {
    m_auto_game_piece_count = auto_game_piece_count;
    m_auto_game_piece_count_isSet = true;
}

bool OAIMatch_Score_Breakdown_2023_Alliance::is_auto_game_piece_count_Set() const{
    return m_auto_game_piece_count_isSet;
}

bool OAIMatch_Score_Breakdown_2023_Alliance::is_auto_game_piece_count_Valid() const{
    return m_auto_game_piece_count_isValid;
}

qint32 OAIMatch_Score_Breakdown_2023_Alliance::getAutoGamePiecePoints() const {
    return m_auto_game_piece_points;
}
void OAIMatch_Score_Breakdown_2023_Alliance::setAutoGamePiecePoints(const qint32 &auto_game_piece_points) {
    m_auto_game_piece_points = auto_game_piece_points;
    m_auto_game_piece_points_isSet = true;
}

bool OAIMatch_Score_Breakdown_2023_Alliance::is_auto_game_piece_points_Set() const{
    return m_auto_game_piece_points_isSet;
}

bool OAIMatch_Score_Breakdown_2023_Alliance::is_auto_game_piece_points_Valid() const{
    return m_auto_game_piece_points_isValid;
}

qint32 OAIMatch_Score_Breakdown_2023_Alliance::getAutoMobilityPoints() const {
    return m_auto_mobility_points;
}
void OAIMatch_Score_Breakdown_2023_Alliance::setAutoMobilityPoints(const qint32 &auto_mobility_points) {
    m_auto_mobility_points = auto_mobility_points;
    m_auto_mobility_points_isSet = true;
}

bool OAIMatch_Score_Breakdown_2023_Alliance::is_auto_mobility_points_Set() const{
    return m_auto_mobility_points_isSet;
}

bool OAIMatch_Score_Breakdown_2023_Alliance::is_auto_mobility_points_Valid() const{
    return m_auto_mobility_points_isValid;
}

qint32 OAIMatch_Score_Breakdown_2023_Alliance::getAutoPoints() const {
    return m_auto_points;
}
void OAIMatch_Score_Breakdown_2023_Alliance::setAutoPoints(const qint32 &auto_points) {
    m_auto_points = auto_points;
    m_auto_points_isSet = true;
}

bool OAIMatch_Score_Breakdown_2023_Alliance::is_auto_points_Set() const{
    return m_auto_points_isSet;
}

bool OAIMatch_Score_Breakdown_2023_Alliance::is_auto_points_Valid() const{
    return m_auto_points_isValid;
}

qint32 OAIMatch_Score_Breakdown_2023_Alliance::getCoopGamePieceCount() const {
    return m_coop_game_piece_count;
}
void OAIMatch_Score_Breakdown_2023_Alliance::setCoopGamePieceCount(const qint32 &coop_game_piece_count) {
    m_coop_game_piece_count = coop_game_piece_count;
    m_coop_game_piece_count_isSet = true;
}

bool OAIMatch_Score_Breakdown_2023_Alliance::is_coop_game_piece_count_Set() const{
    return m_coop_game_piece_count_isSet;
}

bool OAIMatch_Score_Breakdown_2023_Alliance::is_coop_game_piece_count_Valid() const{
    return m_coop_game_piece_count_isValid;
}

bool OAIMatch_Score_Breakdown_2023_Alliance::isCoopertitionCriteriaMet() const {
    return m_coopertition_criteria_met;
}
void OAIMatch_Score_Breakdown_2023_Alliance::setCoopertitionCriteriaMet(const bool &coopertition_criteria_met) {
    m_coopertition_criteria_met = coopertition_criteria_met;
    m_coopertition_criteria_met_isSet = true;
}

bool OAIMatch_Score_Breakdown_2023_Alliance::is_coopertition_criteria_met_Set() const{
    return m_coopertition_criteria_met_isSet;
}

bool OAIMatch_Score_Breakdown_2023_Alliance::is_coopertition_criteria_met_Valid() const{
    return m_coopertition_criteria_met_isValid;
}

QString OAIMatch_Score_Breakdown_2023_Alliance::getEndGameBridgeState() const {
    return m_end_game_bridge_state;
}
void OAIMatch_Score_Breakdown_2023_Alliance::setEndGameBridgeState(const QString &end_game_bridge_state) {
    m_end_game_bridge_state = end_game_bridge_state;
    m_end_game_bridge_state_isSet = true;
}

bool OAIMatch_Score_Breakdown_2023_Alliance::is_end_game_bridge_state_Set() const{
    return m_end_game_bridge_state_isSet;
}

bool OAIMatch_Score_Breakdown_2023_Alliance::is_end_game_bridge_state_Valid() const{
    return m_end_game_bridge_state_isValid;
}

qint32 OAIMatch_Score_Breakdown_2023_Alliance::getEndGameChargeStationPoints() const {
    return m_end_game_charge_station_points;
}
void OAIMatch_Score_Breakdown_2023_Alliance::setEndGameChargeStationPoints(const qint32 &end_game_charge_station_points) {
    m_end_game_charge_station_points = end_game_charge_station_points;
    m_end_game_charge_station_points_isSet = true;
}

bool OAIMatch_Score_Breakdown_2023_Alliance::is_end_game_charge_station_points_Set() const{
    return m_end_game_charge_station_points_isSet;
}

bool OAIMatch_Score_Breakdown_2023_Alliance::is_end_game_charge_station_points_Valid() const{
    return m_end_game_charge_station_points_isValid;
}

QString OAIMatch_Score_Breakdown_2023_Alliance::getEndGameChargeStationRobot1() const {
    return m_end_game_charge_station_robot1;
}
void OAIMatch_Score_Breakdown_2023_Alliance::setEndGameChargeStationRobot1(const QString &end_game_charge_station_robot1) {
    m_end_game_charge_station_robot1 = end_game_charge_station_robot1;
    m_end_game_charge_station_robot1_isSet = true;
}

bool OAIMatch_Score_Breakdown_2023_Alliance::is_end_game_charge_station_robot1_Set() const{
    return m_end_game_charge_station_robot1_isSet;
}

bool OAIMatch_Score_Breakdown_2023_Alliance::is_end_game_charge_station_robot1_Valid() const{
    return m_end_game_charge_station_robot1_isValid;
}

QString OAIMatch_Score_Breakdown_2023_Alliance::getEndGameChargeStationRobot2() const {
    return m_end_game_charge_station_robot2;
}
void OAIMatch_Score_Breakdown_2023_Alliance::setEndGameChargeStationRobot2(const QString &end_game_charge_station_robot2) {
    m_end_game_charge_station_robot2 = end_game_charge_station_robot2;
    m_end_game_charge_station_robot2_isSet = true;
}

bool OAIMatch_Score_Breakdown_2023_Alliance::is_end_game_charge_station_robot2_Set() const{
    return m_end_game_charge_station_robot2_isSet;
}

bool OAIMatch_Score_Breakdown_2023_Alliance::is_end_game_charge_station_robot2_Valid() const{
    return m_end_game_charge_station_robot2_isValid;
}

QString OAIMatch_Score_Breakdown_2023_Alliance::getEndGameChargeStationRobot3() const {
    return m_end_game_charge_station_robot3;
}
void OAIMatch_Score_Breakdown_2023_Alliance::setEndGameChargeStationRobot3(const QString &end_game_charge_station_robot3) {
    m_end_game_charge_station_robot3 = end_game_charge_station_robot3;
    m_end_game_charge_station_robot3_isSet = true;
}

bool OAIMatch_Score_Breakdown_2023_Alliance::is_end_game_charge_station_robot3_Set() const{
    return m_end_game_charge_station_robot3_isSet;
}

bool OAIMatch_Score_Breakdown_2023_Alliance::is_end_game_charge_station_robot3_Valid() const{
    return m_end_game_charge_station_robot3_isValid;
}

qint32 OAIMatch_Score_Breakdown_2023_Alliance::getEndGameParkPoints() const {
    return m_end_game_park_points;
}
void OAIMatch_Score_Breakdown_2023_Alliance::setEndGameParkPoints(const qint32 &end_game_park_points) {
    m_end_game_park_points = end_game_park_points;
    m_end_game_park_points_isSet = true;
}

bool OAIMatch_Score_Breakdown_2023_Alliance::is_end_game_park_points_Set() const{
    return m_end_game_park_points_isSet;
}

bool OAIMatch_Score_Breakdown_2023_Alliance::is_end_game_park_points_Valid() const{
    return m_end_game_park_points_isValid;
}

qint32 OAIMatch_Score_Breakdown_2023_Alliance::getExtraGamePieceCount() const {
    return m_extra_game_piece_count;
}
void OAIMatch_Score_Breakdown_2023_Alliance::setExtraGamePieceCount(const qint32 &extra_game_piece_count) {
    m_extra_game_piece_count = extra_game_piece_count;
    m_extra_game_piece_count_isSet = true;
}

bool OAIMatch_Score_Breakdown_2023_Alliance::is_extra_game_piece_count_Set() const{
    return m_extra_game_piece_count_isSet;
}

bool OAIMatch_Score_Breakdown_2023_Alliance::is_extra_game_piece_count_Valid() const{
    return m_extra_game_piece_count_isValid;
}

qint32 OAIMatch_Score_Breakdown_2023_Alliance::getFoulCount() const {
    return m_foul_count;
}
void OAIMatch_Score_Breakdown_2023_Alliance::setFoulCount(const qint32 &foul_count) {
    m_foul_count = foul_count;
    m_foul_count_isSet = true;
}

bool OAIMatch_Score_Breakdown_2023_Alliance::is_foul_count_Set() const{
    return m_foul_count_isSet;
}

bool OAIMatch_Score_Breakdown_2023_Alliance::is_foul_count_Valid() const{
    return m_foul_count_isValid;
}

qint32 OAIMatch_Score_Breakdown_2023_Alliance::getFoulPoints() const {
    return m_foul_points;
}
void OAIMatch_Score_Breakdown_2023_Alliance::setFoulPoints(const qint32 &foul_points) {
    m_foul_points = foul_points;
    m_foul_points_isSet = true;
}

bool OAIMatch_Score_Breakdown_2023_Alliance::is_foul_points_Set() const{
    return m_foul_points_isSet;
}

bool OAIMatch_Score_Breakdown_2023_Alliance::is_foul_points_Valid() const{
    return m_foul_points_isValid;
}

qint32 OAIMatch_Score_Breakdown_2023_Alliance::getLinkPoints() const {
    return m_link_points;
}
void OAIMatch_Score_Breakdown_2023_Alliance::setLinkPoints(const qint32 &link_points) {
    m_link_points = link_points;
    m_link_points_isSet = true;
}

bool OAIMatch_Score_Breakdown_2023_Alliance::is_link_points_Set() const{
    return m_link_points_isSet;
}

bool OAIMatch_Score_Breakdown_2023_Alliance::is_link_points_Valid() const{
    return m_link_points_isValid;
}

QList<OAIMatch_Score_Breakdown_2023_Alliance_links_inner> OAIMatch_Score_Breakdown_2023_Alliance::getLinks() const {
    return m_links;
}
void OAIMatch_Score_Breakdown_2023_Alliance::setLinks(const QList<OAIMatch_Score_Breakdown_2023_Alliance_links_inner> &links) {
    m_links = links;
    m_links_isSet = true;
}

bool OAIMatch_Score_Breakdown_2023_Alliance::is_links_Set() const{
    return m_links_isSet;
}

bool OAIMatch_Score_Breakdown_2023_Alliance::is_links_Valid() const{
    return m_links_isValid;
}

QString OAIMatch_Score_Breakdown_2023_Alliance::getMobilityRobot1() const {
    return m_mobility_robot1;
}
void OAIMatch_Score_Breakdown_2023_Alliance::setMobilityRobot1(const QString &mobility_robot1) {
    m_mobility_robot1 = mobility_robot1;
    m_mobility_robot1_isSet = true;
}

bool OAIMatch_Score_Breakdown_2023_Alliance::is_mobility_robot1_Set() const{
    return m_mobility_robot1_isSet;
}

bool OAIMatch_Score_Breakdown_2023_Alliance::is_mobility_robot1_Valid() const{
    return m_mobility_robot1_isValid;
}

QString OAIMatch_Score_Breakdown_2023_Alliance::getMobilityRobot2() const {
    return m_mobility_robot2;
}
void OAIMatch_Score_Breakdown_2023_Alliance::setMobilityRobot2(const QString &mobility_robot2) {
    m_mobility_robot2 = mobility_robot2;
    m_mobility_robot2_isSet = true;
}

bool OAIMatch_Score_Breakdown_2023_Alliance::is_mobility_robot2_Set() const{
    return m_mobility_robot2_isSet;
}

bool OAIMatch_Score_Breakdown_2023_Alliance::is_mobility_robot2_Valid() const{
    return m_mobility_robot2_isValid;
}

QString OAIMatch_Score_Breakdown_2023_Alliance::getMobilityRobot3() const {
    return m_mobility_robot3;
}
void OAIMatch_Score_Breakdown_2023_Alliance::setMobilityRobot3(const QString &mobility_robot3) {
    m_mobility_robot3 = mobility_robot3;
    m_mobility_robot3_isSet = true;
}

bool OAIMatch_Score_Breakdown_2023_Alliance::is_mobility_robot3_Set() const{
    return m_mobility_robot3_isSet;
}

bool OAIMatch_Score_Breakdown_2023_Alliance::is_mobility_robot3_Valid() const{
    return m_mobility_robot3_isValid;
}

qint32 OAIMatch_Score_Breakdown_2023_Alliance::getRp() const {
    return m_rp;
}
void OAIMatch_Score_Breakdown_2023_Alliance::setRp(const qint32 &rp) {
    m_rp = rp;
    m_rp_isSet = true;
}

bool OAIMatch_Score_Breakdown_2023_Alliance::is_rp_Set() const{
    return m_rp_isSet;
}

bool OAIMatch_Score_Breakdown_2023_Alliance::is_rp_Valid() const{
    return m_rp_isValid;
}

bool OAIMatch_Score_Breakdown_2023_Alliance::isSustainabilityBonusAchieved() const {
    return m_sustainability_bonus_achieved;
}
void OAIMatch_Score_Breakdown_2023_Alliance::setSustainabilityBonusAchieved(const bool &sustainability_bonus_achieved) {
    m_sustainability_bonus_achieved = sustainability_bonus_achieved;
    m_sustainability_bonus_achieved_isSet = true;
}

bool OAIMatch_Score_Breakdown_2023_Alliance::is_sustainability_bonus_achieved_Set() const{
    return m_sustainability_bonus_achieved_isSet;
}

bool OAIMatch_Score_Breakdown_2023_Alliance::is_sustainability_bonus_achieved_Valid() const{
    return m_sustainability_bonus_achieved_isValid;
}

qint32 OAIMatch_Score_Breakdown_2023_Alliance::getTechFoulCount() const {
    return m_tech_foul_count;
}
void OAIMatch_Score_Breakdown_2023_Alliance::setTechFoulCount(const qint32 &tech_foul_count) {
    m_tech_foul_count = tech_foul_count;
    m_tech_foul_count_isSet = true;
}

bool OAIMatch_Score_Breakdown_2023_Alliance::is_tech_foul_count_Set() const{
    return m_tech_foul_count_isSet;
}

bool OAIMatch_Score_Breakdown_2023_Alliance::is_tech_foul_count_Valid() const{
    return m_tech_foul_count_isValid;
}

OAIMatch_Score_Breakdown_2023_Alliance_autoCommunity OAIMatch_Score_Breakdown_2023_Alliance::getTeleopCommunity() const {
    return m_teleop_community;
}
void OAIMatch_Score_Breakdown_2023_Alliance::setTeleopCommunity(const OAIMatch_Score_Breakdown_2023_Alliance_autoCommunity &teleop_community) {
    m_teleop_community = teleop_community;
    m_teleop_community_isSet = true;
}

bool OAIMatch_Score_Breakdown_2023_Alliance::is_teleop_community_Set() const{
    return m_teleop_community_isSet;
}

bool OAIMatch_Score_Breakdown_2023_Alliance::is_teleop_community_Valid() const{
    return m_teleop_community_isValid;
}

qint32 OAIMatch_Score_Breakdown_2023_Alliance::getTeleopGamePieceCount() const {
    return m_teleop_game_piece_count;
}
void OAIMatch_Score_Breakdown_2023_Alliance::setTeleopGamePieceCount(const qint32 &teleop_game_piece_count) {
    m_teleop_game_piece_count = teleop_game_piece_count;
    m_teleop_game_piece_count_isSet = true;
}

bool OAIMatch_Score_Breakdown_2023_Alliance::is_teleop_game_piece_count_Set() const{
    return m_teleop_game_piece_count_isSet;
}

bool OAIMatch_Score_Breakdown_2023_Alliance::is_teleop_game_piece_count_Valid() const{
    return m_teleop_game_piece_count_isValid;
}

qint32 OAIMatch_Score_Breakdown_2023_Alliance::getTeleopGamePiecePoints() const {
    return m_teleop_game_piece_points;
}
void OAIMatch_Score_Breakdown_2023_Alliance::setTeleopGamePiecePoints(const qint32 &teleop_game_piece_points) {
    m_teleop_game_piece_points = teleop_game_piece_points;
    m_teleop_game_piece_points_isSet = true;
}

bool OAIMatch_Score_Breakdown_2023_Alliance::is_teleop_game_piece_points_Set() const{
    return m_teleop_game_piece_points_isSet;
}

bool OAIMatch_Score_Breakdown_2023_Alliance::is_teleop_game_piece_points_Valid() const{
    return m_teleop_game_piece_points_isValid;
}

qint32 OAIMatch_Score_Breakdown_2023_Alliance::getTeleopPoints() const {
    return m_teleop_points;
}
void OAIMatch_Score_Breakdown_2023_Alliance::setTeleopPoints(const qint32 &teleop_points) {
    m_teleop_points = teleop_points;
    m_teleop_points_isSet = true;
}

bool OAIMatch_Score_Breakdown_2023_Alliance::is_teleop_points_Set() const{
    return m_teleop_points_isSet;
}

bool OAIMatch_Score_Breakdown_2023_Alliance::is_teleop_points_Valid() const{
    return m_teleop_points_isValid;
}

qint32 OAIMatch_Score_Breakdown_2023_Alliance::getTotalChargeStationPoints() const {
    return m_total_charge_station_points;
}
void OAIMatch_Score_Breakdown_2023_Alliance::setTotalChargeStationPoints(const qint32 &total_charge_station_points) {
    m_total_charge_station_points = total_charge_station_points;
    m_total_charge_station_points_isSet = true;
}

bool OAIMatch_Score_Breakdown_2023_Alliance::is_total_charge_station_points_Set() const{
    return m_total_charge_station_points_isSet;
}

bool OAIMatch_Score_Breakdown_2023_Alliance::is_total_charge_station_points_Valid() const{
    return m_total_charge_station_points_isValid;
}

qint32 OAIMatch_Score_Breakdown_2023_Alliance::getTotalPoints() const {
    return m_total_points;
}
void OAIMatch_Score_Breakdown_2023_Alliance::setTotalPoints(const qint32 &total_points) {
    m_total_points = total_points;
    m_total_points_isSet = true;
}

bool OAIMatch_Score_Breakdown_2023_Alliance::is_total_points_Set() const{
    return m_total_points_isSet;
}

bool OAIMatch_Score_Breakdown_2023_Alliance::is_total_points_Valid() const{
    return m_total_points_isValid;
}

bool OAIMatch_Score_Breakdown_2023_Alliance::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_activation_bonus_achieved_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_adjust_points_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auto_bridge_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auto_charge_station_points_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auto_charge_station_robot1_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auto_charge_station_robot2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auto_charge_station_robot3_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auto_community.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_auto_docked_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auto_game_piece_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auto_game_piece_points_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auto_mobility_points_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auto_points_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_coop_game_piece_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_coopertition_criteria_met_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_game_bridge_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_game_charge_station_points_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_game_charge_station_robot1_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_game_charge_station_robot2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_game_charge_station_robot3_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_game_park_points_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_extra_game_piece_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_foul_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_foul_points_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_link_points_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_links.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_mobility_robot1_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mobility_robot2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mobility_robot3_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sustainability_bonus_achieved_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tech_foul_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_teleop_community.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_teleop_game_piece_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_teleop_game_piece_points_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_teleop_points_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_charge_station_points_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_points_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMatch_Score_Breakdown_2023_Alliance::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
