/**
 * The Blue Alliance API v3
 * # Overview    Information and statistics about FIRST Robotics Competition teams and events.   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).
 *
 * The version of the OpenAPI document: 3.8.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIMatch_Score_Breakdown_2022_Alliance.h
 *
 * 
 */

#ifndef OAIMatch_Score_Breakdown_2022_Alliance_H
#define OAIMatch_Score_Breakdown_2022_Alliance_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIMatch_Score_Breakdown_2022_Alliance : public OAIObject {
public:
    OAIMatch_Score_Breakdown_2022_Alliance();
    OAIMatch_Score_Breakdown_2022_Alliance(QString json);
    ~OAIMatch_Score_Breakdown_2022_Alliance() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getAdjustPoints() const;
    void setAdjustPoints(const qint32 &adjust_points);
    bool is_adjust_points_Set() const;
    bool is_adjust_points_Valid() const;

    qint32 getAutoCargoLowerBlue() const;
    void setAutoCargoLowerBlue(const qint32 &auto_cargo_lower_blue);
    bool is_auto_cargo_lower_blue_Set() const;
    bool is_auto_cargo_lower_blue_Valid() const;

    qint32 getAutoCargoLowerFar() const;
    void setAutoCargoLowerFar(const qint32 &auto_cargo_lower_far);
    bool is_auto_cargo_lower_far_Set() const;
    bool is_auto_cargo_lower_far_Valid() const;

    qint32 getAutoCargoLowerNear() const;
    void setAutoCargoLowerNear(const qint32 &auto_cargo_lower_near);
    bool is_auto_cargo_lower_near_Set() const;
    bool is_auto_cargo_lower_near_Valid() const;

    qint32 getAutoCargoLowerRed() const;
    void setAutoCargoLowerRed(const qint32 &auto_cargo_lower_red);
    bool is_auto_cargo_lower_red_Set() const;
    bool is_auto_cargo_lower_red_Valid() const;

    qint32 getAutoCargoPoints() const;
    void setAutoCargoPoints(const qint32 &auto_cargo_points);
    bool is_auto_cargo_points_Set() const;
    bool is_auto_cargo_points_Valid() const;

    qint32 getAutoCargoTotal() const;
    void setAutoCargoTotal(const qint32 &auto_cargo_total);
    bool is_auto_cargo_total_Set() const;
    bool is_auto_cargo_total_Valid() const;

    qint32 getAutoCargoUpperBlue() const;
    void setAutoCargoUpperBlue(const qint32 &auto_cargo_upper_blue);
    bool is_auto_cargo_upper_blue_Set() const;
    bool is_auto_cargo_upper_blue_Valid() const;

    qint32 getAutoCargoUpperFar() const;
    void setAutoCargoUpperFar(const qint32 &auto_cargo_upper_far);
    bool is_auto_cargo_upper_far_Set() const;
    bool is_auto_cargo_upper_far_Valid() const;

    qint32 getAutoCargoUpperNear() const;
    void setAutoCargoUpperNear(const qint32 &auto_cargo_upper_near);
    bool is_auto_cargo_upper_near_Set() const;
    bool is_auto_cargo_upper_near_Valid() const;

    qint32 getAutoCargoUpperRed() const;
    void setAutoCargoUpperRed(const qint32 &auto_cargo_upper_red);
    bool is_auto_cargo_upper_red_Set() const;
    bool is_auto_cargo_upper_red_Valid() const;

    qint32 getAutoPoints() const;
    void setAutoPoints(const qint32 &auto_points);
    bool is_auto_points_Set() const;
    bool is_auto_points_Valid() const;

    qint32 getAutoTaxiPoints() const;
    void setAutoTaxiPoints(const qint32 &auto_taxi_points);
    bool is_auto_taxi_points_Set() const;
    bool is_auto_taxi_points_Valid() const;

    bool isCargoBonusRankingPoint() const;
    void setCargoBonusRankingPoint(const bool &cargo_bonus_ranking_point);
    bool is_cargo_bonus_ranking_point_Set() const;
    bool is_cargo_bonus_ranking_point_Valid() const;

    qint32 getEndgamePoints() const;
    void setEndgamePoints(const qint32 &endgame_points);
    bool is_endgame_points_Set() const;
    bool is_endgame_points_Valid() const;

    QString getEndgameRobot1() const;
    void setEndgameRobot1(const QString &endgame_robot1);
    bool is_endgame_robot1_Set() const;
    bool is_endgame_robot1_Valid() const;

    QString getEndgameRobot2() const;
    void setEndgameRobot2(const QString &endgame_robot2);
    bool is_endgame_robot2_Set() const;
    bool is_endgame_robot2_Valid() const;

    QString getEndgameRobot3() const;
    void setEndgameRobot3(const QString &endgame_robot3);
    bool is_endgame_robot3_Set() const;
    bool is_endgame_robot3_Valid() const;

    qint32 getFoulCount() const;
    void setFoulCount(const qint32 &foul_count);
    bool is_foul_count_Set() const;
    bool is_foul_count_Valid() const;

    qint32 getFoulPoints() const;
    void setFoulPoints(const qint32 &foul_points);
    bool is_foul_points_Set() const;
    bool is_foul_points_Valid() const;

    bool isHangarBonusRankingPoint() const;
    void setHangarBonusRankingPoint(const bool &hangar_bonus_ranking_point);
    bool is_hangar_bonus_ranking_point_Set() const;
    bool is_hangar_bonus_ranking_point_Valid() const;

    qint32 getMatchCargoTotal() const;
    void setMatchCargoTotal(const qint32 &match_cargo_total);
    bool is_match_cargo_total_Set() const;
    bool is_match_cargo_total_Valid() const;

    bool isQuintetAchieved() const;
    void setQuintetAchieved(const bool &quintet_achieved);
    bool is_quintet_achieved_Set() const;
    bool is_quintet_achieved_Valid() const;

    qint32 getRp() const;
    void setRp(const qint32 &rp);
    bool is_rp_Set() const;
    bool is_rp_Valid() const;

    QString getTaxiRobot1() const;
    void setTaxiRobot1(const QString &taxi_robot1);
    bool is_taxi_robot1_Set() const;
    bool is_taxi_robot1_Valid() const;

    QString getTaxiRobot2() const;
    void setTaxiRobot2(const QString &taxi_robot2);
    bool is_taxi_robot2_Set() const;
    bool is_taxi_robot2_Valid() const;

    QString getTaxiRobot3() const;
    void setTaxiRobot3(const QString &taxi_robot3);
    bool is_taxi_robot3_Set() const;
    bool is_taxi_robot3_Valid() const;

    qint32 getTechFoulCount() const;
    void setTechFoulCount(const qint32 &tech_foul_count);
    bool is_tech_foul_count_Set() const;
    bool is_tech_foul_count_Valid() const;

    qint32 getTeleopCargoLowerBlue() const;
    void setTeleopCargoLowerBlue(const qint32 &teleop_cargo_lower_blue);
    bool is_teleop_cargo_lower_blue_Set() const;
    bool is_teleop_cargo_lower_blue_Valid() const;

    qint32 getTeleopCargoLowerFar() const;
    void setTeleopCargoLowerFar(const qint32 &teleop_cargo_lower_far);
    bool is_teleop_cargo_lower_far_Set() const;
    bool is_teleop_cargo_lower_far_Valid() const;

    qint32 getTeleopCargoLowerNear() const;
    void setTeleopCargoLowerNear(const qint32 &teleop_cargo_lower_near);
    bool is_teleop_cargo_lower_near_Set() const;
    bool is_teleop_cargo_lower_near_Valid() const;

    qint32 getTeleopCargoLowerRed() const;
    void setTeleopCargoLowerRed(const qint32 &teleop_cargo_lower_red);
    bool is_teleop_cargo_lower_red_Set() const;
    bool is_teleop_cargo_lower_red_Valid() const;

    qint32 getTeleopCargoPoints() const;
    void setTeleopCargoPoints(const qint32 &teleop_cargo_points);
    bool is_teleop_cargo_points_Set() const;
    bool is_teleop_cargo_points_Valid() const;

    qint32 getTeleopCargoTotal() const;
    void setTeleopCargoTotal(const qint32 &teleop_cargo_total);
    bool is_teleop_cargo_total_Set() const;
    bool is_teleop_cargo_total_Valid() const;

    qint32 getTeleopCargoUpperBlue() const;
    void setTeleopCargoUpperBlue(const qint32 &teleop_cargo_upper_blue);
    bool is_teleop_cargo_upper_blue_Set() const;
    bool is_teleop_cargo_upper_blue_Valid() const;

    qint32 getTeleopCargoUpperFar() const;
    void setTeleopCargoUpperFar(const qint32 &teleop_cargo_upper_far);
    bool is_teleop_cargo_upper_far_Set() const;
    bool is_teleop_cargo_upper_far_Valid() const;

    qint32 getTeleopCargoUpperNear() const;
    void setTeleopCargoUpperNear(const qint32 &teleop_cargo_upper_near);
    bool is_teleop_cargo_upper_near_Set() const;
    bool is_teleop_cargo_upper_near_Valid() const;

    qint32 getTeleopCargoUpperRed() const;
    void setTeleopCargoUpperRed(const qint32 &teleop_cargo_upper_red);
    bool is_teleop_cargo_upper_red_Set() const;
    bool is_teleop_cargo_upper_red_Valid() const;

    qint32 getTeleopPoints() const;
    void setTeleopPoints(const qint32 &teleop_points);
    bool is_teleop_points_Set() const;
    bool is_teleop_points_Valid() const;

    qint32 getTotalPoints() const;
    void setTotalPoints(const qint32 &total_points);
    bool is_total_points_Set() const;
    bool is_total_points_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_adjust_points;
    bool m_adjust_points_isSet;
    bool m_adjust_points_isValid;

    qint32 m_auto_cargo_lower_blue;
    bool m_auto_cargo_lower_blue_isSet;
    bool m_auto_cargo_lower_blue_isValid;

    qint32 m_auto_cargo_lower_far;
    bool m_auto_cargo_lower_far_isSet;
    bool m_auto_cargo_lower_far_isValid;

    qint32 m_auto_cargo_lower_near;
    bool m_auto_cargo_lower_near_isSet;
    bool m_auto_cargo_lower_near_isValid;

    qint32 m_auto_cargo_lower_red;
    bool m_auto_cargo_lower_red_isSet;
    bool m_auto_cargo_lower_red_isValid;

    qint32 m_auto_cargo_points;
    bool m_auto_cargo_points_isSet;
    bool m_auto_cargo_points_isValid;

    qint32 m_auto_cargo_total;
    bool m_auto_cargo_total_isSet;
    bool m_auto_cargo_total_isValid;

    qint32 m_auto_cargo_upper_blue;
    bool m_auto_cargo_upper_blue_isSet;
    bool m_auto_cargo_upper_blue_isValid;

    qint32 m_auto_cargo_upper_far;
    bool m_auto_cargo_upper_far_isSet;
    bool m_auto_cargo_upper_far_isValid;

    qint32 m_auto_cargo_upper_near;
    bool m_auto_cargo_upper_near_isSet;
    bool m_auto_cargo_upper_near_isValid;

    qint32 m_auto_cargo_upper_red;
    bool m_auto_cargo_upper_red_isSet;
    bool m_auto_cargo_upper_red_isValid;

    qint32 m_auto_points;
    bool m_auto_points_isSet;
    bool m_auto_points_isValid;

    qint32 m_auto_taxi_points;
    bool m_auto_taxi_points_isSet;
    bool m_auto_taxi_points_isValid;

    bool m_cargo_bonus_ranking_point;
    bool m_cargo_bonus_ranking_point_isSet;
    bool m_cargo_bonus_ranking_point_isValid;

    qint32 m_endgame_points;
    bool m_endgame_points_isSet;
    bool m_endgame_points_isValid;

    QString m_endgame_robot1;
    bool m_endgame_robot1_isSet;
    bool m_endgame_robot1_isValid;

    QString m_endgame_robot2;
    bool m_endgame_robot2_isSet;
    bool m_endgame_robot2_isValid;

    QString m_endgame_robot3;
    bool m_endgame_robot3_isSet;
    bool m_endgame_robot3_isValid;

    qint32 m_foul_count;
    bool m_foul_count_isSet;
    bool m_foul_count_isValid;

    qint32 m_foul_points;
    bool m_foul_points_isSet;
    bool m_foul_points_isValid;

    bool m_hangar_bonus_ranking_point;
    bool m_hangar_bonus_ranking_point_isSet;
    bool m_hangar_bonus_ranking_point_isValid;

    qint32 m_match_cargo_total;
    bool m_match_cargo_total_isSet;
    bool m_match_cargo_total_isValid;

    bool m_quintet_achieved;
    bool m_quintet_achieved_isSet;
    bool m_quintet_achieved_isValid;

    qint32 m_rp;
    bool m_rp_isSet;
    bool m_rp_isValid;

    QString m_taxi_robot1;
    bool m_taxi_robot1_isSet;
    bool m_taxi_robot1_isValid;

    QString m_taxi_robot2;
    bool m_taxi_robot2_isSet;
    bool m_taxi_robot2_isValid;

    QString m_taxi_robot3;
    bool m_taxi_robot3_isSet;
    bool m_taxi_robot3_isValid;

    qint32 m_tech_foul_count;
    bool m_tech_foul_count_isSet;
    bool m_tech_foul_count_isValid;

    qint32 m_teleop_cargo_lower_blue;
    bool m_teleop_cargo_lower_blue_isSet;
    bool m_teleop_cargo_lower_blue_isValid;

    qint32 m_teleop_cargo_lower_far;
    bool m_teleop_cargo_lower_far_isSet;
    bool m_teleop_cargo_lower_far_isValid;

    qint32 m_teleop_cargo_lower_near;
    bool m_teleop_cargo_lower_near_isSet;
    bool m_teleop_cargo_lower_near_isValid;

    qint32 m_teleop_cargo_lower_red;
    bool m_teleop_cargo_lower_red_isSet;
    bool m_teleop_cargo_lower_red_isValid;

    qint32 m_teleop_cargo_points;
    bool m_teleop_cargo_points_isSet;
    bool m_teleop_cargo_points_isValid;

    qint32 m_teleop_cargo_total;
    bool m_teleop_cargo_total_isSet;
    bool m_teleop_cargo_total_isValid;

    qint32 m_teleop_cargo_upper_blue;
    bool m_teleop_cargo_upper_blue_isSet;
    bool m_teleop_cargo_upper_blue_isValid;

    qint32 m_teleop_cargo_upper_far;
    bool m_teleop_cargo_upper_far_isSet;
    bool m_teleop_cargo_upper_far_isValid;

    qint32 m_teleop_cargo_upper_near;
    bool m_teleop_cargo_upper_near_isSet;
    bool m_teleop_cargo_upper_near_isValid;

    qint32 m_teleop_cargo_upper_red;
    bool m_teleop_cargo_upper_red_isSet;
    bool m_teleop_cargo_upper_red_isValid;

    qint32 m_teleop_points;
    bool m_teleop_points_isSet;
    bool m_teleop_points_isValid;

    qint32 m_total_points;
    bool m_total_points_isSet;
    bool m_total_points_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIMatch_Score_Breakdown_2022_Alliance)

#endif // OAIMatch_Score_Breakdown_2022_Alliance_H
