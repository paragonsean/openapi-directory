/**
 * The Blue Alliance API v3
 * # Overview    Information and statistics about FIRST Robotics Competition teams and events.   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).
 *
 * The version of the OpenAPI document: 3.8.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMatch_Timeseries_2018.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMatch_Timeseries_2018::OAIMatch_Timeseries_2018(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMatch_Timeseries_2018::OAIMatch_Timeseries_2018() {
    this->initializeModel();
}

OAIMatch_Timeseries_2018::~OAIMatch_Timeseries_2018() {}

void OAIMatch_Timeseries_2018::initializeModel() {

    m_blue_auto_quest_isSet = false;
    m_blue_auto_quest_isValid = false;

    m_blue_boost_count_isSet = false;
    m_blue_boost_count_isValid = false;

    m_blue_boost_played_isSet = false;
    m_blue_boost_played_isValid = false;

    m_blue_current_powerup_isSet = false;
    m_blue_current_powerup_isValid = false;

    m_blue_face_the_boss_isSet = false;
    m_blue_face_the_boss_isValid = false;

    m_blue_force_count_isSet = false;
    m_blue_force_count_isValid = false;

    m_blue_force_played_isSet = false;
    m_blue_force_played_isValid = false;

    m_blue_levitate_count_isSet = false;
    m_blue_levitate_count_isValid = false;

    m_blue_levitate_played_isSet = false;
    m_blue_levitate_played_isValid = false;

    m_blue_powerup_time_remaining_isSet = false;
    m_blue_powerup_time_remaining_isValid = false;

    m_blue_scale_owned_isSet = false;
    m_blue_scale_owned_isValid = false;

    m_blue_score_isSet = false;
    m_blue_score_isValid = false;

    m_blue_switch_owned_isSet = false;
    m_blue_switch_owned_isValid = false;

    m_event_key_isSet = false;
    m_event_key_isValid = false;

    m_match_id_isSet = false;
    m_match_id_isValid = false;

    m_mode_isSet = false;
    m_mode_isValid = false;

    m_play_isSet = false;
    m_play_isValid = false;

    m_red_auto_quest_isSet = false;
    m_red_auto_quest_isValid = false;

    m_red_boost_count_isSet = false;
    m_red_boost_count_isValid = false;

    m_red_boost_played_isSet = false;
    m_red_boost_played_isValid = false;

    m_red_current_powerup_isSet = false;
    m_red_current_powerup_isValid = false;

    m_red_face_the_boss_isSet = false;
    m_red_face_the_boss_isValid = false;

    m_red_force_count_isSet = false;
    m_red_force_count_isValid = false;

    m_red_force_played_isSet = false;
    m_red_force_played_isValid = false;

    m_red_levitate_count_isSet = false;
    m_red_levitate_count_isValid = false;

    m_red_levitate_played_isSet = false;
    m_red_levitate_played_isValid = false;

    m_red_powerup_time_remaining_isSet = false;
    m_red_powerup_time_remaining_isValid = false;

    m_red_scale_owned_isSet = false;
    m_red_scale_owned_isValid = false;

    m_red_score_isSet = false;
    m_red_score_isValid = false;

    m_red_switch_owned_isSet = false;
    m_red_switch_owned_isValid = false;

    m_time_remaining_isSet = false;
    m_time_remaining_isValid = false;
}

void OAIMatch_Timeseries_2018::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMatch_Timeseries_2018::fromJsonObject(QJsonObject json) {

    m_blue_auto_quest_isValid = ::OpenAPI::fromJsonValue(m_blue_auto_quest, json[QString("blue_auto_quest")]);
    m_blue_auto_quest_isSet = !json[QString("blue_auto_quest")].isNull() && m_blue_auto_quest_isValid;

    m_blue_boost_count_isValid = ::OpenAPI::fromJsonValue(m_blue_boost_count, json[QString("blue_boost_count")]);
    m_blue_boost_count_isSet = !json[QString("blue_boost_count")].isNull() && m_blue_boost_count_isValid;

    m_blue_boost_played_isValid = ::OpenAPI::fromJsonValue(m_blue_boost_played, json[QString("blue_boost_played")]);
    m_blue_boost_played_isSet = !json[QString("blue_boost_played")].isNull() && m_blue_boost_played_isValid;

    m_blue_current_powerup_isValid = ::OpenAPI::fromJsonValue(m_blue_current_powerup, json[QString("blue_current_powerup")]);
    m_blue_current_powerup_isSet = !json[QString("blue_current_powerup")].isNull() && m_blue_current_powerup_isValid;

    m_blue_face_the_boss_isValid = ::OpenAPI::fromJsonValue(m_blue_face_the_boss, json[QString("blue_face_the_boss")]);
    m_blue_face_the_boss_isSet = !json[QString("blue_face_the_boss")].isNull() && m_blue_face_the_boss_isValid;

    m_blue_force_count_isValid = ::OpenAPI::fromJsonValue(m_blue_force_count, json[QString("blue_force_count")]);
    m_blue_force_count_isSet = !json[QString("blue_force_count")].isNull() && m_blue_force_count_isValid;

    m_blue_force_played_isValid = ::OpenAPI::fromJsonValue(m_blue_force_played, json[QString("blue_force_played")]);
    m_blue_force_played_isSet = !json[QString("blue_force_played")].isNull() && m_blue_force_played_isValid;

    m_blue_levitate_count_isValid = ::OpenAPI::fromJsonValue(m_blue_levitate_count, json[QString("blue_levitate_count")]);
    m_blue_levitate_count_isSet = !json[QString("blue_levitate_count")].isNull() && m_blue_levitate_count_isValid;

    m_blue_levitate_played_isValid = ::OpenAPI::fromJsonValue(m_blue_levitate_played, json[QString("blue_levitate_played")]);
    m_blue_levitate_played_isSet = !json[QString("blue_levitate_played")].isNull() && m_blue_levitate_played_isValid;

    m_blue_powerup_time_remaining_isValid = ::OpenAPI::fromJsonValue(m_blue_powerup_time_remaining, json[QString("blue_powerup_time_remaining")]);
    m_blue_powerup_time_remaining_isSet = !json[QString("blue_powerup_time_remaining")].isNull() && m_blue_powerup_time_remaining_isValid;

    m_blue_scale_owned_isValid = ::OpenAPI::fromJsonValue(m_blue_scale_owned, json[QString("blue_scale_owned")]);
    m_blue_scale_owned_isSet = !json[QString("blue_scale_owned")].isNull() && m_blue_scale_owned_isValid;

    m_blue_score_isValid = ::OpenAPI::fromJsonValue(m_blue_score, json[QString("blue_score")]);
    m_blue_score_isSet = !json[QString("blue_score")].isNull() && m_blue_score_isValid;

    m_blue_switch_owned_isValid = ::OpenAPI::fromJsonValue(m_blue_switch_owned, json[QString("blue_switch_owned")]);
    m_blue_switch_owned_isSet = !json[QString("blue_switch_owned")].isNull() && m_blue_switch_owned_isValid;

    m_event_key_isValid = ::OpenAPI::fromJsonValue(m_event_key, json[QString("event_key")]);
    m_event_key_isSet = !json[QString("event_key")].isNull() && m_event_key_isValid;

    m_match_id_isValid = ::OpenAPI::fromJsonValue(m_match_id, json[QString("match_id")]);
    m_match_id_isSet = !json[QString("match_id")].isNull() && m_match_id_isValid;

    m_mode_isValid = ::OpenAPI::fromJsonValue(m_mode, json[QString("mode")]);
    m_mode_isSet = !json[QString("mode")].isNull() && m_mode_isValid;

    m_play_isValid = ::OpenAPI::fromJsonValue(m_play, json[QString("play")]);
    m_play_isSet = !json[QString("play")].isNull() && m_play_isValid;

    m_red_auto_quest_isValid = ::OpenAPI::fromJsonValue(m_red_auto_quest, json[QString("red_auto_quest")]);
    m_red_auto_quest_isSet = !json[QString("red_auto_quest")].isNull() && m_red_auto_quest_isValid;

    m_red_boost_count_isValid = ::OpenAPI::fromJsonValue(m_red_boost_count, json[QString("red_boost_count")]);
    m_red_boost_count_isSet = !json[QString("red_boost_count")].isNull() && m_red_boost_count_isValid;

    m_red_boost_played_isValid = ::OpenAPI::fromJsonValue(m_red_boost_played, json[QString("red_boost_played")]);
    m_red_boost_played_isSet = !json[QString("red_boost_played")].isNull() && m_red_boost_played_isValid;

    m_red_current_powerup_isValid = ::OpenAPI::fromJsonValue(m_red_current_powerup, json[QString("red_current_powerup")]);
    m_red_current_powerup_isSet = !json[QString("red_current_powerup")].isNull() && m_red_current_powerup_isValid;

    m_red_face_the_boss_isValid = ::OpenAPI::fromJsonValue(m_red_face_the_boss, json[QString("red_face_the_boss")]);
    m_red_face_the_boss_isSet = !json[QString("red_face_the_boss")].isNull() && m_red_face_the_boss_isValid;

    m_red_force_count_isValid = ::OpenAPI::fromJsonValue(m_red_force_count, json[QString("red_force_count")]);
    m_red_force_count_isSet = !json[QString("red_force_count")].isNull() && m_red_force_count_isValid;

    m_red_force_played_isValid = ::OpenAPI::fromJsonValue(m_red_force_played, json[QString("red_force_played")]);
    m_red_force_played_isSet = !json[QString("red_force_played")].isNull() && m_red_force_played_isValid;

    m_red_levitate_count_isValid = ::OpenAPI::fromJsonValue(m_red_levitate_count, json[QString("red_levitate_count")]);
    m_red_levitate_count_isSet = !json[QString("red_levitate_count")].isNull() && m_red_levitate_count_isValid;

    m_red_levitate_played_isValid = ::OpenAPI::fromJsonValue(m_red_levitate_played, json[QString("red_levitate_played")]);
    m_red_levitate_played_isSet = !json[QString("red_levitate_played")].isNull() && m_red_levitate_played_isValid;

    m_red_powerup_time_remaining_isValid = ::OpenAPI::fromJsonValue(m_red_powerup_time_remaining, json[QString("red_powerup_time_remaining")]);
    m_red_powerup_time_remaining_isSet = !json[QString("red_powerup_time_remaining")].isNull() && m_red_powerup_time_remaining_isValid;

    m_red_scale_owned_isValid = ::OpenAPI::fromJsonValue(m_red_scale_owned, json[QString("red_scale_owned")]);
    m_red_scale_owned_isSet = !json[QString("red_scale_owned")].isNull() && m_red_scale_owned_isValid;

    m_red_score_isValid = ::OpenAPI::fromJsonValue(m_red_score, json[QString("red_score")]);
    m_red_score_isSet = !json[QString("red_score")].isNull() && m_red_score_isValid;

    m_red_switch_owned_isValid = ::OpenAPI::fromJsonValue(m_red_switch_owned, json[QString("red_switch_owned")]);
    m_red_switch_owned_isSet = !json[QString("red_switch_owned")].isNull() && m_red_switch_owned_isValid;

    m_time_remaining_isValid = ::OpenAPI::fromJsonValue(m_time_remaining, json[QString("time_remaining")]);
    m_time_remaining_isSet = !json[QString("time_remaining")].isNull() && m_time_remaining_isValid;
}

QString OAIMatch_Timeseries_2018::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMatch_Timeseries_2018::asJsonObject() const {
    QJsonObject obj;
    if (m_blue_auto_quest_isSet) {
        obj.insert(QString("blue_auto_quest"), ::OpenAPI::toJsonValue(m_blue_auto_quest));
    }
    if (m_blue_boost_count_isSet) {
        obj.insert(QString("blue_boost_count"), ::OpenAPI::toJsonValue(m_blue_boost_count));
    }
    if (m_blue_boost_played_isSet) {
        obj.insert(QString("blue_boost_played"), ::OpenAPI::toJsonValue(m_blue_boost_played));
    }
    if (m_blue_current_powerup_isSet) {
        obj.insert(QString("blue_current_powerup"), ::OpenAPI::toJsonValue(m_blue_current_powerup));
    }
    if (m_blue_face_the_boss_isSet) {
        obj.insert(QString("blue_face_the_boss"), ::OpenAPI::toJsonValue(m_blue_face_the_boss));
    }
    if (m_blue_force_count_isSet) {
        obj.insert(QString("blue_force_count"), ::OpenAPI::toJsonValue(m_blue_force_count));
    }
    if (m_blue_force_played_isSet) {
        obj.insert(QString("blue_force_played"), ::OpenAPI::toJsonValue(m_blue_force_played));
    }
    if (m_blue_levitate_count_isSet) {
        obj.insert(QString("blue_levitate_count"), ::OpenAPI::toJsonValue(m_blue_levitate_count));
    }
    if (m_blue_levitate_played_isSet) {
        obj.insert(QString("blue_levitate_played"), ::OpenAPI::toJsonValue(m_blue_levitate_played));
    }
    if (m_blue_powerup_time_remaining_isSet) {
        obj.insert(QString("blue_powerup_time_remaining"), ::OpenAPI::toJsonValue(m_blue_powerup_time_remaining));
    }
    if (m_blue_scale_owned_isSet) {
        obj.insert(QString("blue_scale_owned"), ::OpenAPI::toJsonValue(m_blue_scale_owned));
    }
    if (m_blue_score_isSet) {
        obj.insert(QString("blue_score"), ::OpenAPI::toJsonValue(m_blue_score));
    }
    if (m_blue_switch_owned_isSet) {
        obj.insert(QString("blue_switch_owned"), ::OpenAPI::toJsonValue(m_blue_switch_owned));
    }
    if (m_event_key_isSet) {
        obj.insert(QString("event_key"), ::OpenAPI::toJsonValue(m_event_key));
    }
    if (m_match_id_isSet) {
        obj.insert(QString("match_id"), ::OpenAPI::toJsonValue(m_match_id));
    }
    if (m_mode_isSet) {
        obj.insert(QString("mode"), ::OpenAPI::toJsonValue(m_mode));
    }
    if (m_play_isSet) {
        obj.insert(QString("play"), ::OpenAPI::toJsonValue(m_play));
    }
    if (m_red_auto_quest_isSet) {
        obj.insert(QString("red_auto_quest"), ::OpenAPI::toJsonValue(m_red_auto_quest));
    }
    if (m_red_boost_count_isSet) {
        obj.insert(QString("red_boost_count"), ::OpenAPI::toJsonValue(m_red_boost_count));
    }
    if (m_red_boost_played_isSet) {
        obj.insert(QString("red_boost_played"), ::OpenAPI::toJsonValue(m_red_boost_played));
    }
    if (m_red_current_powerup_isSet) {
        obj.insert(QString("red_current_powerup"), ::OpenAPI::toJsonValue(m_red_current_powerup));
    }
    if (m_red_face_the_boss_isSet) {
        obj.insert(QString("red_face_the_boss"), ::OpenAPI::toJsonValue(m_red_face_the_boss));
    }
    if (m_red_force_count_isSet) {
        obj.insert(QString("red_force_count"), ::OpenAPI::toJsonValue(m_red_force_count));
    }
    if (m_red_force_played_isSet) {
        obj.insert(QString("red_force_played"), ::OpenAPI::toJsonValue(m_red_force_played));
    }
    if (m_red_levitate_count_isSet) {
        obj.insert(QString("red_levitate_count"), ::OpenAPI::toJsonValue(m_red_levitate_count));
    }
    if (m_red_levitate_played_isSet) {
        obj.insert(QString("red_levitate_played"), ::OpenAPI::toJsonValue(m_red_levitate_played));
    }
    if (m_red_powerup_time_remaining_isSet) {
        obj.insert(QString("red_powerup_time_remaining"), ::OpenAPI::toJsonValue(m_red_powerup_time_remaining));
    }
    if (m_red_scale_owned_isSet) {
        obj.insert(QString("red_scale_owned"), ::OpenAPI::toJsonValue(m_red_scale_owned));
    }
    if (m_red_score_isSet) {
        obj.insert(QString("red_score"), ::OpenAPI::toJsonValue(m_red_score));
    }
    if (m_red_switch_owned_isSet) {
        obj.insert(QString("red_switch_owned"), ::OpenAPI::toJsonValue(m_red_switch_owned));
    }
    if (m_time_remaining_isSet) {
        obj.insert(QString("time_remaining"), ::OpenAPI::toJsonValue(m_time_remaining));
    }
    return obj;
}

qint32 OAIMatch_Timeseries_2018::getBlueAutoQuest() const {
    return m_blue_auto_quest;
}
void OAIMatch_Timeseries_2018::setBlueAutoQuest(const qint32 &blue_auto_quest) {
    m_blue_auto_quest = blue_auto_quest;
    m_blue_auto_quest_isSet = true;
}

bool OAIMatch_Timeseries_2018::is_blue_auto_quest_Set() const{
    return m_blue_auto_quest_isSet;
}

bool OAIMatch_Timeseries_2018::is_blue_auto_quest_Valid() const{
    return m_blue_auto_quest_isValid;
}

qint32 OAIMatch_Timeseries_2018::getBlueBoostCount() const {
    return m_blue_boost_count;
}
void OAIMatch_Timeseries_2018::setBlueBoostCount(const qint32 &blue_boost_count) {
    m_blue_boost_count = blue_boost_count;
    m_blue_boost_count_isSet = true;
}

bool OAIMatch_Timeseries_2018::is_blue_boost_count_Set() const{
    return m_blue_boost_count_isSet;
}

bool OAIMatch_Timeseries_2018::is_blue_boost_count_Valid() const{
    return m_blue_boost_count_isValid;
}

qint32 OAIMatch_Timeseries_2018::getBlueBoostPlayed() const {
    return m_blue_boost_played;
}
void OAIMatch_Timeseries_2018::setBlueBoostPlayed(const qint32 &blue_boost_played) {
    m_blue_boost_played = blue_boost_played;
    m_blue_boost_played_isSet = true;
}

bool OAIMatch_Timeseries_2018::is_blue_boost_played_Set() const{
    return m_blue_boost_played_isSet;
}

bool OAIMatch_Timeseries_2018::is_blue_boost_played_Valid() const{
    return m_blue_boost_played_isValid;
}

QString OAIMatch_Timeseries_2018::getBlueCurrentPowerup() const {
    return m_blue_current_powerup;
}
void OAIMatch_Timeseries_2018::setBlueCurrentPowerup(const QString &blue_current_powerup) {
    m_blue_current_powerup = blue_current_powerup;
    m_blue_current_powerup_isSet = true;
}

bool OAIMatch_Timeseries_2018::is_blue_current_powerup_Set() const{
    return m_blue_current_powerup_isSet;
}

bool OAIMatch_Timeseries_2018::is_blue_current_powerup_Valid() const{
    return m_blue_current_powerup_isValid;
}

qint32 OAIMatch_Timeseries_2018::getBlueFaceTheBoss() const {
    return m_blue_face_the_boss;
}
void OAIMatch_Timeseries_2018::setBlueFaceTheBoss(const qint32 &blue_face_the_boss) {
    m_blue_face_the_boss = blue_face_the_boss;
    m_blue_face_the_boss_isSet = true;
}

bool OAIMatch_Timeseries_2018::is_blue_face_the_boss_Set() const{
    return m_blue_face_the_boss_isSet;
}

bool OAIMatch_Timeseries_2018::is_blue_face_the_boss_Valid() const{
    return m_blue_face_the_boss_isValid;
}

qint32 OAIMatch_Timeseries_2018::getBlueForceCount() const {
    return m_blue_force_count;
}
void OAIMatch_Timeseries_2018::setBlueForceCount(const qint32 &blue_force_count) {
    m_blue_force_count = blue_force_count;
    m_blue_force_count_isSet = true;
}

bool OAIMatch_Timeseries_2018::is_blue_force_count_Set() const{
    return m_blue_force_count_isSet;
}

bool OAIMatch_Timeseries_2018::is_blue_force_count_Valid() const{
    return m_blue_force_count_isValid;
}

qint32 OAIMatch_Timeseries_2018::getBlueForcePlayed() const {
    return m_blue_force_played;
}
void OAIMatch_Timeseries_2018::setBlueForcePlayed(const qint32 &blue_force_played) {
    m_blue_force_played = blue_force_played;
    m_blue_force_played_isSet = true;
}

bool OAIMatch_Timeseries_2018::is_blue_force_played_Set() const{
    return m_blue_force_played_isSet;
}

bool OAIMatch_Timeseries_2018::is_blue_force_played_Valid() const{
    return m_blue_force_played_isValid;
}

qint32 OAIMatch_Timeseries_2018::getBlueLevitateCount() const {
    return m_blue_levitate_count;
}
void OAIMatch_Timeseries_2018::setBlueLevitateCount(const qint32 &blue_levitate_count) {
    m_blue_levitate_count = blue_levitate_count;
    m_blue_levitate_count_isSet = true;
}

bool OAIMatch_Timeseries_2018::is_blue_levitate_count_Set() const{
    return m_blue_levitate_count_isSet;
}

bool OAIMatch_Timeseries_2018::is_blue_levitate_count_Valid() const{
    return m_blue_levitate_count_isValid;
}

qint32 OAIMatch_Timeseries_2018::getBlueLevitatePlayed() const {
    return m_blue_levitate_played;
}
void OAIMatch_Timeseries_2018::setBlueLevitatePlayed(const qint32 &blue_levitate_played) {
    m_blue_levitate_played = blue_levitate_played;
    m_blue_levitate_played_isSet = true;
}

bool OAIMatch_Timeseries_2018::is_blue_levitate_played_Set() const{
    return m_blue_levitate_played_isSet;
}

bool OAIMatch_Timeseries_2018::is_blue_levitate_played_Valid() const{
    return m_blue_levitate_played_isValid;
}

QString OAIMatch_Timeseries_2018::getBluePowerupTimeRemaining() const {
    return m_blue_powerup_time_remaining;
}
void OAIMatch_Timeseries_2018::setBluePowerupTimeRemaining(const QString &blue_powerup_time_remaining) {
    m_blue_powerup_time_remaining = blue_powerup_time_remaining;
    m_blue_powerup_time_remaining_isSet = true;
}

bool OAIMatch_Timeseries_2018::is_blue_powerup_time_remaining_Set() const{
    return m_blue_powerup_time_remaining_isSet;
}

bool OAIMatch_Timeseries_2018::is_blue_powerup_time_remaining_Valid() const{
    return m_blue_powerup_time_remaining_isValid;
}

qint32 OAIMatch_Timeseries_2018::getBlueScaleOwned() const {
    return m_blue_scale_owned;
}
void OAIMatch_Timeseries_2018::setBlueScaleOwned(const qint32 &blue_scale_owned) {
    m_blue_scale_owned = blue_scale_owned;
    m_blue_scale_owned_isSet = true;
}

bool OAIMatch_Timeseries_2018::is_blue_scale_owned_Set() const{
    return m_blue_scale_owned_isSet;
}

bool OAIMatch_Timeseries_2018::is_blue_scale_owned_Valid() const{
    return m_blue_scale_owned_isValid;
}

qint32 OAIMatch_Timeseries_2018::getBlueScore() const {
    return m_blue_score;
}
void OAIMatch_Timeseries_2018::setBlueScore(const qint32 &blue_score) {
    m_blue_score = blue_score;
    m_blue_score_isSet = true;
}

bool OAIMatch_Timeseries_2018::is_blue_score_Set() const{
    return m_blue_score_isSet;
}

bool OAIMatch_Timeseries_2018::is_blue_score_Valid() const{
    return m_blue_score_isValid;
}

qint32 OAIMatch_Timeseries_2018::getBlueSwitchOwned() const {
    return m_blue_switch_owned;
}
void OAIMatch_Timeseries_2018::setBlueSwitchOwned(const qint32 &blue_switch_owned) {
    m_blue_switch_owned = blue_switch_owned;
    m_blue_switch_owned_isSet = true;
}

bool OAIMatch_Timeseries_2018::is_blue_switch_owned_Set() const{
    return m_blue_switch_owned_isSet;
}

bool OAIMatch_Timeseries_2018::is_blue_switch_owned_Valid() const{
    return m_blue_switch_owned_isValid;
}

QString OAIMatch_Timeseries_2018::getEventKey() const {
    return m_event_key;
}
void OAIMatch_Timeseries_2018::setEventKey(const QString &event_key) {
    m_event_key = event_key;
    m_event_key_isSet = true;
}

bool OAIMatch_Timeseries_2018::is_event_key_Set() const{
    return m_event_key_isSet;
}

bool OAIMatch_Timeseries_2018::is_event_key_Valid() const{
    return m_event_key_isValid;
}

QString OAIMatch_Timeseries_2018::getMatchId() const {
    return m_match_id;
}
void OAIMatch_Timeseries_2018::setMatchId(const QString &match_id) {
    m_match_id = match_id;
    m_match_id_isSet = true;
}

bool OAIMatch_Timeseries_2018::is_match_id_Set() const{
    return m_match_id_isSet;
}

bool OAIMatch_Timeseries_2018::is_match_id_Valid() const{
    return m_match_id_isValid;
}

QString OAIMatch_Timeseries_2018::getMode() const {
    return m_mode;
}
void OAIMatch_Timeseries_2018::setMode(const QString &mode) {
    m_mode = mode;
    m_mode_isSet = true;
}

bool OAIMatch_Timeseries_2018::is_mode_Set() const{
    return m_mode_isSet;
}

bool OAIMatch_Timeseries_2018::is_mode_Valid() const{
    return m_mode_isValid;
}

qint32 OAIMatch_Timeseries_2018::getPlay() const {
    return m_play;
}
void OAIMatch_Timeseries_2018::setPlay(const qint32 &play) {
    m_play = play;
    m_play_isSet = true;
}

bool OAIMatch_Timeseries_2018::is_play_Set() const{
    return m_play_isSet;
}

bool OAIMatch_Timeseries_2018::is_play_Valid() const{
    return m_play_isValid;
}

qint32 OAIMatch_Timeseries_2018::getRedAutoQuest() const {
    return m_red_auto_quest;
}
void OAIMatch_Timeseries_2018::setRedAutoQuest(const qint32 &red_auto_quest) {
    m_red_auto_quest = red_auto_quest;
    m_red_auto_quest_isSet = true;
}

bool OAIMatch_Timeseries_2018::is_red_auto_quest_Set() const{
    return m_red_auto_quest_isSet;
}

bool OAIMatch_Timeseries_2018::is_red_auto_quest_Valid() const{
    return m_red_auto_quest_isValid;
}

qint32 OAIMatch_Timeseries_2018::getRedBoostCount() const {
    return m_red_boost_count;
}
void OAIMatch_Timeseries_2018::setRedBoostCount(const qint32 &red_boost_count) {
    m_red_boost_count = red_boost_count;
    m_red_boost_count_isSet = true;
}

bool OAIMatch_Timeseries_2018::is_red_boost_count_Set() const{
    return m_red_boost_count_isSet;
}

bool OAIMatch_Timeseries_2018::is_red_boost_count_Valid() const{
    return m_red_boost_count_isValid;
}

qint32 OAIMatch_Timeseries_2018::getRedBoostPlayed() const {
    return m_red_boost_played;
}
void OAIMatch_Timeseries_2018::setRedBoostPlayed(const qint32 &red_boost_played) {
    m_red_boost_played = red_boost_played;
    m_red_boost_played_isSet = true;
}

bool OAIMatch_Timeseries_2018::is_red_boost_played_Set() const{
    return m_red_boost_played_isSet;
}

bool OAIMatch_Timeseries_2018::is_red_boost_played_Valid() const{
    return m_red_boost_played_isValid;
}

QString OAIMatch_Timeseries_2018::getRedCurrentPowerup() const {
    return m_red_current_powerup;
}
void OAIMatch_Timeseries_2018::setRedCurrentPowerup(const QString &red_current_powerup) {
    m_red_current_powerup = red_current_powerup;
    m_red_current_powerup_isSet = true;
}

bool OAIMatch_Timeseries_2018::is_red_current_powerup_Set() const{
    return m_red_current_powerup_isSet;
}

bool OAIMatch_Timeseries_2018::is_red_current_powerup_Valid() const{
    return m_red_current_powerup_isValid;
}

qint32 OAIMatch_Timeseries_2018::getRedFaceTheBoss() const {
    return m_red_face_the_boss;
}
void OAIMatch_Timeseries_2018::setRedFaceTheBoss(const qint32 &red_face_the_boss) {
    m_red_face_the_boss = red_face_the_boss;
    m_red_face_the_boss_isSet = true;
}

bool OAIMatch_Timeseries_2018::is_red_face_the_boss_Set() const{
    return m_red_face_the_boss_isSet;
}

bool OAIMatch_Timeseries_2018::is_red_face_the_boss_Valid() const{
    return m_red_face_the_boss_isValid;
}

qint32 OAIMatch_Timeseries_2018::getRedForceCount() const {
    return m_red_force_count;
}
void OAIMatch_Timeseries_2018::setRedForceCount(const qint32 &red_force_count) {
    m_red_force_count = red_force_count;
    m_red_force_count_isSet = true;
}

bool OAIMatch_Timeseries_2018::is_red_force_count_Set() const{
    return m_red_force_count_isSet;
}

bool OAIMatch_Timeseries_2018::is_red_force_count_Valid() const{
    return m_red_force_count_isValid;
}

qint32 OAIMatch_Timeseries_2018::getRedForcePlayed() const {
    return m_red_force_played;
}
void OAIMatch_Timeseries_2018::setRedForcePlayed(const qint32 &red_force_played) {
    m_red_force_played = red_force_played;
    m_red_force_played_isSet = true;
}

bool OAIMatch_Timeseries_2018::is_red_force_played_Set() const{
    return m_red_force_played_isSet;
}

bool OAIMatch_Timeseries_2018::is_red_force_played_Valid() const{
    return m_red_force_played_isValid;
}

qint32 OAIMatch_Timeseries_2018::getRedLevitateCount() const {
    return m_red_levitate_count;
}
void OAIMatch_Timeseries_2018::setRedLevitateCount(const qint32 &red_levitate_count) {
    m_red_levitate_count = red_levitate_count;
    m_red_levitate_count_isSet = true;
}

bool OAIMatch_Timeseries_2018::is_red_levitate_count_Set() const{
    return m_red_levitate_count_isSet;
}

bool OAIMatch_Timeseries_2018::is_red_levitate_count_Valid() const{
    return m_red_levitate_count_isValid;
}

qint32 OAIMatch_Timeseries_2018::getRedLevitatePlayed() const {
    return m_red_levitate_played;
}
void OAIMatch_Timeseries_2018::setRedLevitatePlayed(const qint32 &red_levitate_played) {
    m_red_levitate_played = red_levitate_played;
    m_red_levitate_played_isSet = true;
}

bool OAIMatch_Timeseries_2018::is_red_levitate_played_Set() const{
    return m_red_levitate_played_isSet;
}

bool OAIMatch_Timeseries_2018::is_red_levitate_played_Valid() const{
    return m_red_levitate_played_isValid;
}

QString OAIMatch_Timeseries_2018::getRedPowerupTimeRemaining() const {
    return m_red_powerup_time_remaining;
}
void OAIMatch_Timeseries_2018::setRedPowerupTimeRemaining(const QString &red_powerup_time_remaining) {
    m_red_powerup_time_remaining = red_powerup_time_remaining;
    m_red_powerup_time_remaining_isSet = true;
}

bool OAIMatch_Timeseries_2018::is_red_powerup_time_remaining_Set() const{
    return m_red_powerup_time_remaining_isSet;
}

bool OAIMatch_Timeseries_2018::is_red_powerup_time_remaining_Valid() const{
    return m_red_powerup_time_remaining_isValid;
}

qint32 OAIMatch_Timeseries_2018::getRedScaleOwned() const {
    return m_red_scale_owned;
}
void OAIMatch_Timeseries_2018::setRedScaleOwned(const qint32 &red_scale_owned) {
    m_red_scale_owned = red_scale_owned;
    m_red_scale_owned_isSet = true;
}

bool OAIMatch_Timeseries_2018::is_red_scale_owned_Set() const{
    return m_red_scale_owned_isSet;
}

bool OAIMatch_Timeseries_2018::is_red_scale_owned_Valid() const{
    return m_red_scale_owned_isValid;
}

qint32 OAIMatch_Timeseries_2018::getRedScore() const {
    return m_red_score;
}
void OAIMatch_Timeseries_2018::setRedScore(const qint32 &red_score) {
    m_red_score = red_score;
    m_red_score_isSet = true;
}

bool OAIMatch_Timeseries_2018::is_red_score_Set() const{
    return m_red_score_isSet;
}

bool OAIMatch_Timeseries_2018::is_red_score_Valid() const{
    return m_red_score_isValid;
}

qint32 OAIMatch_Timeseries_2018::getRedSwitchOwned() const {
    return m_red_switch_owned;
}
void OAIMatch_Timeseries_2018::setRedSwitchOwned(const qint32 &red_switch_owned) {
    m_red_switch_owned = red_switch_owned;
    m_red_switch_owned_isSet = true;
}

bool OAIMatch_Timeseries_2018::is_red_switch_owned_Set() const{
    return m_red_switch_owned_isSet;
}

bool OAIMatch_Timeseries_2018::is_red_switch_owned_Valid() const{
    return m_red_switch_owned_isValid;
}

qint32 OAIMatch_Timeseries_2018::getTimeRemaining() const {
    return m_time_remaining;
}
void OAIMatch_Timeseries_2018::setTimeRemaining(const qint32 &time_remaining) {
    m_time_remaining = time_remaining;
    m_time_remaining_isSet = true;
}

bool OAIMatch_Timeseries_2018::is_time_remaining_Set() const{
    return m_time_remaining_isSet;
}

bool OAIMatch_Timeseries_2018::is_time_remaining_Valid() const{
    return m_time_remaining_isValid;
}

bool OAIMatch_Timeseries_2018::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_blue_auto_quest_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_blue_boost_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_blue_boost_played_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_blue_current_powerup_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_blue_face_the_boss_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_blue_force_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_blue_force_played_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_blue_levitate_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_blue_levitate_played_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_blue_powerup_time_remaining_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_blue_scale_owned_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_blue_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_blue_switch_owned_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_match_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_play_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_red_auto_quest_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_red_boost_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_red_boost_played_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_red_current_powerup_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_red_face_the_boss_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_red_force_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_red_force_played_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_red_levitate_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_red_levitate_played_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_red_powerup_time_remaining_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_red_scale_owned_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_red_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_red_switch_owned_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_remaining_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMatch_Timeseries_2018::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
