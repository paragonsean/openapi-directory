/**
 * The Blue Alliance API v3
 * # Overview    Information and statistics about FIRST Robotics Competition teams and events.   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).
 *
 * The version of the OpenAPI document: 3.8.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITeam_Event_Status_playoff.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITeam_Event_Status_playoff::OAITeam_Event_Status_playoff(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITeam_Event_Status_playoff::OAITeam_Event_Status_playoff() {
    this->initializeModel();
}

OAITeam_Event_Status_playoff::~OAITeam_Event_Status_playoff() {}

void OAITeam_Event_Status_playoff::initializeModel() {

    m_current_level_record_isSet = false;
    m_current_level_record_isValid = false;

    m_level_isSet = false;
    m_level_isValid = false;

    m_playoff_average_isSet = false;
    m_playoff_average_isValid = false;

    m_record_isSet = false;
    m_record_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAITeam_Event_Status_playoff::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITeam_Event_Status_playoff::fromJsonObject(QJsonObject json) {

    m_current_level_record_isValid = ::OpenAPI::fromJsonValue(m_current_level_record, json[QString("current_level_record")]);
    m_current_level_record_isSet = !json[QString("current_level_record")].isNull() && m_current_level_record_isValid;

    m_level_isValid = ::OpenAPI::fromJsonValue(m_level, json[QString("level")]);
    m_level_isSet = !json[QString("level")].isNull() && m_level_isValid;

    m_playoff_average_isValid = ::OpenAPI::fromJsonValue(m_playoff_average, json[QString("playoff_average")]);
    m_playoff_average_isSet = !json[QString("playoff_average")].isNull() && m_playoff_average_isValid;

    m_record_isValid = ::OpenAPI::fromJsonValue(m_record, json[QString("record")]);
    m_record_isSet = !json[QString("record")].isNull() && m_record_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAITeam_Event_Status_playoff::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITeam_Event_Status_playoff::asJsonObject() const {
    QJsonObject obj;
    if (m_current_level_record.isSet()) {
        obj.insert(QString("current_level_record"), ::OpenAPI::toJsonValue(m_current_level_record));
    }
    if (m_level_isSet) {
        obj.insert(QString("level"), ::OpenAPI::toJsonValue(m_level));
    }
    if (m_playoff_average_isSet) {
        obj.insert(QString("playoff_average"), ::OpenAPI::toJsonValue(m_playoff_average));
    }
    if (m_record.isSet()) {
        obj.insert(QString("record"), ::OpenAPI::toJsonValue(m_record));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

OAIWLT_Record OAITeam_Event_Status_playoff::getCurrentLevelRecord() const {
    return m_current_level_record;
}
void OAITeam_Event_Status_playoff::setCurrentLevelRecord(const OAIWLT_Record &current_level_record) {
    m_current_level_record = current_level_record;
    m_current_level_record_isSet = true;
}

bool OAITeam_Event_Status_playoff::is_current_level_record_Set() const{
    return m_current_level_record_isSet;
}

bool OAITeam_Event_Status_playoff::is_current_level_record_Valid() const{
    return m_current_level_record_isValid;
}

QString OAITeam_Event_Status_playoff::getLevel() const {
    return m_level;
}
void OAITeam_Event_Status_playoff::setLevel(const QString &level) {
    m_level = level;
    m_level_isSet = true;
}

bool OAITeam_Event_Status_playoff::is_level_Set() const{
    return m_level_isSet;
}

bool OAITeam_Event_Status_playoff::is_level_Valid() const{
    return m_level_isValid;
}

qint32 OAITeam_Event_Status_playoff::getPlayoffAverage() const {
    return m_playoff_average;
}
void OAITeam_Event_Status_playoff::setPlayoffAverage(const qint32 &playoff_average) {
    m_playoff_average = playoff_average;
    m_playoff_average_isSet = true;
}

bool OAITeam_Event_Status_playoff::is_playoff_average_Set() const{
    return m_playoff_average_isSet;
}

bool OAITeam_Event_Status_playoff::is_playoff_average_Valid() const{
    return m_playoff_average_isValid;
}

OAIWLT_Record OAITeam_Event_Status_playoff::getRecord() const {
    return m_record;
}
void OAITeam_Event_Status_playoff::setRecord(const OAIWLT_Record &record) {
    m_record = record;
    m_record_isSet = true;
}

bool OAITeam_Event_Status_playoff::is_record_Set() const{
    return m_record_isSet;
}

bool OAITeam_Event_Status_playoff::is_record_Valid() const{
    return m_record_isValid;
}

QString OAITeam_Event_Status_playoff::getStatus() const {
    return m_status;
}
void OAITeam_Event_Status_playoff::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAITeam_Event_Status_playoff::is_status_Set() const{
    return m_status_isSet;
}

bool OAITeam_Event_Status_playoff::is_status_Valid() const{
    return m_status_isValid;
}

bool OAITeam_Event_Status_playoff::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_current_level_record.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_level_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_playoff_average_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_record.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITeam_Event_Status_playoff::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
