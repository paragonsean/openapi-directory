/**
 * The Blue Alliance API v3
 * # Overview    Information and statistics about FIRST Robotics Competition teams and events.   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).
 *
 * The version of the OpenAPI document: 3.8.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITeam.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITeam::OAITeam(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITeam::OAITeam() {
    this->initializeModel();
}

OAITeam::~OAITeam() {}

void OAITeam::initializeModel() {

    m_address_isSet = false;
    m_address_isValid = false;

    m_city_isSet = false;
    m_city_isValid = false;

    m_country_isSet = false;
    m_country_isValid = false;

    m_gmaps_place_id_isSet = false;
    m_gmaps_place_id_isValid = false;

    m_gmaps_url_isSet = false;
    m_gmaps_url_isValid = false;

    m_home_championship_isSet = false;
    m_home_championship_isValid = false;

    m_key_isSet = false;
    m_key_isValid = false;

    m_lat_isSet = false;
    m_lat_isValid = false;

    m_lng_isSet = false;
    m_lng_isValid = false;

    m_location_name_isSet = false;
    m_location_name_isValid = false;

    m_motto_isSet = false;
    m_motto_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_nickname_isSet = false;
    m_nickname_isValid = false;

    m_postal_code_isSet = false;
    m_postal_code_isValid = false;

    m_rookie_year_isSet = false;
    m_rookie_year_isValid = false;

    m_school_name_isSet = false;
    m_school_name_isValid = false;

    m_state_prov_isSet = false;
    m_state_prov_isValid = false;

    m_team_number_isSet = false;
    m_team_number_isValid = false;

    m_website_isSet = false;
    m_website_isValid = false;
}

void OAITeam::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITeam::fromJsonObject(QJsonObject json) {

    m_address_isValid = ::OpenAPI::fromJsonValue(m_address, json[QString("address")]);
    m_address_isSet = !json[QString("address")].isNull() && m_address_isValid;

    m_city_isValid = ::OpenAPI::fromJsonValue(m_city, json[QString("city")]);
    m_city_isSet = !json[QString("city")].isNull() && m_city_isValid;

    m_country_isValid = ::OpenAPI::fromJsonValue(m_country, json[QString("country")]);
    m_country_isSet = !json[QString("country")].isNull() && m_country_isValid;

    m_gmaps_place_id_isValid = ::OpenAPI::fromJsonValue(m_gmaps_place_id, json[QString("gmaps_place_id")]);
    m_gmaps_place_id_isSet = !json[QString("gmaps_place_id")].isNull() && m_gmaps_place_id_isValid;

    m_gmaps_url_isValid = ::OpenAPI::fromJsonValue(m_gmaps_url, json[QString("gmaps_url")]);
    m_gmaps_url_isSet = !json[QString("gmaps_url")].isNull() && m_gmaps_url_isValid;

    m_home_championship_isValid = ::OpenAPI::fromJsonValue(m_home_championship, json[QString("home_championship")]);
    m_home_championship_isSet = !json[QString("home_championship")].isNull() && m_home_championship_isValid;

    m_key_isValid = ::OpenAPI::fromJsonValue(m_key, json[QString("key")]);
    m_key_isSet = !json[QString("key")].isNull() && m_key_isValid;

    m_lat_isValid = ::OpenAPI::fromJsonValue(m_lat, json[QString("lat")]);
    m_lat_isSet = !json[QString("lat")].isNull() && m_lat_isValid;

    m_lng_isValid = ::OpenAPI::fromJsonValue(m_lng, json[QString("lng")]);
    m_lng_isSet = !json[QString("lng")].isNull() && m_lng_isValid;

    m_location_name_isValid = ::OpenAPI::fromJsonValue(m_location_name, json[QString("location_name")]);
    m_location_name_isSet = !json[QString("location_name")].isNull() && m_location_name_isValid;

    m_motto_isValid = ::OpenAPI::fromJsonValue(m_motto, json[QString("motto")]);
    m_motto_isSet = !json[QString("motto")].isNull() && m_motto_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_nickname_isValid = ::OpenAPI::fromJsonValue(m_nickname, json[QString("nickname")]);
    m_nickname_isSet = !json[QString("nickname")].isNull() && m_nickname_isValid;

    m_postal_code_isValid = ::OpenAPI::fromJsonValue(m_postal_code, json[QString("postal_code")]);
    m_postal_code_isSet = !json[QString("postal_code")].isNull() && m_postal_code_isValid;

    m_rookie_year_isValid = ::OpenAPI::fromJsonValue(m_rookie_year, json[QString("rookie_year")]);
    m_rookie_year_isSet = !json[QString("rookie_year")].isNull() && m_rookie_year_isValid;

    m_school_name_isValid = ::OpenAPI::fromJsonValue(m_school_name, json[QString("school_name")]);
    m_school_name_isSet = !json[QString("school_name")].isNull() && m_school_name_isValid;

    m_state_prov_isValid = ::OpenAPI::fromJsonValue(m_state_prov, json[QString("state_prov")]);
    m_state_prov_isSet = !json[QString("state_prov")].isNull() && m_state_prov_isValid;

    m_team_number_isValid = ::OpenAPI::fromJsonValue(m_team_number, json[QString("team_number")]);
    m_team_number_isSet = !json[QString("team_number")].isNull() && m_team_number_isValid;

    m_website_isValid = ::OpenAPI::fromJsonValue(m_website, json[QString("website")]);
    m_website_isSet = !json[QString("website")].isNull() && m_website_isValid;
}

QString OAITeam::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITeam::asJsonObject() const {
    QJsonObject obj;
    if (m_address_isSet) {
        obj.insert(QString("address"), ::OpenAPI::toJsonValue(m_address));
    }
    if (m_city_isSet) {
        obj.insert(QString("city"), ::OpenAPI::toJsonValue(m_city));
    }
    if (m_country_isSet) {
        obj.insert(QString("country"), ::OpenAPI::toJsonValue(m_country));
    }
    if (m_gmaps_place_id_isSet) {
        obj.insert(QString("gmaps_place_id"), ::OpenAPI::toJsonValue(m_gmaps_place_id));
    }
    if (m_gmaps_url_isSet) {
        obj.insert(QString("gmaps_url"), ::OpenAPI::toJsonValue(m_gmaps_url));
    }
    if (m_home_championship_isSet) {
        obj.insert(QString("home_championship"), ::OpenAPI::toJsonValue(m_home_championship));
    }
    if (m_key_isSet) {
        obj.insert(QString("key"), ::OpenAPI::toJsonValue(m_key));
    }
    if (m_lat_isSet) {
        obj.insert(QString("lat"), ::OpenAPI::toJsonValue(m_lat));
    }
    if (m_lng_isSet) {
        obj.insert(QString("lng"), ::OpenAPI::toJsonValue(m_lng));
    }
    if (m_location_name_isSet) {
        obj.insert(QString("location_name"), ::OpenAPI::toJsonValue(m_location_name));
    }
    if (m_motto_isSet) {
        obj.insert(QString("motto"), ::OpenAPI::toJsonValue(m_motto));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_nickname_isSet) {
        obj.insert(QString("nickname"), ::OpenAPI::toJsonValue(m_nickname));
    }
    if (m_postal_code_isSet) {
        obj.insert(QString("postal_code"), ::OpenAPI::toJsonValue(m_postal_code));
    }
    if (m_rookie_year_isSet) {
        obj.insert(QString("rookie_year"), ::OpenAPI::toJsonValue(m_rookie_year));
    }
    if (m_school_name_isSet) {
        obj.insert(QString("school_name"), ::OpenAPI::toJsonValue(m_school_name));
    }
    if (m_state_prov_isSet) {
        obj.insert(QString("state_prov"), ::OpenAPI::toJsonValue(m_state_prov));
    }
    if (m_team_number_isSet) {
        obj.insert(QString("team_number"), ::OpenAPI::toJsonValue(m_team_number));
    }
    if (m_website_isSet) {
        obj.insert(QString("website"), ::OpenAPI::toJsonValue(m_website));
    }
    return obj;
}

QString OAITeam::getAddress() const {
    return m_address;
}
void OAITeam::setAddress(const QString &address) {
    m_address = address;
    m_address_isSet = true;
}

bool OAITeam::is_address_Set() const{
    return m_address_isSet;
}

bool OAITeam::is_address_Valid() const{
    return m_address_isValid;
}

QString OAITeam::getCity() const {
    return m_city;
}
void OAITeam::setCity(const QString &city) {
    m_city = city;
    m_city_isSet = true;
}

bool OAITeam::is_city_Set() const{
    return m_city_isSet;
}

bool OAITeam::is_city_Valid() const{
    return m_city_isValid;
}

QString OAITeam::getCountry() const {
    return m_country;
}
void OAITeam::setCountry(const QString &country) {
    m_country = country;
    m_country_isSet = true;
}

bool OAITeam::is_country_Set() const{
    return m_country_isSet;
}

bool OAITeam::is_country_Valid() const{
    return m_country_isValid;
}

QString OAITeam::getGmapsPlaceId() const {
    return m_gmaps_place_id;
}
void OAITeam::setGmapsPlaceId(const QString &gmaps_place_id) {
    m_gmaps_place_id = gmaps_place_id;
    m_gmaps_place_id_isSet = true;
}

bool OAITeam::is_gmaps_place_id_Set() const{
    return m_gmaps_place_id_isSet;
}

bool OAITeam::is_gmaps_place_id_Valid() const{
    return m_gmaps_place_id_isValid;
}

QString OAITeam::getGmapsUrl() const {
    return m_gmaps_url;
}
void OAITeam::setGmapsUrl(const QString &gmaps_url) {
    m_gmaps_url = gmaps_url;
    m_gmaps_url_isSet = true;
}

bool OAITeam::is_gmaps_url_Set() const{
    return m_gmaps_url_isSet;
}

bool OAITeam::is_gmaps_url_Valid() const{
    return m_gmaps_url_isValid;
}

OAIObject OAITeam::getHomeChampionship() const {
    return m_home_championship;
}
void OAITeam::setHomeChampionship(const OAIObject &home_championship) {
    m_home_championship = home_championship;
    m_home_championship_isSet = true;
}

bool OAITeam::is_home_championship_Set() const{
    return m_home_championship_isSet;
}

bool OAITeam::is_home_championship_Valid() const{
    return m_home_championship_isValid;
}

QString OAITeam::getKey() const {
    return m_key;
}
void OAITeam::setKey(const QString &key) {
    m_key = key;
    m_key_isSet = true;
}

bool OAITeam::is_key_Set() const{
    return m_key_isSet;
}

bool OAITeam::is_key_Valid() const{
    return m_key_isValid;
}

double OAITeam::getLat() const {
    return m_lat;
}
void OAITeam::setLat(const double &lat) {
    m_lat = lat;
    m_lat_isSet = true;
}

bool OAITeam::is_lat_Set() const{
    return m_lat_isSet;
}

bool OAITeam::is_lat_Valid() const{
    return m_lat_isValid;
}

double OAITeam::getLng() const {
    return m_lng;
}
void OAITeam::setLng(const double &lng) {
    m_lng = lng;
    m_lng_isSet = true;
}

bool OAITeam::is_lng_Set() const{
    return m_lng_isSet;
}

bool OAITeam::is_lng_Valid() const{
    return m_lng_isValid;
}

QString OAITeam::getLocationName() const {
    return m_location_name;
}
void OAITeam::setLocationName(const QString &location_name) {
    m_location_name = location_name;
    m_location_name_isSet = true;
}

bool OAITeam::is_location_name_Set() const{
    return m_location_name_isSet;
}

bool OAITeam::is_location_name_Valid() const{
    return m_location_name_isValid;
}

QString OAITeam::getMotto() const {
    return m_motto;
}
void OAITeam::setMotto(const QString &motto) {
    m_motto = motto;
    m_motto_isSet = true;
}

bool OAITeam::is_motto_Set() const{
    return m_motto_isSet;
}

bool OAITeam::is_motto_Valid() const{
    return m_motto_isValid;
}

QString OAITeam::getName() const {
    return m_name;
}
void OAITeam::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAITeam::is_name_Set() const{
    return m_name_isSet;
}

bool OAITeam::is_name_Valid() const{
    return m_name_isValid;
}

QString OAITeam::getNickname() const {
    return m_nickname;
}
void OAITeam::setNickname(const QString &nickname) {
    m_nickname = nickname;
    m_nickname_isSet = true;
}

bool OAITeam::is_nickname_Set() const{
    return m_nickname_isSet;
}

bool OAITeam::is_nickname_Valid() const{
    return m_nickname_isValid;
}

QString OAITeam::getPostalCode() const {
    return m_postal_code;
}
void OAITeam::setPostalCode(const QString &postal_code) {
    m_postal_code = postal_code;
    m_postal_code_isSet = true;
}

bool OAITeam::is_postal_code_Set() const{
    return m_postal_code_isSet;
}

bool OAITeam::is_postal_code_Valid() const{
    return m_postal_code_isValid;
}

qint32 OAITeam::getRookieYear() const {
    return m_rookie_year;
}
void OAITeam::setRookieYear(const qint32 &rookie_year) {
    m_rookie_year = rookie_year;
    m_rookie_year_isSet = true;
}

bool OAITeam::is_rookie_year_Set() const{
    return m_rookie_year_isSet;
}

bool OAITeam::is_rookie_year_Valid() const{
    return m_rookie_year_isValid;
}

QString OAITeam::getSchoolName() const {
    return m_school_name;
}
void OAITeam::setSchoolName(const QString &school_name) {
    m_school_name = school_name;
    m_school_name_isSet = true;
}

bool OAITeam::is_school_name_Set() const{
    return m_school_name_isSet;
}

bool OAITeam::is_school_name_Valid() const{
    return m_school_name_isValid;
}

QString OAITeam::getStateProv() const {
    return m_state_prov;
}
void OAITeam::setStateProv(const QString &state_prov) {
    m_state_prov = state_prov;
    m_state_prov_isSet = true;
}

bool OAITeam::is_state_prov_Set() const{
    return m_state_prov_isSet;
}

bool OAITeam::is_state_prov_Valid() const{
    return m_state_prov_isValid;
}

qint32 OAITeam::getTeamNumber() const {
    return m_team_number;
}
void OAITeam::setTeamNumber(const qint32 &team_number) {
    m_team_number = team_number;
    m_team_number_isSet = true;
}

bool OAITeam::is_team_number_Set() const{
    return m_team_number_isSet;
}

bool OAITeam::is_team_number_Valid() const{
    return m_team_number_isValid;
}

QString OAITeam::getWebsite() const {
    return m_website;
}
void OAITeam::setWebsite(const QString &website) {
    m_website = website;
    m_website_isSet = true;
}

bool OAITeam::is_website_Set() const{
    return m_website_isSet;
}

bool OAITeam::is_website_Valid() const{
    return m_website_isValid;
}

bool OAITeam::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_city_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gmaps_place_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gmaps_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_home_championship_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lat_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lng_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_motto_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_nickname_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_postal_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rookie_year_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_school_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_prov_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_team_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_website_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITeam::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_key_isValid && m_name_isValid && m_team_number_isValid && true;
}

} // namespace OpenAPI
