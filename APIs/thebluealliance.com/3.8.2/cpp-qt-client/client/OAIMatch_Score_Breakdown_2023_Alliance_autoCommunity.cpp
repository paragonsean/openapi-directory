/**
 * The Blue Alliance API v3
 * # Overview    Information and statistics about FIRST Robotics Competition teams and events.   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).
 *
 * The version of the OpenAPI document: 3.8.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMatch_Score_Breakdown_2023_Alliance_autoCommunity.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMatch_Score_Breakdown_2023_Alliance_autoCommunity::OAIMatch_Score_Breakdown_2023_Alliance_autoCommunity(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMatch_Score_Breakdown_2023_Alliance_autoCommunity::OAIMatch_Score_Breakdown_2023_Alliance_autoCommunity() {
    this->initializeModel();
}

OAIMatch_Score_Breakdown_2023_Alliance_autoCommunity::~OAIMatch_Score_Breakdown_2023_Alliance_autoCommunity() {}

void OAIMatch_Score_Breakdown_2023_Alliance_autoCommunity::initializeModel() {

    m_b_isSet = false;
    m_b_isValid = false;

    m_m_isSet = false;
    m_m_isValid = false;

    m_t_isSet = false;
    m_t_isValid = false;
}

void OAIMatch_Score_Breakdown_2023_Alliance_autoCommunity::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMatch_Score_Breakdown_2023_Alliance_autoCommunity::fromJsonObject(QJsonObject json) {

    m_b_isValid = ::OpenAPI::fromJsonValue(m_b, json[QString("B")]);
    m_b_isSet = !json[QString("B")].isNull() && m_b_isValid;

    m_m_isValid = ::OpenAPI::fromJsonValue(m_m, json[QString("M")]);
    m_m_isSet = !json[QString("M")].isNull() && m_m_isValid;

    m_t_isValid = ::OpenAPI::fromJsonValue(m_t, json[QString("T")]);
    m_t_isSet = !json[QString("T")].isNull() && m_t_isValid;
}

QString OAIMatch_Score_Breakdown_2023_Alliance_autoCommunity::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMatch_Score_Breakdown_2023_Alliance_autoCommunity::asJsonObject() const {
    QJsonObject obj;
    if (m_b.size() > 0) {
        obj.insert(QString("B"), ::OpenAPI::toJsonValue(m_b));
    }
    if (m_m.size() > 0) {
        obj.insert(QString("M"), ::OpenAPI::toJsonValue(m_m));
    }
    if (m_t.size() > 0) {
        obj.insert(QString("T"), ::OpenAPI::toJsonValue(m_t));
    }
    return obj;
}

QList<QString> OAIMatch_Score_Breakdown_2023_Alliance_autoCommunity::getB() const {
    return m_b;
}
void OAIMatch_Score_Breakdown_2023_Alliance_autoCommunity::setB(const QList<QString> &b) {
    m_b = b;
    m_b_isSet = true;
}

bool OAIMatch_Score_Breakdown_2023_Alliance_autoCommunity::is_b_Set() const{
    return m_b_isSet;
}

bool OAIMatch_Score_Breakdown_2023_Alliance_autoCommunity::is_b_Valid() const{
    return m_b_isValid;
}

QList<QString> OAIMatch_Score_Breakdown_2023_Alliance_autoCommunity::getM() const {
    return m_m;
}
void OAIMatch_Score_Breakdown_2023_Alliance_autoCommunity::setM(const QList<QString> &m) {
    m_m = m;
    m_m_isSet = true;
}

bool OAIMatch_Score_Breakdown_2023_Alliance_autoCommunity::is_m_Set() const{
    return m_m_isSet;
}

bool OAIMatch_Score_Breakdown_2023_Alliance_autoCommunity::is_m_Valid() const{
    return m_m_isValid;
}

QList<QString> OAIMatch_Score_Breakdown_2023_Alliance_autoCommunity::getT() const {
    return m_t;
}
void OAIMatch_Score_Breakdown_2023_Alliance_autoCommunity::setT(const QList<QString> &t) {
    m_t = t;
    m_t_isSet = true;
}

bool OAIMatch_Score_Breakdown_2023_Alliance_autoCommunity::is_t_Set() const{
    return m_t_isSet;
}

bool OAIMatch_Score_Breakdown_2023_Alliance_autoCommunity::is_t_Valid() const{
    return m_t_isValid;
}

bool OAIMatch_Score_Breakdown_2023_Alliance_autoCommunity::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_b.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_m.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_t.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMatch_Score_Breakdown_2023_Alliance_autoCommunity::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
