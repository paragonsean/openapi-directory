/**
 * The Blue Alliance API v3
 * # Overview    Information and statistics about FIRST Robotics Competition teams and events.   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).
 *
 * The version of the OpenAPI document: 3.8.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEvent.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEvent::OAIEvent(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEvent::OAIEvent() {
    this->initializeModel();
}

OAIEvent::~OAIEvent() {}

void OAIEvent::initializeModel() {

    m_address_isSet = false;
    m_address_isValid = false;

    m_city_isSet = false;
    m_city_isValid = false;

    m_country_isSet = false;
    m_country_isValid = false;

    m_district_isSet = false;
    m_district_isValid = false;

    m_division_keys_isSet = false;
    m_division_keys_isValid = false;

    m_end_date_isSet = false;
    m_end_date_isValid = false;

    m_event_code_isSet = false;
    m_event_code_isValid = false;

    m_event_type_isSet = false;
    m_event_type_isValid = false;

    m_event_type_string_isSet = false;
    m_event_type_string_isValid = false;

    m_first_event_code_isSet = false;
    m_first_event_code_isValid = false;

    m_first_event_id_isSet = false;
    m_first_event_id_isValid = false;

    m_gmaps_place_id_isSet = false;
    m_gmaps_place_id_isValid = false;

    m_gmaps_url_isSet = false;
    m_gmaps_url_isValid = false;

    m_key_isSet = false;
    m_key_isValid = false;

    m_lat_isSet = false;
    m_lat_isValid = false;

    m_lng_isSet = false;
    m_lng_isValid = false;

    m_location_name_isSet = false;
    m_location_name_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_parent_event_key_isSet = false;
    m_parent_event_key_isValid = false;

    m_playoff_type_isSet = false;
    m_playoff_type_isValid = false;

    m_playoff_type_string_isSet = false;
    m_playoff_type_string_isValid = false;

    m_postal_code_isSet = false;
    m_postal_code_isValid = false;

    m_short_name_isSet = false;
    m_short_name_isValid = false;

    m_start_date_isSet = false;
    m_start_date_isValid = false;

    m_state_prov_isSet = false;
    m_state_prov_isValid = false;

    m_timezone_isSet = false;
    m_timezone_isValid = false;

    m_webcasts_isSet = false;
    m_webcasts_isValid = false;

    m_website_isSet = false;
    m_website_isValid = false;

    m_week_isSet = false;
    m_week_isValid = false;

    m_year_isSet = false;
    m_year_isValid = false;
}

void OAIEvent::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEvent::fromJsonObject(QJsonObject json) {

    m_address_isValid = ::OpenAPI::fromJsonValue(m_address, json[QString("address")]);
    m_address_isSet = !json[QString("address")].isNull() && m_address_isValid;

    m_city_isValid = ::OpenAPI::fromJsonValue(m_city, json[QString("city")]);
    m_city_isSet = !json[QString("city")].isNull() && m_city_isValid;

    m_country_isValid = ::OpenAPI::fromJsonValue(m_country, json[QString("country")]);
    m_country_isSet = !json[QString("country")].isNull() && m_country_isValid;

    m_district_isValid = ::OpenAPI::fromJsonValue(m_district, json[QString("district")]);
    m_district_isSet = !json[QString("district")].isNull() && m_district_isValid;

    m_division_keys_isValid = ::OpenAPI::fromJsonValue(m_division_keys, json[QString("division_keys")]);
    m_division_keys_isSet = !json[QString("division_keys")].isNull() && m_division_keys_isValid;

    m_end_date_isValid = ::OpenAPI::fromJsonValue(m_end_date, json[QString("end_date")]);
    m_end_date_isSet = !json[QString("end_date")].isNull() && m_end_date_isValid;

    m_event_code_isValid = ::OpenAPI::fromJsonValue(m_event_code, json[QString("event_code")]);
    m_event_code_isSet = !json[QString("event_code")].isNull() && m_event_code_isValid;

    m_event_type_isValid = ::OpenAPI::fromJsonValue(m_event_type, json[QString("event_type")]);
    m_event_type_isSet = !json[QString("event_type")].isNull() && m_event_type_isValid;

    m_event_type_string_isValid = ::OpenAPI::fromJsonValue(m_event_type_string, json[QString("event_type_string")]);
    m_event_type_string_isSet = !json[QString("event_type_string")].isNull() && m_event_type_string_isValid;

    m_first_event_code_isValid = ::OpenAPI::fromJsonValue(m_first_event_code, json[QString("first_event_code")]);
    m_first_event_code_isSet = !json[QString("first_event_code")].isNull() && m_first_event_code_isValid;

    m_first_event_id_isValid = ::OpenAPI::fromJsonValue(m_first_event_id, json[QString("first_event_id")]);
    m_first_event_id_isSet = !json[QString("first_event_id")].isNull() && m_first_event_id_isValid;

    m_gmaps_place_id_isValid = ::OpenAPI::fromJsonValue(m_gmaps_place_id, json[QString("gmaps_place_id")]);
    m_gmaps_place_id_isSet = !json[QString("gmaps_place_id")].isNull() && m_gmaps_place_id_isValid;

    m_gmaps_url_isValid = ::OpenAPI::fromJsonValue(m_gmaps_url, json[QString("gmaps_url")]);
    m_gmaps_url_isSet = !json[QString("gmaps_url")].isNull() && m_gmaps_url_isValid;

    m_key_isValid = ::OpenAPI::fromJsonValue(m_key, json[QString("key")]);
    m_key_isSet = !json[QString("key")].isNull() && m_key_isValid;

    m_lat_isValid = ::OpenAPI::fromJsonValue(m_lat, json[QString("lat")]);
    m_lat_isSet = !json[QString("lat")].isNull() && m_lat_isValid;

    m_lng_isValid = ::OpenAPI::fromJsonValue(m_lng, json[QString("lng")]);
    m_lng_isSet = !json[QString("lng")].isNull() && m_lng_isValid;

    m_location_name_isValid = ::OpenAPI::fromJsonValue(m_location_name, json[QString("location_name")]);
    m_location_name_isSet = !json[QString("location_name")].isNull() && m_location_name_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_parent_event_key_isValid = ::OpenAPI::fromJsonValue(m_parent_event_key, json[QString("parent_event_key")]);
    m_parent_event_key_isSet = !json[QString("parent_event_key")].isNull() && m_parent_event_key_isValid;

    m_playoff_type_isValid = ::OpenAPI::fromJsonValue(m_playoff_type, json[QString("playoff_type")]);
    m_playoff_type_isSet = !json[QString("playoff_type")].isNull() && m_playoff_type_isValid;

    m_playoff_type_string_isValid = ::OpenAPI::fromJsonValue(m_playoff_type_string, json[QString("playoff_type_string")]);
    m_playoff_type_string_isSet = !json[QString("playoff_type_string")].isNull() && m_playoff_type_string_isValid;

    m_postal_code_isValid = ::OpenAPI::fromJsonValue(m_postal_code, json[QString("postal_code")]);
    m_postal_code_isSet = !json[QString("postal_code")].isNull() && m_postal_code_isValid;

    m_short_name_isValid = ::OpenAPI::fromJsonValue(m_short_name, json[QString("short_name")]);
    m_short_name_isSet = !json[QString("short_name")].isNull() && m_short_name_isValid;

    m_start_date_isValid = ::OpenAPI::fromJsonValue(m_start_date, json[QString("start_date")]);
    m_start_date_isSet = !json[QString("start_date")].isNull() && m_start_date_isValid;

    m_state_prov_isValid = ::OpenAPI::fromJsonValue(m_state_prov, json[QString("state_prov")]);
    m_state_prov_isSet = !json[QString("state_prov")].isNull() && m_state_prov_isValid;

    m_timezone_isValid = ::OpenAPI::fromJsonValue(m_timezone, json[QString("timezone")]);
    m_timezone_isSet = !json[QString("timezone")].isNull() && m_timezone_isValid;

    m_webcasts_isValid = ::OpenAPI::fromJsonValue(m_webcasts, json[QString("webcasts")]);
    m_webcasts_isSet = !json[QString("webcasts")].isNull() && m_webcasts_isValid;

    m_website_isValid = ::OpenAPI::fromJsonValue(m_website, json[QString("website")]);
    m_website_isSet = !json[QString("website")].isNull() && m_website_isValid;

    m_week_isValid = ::OpenAPI::fromJsonValue(m_week, json[QString("week")]);
    m_week_isSet = !json[QString("week")].isNull() && m_week_isValid;

    m_year_isValid = ::OpenAPI::fromJsonValue(m_year, json[QString("year")]);
    m_year_isSet = !json[QString("year")].isNull() && m_year_isValid;
}

QString OAIEvent::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEvent::asJsonObject() const {
    QJsonObject obj;
    if (m_address_isSet) {
        obj.insert(QString("address"), ::OpenAPI::toJsonValue(m_address));
    }
    if (m_city_isSet) {
        obj.insert(QString("city"), ::OpenAPI::toJsonValue(m_city));
    }
    if (m_country_isSet) {
        obj.insert(QString("country"), ::OpenAPI::toJsonValue(m_country));
    }
    if (m_district.isSet()) {
        obj.insert(QString("district"), ::OpenAPI::toJsonValue(m_district));
    }
    if (m_division_keys.size() > 0) {
        obj.insert(QString("division_keys"), ::OpenAPI::toJsonValue(m_division_keys));
    }
    if (m_end_date_isSet) {
        obj.insert(QString("end_date"), ::OpenAPI::toJsonValue(m_end_date));
    }
    if (m_event_code_isSet) {
        obj.insert(QString("event_code"), ::OpenAPI::toJsonValue(m_event_code));
    }
    if (m_event_type_isSet) {
        obj.insert(QString("event_type"), ::OpenAPI::toJsonValue(m_event_type));
    }
    if (m_event_type_string_isSet) {
        obj.insert(QString("event_type_string"), ::OpenAPI::toJsonValue(m_event_type_string));
    }
    if (m_first_event_code_isSet) {
        obj.insert(QString("first_event_code"), ::OpenAPI::toJsonValue(m_first_event_code));
    }
    if (m_first_event_id_isSet) {
        obj.insert(QString("first_event_id"), ::OpenAPI::toJsonValue(m_first_event_id));
    }
    if (m_gmaps_place_id_isSet) {
        obj.insert(QString("gmaps_place_id"), ::OpenAPI::toJsonValue(m_gmaps_place_id));
    }
    if (m_gmaps_url_isSet) {
        obj.insert(QString("gmaps_url"), ::OpenAPI::toJsonValue(m_gmaps_url));
    }
    if (m_key_isSet) {
        obj.insert(QString("key"), ::OpenAPI::toJsonValue(m_key));
    }
    if (m_lat_isSet) {
        obj.insert(QString("lat"), ::OpenAPI::toJsonValue(m_lat));
    }
    if (m_lng_isSet) {
        obj.insert(QString("lng"), ::OpenAPI::toJsonValue(m_lng));
    }
    if (m_location_name_isSet) {
        obj.insert(QString("location_name"), ::OpenAPI::toJsonValue(m_location_name));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_parent_event_key_isSet) {
        obj.insert(QString("parent_event_key"), ::OpenAPI::toJsonValue(m_parent_event_key));
    }
    if (m_playoff_type_isSet) {
        obj.insert(QString("playoff_type"), ::OpenAPI::toJsonValue(m_playoff_type));
    }
    if (m_playoff_type_string_isSet) {
        obj.insert(QString("playoff_type_string"), ::OpenAPI::toJsonValue(m_playoff_type_string));
    }
    if (m_postal_code_isSet) {
        obj.insert(QString("postal_code"), ::OpenAPI::toJsonValue(m_postal_code));
    }
    if (m_short_name_isSet) {
        obj.insert(QString("short_name"), ::OpenAPI::toJsonValue(m_short_name));
    }
    if (m_start_date_isSet) {
        obj.insert(QString("start_date"), ::OpenAPI::toJsonValue(m_start_date));
    }
    if (m_state_prov_isSet) {
        obj.insert(QString("state_prov"), ::OpenAPI::toJsonValue(m_state_prov));
    }
    if (m_timezone_isSet) {
        obj.insert(QString("timezone"), ::OpenAPI::toJsonValue(m_timezone));
    }
    if (m_webcasts.size() > 0) {
        obj.insert(QString("webcasts"), ::OpenAPI::toJsonValue(m_webcasts));
    }
    if (m_website_isSet) {
        obj.insert(QString("website"), ::OpenAPI::toJsonValue(m_website));
    }
    if (m_week_isSet) {
        obj.insert(QString("week"), ::OpenAPI::toJsonValue(m_week));
    }
    if (m_year_isSet) {
        obj.insert(QString("year"), ::OpenAPI::toJsonValue(m_year));
    }
    return obj;
}

QString OAIEvent::getAddress() const {
    return m_address;
}
void OAIEvent::setAddress(const QString &address) {
    m_address = address;
    m_address_isSet = true;
}

bool OAIEvent::is_address_Set() const{
    return m_address_isSet;
}

bool OAIEvent::is_address_Valid() const{
    return m_address_isValid;
}

QString OAIEvent::getCity() const {
    return m_city;
}
void OAIEvent::setCity(const QString &city) {
    m_city = city;
    m_city_isSet = true;
}

bool OAIEvent::is_city_Set() const{
    return m_city_isSet;
}

bool OAIEvent::is_city_Valid() const{
    return m_city_isValid;
}

QString OAIEvent::getCountry() const {
    return m_country;
}
void OAIEvent::setCountry(const QString &country) {
    m_country = country;
    m_country_isSet = true;
}

bool OAIEvent::is_country_Set() const{
    return m_country_isSet;
}

bool OAIEvent::is_country_Valid() const{
    return m_country_isValid;
}

OAIDistrict_List OAIEvent::getDistrict() const {
    return m_district;
}
void OAIEvent::setDistrict(const OAIDistrict_List &district) {
    m_district = district;
    m_district_isSet = true;
}

bool OAIEvent::is_district_Set() const{
    return m_district_isSet;
}

bool OAIEvent::is_district_Valid() const{
    return m_district_isValid;
}

QList<QString> OAIEvent::getDivisionKeys() const {
    return m_division_keys;
}
void OAIEvent::setDivisionKeys(const QList<QString> &division_keys) {
    m_division_keys = division_keys;
    m_division_keys_isSet = true;
}

bool OAIEvent::is_division_keys_Set() const{
    return m_division_keys_isSet;
}

bool OAIEvent::is_division_keys_Valid() const{
    return m_division_keys_isValid;
}

QDate OAIEvent::getEndDate() const {
    return m_end_date;
}
void OAIEvent::setEndDate(const QDate &end_date) {
    m_end_date = end_date;
    m_end_date_isSet = true;
}

bool OAIEvent::is_end_date_Set() const{
    return m_end_date_isSet;
}

bool OAIEvent::is_end_date_Valid() const{
    return m_end_date_isValid;
}

QString OAIEvent::getEventCode() const {
    return m_event_code;
}
void OAIEvent::setEventCode(const QString &event_code) {
    m_event_code = event_code;
    m_event_code_isSet = true;
}

bool OAIEvent::is_event_code_Set() const{
    return m_event_code_isSet;
}

bool OAIEvent::is_event_code_Valid() const{
    return m_event_code_isValid;
}

qint32 OAIEvent::getEventType() const {
    return m_event_type;
}
void OAIEvent::setEventType(const qint32 &event_type) {
    m_event_type = event_type;
    m_event_type_isSet = true;
}

bool OAIEvent::is_event_type_Set() const{
    return m_event_type_isSet;
}

bool OAIEvent::is_event_type_Valid() const{
    return m_event_type_isValid;
}

QString OAIEvent::getEventTypeString() const {
    return m_event_type_string;
}
void OAIEvent::setEventTypeString(const QString &event_type_string) {
    m_event_type_string = event_type_string;
    m_event_type_string_isSet = true;
}

bool OAIEvent::is_event_type_string_Set() const{
    return m_event_type_string_isSet;
}

bool OAIEvent::is_event_type_string_Valid() const{
    return m_event_type_string_isValid;
}

QString OAIEvent::getFirstEventCode() const {
    return m_first_event_code;
}
void OAIEvent::setFirstEventCode(const QString &first_event_code) {
    m_first_event_code = first_event_code;
    m_first_event_code_isSet = true;
}

bool OAIEvent::is_first_event_code_Set() const{
    return m_first_event_code_isSet;
}

bool OAIEvent::is_first_event_code_Valid() const{
    return m_first_event_code_isValid;
}

QString OAIEvent::getFirstEventId() const {
    return m_first_event_id;
}
void OAIEvent::setFirstEventId(const QString &first_event_id) {
    m_first_event_id = first_event_id;
    m_first_event_id_isSet = true;
}

bool OAIEvent::is_first_event_id_Set() const{
    return m_first_event_id_isSet;
}

bool OAIEvent::is_first_event_id_Valid() const{
    return m_first_event_id_isValid;
}

QString OAIEvent::getGmapsPlaceId() const {
    return m_gmaps_place_id;
}
void OAIEvent::setGmapsPlaceId(const QString &gmaps_place_id) {
    m_gmaps_place_id = gmaps_place_id;
    m_gmaps_place_id_isSet = true;
}

bool OAIEvent::is_gmaps_place_id_Set() const{
    return m_gmaps_place_id_isSet;
}

bool OAIEvent::is_gmaps_place_id_Valid() const{
    return m_gmaps_place_id_isValid;
}

QString OAIEvent::getGmapsUrl() const {
    return m_gmaps_url;
}
void OAIEvent::setGmapsUrl(const QString &gmaps_url) {
    m_gmaps_url = gmaps_url;
    m_gmaps_url_isSet = true;
}

bool OAIEvent::is_gmaps_url_Set() const{
    return m_gmaps_url_isSet;
}

bool OAIEvent::is_gmaps_url_Valid() const{
    return m_gmaps_url_isValid;
}

QString OAIEvent::getKey() const {
    return m_key;
}
void OAIEvent::setKey(const QString &key) {
    m_key = key;
    m_key_isSet = true;
}

bool OAIEvent::is_key_Set() const{
    return m_key_isSet;
}

bool OAIEvent::is_key_Valid() const{
    return m_key_isValid;
}

double OAIEvent::getLat() const {
    return m_lat;
}
void OAIEvent::setLat(const double &lat) {
    m_lat = lat;
    m_lat_isSet = true;
}

bool OAIEvent::is_lat_Set() const{
    return m_lat_isSet;
}

bool OAIEvent::is_lat_Valid() const{
    return m_lat_isValid;
}

double OAIEvent::getLng() const {
    return m_lng;
}
void OAIEvent::setLng(const double &lng) {
    m_lng = lng;
    m_lng_isSet = true;
}

bool OAIEvent::is_lng_Set() const{
    return m_lng_isSet;
}

bool OAIEvent::is_lng_Valid() const{
    return m_lng_isValid;
}

QString OAIEvent::getLocationName() const {
    return m_location_name;
}
void OAIEvent::setLocationName(const QString &location_name) {
    m_location_name = location_name;
    m_location_name_isSet = true;
}

bool OAIEvent::is_location_name_Set() const{
    return m_location_name_isSet;
}

bool OAIEvent::is_location_name_Valid() const{
    return m_location_name_isValid;
}

QString OAIEvent::getName() const {
    return m_name;
}
void OAIEvent::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIEvent::is_name_Set() const{
    return m_name_isSet;
}

bool OAIEvent::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIEvent::getParentEventKey() const {
    return m_parent_event_key;
}
void OAIEvent::setParentEventKey(const QString &parent_event_key) {
    m_parent_event_key = parent_event_key;
    m_parent_event_key_isSet = true;
}

bool OAIEvent::is_parent_event_key_Set() const{
    return m_parent_event_key_isSet;
}

bool OAIEvent::is_parent_event_key_Valid() const{
    return m_parent_event_key_isValid;
}

qint32 OAIEvent::getPlayoffType() const {
    return m_playoff_type;
}
void OAIEvent::setPlayoffType(const qint32 &playoff_type) {
    m_playoff_type = playoff_type;
    m_playoff_type_isSet = true;
}

bool OAIEvent::is_playoff_type_Set() const{
    return m_playoff_type_isSet;
}

bool OAIEvent::is_playoff_type_Valid() const{
    return m_playoff_type_isValid;
}

QString OAIEvent::getPlayoffTypeString() const {
    return m_playoff_type_string;
}
void OAIEvent::setPlayoffTypeString(const QString &playoff_type_string) {
    m_playoff_type_string = playoff_type_string;
    m_playoff_type_string_isSet = true;
}

bool OAIEvent::is_playoff_type_string_Set() const{
    return m_playoff_type_string_isSet;
}

bool OAIEvent::is_playoff_type_string_Valid() const{
    return m_playoff_type_string_isValid;
}

QString OAIEvent::getPostalCode() const {
    return m_postal_code;
}
void OAIEvent::setPostalCode(const QString &postal_code) {
    m_postal_code = postal_code;
    m_postal_code_isSet = true;
}

bool OAIEvent::is_postal_code_Set() const{
    return m_postal_code_isSet;
}

bool OAIEvent::is_postal_code_Valid() const{
    return m_postal_code_isValid;
}

QString OAIEvent::getShortName() const {
    return m_short_name;
}
void OAIEvent::setShortName(const QString &short_name) {
    m_short_name = short_name;
    m_short_name_isSet = true;
}

bool OAIEvent::is_short_name_Set() const{
    return m_short_name_isSet;
}

bool OAIEvent::is_short_name_Valid() const{
    return m_short_name_isValid;
}

QDate OAIEvent::getStartDate() const {
    return m_start_date;
}
void OAIEvent::setStartDate(const QDate &start_date) {
    m_start_date = start_date;
    m_start_date_isSet = true;
}

bool OAIEvent::is_start_date_Set() const{
    return m_start_date_isSet;
}

bool OAIEvent::is_start_date_Valid() const{
    return m_start_date_isValid;
}

QString OAIEvent::getStateProv() const {
    return m_state_prov;
}
void OAIEvent::setStateProv(const QString &state_prov) {
    m_state_prov = state_prov;
    m_state_prov_isSet = true;
}

bool OAIEvent::is_state_prov_Set() const{
    return m_state_prov_isSet;
}

bool OAIEvent::is_state_prov_Valid() const{
    return m_state_prov_isValid;
}

QString OAIEvent::getTimezone() const {
    return m_timezone;
}
void OAIEvent::setTimezone(const QString &timezone) {
    m_timezone = timezone;
    m_timezone_isSet = true;
}

bool OAIEvent::is_timezone_Set() const{
    return m_timezone_isSet;
}

bool OAIEvent::is_timezone_Valid() const{
    return m_timezone_isValid;
}

QList<OAIWebcast> OAIEvent::getWebcasts() const {
    return m_webcasts;
}
void OAIEvent::setWebcasts(const QList<OAIWebcast> &webcasts) {
    m_webcasts = webcasts;
    m_webcasts_isSet = true;
}

bool OAIEvent::is_webcasts_Set() const{
    return m_webcasts_isSet;
}

bool OAIEvent::is_webcasts_Valid() const{
    return m_webcasts_isValid;
}

QString OAIEvent::getWebsite() const {
    return m_website;
}
void OAIEvent::setWebsite(const QString &website) {
    m_website = website;
    m_website_isSet = true;
}

bool OAIEvent::is_website_Set() const{
    return m_website_isSet;
}

bool OAIEvent::is_website_Valid() const{
    return m_website_isValid;
}

qint32 OAIEvent::getWeek() const {
    return m_week;
}
void OAIEvent::setWeek(const qint32 &week) {
    m_week = week;
    m_week_isSet = true;
}

bool OAIEvent::is_week_Set() const{
    return m_week_isSet;
}

bool OAIEvent::is_week_Valid() const{
    return m_week_isValid;
}

qint32 OAIEvent::getYear() const {
    return m_year;
}
void OAIEvent::setYear(const qint32 &year) {
    m_year = year;
    m_year_isSet = true;
}

bool OAIEvent::is_year_Set() const{
    return m_year_isSet;
}

bool OAIEvent::is_year_Valid() const{
    return m_year_isValid;
}

bool OAIEvent::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_city_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_district.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_division_keys.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_type_string_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_event_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_event_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gmaps_place_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gmaps_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lat_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lng_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_event_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_playoff_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_playoff_type_string_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_postal_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_short_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_prov_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timezone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_webcasts.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_website_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_week_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_year_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEvent::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_end_date_isValid && m_event_code_isValid && m_event_type_isValid && m_event_type_string_isValid && m_key_isValid && m_name_isValid && m_start_date_isValid && m_year_isValid && true;
}

} // namespace OpenAPI
