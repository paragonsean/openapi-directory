/**
 * The Blue Alliance API v3
 * # Overview    Information and statistics about FIRST Robotics Competition teams and events.   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).
 *
 * The version of the OpenAPI document: 3.8.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAward.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAward::OAIAward(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAward::OAIAward() {
    this->initializeModel();
}

OAIAward::~OAIAward() {}

void OAIAward::initializeModel() {

    m_award_type_isSet = false;
    m_award_type_isValid = false;

    m_event_key_isSet = false;
    m_event_key_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_recipient_list_isSet = false;
    m_recipient_list_isValid = false;

    m_year_isSet = false;
    m_year_isValid = false;
}

void OAIAward::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAward::fromJsonObject(QJsonObject json) {

    m_award_type_isValid = ::OpenAPI::fromJsonValue(m_award_type, json[QString("award_type")]);
    m_award_type_isSet = !json[QString("award_type")].isNull() && m_award_type_isValid;

    m_event_key_isValid = ::OpenAPI::fromJsonValue(m_event_key, json[QString("event_key")]);
    m_event_key_isSet = !json[QString("event_key")].isNull() && m_event_key_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_recipient_list_isValid = ::OpenAPI::fromJsonValue(m_recipient_list, json[QString("recipient_list")]);
    m_recipient_list_isSet = !json[QString("recipient_list")].isNull() && m_recipient_list_isValid;

    m_year_isValid = ::OpenAPI::fromJsonValue(m_year, json[QString("year")]);
    m_year_isSet = !json[QString("year")].isNull() && m_year_isValid;
}

QString OAIAward::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAward::asJsonObject() const {
    QJsonObject obj;
    if (m_award_type_isSet) {
        obj.insert(QString("award_type"), ::OpenAPI::toJsonValue(m_award_type));
    }
    if (m_event_key_isSet) {
        obj.insert(QString("event_key"), ::OpenAPI::toJsonValue(m_event_key));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_recipient_list.size() > 0) {
        obj.insert(QString("recipient_list"), ::OpenAPI::toJsonValue(m_recipient_list));
    }
    if (m_year_isSet) {
        obj.insert(QString("year"), ::OpenAPI::toJsonValue(m_year));
    }
    return obj;
}

qint32 OAIAward::getAwardType() const {
    return m_award_type;
}
void OAIAward::setAwardType(const qint32 &award_type) {
    m_award_type = award_type;
    m_award_type_isSet = true;
}

bool OAIAward::is_award_type_Set() const{
    return m_award_type_isSet;
}

bool OAIAward::is_award_type_Valid() const{
    return m_award_type_isValid;
}

QString OAIAward::getEventKey() const {
    return m_event_key;
}
void OAIAward::setEventKey(const QString &event_key) {
    m_event_key = event_key;
    m_event_key_isSet = true;
}

bool OAIAward::is_event_key_Set() const{
    return m_event_key_isSet;
}

bool OAIAward::is_event_key_Valid() const{
    return m_event_key_isValid;
}

QString OAIAward::getName() const {
    return m_name;
}
void OAIAward::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIAward::is_name_Set() const{
    return m_name_isSet;
}

bool OAIAward::is_name_Valid() const{
    return m_name_isValid;
}

QList<OAIAward_Recipient> OAIAward::getRecipientList() const {
    return m_recipient_list;
}
void OAIAward::setRecipientList(const QList<OAIAward_Recipient> &recipient_list) {
    m_recipient_list = recipient_list;
    m_recipient_list_isSet = true;
}

bool OAIAward::is_recipient_list_Set() const{
    return m_recipient_list_isSet;
}

bool OAIAward::is_recipient_list_Valid() const{
    return m_recipient_list_isValid;
}

qint32 OAIAward::getYear() const {
    return m_year;
}
void OAIAward::setYear(const qint32 &year) {
    m_year = year;
    m_year_isSet = true;
}

bool OAIAward::is_year_Set() const{
    return m_year_isSet;
}

bool OAIAward::is_year_Valid() const{
    return m_year_isValid;
}

bool OAIAward::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_award_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recipient_list.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_year_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAward::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_award_type_isValid && m_event_key_isValid && m_name_isValid && m_recipient_list_isValid && m_year_isValid && true;
}

} // namespace OpenAPI
