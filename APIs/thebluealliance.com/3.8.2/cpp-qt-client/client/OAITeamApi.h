/**
 * The Blue Alliance API v3
 * # Overview    Information and statistics about FIRST Robotics Competition teams and events.   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).
 *
 * The version of the OpenAPI document: 3.8.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAITeamApi_H
#define OAI_OAITeamApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAward.h"
#include "OAIDistrict_List.h"
#include "OAIDistrict_Ranking.h"
#include "OAIEvent.h"
#include "OAIEvent_Simple.h"
#include "OAIMatch.h"
#include "OAIMatch_Simple.h"
#include "OAIMedia.h"
#include "OAITeam.h"
#include "OAITeam_Event_Status.h"
#include "OAITeam_Robot.h"
#include "OAITeam_Simple.h"
#include <QMap>
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAITeamApi : public QObject {
    Q_OBJECT

public:
    OAITeamApi(const int timeOut = 0);
    ~OAITeamApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  district_key QString [required]
    * @param[in]  if_none_match QString [optional]
    */
    virtual void getDistrictRankings(const QString &district_key, const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  district_key QString [required]
    * @param[in]  if_none_match QString [optional]
    */
    virtual void getDistrictTeamsKeys(const QString &district_key, const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  district_key QString [required]
    * @param[in]  if_none_match QString [optional]
    */
    virtual void getDistrictTeamsSimple(const QString &district_key, const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  district_key QString [required]
    * @param[in]  if_none_match QString [optional]
    */
    virtual void getDistrictTeams(const QString &district_key, const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  event_key QString [required]
    * @param[in]  if_none_match QString [optional]
    */
    virtual void getEventTeamsKeys(const QString &event_key, const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  event_key QString [required]
    * @param[in]  if_none_match QString [optional]
    */
    virtual void getEventTeamsSimple(const QString &event_key, const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  event_key QString [required]
    * @param[in]  if_none_match QString [optional]
    */
    virtual void getEventTeamsStatuses(const QString &event_key, const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  event_key QString [required]
    * @param[in]  if_none_match QString [optional]
    */
    virtual void getEventTeams(const QString &event_key, const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  team_key QString [required]
    * @param[in]  if_none_match QString [optional]
    */
    virtual void getTeam(const QString &team_key, const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  team_key QString [required]
    * @param[in]  if_none_match QString [optional]
    */
    virtual void getTeamAwards(const QString &team_key, const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  team_key QString [required]
    * @param[in]  year qint32 [required]
    * @param[in]  if_none_match QString [optional]
    */
    virtual void getTeamAwardsByYear(const QString &team_key, const qint32 &year, const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  team_key QString [required]
    * @param[in]  if_none_match QString [optional]
    */
    virtual void getTeamDistricts(const QString &team_key, const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  team_key QString [required]
    * @param[in]  event_key QString [required]
    * @param[in]  if_none_match QString [optional]
    */
    virtual void getTeamEventAwards(const QString &team_key, const QString &event_key, const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  team_key QString [required]
    * @param[in]  event_key QString [required]
    * @param[in]  if_none_match QString [optional]
    */
    virtual void getTeamEventMatches(const QString &team_key, const QString &event_key, const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  team_key QString [required]
    * @param[in]  event_key QString [required]
    * @param[in]  if_none_match QString [optional]
    */
    virtual void getTeamEventMatchesKeys(const QString &team_key, const QString &event_key, const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  team_key QString [required]
    * @param[in]  event_key QString [required]
    * @param[in]  if_none_match QString [optional]
    */
    virtual void getTeamEventMatchesSimple(const QString &team_key, const QString &event_key, const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  team_key QString [required]
    * @param[in]  event_key QString [required]
    * @param[in]  if_none_match QString [optional]
    */
    virtual void getTeamEventStatus(const QString &team_key, const QString &event_key, const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  team_key QString [required]
    * @param[in]  if_none_match QString [optional]
    */
    virtual void getTeamEvents(const QString &team_key, const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  team_key QString [required]
    * @param[in]  year qint32 [required]
    * @param[in]  if_none_match QString [optional]
    */
    virtual void getTeamEventsByYear(const QString &team_key, const qint32 &year, const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  team_key QString [required]
    * @param[in]  year qint32 [required]
    * @param[in]  if_none_match QString [optional]
    */
    virtual void getTeamEventsByYearKeys(const QString &team_key, const qint32 &year, const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  team_key QString [required]
    * @param[in]  year qint32 [required]
    * @param[in]  if_none_match QString [optional]
    */
    virtual void getTeamEventsByYearSimple(const QString &team_key, const qint32 &year, const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  team_key QString [required]
    * @param[in]  if_none_match QString [optional]
    */
    virtual void getTeamEventsKeys(const QString &team_key, const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  team_key QString [required]
    * @param[in]  if_none_match QString [optional]
    */
    virtual void getTeamEventsSimple(const QString &team_key, const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  team_key QString [required]
    * @param[in]  year qint32 [required]
    * @param[in]  if_none_match QString [optional]
    */
    virtual void getTeamEventsStatusesByYear(const QString &team_key, const qint32 &year, const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  team_key QString [required]
    * @param[in]  year qint32 [required]
    * @param[in]  if_none_match QString [optional]
    */
    virtual void getTeamMatchesByYear(const QString &team_key, const qint32 &year, const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  team_key QString [required]
    * @param[in]  year qint32 [required]
    * @param[in]  if_none_match QString [optional]
    */
    virtual void getTeamMatchesByYearKeys(const QString &team_key, const qint32 &year, const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  team_key QString [required]
    * @param[in]  year qint32 [required]
    * @param[in]  if_none_match QString [optional]
    */
    virtual void getTeamMatchesByYearSimple(const QString &team_key, const qint32 &year, const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  team_key QString [required]
    * @param[in]  media_tag QString [required]
    * @param[in]  if_none_match QString [optional]
    */
    virtual void getTeamMediaByTag(const QString &team_key, const QString &media_tag, const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  team_key QString [required]
    * @param[in]  media_tag QString [required]
    * @param[in]  year qint32 [required]
    * @param[in]  if_none_match QString [optional]
    */
    virtual void getTeamMediaByTagYear(const QString &team_key, const QString &media_tag, const qint32 &year, const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  team_key QString [required]
    * @param[in]  year qint32 [required]
    * @param[in]  if_none_match QString [optional]
    */
    virtual void getTeamMediaByYear(const QString &team_key, const qint32 &year, const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  team_key QString [required]
    * @param[in]  if_none_match QString [optional]
    */
    virtual void getTeamRobots(const QString &team_key, const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  team_key QString [required]
    * @param[in]  if_none_match QString [optional]
    */
    virtual void getTeamSimple(const QString &team_key, const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  team_key QString [required]
    * @param[in]  if_none_match QString [optional]
    */
    virtual void getTeamSocialMedia(const QString &team_key, const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  team_key QString [required]
    * @param[in]  if_none_match QString [optional]
    */
    virtual void getTeamYearsParticipated(const QString &team_key, const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  page_num qint32 [required]
    * @param[in]  if_none_match QString [optional]
    */
    virtual void getTeams(const qint32 &page_num, const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  year qint32 [required]
    * @param[in]  page_num qint32 [required]
    * @param[in]  if_none_match QString [optional]
    */
    virtual void getTeamsByYear(const qint32 &year, const qint32 &page_num, const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  year qint32 [required]
    * @param[in]  page_num qint32 [required]
    * @param[in]  if_none_match QString [optional]
    */
    virtual void getTeamsByYearKeys(const qint32 &year, const qint32 &page_num, const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  year qint32 [required]
    * @param[in]  page_num qint32 [required]
    * @param[in]  if_none_match QString [optional]
    */
    virtual void getTeamsByYearSimple(const qint32 &year, const qint32 &page_num, const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  page_num qint32 [required]
    * @param[in]  if_none_match QString [optional]
    */
    virtual void getTeamsKeys(const qint32 &page_num, const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  page_num qint32 [required]
    * @param[in]  if_none_match QString [optional]
    */
    virtual void getTeamsSimple(const qint32 &page_num, const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getDistrictRankingsCallback(OAIHttpRequestWorker *worker);
    void getDistrictTeamsKeysCallback(OAIHttpRequestWorker *worker);
    void getDistrictTeamsSimpleCallback(OAIHttpRequestWorker *worker);
    void getDistrictTeamsCallback(OAIHttpRequestWorker *worker);
    void getEventTeamsKeysCallback(OAIHttpRequestWorker *worker);
    void getEventTeamsSimpleCallback(OAIHttpRequestWorker *worker);
    void getEventTeamsStatusesCallback(OAIHttpRequestWorker *worker);
    void getEventTeamsCallback(OAIHttpRequestWorker *worker);
    void getTeamCallback(OAIHttpRequestWorker *worker);
    void getTeamAwardsCallback(OAIHttpRequestWorker *worker);
    void getTeamAwardsByYearCallback(OAIHttpRequestWorker *worker);
    void getTeamDistrictsCallback(OAIHttpRequestWorker *worker);
    void getTeamEventAwardsCallback(OAIHttpRequestWorker *worker);
    void getTeamEventMatchesCallback(OAIHttpRequestWorker *worker);
    void getTeamEventMatchesKeysCallback(OAIHttpRequestWorker *worker);
    void getTeamEventMatchesSimpleCallback(OAIHttpRequestWorker *worker);
    void getTeamEventStatusCallback(OAIHttpRequestWorker *worker);
    void getTeamEventsCallback(OAIHttpRequestWorker *worker);
    void getTeamEventsByYearCallback(OAIHttpRequestWorker *worker);
    void getTeamEventsByYearKeysCallback(OAIHttpRequestWorker *worker);
    void getTeamEventsByYearSimpleCallback(OAIHttpRequestWorker *worker);
    void getTeamEventsKeysCallback(OAIHttpRequestWorker *worker);
    void getTeamEventsSimpleCallback(OAIHttpRequestWorker *worker);
    void getTeamEventsStatusesByYearCallback(OAIHttpRequestWorker *worker);
    void getTeamMatchesByYearCallback(OAIHttpRequestWorker *worker);
    void getTeamMatchesByYearKeysCallback(OAIHttpRequestWorker *worker);
    void getTeamMatchesByYearSimpleCallback(OAIHttpRequestWorker *worker);
    void getTeamMediaByTagCallback(OAIHttpRequestWorker *worker);
    void getTeamMediaByTagYearCallback(OAIHttpRequestWorker *worker);
    void getTeamMediaByYearCallback(OAIHttpRequestWorker *worker);
    void getTeamRobotsCallback(OAIHttpRequestWorker *worker);
    void getTeamSimpleCallback(OAIHttpRequestWorker *worker);
    void getTeamSocialMediaCallback(OAIHttpRequestWorker *worker);
    void getTeamYearsParticipatedCallback(OAIHttpRequestWorker *worker);
    void getTeamsCallback(OAIHttpRequestWorker *worker);
    void getTeamsByYearCallback(OAIHttpRequestWorker *worker);
    void getTeamsByYearKeysCallback(OAIHttpRequestWorker *worker);
    void getTeamsByYearSimpleCallback(OAIHttpRequestWorker *worker);
    void getTeamsKeysCallback(OAIHttpRequestWorker *worker);
    void getTeamsSimpleCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getDistrictRankingsSignal(QList<OAIDistrict_Ranking> summary);
    void getDistrictTeamsKeysSignal(QList<QString> summary);
    void getDistrictTeamsSimpleSignal(QList<OAITeam_Simple> summary);
    void getDistrictTeamsSignal(QList<OAITeam> summary);
    void getEventTeamsKeysSignal(QList<QString> summary);
    void getEventTeamsSimpleSignal(QList<OAITeam_Simple> summary);
    void getEventTeamsStatusesSignal(QMap<QString, OAITeam_Event_Status> summary);
    void getEventTeamsSignal(QList<OAITeam> summary);
    void getTeamSignal(OAITeam summary);
    void getTeamAwardsSignal(QList<OAIAward> summary);
    void getTeamAwardsByYearSignal(QList<OAIAward> summary);
    void getTeamDistrictsSignal(QList<OAIDistrict_List> summary);
    void getTeamEventAwardsSignal(QList<OAIAward> summary);
    void getTeamEventMatchesSignal(QList<OAIMatch> summary);
    void getTeamEventMatchesKeysSignal(QList<QString> summary);
    void getTeamEventMatchesSimpleSignal(QList<OAIMatch> summary);
    void getTeamEventStatusSignal(OAITeam_Event_Status summary);
    void getTeamEventsSignal(QList<OAIEvent> summary);
    void getTeamEventsByYearSignal(QList<OAIEvent> summary);
    void getTeamEventsByYearKeysSignal(QList<QString> summary);
    void getTeamEventsByYearSimpleSignal(QList<OAIEvent_Simple> summary);
    void getTeamEventsKeysSignal(QList<QString> summary);
    void getTeamEventsSimpleSignal(QList<OAIEvent_Simple> summary);
    void getTeamEventsStatusesByYearSignal(QMap<QString, OAITeam_Event_Status> summary);
    void getTeamMatchesByYearSignal(QList<OAIMatch> summary);
    void getTeamMatchesByYearKeysSignal(QList<QString> summary);
    void getTeamMatchesByYearSimpleSignal(QList<OAIMatch_Simple> summary);
    void getTeamMediaByTagSignal(QList<OAIMedia> summary);
    void getTeamMediaByTagYearSignal(QList<OAIMedia> summary);
    void getTeamMediaByYearSignal(QList<OAIMedia> summary);
    void getTeamRobotsSignal(QList<OAITeam_Robot> summary);
    void getTeamSimpleSignal(OAITeam_Simple summary);
    void getTeamSocialMediaSignal(QList<OAIMedia> summary);
    void getTeamYearsParticipatedSignal(QList<qint32> summary);
    void getTeamsSignal(QList<OAITeam> summary);
    void getTeamsByYearSignal(QList<OAITeam> summary);
    void getTeamsByYearKeysSignal(QList<QString> summary);
    void getTeamsByYearSimpleSignal(QList<OAITeam_Simple> summary);
    void getTeamsKeysSignal(QList<QString> summary);
    void getTeamsSimpleSignal(QList<OAITeam_Simple> summary);


    void getDistrictRankingsSignalFull(OAIHttpRequestWorker *worker, QList<OAIDistrict_Ranking> summary);
    void getDistrictTeamsKeysSignalFull(OAIHttpRequestWorker *worker, QList<QString> summary);
    void getDistrictTeamsSimpleSignalFull(OAIHttpRequestWorker *worker, QList<OAITeam_Simple> summary);
    void getDistrictTeamsSignalFull(OAIHttpRequestWorker *worker, QList<OAITeam> summary);
    void getEventTeamsKeysSignalFull(OAIHttpRequestWorker *worker, QList<QString> summary);
    void getEventTeamsSimpleSignalFull(OAIHttpRequestWorker *worker, QList<OAITeam_Simple> summary);
    void getEventTeamsStatusesSignalFull(OAIHttpRequestWorker *worker, QMap<QString, OAITeam_Event_Status> summary);
    void getEventTeamsSignalFull(OAIHttpRequestWorker *worker, QList<OAITeam> summary);
    void getTeamSignalFull(OAIHttpRequestWorker *worker, OAITeam summary);
    void getTeamAwardsSignalFull(OAIHttpRequestWorker *worker, QList<OAIAward> summary);
    void getTeamAwardsByYearSignalFull(OAIHttpRequestWorker *worker, QList<OAIAward> summary);
    void getTeamDistrictsSignalFull(OAIHttpRequestWorker *worker, QList<OAIDistrict_List> summary);
    void getTeamEventAwardsSignalFull(OAIHttpRequestWorker *worker, QList<OAIAward> summary);
    void getTeamEventMatchesSignalFull(OAIHttpRequestWorker *worker, QList<OAIMatch> summary);
    void getTeamEventMatchesKeysSignalFull(OAIHttpRequestWorker *worker, QList<QString> summary);
    void getTeamEventMatchesSimpleSignalFull(OAIHttpRequestWorker *worker, QList<OAIMatch> summary);
    void getTeamEventStatusSignalFull(OAIHttpRequestWorker *worker, OAITeam_Event_Status summary);
    void getTeamEventsSignalFull(OAIHttpRequestWorker *worker, QList<OAIEvent> summary);
    void getTeamEventsByYearSignalFull(OAIHttpRequestWorker *worker, QList<OAIEvent> summary);
    void getTeamEventsByYearKeysSignalFull(OAIHttpRequestWorker *worker, QList<QString> summary);
    void getTeamEventsByYearSimpleSignalFull(OAIHttpRequestWorker *worker, QList<OAIEvent_Simple> summary);
    void getTeamEventsKeysSignalFull(OAIHttpRequestWorker *worker, QList<QString> summary);
    void getTeamEventsSimpleSignalFull(OAIHttpRequestWorker *worker, QList<OAIEvent_Simple> summary);
    void getTeamEventsStatusesByYearSignalFull(OAIHttpRequestWorker *worker, QMap<QString, OAITeam_Event_Status> summary);
    void getTeamMatchesByYearSignalFull(OAIHttpRequestWorker *worker, QList<OAIMatch> summary);
    void getTeamMatchesByYearKeysSignalFull(OAIHttpRequestWorker *worker, QList<QString> summary);
    void getTeamMatchesByYearSimpleSignalFull(OAIHttpRequestWorker *worker, QList<OAIMatch_Simple> summary);
    void getTeamMediaByTagSignalFull(OAIHttpRequestWorker *worker, QList<OAIMedia> summary);
    void getTeamMediaByTagYearSignalFull(OAIHttpRequestWorker *worker, QList<OAIMedia> summary);
    void getTeamMediaByYearSignalFull(OAIHttpRequestWorker *worker, QList<OAIMedia> summary);
    void getTeamRobotsSignalFull(OAIHttpRequestWorker *worker, QList<OAITeam_Robot> summary);
    void getTeamSimpleSignalFull(OAIHttpRequestWorker *worker, OAITeam_Simple summary);
    void getTeamSocialMediaSignalFull(OAIHttpRequestWorker *worker, QList<OAIMedia> summary);
    void getTeamYearsParticipatedSignalFull(OAIHttpRequestWorker *worker, QList<qint32> summary);
    void getTeamsSignalFull(OAIHttpRequestWorker *worker, QList<OAITeam> summary);
    void getTeamsByYearSignalFull(OAIHttpRequestWorker *worker, QList<OAITeam> summary);
    void getTeamsByYearKeysSignalFull(OAIHttpRequestWorker *worker, QList<QString> summary);
    void getTeamsByYearSimpleSignalFull(OAIHttpRequestWorker *worker, QList<OAITeam_Simple> summary);
    void getTeamsKeysSignalFull(OAIHttpRequestWorker *worker, QList<QString> summary);
    void getTeamsSimpleSignalFull(OAIHttpRequestWorker *worker, QList<OAITeam_Simple> summary);

    Q_DECL_DEPRECATED_X("Use getDistrictRankingsSignalError() instead")
    void getDistrictRankingsSignalE(QList<OAIDistrict_Ranking> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDistrictRankingsSignalError(QList<OAIDistrict_Ranking> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDistrictTeamsKeysSignalError() instead")
    void getDistrictTeamsKeysSignalE(QList<QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDistrictTeamsKeysSignalError(QList<QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDistrictTeamsSimpleSignalError() instead")
    void getDistrictTeamsSimpleSignalE(QList<OAITeam_Simple> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDistrictTeamsSimpleSignalError(QList<OAITeam_Simple> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDistrictTeamsSignalError() instead")
    void getDistrictTeamsSignalE(QList<OAITeam> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDistrictTeamsSignalError(QList<OAITeam> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEventTeamsKeysSignalError() instead")
    void getEventTeamsKeysSignalE(QList<QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getEventTeamsKeysSignalError(QList<QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEventTeamsSimpleSignalError() instead")
    void getEventTeamsSimpleSignalE(QList<OAITeam_Simple> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getEventTeamsSimpleSignalError(QList<OAITeam_Simple> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEventTeamsStatusesSignalError() instead")
    void getEventTeamsStatusesSignalE(QMap<QString, OAITeam_Event_Status> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getEventTeamsStatusesSignalError(QMap<QString, OAITeam_Event_Status> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEventTeamsSignalError() instead")
    void getEventTeamsSignalE(QList<OAITeam> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getEventTeamsSignalError(QList<OAITeam> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTeamSignalError() instead")
    void getTeamSignalE(OAITeam summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTeamSignalError(OAITeam summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTeamAwardsSignalError() instead")
    void getTeamAwardsSignalE(QList<OAIAward> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTeamAwardsSignalError(QList<OAIAward> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTeamAwardsByYearSignalError() instead")
    void getTeamAwardsByYearSignalE(QList<OAIAward> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTeamAwardsByYearSignalError(QList<OAIAward> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTeamDistrictsSignalError() instead")
    void getTeamDistrictsSignalE(QList<OAIDistrict_List> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTeamDistrictsSignalError(QList<OAIDistrict_List> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTeamEventAwardsSignalError() instead")
    void getTeamEventAwardsSignalE(QList<OAIAward> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTeamEventAwardsSignalError(QList<OAIAward> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTeamEventMatchesSignalError() instead")
    void getTeamEventMatchesSignalE(QList<OAIMatch> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTeamEventMatchesSignalError(QList<OAIMatch> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTeamEventMatchesKeysSignalError() instead")
    void getTeamEventMatchesKeysSignalE(QList<QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTeamEventMatchesKeysSignalError(QList<QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTeamEventMatchesSimpleSignalError() instead")
    void getTeamEventMatchesSimpleSignalE(QList<OAIMatch> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTeamEventMatchesSimpleSignalError(QList<OAIMatch> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTeamEventStatusSignalError() instead")
    void getTeamEventStatusSignalE(OAITeam_Event_Status summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTeamEventStatusSignalError(OAITeam_Event_Status summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTeamEventsSignalError() instead")
    void getTeamEventsSignalE(QList<OAIEvent> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTeamEventsSignalError(QList<OAIEvent> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTeamEventsByYearSignalError() instead")
    void getTeamEventsByYearSignalE(QList<OAIEvent> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTeamEventsByYearSignalError(QList<OAIEvent> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTeamEventsByYearKeysSignalError() instead")
    void getTeamEventsByYearKeysSignalE(QList<QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTeamEventsByYearKeysSignalError(QList<QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTeamEventsByYearSimpleSignalError() instead")
    void getTeamEventsByYearSimpleSignalE(QList<OAIEvent_Simple> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTeamEventsByYearSimpleSignalError(QList<OAIEvent_Simple> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTeamEventsKeysSignalError() instead")
    void getTeamEventsKeysSignalE(QList<QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTeamEventsKeysSignalError(QList<QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTeamEventsSimpleSignalError() instead")
    void getTeamEventsSimpleSignalE(QList<OAIEvent_Simple> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTeamEventsSimpleSignalError(QList<OAIEvent_Simple> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTeamEventsStatusesByYearSignalError() instead")
    void getTeamEventsStatusesByYearSignalE(QMap<QString, OAITeam_Event_Status> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTeamEventsStatusesByYearSignalError(QMap<QString, OAITeam_Event_Status> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTeamMatchesByYearSignalError() instead")
    void getTeamMatchesByYearSignalE(QList<OAIMatch> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTeamMatchesByYearSignalError(QList<OAIMatch> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTeamMatchesByYearKeysSignalError() instead")
    void getTeamMatchesByYearKeysSignalE(QList<QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTeamMatchesByYearKeysSignalError(QList<QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTeamMatchesByYearSimpleSignalError() instead")
    void getTeamMatchesByYearSimpleSignalE(QList<OAIMatch_Simple> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTeamMatchesByYearSimpleSignalError(QList<OAIMatch_Simple> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTeamMediaByTagSignalError() instead")
    void getTeamMediaByTagSignalE(QList<OAIMedia> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTeamMediaByTagSignalError(QList<OAIMedia> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTeamMediaByTagYearSignalError() instead")
    void getTeamMediaByTagYearSignalE(QList<OAIMedia> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTeamMediaByTagYearSignalError(QList<OAIMedia> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTeamMediaByYearSignalError() instead")
    void getTeamMediaByYearSignalE(QList<OAIMedia> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTeamMediaByYearSignalError(QList<OAIMedia> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTeamRobotsSignalError() instead")
    void getTeamRobotsSignalE(QList<OAITeam_Robot> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTeamRobotsSignalError(QList<OAITeam_Robot> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTeamSimpleSignalError() instead")
    void getTeamSimpleSignalE(OAITeam_Simple summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTeamSimpleSignalError(OAITeam_Simple summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTeamSocialMediaSignalError() instead")
    void getTeamSocialMediaSignalE(QList<OAIMedia> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTeamSocialMediaSignalError(QList<OAIMedia> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTeamYearsParticipatedSignalError() instead")
    void getTeamYearsParticipatedSignalE(QList<qint32> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTeamYearsParticipatedSignalError(QList<qint32> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTeamsSignalError() instead")
    void getTeamsSignalE(QList<OAITeam> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTeamsSignalError(QList<OAITeam> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTeamsByYearSignalError() instead")
    void getTeamsByYearSignalE(QList<OAITeam> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTeamsByYearSignalError(QList<OAITeam> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTeamsByYearKeysSignalError() instead")
    void getTeamsByYearKeysSignalE(QList<QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTeamsByYearKeysSignalError(QList<QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTeamsByYearSimpleSignalError() instead")
    void getTeamsByYearSimpleSignalE(QList<OAITeam_Simple> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTeamsByYearSimpleSignalError(QList<OAITeam_Simple> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTeamsKeysSignalError() instead")
    void getTeamsKeysSignalE(QList<QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTeamsKeysSignalError(QList<QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTeamsSimpleSignalError() instead")
    void getTeamsSimpleSignalE(QList<OAITeam_Simple> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTeamsSimpleSignalError(QList<OAITeam_Simple> summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getDistrictRankingsSignalErrorFull() instead")
    void getDistrictRankingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDistrictRankingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDistrictTeamsKeysSignalErrorFull() instead")
    void getDistrictTeamsKeysSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDistrictTeamsKeysSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDistrictTeamsSimpleSignalErrorFull() instead")
    void getDistrictTeamsSimpleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDistrictTeamsSimpleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDistrictTeamsSignalErrorFull() instead")
    void getDistrictTeamsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDistrictTeamsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEventTeamsKeysSignalErrorFull() instead")
    void getEventTeamsKeysSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getEventTeamsKeysSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEventTeamsSimpleSignalErrorFull() instead")
    void getEventTeamsSimpleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getEventTeamsSimpleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEventTeamsStatusesSignalErrorFull() instead")
    void getEventTeamsStatusesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getEventTeamsStatusesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEventTeamsSignalErrorFull() instead")
    void getEventTeamsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getEventTeamsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTeamSignalErrorFull() instead")
    void getTeamSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTeamSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTeamAwardsSignalErrorFull() instead")
    void getTeamAwardsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTeamAwardsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTeamAwardsByYearSignalErrorFull() instead")
    void getTeamAwardsByYearSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTeamAwardsByYearSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTeamDistrictsSignalErrorFull() instead")
    void getTeamDistrictsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTeamDistrictsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTeamEventAwardsSignalErrorFull() instead")
    void getTeamEventAwardsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTeamEventAwardsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTeamEventMatchesSignalErrorFull() instead")
    void getTeamEventMatchesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTeamEventMatchesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTeamEventMatchesKeysSignalErrorFull() instead")
    void getTeamEventMatchesKeysSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTeamEventMatchesKeysSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTeamEventMatchesSimpleSignalErrorFull() instead")
    void getTeamEventMatchesSimpleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTeamEventMatchesSimpleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTeamEventStatusSignalErrorFull() instead")
    void getTeamEventStatusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTeamEventStatusSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTeamEventsSignalErrorFull() instead")
    void getTeamEventsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTeamEventsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTeamEventsByYearSignalErrorFull() instead")
    void getTeamEventsByYearSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTeamEventsByYearSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTeamEventsByYearKeysSignalErrorFull() instead")
    void getTeamEventsByYearKeysSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTeamEventsByYearKeysSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTeamEventsByYearSimpleSignalErrorFull() instead")
    void getTeamEventsByYearSimpleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTeamEventsByYearSimpleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTeamEventsKeysSignalErrorFull() instead")
    void getTeamEventsKeysSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTeamEventsKeysSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTeamEventsSimpleSignalErrorFull() instead")
    void getTeamEventsSimpleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTeamEventsSimpleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTeamEventsStatusesByYearSignalErrorFull() instead")
    void getTeamEventsStatusesByYearSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTeamEventsStatusesByYearSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTeamMatchesByYearSignalErrorFull() instead")
    void getTeamMatchesByYearSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTeamMatchesByYearSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTeamMatchesByYearKeysSignalErrorFull() instead")
    void getTeamMatchesByYearKeysSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTeamMatchesByYearKeysSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTeamMatchesByYearSimpleSignalErrorFull() instead")
    void getTeamMatchesByYearSimpleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTeamMatchesByYearSimpleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTeamMediaByTagSignalErrorFull() instead")
    void getTeamMediaByTagSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTeamMediaByTagSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTeamMediaByTagYearSignalErrorFull() instead")
    void getTeamMediaByTagYearSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTeamMediaByTagYearSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTeamMediaByYearSignalErrorFull() instead")
    void getTeamMediaByYearSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTeamMediaByYearSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTeamRobotsSignalErrorFull() instead")
    void getTeamRobotsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTeamRobotsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTeamSimpleSignalErrorFull() instead")
    void getTeamSimpleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTeamSimpleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTeamSocialMediaSignalErrorFull() instead")
    void getTeamSocialMediaSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTeamSocialMediaSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTeamYearsParticipatedSignalErrorFull() instead")
    void getTeamYearsParticipatedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTeamYearsParticipatedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTeamsSignalErrorFull() instead")
    void getTeamsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTeamsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTeamsByYearSignalErrorFull() instead")
    void getTeamsByYearSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTeamsByYearSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTeamsByYearKeysSignalErrorFull() instead")
    void getTeamsByYearKeysSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTeamsByYearKeysSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTeamsByYearSimpleSignalErrorFull() instead")
    void getTeamsByYearSimpleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTeamsByYearSimpleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTeamsKeysSignalErrorFull() instead")
    void getTeamsKeysSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTeamsKeysSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTeamsSimpleSignalErrorFull() instead")
    void getTeamsSimpleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTeamsSimpleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
