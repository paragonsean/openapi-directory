/**
 * The Blue Alliance API v3
 * # Overview    Information and statistics about FIRST Robotics Competition teams and events.   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).
 *
 * The version of the OpenAPI document: 3.8.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMatch_Score_Breakdown_2018_Alliance.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMatch_Score_Breakdown_2018_Alliance::OAIMatch_Score_Breakdown_2018_Alliance(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMatch_Score_Breakdown_2018_Alliance::OAIMatch_Score_Breakdown_2018_Alliance() {
    this->initializeModel();
}

OAIMatch_Score_Breakdown_2018_Alliance::~OAIMatch_Score_Breakdown_2018_Alliance() {}

void OAIMatch_Score_Breakdown_2018_Alliance::initializeModel() {

    m_adjust_points_isSet = false;
    m_adjust_points_isValid = false;

    m_auto_ownership_points_isSet = false;
    m_auto_ownership_points_isValid = false;

    m_auto_points_isSet = false;
    m_auto_points_isValid = false;

    m_auto_quest_ranking_point_isSet = false;
    m_auto_quest_ranking_point_isValid = false;

    m_auto_robot1_isSet = false;
    m_auto_robot1_isValid = false;

    m_auto_robot2_isSet = false;
    m_auto_robot2_isValid = false;

    m_auto_robot3_isSet = false;
    m_auto_robot3_isValid = false;

    m_auto_run_points_isSet = false;
    m_auto_run_points_isValid = false;

    m_auto_scale_ownership_sec_isSet = false;
    m_auto_scale_ownership_sec_isValid = false;

    m_auto_switch_at_zero_isSet = false;
    m_auto_switch_at_zero_isValid = false;

    m_auto_switch_ownership_sec_isSet = false;
    m_auto_switch_ownership_sec_isValid = false;

    m_endgame_points_isSet = false;
    m_endgame_points_isValid = false;

    m_endgame_robot1_isSet = false;
    m_endgame_robot1_isValid = false;

    m_endgame_robot2_isSet = false;
    m_endgame_robot2_isValid = false;

    m_endgame_robot3_isSet = false;
    m_endgame_robot3_isValid = false;

    m_face_the_boss_ranking_point_isSet = false;
    m_face_the_boss_ranking_point_isValid = false;

    m_foul_count_isSet = false;
    m_foul_count_isValid = false;

    m_foul_points_isSet = false;
    m_foul_points_isValid = false;

    m_rp_isSet = false;
    m_rp_isValid = false;

    m_tba_game_data_isSet = false;
    m_tba_game_data_isValid = false;

    m_tech_foul_count_isSet = false;
    m_tech_foul_count_isValid = false;

    m_teleop_ownership_points_isSet = false;
    m_teleop_ownership_points_isValid = false;

    m_teleop_points_isSet = false;
    m_teleop_points_isValid = false;

    m_teleop_scale_boost_sec_isSet = false;
    m_teleop_scale_boost_sec_isValid = false;

    m_teleop_scale_force_sec_isSet = false;
    m_teleop_scale_force_sec_isValid = false;

    m_teleop_scale_ownership_sec_isSet = false;
    m_teleop_scale_ownership_sec_isValid = false;

    m_teleop_switch_boost_sec_isSet = false;
    m_teleop_switch_boost_sec_isValid = false;

    m_teleop_switch_force_sec_isSet = false;
    m_teleop_switch_force_sec_isValid = false;

    m_teleop_switch_ownership_sec_isSet = false;
    m_teleop_switch_ownership_sec_isValid = false;

    m_total_points_isSet = false;
    m_total_points_isValid = false;

    m_vault_boost_played_isSet = false;
    m_vault_boost_played_isValid = false;

    m_vault_boost_total_isSet = false;
    m_vault_boost_total_isValid = false;

    m_vault_force_played_isSet = false;
    m_vault_force_played_isValid = false;

    m_vault_force_total_isSet = false;
    m_vault_force_total_isValid = false;

    m_vault_levitate_played_isSet = false;
    m_vault_levitate_played_isValid = false;

    m_vault_levitate_total_isSet = false;
    m_vault_levitate_total_isValid = false;

    m_vault_points_isSet = false;
    m_vault_points_isValid = false;
}

void OAIMatch_Score_Breakdown_2018_Alliance::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMatch_Score_Breakdown_2018_Alliance::fromJsonObject(QJsonObject json) {

    m_adjust_points_isValid = ::OpenAPI::fromJsonValue(m_adjust_points, json[QString("adjustPoints")]);
    m_adjust_points_isSet = !json[QString("adjustPoints")].isNull() && m_adjust_points_isValid;

    m_auto_ownership_points_isValid = ::OpenAPI::fromJsonValue(m_auto_ownership_points, json[QString("autoOwnershipPoints")]);
    m_auto_ownership_points_isSet = !json[QString("autoOwnershipPoints")].isNull() && m_auto_ownership_points_isValid;

    m_auto_points_isValid = ::OpenAPI::fromJsonValue(m_auto_points, json[QString("autoPoints")]);
    m_auto_points_isSet = !json[QString("autoPoints")].isNull() && m_auto_points_isValid;

    m_auto_quest_ranking_point_isValid = ::OpenAPI::fromJsonValue(m_auto_quest_ranking_point, json[QString("autoQuestRankingPoint")]);
    m_auto_quest_ranking_point_isSet = !json[QString("autoQuestRankingPoint")].isNull() && m_auto_quest_ranking_point_isValid;

    m_auto_robot1_isValid = ::OpenAPI::fromJsonValue(m_auto_robot1, json[QString("autoRobot1")]);
    m_auto_robot1_isSet = !json[QString("autoRobot1")].isNull() && m_auto_robot1_isValid;

    m_auto_robot2_isValid = ::OpenAPI::fromJsonValue(m_auto_robot2, json[QString("autoRobot2")]);
    m_auto_robot2_isSet = !json[QString("autoRobot2")].isNull() && m_auto_robot2_isValid;

    m_auto_robot3_isValid = ::OpenAPI::fromJsonValue(m_auto_robot3, json[QString("autoRobot3")]);
    m_auto_robot3_isSet = !json[QString("autoRobot3")].isNull() && m_auto_robot3_isValid;

    m_auto_run_points_isValid = ::OpenAPI::fromJsonValue(m_auto_run_points, json[QString("autoRunPoints")]);
    m_auto_run_points_isSet = !json[QString("autoRunPoints")].isNull() && m_auto_run_points_isValid;

    m_auto_scale_ownership_sec_isValid = ::OpenAPI::fromJsonValue(m_auto_scale_ownership_sec, json[QString("autoScaleOwnershipSec")]);
    m_auto_scale_ownership_sec_isSet = !json[QString("autoScaleOwnershipSec")].isNull() && m_auto_scale_ownership_sec_isValid;

    m_auto_switch_at_zero_isValid = ::OpenAPI::fromJsonValue(m_auto_switch_at_zero, json[QString("autoSwitchAtZero")]);
    m_auto_switch_at_zero_isSet = !json[QString("autoSwitchAtZero")].isNull() && m_auto_switch_at_zero_isValid;

    m_auto_switch_ownership_sec_isValid = ::OpenAPI::fromJsonValue(m_auto_switch_ownership_sec, json[QString("autoSwitchOwnershipSec")]);
    m_auto_switch_ownership_sec_isSet = !json[QString("autoSwitchOwnershipSec")].isNull() && m_auto_switch_ownership_sec_isValid;

    m_endgame_points_isValid = ::OpenAPI::fromJsonValue(m_endgame_points, json[QString("endgamePoints")]);
    m_endgame_points_isSet = !json[QString("endgamePoints")].isNull() && m_endgame_points_isValid;

    m_endgame_robot1_isValid = ::OpenAPI::fromJsonValue(m_endgame_robot1, json[QString("endgameRobot1")]);
    m_endgame_robot1_isSet = !json[QString("endgameRobot1")].isNull() && m_endgame_robot1_isValid;

    m_endgame_robot2_isValid = ::OpenAPI::fromJsonValue(m_endgame_robot2, json[QString("endgameRobot2")]);
    m_endgame_robot2_isSet = !json[QString("endgameRobot2")].isNull() && m_endgame_robot2_isValid;

    m_endgame_robot3_isValid = ::OpenAPI::fromJsonValue(m_endgame_robot3, json[QString("endgameRobot3")]);
    m_endgame_robot3_isSet = !json[QString("endgameRobot3")].isNull() && m_endgame_robot3_isValid;

    m_face_the_boss_ranking_point_isValid = ::OpenAPI::fromJsonValue(m_face_the_boss_ranking_point, json[QString("faceTheBossRankingPoint")]);
    m_face_the_boss_ranking_point_isSet = !json[QString("faceTheBossRankingPoint")].isNull() && m_face_the_boss_ranking_point_isValid;

    m_foul_count_isValid = ::OpenAPI::fromJsonValue(m_foul_count, json[QString("foulCount")]);
    m_foul_count_isSet = !json[QString("foulCount")].isNull() && m_foul_count_isValid;

    m_foul_points_isValid = ::OpenAPI::fromJsonValue(m_foul_points, json[QString("foulPoints")]);
    m_foul_points_isSet = !json[QString("foulPoints")].isNull() && m_foul_points_isValid;

    m_rp_isValid = ::OpenAPI::fromJsonValue(m_rp, json[QString("rp")]);
    m_rp_isSet = !json[QString("rp")].isNull() && m_rp_isValid;

    m_tba_game_data_isValid = ::OpenAPI::fromJsonValue(m_tba_game_data, json[QString("tba_gameData")]);
    m_tba_game_data_isSet = !json[QString("tba_gameData")].isNull() && m_tba_game_data_isValid;

    m_tech_foul_count_isValid = ::OpenAPI::fromJsonValue(m_tech_foul_count, json[QString("techFoulCount")]);
    m_tech_foul_count_isSet = !json[QString("techFoulCount")].isNull() && m_tech_foul_count_isValid;

    m_teleop_ownership_points_isValid = ::OpenAPI::fromJsonValue(m_teleop_ownership_points, json[QString("teleopOwnershipPoints")]);
    m_teleop_ownership_points_isSet = !json[QString("teleopOwnershipPoints")].isNull() && m_teleop_ownership_points_isValid;

    m_teleop_points_isValid = ::OpenAPI::fromJsonValue(m_teleop_points, json[QString("teleopPoints")]);
    m_teleop_points_isSet = !json[QString("teleopPoints")].isNull() && m_teleop_points_isValid;

    m_teleop_scale_boost_sec_isValid = ::OpenAPI::fromJsonValue(m_teleop_scale_boost_sec, json[QString("teleopScaleBoostSec")]);
    m_teleop_scale_boost_sec_isSet = !json[QString("teleopScaleBoostSec")].isNull() && m_teleop_scale_boost_sec_isValid;

    m_teleop_scale_force_sec_isValid = ::OpenAPI::fromJsonValue(m_teleop_scale_force_sec, json[QString("teleopScaleForceSec")]);
    m_teleop_scale_force_sec_isSet = !json[QString("teleopScaleForceSec")].isNull() && m_teleop_scale_force_sec_isValid;

    m_teleop_scale_ownership_sec_isValid = ::OpenAPI::fromJsonValue(m_teleop_scale_ownership_sec, json[QString("teleopScaleOwnershipSec")]);
    m_teleop_scale_ownership_sec_isSet = !json[QString("teleopScaleOwnershipSec")].isNull() && m_teleop_scale_ownership_sec_isValid;

    m_teleop_switch_boost_sec_isValid = ::OpenAPI::fromJsonValue(m_teleop_switch_boost_sec, json[QString("teleopSwitchBoostSec")]);
    m_teleop_switch_boost_sec_isSet = !json[QString("teleopSwitchBoostSec")].isNull() && m_teleop_switch_boost_sec_isValid;

    m_teleop_switch_force_sec_isValid = ::OpenAPI::fromJsonValue(m_teleop_switch_force_sec, json[QString("teleopSwitchForceSec")]);
    m_teleop_switch_force_sec_isSet = !json[QString("teleopSwitchForceSec")].isNull() && m_teleop_switch_force_sec_isValid;

    m_teleop_switch_ownership_sec_isValid = ::OpenAPI::fromJsonValue(m_teleop_switch_ownership_sec, json[QString("teleopSwitchOwnershipSec")]);
    m_teleop_switch_ownership_sec_isSet = !json[QString("teleopSwitchOwnershipSec")].isNull() && m_teleop_switch_ownership_sec_isValid;

    m_total_points_isValid = ::OpenAPI::fromJsonValue(m_total_points, json[QString("totalPoints")]);
    m_total_points_isSet = !json[QString("totalPoints")].isNull() && m_total_points_isValid;

    m_vault_boost_played_isValid = ::OpenAPI::fromJsonValue(m_vault_boost_played, json[QString("vaultBoostPlayed")]);
    m_vault_boost_played_isSet = !json[QString("vaultBoostPlayed")].isNull() && m_vault_boost_played_isValid;

    m_vault_boost_total_isValid = ::OpenAPI::fromJsonValue(m_vault_boost_total, json[QString("vaultBoostTotal")]);
    m_vault_boost_total_isSet = !json[QString("vaultBoostTotal")].isNull() && m_vault_boost_total_isValid;

    m_vault_force_played_isValid = ::OpenAPI::fromJsonValue(m_vault_force_played, json[QString("vaultForcePlayed")]);
    m_vault_force_played_isSet = !json[QString("vaultForcePlayed")].isNull() && m_vault_force_played_isValid;

    m_vault_force_total_isValid = ::OpenAPI::fromJsonValue(m_vault_force_total, json[QString("vaultForceTotal")]);
    m_vault_force_total_isSet = !json[QString("vaultForceTotal")].isNull() && m_vault_force_total_isValid;

    m_vault_levitate_played_isValid = ::OpenAPI::fromJsonValue(m_vault_levitate_played, json[QString("vaultLevitatePlayed")]);
    m_vault_levitate_played_isSet = !json[QString("vaultLevitatePlayed")].isNull() && m_vault_levitate_played_isValid;

    m_vault_levitate_total_isValid = ::OpenAPI::fromJsonValue(m_vault_levitate_total, json[QString("vaultLevitateTotal")]);
    m_vault_levitate_total_isSet = !json[QString("vaultLevitateTotal")].isNull() && m_vault_levitate_total_isValid;

    m_vault_points_isValid = ::OpenAPI::fromJsonValue(m_vault_points, json[QString("vaultPoints")]);
    m_vault_points_isSet = !json[QString("vaultPoints")].isNull() && m_vault_points_isValid;
}

QString OAIMatch_Score_Breakdown_2018_Alliance::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMatch_Score_Breakdown_2018_Alliance::asJsonObject() const {
    QJsonObject obj;
    if (m_adjust_points_isSet) {
        obj.insert(QString("adjustPoints"), ::OpenAPI::toJsonValue(m_adjust_points));
    }
    if (m_auto_ownership_points_isSet) {
        obj.insert(QString("autoOwnershipPoints"), ::OpenAPI::toJsonValue(m_auto_ownership_points));
    }
    if (m_auto_points_isSet) {
        obj.insert(QString("autoPoints"), ::OpenAPI::toJsonValue(m_auto_points));
    }
    if (m_auto_quest_ranking_point_isSet) {
        obj.insert(QString("autoQuestRankingPoint"), ::OpenAPI::toJsonValue(m_auto_quest_ranking_point));
    }
    if (m_auto_robot1_isSet) {
        obj.insert(QString("autoRobot1"), ::OpenAPI::toJsonValue(m_auto_robot1));
    }
    if (m_auto_robot2_isSet) {
        obj.insert(QString("autoRobot2"), ::OpenAPI::toJsonValue(m_auto_robot2));
    }
    if (m_auto_robot3_isSet) {
        obj.insert(QString("autoRobot3"), ::OpenAPI::toJsonValue(m_auto_robot3));
    }
    if (m_auto_run_points_isSet) {
        obj.insert(QString("autoRunPoints"), ::OpenAPI::toJsonValue(m_auto_run_points));
    }
    if (m_auto_scale_ownership_sec_isSet) {
        obj.insert(QString("autoScaleOwnershipSec"), ::OpenAPI::toJsonValue(m_auto_scale_ownership_sec));
    }
    if (m_auto_switch_at_zero_isSet) {
        obj.insert(QString("autoSwitchAtZero"), ::OpenAPI::toJsonValue(m_auto_switch_at_zero));
    }
    if (m_auto_switch_ownership_sec_isSet) {
        obj.insert(QString("autoSwitchOwnershipSec"), ::OpenAPI::toJsonValue(m_auto_switch_ownership_sec));
    }
    if (m_endgame_points_isSet) {
        obj.insert(QString("endgamePoints"), ::OpenAPI::toJsonValue(m_endgame_points));
    }
    if (m_endgame_robot1_isSet) {
        obj.insert(QString("endgameRobot1"), ::OpenAPI::toJsonValue(m_endgame_robot1));
    }
    if (m_endgame_robot2_isSet) {
        obj.insert(QString("endgameRobot2"), ::OpenAPI::toJsonValue(m_endgame_robot2));
    }
    if (m_endgame_robot3_isSet) {
        obj.insert(QString("endgameRobot3"), ::OpenAPI::toJsonValue(m_endgame_robot3));
    }
    if (m_face_the_boss_ranking_point_isSet) {
        obj.insert(QString("faceTheBossRankingPoint"), ::OpenAPI::toJsonValue(m_face_the_boss_ranking_point));
    }
    if (m_foul_count_isSet) {
        obj.insert(QString("foulCount"), ::OpenAPI::toJsonValue(m_foul_count));
    }
    if (m_foul_points_isSet) {
        obj.insert(QString("foulPoints"), ::OpenAPI::toJsonValue(m_foul_points));
    }
    if (m_rp_isSet) {
        obj.insert(QString("rp"), ::OpenAPI::toJsonValue(m_rp));
    }
    if (m_tba_game_data_isSet) {
        obj.insert(QString("tba_gameData"), ::OpenAPI::toJsonValue(m_tba_game_data));
    }
    if (m_tech_foul_count_isSet) {
        obj.insert(QString("techFoulCount"), ::OpenAPI::toJsonValue(m_tech_foul_count));
    }
    if (m_teleop_ownership_points_isSet) {
        obj.insert(QString("teleopOwnershipPoints"), ::OpenAPI::toJsonValue(m_teleop_ownership_points));
    }
    if (m_teleop_points_isSet) {
        obj.insert(QString("teleopPoints"), ::OpenAPI::toJsonValue(m_teleop_points));
    }
    if (m_teleop_scale_boost_sec_isSet) {
        obj.insert(QString("teleopScaleBoostSec"), ::OpenAPI::toJsonValue(m_teleop_scale_boost_sec));
    }
    if (m_teleop_scale_force_sec_isSet) {
        obj.insert(QString("teleopScaleForceSec"), ::OpenAPI::toJsonValue(m_teleop_scale_force_sec));
    }
    if (m_teleop_scale_ownership_sec_isSet) {
        obj.insert(QString("teleopScaleOwnershipSec"), ::OpenAPI::toJsonValue(m_teleop_scale_ownership_sec));
    }
    if (m_teleop_switch_boost_sec_isSet) {
        obj.insert(QString("teleopSwitchBoostSec"), ::OpenAPI::toJsonValue(m_teleop_switch_boost_sec));
    }
    if (m_teleop_switch_force_sec_isSet) {
        obj.insert(QString("teleopSwitchForceSec"), ::OpenAPI::toJsonValue(m_teleop_switch_force_sec));
    }
    if (m_teleop_switch_ownership_sec_isSet) {
        obj.insert(QString("teleopSwitchOwnershipSec"), ::OpenAPI::toJsonValue(m_teleop_switch_ownership_sec));
    }
    if (m_total_points_isSet) {
        obj.insert(QString("totalPoints"), ::OpenAPI::toJsonValue(m_total_points));
    }
    if (m_vault_boost_played_isSet) {
        obj.insert(QString("vaultBoostPlayed"), ::OpenAPI::toJsonValue(m_vault_boost_played));
    }
    if (m_vault_boost_total_isSet) {
        obj.insert(QString("vaultBoostTotal"), ::OpenAPI::toJsonValue(m_vault_boost_total));
    }
    if (m_vault_force_played_isSet) {
        obj.insert(QString("vaultForcePlayed"), ::OpenAPI::toJsonValue(m_vault_force_played));
    }
    if (m_vault_force_total_isSet) {
        obj.insert(QString("vaultForceTotal"), ::OpenAPI::toJsonValue(m_vault_force_total));
    }
    if (m_vault_levitate_played_isSet) {
        obj.insert(QString("vaultLevitatePlayed"), ::OpenAPI::toJsonValue(m_vault_levitate_played));
    }
    if (m_vault_levitate_total_isSet) {
        obj.insert(QString("vaultLevitateTotal"), ::OpenAPI::toJsonValue(m_vault_levitate_total));
    }
    if (m_vault_points_isSet) {
        obj.insert(QString("vaultPoints"), ::OpenAPI::toJsonValue(m_vault_points));
    }
    return obj;
}

qint32 OAIMatch_Score_Breakdown_2018_Alliance::getAdjustPoints() const {
    return m_adjust_points;
}
void OAIMatch_Score_Breakdown_2018_Alliance::setAdjustPoints(const qint32 &adjust_points) {
    m_adjust_points = adjust_points;
    m_adjust_points_isSet = true;
}

bool OAIMatch_Score_Breakdown_2018_Alliance::is_adjust_points_Set() const{
    return m_adjust_points_isSet;
}

bool OAIMatch_Score_Breakdown_2018_Alliance::is_adjust_points_Valid() const{
    return m_adjust_points_isValid;
}

qint32 OAIMatch_Score_Breakdown_2018_Alliance::getAutoOwnershipPoints() const {
    return m_auto_ownership_points;
}
void OAIMatch_Score_Breakdown_2018_Alliance::setAutoOwnershipPoints(const qint32 &auto_ownership_points) {
    m_auto_ownership_points = auto_ownership_points;
    m_auto_ownership_points_isSet = true;
}

bool OAIMatch_Score_Breakdown_2018_Alliance::is_auto_ownership_points_Set() const{
    return m_auto_ownership_points_isSet;
}

bool OAIMatch_Score_Breakdown_2018_Alliance::is_auto_ownership_points_Valid() const{
    return m_auto_ownership_points_isValid;
}

qint32 OAIMatch_Score_Breakdown_2018_Alliance::getAutoPoints() const {
    return m_auto_points;
}
void OAIMatch_Score_Breakdown_2018_Alliance::setAutoPoints(const qint32 &auto_points) {
    m_auto_points = auto_points;
    m_auto_points_isSet = true;
}

bool OAIMatch_Score_Breakdown_2018_Alliance::is_auto_points_Set() const{
    return m_auto_points_isSet;
}

bool OAIMatch_Score_Breakdown_2018_Alliance::is_auto_points_Valid() const{
    return m_auto_points_isValid;
}

bool OAIMatch_Score_Breakdown_2018_Alliance::isAutoQuestRankingPoint() const {
    return m_auto_quest_ranking_point;
}
void OAIMatch_Score_Breakdown_2018_Alliance::setAutoQuestRankingPoint(const bool &auto_quest_ranking_point) {
    m_auto_quest_ranking_point = auto_quest_ranking_point;
    m_auto_quest_ranking_point_isSet = true;
}

bool OAIMatch_Score_Breakdown_2018_Alliance::is_auto_quest_ranking_point_Set() const{
    return m_auto_quest_ranking_point_isSet;
}

bool OAIMatch_Score_Breakdown_2018_Alliance::is_auto_quest_ranking_point_Valid() const{
    return m_auto_quest_ranking_point_isValid;
}

QString OAIMatch_Score_Breakdown_2018_Alliance::getAutoRobot1() const {
    return m_auto_robot1;
}
void OAIMatch_Score_Breakdown_2018_Alliance::setAutoRobot1(const QString &auto_robot1) {
    m_auto_robot1 = auto_robot1;
    m_auto_robot1_isSet = true;
}

bool OAIMatch_Score_Breakdown_2018_Alliance::is_auto_robot1_Set() const{
    return m_auto_robot1_isSet;
}

bool OAIMatch_Score_Breakdown_2018_Alliance::is_auto_robot1_Valid() const{
    return m_auto_robot1_isValid;
}

QString OAIMatch_Score_Breakdown_2018_Alliance::getAutoRobot2() const {
    return m_auto_robot2;
}
void OAIMatch_Score_Breakdown_2018_Alliance::setAutoRobot2(const QString &auto_robot2) {
    m_auto_robot2 = auto_robot2;
    m_auto_robot2_isSet = true;
}

bool OAIMatch_Score_Breakdown_2018_Alliance::is_auto_robot2_Set() const{
    return m_auto_robot2_isSet;
}

bool OAIMatch_Score_Breakdown_2018_Alliance::is_auto_robot2_Valid() const{
    return m_auto_robot2_isValid;
}

QString OAIMatch_Score_Breakdown_2018_Alliance::getAutoRobot3() const {
    return m_auto_robot3;
}
void OAIMatch_Score_Breakdown_2018_Alliance::setAutoRobot3(const QString &auto_robot3) {
    m_auto_robot3 = auto_robot3;
    m_auto_robot3_isSet = true;
}

bool OAIMatch_Score_Breakdown_2018_Alliance::is_auto_robot3_Set() const{
    return m_auto_robot3_isSet;
}

bool OAIMatch_Score_Breakdown_2018_Alliance::is_auto_robot3_Valid() const{
    return m_auto_robot3_isValid;
}

qint32 OAIMatch_Score_Breakdown_2018_Alliance::getAutoRunPoints() const {
    return m_auto_run_points;
}
void OAIMatch_Score_Breakdown_2018_Alliance::setAutoRunPoints(const qint32 &auto_run_points) {
    m_auto_run_points = auto_run_points;
    m_auto_run_points_isSet = true;
}

bool OAIMatch_Score_Breakdown_2018_Alliance::is_auto_run_points_Set() const{
    return m_auto_run_points_isSet;
}

bool OAIMatch_Score_Breakdown_2018_Alliance::is_auto_run_points_Valid() const{
    return m_auto_run_points_isValid;
}

qint32 OAIMatch_Score_Breakdown_2018_Alliance::getAutoScaleOwnershipSec() const {
    return m_auto_scale_ownership_sec;
}
void OAIMatch_Score_Breakdown_2018_Alliance::setAutoScaleOwnershipSec(const qint32 &auto_scale_ownership_sec) {
    m_auto_scale_ownership_sec = auto_scale_ownership_sec;
    m_auto_scale_ownership_sec_isSet = true;
}

bool OAIMatch_Score_Breakdown_2018_Alliance::is_auto_scale_ownership_sec_Set() const{
    return m_auto_scale_ownership_sec_isSet;
}

bool OAIMatch_Score_Breakdown_2018_Alliance::is_auto_scale_ownership_sec_Valid() const{
    return m_auto_scale_ownership_sec_isValid;
}

bool OAIMatch_Score_Breakdown_2018_Alliance::isAutoSwitchAtZero() const {
    return m_auto_switch_at_zero;
}
void OAIMatch_Score_Breakdown_2018_Alliance::setAutoSwitchAtZero(const bool &auto_switch_at_zero) {
    m_auto_switch_at_zero = auto_switch_at_zero;
    m_auto_switch_at_zero_isSet = true;
}

bool OAIMatch_Score_Breakdown_2018_Alliance::is_auto_switch_at_zero_Set() const{
    return m_auto_switch_at_zero_isSet;
}

bool OAIMatch_Score_Breakdown_2018_Alliance::is_auto_switch_at_zero_Valid() const{
    return m_auto_switch_at_zero_isValid;
}

qint32 OAIMatch_Score_Breakdown_2018_Alliance::getAutoSwitchOwnershipSec() const {
    return m_auto_switch_ownership_sec;
}
void OAIMatch_Score_Breakdown_2018_Alliance::setAutoSwitchOwnershipSec(const qint32 &auto_switch_ownership_sec) {
    m_auto_switch_ownership_sec = auto_switch_ownership_sec;
    m_auto_switch_ownership_sec_isSet = true;
}

bool OAIMatch_Score_Breakdown_2018_Alliance::is_auto_switch_ownership_sec_Set() const{
    return m_auto_switch_ownership_sec_isSet;
}

bool OAIMatch_Score_Breakdown_2018_Alliance::is_auto_switch_ownership_sec_Valid() const{
    return m_auto_switch_ownership_sec_isValid;
}

qint32 OAIMatch_Score_Breakdown_2018_Alliance::getEndgamePoints() const {
    return m_endgame_points;
}
void OAIMatch_Score_Breakdown_2018_Alliance::setEndgamePoints(const qint32 &endgame_points) {
    m_endgame_points = endgame_points;
    m_endgame_points_isSet = true;
}

bool OAIMatch_Score_Breakdown_2018_Alliance::is_endgame_points_Set() const{
    return m_endgame_points_isSet;
}

bool OAIMatch_Score_Breakdown_2018_Alliance::is_endgame_points_Valid() const{
    return m_endgame_points_isValid;
}

QString OAIMatch_Score_Breakdown_2018_Alliance::getEndgameRobot1() const {
    return m_endgame_robot1;
}
void OAIMatch_Score_Breakdown_2018_Alliance::setEndgameRobot1(const QString &endgame_robot1) {
    m_endgame_robot1 = endgame_robot1;
    m_endgame_robot1_isSet = true;
}

bool OAIMatch_Score_Breakdown_2018_Alliance::is_endgame_robot1_Set() const{
    return m_endgame_robot1_isSet;
}

bool OAIMatch_Score_Breakdown_2018_Alliance::is_endgame_robot1_Valid() const{
    return m_endgame_robot1_isValid;
}

QString OAIMatch_Score_Breakdown_2018_Alliance::getEndgameRobot2() const {
    return m_endgame_robot2;
}
void OAIMatch_Score_Breakdown_2018_Alliance::setEndgameRobot2(const QString &endgame_robot2) {
    m_endgame_robot2 = endgame_robot2;
    m_endgame_robot2_isSet = true;
}

bool OAIMatch_Score_Breakdown_2018_Alliance::is_endgame_robot2_Set() const{
    return m_endgame_robot2_isSet;
}

bool OAIMatch_Score_Breakdown_2018_Alliance::is_endgame_robot2_Valid() const{
    return m_endgame_robot2_isValid;
}

QString OAIMatch_Score_Breakdown_2018_Alliance::getEndgameRobot3() const {
    return m_endgame_robot3;
}
void OAIMatch_Score_Breakdown_2018_Alliance::setEndgameRobot3(const QString &endgame_robot3) {
    m_endgame_robot3 = endgame_robot3;
    m_endgame_robot3_isSet = true;
}

bool OAIMatch_Score_Breakdown_2018_Alliance::is_endgame_robot3_Set() const{
    return m_endgame_robot3_isSet;
}

bool OAIMatch_Score_Breakdown_2018_Alliance::is_endgame_robot3_Valid() const{
    return m_endgame_robot3_isValid;
}

bool OAIMatch_Score_Breakdown_2018_Alliance::isFaceTheBossRankingPoint() const {
    return m_face_the_boss_ranking_point;
}
void OAIMatch_Score_Breakdown_2018_Alliance::setFaceTheBossRankingPoint(const bool &face_the_boss_ranking_point) {
    m_face_the_boss_ranking_point = face_the_boss_ranking_point;
    m_face_the_boss_ranking_point_isSet = true;
}

bool OAIMatch_Score_Breakdown_2018_Alliance::is_face_the_boss_ranking_point_Set() const{
    return m_face_the_boss_ranking_point_isSet;
}

bool OAIMatch_Score_Breakdown_2018_Alliance::is_face_the_boss_ranking_point_Valid() const{
    return m_face_the_boss_ranking_point_isValid;
}

qint32 OAIMatch_Score_Breakdown_2018_Alliance::getFoulCount() const {
    return m_foul_count;
}
void OAIMatch_Score_Breakdown_2018_Alliance::setFoulCount(const qint32 &foul_count) {
    m_foul_count = foul_count;
    m_foul_count_isSet = true;
}

bool OAIMatch_Score_Breakdown_2018_Alliance::is_foul_count_Set() const{
    return m_foul_count_isSet;
}

bool OAIMatch_Score_Breakdown_2018_Alliance::is_foul_count_Valid() const{
    return m_foul_count_isValid;
}

qint32 OAIMatch_Score_Breakdown_2018_Alliance::getFoulPoints() const {
    return m_foul_points;
}
void OAIMatch_Score_Breakdown_2018_Alliance::setFoulPoints(const qint32 &foul_points) {
    m_foul_points = foul_points;
    m_foul_points_isSet = true;
}

bool OAIMatch_Score_Breakdown_2018_Alliance::is_foul_points_Set() const{
    return m_foul_points_isSet;
}

bool OAIMatch_Score_Breakdown_2018_Alliance::is_foul_points_Valid() const{
    return m_foul_points_isValid;
}

qint32 OAIMatch_Score_Breakdown_2018_Alliance::getRp() const {
    return m_rp;
}
void OAIMatch_Score_Breakdown_2018_Alliance::setRp(const qint32 &rp) {
    m_rp = rp;
    m_rp_isSet = true;
}

bool OAIMatch_Score_Breakdown_2018_Alliance::is_rp_Set() const{
    return m_rp_isSet;
}

bool OAIMatch_Score_Breakdown_2018_Alliance::is_rp_Valid() const{
    return m_rp_isValid;
}

QString OAIMatch_Score_Breakdown_2018_Alliance::getTbaGameData() const {
    return m_tba_game_data;
}
void OAIMatch_Score_Breakdown_2018_Alliance::setTbaGameData(const QString &tba_game_data) {
    m_tba_game_data = tba_game_data;
    m_tba_game_data_isSet = true;
}

bool OAIMatch_Score_Breakdown_2018_Alliance::is_tba_game_data_Set() const{
    return m_tba_game_data_isSet;
}

bool OAIMatch_Score_Breakdown_2018_Alliance::is_tba_game_data_Valid() const{
    return m_tba_game_data_isValid;
}

qint32 OAIMatch_Score_Breakdown_2018_Alliance::getTechFoulCount() const {
    return m_tech_foul_count;
}
void OAIMatch_Score_Breakdown_2018_Alliance::setTechFoulCount(const qint32 &tech_foul_count) {
    m_tech_foul_count = tech_foul_count;
    m_tech_foul_count_isSet = true;
}

bool OAIMatch_Score_Breakdown_2018_Alliance::is_tech_foul_count_Set() const{
    return m_tech_foul_count_isSet;
}

bool OAIMatch_Score_Breakdown_2018_Alliance::is_tech_foul_count_Valid() const{
    return m_tech_foul_count_isValid;
}

qint32 OAIMatch_Score_Breakdown_2018_Alliance::getTeleopOwnershipPoints() const {
    return m_teleop_ownership_points;
}
void OAIMatch_Score_Breakdown_2018_Alliance::setTeleopOwnershipPoints(const qint32 &teleop_ownership_points) {
    m_teleop_ownership_points = teleop_ownership_points;
    m_teleop_ownership_points_isSet = true;
}

bool OAIMatch_Score_Breakdown_2018_Alliance::is_teleop_ownership_points_Set() const{
    return m_teleop_ownership_points_isSet;
}

bool OAIMatch_Score_Breakdown_2018_Alliance::is_teleop_ownership_points_Valid() const{
    return m_teleop_ownership_points_isValid;
}

qint32 OAIMatch_Score_Breakdown_2018_Alliance::getTeleopPoints() const {
    return m_teleop_points;
}
void OAIMatch_Score_Breakdown_2018_Alliance::setTeleopPoints(const qint32 &teleop_points) {
    m_teleop_points = teleop_points;
    m_teleop_points_isSet = true;
}

bool OAIMatch_Score_Breakdown_2018_Alliance::is_teleop_points_Set() const{
    return m_teleop_points_isSet;
}

bool OAIMatch_Score_Breakdown_2018_Alliance::is_teleop_points_Valid() const{
    return m_teleop_points_isValid;
}

qint32 OAIMatch_Score_Breakdown_2018_Alliance::getTeleopScaleBoostSec() const {
    return m_teleop_scale_boost_sec;
}
void OAIMatch_Score_Breakdown_2018_Alliance::setTeleopScaleBoostSec(const qint32 &teleop_scale_boost_sec) {
    m_teleop_scale_boost_sec = teleop_scale_boost_sec;
    m_teleop_scale_boost_sec_isSet = true;
}

bool OAIMatch_Score_Breakdown_2018_Alliance::is_teleop_scale_boost_sec_Set() const{
    return m_teleop_scale_boost_sec_isSet;
}

bool OAIMatch_Score_Breakdown_2018_Alliance::is_teleop_scale_boost_sec_Valid() const{
    return m_teleop_scale_boost_sec_isValid;
}

qint32 OAIMatch_Score_Breakdown_2018_Alliance::getTeleopScaleForceSec() const {
    return m_teleop_scale_force_sec;
}
void OAIMatch_Score_Breakdown_2018_Alliance::setTeleopScaleForceSec(const qint32 &teleop_scale_force_sec) {
    m_teleop_scale_force_sec = teleop_scale_force_sec;
    m_teleop_scale_force_sec_isSet = true;
}

bool OAIMatch_Score_Breakdown_2018_Alliance::is_teleop_scale_force_sec_Set() const{
    return m_teleop_scale_force_sec_isSet;
}

bool OAIMatch_Score_Breakdown_2018_Alliance::is_teleop_scale_force_sec_Valid() const{
    return m_teleop_scale_force_sec_isValid;
}

qint32 OAIMatch_Score_Breakdown_2018_Alliance::getTeleopScaleOwnershipSec() const {
    return m_teleop_scale_ownership_sec;
}
void OAIMatch_Score_Breakdown_2018_Alliance::setTeleopScaleOwnershipSec(const qint32 &teleop_scale_ownership_sec) {
    m_teleop_scale_ownership_sec = teleop_scale_ownership_sec;
    m_teleop_scale_ownership_sec_isSet = true;
}

bool OAIMatch_Score_Breakdown_2018_Alliance::is_teleop_scale_ownership_sec_Set() const{
    return m_teleop_scale_ownership_sec_isSet;
}

bool OAIMatch_Score_Breakdown_2018_Alliance::is_teleop_scale_ownership_sec_Valid() const{
    return m_teleop_scale_ownership_sec_isValid;
}

qint32 OAIMatch_Score_Breakdown_2018_Alliance::getTeleopSwitchBoostSec() const {
    return m_teleop_switch_boost_sec;
}
void OAIMatch_Score_Breakdown_2018_Alliance::setTeleopSwitchBoostSec(const qint32 &teleop_switch_boost_sec) {
    m_teleop_switch_boost_sec = teleop_switch_boost_sec;
    m_teleop_switch_boost_sec_isSet = true;
}

bool OAIMatch_Score_Breakdown_2018_Alliance::is_teleop_switch_boost_sec_Set() const{
    return m_teleop_switch_boost_sec_isSet;
}

bool OAIMatch_Score_Breakdown_2018_Alliance::is_teleop_switch_boost_sec_Valid() const{
    return m_teleop_switch_boost_sec_isValid;
}

qint32 OAIMatch_Score_Breakdown_2018_Alliance::getTeleopSwitchForceSec() const {
    return m_teleop_switch_force_sec;
}
void OAIMatch_Score_Breakdown_2018_Alliance::setTeleopSwitchForceSec(const qint32 &teleop_switch_force_sec) {
    m_teleop_switch_force_sec = teleop_switch_force_sec;
    m_teleop_switch_force_sec_isSet = true;
}

bool OAIMatch_Score_Breakdown_2018_Alliance::is_teleop_switch_force_sec_Set() const{
    return m_teleop_switch_force_sec_isSet;
}

bool OAIMatch_Score_Breakdown_2018_Alliance::is_teleop_switch_force_sec_Valid() const{
    return m_teleop_switch_force_sec_isValid;
}

qint32 OAIMatch_Score_Breakdown_2018_Alliance::getTeleopSwitchOwnershipSec() const {
    return m_teleop_switch_ownership_sec;
}
void OAIMatch_Score_Breakdown_2018_Alliance::setTeleopSwitchOwnershipSec(const qint32 &teleop_switch_ownership_sec) {
    m_teleop_switch_ownership_sec = teleop_switch_ownership_sec;
    m_teleop_switch_ownership_sec_isSet = true;
}

bool OAIMatch_Score_Breakdown_2018_Alliance::is_teleop_switch_ownership_sec_Set() const{
    return m_teleop_switch_ownership_sec_isSet;
}

bool OAIMatch_Score_Breakdown_2018_Alliance::is_teleop_switch_ownership_sec_Valid() const{
    return m_teleop_switch_ownership_sec_isValid;
}

qint32 OAIMatch_Score_Breakdown_2018_Alliance::getTotalPoints() const {
    return m_total_points;
}
void OAIMatch_Score_Breakdown_2018_Alliance::setTotalPoints(const qint32 &total_points) {
    m_total_points = total_points;
    m_total_points_isSet = true;
}

bool OAIMatch_Score_Breakdown_2018_Alliance::is_total_points_Set() const{
    return m_total_points_isSet;
}

bool OAIMatch_Score_Breakdown_2018_Alliance::is_total_points_Valid() const{
    return m_total_points_isValid;
}

qint32 OAIMatch_Score_Breakdown_2018_Alliance::getVaultBoostPlayed() const {
    return m_vault_boost_played;
}
void OAIMatch_Score_Breakdown_2018_Alliance::setVaultBoostPlayed(const qint32 &vault_boost_played) {
    m_vault_boost_played = vault_boost_played;
    m_vault_boost_played_isSet = true;
}

bool OAIMatch_Score_Breakdown_2018_Alliance::is_vault_boost_played_Set() const{
    return m_vault_boost_played_isSet;
}

bool OAIMatch_Score_Breakdown_2018_Alliance::is_vault_boost_played_Valid() const{
    return m_vault_boost_played_isValid;
}

qint32 OAIMatch_Score_Breakdown_2018_Alliance::getVaultBoostTotal() const {
    return m_vault_boost_total;
}
void OAIMatch_Score_Breakdown_2018_Alliance::setVaultBoostTotal(const qint32 &vault_boost_total) {
    m_vault_boost_total = vault_boost_total;
    m_vault_boost_total_isSet = true;
}

bool OAIMatch_Score_Breakdown_2018_Alliance::is_vault_boost_total_Set() const{
    return m_vault_boost_total_isSet;
}

bool OAIMatch_Score_Breakdown_2018_Alliance::is_vault_boost_total_Valid() const{
    return m_vault_boost_total_isValid;
}

qint32 OAIMatch_Score_Breakdown_2018_Alliance::getVaultForcePlayed() const {
    return m_vault_force_played;
}
void OAIMatch_Score_Breakdown_2018_Alliance::setVaultForcePlayed(const qint32 &vault_force_played) {
    m_vault_force_played = vault_force_played;
    m_vault_force_played_isSet = true;
}

bool OAIMatch_Score_Breakdown_2018_Alliance::is_vault_force_played_Set() const{
    return m_vault_force_played_isSet;
}

bool OAIMatch_Score_Breakdown_2018_Alliance::is_vault_force_played_Valid() const{
    return m_vault_force_played_isValid;
}

qint32 OAIMatch_Score_Breakdown_2018_Alliance::getVaultForceTotal() const {
    return m_vault_force_total;
}
void OAIMatch_Score_Breakdown_2018_Alliance::setVaultForceTotal(const qint32 &vault_force_total) {
    m_vault_force_total = vault_force_total;
    m_vault_force_total_isSet = true;
}

bool OAIMatch_Score_Breakdown_2018_Alliance::is_vault_force_total_Set() const{
    return m_vault_force_total_isSet;
}

bool OAIMatch_Score_Breakdown_2018_Alliance::is_vault_force_total_Valid() const{
    return m_vault_force_total_isValid;
}

qint32 OAIMatch_Score_Breakdown_2018_Alliance::getVaultLevitatePlayed() const {
    return m_vault_levitate_played;
}
void OAIMatch_Score_Breakdown_2018_Alliance::setVaultLevitatePlayed(const qint32 &vault_levitate_played) {
    m_vault_levitate_played = vault_levitate_played;
    m_vault_levitate_played_isSet = true;
}

bool OAIMatch_Score_Breakdown_2018_Alliance::is_vault_levitate_played_Set() const{
    return m_vault_levitate_played_isSet;
}

bool OAIMatch_Score_Breakdown_2018_Alliance::is_vault_levitate_played_Valid() const{
    return m_vault_levitate_played_isValid;
}

qint32 OAIMatch_Score_Breakdown_2018_Alliance::getVaultLevitateTotal() const {
    return m_vault_levitate_total;
}
void OAIMatch_Score_Breakdown_2018_Alliance::setVaultLevitateTotal(const qint32 &vault_levitate_total) {
    m_vault_levitate_total = vault_levitate_total;
    m_vault_levitate_total_isSet = true;
}

bool OAIMatch_Score_Breakdown_2018_Alliance::is_vault_levitate_total_Set() const{
    return m_vault_levitate_total_isSet;
}

bool OAIMatch_Score_Breakdown_2018_Alliance::is_vault_levitate_total_Valid() const{
    return m_vault_levitate_total_isValid;
}

qint32 OAIMatch_Score_Breakdown_2018_Alliance::getVaultPoints() const {
    return m_vault_points;
}
void OAIMatch_Score_Breakdown_2018_Alliance::setVaultPoints(const qint32 &vault_points) {
    m_vault_points = vault_points;
    m_vault_points_isSet = true;
}

bool OAIMatch_Score_Breakdown_2018_Alliance::is_vault_points_Set() const{
    return m_vault_points_isSet;
}

bool OAIMatch_Score_Breakdown_2018_Alliance::is_vault_points_Valid() const{
    return m_vault_points_isValid;
}

bool OAIMatch_Score_Breakdown_2018_Alliance::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_adjust_points_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auto_ownership_points_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auto_points_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auto_quest_ranking_point_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auto_robot1_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auto_robot2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auto_robot3_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auto_run_points_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auto_scale_ownership_sec_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auto_switch_at_zero_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auto_switch_ownership_sec_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_endgame_points_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_endgame_robot1_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_endgame_robot2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_endgame_robot3_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_face_the_boss_ranking_point_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_foul_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_foul_points_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tba_game_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tech_foul_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_teleop_ownership_points_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_teleop_points_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_teleop_scale_boost_sec_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_teleop_scale_force_sec_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_teleop_scale_ownership_sec_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_teleop_switch_boost_sec_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_teleop_switch_force_sec_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_teleop_switch_ownership_sec_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_points_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vault_boost_played_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vault_boost_total_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vault_force_played_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vault_force_total_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vault_levitate_played_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vault_levitate_total_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vault_points_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMatch_Score_Breakdown_2018_Alliance::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
