/**
 * The Blue Alliance API v3
 * # Overview    Information and statistics about FIRST Robotics Competition teams and events.   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).
 *
 * The version of the OpenAPI document: 3.8.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMatch.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMatch::OAIMatch(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMatch::OAIMatch() {
    this->initializeModel();
}

OAIMatch::~OAIMatch() {}

void OAIMatch::initializeModel() {

    m_actual_time_isSet = false;
    m_actual_time_isValid = false;

    m_alliances_isSet = false;
    m_alliances_isValid = false;

    m_comp_level_isSet = false;
    m_comp_level_isValid = false;

    m_event_key_isSet = false;
    m_event_key_isValid = false;

    m_key_isSet = false;
    m_key_isValid = false;

    m_match_number_isSet = false;
    m_match_number_isValid = false;

    m_post_result_time_isSet = false;
    m_post_result_time_isValid = false;

    m_predicted_time_isSet = false;
    m_predicted_time_isValid = false;

    m_score_breakdown_isSet = false;
    m_score_breakdown_isValid = false;

    m_set_number_isSet = false;
    m_set_number_isValid = false;

    m_time_isSet = false;
    m_time_isValid = false;

    m_videos_isSet = false;
    m_videos_isValid = false;

    m_winning_alliance_isSet = false;
    m_winning_alliance_isValid = false;
}

void OAIMatch::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMatch::fromJsonObject(QJsonObject json) {

    m_actual_time_isValid = ::OpenAPI::fromJsonValue(m_actual_time, json[QString("actual_time")]);
    m_actual_time_isSet = !json[QString("actual_time")].isNull() && m_actual_time_isValid;

    m_alliances_isValid = ::OpenAPI::fromJsonValue(m_alliances, json[QString("alliances")]);
    m_alliances_isSet = !json[QString("alliances")].isNull() && m_alliances_isValid;

    m_comp_level_isValid = ::OpenAPI::fromJsonValue(m_comp_level, json[QString("comp_level")]);
    m_comp_level_isSet = !json[QString("comp_level")].isNull() && m_comp_level_isValid;

    m_event_key_isValid = ::OpenAPI::fromJsonValue(m_event_key, json[QString("event_key")]);
    m_event_key_isSet = !json[QString("event_key")].isNull() && m_event_key_isValid;

    m_key_isValid = ::OpenAPI::fromJsonValue(m_key, json[QString("key")]);
    m_key_isSet = !json[QString("key")].isNull() && m_key_isValid;

    m_match_number_isValid = ::OpenAPI::fromJsonValue(m_match_number, json[QString("match_number")]);
    m_match_number_isSet = !json[QString("match_number")].isNull() && m_match_number_isValid;

    m_post_result_time_isValid = ::OpenAPI::fromJsonValue(m_post_result_time, json[QString("post_result_time")]);
    m_post_result_time_isSet = !json[QString("post_result_time")].isNull() && m_post_result_time_isValid;

    m_predicted_time_isValid = ::OpenAPI::fromJsonValue(m_predicted_time, json[QString("predicted_time")]);
    m_predicted_time_isSet = !json[QString("predicted_time")].isNull() && m_predicted_time_isValid;

    m_score_breakdown_isValid = ::OpenAPI::fromJsonValue(m_score_breakdown, json[QString("score_breakdown")]);
    m_score_breakdown_isSet = !json[QString("score_breakdown")].isNull() && m_score_breakdown_isValid;

    m_set_number_isValid = ::OpenAPI::fromJsonValue(m_set_number, json[QString("set_number")]);
    m_set_number_isSet = !json[QString("set_number")].isNull() && m_set_number_isValid;

    m_time_isValid = ::OpenAPI::fromJsonValue(m_time, json[QString("time")]);
    m_time_isSet = !json[QString("time")].isNull() && m_time_isValid;

    m_videos_isValid = ::OpenAPI::fromJsonValue(m_videos, json[QString("videos")]);
    m_videos_isSet = !json[QString("videos")].isNull() && m_videos_isValid;

    m_winning_alliance_isValid = ::OpenAPI::fromJsonValue(m_winning_alliance, json[QString("winning_alliance")]);
    m_winning_alliance_isSet = !json[QString("winning_alliance")].isNull() && m_winning_alliance_isValid;
}

QString OAIMatch::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMatch::asJsonObject() const {
    QJsonObject obj;
    if (m_actual_time_isSet) {
        obj.insert(QString("actual_time"), ::OpenAPI::toJsonValue(m_actual_time));
    }
    if (m_alliances.isSet()) {
        obj.insert(QString("alliances"), ::OpenAPI::toJsonValue(m_alliances));
    }
    if (m_comp_level_isSet) {
        obj.insert(QString("comp_level"), ::OpenAPI::toJsonValue(m_comp_level));
    }
    if (m_event_key_isSet) {
        obj.insert(QString("event_key"), ::OpenAPI::toJsonValue(m_event_key));
    }
    if (m_key_isSet) {
        obj.insert(QString("key"), ::OpenAPI::toJsonValue(m_key));
    }
    if (m_match_number_isSet) {
        obj.insert(QString("match_number"), ::OpenAPI::toJsonValue(m_match_number));
    }
    if (m_post_result_time_isSet) {
        obj.insert(QString("post_result_time"), ::OpenAPI::toJsonValue(m_post_result_time));
    }
    if (m_predicted_time_isSet) {
        obj.insert(QString("predicted_time"), ::OpenAPI::toJsonValue(m_predicted_time));
    }
    if (m_score_breakdown_isSet) {
        obj.insert(QString("score_breakdown"), ::OpenAPI::toJsonValue(m_score_breakdown));
    }
    if (m_set_number_isSet) {
        obj.insert(QString("set_number"), ::OpenAPI::toJsonValue(m_set_number));
    }
    if (m_time_isSet) {
        obj.insert(QString("time"), ::OpenAPI::toJsonValue(m_time));
    }
    if (m_videos.size() > 0) {
        obj.insert(QString("videos"), ::OpenAPI::toJsonValue(m_videos));
    }
    if (m_winning_alliance_isSet) {
        obj.insert(QString("winning_alliance"), ::OpenAPI::toJsonValue(m_winning_alliance));
    }
    return obj;
}

qint64 OAIMatch::getActualTime() const {
    return m_actual_time;
}
void OAIMatch::setActualTime(const qint64 &actual_time) {
    m_actual_time = actual_time;
    m_actual_time_isSet = true;
}

bool OAIMatch::is_actual_time_Set() const{
    return m_actual_time_isSet;
}

bool OAIMatch::is_actual_time_Valid() const{
    return m_actual_time_isValid;
}

OAIMatch_alliances OAIMatch::getAlliances() const {
    return m_alliances;
}
void OAIMatch::setAlliances(const OAIMatch_alliances &alliances) {
    m_alliances = alliances;
    m_alliances_isSet = true;
}

bool OAIMatch::is_alliances_Set() const{
    return m_alliances_isSet;
}

bool OAIMatch::is_alliances_Valid() const{
    return m_alliances_isValid;
}

QString OAIMatch::getCompLevel() const {
    return m_comp_level;
}
void OAIMatch::setCompLevel(const QString &comp_level) {
    m_comp_level = comp_level;
    m_comp_level_isSet = true;
}

bool OAIMatch::is_comp_level_Set() const{
    return m_comp_level_isSet;
}

bool OAIMatch::is_comp_level_Valid() const{
    return m_comp_level_isValid;
}

QString OAIMatch::getEventKey() const {
    return m_event_key;
}
void OAIMatch::setEventKey(const QString &event_key) {
    m_event_key = event_key;
    m_event_key_isSet = true;
}

bool OAIMatch::is_event_key_Set() const{
    return m_event_key_isSet;
}

bool OAIMatch::is_event_key_Valid() const{
    return m_event_key_isValid;
}

QString OAIMatch::getKey() const {
    return m_key;
}
void OAIMatch::setKey(const QString &key) {
    m_key = key;
    m_key_isSet = true;
}

bool OAIMatch::is_key_Set() const{
    return m_key_isSet;
}

bool OAIMatch::is_key_Valid() const{
    return m_key_isValid;
}

qint32 OAIMatch::getMatchNumber() const {
    return m_match_number;
}
void OAIMatch::setMatchNumber(const qint32 &match_number) {
    m_match_number = match_number;
    m_match_number_isSet = true;
}

bool OAIMatch::is_match_number_Set() const{
    return m_match_number_isSet;
}

bool OAIMatch::is_match_number_Valid() const{
    return m_match_number_isValid;
}

qint64 OAIMatch::getPostResultTime() const {
    return m_post_result_time;
}
void OAIMatch::setPostResultTime(const qint64 &post_result_time) {
    m_post_result_time = post_result_time;
    m_post_result_time_isSet = true;
}

bool OAIMatch::is_post_result_time_Set() const{
    return m_post_result_time_isSet;
}

bool OAIMatch::is_post_result_time_Valid() const{
    return m_post_result_time_isValid;
}

qint64 OAIMatch::getPredictedTime() const {
    return m_predicted_time;
}
void OAIMatch::setPredictedTime(const qint64 &predicted_time) {
    m_predicted_time = predicted_time;
    m_predicted_time_isSet = true;
}

bool OAIMatch::is_predicted_time_Set() const{
    return m_predicted_time_isSet;
}

bool OAIMatch::is_predicted_time_Valid() const{
    return m_predicted_time_isValid;
}

OAIObject OAIMatch::getScoreBreakdown() const {
    return m_score_breakdown;
}
void OAIMatch::setScoreBreakdown(const OAIObject &score_breakdown) {
    m_score_breakdown = score_breakdown;
    m_score_breakdown_isSet = true;
}

bool OAIMatch::is_score_breakdown_Set() const{
    return m_score_breakdown_isSet;
}

bool OAIMatch::is_score_breakdown_Valid() const{
    return m_score_breakdown_isValid;
}

qint32 OAIMatch::getSetNumber() const {
    return m_set_number;
}
void OAIMatch::setSetNumber(const qint32 &set_number) {
    m_set_number = set_number;
    m_set_number_isSet = true;
}

bool OAIMatch::is_set_number_Set() const{
    return m_set_number_isSet;
}

bool OAIMatch::is_set_number_Valid() const{
    return m_set_number_isValid;
}

qint64 OAIMatch::getTime() const {
    return m_time;
}
void OAIMatch::setTime(const qint64 &time) {
    m_time = time;
    m_time_isSet = true;
}

bool OAIMatch::is_time_Set() const{
    return m_time_isSet;
}

bool OAIMatch::is_time_Valid() const{
    return m_time_isValid;
}

QList<OAIMatch_videos_inner> OAIMatch::getVideos() const {
    return m_videos;
}
void OAIMatch::setVideos(const QList<OAIMatch_videos_inner> &videos) {
    m_videos = videos;
    m_videos_isSet = true;
}

bool OAIMatch::is_videos_Set() const{
    return m_videos_isSet;
}

bool OAIMatch::is_videos_Valid() const{
    return m_videos_isValid;
}

QString OAIMatch::getWinningAlliance() const {
    return m_winning_alliance;
}
void OAIMatch::setWinningAlliance(const QString &winning_alliance) {
    m_winning_alliance = winning_alliance;
    m_winning_alliance_isSet = true;
}

bool OAIMatch::is_winning_alliance_Set() const{
    return m_winning_alliance_isSet;
}

bool OAIMatch::is_winning_alliance_Valid() const{
    return m_winning_alliance_isValid;
}

bool OAIMatch::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_actual_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_alliances.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_comp_level_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_match_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_post_result_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_predicted_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_score_breakdown_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_set_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_videos.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_winning_alliance_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMatch::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_comp_level_isValid && m_event_key_isValid && m_key_isValid && m_match_number_isValid && m_set_number_isValid && true;
}

} // namespace OpenAPI
