/**
 * The Blue Alliance API v3
 * # Overview    Information and statistics about FIRST Robotics Competition teams and events.   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).
 *
 * The version of the OpenAPI document: 3.8.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIMatch_Score_Breakdown_2018_Alliance.h
 *
 * 
 */

#ifndef OAIMatch_Score_Breakdown_2018_Alliance_H
#define OAIMatch_Score_Breakdown_2018_Alliance_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIMatch_Score_Breakdown_2018_Alliance : public OAIObject {
public:
    OAIMatch_Score_Breakdown_2018_Alliance();
    OAIMatch_Score_Breakdown_2018_Alliance(QString json);
    ~OAIMatch_Score_Breakdown_2018_Alliance() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getAdjustPoints() const;
    void setAdjustPoints(const qint32 &adjust_points);
    bool is_adjust_points_Set() const;
    bool is_adjust_points_Valid() const;

    qint32 getAutoOwnershipPoints() const;
    void setAutoOwnershipPoints(const qint32 &auto_ownership_points);
    bool is_auto_ownership_points_Set() const;
    bool is_auto_ownership_points_Valid() const;

    qint32 getAutoPoints() const;
    void setAutoPoints(const qint32 &auto_points);
    bool is_auto_points_Set() const;
    bool is_auto_points_Valid() const;

    bool isAutoQuestRankingPoint() const;
    void setAutoQuestRankingPoint(const bool &auto_quest_ranking_point);
    bool is_auto_quest_ranking_point_Set() const;
    bool is_auto_quest_ranking_point_Valid() const;

    QString getAutoRobot1() const;
    void setAutoRobot1(const QString &auto_robot1);
    bool is_auto_robot1_Set() const;
    bool is_auto_robot1_Valid() const;

    QString getAutoRobot2() const;
    void setAutoRobot2(const QString &auto_robot2);
    bool is_auto_robot2_Set() const;
    bool is_auto_robot2_Valid() const;

    QString getAutoRobot3() const;
    void setAutoRobot3(const QString &auto_robot3);
    bool is_auto_robot3_Set() const;
    bool is_auto_robot3_Valid() const;

    qint32 getAutoRunPoints() const;
    void setAutoRunPoints(const qint32 &auto_run_points);
    bool is_auto_run_points_Set() const;
    bool is_auto_run_points_Valid() const;

    qint32 getAutoScaleOwnershipSec() const;
    void setAutoScaleOwnershipSec(const qint32 &auto_scale_ownership_sec);
    bool is_auto_scale_ownership_sec_Set() const;
    bool is_auto_scale_ownership_sec_Valid() const;

    bool isAutoSwitchAtZero() const;
    void setAutoSwitchAtZero(const bool &auto_switch_at_zero);
    bool is_auto_switch_at_zero_Set() const;
    bool is_auto_switch_at_zero_Valid() const;

    qint32 getAutoSwitchOwnershipSec() const;
    void setAutoSwitchOwnershipSec(const qint32 &auto_switch_ownership_sec);
    bool is_auto_switch_ownership_sec_Set() const;
    bool is_auto_switch_ownership_sec_Valid() const;

    qint32 getEndgamePoints() const;
    void setEndgamePoints(const qint32 &endgame_points);
    bool is_endgame_points_Set() const;
    bool is_endgame_points_Valid() const;

    QString getEndgameRobot1() const;
    void setEndgameRobot1(const QString &endgame_robot1);
    bool is_endgame_robot1_Set() const;
    bool is_endgame_robot1_Valid() const;

    QString getEndgameRobot2() const;
    void setEndgameRobot2(const QString &endgame_robot2);
    bool is_endgame_robot2_Set() const;
    bool is_endgame_robot2_Valid() const;

    QString getEndgameRobot3() const;
    void setEndgameRobot3(const QString &endgame_robot3);
    bool is_endgame_robot3_Set() const;
    bool is_endgame_robot3_Valid() const;

    bool isFaceTheBossRankingPoint() const;
    void setFaceTheBossRankingPoint(const bool &face_the_boss_ranking_point);
    bool is_face_the_boss_ranking_point_Set() const;
    bool is_face_the_boss_ranking_point_Valid() const;

    qint32 getFoulCount() const;
    void setFoulCount(const qint32 &foul_count);
    bool is_foul_count_Set() const;
    bool is_foul_count_Valid() const;

    qint32 getFoulPoints() const;
    void setFoulPoints(const qint32 &foul_points);
    bool is_foul_points_Set() const;
    bool is_foul_points_Valid() const;

    qint32 getRp() const;
    void setRp(const qint32 &rp);
    bool is_rp_Set() const;
    bool is_rp_Valid() const;

    QString getTbaGameData() const;
    void setTbaGameData(const QString &tba_game_data);
    bool is_tba_game_data_Set() const;
    bool is_tba_game_data_Valid() const;

    qint32 getTechFoulCount() const;
    void setTechFoulCount(const qint32 &tech_foul_count);
    bool is_tech_foul_count_Set() const;
    bool is_tech_foul_count_Valid() const;

    qint32 getTeleopOwnershipPoints() const;
    void setTeleopOwnershipPoints(const qint32 &teleop_ownership_points);
    bool is_teleop_ownership_points_Set() const;
    bool is_teleop_ownership_points_Valid() const;

    qint32 getTeleopPoints() const;
    void setTeleopPoints(const qint32 &teleop_points);
    bool is_teleop_points_Set() const;
    bool is_teleop_points_Valid() const;

    qint32 getTeleopScaleBoostSec() const;
    void setTeleopScaleBoostSec(const qint32 &teleop_scale_boost_sec);
    bool is_teleop_scale_boost_sec_Set() const;
    bool is_teleop_scale_boost_sec_Valid() const;

    qint32 getTeleopScaleForceSec() const;
    void setTeleopScaleForceSec(const qint32 &teleop_scale_force_sec);
    bool is_teleop_scale_force_sec_Set() const;
    bool is_teleop_scale_force_sec_Valid() const;

    qint32 getTeleopScaleOwnershipSec() const;
    void setTeleopScaleOwnershipSec(const qint32 &teleop_scale_ownership_sec);
    bool is_teleop_scale_ownership_sec_Set() const;
    bool is_teleop_scale_ownership_sec_Valid() const;

    qint32 getTeleopSwitchBoostSec() const;
    void setTeleopSwitchBoostSec(const qint32 &teleop_switch_boost_sec);
    bool is_teleop_switch_boost_sec_Set() const;
    bool is_teleop_switch_boost_sec_Valid() const;

    qint32 getTeleopSwitchForceSec() const;
    void setTeleopSwitchForceSec(const qint32 &teleop_switch_force_sec);
    bool is_teleop_switch_force_sec_Set() const;
    bool is_teleop_switch_force_sec_Valid() const;

    qint32 getTeleopSwitchOwnershipSec() const;
    void setTeleopSwitchOwnershipSec(const qint32 &teleop_switch_ownership_sec);
    bool is_teleop_switch_ownership_sec_Set() const;
    bool is_teleop_switch_ownership_sec_Valid() const;

    qint32 getTotalPoints() const;
    void setTotalPoints(const qint32 &total_points);
    bool is_total_points_Set() const;
    bool is_total_points_Valid() const;

    qint32 getVaultBoostPlayed() const;
    void setVaultBoostPlayed(const qint32 &vault_boost_played);
    bool is_vault_boost_played_Set() const;
    bool is_vault_boost_played_Valid() const;

    qint32 getVaultBoostTotal() const;
    void setVaultBoostTotal(const qint32 &vault_boost_total);
    bool is_vault_boost_total_Set() const;
    bool is_vault_boost_total_Valid() const;

    qint32 getVaultForcePlayed() const;
    void setVaultForcePlayed(const qint32 &vault_force_played);
    bool is_vault_force_played_Set() const;
    bool is_vault_force_played_Valid() const;

    qint32 getVaultForceTotal() const;
    void setVaultForceTotal(const qint32 &vault_force_total);
    bool is_vault_force_total_Set() const;
    bool is_vault_force_total_Valid() const;

    qint32 getVaultLevitatePlayed() const;
    void setVaultLevitatePlayed(const qint32 &vault_levitate_played);
    bool is_vault_levitate_played_Set() const;
    bool is_vault_levitate_played_Valid() const;

    qint32 getVaultLevitateTotal() const;
    void setVaultLevitateTotal(const qint32 &vault_levitate_total);
    bool is_vault_levitate_total_Set() const;
    bool is_vault_levitate_total_Valid() const;

    qint32 getVaultPoints() const;
    void setVaultPoints(const qint32 &vault_points);
    bool is_vault_points_Set() const;
    bool is_vault_points_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_adjust_points;
    bool m_adjust_points_isSet;
    bool m_adjust_points_isValid;

    qint32 m_auto_ownership_points;
    bool m_auto_ownership_points_isSet;
    bool m_auto_ownership_points_isValid;

    qint32 m_auto_points;
    bool m_auto_points_isSet;
    bool m_auto_points_isValid;

    bool m_auto_quest_ranking_point;
    bool m_auto_quest_ranking_point_isSet;
    bool m_auto_quest_ranking_point_isValid;

    QString m_auto_robot1;
    bool m_auto_robot1_isSet;
    bool m_auto_robot1_isValid;

    QString m_auto_robot2;
    bool m_auto_robot2_isSet;
    bool m_auto_robot2_isValid;

    QString m_auto_robot3;
    bool m_auto_robot3_isSet;
    bool m_auto_robot3_isValid;

    qint32 m_auto_run_points;
    bool m_auto_run_points_isSet;
    bool m_auto_run_points_isValid;

    qint32 m_auto_scale_ownership_sec;
    bool m_auto_scale_ownership_sec_isSet;
    bool m_auto_scale_ownership_sec_isValid;

    bool m_auto_switch_at_zero;
    bool m_auto_switch_at_zero_isSet;
    bool m_auto_switch_at_zero_isValid;

    qint32 m_auto_switch_ownership_sec;
    bool m_auto_switch_ownership_sec_isSet;
    bool m_auto_switch_ownership_sec_isValid;

    qint32 m_endgame_points;
    bool m_endgame_points_isSet;
    bool m_endgame_points_isValid;

    QString m_endgame_robot1;
    bool m_endgame_robot1_isSet;
    bool m_endgame_robot1_isValid;

    QString m_endgame_robot2;
    bool m_endgame_robot2_isSet;
    bool m_endgame_robot2_isValid;

    QString m_endgame_robot3;
    bool m_endgame_robot3_isSet;
    bool m_endgame_robot3_isValid;

    bool m_face_the_boss_ranking_point;
    bool m_face_the_boss_ranking_point_isSet;
    bool m_face_the_boss_ranking_point_isValid;

    qint32 m_foul_count;
    bool m_foul_count_isSet;
    bool m_foul_count_isValid;

    qint32 m_foul_points;
    bool m_foul_points_isSet;
    bool m_foul_points_isValid;

    qint32 m_rp;
    bool m_rp_isSet;
    bool m_rp_isValid;

    QString m_tba_game_data;
    bool m_tba_game_data_isSet;
    bool m_tba_game_data_isValid;

    qint32 m_tech_foul_count;
    bool m_tech_foul_count_isSet;
    bool m_tech_foul_count_isValid;

    qint32 m_teleop_ownership_points;
    bool m_teleop_ownership_points_isSet;
    bool m_teleop_ownership_points_isValid;

    qint32 m_teleop_points;
    bool m_teleop_points_isSet;
    bool m_teleop_points_isValid;

    qint32 m_teleop_scale_boost_sec;
    bool m_teleop_scale_boost_sec_isSet;
    bool m_teleop_scale_boost_sec_isValid;

    qint32 m_teleop_scale_force_sec;
    bool m_teleop_scale_force_sec_isSet;
    bool m_teleop_scale_force_sec_isValid;

    qint32 m_teleop_scale_ownership_sec;
    bool m_teleop_scale_ownership_sec_isSet;
    bool m_teleop_scale_ownership_sec_isValid;

    qint32 m_teleop_switch_boost_sec;
    bool m_teleop_switch_boost_sec_isSet;
    bool m_teleop_switch_boost_sec_isValid;

    qint32 m_teleop_switch_force_sec;
    bool m_teleop_switch_force_sec_isSet;
    bool m_teleop_switch_force_sec_isValid;

    qint32 m_teleop_switch_ownership_sec;
    bool m_teleop_switch_ownership_sec_isSet;
    bool m_teleop_switch_ownership_sec_isValid;

    qint32 m_total_points;
    bool m_total_points_isSet;
    bool m_total_points_isValid;

    qint32 m_vault_boost_played;
    bool m_vault_boost_played_isSet;
    bool m_vault_boost_played_isValid;

    qint32 m_vault_boost_total;
    bool m_vault_boost_total_isSet;
    bool m_vault_boost_total_isValid;

    qint32 m_vault_force_played;
    bool m_vault_force_played_isSet;
    bool m_vault_force_played_isValid;

    qint32 m_vault_force_total;
    bool m_vault_force_total_isSet;
    bool m_vault_force_total_isValid;

    qint32 m_vault_levitate_played;
    bool m_vault_levitate_played_isSet;
    bool m_vault_levitate_played_isValid;

    qint32 m_vault_levitate_total;
    bool m_vault_levitate_total_isSet;
    bool m_vault_levitate_total_isValid;

    qint32 m_vault_points;
    bool m_vault_points_isSet;
    bool m_vault_points_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIMatch_Score_Breakdown_2018_Alliance)

#endif // OAIMatch_Score_Breakdown_2018_Alliance_H
