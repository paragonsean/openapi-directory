/**
 * The Blue Alliance API v3
 * # Overview    Information and statistics about FIRST Robotics Competition teams and events.   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).
 *
 * The version of the OpenAPI document: 3.8.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMatch_Score_Breakdown_2015_Alliance.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMatch_Score_Breakdown_2015_Alliance::OAIMatch_Score_Breakdown_2015_Alliance(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMatch_Score_Breakdown_2015_Alliance::OAIMatch_Score_Breakdown_2015_Alliance() {
    this->initializeModel();
}

OAIMatch_Score_Breakdown_2015_Alliance::~OAIMatch_Score_Breakdown_2015_Alliance() {}

void OAIMatch_Score_Breakdown_2015_Alliance::initializeModel() {

    m_adjust_points_isSet = false;
    m_adjust_points_isValid = false;

    m_auto_points_isSet = false;
    m_auto_points_isValid = false;

    m_container_count_level1_isSet = false;
    m_container_count_level1_isValid = false;

    m_container_count_level2_isSet = false;
    m_container_count_level2_isValid = false;

    m_container_count_level3_isSet = false;
    m_container_count_level3_isValid = false;

    m_container_count_level4_isSet = false;
    m_container_count_level4_isValid = false;

    m_container_count_level5_isSet = false;
    m_container_count_level5_isValid = false;

    m_container_count_level6_isSet = false;
    m_container_count_level6_isValid = false;

    m_container_points_isSet = false;
    m_container_points_isValid = false;

    m_container_set_isSet = false;
    m_container_set_isValid = false;

    m_foul_count_isSet = false;
    m_foul_count_isValid = false;

    m_foul_points_isSet = false;
    m_foul_points_isValid = false;

    m_litter_count_container_isSet = false;
    m_litter_count_container_isValid = false;

    m_litter_count_landfill_isSet = false;
    m_litter_count_landfill_isValid = false;

    m_litter_count_unprocessed_isSet = false;
    m_litter_count_unprocessed_isValid = false;

    m_litter_points_isSet = false;
    m_litter_points_isValid = false;

    m_robot_set_isSet = false;
    m_robot_set_isValid = false;

    m_teleop_points_isSet = false;
    m_teleop_points_isValid = false;

    m_total_points_isSet = false;
    m_total_points_isValid = false;

    m_tote_count_far_isSet = false;
    m_tote_count_far_isValid = false;

    m_tote_count_near_isSet = false;
    m_tote_count_near_isValid = false;

    m_tote_points_isSet = false;
    m_tote_points_isValid = false;

    m_tote_set_isSet = false;
    m_tote_set_isValid = false;

    m_tote_stack_isSet = false;
    m_tote_stack_isValid = false;
}

void OAIMatch_Score_Breakdown_2015_Alliance::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMatch_Score_Breakdown_2015_Alliance::fromJsonObject(QJsonObject json) {

    m_adjust_points_isValid = ::OpenAPI::fromJsonValue(m_adjust_points, json[QString("adjust_points")]);
    m_adjust_points_isSet = !json[QString("adjust_points")].isNull() && m_adjust_points_isValid;

    m_auto_points_isValid = ::OpenAPI::fromJsonValue(m_auto_points, json[QString("auto_points")]);
    m_auto_points_isSet = !json[QString("auto_points")].isNull() && m_auto_points_isValid;

    m_container_count_level1_isValid = ::OpenAPI::fromJsonValue(m_container_count_level1, json[QString("container_count_level1")]);
    m_container_count_level1_isSet = !json[QString("container_count_level1")].isNull() && m_container_count_level1_isValid;

    m_container_count_level2_isValid = ::OpenAPI::fromJsonValue(m_container_count_level2, json[QString("container_count_level2")]);
    m_container_count_level2_isSet = !json[QString("container_count_level2")].isNull() && m_container_count_level2_isValid;

    m_container_count_level3_isValid = ::OpenAPI::fromJsonValue(m_container_count_level3, json[QString("container_count_level3")]);
    m_container_count_level3_isSet = !json[QString("container_count_level3")].isNull() && m_container_count_level3_isValid;

    m_container_count_level4_isValid = ::OpenAPI::fromJsonValue(m_container_count_level4, json[QString("container_count_level4")]);
    m_container_count_level4_isSet = !json[QString("container_count_level4")].isNull() && m_container_count_level4_isValid;

    m_container_count_level5_isValid = ::OpenAPI::fromJsonValue(m_container_count_level5, json[QString("container_count_level5")]);
    m_container_count_level5_isSet = !json[QString("container_count_level5")].isNull() && m_container_count_level5_isValid;

    m_container_count_level6_isValid = ::OpenAPI::fromJsonValue(m_container_count_level6, json[QString("container_count_level6")]);
    m_container_count_level6_isSet = !json[QString("container_count_level6")].isNull() && m_container_count_level6_isValid;

    m_container_points_isValid = ::OpenAPI::fromJsonValue(m_container_points, json[QString("container_points")]);
    m_container_points_isSet = !json[QString("container_points")].isNull() && m_container_points_isValid;

    m_container_set_isValid = ::OpenAPI::fromJsonValue(m_container_set, json[QString("container_set")]);
    m_container_set_isSet = !json[QString("container_set")].isNull() && m_container_set_isValid;

    m_foul_count_isValid = ::OpenAPI::fromJsonValue(m_foul_count, json[QString("foul_count")]);
    m_foul_count_isSet = !json[QString("foul_count")].isNull() && m_foul_count_isValid;

    m_foul_points_isValid = ::OpenAPI::fromJsonValue(m_foul_points, json[QString("foul_points")]);
    m_foul_points_isSet = !json[QString("foul_points")].isNull() && m_foul_points_isValid;

    m_litter_count_container_isValid = ::OpenAPI::fromJsonValue(m_litter_count_container, json[QString("litter_count_container")]);
    m_litter_count_container_isSet = !json[QString("litter_count_container")].isNull() && m_litter_count_container_isValid;

    m_litter_count_landfill_isValid = ::OpenAPI::fromJsonValue(m_litter_count_landfill, json[QString("litter_count_landfill")]);
    m_litter_count_landfill_isSet = !json[QString("litter_count_landfill")].isNull() && m_litter_count_landfill_isValid;

    m_litter_count_unprocessed_isValid = ::OpenAPI::fromJsonValue(m_litter_count_unprocessed, json[QString("litter_count_unprocessed")]);
    m_litter_count_unprocessed_isSet = !json[QString("litter_count_unprocessed")].isNull() && m_litter_count_unprocessed_isValid;

    m_litter_points_isValid = ::OpenAPI::fromJsonValue(m_litter_points, json[QString("litter_points")]);
    m_litter_points_isSet = !json[QString("litter_points")].isNull() && m_litter_points_isValid;

    m_robot_set_isValid = ::OpenAPI::fromJsonValue(m_robot_set, json[QString("robot_set")]);
    m_robot_set_isSet = !json[QString("robot_set")].isNull() && m_robot_set_isValid;

    m_teleop_points_isValid = ::OpenAPI::fromJsonValue(m_teleop_points, json[QString("teleop_points")]);
    m_teleop_points_isSet = !json[QString("teleop_points")].isNull() && m_teleop_points_isValid;

    m_total_points_isValid = ::OpenAPI::fromJsonValue(m_total_points, json[QString("total_points")]);
    m_total_points_isSet = !json[QString("total_points")].isNull() && m_total_points_isValid;

    m_tote_count_far_isValid = ::OpenAPI::fromJsonValue(m_tote_count_far, json[QString("tote_count_far")]);
    m_tote_count_far_isSet = !json[QString("tote_count_far")].isNull() && m_tote_count_far_isValid;

    m_tote_count_near_isValid = ::OpenAPI::fromJsonValue(m_tote_count_near, json[QString("tote_count_near")]);
    m_tote_count_near_isSet = !json[QString("tote_count_near")].isNull() && m_tote_count_near_isValid;

    m_tote_points_isValid = ::OpenAPI::fromJsonValue(m_tote_points, json[QString("tote_points")]);
    m_tote_points_isSet = !json[QString("tote_points")].isNull() && m_tote_points_isValid;

    m_tote_set_isValid = ::OpenAPI::fromJsonValue(m_tote_set, json[QString("tote_set")]);
    m_tote_set_isSet = !json[QString("tote_set")].isNull() && m_tote_set_isValid;

    m_tote_stack_isValid = ::OpenAPI::fromJsonValue(m_tote_stack, json[QString("tote_stack")]);
    m_tote_stack_isSet = !json[QString("tote_stack")].isNull() && m_tote_stack_isValid;
}

QString OAIMatch_Score_Breakdown_2015_Alliance::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMatch_Score_Breakdown_2015_Alliance::asJsonObject() const {
    QJsonObject obj;
    if (m_adjust_points_isSet) {
        obj.insert(QString("adjust_points"), ::OpenAPI::toJsonValue(m_adjust_points));
    }
    if (m_auto_points_isSet) {
        obj.insert(QString("auto_points"), ::OpenAPI::toJsonValue(m_auto_points));
    }
    if (m_container_count_level1_isSet) {
        obj.insert(QString("container_count_level1"), ::OpenAPI::toJsonValue(m_container_count_level1));
    }
    if (m_container_count_level2_isSet) {
        obj.insert(QString("container_count_level2"), ::OpenAPI::toJsonValue(m_container_count_level2));
    }
    if (m_container_count_level3_isSet) {
        obj.insert(QString("container_count_level3"), ::OpenAPI::toJsonValue(m_container_count_level3));
    }
    if (m_container_count_level4_isSet) {
        obj.insert(QString("container_count_level4"), ::OpenAPI::toJsonValue(m_container_count_level4));
    }
    if (m_container_count_level5_isSet) {
        obj.insert(QString("container_count_level5"), ::OpenAPI::toJsonValue(m_container_count_level5));
    }
    if (m_container_count_level6_isSet) {
        obj.insert(QString("container_count_level6"), ::OpenAPI::toJsonValue(m_container_count_level6));
    }
    if (m_container_points_isSet) {
        obj.insert(QString("container_points"), ::OpenAPI::toJsonValue(m_container_points));
    }
    if (m_container_set_isSet) {
        obj.insert(QString("container_set"), ::OpenAPI::toJsonValue(m_container_set));
    }
    if (m_foul_count_isSet) {
        obj.insert(QString("foul_count"), ::OpenAPI::toJsonValue(m_foul_count));
    }
    if (m_foul_points_isSet) {
        obj.insert(QString("foul_points"), ::OpenAPI::toJsonValue(m_foul_points));
    }
    if (m_litter_count_container_isSet) {
        obj.insert(QString("litter_count_container"), ::OpenAPI::toJsonValue(m_litter_count_container));
    }
    if (m_litter_count_landfill_isSet) {
        obj.insert(QString("litter_count_landfill"), ::OpenAPI::toJsonValue(m_litter_count_landfill));
    }
    if (m_litter_count_unprocessed_isSet) {
        obj.insert(QString("litter_count_unprocessed"), ::OpenAPI::toJsonValue(m_litter_count_unprocessed));
    }
    if (m_litter_points_isSet) {
        obj.insert(QString("litter_points"), ::OpenAPI::toJsonValue(m_litter_points));
    }
    if (m_robot_set_isSet) {
        obj.insert(QString("robot_set"), ::OpenAPI::toJsonValue(m_robot_set));
    }
    if (m_teleop_points_isSet) {
        obj.insert(QString("teleop_points"), ::OpenAPI::toJsonValue(m_teleop_points));
    }
    if (m_total_points_isSet) {
        obj.insert(QString("total_points"), ::OpenAPI::toJsonValue(m_total_points));
    }
    if (m_tote_count_far_isSet) {
        obj.insert(QString("tote_count_far"), ::OpenAPI::toJsonValue(m_tote_count_far));
    }
    if (m_tote_count_near_isSet) {
        obj.insert(QString("tote_count_near"), ::OpenAPI::toJsonValue(m_tote_count_near));
    }
    if (m_tote_points_isSet) {
        obj.insert(QString("tote_points"), ::OpenAPI::toJsonValue(m_tote_points));
    }
    if (m_tote_set_isSet) {
        obj.insert(QString("tote_set"), ::OpenAPI::toJsonValue(m_tote_set));
    }
    if (m_tote_stack_isSet) {
        obj.insert(QString("tote_stack"), ::OpenAPI::toJsonValue(m_tote_stack));
    }
    return obj;
}

qint32 OAIMatch_Score_Breakdown_2015_Alliance::getAdjustPoints() const {
    return m_adjust_points;
}
void OAIMatch_Score_Breakdown_2015_Alliance::setAdjustPoints(const qint32 &adjust_points) {
    m_adjust_points = adjust_points;
    m_adjust_points_isSet = true;
}

bool OAIMatch_Score_Breakdown_2015_Alliance::is_adjust_points_Set() const{
    return m_adjust_points_isSet;
}

bool OAIMatch_Score_Breakdown_2015_Alliance::is_adjust_points_Valid() const{
    return m_adjust_points_isValid;
}

qint32 OAIMatch_Score_Breakdown_2015_Alliance::getAutoPoints() const {
    return m_auto_points;
}
void OAIMatch_Score_Breakdown_2015_Alliance::setAutoPoints(const qint32 &auto_points) {
    m_auto_points = auto_points;
    m_auto_points_isSet = true;
}

bool OAIMatch_Score_Breakdown_2015_Alliance::is_auto_points_Set() const{
    return m_auto_points_isSet;
}

bool OAIMatch_Score_Breakdown_2015_Alliance::is_auto_points_Valid() const{
    return m_auto_points_isValid;
}

qint32 OAIMatch_Score_Breakdown_2015_Alliance::getContainerCountLevel1() const {
    return m_container_count_level1;
}
void OAIMatch_Score_Breakdown_2015_Alliance::setContainerCountLevel1(const qint32 &container_count_level1) {
    m_container_count_level1 = container_count_level1;
    m_container_count_level1_isSet = true;
}

bool OAIMatch_Score_Breakdown_2015_Alliance::is_container_count_level1_Set() const{
    return m_container_count_level1_isSet;
}

bool OAIMatch_Score_Breakdown_2015_Alliance::is_container_count_level1_Valid() const{
    return m_container_count_level1_isValid;
}

qint32 OAIMatch_Score_Breakdown_2015_Alliance::getContainerCountLevel2() const {
    return m_container_count_level2;
}
void OAIMatch_Score_Breakdown_2015_Alliance::setContainerCountLevel2(const qint32 &container_count_level2) {
    m_container_count_level2 = container_count_level2;
    m_container_count_level2_isSet = true;
}

bool OAIMatch_Score_Breakdown_2015_Alliance::is_container_count_level2_Set() const{
    return m_container_count_level2_isSet;
}

bool OAIMatch_Score_Breakdown_2015_Alliance::is_container_count_level2_Valid() const{
    return m_container_count_level2_isValid;
}

qint32 OAIMatch_Score_Breakdown_2015_Alliance::getContainerCountLevel3() const {
    return m_container_count_level3;
}
void OAIMatch_Score_Breakdown_2015_Alliance::setContainerCountLevel3(const qint32 &container_count_level3) {
    m_container_count_level3 = container_count_level3;
    m_container_count_level3_isSet = true;
}

bool OAIMatch_Score_Breakdown_2015_Alliance::is_container_count_level3_Set() const{
    return m_container_count_level3_isSet;
}

bool OAIMatch_Score_Breakdown_2015_Alliance::is_container_count_level3_Valid() const{
    return m_container_count_level3_isValid;
}

qint32 OAIMatch_Score_Breakdown_2015_Alliance::getContainerCountLevel4() const {
    return m_container_count_level4;
}
void OAIMatch_Score_Breakdown_2015_Alliance::setContainerCountLevel4(const qint32 &container_count_level4) {
    m_container_count_level4 = container_count_level4;
    m_container_count_level4_isSet = true;
}

bool OAIMatch_Score_Breakdown_2015_Alliance::is_container_count_level4_Set() const{
    return m_container_count_level4_isSet;
}

bool OAIMatch_Score_Breakdown_2015_Alliance::is_container_count_level4_Valid() const{
    return m_container_count_level4_isValid;
}

qint32 OAIMatch_Score_Breakdown_2015_Alliance::getContainerCountLevel5() const {
    return m_container_count_level5;
}
void OAIMatch_Score_Breakdown_2015_Alliance::setContainerCountLevel5(const qint32 &container_count_level5) {
    m_container_count_level5 = container_count_level5;
    m_container_count_level5_isSet = true;
}

bool OAIMatch_Score_Breakdown_2015_Alliance::is_container_count_level5_Set() const{
    return m_container_count_level5_isSet;
}

bool OAIMatch_Score_Breakdown_2015_Alliance::is_container_count_level5_Valid() const{
    return m_container_count_level5_isValid;
}

qint32 OAIMatch_Score_Breakdown_2015_Alliance::getContainerCountLevel6() const {
    return m_container_count_level6;
}
void OAIMatch_Score_Breakdown_2015_Alliance::setContainerCountLevel6(const qint32 &container_count_level6) {
    m_container_count_level6 = container_count_level6;
    m_container_count_level6_isSet = true;
}

bool OAIMatch_Score_Breakdown_2015_Alliance::is_container_count_level6_Set() const{
    return m_container_count_level6_isSet;
}

bool OAIMatch_Score_Breakdown_2015_Alliance::is_container_count_level6_Valid() const{
    return m_container_count_level6_isValid;
}

qint32 OAIMatch_Score_Breakdown_2015_Alliance::getContainerPoints() const {
    return m_container_points;
}
void OAIMatch_Score_Breakdown_2015_Alliance::setContainerPoints(const qint32 &container_points) {
    m_container_points = container_points;
    m_container_points_isSet = true;
}

bool OAIMatch_Score_Breakdown_2015_Alliance::is_container_points_Set() const{
    return m_container_points_isSet;
}

bool OAIMatch_Score_Breakdown_2015_Alliance::is_container_points_Valid() const{
    return m_container_points_isValid;
}

bool OAIMatch_Score_Breakdown_2015_Alliance::isContainerSet() const {
    return m_container_set;
}
void OAIMatch_Score_Breakdown_2015_Alliance::setContainerSet(const bool &container_set) {
    m_container_set = container_set;
    m_container_set_isSet = true;
}

bool OAIMatch_Score_Breakdown_2015_Alliance::is_container_set_Set() const{
    return m_container_set_isSet;
}

bool OAIMatch_Score_Breakdown_2015_Alliance::is_container_set_Valid() const{
    return m_container_set_isValid;
}

qint32 OAIMatch_Score_Breakdown_2015_Alliance::getFoulCount() const {
    return m_foul_count;
}
void OAIMatch_Score_Breakdown_2015_Alliance::setFoulCount(const qint32 &foul_count) {
    m_foul_count = foul_count;
    m_foul_count_isSet = true;
}

bool OAIMatch_Score_Breakdown_2015_Alliance::is_foul_count_Set() const{
    return m_foul_count_isSet;
}

bool OAIMatch_Score_Breakdown_2015_Alliance::is_foul_count_Valid() const{
    return m_foul_count_isValid;
}

qint32 OAIMatch_Score_Breakdown_2015_Alliance::getFoulPoints() const {
    return m_foul_points;
}
void OAIMatch_Score_Breakdown_2015_Alliance::setFoulPoints(const qint32 &foul_points) {
    m_foul_points = foul_points;
    m_foul_points_isSet = true;
}

bool OAIMatch_Score_Breakdown_2015_Alliance::is_foul_points_Set() const{
    return m_foul_points_isSet;
}

bool OAIMatch_Score_Breakdown_2015_Alliance::is_foul_points_Valid() const{
    return m_foul_points_isValid;
}

qint32 OAIMatch_Score_Breakdown_2015_Alliance::getLitterCountContainer() const {
    return m_litter_count_container;
}
void OAIMatch_Score_Breakdown_2015_Alliance::setLitterCountContainer(const qint32 &litter_count_container) {
    m_litter_count_container = litter_count_container;
    m_litter_count_container_isSet = true;
}

bool OAIMatch_Score_Breakdown_2015_Alliance::is_litter_count_container_Set() const{
    return m_litter_count_container_isSet;
}

bool OAIMatch_Score_Breakdown_2015_Alliance::is_litter_count_container_Valid() const{
    return m_litter_count_container_isValid;
}

qint32 OAIMatch_Score_Breakdown_2015_Alliance::getLitterCountLandfill() const {
    return m_litter_count_landfill;
}
void OAIMatch_Score_Breakdown_2015_Alliance::setLitterCountLandfill(const qint32 &litter_count_landfill) {
    m_litter_count_landfill = litter_count_landfill;
    m_litter_count_landfill_isSet = true;
}

bool OAIMatch_Score_Breakdown_2015_Alliance::is_litter_count_landfill_Set() const{
    return m_litter_count_landfill_isSet;
}

bool OAIMatch_Score_Breakdown_2015_Alliance::is_litter_count_landfill_Valid() const{
    return m_litter_count_landfill_isValid;
}

qint32 OAIMatch_Score_Breakdown_2015_Alliance::getLitterCountUnprocessed() const {
    return m_litter_count_unprocessed;
}
void OAIMatch_Score_Breakdown_2015_Alliance::setLitterCountUnprocessed(const qint32 &litter_count_unprocessed) {
    m_litter_count_unprocessed = litter_count_unprocessed;
    m_litter_count_unprocessed_isSet = true;
}

bool OAIMatch_Score_Breakdown_2015_Alliance::is_litter_count_unprocessed_Set() const{
    return m_litter_count_unprocessed_isSet;
}

bool OAIMatch_Score_Breakdown_2015_Alliance::is_litter_count_unprocessed_Valid() const{
    return m_litter_count_unprocessed_isValid;
}

qint32 OAIMatch_Score_Breakdown_2015_Alliance::getLitterPoints() const {
    return m_litter_points;
}
void OAIMatch_Score_Breakdown_2015_Alliance::setLitterPoints(const qint32 &litter_points) {
    m_litter_points = litter_points;
    m_litter_points_isSet = true;
}

bool OAIMatch_Score_Breakdown_2015_Alliance::is_litter_points_Set() const{
    return m_litter_points_isSet;
}

bool OAIMatch_Score_Breakdown_2015_Alliance::is_litter_points_Valid() const{
    return m_litter_points_isValid;
}

bool OAIMatch_Score_Breakdown_2015_Alliance::isRobotSet() const {
    return m_robot_set;
}
void OAIMatch_Score_Breakdown_2015_Alliance::setRobotSet(const bool &robot_set) {
    m_robot_set = robot_set;
    m_robot_set_isSet = true;
}

bool OAIMatch_Score_Breakdown_2015_Alliance::is_robot_set_Set() const{
    return m_robot_set_isSet;
}

bool OAIMatch_Score_Breakdown_2015_Alliance::is_robot_set_Valid() const{
    return m_robot_set_isValid;
}

qint32 OAIMatch_Score_Breakdown_2015_Alliance::getTeleopPoints() const {
    return m_teleop_points;
}
void OAIMatch_Score_Breakdown_2015_Alliance::setTeleopPoints(const qint32 &teleop_points) {
    m_teleop_points = teleop_points;
    m_teleop_points_isSet = true;
}

bool OAIMatch_Score_Breakdown_2015_Alliance::is_teleop_points_Set() const{
    return m_teleop_points_isSet;
}

bool OAIMatch_Score_Breakdown_2015_Alliance::is_teleop_points_Valid() const{
    return m_teleop_points_isValid;
}

qint32 OAIMatch_Score_Breakdown_2015_Alliance::getTotalPoints() const {
    return m_total_points;
}
void OAIMatch_Score_Breakdown_2015_Alliance::setTotalPoints(const qint32 &total_points) {
    m_total_points = total_points;
    m_total_points_isSet = true;
}

bool OAIMatch_Score_Breakdown_2015_Alliance::is_total_points_Set() const{
    return m_total_points_isSet;
}

bool OAIMatch_Score_Breakdown_2015_Alliance::is_total_points_Valid() const{
    return m_total_points_isValid;
}

qint32 OAIMatch_Score_Breakdown_2015_Alliance::getToteCountFar() const {
    return m_tote_count_far;
}
void OAIMatch_Score_Breakdown_2015_Alliance::setToteCountFar(const qint32 &tote_count_far) {
    m_tote_count_far = tote_count_far;
    m_tote_count_far_isSet = true;
}

bool OAIMatch_Score_Breakdown_2015_Alliance::is_tote_count_far_Set() const{
    return m_tote_count_far_isSet;
}

bool OAIMatch_Score_Breakdown_2015_Alliance::is_tote_count_far_Valid() const{
    return m_tote_count_far_isValid;
}

qint32 OAIMatch_Score_Breakdown_2015_Alliance::getToteCountNear() const {
    return m_tote_count_near;
}
void OAIMatch_Score_Breakdown_2015_Alliance::setToteCountNear(const qint32 &tote_count_near) {
    m_tote_count_near = tote_count_near;
    m_tote_count_near_isSet = true;
}

bool OAIMatch_Score_Breakdown_2015_Alliance::is_tote_count_near_Set() const{
    return m_tote_count_near_isSet;
}

bool OAIMatch_Score_Breakdown_2015_Alliance::is_tote_count_near_Valid() const{
    return m_tote_count_near_isValid;
}

qint32 OAIMatch_Score_Breakdown_2015_Alliance::getTotePoints() const {
    return m_tote_points;
}
void OAIMatch_Score_Breakdown_2015_Alliance::setTotePoints(const qint32 &tote_points) {
    m_tote_points = tote_points;
    m_tote_points_isSet = true;
}

bool OAIMatch_Score_Breakdown_2015_Alliance::is_tote_points_Set() const{
    return m_tote_points_isSet;
}

bool OAIMatch_Score_Breakdown_2015_Alliance::is_tote_points_Valid() const{
    return m_tote_points_isValid;
}

bool OAIMatch_Score_Breakdown_2015_Alliance::isToteSet() const {
    return m_tote_set;
}
void OAIMatch_Score_Breakdown_2015_Alliance::setToteSet(const bool &tote_set) {
    m_tote_set = tote_set;
    m_tote_set_isSet = true;
}

bool OAIMatch_Score_Breakdown_2015_Alliance::is_tote_set_Set() const{
    return m_tote_set_isSet;
}

bool OAIMatch_Score_Breakdown_2015_Alliance::is_tote_set_Valid() const{
    return m_tote_set_isValid;
}

bool OAIMatch_Score_Breakdown_2015_Alliance::isToteStack() const {
    return m_tote_stack;
}
void OAIMatch_Score_Breakdown_2015_Alliance::setToteStack(const bool &tote_stack) {
    m_tote_stack = tote_stack;
    m_tote_stack_isSet = true;
}

bool OAIMatch_Score_Breakdown_2015_Alliance::is_tote_stack_Set() const{
    return m_tote_stack_isSet;
}

bool OAIMatch_Score_Breakdown_2015_Alliance::is_tote_stack_Valid() const{
    return m_tote_stack_isValid;
}

bool OAIMatch_Score_Breakdown_2015_Alliance::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_adjust_points_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auto_points_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_container_count_level1_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_container_count_level2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_container_count_level3_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_container_count_level4_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_container_count_level5_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_container_count_level6_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_container_points_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_container_set_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_foul_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_foul_points_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_litter_count_container_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_litter_count_landfill_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_litter_count_unprocessed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_litter_points_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_robot_set_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_teleop_points_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_points_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tote_count_far_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tote_count_near_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tote_points_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tote_set_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tote_stack_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMatch_Score_Breakdown_2015_Alliance::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
