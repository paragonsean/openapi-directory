/**
 * The Blue Alliance API v3
 * # Overview    Information and statistics about FIRST Robotics Competition teams and events.   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).
 *
 * The version of the OpenAPI document: 3.8.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIZebra_team.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIZebra_team::OAIZebra_team(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIZebra_team::OAIZebra_team() {
    this->initializeModel();
}

OAIZebra_team::~OAIZebra_team() {}

void OAIZebra_team::initializeModel() {

    m_team_key_isSet = false;
    m_team_key_isValid = false;

    m_xs_isSet = false;
    m_xs_isValid = false;

    m_ys_isSet = false;
    m_ys_isValid = false;
}

void OAIZebra_team::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIZebra_team::fromJsonObject(QJsonObject json) {

    m_team_key_isValid = ::OpenAPI::fromJsonValue(m_team_key, json[QString("team_key")]);
    m_team_key_isSet = !json[QString("team_key")].isNull() && m_team_key_isValid;

    m_xs_isValid = ::OpenAPI::fromJsonValue(m_xs, json[QString("xs")]);
    m_xs_isSet = !json[QString("xs")].isNull() && m_xs_isValid;

    m_ys_isValid = ::OpenAPI::fromJsonValue(m_ys, json[QString("ys")]);
    m_ys_isSet = !json[QString("ys")].isNull() && m_ys_isValid;
}

QString OAIZebra_team::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIZebra_team::asJsonObject() const {
    QJsonObject obj;
    if (m_team_key_isSet) {
        obj.insert(QString("team_key"), ::OpenAPI::toJsonValue(m_team_key));
    }
    if (m_xs.size() > 0) {
        obj.insert(QString("xs"), ::OpenAPI::toJsonValue(m_xs));
    }
    if (m_ys.size() > 0) {
        obj.insert(QString("ys"), ::OpenAPI::toJsonValue(m_ys));
    }
    return obj;
}

QString OAIZebra_team::getTeamKey() const {
    return m_team_key;
}
void OAIZebra_team::setTeamKey(const QString &team_key) {
    m_team_key = team_key;
    m_team_key_isSet = true;
}

bool OAIZebra_team::is_team_key_Set() const{
    return m_team_key_isSet;
}

bool OAIZebra_team::is_team_key_Valid() const{
    return m_team_key_isValid;
}

QList<double> OAIZebra_team::getXs() const {
    return m_xs;
}
void OAIZebra_team::setXs(const QList<double> &xs) {
    m_xs = xs;
    m_xs_isSet = true;
}

bool OAIZebra_team::is_xs_Set() const{
    return m_xs_isSet;
}

bool OAIZebra_team::is_xs_Valid() const{
    return m_xs_isValid;
}

QList<double> OAIZebra_team::getYs() const {
    return m_ys;
}
void OAIZebra_team::setYs(const QList<double> &ys) {
    m_ys = ys;
    m_ys_isSet = true;
}

bool OAIZebra_team::is_ys_Set() const{
    return m_ys_isSet;
}

bool OAIZebra_team::is_ys_Valid() const{
    return m_ys_isValid;
}

bool OAIZebra_team::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_team_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_xs.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_ys.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIZebra_team::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_team_key_isValid && m_xs_isValid && m_ys_isValid && true;
}

} // namespace OpenAPI
