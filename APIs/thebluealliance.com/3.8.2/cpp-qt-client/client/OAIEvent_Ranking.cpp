/**
 * The Blue Alliance API v3
 * # Overview    Information and statistics about FIRST Robotics Competition teams and events.   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).
 *
 * The version of the OpenAPI document: 3.8.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEvent_Ranking.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEvent_Ranking::OAIEvent_Ranking(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEvent_Ranking::OAIEvent_Ranking() {
    this->initializeModel();
}

OAIEvent_Ranking::~OAIEvent_Ranking() {}

void OAIEvent_Ranking::initializeModel() {

    m_extra_stats_info_isSet = false;
    m_extra_stats_info_isValid = false;

    m_rankings_isSet = false;
    m_rankings_isValid = false;

    m_sort_order_info_isSet = false;
    m_sort_order_info_isValid = false;
}

void OAIEvent_Ranking::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEvent_Ranking::fromJsonObject(QJsonObject json) {

    m_extra_stats_info_isValid = ::OpenAPI::fromJsonValue(m_extra_stats_info, json[QString("extra_stats_info")]);
    m_extra_stats_info_isSet = !json[QString("extra_stats_info")].isNull() && m_extra_stats_info_isValid;

    m_rankings_isValid = ::OpenAPI::fromJsonValue(m_rankings, json[QString("rankings")]);
    m_rankings_isSet = !json[QString("rankings")].isNull() && m_rankings_isValid;

    m_sort_order_info_isValid = ::OpenAPI::fromJsonValue(m_sort_order_info, json[QString("sort_order_info")]);
    m_sort_order_info_isSet = !json[QString("sort_order_info")].isNull() && m_sort_order_info_isValid;
}

QString OAIEvent_Ranking::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEvent_Ranking::asJsonObject() const {
    QJsonObject obj;
    if (m_extra_stats_info.size() > 0) {
        obj.insert(QString("extra_stats_info"), ::OpenAPI::toJsonValue(m_extra_stats_info));
    }
    if (m_rankings.size() > 0) {
        obj.insert(QString("rankings"), ::OpenAPI::toJsonValue(m_rankings));
    }
    if (m_sort_order_info.size() > 0) {
        obj.insert(QString("sort_order_info"), ::OpenAPI::toJsonValue(m_sort_order_info));
    }
    return obj;
}

QList<OAIEvent_Ranking_extra_stats_info_inner> OAIEvent_Ranking::getExtraStatsInfo() const {
    return m_extra_stats_info;
}
void OAIEvent_Ranking::setExtraStatsInfo(const QList<OAIEvent_Ranking_extra_stats_info_inner> &extra_stats_info) {
    m_extra_stats_info = extra_stats_info;
    m_extra_stats_info_isSet = true;
}

bool OAIEvent_Ranking::is_extra_stats_info_Set() const{
    return m_extra_stats_info_isSet;
}

bool OAIEvent_Ranking::is_extra_stats_info_Valid() const{
    return m_extra_stats_info_isValid;
}

QList<OAIEvent_Ranking_rankings_inner> OAIEvent_Ranking::getRankings() const {
    return m_rankings;
}
void OAIEvent_Ranking::setRankings(const QList<OAIEvent_Ranking_rankings_inner> &rankings) {
    m_rankings = rankings;
    m_rankings_isSet = true;
}

bool OAIEvent_Ranking::is_rankings_Set() const{
    return m_rankings_isSet;
}

bool OAIEvent_Ranking::is_rankings_Valid() const{
    return m_rankings_isValid;
}

QList<OAIEvent_Ranking_sort_order_info_inner> OAIEvent_Ranking::getSortOrderInfo() const {
    return m_sort_order_info;
}
void OAIEvent_Ranking::setSortOrderInfo(const QList<OAIEvent_Ranking_sort_order_info_inner> &sort_order_info) {
    m_sort_order_info = sort_order_info;
    m_sort_order_info_isSet = true;
}

bool OAIEvent_Ranking::is_sort_order_info_Set() const{
    return m_sort_order_info_isSet;
}

bool OAIEvent_Ranking::is_sort_order_info_Valid() const{
    return m_sort_order_info_isValid;
}

bool OAIEvent_Ranking::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_extra_stats_info.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_rankings.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_sort_order_info.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEvent_Ranking::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_rankings_isValid && m_sort_order_info_isValid && true;
}

} // namespace OpenAPI
