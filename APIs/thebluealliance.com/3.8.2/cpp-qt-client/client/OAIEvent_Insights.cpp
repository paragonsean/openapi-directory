/**
 * The Blue Alliance API v3
 * # Overview    Information and statistics about FIRST Robotics Competition teams and events.   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).
 *
 * The version of the OpenAPI document: 3.8.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEvent_Insights.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEvent_Insights::OAIEvent_Insights(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEvent_Insights::OAIEvent_Insights() {
    this->initializeModel();
}

OAIEvent_Insights::~OAIEvent_Insights() {}

void OAIEvent_Insights::initializeModel() {

    m_playoff_isSet = false;
    m_playoff_isValid = false;

    m_qual_isSet = false;
    m_qual_isValid = false;
}

void OAIEvent_Insights::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEvent_Insights::fromJsonObject(QJsonObject json) {

    m_playoff_isValid = ::OpenAPI::fromJsonValue(m_playoff, json[QString("playoff")]);
    m_playoff_isSet = !json[QString("playoff")].isNull() && m_playoff_isValid;

    m_qual_isValid = ::OpenAPI::fromJsonValue(m_qual, json[QString("qual")]);
    m_qual_isSet = !json[QString("qual")].isNull() && m_qual_isValid;
}

QString OAIEvent_Insights::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEvent_Insights::asJsonObject() const {
    QJsonObject obj;
    if (m_playoff_isSet) {
        obj.insert(QString("playoff"), ::OpenAPI::toJsonValue(m_playoff));
    }
    if (m_qual_isSet) {
        obj.insert(QString("qual"), ::OpenAPI::toJsonValue(m_qual));
    }
    return obj;
}

OAIObject OAIEvent_Insights::getPlayoff() const {
    return m_playoff;
}
void OAIEvent_Insights::setPlayoff(const OAIObject &playoff) {
    m_playoff = playoff;
    m_playoff_isSet = true;
}

bool OAIEvent_Insights::is_playoff_Set() const{
    return m_playoff_isSet;
}

bool OAIEvent_Insights::is_playoff_Valid() const{
    return m_playoff_isValid;
}

OAIObject OAIEvent_Insights::getQual() const {
    return m_qual;
}
void OAIEvent_Insights::setQual(const OAIObject &qual) {
    m_qual = qual;
    m_qual_isSet = true;
}

bool OAIEvent_Insights::is_qual_Set() const{
    return m_qual_isSet;
}

bool OAIEvent_Insights::is_qual_Valid() const{
    return m_qual_isValid;
}

bool OAIEvent_Insights::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_playoff_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_qual_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEvent_Insights::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
