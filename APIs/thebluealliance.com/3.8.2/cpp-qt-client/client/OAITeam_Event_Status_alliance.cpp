/**
 * The Blue Alliance API v3
 * # Overview    Information and statistics about FIRST Robotics Competition teams and events.   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).
 *
 * The version of the OpenAPI document: 3.8.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITeam_Event_Status_alliance.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITeam_Event_Status_alliance::OAITeam_Event_Status_alliance(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITeam_Event_Status_alliance::OAITeam_Event_Status_alliance() {
    this->initializeModel();
}

OAITeam_Event_Status_alliance::~OAITeam_Event_Status_alliance() {}

void OAITeam_Event_Status_alliance::initializeModel() {

    m_backup_isSet = false;
    m_backup_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_number_isSet = false;
    m_number_isValid = false;

    m_pick_isSet = false;
    m_pick_isValid = false;
}

void OAITeam_Event_Status_alliance::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITeam_Event_Status_alliance::fromJsonObject(QJsonObject json) {

    m_backup_isValid = ::OpenAPI::fromJsonValue(m_backup, json[QString("backup")]);
    m_backup_isSet = !json[QString("backup")].isNull() && m_backup_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_number_isValid = ::OpenAPI::fromJsonValue(m_number, json[QString("number")]);
    m_number_isSet = !json[QString("number")].isNull() && m_number_isValid;

    m_pick_isValid = ::OpenAPI::fromJsonValue(m_pick, json[QString("pick")]);
    m_pick_isSet = !json[QString("pick")].isNull() && m_pick_isValid;
}

QString OAITeam_Event_Status_alliance::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITeam_Event_Status_alliance::asJsonObject() const {
    QJsonObject obj;
    if (m_backup.isSet()) {
        obj.insert(QString("backup"), ::OpenAPI::toJsonValue(m_backup));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_number_isSet) {
        obj.insert(QString("number"), ::OpenAPI::toJsonValue(m_number));
    }
    if (m_pick_isSet) {
        obj.insert(QString("pick"), ::OpenAPI::toJsonValue(m_pick));
    }
    return obj;
}

OAITeam_Event_Status_alliance_backup OAITeam_Event_Status_alliance::getBackup() const {
    return m_backup;
}
void OAITeam_Event_Status_alliance::setBackup(const OAITeam_Event_Status_alliance_backup &backup) {
    m_backup = backup;
    m_backup_isSet = true;
}

bool OAITeam_Event_Status_alliance::is_backup_Set() const{
    return m_backup_isSet;
}

bool OAITeam_Event_Status_alliance::is_backup_Valid() const{
    return m_backup_isValid;
}

QString OAITeam_Event_Status_alliance::getName() const {
    return m_name;
}
void OAITeam_Event_Status_alliance::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAITeam_Event_Status_alliance::is_name_Set() const{
    return m_name_isSet;
}

bool OAITeam_Event_Status_alliance::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAITeam_Event_Status_alliance::getNumber() const {
    return m_number;
}
void OAITeam_Event_Status_alliance::setNumber(const qint32 &number) {
    m_number = number;
    m_number_isSet = true;
}

bool OAITeam_Event_Status_alliance::is_number_Set() const{
    return m_number_isSet;
}

bool OAITeam_Event_Status_alliance::is_number_Valid() const{
    return m_number_isValid;
}

qint32 OAITeam_Event_Status_alliance::getPick() const {
    return m_pick;
}
void OAITeam_Event_Status_alliance::setPick(const qint32 &pick) {
    m_pick = pick;
    m_pick_isSet = true;
}

bool OAITeam_Event_Status_alliance::is_pick_Set() const{
    return m_pick_isSet;
}

bool OAITeam_Event_Status_alliance::is_pick_Valid() const{
    return m_pick_isValid;
}

bool OAITeam_Event_Status_alliance::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_backup.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pick_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITeam_Event_Status_alliance::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_number_isValid && m_pick_isValid && true;
}

} // namespace OpenAPI
