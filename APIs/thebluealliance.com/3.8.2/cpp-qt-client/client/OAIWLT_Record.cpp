/**
 * The Blue Alliance API v3
 * # Overview    Information and statistics about FIRST Robotics Competition teams and events.   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).
 *
 * The version of the OpenAPI document: 3.8.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWLT_Record.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWLT_Record::OAIWLT_Record(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWLT_Record::OAIWLT_Record() {
    this->initializeModel();
}

OAIWLT_Record::~OAIWLT_Record() {}

void OAIWLT_Record::initializeModel() {

    m_losses_isSet = false;
    m_losses_isValid = false;

    m_ties_isSet = false;
    m_ties_isValid = false;

    m_wins_isSet = false;
    m_wins_isValid = false;
}

void OAIWLT_Record::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWLT_Record::fromJsonObject(QJsonObject json) {

    m_losses_isValid = ::OpenAPI::fromJsonValue(m_losses, json[QString("losses")]);
    m_losses_isSet = !json[QString("losses")].isNull() && m_losses_isValid;

    m_ties_isValid = ::OpenAPI::fromJsonValue(m_ties, json[QString("ties")]);
    m_ties_isSet = !json[QString("ties")].isNull() && m_ties_isValid;

    m_wins_isValid = ::OpenAPI::fromJsonValue(m_wins, json[QString("wins")]);
    m_wins_isSet = !json[QString("wins")].isNull() && m_wins_isValid;
}

QString OAIWLT_Record::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWLT_Record::asJsonObject() const {
    QJsonObject obj;
    if (m_losses_isSet) {
        obj.insert(QString("losses"), ::OpenAPI::toJsonValue(m_losses));
    }
    if (m_ties_isSet) {
        obj.insert(QString("ties"), ::OpenAPI::toJsonValue(m_ties));
    }
    if (m_wins_isSet) {
        obj.insert(QString("wins"), ::OpenAPI::toJsonValue(m_wins));
    }
    return obj;
}

qint32 OAIWLT_Record::getLosses() const {
    return m_losses;
}
void OAIWLT_Record::setLosses(const qint32 &losses) {
    m_losses = losses;
    m_losses_isSet = true;
}

bool OAIWLT_Record::is_losses_Set() const{
    return m_losses_isSet;
}

bool OAIWLT_Record::is_losses_Valid() const{
    return m_losses_isValid;
}

qint32 OAIWLT_Record::getTies() const {
    return m_ties;
}
void OAIWLT_Record::setTies(const qint32 &ties) {
    m_ties = ties;
    m_ties_isSet = true;
}

bool OAIWLT_Record::is_ties_Set() const{
    return m_ties_isSet;
}

bool OAIWLT_Record::is_ties_Valid() const{
    return m_ties_isValid;
}

qint32 OAIWLT_Record::getWins() const {
    return m_wins;
}
void OAIWLT_Record::setWins(const qint32 &wins) {
    m_wins = wins;
    m_wins_isSet = true;
}

bool OAIWLT_Record::is_wins_Set() const{
    return m_wins_isSet;
}

bool OAIWLT_Record::is_wins_Valid() const{
    return m_wins_isValid;
}

bool OAIWLT_Record::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_losses_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ties_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_wins_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWLT_Record::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_losses_isValid && m_ties_isValid && m_wins_isValid && true;
}

} // namespace OpenAPI
