/**
 * The Blue Alliance API v3
 * # Overview    Information and statistics about FIRST Robotics Competition teams and events.   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).
 *
 * The version of the OpenAPI document: 3.8.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMatch_alliance.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMatch_alliance::OAIMatch_alliance(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMatch_alliance::OAIMatch_alliance() {
    this->initializeModel();
}

OAIMatch_alliance::~OAIMatch_alliance() {}

void OAIMatch_alliance::initializeModel() {

    m_dq_team_keys_isSet = false;
    m_dq_team_keys_isValid = false;

    m_score_isSet = false;
    m_score_isValid = false;

    m_surrogate_team_keys_isSet = false;
    m_surrogate_team_keys_isValid = false;

    m_team_keys_isSet = false;
    m_team_keys_isValid = false;
}

void OAIMatch_alliance::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMatch_alliance::fromJsonObject(QJsonObject json) {

    m_dq_team_keys_isValid = ::OpenAPI::fromJsonValue(m_dq_team_keys, json[QString("dq_team_keys")]);
    m_dq_team_keys_isSet = !json[QString("dq_team_keys")].isNull() && m_dq_team_keys_isValid;

    m_score_isValid = ::OpenAPI::fromJsonValue(m_score, json[QString("score")]);
    m_score_isSet = !json[QString("score")].isNull() && m_score_isValid;

    m_surrogate_team_keys_isValid = ::OpenAPI::fromJsonValue(m_surrogate_team_keys, json[QString("surrogate_team_keys")]);
    m_surrogate_team_keys_isSet = !json[QString("surrogate_team_keys")].isNull() && m_surrogate_team_keys_isValid;

    m_team_keys_isValid = ::OpenAPI::fromJsonValue(m_team_keys, json[QString("team_keys")]);
    m_team_keys_isSet = !json[QString("team_keys")].isNull() && m_team_keys_isValid;
}

QString OAIMatch_alliance::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMatch_alliance::asJsonObject() const {
    QJsonObject obj;
    if (m_dq_team_keys.size() > 0) {
        obj.insert(QString("dq_team_keys"), ::OpenAPI::toJsonValue(m_dq_team_keys));
    }
    if (m_score_isSet) {
        obj.insert(QString("score"), ::OpenAPI::toJsonValue(m_score));
    }
    if (m_surrogate_team_keys.size() > 0) {
        obj.insert(QString("surrogate_team_keys"), ::OpenAPI::toJsonValue(m_surrogate_team_keys));
    }
    if (m_team_keys.size() > 0) {
        obj.insert(QString("team_keys"), ::OpenAPI::toJsonValue(m_team_keys));
    }
    return obj;
}

QList<QString> OAIMatch_alliance::getDqTeamKeys() const {
    return m_dq_team_keys;
}
void OAIMatch_alliance::setDqTeamKeys(const QList<QString> &dq_team_keys) {
    m_dq_team_keys = dq_team_keys;
    m_dq_team_keys_isSet = true;
}

bool OAIMatch_alliance::is_dq_team_keys_Set() const{
    return m_dq_team_keys_isSet;
}

bool OAIMatch_alliance::is_dq_team_keys_Valid() const{
    return m_dq_team_keys_isValid;
}

qint32 OAIMatch_alliance::getScore() const {
    return m_score;
}
void OAIMatch_alliance::setScore(const qint32 &score) {
    m_score = score;
    m_score_isSet = true;
}

bool OAIMatch_alliance::is_score_Set() const{
    return m_score_isSet;
}

bool OAIMatch_alliance::is_score_Valid() const{
    return m_score_isValid;
}

QList<QString> OAIMatch_alliance::getSurrogateTeamKeys() const {
    return m_surrogate_team_keys;
}
void OAIMatch_alliance::setSurrogateTeamKeys(const QList<QString> &surrogate_team_keys) {
    m_surrogate_team_keys = surrogate_team_keys;
    m_surrogate_team_keys_isSet = true;
}

bool OAIMatch_alliance::is_surrogate_team_keys_Set() const{
    return m_surrogate_team_keys_isSet;
}

bool OAIMatch_alliance::is_surrogate_team_keys_Valid() const{
    return m_surrogate_team_keys_isValid;
}

QList<QString> OAIMatch_alliance::getTeamKeys() const {
    return m_team_keys;
}
void OAIMatch_alliance::setTeamKeys(const QList<QString> &team_keys) {
    m_team_keys = team_keys;
    m_team_keys_isSet = true;
}

bool OAIMatch_alliance::is_team_keys_Set() const{
    return m_team_keys_isSet;
}

bool OAIMatch_alliance::is_team_keys_Valid() const{
    return m_team_keys_isValid;
}

bool OAIMatch_alliance::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_dq_team_keys.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_surrogate_team_keys.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_team_keys.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMatch_alliance::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_score_isValid && m_team_keys_isValid && true;
}

} // namespace OpenAPI
