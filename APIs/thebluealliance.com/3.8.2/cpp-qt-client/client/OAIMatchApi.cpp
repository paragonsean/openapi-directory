/**
 * The Blue Alliance API v3
 * # Overview    Information and statistics about FIRST Robotics Competition teams and events.   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).
 *
 * The version of the OpenAPI document: 3.8.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMatchApi.h"
#include "OAIServerConfiguration.h"
#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAIMatchApi::OAIMatchApi(const int timeOut)
    : _timeOut(timeOut),
      _manager(nullptr),
      _isResponseCompressionEnabled(false),
      _isRequestCompressionEnabled(false) {
    initializeServerConfigs();
}

OAIMatchApi::~OAIMatchApi() {
}

void OAIMatchApi::initializeServerConfigs() {
    //Default server
    QList<OAIServerConfiguration> defaultConf = QList<OAIServerConfiguration>();
    //varying endpoint server
    defaultConf.append(OAIServerConfiguration(
    QUrl("https://www.thebluealliance.com/api/v3"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("getEventMatchTimeseries", defaultConf);
    _serverIndices.insert("getEventMatchTimeseries", 0);
    _serverConfigs.insert("getEventMatchesKeys", defaultConf);
    _serverIndices.insert("getEventMatchesKeys", 0);
    _serverConfigs.insert("getEventMatchesSimple", defaultConf);
    _serverIndices.insert("getEventMatchesSimple", 0);
    _serverConfigs.insert("getEventMatches", defaultConf);
    _serverIndices.insert("getEventMatches", 0);
    _serverConfigs.insert("getMatch", defaultConf);
    _serverIndices.insert("getMatch", 0);
    _serverConfigs.insert("getMatchSimple", defaultConf);
    _serverIndices.insert("getMatchSimple", 0);
    _serverConfigs.insert("getMatchTimeseries", defaultConf);
    _serverIndices.insert("getMatchTimeseries", 0);
    _serverConfigs.insert("getMatchZebra", defaultConf);
    _serverIndices.insert("getMatchZebra", 0);
    _serverConfigs.insert("getTeamEventMatchesKeys", defaultConf);
    _serverIndices.insert("getTeamEventMatchesKeys", 0);
    _serverConfigs.insert("getTeamEventMatchesSimple", defaultConf);
    _serverIndices.insert("getTeamEventMatchesSimple", 0);
    _serverConfigs.insert("getTeamEventMatches", defaultConf);
    _serverIndices.insert("getTeamEventMatches", 0);
    _serverConfigs.insert("getTeamMatchesByYearKeys", defaultConf);
    _serverIndices.insert("getTeamMatchesByYearKeys", 0);
    _serverConfigs.insert("getTeamMatchesByYearSimple", defaultConf);
    _serverIndices.insert("getTeamMatchesByYearSimple", 0);
    _serverConfigs.insert("getTeamMatchesByYear", defaultConf);
    _serverIndices.insert("getTeamMatchesByYear", 0);
}

/**
* returns 0 on success and -1, -2 or -3 on failure.
* -1 when the variable does not exist and -2 if the value is not defined in the enum and -3 if the operation or server index is not found
*/
int OAIMatchApi::setDefaultServerValue(int serverIndex, const QString &operation, const QString &variable, const QString &value) {
    auto it = _serverConfigs.find(operation);
    if (it != _serverConfigs.end() && serverIndex < it.value().size()) {
      return _serverConfigs[operation][serverIndex].setDefaultValue(variable,value);
    }
    return -3;
}
void OAIMatchApi::setServerIndex(const QString &operation, int serverIndex) {
    if (_serverIndices.contains(operation) && serverIndex < _serverConfigs.find(operation).value().size()) {
        _serverIndices[operation] = serverIndex;
    }
}

void OAIMatchApi::setApiKey(const QString &apiKeyName, const QString &apiKey) {
    _apiKeys.insert(apiKeyName, apiKey);
}

void OAIMatchApi::setBearerToken(const QString &token) {
    _bearerToken = token;
}

void OAIMatchApi::setUsername(const QString &username) {
    _username = username;
}

void OAIMatchApi::setPassword(const QString &password) {
    _password = password;
}


void OAIMatchApi::setTimeOut(const int timeOut) {
    _timeOut = timeOut;
}

void OAIMatchApi::setWorkingDirectory(const QString &path) {
    _workingDirectory = path;
}

void OAIMatchApi::setNetworkAccessManager(QNetworkAccessManager* manager) {
    _manager = manager;
}

/**
    * Appends a new ServerConfiguration to the config map for a specific operation.
    * @param operation The id to the target operation.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    * returns the index of the new server config on success and -1 if the operation is not found
    */
int OAIMatchApi::addServerConfiguration(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    if (_serverConfigs.contains(operation)) {
        _serverConfigs[operation].append(OAIServerConfiguration(
                    url,
                    description,
                    variables));
        return _serverConfigs[operation].size()-1;
    } else {
        return -1;
    }
}

/**
    * Appends a new ServerConfiguration to the config map for a all operations and sets the index to that server.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIMatchApi::setNewServerForAllOperations(const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    for (auto keyIt = _serverIndices.keyBegin(); keyIt != _serverIndices.keyEnd(); keyIt++) {
        setServerIndex(*keyIt, addServerConfiguration(*keyIt, url, description, variables));
    }
}

/**
    * Appends a new ServerConfiguration to the config map for an operations and sets the index to that server.
    * @param URL A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIMatchApi::setNewServer(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    setServerIndex(operation, addServerConfiguration(operation, url, description, variables));
}

void OAIMatchApi::addHeaders(const QString &key, const QString &value) {
    _defaultHeaders.insert(key, value);
}

void OAIMatchApi::enableRequestCompression() {
    _isRequestCompressionEnabled = true;
}

void OAIMatchApi::enableResponseCompression() {
    _isResponseCompressionEnabled = true;
}

void OAIMatchApi::abortRequests() {
    Q_EMIT abortRequestsSignal();
}

QString OAIMatchApi::getParamStylePrefix(const QString &style) {
    if (style == "matrix") {
        return ";";
    } else if (style == "label") {
        return ".";
    } else if (style == "form") {
        return "&";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "&";
    } else if (style == "pipeDelimited") {
        return "&";
    } else {
        return "none";
    }
}

QString OAIMatchApi::getParamStyleSuffix(const QString &style) {
    if (style == "matrix") {
        return "=";
    } else if (style == "label") {
        return "";
    } else if (style == "form") {
        return "=";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "=";
    } else if (style == "pipeDelimited") {
        return "=";
    } else {
        return "none";
    }
}

QString OAIMatchApi::getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode) {

    if (style == "matrix") {
        return (isExplode) ? ";" + name + "=" : ",";

    } else if (style == "label") {
        return (isExplode) ? "." : ",";

    } else if (style == "form") {
        return (isExplode) ? "&" + name + "=" : ",";

    } else if (style == "simple") {
        return ",";
    } else if (style == "spaceDelimited") {
        return (isExplode) ? "&" + name + "=" : " ";

    } else if (style == "pipeDelimited") {
        return (isExplode) ? "&" + name + "=" : "|";

    } else if (style == "deepObject") {
        return (isExplode) ? "&" : "none";

    } else {
        return "none";
    }
}

void OAIMatchApi::getEventMatchTimeseries(const QString &event_key, const ::OpenAPI::OptionalParam<QString> &if_none_match) {
    QString fullPath = QString(_serverConfigs["getEventMatchTimeseries"][_serverIndices.value("getEventMatchTimeseries")].URL()+"/event/{event_key}/matches/timeseries");
    
    if (_apiKeys.contains("apiKey")) {
        addHeaders("apiKey",_apiKeys.find("apiKey").value());
    }
    
    
    {
        QString event_keyPathParam("{");
        event_keyPathParam.append("event_key").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "event_key", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"event_key"+pathSuffix : pathPrefix;
        fullPath.replace(event_keyPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(event_key)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (if_none_match.hasValue())
    {
        if (!::OpenAPI::toStringValue(if_none_match.value()).isEmpty()) {
            input.headers.insert("If-None-Match", ::OpenAPI::toStringValue(if_none_match.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIMatchApi::getEventMatchTimeseriesCallback);
    connect(this, &OAIMatchApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIMatchApi::getEventMatchTimeseriesCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<QString> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        QString val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getEventMatchTimeseriesSignal(output);
        Q_EMIT getEventMatchTimeseriesSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getEventMatchTimeseriesSignalE(output, error_type, error_str);
        Q_EMIT getEventMatchTimeseriesSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getEventMatchTimeseriesSignalError(output, error_type, error_str);
        Q_EMIT getEventMatchTimeseriesSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIMatchApi::getEventMatchesKeys(const QString &event_key, const ::OpenAPI::OptionalParam<QString> &if_none_match) {
    QString fullPath = QString(_serverConfigs["getEventMatchesKeys"][_serverIndices.value("getEventMatchesKeys")].URL()+"/event/{event_key}/matches/keys");
    
    if (_apiKeys.contains("apiKey")) {
        addHeaders("apiKey",_apiKeys.find("apiKey").value());
    }
    
    
    {
        QString event_keyPathParam("{");
        event_keyPathParam.append("event_key").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "event_key", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"event_key"+pathSuffix : pathPrefix;
        fullPath.replace(event_keyPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(event_key)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (if_none_match.hasValue())
    {
        if (!::OpenAPI::toStringValue(if_none_match.value()).isEmpty()) {
            input.headers.insert("If-None-Match", ::OpenAPI::toStringValue(if_none_match.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIMatchApi::getEventMatchesKeysCallback);
    connect(this, &OAIMatchApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIMatchApi::getEventMatchesKeysCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<QString> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        QString val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getEventMatchesKeysSignal(output);
        Q_EMIT getEventMatchesKeysSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getEventMatchesKeysSignalE(output, error_type, error_str);
        Q_EMIT getEventMatchesKeysSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getEventMatchesKeysSignalError(output, error_type, error_str);
        Q_EMIT getEventMatchesKeysSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIMatchApi::getEventMatchesSimple(const QString &event_key, const ::OpenAPI::OptionalParam<QString> &if_none_match) {
    QString fullPath = QString(_serverConfigs["getEventMatchesSimple"][_serverIndices.value("getEventMatchesSimple")].URL()+"/event/{event_key}/matches/simple");
    
    if (_apiKeys.contains("apiKey")) {
        addHeaders("apiKey",_apiKeys.find("apiKey").value());
    }
    
    
    {
        QString event_keyPathParam("{");
        event_keyPathParam.append("event_key").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "event_key", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"event_key"+pathSuffix : pathPrefix;
        fullPath.replace(event_keyPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(event_key)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (if_none_match.hasValue())
    {
        if (!::OpenAPI::toStringValue(if_none_match.value()).isEmpty()) {
            input.headers.insert("If-None-Match", ::OpenAPI::toStringValue(if_none_match.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIMatchApi::getEventMatchesSimpleCallback);
    connect(this, &OAIMatchApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIMatchApi::getEventMatchesSimpleCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAIMatch_Simple> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAIMatch_Simple val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getEventMatchesSimpleSignal(output);
        Q_EMIT getEventMatchesSimpleSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getEventMatchesSimpleSignalE(output, error_type, error_str);
        Q_EMIT getEventMatchesSimpleSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getEventMatchesSimpleSignalError(output, error_type, error_str);
        Q_EMIT getEventMatchesSimpleSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIMatchApi::getEventMatches(const QString &event_key, const ::OpenAPI::OptionalParam<QString> &if_none_match) {
    QString fullPath = QString(_serverConfigs["getEventMatches"][_serverIndices.value("getEventMatches")].URL()+"/event/{event_key}/matches");
    
    if (_apiKeys.contains("apiKey")) {
        addHeaders("apiKey",_apiKeys.find("apiKey").value());
    }
    
    
    {
        QString event_keyPathParam("{");
        event_keyPathParam.append("event_key").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "event_key", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"event_key"+pathSuffix : pathPrefix;
        fullPath.replace(event_keyPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(event_key)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (if_none_match.hasValue())
    {
        if (!::OpenAPI::toStringValue(if_none_match.value()).isEmpty()) {
            input.headers.insert("If-None-Match", ::OpenAPI::toStringValue(if_none_match.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIMatchApi::getEventMatchesCallback);
    connect(this, &OAIMatchApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIMatchApi::getEventMatchesCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAIMatch> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAIMatch val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getEventMatchesSignal(output);
        Q_EMIT getEventMatchesSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getEventMatchesSignalE(output, error_type, error_str);
        Q_EMIT getEventMatchesSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getEventMatchesSignalError(output, error_type, error_str);
        Q_EMIT getEventMatchesSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIMatchApi::getMatch(const QString &match_key, const ::OpenAPI::OptionalParam<QString> &if_none_match) {
    QString fullPath = QString(_serverConfigs["getMatch"][_serverIndices.value("getMatch")].URL()+"/match/{match_key}");
    
    if (_apiKeys.contains("apiKey")) {
        addHeaders("apiKey",_apiKeys.find("apiKey").value());
    }
    
    
    {
        QString match_keyPathParam("{");
        match_keyPathParam.append("match_key").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "match_key", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"match_key"+pathSuffix : pathPrefix;
        fullPath.replace(match_keyPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(match_key)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (if_none_match.hasValue())
    {
        if (!::OpenAPI::toStringValue(if_none_match.value()).isEmpty()) {
            input.headers.insert("If-None-Match", ::OpenAPI::toStringValue(if_none_match.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIMatchApi::getMatchCallback);
    connect(this, &OAIMatchApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIMatchApi::getMatchCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIMatch output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getMatchSignal(output);
        Q_EMIT getMatchSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getMatchSignalE(output, error_type, error_str);
        Q_EMIT getMatchSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getMatchSignalError(output, error_type, error_str);
        Q_EMIT getMatchSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIMatchApi::getMatchSimple(const QString &match_key, const ::OpenAPI::OptionalParam<QString> &if_none_match) {
    QString fullPath = QString(_serverConfigs["getMatchSimple"][_serverIndices.value("getMatchSimple")].URL()+"/match/{match_key}/simple");
    
    if (_apiKeys.contains("apiKey")) {
        addHeaders("apiKey",_apiKeys.find("apiKey").value());
    }
    
    
    {
        QString match_keyPathParam("{");
        match_keyPathParam.append("match_key").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "match_key", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"match_key"+pathSuffix : pathPrefix;
        fullPath.replace(match_keyPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(match_key)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (if_none_match.hasValue())
    {
        if (!::OpenAPI::toStringValue(if_none_match.value()).isEmpty()) {
            input.headers.insert("If-None-Match", ::OpenAPI::toStringValue(if_none_match.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIMatchApi::getMatchSimpleCallback);
    connect(this, &OAIMatchApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIMatchApi::getMatchSimpleCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIMatch_Simple output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getMatchSimpleSignal(output);
        Q_EMIT getMatchSimpleSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getMatchSimpleSignalE(output, error_type, error_str);
        Q_EMIT getMatchSimpleSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getMatchSimpleSignalError(output, error_type, error_str);
        Q_EMIT getMatchSimpleSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIMatchApi::getMatchTimeseries(const QString &match_key, const ::OpenAPI::OptionalParam<QString> &if_none_match) {
    QString fullPath = QString(_serverConfigs["getMatchTimeseries"][_serverIndices.value("getMatchTimeseries")].URL()+"/match/{match_key}/timeseries");
    
    if (_apiKeys.contains("apiKey")) {
        addHeaders("apiKey",_apiKeys.find("apiKey").value());
    }
    
    
    {
        QString match_keyPathParam("{");
        match_keyPathParam.append("match_key").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "match_key", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"match_key"+pathSuffix : pathPrefix;
        fullPath.replace(match_keyPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(match_key)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (if_none_match.hasValue())
    {
        if (!::OpenAPI::toStringValue(if_none_match.value()).isEmpty()) {
            input.headers.insert("If-None-Match", ::OpenAPI::toStringValue(if_none_match.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIMatchApi::getMatchTimeseriesCallback);
    connect(this, &OAIMatchApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIMatchApi::getMatchTimeseriesCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAIObject> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAIObject val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getMatchTimeseriesSignal(output);
        Q_EMIT getMatchTimeseriesSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getMatchTimeseriesSignalE(output, error_type, error_str);
        Q_EMIT getMatchTimeseriesSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getMatchTimeseriesSignalError(output, error_type, error_str);
        Q_EMIT getMatchTimeseriesSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIMatchApi::getMatchZebra(const QString &match_key, const ::OpenAPI::OptionalParam<QString> &if_none_match) {
    QString fullPath = QString(_serverConfigs["getMatchZebra"][_serverIndices.value("getMatchZebra")].URL()+"/match/{match_key}/zebra_motionworks");
    
    if (_apiKeys.contains("apiKey")) {
        addHeaders("apiKey",_apiKeys.find("apiKey").value());
    }
    
    
    {
        QString match_keyPathParam("{");
        match_keyPathParam.append("match_key").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "match_key", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"match_key"+pathSuffix : pathPrefix;
        fullPath.replace(match_keyPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(match_key)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (if_none_match.hasValue())
    {
        if (!::OpenAPI::toStringValue(if_none_match.value()).isEmpty()) {
            input.headers.insert("If-None-Match", ::OpenAPI::toStringValue(if_none_match.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIMatchApi::getMatchZebraCallback);
    connect(this, &OAIMatchApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIMatchApi::getMatchZebraCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIZebra output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getMatchZebraSignal(output);
        Q_EMIT getMatchZebraSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getMatchZebraSignalE(output, error_type, error_str);
        Q_EMIT getMatchZebraSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getMatchZebraSignalError(output, error_type, error_str);
        Q_EMIT getMatchZebraSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIMatchApi::getTeamEventMatchesKeys(const QString &team_key, const QString &event_key, const ::OpenAPI::OptionalParam<QString> &if_none_match) {
    QString fullPath = QString(_serverConfigs["getTeamEventMatchesKeys"][_serverIndices.value("getTeamEventMatchesKeys")].URL()+"/team/{team_key}/event/{event_key}/matches/keys");
    
    if (_apiKeys.contains("apiKey")) {
        addHeaders("apiKey",_apiKeys.find("apiKey").value());
    }
    
    
    {
        QString team_keyPathParam("{");
        team_keyPathParam.append("team_key").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "team_key", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"team_key"+pathSuffix : pathPrefix;
        fullPath.replace(team_keyPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(team_key)));
    }
    
    {
        QString event_keyPathParam("{");
        event_keyPathParam.append("event_key").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "event_key", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"event_key"+pathSuffix : pathPrefix;
        fullPath.replace(event_keyPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(event_key)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (if_none_match.hasValue())
    {
        if (!::OpenAPI::toStringValue(if_none_match.value()).isEmpty()) {
            input.headers.insert("If-None-Match", ::OpenAPI::toStringValue(if_none_match.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIMatchApi::getTeamEventMatchesKeysCallback);
    connect(this, &OAIMatchApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIMatchApi::getTeamEventMatchesKeysCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<QString> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        QString val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getTeamEventMatchesKeysSignal(output);
        Q_EMIT getTeamEventMatchesKeysSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getTeamEventMatchesKeysSignalE(output, error_type, error_str);
        Q_EMIT getTeamEventMatchesKeysSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getTeamEventMatchesKeysSignalError(output, error_type, error_str);
        Q_EMIT getTeamEventMatchesKeysSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIMatchApi::getTeamEventMatchesSimple(const QString &team_key, const QString &event_key, const ::OpenAPI::OptionalParam<QString> &if_none_match) {
    QString fullPath = QString(_serverConfigs["getTeamEventMatchesSimple"][_serverIndices.value("getTeamEventMatchesSimple")].URL()+"/team/{team_key}/event/{event_key}/matches/simple");
    
    if (_apiKeys.contains("apiKey")) {
        addHeaders("apiKey",_apiKeys.find("apiKey").value());
    }
    
    
    {
        QString team_keyPathParam("{");
        team_keyPathParam.append("team_key").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "team_key", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"team_key"+pathSuffix : pathPrefix;
        fullPath.replace(team_keyPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(team_key)));
    }
    
    {
        QString event_keyPathParam("{");
        event_keyPathParam.append("event_key").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "event_key", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"event_key"+pathSuffix : pathPrefix;
        fullPath.replace(event_keyPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(event_key)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (if_none_match.hasValue())
    {
        if (!::OpenAPI::toStringValue(if_none_match.value()).isEmpty()) {
            input.headers.insert("If-None-Match", ::OpenAPI::toStringValue(if_none_match.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIMatchApi::getTeamEventMatchesSimpleCallback);
    connect(this, &OAIMatchApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIMatchApi::getTeamEventMatchesSimpleCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAIMatch> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAIMatch val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getTeamEventMatchesSimpleSignal(output);
        Q_EMIT getTeamEventMatchesSimpleSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getTeamEventMatchesSimpleSignalE(output, error_type, error_str);
        Q_EMIT getTeamEventMatchesSimpleSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getTeamEventMatchesSimpleSignalError(output, error_type, error_str);
        Q_EMIT getTeamEventMatchesSimpleSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIMatchApi::getTeamEventMatches(const QString &team_key, const QString &event_key, const ::OpenAPI::OptionalParam<QString> &if_none_match) {
    QString fullPath = QString(_serverConfigs["getTeamEventMatches"][_serverIndices.value("getTeamEventMatches")].URL()+"/team/{team_key}/event/{event_key}/matches");
    
    if (_apiKeys.contains("apiKey")) {
        addHeaders("apiKey",_apiKeys.find("apiKey").value());
    }
    
    
    {
        QString team_keyPathParam("{");
        team_keyPathParam.append("team_key").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "team_key", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"team_key"+pathSuffix : pathPrefix;
        fullPath.replace(team_keyPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(team_key)));
    }
    
    {
        QString event_keyPathParam("{");
        event_keyPathParam.append("event_key").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "event_key", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"event_key"+pathSuffix : pathPrefix;
        fullPath.replace(event_keyPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(event_key)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (if_none_match.hasValue())
    {
        if (!::OpenAPI::toStringValue(if_none_match.value()).isEmpty()) {
            input.headers.insert("If-None-Match", ::OpenAPI::toStringValue(if_none_match.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIMatchApi::getTeamEventMatchesCallback);
    connect(this, &OAIMatchApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIMatchApi::getTeamEventMatchesCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAIMatch> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAIMatch val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getTeamEventMatchesSignal(output);
        Q_EMIT getTeamEventMatchesSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getTeamEventMatchesSignalE(output, error_type, error_str);
        Q_EMIT getTeamEventMatchesSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getTeamEventMatchesSignalError(output, error_type, error_str);
        Q_EMIT getTeamEventMatchesSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIMatchApi::getTeamMatchesByYearKeys(const QString &team_key, const qint32 &year, const ::OpenAPI::OptionalParam<QString> &if_none_match) {
    QString fullPath = QString(_serverConfigs["getTeamMatchesByYearKeys"][_serverIndices.value("getTeamMatchesByYearKeys")].URL()+"/team/{team_key}/matches/{year}/keys");
    
    if (_apiKeys.contains("apiKey")) {
        addHeaders("apiKey",_apiKeys.find("apiKey").value());
    }
    
    
    {
        QString team_keyPathParam("{");
        team_keyPathParam.append("team_key").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "team_key", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"team_key"+pathSuffix : pathPrefix;
        fullPath.replace(team_keyPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(team_key)));
    }
    
    {
        QString yearPathParam("{");
        yearPathParam.append("year").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "year", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"year"+pathSuffix : pathPrefix;
        fullPath.replace(yearPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(year)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (if_none_match.hasValue())
    {
        if (!::OpenAPI::toStringValue(if_none_match.value()).isEmpty()) {
            input.headers.insert("If-None-Match", ::OpenAPI::toStringValue(if_none_match.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIMatchApi::getTeamMatchesByYearKeysCallback);
    connect(this, &OAIMatchApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIMatchApi::getTeamMatchesByYearKeysCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<QString> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        QString val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getTeamMatchesByYearKeysSignal(output);
        Q_EMIT getTeamMatchesByYearKeysSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getTeamMatchesByYearKeysSignalE(output, error_type, error_str);
        Q_EMIT getTeamMatchesByYearKeysSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getTeamMatchesByYearKeysSignalError(output, error_type, error_str);
        Q_EMIT getTeamMatchesByYearKeysSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIMatchApi::getTeamMatchesByYearSimple(const QString &team_key, const qint32 &year, const ::OpenAPI::OptionalParam<QString> &if_none_match) {
    QString fullPath = QString(_serverConfigs["getTeamMatchesByYearSimple"][_serverIndices.value("getTeamMatchesByYearSimple")].URL()+"/team/{team_key}/matches/{year}/simple");
    
    if (_apiKeys.contains("apiKey")) {
        addHeaders("apiKey",_apiKeys.find("apiKey").value());
    }
    
    
    {
        QString team_keyPathParam("{");
        team_keyPathParam.append("team_key").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "team_key", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"team_key"+pathSuffix : pathPrefix;
        fullPath.replace(team_keyPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(team_key)));
    }
    
    {
        QString yearPathParam("{");
        yearPathParam.append("year").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "year", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"year"+pathSuffix : pathPrefix;
        fullPath.replace(yearPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(year)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (if_none_match.hasValue())
    {
        if (!::OpenAPI::toStringValue(if_none_match.value()).isEmpty()) {
            input.headers.insert("If-None-Match", ::OpenAPI::toStringValue(if_none_match.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIMatchApi::getTeamMatchesByYearSimpleCallback);
    connect(this, &OAIMatchApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIMatchApi::getTeamMatchesByYearSimpleCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAIMatch_Simple> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAIMatch_Simple val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getTeamMatchesByYearSimpleSignal(output);
        Q_EMIT getTeamMatchesByYearSimpleSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getTeamMatchesByYearSimpleSignalE(output, error_type, error_str);
        Q_EMIT getTeamMatchesByYearSimpleSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getTeamMatchesByYearSimpleSignalError(output, error_type, error_str);
        Q_EMIT getTeamMatchesByYearSimpleSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIMatchApi::getTeamMatchesByYear(const QString &team_key, const qint32 &year, const ::OpenAPI::OptionalParam<QString> &if_none_match) {
    QString fullPath = QString(_serverConfigs["getTeamMatchesByYear"][_serverIndices.value("getTeamMatchesByYear")].URL()+"/team/{team_key}/matches/{year}");
    
    if (_apiKeys.contains("apiKey")) {
        addHeaders("apiKey",_apiKeys.find("apiKey").value());
    }
    
    
    {
        QString team_keyPathParam("{");
        team_keyPathParam.append("team_key").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "team_key", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"team_key"+pathSuffix : pathPrefix;
        fullPath.replace(team_keyPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(team_key)));
    }
    
    {
        QString yearPathParam("{");
        yearPathParam.append("year").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "year", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"year"+pathSuffix : pathPrefix;
        fullPath.replace(yearPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(year)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (if_none_match.hasValue())
    {
        if (!::OpenAPI::toStringValue(if_none_match.value()).isEmpty()) {
            input.headers.insert("If-None-Match", ::OpenAPI::toStringValue(if_none_match.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIMatchApi::getTeamMatchesByYearCallback);
    connect(this, &OAIMatchApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIMatchApi::getTeamMatchesByYearCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAIMatch> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAIMatch val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getTeamMatchesByYearSignal(output);
        Q_EMIT getTeamMatchesByYearSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getTeamMatchesByYearSignalE(output, error_type, error_str);
        Q_EMIT getTeamMatchesByYearSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getTeamMatchesByYearSignalError(output, error_type, error_str);
        Q_EMIT getTeamMatchesByYearSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIMatchApi::tokenAvailable(){

    oauthToken token;
    switch (_OauthMethod) {
    case 1: //implicit flow
        token = _implicitFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _implicitFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 2: //authorization flow
        token = _authFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _authFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 3: //client credentials flow
        token = _credentialFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 4: //resource owner password flow
        token = _passwordFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    default:
        qDebug() << "No Oauth method set!";
        break;
    }
}
} // namespace OpenAPI
