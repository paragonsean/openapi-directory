/**
 * The Blue Alliance API v3
 * # Overview    Information and statistics about FIRST Robotics Competition teams and events.   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).
 *
 * The version of the OpenAPI document: 3.8.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAPI_Status.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAPI_Status::OAIAPI_Status(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAPI_Status::OAIAPI_Status() {
    this->initializeModel();
}

OAIAPI_Status::~OAIAPI_Status() {}

void OAIAPI_Status::initializeModel() {

    m_android_isSet = false;
    m_android_isValid = false;

    m_current_season_isSet = false;
    m_current_season_isValid = false;

    m_down_events_isSet = false;
    m_down_events_isValid = false;

    m_ios_isSet = false;
    m_ios_isValid = false;

    m_is_datafeed_down_isSet = false;
    m_is_datafeed_down_isValid = false;

    m_max_season_isSet = false;
    m_max_season_isValid = false;
}

void OAIAPI_Status::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAPI_Status::fromJsonObject(QJsonObject json) {

    m_android_isValid = ::OpenAPI::fromJsonValue(m_android, json[QString("android")]);
    m_android_isSet = !json[QString("android")].isNull() && m_android_isValid;

    m_current_season_isValid = ::OpenAPI::fromJsonValue(m_current_season, json[QString("current_season")]);
    m_current_season_isSet = !json[QString("current_season")].isNull() && m_current_season_isValid;

    m_down_events_isValid = ::OpenAPI::fromJsonValue(m_down_events, json[QString("down_events")]);
    m_down_events_isSet = !json[QString("down_events")].isNull() && m_down_events_isValid;

    m_ios_isValid = ::OpenAPI::fromJsonValue(m_ios, json[QString("ios")]);
    m_ios_isSet = !json[QString("ios")].isNull() && m_ios_isValid;

    m_is_datafeed_down_isValid = ::OpenAPI::fromJsonValue(m_is_datafeed_down, json[QString("is_datafeed_down")]);
    m_is_datafeed_down_isSet = !json[QString("is_datafeed_down")].isNull() && m_is_datafeed_down_isValid;

    m_max_season_isValid = ::OpenAPI::fromJsonValue(m_max_season, json[QString("max_season")]);
    m_max_season_isSet = !json[QString("max_season")].isNull() && m_max_season_isValid;
}

QString OAIAPI_Status::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAPI_Status::asJsonObject() const {
    QJsonObject obj;
    if (m_android.isSet()) {
        obj.insert(QString("android"), ::OpenAPI::toJsonValue(m_android));
    }
    if (m_current_season_isSet) {
        obj.insert(QString("current_season"), ::OpenAPI::toJsonValue(m_current_season));
    }
    if (m_down_events.size() > 0) {
        obj.insert(QString("down_events"), ::OpenAPI::toJsonValue(m_down_events));
    }
    if (m_ios.isSet()) {
        obj.insert(QString("ios"), ::OpenAPI::toJsonValue(m_ios));
    }
    if (m_is_datafeed_down_isSet) {
        obj.insert(QString("is_datafeed_down"), ::OpenAPI::toJsonValue(m_is_datafeed_down));
    }
    if (m_max_season_isSet) {
        obj.insert(QString("max_season"), ::OpenAPI::toJsonValue(m_max_season));
    }
    return obj;
}

OAIAPI_Status_App_Version OAIAPI_Status::getAndroid() const {
    return m_android;
}
void OAIAPI_Status::setAndroid(const OAIAPI_Status_App_Version &android) {
    m_android = android;
    m_android_isSet = true;
}

bool OAIAPI_Status::is_android_Set() const{
    return m_android_isSet;
}

bool OAIAPI_Status::is_android_Valid() const{
    return m_android_isValid;
}

qint32 OAIAPI_Status::getCurrentSeason() const {
    return m_current_season;
}
void OAIAPI_Status::setCurrentSeason(const qint32 &current_season) {
    m_current_season = current_season;
    m_current_season_isSet = true;
}

bool OAIAPI_Status::is_current_season_Set() const{
    return m_current_season_isSet;
}

bool OAIAPI_Status::is_current_season_Valid() const{
    return m_current_season_isValid;
}

QList<QString> OAIAPI_Status::getDownEvents() const {
    return m_down_events;
}
void OAIAPI_Status::setDownEvents(const QList<QString> &down_events) {
    m_down_events = down_events;
    m_down_events_isSet = true;
}

bool OAIAPI_Status::is_down_events_Set() const{
    return m_down_events_isSet;
}

bool OAIAPI_Status::is_down_events_Valid() const{
    return m_down_events_isValid;
}

OAIAPI_Status_App_Version OAIAPI_Status::getIos() const {
    return m_ios;
}
void OAIAPI_Status::setIos(const OAIAPI_Status_App_Version &ios) {
    m_ios = ios;
    m_ios_isSet = true;
}

bool OAIAPI_Status::is_ios_Set() const{
    return m_ios_isSet;
}

bool OAIAPI_Status::is_ios_Valid() const{
    return m_ios_isValid;
}

bool OAIAPI_Status::isIsDatafeedDown() const {
    return m_is_datafeed_down;
}
void OAIAPI_Status::setIsDatafeedDown(const bool &is_datafeed_down) {
    m_is_datafeed_down = is_datafeed_down;
    m_is_datafeed_down_isSet = true;
}

bool OAIAPI_Status::is_is_datafeed_down_Set() const{
    return m_is_datafeed_down_isSet;
}

bool OAIAPI_Status::is_is_datafeed_down_Valid() const{
    return m_is_datafeed_down_isValid;
}

qint32 OAIAPI_Status::getMaxSeason() const {
    return m_max_season;
}
void OAIAPI_Status::setMaxSeason(const qint32 &max_season) {
    m_max_season = max_season;
    m_max_season_isSet = true;
}

bool OAIAPI_Status::is_max_season_Set() const{
    return m_max_season_isSet;
}

bool OAIAPI_Status::is_max_season_Valid() const{
    return m_max_season_isValid;
}

bool OAIAPI_Status::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_android.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_season_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_down_events.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_ios.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_datafeed_down_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_season_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAPI_Status::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_android_isValid && m_current_season_isValid && m_down_events_isValid && m_ios_isValid && m_is_datafeed_down_isValid && m_max_season_isValid && true;
}

} // namespace OpenAPI
