/**
 * The Blue Alliance API v3
 * # Overview    Information and statistics about FIRST Robotics Competition teams and events.   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).
 *
 * The version of the OpenAPI document: 3.8.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAward_Recipient.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAward_Recipient::OAIAward_Recipient(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAward_Recipient::OAIAward_Recipient() {
    this->initializeModel();
}

OAIAward_Recipient::~OAIAward_Recipient() {}

void OAIAward_Recipient::initializeModel() {

    m_awardee_isSet = false;
    m_awardee_isValid = false;

    m_team_key_isSet = false;
    m_team_key_isValid = false;
}

void OAIAward_Recipient::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAward_Recipient::fromJsonObject(QJsonObject json) {

    m_awardee_isValid = ::OpenAPI::fromJsonValue(m_awardee, json[QString("awardee")]);
    m_awardee_isSet = !json[QString("awardee")].isNull() && m_awardee_isValid;

    m_team_key_isValid = ::OpenAPI::fromJsonValue(m_team_key, json[QString("team_key")]);
    m_team_key_isSet = !json[QString("team_key")].isNull() && m_team_key_isValid;
}

QString OAIAward_Recipient::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAward_Recipient::asJsonObject() const {
    QJsonObject obj;
    if (m_awardee_isSet) {
        obj.insert(QString("awardee"), ::OpenAPI::toJsonValue(m_awardee));
    }
    if (m_team_key_isSet) {
        obj.insert(QString("team_key"), ::OpenAPI::toJsonValue(m_team_key));
    }
    return obj;
}

QString OAIAward_Recipient::getAwardee() const {
    return m_awardee;
}
void OAIAward_Recipient::setAwardee(const QString &awardee) {
    m_awardee = awardee;
    m_awardee_isSet = true;
}

bool OAIAward_Recipient::is_awardee_Set() const{
    return m_awardee_isSet;
}

bool OAIAward_Recipient::is_awardee_Valid() const{
    return m_awardee_isValid;
}

QString OAIAward_Recipient::getTeamKey() const {
    return m_team_key;
}
void OAIAward_Recipient::setTeamKey(const QString &team_key) {
    m_team_key = team_key;
    m_team_key_isSet = true;
}

bool OAIAward_Recipient::is_team_key_Set() const{
    return m_team_key_isSet;
}

bool OAIAward_Recipient::is_team_key_Valid() const{
    return m_team_key_isValid;
}

bool OAIAward_Recipient::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_awardee_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_team_key_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAward_Recipient::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
