/**
 * The Blue Alliance API v3
 * # Overview    Information and statistics about FIRST Robotics Competition teams and events.   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).
 *
 * The version of the OpenAPI document: 3.8.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIEventApi_H
#define OAI_OAIEventApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAward.h"
#include "OAIElimination_Alliance.h"
#include "OAIEvent.h"
#include "OAIEvent_District_Points.h"
#include "OAIEvent_Insights.h"
#include "OAIEvent_OPRs.h"
#include "OAIEvent_Ranking.h"
#include "OAIEvent_Simple.h"
#include "OAIMatch.h"
#include "OAIMatch_Simple.h"
#include "OAIObject.h"
#include "OAITeam.h"
#include "OAITeam_Event_Status.h"
#include "OAITeam_Simple.h"
#include <QMap>
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIEventApi : public QObject {
    Q_OBJECT

public:
    OAIEventApi(const int timeOut = 0);
    ~OAIEventApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  district_key QString [required]
    * @param[in]  if_none_match QString [optional]
    */
    virtual void getDistrictEventsKeys(const QString &district_key, const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  district_key QString [required]
    * @param[in]  if_none_match QString [optional]
    */
    virtual void getDistrictEventsSimple(const QString &district_key, const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  district_key QString [required]
    * @param[in]  if_none_match QString [optional]
    */
    virtual void getDistrictEvents(const QString &district_key, const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  event_key QString [required]
    * @param[in]  if_none_match QString [optional]
    */
    virtual void getEvent(const QString &event_key, const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  event_key QString [required]
    * @param[in]  if_none_match QString [optional]
    */
    virtual void getEventAlliances(const QString &event_key, const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  event_key QString [required]
    * @param[in]  if_none_match QString [optional]
    */
    virtual void getEventAwards(const QString &event_key, const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  event_key QString [required]
    * @param[in]  if_none_match QString [optional]
    */
    virtual void getEventDistrictPoints(const QString &event_key, const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  event_key QString [required]
    * @param[in]  if_none_match QString [optional]
    */
    virtual void getEventInsights(const QString &event_key, const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  event_key QString [required]
    * @param[in]  if_none_match QString [optional]
    */
    virtual void getEventMatchTimeseries(const QString &event_key, const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  event_key QString [required]
    * @param[in]  if_none_match QString [optional]
    */
    virtual void getEventMatches(const QString &event_key, const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  event_key QString [required]
    * @param[in]  if_none_match QString [optional]
    */
    virtual void getEventMatchesKeys(const QString &event_key, const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  event_key QString [required]
    * @param[in]  if_none_match QString [optional]
    */
    virtual void getEventMatchesSimple(const QString &event_key, const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  event_key QString [required]
    * @param[in]  if_none_match QString [optional]
    */
    virtual void getEventOPRs(const QString &event_key, const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  event_key QString [required]
    * @param[in]  if_none_match QString [optional]
    */
    virtual void getEventPredictions(const QString &event_key, const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  event_key QString [required]
    * @param[in]  if_none_match QString [optional]
    */
    virtual void getEventRankings(const QString &event_key, const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  event_key QString [required]
    * @param[in]  if_none_match QString [optional]
    */
    virtual void getEventSimple(const QString &event_key, const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  event_key QString [required]
    * @param[in]  if_none_match QString [optional]
    */
    virtual void getEventTeams(const QString &event_key, const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  event_key QString [required]
    * @param[in]  if_none_match QString [optional]
    */
    virtual void getEventTeamsKeys(const QString &event_key, const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  event_key QString [required]
    * @param[in]  if_none_match QString [optional]
    */
    virtual void getEventTeamsSimple(const QString &event_key, const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  event_key QString [required]
    * @param[in]  if_none_match QString [optional]
    */
    virtual void getEventTeamsStatuses(const QString &event_key, const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  year qint32 [required]
    * @param[in]  if_none_match QString [optional]
    */
    virtual void getEventsByYear(const qint32 &year, const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  year qint32 [required]
    * @param[in]  if_none_match QString [optional]
    */
    virtual void getEventsByYearKeys(const qint32 &year, const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  year qint32 [required]
    * @param[in]  if_none_match QString [optional]
    */
    virtual void getEventsByYearSimple(const qint32 &year, const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  team_key QString [required]
    * @param[in]  event_key QString [required]
    * @param[in]  if_none_match QString [optional]
    */
    virtual void getTeamEventAwards(const QString &team_key, const QString &event_key, const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  team_key QString [required]
    * @param[in]  event_key QString [required]
    * @param[in]  if_none_match QString [optional]
    */
    virtual void getTeamEventMatchesKeys(const QString &team_key, const QString &event_key, const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  team_key QString [required]
    * @param[in]  event_key QString [required]
    * @param[in]  if_none_match QString [optional]
    */
    virtual void getTeamEventMatchesSimple(const QString &team_key, const QString &event_key, const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  team_key QString [required]
    * @param[in]  event_key QString [required]
    * @param[in]  if_none_match QString [optional]
    */
    virtual void getTeamEventMatches(const QString &team_key, const QString &event_key, const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  team_key QString [required]
    * @param[in]  event_key QString [required]
    * @param[in]  if_none_match QString [optional]
    */
    virtual void getTeamEventStatus(const QString &team_key, const QString &event_key, const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  team_key QString [required]
    * @param[in]  year qint32 [required]
    * @param[in]  if_none_match QString [optional]
    */
    virtual void getTeamEventsByYearKeys(const QString &team_key, const qint32 &year, const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  team_key QString [required]
    * @param[in]  year qint32 [required]
    * @param[in]  if_none_match QString [optional]
    */
    virtual void getTeamEventsByYearSimple(const QString &team_key, const qint32 &year, const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  team_key QString [required]
    * @param[in]  year qint32 [required]
    * @param[in]  if_none_match QString [optional]
    */
    virtual void getTeamEventsByYear(const QString &team_key, const qint32 &year, const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  team_key QString [required]
    * @param[in]  if_none_match QString [optional]
    */
    virtual void getTeamEventsKeys(const QString &team_key, const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  team_key QString [required]
    * @param[in]  if_none_match QString [optional]
    */
    virtual void getTeamEventsSimple(const QString &team_key, const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  team_key QString [required]
    * @param[in]  year qint32 [required]
    * @param[in]  if_none_match QString [optional]
    */
    virtual void getTeamEventsStatusesByYear(const QString &team_key, const qint32 &year, const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  team_key QString [required]
    * @param[in]  if_none_match QString [optional]
    */
    virtual void getTeamEvents(const QString &team_key, const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getDistrictEventsKeysCallback(OAIHttpRequestWorker *worker);
    void getDistrictEventsSimpleCallback(OAIHttpRequestWorker *worker);
    void getDistrictEventsCallback(OAIHttpRequestWorker *worker);
    void getEventCallback(OAIHttpRequestWorker *worker);
    void getEventAlliancesCallback(OAIHttpRequestWorker *worker);
    void getEventAwardsCallback(OAIHttpRequestWorker *worker);
    void getEventDistrictPointsCallback(OAIHttpRequestWorker *worker);
    void getEventInsightsCallback(OAIHttpRequestWorker *worker);
    void getEventMatchTimeseriesCallback(OAIHttpRequestWorker *worker);
    void getEventMatchesCallback(OAIHttpRequestWorker *worker);
    void getEventMatchesKeysCallback(OAIHttpRequestWorker *worker);
    void getEventMatchesSimpleCallback(OAIHttpRequestWorker *worker);
    void getEventOPRsCallback(OAIHttpRequestWorker *worker);
    void getEventPredictionsCallback(OAIHttpRequestWorker *worker);
    void getEventRankingsCallback(OAIHttpRequestWorker *worker);
    void getEventSimpleCallback(OAIHttpRequestWorker *worker);
    void getEventTeamsCallback(OAIHttpRequestWorker *worker);
    void getEventTeamsKeysCallback(OAIHttpRequestWorker *worker);
    void getEventTeamsSimpleCallback(OAIHttpRequestWorker *worker);
    void getEventTeamsStatusesCallback(OAIHttpRequestWorker *worker);
    void getEventsByYearCallback(OAIHttpRequestWorker *worker);
    void getEventsByYearKeysCallback(OAIHttpRequestWorker *worker);
    void getEventsByYearSimpleCallback(OAIHttpRequestWorker *worker);
    void getTeamEventAwardsCallback(OAIHttpRequestWorker *worker);
    void getTeamEventMatchesKeysCallback(OAIHttpRequestWorker *worker);
    void getTeamEventMatchesSimpleCallback(OAIHttpRequestWorker *worker);
    void getTeamEventMatchesCallback(OAIHttpRequestWorker *worker);
    void getTeamEventStatusCallback(OAIHttpRequestWorker *worker);
    void getTeamEventsByYearKeysCallback(OAIHttpRequestWorker *worker);
    void getTeamEventsByYearSimpleCallback(OAIHttpRequestWorker *worker);
    void getTeamEventsByYearCallback(OAIHttpRequestWorker *worker);
    void getTeamEventsKeysCallback(OAIHttpRequestWorker *worker);
    void getTeamEventsSimpleCallback(OAIHttpRequestWorker *worker);
    void getTeamEventsStatusesByYearCallback(OAIHttpRequestWorker *worker);
    void getTeamEventsCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getDistrictEventsKeysSignal(QList<QString> summary);
    void getDistrictEventsSimpleSignal(QList<OAIEvent_Simple> summary);
    void getDistrictEventsSignal(QList<OAIEvent> summary);
    void getEventSignal(OAIEvent summary);
    void getEventAlliancesSignal(QList<OAIElimination_Alliance> summary);
    void getEventAwardsSignal(QList<OAIAward> summary);
    void getEventDistrictPointsSignal(OAIEvent_District_Points summary);
    void getEventInsightsSignal(OAIEvent_Insights summary);
    void getEventMatchTimeseriesSignal(QList<QString> summary);
    void getEventMatchesSignal(QList<OAIMatch> summary);
    void getEventMatchesKeysSignal(QList<QString> summary);
    void getEventMatchesSimpleSignal(QList<OAIMatch_Simple> summary);
    void getEventOPRsSignal(OAIEvent_OPRs summary);
    void getEventPredictionsSignal(OAIObject summary);
    void getEventRankingsSignal(OAIEvent_Ranking summary);
    void getEventSimpleSignal(OAIEvent_Simple summary);
    void getEventTeamsSignal(QList<OAITeam> summary);
    void getEventTeamsKeysSignal(QList<QString> summary);
    void getEventTeamsSimpleSignal(QList<OAITeam_Simple> summary);
    void getEventTeamsStatusesSignal(QMap<QString, OAITeam_Event_Status> summary);
    void getEventsByYearSignal(QList<OAIEvent> summary);
    void getEventsByYearKeysSignal(QList<QString> summary);
    void getEventsByYearSimpleSignal(QList<OAIEvent_Simple> summary);
    void getTeamEventAwardsSignal(QList<OAIAward> summary);
    void getTeamEventMatchesKeysSignal(QList<QString> summary);
    void getTeamEventMatchesSimpleSignal(QList<OAIMatch> summary);
    void getTeamEventMatchesSignal(QList<OAIMatch> summary);
    void getTeamEventStatusSignal(OAITeam_Event_Status summary);
    void getTeamEventsByYearKeysSignal(QList<QString> summary);
    void getTeamEventsByYearSimpleSignal(QList<OAIEvent_Simple> summary);
    void getTeamEventsByYearSignal(QList<OAIEvent> summary);
    void getTeamEventsKeysSignal(QList<QString> summary);
    void getTeamEventsSimpleSignal(QList<OAIEvent_Simple> summary);
    void getTeamEventsStatusesByYearSignal(QMap<QString, OAITeam_Event_Status> summary);
    void getTeamEventsSignal(QList<OAIEvent> summary);


    void getDistrictEventsKeysSignalFull(OAIHttpRequestWorker *worker, QList<QString> summary);
    void getDistrictEventsSimpleSignalFull(OAIHttpRequestWorker *worker, QList<OAIEvent_Simple> summary);
    void getDistrictEventsSignalFull(OAIHttpRequestWorker *worker, QList<OAIEvent> summary);
    void getEventSignalFull(OAIHttpRequestWorker *worker, OAIEvent summary);
    void getEventAlliancesSignalFull(OAIHttpRequestWorker *worker, QList<OAIElimination_Alliance> summary);
    void getEventAwardsSignalFull(OAIHttpRequestWorker *worker, QList<OAIAward> summary);
    void getEventDistrictPointsSignalFull(OAIHttpRequestWorker *worker, OAIEvent_District_Points summary);
    void getEventInsightsSignalFull(OAIHttpRequestWorker *worker, OAIEvent_Insights summary);
    void getEventMatchTimeseriesSignalFull(OAIHttpRequestWorker *worker, QList<QString> summary);
    void getEventMatchesSignalFull(OAIHttpRequestWorker *worker, QList<OAIMatch> summary);
    void getEventMatchesKeysSignalFull(OAIHttpRequestWorker *worker, QList<QString> summary);
    void getEventMatchesSimpleSignalFull(OAIHttpRequestWorker *worker, QList<OAIMatch_Simple> summary);
    void getEventOPRsSignalFull(OAIHttpRequestWorker *worker, OAIEvent_OPRs summary);
    void getEventPredictionsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getEventRankingsSignalFull(OAIHttpRequestWorker *worker, OAIEvent_Ranking summary);
    void getEventSimpleSignalFull(OAIHttpRequestWorker *worker, OAIEvent_Simple summary);
    void getEventTeamsSignalFull(OAIHttpRequestWorker *worker, QList<OAITeam> summary);
    void getEventTeamsKeysSignalFull(OAIHttpRequestWorker *worker, QList<QString> summary);
    void getEventTeamsSimpleSignalFull(OAIHttpRequestWorker *worker, QList<OAITeam_Simple> summary);
    void getEventTeamsStatusesSignalFull(OAIHttpRequestWorker *worker, QMap<QString, OAITeam_Event_Status> summary);
    void getEventsByYearSignalFull(OAIHttpRequestWorker *worker, QList<OAIEvent> summary);
    void getEventsByYearKeysSignalFull(OAIHttpRequestWorker *worker, QList<QString> summary);
    void getEventsByYearSimpleSignalFull(OAIHttpRequestWorker *worker, QList<OAIEvent_Simple> summary);
    void getTeamEventAwardsSignalFull(OAIHttpRequestWorker *worker, QList<OAIAward> summary);
    void getTeamEventMatchesKeysSignalFull(OAIHttpRequestWorker *worker, QList<QString> summary);
    void getTeamEventMatchesSimpleSignalFull(OAIHttpRequestWorker *worker, QList<OAIMatch> summary);
    void getTeamEventMatchesSignalFull(OAIHttpRequestWorker *worker, QList<OAIMatch> summary);
    void getTeamEventStatusSignalFull(OAIHttpRequestWorker *worker, OAITeam_Event_Status summary);
    void getTeamEventsByYearKeysSignalFull(OAIHttpRequestWorker *worker, QList<QString> summary);
    void getTeamEventsByYearSimpleSignalFull(OAIHttpRequestWorker *worker, QList<OAIEvent_Simple> summary);
    void getTeamEventsByYearSignalFull(OAIHttpRequestWorker *worker, QList<OAIEvent> summary);
    void getTeamEventsKeysSignalFull(OAIHttpRequestWorker *worker, QList<QString> summary);
    void getTeamEventsSimpleSignalFull(OAIHttpRequestWorker *worker, QList<OAIEvent_Simple> summary);
    void getTeamEventsStatusesByYearSignalFull(OAIHttpRequestWorker *worker, QMap<QString, OAITeam_Event_Status> summary);
    void getTeamEventsSignalFull(OAIHttpRequestWorker *worker, QList<OAIEvent> summary);

    Q_DECL_DEPRECATED_X("Use getDistrictEventsKeysSignalError() instead")
    void getDistrictEventsKeysSignalE(QList<QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDistrictEventsKeysSignalError(QList<QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDistrictEventsSimpleSignalError() instead")
    void getDistrictEventsSimpleSignalE(QList<OAIEvent_Simple> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDistrictEventsSimpleSignalError(QList<OAIEvent_Simple> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDistrictEventsSignalError() instead")
    void getDistrictEventsSignalE(QList<OAIEvent> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDistrictEventsSignalError(QList<OAIEvent> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEventSignalError() instead")
    void getEventSignalE(OAIEvent summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getEventSignalError(OAIEvent summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEventAlliancesSignalError() instead")
    void getEventAlliancesSignalE(QList<OAIElimination_Alliance> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getEventAlliancesSignalError(QList<OAIElimination_Alliance> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEventAwardsSignalError() instead")
    void getEventAwardsSignalE(QList<OAIAward> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getEventAwardsSignalError(QList<OAIAward> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEventDistrictPointsSignalError() instead")
    void getEventDistrictPointsSignalE(OAIEvent_District_Points summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getEventDistrictPointsSignalError(OAIEvent_District_Points summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEventInsightsSignalError() instead")
    void getEventInsightsSignalE(OAIEvent_Insights summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getEventInsightsSignalError(OAIEvent_Insights summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEventMatchTimeseriesSignalError() instead")
    void getEventMatchTimeseriesSignalE(QList<QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getEventMatchTimeseriesSignalError(QList<QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEventMatchesSignalError() instead")
    void getEventMatchesSignalE(QList<OAIMatch> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getEventMatchesSignalError(QList<OAIMatch> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEventMatchesKeysSignalError() instead")
    void getEventMatchesKeysSignalE(QList<QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getEventMatchesKeysSignalError(QList<QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEventMatchesSimpleSignalError() instead")
    void getEventMatchesSimpleSignalE(QList<OAIMatch_Simple> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getEventMatchesSimpleSignalError(QList<OAIMatch_Simple> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEventOPRsSignalError() instead")
    void getEventOPRsSignalE(OAIEvent_OPRs summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getEventOPRsSignalError(OAIEvent_OPRs summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEventPredictionsSignalError() instead")
    void getEventPredictionsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getEventPredictionsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEventRankingsSignalError() instead")
    void getEventRankingsSignalE(OAIEvent_Ranking summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getEventRankingsSignalError(OAIEvent_Ranking summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEventSimpleSignalError() instead")
    void getEventSimpleSignalE(OAIEvent_Simple summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getEventSimpleSignalError(OAIEvent_Simple summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEventTeamsSignalError() instead")
    void getEventTeamsSignalE(QList<OAITeam> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getEventTeamsSignalError(QList<OAITeam> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEventTeamsKeysSignalError() instead")
    void getEventTeamsKeysSignalE(QList<QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getEventTeamsKeysSignalError(QList<QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEventTeamsSimpleSignalError() instead")
    void getEventTeamsSimpleSignalE(QList<OAITeam_Simple> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getEventTeamsSimpleSignalError(QList<OAITeam_Simple> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEventTeamsStatusesSignalError() instead")
    void getEventTeamsStatusesSignalE(QMap<QString, OAITeam_Event_Status> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getEventTeamsStatusesSignalError(QMap<QString, OAITeam_Event_Status> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEventsByYearSignalError() instead")
    void getEventsByYearSignalE(QList<OAIEvent> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getEventsByYearSignalError(QList<OAIEvent> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEventsByYearKeysSignalError() instead")
    void getEventsByYearKeysSignalE(QList<QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getEventsByYearKeysSignalError(QList<QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEventsByYearSimpleSignalError() instead")
    void getEventsByYearSimpleSignalE(QList<OAIEvent_Simple> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getEventsByYearSimpleSignalError(QList<OAIEvent_Simple> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTeamEventAwardsSignalError() instead")
    void getTeamEventAwardsSignalE(QList<OAIAward> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTeamEventAwardsSignalError(QList<OAIAward> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTeamEventMatchesKeysSignalError() instead")
    void getTeamEventMatchesKeysSignalE(QList<QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTeamEventMatchesKeysSignalError(QList<QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTeamEventMatchesSimpleSignalError() instead")
    void getTeamEventMatchesSimpleSignalE(QList<OAIMatch> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTeamEventMatchesSimpleSignalError(QList<OAIMatch> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTeamEventMatchesSignalError() instead")
    void getTeamEventMatchesSignalE(QList<OAIMatch> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTeamEventMatchesSignalError(QList<OAIMatch> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTeamEventStatusSignalError() instead")
    void getTeamEventStatusSignalE(OAITeam_Event_Status summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTeamEventStatusSignalError(OAITeam_Event_Status summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTeamEventsByYearKeysSignalError() instead")
    void getTeamEventsByYearKeysSignalE(QList<QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTeamEventsByYearKeysSignalError(QList<QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTeamEventsByYearSimpleSignalError() instead")
    void getTeamEventsByYearSimpleSignalE(QList<OAIEvent_Simple> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTeamEventsByYearSimpleSignalError(QList<OAIEvent_Simple> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTeamEventsByYearSignalError() instead")
    void getTeamEventsByYearSignalE(QList<OAIEvent> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTeamEventsByYearSignalError(QList<OAIEvent> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTeamEventsKeysSignalError() instead")
    void getTeamEventsKeysSignalE(QList<QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTeamEventsKeysSignalError(QList<QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTeamEventsSimpleSignalError() instead")
    void getTeamEventsSimpleSignalE(QList<OAIEvent_Simple> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTeamEventsSimpleSignalError(QList<OAIEvent_Simple> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTeamEventsStatusesByYearSignalError() instead")
    void getTeamEventsStatusesByYearSignalE(QMap<QString, OAITeam_Event_Status> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTeamEventsStatusesByYearSignalError(QMap<QString, OAITeam_Event_Status> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTeamEventsSignalError() instead")
    void getTeamEventsSignalE(QList<OAIEvent> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTeamEventsSignalError(QList<OAIEvent> summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getDistrictEventsKeysSignalErrorFull() instead")
    void getDistrictEventsKeysSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDistrictEventsKeysSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDistrictEventsSimpleSignalErrorFull() instead")
    void getDistrictEventsSimpleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDistrictEventsSimpleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDistrictEventsSignalErrorFull() instead")
    void getDistrictEventsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDistrictEventsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEventSignalErrorFull() instead")
    void getEventSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getEventSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEventAlliancesSignalErrorFull() instead")
    void getEventAlliancesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getEventAlliancesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEventAwardsSignalErrorFull() instead")
    void getEventAwardsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getEventAwardsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEventDistrictPointsSignalErrorFull() instead")
    void getEventDistrictPointsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getEventDistrictPointsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEventInsightsSignalErrorFull() instead")
    void getEventInsightsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getEventInsightsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEventMatchTimeseriesSignalErrorFull() instead")
    void getEventMatchTimeseriesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getEventMatchTimeseriesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEventMatchesSignalErrorFull() instead")
    void getEventMatchesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getEventMatchesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEventMatchesKeysSignalErrorFull() instead")
    void getEventMatchesKeysSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getEventMatchesKeysSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEventMatchesSimpleSignalErrorFull() instead")
    void getEventMatchesSimpleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getEventMatchesSimpleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEventOPRsSignalErrorFull() instead")
    void getEventOPRsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getEventOPRsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEventPredictionsSignalErrorFull() instead")
    void getEventPredictionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getEventPredictionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEventRankingsSignalErrorFull() instead")
    void getEventRankingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getEventRankingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEventSimpleSignalErrorFull() instead")
    void getEventSimpleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getEventSimpleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEventTeamsSignalErrorFull() instead")
    void getEventTeamsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getEventTeamsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEventTeamsKeysSignalErrorFull() instead")
    void getEventTeamsKeysSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getEventTeamsKeysSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEventTeamsSimpleSignalErrorFull() instead")
    void getEventTeamsSimpleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getEventTeamsSimpleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEventTeamsStatusesSignalErrorFull() instead")
    void getEventTeamsStatusesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getEventTeamsStatusesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEventsByYearSignalErrorFull() instead")
    void getEventsByYearSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getEventsByYearSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEventsByYearKeysSignalErrorFull() instead")
    void getEventsByYearKeysSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getEventsByYearKeysSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEventsByYearSimpleSignalErrorFull() instead")
    void getEventsByYearSimpleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getEventsByYearSimpleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTeamEventAwardsSignalErrorFull() instead")
    void getTeamEventAwardsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTeamEventAwardsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTeamEventMatchesKeysSignalErrorFull() instead")
    void getTeamEventMatchesKeysSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTeamEventMatchesKeysSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTeamEventMatchesSimpleSignalErrorFull() instead")
    void getTeamEventMatchesSimpleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTeamEventMatchesSimpleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTeamEventMatchesSignalErrorFull() instead")
    void getTeamEventMatchesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTeamEventMatchesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTeamEventStatusSignalErrorFull() instead")
    void getTeamEventStatusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTeamEventStatusSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTeamEventsByYearKeysSignalErrorFull() instead")
    void getTeamEventsByYearKeysSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTeamEventsByYearKeysSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTeamEventsByYearSimpleSignalErrorFull() instead")
    void getTeamEventsByYearSimpleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTeamEventsByYearSimpleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTeamEventsByYearSignalErrorFull() instead")
    void getTeamEventsByYearSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTeamEventsByYearSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTeamEventsKeysSignalErrorFull() instead")
    void getTeamEventsKeysSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTeamEventsKeysSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTeamEventsSimpleSignalErrorFull() instead")
    void getTeamEventsSimpleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTeamEventsSimpleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTeamEventsStatusesByYearSignalErrorFull() instead")
    void getTeamEventsStatusesByYearSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTeamEventsStatusesByYearSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTeamEventsSignalErrorFull() instead")
    void getTeamEventsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTeamEventsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
