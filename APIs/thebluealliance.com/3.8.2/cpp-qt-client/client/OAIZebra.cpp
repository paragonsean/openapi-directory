/**
 * The Blue Alliance API v3
 * # Overview    Information and statistics about FIRST Robotics Competition teams and events.   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).
 *
 * The version of the OpenAPI document: 3.8.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIZebra.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIZebra::OAIZebra(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIZebra::OAIZebra() {
    this->initializeModel();
}

OAIZebra::~OAIZebra() {}

void OAIZebra::initializeModel() {

    m_alliances_isSet = false;
    m_alliances_isValid = false;

    m_key_isSet = false;
    m_key_isValid = false;

    m_times_isSet = false;
    m_times_isValid = false;
}

void OAIZebra::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIZebra::fromJsonObject(QJsonObject json) {

    m_alliances_isValid = ::OpenAPI::fromJsonValue(m_alliances, json[QString("alliances")]);
    m_alliances_isSet = !json[QString("alliances")].isNull() && m_alliances_isValid;

    m_key_isValid = ::OpenAPI::fromJsonValue(m_key, json[QString("key")]);
    m_key_isSet = !json[QString("key")].isNull() && m_key_isValid;

    m_times_isValid = ::OpenAPI::fromJsonValue(m_times, json[QString("times")]);
    m_times_isSet = !json[QString("times")].isNull() && m_times_isValid;
}

QString OAIZebra::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIZebra::asJsonObject() const {
    QJsonObject obj;
    if (m_alliances.isSet()) {
        obj.insert(QString("alliances"), ::OpenAPI::toJsonValue(m_alliances));
    }
    if (m_key_isSet) {
        obj.insert(QString("key"), ::OpenAPI::toJsonValue(m_key));
    }
    if (m_times.size() > 0) {
        obj.insert(QString("times"), ::OpenAPI::toJsonValue(m_times));
    }
    return obj;
}

OAIZebra_alliances OAIZebra::getAlliances() const {
    return m_alliances;
}
void OAIZebra::setAlliances(const OAIZebra_alliances &alliances) {
    m_alliances = alliances;
    m_alliances_isSet = true;
}

bool OAIZebra::is_alliances_Set() const{
    return m_alliances_isSet;
}

bool OAIZebra::is_alliances_Valid() const{
    return m_alliances_isValid;
}

QString OAIZebra::getKey() const {
    return m_key;
}
void OAIZebra::setKey(const QString &key) {
    m_key = key;
    m_key_isSet = true;
}

bool OAIZebra::is_key_Set() const{
    return m_key_isSet;
}

bool OAIZebra::is_key_Valid() const{
    return m_key_isValid;
}

QList<double> OAIZebra::getTimes() const {
    return m_times;
}
void OAIZebra::setTimes(const QList<double> &times) {
    m_times = times;
    m_times_isSet = true;
}

bool OAIZebra::is_times_Set() const{
    return m_times_isSet;
}

bool OAIZebra::is_times_Valid() const{
    return m_times_isValid;
}

bool OAIZebra::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_alliances.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_times.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIZebra::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_alliances_isValid && m_key_isValid && m_times_isValid && true;
}

} // namespace OpenAPI
