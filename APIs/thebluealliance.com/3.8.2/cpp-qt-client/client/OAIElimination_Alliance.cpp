/**
 * The Blue Alliance API v3
 * # Overview    Information and statistics about FIRST Robotics Competition teams and events.   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).
 *
 * The version of the OpenAPI document: 3.8.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIElimination_Alliance.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIElimination_Alliance::OAIElimination_Alliance(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIElimination_Alliance::OAIElimination_Alliance() {
    this->initializeModel();
}

OAIElimination_Alliance::~OAIElimination_Alliance() {}

void OAIElimination_Alliance::initializeModel() {

    m_backup_isSet = false;
    m_backup_isValid = false;

    m_declines_isSet = false;
    m_declines_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_picks_isSet = false;
    m_picks_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIElimination_Alliance::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIElimination_Alliance::fromJsonObject(QJsonObject json) {

    m_backup_isValid = ::OpenAPI::fromJsonValue(m_backup, json[QString("backup")]);
    m_backup_isSet = !json[QString("backup")].isNull() && m_backup_isValid;

    m_declines_isValid = ::OpenAPI::fromJsonValue(m_declines, json[QString("declines")]);
    m_declines_isSet = !json[QString("declines")].isNull() && m_declines_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_picks_isValid = ::OpenAPI::fromJsonValue(m_picks, json[QString("picks")]);
    m_picks_isSet = !json[QString("picks")].isNull() && m_picks_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAIElimination_Alliance::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIElimination_Alliance::asJsonObject() const {
    QJsonObject obj;
    if (m_backup.isSet()) {
        obj.insert(QString("backup"), ::OpenAPI::toJsonValue(m_backup));
    }
    if (m_declines.size() > 0) {
        obj.insert(QString("declines"), ::OpenAPI::toJsonValue(m_declines));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_picks.size() > 0) {
        obj.insert(QString("picks"), ::OpenAPI::toJsonValue(m_picks));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

OAIElimination_Alliance_backup OAIElimination_Alliance::getBackup() const {
    return m_backup;
}
void OAIElimination_Alliance::setBackup(const OAIElimination_Alliance_backup &backup) {
    m_backup = backup;
    m_backup_isSet = true;
}

bool OAIElimination_Alliance::is_backup_Set() const{
    return m_backup_isSet;
}

bool OAIElimination_Alliance::is_backup_Valid() const{
    return m_backup_isValid;
}

QList<QString> OAIElimination_Alliance::getDeclines() const {
    return m_declines;
}
void OAIElimination_Alliance::setDeclines(const QList<QString> &declines) {
    m_declines = declines;
    m_declines_isSet = true;
}

bool OAIElimination_Alliance::is_declines_Set() const{
    return m_declines_isSet;
}

bool OAIElimination_Alliance::is_declines_Valid() const{
    return m_declines_isValid;
}

QString OAIElimination_Alliance::getName() const {
    return m_name;
}
void OAIElimination_Alliance::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIElimination_Alliance::is_name_Set() const{
    return m_name_isSet;
}

bool OAIElimination_Alliance::is_name_Valid() const{
    return m_name_isValid;
}

QList<QString> OAIElimination_Alliance::getPicks() const {
    return m_picks;
}
void OAIElimination_Alliance::setPicks(const QList<QString> &picks) {
    m_picks = picks;
    m_picks_isSet = true;
}

bool OAIElimination_Alliance::is_picks_Set() const{
    return m_picks_isSet;
}

bool OAIElimination_Alliance::is_picks_Valid() const{
    return m_picks_isValid;
}

OAIElimination_Alliance_status OAIElimination_Alliance::getStatus() const {
    return m_status;
}
void OAIElimination_Alliance::setStatus(const OAIElimination_Alliance_status &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIElimination_Alliance::is_status_Set() const{
    return m_status_isSet;
}

bool OAIElimination_Alliance::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIElimination_Alliance::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_backup.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_declines.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_picks.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIElimination_Alliance::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_picks_isValid && true;
}

} // namespace OpenAPI
