/**
 * The Blue Alliance API v3
 * # Overview    Information and statistics about FIRST Robotics Competition teams and events.   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).
 *
 * The version of the OpenAPI document: 3.8.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDistrict_List.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDistrict_List::OAIDistrict_List(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDistrict_List::OAIDistrict_List() {
    this->initializeModel();
}

OAIDistrict_List::~OAIDistrict_List() {}

void OAIDistrict_List::initializeModel() {

    m_abbreviation_isSet = false;
    m_abbreviation_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_key_isSet = false;
    m_key_isValid = false;

    m_year_isSet = false;
    m_year_isValid = false;
}

void OAIDistrict_List::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDistrict_List::fromJsonObject(QJsonObject json) {

    m_abbreviation_isValid = ::OpenAPI::fromJsonValue(m_abbreviation, json[QString("abbreviation")]);
    m_abbreviation_isSet = !json[QString("abbreviation")].isNull() && m_abbreviation_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("display_name")]);
    m_display_name_isSet = !json[QString("display_name")].isNull() && m_display_name_isValid;

    m_key_isValid = ::OpenAPI::fromJsonValue(m_key, json[QString("key")]);
    m_key_isSet = !json[QString("key")].isNull() && m_key_isValid;

    m_year_isValid = ::OpenAPI::fromJsonValue(m_year, json[QString("year")]);
    m_year_isSet = !json[QString("year")].isNull() && m_year_isValid;
}

QString OAIDistrict_List::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDistrict_List::asJsonObject() const {
    QJsonObject obj;
    if (m_abbreviation_isSet) {
        obj.insert(QString("abbreviation"), ::OpenAPI::toJsonValue(m_abbreviation));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("display_name"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_key_isSet) {
        obj.insert(QString("key"), ::OpenAPI::toJsonValue(m_key));
    }
    if (m_year_isSet) {
        obj.insert(QString("year"), ::OpenAPI::toJsonValue(m_year));
    }
    return obj;
}

QString OAIDistrict_List::getAbbreviation() const {
    return m_abbreviation;
}
void OAIDistrict_List::setAbbreviation(const QString &abbreviation) {
    m_abbreviation = abbreviation;
    m_abbreviation_isSet = true;
}

bool OAIDistrict_List::is_abbreviation_Set() const{
    return m_abbreviation_isSet;
}

bool OAIDistrict_List::is_abbreviation_Valid() const{
    return m_abbreviation_isValid;
}

QString OAIDistrict_List::getDisplayName() const {
    return m_display_name;
}
void OAIDistrict_List::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIDistrict_List::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIDistrict_List::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAIDistrict_List::getKey() const {
    return m_key;
}
void OAIDistrict_List::setKey(const QString &key) {
    m_key = key;
    m_key_isSet = true;
}

bool OAIDistrict_List::is_key_Set() const{
    return m_key_isSet;
}

bool OAIDistrict_List::is_key_Valid() const{
    return m_key_isValid;
}

qint32 OAIDistrict_List::getYear() const {
    return m_year;
}
void OAIDistrict_List::setYear(const qint32 &year) {
    m_year = year;
    m_year_isSet = true;
}

bool OAIDistrict_List::is_year_Set() const{
    return m_year_isSet;
}

bool OAIDistrict_List::is_year_Valid() const{
    return m_year_isValid;
}

bool OAIDistrict_List::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_abbreviation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_year_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDistrict_List::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_abbreviation_isValid && m_display_name_isValid && m_key_isValid && m_year_isValid && true;
}

} // namespace OpenAPI
