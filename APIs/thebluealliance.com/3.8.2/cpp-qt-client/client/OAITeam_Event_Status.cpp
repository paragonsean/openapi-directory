/**
 * The Blue Alliance API v3
 * # Overview    Information and statistics about FIRST Robotics Competition teams and events.   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).
 *
 * The version of the OpenAPI document: 3.8.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITeam_Event_Status.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITeam_Event_Status::OAITeam_Event_Status(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITeam_Event_Status::OAITeam_Event_Status() {
    this->initializeModel();
}

OAITeam_Event_Status::~OAITeam_Event_Status() {}

void OAITeam_Event_Status::initializeModel() {

    m_alliance_isSet = false;
    m_alliance_isValid = false;

    m_alliance_status_str_isSet = false;
    m_alliance_status_str_isValid = false;

    m_last_match_key_isSet = false;
    m_last_match_key_isValid = false;

    m_next_match_key_isSet = false;
    m_next_match_key_isValid = false;

    m_overall_status_str_isSet = false;
    m_overall_status_str_isValid = false;

    m_playoff_isSet = false;
    m_playoff_isValid = false;

    m_playoff_status_str_isSet = false;
    m_playoff_status_str_isValid = false;

    m_qual_isSet = false;
    m_qual_isValid = false;
}

void OAITeam_Event_Status::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITeam_Event_Status::fromJsonObject(QJsonObject json) {

    m_alliance_isValid = ::OpenAPI::fromJsonValue(m_alliance, json[QString("alliance")]);
    m_alliance_isSet = !json[QString("alliance")].isNull() && m_alliance_isValid;

    m_alliance_status_str_isValid = ::OpenAPI::fromJsonValue(m_alliance_status_str, json[QString("alliance_status_str")]);
    m_alliance_status_str_isSet = !json[QString("alliance_status_str")].isNull() && m_alliance_status_str_isValid;

    m_last_match_key_isValid = ::OpenAPI::fromJsonValue(m_last_match_key, json[QString("last_match_key")]);
    m_last_match_key_isSet = !json[QString("last_match_key")].isNull() && m_last_match_key_isValid;

    m_next_match_key_isValid = ::OpenAPI::fromJsonValue(m_next_match_key, json[QString("next_match_key")]);
    m_next_match_key_isSet = !json[QString("next_match_key")].isNull() && m_next_match_key_isValid;

    m_overall_status_str_isValid = ::OpenAPI::fromJsonValue(m_overall_status_str, json[QString("overall_status_str")]);
    m_overall_status_str_isSet = !json[QString("overall_status_str")].isNull() && m_overall_status_str_isValid;

    m_playoff_isValid = ::OpenAPI::fromJsonValue(m_playoff, json[QString("playoff")]);
    m_playoff_isSet = !json[QString("playoff")].isNull() && m_playoff_isValid;

    m_playoff_status_str_isValid = ::OpenAPI::fromJsonValue(m_playoff_status_str, json[QString("playoff_status_str")]);
    m_playoff_status_str_isSet = !json[QString("playoff_status_str")].isNull() && m_playoff_status_str_isValid;

    m_qual_isValid = ::OpenAPI::fromJsonValue(m_qual, json[QString("qual")]);
    m_qual_isSet = !json[QString("qual")].isNull() && m_qual_isValid;
}

QString OAITeam_Event_Status::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITeam_Event_Status::asJsonObject() const {
    QJsonObject obj;
    if (m_alliance.isSet()) {
        obj.insert(QString("alliance"), ::OpenAPI::toJsonValue(m_alliance));
    }
    if (m_alliance_status_str_isSet) {
        obj.insert(QString("alliance_status_str"), ::OpenAPI::toJsonValue(m_alliance_status_str));
    }
    if (m_last_match_key_isSet) {
        obj.insert(QString("last_match_key"), ::OpenAPI::toJsonValue(m_last_match_key));
    }
    if (m_next_match_key_isSet) {
        obj.insert(QString("next_match_key"), ::OpenAPI::toJsonValue(m_next_match_key));
    }
    if (m_overall_status_str_isSet) {
        obj.insert(QString("overall_status_str"), ::OpenAPI::toJsonValue(m_overall_status_str));
    }
    if (m_playoff.isSet()) {
        obj.insert(QString("playoff"), ::OpenAPI::toJsonValue(m_playoff));
    }
    if (m_playoff_status_str_isSet) {
        obj.insert(QString("playoff_status_str"), ::OpenAPI::toJsonValue(m_playoff_status_str));
    }
    if (m_qual.isSet()) {
        obj.insert(QString("qual"), ::OpenAPI::toJsonValue(m_qual));
    }
    return obj;
}

OAITeam_Event_Status_alliance OAITeam_Event_Status::getAlliance() const {
    return m_alliance;
}
void OAITeam_Event_Status::setAlliance(const OAITeam_Event_Status_alliance &alliance) {
    m_alliance = alliance;
    m_alliance_isSet = true;
}

bool OAITeam_Event_Status::is_alliance_Set() const{
    return m_alliance_isSet;
}

bool OAITeam_Event_Status::is_alliance_Valid() const{
    return m_alliance_isValid;
}

QString OAITeam_Event_Status::getAllianceStatusStr() const {
    return m_alliance_status_str;
}
void OAITeam_Event_Status::setAllianceStatusStr(const QString &alliance_status_str) {
    m_alliance_status_str = alliance_status_str;
    m_alliance_status_str_isSet = true;
}

bool OAITeam_Event_Status::is_alliance_status_str_Set() const{
    return m_alliance_status_str_isSet;
}

bool OAITeam_Event_Status::is_alliance_status_str_Valid() const{
    return m_alliance_status_str_isValid;
}

QString OAITeam_Event_Status::getLastMatchKey() const {
    return m_last_match_key;
}
void OAITeam_Event_Status::setLastMatchKey(const QString &last_match_key) {
    m_last_match_key = last_match_key;
    m_last_match_key_isSet = true;
}

bool OAITeam_Event_Status::is_last_match_key_Set() const{
    return m_last_match_key_isSet;
}

bool OAITeam_Event_Status::is_last_match_key_Valid() const{
    return m_last_match_key_isValid;
}

QString OAITeam_Event_Status::getNextMatchKey() const {
    return m_next_match_key;
}
void OAITeam_Event_Status::setNextMatchKey(const QString &next_match_key) {
    m_next_match_key = next_match_key;
    m_next_match_key_isSet = true;
}

bool OAITeam_Event_Status::is_next_match_key_Set() const{
    return m_next_match_key_isSet;
}

bool OAITeam_Event_Status::is_next_match_key_Valid() const{
    return m_next_match_key_isValid;
}

QString OAITeam_Event_Status::getOverallStatusStr() const {
    return m_overall_status_str;
}
void OAITeam_Event_Status::setOverallStatusStr(const QString &overall_status_str) {
    m_overall_status_str = overall_status_str;
    m_overall_status_str_isSet = true;
}

bool OAITeam_Event_Status::is_overall_status_str_Set() const{
    return m_overall_status_str_isSet;
}

bool OAITeam_Event_Status::is_overall_status_str_Valid() const{
    return m_overall_status_str_isValid;
}

OAITeam_Event_Status_playoff OAITeam_Event_Status::getPlayoff() const {
    return m_playoff;
}
void OAITeam_Event_Status::setPlayoff(const OAITeam_Event_Status_playoff &playoff) {
    m_playoff = playoff;
    m_playoff_isSet = true;
}

bool OAITeam_Event_Status::is_playoff_Set() const{
    return m_playoff_isSet;
}

bool OAITeam_Event_Status::is_playoff_Valid() const{
    return m_playoff_isValid;
}

QString OAITeam_Event_Status::getPlayoffStatusStr() const {
    return m_playoff_status_str;
}
void OAITeam_Event_Status::setPlayoffStatusStr(const QString &playoff_status_str) {
    m_playoff_status_str = playoff_status_str;
    m_playoff_status_str_isSet = true;
}

bool OAITeam_Event_Status::is_playoff_status_str_Set() const{
    return m_playoff_status_str_isSet;
}

bool OAITeam_Event_Status::is_playoff_status_str_Valid() const{
    return m_playoff_status_str_isValid;
}

OAITeam_Event_Status_rank OAITeam_Event_Status::getQual() const {
    return m_qual;
}
void OAITeam_Event_Status::setQual(const OAITeam_Event_Status_rank &qual) {
    m_qual = qual;
    m_qual_isSet = true;
}

bool OAITeam_Event_Status::is_qual_Set() const{
    return m_qual_isSet;
}

bool OAITeam_Event_Status::is_qual_Valid() const{
    return m_qual_isValid;
}

bool OAITeam_Event_Status::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_alliance.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_alliance_status_str_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_match_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_match_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_overall_status_str_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_playoff.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_playoff_status_str_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_qual.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITeam_Event_Status::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
