/**
 * The Blue Alliance API v3
 * # Overview    Information and statistics about FIRST Robotics Competition teams and events.   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).
 *
 * The version of the OpenAPI document: 3.8.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEvent_District_Points.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEvent_District_Points::OAIEvent_District_Points(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEvent_District_Points::OAIEvent_District_Points() {
    this->initializeModel();
}

OAIEvent_District_Points::~OAIEvent_District_Points() {}

void OAIEvent_District_Points::initializeModel() {

    m_points_isSet = false;
    m_points_isValid = false;

    m_tiebreakers_isSet = false;
    m_tiebreakers_isValid = false;
}

void OAIEvent_District_Points::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEvent_District_Points::fromJsonObject(QJsonObject json) {

    m_points_isValid = ::OpenAPI::fromJsonValue(m_points, json[QString("points")]);
    m_points_isSet = !json[QString("points")].isNull() && m_points_isValid;

    m_tiebreakers_isValid = ::OpenAPI::fromJsonValue(m_tiebreakers, json[QString("tiebreakers")]);
    m_tiebreakers_isSet = !json[QString("tiebreakers")].isNull() && m_tiebreakers_isValid;
}

QString OAIEvent_District_Points::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEvent_District_Points::asJsonObject() const {
    QJsonObject obj;
    if (m_points.size() > 0) {
        obj.insert(QString("points"), ::OpenAPI::toJsonValue(m_points));
    }
    if (m_tiebreakers.size() > 0) {
        obj.insert(QString("tiebreakers"), ::OpenAPI::toJsonValue(m_tiebreakers));
    }
    return obj;
}

QMap<QString, OAIEvent_District_Points_points_value> OAIEvent_District_Points::getPoints() const {
    return m_points;
}
void OAIEvent_District_Points::setPoints(const QMap<QString, OAIEvent_District_Points_points_value> &points) {
    m_points = points;
    m_points_isSet = true;
}

bool OAIEvent_District_Points::is_points_Set() const{
    return m_points_isSet;
}

bool OAIEvent_District_Points::is_points_Valid() const{
    return m_points_isValid;
}

QMap<QString, OAIEvent_District_Points_tiebreakers_value> OAIEvent_District_Points::getTiebreakers() const {
    return m_tiebreakers;
}
void OAIEvent_District_Points::setTiebreakers(const QMap<QString, OAIEvent_District_Points_tiebreakers_value> &tiebreakers) {
    m_tiebreakers = tiebreakers;
    m_tiebreakers_isSet = true;
}

bool OAIEvent_District_Points::is_tiebreakers_Set() const{
    return m_tiebreakers_isSet;
}

bool OAIEvent_District_Points::is_tiebreakers_Valid() const{
    return m_tiebreakers_isValid;
}

bool OAIEvent_District_Points::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_points.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_tiebreakers.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEvent_District_Points::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_points_isValid && true;
}

} // namespace OpenAPI
