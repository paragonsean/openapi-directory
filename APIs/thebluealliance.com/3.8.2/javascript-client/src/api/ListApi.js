/**
 * The Blue Alliance API v3
 * # Overview    Information and statistics about FIRST Robotics Competition teams and events.   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).
 *
 * The version of the OpenAPI document: 3.8.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import DistrictRanking from '../model/DistrictRanking';
import Event from '../model/Event';
import EventSimple from '../model/EventSimple';
import Team from '../model/Team';
import TeamEventStatus from '../model/TeamEventStatus';
import TeamSimple from '../model/TeamSimple';

/**
* List service.
* @module api/ListApi
* @version 3.8.2
*/
export default class ListApi {

    /**
    * Constructs a new ListApi. 
    * @alias module:api/ListApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getDistrictEventsKeys_1 operation.
     * @callback module:api/ListApi~getDistrictEventsKeys_1Callback
     * @param {String} error Error message, if any.
     * @param {Array.<String>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of event keys for events in the given district.
     * @param {String} districtKey TBA District Key, eg `2016fim`
     * @param {Object} opts Optional parameters
     * @param {String} [ifNoneMatch] Value of the `ETag` header in the most recently cached response by the client.
     * @param {module:api/ListApi~getDistrictEventsKeys_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<String>}
     */
    getDistrictEventsKeys_1(districtKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'districtKey' is set
      if (districtKey === undefined || districtKey === null) {
        throw new Error("Missing the required parameter 'districtKey' when calling getDistrictEventsKeys_1");
      }

      let pathParams = {
        'district_key': districtKey
      };
      let queryParams = {
      };
      let headerParams = {
        'If-None-Match': opts['ifNoneMatch']
      };
      let formParams = {
      };

      let authNames = ['apiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/district/{district_key}/events/keys', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDistrictEventsSimple_1 operation.
     * @callback module:api/ListApi~getDistrictEventsSimple_1Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/EventSimple>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a short-form list of events in the given district.
     * @param {String} districtKey TBA District Key, eg `2016fim`
     * @param {Object} opts Optional parameters
     * @param {String} [ifNoneMatch] Value of the `ETag` header in the most recently cached response by the client.
     * @param {module:api/ListApi~getDistrictEventsSimple_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/EventSimple>}
     */
    getDistrictEventsSimple_1(districtKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'districtKey' is set
      if (districtKey === undefined || districtKey === null) {
        throw new Error("Missing the required parameter 'districtKey' when calling getDistrictEventsSimple_1");
      }

      let pathParams = {
        'district_key': districtKey
      };
      let queryParams = {
      };
      let headerParams = {
        'If-None-Match': opts['ifNoneMatch']
      };
      let formParams = {
      };

      let authNames = ['apiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [EventSimple];
      return this.apiClient.callApi(
        '/district/{district_key}/events/simple', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDistrictEvents_1 operation.
     * @callback module:api/ListApi~getDistrictEvents_1Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Event>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of events in the given district.
     * @param {String} districtKey TBA District Key, eg `2016fim`
     * @param {Object} opts Optional parameters
     * @param {String} [ifNoneMatch] Value of the `ETag` header in the most recently cached response by the client.
     * @param {module:api/ListApi~getDistrictEvents_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Event>}
     */
    getDistrictEvents_1(districtKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'districtKey' is set
      if (districtKey === undefined || districtKey === null) {
        throw new Error("Missing the required parameter 'districtKey' when calling getDistrictEvents_1");
      }

      let pathParams = {
        'district_key': districtKey
      };
      let queryParams = {
      };
      let headerParams = {
        'If-None-Match': opts['ifNoneMatch']
      };
      let formParams = {
      };

      let authNames = ['apiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Event];
      return this.apiClient.callApi(
        '/district/{district_key}/events', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDistrictRankings_1 operation.
     * @callback module:api/ListApi~getDistrictRankings_1Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DistrictRanking>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of team district rankings for the given district.
     * @param {String} districtKey TBA District Key, eg `2016fim`
     * @param {Object} opts Optional parameters
     * @param {String} [ifNoneMatch] Value of the `ETag` header in the most recently cached response by the client.
     * @param {module:api/ListApi~getDistrictRankings_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DistrictRanking>}
     */
    getDistrictRankings_1(districtKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'districtKey' is set
      if (districtKey === undefined || districtKey === null) {
        throw new Error("Missing the required parameter 'districtKey' when calling getDistrictRankings_1");
      }

      let pathParams = {
        'district_key': districtKey
      };
      let queryParams = {
      };
      let headerParams = {
        'If-None-Match': opts['ifNoneMatch']
      };
      let formParams = {
      };

      let authNames = ['apiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [DistrictRanking];
      return this.apiClient.callApi(
        '/district/{district_key}/rankings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDistrictTeamsKeys_1 operation.
     * @callback module:api/ListApi~getDistrictTeamsKeys_1Callback
     * @param {String} error Error message, if any.
     * @param {Array.<String>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of `Team` objects that competed in events in the given district.
     * @param {String} districtKey TBA District Key, eg `2016fim`
     * @param {Object} opts Optional parameters
     * @param {String} [ifNoneMatch] Value of the `ETag` header in the most recently cached response by the client.
     * @param {module:api/ListApi~getDistrictTeamsKeys_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<String>}
     */
    getDistrictTeamsKeys_1(districtKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'districtKey' is set
      if (districtKey === undefined || districtKey === null) {
        throw new Error("Missing the required parameter 'districtKey' when calling getDistrictTeamsKeys_1");
      }

      let pathParams = {
        'district_key': districtKey
      };
      let queryParams = {
      };
      let headerParams = {
        'If-None-Match': opts['ifNoneMatch']
      };
      let formParams = {
      };

      let authNames = ['apiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/district/{district_key}/teams/keys', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDistrictTeamsSimple_1 operation.
     * @callback module:api/ListApi~getDistrictTeamsSimple_1Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TeamSimple>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a short-form list of `Team` objects that competed in events in the given district.
     * @param {String} districtKey TBA District Key, eg `2016fim`
     * @param {Object} opts Optional parameters
     * @param {String} [ifNoneMatch] Value of the `ETag` header in the most recently cached response by the client.
     * @param {module:api/ListApi~getDistrictTeamsSimple_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TeamSimple>}
     */
    getDistrictTeamsSimple_1(districtKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'districtKey' is set
      if (districtKey === undefined || districtKey === null) {
        throw new Error("Missing the required parameter 'districtKey' when calling getDistrictTeamsSimple_1");
      }

      let pathParams = {
        'district_key': districtKey
      };
      let queryParams = {
      };
      let headerParams = {
        'If-None-Match': opts['ifNoneMatch']
      };
      let formParams = {
      };

      let authNames = ['apiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [TeamSimple];
      return this.apiClient.callApi(
        '/district/{district_key}/teams/simple', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDistrictTeams_1 operation.
     * @callback module:api/ListApi~getDistrictTeams_1Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Team>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of `Team` objects that competed in events in the given district.
     * @param {String} districtKey TBA District Key, eg `2016fim`
     * @param {Object} opts Optional parameters
     * @param {String} [ifNoneMatch] Value of the `ETag` header in the most recently cached response by the client.
     * @param {module:api/ListApi~getDistrictTeams_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Team>}
     */
    getDistrictTeams_1(districtKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'districtKey' is set
      if (districtKey === undefined || districtKey === null) {
        throw new Error("Missing the required parameter 'districtKey' when calling getDistrictTeams_1");
      }

      let pathParams = {
        'district_key': districtKey
      };
      let queryParams = {
      };
      let headerParams = {
        'If-None-Match': opts['ifNoneMatch']
      };
      let formParams = {
      };

      let authNames = ['apiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Team];
      return this.apiClient.callApi(
        '/district/{district_key}/teams', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEventTeamsKeys_1 operation.
     * @callback module:api/ListApi~getEventTeamsKeys_1Callback
     * @param {String} error Error message, if any.
     * @param {Array.<String>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of `Team` keys that competed in the given event.
     * @param {String} eventKey TBA Event Key, eg `2016nytr`
     * @param {Object} opts Optional parameters
     * @param {String} [ifNoneMatch] Value of the `ETag` header in the most recently cached response by the client.
     * @param {module:api/ListApi~getEventTeamsKeys_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<String>}
     */
    getEventTeamsKeys_1(eventKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'eventKey' is set
      if (eventKey === undefined || eventKey === null) {
        throw new Error("Missing the required parameter 'eventKey' when calling getEventTeamsKeys_1");
      }

      let pathParams = {
        'event_key': eventKey
      };
      let queryParams = {
      };
      let headerParams = {
        'If-None-Match': opts['ifNoneMatch']
      };
      let formParams = {
      };

      let authNames = ['apiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/event/{event_key}/teams/keys', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEventTeamsSimple_1 operation.
     * @callback module:api/ListApi~getEventTeamsSimple_1Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TeamSimple>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a short-form list of `Team` objects that competed in the given event.
     * @param {String} eventKey TBA Event Key, eg `2016nytr`
     * @param {Object} opts Optional parameters
     * @param {String} [ifNoneMatch] Value of the `ETag` header in the most recently cached response by the client.
     * @param {module:api/ListApi~getEventTeamsSimple_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TeamSimple>}
     */
    getEventTeamsSimple_1(eventKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'eventKey' is set
      if (eventKey === undefined || eventKey === null) {
        throw new Error("Missing the required parameter 'eventKey' when calling getEventTeamsSimple_1");
      }

      let pathParams = {
        'event_key': eventKey
      };
      let queryParams = {
      };
      let headerParams = {
        'If-None-Match': opts['ifNoneMatch']
      };
      let formParams = {
      };

      let authNames = ['apiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [TeamSimple];
      return this.apiClient.callApi(
        '/event/{event_key}/teams/simple', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEventTeamsStatuses_1 operation.
     * @callback module:api/ListApi~getEventTeamsStatuses_1Callback
     * @param {String} error Error message, if any.
     * @param {Object.<String, module:model/{String: TeamEventStatus}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a key-value list of the event statuses for teams competing at the given event.
     * @param {String} eventKey TBA Event Key, eg `2016nytr`
     * @param {Object} opts Optional parameters
     * @param {String} [ifNoneMatch] Value of the `ETag` header in the most recently cached response by the client.
     * @param {module:api/ListApi~getEventTeamsStatuses_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object.<String, module:model/{String: TeamEventStatus}>}
     */
    getEventTeamsStatuses_1(eventKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'eventKey' is set
      if (eventKey === undefined || eventKey === null) {
        throw new Error("Missing the required parameter 'eventKey' when calling getEventTeamsStatuses_1");
      }

      let pathParams = {
        'event_key': eventKey
      };
      let queryParams = {
      };
      let headerParams = {
        'If-None-Match': opts['ifNoneMatch']
      };
      let formParams = {
      };

      let authNames = ['apiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = {'String': TeamEventStatus};
      return this.apiClient.callApi(
        '/event/{event_key}/teams/statuses', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEventTeams_1 operation.
     * @callback module:api/ListApi~getEventTeams_1Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Team>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of `Team` objects that competed in the given event.
     * @param {String} eventKey TBA Event Key, eg `2016nytr`
     * @param {Object} opts Optional parameters
     * @param {String} [ifNoneMatch] Value of the `ETag` header in the most recently cached response by the client.
     * @param {module:api/ListApi~getEventTeams_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Team>}
     */
    getEventTeams_1(eventKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'eventKey' is set
      if (eventKey === undefined || eventKey === null) {
        throw new Error("Missing the required parameter 'eventKey' when calling getEventTeams_1");
      }

      let pathParams = {
        'event_key': eventKey
      };
      let queryParams = {
      };
      let headerParams = {
        'If-None-Match': opts['ifNoneMatch']
      };
      let formParams = {
      };

      let authNames = ['apiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Team];
      return this.apiClient.callApi(
        '/event/{event_key}/teams', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEventsByYearKeys_0 operation.
     * @callback module:api/ListApi~getEventsByYearKeys_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<String>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of event keys in the given year.
     * @param {Number} year Competition Year (or Season). Must be 4 digits.
     * @param {Object} opts Optional parameters
     * @param {String} [ifNoneMatch] Value of the `ETag` header in the most recently cached response by the client.
     * @param {module:api/ListApi~getEventsByYearKeys_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<String>}
     */
    getEventsByYearKeys_0(year, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'year' is set
      if (year === undefined || year === null) {
        throw new Error("Missing the required parameter 'year' when calling getEventsByYearKeys_0");
      }

      let pathParams = {
        'year': year
      };
      let queryParams = {
      };
      let headerParams = {
        'If-None-Match': opts['ifNoneMatch']
      };
      let formParams = {
      };

      let authNames = ['apiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/events/{year}/keys', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEventsByYearSimple_0 operation.
     * @callback module:api/ListApi~getEventsByYearSimple_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/EventSimple>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a short-form list of events in the given year.
     * @param {Number} year Competition Year (or Season). Must be 4 digits.
     * @param {Object} opts Optional parameters
     * @param {String} [ifNoneMatch] Value of the `ETag` header in the most recently cached response by the client.
     * @param {module:api/ListApi~getEventsByYearSimple_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/EventSimple>}
     */
    getEventsByYearSimple_0(year, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'year' is set
      if (year === undefined || year === null) {
        throw new Error("Missing the required parameter 'year' when calling getEventsByYearSimple_0");
      }

      let pathParams = {
        'year': year
      };
      let queryParams = {
      };
      let headerParams = {
        'If-None-Match': opts['ifNoneMatch']
      };
      let formParams = {
      };

      let authNames = ['apiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [EventSimple];
      return this.apiClient.callApi(
        '/events/{year}/simple', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEventsByYear_0 operation.
     * @callback module:api/ListApi~getEventsByYear_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Event>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of events in the given year.
     * @param {Number} year Competition Year (or Season). Must be 4 digits.
     * @param {Object} opts Optional parameters
     * @param {String} [ifNoneMatch] Value of the `ETag` header in the most recently cached response by the client.
     * @param {module:api/ListApi~getEventsByYear_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Event>}
     */
    getEventsByYear_0(year, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'year' is set
      if (year === undefined || year === null) {
        throw new Error("Missing the required parameter 'year' when calling getEventsByYear_0");
      }

      let pathParams = {
        'year': year
      };
      let queryParams = {
      };
      let headerParams = {
        'If-None-Match': opts['ifNoneMatch']
      };
      let formParams = {
      };

      let authNames = ['apiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Event];
      return this.apiClient.callApi(
        '/events/{year}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTeamEventsStatusesByYear operation.
     * @callback module:api/ListApi~getTeamEventsStatusesByYearCallback
     * @param {String} error Error message, if any.
     * @param {Object.<String, module:model/{String: TeamEventStatus}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a key-value list of the event statuses for events this team has competed at in the given year.
     * @param {String} teamKey TBA Team Key, eg `frc254`
     * @param {Number} year Competition Year (or Season). Must be 4 digits.
     * @param {Object} opts Optional parameters
     * @param {String} [ifNoneMatch] Value of the `ETag` header in the most recently cached response by the client.
     * @param {module:api/ListApi~getTeamEventsStatusesByYearCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object.<String, module:model/{String: TeamEventStatus}>}
     */
    getTeamEventsStatusesByYear(teamKey, year, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'teamKey' is set
      if (teamKey === undefined || teamKey === null) {
        throw new Error("Missing the required parameter 'teamKey' when calling getTeamEventsStatusesByYear");
      }
      // verify the required parameter 'year' is set
      if (year === undefined || year === null) {
        throw new Error("Missing the required parameter 'year' when calling getTeamEventsStatusesByYear");
      }

      let pathParams = {
        'team_key': teamKey,
        'year': year
      };
      let queryParams = {
      };
      let headerParams = {
        'If-None-Match': opts['ifNoneMatch']
      };
      let formParams = {
      };

      let authNames = ['apiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = {'String': TeamEventStatus};
      return this.apiClient.callApi(
        '/team/{team_key}/events/{year}/statuses', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTeamsByYearKeys_0 operation.
     * @callback module:api/ListApi~getTeamsByYearKeys_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<String>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list Team Keys that competed in the given year, paginated in groups of 500.
     * @param {Number} year Competition Year (or Season). Must be 4 digits.
     * @param {Number} pageNum Page number of results to return, zero-indexed
     * @param {Object} opts Optional parameters
     * @param {String} [ifNoneMatch] Value of the `ETag` header in the most recently cached response by the client.
     * @param {module:api/ListApi~getTeamsByYearKeys_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<String>}
     */
    getTeamsByYearKeys_0(year, pageNum, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'year' is set
      if (year === undefined || year === null) {
        throw new Error("Missing the required parameter 'year' when calling getTeamsByYearKeys_0");
      }
      // verify the required parameter 'pageNum' is set
      if (pageNum === undefined || pageNum === null) {
        throw new Error("Missing the required parameter 'pageNum' when calling getTeamsByYearKeys_0");
      }

      let pathParams = {
        'year': year,
        'page_num': pageNum
      };
      let queryParams = {
      };
      let headerParams = {
        'If-None-Match': opts['ifNoneMatch']
      };
      let formParams = {
      };

      let authNames = ['apiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/teams/{year}/{page_num}/keys', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTeamsByYearSimple_0 operation.
     * @callback module:api/ListApi~getTeamsByYearSimple_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TeamSimple>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of short form `Team_Simple` objects that competed in the given year, paginated in groups of 500.
     * @param {Number} year Competition Year (or Season). Must be 4 digits.
     * @param {Number} pageNum Page number of results to return, zero-indexed
     * @param {Object} opts Optional parameters
     * @param {String} [ifNoneMatch] Value of the `ETag` header in the most recently cached response by the client.
     * @param {module:api/ListApi~getTeamsByYearSimple_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TeamSimple>}
     */
    getTeamsByYearSimple_0(year, pageNum, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'year' is set
      if (year === undefined || year === null) {
        throw new Error("Missing the required parameter 'year' when calling getTeamsByYearSimple_0");
      }
      // verify the required parameter 'pageNum' is set
      if (pageNum === undefined || pageNum === null) {
        throw new Error("Missing the required parameter 'pageNum' when calling getTeamsByYearSimple_0");
      }

      let pathParams = {
        'year': year,
        'page_num': pageNum
      };
      let queryParams = {
      };
      let headerParams = {
        'If-None-Match': opts['ifNoneMatch']
      };
      let formParams = {
      };

      let authNames = ['apiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [TeamSimple];
      return this.apiClient.callApi(
        '/teams/{year}/{page_num}/simple', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTeamsByYear_0 operation.
     * @callback module:api/ListApi~getTeamsByYear_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Team>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of `Team` objects that competed in the given year, paginated in groups of 500.
     * @param {Number} year Competition Year (or Season). Must be 4 digits.
     * @param {Number} pageNum Page number of results to return, zero-indexed
     * @param {Object} opts Optional parameters
     * @param {String} [ifNoneMatch] Value of the `ETag` header in the most recently cached response by the client.
     * @param {module:api/ListApi~getTeamsByYear_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Team>}
     */
    getTeamsByYear_0(year, pageNum, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'year' is set
      if (year === undefined || year === null) {
        throw new Error("Missing the required parameter 'year' when calling getTeamsByYear_0");
      }
      // verify the required parameter 'pageNum' is set
      if (pageNum === undefined || pageNum === null) {
        throw new Error("Missing the required parameter 'pageNum' when calling getTeamsByYear_0");
      }

      let pathParams = {
        'year': year,
        'page_num': pageNum
      };
      let queryParams = {
      };
      let headerParams = {
        'If-None-Match': opts['ifNoneMatch']
      };
      let formParams = {
      };

      let authNames = ['apiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Team];
      return this.apiClient.callApi(
        '/teams/{year}/{page_num}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTeamsKeys_0 operation.
     * @callback module:api/ListApi~getTeamsKeys_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<String>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of Team keys, paginated in groups of 500. (Note, each page will not have 500 teams, but will include the teams within that range of 500.)
     * @param {Number} pageNum Page number of results to return, zero-indexed
     * @param {Object} opts Optional parameters
     * @param {String} [ifNoneMatch] Value of the `ETag` header in the most recently cached response by the client.
     * @param {module:api/ListApi~getTeamsKeys_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<String>}
     */
    getTeamsKeys_0(pageNum, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'pageNum' is set
      if (pageNum === undefined || pageNum === null) {
        throw new Error("Missing the required parameter 'pageNum' when calling getTeamsKeys_0");
      }

      let pathParams = {
        'page_num': pageNum
      };
      let queryParams = {
      };
      let headerParams = {
        'If-None-Match': opts['ifNoneMatch']
      };
      let formParams = {
      };

      let authNames = ['apiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/teams/{page_num}/keys', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTeamsSimple_0 operation.
     * @callback module:api/ListApi~getTeamsSimple_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TeamSimple>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of short form `Team_Simple` objects, paginated in groups of 500.
     * @param {Number} pageNum Page number of results to return, zero-indexed
     * @param {Object} opts Optional parameters
     * @param {String} [ifNoneMatch] Value of the `ETag` header in the most recently cached response by the client.
     * @param {module:api/ListApi~getTeamsSimple_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TeamSimple>}
     */
    getTeamsSimple_0(pageNum, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'pageNum' is set
      if (pageNum === undefined || pageNum === null) {
        throw new Error("Missing the required parameter 'pageNum' when calling getTeamsSimple_0");
      }

      let pathParams = {
        'page_num': pageNum
      };
      let queryParams = {
      };
      let headerParams = {
        'If-None-Match': opts['ifNoneMatch']
      };
      let formParams = {
      };

      let authNames = ['apiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [TeamSimple];
      return this.apiClient.callApi(
        '/teams/{page_num}/simple', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTeams_0 operation.
     * @callback module:api/ListApi~getTeams_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Team>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of `Team` objects, paginated in groups of 500.
     * @param {Number} pageNum Page number of results to return, zero-indexed
     * @param {Object} opts Optional parameters
     * @param {String} [ifNoneMatch] Value of the `ETag` header in the most recently cached response by the client.
     * @param {module:api/ListApi~getTeams_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Team>}
     */
    getTeams_0(pageNum, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'pageNum' is set
      if (pageNum === undefined || pageNum === null) {
        throw new Error("Missing the required parameter 'pageNum' when calling getTeams_0");
      }

      let pathParams = {
        'page_num': pageNum
      };
      let queryParams = {
      };
      let headerParams = {
        'If-None-Match': opts['ifNoneMatch']
      };
      let formParams = {
      };

      let authNames = ['apiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Team];
      return this.apiClient.callApi(
        '/teams/{page_num}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
