/**
 * The Blue Alliance API v3
 * # Overview    Information and statistics about FIRST Robotics Competition teams and events.   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).
 *
 * The version of the OpenAPI document: 3.8.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Award from '../model/Award';
import EliminationAlliance from '../model/EliminationAlliance';
import Event from '../model/Event';
import EventDistrictPoints from '../model/EventDistrictPoints';
import EventInsights from '../model/EventInsights';
import EventOPRs from '../model/EventOPRs';
import EventRanking from '../model/EventRanking';
import EventSimple from '../model/EventSimple';
import Match from '../model/Match';
import MatchSimple from '../model/MatchSimple';
import Team from '../model/Team';
import TeamEventStatus from '../model/TeamEventStatus';
import TeamSimple from '../model/TeamSimple';

/**
* Event service.
* @module api/EventApi
* @version 3.8.2
*/
export default class EventApi {

    /**
    * Constructs a new EventApi. 
    * @alias module:api/EventApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getDistrictEventsKeys_0 operation.
     * @callback module:api/EventApi~getDistrictEventsKeys_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<String>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of event keys for events in the given district.
     * @param {String} districtKey TBA District Key, eg `2016fim`
     * @param {Object} opts Optional parameters
     * @param {String} [ifNoneMatch] Value of the `ETag` header in the most recently cached response by the client.
     * @param {module:api/EventApi~getDistrictEventsKeys_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<String>}
     */
    getDistrictEventsKeys_0(districtKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'districtKey' is set
      if (districtKey === undefined || districtKey === null) {
        throw new Error("Missing the required parameter 'districtKey' when calling getDistrictEventsKeys_0");
      }

      let pathParams = {
        'district_key': districtKey
      };
      let queryParams = {
      };
      let headerParams = {
        'If-None-Match': opts['ifNoneMatch']
      };
      let formParams = {
      };

      let authNames = ['apiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/district/{district_key}/events/keys', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDistrictEventsSimple_0 operation.
     * @callback module:api/EventApi~getDistrictEventsSimple_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/EventSimple>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a short-form list of events in the given district.
     * @param {String} districtKey TBA District Key, eg `2016fim`
     * @param {Object} opts Optional parameters
     * @param {String} [ifNoneMatch] Value of the `ETag` header in the most recently cached response by the client.
     * @param {module:api/EventApi~getDistrictEventsSimple_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/EventSimple>}
     */
    getDistrictEventsSimple_0(districtKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'districtKey' is set
      if (districtKey === undefined || districtKey === null) {
        throw new Error("Missing the required parameter 'districtKey' when calling getDistrictEventsSimple_0");
      }

      let pathParams = {
        'district_key': districtKey
      };
      let queryParams = {
      };
      let headerParams = {
        'If-None-Match': opts['ifNoneMatch']
      };
      let formParams = {
      };

      let authNames = ['apiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [EventSimple];
      return this.apiClient.callApi(
        '/district/{district_key}/events/simple', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDistrictEvents_0 operation.
     * @callback module:api/EventApi~getDistrictEvents_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Event>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of events in the given district.
     * @param {String} districtKey TBA District Key, eg `2016fim`
     * @param {Object} opts Optional parameters
     * @param {String} [ifNoneMatch] Value of the `ETag` header in the most recently cached response by the client.
     * @param {module:api/EventApi~getDistrictEvents_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Event>}
     */
    getDistrictEvents_0(districtKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'districtKey' is set
      if (districtKey === undefined || districtKey === null) {
        throw new Error("Missing the required parameter 'districtKey' when calling getDistrictEvents_0");
      }

      let pathParams = {
        'district_key': districtKey
      };
      let queryParams = {
      };
      let headerParams = {
        'If-None-Match': opts['ifNoneMatch']
      };
      let formParams = {
      };

      let authNames = ['apiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Event];
      return this.apiClient.callApi(
        '/district/{district_key}/events', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEvent operation.
     * @callback module:api/EventApi~getEventCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Event} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets an Event.
     * @param {String} eventKey TBA Event Key, eg `2016nytr`
     * @param {Object} opts Optional parameters
     * @param {String} [ifNoneMatch] Value of the `ETag` header in the most recently cached response by the client.
     * @param {module:api/EventApi~getEventCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Event}
     */
    getEvent(eventKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'eventKey' is set
      if (eventKey === undefined || eventKey === null) {
        throw new Error("Missing the required parameter 'eventKey' when calling getEvent");
      }

      let pathParams = {
        'event_key': eventKey
      };
      let queryParams = {
      };
      let headerParams = {
        'If-None-Match': opts['ifNoneMatch']
      };
      let formParams = {
      };

      let authNames = ['apiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Event;
      return this.apiClient.callApi(
        '/event/{event_key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEventAlliances operation.
     * @callback module:api/EventApi~getEventAlliancesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/EliminationAlliance>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of Elimination Alliances for the given Event.
     * @param {String} eventKey TBA Event Key, eg `2016nytr`
     * @param {Object} opts Optional parameters
     * @param {String} [ifNoneMatch] Value of the `ETag` header in the most recently cached response by the client.
     * @param {module:api/EventApi~getEventAlliancesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/EliminationAlliance>}
     */
    getEventAlliances(eventKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'eventKey' is set
      if (eventKey === undefined || eventKey === null) {
        throw new Error("Missing the required parameter 'eventKey' when calling getEventAlliances");
      }

      let pathParams = {
        'event_key': eventKey
      };
      let queryParams = {
      };
      let headerParams = {
        'If-None-Match': opts['ifNoneMatch']
      };
      let formParams = {
      };

      let authNames = ['apiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [EliminationAlliance];
      return this.apiClient.callApi(
        '/event/{event_key}/alliances', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEventAwards operation.
     * @callback module:api/EventApi~getEventAwardsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Award>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of awards from the given event.
     * @param {String} eventKey TBA Event Key, eg `2016nytr`
     * @param {Object} opts Optional parameters
     * @param {String} [ifNoneMatch] Value of the `ETag` header in the most recently cached response by the client.
     * @param {module:api/EventApi~getEventAwardsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Award>}
     */
    getEventAwards(eventKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'eventKey' is set
      if (eventKey === undefined || eventKey === null) {
        throw new Error("Missing the required parameter 'eventKey' when calling getEventAwards");
      }

      let pathParams = {
        'event_key': eventKey
      };
      let queryParams = {
      };
      let headerParams = {
        'If-None-Match': opts['ifNoneMatch']
      };
      let formParams = {
      };

      let authNames = ['apiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Award];
      return this.apiClient.callApi(
        '/event/{event_key}/awards', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEventDistrictPoints operation.
     * @callback module:api/EventApi~getEventDistrictPointsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EventDistrictPoints} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of team rankings for the Event.
     * @param {String} eventKey TBA Event Key, eg `2016nytr`
     * @param {Object} opts Optional parameters
     * @param {String} [ifNoneMatch] Value of the `ETag` header in the most recently cached response by the client.
     * @param {module:api/EventApi~getEventDistrictPointsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EventDistrictPoints}
     */
    getEventDistrictPoints(eventKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'eventKey' is set
      if (eventKey === undefined || eventKey === null) {
        throw new Error("Missing the required parameter 'eventKey' when calling getEventDistrictPoints");
      }

      let pathParams = {
        'event_key': eventKey
      };
      let queryParams = {
      };
      let headerParams = {
        'If-None-Match': opts['ifNoneMatch']
      };
      let formParams = {
      };

      let authNames = ['apiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EventDistrictPoints;
      return this.apiClient.callApi(
        '/event/{event_key}/district_points', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEventInsights operation.
     * @callback module:api/EventApi~getEventInsightsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EventInsights} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a set of Event-specific insights for the given Event.
     * @param {String} eventKey TBA Event Key, eg `2016nytr`
     * @param {Object} opts Optional parameters
     * @param {String} [ifNoneMatch] Value of the `ETag` header in the most recently cached response by the client.
     * @param {module:api/EventApi~getEventInsightsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EventInsights}
     */
    getEventInsights(eventKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'eventKey' is set
      if (eventKey === undefined || eventKey === null) {
        throw new Error("Missing the required parameter 'eventKey' when calling getEventInsights");
      }

      let pathParams = {
        'event_key': eventKey
      };
      let queryParams = {
      };
      let headerParams = {
        'If-None-Match': opts['ifNoneMatch']
      };
      let formParams = {
      };

      let authNames = ['apiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EventInsights;
      return this.apiClient.callApi(
        '/event/{event_key}/insights', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEventMatchTimeseries operation.
     * @callback module:api/EventApi~getEventMatchTimeseriesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<String>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets an array of Match Keys for the given event key that have timeseries data. Returns an empty array if no matches have timeseries data. *WARNING:* This is *not* official data, and is subject to a significant possibility of error, or missing data. Do not rely on this data for any purpose. In fact, pretend we made it up. *WARNING:* This endpoint and corresponding data models are under *active development* and may change at any time, including in breaking ways.
     * @param {String} eventKey TBA Event Key, eg `2016nytr`
     * @param {Object} opts Optional parameters
     * @param {String} [ifNoneMatch] Value of the `ETag` header in the most recently cached response by the client.
     * @param {module:api/EventApi~getEventMatchTimeseriesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<String>}
     */
    getEventMatchTimeseries(eventKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'eventKey' is set
      if (eventKey === undefined || eventKey === null) {
        throw new Error("Missing the required parameter 'eventKey' when calling getEventMatchTimeseries");
      }

      let pathParams = {
        'event_key': eventKey
      };
      let queryParams = {
      };
      let headerParams = {
        'If-None-Match': opts['ifNoneMatch']
      };
      let formParams = {
      };

      let authNames = ['apiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/event/{event_key}/matches/timeseries', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEventMatches operation.
     * @callback module:api/EventApi~getEventMatchesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Match>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of matches for the given event.
     * @param {String} eventKey TBA Event Key, eg `2016nytr`
     * @param {Object} opts Optional parameters
     * @param {String} [ifNoneMatch] Value of the `ETag` header in the most recently cached response by the client.
     * @param {module:api/EventApi~getEventMatchesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Match>}
     */
    getEventMatches(eventKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'eventKey' is set
      if (eventKey === undefined || eventKey === null) {
        throw new Error("Missing the required parameter 'eventKey' when calling getEventMatches");
      }

      let pathParams = {
        'event_key': eventKey
      };
      let queryParams = {
      };
      let headerParams = {
        'If-None-Match': opts['ifNoneMatch']
      };
      let formParams = {
      };

      let authNames = ['apiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Match];
      return this.apiClient.callApi(
        '/event/{event_key}/matches', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEventMatchesKeys operation.
     * @callback module:api/EventApi~getEventMatchesKeysCallback
     * @param {String} error Error message, if any.
     * @param {Array.<String>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of match keys for the given event.
     * @param {String} eventKey TBA Event Key, eg `2016nytr`
     * @param {Object} opts Optional parameters
     * @param {String} [ifNoneMatch] Value of the `ETag` header in the most recently cached response by the client.
     * @param {module:api/EventApi~getEventMatchesKeysCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<String>}
     */
    getEventMatchesKeys(eventKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'eventKey' is set
      if (eventKey === undefined || eventKey === null) {
        throw new Error("Missing the required parameter 'eventKey' when calling getEventMatchesKeys");
      }

      let pathParams = {
        'event_key': eventKey
      };
      let queryParams = {
      };
      let headerParams = {
        'If-None-Match': opts['ifNoneMatch']
      };
      let formParams = {
      };

      let authNames = ['apiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/event/{event_key}/matches/keys', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEventMatchesSimple operation.
     * @callback module:api/EventApi~getEventMatchesSimpleCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/MatchSimple>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a short-form list of matches for the given event.
     * @param {String} eventKey TBA Event Key, eg `2016nytr`
     * @param {Object} opts Optional parameters
     * @param {String} [ifNoneMatch] Value of the `ETag` header in the most recently cached response by the client.
     * @param {module:api/EventApi~getEventMatchesSimpleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/MatchSimple>}
     */
    getEventMatchesSimple(eventKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'eventKey' is set
      if (eventKey === undefined || eventKey === null) {
        throw new Error("Missing the required parameter 'eventKey' when calling getEventMatchesSimple");
      }

      let pathParams = {
        'event_key': eventKey
      };
      let queryParams = {
      };
      let headerParams = {
        'If-None-Match': opts['ifNoneMatch']
      };
      let formParams = {
      };

      let authNames = ['apiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [MatchSimple];
      return this.apiClient.callApi(
        '/event/{event_key}/matches/simple', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEventOPRs operation.
     * @callback module:api/EventApi~getEventOPRsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EventOPRs} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a set of Event OPRs (including OPR, DPR, and CCWM) for the given Event.
     * @param {String} eventKey TBA Event Key, eg `2016nytr`
     * @param {Object} opts Optional parameters
     * @param {String} [ifNoneMatch] Value of the `ETag` header in the most recently cached response by the client.
     * @param {module:api/EventApi~getEventOPRsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EventOPRs}
     */
    getEventOPRs(eventKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'eventKey' is set
      if (eventKey === undefined || eventKey === null) {
        throw new Error("Missing the required parameter 'eventKey' when calling getEventOPRs");
      }

      let pathParams = {
        'event_key': eventKey
      };
      let queryParams = {
      };
      let headerParams = {
        'If-None-Match': opts['ifNoneMatch']
      };
      let formParams = {
      };

      let authNames = ['apiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EventOPRs;
      return this.apiClient.callApi(
        '/event/{event_key}/oprs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEventPredictions operation.
     * @callback module:api/EventApi~getEventPredictionsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets information on TBA-generated predictions for the given Event. Contains year-specific information. *WARNING* This endpoint is currently under development and may change at any time.
     * @param {String} eventKey TBA Event Key, eg `2016nytr`
     * @param {Object} opts Optional parameters
     * @param {String} [ifNoneMatch] Value of the `ETag` header in the most recently cached response by the client.
     * @param {module:api/EventApi~getEventPredictionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getEventPredictions(eventKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'eventKey' is set
      if (eventKey === undefined || eventKey === null) {
        throw new Error("Missing the required parameter 'eventKey' when calling getEventPredictions");
      }

      let pathParams = {
        'event_key': eventKey
      };
      let queryParams = {
      };
      let headerParams = {
        'If-None-Match': opts['ifNoneMatch']
      };
      let formParams = {
      };

      let authNames = ['apiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/event/{event_key}/predictions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEventRankings operation.
     * @callback module:api/EventApi~getEventRankingsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EventRanking} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of team rankings for the Event.
     * @param {String} eventKey TBA Event Key, eg `2016nytr`
     * @param {Object} opts Optional parameters
     * @param {String} [ifNoneMatch] Value of the `ETag` header in the most recently cached response by the client.
     * @param {module:api/EventApi~getEventRankingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EventRanking}
     */
    getEventRankings(eventKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'eventKey' is set
      if (eventKey === undefined || eventKey === null) {
        throw new Error("Missing the required parameter 'eventKey' when calling getEventRankings");
      }

      let pathParams = {
        'event_key': eventKey
      };
      let queryParams = {
      };
      let headerParams = {
        'If-None-Match': opts['ifNoneMatch']
      };
      let formParams = {
      };

      let authNames = ['apiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EventRanking;
      return this.apiClient.callApi(
        '/event/{event_key}/rankings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEventSimple operation.
     * @callback module:api/EventApi~getEventSimpleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EventSimple} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a short-form Event.
     * @param {String} eventKey TBA Event Key, eg `2016nytr`
     * @param {Object} opts Optional parameters
     * @param {String} [ifNoneMatch] Value of the `ETag` header in the most recently cached response by the client.
     * @param {module:api/EventApi~getEventSimpleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EventSimple}
     */
    getEventSimple(eventKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'eventKey' is set
      if (eventKey === undefined || eventKey === null) {
        throw new Error("Missing the required parameter 'eventKey' when calling getEventSimple");
      }

      let pathParams = {
        'event_key': eventKey
      };
      let queryParams = {
      };
      let headerParams = {
        'If-None-Match': opts['ifNoneMatch']
      };
      let formParams = {
      };

      let authNames = ['apiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EventSimple;
      return this.apiClient.callApi(
        '/event/{event_key}/simple', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEventTeams operation.
     * @callback module:api/EventApi~getEventTeamsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Team>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of `Team` objects that competed in the given event.
     * @param {String} eventKey TBA Event Key, eg `2016nytr`
     * @param {Object} opts Optional parameters
     * @param {String} [ifNoneMatch] Value of the `ETag` header in the most recently cached response by the client.
     * @param {module:api/EventApi~getEventTeamsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Team>}
     */
    getEventTeams(eventKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'eventKey' is set
      if (eventKey === undefined || eventKey === null) {
        throw new Error("Missing the required parameter 'eventKey' when calling getEventTeams");
      }

      let pathParams = {
        'event_key': eventKey
      };
      let queryParams = {
      };
      let headerParams = {
        'If-None-Match': opts['ifNoneMatch']
      };
      let formParams = {
      };

      let authNames = ['apiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Team];
      return this.apiClient.callApi(
        '/event/{event_key}/teams', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEventTeamsKeys operation.
     * @callback module:api/EventApi~getEventTeamsKeysCallback
     * @param {String} error Error message, if any.
     * @param {Array.<String>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of `Team` keys that competed in the given event.
     * @param {String} eventKey TBA Event Key, eg `2016nytr`
     * @param {Object} opts Optional parameters
     * @param {String} [ifNoneMatch] Value of the `ETag` header in the most recently cached response by the client.
     * @param {module:api/EventApi~getEventTeamsKeysCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<String>}
     */
    getEventTeamsKeys(eventKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'eventKey' is set
      if (eventKey === undefined || eventKey === null) {
        throw new Error("Missing the required parameter 'eventKey' when calling getEventTeamsKeys");
      }

      let pathParams = {
        'event_key': eventKey
      };
      let queryParams = {
      };
      let headerParams = {
        'If-None-Match': opts['ifNoneMatch']
      };
      let formParams = {
      };

      let authNames = ['apiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/event/{event_key}/teams/keys', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEventTeamsSimple operation.
     * @callback module:api/EventApi~getEventTeamsSimpleCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TeamSimple>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a short-form list of `Team` objects that competed in the given event.
     * @param {String} eventKey TBA Event Key, eg `2016nytr`
     * @param {Object} opts Optional parameters
     * @param {String} [ifNoneMatch] Value of the `ETag` header in the most recently cached response by the client.
     * @param {module:api/EventApi~getEventTeamsSimpleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TeamSimple>}
     */
    getEventTeamsSimple(eventKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'eventKey' is set
      if (eventKey === undefined || eventKey === null) {
        throw new Error("Missing the required parameter 'eventKey' when calling getEventTeamsSimple");
      }

      let pathParams = {
        'event_key': eventKey
      };
      let queryParams = {
      };
      let headerParams = {
        'If-None-Match': opts['ifNoneMatch']
      };
      let formParams = {
      };

      let authNames = ['apiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [TeamSimple];
      return this.apiClient.callApi(
        '/event/{event_key}/teams/simple', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEventTeamsStatuses operation.
     * @callback module:api/EventApi~getEventTeamsStatusesCallback
     * @param {String} error Error message, if any.
     * @param {Object.<String, module:model/{String: TeamEventStatus}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a key-value list of the event statuses for teams competing at the given event.
     * @param {String} eventKey TBA Event Key, eg `2016nytr`
     * @param {Object} opts Optional parameters
     * @param {String} [ifNoneMatch] Value of the `ETag` header in the most recently cached response by the client.
     * @param {module:api/EventApi~getEventTeamsStatusesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object.<String, module:model/{String: TeamEventStatus}>}
     */
    getEventTeamsStatuses(eventKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'eventKey' is set
      if (eventKey === undefined || eventKey === null) {
        throw new Error("Missing the required parameter 'eventKey' when calling getEventTeamsStatuses");
      }

      let pathParams = {
        'event_key': eventKey
      };
      let queryParams = {
      };
      let headerParams = {
        'If-None-Match': opts['ifNoneMatch']
      };
      let formParams = {
      };

      let authNames = ['apiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = {'String': TeamEventStatus};
      return this.apiClient.callApi(
        '/event/{event_key}/teams/statuses', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEventsByYear operation.
     * @callback module:api/EventApi~getEventsByYearCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Event>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of events in the given year.
     * @param {Number} year Competition Year (or Season). Must be 4 digits.
     * @param {Object} opts Optional parameters
     * @param {String} [ifNoneMatch] Value of the `ETag` header in the most recently cached response by the client.
     * @param {module:api/EventApi~getEventsByYearCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Event>}
     */
    getEventsByYear(year, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'year' is set
      if (year === undefined || year === null) {
        throw new Error("Missing the required parameter 'year' when calling getEventsByYear");
      }

      let pathParams = {
        'year': year
      };
      let queryParams = {
      };
      let headerParams = {
        'If-None-Match': opts['ifNoneMatch']
      };
      let formParams = {
      };

      let authNames = ['apiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Event];
      return this.apiClient.callApi(
        '/events/{year}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEventsByYearKeys operation.
     * @callback module:api/EventApi~getEventsByYearKeysCallback
     * @param {String} error Error message, if any.
     * @param {Array.<String>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of event keys in the given year.
     * @param {Number} year Competition Year (or Season). Must be 4 digits.
     * @param {Object} opts Optional parameters
     * @param {String} [ifNoneMatch] Value of the `ETag` header in the most recently cached response by the client.
     * @param {module:api/EventApi~getEventsByYearKeysCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<String>}
     */
    getEventsByYearKeys(year, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'year' is set
      if (year === undefined || year === null) {
        throw new Error("Missing the required parameter 'year' when calling getEventsByYearKeys");
      }

      let pathParams = {
        'year': year
      };
      let queryParams = {
      };
      let headerParams = {
        'If-None-Match': opts['ifNoneMatch']
      };
      let formParams = {
      };

      let authNames = ['apiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/events/{year}/keys', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEventsByYearSimple operation.
     * @callback module:api/EventApi~getEventsByYearSimpleCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/EventSimple>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a short-form list of events in the given year.
     * @param {Number} year Competition Year (or Season). Must be 4 digits.
     * @param {Object} opts Optional parameters
     * @param {String} [ifNoneMatch] Value of the `ETag` header in the most recently cached response by the client.
     * @param {module:api/EventApi~getEventsByYearSimpleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/EventSimple>}
     */
    getEventsByYearSimple(year, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'year' is set
      if (year === undefined || year === null) {
        throw new Error("Missing the required parameter 'year' when calling getEventsByYearSimple");
      }

      let pathParams = {
        'year': year
      };
      let queryParams = {
      };
      let headerParams = {
        'If-None-Match': opts['ifNoneMatch']
      };
      let formParams = {
      };

      let authNames = ['apiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [EventSimple];
      return this.apiClient.callApi(
        '/events/{year}/simple', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTeamEventAwards_0 operation.
     * @callback module:api/EventApi~getTeamEventAwards_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Award>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of awards the given team won at the given event.
     * @param {String} teamKey TBA Team Key, eg `frc254`
     * @param {String} eventKey TBA Event Key, eg `2016nytr`
     * @param {Object} opts Optional parameters
     * @param {String} [ifNoneMatch] Value of the `ETag` header in the most recently cached response by the client.
     * @param {module:api/EventApi~getTeamEventAwards_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Award>}
     */
    getTeamEventAwards_0(teamKey, eventKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'teamKey' is set
      if (teamKey === undefined || teamKey === null) {
        throw new Error("Missing the required parameter 'teamKey' when calling getTeamEventAwards_0");
      }
      // verify the required parameter 'eventKey' is set
      if (eventKey === undefined || eventKey === null) {
        throw new Error("Missing the required parameter 'eventKey' when calling getTeamEventAwards_0");
      }

      let pathParams = {
        'team_key': teamKey,
        'event_key': eventKey
      };
      let queryParams = {
      };
      let headerParams = {
        'If-None-Match': opts['ifNoneMatch']
      };
      let formParams = {
      };

      let authNames = ['apiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Award];
      return this.apiClient.callApi(
        '/team/{team_key}/event/{event_key}/awards', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTeamEventMatchesKeys_0 operation.
     * @callback module:api/EventApi~getTeamEventMatchesKeys_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<String>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of match keys for matches for the given team and event.
     * @param {String} teamKey TBA Team Key, eg `frc254`
     * @param {String} eventKey TBA Event Key, eg `2016nytr`
     * @param {Object} opts Optional parameters
     * @param {String} [ifNoneMatch] Value of the `ETag` header in the most recently cached response by the client.
     * @param {module:api/EventApi~getTeamEventMatchesKeys_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<String>}
     */
    getTeamEventMatchesKeys_0(teamKey, eventKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'teamKey' is set
      if (teamKey === undefined || teamKey === null) {
        throw new Error("Missing the required parameter 'teamKey' when calling getTeamEventMatchesKeys_0");
      }
      // verify the required parameter 'eventKey' is set
      if (eventKey === undefined || eventKey === null) {
        throw new Error("Missing the required parameter 'eventKey' when calling getTeamEventMatchesKeys_0");
      }

      let pathParams = {
        'team_key': teamKey,
        'event_key': eventKey
      };
      let queryParams = {
      };
      let headerParams = {
        'If-None-Match': opts['ifNoneMatch']
      };
      let formParams = {
      };

      let authNames = ['apiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/team/{team_key}/event/{event_key}/matches/keys', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTeamEventMatchesSimple_0 operation.
     * @callback module:api/EventApi~getTeamEventMatchesSimple_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Match>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a short-form list of matches for the given team and event.
     * @param {String} teamKey TBA Team Key, eg `frc254`
     * @param {String} eventKey TBA Event Key, eg `2016nytr`
     * @param {Object} opts Optional parameters
     * @param {String} [ifNoneMatch] Value of the `ETag` header in the most recently cached response by the client.
     * @param {module:api/EventApi~getTeamEventMatchesSimple_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Match>}
     */
    getTeamEventMatchesSimple_0(teamKey, eventKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'teamKey' is set
      if (teamKey === undefined || teamKey === null) {
        throw new Error("Missing the required parameter 'teamKey' when calling getTeamEventMatchesSimple_0");
      }
      // verify the required parameter 'eventKey' is set
      if (eventKey === undefined || eventKey === null) {
        throw new Error("Missing the required parameter 'eventKey' when calling getTeamEventMatchesSimple_0");
      }

      let pathParams = {
        'team_key': teamKey,
        'event_key': eventKey
      };
      let queryParams = {
      };
      let headerParams = {
        'If-None-Match': opts['ifNoneMatch']
      };
      let formParams = {
      };

      let authNames = ['apiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Match];
      return this.apiClient.callApi(
        '/team/{team_key}/event/{event_key}/matches/simple', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTeamEventMatches_0 operation.
     * @callback module:api/EventApi~getTeamEventMatches_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Match>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of matches for the given team and event.
     * @param {String} teamKey TBA Team Key, eg `frc254`
     * @param {String} eventKey TBA Event Key, eg `2016nytr`
     * @param {Object} opts Optional parameters
     * @param {String} [ifNoneMatch] Value of the `ETag` header in the most recently cached response by the client.
     * @param {module:api/EventApi~getTeamEventMatches_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Match>}
     */
    getTeamEventMatches_0(teamKey, eventKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'teamKey' is set
      if (teamKey === undefined || teamKey === null) {
        throw new Error("Missing the required parameter 'teamKey' when calling getTeamEventMatches_0");
      }
      // verify the required parameter 'eventKey' is set
      if (eventKey === undefined || eventKey === null) {
        throw new Error("Missing the required parameter 'eventKey' when calling getTeamEventMatches_0");
      }

      let pathParams = {
        'team_key': teamKey,
        'event_key': eventKey
      };
      let queryParams = {
      };
      let headerParams = {
        'If-None-Match': opts['ifNoneMatch']
      };
      let formParams = {
      };

      let authNames = ['apiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Match];
      return this.apiClient.callApi(
        '/team/{team_key}/event/{event_key}/matches', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTeamEventStatus_0 operation.
     * @callback module:api/EventApi~getTeamEventStatus_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/TeamEventStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the competition rank and status of the team at the given event.
     * @param {String} teamKey TBA Team Key, eg `frc254`
     * @param {String} eventKey TBA Event Key, eg `2016nytr`
     * @param {Object} opts Optional parameters
     * @param {String} [ifNoneMatch] Value of the `ETag` header in the most recently cached response by the client.
     * @param {module:api/EventApi~getTeamEventStatus_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TeamEventStatus}
     */
    getTeamEventStatus_0(teamKey, eventKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'teamKey' is set
      if (teamKey === undefined || teamKey === null) {
        throw new Error("Missing the required parameter 'teamKey' when calling getTeamEventStatus_0");
      }
      // verify the required parameter 'eventKey' is set
      if (eventKey === undefined || eventKey === null) {
        throw new Error("Missing the required parameter 'eventKey' when calling getTeamEventStatus_0");
      }

      let pathParams = {
        'team_key': teamKey,
        'event_key': eventKey
      };
      let queryParams = {
      };
      let headerParams = {
        'If-None-Match': opts['ifNoneMatch']
      };
      let formParams = {
      };

      let authNames = ['apiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TeamEventStatus;
      return this.apiClient.callApi(
        '/team/{team_key}/event/{event_key}/status', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTeamEventsByYearKeys_0 operation.
     * @callback module:api/EventApi~getTeamEventsByYearKeys_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<String>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of the event keys for events this team has competed at in the given year.
     * @param {String} teamKey TBA Team Key, eg `frc254`
     * @param {Number} year Competition Year (or Season). Must be 4 digits.
     * @param {Object} opts Optional parameters
     * @param {String} [ifNoneMatch] Value of the `ETag` header in the most recently cached response by the client.
     * @param {module:api/EventApi~getTeamEventsByYearKeys_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<String>}
     */
    getTeamEventsByYearKeys_0(teamKey, year, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'teamKey' is set
      if (teamKey === undefined || teamKey === null) {
        throw new Error("Missing the required parameter 'teamKey' when calling getTeamEventsByYearKeys_0");
      }
      // verify the required parameter 'year' is set
      if (year === undefined || year === null) {
        throw new Error("Missing the required parameter 'year' when calling getTeamEventsByYearKeys_0");
      }

      let pathParams = {
        'team_key': teamKey,
        'year': year
      };
      let queryParams = {
      };
      let headerParams = {
        'If-None-Match': opts['ifNoneMatch']
      };
      let formParams = {
      };

      let authNames = ['apiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/team/{team_key}/events/{year}/keys', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTeamEventsByYearSimple_0 operation.
     * @callback module:api/EventApi~getTeamEventsByYearSimple_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/EventSimple>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a short-form list of events this team has competed at in the given year.
     * @param {String} teamKey TBA Team Key, eg `frc254`
     * @param {Number} year Competition Year (or Season). Must be 4 digits.
     * @param {Object} opts Optional parameters
     * @param {String} [ifNoneMatch] Value of the `ETag` header in the most recently cached response by the client.
     * @param {module:api/EventApi~getTeamEventsByYearSimple_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/EventSimple>}
     */
    getTeamEventsByYearSimple_0(teamKey, year, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'teamKey' is set
      if (teamKey === undefined || teamKey === null) {
        throw new Error("Missing the required parameter 'teamKey' when calling getTeamEventsByYearSimple_0");
      }
      // verify the required parameter 'year' is set
      if (year === undefined || year === null) {
        throw new Error("Missing the required parameter 'year' when calling getTeamEventsByYearSimple_0");
      }

      let pathParams = {
        'team_key': teamKey,
        'year': year
      };
      let queryParams = {
      };
      let headerParams = {
        'If-None-Match': opts['ifNoneMatch']
      };
      let formParams = {
      };

      let authNames = ['apiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [EventSimple];
      return this.apiClient.callApi(
        '/team/{team_key}/events/{year}/simple', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTeamEventsByYear_0 operation.
     * @callback module:api/EventApi~getTeamEventsByYear_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Event>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of events this team has competed at in the given year.
     * @param {String} teamKey TBA Team Key, eg `frc254`
     * @param {Number} year Competition Year (or Season). Must be 4 digits.
     * @param {Object} opts Optional parameters
     * @param {String} [ifNoneMatch] Value of the `ETag` header in the most recently cached response by the client.
     * @param {module:api/EventApi~getTeamEventsByYear_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Event>}
     */
    getTeamEventsByYear_0(teamKey, year, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'teamKey' is set
      if (teamKey === undefined || teamKey === null) {
        throw new Error("Missing the required parameter 'teamKey' when calling getTeamEventsByYear_0");
      }
      // verify the required parameter 'year' is set
      if (year === undefined || year === null) {
        throw new Error("Missing the required parameter 'year' when calling getTeamEventsByYear_0");
      }

      let pathParams = {
        'team_key': teamKey,
        'year': year
      };
      let queryParams = {
      };
      let headerParams = {
        'If-None-Match': opts['ifNoneMatch']
      };
      let formParams = {
      };

      let authNames = ['apiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Event];
      return this.apiClient.callApi(
        '/team/{team_key}/events/{year}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTeamEventsKeys_0 operation.
     * @callback module:api/EventApi~getTeamEventsKeys_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<String>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of the event keys for all events this team has competed at.
     * @param {String} teamKey TBA Team Key, eg `frc254`
     * @param {Object} opts Optional parameters
     * @param {String} [ifNoneMatch] Value of the `ETag` header in the most recently cached response by the client.
     * @param {module:api/EventApi~getTeamEventsKeys_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<String>}
     */
    getTeamEventsKeys_0(teamKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'teamKey' is set
      if (teamKey === undefined || teamKey === null) {
        throw new Error("Missing the required parameter 'teamKey' when calling getTeamEventsKeys_0");
      }

      let pathParams = {
        'team_key': teamKey
      };
      let queryParams = {
      };
      let headerParams = {
        'If-None-Match': opts['ifNoneMatch']
      };
      let formParams = {
      };

      let authNames = ['apiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/team/{team_key}/events/keys', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTeamEventsSimple_0 operation.
     * @callback module:api/EventApi~getTeamEventsSimple_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/EventSimple>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a short-form list of all events this team has competed at.
     * @param {String} teamKey TBA Team Key, eg `frc254`
     * @param {Object} opts Optional parameters
     * @param {String} [ifNoneMatch] Value of the `ETag` header in the most recently cached response by the client.
     * @param {module:api/EventApi~getTeamEventsSimple_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/EventSimple>}
     */
    getTeamEventsSimple_0(teamKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'teamKey' is set
      if (teamKey === undefined || teamKey === null) {
        throw new Error("Missing the required parameter 'teamKey' when calling getTeamEventsSimple_0");
      }

      let pathParams = {
        'team_key': teamKey
      };
      let queryParams = {
      };
      let headerParams = {
        'If-None-Match': opts['ifNoneMatch']
      };
      let formParams = {
      };

      let authNames = ['apiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [EventSimple];
      return this.apiClient.callApi(
        '/team/{team_key}/events/simple', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTeamEventsStatusesByYear_1 operation.
     * @callback module:api/EventApi~getTeamEventsStatusesByYear_1Callback
     * @param {String} error Error message, if any.
     * @param {Object.<String, module:model/{String: TeamEventStatus}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a key-value list of the event statuses for events this team has competed at in the given year.
     * @param {String} teamKey TBA Team Key, eg `frc254`
     * @param {Number} year Competition Year (or Season). Must be 4 digits.
     * @param {Object} opts Optional parameters
     * @param {String} [ifNoneMatch] Value of the `ETag` header in the most recently cached response by the client.
     * @param {module:api/EventApi~getTeamEventsStatusesByYear_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object.<String, module:model/{String: TeamEventStatus}>}
     */
    getTeamEventsStatusesByYear_1(teamKey, year, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'teamKey' is set
      if (teamKey === undefined || teamKey === null) {
        throw new Error("Missing the required parameter 'teamKey' when calling getTeamEventsStatusesByYear_1");
      }
      // verify the required parameter 'year' is set
      if (year === undefined || year === null) {
        throw new Error("Missing the required parameter 'year' when calling getTeamEventsStatusesByYear_1");
      }

      let pathParams = {
        'team_key': teamKey,
        'year': year
      };
      let queryParams = {
      };
      let headerParams = {
        'If-None-Match': opts['ifNoneMatch']
      };
      let formParams = {
      };

      let authNames = ['apiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = {'String': TeamEventStatus};
      return this.apiClient.callApi(
        '/team/{team_key}/events/{year}/statuses', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTeamEvents_0 operation.
     * @callback module:api/EventApi~getTeamEvents_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Event>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of all events this team has competed at.
     * @param {String} teamKey TBA Team Key, eg `frc254`
     * @param {Object} opts Optional parameters
     * @param {String} [ifNoneMatch] Value of the `ETag` header in the most recently cached response by the client.
     * @param {module:api/EventApi~getTeamEvents_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Event>}
     */
    getTeamEvents_0(teamKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'teamKey' is set
      if (teamKey === undefined || teamKey === null) {
        throw new Error("Missing the required parameter 'teamKey' when calling getTeamEvents_0");
      }

      let pathParams = {
        'team_key': teamKey
      };
      let queryParams = {
      };
      let headerParams = {
        'If-None-Match': opts['ifNoneMatch']
      };
      let formParams = {
      };

      let authNames = ['apiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Event];
      return this.apiClient.callApi(
        '/team/{team_key}/events', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
