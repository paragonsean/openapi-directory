/**
 * The Blue Alliance API v3
 * # Overview    Information and statistics about FIRST Robotics Competition teams and events.   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).
 *
 * The version of the OpenAPI document: 3.8.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Team model module.
 * @module model/Team
 * @version 3.8.2
 */
class Team {
    /**
     * Constructs a new <code>Team</code>.
     * @alias module:model/Team
     * @param key {String} TBA team key with the format `frcXXXX` with `XXXX` representing the team number.
     * @param name {String} Official long name registered with FIRST.
     * @param teamNumber {Number} Official team number issued by FIRST.
     */
    constructor(key, name, teamNumber) { 
        
        Team.initialize(this, key, name, teamNumber);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, key, name, teamNumber) { 
        obj['key'] = key;
        obj['name'] = name;
        obj['team_number'] = teamNumber;
    }

    /**
     * Constructs a <code>Team</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Team} obj Optional instance to populate.
     * @return {module:model/Team} The populated <code>Team</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Team();

            if (data.hasOwnProperty('address')) {
                obj['address'] = ApiClient.convertToType(data['address'], 'String');
            }
            if (data.hasOwnProperty('city')) {
                obj['city'] = ApiClient.convertToType(data['city'], 'String');
            }
            if (data.hasOwnProperty('country')) {
                obj['country'] = ApiClient.convertToType(data['country'], 'String');
            }
            if (data.hasOwnProperty('gmaps_place_id')) {
                obj['gmaps_place_id'] = ApiClient.convertToType(data['gmaps_place_id'], 'String');
            }
            if (data.hasOwnProperty('gmaps_url')) {
                obj['gmaps_url'] = ApiClient.convertToType(data['gmaps_url'], 'String');
            }
            if (data.hasOwnProperty('home_championship')) {
                obj['home_championship'] = ApiClient.convertToType(data['home_championship'], Object);
            }
            if (data.hasOwnProperty('key')) {
                obj['key'] = ApiClient.convertToType(data['key'], 'String');
            }
            if (data.hasOwnProperty('lat')) {
                obj['lat'] = ApiClient.convertToType(data['lat'], 'Number');
            }
            if (data.hasOwnProperty('lng')) {
                obj['lng'] = ApiClient.convertToType(data['lng'], 'Number');
            }
            if (data.hasOwnProperty('location_name')) {
                obj['location_name'] = ApiClient.convertToType(data['location_name'], 'String');
            }
            if (data.hasOwnProperty('motto')) {
                obj['motto'] = ApiClient.convertToType(data['motto'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('nickname')) {
                obj['nickname'] = ApiClient.convertToType(data['nickname'], 'String');
            }
            if (data.hasOwnProperty('postal_code')) {
                obj['postal_code'] = ApiClient.convertToType(data['postal_code'], 'String');
            }
            if (data.hasOwnProperty('rookie_year')) {
                obj['rookie_year'] = ApiClient.convertToType(data['rookie_year'], 'Number');
            }
            if (data.hasOwnProperty('school_name')) {
                obj['school_name'] = ApiClient.convertToType(data['school_name'], 'String');
            }
            if (data.hasOwnProperty('state_prov')) {
                obj['state_prov'] = ApiClient.convertToType(data['state_prov'], 'String');
            }
            if (data.hasOwnProperty('team_number')) {
                obj['team_number'] = ApiClient.convertToType(data['team_number'], 'Number');
            }
            if (data.hasOwnProperty('website')) {
                obj['website'] = ApiClient.convertToType(data['website'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Team</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Team</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Team.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['address'] && !(typeof data['address'] === 'string' || data['address'] instanceof String)) {
            throw new Error("Expected the field `address` to be a primitive type in the JSON string but got " + data['address']);
        }
        // ensure the json data is a string
        if (data['city'] && !(typeof data['city'] === 'string' || data['city'] instanceof String)) {
            throw new Error("Expected the field `city` to be a primitive type in the JSON string but got " + data['city']);
        }
        // ensure the json data is a string
        if (data['country'] && !(typeof data['country'] === 'string' || data['country'] instanceof String)) {
            throw new Error("Expected the field `country` to be a primitive type in the JSON string but got " + data['country']);
        }
        // ensure the json data is a string
        if (data['gmaps_place_id'] && !(typeof data['gmaps_place_id'] === 'string' || data['gmaps_place_id'] instanceof String)) {
            throw new Error("Expected the field `gmaps_place_id` to be a primitive type in the JSON string but got " + data['gmaps_place_id']);
        }
        // ensure the json data is a string
        if (data['gmaps_url'] && !(typeof data['gmaps_url'] === 'string' || data['gmaps_url'] instanceof String)) {
            throw new Error("Expected the field `gmaps_url` to be a primitive type in the JSON string but got " + data['gmaps_url']);
        }
        // ensure the json data is a string
        if (data['key'] && !(typeof data['key'] === 'string' || data['key'] instanceof String)) {
            throw new Error("Expected the field `key` to be a primitive type in the JSON string but got " + data['key']);
        }
        // ensure the json data is a string
        if (data['location_name'] && !(typeof data['location_name'] === 'string' || data['location_name'] instanceof String)) {
            throw new Error("Expected the field `location_name` to be a primitive type in the JSON string but got " + data['location_name']);
        }
        // ensure the json data is a string
        if (data['motto'] && !(typeof data['motto'] === 'string' || data['motto'] instanceof String)) {
            throw new Error("Expected the field `motto` to be a primitive type in the JSON string but got " + data['motto']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['nickname'] && !(typeof data['nickname'] === 'string' || data['nickname'] instanceof String)) {
            throw new Error("Expected the field `nickname` to be a primitive type in the JSON string but got " + data['nickname']);
        }
        // ensure the json data is a string
        if (data['postal_code'] && !(typeof data['postal_code'] === 'string' || data['postal_code'] instanceof String)) {
            throw new Error("Expected the field `postal_code` to be a primitive type in the JSON string but got " + data['postal_code']);
        }
        // ensure the json data is a string
        if (data['school_name'] && !(typeof data['school_name'] === 'string' || data['school_name'] instanceof String)) {
            throw new Error("Expected the field `school_name` to be a primitive type in the JSON string but got " + data['school_name']);
        }
        // ensure the json data is a string
        if (data['state_prov'] && !(typeof data['state_prov'] === 'string' || data['state_prov'] instanceof String)) {
            throw new Error("Expected the field `state_prov` to be a primitive type in the JSON string but got " + data['state_prov']);
        }
        // ensure the json data is a string
        if (data['website'] && !(typeof data['website'] === 'string' || data['website'] instanceof String)) {
            throw new Error("Expected the field `website` to be a primitive type in the JSON string but got " + data['website']);
        }

        return true;
    }


}

Team.RequiredProperties = ["key", "name", "team_number"];

/**
 * Will be NULL, for future development.
 * @member {String} address
 */
Team.prototype['address'] = undefined;

/**
 * City of team derived from parsing the address registered with FIRST.
 * @member {String} city
 */
Team.prototype['city'] = undefined;

/**
 * Country of team derived from parsing the address registered with FIRST.
 * @member {String} country
 */
Team.prototype['country'] = undefined;

/**
 * Will be NULL, for future development.
 * @member {String} gmaps_place_id
 */
Team.prototype['gmaps_place_id'] = undefined;

/**
 * Will be NULL, for future development.
 * @member {String} gmaps_url
 */
Team.prototype['gmaps_url'] = undefined;

/**
 * Location of the team's home championship each year as a key-value pair. The year (as a string) is the key, and the city is the value.
 * @member {Object} home_championship
 */
Team.prototype['home_championship'] = undefined;

/**
 * TBA team key with the format `frcXXXX` with `XXXX` representing the team number.
 * @member {String} key
 */
Team.prototype['key'] = undefined;

/**
 * Will be NULL, for future development.
 * @member {Number} lat
 */
Team.prototype['lat'] = undefined;

/**
 * Will be NULL, for future development.
 * @member {Number} lng
 */
Team.prototype['lng'] = undefined;

/**
 * Will be NULL, for future development.
 * @member {String} location_name
 */
Team.prototype['location_name'] = undefined;

/**
 * Team's motto as provided by FIRST. This field is deprecated and will return null - will be removed at end-of-season in 2019.
 * @member {String} motto
 */
Team.prototype['motto'] = undefined;

/**
 * Official long name registered with FIRST.
 * @member {String} name
 */
Team.prototype['name'] = undefined;

/**
 * Team nickname provided by FIRST.
 * @member {String} nickname
 */
Team.prototype['nickname'] = undefined;

/**
 * Postal code from the team address.
 * @member {String} postal_code
 */
Team.prototype['postal_code'] = undefined;

/**
 * First year the team officially competed.
 * @member {Number} rookie_year
 */
Team.prototype['rookie_year'] = undefined;

/**
 * Name of team school or affilited group registered with FIRST.
 * @member {String} school_name
 */
Team.prototype['school_name'] = undefined;

/**
 * State of team derived from parsing the address registered with FIRST.
 * @member {String} state_prov
 */
Team.prototype['state_prov'] = undefined;

/**
 * Official team number issued by FIRST.
 * @member {Number} team_number
 */
Team.prototype['team_number'] = undefined;

/**
 * Official website associated with the team.
 * @member {String} website
 */
Team.prototype['website'] = undefined;






export default Team;

