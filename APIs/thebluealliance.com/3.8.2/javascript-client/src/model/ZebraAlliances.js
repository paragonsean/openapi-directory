/**
 * The Blue Alliance API v3
 * # Overview    Information and statistics about FIRST Robotics Competition teams and events.   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).
 *
 * The version of the OpenAPI document: 3.8.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ZebraTeam from './ZebraTeam';

/**
 * The ZebraAlliances model module.
 * @module model/ZebraAlliances
 * @version 3.8.2
 */
class ZebraAlliances {
    /**
     * Constructs a new <code>ZebraAlliances</code>.
     * @alias module:model/ZebraAlliances
     */
    constructor() { 
        
        ZebraAlliances.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ZebraAlliances</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ZebraAlliances} obj Optional instance to populate.
     * @return {module:model/ZebraAlliances} The populated <code>ZebraAlliances</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ZebraAlliances();

            if (data.hasOwnProperty('blue')) {
                obj['blue'] = ApiClient.convertToType(data['blue'], [ZebraTeam]);
            }
            if (data.hasOwnProperty('red')) {
                obj['red'] = ApiClient.convertToType(data['red'], [ZebraTeam]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ZebraAlliances</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ZebraAlliances</code>.
     */
    static validateJSON(data) {
        if (data['blue']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['blue'])) {
                throw new Error("Expected the field `blue` to be an array in the JSON data but got " + data['blue']);
            }
            // validate the optional field `blue` (array)
            for (const item of data['blue']) {
                ZebraTeam.validateJSON(item);
            };
        }
        if (data['red']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['red'])) {
                throw new Error("Expected the field `red` to be an array in the JSON data but got " + data['red']);
            }
            // validate the optional field `red` (array)
            for (const item of data['red']) {
                ZebraTeam.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * Zebra data for teams on the blue alliance
 * @member {Array.<module:model/ZebraTeam>} blue
 */
ZebraAlliances.prototype['blue'] = undefined;

/**
 * Zebra MotionWorks data for teams on the red alliance
 * @member {Array.<module:model/ZebraTeam>} red
 */
ZebraAlliances.prototype['red'] = undefined;






export default ZebraAlliances;

