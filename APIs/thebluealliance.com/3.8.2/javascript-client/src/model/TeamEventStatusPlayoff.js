/**
 * The Blue Alliance API v3
 * # Overview    Information and statistics about FIRST Robotics Competition teams and events.   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).
 *
 * The version of the OpenAPI document: 3.8.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import WLTRecord from './WLTRecord';

/**
 * The TeamEventStatusPlayoff model module.
 * @module model/TeamEventStatusPlayoff
 * @version 3.8.2
 */
class TeamEventStatusPlayoff {
    /**
     * Constructs a new <code>TeamEventStatusPlayoff</code>.
     * Playoff status for this team, may be null if the team did not make playoffs, or playoffs have not begun.
     * @alias module:model/TeamEventStatusPlayoff
     */
    constructor() { 
        
        TeamEventStatusPlayoff.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TeamEventStatusPlayoff</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TeamEventStatusPlayoff} obj Optional instance to populate.
     * @return {module:model/TeamEventStatusPlayoff} The populated <code>TeamEventStatusPlayoff</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TeamEventStatusPlayoff();

            if (data.hasOwnProperty('current_level_record')) {
                obj['current_level_record'] = WLTRecord.constructFromObject(data['current_level_record']);
            }
            if (data.hasOwnProperty('level')) {
                obj['level'] = ApiClient.convertToType(data['level'], 'String');
            }
            if (data.hasOwnProperty('playoff_average')) {
                obj['playoff_average'] = ApiClient.convertToType(data['playoff_average'], 'Number');
            }
            if (data.hasOwnProperty('record')) {
                obj['record'] = WLTRecord.constructFromObject(data['record']);
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TeamEventStatusPlayoff</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TeamEventStatusPlayoff</code>.
     */
    static validateJSON(data) {
        // validate the optional field `current_level_record`
        if (data['current_level_record']) { // data not null
          WLTRecord.validateJSON(data['current_level_record']);
        }
        // ensure the json data is a string
        if (data['level'] && !(typeof data['level'] === 'string' || data['level'] instanceof String)) {
            throw new Error("Expected the field `level` to be a primitive type in the JSON string but got " + data['level']);
        }
        // validate the optional field `record`
        if (data['record']) { // data not null
          WLTRecord.validateJSON(data['record']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }

        return true;
    }


}



/**
 * @member {module:model/WLTRecord} current_level_record
 */
TeamEventStatusPlayoff.prototype['current_level_record'] = undefined;

/**
 * The highest playoff level the team reached.
 * @member {module:model/TeamEventStatusPlayoff.LevelEnum} level
 */
TeamEventStatusPlayoff.prototype['level'] = undefined;

/**
 * The average match score during playoffs. Year specific. May be null if not relevant for a given year.
 * @member {Number} playoff_average
 */
TeamEventStatusPlayoff.prototype['playoff_average'] = undefined;

/**
 * @member {module:model/WLTRecord} record
 */
TeamEventStatusPlayoff.prototype['record'] = undefined;

/**
 * Current competition status for the playoffs.
 * @member {module:model/TeamEventStatusPlayoff.StatusEnum} status
 */
TeamEventStatusPlayoff.prototype['status'] = undefined;





/**
 * Allowed values for the <code>level</code> property.
 * @enum {String}
 * @readonly
 */
TeamEventStatusPlayoff['LevelEnum'] = {

    /**
     * value: "qm"
     * @const
     */
    "qm": "qm",

    /**
     * value: "ef"
     * @const
     */
    "ef": "ef",

    /**
     * value: "qf"
     * @const
     */
    "qf": "qf",

    /**
     * value: "sf"
     * @const
     */
    "sf": "sf",

    /**
     * value: "f"
     * @const
     */
    "f": "f"
};


/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
TeamEventStatusPlayoff['StatusEnum'] = {

    /**
     * value: "won"
     * @const
     */
    "won": "won",

    /**
     * value: "eliminated"
     * @const
     */
    "eliminated": "eliminated",

    /**
     * value: "playing"
     * @const
     */
    "playing": "playing"
};



export default TeamEventStatusPlayoff;

