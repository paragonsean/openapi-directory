/**
 * The Blue Alliance API v3
 * # Overview    Information and statistics about FIRST Robotics Competition teams and events.   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).
 *
 * The version of the OpenAPI document: 3.8.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The EventInsights2016 model module.
 * @module model/EventInsights2016
 * @version 3.8.2
 */
class EventInsights2016 {
    /**
     * Constructs a new <code>EventInsights2016</code>.
     * Insights for FIRST Stronghold qualification and elimination matches.
     * @alias module:model/EventInsights2016
     * @param aChevalDeFrise {Array.<Number>} For the Cheval De Frise - An array with three values, number of times damaged, number of opportunities to damage, and percentage.
     * @param aPortcullis {Array.<Number>} For the Portcullis - An array with three values, number of times damaged, number of opportunities to damage, and percentage.
     * @param bMoat {Array.<Number>} For the Moat - An array with three values, number of times damaged, number of opportunities to damage, and percentage.
     * @param bRamparts {Array.<Number>} For the Ramparts - An array with three values, number of times damaged, number of opportunities to damage, and percentage.
     * @param cDrawbridge {Array.<Number>} For the Drawbridge - An array with three values, number of times damaged, number of opportunities to damage, and percentage.
     * @param cSallyPort {Array.<Number>} For the Sally Port - An array with three values, number of times damaged, number of opportunities to damage, and percentage.
     * @param dRockWall {Array.<Number>} For the Rock Wall - An array with three values, number of times damaged, number of opportunities to damage, and percentage.
     * @param dRoughTerrain {Array.<Number>} For the Rough Terrain - An array with three values, number of times damaged, number of opportunities to damage, and percentage.
     * @param lowBar {Array.<Number>} For the Low Bar - An array with three values, number of times damaged, number of opportunities to damage, and percentage.
     * @param averageAutoScore {Number} Average autonomous score.
     * @param averageBoulderScore {Number} Average boulder score.
     * @param averageCrossingScore {Number} Average crossing score.
     * @param averageFoulScore {Number} Average foul score.
     * @param averageHighGoals {Number} Average number of high goals scored.
     * @param averageLowGoals {Number} Average number of low goals scored.
     * @param averageScore {Number} Average total score.
     * @param averageTowerScore {Number} Average tower score.
     * @param averageWinMargin {Number} Average margin of victory.
     * @param averageWinScore {Number} Average winning score.
     * @param breaches {Array.<Number>} An array with three values, number of times breached, number of opportunities to breach, and percentage.
     * @param captures {Array.<Number>} An array with three values, number of times captured, number of opportunities to capture, and percentage.
     * @param challenges {Array.<Number>} An array with three values, number of times challenged, number of opportunities to challenge, and percentage.
     * @param highScore {Array.<String>} An array with three values, high score, match key from the match with the high score, and the name of the match.
     * @param scales {Array.<Number>} An array with three values, number of times scaled, number of opportunities to scale, and percentage.
     */
    constructor(aChevalDeFrise, aPortcullis, bMoat, bRamparts, cDrawbridge, cSallyPort, dRockWall, dRoughTerrain, lowBar, averageAutoScore, averageBoulderScore, averageCrossingScore, averageFoulScore, averageHighGoals, averageLowGoals, averageScore, averageTowerScore, averageWinMargin, averageWinScore, breaches, captures, challenges, highScore, scales) { 
        
        EventInsights2016.initialize(this, aChevalDeFrise, aPortcullis, bMoat, bRamparts, cDrawbridge, cSallyPort, dRockWall, dRoughTerrain, lowBar, averageAutoScore, averageBoulderScore, averageCrossingScore, averageFoulScore, averageHighGoals, averageLowGoals, averageScore, averageTowerScore, averageWinMargin, averageWinScore, breaches, captures, challenges, highScore, scales);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, aChevalDeFrise, aPortcullis, bMoat, bRamparts, cDrawbridge, cSallyPort, dRockWall, dRoughTerrain, lowBar, averageAutoScore, averageBoulderScore, averageCrossingScore, averageFoulScore, averageHighGoals, averageLowGoals, averageScore, averageTowerScore, averageWinMargin, averageWinScore, breaches, captures, challenges, highScore, scales) { 
        obj['A_ChevalDeFrise'] = aChevalDeFrise;
        obj['A_Portcullis'] = aPortcullis;
        obj['B_Moat'] = bMoat;
        obj['B_Ramparts'] = bRamparts;
        obj['C_Drawbridge'] = cDrawbridge;
        obj['C_SallyPort'] = cSallyPort;
        obj['D_RockWall'] = dRockWall;
        obj['D_RoughTerrain'] = dRoughTerrain;
        obj['LowBar'] = lowBar;
        obj['average_auto_score'] = averageAutoScore;
        obj['average_boulder_score'] = averageBoulderScore;
        obj['average_crossing_score'] = averageCrossingScore;
        obj['average_foul_score'] = averageFoulScore;
        obj['average_high_goals'] = averageHighGoals;
        obj['average_low_goals'] = averageLowGoals;
        obj['average_score'] = averageScore;
        obj['average_tower_score'] = averageTowerScore;
        obj['average_win_margin'] = averageWinMargin;
        obj['average_win_score'] = averageWinScore;
        obj['breaches'] = breaches;
        obj['captures'] = captures;
        obj['challenges'] = challenges;
        obj['high_score'] = highScore;
        obj['scales'] = scales;
    }

    /**
     * Constructs a <code>EventInsights2016</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/EventInsights2016} obj Optional instance to populate.
     * @return {module:model/EventInsights2016} The populated <code>EventInsights2016</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EventInsights2016();

            if (data.hasOwnProperty('A_ChevalDeFrise')) {
                obj['A_ChevalDeFrise'] = ApiClient.convertToType(data['A_ChevalDeFrise'], ['Number']);
            }
            if (data.hasOwnProperty('A_Portcullis')) {
                obj['A_Portcullis'] = ApiClient.convertToType(data['A_Portcullis'], ['Number']);
            }
            if (data.hasOwnProperty('B_Moat')) {
                obj['B_Moat'] = ApiClient.convertToType(data['B_Moat'], ['Number']);
            }
            if (data.hasOwnProperty('B_Ramparts')) {
                obj['B_Ramparts'] = ApiClient.convertToType(data['B_Ramparts'], ['Number']);
            }
            if (data.hasOwnProperty('C_Drawbridge')) {
                obj['C_Drawbridge'] = ApiClient.convertToType(data['C_Drawbridge'], ['Number']);
            }
            if (data.hasOwnProperty('C_SallyPort')) {
                obj['C_SallyPort'] = ApiClient.convertToType(data['C_SallyPort'], ['Number']);
            }
            if (data.hasOwnProperty('D_RockWall')) {
                obj['D_RockWall'] = ApiClient.convertToType(data['D_RockWall'], ['Number']);
            }
            if (data.hasOwnProperty('D_RoughTerrain')) {
                obj['D_RoughTerrain'] = ApiClient.convertToType(data['D_RoughTerrain'], ['Number']);
            }
            if (data.hasOwnProperty('LowBar')) {
                obj['LowBar'] = ApiClient.convertToType(data['LowBar'], ['Number']);
            }
            if (data.hasOwnProperty('average_auto_score')) {
                obj['average_auto_score'] = ApiClient.convertToType(data['average_auto_score'], 'Number');
            }
            if (data.hasOwnProperty('average_boulder_score')) {
                obj['average_boulder_score'] = ApiClient.convertToType(data['average_boulder_score'], 'Number');
            }
            if (data.hasOwnProperty('average_crossing_score')) {
                obj['average_crossing_score'] = ApiClient.convertToType(data['average_crossing_score'], 'Number');
            }
            if (data.hasOwnProperty('average_foul_score')) {
                obj['average_foul_score'] = ApiClient.convertToType(data['average_foul_score'], 'Number');
            }
            if (data.hasOwnProperty('average_high_goals')) {
                obj['average_high_goals'] = ApiClient.convertToType(data['average_high_goals'], 'Number');
            }
            if (data.hasOwnProperty('average_low_goals')) {
                obj['average_low_goals'] = ApiClient.convertToType(data['average_low_goals'], 'Number');
            }
            if (data.hasOwnProperty('average_score')) {
                obj['average_score'] = ApiClient.convertToType(data['average_score'], 'Number');
            }
            if (data.hasOwnProperty('average_tower_score')) {
                obj['average_tower_score'] = ApiClient.convertToType(data['average_tower_score'], 'Number');
            }
            if (data.hasOwnProperty('average_win_margin')) {
                obj['average_win_margin'] = ApiClient.convertToType(data['average_win_margin'], 'Number');
            }
            if (data.hasOwnProperty('average_win_score')) {
                obj['average_win_score'] = ApiClient.convertToType(data['average_win_score'], 'Number');
            }
            if (data.hasOwnProperty('breaches')) {
                obj['breaches'] = ApiClient.convertToType(data['breaches'], ['Number']);
            }
            if (data.hasOwnProperty('captures')) {
                obj['captures'] = ApiClient.convertToType(data['captures'], ['Number']);
            }
            if (data.hasOwnProperty('challenges')) {
                obj['challenges'] = ApiClient.convertToType(data['challenges'], ['Number']);
            }
            if (data.hasOwnProperty('high_score')) {
                obj['high_score'] = ApiClient.convertToType(data['high_score'], ['String']);
            }
            if (data.hasOwnProperty('scales')) {
                obj['scales'] = ApiClient.convertToType(data['scales'], ['Number']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>EventInsights2016</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>EventInsights2016</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of EventInsights2016.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['A_ChevalDeFrise'])) {
            throw new Error("Expected the field `A_ChevalDeFrise` to be an array in the JSON data but got " + data['A_ChevalDeFrise']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['A_Portcullis'])) {
            throw new Error("Expected the field `A_Portcullis` to be an array in the JSON data but got " + data['A_Portcullis']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['B_Moat'])) {
            throw new Error("Expected the field `B_Moat` to be an array in the JSON data but got " + data['B_Moat']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['B_Ramparts'])) {
            throw new Error("Expected the field `B_Ramparts` to be an array in the JSON data but got " + data['B_Ramparts']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['C_Drawbridge'])) {
            throw new Error("Expected the field `C_Drawbridge` to be an array in the JSON data but got " + data['C_Drawbridge']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['C_SallyPort'])) {
            throw new Error("Expected the field `C_SallyPort` to be an array in the JSON data but got " + data['C_SallyPort']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['D_RockWall'])) {
            throw new Error("Expected the field `D_RockWall` to be an array in the JSON data but got " + data['D_RockWall']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['D_RoughTerrain'])) {
            throw new Error("Expected the field `D_RoughTerrain` to be an array in the JSON data but got " + data['D_RoughTerrain']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['LowBar'])) {
            throw new Error("Expected the field `LowBar` to be an array in the JSON data but got " + data['LowBar']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['breaches'])) {
            throw new Error("Expected the field `breaches` to be an array in the JSON data but got " + data['breaches']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['captures'])) {
            throw new Error("Expected the field `captures` to be an array in the JSON data but got " + data['captures']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['challenges'])) {
            throw new Error("Expected the field `challenges` to be an array in the JSON data but got " + data['challenges']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['high_score'])) {
            throw new Error("Expected the field `high_score` to be an array in the JSON data but got " + data['high_score']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['scales'])) {
            throw new Error("Expected the field `scales` to be an array in the JSON data but got " + data['scales']);
        }

        return true;
    }


}

EventInsights2016.RequiredProperties = ["A_ChevalDeFrise", "A_Portcullis", "B_Moat", "B_Ramparts", "C_Drawbridge", "C_SallyPort", "D_RockWall", "D_RoughTerrain", "LowBar", "average_auto_score", "average_boulder_score", "average_crossing_score", "average_foul_score", "average_high_goals", "average_low_goals", "average_score", "average_tower_score", "average_win_margin", "average_win_score", "breaches", "captures", "challenges", "high_score", "scales"];

/**
 * For the Cheval De Frise - An array with three values, number of times damaged, number of opportunities to damage, and percentage.
 * @member {Array.<Number>} A_ChevalDeFrise
 */
EventInsights2016.prototype['A_ChevalDeFrise'] = undefined;

/**
 * For the Portcullis - An array with three values, number of times damaged, number of opportunities to damage, and percentage.
 * @member {Array.<Number>} A_Portcullis
 */
EventInsights2016.prototype['A_Portcullis'] = undefined;

/**
 * For the Moat - An array with three values, number of times damaged, number of opportunities to damage, and percentage.
 * @member {Array.<Number>} B_Moat
 */
EventInsights2016.prototype['B_Moat'] = undefined;

/**
 * For the Ramparts - An array with three values, number of times damaged, number of opportunities to damage, and percentage.
 * @member {Array.<Number>} B_Ramparts
 */
EventInsights2016.prototype['B_Ramparts'] = undefined;

/**
 * For the Drawbridge - An array with three values, number of times damaged, number of opportunities to damage, and percentage.
 * @member {Array.<Number>} C_Drawbridge
 */
EventInsights2016.prototype['C_Drawbridge'] = undefined;

/**
 * For the Sally Port - An array with three values, number of times damaged, number of opportunities to damage, and percentage.
 * @member {Array.<Number>} C_SallyPort
 */
EventInsights2016.prototype['C_SallyPort'] = undefined;

/**
 * For the Rock Wall - An array with three values, number of times damaged, number of opportunities to damage, and percentage.
 * @member {Array.<Number>} D_RockWall
 */
EventInsights2016.prototype['D_RockWall'] = undefined;

/**
 * For the Rough Terrain - An array with three values, number of times damaged, number of opportunities to damage, and percentage.
 * @member {Array.<Number>} D_RoughTerrain
 */
EventInsights2016.prototype['D_RoughTerrain'] = undefined;

/**
 * For the Low Bar - An array with three values, number of times damaged, number of opportunities to damage, and percentage.
 * @member {Array.<Number>} LowBar
 */
EventInsights2016.prototype['LowBar'] = undefined;

/**
 * Average autonomous score.
 * @member {Number} average_auto_score
 */
EventInsights2016.prototype['average_auto_score'] = undefined;

/**
 * Average boulder score.
 * @member {Number} average_boulder_score
 */
EventInsights2016.prototype['average_boulder_score'] = undefined;

/**
 * Average crossing score.
 * @member {Number} average_crossing_score
 */
EventInsights2016.prototype['average_crossing_score'] = undefined;

/**
 * Average foul score.
 * @member {Number} average_foul_score
 */
EventInsights2016.prototype['average_foul_score'] = undefined;

/**
 * Average number of high goals scored.
 * @member {Number} average_high_goals
 */
EventInsights2016.prototype['average_high_goals'] = undefined;

/**
 * Average number of low goals scored.
 * @member {Number} average_low_goals
 */
EventInsights2016.prototype['average_low_goals'] = undefined;

/**
 * Average total score.
 * @member {Number} average_score
 */
EventInsights2016.prototype['average_score'] = undefined;

/**
 * Average tower score.
 * @member {Number} average_tower_score
 */
EventInsights2016.prototype['average_tower_score'] = undefined;

/**
 * Average margin of victory.
 * @member {Number} average_win_margin
 */
EventInsights2016.prototype['average_win_margin'] = undefined;

/**
 * Average winning score.
 * @member {Number} average_win_score
 */
EventInsights2016.prototype['average_win_score'] = undefined;

/**
 * An array with three values, number of times breached, number of opportunities to breach, and percentage.
 * @member {Array.<Number>} breaches
 */
EventInsights2016.prototype['breaches'] = undefined;

/**
 * An array with three values, number of times captured, number of opportunities to capture, and percentage.
 * @member {Array.<Number>} captures
 */
EventInsights2016.prototype['captures'] = undefined;

/**
 * An array with three values, number of times challenged, number of opportunities to challenge, and percentage.
 * @member {Array.<Number>} challenges
 */
EventInsights2016.prototype['challenges'] = undefined;

/**
 * An array with three values, high score, match key from the match with the high score, and the name of the match.
 * @member {Array.<String>} high_score
 */
EventInsights2016.prototype['high_score'] = undefined;

/**
 * An array with three values, number of times scaled, number of opportunities to scale, and percentage.
 * @member {Array.<Number>} scales
 */
EventInsights2016.prototype['scales'] = undefined;






export default EventInsights2016;

