/**
 * The Blue Alliance API v3
 * # Overview    Information and statistics about FIRST Robotics Competition teams and events.   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).
 *
 * The version of the OpenAPI document: 3.8.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import TeamEventStatusAlliance from './TeamEventStatusAlliance';
import TeamEventStatusPlayoff from './TeamEventStatusPlayoff';
import TeamEventStatusRank from './TeamEventStatusRank';

/**
 * The TeamEventStatus model module.
 * @module model/TeamEventStatus
 * @version 3.8.2
 */
class TeamEventStatus {
    /**
     * Constructs a new <code>TeamEventStatus</code>.
     * @alias module:model/TeamEventStatus
     */
    constructor() { 
        
        TeamEventStatus.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TeamEventStatus</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TeamEventStatus} obj Optional instance to populate.
     * @return {module:model/TeamEventStatus} The populated <code>TeamEventStatus</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TeamEventStatus();

            if (data.hasOwnProperty('alliance')) {
                obj['alliance'] = TeamEventStatusAlliance.constructFromObject(data['alliance']);
            }
            if (data.hasOwnProperty('alliance_status_str')) {
                obj['alliance_status_str'] = ApiClient.convertToType(data['alliance_status_str'], 'String');
            }
            if (data.hasOwnProperty('last_match_key')) {
                obj['last_match_key'] = ApiClient.convertToType(data['last_match_key'], 'String');
            }
            if (data.hasOwnProperty('next_match_key')) {
                obj['next_match_key'] = ApiClient.convertToType(data['next_match_key'], 'String');
            }
            if (data.hasOwnProperty('overall_status_str')) {
                obj['overall_status_str'] = ApiClient.convertToType(data['overall_status_str'], 'String');
            }
            if (data.hasOwnProperty('playoff')) {
                obj['playoff'] = TeamEventStatusPlayoff.constructFromObject(data['playoff']);
            }
            if (data.hasOwnProperty('playoff_status_str')) {
                obj['playoff_status_str'] = ApiClient.convertToType(data['playoff_status_str'], 'String');
            }
            if (data.hasOwnProperty('qual')) {
                obj['qual'] = TeamEventStatusRank.constructFromObject(data['qual']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TeamEventStatus</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TeamEventStatus</code>.
     */
    static validateJSON(data) {
        // validate the optional field `alliance`
        if (data['alliance']) { // data not null
          TeamEventStatusAlliance.validateJSON(data['alliance']);
        }
        // ensure the json data is a string
        if (data['alliance_status_str'] && !(typeof data['alliance_status_str'] === 'string' || data['alliance_status_str'] instanceof String)) {
            throw new Error("Expected the field `alliance_status_str` to be a primitive type in the JSON string but got " + data['alliance_status_str']);
        }
        // ensure the json data is a string
        if (data['last_match_key'] && !(typeof data['last_match_key'] === 'string' || data['last_match_key'] instanceof String)) {
            throw new Error("Expected the field `last_match_key` to be a primitive type in the JSON string but got " + data['last_match_key']);
        }
        // ensure the json data is a string
        if (data['next_match_key'] && !(typeof data['next_match_key'] === 'string' || data['next_match_key'] instanceof String)) {
            throw new Error("Expected the field `next_match_key` to be a primitive type in the JSON string but got " + data['next_match_key']);
        }
        // ensure the json data is a string
        if (data['overall_status_str'] && !(typeof data['overall_status_str'] === 'string' || data['overall_status_str'] instanceof String)) {
            throw new Error("Expected the field `overall_status_str` to be a primitive type in the JSON string but got " + data['overall_status_str']);
        }
        // validate the optional field `playoff`
        if (data['playoff']) { // data not null
          TeamEventStatusPlayoff.validateJSON(data['playoff']);
        }
        // ensure the json data is a string
        if (data['playoff_status_str'] && !(typeof data['playoff_status_str'] === 'string' || data['playoff_status_str'] instanceof String)) {
            throw new Error("Expected the field `playoff_status_str` to be a primitive type in the JSON string but got " + data['playoff_status_str']);
        }
        // validate the optional field `qual`
        if (data['qual']) { // data not null
          TeamEventStatusRank.validateJSON(data['qual']);
        }

        return true;
    }


}



/**
 * @member {module:model/TeamEventStatusAlliance} alliance
 */
TeamEventStatus.prototype['alliance'] = undefined;

/**
 * An HTML formatted string suitable for display to the user containing the team's alliance pick status.
 * @member {String} alliance_status_str
 */
TeamEventStatus.prototype['alliance_status_str'] = undefined;

/**
 * TBA match key for the last match the team played in at this event, or null.
 * @member {String} last_match_key
 */
TeamEventStatus.prototype['last_match_key'] = undefined;

/**
 * TBA match key for the next match the team is scheduled to play in at this event, or null.
 * @member {String} next_match_key
 */
TeamEventStatus.prototype['next_match_key'] = undefined;

/**
 * An HTML formatted string suitable for display to the user containing the team's overall status summary of the event.
 * @member {String} overall_status_str
 */
TeamEventStatus.prototype['overall_status_str'] = undefined;

/**
 * @member {module:model/TeamEventStatusPlayoff} playoff
 */
TeamEventStatus.prototype['playoff'] = undefined;

/**
 * An HTML formatter string suitable for display to the user containing the team's playoff status.
 * @member {String} playoff_status_str
 */
TeamEventStatus.prototype['playoff_status_str'] = undefined;

/**
 * @member {module:model/TeamEventStatusRank} qual
 */
TeamEventStatus.prototype['qual'] = undefined;






export default TeamEventStatus;

