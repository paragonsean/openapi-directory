/**
 * The Blue Alliance API v3
 * # Overview    Information and statistics about FIRST Robotics Competition teams and events.   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).
 *
 * The version of the OpenAPI document: 3.8.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Media model module.
 * @module model/Media
 * @version 3.8.2
 */
class Media {
    /**
     * Constructs a new <code>Media</code>.
     * The &#x60;Media&#x60; object contains a reference for most any media associated with a team or event on TBA.
     * @alias module:model/Media
     * @param foreignKey {String} The key used to identify this media on the media site.
     * @param type {module:model/Media.TypeEnum} String type of the media element.
     */
    constructor(foreignKey, type) { 
        
        Media.initialize(this, foreignKey, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, foreignKey, type) { 
        obj['foreign_key'] = foreignKey;
        obj['type'] = type;
    }

    /**
     * Constructs a <code>Media</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Media} obj Optional instance to populate.
     * @return {module:model/Media} The populated <code>Media</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Media();

            if (data.hasOwnProperty('details')) {
                obj['details'] = ApiClient.convertToType(data['details'], Object);
            }
            if (data.hasOwnProperty('direct_url')) {
                obj['direct_url'] = ApiClient.convertToType(data['direct_url'], 'String');
            }
            if (data.hasOwnProperty('foreign_key')) {
                obj['foreign_key'] = ApiClient.convertToType(data['foreign_key'], 'String');
            }
            if (data.hasOwnProperty('preferred')) {
                obj['preferred'] = ApiClient.convertToType(data['preferred'], 'Boolean');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('view_url')) {
                obj['view_url'] = ApiClient.convertToType(data['view_url'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Media</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Media</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Media.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['direct_url'] && !(typeof data['direct_url'] === 'string' || data['direct_url'] instanceof String)) {
            throw new Error("Expected the field `direct_url` to be a primitive type in the JSON string but got " + data['direct_url']);
        }
        // ensure the json data is a string
        if (data['foreign_key'] && !(typeof data['foreign_key'] === 'string' || data['foreign_key'] instanceof String)) {
            throw new Error("Expected the field `foreign_key` to be a primitive type in the JSON string but got " + data['foreign_key']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['view_url'] && !(typeof data['view_url'] === 'string' || data['view_url'] instanceof String)) {
            throw new Error("Expected the field `view_url` to be a primitive type in the JSON string but got " + data['view_url']);
        }

        return true;
    }


}

Media.RequiredProperties = ["foreign_key", "type"];

/**
 * If required, a JSON dict of additional media information.
 * @member {Object} details
 */
Media.prototype['details'] = undefined;

/**
 * Direct URL to the media.
 * @member {String} direct_url
 */
Media.prototype['direct_url'] = undefined;

/**
 * The key used to identify this media on the media site.
 * @member {String} foreign_key
 */
Media.prototype['foreign_key'] = undefined;

/**
 * True if the media is of high quality.
 * @member {Boolean} preferred
 */
Media.prototype['preferred'] = undefined;

/**
 * String type of the media element.
 * @member {module:model/Media.TypeEnum} type
 */
Media.prototype['type'] = undefined;

/**
 * The URL that leads to the full web page for the media, if one exists.
 * @member {String} view_url
 */
Media.prototype['view_url'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
Media['TypeEnum'] = {

    /**
     * value: "youtube"
     * @const
     */
    "youtube": "youtube",

    /**
     * value: "cdphotothread"
     * @const
     */
    "cdphotothread": "cdphotothread",

    /**
     * value: "imgur"
     * @const
     */
    "imgur": "imgur",

    /**
     * value: "facebook-profile"
     * @const
     */
    "facebook-profile": "facebook-profile",

    /**
     * value: "youtube-channel"
     * @const
     */
    "youtube-channel": "youtube-channel",

    /**
     * value: "twitter-profile"
     * @const
     */
    "twitter-profile": "twitter-profile",

    /**
     * value: "github-profile"
     * @const
     */
    "github-profile": "github-profile",

    /**
     * value: "instagram-profile"
     * @const
     */
    "instagram-profile": "instagram-profile",

    /**
     * value: "periscope-profile"
     * @const
     */
    "periscope-profile": "periscope-profile",

    /**
     * value: "grabcad"
     * @const
     */
    "grabcad": "grabcad",

    /**
     * value: "instagram-image"
     * @const
     */
    "instagram-image": "instagram-image",

    /**
     * value: "external-link"
     * @const
     */
    "external-link": "external-link",

    /**
     * value: "avatar"
     * @const
     */
    "avatar": "avatar"
};



export default Media;

