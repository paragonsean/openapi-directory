/**
 * The Blue Alliance API v3
 * # Overview    Information and statistics about FIRST Robotics Competition teams and events.   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).
 *
 * The version of the OpenAPI document: 3.8.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The WLTRecord model module.
 * @module model/WLTRecord
 * @version 3.8.2
 */
class WLTRecord {
    /**
     * Constructs a new <code>WLTRecord</code>.
     * A Win-Loss-Tie record for a team, or an alliance.
     * @alias module:model/WLTRecord
     * @param losses {Number} Number of losses.
     * @param ties {Number} Number of ties.
     * @param wins {Number} Number of wins.
     */
    constructor(losses, ties, wins) { 
        
        WLTRecord.initialize(this, losses, ties, wins);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, losses, ties, wins) { 
        obj['losses'] = losses;
        obj['ties'] = ties;
        obj['wins'] = wins;
    }

    /**
     * Constructs a <code>WLTRecord</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/WLTRecord} obj Optional instance to populate.
     * @return {module:model/WLTRecord} The populated <code>WLTRecord</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new WLTRecord();

            if (data.hasOwnProperty('losses')) {
                obj['losses'] = ApiClient.convertToType(data['losses'], 'Number');
            }
            if (data.hasOwnProperty('ties')) {
                obj['ties'] = ApiClient.convertToType(data['ties'], 'Number');
            }
            if (data.hasOwnProperty('wins')) {
                obj['wins'] = ApiClient.convertToType(data['wins'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>WLTRecord</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>WLTRecord</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of WLTRecord.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }

        return true;
    }


}

WLTRecord.RequiredProperties = ["losses", "ties", "wins"];

/**
 * Number of losses.
 * @member {Number} losses
 */
WLTRecord.prototype['losses'] = undefined;

/**
 * Number of ties.
 * @member {Number} ties
 */
WLTRecord.prototype['ties'] = undefined;

/**
 * Number of wins.
 * @member {Number} wins
 */
WLTRecord.prototype['wins'] = undefined;






export default WLTRecord;

