/**
 * The Blue Alliance API v3
 * # Overview    Information and statistics about FIRST Robotics Competition teams and events.   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).
 *
 * The version of the OpenAPI document: 3.8.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.TheBlueAllianceApiV3);
  }
}(this, function(expect, TheBlueAllianceApiV3) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new TheBlueAllianceApiV3.MatchScoreBreakdown2015Alliance();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('MatchScoreBreakdown2015Alliance', function() {
    it('should create an instance of MatchScoreBreakdown2015Alliance', function() {
      // uncomment below and update the code to test MatchScoreBreakdown2015Alliance
      //var instance = new TheBlueAllianceApiV3.MatchScoreBreakdown2015Alliance();
      //expect(instance).to.be.a(TheBlueAllianceApiV3.MatchScoreBreakdown2015Alliance);
    });

    it('should have the property adjustPoints (base name: "adjust_points")', function() {
      // uncomment below and update the code to test the property adjustPoints
      //var instance = new TheBlueAllianceApiV3.MatchScoreBreakdown2015Alliance();
      //expect(instance).to.be();
    });

    it('should have the property autoPoints (base name: "auto_points")', function() {
      // uncomment below and update the code to test the property autoPoints
      //var instance = new TheBlueAllianceApiV3.MatchScoreBreakdown2015Alliance();
      //expect(instance).to.be();
    });

    it('should have the property containerCountLevel1 (base name: "container_count_level1")', function() {
      // uncomment below and update the code to test the property containerCountLevel1
      //var instance = new TheBlueAllianceApiV3.MatchScoreBreakdown2015Alliance();
      //expect(instance).to.be();
    });

    it('should have the property containerCountLevel2 (base name: "container_count_level2")', function() {
      // uncomment below and update the code to test the property containerCountLevel2
      //var instance = new TheBlueAllianceApiV3.MatchScoreBreakdown2015Alliance();
      //expect(instance).to.be();
    });

    it('should have the property containerCountLevel3 (base name: "container_count_level3")', function() {
      // uncomment below and update the code to test the property containerCountLevel3
      //var instance = new TheBlueAllianceApiV3.MatchScoreBreakdown2015Alliance();
      //expect(instance).to.be();
    });

    it('should have the property containerCountLevel4 (base name: "container_count_level4")', function() {
      // uncomment below and update the code to test the property containerCountLevel4
      //var instance = new TheBlueAllianceApiV3.MatchScoreBreakdown2015Alliance();
      //expect(instance).to.be();
    });

    it('should have the property containerCountLevel5 (base name: "container_count_level5")', function() {
      // uncomment below and update the code to test the property containerCountLevel5
      //var instance = new TheBlueAllianceApiV3.MatchScoreBreakdown2015Alliance();
      //expect(instance).to.be();
    });

    it('should have the property containerCountLevel6 (base name: "container_count_level6")', function() {
      // uncomment below and update the code to test the property containerCountLevel6
      //var instance = new TheBlueAllianceApiV3.MatchScoreBreakdown2015Alliance();
      //expect(instance).to.be();
    });

    it('should have the property containerPoints (base name: "container_points")', function() {
      // uncomment below and update the code to test the property containerPoints
      //var instance = new TheBlueAllianceApiV3.MatchScoreBreakdown2015Alliance();
      //expect(instance).to.be();
    });

    it('should have the property containerSet (base name: "container_set")', function() {
      // uncomment below and update the code to test the property containerSet
      //var instance = new TheBlueAllianceApiV3.MatchScoreBreakdown2015Alliance();
      //expect(instance).to.be();
    });

    it('should have the property foulCount (base name: "foul_count")', function() {
      // uncomment below and update the code to test the property foulCount
      //var instance = new TheBlueAllianceApiV3.MatchScoreBreakdown2015Alliance();
      //expect(instance).to.be();
    });

    it('should have the property foulPoints (base name: "foul_points")', function() {
      // uncomment below and update the code to test the property foulPoints
      //var instance = new TheBlueAllianceApiV3.MatchScoreBreakdown2015Alliance();
      //expect(instance).to.be();
    });

    it('should have the property litterCountContainer (base name: "litter_count_container")', function() {
      // uncomment below and update the code to test the property litterCountContainer
      //var instance = new TheBlueAllianceApiV3.MatchScoreBreakdown2015Alliance();
      //expect(instance).to.be();
    });

    it('should have the property litterCountLandfill (base name: "litter_count_landfill")', function() {
      // uncomment below and update the code to test the property litterCountLandfill
      //var instance = new TheBlueAllianceApiV3.MatchScoreBreakdown2015Alliance();
      //expect(instance).to.be();
    });

    it('should have the property litterCountUnprocessed (base name: "litter_count_unprocessed")', function() {
      // uncomment below and update the code to test the property litterCountUnprocessed
      //var instance = new TheBlueAllianceApiV3.MatchScoreBreakdown2015Alliance();
      //expect(instance).to.be();
    });

    it('should have the property litterPoints (base name: "litter_points")', function() {
      // uncomment below and update the code to test the property litterPoints
      //var instance = new TheBlueAllianceApiV3.MatchScoreBreakdown2015Alliance();
      //expect(instance).to.be();
    });

    it('should have the property robotSet (base name: "robot_set")', function() {
      // uncomment below and update the code to test the property robotSet
      //var instance = new TheBlueAllianceApiV3.MatchScoreBreakdown2015Alliance();
      //expect(instance).to.be();
    });

    it('should have the property teleopPoints (base name: "teleop_points")', function() {
      // uncomment below and update the code to test the property teleopPoints
      //var instance = new TheBlueAllianceApiV3.MatchScoreBreakdown2015Alliance();
      //expect(instance).to.be();
    });

    it('should have the property totalPoints (base name: "total_points")', function() {
      // uncomment below and update the code to test the property totalPoints
      //var instance = new TheBlueAllianceApiV3.MatchScoreBreakdown2015Alliance();
      //expect(instance).to.be();
    });

    it('should have the property toteCountFar (base name: "tote_count_far")', function() {
      // uncomment below and update the code to test the property toteCountFar
      //var instance = new TheBlueAllianceApiV3.MatchScoreBreakdown2015Alliance();
      //expect(instance).to.be();
    });

    it('should have the property toteCountNear (base name: "tote_count_near")', function() {
      // uncomment below and update the code to test the property toteCountNear
      //var instance = new TheBlueAllianceApiV3.MatchScoreBreakdown2015Alliance();
      //expect(instance).to.be();
    });

    it('should have the property totePoints (base name: "tote_points")', function() {
      // uncomment below and update the code to test the property totePoints
      //var instance = new TheBlueAllianceApiV3.MatchScoreBreakdown2015Alliance();
      //expect(instance).to.be();
    });

    it('should have the property toteSet (base name: "tote_set")', function() {
      // uncomment below and update the code to test the property toteSet
      //var instance = new TheBlueAllianceApiV3.MatchScoreBreakdown2015Alliance();
      //expect(instance).to.be();
    });

    it('should have the property toteStack (base name: "tote_stack")', function() {
      // uncomment below and update the code to test the property toteStack
      //var instance = new TheBlueAllianceApiV3.MatchScoreBreakdown2015Alliance();
      //expect(instance).to.be();
    });

  });

}));
