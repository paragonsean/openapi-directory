# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Media(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, details: object=None, direct_url: str=None, foreign_key: str=None, preferred: bool=None, type: str=None, view_url: str=None):
        """Media - a model defined in OpenAPI

        :param details: The details of this Media.
        :param direct_url: The direct_url of this Media.
        :param foreign_key: The foreign_key of this Media.
        :param preferred: The preferred of this Media.
        :param type: The type of this Media.
        :param view_url: The view_url of this Media.
        """
        self.openapi_types = {
            'details': object,
            'direct_url': str,
            'foreign_key': str,
            'preferred': bool,
            'type': str,
            'view_url': str
        }

        self.attribute_map = {
            'details': 'details',
            'direct_url': 'direct_url',
            'foreign_key': 'foreign_key',
            'preferred': 'preferred',
            'type': 'type',
            'view_url': 'view_url'
        }

        self._details = details
        self._direct_url = direct_url
        self._foreign_key = foreign_key
        self._preferred = preferred
        self._type = type
        self._view_url = view_url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Media':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Media of this Media.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def details(self):
        """Gets the details of this Media.

        If required, a JSON dict of additional media information.

        :return: The details of this Media.
        :rtype: object
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this Media.

        If required, a JSON dict of additional media information.

        :param details: The details of this Media.
        :type details: object
        """

        self._details = details

    @property
    def direct_url(self):
        """Gets the direct_url of this Media.

        Direct URL to the media.

        :return: The direct_url of this Media.
        :rtype: str
        """
        return self._direct_url

    @direct_url.setter
    def direct_url(self, direct_url):
        """Sets the direct_url of this Media.

        Direct URL to the media.

        :param direct_url: The direct_url of this Media.
        :type direct_url: str
        """

        self._direct_url = direct_url

    @property
    def foreign_key(self):
        """Gets the foreign_key of this Media.

        The key used to identify this media on the media site.

        :return: The foreign_key of this Media.
        :rtype: str
        """
        return self._foreign_key

    @foreign_key.setter
    def foreign_key(self, foreign_key):
        """Sets the foreign_key of this Media.

        The key used to identify this media on the media site.

        :param foreign_key: The foreign_key of this Media.
        :type foreign_key: str
        """
        if foreign_key is None:
            raise ValueError("Invalid value for `foreign_key`, must not be `None`")

        self._foreign_key = foreign_key

    @property
    def preferred(self):
        """Gets the preferred of this Media.

        True if the media is of high quality.

        :return: The preferred of this Media.
        :rtype: bool
        """
        return self._preferred

    @preferred.setter
    def preferred(self, preferred):
        """Sets the preferred of this Media.

        True if the media is of high quality.

        :param preferred: The preferred of this Media.
        :type preferred: bool
        """

        self._preferred = preferred

    @property
    def type(self):
        """Gets the type of this Media.

        String type of the media element.

        :return: The type of this Media.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Media.

        String type of the media element.

        :param type: The type of this Media.
        :type type: str
        """
        allowed_values = ["youtube", "cdphotothread", "imgur", "facebook-profile", "youtube-channel", "twitter-profile", "github-profile", "instagram-profile", "periscope-profile", "grabcad", "instagram-image", "external-link", "avatar"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def view_url(self):
        """Gets the view_url of this Media.

        The URL that leads to the full web page for the media, if one exists.

        :return: The view_url of this Media.
        :rtype: str
        """
        return self._view_url

    @view_url.setter
    def view_url(self, view_url):
        """Sets the view_url of this Media.

        The URL that leads to the full web page for the media, if one exists.

        :param view_url: The view_url of this Media.
        :type view_url: str
        """

        self._view_url = view_url
