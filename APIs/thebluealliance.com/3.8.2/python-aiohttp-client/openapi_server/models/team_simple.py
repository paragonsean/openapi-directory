# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TeamSimple(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, city: str=None, country: str=None, key: str=None, name: str=None, nickname: str=None, state_prov: str=None, team_number: int=None):
        """TeamSimple - a model defined in OpenAPI

        :param city: The city of this TeamSimple.
        :param country: The country of this TeamSimple.
        :param key: The key of this TeamSimple.
        :param name: The name of this TeamSimple.
        :param nickname: The nickname of this TeamSimple.
        :param state_prov: The state_prov of this TeamSimple.
        :param team_number: The team_number of this TeamSimple.
        """
        self.openapi_types = {
            'city': str,
            'country': str,
            'key': str,
            'name': str,
            'nickname': str,
            'state_prov': str,
            'team_number': int
        }

        self.attribute_map = {
            'city': 'city',
            'country': 'country',
            'key': 'key',
            'name': 'name',
            'nickname': 'nickname',
            'state_prov': 'state_prov',
            'team_number': 'team_number'
        }

        self._city = city
        self._country = country
        self._key = key
        self._name = name
        self._nickname = nickname
        self._state_prov = state_prov
        self._team_number = team_number

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TeamSimple':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Team_Simple of this TeamSimple.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def city(self):
        """Gets the city of this TeamSimple.

        City of team derived from parsing the address registered with FIRST.

        :return: The city of this TeamSimple.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this TeamSimple.

        City of team derived from parsing the address registered with FIRST.

        :param city: The city of this TeamSimple.
        :type city: str
        """

        self._city = city

    @property
    def country(self):
        """Gets the country of this TeamSimple.

        Country of team derived from parsing the address registered with FIRST.

        :return: The country of this TeamSimple.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this TeamSimple.

        Country of team derived from parsing the address registered with FIRST.

        :param country: The country of this TeamSimple.
        :type country: str
        """

        self._country = country

    @property
    def key(self):
        """Gets the key of this TeamSimple.

        TBA team key with the format `frcXXXX` with `XXXX` representing the team number.

        :return: The key of this TeamSimple.
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this TeamSimple.

        TBA team key with the format `frcXXXX` with `XXXX` representing the team number.

        :param key: The key of this TeamSimple.
        :type key: str
        """
        if key is None:
            raise ValueError("Invalid value for `key`, must not be `None`")

        self._key = key

    @property
    def name(self):
        """Gets the name of this TeamSimple.

        Official long name registered with FIRST.

        :return: The name of this TeamSimple.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TeamSimple.

        Official long name registered with FIRST.

        :param name: The name of this TeamSimple.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def nickname(self):
        """Gets the nickname of this TeamSimple.

        Team nickname provided by FIRST.

        :return: The nickname of this TeamSimple.
        :rtype: str
        """
        return self._nickname

    @nickname.setter
    def nickname(self, nickname):
        """Sets the nickname of this TeamSimple.

        Team nickname provided by FIRST.

        :param nickname: The nickname of this TeamSimple.
        :type nickname: str
        """

        self._nickname = nickname

    @property
    def state_prov(self):
        """Gets the state_prov of this TeamSimple.

        State of team derived from parsing the address registered with FIRST.

        :return: The state_prov of this TeamSimple.
        :rtype: str
        """
        return self._state_prov

    @state_prov.setter
    def state_prov(self, state_prov):
        """Sets the state_prov of this TeamSimple.

        State of team derived from parsing the address registered with FIRST.

        :param state_prov: The state_prov of this TeamSimple.
        :type state_prov: str
        """

        self._state_prov = state_prov

    @property
    def team_number(self):
        """Gets the team_number of this TeamSimple.

        Official team number issued by FIRST.

        :return: The team_number of this TeamSimple.
        :rtype: int
        """
        return self._team_number

    @team_number.setter
    def team_number(self, team_number):
        """Sets the team_number of this TeamSimple.

        Official team number issued by FIRST.

        :param team_number: The team_number of this TeamSimple.
        :type team_number: int
        """
        if team_number is None:
            raise ValueError("Invalid value for `team_number`, must not be `None`")

        self._team_number = team_number
