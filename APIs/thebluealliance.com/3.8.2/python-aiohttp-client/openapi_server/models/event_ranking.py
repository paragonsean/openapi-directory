# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.event_ranking_extra_stats_info_inner import EventRankingExtraStatsInfoInner
from openapi_server.models.event_ranking_rankings_inner import EventRankingRankingsInner
from openapi_server.models.event_ranking_sort_order_info_inner import EventRankingSortOrderInfoInner
from openapi_server import util


class EventRanking(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, extra_stats_info: List[EventRankingExtraStatsInfoInner]=None, rankings: List[EventRankingRankingsInner]=None, sort_order_info: List[EventRankingSortOrderInfoInner]=None):
        """EventRanking - a model defined in OpenAPI

        :param extra_stats_info: The extra_stats_info of this EventRanking.
        :param rankings: The rankings of this EventRanking.
        :param sort_order_info: The sort_order_info of this EventRanking.
        """
        self.openapi_types = {
            'extra_stats_info': List[EventRankingExtraStatsInfoInner],
            'rankings': List[EventRankingRankingsInner],
            'sort_order_info': List[EventRankingSortOrderInfoInner]
        }

        self.attribute_map = {
            'extra_stats_info': 'extra_stats_info',
            'rankings': 'rankings',
            'sort_order_info': 'sort_order_info'
        }

        self._extra_stats_info = extra_stats_info
        self._rankings = rankings
        self._sort_order_info = sort_order_info

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EventRanking':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Event_Ranking of this EventRanking.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def extra_stats_info(self):
        """Gets the extra_stats_info of this EventRanking.

        List of special TBA-generated values provided in the `extra_stats` array for each item.

        :return: The extra_stats_info of this EventRanking.
        :rtype: List[EventRankingExtraStatsInfoInner]
        """
        return self._extra_stats_info

    @extra_stats_info.setter
    def extra_stats_info(self, extra_stats_info):
        """Sets the extra_stats_info of this EventRanking.

        List of special TBA-generated values provided in the `extra_stats` array for each item.

        :param extra_stats_info: The extra_stats_info of this EventRanking.
        :type extra_stats_info: List[EventRankingExtraStatsInfoInner]
        """

        self._extra_stats_info = extra_stats_info

    @property
    def rankings(self):
        """Gets the rankings of this EventRanking.

        List of rankings at the event.

        :return: The rankings of this EventRanking.
        :rtype: List[EventRankingRankingsInner]
        """
        return self._rankings

    @rankings.setter
    def rankings(self, rankings):
        """Sets the rankings of this EventRanking.

        List of rankings at the event.

        :param rankings: The rankings of this EventRanking.
        :type rankings: List[EventRankingRankingsInner]
        """
        if rankings is None:
            raise ValueError("Invalid value for `rankings`, must not be `None`")

        self._rankings = rankings

    @property
    def sort_order_info(self):
        """Gets the sort_order_info of this EventRanking.

        List of year-specific values provided in the `sort_orders` array for each team.

        :return: The sort_order_info of this EventRanking.
        :rtype: List[EventRankingSortOrderInfoInner]
        """
        return self._sort_order_info

    @sort_order_info.setter
    def sort_order_info(self, sort_order_info):
        """Sets the sort_order_info of this EventRanking.

        List of year-specific values provided in the `sort_orders` array for each team.

        :param sort_order_info: The sort_order_info of this EventRanking.
        :type sort_order_info: List[EventRankingSortOrderInfoInner]
        """
        if sort_order_info is None:
            raise ValueError("Invalid value for `sort_order_info`, must not be `None`")

        self._sort_order_info = sort_order_info
