# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class EventInsights2018(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, auto_quest_achieved: List[float]=None, average_boost_played: float=None, average_endgame_points: float=None, average_force_played: float=None, average_foul_score: float=None, average_points_auto: float=None, average_points_teleop: float=None, average_run_points_auto: float=None, average_scale_ownership_points: float=None, average_scale_ownership_points_auto: float=None, average_scale_ownership_points_teleop: float=None, average_score: float=None, average_switch_ownership_points: float=None, average_switch_ownership_points_auto: float=None, average_switch_ownership_points_teleop: float=None, average_vault_points: float=None, average_win_margin: float=None, average_win_score: float=None, boost_played_counts: List[float]=None, climb_counts: List[float]=None, face_the_boss_achieved: List[float]=None, force_played_counts: List[float]=None, high_score: List[str]=None, levitate_played_counts: List[float]=None, run_counts_auto: List[float]=None, scale_neutral_percentage: float=None, scale_neutral_percentage_auto: float=None, scale_neutral_percentage_teleop: float=None, switch_owned_counts_auto: List[float]=None, unicorn_matches: List[float]=None, winning_opp_switch_denial_percentage_teleop: float=None, winning_own_switch_ownership_percentage: float=None, winning_own_switch_ownership_percentage_auto: float=None, winning_own_switch_ownership_percentage_teleop: float=None, winning_scale_ownership_percentage: float=None, winning_scale_ownership_percentage_auto: float=None, winning_scale_ownership_percentage_teleop: float=None):
        """EventInsights2018 - a model defined in OpenAPI

        :param auto_quest_achieved: The auto_quest_achieved of this EventInsights2018.
        :param average_boost_played: The average_boost_played of this EventInsights2018.
        :param average_endgame_points: The average_endgame_points of this EventInsights2018.
        :param average_force_played: The average_force_played of this EventInsights2018.
        :param average_foul_score: The average_foul_score of this EventInsights2018.
        :param average_points_auto: The average_points_auto of this EventInsights2018.
        :param average_points_teleop: The average_points_teleop of this EventInsights2018.
        :param average_run_points_auto: The average_run_points_auto of this EventInsights2018.
        :param average_scale_ownership_points: The average_scale_ownership_points of this EventInsights2018.
        :param average_scale_ownership_points_auto: The average_scale_ownership_points_auto of this EventInsights2018.
        :param average_scale_ownership_points_teleop: The average_scale_ownership_points_teleop of this EventInsights2018.
        :param average_score: The average_score of this EventInsights2018.
        :param average_switch_ownership_points: The average_switch_ownership_points of this EventInsights2018.
        :param average_switch_ownership_points_auto: The average_switch_ownership_points_auto of this EventInsights2018.
        :param average_switch_ownership_points_teleop: The average_switch_ownership_points_teleop of this EventInsights2018.
        :param average_vault_points: The average_vault_points of this EventInsights2018.
        :param average_win_margin: The average_win_margin of this EventInsights2018.
        :param average_win_score: The average_win_score of this EventInsights2018.
        :param boost_played_counts: The boost_played_counts of this EventInsights2018.
        :param climb_counts: The climb_counts of this EventInsights2018.
        :param face_the_boss_achieved: The face_the_boss_achieved of this EventInsights2018.
        :param force_played_counts: The force_played_counts of this EventInsights2018.
        :param high_score: The high_score of this EventInsights2018.
        :param levitate_played_counts: The levitate_played_counts of this EventInsights2018.
        :param run_counts_auto: The run_counts_auto of this EventInsights2018.
        :param scale_neutral_percentage: The scale_neutral_percentage of this EventInsights2018.
        :param scale_neutral_percentage_auto: The scale_neutral_percentage_auto of this EventInsights2018.
        :param scale_neutral_percentage_teleop: The scale_neutral_percentage_teleop of this EventInsights2018.
        :param switch_owned_counts_auto: The switch_owned_counts_auto of this EventInsights2018.
        :param unicorn_matches: The unicorn_matches of this EventInsights2018.
        :param winning_opp_switch_denial_percentage_teleop: The winning_opp_switch_denial_percentage_teleop of this EventInsights2018.
        :param winning_own_switch_ownership_percentage: The winning_own_switch_ownership_percentage of this EventInsights2018.
        :param winning_own_switch_ownership_percentage_auto: The winning_own_switch_ownership_percentage_auto of this EventInsights2018.
        :param winning_own_switch_ownership_percentage_teleop: The winning_own_switch_ownership_percentage_teleop of this EventInsights2018.
        :param winning_scale_ownership_percentage: The winning_scale_ownership_percentage of this EventInsights2018.
        :param winning_scale_ownership_percentage_auto: The winning_scale_ownership_percentage_auto of this EventInsights2018.
        :param winning_scale_ownership_percentage_teleop: The winning_scale_ownership_percentage_teleop of this EventInsights2018.
        """
        self.openapi_types = {
            'auto_quest_achieved': List[float],
            'average_boost_played': float,
            'average_endgame_points': float,
            'average_force_played': float,
            'average_foul_score': float,
            'average_points_auto': float,
            'average_points_teleop': float,
            'average_run_points_auto': float,
            'average_scale_ownership_points': float,
            'average_scale_ownership_points_auto': float,
            'average_scale_ownership_points_teleop': float,
            'average_score': float,
            'average_switch_ownership_points': float,
            'average_switch_ownership_points_auto': float,
            'average_switch_ownership_points_teleop': float,
            'average_vault_points': float,
            'average_win_margin': float,
            'average_win_score': float,
            'boost_played_counts': List[float],
            'climb_counts': List[float],
            'face_the_boss_achieved': List[float],
            'force_played_counts': List[float],
            'high_score': List[str],
            'levitate_played_counts': List[float],
            'run_counts_auto': List[float],
            'scale_neutral_percentage': float,
            'scale_neutral_percentage_auto': float,
            'scale_neutral_percentage_teleop': float,
            'switch_owned_counts_auto': List[float],
            'unicorn_matches': List[float],
            'winning_opp_switch_denial_percentage_teleop': float,
            'winning_own_switch_ownership_percentage': float,
            'winning_own_switch_ownership_percentage_auto': float,
            'winning_own_switch_ownership_percentage_teleop': float,
            'winning_scale_ownership_percentage': float,
            'winning_scale_ownership_percentage_auto': float,
            'winning_scale_ownership_percentage_teleop': float
        }

        self.attribute_map = {
            'auto_quest_achieved': 'auto_quest_achieved',
            'average_boost_played': 'average_boost_played',
            'average_endgame_points': 'average_endgame_points',
            'average_force_played': 'average_force_played',
            'average_foul_score': 'average_foul_score',
            'average_points_auto': 'average_points_auto',
            'average_points_teleop': 'average_points_teleop',
            'average_run_points_auto': 'average_run_points_auto',
            'average_scale_ownership_points': 'average_scale_ownership_points',
            'average_scale_ownership_points_auto': 'average_scale_ownership_points_auto',
            'average_scale_ownership_points_teleop': 'average_scale_ownership_points_teleop',
            'average_score': 'average_score',
            'average_switch_ownership_points': 'average_switch_ownership_points',
            'average_switch_ownership_points_auto': 'average_switch_ownership_points_auto',
            'average_switch_ownership_points_teleop': 'average_switch_ownership_points_teleop',
            'average_vault_points': 'average_vault_points',
            'average_win_margin': 'average_win_margin',
            'average_win_score': 'average_win_score',
            'boost_played_counts': 'boost_played_counts',
            'climb_counts': 'climb_counts',
            'face_the_boss_achieved': 'face_the_boss_achieved',
            'force_played_counts': 'force_played_counts',
            'high_score': 'high_score',
            'levitate_played_counts': 'levitate_played_counts',
            'run_counts_auto': 'run_counts_auto',
            'scale_neutral_percentage': 'scale_neutral_percentage',
            'scale_neutral_percentage_auto': 'scale_neutral_percentage_auto',
            'scale_neutral_percentage_teleop': 'scale_neutral_percentage_teleop',
            'switch_owned_counts_auto': 'switch_owned_counts_auto',
            'unicorn_matches': 'unicorn_matches',
            'winning_opp_switch_denial_percentage_teleop': 'winning_opp_switch_denial_percentage_teleop',
            'winning_own_switch_ownership_percentage': 'winning_own_switch_ownership_percentage',
            'winning_own_switch_ownership_percentage_auto': 'winning_own_switch_ownership_percentage_auto',
            'winning_own_switch_ownership_percentage_teleop': 'winning_own_switch_ownership_percentage_teleop',
            'winning_scale_ownership_percentage': 'winning_scale_ownership_percentage',
            'winning_scale_ownership_percentage_auto': 'winning_scale_ownership_percentage_auto',
            'winning_scale_ownership_percentage_teleop': 'winning_scale_ownership_percentage_teleop'
        }

        self._auto_quest_achieved = auto_quest_achieved
        self._average_boost_played = average_boost_played
        self._average_endgame_points = average_endgame_points
        self._average_force_played = average_force_played
        self._average_foul_score = average_foul_score
        self._average_points_auto = average_points_auto
        self._average_points_teleop = average_points_teleop
        self._average_run_points_auto = average_run_points_auto
        self._average_scale_ownership_points = average_scale_ownership_points
        self._average_scale_ownership_points_auto = average_scale_ownership_points_auto
        self._average_scale_ownership_points_teleop = average_scale_ownership_points_teleop
        self._average_score = average_score
        self._average_switch_ownership_points = average_switch_ownership_points
        self._average_switch_ownership_points_auto = average_switch_ownership_points_auto
        self._average_switch_ownership_points_teleop = average_switch_ownership_points_teleop
        self._average_vault_points = average_vault_points
        self._average_win_margin = average_win_margin
        self._average_win_score = average_win_score
        self._boost_played_counts = boost_played_counts
        self._climb_counts = climb_counts
        self._face_the_boss_achieved = face_the_boss_achieved
        self._force_played_counts = force_played_counts
        self._high_score = high_score
        self._levitate_played_counts = levitate_played_counts
        self._run_counts_auto = run_counts_auto
        self._scale_neutral_percentage = scale_neutral_percentage
        self._scale_neutral_percentage_auto = scale_neutral_percentage_auto
        self._scale_neutral_percentage_teleop = scale_neutral_percentage_teleop
        self._switch_owned_counts_auto = switch_owned_counts_auto
        self._unicorn_matches = unicorn_matches
        self._winning_opp_switch_denial_percentage_teleop = winning_opp_switch_denial_percentage_teleop
        self._winning_own_switch_ownership_percentage = winning_own_switch_ownership_percentage
        self._winning_own_switch_ownership_percentage_auto = winning_own_switch_ownership_percentage_auto
        self._winning_own_switch_ownership_percentage_teleop = winning_own_switch_ownership_percentage_teleop
        self._winning_scale_ownership_percentage = winning_scale_ownership_percentage
        self._winning_scale_ownership_percentage_auto = winning_scale_ownership_percentage_auto
        self._winning_scale_ownership_percentage_teleop = winning_scale_ownership_percentage_teleop

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EventInsights2018':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Event_Insights_2018 of this EventInsights2018.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def auto_quest_achieved(self):
        """Gets the auto_quest_achieved of this EventInsights2018.

        An array with three values, number of times auto quest was completed, number of opportunities to complete the auto quest, and percentage.

        :return: The auto_quest_achieved of this EventInsights2018.
        :rtype: List[float]
        """
        return self._auto_quest_achieved

    @auto_quest_achieved.setter
    def auto_quest_achieved(self, auto_quest_achieved):
        """Sets the auto_quest_achieved of this EventInsights2018.

        An array with three values, number of times auto quest was completed, number of opportunities to complete the auto quest, and percentage.

        :param auto_quest_achieved: The auto_quest_achieved of this EventInsights2018.
        :type auto_quest_achieved: List[float]
        """
        if auto_quest_achieved is None:
            raise ValueError("Invalid value for `auto_quest_achieved`, must not be `None`")

        self._auto_quest_achieved = auto_quest_achieved

    @property
    def average_boost_played(self):
        """Gets the average_boost_played of this EventInsights2018.

        Average number of boost power up scored (out of 3).

        :return: The average_boost_played of this EventInsights2018.
        :rtype: float
        """
        return self._average_boost_played

    @average_boost_played.setter
    def average_boost_played(self, average_boost_played):
        """Sets the average_boost_played of this EventInsights2018.

        Average number of boost power up scored (out of 3).

        :param average_boost_played: The average_boost_played of this EventInsights2018.
        :type average_boost_played: float
        """
        if average_boost_played is None:
            raise ValueError("Invalid value for `average_boost_played`, must not be `None`")

        self._average_boost_played = average_boost_played

    @property
    def average_endgame_points(self):
        """Gets the average_endgame_points of this EventInsights2018.

        Average endgame points.

        :return: The average_endgame_points of this EventInsights2018.
        :rtype: float
        """
        return self._average_endgame_points

    @average_endgame_points.setter
    def average_endgame_points(self, average_endgame_points):
        """Sets the average_endgame_points of this EventInsights2018.

        Average endgame points.

        :param average_endgame_points: The average_endgame_points of this EventInsights2018.
        :type average_endgame_points: float
        """
        if average_endgame_points is None:
            raise ValueError("Invalid value for `average_endgame_points`, must not be `None`")

        self._average_endgame_points = average_endgame_points

    @property
    def average_force_played(self):
        """Gets the average_force_played of this EventInsights2018.

        Average number of force power up scored (out of 3).

        :return: The average_force_played of this EventInsights2018.
        :rtype: float
        """
        return self._average_force_played

    @average_force_played.setter
    def average_force_played(self, average_force_played):
        """Sets the average_force_played of this EventInsights2018.

        Average number of force power up scored (out of 3).

        :param average_force_played: The average_force_played of this EventInsights2018.
        :type average_force_played: float
        """
        if average_force_played is None:
            raise ValueError("Invalid value for `average_force_played`, must not be `None`")

        self._average_force_played = average_force_played

    @property
    def average_foul_score(self):
        """Gets the average_foul_score of this EventInsights2018.

        Average foul score.

        :return: The average_foul_score of this EventInsights2018.
        :rtype: float
        """
        return self._average_foul_score

    @average_foul_score.setter
    def average_foul_score(self, average_foul_score):
        """Sets the average_foul_score of this EventInsights2018.

        Average foul score.

        :param average_foul_score: The average_foul_score of this EventInsights2018.
        :type average_foul_score: float
        """
        if average_foul_score is None:
            raise ValueError("Invalid value for `average_foul_score`, must not be `None`")

        self._average_foul_score = average_foul_score

    @property
    def average_points_auto(self):
        """Gets the average_points_auto of this EventInsights2018.

        Average points scored during auto.

        :return: The average_points_auto of this EventInsights2018.
        :rtype: float
        """
        return self._average_points_auto

    @average_points_auto.setter
    def average_points_auto(self, average_points_auto):
        """Sets the average_points_auto of this EventInsights2018.

        Average points scored during auto.

        :param average_points_auto: The average_points_auto of this EventInsights2018.
        :type average_points_auto: float
        """
        if average_points_auto is None:
            raise ValueError("Invalid value for `average_points_auto`, must not be `None`")

        self._average_points_auto = average_points_auto

    @property
    def average_points_teleop(self):
        """Gets the average_points_teleop of this EventInsights2018.

        Average points scored during teleop.

        :return: The average_points_teleop of this EventInsights2018.
        :rtype: float
        """
        return self._average_points_teleop

    @average_points_teleop.setter
    def average_points_teleop(self, average_points_teleop):
        """Sets the average_points_teleop of this EventInsights2018.

        Average points scored during teleop.

        :param average_points_teleop: The average_points_teleop of this EventInsights2018.
        :type average_points_teleop: float
        """
        if average_points_teleop is None:
            raise ValueError("Invalid value for `average_points_teleop`, must not be `None`")

        self._average_points_teleop = average_points_teleop

    @property
    def average_run_points_auto(self):
        """Gets the average_run_points_auto of this EventInsights2018.

        Average mobility points scored during auto.

        :return: The average_run_points_auto of this EventInsights2018.
        :rtype: float
        """
        return self._average_run_points_auto

    @average_run_points_auto.setter
    def average_run_points_auto(self, average_run_points_auto):
        """Sets the average_run_points_auto of this EventInsights2018.

        Average mobility points scored during auto.

        :param average_run_points_auto: The average_run_points_auto of this EventInsights2018.
        :type average_run_points_auto: float
        """
        if average_run_points_auto is None:
            raise ValueError("Invalid value for `average_run_points_auto`, must not be `None`")

        self._average_run_points_auto = average_run_points_auto

    @property
    def average_scale_ownership_points(self):
        """Gets the average_scale_ownership_points of this EventInsights2018.

        Average scale ownership points scored.

        :return: The average_scale_ownership_points of this EventInsights2018.
        :rtype: float
        """
        return self._average_scale_ownership_points

    @average_scale_ownership_points.setter
    def average_scale_ownership_points(self, average_scale_ownership_points):
        """Sets the average_scale_ownership_points of this EventInsights2018.

        Average scale ownership points scored.

        :param average_scale_ownership_points: The average_scale_ownership_points of this EventInsights2018.
        :type average_scale_ownership_points: float
        """
        if average_scale_ownership_points is None:
            raise ValueError("Invalid value for `average_scale_ownership_points`, must not be `None`")

        self._average_scale_ownership_points = average_scale_ownership_points

    @property
    def average_scale_ownership_points_auto(self):
        """Gets the average_scale_ownership_points_auto of this EventInsights2018.

        Average scale ownership points scored during auto.

        :return: The average_scale_ownership_points_auto of this EventInsights2018.
        :rtype: float
        """
        return self._average_scale_ownership_points_auto

    @average_scale_ownership_points_auto.setter
    def average_scale_ownership_points_auto(self, average_scale_ownership_points_auto):
        """Sets the average_scale_ownership_points_auto of this EventInsights2018.

        Average scale ownership points scored during auto.

        :param average_scale_ownership_points_auto: The average_scale_ownership_points_auto of this EventInsights2018.
        :type average_scale_ownership_points_auto: float
        """
        if average_scale_ownership_points_auto is None:
            raise ValueError("Invalid value for `average_scale_ownership_points_auto`, must not be `None`")

        self._average_scale_ownership_points_auto = average_scale_ownership_points_auto

    @property
    def average_scale_ownership_points_teleop(self):
        """Gets the average_scale_ownership_points_teleop of this EventInsights2018.

        Average scale ownership points scored during teleop.

        :return: The average_scale_ownership_points_teleop of this EventInsights2018.
        :rtype: float
        """
        return self._average_scale_ownership_points_teleop

    @average_scale_ownership_points_teleop.setter
    def average_scale_ownership_points_teleop(self, average_scale_ownership_points_teleop):
        """Sets the average_scale_ownership_points_teleop of this EventInsights2018.

        Average scale ownership points scored during teleop.

        :param average_scale_ownership_points_teleop: The average_scale_ownership_points_teleop of this EventInsights2018.
        :type average_scale_ownership_points_teleop: float
        """
        if average_scale_ownership_points_teleop is None:
            raise ValueError("Invalid value for `average_scale_ownership_points_teleop`, must not be `None`")

        self._average_scale_ownership_points_teleop = average_scale_ownership_points_teleop

    @property
    def average_score(self):
        """Gets the average_score of this EventInsights2018.

        Average score.

        :return: The average_score of this EventInsights2018.
        :rtype: float
        """
        return self._average_score

    @average_score.setter
    def average_score(self, average_score):
        """Sets the average_score of this EventInsights2018.

        Average score.

        :param average_score: The average_score of this EventInsights2018.
        :type average_score: float
        """
        if average_score is None:
            raise ValueError("Invalid value for `average_score`, must not be `None`")

        self._average_score = average_score

    @property
    def average_switch_ownership_points(self):
        """Gets the average_switch_ownership_points of this EventInsights2018.

        Average switch ownership points scored.

        :return: The average_switch_ownership_points of this EventInsights2018.
        :rtype: float
        """
        return self._average_switch_ownership_points

    @average_switch_ownership_points.setter
    def average_switch_ownership_points(self, average_switch_ownership_points):
        """Sets the average_switch_ownership_points of this EventInsights2018.

        Average switch ownership points scored.

        :param average_switch_ownership_points: The average_switch_ownership_points of this EventInsights2018.
        :type average_switch_ownership_points: float
        """
        if average_switch_ownership_points is None:
            raise ValueError("Invalid value for `average_switch_ownership_points`, must not be `None`")

        self._average_switch_ownership_points = average_switch_ownership_points

    @property
    def average_switch_ownership_points_auto(self):
        """Gets the average_switch_ownership_points_auto of this EventInsights2018.

        Average switch ownership points scored during auto.

        :return: The average_switch_ownership_points_auto of this EventInsights2018.
        :rtype: float
        """
        return self._average_switch_ownership_points_auto

    @average_switch_ownership_points_auto.setter
    def average_switch_ownership_points_auto(self, average_switch_ownership_points_auto):
        """Sets the average_switch_ownership_points_auto of this EventInsights2018.

        Average switch ownership points scored during auto.

        :param average_switch_ownership_points_auto: The average_switch_ownership_points_auto of this EventInsights2018.
        :type average_switch_ownership_points_auto: float
        """
        if average_switch_ownership_points_auto is None:
            raise ValueError("Invalid value for `average_switch_ownership_points_auto`, must not be `None`")

        self._average_switch_ownership_points_auto = average_switch_ownership_points_auto

    @property
    def average_switch_ownership_points_teleop(self):
        """Gets the average_switch_ownership_points_teleop of this EventInsights2018.

        Average switch ownership points scored during teleop.

        :return: The average_switch_ownership_points_teleop of this EventInsights2018.
        :rtype: float
        """
        return self._average_switch_ownership_points_teleop

    @average_switch_ownership_points_teleop.setter
    def average_switch_ownership_points_teleop(self, average_switch_ownership_points_teleop):
        """Sets the average_switch_ownership_points_teleop of this EventInsights2018.

        Average switch ownership points scored during teleop.

        :param average_switch_ownership_points_teleop: The average_switch_ownership_points_teleop of this EventInsights2018.
        :type average_switch_ownership_points_teleop: float
        """
        if average_switch_ownership_points_teleop is None:
            raise ValueError("Invalid value for `average_switch_ownership_points_teleop`, must not be `None`")

        self._average_switch_ownership_points_teleop = average_switch_ownership_points_teleop

    @property
    def average_vault_points(self):
        """Gets the average_vault_points of this EventInsights2018.

        Average value points scored.

        :return: The average_vault_points of this EventInsights2018.
        :rtype: float
        """
        return self._average_vault_points

    @average_vault_points.setter
    def average_vault_points(self, average_vault_points):
        """Sets the average_vault_points of this EventInsights2018.

        Average value points scored.

        :param average_vault_points: The average_vault_points of this EventInsights2018.
        :type average_vault_points: float
        """
        if average_vault_points is None:
            raise ValueError("Invalid value for `average_vault_points`, must not be `None`")

        self._average_vault_points = average_vault_points

    @property
    def average_win_margin(self):
        """Gets the average_win_margin of this EventInsights2018.

        Average margin of victory.

        :return: The average_win_margin of this EventInsights2018.
        :rtype: float
        """
        return self._average_win_margin

    @average_win_margin.setter
    def average_win_margin(self, average_win_margin):
        """Sets the average_win_margin of this EventInsights2018.

        Average margin of victory.

        :param average_win_margin: The average_win_margin of this EventInsights2018.
        :type average_win_margin: float
        """
        if average_win_margin is None:
            raise ValueError("Invalid value for `average_win_margin`, must not be `None`")

        self._average_win_margin = average_win_margin

    @property
    def average_win_score(self):
        """Gets the average_win_score of this EventInsights2018.

        Average winning score.

        :return: The average_win_score of this EventInsights2018.
        :rtype: float
        """
        return self._average_win_score

    @average_win_score.setter
    def average_win_score(self, average_win_score):
        """Sets the average_win_score of this EventInsights2018.

        Average winning score.

        :param average_win_score: The average_win_score of this EventInsights2018.
        :type average_win_score: float
        """
        if average_win_score is None:
            raise ValueError("Invalid value for `average_win_score`, must not be `None`")

        self._average_win_score = average_win_score

    @property
    def boost_played_counts(self):
        """Gets the boost_played_counts of this EventInsights2018.

        An array with three values, number of times a boost power up was played, number of opportunities to play a boost power up, and percentage.

        :return: The boost_played_counts of this EventInsights2018.
        :rtype: List[float]
        """
        return self._boost_played_counts

    @boost_played_counts.setter
    def boost_played_counts(self, boost_played_counts):
        """Sets the boost_played_counts of this EventInsights2018.

        An array with three values, number of times a boost power up was played, number of opportunities to play a boost power up, and percentage.

        :param boost_played_counts: The boost_played_counts of this EventInsights2018.
        :type boost_played_counts: List[float]
        """
        if boost_played_counts is None:
            raise ValueError("Invalid value for `boost_played_counts`, must not be `None`")

        self._boost_played_counts = boost_played_counts

    @property
    def climb_counts(self):
        """Gets the climb_counts of this EventInsights2018.

        An array with three values, number of times a climb occurred, number of opportunities to climb, and percentage.

        :return: The climb_counts of this EventInsights2018.
        :rtype: List[float]
        """
        return self._climb_counts

    @climb_counts.setter
    def climb_counts(self, climb_counts):
        """Sets the climb_counts of this EventInsights2018.

        An array with three values, number of times a climb occurred, number of opportunities to climb, and percentage.

        :param climb_counts: The climb_counts of this EventInsights2018.
        :type climb_counts: List[float]
        """
        if climb_counts is None:
            raise ValueError("Invalid value for `climb_counts`, must not be `None`")

        self._climb_counts = climb_counts

    @property
    def face_the_boss_achieved(self):
        """Gets the face_the_boss_achieved of this EventInsights2018.

        An array with three values, number of times an alliance faced the boss, number of opportunities to face the boss, and percentage.

        :return: The face_the_boss_achieved of this EventInsights2018.
        :rtype: List[float]
        """
        return self._face_the_boss_achieved

    @face_the_boss_achieved.setter
    def face_the_boss_achieved(self, face_the_boss_achieved):
        """Sets the face_the_boss_achieved of this EventInsights2018.

        An array with three values, number of times an alliance faced the boss, number of opportunities to face the boss, and percentage.

        :param face_the_boss_achieved: The face_the_boss_achieved of this EventInsights2018.
        :type face_the_boss_achieved: List[float]
        """
        if face_the_boss_achieved is None:
            raise ValueError("Invalid value for `face_the_boss_achieved`, must not be `None`")

        self._face_the_boss_achieved = face_the_boss_achieved

    @property
    def force_played_counts(self):
        """Gets the force_played_counts of this EventInsights2018.

        An array with three values, number of times a force power up was played, number of opportunities to play a force power up, and percentage.

        :return: The force_played_counts of this EventInsights2018.
        :rtype: List[float]
        """
        return self._force_played_counts

    @force_played_counts.setter
    def force_played_counts(self, force_played_counts):
        """Sets the force_played_counts of this EventInsights2018.

        An array with three values, number of times a force power up was played, number of opportunities to play a force power up, and percentage.

        :param force_played_counts: The force_played_counts of this EventInsights2018.
        :type force_played_counts: List[float]
        """
        if force_played_counts is None:
            raise ValueError("Invalid value for `force_played_counts`, must not be `None`")

        self._force_played_counts = force_played_counts

    @property
    def high_score(self):
        """Gets the high_score of this EventInsights2018.

        An array with three values, high score, match key from the match with the high score, and the name of the match

        :return: The high_score of this EventInsights2018.
        :rtype: List[str]
        """
        return self._high_score

    @high_score.setter
    def high_score(self, high_score):
        """Sets the high_score of this EventInsights2018.

        An array with three values, high score, match key from the match with the high score, and the name of the match

        :param high_score: The high_score of this EventInsights2018.
        :type high_score: List[str]
        """
        if high_score is None:
            raise ValueError("Invalid value for `high_score`, must not be `None`")

        self._high_score = high_score

    @property
    def levitate_played_counts(self):
        """Gets the levitate_played_counts of this EventInsights2018.

        An array with three values, number of times a levitate power up was played, number of opportunities to play a levitate power up, and percentage.

        :return: The levitate_played_counts of this EventInsights2018.
        :rtype: List[float]
        """
        return self._levitate_played_counts

    @levitate_played_counts.setter
    def levitate_played_counts(self, levitate_played_counts):
        """Sets the levitate_played_counts of this EventInsights2018.

        An array with three values, number of times a levitate power up was played, number of opportunities to play a levitate power up, and percentage.

        :param levitate_played_counts: The levitate_played_counts of this EventInsights2018.
        :type levitate_played_counts: List[float]
        """
        if levitate_played_counts is None:
            raise ValueError("Invalid value for `levitate_played_counts`, must not be `None`")

        self._levitate_played_counts = levitate_played_counts

    @property
    def run_counts_auto(self):
        """Gets the run_counts_auto of this EventInsights2018.

        An array with three values, number of times a team scored mobility points in auto, number of opportunities to score mobility points in auto, and percentage.

        :return: The run_counts_auto of this EventInsights2018.
        :rtype: List[float]
        """
        return self._run_counts_auto

    @run_counts_auto.setter
    def run_counts_auto(self, run_counts_auto):
        """Sets the run_counts_auto of this EventInsights2018.

        An array with three values, number of times a team scored mobility points in auto, number of opportunities to score mobility points in auto, and percentage.

        :param run_counts_auto: The run_counts_auto of this EventInsights2018.
        :type run_counts_auto: List[float]
        """
        if run_counts_auto is None:
            raise ValueError("Invalid value for `run_counts_auto`, must not be `None`")

        self._run_counts_auto = run_counts_auto

    @property
    def scale_neutral_percentage(self):
        """Gets the scale_neutral_percentage of this EventInsights2018.

        Average scale neutral percentage.

        :return: The scale_neutral_percentage of this EventInsights2018.
        :rtype: float
        """
        return self._scale_neutral_percentage

    @scale_neutral_percentage.setter
    def scale_neutral_percentage(self, scale_neutral_percentage):
        """Sets the scale_neutral_percentage of this EventInsights2018.

        Average scale neutral percentage.

        :param scale_neutral_percentage: The scale_neutral_percentage of this EventInsights2018.
        :type scale_neutral_percentage: float
        """
        if scale_neutral_percentage is None:
            raise ValueError("Invalid value for `scale_neutral_percentage`, must not be `None`")

        self._scale_neutral_percentage = scale_neutral_percentage

    @property
    def scale_neutral_percentage_auto(self):
        """Gets the scale_neutral_percentage_auto of this EventInsights2018.

        Average scale neutral percentage during auto.

        :return: The scale_neutral_percentage_auto of this EventInsights2018.
        :rtype: float
        """
        return self._scale_neutral_percentage_auto

    @scale_neutral_percentage_auto.setter
    def scale_neutral_percentage_auto(self, scale_neutral_percentage_auto):
        """Sets the scale_neutral_percentage_auto of this EventInsights2018.

        Average scale neutral percentage during auto.

        :param scale_neutral_percentage_auto: The scale_neutral_percentage_auto of this EventInsights2018.
        :type scale_neutral_percentage_auto: float
        """
        if scale_neutral_percentage_auto is None:
            raise ValueError("Invalid value for `scale_neutral_percentage_auto`, must not be `None`")

        self._scale_neutral_percentage_auto = scale_neutral_percentage_auto

    @property
    def scale_neutral_percentage_teleop(self):
        """Gets the scale_neutral_percentage_teleop of this EventInsights2018.

        Average scale neutral percentage during teleop.

        :return: The scale_neutral_percentage_teleop of this EventInsights2018.
        :rtype: float
        """
        return self._scale_neutral_percentage_teleop

    @scale_neutral_percentage_teleop.setter
    def scale_neutral_percentage_teleop(self, scale_neutral_percentage_teleop):
        """Sets the scale_neutral_percentage_teleop of this EventInsights2018.

        Average scale neutral percentage during teleop.

        :param scale_neutral_percentage_teleop: The scale_neutral_percentage_teleop of this EventInsights2018.
        :type scale_neutral_percentage_teleop: float
        """
        if scale_neutral_percentage_teleop is None:
            raise ValueError("Invalid value for `scale_neutral_percentage_teleop`, must not be `None`")

        self._scale_neutral_percentage_teleop = scale_neutral_percentage_teleop

    @property
    def switch_owned_counts_auto(self):
        """Gets the switch_owned_counts_auto of this EventInsights2018.

        An array with three values, number of times a switch was owned during auto, number of opportunities to own a switch during auto, and percentage.

        :return: The switch_owned_counts_auto of this EventInsights2018.
        :rtype: List[float]
        """
        return self._switch_owned_counts_auto

    @switch_owned_counts_auto.setter
    def switch_owned_counts_auto(self, switch_owned_counts_auto):
        """Sets the switch_owned_counts_auto of this EventInsights2018.

        An array with three values, number of times a switch was owned during auto, number of opportunities to own a switch during auto, and percentage.

        :param switch_owned_counts_auto: The switch_owned_counts_auto of this EventInsights2018.
        :type switch_owned_counts_auto: List[float]
        """
        if switch_owned_counts_auto is None:
            raise ValueError("Invalid value for `switch_owned_counts_auto`, must not be `None`")

        self._switch_owned_counts_auto = switch_owned_counts_auto

    @property
    def unicorn_matches(self):
        """Gets the unicorn_matches of this EventInsights2018.

        An array with three values, number of times a unicorn match (Win + Auto Quest + Face the Boss) occurred, number of opportunities to have a unicorn match, and percentage.

        :return: The unicorn_matches of this EventInsights2018.
        :rtype: List[float]
        """
        return self._unicorn_matches

    @unicorn_matches.setter
    def unicorn_matches(self, unicorn_matches):
        """Sets the unicorn_matches of this EventInsights2018.

        An array with three values, number of times a unicorn match (Win + Auto Quest + Face the Boss) occurred, number of opportunities to have a unicorn match, and percentage.

        :param unicorn_matches: The unicorn_matches of this EventInsights2018.
        :type unicorn_matches: List[float]
        """
        if unicorn_matches is None:
            raise ValueError("Invalid value for `unicorn_matches`, must not be `None`")

        self._unicorn_matches = unicorn_matches

    @property
    def winning_opp_switch_denial_percentage_teleop(self):
        """Gets the winning_opp_switch_denial_percentage_teleop of this EventInsights2018.

        Average opposing switch denail percentage for the winning alliance during teleop.

        :return: The winning_opp_switch_denial_percentage_teleop of this EventInsights2018.
        :rtype: float
        """
        return self._winning_opp_switch_denial_percentage_teleop

    @winning_opp_switch_denial_percentage_teleop.setter
    def winning_opp_switch_denial_percentage_teleop(self, winning_opp_switch_denial_percentage_teleop):
        """Sets the winning_opp_switch_denial_percentage_teleop of this EventInsights2018.

        Average opposing switch denail percentage for the winning alliance during teleop.

        :param winning_opp_switch_denial_percentage_teleop: The winning_opp_switch_denial_percentage_teleop of this EventInsights2018.
        :type winning_opp_switch_denial_percentage_teleop: float
        """
        if winning_opp_switch_denial_percentage_teleop is None:
            raise ValueError("Invalid value for `winning_opp_switch_denial_percentage_teleop`, must not be `None`")

        self._winning_opp_switch_denial_percentage_teleop = winning_opp_switch_denial_percentage_teleop

    @property
    def winning_own_switch_ownership_percentage(self):
        """Gets the winning_own_switch_ownership_percentage of this EventInsights2018.

        Average own switch ownership percentage for the winning alliance.

        :return: The winning_own_switch_ownership_percentage of this EventInsights2018.
        :rtype: float
        """
        return self._winning_own_switch_ownership_percentage

    @winning_own_switch_ownership_percentage.setter
    def winning_own_switch_ownership_percentage(self, winning_own_switch_ownership_percentage):
        """Sets the winning_own_switch_ownership_percentage of this EventInsights2018.

        Average own switch ownership percentage for the winning alliance.

        :param winning_own_switch_ownership_percentage: The winning_own_switch_ownership_percentage of this EventInsights2018.
        :type winning_own_switch_ownership_percentage: float
        """
        if winning_own_switch_ownership_percentage is None:
            raise ValueError("Invalid value for `winning_own_switch_ownership_percentage`, must not be `None`")

        self._winning_own_switch_ownership_percentage = winning_own_switch_ownership_percentage

    @property
    def winning_own_switch_ownership_percentage_auto(self):
        """Gets the winning_own_switch_ownership_percentage_auto of this EventInsights2018.

        Average own switch ownership percentage for the winning alliance during auto.

        :return: The winning_own_switch_ownership_percentage_auto of this EventInsights2018.
        :rtype: float
        """
        return self._winning_own_switch_ownership_percentage_auto

    @winning_own_switch_ownership_percentage_auto.setter
    def winning_own_switch_ownership_percentage_auto(self, winning_own_switch_ownership_percentage_auto):
        """Sets the winning_own_switch_ownership_percentage_auto of this EventInsights2018.

        Average own switch ownership percentage for the winning alliance during auto.

        :param winning_own_switch_ownership_percentage_auto: The winning_own_switch_ownership_percentage_auto of this EventInsights2018.
        :type winning_own_switch_ownership_percentage_auto: float
        """
        if winning_own_switch_ownership_percentage_auto is None:
            raise ValueError("Invalid value for `winning_own_switch_ownership_percentage_auto`, must not be `None`")

        self._winning_own_switch_ownership_percentage_auto = winning_own_switch_ownership_percentage_auto

    @property
    def winning_own_switch_ownership_percentage_teleop(self):
        """Gets the winning_own_switch_ownership_percentage_teleop of this EventInsights2018.

        Average own switch ownership percentage for the winning alliance during teleop.

        :return: The winning_own_switch_ownership_percentage_teleop of this EventInsights2018.
        :rtype: float
        """
        return self._winning_own_switch_ownership_percentage_teleop

    @winning_own_switch_ownership_percentage_teleop.setter
    def winning_own_switch_ownership_percentage_teleop(self, winning_own_switch_ownership_percentage_teleop):
        """Sets the winning_own_switch_ownership_percentage_teleop of this EventInsights2018.

        Average own switch ownership percentage for the winning alliance during teleop.

        :param winning_own_switch_ownership_percentage_teleop: The winning_own_switch_ownership_percentage_teleop of this EventInsights2018.
        :type winning_own_switch_ownership_percentage_teleop: float
        """
        if winning_own_switch_ownership_percentage_teleop is None:
            raise ValueError("Invalid value for `winning_own_switch_ownership_percentage_teleop`, must not be `None`")

        self._winning_own_switch_ownership_percentage_teleop = winning_own_switch_ownership_percentage_teleop

    @property
    def winning_scale_ownership_percentage(self):
        """Gets the winning_scale_ownership_percentage of this EventInsights2018.

        Average scale ownership percentage for the winning alliance.

        :return: The winning_scale_ownership_percentage of this EventInsights2018.
        :rtype: float
        """
        return self._winning_scale_ownership_percentage

    @winning_scale_ownership_percentage.setter
    def winning_scale_ownership_percentage(self, winning_scale_ownership_percentage):
        """Sets the winning_scale_ownership_percentage of this EventInsights2018.

        Average scale ownership percentage for the winning alliance.

        :param winning_scale_ownership_percentage: The winning_scale_ownership_percentage of this EventInsights2018.
        :type winning_scale_ownership_percentage: float
        """
        if winning_scale_ownership_percentage is None:
            raise ValueError("Invalid value for `winning_scale_ownership_percentage`, must not be `None`")

        self._winning_scale_ownership_percentage = winning_scale_ownership_percentage

    @property
    def winning_scale_ownership_percentage_auto(self):
        """Gets the winning_scale_ownership_percentage_auto of this EventInsights2018.

        Average scale ownership percentage for the winning alliance during auto.

        :return: The winning_scale_ownership_percentage_auto of this EventInsights2018.
        :rtype: float
        """
        return self._winning_scale_ownership_percentage_auto

    @winning_scale_ownership_percentage_auto.setter
    def winning_scale_ownership_percentage_auto(self, winning_scale_ownership_percentage_auto):
        """Sets the winning_scale_ownership_percentage_auto of this EventInsights2018.

        Average scale ownership percentage for the winning alliance during auto.

        :param winning_scale_ownership_percentage_auto: The winning_scale_ownership_percentage_auto of this EventInsights2018.
        :type winning_scale_ownership_percentage_auto: float
        """
        if winning_scale_ownership_percentage_auto is None:
            raise ValueError("Invalid value for `winning_scale_ownership_percentage_auto`, must not be `None`")

        self._winning_scale_ownership_percentage_auto = winning_scale_ownership_percentage_auto

    @property
    def winning_scale_ownership_percentage_teleop(self):
        """Gets the winning_scale_ownership_percentage_teleop of this EventInsights2018.

        Average scale ownership percentage for the winning alliance during teleop.

        :return: The winning_scale_ownership_percentage_teleop of this EventInsights2018.
        :rtype: float
        """
        return self._winning_scale_ownership_percentage_teleop

    @winning_scale_ownership_percentage_teleop.setter
    def winning_scale_ownership_percentage_teleop(self, winning_scale_ownership_percentage_teleop):
        """Sets the winning_scale_ownership_percentage_teleop of this EventInsights2018.

        Average scale ownership percentage for the winning alliance during teleop.

        :param winning_scale_ownership_percentage_teleop: The winning_scale_ownership_percentage_teleop of this EventInsights2018.
        :type winning_scale_ownership_percentage_teleop: float
        """
        if winning_scale_ownership_percentage_teleop is None:
            raise ValueError("Invalid value for `winning_scale_ownership_percentage_teleop`, must not be `None`")

        self._winning_scale_ownership_percentage_teleop = winning_scale_ownership_percentage_teleop
