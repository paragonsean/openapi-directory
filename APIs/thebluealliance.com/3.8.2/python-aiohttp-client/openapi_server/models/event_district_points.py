# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.event_district_points_points_value import EventDistrictPointsPointsValue
from openapi_server.models.event_district_points_tiebreakers_value import EventDistrictPointsTiebreakersValue
from openapi_server import util


class EventDistrictPoints(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, points: Dict[str, EventDistrictPointsPointsValue]=None, tiebreakers: Dict[str, EventDistrictPointsTiebreakersValue]=None):
        """EventDistrictPoints - a model defined in OpenAPI

        :param points: The points of this EventDistrictPoints.
        :param tiebreakers: The tiebreakers of this EventDistrictPoints.
        """
        self.openapi_types = {
            'points': Dict[str, EventDistrictPointsPointsValue],
            'tiebreakers': Dict[str, EventDistrictPointsTiebreakersValue]
        }

        self.attribute_map = {
            'points': 'points',
            'tiebreakers': 'tiebreakers'
        }

        self._points = points
        self._tiebreakers = tiebreakers

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EventDistrictPoints':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Event_District_Points of this EventDistrictPoints.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def points(self):
        """Gets the points of this EventDistrictPoints.

        Points gained for each team at the event. Stored as a key-value pair with the team key as the key, and an object describing the points as its value.

        :return: The points of this EventDistrictPoints.
        :rtype: Dict[str, EventDistrictPointsPointsValue]
        """
        return self._points

    @points.setter
    def points(self, points):
        """Sets the points of this EventDistrictPoints.

        Points gained for each team at the event. Stored as a key-value pair with the team key as the key, and an object describing the points as its value.

        :param points: The points of this EventDistrictPoints.
        :type points: Dict[str, EventDistrictPointsPointsValue]
        """
        if points is None:
            raise ValueError("Invalid value for `points`, must not be `None`")

        self._points = points

    @property
    def tiebreakers(self):
        """Gets the tiebreakers of this EventDistrictPoints.

        Tiebreaker values for each team at the event. Stored as a key-value pair with the team key as the key, and an object describing the tiebreaker elements as its value.

        :return: The tiebreakers of this EventDistrictPoints.
        :rtype: Dict[str, EventDistrictPointsTiebreakersValue]
        """
        return self._tiebreakers

    @tiebreakers.setter
    def tiebreakers(self, tiebreakers):
        """Sets the tiebreakers of this EventDistrictPoints.

        Tiebreaker values for each team at the event. Stored as a key-value pair with the team key as the key, and an object describing the tiebreaker elements as its value.

        :param tiebreakers: The tiebreakers of this EventDistrictPoints.
        :type tiebreakers: Dict[str, EventDistrictPointsTiebreakersValue]
        """

        self._tiebreakers = tiebreakers
