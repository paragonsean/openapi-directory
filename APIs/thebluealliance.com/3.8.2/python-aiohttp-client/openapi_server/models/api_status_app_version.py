# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class APIStatusAppVersion(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, latest_app_version: int=None, min_app_version: int=None):
        """APIStatusAppVersion - a model defined in OpenAPI

        :param latest_app_version: The latest_app_version of this APIStatusAppVersion.
        :param min_app_version: The min_app_version of this APIStatusAppVersion.
        """
        self.openapi_types = {
            'latest_app_version': int,
            'min_app_version': int
        }

        self.attribute_map = {
            'latest_app_version': 'latest_app_version',
            'min_app_version': 'min_app_version'
        }

        self._latest_app_version = latest_app_version
        self._min_app_version = min_app_version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'APIStatusAppVersion':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The API_Status_App_Version of this APIStatusAppVersion.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def latest_app_version(self):
        """Gets the latest_app_version of this APIStatusAppVersion.

        Internal use - Latest application version available.

        :return: The latest_app_version of this APIStatusAppVersion.
        :rtype: int
        """
        return self._latest_app_version

    @latest_app_version.setter
    def latest_app_version(self, latest_app_version):
        """Sets the latest_app_version of this APIStatusAppVersion.

        Internal use - Latest application version available.

        :param latest_app_version: The latest_app_version of this APIStatusAppVersion.
        :type latest_app_version: int
        """
        if latest_app_version is None:
            raise ValueError("Invalid value for `latest_app_version`, must not be `None`")

        self._latest_app_version = latest_app_version

    @property
    def min_app_version(self):
        """Gets the min_app_version of this APIStatusAppVersion.

        Internal use - Minimum application version required to correctly connect and process data.

        :return: The min_app_version of this APIStatusAppVersion.
        :rtype: int
        """
        return self._min_app_version

    @min_app_version.setter
    def min_app_version(self, min_app_version):
        """Sets the min_app_version of this APIStatusAppVersion.

        Internal use - Minimum application version required to correctly connect and process data.

        :param min_app_version: The min_app_version of this APIStatusAppVersion.
        :type min_app_version: int
        """
        if min_app_version is None:
            raise ValueError("Invalid value for `min_app_version`, must not be `None`")

        self._min_app_version = min_app_version
