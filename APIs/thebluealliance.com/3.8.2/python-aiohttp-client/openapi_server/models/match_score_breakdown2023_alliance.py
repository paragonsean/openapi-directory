# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.match_score_breakdown2023_alliance_auto_community import MatchScoreBreakdown2023AllianceAutoCommunity
from openapi_server.models.match_score_breakdown2023_alliance_links_inner import MatchScoreBreakdown2023AllianceLinksInner
from openapi_server import util


class MatchScoreBreakdown2023Alliance(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, activation_bonus_achieved: bool=None, adjust_points: int=None, auto_bridge_state: str=None, auto_charge_station_points: int=None, auto_charge_station_robot1: str=None, auto_charge_station_robot2: str=None, auto_charge_station_robot3: str=None, auto_community: MatchScoreBreakdown2023AllianceAutoCommunity=None, auto_docked: bool=None, auto_game_piece_count: int=None, auto_game_piece_points: int=None, auto_mobility_points: int=None, auto_points: int=None, coop_game_piece_count: int=None, coopertition_criteria_met: bool=None, end_game_bridge_state: str=None, end_game_charge_station_points: int=None, end_game_charge_station_robot1: str=None, end_game_charge_station_robot2: str=None, end_game_charge_station_robot3: str=None, end_game_park_points: int=None, extra_game_piece_count: int=None, foul_count: int=None, foul_points: int=None, link_points: int=None, links: List[MatchScoreBreakdown2023AllianceLinksInner]=None, mobility_robot1: str=None, mobility_robot2: str=None, mobility_robot3: str=None, rp: int=None, sustainability_bonus_achieved: bool=None, tech_foul_count: int=None, teleop_community: MatchScoreBreakdown2023AllianceAutoCommunity=None, teleop_game_piece_count: int=None, teleop_game_piece_points: int=None, teleop_points: int=None, total_charge_station_points: int=None, total_points: int=None):
        """MatchScoreBreakdown2023Alliance - a model defined in OpenAPI

        :param activation_bonus_achieved: The activation_bonus_achieved of this MatchScoreBreakdown2023Alliance.
        :param adjust_points: The adjust_points of this MatchScoreBreakdown2023Alliance.
        :param auto_bridge_state: The auto_bridge_state of this MatchScoreBreakdown2023Alliance.
        :param auto_charge_station_points: The auto_charge_station_points of this MatchScoreBreakdown2023Alliance.
        :param auto_charge_station_robot1: The auto_charge_station_robot1 of this MatchScoreBreakdown2023Alliance.
        :param auto_charge_station_robot2: The auto_charge_station_robot2 of this MatchScoreBreakdown2023Alliance.
        :param auto_charge_station_robot3: The auto_charge_station_robot3 of this MatchScoreBreakdown2023Alliance.
        :param auto_community: The auto_community of this MatchScoreBreakdown2023Alliance.
        :param auto_docked: The auto_docked of this MatchScoreBreakdown2023Alliance.
        :param auto_game_piece_count: The auto_game_piece_count of this MatchScoreBreakdown2023Alliance.
        :param auto_game_piece_points: The auto_game_piece_points of this MatchScoreBreakdown2023Alliance.
        :param auto_mobility_points: The auto_mobility_points of this MatchScoreBreakdown2023Alliance.
        :param auto_points: The auto_points of this MatchScoreBreakdown2023Alliance.
        :param coop_game_piece_count: The coop_game_piece_count of this MatchScoreBreakdown2023Alliance.
        :param coopertition_criteria_met: The coopertition_criteria_met of this MatchScoreBreakdown2023Alliance.
        :param end_game_bridge_state: The end_game_bridge_state of this MatchScoreBreakdown2023Alliance.
        :param end_game_charge_station_points: The end_game_charge_station_points of this MatchScoreBreakdown2023Alliance.
        :param end_game_charge_station_robot1: The end_game_charge_station_robot1 of this MatchScoreBreakdown2023Alliance.
        :param end_game_charge_station_robot2: The end_game_charge_station_robot2 of this MatchScoreBreakdown2023Alliance.
        :param end_game_charge_station_robot3: The end_game_charge_station_robot3 of this MatchScoreBreakdown2023Alliance.
        :param end_game_park_points: The end_game_park_points of this MatchScoreBreakdown2023Alliance.
        :param extra_game_piece_count: The extra_game_piece_count of this MatchScoreBreakdown2023Alliance.
        :param foul_count: The foul_count of this MatchScoreBreakdown2023Alliance.
        :param foul_points: The foul_points of this MatchScoreBreakdown2023Alliance.
        :param link_points: The link_points of this MatchScoreBreakdown2023Alliance.
        :param links: The links of this MatchScoreBreakdown2023Alliance.
        :param mobility_robot1: The mobility_robot1 of this MatchScoreBreakdown2023Alliance.
        :param mobility_robot2: The mobility_robot2 of this MatchScoreBreakdown2023Alliance.
        :param mobility_robot3: The mobility_robot3 of this MatchScoreBreakdown2023Alliance.
        :param rp: The rp of this MatchScoreBreakdown2023Alliance.
        :param sustainability_bonus_achieved: The sustainability_bonus_achieved of this MatchScoreBreakdown2023Alliance.
        :param tech_foul_count: The tech_foul_count of this MatchScoreBreakdown2023Alliance.
        :param teleop_community: The teleop_community of this MatchScoreBreakdown2023Alliance.
        :param teleop_game_piece_count: The teleop_game_piece_count of this MatchScoreBreakdown2023Alliance.
        :param teleop_game_piece_points: The teleop_game_piece_points of this MatchScoreBreakdown2023Alliance.
        :param teleop_points: The teleop_points of this MatchScoreBreakdown2023Alliance.
        :param total_charge_station_points: The total_charge_station_points of this MatchScoreBreakdown2023Alliance.
        :param total_points: The total_points of this MatchScoreBreakdown2023Alliance.
        """
        self.openapi_types = {
            'activation_bonus_achieved': bool,
            'adjust_points': int,
            'auto_bridge_state': str,
            'auto_charge_station_points': int,
            'auto_charge_station_robot1': str,
            'auto_charge_station_robot2': str,
            'auto_charge_station_robot3': str,
            'auto_community': MatchScoreBreakdown2023AllianceAutoCommunity,
            'auto_docked': bool,
            'auto_game_piece_count': int,
            'auto_game_piece_points': int,
            'auto_mobility_points': int,
            'auto_points': int,
            'coop_game_piece_count': int,
            'coopertition_criteria_met': bool,
            'end_game_bridge_state': str,
            'end_game_charge_station_points': int,
            'end_game_charge_station_robot1': str,
            'end_game_charge_station_robot2': str,
            'end_game_charge_station_robot3': str,
            'end_game_park_points': int,
            'extra_game_piece_count': int,
            'foul_count': int,
            'foul_points': int,
            'link_points': int,
            'links': List[MatchScoreBreakdown2023AllianceLinksInner],
            'mobility_robot1': str,
            'mobility_robot2': str,
            'mobility_robot3': str,
            'rp': int,
            'sustainability_bonus_achieved': bool,
            'tech_foul_count': int,
            'teleop_community': MatchScoreBreakdown2023AllianceAutoCommunity,
            'teleop_game_piece_count': int,
            'teleop_game_piece_points': int,
            'teleop_points': int,
            'total_charge_station_points': int,
            'total_points': int
        }

        self.attribute_map = {
            'activation_bonus_achieved': 'activationBonusAchieved',
            'adjust_points': 'adjustPoints',
            'auto_bridge_state': 'autoBridgeState',
            'auto_charge_station_points': 'autoChargeStationPoints',
            'auto_charge_station_robot1': 'autoChargeStationRobot1',
            'auto_charge_station_robot2': 'autoChargeStationRobot2',
            'auto_charge_station_robot3': 'autoChargeStationRobot3',
            'auto_community': 'autoCommunity',
            'auto_docked': 'autoDocked',
            'auto_game_piece_count': 'autoGamePieceCount',
            'auto_game_piece_points': 'autoGamePiecePoints',
            'auto_mobility_points': 'autoMobilityPoints',
            'auto_points': 'autoPoints',
            'coop_game_piece_count': 'coopGamePieceCount',
            'coopertition_criteria_met': 'coopertitionCriteriaMet',
            'end_game_bridge_state': 'endGameBridgeState',
            'end_game_charge_station_points': 'endGameChargeStationPoints',
            'end_game_charge_station_robot1': 'endGameChargeStationRobot1',
            'end_game_charge_station_robot2': 'endGameChargeStationRobot2',
            'end_game_charge_station_robot3': 'endGameChargeStationRobot3',
            'end_game_park_points': 'endGameParkPoints',
            'extra_game_piece_count': 'extraGamePieceCount',
            'foul_count': 'foulCount',
            'foul_points': 'foulPoints',
            'link_points': 'linkPoints',
            'links': 'links',
            'mobility_robot1': 'mobilityRobot1',
            'mobility_robot2': 'mobilityRobot2',
            'mobility_robot3': 'mobilityRobot3',
            'rp': 'rp',
            'sustainability_bonus_achieved': 'sustainabilityBonusAchieved',
            'tech_foul_count': 'techFoulCount',
            'teleop_community': 'teleopCommunity',
            'teleop_game_piece_count': 'teleopGamePieceCount',
            'teleop_game_piece_points': 'teleopGamePiecePoints',
            'teleop_points': 'teleopPoints',
            'total_charge_station_points': 'totalChargeStationPoints',
            'total_points': 'totalPoints'
        }

        self._activation_bonus_achieved = activation_bonus_achieved
        self._adjust_points = adjust_points
        self._auto_bridge_state = auto_bridge_state
        self._auto_charge_station_points = auto_charge_station_points
        self._auto_charge_station_robot1 = auto_charge_station_robot1
        self._auto_charge_station_robot2 = auto_charge_station_robot2
        self._auto_charge_station_robot3 = auto_charge_station_robot3
        self._auto_community = auto_community
        self._auto_docked = auto_docked
        self._auto_game_piece_count = auto_game_piece_count
        self._auto_game_piece_points = auto_game_piece_points
        self._auto_mobility_points = auto_mobility_points
        self._auto_points = auto_points
        self._coop_game_piece_count = coop_game_piece_count
        self._coopertition_criteria_met = coopertition_criteria_met
        self._end_game_bridge_state = end_game_bridge_state
        self._end_game_charge_station_points = end_game_charge_station_points
        self._end_game_charge_station_robot1 = end_game_charge_station_robot1
        self._end_game_charge_station_robot2 = end_game_charge_station_robot2
        self._end_game_charge_station_robot3 = end_game_charge_station_robot3
        self._end_game_park_points = end_game_park_points
        self._extra_game_piece_count = extra_game_piece_count
        self._foul_count = foul_count
        self._foul_points = foul_points
        self._link_points = link_points
        self._links = links
        self._mobility_robot1 = mobility_robot1
        self._mobility_robot2 = mobility_robot2
        self._mobility_robot3 = mobility_robot3
        self._rp = rp
        self._sustainability_bonus_achieved = sustainability_bonus_achieved
        self._tech_foul_count = tech_foul_count
        self._teleop_community = teleop_community
        self._teleop_game_piece_count = teleop_game_piece_count
        self._teleop_game_piece_points = teleop_game_piece_points
        self._teleop_points = teleop_points
        self._total_charge_station_points = total_charge_station_points
        self._total_points = total_points

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MatchScoreBreakdown2023Alliance':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Match_Score_Breakdown_2023_Alliance of this MatchScoreBreakdown2023Alliance.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def activation_bonus_achieved(self):
        """Gets the activation_bonus_achieved of this MatchScoreBreakdown2023Alliance.


        :return: The activation_bonus_achieved of this MatchScoreBreakdown2023Alliance.
        :rtype: bool
        """
        return self._activation_bonus_achieved

    @activation_bonus_achieved.setter
    def activation_bonus_achieved(self, activation_bonus_achieved):
        """Sets the activation_bonus_achieved of this MatchScoreBreakdown2023Alliance.


        :param activation_bonus_achieved: The activation_bonus_achieved of this MatchScoreBreakdown2023Alliance.
        :type activation_bonus_achieved: bool
        """

        self._activation_bonus_achieved = activation_bonus_achieved

    @property
    def adjust_points(self):
        """Gets the adjust_points of this MatchScoreBreakdown2023Alliance.


        :return: The adjust_points of this MatchScoreBreakdown2023Alliance.
        :rtype: int
        """
        return self._adjust_points

    @adjust_points.setter
    def adjust_points(self, adjust_points):
        """Sets the adjust_points of this MatchScoreBreakdown2023Alliance.


        :param adjust_points: The adjust_points of this MatchScoreBreakdown2023Alliance.
        :type adjust_points: int
        """

        self._adjust_points = adjust_points

    @property
    def auto_bridge_state(self):
        """Gets the auto_bridge_state of this MatchScoreBreakdown2023Alliance.


        :return: The auto_bridge_state of this MatchScoreBreakdown2023Alliance.
        :rtype: str
        """
        return self._auto_bridge_state

    @auto_bridge_state.setter
    def auto_bridge_state(self, auto_bridge_state):
        """Sets the auto_bridge_state of this MatchScoreBreakdown2023Alliance.


        :param auto_bridge_state: The auto_bridge_state of this MatchScoreBreakdown2023Alliance.
        :type auto_bridge_state: str
        """
        allowed_values = ["NotLevel", "Level"]  # noqa: E501
        if auto_bridge_state not in allowed_values:
            raise ValueError(
                "Invalid value for `auto_bridge_state` ({0}), must be one of {1}"
                .format(auto_bridge_state, allowed_values)
            )

        self._auto_bridge_state = auto_bridge_state

    @property
    def auto_charge_station_points(self):
        """Gets the auto_charge_station_points of this MatchScoreBreakdown2023Alliance.


        :return: The auto_charge_station_points of this MatchScoreBreakdown2023Alliance.
        :rtype: int
        """
        return self._auto_charge_station_points

    @auto_charge_station_points.setter
    def auto_charge_station_points(self, auto_charge_station_points):
        """Sets the auto_charge_station_points of this MatchScoreBreakdown2023Alliance.


        :param auto_charge_station_points: The auto_charge_station_points of this MatchScoreBreakdown2023Alliance.
        :type auto_charge_station_points: int
        """

        self._auto_charge_station_points = auto_charge_station_points

    @property
    def auto_charge_station_robot1(self):
        """Gets the auto_charge_station_robot1 of this MatchScoreBreakdown2023Alliance.


        :return: The auto_charge_station_robot1 of this MatchScoreBreakdown2023Alliance.
        :rtype: str
        """
        return self._auto_charge_station_robot1

    @auto_charge_station_robot1.setter
    def auto_charge_station_robot1(self, auto_charge_station_robot1):
        """Sets the auto_charge_station_robot1 of this MatchScoreBreakdown2023Alliance.


        :param auto_charge_station_robot1: The auto_charge_station_robot1 of this MatchScoreBreakdown2023Alliance.
        :type auto_charge_station_robot1: str
        """
        allowed_values = ["None", "Docked"]  # noqa: E501
        if auto_charge_station_robot1 not in allowed_values:
            raise ValueError(
                "Invalid value for `auto_charge_station_robot1` ({0}), must be one of {1}"
                .format(auto_charge_station_robot1, allowed_values)
            )

        self._auto_charge_station_robot1 = auto_charge_station_robot1

    @property
    def auto_charge_station_robot2(self):
        """Gets the auto_charge_station_robot2 of this MatchScoreBreakdown2023Alliance.


        :return: The auto_charge_station_robot2 of this MatchScoreBreakdown2023Alliance.
        :rtype: str
        """
        return self._auto_charge_station_robot2

    @auto_charge_station_robot2.setter
    def auto_charge_station_robot2(self, auto_charge_station_robot2):
        """Sets the auto_charge_station_robot2 of this MatchScoreBreakdown2023Alliance.


        :param auto_charge_station_robot2: The auto_charge_station_robot2 of this MatchScoreBreakdown2023Alliance.
        :type auto_charge_station_robot2: str
        """
        allowed_values = ["None", "Docked"]  # noqa: E501
        if auto_charge_station_robot2 not in allowed_values:
            raise ValueError(
                "Invalid value for `auto_charge_station_robot2` ({0}), must be one of {1}"
                .format(auto_charge_station_robot2, allowed_values)
            )

        self._auto_charge_station_robot2 = auto_charge_station_robot2

    @property
    def auto_charge_station_robot3(self):
        """Gets the auto_charge_station_robot3 of this MatchScoreBreakdown2023Alliance.


        :return: The auto_charge_station_robot3 of this MatchScoreBreakdown2023Alliance.
        :rtype: str
        """
        return self._auto_charge_station_robot3

    @auto_charge_station_robot3.setter
    def auto_charge_station_robot3(self, auto_charge_station_robot3):
        """Sets the auto_charge_station_robot3 of this MatchScoreBreakdown2023Alliance.


        :param auto_charge_station_robot3: The auto_charge_station_robot3 of this MatchScoreBreakdown2023Alliance.
        :type auto_charge_station_robot3: str
        """
        allowed_values = ["None", "Docked"]  # noqa: E501
        if auto_charge_station_robot3 not in allowed_values:
            raise ValueError(
                "Invalid value for `auto_charge_station_robot3` ({0}), must be one of {1}"
                .format(auto_charge_station_robot3, allowed_values)
            )

        self._auto_charge_station_robot3 = auto_charge_station_robot3

    @property
    def auto_community(self):
        """Gets the auto_community of this MatchScoreBreakdown2023Alliance.


        :return: The auto_community of this MatchScoreBreakdown2023Alliance.
        :rtype: MatchScoreBreakdown2023AllianceAutoCommunity
        """
        return self._auto_community

    @auto_community.setter
    def auto_community(self, auto_community):
        """Sets the auto_community of this MatchScoreBreakdown2023Alliance.


        :param auto_community: The auto_community of this MatchScoreBreakdown2023Alliance.
        :type auto_community: MatchScoreBreakdown2023AllianceAutoCommunity
        """

        self._auto_community = auto_community

    @property
    def auto_docked(self):
        """Gets the auto_docked of this MatchScoreBreakdown2023Alliance.


        :return: The auto_docked of this MatchScoreBreakdown2023Alliance.
        :rtype: bool
        """
        return self._auto_docked

    @auto_docked.setter
    def auto_docked(self, auto_docked):
        """Sets the auto_docked of this MatchScoreBreakdown2023Alliance.


        :param auto_docked: The auto_docked of this MatchScoreBreakdown2023Alliance.
        :type auto_docked: bool
        """

        self._auto_docked = auto_docked

    @property
    def auto_game_piece_count(self):
        """Gets the auto_game_piece_count of this MatchScoreBreakdown2023Alliance.


        :return: The auto_game_piece_count of this MatchScoreBreakdown2023Alliance.
        :rtype: int
        """
        return self._auto_game_piece_count

    @auto_game_piece_count.setter
    def auto_game_piece_count(self, auto_game_piece_count):
        """Sets the auto_game_piece_count of this MatchScoreBreakdown2023Alliance.


        :param auto_game_piece_count: The auto_game_piece_count of this MatchScoreBreakdown2023Alliance.
        :type auto_game_piece_count: int
        """

        self._auto_game_piece_count = auto_game_piece_count

    @property
    def auto_game_piece_points(self):
        """Gets the auto_game_piece_points of this MatchScoreBreakdown2023Alliance.


        :return: The auto_game_piece_points of this MatchScoreBreakdown2023Alliance.
        :rtype: int
        """
        return self._auto_game_piece_points

    @auto_game_piece_points.setter
    def auto_game_piece_points(self, auto_game_piece_points):
        """Sets the auto_game_piece_points of this MatchScoreBreakdown2023Alliance.


        :param auto_game_piece_points: The auto_game_piece_points of this MatchScoreBreakdown2023Alliance.
        :type auto_game_piece_points: int
        """

        self._auto_game_piece_points = auto_game_piece_points

    @property
    def auto_mobility_points(self):
        """Gets the auto_mobility_points of this MatchScoreBreakdown2023Alliance.


        :return: The auto_mobility_points of this MatchScoreBreakdown2023Alliance.
        :rtype: int
        """
        return self._auto_mobility_points

    @auto_mobility_points.setter
    def auto_mobility_points(self, auto_mobility_points):
        """Sets the auto_mobility_points of this MatchScoreBreakdown2023Alliance.


        :param auto_mobility_points: The auto_mobility_points of this MatchScoreBreakdown2023Alliance.
        :type auto_mobility_points: int
        """

        self._auto_mobility_points = auto_mobility_points

    @property
    def auto_points(self):
        """Gets the auto_points of this MatchScoreBreakdown2023Alliance.


        :return: The auto_points of this MatchScoreBreakdown2023Alliance.
        :rtype: int
        """
        return self._auto_points

    @auto_points.setter
    def auto_points(self, auto_points):
        """Sets the auto_points of this MatchScoreBreakdown2023Alliance.


        :param auto_points: The auto_points of this MatchScoreBreakdown2023Alliance.
        :type auto_points: int
        """

        self._auto_points = auto_points

    @property
    def coop_game_piece_count(self):
        """Gets the coop_game_piece_count of this MatchScoreBreakdown2023Alliance.


        :return: The coop_game_piece_count of this MatchScoreBreakdown2023Alliance.
        :rtype: int
        """
        return self._coop_game_piece_count

    @coop_game_piece_count.setter
    def coop_game_piece_count(self, coop_game_piece_count):
        """Sets the coop_game_piece_count of this MatchScoreBreakdown2023Alliance.


        :param coop_game_piece_count: The coop_game_piece_count of this MatchScoreBreakdown2023Alliance.
        :type coop_game_piece_count: int
        """

        self._coop_game_piece_count = coop_game_piece_count

    @property
    def coopertition_criteria_met(self):
        """Gets the coopertition_criteria_met of this MatchScoreBreakdown2023Alliance.


        :return: The coopertition_criteria_met of this MatchScoreBreakdown2023Alliance.
        :rtype: bool
        """
        return self._coopertition_criteria_met

    @coopertition_criteria_met.setter
    def coopertition_criteria_met(self, coopertition_criteria_met):
        """Sets the coopertition_criteria_met of this MatchScoreBreakdown2023Alliance.


        :param coopertition_criteria_met: The coopertition_criteria_met of this MatchScoreBreakdown2023Alliance.
        :type coopertition_criteria_met: bool
        """

        self._coopertition_criteria_met = coopertition_criteria_met

    @property
    def end_game_bridge_state(self):
        """Gets the end_game_bridge_state of this MatchScoreBreakdown2023Alliance.


        :return: The end_game_bridge_state of this MatchScoreBreakdown2023Alliance.
        :rtype: str
        """
        return self._end_game_bridge_state

    @end_game_bridge_state.setter
    def end_game_bridge_state(self, end_game_bridge_state):
        """Sets the end_game_bridge_state of this MatchScoreBreakdown2023Alliance.


        :param end_game_bridge_state: The end_game_bridge_state of this MatchScoreBreakdown2023Alliance.
        :type end_game_bridge_state: str
        """
        allowed_values = ["NotLevel", "Level"]  # noqa: E501
        if end_game_bridge_state not in allowed_values:
            raise ValueError(
                "Invalid value for `end_game_bridge_state` ({0}), must be one of {1}"
                .format(end_game_bridge_state, allowed_values)
            )

        self._end_game_bridge_state = end_game_bridge_state

    @property
    def end_game_charge_station_points(self):
        """Gets the end_game_charge_station_points of this MatchScoreBreakdown2023Alliance.


        :return: The end_game_charge_station_points of this MatchScoreBreakdown2023Alliance.
        :rtype: int
        """
        return self._end_game_charge_station_points

    @end_game_charge_station_points.setter
    def end_game_charge_station_points(self, end_game_charge_station_points):
        """Sets the end_game_charge_station_points of this MatchScoreBreakdown2023Alliance.


        :param end_game_charge_station_points: The end_game_charge_station_points of this MatchScoreBreakdown2023Alliance.
        :type end_game_charge_station_points: int
        """

        self._end_game_charge_station_points = end_game_charge_station_points

    @property
    def end_game_charge_station_robot1(self):
        """Gets the end_game_charge_station_robot1 of this MatchScoreBreakdown2023Alliance.


        :return: The end_game_charge_station_robot1 of this MatchScoreBreakdown2023Alliance.
        :rtype: str
        """
        return self._end_game_charge_station_robot1

    @end_game_charge_station_robot1.setter
    def end_game_charge_station_robot1(self, end_game_charge_station_robot1):
        """Sets the end_game_charge_station_robot1 of this MatchScoreBreakdown2023Alliance.


        :param end_game_charge_station_robot1: The end_game_charge_station_robot1 of this MatchScoreBreakdown2023Alliance.
        :type end_game_charge_station_robot1: str
        """
        allowed_values = ["None", "Docked"]  # noqa: E501
        if end_game_charge_station_robot1 not in allowed_values:
            raise ValueError(
                "Invalid value for `end_game_charge_station_robot1` ({0}), must be one of {1}"
                .format(end_game_charge_station_robot1, allowed_values)
            )

        self._end_game_charge_station_robot1 = end_game_charge_station_robot1

    @property
    def end_game_charge_station_robot2(self):
        """Gets the end_game_charge_station_robot2 of this MatchScoreBreakdown2023Alliance.


        :return: The end_game_charge_station_robot2 of this MatchScoreBreakdown2023Alliance.
        :rtype: str
        """
        return self._end_game_charge_station_robot2

    @end_game_charge_station_robot2.setter
    def end_game_charge_station_robot2(self, end_game_charge_station_robot2):
        """Sets the end_game_charge_station_robot2 of this MatchScoreBreakdown2023Alliance.


        :param end_game_charge_station_robot2: The end_game_charge_station_robot2 of this MatchScoreBreakdown2023Alliance.
        :type end_game_charge_station_robot2: str
        """
        allowed_values = ["None", "Docked"]  # noqa: E501
        if end_game_charge_station_robot2 not in allowed_values:
            raise ValueError(
                "Invalid value for `end_game_charge_station_robot2` ({0}), must be one of {1}"
                .format(end_game_charge_station_robot2, allowed_values)
            )

        self._end_game_charge_station_robot2 = end_game_charge_station_robot2

    @property
    def end_game_charge_station_robot3(self):
        """Gets the end_game_charge_station_robot3 of this MatchScoreBreakdown2023Alliance.


        :return: The end_game_charge_station_robot3 of this MatchScoreBreakdown2023Alliance.
        :rtype: str
        """
        return self._end_game_charge_station_robot3

    @end_game_charge_station_robot3.setter
    def end_game_charge_station_robot3(self, end_game_charge_station_robot3):
        """Sets the end_game_charge_station_robot3 of this MatchScoreBreakdown2023Alliance.


        :param end_game_charge_station_robot3: The end_game_charge_station_robot3 of this MatchScoreBreakdown2023Alliance.
        :type end_game_charge_station_robot3: str
        """
        allowed_values = ["None", "Docked"]  # noqa: E501
        if end_game_charge_station_robot3 not in allowed_values:
            raise ValueError(
                "Invalid value for `end_game_charge_station_robot3` ({0}), must be one of {1}"
                .format(end_game_charge_station_robot3, allowed_values)
            )

        self._end_game_charge_station_robot3 = end_game_charge_station_robot3

    @property
    def end_game_park_points(self):
        """Gets the end_game_park_points of this MatchScoreBreakdown2023Alliance.


        :return: The end_game_park_points of this MatchScoreBreakdown2023Alliance.
        :rtype: int
        """
        return self._end_game_park_points

    @end_game_park_points.setter
    def end_game_park_points(self, end_game_park_points):
        """Sets the end_game_park_points of this MatchScoreBreakdown2023Alliance.


        :param end_game_park_points: The end_game_park_points of this MatchScoreBreakdown2023Alliance.
        :type end_game_park_points: int
        """

        self._end_game_park_points = end_game_park_points

    @property
    def extra_game_piece_count(self):
        """Gets the extra_game_piece_count of this MatchScoreBreakdown2023Alliance.


        :return: The extra_game_piece_count of this MatchScoreBreakdown2023Alliance.
        :rtype: int
        """
        return self._extra_game_piece_count

    @extra_game_piece_count.setter
    def extra_game_piece_count(self, extra_game_piece_count):
        """Sets the extra_game_piece_count of this MatchScoreBreakdown2023Alliance.


        :param extra_game_piece_count: The extra_game_piece_count of this MatchScoreBreakdown2023Alliance.
        :type extra_game_piece_count: int
        """

        self._extra_game_piece_count = extra_game_piece_count

    @property
    def foul_count(self):
        """Gets the foul_count of this MatchScoreBreakdown2023Alliance.


        :return: The foul_count of this MatchScoreBreakdown2023Alliance.
        :rtype: int
        """
        return self._foul_count

    @foul_count.setter
    def foul_count(self, foul_count):
        """Sets the foul_count of this MatchScoreBreakdown2023Alliance.


        :param foul_count: The foul_count of this MatchScoreBreakdown2023Alliance.
        :type foul_count: int
        """

        self._foul_count = foul_count

    @property
    def foul_points(self):
        """Gets the foul_points of this MatchScoreBreakdown2023Alliance.


        :return: The foul_points of this MatchScoreBreakdown2023Alliance.
        :rtype: int
        """
        return self._foul_points

    @foul_points.setter
    def foul_points(self, foul_points):
        """Sets the foul_points of this MatchScoreBreakdown2023Alliance.


        :param foul_points: The foul_points of this MatchScoreBreakdown2023Alliance.
        :type foul_points: int
        """

        self._foul_points = foul_points

    @property
    def link_points(self):
        """Gets the link_points of this MatchScoreBreakdown2023Alliance.


        :return: The link_points of this MatchScoreBreakdown2023Alliance.
        :rtype: int
        """
        return self._link_points

    @link_points.setter
    def link_points(self, link_points):
        """Sets the link_points of this MatchScoreBreakdown2023Alliance.


        :param link_points: The link_points of this MatchScoreBreakdown2023Alliance.
        :type link_points: int
        """

        self._link_points = link_points

    @property
    def links(self):
        """Gets the links of this MatchScoreBreakdown2023Alliance.


        :return: The links of this MatchScoreBreakdown2023Alliance.
        :rtype: List[MatchScoreBreakdown2023AllianceLinksInner]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this MatchScoreBreakdown2023Alliance.


        :param links: The links of this MatchScoreBreakdown2023Alliance.
        :type links: List[MatchScoreBreakdown2023AllianceLinksInner]
        """

        self._links = links

    @property
    def mobility_robot1(self):
        """Gets the mobility_robot1 of this MatchScoreBreakdown2023Alliance.


        :return: The mobility_robot1 of this MatchScoreBreakdown2023Alliance.
        :rtype: str
        """
        return self._mobility_robot1

    @mobility_robot1.setter
    def mobility_robot1(self, mobility_robot1):
        """Sets the mobility_robot1 of this MatchScoreBreakdown2023Alliance.


        :param mobility_robot1: The mobility_robot1 of this MatchScoreBreakdown2023Alliance.
        :type mobility_robot1: str
        """
        allowed_values = ["true", "false"]  # noqa: E501
        if mobility_robot1 not in allowed_values:
            raise ValueError(
                "Invalid value for `mobility_robot1` ({0}), must be one of {1}"
                .format(mobility_robot1, allowed_values)
            )

        self._mobility_robot1 = mobility_robot1

    @property
    def mobility_robot2(self):
        """Gets the mobility_robot2 of this MatchScoreBreakdown2023Alliance.


        :return: The mobility_robot2 of this MatchScoreBreakdown2023Alliance.
        :rtype: str
        """
        return self._mobility_robot2

    @mobility_robot2.setter
    def mobility_robot2(self, mobility_robot2):
        """Sets the mobility_robot2 of this MatchScoreBreakdown2023Alliance.


        :param mobility_robot2: The mobility_robot2 of this MatchScoreBreakdown2023Alliance.
        :type mobility_robot2: str
        """
        allowed_values = ["true", "false"]  # noqa: E501
        if mobility_robot2 not in allowed_values:
            raise ValueError(
                "Invalid value for `mobility_robot2` ({0}), must be one of {1}"
                .format(mobility_robot2, allowed_values)
            )

        self._mobility_robot2 = mobility_robot2

    @property
    def mobility_robot3(self):
        """Gets the mobility_robot3 of this MatchScoreBreakdown2023Alliance.


        :return: The mobility_robot3 of this MatchScoreBreakdown2023Alliance.
        :rtype: str
        """
        return self._mobility_robot3

    @mobility_robot3.setter
    def mobility_robot3(self, mobility_robot3):
        """Sets the mobility_robot3 of this MatchScoreBreakdown2023Alliance.


        :param mobility_robot3: The mobility_robot3 of this MatchScoreBreakdown2023Alliance.
        :type mobility_robot3: str
        """
        allowed_values = ["true", "false"]  # noqa: E501
        if mobility_robot3 not in allowed_values:
            raise ValueError(
                "Invalid value for `mobility_robot3` ({0}), must be one of {1}"
                .format(mobility_robot3, allowed_values)
            )

        self._mobility_robot3 = mobility_robot3

    @property
    def rp(self):
        """Gets the rp of this MatchScoreBreakdown2023Alliance.


        :return: The rp of this MatchScoreBreakdown2023Alliance.
        :rtype: int
        """
        return self._rp

    @rp.setter
    def rp(self, rp):
        """Sets the rp of this MatchScoreBreakdown2023Alliance.


        :param rp: The rp of this MatchScoreBreakdown2023Alliance.
        :type rp: int
        """

        self._rp = rp

    @property
    def sustainability_bonus_achieved(self):
        """Gets the sustainability_bonus_achieved of this MatchScoreBreakdown2023Alliance.


        :return: The sustainability_bonus_achieved of this MatchScoreBreakdown2023Alliance.
        :rtype: bool
        """
        return self._sustainability_bonus_achieved

    @sustainability_bonus_achieved.setter
    def sustainability_bonus_achieved(self, sustainability_bonus_achieved):
        """Sets the sustainability_bonus_achieved of this MatchScoreBreakdown2023Alliance.


        :param sustainability_bonus_achieved: The sustainability_bonus_achieved of this MatchScoreBreakdown2023Alliance.
        :type sustainability_bonus_achieved: bool
        """

        self._sustainability_bonus_achieved = sustainability_bonus_achieved

    @property
    def tech_foul_count(self):
        """Gets the tech_foul_count of this MatchScoreBreakdown2023Alliance.


        :return: The tech_foul_count of this MatchScoreBreakdown2023Alliance.
        :rtype: int
        """
        return self._tech_foul_count

    @tech_foul_count.setter
    def tech_foul_count(self, tech_foul_count):
        """Sets the tech_foul_count of this MatchScoreBreakdown2023Alliance.


        :param tech_foul_count: The tech_foul_count of this MatchScoreBreakdown2023Alliance.
        :type tech_foul_count: int
        """

        self._tech_foul_count = tech_foul_count

    @property
    def teleop_community(self):
        """Gets the teleop_community of this MatchScoreBreakdown2023Alliance.


        :return: The teleop_community of this MatchScoreBreakdown2023Alliance.
        :rtype: MatchScoreBreakdown2023AllianceAutoCommunity
        """
        return self._teleop_community

    @teleop_community.setter
    def teleop_community(self, teleop_community):
        """Sets the teleop_community of this MatchScoreBreakdown2023Alliance.


        :param teleop_community: The teleop_community of this MatchScoreBreakdown2023Alliance.
        :type teleop_community: MatchScoreBreakdown2023AllianceAutoCommunity
        """

        self._teleop_community = teleop_community

    @property
    def teleop_game_piece_count(self):
        """Gets the teleop_game_piece_count of this MatchScoreBreakdown2023Alliance.


        :return: The teleop_game_piece_count of this MatchScoreBreakdown2023Alliance.
        :rtype: int
        """
        return self._teleop_game_piece_count

    @teleop_game_piece_count.setter
    def teleop_game_piece_count(self, teleop_game_piece_count):
        """Sets the teleop_game_piece_count of this MatchScoreBreakdown2023Alliance.


        :param teleop_game_piece_count: The teleop_game_piece_count of this MatchScoreBreakdown2023Alliance.
        :type teleop_game_piece_count: int
        """

        self._teleop_game_piece_count = teleop_game_piece_count

    @property
    def teleop_game_piece_points(self):
        """Gets the teleop_game_piece_points of this MatchScoreBreakdown2023Alliance.


        :return: The teleop_game_piece_points of this MatchScoreBreakdown2023Alliance.
        :rtype: int
        """
        return self._teleop_game_piece_points

    @teleop_game_piece_points.setter
    def teleop_game_piece_points(self, teleop_game_piece_points):
        """Sets the teleop_game_piece_points of this MatchScoreBreakdown2023Alliance.


        :param teleop_game_piece_points: The teleop_game_piece_points of this MatchScoreBreakdown2023Alliance.
        :type teleop_game_piece_points: int
        """

        self._teleop_game_piece_points = teleop_game_piece_points

    @property
    def teleop_points(self):
        """Gets the teleop_points of this MatchScoreBreakdown2023Alliance.


        :return: The teleop_points of this MatchScoreBreakdown2023Alliance.
        :rtype: int
        """
        return self._teleop_points

    @teleop_points.setter
    def teleop_points(self, teleop_points):
        """Sets the teleop_points of this MatchScoreBreakdown2023Alliance.


        :param teleop_points: The teleop_points of this MatchScoreBreakdown2023Alliance.
        :type teleop_points: int
        """

        self._teleop_points = teleop_points

    @property
    def total_charge_station_points(self):
        """Gets the total_charge_station_points of this MatchScoreBreakdown2023Alliance.


        :return: The total_charge_station_points of this MatchScoreBreakdown2023Alliance.
        :rtype: int
        """
        return self._total_charge_station_points

    @total_charge_station_points.setter
    def total_charge_station_points(self, total_charge_station_points):
        """Sets the total_charge_station_points of this MatchScoreBreakdown2023Alliance.


        :param total_charge_station_points: The total_charge_station_points of this MatchScoreBreakdown2023Alliance.
        :type total_charge_station_points: int
        """

        self._total_charge_station_points = total_charge_station_points

    @property
    def total_points(self):
        """Gets the total_points of this MatchScoreBreakdown2023Alliance.


        :return: The total_points of this MatchScoreBreakdown2023Alliance.
        :rtype: int
        """
        return self._total_points

    @total_points.setter
    def total_points(self, total_points):
        """Sets the total_points of this MatchScoreBreakdown2023Alliance.


        :param total_points: The total_points of this MatchScoreBreakdown2023Alliance.
        :type total_points: int
        """

        self._total_points = total_points
