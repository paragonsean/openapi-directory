# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.zebra_alliances import ZebraAlliances
from openapi_server import util


class Zebra(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, alliances: ZebraAlliances=None, key: str=None, times: List[float]=None):
        """Zebra - a model defined in OpenAPI

        :param alliances: The alliances of this Zebra.
        :param key: The key of this Zebra.
        :param times: The times of this Zebra.
        """
        self.openapi_types = {
            'alliances': ZebraAlliances,
            'key': str,
            'times': List[float]
        }

        self.attribute_map = {
            'alliances': 'alliances',
            'key': 'key',
            'times': 'times'
        }

        self._alliances = alliances
        self._key = key
        self._times = times

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Zebra':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Zebra of this Zebra.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def alliances(self):
        """Gets the alliances of this Zebra.


        :return: The alliances of this Zebra.
        :rtype: ZebraAlliances
        """
        return self._alliances

    @alliances.setter
    def alliances(self, alliances):
        """Sets the alliances of this Zebra.


        :param alliances: The alliances of this Zebra.
        :type alliances: ZebraAlliances
        """
        if alliances is None:
            raise ValueError("Invalid value for `alliances`, must not be `None`")

        self._alliances = alliances

    @property
    def key(self):
        """Gets the key of this Zebra.

        TBA match key with the format `yyyy[EVENT_CODE]_[COMP_LEVEL]m[MATCH_NUMBER]`, where `yyyy` is the year, and `EVENT_CODE` is the event code of the event, `COMP_LEVEL` is (qm, ef, qf, sf, f), and `MATCH_NUMBER` is the match number in the competition level. A set number may be appended to the competition level if more than one match in required per set.

        :return: The key of this Zebra.
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this Zebra.

        TBA match key with the format `yyyy[EVENT_CODE]_[COMP_LEVEL]m[MATCH_NUMBER]`, where `yyyy` is the year, and `EVENT_CODE` is the event code of the event, `COMP_LEVEL` is (qm, ef, qf, sf, f), and `MATCH_NUMBER` is the match number in the competition level. A set number may be appended to the competition level if more than one match in required per set.

        :param key: The key of this Zebra.
        :type key: str
        """
        if key is None:
            raise ValueError("Invalid value for `key`, must not be `None`")

        self._key = key

    @property
    def times(self):
        """Gets the times of this Zebra.

        A list of relative timestamps for each data point. Each timestamp will correspond to the X and Y value at the same index in a team xs and ys arrays. `times`, all teams `xs` and all teams `ys` are guarenteed to be the same length.

        :return: The times of this Zebra.
        :rtype: List[float]
        """
        return self._times

    @times.setter
    def times(self, times):
        """Sets the times of this Zebra.

        A list of relative timestamps for each data point. Each timestamp will correspond to the X and Y value at the same index in a team xs and ys arrays. `times`, all teams `xs` and all teams `ys` are guarenteed to be the same length.

        :param times: The times of this Zebra.
        :type times: List[float]
        """
        if times is None:
            raise ValueError("Invalid value for `times`, must not be `None`")

        self._times = times
