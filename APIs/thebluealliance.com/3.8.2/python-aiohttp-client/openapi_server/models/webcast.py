# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Webcast(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, channel: str=None, _date: str=None, file: str=None, type: str=None):
        """Webcast - a model defined in OpenAPI

        :param channel: The channel of this Webcast.
        :param _date: The _date of this Webcast.
        :param file: The file of this Webcast.
        :param type: The type of this Webcast.
        """
        self.openapi_types = {
            'channel': str,
            '_date': str,
            'file': str,
            'type': str
        }

        self.attribute_map = {
            'channel': 'channel',
            '_date': 'date',
            'file': 'file',
            'type': 'type'
        }

        self._channel = channel
        self.__date = _date
        self._file = file
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Webcast':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Webcast of this Webcast.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def channel(self):
        """Gets the channel of this Webcast.

        Type specific channel information. May be the YouTube stream, or Twitch channel name. In the case of iframe types, contains HTML to embed the stream in an HTML iframe.

        :return: The channel of this Webcast.
        :rtype: str
        """
        return self._channel

    @channel.setter
    def channel(self, channel):
        """Sets the channel of this Webcast.

        Type specific channel information. May be the YouTube stream, or Twitch channel name. In the case of iframe types, contains HTML to embed the stream in an HTML iframe.

        :param channel: The channel of this Webcast.
        :type channel: str
        """
        if channel is None:
            raise ValueError("Invalid value for `channel`, must not be `None`")

        self._channel = channel

    @property
    def _date(self):
        """Gets the _date of this Webcast.

        The date for the webcast in `yyyy-mm-dd` format. May be null.

        :return: The _date of this Webcast.
        :rtype: str
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this Webcast.

        The date for the webcast in `yyyy-mm-dd` format. May be null.

        :param _date: The _date of this Webcast.
        :type _date: str
        """

        self.__date = _date

    @property
    def file(self):
        """Gets the file of this Webcast.

        File identification as may be required for some types. May be null.

        :return: The file of this Webcast.
        :rtype: str
        """
        return self._file

    @file.setter
    def file(self, file):
        """Sets the file of this Webcast.

        File identification as may be required for some types. May be null.

        :param file: The file of this Webcast.
        :type file: str
        """

        self._file = file

    @property
    def type(self):
        """Gets the type of this Webcast.

        Type of webcast, typically descriptive of the streaming provider.

        :return: The type of this Webcast.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Webcast.

        Type of webcast, typically descriptive of the streaming provider.

        :param type: The type of this Webcast.
        :type type: str
        """
        allowed_values = ["youtube", "twitch", "ustream", "iframe", "html5", "rtmp", "livestream", "direct_link", "mms", "justin", "stemtv", "dacast"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
