# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class EventInsights2016(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, a_cheval_de_frise: List[float]=None, a_portcullis: List[float]=None, b_moat: List[float]=None, b_ramparts: List[float]=None, c_drawbridge: List[float]=None, c_sally_port: List[float]=None, d_rock_wall: List[float]=None, d_rough_terrain: List[float]=None, low_bar: List[float]=None, average_auto_score: float=None, average_boulder_score: float=None, average_crossing_score: float=None, average_foul_score: float=None, average_high_goals: float=None, average_low_goals: float=None, average_score: float=None, average_tower_score: float=None, average_win_margin: float=None, average_win_score: float=None, breaches: List[float]=None, captures: List[float]=None, challenges: List[float]=None, high_score: List[str]=None, scales: List[float]=None):
        """EventInsights2016 - a model defined in OpenAPI

        :param a_cheval_de_frise: The a_cheval_de_frise of this EventInsights2016.
        :param a_portcullis: The a_portcullis of this EventInsights2016.
        :param b_moat: The b_moat of this EventInsights2016.
        :param b_ramparts: The b_ramparts of this EventInsights2016.
        :param c_drawbridge: The c_drawbridge of this EventInsights2016.
        :param c_sally_port: The c_sally_port of this EventInsights2016.
        :param d_rock_wall: The d_rock_wall of this EventInsights2016.
        :param d_rough_terrain: The d_rough_terrain of this EventInsights2016.
        :param low_bar: The low_bar of this EventInsights2016.
        :param average_auto_score: The average_auto_score of this EventInsights2016.
        :param average_boulder_score: The average_boulder_score of this EventInsights2016.
        :param average_crossing_score: The average_crossing_score of this EventInsights2016.
        :param average_foul_score: The average_foul_score of this EventInsights2016.
        :param average_high_goals: The average_high_goals of this EventInsights2016.
        :param average_low_goals: The average_low_goals of this EventInsights2016.
        :param average_score: The average_score of this EventInsights2016.
        :param average_tower_score: The average_tower_score of this EventInsights2016.
        :param average_win_margin: The average_win_margin of this EventInsights2016.
        :param average_win_score: The average_win_score of this EventInsights2016.
        :param breaches: The breaches of this EventInsights2016.
        :param captures: The captures of this EventInsights2016.
        :param challenges: The challenges of this EventInsights2016.
        :param high_score: The high_score of this EventInsights2016.
        :param scales: The scales of this EventInsights2016.
        """
        self.openapi_types = {
            'a_cheval_de_frise': List[float],
            'a_portcullis': List[float],
            'b_moat': List[float],
            'b_ramparts': List[float],
            'c_drawbridge': List[float],
            'c_sally_port': List[float],
            'd_rock_wall': List[float],
            'd_rough_terrain': List[float],
            'low_bar': List[float],
            'average_auto_score': float,
            'average_boulder_score': float,
            'average_crossing_score': float,
            'average_foul_score': float,
            'average_high_goals': float,
            'average_low_goals': float,
            'average_score': float,
            'average_tower_score': float,
            'average_win_margin': float,
            'average_win_score': float,
            'breaches': List[float],
            'captures': List[float],
            'challenges': List[float],
            'high_score': List[str],
            'scales': List[float]
        }

        self.attribute_map = {
            'a_cheval_de_frise': 'A_ChevalDeFrise',
            'a_portcullis': 'A_Portcullis',
            'b_moat': 'B_Moat',
            'b_ramparts': 'B_Ramparts',
            'c_drawbridge': 'C_Drawbridge',
            'c_sally_port': 'C_SallyPort',
            'd_rock_wall': 'D_RockWall',
            'd_rough_terrain': 'D_RoughTerrain',
            'low_bar': 'LowBar',
            'average_auto_score': 'average_auto_score',
            'average_boulder_score': 'average_boulder_score',
            'average_crossing_score': 'average_crossing_score',
            'average_foul_score': 'average_foul_score',
            'average_high_goals': 'average_high_goals',
            'average_low_goals': 'average_low_goals',
            'average_score': 'average_score',
            'average_tower_score': 'average_tower_score',
            'average_win_margin': 'average_win_margin',
            'average_win_score': 'average_win_score',
            'breaches': 'breaches',
            'captures': 'captures',
            'challenges': 'challenges',
            'high_score': 'high_score',
            'scales': 'scales'
        }

        self._a_cheval_de_frise = a_cheval_de_frise
        self._a_portcullis = a_portcullis
        self._b_moat = b_moat
        self._b_ramparts = b_ramparts
        self._c_drawbridge = c_drawbridge
        self._c_sally_port = c_sally_port
        self._d_rock_wall = d_rock_wall
        self._d_rough_terrain = d_rough_terrain
        self._low_bar = low_bar
        self._average_auto_score = average_auto_score
        self._average_boulder_score = average_boulder_score
        self._average_crossing_score = average_crossing_score
        self._average_foul_score = average_foul_score
        self._average_high_goals = average_high_goals
        self._average_low_goals = average_low_goals
        self._average_score = average_score
        self._average_tower_score = average_tower_score
        self._average_win_margin = average_win_margin
        self._average_win_score = average_win_score
        self._breaches = breaches
        self._captures = captures
        self._challenges = challenges
        self._high_score = high_score
        self._scales = scales

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EventInsights2016':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Event_Insights_2016 of this EventInsights2016.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def a_cheval_de_frise(self):
        """Gets the a_cheval_de_frise of this EventInsights2016.

        For the Cheval De Frise - An array with three values, number of times damaged, number of opportunities to damage, and percentage.

        :return: The a_cheval_de_frise of this EventInsights2016.
        :rtype: List[float]
        """
        return self._a_cheval_de_frise

    @a_cheval_de_frise.setter
    def a_cheval_de_frise(self, a_cheval_de_frise):
        """Sets the a_cheval_de_frise of this EventInsights2016.

        For the Cheval De Frise - An array with three values, number of times damaged, number of opportunities to damage, and percentage.

        :param a_cheval_de_frise: The a_cheval_de_frise of this EventInsights2016.
        :type a_cheval_de_frise: List[float]
        """
        if a_cheval_de_frise is None:
            raise ValueError("Invalid value for `a_cheval_de_frise`, must not be `None`")

        self._a_cheval_de_frise = a_cheval_de_frise

    @property
    def a_portcullis(self):
        """Gets the a_portcullis of this EventInsights2016.

        For the Portcullis - An array with three values, number of times damaged, number of opportunities to damage, and percentage.

        :return: The a_portcullis of this EventInsights2016.
        :rtype: List[float]
        """
        return self._a_portcullis

    @a_portcullis.setter
    def a_portcullis(self, a_portcullis):
        """Sets the a_portcullis of this EventInsights2016.

        For the Portcullis - An array with three values, number of times damaged, number of opportunities to damage, and percentage.

        :param a_portcullis: The a_portcullis of this EventInsights2016.
        :type a_portcullis: List[float]
        """
        if a_portcullis is None:
            raise ValueError("Invalid value for `a_portcullis`, must not be `None`")

        self._a_portcullis = a_portcullis

    @property
    def b_moat(self):
        """Gets the b_moat of this EventInsights2016.

        For the Moat - An array with three values, number of times damaged, number of opportunities to damage, and percentage.

        :return: The b_moat of this EventInsights2016.
        :rtype: List[float]
        """
        return self._b_moat

    @b_moat.setter
    def b_moat(self, b_moat):
        """Sets the b_moat of this EventInsights2016.

        For the Moat - An array with three values, number of times damaged, number of opportunities to damage, and percentage.

        :param b_moat: The b_moat of this EventInsights2016.
        :type b_moat: List[float]
        """
        if b_moat is None:
            raise ValueError("Invalid value for `b_moat`, must not be `None`")

        self._b_moat = b_moat

    @property
    def b_ramparts(self):
        """Gets the b_ramparts of this EventInsights2016.

        For the Ramparts - An array with three values, number of times damaged, number of opportunities to damage, and percentage.

        :return: The b_ramparts of this EventInsights2016.
        :rtype: List[float]
        """
        return self._b_ramparts

    @b_ramparts.setter
    def b_ramparts(self, b_ramparts):
        """Sets the b_ramparts of this EventInsights2016.

        For the Ramparts - An array with three values, number of times damaged, number of opportunities to damage, and percentage.

        :param b_ramparts: The b_ramparts of this EventInsights2016.
        :type b_ramparts: List[float]
        """
        if b_ramparts is None:
            raise ValueError("Invalid value for `b_ramparts`, must not be `None`")

        self._b_ramparts = b_ramparts

    @property
    def c_drawbridge(self):
        """Gets the c_drawbridge of this EventInsights2016.

        For the Drawbridge - An array with three values, number of times damaged, number of opportunities to damage, and percentage.

        :return: The c_drawbridge of this EventInsights2016.
        :rtype: List[float]
        """
        return self._c_drawbridge

    @c_drawbridge.setter
    def c_drawbridge(self, c_drawbridge):
        """Sets the c_drawbridge of this EventInsights2016.

        For the Drawbridge - An array with three values, number of times damaged, number of opportunities to damage, and percentage.

        :param c_drawbridge: The c_drawbridge of this EventInsights2016.
        :type c_drawbridge: List[float]
        """
        if c_drawbridge is None:
            raise ValueError("Invalid value for `c_drawbridge`, must not be `None`")

        self._c_drawbridge = c_drawbridge

    @property
    def c_sally_port(self):
        """Gets the c_sally_port of this EventInsights2016.

        For the Sally Port - An array with three values, number of times damaged, number of opportunities to damage, and percentage.

        :return: The c_sally_port of this EventInsights2016.
        :rtype: List[float]
        """
        return self._c_sally_port

    @c_sally_port.setter
    def c_sally_port(self, c_sally_port):
        """Sets the c_sally_port of this EventInsights2016.

        For the Sally Port - An array with three values, number of times damaged, number of opportunities to damage, and percentage.

        :param c_sally_port: The c_sally_port of this EventInsights2016.
        :type c_sally_port: List[float]
        """
        if c_sally_port is None:
            raise ValueError("Invalid value for `c_sally_port`, must not be `None`")

        self._c_sally_port = c_sally_port

    @property
    def d_rock_wall(self):
        """Gets the d_rock_wall of this EventInsights2016.

        For the Rock Wall - An array with three values, number of times damaged, number of opportunities to damage, and percentage.

        :return: The d_rock_wall of this EventInsights2016.
        :rtype: List[float]
        """
        return self._d_rock_wall

    @d_rock_wall.setter
    def d_rock_wall(self, d_rock_wall):
        """Sets the d_rock_wall of this EventInsights2016.

        For the Rock Wall - An array with three values, number of times damaged, number of opportunities to damage, and percentage.

        :param d_rock_wall: The d_rock_wall of this EventInsights2016.
        :type d_rock_wall: List[float]
        """
        if d_rock_wall is None:
            raise ValueError("Invalid value for `d_rock_wall`, must not be `None`")

        self._d_rock_wall = d_rock_wall

    @property
    def d_rough_terrain(self):
        """Gets the d_rough_terrain of this EventInsights2016.

        For the Rough Terrain - An array with three values, number of times damaged, number of opportunities to damage, and percentage.

        :return: The d_rough_terrain of this EventInsights2016.
        :rtype: List[float]
        """
        return self._d_rough_terrain

    @d_rough_terrain.setter
    def d_rough_terrain(self, d_rough_terrain):
        """Sets the d_rough_terrain of this EventInsights2016.

        For the Rough Terrain - An array with three values, number of times damaged, number of opportunities to damage, and percentage.

        :param d_rough_terrain: The d_rough_terrain of this EventInsights2016.
        :type d_rough_terrain: List[float]
        """
        if d_rough_terrain is None:
            raise ValueError("Invalid value for `d_rough_terrain`, must not be `None`")

        self._d_rough_terrain = d_rough_terrain

    @property
    def low_bar(self):
        """Gets the low_bar of this EventInsights2016.

        For the Low Bar - An array with three values, number of times damaged, number of opportunities to damage, and percentage.

        :return: The low_bar of this EventInsights2016.
        :rtype: List[float]
        """
        return self._low_bar

    @low_bar.setter
    def low_bar(self, low_bar):
        """Sets the low_bar of this EventInsights2016.

        For the Low Bar - An array with three values, number of times damaged, number of opportunities to damage, and percentage.

        :param low_bar: The low_bar of this EventInsights2016.
        :type low_bar: List[float]
        """
        if low_bar is None:
            raise ValueError("Invalid value for `low_bar`, must not be `None`")

        self._low_bar = low_bar

    @property
    def average_auto_score(self):
        """Gets the average_auto_score of this EventInsights2016.

        Average autonomous score.

        :return: The average_auto_score of this EventInsights2016.
        :rtype: float
        """
        return self._average_auto_score

    @average_auto_score.setter
    def average_auto_score(self, average_auto_score):
        """Sets the average_auto_score of this EventInsights2016.

        Average autonomous score.

        :param average_auto_score: The average_auto_score of this EventInsights2016.
        :type average_auto_score: float
        """
        if average_auto_score is None:
            raise ValueError("Invalid value for `average_auto_score`, must not be `None`")

        self._average_auto_score = average_auto_score

    @property
    def average_boulder_score(self):
        """Gets the average_boulder_score of this EventInsights2016.

        Average boulder score.

        :return: The average_boulder_score of this EventInsights2016.
        :rtype: float
        """
        return self._average_boulder_score

    @average_boulder_score.setter
    def average_boulder_score(self, average_boulder_score):
        """Sets the average_boulder_score of this EventInsights2016.

        Average boulder score.

        :param average_boulder_score: The average_boulder_score of this EventInsights2016.
        :type average_boulder_score: float
        """
        if average_boulder_score is None:
            raise ValueError("Invalid value for `average_boulder_score`, must not be `None`")

        self._average_boulder_score = average_boulder_score

    @property
    def average_crossing_score(self):
        """Gets the average_crossing_score of this EventInsights2016.

        Average crossing score.

        :return: The average_crossing_score of this EventInsights2016.
        :rtype: float
        """
        return self._average_crossing_score

    @average_crossing_score.setter
    def average_crossing_score(self, average_crossing_score):
        """Sets the average_crossing_score of this EventInsights2016.

        Average crossing score.

        :param average_crossing_score: The average_crossing_score of this EventInsights2016.
        :type average_crossing_score: float
        """
        if average_crossing_score is None:
            raise ValueError("Invalid value for `average_crossing_score`, must not be `None`")

        self._average_crossing_score = average_crossing_score

    @property
    def average_foul_score(self):
        """Gets the average_foul_score of this EventInsights2016.

        Average foul score.

        :return: The average_foul_score of this EventInsights2016.
        :rtype: float
        """
        return self._average_foul_score

    @average_foul_score.setter
    def average_foul_score(self, average_foul_score):
        """Sets the average_foul_score of this EventInsights2016.

        Average foul score.

        :param average_foul_score: The average_foul_score of this EventInsights2016.
        :type average_foul_score: float
        """
        if average_foul_score is None:
            raise ValueError("Invalid value for `average_foul_score`, must not be `None`")

        self._average_foul_score = average_foul_score

    @property
    def average_high_goals(self):
        """Gets the average_high_goals of this EventInsights2016.

        Average number of high goals scored.

        :return: The average_high_goals of this EventInsights2016.
        :rtype: float
        """
        return self._average_high_goals

    @average_high_goals.setter
    def average_high_goals(self, average_high_goals):
        """Sets the average_high_goals of this EventInsights2016.

        Average number of high goals scored.

        :param average_high_goals: The average_high_goals of this EventInsights2016.
        :type average_high_goals: float
        """
        if average_high_goals is None:
            raise ValueError("Invalid value for `average_high_goals`, must not be `None`")

        self._average_high_goals = average_high_goals

    @property
    def average_low_goals(self):
        """Gets the average_low_goals of this EventInsights2016.

        Average number of low goals scored.

        :return: The average_low_goals of this EventInsights2016.
        :rtype: float
        """
        return self._average_low_goals

    @average_low_goals.setter
    def average_low_goals(self, average_low_goals):
        """Sets the average_low_goals of this EventInsights2016.

        Average number of low goals scored.

        :param average_low_goals: The average_low_goals of this EventInsights2016.
        :type average_low_goals: float
        """
        if average_low_goals is None:
            raise ValueError("Invalid value for `average_low_goals`, must not be `None`")

        self._average_low_goals = average_low_goals

    @property
    def average_score(self):
        """Gets the average_score of this EventInsights2016.

        Average total score.

        :return: The average_score of this EventInsights2016.
        :rtype: float
        """
        return self._average_score

    @average_score.setter
    def average_score(self, average_score):
        """Sets the average_score of this EventInsights2016.

        Average total score.

        :param average_score: The average_score of this EventInsights2016.
        :type average_score: float
        """
        if average_score is None:
            raise ValueError("Invalid value for `average_score`, must not be `None`")

        self._average_score = average_score

    @property
    def average_tower_score(self):
        """Gets the average_tower_score of this EventInsights2016.

        Average tower score.

        :return: The average_tower_score of this EventInsights2016.
        :rtype: float
        """
        return self._average_tower_score

    @average_tower_score.setter
    def average_tower_score(self, average_tower_score):
        """Sets the average_tower_score of this EventInsights2016.

        Average tower score.

        :param average_tower_score: The average_tower_score of this EventInsights2016.
        :type average_tower_score: float
        """
        if average_tower_score is None:
            raise ValueError("Invalid value for `average_tower_score`, must not be `None`")

        self._average_tower_score = average_tower_score

    @property
    def average_win_margin(self):
        """Gets the average_win_margin of this EventInsights2016.

        Average margin of victory.

        :return: The average_win_margin of this EventInsights2016.
        :rtype: float
        """
        return self._average_win_margin

    @average_win_margin.setter
    def average_win_margin(self, average_win_margin):
        """Sets the average_win_margin of this EventInsights2016.

        Average margin of victory.

        :param average_win_margin: The average_win_margin of this EventInsights2016.
        :type average_win_margin: float
        """
        if average_win_margin is None:
            raise ValueError("Invalid value for `average_win_margin`, must not be `None`")

        self._average_win_margin = average_win_margin

    @property
    def average_win_score(self):
        """Gets the average_win_score of this EventInsights2016.

        Average winning score.

        :return: The average_win_score of this EventInsights2016.
        :rtype: float
        """
        return self._average_win_score

    @average_win_score.setter
    def average_win_score(self, average_win_score):
        """Sets the average_win_score of this EventInsights2016.

        Average winning score.

        :param average_win_score: The average_win_score of this EventInsights2016.
        :type average_win_score: float
        """
        if average_win_score is None:
            raise ValueError("Invalid value for `average_win_score`, must not be `None`")

        self._average_win_score = average_win_score

    @property
    def breaches(self):
        """Gets the breaches of this EventInsights2016.

        An array with three values, number of times breached, number of opportunities to breach, and percentage.

        :return: The breaches of this EventInsights2016.
        :rtype: List[float]
        """
        return self._breaches

    @breaches.setter
    def breaches(self, breaches):
        """Sets the breaches of this EventInsights2016.

        An array with three values, number of times breached, number of opportunities to breach, and percentage.

        :param breaches: The breaches of this EventInsights2016.
        :type breaches: List[float]
        """
        if breaches is None:
            raise ValueError("Invalid value for `breaches`, must not be `None`")

        self._breaches = breaches

    @property
    def captures(self):
        """Gets the captures of this EventInsights2016.

        An array with three values, number of times captured, number of opportunities to capture, and percentage.

        :return: The captures of this EventInsights2016.
        :rtype: List[float]
        """
        return self._captures

    @captures.setter
    def captures(self, captures):
        """Sets the captures of this EventInsights2016.

        An array with three values, number of times captured, number of opportunities to capture, and percentage.

        :param captures: The captures of this EventInsights2016.
        :type captures: List[float]
        """
        if captures is None:
            raise ValueError("Invalid value for `captures`, must not be `None`")

        self._captures = captures

    @property
    def challenges(self):
        """Gets the challenges of this EventInsights2016.

        An array with three values, number of times challenged, number of opportunities to challenge, and percentage.

        :return: The challenges of this EventInsights2016.
        :rtype: List[float]
        """
        return self._challenges

    @challenges.setter
    def challenges(self, challenges):
        """Sets the challenges of this EventInsights2016.

        An array with three values, number of times challenged, number of opportunities to challenge, and percentage.

        :param challenges: The challenges of this EventInsights2016.
        :type challenges: List[float]
        """
        if challenges is None:
            raise ValueError("Invalid value for `challenges`, must not be `None`")

        self._challenges = challenges

    @property
    def high_score(self):
        """Gets the high_score of this EventInsights2016.

        An array with three values, high score, match key from the match with the high score, and the name of the match.

        :return: The high_score of this EventInsights2016.
        :rtype: List[str]
        """
        return self._high_score

    @high_score.setter
    def high_score(self, high_score):
        """Sets the high_score of this EventInsights2016.

        An array with three values, high score, match key from the match with the high score, and the name of the match.

        :param high_score: The high_score of this EventInsights2016.
        :type high_score: List[str]
        """
        if high_score is None:
            raise ValueError("Invalid value for `high_score`, must not be `None`")

        self._high_score = high_score

    @property
    def scales(self):
        """Gets the scales of this EventInsights2016.

        An array with three values, number of times scaled, number of opportunities to scale, and percentage.

        :return: The scales of this EventInsights2016.
        :rtype: List[float]
        """
        return self._scales

    @scales.setter
    def scales(self, scales):
        """Sets the scales of this EventInsights2016.

        An array with three values, number of times scaled, number of opportunities to scale, and percentage.

        :param scales: The scales of this EventInsights2016.
        :type scales: List[float]
        """
        if scales is None:
            raise ValueError("Invalid value for `scales`, must not be `None`")

        self._scales = scales
