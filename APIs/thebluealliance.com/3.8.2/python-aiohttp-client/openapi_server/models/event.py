# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.district_list import DistrictList
from openapi_server.models.webcast import Webcast
from openapi_server import util


class Event(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address: str=None, city: str=None, country: str=None, district: DistrictList=None, division_keys: List[str]=None, end_date: date=None, event_code: str=None, event_type: int=None, event_type_string: str=None, first_event_code: str=None, first_event_id: str=None, gmaps_place_id: str=None, gmaps_url: str=None, key: str=None, lat: float=None, lng: float=None, location_name: str=None, name: str=None, parent_event_key: str=None, playoff_type: int=None, playoff_type_string: str=None, postal_code: str=None, short_name: str=None, start_date: date=None, state_prov: str=None, timezone: str=None, webcasts: List[Webcast]=None, website: str=None, week: int=None, year: int=None):
        """Event - a model defined in OpenAPI

        :param address: The address of this Event.
        :param city: The city of this Event.
        :param country: The country of this Event.
        :param district: The district of this Event.
        :param division_keys: The division_keys of this Event.
        :param end_date: The end_date of this Event.
        :param event_code: The event_code of this Event.
        :param event_type: The event_type of this Event.
        :param event_type_string: The event_type_string of this Event.
        :param first_event_code: The first_event_code of this Event.
        :param first_event_id: The first_event_id of this Event.
        :param gmaps_place_id: The gmaps_place_id of this Event.
        :param gmaps_url: The gmaps_url of this Event.
        :param key: The key of this Event.
        :param lat: The lat of this Event.
        :param lng: The lng of this Event.
        :param location_name: The location_name of this Event.
        :param name: The name of this Event.
        :param parent_event_key: The parent_event_key of this Event.
        :param playoff_type: The playoff_type of this Event.
        :param playoff_type_string: The playoff_type_string of this Event.
        :param postal_code: The postal_code of this Event.
        :param short_name: The short_name of this Event.
        :param start_date: The start_date of this Event.
        :param state_prov: The state_prov of this Event.
        :param timezone: The timezone of this Event.
        :param webcasts: The webcasts of this Event.
        :param website: The website of this Event.
        :param week: The week of this Event.
        :param year: The year of this Event.
        """
        self.openapi_types = {
            'address': str,
            'city': str,
            'country': str,
            'district': DistrictList,
            'division_keys': List[str],
            'end_date': date,
            'event_code': str,
            'event_type': int,
            'event_type_string': str,
            'first_event_code': str,
            'first_event_id': str,
            'gmaps_place_id': str,
            'gmaps_url': str,
            'key': str,
            'lat': float,
            'lng': float,
            'location_name': str,
            'name': str,
            'parent_event_key': str,
            'playoff_type': int,
            'playoff_type_string': str,
            'postal_code': str,
            'short_name': str,
            'start_date': date,
            'state_prov': str,
            'timezone': str,
            'webcasts': List[Webcast],
            'website': str,
            'week': int,
            'year': int
        }

        self.attribute_map = {
            'address': 'address',
            'city': 'city',
            'country': 'country',
            'district': 'district',
            'division_keys': 'division_keys',
            'end_date': 'end_date',
            'event_code': 'event_code',
            'event_type': 'event_type',
            'event_type_string': 'event_type_string',
            'first_event_code': 'first_event_code',
            'first_event_id': 'first_event_id',
            'gmaps_place_id': 'gmaps_place_id',
            'gmaps_url': 'gmaps_url',
            'key': 'key',
            'lat': 'lat',
            'lng': 'lng',
            'location_name': 'location_name',
            'name': 'name',
            'parent_event_key': 'parent_event_key',
            'playoff_type': 'playoff_type',
            'playoff_type_string': 'playoff_type_string',
            'postal_code': 'postal_code',
            'short_name': 'short_name',
            'start_date': 'start_date',
            'state_prov': 'state_prov',
            'timezone': 'timezone',
            'webcasts': 'webcasts',
            'website': 'website',
            'week': 'week',
            'year': 'year'
        }

        self._address = address
        self._city = city
        self._country = country
        self._district = district
        self._division_keys = division_keys
        self._end_date = end_date
        self._event_code = event_code
        self._event_type = event_type
        self._event_type_string = event_type_string
        self._first_event_code = first_event_code
        self._first_event_id = first_event_id
        self._gmaps_place_id = gmaps_place_id
        self._gmaps_url = gmaps_url
        self._key = key
        self._lat = lat
        self._lng = lng
        self._location_name = location_name
        self._name = name
        self._parent_event_key = parent_event_key
        self._playoff_type = playoff_type
        self._playoff_type_string = playoff_type_string
        self._postal_code = postal_code
        self._short_name = short_name
        self._start_date = start_date
        self._state_prov = state_prov
        self._timezone = timezone
        self._webcasts = webcasts
        self._website = website
        self._week = week
        self._year = year

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Event':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Event of this Event.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address(self):
        """Gets the address of this Event.

        Address of the event's venue, if available.

        :return: The address of this Event.
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this Event.

        Address of the event's venue, if available.

        :param address: The address of this Event.
        :type address: str
        """

        self._address = address

    @property
    def city(self):
        """Gets the city of this Event.

        City, town, village, etc. the event is located in.

        :return: The city of this Event.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this Event.

        City, town, village, etc. the event is located in.

        :param city: The city of this Event.
        :type city: str
        """

        self._city = city

    @property
    def country(self):
        """Gets the country of this Event.

        Country the event is located in.

        :return: The country of this Event.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this Event.

        Country the event is located in.

        :param country: The country of this Event.
        :type country: str
        """

        self._country = country

    @property
    def district(self):
        """Gets the district of this Event.


        :return: The district of this Event.
        :rtype: DistrictList
        """
        return self._district

    @district.setter
    def district(self, district):
        """Sets the district of this Event.


        :param district: The district of this Event.
        :type district: DistrictList
        """

        self._district = district

    @property
    def division_keys(self):
        """Gets the division_keys of this Event.

        An array of event keys for the divisions at this event.

        :return: The division_keys of this Event.
        :rtype: List[str]
        """
        return self._division_keys

    @division_keys.setter
    def division_keys(self, division_keys):
        """Sets the division_keys of this Event.

        An array of event keys for the divisions at this event.

        :param division_keys: The division_keys of this Event.
        :type division_keys: List[str]
        """

        self._division_keys = division_keys

    @property
    def end_date(self):
        """Gets the end_date of this Event.

        Event end date in `yyyy-mm-dd` format.

        :return: The end_date of this Event.
        :rtype: date
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this Event.

        Event end date in `yyyy-mm-dd` format.

        :param end_date: The end_date of this Event.
        :type end_date: date
        """
        if end_date is None:
            raise ValueError("Invalid value for `end_date`, must not be `None`")

        self._end_date = end_date

    @property
    def event_code(self):
        """Gets the event_code of this Event.

        Event short code, as provided by FIRST.

        :return: The event_code of this Event.
        :rtype: str
        """
        return self._event_code

    @event_code.setter
    def event_code(self, event_code):
        """Sets the event_code of this Event.

        Event short code, as provided by FIRST.

        :param event_code: The event_code of this Event.
        :type event_code: str
        """
        if event_code is None:
            raise ValueError("Invalid value for `event_code`, must not be `None`")

        self._event_code = event_code

    @property
    def event_type(self):
        """Gets the event_type of this Event.

        Event Type, as defined here: https://github.com/the-blue-alliance/the-blue-alliance/blob/master/consts/event_type.py#L2

        :return: The event_type of this Event.
        :rtype: int
        """
        return self._event_type

    @event_type.setter
    def event_type(self, event_type):
        """Sets the event_type of this Event.

        Event Type, as defined here: https://github.com/the-blue-alliance/the-blue-alliance/blob/master/consts/event_type.py#L2

        :param event_type: The event_type of this Event.
        :type event_type: int
        """
        if event_type is None:
            raise ValueError("Invalid value for `event_type`, must not be `None`")

        self._event_type = event_type

    @property
    def event_type_string(self):
        """Gets the event_type_string of this Event.

        Event Type, eg Regional, District, or Offseason.

        :return: The event_type_string of this Event.
        :rtype: str
        """
        return self._event_type_string

    @event_type_string.setter
    def event_type_string(self, event_type_string):
        """Sets the event_type_string of this Event.

        Event Type, eg Regional, District, or Offseason.

        :param event_type_string: The event_type_string of this Event.
        :type event_type_string: str
        """
        if event_type_string is None:
            raise ValueError("Invalid value for `event_type_string`, must not be `None`")

        self._event_type_string = event_type_string

    @property
    def first_event_code(self):
        """Gets the first_event_code of this Event.

        Public facing event code used by FIRST (on frc-events.firstinspires.org, for example)

        :return: The first_event_code of this Event.
        :rtype: str
        """
        return self._first_event_code

    @first_event_code.setter
    def first_event_code(self, first_event_code):
        """Sets the first_event_code of this Event.

        Public facing event code used by FIRST (on frc-events.firstinspires.org, for example)

        :param first_event_code: The first_event_code of this Event.
        :type first_event_code: str
        """

        self._first_event_code = first_event_code

    @property
    def first_event_id(self):
        """Gets the first_event_id of this Event.

        The FIRST internal Event ID, used to link to the event on the FRC webpage.

        :return: The first_event_id of this Event.
        :rtype: str
        """
        return self._first_event_id

    @first_event_id.setter
    def first_event_id(self, first_event_id):
        """Sets the first_event_id of this Event.

        The FIRST internal Event ID, used to link to the event on the FRC webpage.

        :param first_event_id: The first_event_id of this Event.
        :type first_event_id: str
        """

        self._first_event_id = first_event_id

    @property
    def gmaps_place_id(self):
        """Gets the gmaps_place_id of this Event.

        Google Maps Place ID for the event address.

        :return: The gmaps_place_id of this Event.
        :rtype: str
        """
        return self._gmaps_place_id

    @gmaps_place_id.setter
    def gmaps_place_id(self, gmaps_place_id):
        """Sets the gmaps_place_id of this Event.

        Google Maps Place ID for the event address.

        :param gmaps_place_id: The gmaps_place_id of this Event.
        :type gmaps_place_id: str
        """

        self._gmaps_place_id = gmaps_place_id

    @property
    def gmaps_url(self):
        """Gets the gmaps_url of this Event.

        Link to address location on Google Maps.

        :return: The gmaps_url of this Event.
        :rtype: str
        """
        return self._gmaps_url

    @gmaps_url.setter
    def gmaps_url(self, gmaps_url):
        """Sets the gmaps_url of this Event.

        Link to address location on Google Maps.

        :param gmaps_url: The gmaps_url of this Event.
        :type gmaps_url: str
        """

        self._gmaps_url = gmaps_url

    @property
    def key(self):
        """Gets the key of this Event.

        TBA event key with the format yyyy[EVENT_CODE], where yyyy is the year, and EVENT_CODE is the event code of the event.

        :return: The key of this Event.
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this Event.

        TBA event key with the format yyyy[EVENT_CODE], where yyyy is the year, and EVENT_CODE is the event code of the event.

        :param key: The key of this Event.
        :type key: str
        """
        if key is None:
            raise ValueError("Invalid value for `key`, must not be `None`")

        self._key = key

    @property
    def lat(self):
        """Gets the lat of this Event.

        Latitude for the event address.

        :return: The lat of this Event.
        :rtype: float
        """
        return self._lat

    @lat.setter
    def lat(self, lat):
        """Sets the lat of this Event.

        Latitude for the event address.

        :param lat: The lat of this Event.
        :type lat: float
        """

        self._lat = lat

    @property
    def lng(self):
        """Gets the lng of this Event.

        Longitude for the event address.

        :return: The lng of this Event.
        :rtype: float
        """
        return self._lng

    @lng.setter
    def lng(self, lng):
        """Sets the lng of this Event.

        Longitude for the event address.

        :param lng: The lng of this Event.
        :type lng: float
        """

        self._lng = lng

    @property
    def location_name(self):
        """Gets the location_name of this Event.

        Name of the location at the address for the event, eg. Blue Alliance High School.

        :return: The location_name of this Event.
        :rtype: str
        """
        return self._location_name

    @location_name.setter
    def location_name(self, location_name):
        """Sets the location_name of this Event.

        Name of the location at the address for the event, eg. Blue Alliance High School.

        :param location_name: The location_name of this Event.
        :type location_name: str
        """

        self._location_name = location_name

    @property
    def name(self):
        """Gets the name of this Event.

        Official name of event on record either provided by FIRST or organizers of offseason event.

        :return: The name of this Event.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Event.

        Official name of event on record either provided by FIRST or organizers of offseason event.

        :param name: The name of this Event.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def parent_event_key(self):
        """Gets the parent_event_key of this Event.

        The TBA Event key that represents the event's parent. Used to link back to the event from a division event. It is also the inverse relation of `divison_keys`.

        :return: The parent_event_key of this Event.
        :rtype: str
        """
        return self._parent_event_key

    @parent_event_key.setter
    def parent_event_key(self, parent_event_key):
        """Sets the parent_event_key of this Event.

        The TBA Event key that represents the event's parent. Used to link back to the event from a division event. It is also the inverse relation of `divison_keys`.

        :param parent_event_key: The parent_event_key of this Event.
        :type parent_event_key: str
        """

        self._parent_event_key = parent_event_key

    @property
    def playoff_type(self):
        """Gets the playoff_type of this Event.

        Playoff Type, as defined here: https://github.com/the-blue-alliance/the-blue-alliance/blob/master/consts/playoff_type.py#L4, or null.

        :return: The playoff_type of this Event.
        :rtype: int
        """
        return self._playoff_type

    @playoff_type.setter
    def playoff_type(self, playoff_type):
        """Sets the playoff_type of this Event.

        Playoff Type, as defined here: https://github.com/the-blue-alliance/the-blue-alliance/blob/master/consts/playoff_type.py#L4, or null.

        :param playoff_type: The playoff_type of this Event.
        :type playoff_type: int
        """

        self._playoff_type = playoff_type

    @property
    def playoff_type_string(self):
        """Gets the playoff_type_string of this Event.

        String representation of the `playoff_type`, or null.

        :return: The playoff_type_string of this Event.
        :rtype: str
        """
        return self._playoff_type_string

    @playoff_type_string.setter
    def playoff_type_string(self, playoff_type_string):
        """Sets the playoff_type_string of this Event.

        String representation of the `playoff_type`, or null.

        :param playoff_type_string: The playoff_type_string of this Event.
        :type playoff_type_string: str
        """

        self._playoff_type_string = playoff_type_string

    @property
    def postal_code(self):
        """Gets the postal_code of this Event.

        Postal code from the event address.

        :return: The postal_code of this Event.
        :rtype: str
        """
        return self._postal_code

    @postal_code.setter
    def postal_code(self, postal_code):
        """Sets the postal_code of this Event.

        Postal code from the event address.

        :param postal_code: The postal_code of this Event.
        :type postal_code: str
        """

        self._postal_code = postal_code

    @property
    def short_name(self):
        """Gets the short_name of this Event.

        Same as `name` but doesn't include event specifiers, such as 'Regional' or 'District'. May be null.

        :return: The short_name of this Event.
        :rtype: str
        """
        return self._short_name

    @short_name.setter
    def short_name(self, short_name):
        """Sets the short_name of this Event.

        Same as `name` but doesn't include event specifiers, such as 'Regional' or 'District'. May be null.

        :param short_name: The short_name of this Event.
        :type short_name: str
        """

        self._short_name = short_name

    @property
    def start_date(self):
        """Gets the start_date of this Event.

        Event start date in `yyyy-mm-dd` format.

        :return: The start_date of this Event.
        :rtype: date
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this Event.

        Event start date in `yyyy-mm-dd` format.

        :param start_date: The start_date of this Event.
        :type start_date: date
        """
        if start_date is None:
            raise ValueError("Invalid value for `start_date`, must not be `None`")

        self._start_date = start_date

    @property
    def state_prov(self):
        """Gets the state_prov of this Event.

        State or Province the event is located in.

        :return: The state_prov of this Event.
        :rtype: str
        """
        return self._state_prov

    @state_prov.setter
    def state_prov(self, state_prov):
        """Sets the state_prov of this Event.

        State or Province the event is located in.

        :param state_prov: The state_prov of this Event.
        :type state_prov: str
        """

        self._state_prov = state_prov

    @property
    def timezone(self):
        """Gets the timezone of this Event.

        Timezone name.

        :return: The timezone of this Event.
        :rtype: str
        """
        return self._timezone

    @timezone.setter
    def timezone(self, timezone):
        """Sets the timezone of this Event.

        Timezone name.

        :param timezone: The timezone of this Event.
        :type timezone: str
        """

        self._timezone = timezone

    @property
    def webcasts(self):
        """Gets the webcasts of this Event.


        :return: The webcasts of this Event.
        :rtype: List[Webcast]
        """
        return self._webcasts

    @webcasts.setter
    def webcasts(self, webcasts):
        """Sets the webcasts of this Event.


        :param webcasts: The webcasts of this Event.
        :type webcasts: List[Webcast]
        """

        self._webcasts = webcasts

    @property
    def website(self):
        """Gets the website of this Event.

        The event's website, if any.

        :return: The website of this Event.
        :rtype: str
        """
        return self._website

    @website.setter
    def website(self, website):
        """Sets the website of this Event.

        The event's website, if any.

        :param website: The website of this Event.
        :type website: str
        """

        self._website = website

    @property
    def week(self):
        """Gets the week of this Event.

        Week of the event relative to the first official season event, zero-indexed. Only valid for Regionals, Districts, and District Championships. Null otherwise. (Eg. A season with a week 0 'preseason' event does not count, and week 1 events will show 0 here. Seasons with a week 0.5 regional event will show week 0 for those event(s) and week 1 for week 1 events and so on.)

        :return: The week of this Event.
        :rtype: int
        """
        return self._week

    @week.setter
    def week(self, week):
        """Sets the week of this Event.

        Week of the event relative to the first official season event, zero-indexed. Only valid for Regionals, Districts, and District Championships. Null otherwise. (Eg. A season with a week 0 'preseason' event does not count, and week 1 events will show 0 here. Seasons with a week 0.5 regional event will show week 0 for those event(s) and week 1 for week 1 events and so on.)

        :param week: The week of this Event.
        :type week: int
        """

        self._week = week

    @property
    def year(self):
        """Gets the year of this Event.

        Year the event data is for.

        :return: The year of this Event.
        :rtype: int
        """
        return self._year

    @year.setter
    def year(self, year):
        """Sets the year of this Event.

        Year the event data is for.

        :param year: The year of this Event.
        :type year: int
        """
        if year is None:
            raise ValueError("Invalid value for `year`, must not be `None`")

        self._year = year
