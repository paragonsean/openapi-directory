# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ZebraTeam(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, team_key: str=None, xs: List[float]=None, ys: List[float]=None):
        """ZebraTeam - a model defined in OpenAPI

        :param team_key: The team_key of this ZebraTeam.
        :param xs: The xs of this ZebraTeam.
        :param ys: The ys of this ZebraTeam.
        """
        self.openapi_types = {
            'team_key': str,
            'xs': List[float],
            'ys': List[float]
        }

        self.attribute_map = {
            'team_key': 'team_key',
            'xs': 'xs',
            'ys': 'ys'
        }

        self._team_key = team_key
        self._xs = xs
        self._ys = ys

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ZebraTeam':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Zebra_team of this ZebraTeam.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def team_key(self):
        """Gets the team_key of this ZebraTeam.

        The TBA team key for the Zebra MotionWorks data.

        :return: The team_key of this ZebraTeam.
        :rtype: str
        """
        return self._team_key

    @team_key.setter
    def team_key(self, team_key):
        """Sets the team_key of this ZebraTeam.

        The TBA team key for the Zebra MotionWorks data.

        :param team_key: The team_key of this ZebraTeam.
        :type team_key: str
        """
        if team_key is None:
            raise ValueError("Invalid value for `team_key`, must not be `None`")

        self._team_key = team_key

    @property
    def xs(self):
        """Gets the xs of this ZebraTeam.

        A list containing doubles and nulls representing a teams X position in feet at the corresponding timestamp. A null value represents no tracking data for a given timestamp.

        :return: The xs of this ZebraTeam.
        :rtype: List[float]
        """
        return self._xs

    @xs.setter
    def xs(self, xs):
        """Sets the xs of this ZebraTeam.

        A list containing doubles and nulls representing a teams X position in feet at the corresponding timestamp. A null value represents no tracking data for a given timestamp.

        :param xs: The xs of this ZebraTeam.
        :type xs: List[float]
        """
        if xs is None:
            raise ValueError("Invalid value for `xs`, must not be `None`")

        self._xs = xs

    @property
    def ys(self):
        """Gets the ys of this ZebraTeam.

        A list containing doubles and nulls representing a teams Y position in feet at the corresponding timestamp. A null value represents no tracking data for a given timestamp.

        :return: The ys of this ZebraTeam.
        :rtype: List[float]
        """
        return self._ys

    @ys.setter
    def ys(self, ys):
        """Sets the ys of this ZebraTeam.

        A list containing doubles and nulls representing a teams Y position in feet at the corresponding timestamp. A null value represents no tracking data for a given timestamp.

        :param ys: The ys of this ZebraTeam.
        :type ys: List[float]
        """
        if ys is None:
            raise ValueError("Invalid value for `ys`, must not be `None`")

        self._ys = ys
