# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Team(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address: str=None, city: str=None, country: str=None, gmaps_place_id: str=None, gmaps_url: str=None, home_championship: object=None, key: str=None, lat: float=None, lng: float=None, location_name: str=None, motto: str=None, name: str=None, nickname: str=None, postal_code: str=None, rookie_year: int=None, school_name: str=None, state_prov: str=None, team_number: int=None, website: str=None):
        """Team - a model defined in OpenAPI

        :param address: The address of this Team.
        :param city: The city of this Team.
        :param country: The country of this Team.
        :param gmaps_place_id: The gmaps_place_id of this Team.
        :param gmaps_url: The gmaps_url of this Team.
        :param home_championship: The home_championship of this Team.
        :param key: The key of this Team.
        :param lat: The lat of this Team.
        :param lng: The lng of this Team.
        :param location_name: The location_name of this Team.
        :param motto: The motto of this Team.
        :param name: The name of this Team.
        :param nickname: The nickname of this Team.
        :param postal_code: The postal_code of this Team.
        :param rookie_year: The rookie_year of this Team.
        :param school_name: The school_name of this Team.
        :param state_prov: The state_prov of this Team.
        :param team_number: The team_number of this Team.
        :param website: The website of this Team.
        """
        self.openapi_types = {
            'address': str,
            'city': str,
            'country': str,
            'gmaps_place_id': str,
            'gmaps_url': str,
            'home_championship': object,
            'key': str,
            'lat': float,
            'lng': float,
            'location_name': str,
            'motto': str,
            'name': str,
            'nickname': str,
            'postal_code': str,
            'rookie_year': int,
            'school_name': str,
            'state_prov': str,
            'team_number': int,
            'website': str
        }

        self.attribute_map = {
            'address': 'address',
            'city': 'city',
            'country': 'country',
            'gmaps_place_id': 'gmaps_place_id',
            'gmaps_url': 'gmaps_url',
            'home_championship': 'home_championship',
            'key': 'key',
            'lat': 'lat',
            'lng': 'lng',
            'location_name': 'location_name',
            'motto': 'motto',
            'name': 'name',
            'nickname': 'nickname',
            'postal_code': 'postal_code',
            'rookie_year': 'rookie_year',
            'school_name': 'school_name',
            'state_prov': 'state_prov',
            'team_number': 'team_number',
            'website': 'website'
        }

        self._address = address
        self._city = city
        self._country = country
        self._gmaps_place_id = gmaps_place_id
        self._gmaps_url = gmaps_url
        self._home_championship = home_championship
        self._key = key
        self._lat = lat
        self._lng = lng
        self._location_name = location_name
        self._motto = motto
        self._name = name
        self._nickname = nickname
        self._postal_code = postal_code
        self._rookie_year = rookie_year
        self._school_name = school_name
        self._state_prov = state_prov
        self._team_number = team_number
        self._website = website

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Team':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Team of this Team.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address(self):
        """Gets the address of this Team.

        Will be NULL, for future development.

        :return: The address of this Team.
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this Team.

        Will be NULL, for future development.

        :param address: The address of this Team.
        :type address: str
        """

        self._address = address

    @property
    def city(self):
        """Gets the city of this Team.

        City of team derived from parsing the address registered with FIRST.

        :return: The city of this Team.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this Team.

        City of team derived from parsing the address registered with FIRST.

        :param city: The city of this Team.
        :type city: str
        """

        self._city = city

    @property
    def country(self):
        """Gets the country of this Team.

        Country of team derived from parsing the address registered with FIRST.

        :return: The country of this Team.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this Team.

        Country of team derived from parsing the address registered with FIRST.

        :param country: The country of this Team.
        :type country: str
        """

        self._country = country

    @property
    def gmaps_place_id(self):
        """Gets the gmaps_place_id of this Team.

        Will be NULL, for future development.

        :return: The gmaps_place_id of this Team.
        :rtype: str
        """
        return self._gmaps_place_id

    @gmaps_place_id.setter
    def gmaps_place_id(self, gmaps_place_id):
        """Sets the gmaps_place_id of this Team.

        Will be NULL, for future development.

        :param gmaps_place_id: The gmaps_place_id of this Team.
        :type gmaps_place_id: str
        """

        self._gmaps_place_id = gmaps_place_id

    @property
    def gmaps_url(self):
        """Gets the gmaps_url of this Team.

        Will be NULL, for future development.

        :return: The gmaps_url of this Team.
        :rtype: str
        """
        return self._gmaps_url

    @gmaps_url.setter
    def gmaps_url(self, gmaps_url):
        """Sets the gmaps_url of this Team.

        Will be NULL, for future development.

        :param gmaps_url: The gmaps_url of this Team.
        :type gmaps_url: str
        """

        self._gmaps_url = gmaps_url

    @property
    def home_championship(self):
        """Gets the home_championship of this Team.

        Location of the team's home championship each year as a key-value pair. The year (as a string) is the key, and the city is the value.

        :return: The home_championship of this Team.
        :rtype: object
        """
        return self._home_championship

    @home_championship.setter
    def home_championship(self, home_championship):
        """Sets the home_championship of this Team.

        Location of the team's home championship each year as a key-value pair. The year (as a string) is the key, and the city is the value.

        :param home_championship: The home_championship of this Team.
        :type home_championship: object
        """

        self._home_championship = home_championship

    @property
    def key(self):
        """Gets the key of this Team.

        TBA team key with the format `frcXXXX` with `XXXX` representing the team number.

        :return: The key of this Team.
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this Team.

        TBA team key with the format `frcXXXX` with `XXXX` representing the team number.

        :param key: The key of this Team.
        :type key: str
        """
        if key is None:
            raise ValueError("Invalid value for `key`, must not be `None`")

        self._key = key

    @property
    def lat(self):
        """Gets the lat of this Team.

        Will be NULL, for future development.

        :return: The lat of this Team.
        :rtype: float
        """
        return self._lat

    @lat.setter
    def lat(self, lat):
        """Sets the lat of this Team.

        Will be NULL, for future development.

        :param lat: The lat of this Team.
        :type lat: float
        """

        self._lat = lat

    @property
    def lng(self):
        """Gets the lng of this Team.

        Will be NULL, for future development.

        :return: The lng of this Team.
        :rtype: float
        """
        return self._lng

    @lng.setter
    def lng(self, lng):
        """Sets the lng of this Team.

        Will be NULL, for future development.

        :param lng: The lng of this Team.
        :type lng: float
        """

        self._lng = lng

    @property
    def location_name(self):
        """Gets the location_name of this Team.

        Will be NULL, for future development.

        :return: The location_name of this Team.
        :rtype: str
        """
        return self._location_name

    @location_name.setter
    def location_name(self, location_name):
        """Sets the location_name of this Team.

        Will be NULL, for future development.

        :param location_name: The location_name of this Team.
        :type location_name: str
        """

        self._location_name = location_name

    @property
    def motto(self):
        """Gets the motto of this Team.

        Team's motto as provided by FIRST. This field is deprecated and will return null - will be removed at end-of-season in 2019.

        :return: The motto of this Team.
        :rtype: str
        """
        return self._motto

    @motto.setter
    def motto(self, motto):
        """Sets the motto of this Team.

        Team's motto as provided by FIRST. This field is deprecated and will return null - will be removed at end-of-season in 2019.

        :param motto: The motto of this Team.
        :type motto: str
        """

        self._motto = motto

    @property
    def name(self):
        """Gets the name of this Team.

        Official long name registered with FIRST.

        :return: The name of this Team.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Team.

        Official long name registered with FIRST.

        :param name: The name of this Team.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def nickname(self):
        """Gets the nickname of this Team.

        Team nickname provided by FIRST.

        :return: The nickname of this Team.
        :rtype: str
        """
        return self._nickname

    @nickname.setter
    def nickname(self, nickname):
        """Sets the nickname of this Team.

        Team nickname provided by FIRST.

        :param nickname: The nickname of this Team.
        :type nickname: str
        """

        self._nickname = nickname

    @property
    def postal_code(self):
        """Gets the postal_code of this Team.

        Postal code from the team address.

        :return: The postal_code of this Team.
        :rtype: str
        """
        return self._postal_code

    @postal_code.setter
    def postal_code(self, postal_code):
        """Sets the postal_code of this Team.

        Postal code from the team address.

        :param postal_code: The postal_code of this Team.
        :type postal_code: str
        """

        self._postal_code = postal_code

    @property
    def rookie_year(self):
        """Gets the rookie_year of this Team.

        First year the team officially competed.

        :return: The rookie_year of this Team.
        :rtype: int
        """
        return self._rookie_year

    @rookie_year.setter
    def rookie_year(self, rookie_year):
        """Sets the rookie_year of this Team.

        First year the team officially competed.

        :param rookie_year: The rookie_year of this Team.
        :type rookie_year: int
        """

        self._rookie_year = rookie_year

    @property
    def school_name(self):
        """Gets the school_name of this Team.

        Name of team school or affilited group registered with FIRST.

        :return: The school_name of this Team.
        :rtype: str
        """
        return self._school_name

    @school_name.setter
    def school_name(self, school_name):
        """Sets the school_name of this Team.

        Name of team school or affilited group registered with FIRST.

        :param school_name: The school_name of this Team.
        :type school_name: str
        """

        self._school_name = school_name

    @property
    def state_prov(self):
        """Gets the state_prov of this Team.

        State of team derived from parsing the address registered with FIRST.

        :return: The state_prov of this Team.
        :rtype: str
        """
        return self._state_prov

    @state_prov.setter
    def state_prov(self, state_prov):
        """Sets the state_prov of this Team.

        State of team derived from parsing the address registered with FIRST.

        :param state_prov: The state_prov of this Team.
        :type state_prov: str
        """

        self._state_prov = state_prov

    @property
    def team_number(self):
        """Gets the team_number of this Team.

        Official team number issued by FIRST.

        :return: The team_number of this Team.
        :rtype: int
        """
        return self._team_number

    @team_number.setter
    def team_number(self, team_number):
        """Sets the team_number of this Team.

        Official team number issued by FIRST.

        :param team_number: The team_number of this Team.
        :type team_number: int
        """
        if team_number is None:
            raise ValueError("Invalid value for `team_number`, must not be `None`")

        self._team_number = team_number

    @property
    def website(self):
        """Gets the website of this Team.

        Official website associated with the team.

        :return: The website of this Team.
        :rtype: str
        """
        return self._website

    @website.setter
    def website(self, website):
        """Sets the website of this Team.

        Official website associated with the team.

        :param website: The website of this Team.
        :type website: str
        """

        self._website = website
