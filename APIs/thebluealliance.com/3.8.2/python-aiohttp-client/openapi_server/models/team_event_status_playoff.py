# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.wlt_record import WLTRecord
from openapi_server import util


class TeamEventStatusPlayoff(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, current_level_record: WLTRecord=None, level: str=None, playoff_average: int=None, record: WLTRecord=None, status: str=None):
        """TeamEventStatusPlayoff - a model defined in OpenAPI

        :param current_level_record: The current_level_record of this TeamEventStatusPlayoff.
        :param level: The level of this TeamEventStatusPlayoff.
        :param playoff_average: The playoff_average of this TeamEventStatusPlayoff.
        :param record: The record of this TeamEventStatusPlayoff.
        :param status: The status of this TeamEventStatusPlayoff.
        """
        self.openapi_types = {
            'current_level_record': WLTRecord,
            'level': str,
            'playoff_average': int,
            'record': WLTRecord,
            'status': str
        }

        self.attribute_map = {
            'current_level_record': 'current_level_record',
            'level': 'level',
            'playoff_average': 'playoff_average',
            'record': 'record',
            'status': 'status'
        }

        self._current_level_record = current_level_record
        self._level = level
        self._playoff_average = playoff_average
        self._record = record
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TeamEventStatusPlayoff':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Team_Event_Status_playoff of this TeamEventStatusPlayoff.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def current_level_record(self):
        """Gets the current_level_record of this TeamEventStatusPlayoff.


        :return: The current_level_record of this TeamEventStatusPlayoff.
        :rtype: WLTRecord
        """
        return self._current_level_record

    @current_level_record.setter
    def current_level_record(self, current_level_record):
        """Sets the current_level_record of this TeamEventStatusPlayoff.


        :param current_level_record: The current_level_record of this TeamEventStatusPlayoff.
        :type current_level_record: WLTRecord
        """

        self._current_level_record = current_level_record

    @property
    def level(self):
        """Gets the level of this TeamEventStatusPlayoff.

        The highest playoff level the team reached.

        :return: The level of this TeamEventStatusPlayoff.
        :rtype: str
        """
        return self._level

    @level.setter
    def level(self, level):
        """Sets the level of this TeamEventStatusPlayoff.

        The highest playoff level the team reached.

        :param level: The level of this TeamEventStatusPlayoff.
        :type level: str
        """
        allowed_values = ["qm", "ef", "qf", "sf", "f"]  # noqa: E501
        if level not in allowed_values:
            raise ValueError(
                "Invalid value for `level` ({0}), must be one of {1}"
                .format(level, allowed_values)
            )

        self._level = level

    @property
    def playoff_average(self):
        """Gets the playoff_average of this TeamEventStatusPlayoff.

        The average match score during playoffs. Year specific. May be null if not relevant for a given year.

        :return: The playoff_average of this TeamEventStatusPlayoff.
        :rtype: int
        """
        return self._playoff_average

    @playoff_average.setter
    def playoff_average(self, playoff_average):
        """Sets the playoff_average of this TeamEventStatusPlayoff.

        The average match score during playoffs. Year specific. May be null if not relevant for a given year.

        :param playoff_average: The playoff_average of this TeamEventStatusPlayoff.
        :type playoff_average: int
        """

        self._playoff_average = playoff_average

    @property
    def record(self):
        """Gets the record of this TeamEventStatusPlayoff.


        :return: The record of this TeamEventStatusPlayoff.
        :rtype: WLTRecord
        """
        return self._record

    @record.setter
    def record(self, record):
        """Sets the record of this TeamEventStatusPlayoff.


        :param record: The record of this TeamEventStatusPlayoff.
        :type record: WLTRecord
        """

        self._record = record

    @property
    def status(self):
        """Gets the status of this TeamEventStatusPlayoff.

        Current competition status for the playoffs.

        :return: The status of this TeamEventStatusPlayoff.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this TeamEventStatusPlayoff.

        Current competition status for the playoffs.

        :param status: The status of this TeamEventStatusPlayoff.
        :type status: str
        """
        allowed_values = ["won", "eliminated", "playing"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status
