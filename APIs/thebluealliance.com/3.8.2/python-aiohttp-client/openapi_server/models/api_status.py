# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.api_status_app_version import APIStatusAppVersion
from openapi_server import util


class APIStatus(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, android: APIStatusAppVersion=None, current_season: int=None, down_events: List[str]=None, ios: APIStatusAppVersion=None, is_datafeed_down: bool=None, max_season: int=None):
        """APIStatus - a model defined in OpenAPI

        :param android: The android of this APIStatus.
        :param current_season: The current_season of this APIStatus.
        :param down_events: The down_events of this APIStatus.
        :param ios: The ios of this APIStatus.
        :param is_datafeed_down: The is_datafeed_down of this APIStatus.
        :param max_season: The max_season of this APIStatus.
        """
        self.openapi_types = {
            'android': APIStatusAppVersion,
            'current_season': int,
            'down_events': List[str],
            'ios': APIStatusAppVersion,
            'is_datafeed_down': bool,
            'max_season': int
        }

        self.attribute_map = {
            'android': 'android',
            'current_season': 'current_season',
            'down_events': 'down_events',
            'ios': 'ios',
            'is_datafeed_down': 'is_datafeed_down',
            'max_season': 'max_season'
        }

        self._android = android
        self._current_season = current_season
        self._down_events = down_events
        self._ios = ios
        self._is_datafeed_down = is_datafeed_down
        self._max_season = max_season

    @classmethod
    def from_dict(cls, dikt: dict) -> 'APIStatus':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The API_Status of this APIStatus.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def android(self):
        """Gets the android of this APIStatus.


        :return: The android of this APIStatus.
        :rtype: APIStatusAppVersion
        """
        return self._android

    @android.setter
    def android(self, android):
        """Sets the android of this APIStatus.


        :param android: The android of this APIStatus.
        :type android: APIStatusAppVersion
        """
        if android is None:
            raise ValueError("Invalid value for `android`, must not be `None`")

        self._android = android

    @property
    def current_season(self):
        """Gets the current_season of this APIStatus.

        Year of the current FRC season.

        :return: The current_season of this APIStatus.
        :rtype: int
        """
        return self._current_season

    @current_season.setter
    def current_season(self, current_season):
        """Sets the current_season of this APIStatus.

        Year of the current FRC season.

        :param current_season: The current_season of this APIStatus.
        :type current_season: int
        """
        if current_season is None:
            raise ValueError("Invalid value for `current_season`, must not be `None`")

        self._current_season = current_season

    @property
    def down_events(self):
        """Gets the down_events of this APIStatus.

        An array of strings containing event keys of any active events that are no longer updating.

        :return: The down_events of this APIStatus.
        :rtype: List[str]
        """
        return self._down_events

    @down_events.setter
    def down_events(self, down_events):
        """Sets the down_events of this APIStatus.

        An array of strings containing event keys of any active events that are no longer updating.

        :param down_events: The down_events of this APIStatus.
        :type down_events: List[str]
        """
        if down_events is None:
            raise ValueError("Invalid value for `down_events`, must not be `None`")

        self._down_events = down_events

    @property
    def ios(self):
        """Gets the ios of this APIStatus.


        :return: The ios of this APIStatus.
        :rtype: APIStatusAppVersion
        """
        return self._ios

    @ios.setter
    def ios(self, ios):
        """Sets the ios of this APIStatus.


        :param ios: The ios of this APIStatus.
        :type ios: APIStatusAppVersion
        """
        if ios is None:
            raise ValueError("Invalid value for `ios`, must not be `None`")

        self._ios = ios

    @property
    def is_datafeed_down(self):
        """Gets the is_datafeed_down of this APIStatus.

        True if the entire FMS API provided by FIRST is down.

        :return: The is_datafeed_down of this APIStatus.
        :rtype: bool
        """
        return self._is_datafeed_down

    @is_datafeed_down.setter
    def is_datafeed_down(self, is_datafeed_down):
        """Sets the is_datafeed_down of this APIStatus.

        True if the entire FMS API provided by FIRST is down.

        :param is_datafeed_down: The is_datafeed_down of this APIStatus.
        :type is_datafeed_down: bool
        """
        if is_datafeed_down is None:
            raise ValueError("Invalid value for `is_datafeed_down`, must not be `None`")

        self._is_datafeed_down = is_datafeed_down

    @property
    def max_season(self):
        """Gets the max_season of this APIStatus.

        Maximum FRC season year for valid queries.

        :return: The max_season of this APIStatus.
        :rtype: int
        """
        return self._max_season

    @max_season.setter
    def max_season(self, max_season):
        """Sets the max_season of this APIStatus.

        Maximum FRC season year for valid queries.

        :param max_season: The max_season of this APIStatus.
        :type max_season: int
        """
        if max_season is None:
            raise ValueError("Invalid value for `max_season`, must not be `None`")

        self._max_season = max_season
