# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.match_alliances import MatchAlliances
from openapi_server.models.match_videos_inner import MatchVideosInner
from openapi_server import util


class Match(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, actual_time: int=None, alliances: MatchAlliances=None, comp_level: str=None, event_key: str=None, key: str=None, match_number: int=None, post_result_time: int=None, predicted_time: int=None, score_breakdown: object=None, set_number: int=None, time: int=None, videos: List[MatchVideosInner]=None, winning_alliance: str=None):
        """Match - a model defined in OpenAPI

        :param actual_time: The actual_time of this Match.
        :param alliances: The alliances of this Match.
        :param comp_level: The comp_level of this Match.
        :param event_key: The event_key of this Match.
        :param key: The key of this Match.
        :param match_number: The match_number of this Match.
        :param post_result_time: The post_result_time of this Match.
        :param predicted_time: The predicted_time of this Match.
        :param score_breakdown: The score_breakdown of this Match.
        :param set_number: The set_number of this Match.
        :param time: The time of this Match.
        :param videos: The videos of this Match.
        :param winning_alliance: The winning_alliance of this Match.
        """
        self.openapi_types = {
            'actual_time': int,
            'alliances': MatchAlliances,
            'comp_level': str,
            'event_key': str,
            'key': str,
            'match_number': int,
            'post_result_time': int,
            'predicted_time': int,
            'score_breakdown': object,
            'set_number': int,
            'time': int,
            'videos': List[MatchVideosInner],
            'winning_alliance': str
        }

        self.attribute_map = {
            'actual_time': 'actual_time',
            'alliances': 'alliances',
            'comp_level': 'comp_level',
            'event_key': 'event_key',
            'key': 'key',
            'match_number': 'match_number',
            'post_result_time': 'post_result_time',
            'predicted_time': 'predicted_time',
            'score_breakdown': 'score_breakdown',
            'set_number': 'set_number',
            'time': 'time',
            'videos': 'videos',
            'winning_alliance': 'winning_alliance'
        }

        self._actual_time = actual_time
        self._alliances = alliances
        self._comp_level = comp_level
        self._event_key = event_key
        self._key = key
        self._match_number = match_number
        self._post_result_time = post_result_time
        self._predicted_time = predicted_time
        self._score_breakdown = score_breakdown
        self._set_number = set_number
        self._time = time
        self._videos = videos
        self._winning_alliance = winning_alliance

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Match':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Match of this Match.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def actual_time(self):
        """Gets the actual_time of this Match.

        UNIX timestamp (seconds since 1-Jan-1970 00:00:00) of actual match start time.

        :return: The actual_time of this Match.
        :rtype: int
        """
        return self._actual_time

    @actual_time.setter
    def actual_time(self, actual_time):
        """Sets the actual_time of this Match.

        UNIX timestamp (seconds since 1-Jan-1970 00:00:00) of actual match start time.

        :param actual_time: The actual_time of this Match.
        :type actual_time: int
        """

        self._actual_time = actual_time

    @property
    def alliances(self):
        """Gets the alliances of this Match.


        :return: The alliances of this Match.
        :rtype: MatchAlliances
        """
        return self._alliances

    @alliances.setter
    def alliances(self, alliances):
        """Sets the alliances of this Match.


        :param alliances: The alliances of this Match.
        :type alliances: MatchAlliances
        """

        self._alliances = alliances

    @property
    def comp_level(self):
        """Gets the comp_level of this Match.

        The competition level the match was played at.

        :return: The comp_level of this Match.
        :rtype: str
        """
        return self._comp_level

    @comp_level.setter
    def comp_level(self, comp_level):
        """Sets the comp_level of this Match.

        The competition level the match was played at.

        :param comp_level: The comp_level of this Match.
        :type comp_level: str
        """
        allowed_values = ["qm", "ef", "qf", "sf", "f"]  # noqa: E501
        if comp_level not in allowed_values:
            raise ValueError(
                "Invalid value for `comp_level` ({0}), must be one of {1}"
                .format(comp_level, allowed_values)
            )

        self._comp_level = comp_level

    @property
    def event_key(self):
        """Gets the event_key of this Match.

        Event key of the event the match was played at.

        :return: The event_key of this Match.
        :rtype: str
        """
        return self._event_key

    @event_key.setter
    def event_key(self, event_key):
        """Sets the event_key of this Match.

        Event key of the event the match was played at.

        :param event_key: The event_key of this Match.
        :type event_key: str
        """
        if event_key is None:
            raise ValueError("Invalid value for `event_key`, must not be `None`")

        self._event_key = event_key

    @property
    def key(self):
        """Gets the key of this Match.

        TBA match key with the format `yyyy[EVENT_CODE]_[COMP_LEVEL]m[MATCH_NUMBER]`, where `yyyy` is the year, and `EVENT_CODE` is the event code of the event, `COMP_LEVEL` is (qm, ef, qf, sf, f), and `MATCH_NUMBER` is the match number in the competition level. A set number may be appended to the competition level if more than one match in required per set.

        :return: The key of this Match.
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this Match.

        TBA match key with the format `yyyy[EVENT_CODE]_[COMP_LEVEL]m[MATCH_NUMBER]`, where `yyyy` is the year, and `EVENT_CODE` is the event code of the event, `COMP_LEVEL` is (qm, ef, qf, sf, f), and `MATCH_NUMBER` is the match number in the competition level. A set number may be appended to the competition level if more than one match in required per set.

        :param key: The key of this Match.
        :type key: str
        """
        if key is None:
            raise ValueError("Invalid value for `key`, must not be `None`")

        self._key = key

    @property
    def match_number(self):
        """Gets the match_number of this Match.

        The match number of the match in the competition level.

        :return: The match_number of this Match.
        :rtype: int
        """
        return self._match_number

    @match_number.setter
    def match_number(self, match_number):
        """Sets the match_number of this Match.

        The match number of the match in the competition level.

        :param match_number: The match_number of this Match.
        :type match_number: int
        """
        if match_number is None:
            raise ValueError("Invalid value for `match_number`, must not be `None`")

        self._match_number = match_number

    @property
    def post_result_time(self):
        """Gets the post_result_time of this Match.

        UNIX timestamp (seconds since 1-Jan-1970 00:00:00) when the match result was posted.

        :return: The post_result_time of this Match.
        :rtype: int
        """
        return self._post_result_time

    @post_result_time.setter
    def post_result_time(self, post_result_time):
        """Sets the post_result_time of this Match.

        UNIX timestamp (seconds since 1-Jan-1970 00:00:00) when the match result was posted.

        :param post_result_time: The post_result_time of this Match.
        :type post_result_time: int
        """

        self._post_result_time = post_result_time

    @property
    def predicted_time(self):
        """Gets the predicted_time of this Match.

        UNIX timestamp (seconds since 1-Jan-1970 00:00:00) of the TBA predicted match start time.

        :return: The predicted_time of this Match.
        :rtype: int
        """
        return self._predicted_time

    @predicted_time.setter
    def predicted_time(self, predicted_time):
        """Sets the predicted_time of this Match.

        UNIX timestamp (seconds since 1-Jan-1970 00:00:00) of the TBA predicted match start time.

        :param predicted_time: The predicted_time of this Match.
        :type predicted_time: int
        """

        self._predicted_time = predicted_time

    @property
    def score_breakdown(self):
        """Gets the score_breakdown of this Match.

        Score breakdown for auto, teleop, etc. points. Varies from year to year. May be null.

        :return: The score_breakdown of this Match.
        :rtype: object
        """
        return self._score_breakdown

    @score_breakdown.setter
    def score_breakdown(self, score_breakdown):
        """Sets the score_breakdown of this Match.

        Score breakdown for auto, teleop, etc. points. Varies from year to year. May be null.

        :param score_breakdown: The score_breakdown of this Match.
        :type score_breakdown: object
        """

        self._score_breakdown = score_breakdown

    @property
    def set_number(self):
        """Gets the set_number of this Match.

        The set number in a series of matches where more than one match is required in the match series.

        :return: The set_number of this Match.
        :rtype: int
        """
        return self._set_number

    @set_number.setter
    def set_number(self, set_number):
        """Sets the set_number of this Match.

        The set number in a series of matches where more than one match is required in the match series.

        :param set_number: The set_number of this Match.
        :type set_number: int
        """
        if set_number is None:
            raise ValueError("Invalid value for `set_number`, must not be `None`")

        self._set_number = set_number

    @property
    def time(self):
        """Gets the time of this Match.

        UNIX timestamp (seconds since 1-Jan-1970 00:00:00) of the scheduled match time, as taken from the published schedule.

        :return: The time of this Match.
        :rtype: int
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this Match.

        UNIX timestamp (seconds since 1-Jan-1970 00:00:00) of the scheduled match time, as taken from the published schedule.

        :param time: The time of this Match.
        :type time: int
        """

        self._time = time

    @property
    def videos(self):
        """Gets the videos of this Match.

        Array of video objects associated with this match.

        :return: The videos of this Match.
        :rtype: List[MatchVideosInner]
        """
        return self._videos

    @videos.setter
    def videos(self, videos):
        """Sets the videos of this Match.

        Array of video objects associated with this match.

        :param videos: The videos of this Match.
        :type videos: List[MatchVideosInner]
        """

        self._videos = videos

    @property
    def winning_alliance(self):
        """Gets the winning_alliance of this Match.

        The color (red/blue) of the winning alliance. Will contain an empty string in the event of no winner, or a tie.

        :return: The winning_alliance of this Match.
        :rtype: str
        """
        return self._winning_alliance

    @winning_alliance.setter
    def winning_alliance(self, winning_alliance):
        """Sets the winning_alliance of this Match.

        The color (red/blue) of the winning alliance. Will contain an empty string in the event of no winner, or a tie.

        :param winning_alliance: The winning_alliance of this Match.
        :type winning_alliance: str
        """
        allowed_values = ["red", "blue", ""]  # noqa: E501
        if winning_alliance not in allowed_values:
            raise ValueError(
                "Invalid value for `winning_alliance` ({0}), must be one of {1}"
                .format(winning_alliance, allowed_values)
            )

        self._winning_alliance = winning_alliance
