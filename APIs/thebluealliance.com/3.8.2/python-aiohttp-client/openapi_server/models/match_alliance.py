# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class MatchAlliance(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dq_team_keys: List[str]=None, score: int=None, surrogate_team_keys: List[str]=None, team_keys: List[str]=None):
        """MatchAlliance - a model defined in OpenAPI

        :param dq_team_keys: The dq_team_keys of this MatchAlliance.
        :param score: The score of this MatchAlliance.
        :param surrogate_team_keys: The surrogate_team_keys of this MatchAlliance.
        :param team_keys: The team_keys of this MatchAlliance.
        """
        self.openapi_types = {
            'dq_team_keys': List[str],
            'score': int,
            'surrogate_team_keys': List[str],
            'team_keys': List[str]
        }

        self.attribute_map = {
            'dq_team_keys': 'dq_team_keys',
            'score': 'score',
            'surrogate_team_keys': 'surrogate_team_keys',
            'team_keys': 'team_keys'
        }

        self._dq_team_keys = dq_team_keys
        self._score = score
        self._surrogate_team_keys = surrogate_team_keys
        self._team_keys = team_keys

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MatchAlliance':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Match_alliance of this MatchAlliance.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dq_team_keys(self):
        """Gets the dq_team_keys of this MatchAlliance.

        TBA team keys (eg `frc254`) of any disqualified teams.

        :return: The dq_team_keys of this MatchAlliance.
        :rtype: List[str]
        """
        return self._dq_team_keys

    @dq_team_keys.setter
    def dq_team_keys(self, dq_team_keys):
        """Sets the dq_team_keys of this MatchAlliance.

        TBA team keys (eg `frc254`) of any disqualified teams.

        :param dq_team_keys: The dq_team_keys of this MatchAlliance.
        :type dq_team_keys: List[str]
        """

        self._dq_team_keys = dq_team_keys

    @property
    def score(self):
        """Gets the score of this MatchAlliance.

        Score for this alliance. Will be null or -1 for an unplayed match.

        :return: The score of this MatchAlliance.
        :rtype: int
        """
        return self._score

    @score.setter
    def score(self, score):
        """Sets the score of this MatchAlliance.

        Score for this alliance. Will be null or -1 for an unplayed match.

        :param score: The score of this MatchAlliance.
        :type score: int
        """
        if score is None:
            raise ValueError("Invalid value for `score`, must not be `None`")

        self._score = score

    @property
    def surrogate_team_keys(self):
        """Gets the surrogate_team_keys of this MatchAlliance.

        TBA team keys (eg `frc254`) of any teams playing as a surrogate.

        :return: The surrogate_team_keys of this MatchAlliance.
        :rtype: List[str]
        """
        return self._surrogate_team_keys

    @surrogate_team_keys.setter
    def surrogate_team_keys(self, surrogate_team_keys):
        """Sets the surrogate_team_keys of this MatchAlliance.

        TBA team keys (eg `frc254`) of any teams playing as a surrogate.

        :param surrogate_team_keys: The surrogate_team_keys of this MatchAlliance.
        :type surrogate_team_keys: List[str]
        """

        self._surrogate_team_keys = surrogate_team_keys

    @property
    def team_keys(self):
        """Gets the team_keys of this MatchAlliance.


        :return: The team_keys of this MatchAlliance.
        :rtype: List[str]
        """
        return self._team_keys

    @team_keys.setter
    def team_keys(self, team_keys):
        """Sets the team_keys of this MatchAlliance.


        :param team_keys: The team_keys of this MatchAlliance.
        :type team_keys: List[str]
        """
        if team_keys is None:
            raise ValueError("Invalid value for `team_keys`, must not be `None`")

        self._team_keys = team_keys
