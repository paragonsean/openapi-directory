# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.district_ranking_event_points_inner import DistrictRankingEventPointsInner
from openapi_server import util


class DistrictRanking(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, event_points: List[DistrictRankingEventPointsInner]=None, point_total: int=None, rank: int=None, rookie_bonus: int=None, team_key: str=None):
        """DistrictRanking - a model defined in OpenAPI

        :param event_points: The event_points of this DistrictRanking.
        :param point_total: The point_total of this DistrictRanking.
        :param rank: The rank of this DistrictRanking.
        :param rookie_bonus: The rookie_bonus of this DistrictRanking.
        :param team_key: The team_key of this DistrictRanking.
        """
        self.openapi_types = {
            'event_points': List[DistrictRankingEventPointsInner],
            'point_total': int,
            'rank': int,
            'rookie_bonus': int,
            'team_key': str
        }

        self.attribute_map = {
            'event_points': 'event_points',
            'point_total': 'point_total',
            'rank': 'rank',
            'rookie_bonus': 'rookie_bonus',
            'team_key': 'team_key'
        }

        self._event_points = event_points
        self._point_total = point_total
        self._rank = rank
        self._rookie_bonus = rookie_bonus
        self._team_key = team_key

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DistrictRanking':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The District_Ranking of this DistrictRanking.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def event_points(self):
        """Gets the event_points of this DistrictRanking.

        List of events that contributed to the point total for the team.

        :return: The event_points of this DistrictRanking.
        :rtype: List[DistrictRankingEventPointsInner]
        """
        return self._event_points

    @event_points.setter
    def event_points(self, event_points):
        """Sets the event_points of this DistrictRanking.

        List of events that contributed to the point total for the team.

        :param event_points: The event_points of this DistrictRanking.
        :type event_points: List[DistrictRankingEventPointsInner]
        """

        self._event_points = event_points

    @property
    def point_total(self):
        """Gets the point_total of this DistrictRanking.

        Total district points for the team.

        :return: The point_total of this DistrictRanking.
        :rtype: int
        """
        return self._point_total

    @point_total.setter
    def point_total(self, point_total):
        """Sets the point_total of this DistrictRanking.

        Total district points for the team.

        :param point_total: The point_total of this DistrictRanking.
        :type point_total: int
        """
        if point_total is None:
            raise ValueError("Invalid value for `point_total`, must not be `None`")

        self._point_total = point_total

    @property
    def rank(self):
        """Gets the rank of this DistrictRanking.

        Numerical rank of the team, 1 being top rank.

        :return: The rank of this DistrictRanking.
        :rtype: int
        """
        return self._rank

    @rank.setter
    def rank(self, rank):
        """Sets the rank of this DistrictRanking.

        Numerical rank of the team, 1 being top rank.

        :param rank: The rank of this DistrictRanking.
        :type rank: int
        """
        if rank is None:
            raise ValueError("Invalid value for `rank`, must not be `None`")

        self._rank = rank

    @property
    def rookie_bonus(self):
        """Gets the rookie_bonus of this DistrictRanking.

        Any points added to a team as a result of the rookie bonus.

        :return: The rookie_bonus of this DistrictRanking.
        :rtype: int
        """
        return self._rookie_bonus

    @rookie_bonus.setter
    def rookie_bonus(self, rookie_bonus):
        """Sets the rookie_bonus of this DistrictRanking.

        Any points added to a team as a result of the rookie bonus.

        :param rookie_bonus: The rookie_bonus of this DistrictRanking.
        :type rookie_bonus: int
        """

        self._rookie_bonus = rookie_bonus

    @property
    def team_key(self):
        """Gets the team_key of this DistrictRanking.

        TBA team key for the team.

        :return: The team_key of this DistrictRanking.
        :rtype: str
        """
        return self._team_key

    @team_key.setter
    def team_key(self, team_key):
        """Sets the team_key of this DistrictRanking.

        TBA team key for the team.

        :param team_key: The team_key of this DistrictRanking.
        :type team_key: str
        """
        if team_key is None:
            raise ValueError("Invalid value for `team_key`, must not be `None`")

        self._team_key = team_key
