# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.elimination_alliance_backup import EliminationAllianceBackup
from openapi_server.models.elimination_alliance_status import EliminationAllianceStatus
from openapi_server import util


class EliminationAlliance(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, backup: EliminationAllianceBackup=None, declines: List[str]=None, name: str=None, picks: List[str]=None, status: EliminationAllianceStatus=None):
        """EliminationAlliance - a model defined in OpenAPI

        :param backup: The backup of this EliminationAlliance.
        :param declines: The declines of this EliminationAlliance.
        :param name: The name of this EliminationAlliance.
        :param picks: The picks of this EliminationAlliance.
        :param status: The status of this EliminationAlliance.
        """
        self.openapi_types = {
            'backup': EliminationAllianceBackup,
            'declines': List[str],
            'name': str,
            'picks': List[str],
            'status': EliminationAllianceStatus
        }

        self.attribute_map = {
            'backup': 'backup',
            'declines': 'declines',
            'name': 'name',
            'picks': 'picks',
            'status': 'status'
        }

        self._backup = backup
        self._declines = declines
        self._name = name
        self._picks = picks
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EliminationAlliance':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Elimination_Alliance of this EliminationAlliance.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def backup(self):
        """Gets the backup of this EliminationAlliance.


        :return: The backup of this EliminationAlliance.
        :rtype: EliminationAllianceBackup
        """
        return self._backup

    @backup.setter
    def backup(self, backup):
        """Sets the backup of this EliminationAlliance.


        :param backup: The backup of this EliminationAlliance.
        :type backup: EliminationAllianceBackup
        """

        self._backup = backup

    @property
    def declines(self):
        """Gets the declines of this EliminationAlliance.

        List of teams that declined the alliance.

        :return: The declines of this EliminationAlliance.
        :rtype: List[str]
        """
        return self._declines

    @declines.setter
    def declines(self, declines):
        """Sets the declines of this EliminationAlliance.

        List of teams that declined the alliance.

        :param declines: The declines of this EliminationAlliance.
        :type declines: List[str]
        """

        self._declines = declines

    @property
    def name(self):
        """Gets the name of this EliminationAlliance.

        Alliance name, may be null.

        :return: The name of this EliminationAlliance.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this EliminationAlliance.

        Alliance name, may be null.

        :param name: The name of this EliminationAlliance.
        :type name: str
        """

        self._name = name

    @property
    def picks(self):
        """Gets the picks of this EliminationAlliance.

        List of team keys picked for the alliance. First pick is captain.

        :return: The picks of this EliminationAlliance.
        :rtype: List[str]
        """
        return self._picks

    @picks.setter
    def picks(self, picks):
        """Sets the picks of this EliminationAlliance.

        List of team keys picked for the alliance. First pick is captain.

        :param picks: The picks of this EliminationAlliance.
        :type picks: List[str]
        """
        if picks is None:
            raise ValueError("Invalid value for `picks`, must not be `None`")

        self._picks = picks

    @property
    def status(self):
        """Gets the status of this EliminationAlliance.


        :return: The status of this EliminationAlliance.
        :rtype: EliminationAllianceStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this EliminationAlliance.


        :param status: The status of this EliminationAlliance.
        :type status: EliminationAllianceStatus
        """

        self._status = status
