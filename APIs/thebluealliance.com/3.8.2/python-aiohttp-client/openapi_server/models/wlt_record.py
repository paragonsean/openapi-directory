# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class WLTRecord(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, losses: int=None, ties: int=None, wins: int=None):
        """WLTRecord - a model defined in OpenAPI

        :param losses: The losses of this WLTRecord.
        :param ties: The ties of this WLTRecord.
        :param wins: The wins of this WLTRecord.
        """
        self.openapi_types = {
            'losses': int,
            'ties': int,
            'wins': int
        }

        self.attribute_map = {
            'losses': 'losses',
            'ties': 'ties',
            'wins': 'wins'
        }

        self._losses = losses
        self._ties = ties
        self._wins = wins

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WLTRecord':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WLT_Record of this WLTRecord.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def losses(self):
        """Gets the losses of this WLTRecord.

        Number of losses.

        :return: The losses of this WLTRecord.
        :rtype: int
        """
        return self._losses

    @losses.setter
    def losses(self, losses):
        """Sets the losses of this WLTRecord.

        Number of losses.

        :param losses: The losses of this WLTRecord.
        :type losses: int
        """
        if losses is None:
            raise ValueError("Invalid value for `losses`, must not be `None`")

        self._losses = losses

    @property
    def ties(self):
        """Gets the ties of this WLTRecord.

        Number of ties.

        :return: The ties of this WLTRecord.
        :rtype: int
        """
        return self._ties

    @ties.setter
    def ties(self, ties):
        """Sets the ties of this WLTRecord.

        Number of ties.

        :param ties: The ties of this WLTRecord.
        :type ties: int
        """
        if ties is None:
            raise ValueError("Invalid value for `ties`, must not be `None`")

        self._ties = ties

    @property
    def wins(self):
        """Gets the wins of this WLTRecord.

        Number of wins.

        :return: The wins of this WLTRecord.
        :rtype: int
        """
        return self._wins

    @wins.setter
    def wins(self, wins):
        """Sets the wins of this WLTRecord.

        Number of wins.

        :param wins: The wins of this WLTRecord.
        :type wins: int
        """
        if wins is None:
            raise ValueError("Invalid value for `wins`, must not be `None`")

        self._wins = wins
