# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class MatchScoreBreakdown2023AllianceAutoCommunity(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, b: List[str]=None, m: List[str]=None, t: List[str]=None):
        """MatchScoreBreakdown2023AllianceAutoCommunity - a model defined in OpenAPI

        :param b: The b of this MatchScoreBreakdown2023AllianceAutoCommunity.
        :param m: The m of this MatchScoreBreakdown2023AllianceAutoCommunity.
        :param t: The t of this MatchScoreBreakdown2023AllianceAutoCommunity.
        """
        self.openapi_types = {
            'b': List[str],
            'm': List[str],
            't': List[str]
        }

        self.attribute_map = {
            'b': 'B',
            'm': 'M',
            't': 'T'
        }

        self._b = b
        self._m = m
        self._t = t

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MatchScoreBreakdown2023AllianceAutoCommunity':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Match_Score_Breakdown_2023_Alliance_autoCommunity of this MatchScoreBreakdown2023AllianceAutoCommunity.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def b(self):
        """Gets the b of this MatchScoreBreakdown2023AllianceAutoCommunity.


        :return: The b of this MatchScoreBreakdown2023AllianceAutoCommunity.
        :rtype: List[str]
        """
        return self._b

    @b.setter
    def b(self, b):
        """Sets the b of this MatchScoreBreakdown2023AllianceAutoCommunity.


        :param b: The b of this MatchScoreBreakdown2023AllianceAutoCommunity.
        :type b: List[str]
        """
        allowed_values = ["None", "Cone", "Cube"]  # noqa: E501
        if not set(b).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `b` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(b) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._b = b

    @property
    def m(self):
        """Gets the m of this MatchScoreBreakdown2023AllianceAutoCommunity.


        :return: The m of this MatchScoreBreakdown2023AllianceAutoCommunity.
        :rtype: List[str]
        """
        return self._m

    @m.setter
    def m(self, m):
        """Sets the m of this MatchScoreBreakdown2023AllianceAutoCommunity.


        :param m: The m of this MatchScoreBreakdown2023AllianceAutoCommunity.
        :type m: List[str]
        """
        allowed_values = ["None", "Cone", "Cube"]  # noqa: E501
        if not set(m).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `m` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(m) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._m = m

    @property
    def t(self):
        """Gets the t of this MatchScoreBreakdown2023AllianceAutoCommunity.


        :return: The t of this MatchScoreBreakdown2023AllianceAutoCommunity.
        :rtype: List[str]
        """
        return self._t

    @t.setter
    def t(self, t):
        """Sets the t of this MatchScoreBreakdown2023AllianceAutoCommunity.


        :param t: The t of this MatchScoreBreakdown2023AllianceAutoCommunity.
        :type t: List[str]
        """
        allowed_values = ["None", "Cone", "Cube"]  # noqa: E501
        if not set(t).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `t` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(t) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._t = t
