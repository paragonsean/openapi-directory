# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.district_list import DistrictList
from openapi_server import util


class EventSimple(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, city: str=None, country: str=None, district: DistrictList=None, end_date: date=None, event_code: str=None, event_type: int=None, key: str=None, name: str=None, start_date: date=None, state_prov: str=None, year: int=None):
        """EventSimple - a model defined in OpenAPI

        :param city: The city of this EventSimple.
        :param country: The country of this EventSimple.
        :param district: The district of this EventSimple.
        :param end_date: The end_date of this EventSimple.
        :param event_code: The event_code of this EventSimple.
        :param event_type: The event_type of this EventSimple.
        :param key: The key of this EventSimple.
        :param name: The name of this EventSimple.
        :param start_date: The start_date of this EventSimple.
        :param state_prov: The state_prov of this EventSimple.
        :param year: The year of this EventSimple.
        """
        self.openapi_types = {
            'city': str,
            'country': str,
            'district': DistrictList,
            'end_date': date,
            'event_code': str,
            'event_type': int,
            'key': str,
            'name': str,
            'start_date': date,
            'state_prov': str,
            'year': int
        }

        self.attribute_map = {
            'city': 'city',
            'country': 'country',
            'district': 'district',
            'end_date': 'end_date',
            'event_code': 'event_code',
            'event_type': 'event_type',
            'key': 'key',
            'name': 'name',
            'start_date': 'start_date',
            'state_prov': 'state_prov',
            'year': 'year'
        }

        self._city = city
        self._country = country
        self._district = district
        self._end_date = end_date
        self._event_code = event_code
        self._event_type = event_type
        self._key = key
        self._name = name
        self._start_date = start_date
        self._state_prov = state_prov
        self._year = year

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EventSimple':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Event_Simple of this EventSimple.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def city(self):
        """Gets the city of this EventSimple.

        City, town, village, etc. the event is located in.

        :return: The city of this EventSimple.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this EventSimple.

        City, town, village, etc. the event is located in.

        :param city: The city of this EventSimple.
        :type city: str
        """

        self._city = city

    @property
    def country(self):
        """Gets the country of this EventSimple.

        Country the event is located in.

        :return: The country of this EventSimple.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this EventSimple.

        Country the event is located in.

        :param country: The country of this EventSimple.
        :type country: str
        """

        self._country = country

    @property
    def district(self):
        """Gets the district of this EventSimple.


        :return: The district of this EventSimple.
        :rtype: DistrictList
        """
        return self._district

    @district.setter
    def district(self, district):
        """Sets the district of this EventSimple.


        :param district: The district of this EventSimple.
        :type district: DistrictList
        """

        self._district = district

    @property
    def end_date(self):
        """Gets the end_date of this EventSimple.

        Event end date in `yyyy-mm-dd` format.

        :return: The end_date of this EventSimple.
        :rtype: date
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this EventSimple.

        Event end date in `yyyy-mm-dd` format.

        :param end_date: The end_date of this EventSimple.
        :type end_date: date
        """
        if end_date is None:
            raise ValueError("Invalid value for `end_date`, must not be `None`")

        self._end_date = end_date

    @property
    def event_code(self):
        """Gets the event_code of this EventSimple.

        Event short code, as provided by FIRST.

        :return: The event_code of this EventSimple.
        :rtype: str
        """
        return self._event_code

    @event_code.setter
    def event_code(self, event_code):
        """Sets the event_code of this EventSimple.

        Event short code, as provided by FIRST.

        :param event_code: The event_code of this EventSimple.
        :type event_code: str
        """
        if event_code is None:
            raise ValueError("Invalid value for `event_code`, must not be `None`")

        self._event_code = event_code

    @property
    def event_type(self):
        """Gets the event_type of this EventSimple.

        Event Type, as defined here: https://github.com/the-blue-alliance/the-blue-alliance/blob/master/consts/event_type.py#L2

        :return: The event_type of this EventSimple.
        :rtype: int
        """
        return self._event_type

    @event_type.setter
    def event_type(self, event_type):
        """Sets the event_type of this EventSimple.

        Event Type, as defined here: https://github.com/the-blue-alliance/the-blue-alliance/blob/master/consts/event_type.py#L2

        :param event_type: The event_type of this EventSimple.
        :type event_type: int
        """
        if event_type is None:
            raise ValueError("Invalid value for `event_type`, must not be `None`")

        self._event_type = event_type

    @property
    def key(self):
        """Gets the key of this EventSimple.

        TBA event key with the format yyyy[EVENT_CODE], where yyyy is the year, and EVENT_CODE is the event code of the event.

        :return: The key of this EventSimple.
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this EventSimple.

        TBA event key with the format yyyy[EVENT_CODE], where yyyy is the year, and EVENT_CODE is the event code of the event.

        :param key: The key of this EventSimple.
        :type key: str
        """
        if key is None:
            raise ValueError("Invalid value for `key`, must not be `None`")

        self._key = key

    @property
    def name(self):
        """Gets the name of this EventSimple.

        Official name of event on record either provided by FIRST or organizers of offseason event.

        :return: The name of this EventSimple.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this EventSimple.

        Official name of event on record either provided by FIRST or organizers of offseason event.

        :param name: The name of this EventSimple.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def start_date(self):
        """Gets the start_date of this EventSimple.

        Event start date in `yyyy-mm-dd` format.

        :return: The start_date of this EventSimple.
        :rtype: date
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this EventSimple.

        Event start date in `yyyy-mm-dd` format.

        :param start_date: The start_date of this EventSimple.
        :type start_date: date
        """
        if start_date is None:
            raise ValueError("Invalid value for `start_date`, must not be `None`")

        self._start_date = start_date

    @property
    def state_prov(self):
        """Gets the state_prov of this EventSimple.

        State or Province the event is located in.

        :return: The state_prov of this EventSimple.
        :rtype: str
        """
        return self._state_prov

    @state_prov.setter
    def state_prov(self, state_prov):
        """Sets the state_prov of this EventSimple.

        State or Province the event is located in.

        :param state_prov: The state_prov of this EventSimple.
        :type state_prov: str
        """

        self._state_prov = state_prov

    @property
    def year(self):
        """Gets the year of this EventSimple.

        Year the event data is for.

        :return: The year of this EventSimple.
        :rtype: int
        """
        return self._year

    @year.setter
    def year(self, year):
        """Sets the year of this EventSimple.

        Year the event data is for.

        :param year: The year of this EventSimple.
        :type year: int
        """
        if year is None:
            raise ValueError("Invalid value for `year`, must not be `None`")

        self._year = year
