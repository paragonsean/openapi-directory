# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.award_recipient import AwardRecipient
from openapi_server import util


class Award(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, award_type: int=None, event_key: str=None, name: str=None, recipient_list: List[AwardRecipient]=None, year: int=None):
        """Award - a model defined in OpenAPI

        :param award_type: The award_type of this Award.
        :param event_key: The event_key of this Award.
        :param name: The name of this Award.
        :param recipient_list: The recipient_list of this Award.
        :param year: The year of this Award.
        """
        self.openapi_types = {
            'award_type': int,
            'event_key': str,
            'name': str,
            'recipient_list': List[AwardRecipient],
            'year': int
        }

        self.attribute_map = {
            'award_type': 'award_type',
            'event_key': 'event_key',
            'name': 'name',
            'recipient_list': 'recipient_list',
            'year': 'year'
        }

        self._award_type = award_type
        self._event_key = event_key
        self._name = name
        self._recipient_list = recipient_list
        self._year = year

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Award':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Award of this Award.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def award_type(self):
        """Gets the award_type of this Award.

        Type of award given. See https://github.com/the-blue-alliance/the-blue-alliance/blob/master/consts/award_type.py#L6

        :return: The award_type of this Award.
        :rtype: int
        """
        return self._award_type

    @award_type.setter
    def award_type(self, award_type):
        """Sets the award_type of this Award.

        Type of award given. See https://github.com/the-blue-alliance/the-blue-alliance/blob/master/consts/award_type.py#L6

        :param award_type: The award_type of this Award.
        :type award_type: int
        """
        if award_type is None:
            raise ValueError("Invalid value for `award_type`, must not be `None`")

        self._award_type = award_type

    @property
    def event_key(self):
        """Gets the event_key of this Award.

        The event_key of the event the award was won at.

        :return: The event_key of this Award.
        :rtype: str
        """
        return self._event_key

    @event_key.setter
    def event_key(self, event_key):
        """Sets the event_key of this Award.

        The event_key of the event the award was won at.

        :param event_key: The event_key of this Award.
        :type event_key: str
        """
        if event_key is None:
            raise ValueError("Invalid value for `event_key`, must not be `None`")

        self._event_key = event_key

    @property
    def name(self):
        """Gets the name of this Award.

        The name of the award as provided by FIRST. May vary for the same award type.

        :return: The name of this Award.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Award.

        The name of the award as provided by FIRST. May vary for the same award type.

        :param name: The name of this Award.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def recipient_list(self):
        """Gets the recipient_list of this Award.

        A list of recipients of the award at the event. May have either a team_key or an awardee, both, or neither (in the case the award wasn't awarded at the event).

        :return: The recipient_list of this Award.
        :rtype: List[AwardRecipient]
        """
        return self._recipient_list

    @recipient_list.setter
    def recipient_list(self, recipient_list):
        """Sets the recipient_list of this Award.

        A list of recipients of the award at the event. May have either a team_key or an awardee, both, or neither (in the case the award wasn't awarded at the event).

        :param recipient_list: The recipient_list of this Award.
        :type recipient_list: List[AwardRecipient]
        """
        if recipient_list is None:
            raise ValueError("Invalid value for `recipient_list`, must not be `None`")

        self._recipient_list = recipient_list

    @property
    def year(self):
        """Gets the year of this Award.

        The year this award was won.

        :return: The year of this Award.
        :rtype: int
        """
        return self._year

    @year.setter
    def year(self, year):
        """Sets the year of this Award.

        The year this award was won.

        :param year: The year of this Award.
        :type year: int
        """
        if year is None:
            raise ValueError("Invalid value for `year`, must not be `None`")

        self._year = year
