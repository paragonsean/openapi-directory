# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DistrictRankingEventPointsInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, alliance_points: int=None, award_points: int=None, district_cmp: bool=None, elim_points: int=None, event_key: str=None, qual_points: int=None, total: int=None):
        """DistrictRankingEventPointsInner - a model defined in OpenAPI

        :param alliance_points: The alliance_points of this DistrictRankingEventPointsInner.
        :param award_points: The award_points of this DistrictRankingEventPointsInner.
        :param district_cmp: The district_cmp of this DistrictRankingEventPointsInner.
        :param elim_points: The elim_points of this DistrictRankingEventPointsInner.
        :param event_key: The event_key of this DistrictRankingEventPointsInner.
        :param qual_points: The qual_points of this DistrictRankingEventPointsInner.
        :param total: The total of this DistrictRankingEventPointsInner.
        """
        self.openapi_types = {
            'alliance_points': int,
            'award_points': int,
            'district_cmp': bool,
            'elim_points': int,
            'event_key': str,
            'qual_points': int,
            'total': int
        }

        self.attribute_map = {
            'alliance_points': 'alliance_points',
            'award_points': 'award_points',
            'district_cmp': 'district_cmp',
            'elim_points': 'elim_points',
            'event_key': 'event_key',
            'qual_points': 'qual_points',
            'total': 'total'
        }

        self._alliance_points = alliance_points
        self._award_points = award_points
        self._district_cmp = district_cmp
        self._elim_points = elim_points
        self._event_key = event_key
        self._qual_points = qual_points
        self._total = total

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DistrictRankingEventPointsInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The District_Ranking_event_points_inner of this DistrictRankingEventPointsInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def alliance_points(self):
        """Gets the alliance_points of this DistrictRankingEventPointsInner.

        Points awarded for alliance selection.

        :return: The alliance_points of this DistrictRankingEventPointsInner.
        :rtype: int
        """
        return self._alliance_points

    @alliance_points.setter
    def alliance_points(self, alliance_points):
        """Sets the alliance_points of this DistrictRankingEventPointsInner.

        Points awarded for alliance selection.

        :param alliance_points: The alliance_points of this DistrictRankingEventPointsInner.
        :type alliance_points: int
        """
        if alliance_points is None:
            raise ValueError("Invalid value for `alliance_points`, must not be `None`")

        self._alliance_points = alliance_points

    @property
    def award_points(self):
        """Gets the award_points of this DistrictRankingEventPointsInner.

        Points awarded for event awards.

        :return: The award_points of this DistrictRankingEventPointsInner.
        :rtype: int
        """
        return self._award_points

    @award_points.setter
    def award_points(self, award_points):
        """Sets the award_points of this DistrictRankingEventPointsInner.

        Points awarded for event awards.

        :param award_points: The award_points of this DistrictRankingEventPointsInner.
        :type award_points: int
        """
        if award_points is None:
            raise ValueError("Invalid value for `award_points`, must not be `None`")

        self._award_points = award_points

    @property
    def district_cmp(self):
        """Gets the district_cmp of this DistrictRankingEventPointsInner.

        `true` if this event is a District Championship event.

        :return: The district_cmp of this DistrictRankingEventPointsInner.
        :rtype: bool
        """
        return self._district_cmp

    @district_cmp.setter
    def district_cmp(self, district_cmp):
        """Sets the district_cmp of this DistrictRankingEventPointsInner.

        `true` if this event is a District Championship event.

        :param district_cmp: The district_cmp of this DistrictRankingEventPointsInner.
        :type district_cmp: bool
        """
        if district_cmp is None:
            raise ValueError("Invalid value for `district_cmp`, must not be `None`")

        self._district_cmp = district_cmp

    @property
    def elim_points(self):
        """Gets the elim_points of this DistrictRankingEventPointsInner.

        Points awarded for elimination match performance.

        :return: The elim_points of this DistrictRankingEventPointsInner.
        :rtype: int
        """
        return self._elim_points

    @elim_points.setter
    def elim_points(self, elim_points):
        """Sets the elim_points of this DistrictRankingEventPointsInner.

        Points awarded for elimination match performance.

        :param elim_points: The elim_points of this DistrictRankingEventPointsInner.
        :type elim_points: int
        """
        if elim_points is None:
            raise ValueError("Invalid value for `elim_points`, must not be `None`")

        self._elim_points = elim_points

    @property
    def event_key(self):
        """Gets the event_key of this DistrictRankingEventPointsInner.

        TBA Event key for this event.

        :return: The event_key of this DistrictRankingEventPointsInner.
        :rtype: str
        """
        return self._event_key

    @event_key.setter
    def event_key(self, event_key):
        """Sets the event_key of this DistrictRankingEventPointsInner.

        TBA Event key for this event.

        :param event_key: The event_key of this DistrictRankingEventPointsInner.
        :type event_key: str
        """
        if event_key is None:
            raise ValueError("Invalid value for `event_key`, must not be `None`")

        self._event_key = event_key

    @property
    def qual_points(self):
        """Gets the qual_points of this DistrictRankingEventPointsInner.

        Points awarded for qualification match performance.

        :return: The qual_points of this DistrictRankingEventPointsInner.
        :rtype: int
        """
        return self._qual_points

    @qual_points.setter
    def qual_points(self, qual_points):
        """Sets the qual_points of this DistrictRankingEventPointsInner.

        Points awarded for qualification match performance.

        :param qual_points: The qual_points of this DistrictRankingEventPointsInner.
        :type qual_points: int
        """
        if qual_points is None:
            raise ValueError("Invalid value for `qual_points`, must not be `None`")

        self._qual_points = qual_points

    @property
    def total(self):
        """Gets the total of this DistrictRankingEventPointsInner.

        Total points awarded at this event.

        :return: The total of this DistrictRankingEventPointsInner.
        :rtype: int
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this DistrictRankingEventPointsInner.

        Total points awarded at this event.

        :param total: The total of this DistrictRankingEventPointsInner.
        :type total: int
        """
        if total is None:
            raise ValueError("Invalid value for `total`, must not be `None`")

        self._total = total
