# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.team_event_status_alliance import TeamEventStatusAlliance
from openapi_server.models.team_event_status_playoff import TeamEventStatusPlayoff
from openapi_server.models.team_event_status_rank import TeamEventStatusRank
from openapi_server import util


class TeamEventStatus(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, alliance: TeamEventStatusAlliance=None, alliance_status_str: str=None, last_match_key: str=None, next_match_key: str=None, overall_status_str: str=None, playoff: TeamEventStatusPlayoff=None, playoff_status_str: str=None, qual: TeamEventStatusRank=None):
        """TeamEventStatus - a model defined in OpenAPI

        :param alliance: The alliance of this TeamEventStatus.
        :param alliance_status_str: The alliance_status_str of this TeamEventStatus.
        :param last_match_key: The last_match_key of this TeamEventStatus.
        :param next_match_key: The next_match_key of this TeamEventStatus.
        :param overall_status_str: The overall_status_str of this TeamEventStatus.
        :param playoff: The playoff of this TeamEventStatus.
        :param playoff_status_str: The playoff_status_str of this TeamEventStatus.
        :param qual: The qual of this TeamEventStatus.
        """
        self.openapi_types = {
            'alliance': TeamEventStatusAlliance,
            'alliance_status_str': str,
            'last_match_key': str,
            'next_match_key': str,
            'overall_status_str': str,
            'playoff': TeamEventStatusPlayoff,
            'playoff_status_str': str,
            'qual': TeamEventStatusRank
        }

        self.attribute_map = {
            'alliance': 'alliance',
            'alliance_status_str': 'alliance_status_str',
            'last_match_key': 'last_match_key',
            'next_match_key': 'next_match_key',
            'overall_status_str': 'overall_status_str',
            'playoff': 'playoff',
            'playoff_status_str': 'playoff_status_str',
            'qual': 'qual'
        }

        self._alliance = alliance
        self._alliance_status_str = alliance_status_str
        self._last_match_key = last_match_key
        self._next_match_key = next_match_key
        self._overall_status_str = overall_status_str
        self._playoff = playoff
        self._playoff_status_str = playoff_status_str
        self._qual = qual

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TeamEventStatus':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Team_Event_Status of this TeamEventStatus.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def alliance(self):
        """Gets the alliance of this TeamEventStatus.


        :return: The alliance of this TeamEventStatus.
        :rtype: TeamEventStatusAlliance
        """
        return self._alliance

    @alliance.setter
    def alliance(self, alliance):
        """Sets the alliance of this TeamEventStatus.


        :param alliance: The alliance of this TeamEventStatus.
        :type alliance: TeamEventStatusAlliance
        """

        self._alliance = alliance

    @property
    def alliance_status_str(self):
        """Gets the alliance_status_str of this TeamEventStatus.

        An HTML formatted string suitable for display to the user containing the team's alliance pick status.

        :return: The alliance_status_str of this TeamEventStatus.
        :rtype: str
        """
        return self._alliance_status_str

    @alliance_status_str.setter
    def alliance_status_str(self, alliance_status_str):
        """Sets the alliance_status_str of this TeamEventStatus.

        An HTML formatted string suitable for display to the user containing the team's alliance pick status.

        :param alliance_status_str: The alliance_status_str of this TeamEventStatus.
        :type alliance_status_str: str
        """

        self._alliance_status_str = alliance_status_str

    @property
    def last_match_key(self):
        """Gets the last_match_key of this TeamEventStatus.

        TBA match key for the last match the team played in at this event, or null.

        :return: The last_match_key of this TeamEventStatus.
        :rtype: str
        """
        return self._last_match_key

    @last_match_key.setter
    def last_match_key(self, last_match_key):
        """Sets the last_match_key of this TeamEventStatus.

        TBA match key for the last match the team played in at this event, or null.

        :param last_match_key: The last_match_key of this TeamEventStatus.
        :type last_match_key: str
        """

        self._last_match_key = last_match_key

    @property
    def next_match_key(self):
        """Gets the next_match_key of this TeamEventStatus.

        TBA match key for the next match the team is scheduled to play in at this event, or null.

        :return: The next_match_key of this TeamEventStatus.
        :rtype: str
        """
        return self._next_match_key

    @next_match_key.setter
    def next_match_key(self, next_match_key):
        """Sets the next_match_key of this TeamEventStatus.

        TBA match key for the next match the team is scheduled to play in at this event, or null.

        :param next_match_key: The next_match_key of this TeamEventStatus.
        :type next_match_key: str
        """

        self._next_match_key = next_match_key

    @property
    def overall_status_str(self):
        """Gets the overall_status_str of this TeamEventStatus.

        An HTML formatted string suitable for display to the user containing the team's overall status summary of the event.

        :return: The overall_status_str of this TeamEventStatus.
        :rtype: str
        """
        return self._overall_status_str

    @overall_status_str.setter
    def overall_status_str(self, overall_status_str):
        """Sets the overall_status_str of this TeamEventStatus.

        An HTML formatted string suitable for display to the user containing the team's overall status summary of the event.

        :param overall_status_str: The overall_status_str of this TeamEventStatus.
        :type overall_status_str: str
        """

        self._overall_status_str = overall_status_str

    @property
    def playoff(self):
        """Gets the playoff of this TeamEventStatus.


        :return: The playoff of this TeamEventStatus.
        :rtype: TeamEventStatusPlayoff
        """
        return self._playoff

    @playoff.setter
    def playoff(self, playoff):
        """Sets the playoff of this TeamEventStatus.


        :param playoff: The playoff of this TeamEventStatus.
        :type playoff: TeamEventStatusPlayoff
        """

        self._playoff = playoff

    @property
    def playoff_status_str(self):
        """Gets the playoff_status_str of this TeamEventStatus.

        An HTML formatter string suitable for display to the user containing the team's playoff status.

        :return: The playoff_status_str of this TeamEventStatus.
        :rtype: str
        """
        return self._playoff_status_str

    @playoff_status_str.setter
    def playoff_status_str(self, playoff_status_str):
        """Sets the playoff_status_str of this TeamEventStatus.

        An HTML formatter string suitable for display to the user containing the team's playoff status.

        :param playoff_status_str: The playoff_status_str of this TeamEventStatus.
        :type playoff_status_str: str
        """

        self._playoff_status_str = playoff_status_str

    @property
    def qual(self):
        """Gets the qual of this TeamEventStatus.


        :return: The qual of this TeamEventStatus.
        :rtype: TeamEventStatusRank
        """
        return self._qual

    @qual.setter
    def qual(self, qual):
        """Sets the qual of this TeamEventStatus.


        :param qual: The qual of this TeamEventStatus.
        :type qual: TeamEventStatusRank
        """

        self._qual = qual
