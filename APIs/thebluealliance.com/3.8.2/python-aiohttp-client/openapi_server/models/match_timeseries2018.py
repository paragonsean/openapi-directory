# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class MatchTimeseries2018(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, blue_auto_quest: int=None, blue_boost_count: int=None, blue_boost_played: int=None, blue_current_powerup: str=None, blue_face_the_boss: int=None, blue_force_count: int=None, blue_force_played: int=None, blue_levitate_count: int=None, blue_levitate_played: int=None, blue_powerup_time_remaining: str=None, blue_scale_owned: int=None, blue_score: int=None, blue_switch_owned: int=None, event_key: str=None, match_id: str=None, mode: str=None, play: int=None, red_auto_quest: int=None, red_boost_count: int=None, red_boost_played: int=None, red_current_powerup: str=None, red_face_the_boss: int=None, red_force_count: int=None, red_force_played: int=None, red_levitate_count: int=None, red_levitate_played: int=None, red_powerup_time_remaining: str=None, red_scale_owned: int=None, red_score: int=None, red_switch_owned: int=None, time_remaining: int=None):
        """MatchTimeseries2018 - a model defined in OpenAPI

        :param blue_auto_quest: The blue_auto_quest of this MatchTimeseries2018.
        :param blue_boost_count: The blue_boost_count of this MatchTimeseries2018.
        :param blue_boost_played: The blue_boost_played of this MatchTimeseries2018.
        :param blue_current_powerup: The blue_current_powerup of this MatchTimeseries2018.
        :param blue_face_the_boss: The blue_face_the_boss of this MatchTimeseries2018.
        :param blue_force_count: The blue_force_count of this MatchTimeseries2018.
        :param blue_force_played: The blue_force_played of this MatchTimeseries2018.
        :param blue_levitate_count: The blue_levitate_count of this MatchTimeseries2018.
        :param blue_levitate_played: The blue_levitate_played of this MatchTimeseries2018.
        :param blue_powerup_time_remaining: The blue_powerup_time_remaining of this MatchTimeseries2018.
        :param blue_scale_owned: The blue_scale_owned of this MatchTimeseries2018.
        :param blue_score: The blue_score of this MatchTimeseries2018.
        :param blue_switch_owned: The blue_switch_owned of this MatchTimeseries2018.
        :param event_key: The event_key of this MatchTimeseries2018.
        :param match_id: The match_id of this MatchTimeseries2018.
        :param mode: The mode of this MatchTimeseries2018.
        :param play: The play of this MatchTimeseries2018.
        :param red_auto_quest: The red_auto_quest of this MatchTimeseries2018.
        :param red_boost_count: The red_boost_count of this MatchTimeseries2018.
        :param red_boost_played: The red_boost_played of this MatchTimeseries2018.
        :param red_current_powerup: The red_current_powerup of this MatchTimeseries2018.
        :param red_face_the_boss: The red_face_the_boss of this MatchTimeseries2018.
        :param red_force_count: The red_force_count of this MatchTimeseries2018.
        :param red_force_played: The red_force_played of this MatchTimeseries2018.
        :param red_levitate_count: The red_levitate_count of this MatchTimeseries2018.
        :param red_levitate_played: The red_levitate_played of this MatchTimeseries2018.
        :param red_powerup_time_remaining: The red_powerup_time_remaining of this MatchTimeseries2018.
        :param red_scale_owned: The red_scale_owned of this MatchTimeseries2018.
        :param red_score: The red_score of this MatchTimeseries2018.
        :param red_switch_owned: The red_switch_owned of this MatchTimeseries2018.
        :param time_remaining: The time_remaining of this MatchTimeseries2018.
        """
        self.openapi_types = {
            'blue_auto_quest': int,
            'blue_boost_count': int,
            'blue_boost_played': int,
            'blue_current_powerup': str,
            'blue_face_the_boss': int,
            'blue_force_count': int,
            'blue_force_played': int,
            'blue_levitate_count': int,
            'blue_levitate_played': int,
            'blue_powerup_time_remaining': str,
            'blue_scale_owned': int,
            'blue_score': int,
            'blue_switch_owned': int,
            'event_key': str,
            'match_id': str,
            'mode': str,
            'play': int,
            'red_auto_quest': int,
            'red_boost_count': int,
            'red_boost_played': int,
            'red_current_powerup': str,
            'red_face_the_boss': int,
            'red_force_count': int,
            'red_force_played': int,
            'red_levitate_count': int,
            'red_levitate_played': int,
            'red_powerup_time_remaining': str,
            'red_scale_owned': int,
            'red_score': int,
            'red_switch_owned': int,
            'time_remaining': int
        }

        self.attribute_map = {
            'blue_auto_quest': 'blue_auto_quest',
            'blue_boost_count': 'blue_boost_count',
            'blue_boost_played': 'blue_boost_played',
            'blue_current_powerup': 'blue_current_powerup',
            'blue_face_the_boss': 'blue_face_the_boss',
            'blue_force_count': 'blue_force_count',
            'blue_force_played': 'blue_force_played',
            'blue_levitate_count': 'blue_levitate_count',
            'blue_levitate_played': 'blue_levitate_played',
            'blue_powerup_time_remaining': 'blue_powerup_time_remaining',
            'blue_scale_owned': 'blue_scale_owned',
            'blue_score': 'blue_score',
            'blue_switch_owned': 'blue_switch_owned',
            'event_key': 'event_key',
            'match_id': 'match_id',
            'mode': 'mode',
            'play': 'play',
            'red_auto_quest': 'red_auto_quest',
            'red_boost_count': 'red_boost_count',
            'red_boost_played': 'red_boost_played',
            'red_current_powerup': 'red_current_powerup',
            'red_face_the_boss': 'red_face_the_boss',
            'red_force_count': 'red_force_count',
            'red_force_played': 'red_force_played',
            'red_levitate_count': 'red_levitate_count',
            'red_levitate_played': 'red_levitate_played',
            'red_powerup_time_remaining': 'red_powerup_time_remaining',
            'red_scale_owned': 'red_scale_owned',
            'red_score': 'red_score',
            'red_switch_owned': 'red_switch_owned',
            'time_remaining': 'time_remaining'
        }

        self._blue_auto_quest = blue_auto_quest
        self._blue_boost_count = blue_boost_count
        self._blue_boost_played = blue_boost_played
        self._blue_current_powerup = blue_current_powerup
        self._blue_face_the_boss = blue_face_the_boss
        self._blue_force_count = blue_force_count
        self._blue_force_played = blue_force_played
        self._blue_levitate_count = blue_levitate_count
        self._blue_levitate_played = blue_levitate_played
        self._blue_powerup_time_remaining = blue_powerup_time_remaining
        self._blue_scale_owned = blue_scale_owned
        self._blue_score = blue_score
        self._blue_switch_owned = blue_switch_owned
        self._event_key = event_key
        self._match_id = match_id
        self._mode = mode
        self._play = play
        self._red_auto_quest = red_auto_quest
        self._red_boost_count = red_boost_count
        self._red_boost_played = red_boost_played
        self._red_current_powerup = red_current_powerup
        self._red_face_the_boss = red_face_the_boss
        self._red_force_count = red_force_count
        self._red_force_played = red_force_played
        self._red_levitate_count = red_levitate_count
        self._red_levitate_played = red_levitate_played
        self._red_powerup_time_remaining = red_powerup_time_remaining
        self._red_scale_owned = red_scale_owned
        self._red_score = red_score
        self._red_switch_owned = red_switch_owned
        self._time_remaining = time_remaining

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MatchTimeseries2018':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Match_Timeseries_2018 of this MatchTimeseries2018.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def blue_auto_quest(self):
        """Gets the blue_auto_quest of this MatchTimeseries2018.

        1 if the blue alliance is credited with the AUTO QUEST, 0 if not.

        :return: The blue_auto_quest of this MatchTimeseries2018.
        :rtype: int
        """
        return self._blue_auto_quest

    @blue_auto_quest.setter
    def blue_auto_quest(self, blue_auto_quest):
        """Sets the blue_auto_quest of this MatchTimeseries2018.

        1 if the blue alliance is credited with the AUTO QUEST, 0 if not.

        :param blue_auto_quest: The blue_auto_quest of this MatchTimeseries2018.
        :type blue_auto_quest: int
        """

        self._blue_auto_quest = blue_auto_quest

    @property
    def blue_boost_count(self):
        """Gets the blue_boost_count of this MatchTimeseries2018.

        Number of POWER CUBES in the BOOST section of the blue alliance VAULT.

        :return: The blue_boost_count of this MatchTimeseries2018.
        :rtype: int
        """
        return self._blue_boost_count

    @blue_boost_count.setter
    def blue_boost_count(self, blue_boost_count):
        """Sets the blue_boost_count of this MatchTimeseries2018.

        Number of POWER CUBES in the BOOST section of the blue alliance VAULT.

        :param blue_boost_count: The blue_boost_count of this MatchTimeseries2018.
        :type blue_boost_count: int
        """

        self._blue_boost_count = blue_boost_count

    @property
    def blue_boost_played(self):
        """Gets the blue_boost_played of this MatchTimeseries2018.

        Returns 1 if the blue alliance BOOST was played, or 0 if not played.

        :return: The blue_boost_played of this MatchTimeseries2018.
        :rtype: int
        """
        return self._blue_boost_played

    @blue_boost_played.setter
    def blue_boost_played(self, blue_boost_played):
        """Sets the blue_boost_played of this MatchTimeseries2018.

        Returns 1 if the blue alliance BOOST was played, or 0 if not played.

        :param blue_boost_played: The blue_boost_played of this MatchTimeseries2018.
        :type blue_boost_played: int
        """

        self._blue_boost_played = blue_boost_played

    @property
    def blue_current_powerup(self):
        """Gets the blue_current_powerup of this MatchTimeseries2018.

        Name of the current blue alliance POWER UP being played, or `null`.

        :return: The blue_current_powerup of this MatchTimeseries2018.
        :rtype: str
        """
        return self._blue_current_powerup

    @blue_current_powerup.setter
    def blue_current_powerup(self, blue_current_powerup):
        """Sets the blue_current_powerup of this MatchTimeseries2018.

        Name of the current blue alliance POWER UP being played, or `null`.

        :param blue_current_powerup: The blue_current_powerup of this MatchTimeseries2018.
        :type blue_current_powerup: str
        """

        self._blue_current_powerup = blue_current_powerup

    @property
    def blue_face_the_boss(self):
        """Gets the blue_face_the_boss of this MatchTimeseries2018.

        1 if the blue alliance is credited with FACING THE BOSS, 0 if not.

        :return: The blue_face_the_boss of this MatchTimeseries2018.
        :rtype: int
        """
        return self._blue_face_the_boss

    @blue_face_the_boss.setter
    def blue_face_the_boss(self, blue_face_the_boss):
        """Sets the blue_face_the_boss of this MatchTimeseries2018.

        1 if the blue alliance is credited with FACING THE BOSS, 0 if not.

        :param blue_face_the_boss: The blue_face_the_boss of this MatchTimeseries2018.
        :type blue_face_the_boss: int
        """

        self._blue_face_the_boss = blue_face_the_boss

    @property
    def blue_force_count(self):
        """Gets the blue_force_count of this MatchTimeseries2018.

        Number of POWER CUBES in the FORCE section of the blue alliance VAULT.

        :return: The blue_force_count of this MatchTimeseries2018.
        :rtype: int
        """
        return self._blue_force_count

    @blue_force_count.setter
    def blue_force_count(self, blue_force_count):
        """Sets the blue_force_count of this MatchTimeseries2018.

        Number of POWER CUBES in the FORCE section of the blue alliance VAULT.

        :param blue_force_count: The blue_force_count of this MatchTimeseries2018.
        :type blue_force_count: int
        """

        self._blue_force_count = blue_force_count

    @property
    def blue_force_played(self):
        """Gets the blue_force_played of this MatchTimeseries2018.

        Returns 1 if the blue alliance FORCE was played, or 0 if not played.

        :return: The blue_force_played of this MatchTimeseries2018.
        :rtype: int
        """
        return self._blue_force_played

    @blue_force_played.setter
    def blue_force_played(self, blue_force_played):
        """Sets the blue_force_played of this MatchTimeseries2018.

        Returns 1 if the blue alliance FORCE was played, or 0 if not played.

        :param blue_force_played: The blue_force_played of this MatchTimeseries2018.
        :type blue_force_played: int
        """

        self._blue_force_played = blue_force_played

    @property
    def blue_levitate_count(self):
        """Gets the blue_levitate_count of this MatchTimeseries2018.

        Number of POWER CUBES in the LEVITATE section of the blue alliance VAULT.

        :return: The blue_levitate_count of this MatchTimeseries2018.
        :rtype: int
        """
        return self._blue_levitate_count

    @blue_levitate_count.setter
    def blue_levitate_count(self, blue_levitate_count):
        """Sets the blue_levitate_count of this MatchTimeseries2018.

        Number of POWER CUBES in the LEVITATE section of the blue alliance VAULT.

        :param blue_levitate_count: The blue_levitate_count of this MatchTimeseries2018.
        :type blue_levitate_count: int
        """

        self._blue_levitate_count = blue_levitate_count

    @property
    def blue_levitate_played(self):
        """Gets the blue_levitate_played of this MatchTimeseries2018.

        Returns 1 if the blue alliance LEVITATE was played, or 0 if not played.

        :return: The blue_levitate_played of this MatchTimeseries2018.
        :rtype: int
        """
        return self._blue_levitate_played

    @blue_levitate_played.setter
    def blue_levitate_played(self, blue_levitate_played):
        """Sets the blue_levitate_played of this MatchTimeseries2018.

        Returns 1 if the blue alliance LEVITATE was played, or 0 if not played.

        :param blue_levitate_played: The blue_levitate_played of this MatchTimeseries2018.
        :type blue_levitate_played: int
        """

        self._blue_levitate_played = blue_levitate_played

    @property
    def blue_powerup_time_remaining(self):
        """Gets the blue_powerup_time_remaining of this MatchTimeseries2018.

        Number of seconds remaining in the blue alliance POWER UP time, or 0 if none is active.

        :return: The blue_powerup_time_remaining of this MatchTimeseries2018.
        :rtype: str
        """
        return self._blue_powerup_time_remaining

    @blue_powerup_time_remaining.setter
    def blue_powerup_time_remaining(self, blue_powerup_time_remaining):
        """Sets the blue_powerup_time_remaining of this MatchTimeseries2018.

        Number of seconds remaining in the blue alliance POWER UP time, or 0 if none is active.

        :param blue_powerup_time_remaining: The blue_powerup_time_remaining of this MatchTimeseries2018.
        :type blue_powerup_time_remaining: str
        """

        self._blue_powerup_time_remaining = blue_powerup_time_remaining

    @property
    def blue_scale_owned(self):
        """Gets the blue_scale_owned of this MatchTimeseries2018.

        1 if the blue alliance owns the SCALE, 0 if not.

        :return: The blue_scale_owned of this MatchTimeseries2018.
        :rtype: int
        """
        return self._blue_scale_owned

    @blue_scale_owned.setter
    def blue_scale_owned(self, blue_scale_owned):
        """Sets the blue_scale_owned of this MatchTimeseries2018.

        1 if the blue alliance owns the SCALE, 0 if not.

        :param blue_scale_owned: The blue_scale_owned of this MatchTimeseries2018.
        :type blue_scale_owned: int
        """

        self._blue_scale_owned = blue_scale_owned

    @property
    def blue_score(self):
        """Gets the blue_score of this MatchTimeseries2018.

        Current score for the blue alliance.

        :return: The blue_score of this MatchTimeseries2018.
        :rtype: int
        """
        return self._blue_score

    @blue_score.setter
    def blue_score(self, blue_score):
        """Sets the blue_score of this MatchTimeseries2018.

        Current score for the blue alliance.

        :param blue_score: The blue_score of this MatchTimeseries2018.
        :type blue_score: int
        """

        self._blue_score = blue_score

    @property
    def blue_switch_owned(self):
        """Gets the blue_switch_owned of this MatchTimeseries2018.

        1 if the blue alliance owns their SWITCH, 0 if not.

        :return: The blue_switch_owned of this MatchTimeseries2018.
        :rtype: int
        """
        return self._blue_switch_owned

    @blue_switch_owned.setter
    def blue_switch_owned(self, blue_switch_owned):
        """Sets the blue_switch_owned of this MatchTimeseries2018.

        1 if the blue alliance owns their SWITCH, 0 if not.

        :param blue_switch_owned: The blue_switch_owned of this MatchTimeseries2018.
        :type blue_switch_owned: int
        """

        self._blue_switch_owned = blue_switch_owned

    @property
    def event_key(self):
        """Gets the event_key of this MatchTimeseries2018.

        TBA event key with the format yyyy[EVENT_CODE], where yyyy is the year, and EVENT_CODE is the event code of the event.

        :return: The event_key of this MatchTimeseries2018.
        :rtype: str
        """
        return self._event_key

    @event_key.setter
    def event_key(self, event_key):
        """Sets the event_key of this MatchTimeseries2018.

        TBA event key with the format yyyy[EVENT_CODE], where yyyy is the year, and EVENT_CODE is the event code of the event.

        :param event_key: The event_key of this MatchTimeseries2018.
        :type event_key: str
        """

        self._event_key = event_key

    @property
    def match_id(self):
        """Gets the match_id of this MatchTimeseries2018.

        Match ID consisting of the level, match number, and set number, eg `qm45` or `f1m1`.

        :return: The match_id of this MatchTimeseries2018.
        :rtype: str
        """
        return self._match_id

    @match_id.setter
    def match_id(self, match_id):
        """Sets the match_id of this MatchTimeseries2018.

        Match ID consisting of the level, match number, and set number, eg `qm45` or `f1m1`.

        :param match_id: The match_id of this MatchTimeseries2018.
        :type match_id: str
        """

        self._match_id = match_id

    @property
    def mode(self):
        """Gets the mode of this MatchTimeseries2018.

        Current mode of play, can be `pre_match`, `auto`, `telop`, or `post_match`.

        :return: The mode of this MatchTimeseries2018.
        :rtype: str
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this MatchTimeseries2018.

        Current mode of play, can be `pre_match`, `auto`, `telop`, or `post_match`.

        :param mode: The mode of this MatchTimeseries2018.
        :type mode: str
        """

        self._mode = mode

    @property
    def play(self):
        """Gets the play of this MatchTimeseries2018.


        :return: The play of this MatchTimeseries2018.
        :rtype: int
        """
        return self._play

    @play.setter
    def play(self, play):
        """Sets the play of this MatchTimeseries2018.


        :param play: The play of this MatchTimeseries2018.
        :type play: int
        """

        self._play = play

    @property
    def red_auto_quest(self):
        """Gets the red_auto_quest of this MatchTimeseries2018.

        1 if the red alliance is credited with the AUTO QUEST, 0 if not.

        :return: The red_auto_quest of this MatchTimeseries2018.
        :rtype: int
        """
        return self._red_auto_quest

    @red_auto_quest.setter
    def red_auto_quest(self, red_auto_quest):
        """Sets the red_auto_quest of this MatchTimeseries2018.

        1 if the red alliance is credited with the AUTO QUEST, 0 if not.

        :param red_auto_quest: The red_auto_quest of this MatchTimeseries2018.
        :type red_auto_quest: int
        """

        self._red_auto_quest = red_auto_quest

    @property
    def red_boost_count(self):
        """Gets the red_boost_count of this MatchTimeseries2018.

        Number of POWER CUBES in the BOOST section of the red alliance VAULT.

        :return: The red_boost_count of this MatchTimeseries2018.
        :rtype: int
        """
        return self._red_boost_count

    @red_boost_count.setter
    def red_boost_count(self, red_boost_count):
        """Sets the red_boost_count of this MatchTimeseries2018.

        Number of POWER CUBES in the BOOST section of the red alliance VAULT.

        :param red_boost_count: The red_boost_count of this MatchTimeseries2018.
        :type red_boost_count: int
        """

        self._red_boost_count = red_boost_count

    @property
    def red_boost_played(self):
        """Gets the red_boost_played of this MatchTimeseries2018.

        Returns 1 if the red alliance BOOST was played, or 0 if not played.

        :return: The red_boost_played of this MatchTimeseries2018.
        :rtype: int
        """
        return self._red_boost_played

    @red_boost_played.setter
    def red_boost_played(self, red_boost_played):
        """Sets the red_boost_played of this MatchTimeseries2018.

        Returns 1 if the red alliance BOOST was played, or 0 if not played.

        :param red_boost_played: The red_boost_played of this MatchTimeseries2018.
        :type red_boost_played: int
        """

        self._red_boost_played = red_boost_played

    @property
    def red_current_powerup(self):
        """Gets the red_current_powerup of this MatchTimeseries2018.

        Name of the current red alliance POWER UP being played, or `null`.

        :return: The red_current_powerup of this MatchTimeseries2018.
        :rtype: str
        """
        return self._red_current_powerup

    @red_current_powerup.setter
    def red_current_powerup(self, red_current_powerup):
        """Sets the red_current_powerup of this MatchTimeseries2018.

        Name of the current red alliance POWER UP being played, or `null`.

        :param red_current_powerup: The red_current_powerup of this MatchTimeseries2018.
        :type red_current_powerup: str
        """

        self._red_current_powerup = red_current_powerup

    @property
    def red_face_the_boss(self):
        """Gets the red_face_the_boss of this MatchTimeseries2018.

        1 if the red alliance is credited with FACING THE BOSS, 0 if not.

        :return: The red_face_the_boss of this MatchTimeseries2018.
        :rtype: int
        """
        return self._red_face_the_boss

    @red_face_the_boss.setter
    def red_face_the_boss(self, red_face_the_boss):
        """Sets the red_face_the_boss of this MatchTimeseries2018.

        1 if the red alliance is credited with FACING THE BOSS, 0 if not.

        :param red_face_the_boss: The red_face_the_boss of this MatchTimeseries2018.
        :type red_face_the_boss: int
        """

        self._red_face_the_boss = red_face_the_boss

    @property
    def red_force_count(self):
        """Gets the red_force_count of this MatchTimeseries2018.

        Number of POWER CUBES in the FORCE section of the red alliance VAULT.

        :return: The red_force_count of this MatchTimeseries2018.
        :rtype: int
        """
        return self._red_force_count

    @red_force_count.setter
    def red_force_count(self, red_force_count):
        """Sets the red_force_count of this MatchTimeseries2018.

        Number of POWER CUBES in the FORCE section of the red alliance VAULT.

        :param red_force_count: The red_force_count of this MatchTimeseries2018.
        :type red_force_count: int
        """

        self._red_force_count = red_force_count

    @property
    def red_force_played(self):
        """Gets the red_force_played of this MatchTimeseries2018.

        Returns 1 if the red alliance FORCE was played, or 0 if not played.

        :return: The red_force_played of this MatchTimeseries2018.
        :rtype: int
        """
        return self._red_force_played

    @red_force_played.setter
    def red_force_played(self, red_force_played):
        """Sets the red_force_played of this MatchTimeseries2018.

        Returns 1 if the red alliance FORCE was played, or 0 if not played.

        :param red_force_played: The red_force_played of this MatchTimeseries2018.
        :type red_force_played: int
        """

        self._red_force_played = red_force_played

    @property
    def red_levitate_count(self):
        """Gets the red_levitate_count of this MatchTimeseries2018.

        Number of POWER CUBES in the LEVITATE section of the red alliance VAULT.

        :return: The red_levitate_count of this MatchTimeseries2018.
        :rtype: int
        """
        return self._red_levitate_count

    @red_levitate_count.setter
    def red_levitate_count(self, red_levitate_count):
        """Sets the red_levitate_count of this MatchTimeseries2018.

        Number of POWER CUBES in the LEVITATE section of the red alliance VAULT.

        :param red_levitate_count: The red_levitate_count of this MatchTimeseries2018.
        :type red_levitate_count: int
        """

        self._red_levitate_count = red_levitate_count

    @property
    def red_levitate_played(self):
        """Gets the red_levitate_played of this MatchTimeseries2018.

        Returns 1 if the red alliance LEVITATE was played, or 0 if not played.

        :return: The red_levitate_played of this MatchTimeseries2018.
        :rtype: int
        """
        return self._red_levitate_played

    @red_levitate_played.setter
    def red_levitate_played(self, red_levitate_played):
        """Sets the red_levitate_played of this MatchTimeseries2018.

        Returns 1 if the red alliance LEVITATE was played, or 0 if not played.

        :param red_levitate_played: The red_levitate_played of this MatchTimeseries2018.
        :type red_levitate_played: int
        """

        self._red_levitate_played = red_levitate_played

    @property
    def red_powerup_time_remaining(self):
        """Gets the red_powerup_time_remaining of this MatchTimeseries2018.

        Number of seconds remaining in the red alliance POWER UP time, or 0 if none is active.

        :return: The red_powerup_time_remaining of this MatchTimeseries2018.
        :rtype: str
        """
        return self._red_powerup_time_remaining

    @red_powerup_time_remaining.setter
    def red_powerup_time_remaining(self, red_powerup_time_remaining):
        """Sets the red_powerup_time_remaining of this MatchTimeseries2018.

        Number of seconds remaining in the red alliance POWER UP time, or 0 if none is active.

        :param red_powerup_time_remaining: The red_powerup_time_remaining of this MatchTimeseries2018.
        :type red_powerup_time_remaining: str
        """

        self._red_powerup_time_remaining = red_powerup_time_remaining

    @property
    def red_scale_owned(self):
        """Gets the red_scale_owned of this MatchTimeseries2018.

        1 if the red alliance owns the SCALE, 0 if not.

        :return: The red_scale_owned of this MatchTimeseries2018.
        :rtype: int
        """
        return self._red_scale_owned

    @red_scale_owned.setter
    def red_scale_owned(self, red_scale_owned):
        """Sets the red_scale_owned of this MatchTimeseries2018.

        1 if the red alliance owns the SCALE, 0 if not.

        :param red_scale_owned: The red_scale_owned of this MatchTimeseries2018.
        :type red_scale_owned: int
        """

        self._red_scale_owned = red_scale_owned

    @property
    def red_score(self):
        """Gets the red_score of this MatchTimeseries2018.

        Current score for the red alliance.

        :return: The red_score of this MatchTimeseries2018.
        :rtype: int
        """
        return self._red_score

    @red_score.setter
    def red_score(self, red_score):
        """Sets the red_score of this MatchTimeseries2018.

        Current score for the red alliance.

        :param red_score: The red_score of this MatchTimeseries2018.
        :type red_score: int
        """

        self._red_score = red_score

    @property
    def red_switch_owned(self):
        """Gets the red_switch_owned of this MatchTimeseries2018.

        1 if the red alliance owns their SWITCH, 0 if not.

        :return: The red_switch_owned of this MatchTimeseries2018.
        :rtype: int
        """
        return self._red_switch_owned

    @red_switch_owned.setter
    def red_switch_owned(self, red_switch_owned):
        """Sets the red_switch_owned of this MatchTimeseries2018.

        1 if the red alliance owns their SWITCH, 0 if not.

        :param red_switch_owned: The red_switch_owned of this MatchTimeseries2018.
        :type red_switch_owned: int
        """

        self._red_switch_owned = red_switch_owned

    @property
    def time_remaining(self):
        """Gets the time_remaining of this MatchTimeseries2018.

        Amount of time remaining in the match, only valid during `auto` and `teleop` modes.

        :return: The time_remaining of this MatchTimeseries2018.
        :rtype: int
        """
        return self._time_remaining

    @time_remaining.setter
    def time_remaining(self, time_remaining):
        """Sets the time_remaining of this MatchTimeseries2018.

        Amount of time remaining in the match, only valid during `auto` and `teleop` modes.

        :param time_remaining: The time_remaining of this MatchTimeseries2018.
        :type time_remaining: int
        """

        self._time_remaining = time_remaining
