# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class MatchScoreBreakdown2023AllianceLinksInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, nodes: List[str]=None, row: str=None):
        """MatchScoreBreakdown2023AllianceLinksInner - a model defined in OpenAPI

        :param nodes: The nodes of this MatchScoreBreakdown2023AllianceLinksInner.
        :param row: The row of this MatchScoreBreakdown2023AllianceLinksInner.
        """
        self.openapi_types = {
            'nodes': List[str],
            'row': str
        }

        self.attribute_map = {
            'nodes': 'nodes',
            'row': 'row'
        }

        self._nodes = nodes
        self._row = row

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MatchScoreBreakdown2023AllianceLinksInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Match_Score_Breakdown_2023_Alliance_links_inner of this MatchScoreBreakdown2023AllianceLinksInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def nodes(self):
        """Gets the nodes of this MatchScoreBreakdown2023AllianceLinksInner.


        :return: The nodes of this MatchScoreBreakdown2023AllianceLinksInner.
        :rtype: List[str]
        """
        return self._nodes

    @nodes.setter
    def nodes(self, nodes):
        """Sets the nodes of this MatchScoreBreakdown2023AllianceLinksInner.


        :param nodes: The nodes of this MatchScoreBreakdown2023AllianceLinksInner.
        :type nodes: List[str]
        """
        allowed_values = ["None", "Cone", "Cube"]  # noqa: E501
        if not set(nodes).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `nodes` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(nodes) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._nodes = nodes

    @property
    def row(self):
        """Gets the row of this MatchScoreBreakdown2023AllianceLinksInner.


        :return: The row of this MatchScoreBreakdown2023AllianceLinksInner.
        :rtype: str
        """
        return self._row

    @row.setter
    def row(self, row):
        """Sets the row of this MatchScoreBreakdown2023AllianceLinksInner.


        :param row: The row of this MatchScoreBreakdown2023AllianceLinksInner.
        :type row: str
        """
        allowed_values = ["Bottom", "Mid", "Top"]  # noqa: E501
        if row not in allowed_values:
            raise ValueError(
                "Invalid value for `row` ({0}), must be one of {1}"
                .format(row, allowed_values)
            )

        self._row = row
