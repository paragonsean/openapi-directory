/*
 * The Blue Alliance API v3
 * # Overview    Information and statistics about FIRST Robotics Competition teams and events.   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).
 *
 * The version of the OpenAPI document: 3.8.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Match;
import org.openapitools.client.model.MatchSimple;
import org.openapitools.client.model.Zebra;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for MatchApi
 */
@Disabled
public class MatchApiTest {

    private final MatchApi api = new MatchApi();

    /**
     * Gets an array of Match Keys for the given event key that have timeseries data. Returns an empty array if no matches have timeseries data. *WARNING:* This is *not* official data, and is subject to a significant possibility of error, or missing data. Do not rely on this data for any purpose. In fact, pretend we made it up. *WARNING:* This endpoint and corresponding data models are under *active development* and may change at any time, including in breaking ways.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEventMatchTimeseries_0Test() throws ApiException {
        String eventKey = null;
        String ifNoneMatch = null;
        List<String> response = api.getEventMatchTimeseries_0(eventKey, ifNoneMatch);
        // TODO: test validations
    }

    /**
     * Gets a list of match keys for the given event.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEventMatchesKeys_0Test() throws ApiException {
        String eventKey = null;
        String ifNoneMatch = null;
        List<String> response = api.getEventMatchesKeys_0(eventKey, ifNoneMatch);
        // TODO: test validations
    }

    /**
     * Gets a short-form list of matches for the given event.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEventMatchesSimple_0Test() throws ApiException {
        String eventKey = null;
        String ifNoneMatch = null;
        List<MatchSimple> response = api.getEventMatchesSimple_0(eventKey, ifNoneMatch);
        // TODO: test validations
    }

    /**
     * Gets a list of matches for the given event.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEventMatches_0Test() throws ApiException {
        String eventKey = null;
        String ifNoneMatch = null;
        List<Match> response = api.getEventMatches_0(eventKey, ifNoneMatch);
        // TODO: test validations
    }

    /**
     * Gets a &#x60;Match&#x60; object for the given match key.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMatchTest() throws ApiException {
        String matchKey = null;
        String ifNoneMatch = null;
        Match response = api.getMatch(matchKey, ifNoneMatch);
        // TODO: test validations
    }

    /**
     * Gets a short-form &#x60;Match&#x60; object for the given match key.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMatchSimpleTest() throws ApiException {
        String matchKey = null;
        String ifNoneMatch = null;
        MatchSimple response = api.getMatchSimple(matchKey, ifNoneMatch);
        // TODO: test validations
    }

    /**
     * Gets an array of game-specific Match Timeseries objects for the given match key or an empty array if not available. *WARNING:* This is *not* official data, and is subject to a significant possibility of error, or missing data. Do not rely on this data for any purpose. In fact, pretend we made it up. *WARNING:* This endpoint and corresponding data models are under *active development* and may change at any time, including in breaking ways.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMatchTimeseriesTest() throws ApiException {
        String matchKey = null;
        String ifNoneMatch = null;
        List<Object> response = api.getMatchTimeseries(matchKey, ifNoneMatch);
        // TODO: test validations
    }

    /**
     * Gets Zebra MotionWorks data for a Match for the given match key.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMatchZebraTest() throws ApiException {
        String matchKey = null;
        String ifNoneMatch = null;
        Zebra response = api.getMatchZebra(matchKey, ifNoneMatch);
        // TODO: test validations
    }

    /**
     * Gets a list of match keys for matches for the given team and event.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTeamEventMatchesKeys_1Test() throws ApiException {
        String teamKey = null;
        String eventKey = null;
        String ifNoneMatch = null;
        List<String> response = api.getTeamEventMatchesKeys_1(teamKey, eventKey, ifNoneMatch);
        // TODO: test validations
    }

    /**
     * Gets a short-form list of matches for the given team and event.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTeamEventMatchesSimple_1Test() throws ApiException {
        String teamKey = null;
        String eventKey = null;
        String ifNoneMatch = null;
        List<Match> response = api.getTeamEventMatchesSimple_1(teamKey, eventKey, ifNoneMatch);
        // TODO: test validations
    }

    /**
     * Gets a list of matches for the given team and event.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTeamEventMatches_1Test() throws ApiException {
        String teamKey = null;
        String eventKey = null;
        String ifNoneMatch = null;
        List<Match> response = api.getTeamEventMatches_1(teamKey, eventKey, ifNoneMatch);
        // TODO: test validations
    }

    /**
     * Gets a list of match keys for matches for the given team and year.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTeamMatchesByYearKeys_0Test() throws ApiException {
        String teamKey = null;
        Integer year = null;
        String ifNoneMatch = null;
        List<String> response = api.getTeamMatchesByYearKeys_0(teamKey, year, ifNoneMatch);
        // TODO: test validations
    }

    /**
     * Gets a short-form list of matches for the given team and year.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTeamMatchesByYearSimple_0Test() throws ApiException {
        String teamKey = null;
        Integer year = null;
        String ifNoneMatch = null;
        List<MatchSimple> response = api.getTeamMatchesByYearSimple_0(teamKey, year, ifNoneMatch);
        // TODO: test validations
    }

    /**
     * Gets a list of matches for the given team and year.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTeamMatchesByYear_0Test() throws ApiException {
        String teamKey = null;
        Integer year = null;
        String ifNoneMatch = null;
        List<Match> response = api.getTeamMatchesByYear_0(teamKey, year, ifNoneMatch);
        // TODO: test validations
    }

}
