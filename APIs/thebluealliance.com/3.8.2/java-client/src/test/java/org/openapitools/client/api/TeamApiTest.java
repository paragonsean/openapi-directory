/*
 * The Blue Alliance API v3
 * # Overview    Information and statistics about FIRST Robotics Competition teams and events.   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).
 *
 * The version of the OpenAPI document: 3.8.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Award;
import org.openapitools.client.model.DistrictList;
import org.openapitools.client.model.DistrictRanking;
import org.openapitools.client.model.Event;
import org.openapitools.client.model.EventSimple;
import org.openapitools.client.model.Match;
import org.openapitools.client.model.MatchSimple;
import org.openapitools.client.model.Media;
import org.openapitools.client.model.Team;
import org.openapitools.client.model.TeamEventStatus;
import org.openapitools.client.model.TeamRobot;
import org.openapitools.client.model.TeamSimple;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TeamApi
 */
@Disabled
public class TeamApiTest {

    private final TeamApi api = new TeamApi();

    /**
     * Gets a list of team district rankings for the given district.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDistrictRankings_0Test() throws ApiException {
        String districtKey = null;
        String ifNoneMatch = null;
        List<DistrictRanking> response = api.getDistrictRankings_0(districtKey, ifNoneMatch);
        // TODO: test validations
    }

    /**
     * Gets a list of &#x60;Team&#x60; objects that competed in events in the given district.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDistrictTeamsKeys_0Test() throws ApiException {
        String districtKey = null;
        String ifNoneMatch = null;
        List<String> response = api.getDistrictTeamsKeys_0(districtKey, ifNoneMatch);
        // TODO: test validations
    }

    /**
     * Gets a short-form list of &#x60;Team&#x60; objects that competed in events in the given district.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDistrictTeamsSimple_0Test() throws ApiException {
        String districtKey = null;
        String ifNoneMatch = null;
        List<TeamSimple> response = api.getDistrictTeamsSimple_0(districtKey, ifNoneMatch);
        // TODO: test validations
    }

    /**
     * Gets a list of &#x60;Team&#x60; objects that competed in events in the given district.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDistrictTeams_0Test() throws ApiException {
        String districtKey = null;
        String ifNoneMatch = null;
        List<Team> response = api.getDistrictTeams_0(districtKey, ifNoneMatch);
        // TODO: test validations
    }

    /**
     * Gets a list of &#x60;Team&#x60; keys that competed in the given event.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEventTeamsKeys_0Test() throws ApiException {
        String eventKey = null;
        String ifNoneMatch = null;
        List<String> response = api.getEventTeamsKeys_0(eventKey, ifNoneMatch);
        // TODO: test validations
    }

    /**
     * Gets a short-form list of &#x60;Team&#x60; objects that competed in the given event.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEventTeamsSimple_0Test() throws ApiException {
        String eventKey = null;
        String ifNoneMatch = null;
        List<TeamSimple> response = api.getEventTeamsSimple_0(eventKey, ifNoneMatch);
        // TODO: test validations
    }

    /**
     * Gets a key-value list of the event statuses for teams competing at the given event.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEventTeamsStatuses_0Test() throws ApiException {
        String eventKey = null;
        String ifNoneMatch = null;
        Map<String, TeamEventStatus> response = api.getEventTeamsStatuses_0(eventKey, ifNoneMatch);
        // TODO: test validations
    }

    /**
     * Gets a list of &#x60;Team&#x60; objects that competed in the given event.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEventTeams_0Test() throws ApiException {
        String eventKey = null;
        String ifNoneMatch = null;
        List<Team> response = api.getEventTeams_0(eventKey, ifNoneMatch);
        // TODO: test validations
    }

    /**
     * Gets a &#x60;Team&#x60; object for the team referenced by the given key.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTeamTest() throws ApiException {
        String teamKey = null;
        String ifNoneMatch = null;
        Team response = api.getTeam(teamKey, ifNoneMatch);
        // TODO: test validations
    }

    /**
     * Gets a list of awards the given team has won.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTeamAwardsTest() throws ApiException {
        String teamKey = null;
        String ifNoneMatch = null;
        List<Award> response = api.getTeamAwards(teamKey, ifNoneMatch);
        // TODO: test validations
    }

    /**
     * Gets a list of awards the given team has won in a given year.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTeamAwardsByYearTest() throws ApiException {
        String teamKey = null;
        Integer year = null;
        String ifNoneMatch = null;
        List<Award> response = api.getTeamAwardsByYear(teamKey, year, ifNoneMatch);
        // TODO: test validations
    }

    /**
     * Gets an array of districts representing each year the team was in a district. Will return an empty array if the team was never in a district.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTeamDistrictsTest() throws ApiException {
        String teamKey = null;
        String ifNoneMatch = null;
        List<DistrictList> response = api.getTeamDistricts(teamKey, ifNoneMatch);
        // TODO: test validations
    }

    /**
     * Gets a list of awards the given team won at the given event.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTeamEventAwardsTest() throws ApiException {
        String teamKey = null;
        String eventKey = null;
        String ifNoneMatch = null;
        List<Award> response = api.getTeamEventAwards(teamKey, eventKey, ifNoneMatch);
        // TODO: test validations
    }

    /**
     * Gets a list of matches for the given team and event.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTeamEventMatchesTest() throws ApiException {
        String teamKey = null;
        String eventKey = null;
        String ifNoneMatch = null;
        List<Match> response = api.getTeamEventMatches(teamKey, eventKey, ifNoneMatch);
        // TODO: test validations
    }

    /**
     * Gets a list of match keys for matches for the given team and event.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTeamEventMatchesKeysTest() throws ApiException {
        String teamKey = null;
        String eventKey = null;
        String ifNoneMatch = null;
        List<String> response = api.getTeamEventMatchesKeys(teamKey, eventKey, ifNoneMatch);
        // TODO: test validations
    }

    /**
     * Gets a short-form list of matches for the given team and event.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTeamEventMatchesSimpleTest() throws ApiException {
        String teamKey = null;
        String eventKey = null;
        String ifNoneMatch = null;
        List<Match> response = api.getTeamEventMatchesSimple(teamKey, eventKey, ifNoneMatch);
        // TODO: test validations
    }

    /**
     * Gets the competition rank and status of the team at the given event.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTeamEventStatusTest() throws ApiException {
        String teamKey = null;
        String eventKey = null;
        String ifNoneMatch = null;
        TeamEventStatus response = api.getTeamEventStatus(teamKey, eventKey, ifNoneMatch);
        // TODO: test validations
    }

    /**
     * Gets a list of all events this team has competed at.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTeamEventsTest() throws ApiException {
        String teamKey = null;
        String ifNoneMatch = null;
        List<Event> response = api.getTeamEvents(teamKey, ifNoneMatch);
        // TODO: test validations
    }

    /**
     * Gets a list of events this team has competed at in the given year.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTeamEventsByYearTest() throws ApiException {
        String teamKey = null;
        Integer year = null;
        String ifNoneMatch = null;
        List<Event> response = api.getTeamEventsByYear(teamKey, year, ifNoneMatch);
        // TODO: test validations
    }

    /**
     * Gets a list of the event keys for events this team has competed at in the given year.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTeamEventsByYearKeysTest() throws ApiException {
        String teamKey = null;
        Integer year = null;
        String ifNoneMatch = null;
        List<String> response = api.getTeamEventsByYearKeys(teamKey, year, ifNoneMatch);
        // TODO: test validations
    }

    /**
     * Gets a short-form list of events this team has competed at in the given year.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTeamEventsByYearSimpleTest() throws ApiException {
        String teamKey = null;
        Integer year = null;
        String ifNoneMatch = null;
        List<EventSimple> response = api.getTeamEventsByYearSimple(teamKey, year, ifNoneMatch);
        // TODO: test validations
    }

    /**
     * Gets a list of the event keys for all events this team has competed at.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTeamEventsKeysTest() throws ApiException {
        String teamKey = null;
        String ifNoneMatch = null;
        List<String> response = api.getTeamEventsKeys(teamKey, ifNoneMatch);
        // TODO: test validations
    }

    /**
     * Gets a short-form list of all events this team has competed at.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTeamEventsSimpleTest() throws ApiException {
        String teamKey = null;
        String ifNoneMatch = null;
        List<EventSimple> response = api.getTeamEventsSimple(teamKey, ifNoneMatch);
        // TODO: test validations
    }

    /**
     * Gets a key-value list of the event statuses for events this team has competed at in the given year.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTeamEventsStatusesByYear_0Test() throws ApiException {
        String teamKey = null;
        Integer year = null;
        String ifNoneMatch = null;
        Map<String, TeamEventStatus> response = api.getTeamEventsStatusesByYear_0(teamKey, year, ifNoneMatch);
        // TODO: test validations
    }

    /**
     * Gets a list of matches for the given team and year.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTeamMatchesByYearTest() throws ApiException {
        String teamKey = null;
        Integer year = null;
        String ifNoneMatch = null;
        List<Match> response = api.getTeamMatchesByYear(teamKey, year, ifNoneMatch);
        // TODO: test validations
    }

    /**
     * Gets a list of match keys for matches for the given team and year.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTeamMatchesByYearKeysTest() throws ApiException {
        String teamKey = null;
        Integer year = null;
        String ifNoneMatch = null;
        List<String> response = api.getTeamMatchesByYearKeys(teamKey, year, ifNoneMatch);
        // TODO: test validations
    }

    /**
     * Gets a short-form list of matches for the given team and year.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTeamMatchesByYearSimpleTest() throws ApiException {
        String teamKey = null;
        Integer year = null;
        String ifNoneMatch = null;
        List<MatchSimple> response = api.getTeamMatchesByYearSimple(teamKey, year, ifNoneMatch);
        // TODO: test validations
    }

    /**
     * Gets a list of Media (videos / pictures) for the given team and tag.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTeamMediaByTagTest() throws ApiException {
        String teamKey = null;
        String mediaTag = null;
        String ifNoneMatch = null;
        List<Media> response = api.getTeamMediaByTag(teamKey, mediaTag, ifNoneMatch);
        // TODO: test validations
    }

    /**
     * Gets a list of Media (videos / pictures) for the given team, tag and year.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTeamMediaByTagYearTest() throws ApiException {
        String teamKey = null;
        String mediaTag = null;
        Integer year = null;
        String ifNoneMatch = null;
        List<Media> response = api.getTeamMediaByTagYear(teamKey, mediaTag, year, ifNoneMatch);
        // TODO: test validations
    }

    /**
     * Gets a list of Media (videos / pictures) for the given team and year.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTeamMediaByYearTest() throws ApiException {
        String teamKey = null;
        Integer year = null;
        String ifNoneMatch = null;
        List<Media> response = api.getTeamMediaByYear(teamKey, year, ifNoneMatch);
        // TODO: test validations
    }

    /**
     * Gets a list of year and robot name pairs for each year that a robot name was provided. Will return an empty array if the team has never named a robot.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTeamRobotsTest() throws ApiException {
        String teamKey = null;
        String ifNoneMatch = null;
        List<TeamRobot> response = api.getTeamRobots(teamKey, ifNoneMatch);
        // TODO: test validations
    }

    /**
     * Gets a &#x60;Team_Simple&#x60; object for the team referenced by the given key.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTeamSimpleTest() throws ApiException {
        String teamKey = null;
        String ifNoneMatch = null;
        TeamSimple response = api.getTeamSimple(teamKey, ifNoneMatch);
        // TODO: test validations
    }

    /**
     * Gets a list of Media (social media) for the given team.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTeamSocialMediaTest() throws ApiException {
        String teamKey = null;
        String ifNoneMatch = null;
        List<Media> response = api.getTeamSocialMedia(teamKey, ifNoneMatch);
        // TODO: test validations
    }

    /**
     * Gets a list of years in which the team participated in at least one competition.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTeamYearsParticipatedTest() throws ApiException {
        String teamKey = null;
        String ifNoneMatch = null;
        List<Integer> response = api.getTeamYearsParticipated(teamKey, ifNoneMatch);
        // TODO: test validations
    }

    /**
     * Gets a list of &#x60;Team&#x60; objects, paginated in groups of 500.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTeamsTest() throws ApiException {
        Integer pageNum = null;
        String ifNoneMatch = null;
        List<Team> response = api.getTeams(pageNum, ifNoneMatch);
        // TODO: test validations
    }

    /**
     * Gets a list of &#x60;Team&#x60; objects that competed in the given year, paginated in groups of 500.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTeamsByYearTest() throws ApiException {
        Integer year = null;
        Integer pageNum = null;
        String ifNoneMatch = null;
        List<Team> response = api.getTeamsByYear(year, pageNum, ifNoneMatch);
        // TODO: test validations
    }

    /**
     * Gets a list Team Keys that competed in the given year, paginated in groups of 500.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTeamsByYearKeysTest() throws ApiException {
        Integer year = null;
        Integer pageNum = null;
        String ifNoneMatch = null;
        List<String> response = api.getTeamsByYearKeys(year, pageNum, ifNoneMatch);
        // TODO: test validations
    }

    /**
     * Gets a list of short form &#x60;Team_Simple&#x60; objects that competed in the given year, paginated in groups of 500.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTeamsByYearSimpleTest() throws ApiException {
        Integer year = null;
        Integer pageNum = null;
        String ifNoneMatch = null;
        List<TeamSimple> response = api.getTeamsByYearSimple(year, pageNum, ifNoneMatch);
        // TODO: test validations
    }

    /**
     * Gets a list of Team keys, paginated in groups of 500. (Note, each page will not have 500 teams, but will include the teams within that range of 500.)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTeamsKeysTest() throws ApiException {
        Integer pageNum = null;
        String ifNoneMatch = null;
        List<String> response = api.getTeamsKeys(pageNum, ifNoneMatch);
        // TODO: test validations
    }

    /**
     * Gets a list of short form &#x60;Team_Simple&#x60; objects, paginated in groups of 500.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTeamsSimpleTest() throws ApiException {
        Integer pageNum = null;
        String ifNoneMatch = null;
        List<TeamSimple> response = api.getTeamsSimple(pageNum, ifNoneMatch);
        // TODO: test validations
    }

}
