/*
 * The Blue Alliance API v3
 * # Overview    Information and statistics about FIRST Robotics Competition teams and events.   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).
 *
 * The version of the OpenAPI document: 3.8.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for MatchScoreBreakdown2016Alliance
 */
public class MatchScoreBreakdown2016AllianceTest {
    private final MatchScoreBreakdown2016Alliance model = new MatchScoreBreakdown2016Alliance();

    /**
     * Model tests for MatchScoreBreakdown2016Alliance
     */
    @Test
    public void testMatchScoreBreakdown2016Alliance() {
        // TODO: test MatchScoreBreakdown2016Alliance
    }

    /**
     * Test the property 'adjustPoints'
     */
    @Test
    public void adjustPointsTest() {
        // TODO: test adjustPoints
    }

    /**
     * Test the property 'autoBoulderPoints'
     */
    @Test
    public void autoBoulderPointsTest() {
        // TODO: test autoBoulderPoints
    }

    /**
     * Test the property 'autoBouldersHigh'
     */
    @Test
    public void autoBouldersHighTest() {
        // TODO: test autoBouldersHigh
    }

    /**
     * Test the property 'autoBouldersLow'
     */
    @Test
    public void autoBouldersLowTest() {
        // TODO: test autoBouldersLow
    }

    /**
     * Test the property 'autoCrossingPoints'
     */
    @Test
    public void autoCrossingPointsTest() {
        // TODO: test autoCrossingPoints
    }

    /**
     * Test the property 'autoPoints'
     */
    @Test
    public void autoPointsTest() {
        // TODO: test autoPoints
    }

    /**
     * Test the property 'autoReachPoints'
     */
    @Test
    public void autoReachPointsTest() {
        // TODO: test autoReachPoints
    }

    /**
     * Test the property 'breachPoints'
     */
    @Test
    public void breachPointsTest() {
        // TODO: test breachPoints
    }

    /**
     * Test the property 'capturePoints'
     */
    @Test
    public void capturePointsTest() {
        // TODO: test capturePoints
    }

    /**
     * Test the property 'foulCount'
     */
    @Test
    public void foulCountTest() {
        // TODO: test foulCount
    }

    /**
     * Test the property 'foulPoints'
     */
    @Test
    public void foulPointsTest() {
        // TODO: test foulPoints
    }

    /**
     * Test the property 'position1crossings'
     */
    @Test
    public void position1crossingsTest() {
        // TODO: test position1crossings
    }

    /**
     * Test the property 'position2'
     */
    @Test
    public void position2Test() {
        // TODO: test position2
    }

    /**
     * Test the property 'position2crossings'
     */
    @Test
    public void position2crossingsTest() {
        // TODO: test position2crossings
    }

    /**
     * Test the property 'position3'
     */
    @Test
    public void position3Test() {
        // TODO: test position3
    }

    /**
     * Test the property 'position3crossings'
     */
    @Test
    public void position3crossingsTest() {
        // TODO: test position3crossings
    }

    /**
     * Test the property 'position4'
     */
    @Test
    public void position4Test() {
        // TODO: test position4
    }

    /**
     * Test the property 'position4crossings'
     */
    @Test
    public void position4crossingsTest() {
        // TODO: test position4crossings
    }

    /**
     * Test the property 'position5'
     */
    @Test
    public void position5Test() {
        // TODO: test position5
    }

    /**
     * Test the property 'position5crossings'
     */
    @Test
    public void position5crossingsTest() {
        // TODO: test position5crossings
    }

    /**
     * Test the property 'robot1Auto'
     */
    @Test
    public void robot1AutoTest() {
        // TODO: test robot1Auto
    }

    /**
     * Test the property 'robot2Auto'
     */
    @Test
    public void robot2AutoTest() {
        // TODO: test robot2Auto
    }

    /**
     * Test the property 'robot3Auto'
     */
    @Test
    public void robot3AutoTest() {
        // TODO: test robot3Auto
    }

    /**
     * Test the property 'techFoulCount'
     */
    @Test
    public void techFoulCountTest() {
        // TODO: test techFoulCount
    }

    /**
     * Test the property 'teleopBoulderPoints'
     */
    @Test
    public void teleopBoulderPointsTest() {
        // TODO: test teleopBoulderPoints
    }

    /**
     * Test the property 'teleopBouldersHigh'
     */
    @Test
    public void teleopBouldersHighTest() {
        // TODO: test teleopBouldersHigh
    }

    /**
     * Test the property 'teleopBouldersLow'
     */
    @Test
    public void teleopBouldersLowTest() {
        // TODO: test teleopBouldersLow
    }

    /**
     * Test the property 'teleopChallengePoints'
     */
    @Test
    public void teleopChallengePointsTest() {
        // TODO: test teleopChallengePoints
    }

    /**
     * Test the property 'teleopCrossingPoints'
     */
    @Test
    public void teleopCrossingPointsTest() {
        // TODO: test teleopCrossingPoints
    }

    /**
     * Test the property 'teleopDefensesBreached'
     */
    @Test
    public void teleopDefensesBreachedTest() {
        // TODO: test teleopDefensesBreached
    }

    /**
     * Test the property 'teleopPoints'
     */
    @Test
    public void teleopPointsTest() {
        // TODO: test teleopPoints
    }

    /**
     * Test the property 'teleopScalePoints'
     */
    @Test
    public void teleopScalePointsTest() {
        // TODO: test teleopScalePoints
    }

    /**
     * Test the property 'teleopTowerCaptured'
     */
    @Test
    public void teleopTowerCapturedTest() {
        // TODO: test teleopTowerCaptured
    }

    /**
     * Test the property 'totalPoints'
     */
    @Test
    public void totalPointsTest() {
        // TODO: test totalPoints
    }

    /**
     * Test the property 'towerEndStrength'
     */
    @Test
    public void towerEndStrengthTest() {
        // TODO: test towerEndStrength
    }

    /**
     * Test the property 'towerFaceA'
     */
    @Test
    public void towerFaceATest() {
        // TODO: test towerFaceA
    }

    /**
     * Test the property 'towerFaceB'
     */
    @Test
    public void towerFaceBTest() {
        // TODO: test towerFaceB
    }

    /**
     * Test the property 'towerFaceC'
     */
    @Test
    public void towerFaceCTest() {
        // TODO: test towerFaceC
    }

}
