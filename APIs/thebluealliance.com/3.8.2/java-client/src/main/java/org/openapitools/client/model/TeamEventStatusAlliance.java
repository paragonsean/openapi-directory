/*
 * The Blue Alliance API v3
 * # Overview    Information and statistics about FIRST Robotics Competition teams and events.   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).
 *
 * The version of the OpenAPI document: 3.8.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.TeamEventStatusAllianceBackup;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * TeamEventStatusAlliance
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:56:47.661723-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TeamEventStatusAlliance {
  public static final String SERIALIZED_NAME_BACKUP = "backup";
  @SerializedName(SERIALIZED_NAME_BACKUP)
  private TeamEventStatusAllianceBackup backup;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NUMBER = "number";
  @SerializedName(SERIALIZED_NAME_NUMBER)
  private Integer number;

  public static final String SERIALIZED_NAME_PICK = "pick";
  @SerializedName(SERIALIZED_NAME_PICK)
  private Integer pick;

  public TeamEventStatusAlliance() {
  }

  public TeamEventStatusAlliance backup(TeamEventStatusAllianceBackup backup) {
    this.backup = backup;
    return this;
  }

  /**
   * Get backup
   * @return backup
   */
  @javax.annotation.Nullable
  public TeamEventStatusAllianceBackup getBackup() {
    return backup;
  }

  public void setBackup(TeamEventStatusAllianceBackup backup) {
    this.backup = backup;
  }


  public TeamEventStatusAlliance name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Alliance name, may be null.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public TeamEventStatusAlliance number(Integer number) {
    this.number = number;
    return this;
  }

  /**
   * Alliance number.
   * @return number
   */
  @javax.annotation.Nonnull
  public Integer getNumber() {
    return number;
  }

  public void setNumber(Integer number) {
    this.number = number;
  }


  public TeamEventStatusAlliance pick(Integer pick) {
    this.pick = pick;
    return this;
  }

  /**
   * Order the team was picked in the alliance from 0-2, with 0 being alliance captain.
   * @return pick
   */
  @javax.annotation.Nonnull
  public Integer getPick() {
    return pick;
  }

  public void setPick(Integer pick) {
    this.pick = pick;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TeamEventStatusAlliance teamEventStatusAlliance = (TeamEventStatusAlliance) o;
    return Objects.equals(this.backup, teamEventStatusAlliance.backup) &&
        Objects.equals(this.name, teamEventStatusAlliance.name) &&
        Objects.equals(this.number, teamEventStatusAlliance.number) &&
        Objects.equals(this.pick, teamEventStatusAlliance.pick);
  }

  @Override
  public int hashCode() {
    return Objects.hash(backup, name, number, pick);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TeamEventStatusAlliance {\n");
    sb.append("    backup: ").append(toIndentedString(backup)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    number: ").append(toIndentedString(number)).append("\n");
    sb.append("    pick: ").append(toIndentedString(pick)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("backup");
    openapiFields.add("name");
    openapiFields.add("number");
    openapiFields.add("pick");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("number");
    openapiRequiredFields.add("pick");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TeamEventStatusAlliance
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TeamEventStatusAlliance.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TeamEventStatusAlliance is not found in the empty JSON string", TeamEventStatusAlliance.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TeamEventStatusAlliance.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TeamEventStatusAlliance` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : TeamEventStatusAlliance.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `backup`
      if (jsonObj.get("backup") != null && !jsonObj.get("backup").isJsonNull()) {
        TeamEventStatusAllianceBackup.validateJsonElement(jsonObj.get("backup"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TeamEventStatusAlliance.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TeamEventStatusAlliance' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TeamEventStatusAlliance> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TeamEventStatusAlliance.class));

       return (TypeAdapter<T>) new TypeAdapter<TeamEventStatusAlliance>() {
           @Override
           public void write(JsonWriter out, TeamEventStatusAlliance value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TeamEventStatusAlliance read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TeamEventStatusAlliance given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TeamEventStatusAlliance
   * @throws IOException if the JSON string is invalid with respect to TeamEventStatusAlliance
   */
  public static TeamEventStatusAlliance fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TeamEventStatusAlliance.class);
  }

  /**
   * Convert an instance of TeamEventStatusAlliance to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

