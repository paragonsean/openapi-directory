/*
 * The Blue Alliance API v3
 * # Overview    Information and statistics about FIRST Robotics Competition teams and events.   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).
 *
 * The version of the OpenAPI document: 3.8.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.WLTRecord;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Playoff status for this team, may be null if the team did not make playoffs, or playoffs have not begun.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:56:47.661723-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TeamEventStatusPlayoff {
  public static final String SERIALIZED_NAME_CURRENT_LEVEL_RECORD = "current_level_record";
  @SerializedName(SERIALIZED_NAME_CURRENT_LEVEL_RECORD)
  private WLTRecord currentLevelRecord;

  /**
   * The highest playoff level the team reached.
   */
  @JsonAdapter(LevelEnum.Adapter.class)
  public enum LevelEnum {
    QM("qm"),
    
    EF("ef"),
    
    QF("qf"),
    
    SF("sf"),
    
    F("f");

    private String value;

    LevelEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LevelEnum fromValue(String value) {
      for (LevelEnum b : LevelEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LevelEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LevelEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LevelEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LevelEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      LevelEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_LEVEL = "level";
  @SerializedName(SERIALIZED_NAME_LEVEL)
  private LevelEnum level;

  public static final String SERIALIZED_NAME_PLAYOFF_AVERAGE = "playoff_average";
  @SerializedName(SERIALIZED_NAME_PLAYOFF_AVERAGE)
  private Integer playoffAverage;

  public static final String SERIALIZED_NAME_RECORD = "record";
  @SerializedName(SERIALIZED_NAME_RECORD)
  private WLTRecord record;

  /**
   * Current competition status for the playoffs.
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    WON("won"),
    
    ELIMINATED("eliminated"),
    
    PLAYING("playing");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public TeamEventStatusPlayoff() {
  }

  public TeamEventStatusPlayoff currentLevelRecord(WLTRecord currentLevelRecord) {
    this.currentLevelRecord = currentLevelRecord;
    return this;
  }

  /**
   * Get currentLevelRecord
   * @return currentLevelRecord
   */
  @javax.annotation.Nullable
  public WLTRecord getCurrentLevelRecord() {
    return currentLevelRecord;
  }

  public void setCurrentLevelRecord(WLTRecord currentLevelRecord) {
    this.currentLevelRecord = currentLevelRecord;
  }


  public TeamEventStatusPlayoff level(LevelEnum level) {
    this.level = level;
    return this;
  }

  /**
   * The highest playoff level the team reached.
   * @return level
   */
  @javax.annotation.Nullable
  public LevelEnum getLevel() {
    return level;
  }

  public void setLevel(LevelEnum level) {
    this.level = level;
  }


  public TeamEventStatusPlayoff playoffAverage(Integer playoffAverage) {
    this.playoffAverage = playoffAverage;
    return this;
  }

  /**
   * The average match score during playoffs. Year specific. May be null if not relevant for a given year.
   * @return playoffAverage
   */
  @javax.annotation.Nullable
  public Integer getPlayoffAverage() {
    return playoffAverage;
  }

  public void setPlayoffAverage(Integer playoffAverage) {
    this.playoffAverage = playoffAverage;
  }


  public TeamEventStatusPlayoff record(WLTRecord record) {
    this.record = record;
    return this;
  }

  /**
   * Get record
   * @return record
   */
  @javax.annotation.Nullable
  public WLTRecord getRecord() {
    return record;
  }

  public void setRecord(WLTRecord record) {
    this.record = record;
  }


  public TeamEventStatusPlayoff status(StatusEnum status) {
    this.status = status;
    return this;
  }

  /**
   * Current competition status for the playoffs.
   * @return status
   */
  @javax.annotation.Nullable
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TeamEventStatusPlayoff teamEventStatusPlayoff = (TeamEventStatusPlayoff) o;
    return Objects.equals(this.currentLevelRecord, teamEventStatusPlayoff.currentLevelRecord) &&
        Objects.equals(this.level, teamEventStatusPlayoff.level) &&
        Objects.equals(this.playoffAverage, teamEventStatusPlayoff.playoffAverage) &&
        Objects.equals(this.record, teamEventStatusPlayoff.record) &&
        Objects.equals(this.status, teamEventStatusPlayoff.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(currentLevelRecord, level, playoffAverage, record, status);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TeamEventStatusPlayoff {\n");
    sb.append("    currentLevelRecord: ").append(toIndentedString(currentLevelRecord)).append("\n");
    sb.append("    level: ").append(toIndentedString(level)).append("\n");
    sb.append("    playoffAverage: ").append(toIndentedString(playoffAverage)).append("\n");
    sb.append("    record: ").append(toIndentedString(record)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("current_level_record");
    openapiFields.add("level");
    openapiFields.add("playoff_average");
    openapiFields.add("record");
    openapiFields.add("status");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TeamEventStatusPlayoff
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TeamEventStatusPlayoff.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TeamEventStatusPlayoff is not found in the empty JSON string", TeamEventStatusPlayoff.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TeamEventStatusPlayoff.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TeamEventStatusPlayoff` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `current_level_record`
      if (jsonObj.get("current_level_record") != null && !jsonObj.get("current_level_record").isJsonNull()) {
        WLTRecord.validateJsonElement(jsonObj.get("current_level_record"));
      }
      if ((jsonObj.get("level") != null && !jsonObj.get("level").isJsonNull()) && !jsonObj.get("level").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `level` to be a primitive type in the JSON string but got `%s`", jsonObj.get("level").toString()));
      }
      // validate the optional field `level`
      if (jsonObj.get("level") != null && !jsonObj.get("level").isJsonNull()) {
        LevelEnum.validateJsonElement(jsonObj.get("level"));
      }
      // validate the optional field `record`
      if (jsonObj.get("record") != null && !jsonObj.get("record").isJsonNull()) {
        WLTRecord.validateJsonElement(jsonObj.get("record"));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        StatusEnum.validateJsonElement(jsonObj.get("status"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TeamEventStatusPlayoff.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TeamEventStatusPlayoff' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TeamEventStatusPlayoff> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TeamEventStatusPlayoff.class));

       return (TypeAdapter<T>) new TypeAdapter<TeamEventStatusPlayoff>() {
           @Override
           public void write(JsonWriter out, TeamEventStatusPlayoff value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TeamEventStatusPlayoff read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TeamEventStatusPlayoff given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TeamEventStatusPlayoff
   * @throws IOException if the JSON string is invalid with respect to TeamEventStatusPlayoff
   */
  public static TeamEventStatusPlayoff fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TeamEventStatusPlayoff.class);
  }

  /**
   * Convert an instance of TeamEventStatusPlayoff to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

