/*
 * The Blue Alliance API v3
 * # Overview    Information and statistics about FIRST Robotics Competition teams and events.   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).
 *
 * The version of the OpenAPI document: 3.8.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Insights for FIRST Stronghold qualification and elimination matches.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:56:47.661723-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class EventInsights2016 {
  public static final String SERIALIZED_NAME_A_CHEVAL_DE_FRISE = "A_ChevalDeFrise";
  @SerializedName(SERIALIZED_NAME_A_CHEVAL_DE_FRISE)
  private List<Float> aChevalDeFrise = new ArrayList<>();

  public static final String SERIALIZED_NAME_A_PORTCULLIS = "A_Portcullis";
  @SerializedName(SERIALIZED_NAME_A_PORTCULLIS)
  private List<Float> aPortcullis = new ArrayList<>();

  public static final String SERIALIZED_NAME_B_MOAT = "B_Moat";
  @SerializedName(SERIALIZED_NAME_B_MOAT)
  private List<Float> bMoat = new ArrayList<>();

  public static final String SERIALIZED_NAME_B_RAMPARTS = "B_Ramparts";
  @SerializedName(SERIALIZED_NAME_B_RAMPARTS)
  private List<Float> bRamparts = new ArrayList<>();

  public static final String SERIALIZED_NAME_C_DRAWBRIDGE = "C_Drawbridge";
  @SerializedName(SERIALIZED_NAME_C_DRAWBRIDGE)
  private List<Float> cDrawbridge = new ArrayList<>();

  public static final String SERIALIZED_NAME_C_SALLY_PORT = "C_SallyPort";
  @SerializedName(SERIALIZED_NAME_C_SALLY_PORT)
  private List<Float> cSallyPort = new ArrayList<>();

  public static final String SERIALIZED_NAME_D_ROCK_WALL = "D_RockWall";
  @SerializedName(SERIALIZED_NAME_D_ROCK_WALL)
  private List<Float> dRockWall = new ArrayList<>();

  public static final String SERIALIZED_NAME_D_ROUGH_TERRAIN = "D_RoughTerrain";
  @SerializedName(SERIALIZED_NAME_D_ROUGH_TERRAIN)
  private List<Float> dRoughTerrain = new ArrayList<>();

  public static final String SERIALIZED_NAME_LOW_BAR = "LowBar";
  @SerializedName(SERIALIZED_NAME_LOW_BAR)
  private List<Float> lowBar = new ArrayList<>();

  public static final String SERIALIZED_NAME_AVERAGE_AUTO_SCORE = "average_auto_score";
  @SerializedName(SERIALIZED_NAME_AVERAGE_AUTO_SCORE)
  private Float averageAutoScore;

  public static final String SERIALIZED_NAME_AVERAGE_BOULDER_SCORE = "average_boulder_score";
  @SerializedName(SERIALIZED_NAME_AVERAGE_BOULDER_SCORE)
  private Float averageBoulderScore;

  public static final String SERIALIZED_NAME_AVERAGE_CROSSING_SCORE = "average_crossing_score";
  @SerializedName(SERIALIZED_NAME_AVERAGE_CROSSING_SCORE)
  private Float averageCrossingScore;

  public static final String SERIALIZED_NAME_AVERAGE_FOUL_SCORE = "average_foul_score";
  @SerializedName(SERIALIZED_NAME_AVERAGE_FOUL_SCORE)
  private Float averageFoulScore;

  public static final String SERIALIZED_NAME_AVERAGE_HIGH_GOALS = "average_high_goals";
  @SerializedName(SERIALIZED_NAME_AVERAGE_HIGH_GOALS)
  private Float averageHighGoals;

  public static final String SERIALIZED_NAME_AVERAGE_LOW_GOALS = "average_low_goals";
  @SerializedName(SERIALIZED_NAME_AVERAGE_LOW_GOALS)
  private Float averageLowGoals;

  public static final String SERIALIZED_NAME_AVERAGE_SCORE = "average_score";
  @SerializedName(SERIALIZED_NAME_AVERAGE_SCORE)
  private Float averageScore;

  public static final String SERIALIZED_NAME_AVERAGE_TOWER_SCORE = "average_tower_score";
  @SerializedName(SERIALIZED_NAME_AVERAGE_TOWER_SCORE)
  private Float averageTowerScore;

  public static final String SERIALIZED_NAME_AVERAGE_WIN_MARGIN = "average_win_margin";
  @SerializedName(SERIALIZED_NAME_AVERAGE_WIN_MARGIN)
  private Float averageWinMargin;

  public static final String SERIALIZED_NAME_AVERAGE_WIN_SCORE = "average_win_score";
  @SerializedName(SERIALIZED_NAME_AVERAGE_WIN_SCORE)
  private Float averageWinScore;

  public static final String SERIALIZED_NAME_BREACHES = "breaches";
  @SerializedName(SERIALIZED_NAME_BREACHES)
  private List<Float> breaches = new ArrayList<>();

  public static final String SERIALIZED_NAME_CAPTURES = "captures";
  @SerializedName(SERIALIZED_NAME_CAPTURES)
  private List<Float> captures = new ArrayList<>();

  public static final String SERIALIZED_NAME_CHALLENGES = "challenges";
  @SerializedName(SERIALIZED_NAME_CHALLENGES)
  private List<Float> challenges = new ArrayList<>();

  public static final String SERIALIZED_NAME_HIGH_SCORE = "high_score";
  @SerializedName(SERIALIZED_NAME_HIGH_SCORE)
  private List<String> highScore = new ArrayList<>();

  public static final String SERIALIZED_NAME_SCALES = "scales";
  @SerializedName(SERIALIZED_NAME_SCALES)
  private List<Float> scales = new ArrayList<>();

  public EventInsights2016() {
  }

  public EventInsights2016 aChevalDeFrise(List<Float> aChevalDeFrise) {
    this.aChevalDeFrise = aChevalDeFrise;
    return this;
  }

  public EventInsights2016 addAChevalDeFriseItem(Float aChevalDeFriseItem) {
    if (this.aChevalDeFrise == null) {
      this.aChevalDeFrise = new ArrayList<>();
    }
    this.aChevalDeFrise.add(aChevalDeFriseItem);
    return this;
  }

  /**
   * For the Cheval De Frise - An array with three values, number of times damaged, number of opportunities to damage, and percentage.
   * @return aChevalDeFrise
   */
  @javax.annotation.Nonnull
  public List<Float> getaChevalDeFrise() {
    return aChevalDeFrise;
  }

  public void setaChevalDeFrise(List<Float> aChevalDeFrise) {
    this.aChevalDeFrise = aChevalDeFrise;
  }


  public EventInsights2016 aPortcullis(List<Float> aPortcullis) {
    this.aPortcullis = aPortcullis;
    return this;
  }

  public EventInsights2016 addAPortcullisItem(Float aPortcullisItem) {
    if (this.aPortcullis == null) {
      this.aPortcullis = new ArrayList<>();
    }
    this.aPortcullis.add(aPortcullisItem);
    return this;
  }

  /**
   * For the Portcullis - An array with three values, number of times damaged, number of opportunities to damage, and percentage.
   * @return aPortcullis
   */
  @javax.annotation.Nonnull
  public List<Float> getaPortcullis() {
    return aPortcullis;
  }

  public void setaPortcullis(List<Float> aPortcullis) {
    this.aPortcullis = aPortcullis;
  }


  public EventInsights2016 bMoat(List<Float> bMoat) {
    this.bMoat = bMoat;
    return this;
  }

  public EventInsights2016 addBMoatItem(Float bMoatItem) {
    if (this.bMoat == null) {
      this.bMoat = new ArrayList<>();
    }
    this.bMoat.add(bMoatItem);
    return this;
  }

  /**
   * For the Moat - An array with three values, number of times damaged, number of opportunities to damage, and percentage.
   * @return bMoat
   */
  @javax.annotation.Nonnull
  public List<Float> getbMoat() {
    return bMoat;
  }

  public void setbMoat(List<Float> bMoat) {
    this.bMoat = bMoat;
  }


  public EventInsights2016 bRamparts(List<Float> bRamparts) {
    this.bRamparts = bRamparts;
    return this;
  }

  public EventInsights2016 addBRampartsItem(Float bRampartsItem) {
    if (this.bRamparts == null) {
      this.bRamparts = new ArrayList<>();
    }
    this.bRamparts.add(bRampartsItem);
    return this;
  }

  /**
   * For the Ramparts - An array with three values, number of times damaged, number of opportunities to damage, and percentage.
   * @return bRamparts
   */
  @javax.annotation.Nonnull
  public List<Float> getbRamparts() {
    return bRamparts;
  }

  public void setbRamparts(List<Float> bRamparts) {
    this.bRamparts = bRamparts;
  }


  public EventInsights2016 cDrawbridge(List<Float> cDrawbridge) {
    this.cDrawbridge = cDrawbridge;
    return this;
  }

  public EventInsights2016 addCDrawbridgeItem(Float cDrawbridgeItem) {
    if (this.cDrawbridge == null) {
      this.cDrawbridge = new ArrayList<>();
    }
    this.cDrawbridge.add(cDrawbridgeItem);
    return this;
  }

  /**
   * For the Drawbridge - An array with three values, number of times damaged, number of opportunities to damage, and percentage.
   * @return cDrawbridge
   */
  @javax.annotation.Nonnull
  public List<Float> getcDrawbridge() {
    return cDrawbridge;
  }

  public void setcDrawbridge(List<Float> cDrawbridge) {
    this.cDrawbridge = cDrawbridge;
  }


  public EventInsights2016 cSallyPort(List<Float> cSallyPort) {
    this.cSallyPort = cSallyPort;
    return this;
  }

  public EventInsights2016 addCSallyPortItem(Float cSallyPortItem) {
    if (this.cSallyPort == null) {
      this.cSallyPort = new ArrayList<>();
    }
    this.cSallyPort.add(cSallyPortItem);
    return this;
  }

  /**
   * For the Sally Port - An array with three values, number of times damaged, number of opportunities to damage, and percentage.
   * @return cSallyPort
   */
  @javax.annotation.Nonnull
  public List<Float> getcSallyPort() {
    return cSallyPort;
  }

  public void setcSallyPort(List<Float> cSallyPort) {
    this.cSallyPort = cSallyPort;
  }


  public EventInsights2016 dRockWall(List<Float> dRockWall) {
    this.dRockWall = dRockWall;
    return this;
  }

  public EventInsights2016 addDRockWallItem(Float dRockWallItem) {
    if (this.dRockWall == null) {
      this.dRockWall = new ArrayList<>();
    }
    this.dRockWall.add(dRockWallItem);
    return this;
  }

  /**
   * For the Rock Wall - An array with three values, number of times damaged, number of opportunities to damage, and percentage.
   * @return dRockWall
   */
  @javax.annotation.Nonnull
  public List<Float> getdRockWall() {
    return dRockWall;
  }

  public void setdRockWall(List<Float> dRockWall) {
    this.dRockWall = dRockWall;
  }


  public EventInsights2016 dRoughTerrain(List<Float> dRoughTerrain) {
    this.dRoughTerrain = dRoughTerrain;
    return this;
  }

  public EventInsights2016 addDRoughTerrainItem(Float dRoughTerrainItem) {
    if (this.dRoughTerrain == null) {
      this.dRoughTerrain = new ArrayList<>();
    }
    this.dRoughTerrain.add(dRoughTerrainItem);
    return this;
  }

  /**
   * For the Rough Terrain - An array with three values, number of times damaged, number of opportunities to damage, and percentage.
   * @return dRoughTerrain
   */
  @javax.annotation.Nonnull
  public List<Float> getdRoughTerrain() {
    return dRoughTerrain;
  }

  public void setdRoughTerrain(List<Float> dRoughTerrain) {
    this.dRoughTerrain = dRoughTerrain;
  }


  public EventInsights2016 lowBar(List<Float> lowBar) {
    this.lowBar = lowBar;
    return this;
  }

  public EventInsights2016 addLowBarItem(Float lowBarItem) {
    if (this.lowBar == null) {
      this.lowBar = new ArrayList<>();
    }
    this.lowBar.add(lowBarItem);
    return this;
  }

  /**
   * For the Low Bar - An array with three values, number of times damaged, number of opportunities to damage, and percentage.
   * @return lowBar
   */
  @javax.annotation.Nonnull
  public List<Float> getLowBar() {
    return lowBar;
  }

  public void setLowBar(List<Float> lowBar) {
    this.lowBar = lowBar;
  }


  public EventInsights2016 averageAutoScore(Float averageAutoScore) {
    this.averageAutoScore = averageAutoScore;
    return this;
  }

  /**
   * Average autonomous score.
   * @return averageAutoScore
   */
  @javax.annotation.Nonnull
  public Float getAverageAutoScore() {
    return averageAutoScore;
  }

  public void setAverageAutoScore(Float averageAutoScore) {
    this.averageAutoScore = averageAutoScore;
  }


  public EventInsights2016 averageBoulderScore(Float averageBoulderScore) {
    this.averageBoulderScore = averageBoulderScore;
    return this;
  }

  /**
   * Average boulder score.
   * @return averageBoulderScore
   */
  @javax.annotation.Nonnull
  public Float getAverageBoulderScore() {
    return averageBoulderScore;
  }

  public void setAverageBoulderScore(Float averageBoulderScore) {
    this.averageBoulderScore = averageBoulderScore;
  }


  public EventInsights2016 averageCrossingScore(Float averageCrossingScore) {
    this.averageCrossingScore = averageCrossingScore;
    return this;
  }

  /**
   * Average crossing score.
   * @return averageCrossingScore
   */
  @javax.annotation.Nonnull
  public Float getAverageCrossingScore() {
    return averageCrossingScore;
  }

  public void setAverageCrossingScore(Float averageCrossingScore) {
    this.averageCrossingScore = averageCrossingScore;
  }


  public EventInsights2016 averageFoulScore(Float averageFoulScore) {
    this.averageFoulScore = averageFoulScore;
    return this;
  }

  /**
   * Average foul score.
   * @return averageFoulScore
   */
  @javax.annotation.Nonnull
  public Float getAverageFoulScore() {
    return averageFoulScore;
  }

  public void setAverageFoulScore(Float averageFoulScore) {
    this.averageFoulScore = averageFoulScore;
  }


  public EventInsights2016 averageHighGoals(Float averageHighGoals) {
    this.averageHighGoals = averageHighGoals;
    return this;
  }

  /**
   * Average number of high goals scored.
   * @return averageHighGoals
   */
  @javax.annotation.Nonnull
  public Float getAverageHighGoals() {
    return averageHighGoals;
  }

  public void setAverageHighGoals(Float averageHighGoals) {
    this.averageHighGoals = averageHighGoals;
  }


  public EventInsights2016 averageLowGoals(Float averageLowGoals) {
    this.averageLowGoals = averageLowGoals;
    return this;
  }

  /**
   * Average number of low goals scored.
   * @return averageLowGoals
   */
  @javax.annotation.Nonnull
  public Float getAverageLowGoals() {
    return averageLowGoals;
  }

  public void setAverageLowGoals(Float averageLowGoals) {
    this.averageLowGoals = averageLowGoals;
  }


  public EventInsights2016 averageScore(Float averageScore) {
    this.averageScore = averageScore;
    return this;
  }

  /**
   * Average total score.
   * @return averageScore
   */
  @javax.annotation.Nonnull
  public Float getAverageScore() {
    return averageScore;
  }

  public void setAverageScore(Float averageScore) {
    this.averageScore = averageScore;
  }


  public EventInsights2016 averageTowerScore(Float averageTowerScore) {
    this.averageTowerScore = averageTowerScore;
    return this;
  }

  /**
   * Average tower score.
   * @return averageTowerScore
   */
  @javax.annotation.Nonnull
  public Float getAverageTowerScore() {
    return averageTowerScore;
  }

  public void setAverageTowerScore(Float averageTowerScore) {
    this.averageTowerScore = averageTowerScore;
  }


  public EventInsights2016 averageWinMargin(Float averageWinMargin) {
    this.averageWinMargin = averageWinMargin;
    return this;
  }

  /**
   * Average margin of victory.
   * @return averageWinMargin
   */
  @javax.annotation.Nonnull
  public Float getAverageWinMargin() {
    return averageWinMargin;
  }

  public void setAverageWinMargin(Float averageWinMargin) {
    this.averageWinMargin = averageWinMargin;
  }


  public EventInsights2016 averageWinScore(Float averageWinScore) {
    this.averageWinScore = averageWinScore;
    return this;
  }

  /**
   * Average winning score.
   * @return averageWinScore
   */
  @javax.annotation.Nonnull
  public Float getAverageWinScore() {
    return averageWinScore;
  }

  public void setAverageWinScore(Float averageWinScore) {
    this.averageWinScore = averageWinScore;
  }


  public EventInsights2016 breaches(List<Float> breaches) {
    this.breaches = breaches;
    return this;
  }

  public EventInsights2016 addBreachesItem(Float breachesItem) {
    if (this.breaches == null) {
      this.breaches = new ArrayList<>();
    }
    this.breaches.add(breachesItem);
    return this;
  }

  /**
   * An array with three values, number of times breached, number of opportunities to breach, and percentage.
   * @return breaches
   */
  @javax.annotation.Nonnull
  public List<Float> getBreaches() {
    return breaches;
  }

  public void setBreaches(List<Float> breaches) {
    this.breaches = breaches;
  }


  public EventInsights2016 captures(List<Float> captures) {
    this.captures = captures;
    return this;
  }

  public EventInsights2016 addCapturesItem(Float capturesItem) {
    if (this.captures == null) {
      this.captures = new ArrayList<>();
    }
    this.captures.add(capturesItem);
    return this;
  }

  /**
   * An array with three values, number of times captured, number of opportunities to capture, and percentage.
   * @return captures
   */
  @javax.annotation.Nonnull
  public List<Float> getCaptures() {
    return captures;
  }

  public void setCaptures(List<Float> captures) {
    this.captures = captures;
  }


  public EventInsights2016 challenges(List<Float> challenges) {
    this.challenges = challenges;
    return this;
  }

  public EventInsights2016 addChallengesItem(Float challengesItem) {
    if (this.challenges == null) {
      this.challenges = new ArrayList<>();
    }
    this.challenges.add(challengesItem);
    return this;
  }

  /**
   * An array with three values, number of times challenged, number of opportunities to challenge, and percentage.
   * @return challenges
   */
  @javax.annotation.Nonnull
  public List<Float> getChallenges() {
    return challenges;
  }

  public void setChallenges(List<Float> challenges) {
    this.challenges = challenges;
  }


  public EventInsights2016 highScore(List<String> highScore) {
    this.highScore = highScore;
    return this;
  }

  public EventInsights2016 addHighScoreItem(String highScoreItem) {
    if (this.highScore == null) {
      this.highScore = new ArrayList<>();
    }
    this.highScore.add(highScoreItem);
    return this;
  }

  /**
   * An array with three values, high score, match key from the match with the high score, and the name of the match.
   * @return highScore
   */
  @javax.annotation.Nonnull
  public List<String> getHighScore() {
    return highScore;
  }

  public void setHighScore(List<String> highScore) {
    this.highScore = highScore;
  }


  public EventInsights2016 scales(List<Float> scales) {
    this.scales = scales;
    return this;
  }

  public EventInsights2016 addScalesItem(Float scalesItem) {
    if (this.scales == null) {
      this.scales = new ArrayList<>();
    }
    this.scales.add(scalesItem);
    return this;
  }

  /**
   * An array with three values, number of times scaled, number of opportunities to scale, and percentage.
   * @return scales
   */
  @javax.annotation.Nonnull
  public List<Float> getScales() {
    return scales;
  }

  public void setScales(List<Float> scales) {
    this.scales = scales;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EventInsights2016 eventInsights2016 = (EventInsights2016) o;
    return Objects.equals(this.aChevalDeFrise, eventInsights2016.aChevalDeFrise) &&
        Objects.equals(this.aPortcullis, eventInsights2016.aPortcullis) &&
        Objects.equals(this.bMoat, eventInsights2016.bMoat) &&
        Objects.equals(this.bRamparts, eventInsights2016.bRamparts) &&
        Objects.equals(this.cDrawbridge, eventInsights2016.cDrawbridge) &&
        Objects.equals(this.cSallyPort, eventInsights2016.cSallyPort) &&
        Objects.equals(this.dRockWall, eventInsights2016.dRockWall) &&
        Objects.equals(this.dRoughTerrain, eventInsights2016.dRoughTerrain) &&
        Objects.equals(this.lowBar, eventInsights2016.lowBar) &&
        Objects.equals(this.averageAutoScore, eventInsights2016.averageAutoScore) &&
        Objects.equals(this.averageBoulderScore, eventInsights2016.averageBoulderScore) &&
        Objects.equals(this.averageCrossingScore, eventInsights2016.averageCrossingScore) &&
        Objects.equals(this.averageFoulScore, eventInsights2016.averageFoulScore) &&
        Objects.equals(this.averageHighGoals, eventInsights2016.averageHighGoals) &&
        Objects.equals(this.averageLowGoals, eventInsights2016.averageLowGoals) &&
        Objects.equals(this.averageScore, eventInsights2016.averageScore) &&
        Objects.equals(this.averageTowerScore, eventInsights2016.averageTowerScore) &&
        Objects.equals(this.averageWinMargin, eventInsights2016.averageWinMargin) &&
        Objects.equals(this.averageWinScore, eventInsights2016.averageWinScore) &&
        Objects.equals(this.breaches, eventInsights2016.breaches) &&
        Objects.equals(this.captures, eventInsights2016.captures) &&
        Objects.equals(this.challenges, eventInsights2016.challenges) &&
        Objects.equals(this.highScore, eventInsights2016.highScore) &&
        Objects.equals(this.scales, eventInsights2016.scales);
  }

  @Override
  public int hashCode() {
    return Objects.hash(aChevalDeFrise, aPortcullis, bMoat, bRamparts, cDrawbridge, cSallyPort, dRockWall, dRoughTerrain, lowBar, averageAutoScore, averageBoulderScore, averageCrossingScore, averageFoulScore, averageHighGoals, averageLowGoals, averageScore, averageTowerScore, averageWinMargin, averageWinScore, breaches, captures, challenges, highScore, scales);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EventInsights2016 {\n");
    sb.append("    aChevalDeFrise: ").append(toIndentedString(aChevalDeFrise)).append("\n");
    sb.append("    aPortcullis: ").append(toIndentedString(aPortcullis)).append("\n");
    sb.append("    bMoat: ").append(toIndentedString(bMoat)).append("\n");
    sb.append("    bRamparts: ").append(toIndentedString(bRamparts)).append("\n");
    sb.append("    cDrawbridge: ").append(toIndentedString(cDrawbridge)).append("\n");
    sb.append("    cSallyPort: ").append(toIndentedString(cSallyPort)).append("\n");
    sb.append("    dRockWall: ").append(toIndentedString(dRockWall)).append("\n");
    sb.append("    dRoughTerrain: ").append(toIndentedString(dRoughTerrain)).append("\n");
    sb.append("    lowBar: ").append(toIndentedString(lowBar)).append("\n");
    sb.append("    averageAutoScore: ").append(toIndentedString(averageAutoScore)).append("\n");
    sb.append("    averageBoulderScore: ").append(toIndentedString(averageBoulderScore)).append("\n");
    sb.append("    averageCrossingScore: ").append(toIndentedString(averageCrossingScore)).append("\n");
    sb.append("    averageFoulScore: ").append(toIndentedString(averageFoulScore)).append("\n");
    sb.append("    averageHighGoals: ").append(toIndentedString(averageHighGoals)).append("\n");
    sb.append("    averageLowGoals: ").append(toIndentedString(averageLowGoals)).append("\n");
    sb.append("    averageScore: ").append(toIndentedString(averageScore)).append("\n");
    sb.append("    averageTowerScore: ").append(toIndentedString(averageTowerScore)).append("\n");
    sb.append("    averageWinMargin: ").append(toIndentedString(averageWinMargin)).append("\n");
    sb.append("    averageWinScore: ").append(toIndentedString(averageWinScore)).append("\n");
    sb.append("    breaches: ").append(toIndentedString(breaches)).append("\n");
    sb.append("    captures: ").append(toIndentedString(captures)).append("\n");
    sb.append("    challenges: ").append(toIndentedString(challenges)).append("\n");
    sb.append("    highScore: ").append(toIndentedString(highScore)).append("\n");
    sb.append("    scales: ").append(toIndentedString(scales)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("A_ChevalDeFrise");
    openapiFields.add("A_Portcullis");
    openapiFields.add("B_Moat");
    openapiFields.add("B_Ramparts");
    openapiFields.add("C_Drawbridge");
    openapiFields.add("C_SallyPort");
    openapiFields.add("D_RockWall");
    openapiFields.add("D_RoughTerrain");
    openapiFields.add("LowBar");
    openapiFields.add("average_auto_score");
    openapiFields.add("average_boulder_score");
    openapiFields.add("average_crossing_score");
    openapiFields.add("average_foul_score");
    openapiFields.add("average_high_goals");
    openapiFields.add("average_low_goals");
    openapiFields.add("average_score");
    openapiFields.add("average_tower_score");
    openapiFields.add("average_win_margin");
    openapiFields.add("average_win_score");
    openapiFields.add("breaches");
    openapiFields.add("captures");
    openapiFields.add("challenges");
    openapiFields.add("high_score");
    openapiFields.add("scales");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("A_ChevalDeFrise");
    openapiRequiredFields.add("A_Portcullis");
    openapiRequiredFields.add("B_Moat");
    openapiRequiredFields.add("B_Ramparts");
    openapiRequiredFields.add("C_Drawbridge");
    openapiRequiredFields.add("C_SallyPort");
    openapiRequiredFields.add("D_RockWall");
    openapiRequiredFields.add("D_RoughTerrain");
    openapiRequiredFields.add("LowBar");
    openapiRequiredFields.add("average_auto_score");
    openapiRequiredFields.add("average_boulder_score");
    openapiRequiredFields.add("average_crossing_score");
    openapiRequiredFields.add("average_foul_score");
    openapiRequiredFields.add("average_high_goals");
    openapiRequiredFields.add("average_low_goals");
    openapiRequiredFields.add("average_score");
    openapiRequiredFields.add("average_tower_score");
    openapiRequiredFields.add("average_win_margin");
    openapiRequiredFields.add("average_win_score");
    openapiRequiredFields.add("breaches");
    openapiRequiredFields.add("captures");
    openapiRequiredFields.add("challenges");
    openapiRequiredFields.add("high_score");
    openapiRequiredFields.add("scales");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EventInsights2016
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EventInsights2016.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EventInsights2016 is not found in the empty JSON string", EventInsights2016.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EventInsights2016.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EventInsights2016` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : EventInsights2016.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the required json array is present
      if (jsonObj.get("A_ChevalDeFrise") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("A_ChevalDeFrise").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `A_ChevalDeFrise` to be an array in the JSON string but got `%s`", jsonObj.get("A_ChevalDeFrise").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("A_Portcullis") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("A_Portcullis").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `A_Portcullis` to be an array in the JSON string but got `%s`", jsonObj.get("A_Portcullis").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("B_Moat") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("B_Moat").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `B_Moat` to be an array in the JSON string but got `%s`", jsonObj.get("B_Moat").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("B_Ramparts") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("B_Ramparts").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `B_Ramparts` to be an array in the JSON string but got `%s`", jsonObj.get("B_Ramparts").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("C_Drawbridge") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("C_Drawbridge").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `C_Drawbridge` to be an array in the JSON string but got `%s`", jsonObj.get("C_Drawbridge").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("C_SallyPort") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("C_SallyPort").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `C_SallyPort` to be an array in the JSON string but got `%s`", jsonObj.get("C_SallyPort").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("D_RockWall") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("D_RockWall").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `D_RockWall` to be an array in the JSON string but got `%s`", jsonObj.get("D_RockWall").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("D_RoughTerrain") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("D_RoughTerrain").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `D_RoughTerrain` to be an array in the JSON string but got `%s`", jsonObj.get("D_RoughTerrain").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("LowBar") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("LowBar").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `LowBar` to be an array in the JSON string but got `%s`", jsonObj.get("LowBar").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("breaches") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("breaches").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `breaches` to be an array in the JSON string but got `%s`", jsonObj.get("breaches").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("captures") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("captures").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `captures` to be an array in the JSON string but got `%s`", jsonObj.get("captures").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("challenges") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("challenges").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `challenges` to be an array in the JSON string but got `%s`", jsonObj.get("challenges").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("high_score") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("high_score").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `high_score` to be an array in the JSON string but got `%s`", jsonObj.get("high_score").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("scales") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("scales").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `scales` to be an array in the JSON string but got `%s`", jsonObj.get("scales").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EventInsights2016.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EventInsights2016' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EventInsights2016> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EventInsights2016.class));

       return (TypeAdapter<T>) new TypeAdapter<EventInsights2016>() {
           @Override
           public void write(JsonWriter out, EventInsights2016 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EventInsights2016 read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EventInsights2016 given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EventInsights2016
   * @throws IOException if the JSON string is invalid with respect to EventInsights2016
   */
  public static EventInsights2016 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EventInsights2016.class);
  }

  /**
   * Convert an instance of EventInsights2016 to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

