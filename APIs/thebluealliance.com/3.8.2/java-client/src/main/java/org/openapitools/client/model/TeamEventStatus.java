/*
 * The Blue Alliance API v3
 * # Overview    Information and statistics about FIRST Robotics Competition teams and events.   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).
 *
 * The version of the OpenAPI document: 3.8.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.TeamEventStatusAlliance;
import org.openapitools.client.model.TeamEventStatusPlayoff;
import org.openapitools.client.model.TeamEventStatusRank;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * TeamEventStatus
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:56:47.661723-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TeamEventStatus {
  public static final String SERIALIZED_NAME_ALLIANCE = "alliance";
  @SerializedName(SERIALIZED_NAME_ALLIANCE)
  private TeamEventStatusAlliance alliance;

  public static final String SERIALIZED_NAME_ALLIANCE_STATUS_STR = "alliance_status_str";
  @SerializedName(SERIALIZED_NAME_ALLIANCE_STATUS_STR)
  private String allianceStatusStr;

  public static final String SERIALIZED_NAME_LAST_MATCH_KEY = "last_match_key";
  @SerializedName(SERIALIZED_NAME_LAST_MATCH_KEY)
  private String lastMatchKey;

  public static final String SERIALIZED_NAME_NEXT_MATCH_KEY = "next_match_key";
  @SerializedName(SERIALIZED_NAME_NEXT_MATCH_KEY)
  private String nextMatchKey;

  public static final String SERIALIZED_NAME_OVERALL_STATUS_STR = "overall_status_str";
  @SerializedName(SERIALIZED_NAME_OVERALL_STATUS_STR)
  private String overallStatusStr;

  public static final String SERIALIZED_NAME_PLAYOFF = "playoff";
  @SerializedName(SERIALIZED_NAME_PLAYOFF)
  private TeamEventStatusPlayoff playoff;

  public static final String SERIALIZED_NAME_PLAYOFF_STATUS_STR = "playoff_status_str";
  @SerializedName(SERIALIZED_NAME_PLAYOFF_STATUS_STR)
  private String playoffStatusStr;

  public static final String SERIALIZED_NAME_QUAL = "qual";
  @SerializedName(SERIALIZED_NAME_QUAL)
  private TeamEventStatusRank qual;

  public TeamEventStatus() {
  }

  public TeamEventStatus alliance(TeamEventStatusAlliance alliance) {
    this.alliance = alliance;
    return this;
  }

  /**
   * Get alliance
   * @return alliance
   */
  @javax.annotation.Nullable
  public TeamEventStatusAlliance getAlliance() {
    return alliance;
  }

  public void setAlliance(TeamEventStatusAlliance alliance) {
    this.alliance = alliance;
  }


  public TeamEventStatus allianceStatusStr(String allianceStatusStr) {
    this.allianceStatusStr = allianceStatusStr;
    return this;
  }

  /**
   * An HTML formatted string suitable for display to the user containing the team&#39;s alliance pick status.
   * @return allianceStatusStr
   */
  @javax.annotation.Nullable
  public String getAllianceStatusStr() {
    return allianceStatusStr;
  }

  public void setAllianceStatusStr(String allianceStatusStr) {
    this.allianceStatusStr = allianceStatusStr;
  }


  public TeamEventStatus lastMatchKey(String lastMatchKey) {
    this.lastMatchKey = lastMatchKey;
    return this;
  }

  /**
   * TBA match key for the last match the team played in at this event, or null.
   * @return lastMatchKey
   */
  @javax.annotation.Nullable
  public String getLastMatchKey() {
    return lastMatchKey;
  }

  public void setLastMatchKey(String lastMatchKey) {
    this.lastMatchKey = lastMatchKey;
  }


  public TeamEventStatus nextMatchKey(String nextMatchKey) {
    this.nextMatchKey = nextMatchKey;
    return this;
  }

  /**
   * TBA match key for the next match the team is scheduled to play in at this event, or null.
   * @return nextMatchKey
   */
  @javax.annotation.Nullable
  public String getNextMatchKey() {
    return nextMatchKey;
  }

  public void setNextMatchKey(String nextMatchKey) {
    this.nextMatchKey = nextMatchKey;
  }


  public TeamEventStatus overallStatusStr(String overallStatusStr) {
    this.overallStatusStr = overallStatusStr;
    return this;
  }

  /**
   * An HTML formatted string suitable for display to the user containing the team&#39;s overall status summary of the event.
   * @return overallStatusStr
   */
  @javax.annotation.Nullable
  public String getOverallStatusStr() {
    return overallStatusStr;
  }

  public void setOverallStatusStr(String overallStatusStr) {
    this.overallStatusStr = overallStatusStr;
  }


  public TeamEventStatus playoff(TeamEventStatusPlayoff playoff) {
    this.playoff = playoff;
    return this;
  }

  /**
   * Get playoff
   * @return playoff
   */
  @javax.annotation.Nullable
  public TeamEventStatusPlayoff getPlayoff() {
    return playoff;
  }

  public void setPlayoff(TeamEventStatusPlayoff playoff) {
    this.playoff = playoff;
  }


  public TeamEventStatus playoffStatusStr(String playoffStatusStr) {
    this.playoffStatusStr = playoffStatusStr;
    return this;
  }

  /**
   * An HTML formatter string suitable for display to the user containing the team&#39;s playoff status.
   * @return playoffStatusStr
   */
  @javax.annotation.Nullable
  public String getPlayoffStatusStr() {
    return playoffStatusStr;
  }

  public void setPlayoffStatusStr(String playoffStatusStr) {
    this.playoffStatusStr = playoffStatusStr;
  }


  public TeamEventStatus qual(TeamEventStatusRank qual) {
    this.qual = qual;
    return this;
  }

  /**
   * Get qual
   * @return qual
   */
  @javax.annotation.Nullable
  public TeamEventStatusRank getQual() {
    return qual;
  }

  public void setQual(TeamEventStatusRank qual) {
    this.qual = qual;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TeamEventStatus teamEventStatus = (TeamEventStatus) o;
    return Objects.equals(this.alliance, teamEventStatus.alliance) &&
        Objects.equals(this.allianceStatusStr, teamEventStatus.allianceStatusStr) &&
        Objects.equals(this.lastMatchKey, teamEventStatus.lastMatchKey) &&
        Objects.equals(this.nextMatchKey, teamEventStatus.nextMatchKey) &&
        Objects.equals(this.overallStatusStr, teamEventStatus.overallStatusStr) &&
        Objects.equals(this.playoff, teamEventStatus.playoff) &&
        Objects.equals(this.playoffStatusStr, teamEventStatus.playoffStatusStr) &&
        Objects.equals(this.qual, teamEventStatus.qual);
  }

  @Override
  public int hashCode() {
    return Objects.hash(alliance, allianceStatusStr, lastMatchKey, nextMatchKey, overallStatusStr, playoff, playoffStatusStr, qual);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TeamEventStatus {\n");
    sb.append("    alliance: ").append(toIndentedString(alliance)).append("\n");
    sb.append("    allianceStatusStr: ").append(toIndentedString(allianceStatusStr)).append("\n");
    sb.append("    lastMatchKey: ").append(toIndentedString(lastMatchKey)).append("\n");
    sb.append("    nextMatchKey: ").append(toIndentedString(nextMatchKey)).append("\n");
    sb.append("    overallStatusStr: ").append(toIndentedString(overallStatusStr)).append("\n");
    sb.append("    playoff: ").append(toIndentedString(playoff)).append("\n");
    sb.append("    playoffStatusStr: ").append(toIndentedString(playoffStatusStr)).append("\n");
    sb.append("    qual: ").append(toIndentedString(qual)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("alliance");
    openapiFields.add("alliance_status_str");
    openapiFields.add("last_match_key");
    openapiFields.add("next_match_key");
    openapiFields.add("overall_status_str");
    openapiFields.add("playoff");
    openapiFields.add("playoff_status_str");
    openapiFields.add("qual");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TeamEventStatus
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TeamEventStatus.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TeamEventStatus is not found in the empty JSON string", TeamEventStatus.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TeamEventStatus.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TeamEventStatus` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `alliance`
      if (jsonObj.get("alliance") != null && !jsonObj.get("alliance").isJsonNull()) {
        TeamEventStatusAlliance.validateJsonElement(jsonObj.get("alliance"));
      }
      if ((jsonObj.get("alliance_status_str") != null && !jsonObj.get("alliance_status_str").isJsonNull()) && !jsonObj.get("alliance_status_str").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `alliance_status_str` to be a primitive type in the JSON string but got `%s`", jsonObj.get("alliance_status_str").toString()));
      }
      if ((jsonObj.get("last_match_key") != null && !jsonObj.get("last_match_key").isJsonNull()) && !jsonObj.get("last_match_key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `last_match_key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("last_match_key").toString()));
      }
      if ((jsonObj.get("next_match_key") != null && !jsonObj.get("next_match_key").isJsonNull()) && !jsonObj.get("next_match_key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `next_match_key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("next_match_key").toString()));
      }
      if ((jsonObj.get("overall_status_str") != null && !jsonObj.get("overall_status_str").isJsonNull()) && !jsonObj.get("overall_status_str").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `overall_status_str` to be a primitive type in the JSON string but got `%s`", jsonObj.get("overall_status_str").toString()));
      }
      // validate the optional field `playoff`
      if (jsonObj.get("playoff") != null && !jsonObj.get("playoff").isJsonNull()) {
        TeamEventStatusPlayoff.validateJsonElement(jsonObj.get("playoff"));
      }
      if ((jsonObj.get("playoff_status_str") != null && !jsonObj.get("playoff_status_str").isJsonNull()) && !jsonObj.get("playoff_status_str").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `playoff_status_str` to be a primitive type in the JSON string but got `%s`", jsonObj.get("playoff_status_str").toString()));
      }
      // validate the optional field `qual`
      if (jsonObj.get("qual") != null && !jsonObj.get("qual").isJsonNull()) {
        TeamEventStatusRank.validateJsonElement(jsonObj.get("qual"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TeamEventStatus.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TeamEventStatus' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TeamEventStatus> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TeamEventStatus.class));

       return (TypeAdapter<T>) new TypeAdapter<TeamEventStatus>() {
           @Override
           public void write(JsonWriter out, TeamEventStatus value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TeamEventStatus read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TeamEventStatus given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TeamEventStatus
   * @throws IOException if the JSON string is invalid with respect to TeamEventStatus
   */
  public static TeamEventStatus fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TeamEventStatus.class);
  }

  /**
   * Convert an instance of TeamEventStatus to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

