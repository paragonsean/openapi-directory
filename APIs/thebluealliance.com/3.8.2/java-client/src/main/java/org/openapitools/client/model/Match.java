/*
 * The Blue Alliance API v3
 * # Overview    Information and statistics about FIRST Robotics Competition teams and events.   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).
 *
 * The version of the OpenAPI document: 3.8.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.MatchAlliances;
import org.openapitools.client.model.MatchVideosInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Match
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:56:47.661723-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Match {
  public static final String SERIALIZED_NAME_ACTUAL_TIME = "actual_time";
  @SerializedName(SERIALIZED_NAME_ACTUAL_TIME)
  private Long actualTime;

  public static final String SERIALIZED_NAME_ALLIANCES = "alliances";
  @SerializedName(SERIALIZED_NAME_ALLIANCES)
  private MatchAlliances alliances;

  /**
   * The competition level the match was played at.
   */
  @JsonAdapter(CompLevelEnum.Adapter.class)
  public enum CompLevelEnum {
    QM("qm"),
    
    EF("ef"),
    
    QF("qf"),
    
    SF("sf"),
    
    F("f");

    private String value;

    CompLevelEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CompLevelEnum fromValue(String value) {
      for (CompLevelEnum b : CompLevelEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CompLevelEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CompLevelEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CompLevelEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CompLevelEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CompLevelEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_COMP_LEVEL = "comp_level";
  @SerializedName(SERIALIZED_NAME_COMP_LEVEL)
  private CompLevelEnum compLevel;

  public static final String SERIALIZED_NAME_EVENT_KEY = "event_key";
  @SerializedName(SERIALIZED_NAME_EVENT_KEY)
  private String eventKey;

  public static final String SERIALIZED_NAME_KEY = "key";
  @SerializedName(SERIALIZED_NAME_KEY)
  private String key;

  public static final String SERIALIZED_NAME_MATCH_NUMBER = "match_number";
  @SerializedName(SERIALIZED_NAME_MATCH_NUMBER)
  private Integer matchNumber;

  public static final String SERIALIZED_NAME_POST_RESULT_TIME = "post_result_time";
  @SerializedName(SERIALIZED_NAME_POST_RESULT_TIME)
  private Long postResultTime;

  public static final String SERIALIZED_NAME_PREDICTED_TIME = "predicted_time";
  @SerializedName(SERIALIZED_NAME_PREDICTED_TIME)
  private Long predictedTime;

  public static final String SERIALIZED_NAME_SCORE_BREAKDOWN = "score_breakdown";
  @SerializedName(SERIALIZED_NAME_SCORE_BREAKDOWN)
  private Object scoreBreakdown;

  public static final String SERIALIZED_NAME_SET_NUMBER = "set_number";
  @SerializedName(SERIALIZED_NAME_SET_NUMBER)
  private Integer setNumber;

  public static final String SERIALIZED_NAME_TIME = "time";
  @SerializedName(SERIALIZED_NAME_TIME)
  private Long time;

  public static final String SERIALIZED_NAME_VIDEOS = "videos";
  @SerializedName(SERIALIZED_NAME_VIDEOS)
  private List<MatchVideosInner> videos = new ArrayList<>();

  /**
   * The color (red/blue) of the winning alliance. Will contain an empty string in the event of no winner, or a tie.
   */
  @JsonAdapter(WinningAllianceEnum.Adapter.class)
  public enum WinningAllianceEnum {
    RED("red"),
    
    BLUE("blue"),
    
    EMPTY("");

    private String value;

    WinningAllianceEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static WinningAllianceEnum fromValue(String value) {
      for (WinningAllianceEnum b : WinningAllianceEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<WinningAllianceEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final WinningAllianceEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public WinningAllianceEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return WinningAllianceEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      WinningAllianceEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_WINNING_ALLIANCE = "winning_alliance";
  @SerializedName(SERIALIZED_NAME_WINNING_ALLIANCE)
  private WinningAllianceEnum winningAlliance;

  public Match() {
  }

  public Match actualTime(Long actualTime) {
    this.actualTime = actualTime;
    return this;
  }

  /**
   * UNIX timestamp (seconds since 1-Jan-1970 00:00:00) of actual match start time.
   * @return actualTime
   */
  @javax.annotation.Nullable
  public Long getActualTime() {
    return actualTime;
  }

  public void setActualTime(Long actualTime) {
    this.actualTime = actualTime;
  }


  public Match alliances(MatchAlliances alliances) {
    this.alliances = alliances;
    return this;
  }

  /**
   * Get alliances
   * @return alliances
   */
  @javax.annotation.Nullable
  public MatchAlliances getAlliances() {
    return alliances;
  }

  public void setAlliances(MatchAlliances alliances) {
    this.alliances = alliances;
  }


  public Match compLevel(CompLevelEnum compLevel) {
    this.compLevel = compLevel;
    return this;
  }

  /**
   * The competition level the match was played at.
   * @return compLevel
   */
  @javax.annotation.Nonnull
  public CompLevelEnum getCompLevel() {
    return compLevel;
  }

  public void setCompLevel(CompLevelEnum compLevel) {
    this.compLevel = compLevel;
  }


  public Match eventKey(String eventKey) {
    this.eventKey = eventKey;
    return this;
  }

  /**
   * Event key of the event the match was played at.
   * @return eventKey
   */
  @javax.annotation.Nonnull
  public String getEventKey() {
    return eventKey;
  }

  public void setEventKey(String eventKey) {
    this.eventKey = eventKey;
  }


  public Match key(String key) {
    this.key = key;
    return this;
  }

  /**
   * TBA match key with the format &#x60;yyyy[EVENT_CODE]_[COMP_LEVEL]m[MATCH_NUMBER]&#x60;, where &#x60;yyyy&#x60; is the year, and &#x60;EVENT_CODE&#x60; is the event code of the event, &#x60;COMP_LEVEL&#x60; is (qm, ef, qf, sf, f), and &#x60;MATCH_NUMBER&#x60; is the match number in the competition level. A set number may be appended to the competition level if more than one match in required per set.
   * @return key
   */
  @javax.annotation.Nonnull
  public String getKey() {
    return key;
  }

  public void setKey(String key) {
    this.key = key;
  }


  public Match matchNumber(Integer matchNumber) {
    this.matchNumber = matchNumber;
    return this;
  }

  /**
   * The match number of the match in the competition level.
   * @return matchNumber
   */
  @javax.annotation.Nonnull
  public Integer getMatchNumber() {
    return matchNumber;
  }

  public void setMatchNumber(Integer matchNumber) {
    this.matchNumber = matchNumber;
  }


  public Match postResultTime(Long postResultTime) {
    this.postResultTime = postResultTime;
    return this;
  }

  /**
   * UNIX timestamp (seconds since 1-Jan-1970 00:00:00) when the match result was posted.
   * @return postResultTime
   */
  @javax.annotation.Nullable
  public Long getPostResultTime() {
    return postResultTime;
  }

  public void setPostResultTime(Long postResultTime) {
    this.postResultTime = postResultTime;
  }


  public Match predictedTime(Long predictedTime) {
    this.predictedTime = predictedTime;
    return this;
  }

  /**
   * UNIX timestamp (seconds since 1-Jan-1970 00:00:00) of the TBA predicted match start time.
   * @return predictedTime
   */
  @javax.annotation.Nullable
  public Long getPredictedTime() {
    return predictedTime;
  }

  public void setPredictedTime(Long predictedTime) {
    this.predictedTime = predictedTime;
  }


  public Match scoreBreakdown(Object scoreBreakdown) {
    this.scoreBreakdown = scoreBreakdown;
    return this;
  }

  /**
   * Score breakdown for auto, teleop, etc. points. Varies from year to year. May be null.
   * @return scoreBreakdown
   */
  @javax.annotation.Nullable
  public Object getScoreBreakdown() {
    return scoreBreakdown;
  }

  public void setScoreBreakdown(Object scoreBreakdown) {
    this.scoreBreakdown = scoreBreakdown;
  }


  public Match setNumber(Integer setNumber) {
    this.setNumber = setNumber;
    return this;
  }

  /**
   * The set number in a series of matches where more than one match is required in the match series.
   * @return setNumber
   */
  @javax.annotation.Nonnull
  public Integer getSetNumber() {
    return setNumber;
  }

  public void setSetNumber(Integer setNumber) {
    this.setNumber = setNumber;
  }


  public Match time(Long time) {
    this.time = time;
    return this;
  }

  /**
   * UNIX timestamp (seconds since 1-Jan-1970 00:00:00) of the scheduled match time, as taken from the published schedule.
   * @return time
   */
  @javax.annotation.Nullable
  public Long getTime() {
    return time;
  }

  public void setTime(Long time) {
    this.time = time;
  }


  public Match videos(List<MatchVideosInner> videos) {
    this.videos = videos;
    return this;
  }

  public Match addVideosItem(MatchVideosInner videosItem) {
    if (this.videos == null) {
      this.videos = new ArrayList<>();
    }
    this.videos.add(videosItem);
    return this;
  }

  /**
   * Array of video objects associated with this match.
   * @return videos
   */
  @javax.annotation.Nullable
  public List<MatchVideosInner> getVideos() {
    return videos;
  }

  public void setVideos(List<MatchVideosInner> videos) {
    this.videos = videos;
  }


  public Match winningAlliance(WinningAllianceEnum winningAlliance) {
    this.winningAlliance = winningAlliance;
    return this;
  }

  /**
   * The color (red/blue) of the winning alliance. Will contain an empty string in the event of no winner, or a tie.
   * @return winningAlliance
   */
  @javax.annotation.Nullable
  public WinningAllianceEnum getWinningAlliance() {
    return winningAlliance;
  }

  public void setWinningAlliance(WinningAllianceEnum winningAlliance) {
    this.winningAlliance = winningAlliance;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Match match = (Match) o;
    return Objects.equals(this.actualTime, match.actualTime) &&
        Objects.equals(this.alliances, match.alliances) &&
        Objects.equals(this.compLevel, match.compLevel) &&
        Objects.equals(this.eventKey, match.eventKey) &&
        Objects.equals(this.key, match.key) &&
        Objects.equals(this.matchNumber, match.matchNumber) &&
        Objects.equals(this.postResultTime, match.postResultTime) &&
        Objects.equals(this.predictedTime, match.predictedTime) &&
        Objects.equals(this.scoreBreakdown, match.scoreBreakdown) &&
        Objects.equals(this.setNumber, match.setNumber) &&
        Objects.equals(this.time, match.time) &&
        Objects.equals(this.videos, match.videos) &&
        Objects.equals(this.winningAlliance, match.winningAlliance);
  }

  @Override
  public int hashCode() {
    return Objects.hash(actualTime, alliances, compLevel, eventKey, key, matchNumber, postResultTime, predictedTime, scoreBreakdown, setNumber, time, videos, winningAlliance);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Match {\n");
    sb.append("    actualTime: ").append(toIndentedString(actualTime)).append("\n");
    sb.append("    alliances: ").append(toIndentedString(alliances)).append("\n");
    sb.append("    compLevel: ").append(toIndentedString(compLevel)).append("\n");
    sb.append("    eventKey: ").append(toIndentedString(eventKey)).append("\n");
    sb.append("    key: ").append(toIndentedString(key)).append("\n");
    sb.append("    matchNumber: ").append(toIndentedString(matchNumber)).append("\n");
    sb.append("    postResultTime: ").append(toIndentedString(postResultTime)).append("\n");
    sb.append("    predictedTime: ").append(toIndentedString(predictedTime)).append("\n");
    sb.append("    scoreBreakdown: ").append(toIndentedString(scoreBreakdown)).append("\n");
    sb.append("    setNumber: ").append(toIndentedString(setNumber)).append("\n");
    sb.append("    time: ").append(toIndentedString(time)).append("\n");
    sb.append("    videos: ").append(toIndentedString(videos)).append("\n");
    sb.append("    winningAlliance: ").append(toIndentedString(winningAlliance)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("actual_time");
    openapiFields.add("alliances");
    openapiFields.add("comp_level");
    openapiFields.add("event_key");
    openapiFields.add("key");
    openapiFields.add("match_number");
    openapiFields.add("post_result_time");
    openapiFields.add("predicted_time");
    openapiFields.add("score_breakdown");
    openapiFields.add("set_number");
    openapiFields.add("time");
    openapiFields.add("videos");
    openapiFields.add("winning_alliance");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("comp_level");
    openapiRequiredFields.add("event_key");
    openapiRequiredFields.add("key");
    openapiRequiredFields.add("match_number");
    openapiRequiredFields.add("set_number");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Match
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Match.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Match is not found in the empty JSON string", Match.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Match.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Match` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Match.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `alliances`
      if (jsonObj.get("alliances") != null && !jsonObj.get("alliances").isJsonNull()) {
        MatchAlliances.validateJsonElement(jsonObj.get("alliances"));
      }
      if (!jsonObj.get("comp_level").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `comp_level` to be a primitive type in the JSON string but got `%s`", jsonObj.get("comp_level").toString()));
      }
      // validate the required field `comp_level`
      CompLevelEnum.validateJsonElement(jsonObj.get("comp_level"));
      if (!jsonObj.get("event_key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `event_key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("event_key").toString()));
      }
      if (!jsonObj.get("key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("key").toString()));
      }
      if (jsonObj.get("videos") != null && !jsonObj.get("videos").isJsonNull()) {
        JsonArray jsonArrayvideos = jsonObj.getAsJsonArray("videos");
        if (jsonArrayvideos != null) {
          // ensure the json data is an array
          if (!jsonObj.get("videos").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `videos` to be an array in the JSON string but got `%s`", jsonObj.get("videos").toString()));
          }

          // validate the optional field `videos` (array)
          for (int i = 0; i < jsonArrayvideos.size(); i++) {
            MatchVideosInner.validateJsonElement(jsonArrayvideos.get(i));
          };
        }
      }
      if ((jsonObj.get("winning_alliance") != null && !jsonObj.get("winning_alliance").isJsonNull()) && !jsonObj.get("winning_alliance").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `winning_alliance` to be a primitive type in the JSON string but got `%s`", jsonObj.get("winning_alliance").toString()));
      }
      // validate the optional field `winning_alliance`
      if (jsonObj.get("winning_alliance") != null && !jsonObj.get("winning_alliance").isJsonNull()) {
        WinningAllianceEnum.validateJsonElement(jsonObj.get("winning_alliance"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Match.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Match' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Match> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Match.class));

       return (TypeAdapter<T>) new TypeAdapter<Match>() {
           @Override
           public void write(JsonWriter out, Match value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Match read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Match given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Match
   * @throws IOException if the JSON string is invalid with respect to Match
   */
  public static Match fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Match.class);
  }

  /**
   * Convert an instance of Match to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

