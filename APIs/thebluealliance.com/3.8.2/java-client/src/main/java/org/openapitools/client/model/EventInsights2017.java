/*
 * The Blue Alliance API v3
 * # Overview    Information and statistics about FIRST Robotics Competition teams and events.   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).
 *
 * The version of the OpenAPI document: 3.8.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Insights for FIRST STEAMWORKS qualification and elimination matches.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:56:47.661723-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class EventInsights2017 {
  public static final String SERIALIZED_NAME_AVERAGE_FOUL_SCORE = "average_foul_score";
  @SerializedName(SERIALIZED_NAME_AVERAGE_FOUL_SCORE)
  private Float averageFoulScore;

  public static final String SERIALIZED_NAME_AVERAGE_FUEL_POINTS = "average_fuel_points";
  @SerializedName(SERIALIZED_NAME_AVERAGE_FUEL_POINTS)
  private Float averageFuelPoints;

  public static final String SERIALIZED_NAME_AVERAGE_FUEL_POINTS_AUTO = "average_fuel_points_auto";
  @SerializedName(SERIALIZED_NAME_AVERAGE_FUEL_POINTS_AUTO)
  private Float averageFuelPointsAuto;

  public static final String SERIALIZED_NAME_AVERAGE_FUEL_POINTS_TELEOP = "average_fuel_points_teleop";
  @SerializedName(SERIALIZED_NAME_AVERAGE_FUEL_POINTS_TELEOP)
  private Float averageFuelPointsTeleop;

  public static final String SERIALIZED_NAME_AVERAGE_HIGH_GOALS = "average_high_goals";
  @SerializedName(SERIALIZED_NAME_AVERAGE_HIGH_GOALS)
  private Float averageHighGoals;

  public static final String SERIALIZED_NAME_AVERAGE_HIGH_GOALS_AUTO = "average_high_goals_auto";
  @SerializedName(SERIALIZED_NAME_AVERAGE_HIGH_GOALS_AUTO)
  private Float averageHighGoalsAuto;

  public static final String SERIALIZED_NAME_AVERAGE_HIGH_GOALS_TELEOP = "average_high_goals_teleop";
  @SerializedName(SERIALIZED_NAME_AVERAGE_HIGH_GOALS_TELEOP)
  private Float averageHighGoalsTeleop;

  public static final String SERIALIZED_NAME_AVERAGE_LOW_GOALS = "average_low_goals";
  @SerializedName(SERIALIZED_NAME_AVERAGE_LOW_GOALS)
  private Float averageLowGoals;

  public static final String SERIALIZED_NAME_AVERAGE_LOW_GOALS_AUTO = "average_low_goals_auto";
  @SerializedName(SERIALIZED_NAME_AVERAGE_LOW_GOALS_AUTO)
  private Float averageLowGoalsAuto;

  public static final String SERIALIZED_NAME_AVERAGE_LOW_GOALS_TELEOP = "average_low_goals_teleop";
  @SerializedName(SERIALIZED_NAME_AVERAGE_LOW_GOALS_TELEOP)
  private Float averageLowGoalsTeleop;

  public static final String SERIALIZED_NAME_AVERAGE_MOBILITY_POINTS_AUTO = "average_mobility_points_auto";
  @SerializedName(SERIALIZED_NAME_AVERAGE_MOBILITY_POINTS_AUTO)
  private Float averageMobilityPointsAuto;

  public static final String SERIALIZED_NAME_AVERAGE_POINTS_AUTO = "average_points_auto";
  @SerializedName(SERIALIZED_NAME_AVERAGE_POINTS_AUTO)
  private Float averagePointsAuto;

  public static final String SERIALIZED_NAME_AVERAGE_POINTS_TELEOP = "average_points_teleop";
  @SerializedName(SERIALIZED_NAME_AVERAGE_POINTS_TELEOP)
  private Float averagePointsTeleop;

  public static final String SERIALIZED_NAME_AVERAGE_ROTOR_POINTS = "average_rotor_points";
  @SerializedName(SERIALIZED_NAME_AVERAGE_ROTOR_POINTS)
  private Float averageRotorPoints;

  public static final String SERIALIZED_NAME_AVERAGE_ROTOR_POINTS_AUTO = "average_rotor_points_auto";
  @SerializedName(SERIALIZED_NAME_AVERAGE_ROTOR_POINTS_AUTO)
  private Float averageRotorPointsAuto;

  public static final String SERIALIZED_NAME_AVERAGE_ROTOR_POINTS_TELEOP = "average_rotor_points_teleop";
  @SerializedName(SERIALIZED_NAME_AVERAGE_ROTOR_POINTS_TELEOP)
  private Float averageRotorPointsTeleop;

  public static final String SERIALIZED_NAME_AVERAGE_SCORE = "average_score";
  @SerializedName(SERIALIZED_NAME_AVERAGE_SCORE)
  private Float averageScore;

  public static final String SERIALIZED_NAME_AVERAGE_TAKEOFF_POINTS_TELEOP = "average_takeoff_points_teleop";
  @SerializedName(SERIALIZED_NAME_AVERAGE_TAKEOFF_POINTS_TELEOP)
  private Float averageTakeoffPointsTeleop;

  public static final String SERIALIZED_NAME_AVERAGE_WIN_MARGIN = "average_win_margin";
  @SerializedName(SERIALIZED_NAME_AVERAGE_WIN_MARGIN)
  private Float averageWinMargin;

  public static final String SERIALIZED_NAME_AVERAGE_WIN_SCORE = "average_win_score";
  @SerializedName(SERIALIZED_NAME_AVERAGE_WIN_SCORE)
  private Float averageWinScore;

  public static final String SERIALIZED_NAME_HIGH_KPA = "high_kpa";
  @SerializedName(SERIALIZED_NAME_HIGH_KPA)
  private List<String> highKpa = new ArrayList<>();

  public static final String SERIALIZED_NAME_HIGH_SCORE = "high_score";
  @SerializedName(SERIALIZED_NAME_HIGH_SCORE)
  private List<String> highScore = new ArrayList<>();

  public static final String SERIALIZED_NAME_KPA_ACHIEVED = "kpa_achieved";
  @SerializedName(SERIALIZED_NAME_KPA_ACHIEVED)
  private List<Float> kpaAchieved = new ArrayList<>();

  public static final String SERIALIZED_NAME_MOBILITY_COUNTS = "mobility_counts";
  @SerializedName(SERIALIZED_NAME_MOBILITY_COUNTS)
  private List<Float> mobilityCounts = new ArrayList<>();

  public static final String SERIALIZED_NAME_ROTOR1_ENGAGED = "rotor_1_engaged";
  @SerializedName(SERIALIZED_NAME_ROTOR1_ENGAGED)
  private List<Float> rotor1Engaged = new ArrayList<>();

  public static final String SERIALIZED_NAME_ROTOR1_ENGAGED_AUTO = "rotor_1_engaged_auto";
  @SerializedName(SERIALIZED_NAME_ROTOR1_ENGAGED_AUTO)
  private List<Float> rotor1EngagedAuto = new ArrayList<>();

  public static final String SERIALIZED_NAME_ROTOR2_ENGAGED = "rotor_2_engaged";
  @SerializedName(SERIALIZED_NAME_ROTOR2_ENGAGED)
  private List<Float> rotor2Engaged = new ArrayList<>();

  public static final String SERIALIZED_NAME_ROTOR2_ENGAGED_AUTO = "rotor_2_engaged_auto";
  @SerializedName(SERIALIZED_NAME_ROTOR2_ENGAGED_AUTO)
  private List<Float> rotor2EngagedAuto = new ArrayList<>();

  public static final String SERIALIZED_NAME_ROTOR3_ENGAGED = "rotor_3_engaged";
  @SerializedName(SERIALIZED_NAME_ROTOR3_ENGAGED)
  private List<Float> rotor3Engaged = new ArrayList<>();

  public static final String SERIALIZED_NAME_ROTOR4_ENGAGED = "rotor_4_engaged";
  @SerializedName(SERIALIZED_NAME_ROTOR4_ENGAGED)
  private List<Float> rotor4Engaged = new ArrayList<>();

  public static final String SERIALIZED_NAME_TAKEOFF_COUNTS = "takeoff_counts";
  @SerializedName(SERIALIZED_NAME_TAKEOFF_COUNTS)
  private List<Float> takeoffCounts = new ArrayList<>();

  public static final String SERIALIZED_NAME_UNICORN_MATCHES = "unicorn_matches";
  @SerializedName(SERIALIZED_NAME_UNICORN_MATCHES)
  private List<Float> unicornMatches = new ArrayList<>();

  public EventInsights2017() {
  }

  public EventInsights2017 averageFoulScore(Float averageFoulScore) {
    this.averageFoulScore = averageFoulScore;
    return this;
  }

  /**
   * Average foul score.
   * @return averageFoulScore
   */
  @javax.annotation.Nonnull
  public Float getAverageFoulScore() {
    return averageFoulScore;
  }

  public void setAverageFoulScore(Float averageFoulScore) {
    this.averageFoulScore = averageFoulScore;
  }


  public EventInsights2017 averageFuelPoints(Float averageFuelPoints) {
    this.averageFuelPoints = averageFuelPoints;
    return this;
  }

  /**
   * Average fuel points scored.
   * @return averageFuelPoints
   */
  @javax.annotation.Nonnull
  public Float getAverageFuelPoints() {
    return averageFuelPoints;
  }

  public void setAverageFuelPoints(Float averageFuelPoints) {
    this.averageFuelPoints = averageFuelPoints;
  }


  public EventInsights2017 averageFuelPointsAuto(Float averageFuelPointsAuto) {
    this.averageFuelPointsAuto = averageFuelPointsAuto;
    return this;
  }

  /**
   * Average fuel points scored during auto.
   * @return averageFuelPointsAuto
   */
  @javax.annotation.Nonnull
  public Float getAverageFuelPointsAuto() {
    return averageFuelPointsAuto;
  }

  public void setAverageFuelPointsAuto(Float averageFuelPointsAuto) {
    this.averageFuelPointsAuto = averageFuelPointsAuto;
  }


  public EventInsights2017 averageFuelPointsTeleop(Float averageFuelPointsTeleop) {
    this.averageFuelPointsTeleop = averageFuelPointsTeleop;
    return this;
  }

  /**
   * Average fuel points scored during teleop.
   * @return averageFuelPointsTeleop
   */
  @javax.annotation.Nonnull
  public Float getAverageFuelPointsTeleop() {
    return averageFuelPointsTeleop;
  }

  public void setAverageFuelPointsTeleop(Float averageFuelPointsTeleop) {
    this.averageFuelPointsTeleop = averageFuelPointsTeleop;
  }


  public EventInsights2017 averageHighGoals(Float averageHighGoals) {
    this.averageHighGoals = averageHighGoals;
    return this;
  }

  /**
   * Average points scored in the high goal.
   * @return averageHighGoals
   */
  @javax.annotation.Nonnull
  public Float getAverageHighGoals() {
    return averageHighGoals;
  }

  public void setAverageHighGoals(Float averageHighGoals) {
    this.averageHighGoals = averageHighGoals;
  }


  public EventInsights2017 averageHighGoalsAuto(Float averageHighGoalsAuto) {
    this.averageHighGoalsAuto = averageHighGoalsAuto;
    return this;
  }

  /**
   * Average points scored in the high goal during auto.
   * @return averageHighGoalsAuto
   */
  @javax.annotation.Nonnull
  public Float getAverageHighGoalsAuto() {
    return averageHighGoalsAuto;
  }

  public void setAverageHighGoalsAuto(Float averageHighGoalsAuto) {
    this.averageHighGoalsAuto = averageHighGoalsAuto;
  }


  public EventInsights2017 averageHighGoalsTeleop(Float averageHighGoalsTeleop) {
    this.averageHighGoalsTeleop = averageHighGoalsTeleop;
    return this;
  }

  /**
   * Average points scored in the high goal during teleop.
   * @return averageHighGoalsTeleop
   */
  @javax.annotation.Nonnull
  public Float getAverageHighGoalsTeleop() {
    return averageHighGoalsTeleop;
  }

  public void setAverageHighGoalsTeleop(Float averageHighGoalsTeleop) {
    this.averageHighGoalsTeleop = averageHighGoalsTeleop;
  }


  public EventInsights2017 averageLowGoals(Float averageLowGoals) {
    this.averageLowGoals = averageLowGoals;
    return this;
  }

  /**
   * Average points scored in the low goal.
   * @return averageLowGoals
   */
  @javax.annotation.Nonnull
  public Float getAverageLowGoals() {
    return averageLowGoals;
  }

  public void setAverageLowGoals(Float averageLowGoals) {
    this.averageLowGoals = averageLowGoals;
  }


  public EventInsights2017 averageLowGoalsAuto(Float averageLowGoalsAuto) {
    this.averageLowGoalsAuto = averageLowGoalsAuto;
    return this;
  }

  /**
   * Average points scored in the low goal during auto.
   * @return averageLowGoalsAuto
   */
  @javax.annotation.Nonnull
  public Float getAverageLowGoalsAuto() {
    return averageLowGoalsAuto;
  }

  public void setAverageLowGoalsAuto(Float averageLowGoalsAuto) {
    this.averageLowGoalsAuto = averageLowGoalsAuto;
  }


  public EventInsights2017 averageLowGoalsTeleop(Float averageLowGoalsTeleop) {
    this.averageLowGoalsTeleop = averageLowGoalsTeleop;
    return this;
  }

  /**
   * Average points scored in the low goal during teleop.
   * @return averageLowGoalsTeleop
   */
  @javax.annotation.Nonnull
  public Float getAverageLowGoalsTeleop() {
    return averageLowGoalsTeleop;
  }

  public void setAverageLowGoalsTeleop(Float averageLowGoalsTeleop) {
    this.averageLowGoalsTeleop = averageLowGoalsTeleop;
  }


  public EventInsights2017 averageMobilityPointsAuto(Float averageMobilityPointsAuto) {
    this.averageMobilityPointsAuto = averageMobilityPointsAuto;
    return this;
  }

  /**
   * Average mobility points scored during auto.
   * @return averageMobilityPointsAuto
   */
  @javax.annotation.Nonnull
  public Float getAverageMobilityPointsAuto() {
    return averageMobilityPointsAuto;
  }

  public void setAverageMobilityPointsAuto(Float averageMobilityPointsAuto) {
    this.averageMobilityPointsAuto = averageMobilityPointsAuto;
  }


  public EventInsights2017 averagePointsAuto(Float averagePointsAuto) {
    this.averagePointsAuto = averagePointsAuto;
    return this;
  }

  /**
   * Average points scored during auto.
   * @return averagePointsAuto
   */
  @javax.annotation.Nonnull
  public Float getAveragePointsAuto() {
    return averagePointsAuto;
  }

  public void setAveragePointsAuto(Float averagePointsAuto) {
    this.averagePointsAuto = averagePointsAuto;
  }


  public EventInsights2017 averagePointsTeleop(Float averagePointsTeleop) {
    this.averagePointsTeleop = averagePointsTeleop;
    return this;
  }

  /**
   * Average points scored during teleop.
   * @return averagePointsTeleop
   */
  @javax.annotation.Nonnull
  public Float getAveragePointsTeleop() {
    return averagePointsTeleop;
  }

  public void setAveragePointsTeleop(Float averagePointsTeleop) {
    this.averagePointsTeleop = averagePointsTeleop;
  }


  public EventInsights2017 averageRotorPoints(Float averageRotorPoints) {
    this.averageRotorPoints = averageRotorPoints;
    return this;
  }

  /**
   * Average rotor points scored.
   * @return averageRotorPoints
   */
  @javax.annotation.Nonnull
  public Float getAverageRotorPoints() {
    return averageRotorPoints;
  }

  public void setAverageRotorPoints(Float averageRotorPoints) {
    this.averageRotorPoints = averageRotorPoints;
  }


  public EventInsights2017 averageRotorPointsAuto(Float averageRotorPointsAuto) {
    this.averageRotorPointsAuto = averageRotorPointsAuto;
    return this;
  }

  /**
   * Average rotor points scored during auto.
   * @return averageRotorPointsAuto
   */
  @javax.annotation.Nonnull
  public Float getAverageRotorPointsAuto() {
    return averageRotorPointsAuto;
  }

  public void setAverageRotorPointsAuto(Float averageRotorPointsAuto) {
    this.averageRotorPointsAuto = averageRotorPointsAuto;
  }


  public EventInsights2017 averageRotorPointsTeleop(Float averageRotorPointsTeleop) {
    this.averageRotorPointsTeleop = averageRotorPointsTeleop;
    return this;
  }

  /**
   * Average rotor points scored during teleop.
   * @return averageRotorPointsTeleop
   */
  @javax.annotation.Nonnull
  public Float getAverageRotorPointsTeleop() {
    return averageRotorPointsTeleop;
  }

  public void setAverageRotorPointsTeleop(Float averageRotorPointsTeleop) {
    this.averageRotorPointsTeleop = averageRotorPointsTeleop;
  }


  public EventInsights2017 averageScore(Float averageScore) {
    this.averageScore = averageScore;
    return this;
  }

  /**
   * Average score.
   * @return averageScore
   */
  @javax.annotation.Nonnull
  public Float getAverageScore() {
    return averageScore;
  }

  public void setAverageScore(Float averageScore) {
    this.averageScore = averageScore;
  }


  public EventInsights2017 averageTakeoffPointsTeleop(Float averageTakeoffPointsTeleop) {
    this.averageTakeoffPointsTeleop = averageTakeoffPointsTeleop;
    return this;
  }

  /**
   * Average takeoff points scored during teleop.
   * @return averageTakeoffPointsTeleop
   */
  @javax.annotation.Nonnull
  public Float getAverageTakeoffPointsTeleop() {
    return averageTakeoffPointsTeleop;
  }

  public void setAverageTakeoffPointsTeleop(Float averageTakeoffPointsTeleop) {
    this.averageTakeoffPointsTeleop = averageTakeoffPointsTeleop;
  }


  public EventInsights2017 averageWinMargin(Float averageWinMargin) {
    this.averageWinMargin = averageWinMargin;
    return this;
  }

  /**
   * Average margin of victory.
   * @return averageWinMargin
   */
  @javax.annotation.Nonnull
  public Float getAverageWinMargin() {
    return averageWinMargin;
  }

  public void setAverageWinMargin(Float averageWinMargin) {
    this.averageWinMargin = averageWinMargin;
  }


  public EventInsights2017 averageWinScore(Float averageWinScore) {
    this.averageWinScore = averageWinScore;
    return this;
  }

  /**
   * Average winning score.
   * @return averageWinScore
   */
  @javax.annotation.Nonnull
  public Float getAverageWinScore() {
    return averageWinScore;
  }

  public void setAverageWinScore(Float averageWinScore) {
    this.averageWinScore = averageWinScore;
  }


  public EventInsights2017 highKpa(List<String> highKpa) {
    this.highKpa = highKpa;
    return this;
  }

  public EventInsights2017 addHighKpaItem(String highKpaItem) {
    if (this.highKpa == null) {
      this.highKpa = new ArrayList<>();
    }
    this.highKpa.add(highKpaItem);
    return this;
  }

  /**
   * An array with three values, kPa scored, match key from the match with the high kPa, and the name of the match
   * @return highKpa
   */
  @javax.annotation.Nonnull
  public List<String> getHighKpa() {
    return highKpa;
  }

  public void setHighKpa(List<String> highKpa) {
    this.highKpa = highKpa;
  }


  public EventInsights2017 highScore(List<String> highScore) {
    this.highScore = highScore;
    return this;
  }

  public EventInsights2017 addHighScoreItem(String highScoreItem) {
    if (this.highScore == null) {
      this.highScore = new ArrayList<>();
    }
    this.highScore.add(highScoreItem);
    return this;
  }

  /**
   * An array with three values, high score, match key from the match with the high score, and the name of the match
   * @return highScore
   */
  @javax.annotation.Nonnull
  public List<String> getHighScore() {
    return highScore;
  }

  public void setHighScore(List<String> highScore) {
    this.highScore = highScore;
  }


  public EventInsights2017 kpaAchieved(List<Float> kpaAchieved) {
    this.kpaAchieved = kpaAchieved;
    return this;
  }

  public EventInsights2017 addKpaAchievedItem(Float kpaAchievedItem) {
    if (this.kpaAchieved == null) {
      this.kpaAchieved = new ArrayList<>();
    }
    this.kpaAchieved.add(kpaAchievedItem);
    return this;
  }

  /**
   * An array with three values, number of times kPa bonus achieved, number of opportunities to bonus, and percentage.
   * @return kpaAchieved
   */
  @javax.annotation.Nonnull
  public List<Float> getKpaAchieved() {
    return kpaAchieved;
  }

  public void setKpaAchieved(List<Float> kpaAchieved) {
    this.kpaAchieved = kpaAchieved;
  }


  public EventInsights2017 mobilityCounts(List<Float> mobilityCounts) {
    this.mobilityCounts = mobilityCounts;
    return this;
  }

  public EventInsights2017 addMobilityCountsItem(Float mobilityCountsItem) {
    if (this.mobilityCounts == null) {
      this.mobilityCounts = new ArrayList<>();
    }
    this.mobilityCounts.add(mobilityCountsItem);
    return this;
  }

  /**
   * An array with three values, number of times mobility bonus achieved, number of opportunities to bonus, and percentage.
   * @return mobilityCounts
   */
  @javax.annotation.Nonnull
  public List<Float> getMobilityCounts() {
    return mobilityCounts;
  }

  public void setMobilityCounts(List<Float> mobilityCounts) {
    this.mobilityCounts = mobilityCounts;
  }


  public EventInsights2017 rotor1Engaged(List<Float> rotor1Engaged) {
    this.rotor1Engaged = rotor1Engaged;
    return this;
  }

  public EventInsights2017 addRotor1EngagedItem(Float rotor1EngagedItem) {
    if (this.rotor1Engaged == null) {
      this.rotor1Engaged = new ArrayList<>();
    }
    this.rotor1Engaged.add(rotor1EngagedItem);
    return this;
  }

  /**
   * An array with three values, number of times rotor 1 engaged, number of opportunities to engage, and percentage.
   * @return rotor1Engaged
   */
  @javax.annotation.Nonnull
  public List<Float> getRotor1Engaged() {
    return rotor1Engaged;
  }

  public void setRotor1Engaged(List<Float> rotor1Engaged) {
    this.rotor1Engaged = rotor1Engaged;
  }


  public EventInsights2017 rotor1EngagedAuto(List<Float> rotor1EngagedAuto) {
    this.rotor1EngagedAuto = rotor1EngagedAuto;
    return this;
  }

  public EventInsights2017 addRotor1EngagedAutoItem(Float rotor1EngagedAutoItem) {
    if (this.rotor1EngagedAuto == null) {
      this.rotor1EngagedAuto = new ArrayList<>();
    }
    this.rotor1EngagedAuto.add(rotor1EngagedAutoItem);
    return this;
  }

  /**
   * An array with three values, number of times rotor 1 engaged in auto, number of opportunities to engage in auto, and percentage.
   * @return rotor1EngagedAuto
   */
  @javax.annotation.Nonnull
  public List<Float> getRotor1EngagedAuto() {
    return rotor1EngagedAuto;
  }

  public void setRotor1EngagedAuto(List<Float> rotor1EngagedAuto) {
    this.rotor1EngagedAuto = rotor1EngagedAuto;
  }


  public EventInsights2017 rotor2Engaged(List<Float> rotor2Engaged) {
    this.rotor2Engaged = rotor2Engaged;
    return this;
  }

  public EventInsights2017 addRotor2EngagedItem(Float rotor2EngagedItem) {
    if (this.rotor2Engaged == null) {
      this.rotor2Engaged = new ArrayList<>();
    }
    this.rotor2Engaged.add(rotor2EngagedItem);
    return this;
  }

  /**
   * An array with three values, number of times rotor 2 engaged, number of opportunities to engage, and percentage.
   * @return rotor2Engaged
   */
  @javax.annotation.Nonnull
  public List<Float> getRotor2Engaged() {
    return rotor2Engaged;
  }

  public void setRotor2Engaged(List<Float> rotor2Engaged) {
    this.rotor2Engaged = rotor2Engaged;
  }


  public EventInsights2017 rotor2EngagedAuto(List<Float> rotor2EngagedAuto) {
    this.rotor2EngagedAuto = rotor2EngagedAuto;
    return this;
  }

  public EventInsights2017 addRotor2EngagedAutoItem(Float rotor2EngagedAutoItem) {
    if (this.rotor2EngagedAuto == null) {
      this.rotor2EngagedAuto = new ArrayList<>();
    }
    this.rotor2EngagedAuto.add(rotor2EngagedAutoItem);
    return this;
  }

  /**
   * An array with three values, number of times rotor 2 engaged in auto, number of opportunities to engage in auto, and percentage.
   * @return rotor2EngagedAuto
   */
  @javax.annotation.Nonnull
  public List<Float> getRotor2EngagedAuto() {
    return rotor2EngagedAuto;
  }

  public void setRotor2EngagedAuto(List<Float> rotor2EngagedAuto) {
    this.rotor2EngagedAuto = rotor2EngagedAuto;
  }


  public EventInsights2017 rotor3Engaged(List<Float> rotor3Engaged) {
    this.rotor3Engaged = rotor3Engaged;
    return this;
  }

  public EventInsights2017 addRotor3EngagedItem(Float rotor3EngagedItem) {
    if (this.rotor3Engaged == null) {
      this.rotor3Engaged = new ArrayList<>();
    }
    this.rotor3Engaged.add(rotor3EngagedItem);
    return this;
  }

  /**
   * An array with three values, number of times rotor 3 engaged, number of opportunities to engage, and percentage.
   * @return rotor3Engaged
   */
  @javax.annotation.Nonnull
  public List<Float> getRotor3Engaged() {
    return rotor3Engaged;
  }

  public void setRotor3Engaged(List<Float> rotor3Engaged) {
    this.rotor3Engaged = rotor3Engaged;
  }


  public EventInsights2017 rotor4Engaged(List<Float> rotor4Engaged) {
    this.rotor4Engaged = rotor4Engaged;
    return this;
  }

  public EventInsights2017 addRotor4EngagedItem(Float rotor4EngagedItem) {
    if (this.rotor4Engaged == null) {
      this.rotor4Engaged = new ArrayList<>();
    }
    this.rotor4Engaged.add(rotor4EngagedItem);
    return this;
  }

  /**
   * An array with three values, number of times rotor 4 engaged, number of opportunities to engage, and percentage.
   * @return rotor4Engaged
   */
  @javax.annotation.Nonnull
  public List<Float> getRotor4Engaged() {
    return rotor4Engaged;
  }

  public void setRotor4Engaged(List<Float> rotor4Engaged) {
    this.rotor4Engaged = rotor4Engaged;
  }


  public EventInsights2017 takeoffCounts(List<Float> takeoffCounts) {
    this.takeoffCounts = takeoffCounts;
    return this;
  }

  public EventInsights2017 addTakeoffCountsItem(Float takeoffCountsItem) {
    if (this.takeoffCounts == null) {
      this.takeoffCounts = new ArrayList<>();
    }
    this.takeoffCounts.add(takeoffCountsItem);
    return this;
  }

  /**
   * An array with three values, number of times takeoff was counted, number of opportunities to takeoff, and percentage.
   * @return takeoffCounts
   */
  @javax.annotation.Nonnull
  public List<Float> getTakeoffCounts() {
    return takeoffCounts;
  }

  public void setTakeoffCounts(List<Float> takeoffCounts) {
    this.takeoffCounts = takeoffCounts;
  }


  public EventInsights2017 unicornMatches(List<Float> unicornMatches) {
    this.unicornMatches = unicornMatches;
    return this;
  }

  public EventInsights2017 addUnicornMatchesItem(Float unicornMatchesItem) {
    if (this.unicornMatches == null) {
      this.unicornMatches = new ArrayList<>();
    }
    this.unicornMatches.add(unicornMatchesItem);
    return this;
  }

  /**
   * An array with three values, number of times a unicorn match (Win + kPa &amp; Rotor Bonuses) occured, number of opportunities to have a unicorn match, and percentage.
   * @return unicornMatches
   */
  @javax.annotation.Nonnull
  public List<Float> getUnicornMatches() {
    return unicornMatches;
  }

  public void setUnicornMatches(List<Float> unicornMatches) {
    this.unicornMatches = unicornMatches;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EventInsights2017 eventInsights2017 = (EventInsights2017) o;
    return Objects.equals(this.averageFoulScore, eventInsights2017.averageFoulScore) &&
        Objects.equals(this.averageFuelPoints, eventInsights2017.averageFuelPoints) &&
        Objects.equals(this.averageFuelPointsAuto, eventInsights2017.averageFuelPointsAuto) &&
        Objects.equals(this.averageFuelPointsTeleop, eventInsights2017.averageFuelPointsTeleop) &&
        Objects.equals(this.averageHighGoals, eventInsights2017.averageHighGoals) &&
        Objects.equals(this.averageHighGoalsAuto, eventInsights2017.averageHighGoalsAuto) &&
        Objects.equals(this.averageHighGoalsTeleop, eventInsights2017.averageHighGoalsTeleop) &&
        Objects.equals(this.averageLowGoals, eventInsights2017.averageLowGoals) &&
        Objects.equals(this.averageLowGoalsAuto, eventInsights2017.averageLowGoalsAuto) &&
        Objects.equals(this.averageLowGoalsTeleop, eventInsights2017.averageLowGoalsTeleop) &&
        Objects.equals(this.averageMobilityPointsAuto, eventInsights2017.averageMobilityPointsAuto) &&
        Objects.equals(this.averagePointsAuto, eventInsights2017.averagePointsAuto) &&
        Objects.equals(this.averagePointsTeleop, eventInsights2017.averagePointsTeleop) &&
        Objects.equals(this.averageRotorPoints, eventInsights2017.averageRotorPoints) &&
        Objects.equals(this.averageRotorPointsAuto, eventInsights2017.averageRotorPointsAuto) &&
        Objects.equals(this.averageRotorPointsTeleop, eventInsights2017.averageRotorPointsTeleop) &&
        Objects.equals(this.averageScore, eventInsights2017.averageScore) &&
        Objects.equals(this.averageTakeoffPointsTeleop, eventInsights2017.averageTakeoffPointsTeleop) &&
        Objects.equals(this.averageWinMargin, eventInsights2017.averageWinMargin) &&
        Objects.equals(this.averageWinScore, eventInsights2017.averageWinScore) &&
        Objects.equals(this.highKpa, eventInsights2017.highKpa) &&
        Objects.equals(this.highScore, eventInsights2017.highScore) &&
        Objects.equals(this.kpaAchieved, eventInsights2017.kpaAchieved) &&
        Objects.equals(this.mobilityCounts, eventInsights2017.mobilityCounts) &&
        Objects.equals(this.rotor1Engaged, eventInsights2017.rotor1Engaged) &&
        Objects.equals(this.rotor1EngagedAuto, eventInsights2017.rotor1EngagedAuto) &&
        Objects.equals(this.rotor2Engaged, eventInsights2017.rotor2Engaged) &&
        Objects.equals(this.rotor2EngagedAuto, eventInsights2017.rotor2EngagedAuto) &&
        Objects.equals(this.rotor3Engaged, eventInsights2017.rotor3Engaged) &&
        Objects.equals(this.rotor4Engaged, eventInsights2017.rotor4Engaged) &&
        Objects.equals(this.takeoffCounts, eventInsights2017.takeoffCounts) &&
        Objects.equals(this.unicornMatches, eventInsights2017.unicornMatches);
  }

  @Override
  public int hashCode() {
    return Objects.hash(averageFoulScore, averageFuelPoints, averageFuelPointsAuto, averageFuelPointsTeleop, averageHighGoals, averageHighGoalsAuto, averageHighGoalsTeleop, averageLowGoals, averageLowGoalsAuto, averageLowGoalsTeleop, averageMobilityPointsAuto, averagePointsAuto, averagePointsTeleop, averageRotorPoints, averageRotorPointsAuto, averageRotorPointsTeleop, averageScore, averageTakeoffPointsTeleop, averageWinMargin, averageWinScore, highKpa, highScore, kpaAchieved, mobilityCounts, rotor1Engaged, rotor1EngagedAuto, rotor2Engaged, rotor2EngagedAuto, rotor3Engaged, rotor4Engaged, takeoffCounts, unicornMatches);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EventInsights2017 {\n");
    sb.append("    averageFoulScore: ").append(toIndentedString(averageFoulScore)).append("\n");
    sb.append("    averageFuelPoints: ").append(toIndentedString(averageFuelPoints)).append("\n");
    sb.append("    averageFuelPointsAuto: ").append(toIndentedString(averageFuelPointsAuto)).append("\n");
    sb.append("    averageFuelPointsTeleop: ").append(toIndentedString(averageFuelPointsTeleop)).append("\n");
    sb.append("    averageHighGoals: ").append(toIndentedString(averageHighGoals)).append("\n");
    sb.append("    averageHighGoalsAuto: ").append(toIndentedString(averageHighGoalsAuto)).append("\n");
    sb.append("    averageHighGoalsTeleop: ").append(toIndentedString(averageHighGoalsTeleop)).append("\n");
    sb.append("    averageLowGoals: ").append(toIndentedString(averageLowGoals)).append("\n");
    sb.append("    averageLowGoalsAuto: ").append(toIndentedString(averageLowGoalsAuto)).append("\n");
    sb.append("    averageLowGoalsTeleop: ").append(toIndentedString(averageLowGoalsTeleop)).append("\n");
    sb.append("    averageMobilityPointsAuto: ").append(toIndentedString(averageMobilityPointsAuto)).append("\n");
    sb.append("    averagePointsAuto: ").append(toIndentedString(averagePointsAuto)).append("\n");
    sb.append("    averagePointsTeleop: ").append(toIndentedString(averagePointsTeleop)).append("\n");
    sb.append("    averageRotorPoints: ").append(toIndentedString(averageRotorPoints)).append("\n");
    sb.append("    averageRotorPointsAuto: ").append(toIndentedString(averageRotorPointsAuto)).append("\n");
    sb.append("    averageRotorPointsTeleop: ").append(toIndentedString(averageRotorPointsTeleop)).append("\n");
    sb.append("    averageScore: ").append(toIndentedString(averageScore)).append("\n");
    sb.append("    averageTakeoffPointsTeleop: ").append(toIndentedString(averageTakeoffPointsTeleop)).append("\n");
    sb.append("    averageWinMargin: ").append(toIndentedString(averageWinMargin)).append("\n");
    sb.append("    averageWinScore: ").append(toIndentedString(averageWinScore)).append("\n");
    sb.append("    highKpa: ").append(toIndentedString(highKpa)).append("\n");
    sb.append("    highScore: ").append(toIndentedString(highScore)).append("\n");
    sb.append("    kpaAchieved: ").append(toIndentedString(kpaAchieved)).append("\n");
    sb.append("    mobilityCounts: ").append(toIndentedString(mobilityCounts)).append("\n");
    sb.append("    rotor1Engaged: ").append(toIndentedString(rotor1Engaged)).append("\n");
    sb.append("    rotor1EngagedAuto: ").append(toIndentedString(rotor1EngagedAuto)).append("\n");
    sb.append("    rotor2Engaged: ").append(toIndentedString(rotor2Engaged)).append("\n");
    sb.append("    rotor2EngagedAuto: ").append(toIndentedString(rotor2EngagedAuto)).append("\n");
    sb.append("    rotor3Engaged: ").append(toIndentedString(rotor3Engaged)).append("\n");
    sb.append("    rotor4Engaged: ").append(toIndentedString(rotor4Engaged)).append("\n");
    sb.append("    takeoffCounts: ").append(toIndentedString(takeoffCounts)).append("\n");
    sb.append("    unicornMatches: ").append(toIndentedString(unicornMatches)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("average_foul_score");
    openapiFields.add("average_fuel_points");
    openapiFields.add("average_fuel_points_auto");
    openapiFields.add("average_fuel_points_teleop");
    openapiFields.add("average_high_goals");
    openapiFields.add("average_high_goals_auto");
    openapiFields.add("average_high_goals_teleop");
    openapiFields.add("average_low_goals");
    openapiFields.add("average_low_goals_auto");
    openapiFields.add("average_low_goals_teleop");
    openapiFields.add("average_mobility_points_auto");
    openapiFields.add("average_points_auto");
    openapiFields.add("average_points_teleop");
    openapiFields.add("average_rotor_points");
    openapiFields.add("average_rotor_points_auto");
    openapiFields.add("average_rotor_points_teleop");
    openapiFields.add("average_score");
    openapiFields.add("average_takeoff_points_teleop");
    openapiFields.add("average_win_margin");
    openapiFields.add("average_win_score");
    openapiFields.add("high_kpa");
    openapiFields.add("high_score");
    openapiFields.add("kpa_achieved");
    openapiFields.add("mobility_counts");
    openapiFields.add("rotor_1_engaged");
    openapiFields.add("rotor_1_engaged_auto");
    openapiFields.add("rotor_2_engaged");
    openapiFields.add("rotor_2_engaged_auto");
    openapiFields.add("rotor_3_engaged");
    openapiFields.add("rotor_4_engaged");
    openapiFields.add("takeoff_counts");
    openapiFields.add("unicorn_matches");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("average_foul_score");
    openapiRequiredFields.add("average_fuel_points");
    openapiRequiredFields.add("average_fuel_points_auto");
    openapiRequiredFields.add("average_fuel_points_teleop");
    openapiRequiredFields.add("average_high_goals");
    openapiRequiredFields.add("average_high_goals_auto");
    openapiRequiredFields.add("average_high_goals_teleop");
    openapiRequiredFields.add("average_low_goals");
    openapiRequiredFields.add("average_low_goals_auto");
    openapiRequiredFields.add("average_low_goals_teleop");
    openapiRequiredFields.add("average_mobility_points_auto");
    openapiRequiredFields.add("average_points_auto");
    openapiRequiredFields.add("average_points_teleop");
    openapiRequiredFields.add("average_rotor_points");
    openapiRequiredFields.add("average_rotor_points_auto");
    openapiRequiredFields.add("average_rotor_points_teleop");
    openapiRequiredFields.add("average_score");
    openapiRequiredFields.add("average_takeoff_points_teleop");
    openapiRequiredFields.add("average_win_margin");
    openapiRequiredFields.add("average_win_score");
    openapiRequiredFields.add("high_kpa");
    openapiRequiredFields.add("high_score");
    openapiRequiredFields.add("kpa_achieved");
    openapiRequiredFields.add("mobility_counts");
    openapiRequiredFields.add("rotor_1_engaged");
    openapiRequiredFields.add("rotor_1_engaged_auto");
    openapiRequiredFields.add("rotor_2_engaged");
    openapiRequiredFields.add("rotor_2_engaged_auto");
    openapiRequiredFields.add("rotor_3_engaged");
    openapiRequiredFields.add("rotor_4_engaged");
    openapiRequiredFields.add("takeoff_counts");
    openapiRequiredFields.add("unicorn_matches");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EventInsights2017
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EventInsights2017.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EventInsights2017 is not found in the empty JSON string", EventInsights2017.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EventInsights2017.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EventInsights2017` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : EventInsights2017.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the required json array is present
      if (jsonObj.get("high_kpa") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("high_kpa").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `high_kpa` to be an array in the JSON string but got `%s`", jsonObj.get("high_kpa").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("high_score") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("high_score").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `high_score` to be an array in the JSON string but got `%s`", jsonObj.get("high_score").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("kpa_achieved") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("kpa_achieved").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `kpa_achieved` to be an array in the JSON string but got `%s`", jsonObj.get("kpa_achieved").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("mobility_counts") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("mobility_counts").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `mobility_counts` to be an array in the JSON string but got `%s`", jsonObj.get("mobility_counts").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("rotor_1_engaged") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("rotor_1_engaged").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `rotor_1_engaged` to be an array in the JSON string but got `%s`", jsonObj.get("rotor_1_engaged").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("rotor_1_engaged_auto") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("rotor_1_engaged_auto").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `rotor_1_engaged_auto` to be an array in the JSON string but got `%s`", jsonObj.get("rotor_1_engaged_auto").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("rotor_2_engaged") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("rotor_2_engaged").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `rotor_2_engaged` to be an array in the JSON string but got `%s`", jsonObj.get("rotor_2_engaged").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("rotor_2_engaged_auto") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("rotor_2_engaged_auto").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `rotor_2_engaged_auto` to be an array in the JSON string but got `%s`", jsonObj.get("rotor_2_engaged_auto").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("rotor_3_engaged") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("rotor_3_engaged").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `rotor_3_engaged` to be an array in the JSON string but got `%s`", jsonObj.get("rotor_3_engaged").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("rotor_4_engaged") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("rotor_4_engaged").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `rotor_4_engaged` to be an array in the JSON string but got `%s`", jsonObj.get("rotor_4_engaged").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("takeoff_counts") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("takeoff_counts").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `takeoff_counts` to be an array in the JSON string but got `%s`", jsonObj.get("takeoff_counts").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("unicorn_matches") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("unicorn_matches").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `unicorn_matches` to be an array in the JSON string but got `%s`", jsonObj.get("unicorn_matches").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EventInsights2017.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EventInsights2017' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EventInsights2017> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EventInsights2017.class));

       return (TypeAdapter<T>) new TypeAdapter<EventInsights2017>() {
           @Override
           public void write(JsonWriter out, EventInsights2017 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EventInsights2017 read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EventInsights2017 given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EventInsights2017
   * @throws IOException if the JSON string is invalid with respect to EventInsights2017
   */
  public static EventInsights2017 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EventInsights2017.class);
  }

  /**
   * Convert an instance of EventInsights2017 to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

