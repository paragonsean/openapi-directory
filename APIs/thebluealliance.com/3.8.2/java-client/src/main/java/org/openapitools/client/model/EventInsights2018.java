/*
 * The Blue Alliance API v3
 * # Overview    Information and statistics about FIRST Robotics Competition teams and events.   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).
 *
 * The version of the OpenAPI document: 3.8.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Insights for FIRST Power Up qualification and elimination matches.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:56:47.661723-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class EventInsights2018 {
  public static final String SERIALIZED_NAME_AUTO_QUEST_ACHIEVED = "auto_quest_achieved";
  @SerializedName(SERIALIZED_NAME_AUTO_QUEST_ACHIEVED)
  private List<Float> autoQuestAchieved = new ArrayList<>();

  public static final String SERIALIZED_NAME_AVERAGE_BOOST_PLAYED = "average_boost_played";
  @SerializedName(SERIALIZED_NAME_AVERAGE_BOOST_PLAYED)
  private Float averageBoostPlayed;

  public static final String SERIALIZED_NAME_AVERAGE_ENDGAME_POINTS = "average_endgame_points";
  @SerializedName(SERIALIZED_NAME_AVERAGE_ENDGAME_POINTS)
  private Float averageEndgamePoints;

  public static final String SERIALIZED_NAME_AVERAGE_FORCE_PLAYED = "average_force_played";
  @SerializedName(SERIALIZED_NAME_AVERAGE_FORCE_PLAYED)
  private Float averageForcePlayed;

  public static final String SERIALIZED_NAME_AVERAGE_FOUL_SCORE = "average_foul_score";
  @SerializedName(SERIALIZED_NAME_AVERAGE_FOUL_SCORE)
  private Float averageFoulScore;

  public static final String SERIALIZED_NAME_AVERAGE_POINTS_AUTO = "average_points_auto";
  @SerializedName(SERIALIZED_NAME_AVERAGE_POINTS_AUTO)
  private Float averagePointsAuto;

  public static final String SERIALIZED_NAME_AVERAGE_POINTS_TELEOP = "average_points_teleop";
  @SerializedName(SERIALIZED_NAME_AVERAGE_POINTS_TELEOP)
  private Float averagePointsTeleop;

  public static final String SERIALIZED_NAME_AVERAGE_RUN_POINTS_AUTO = "average_run_points_auto";
  @SerializedName(SERIALIZED_NAME_AVERAGE_RUN_POINTS_AUTO)
  private Float averageRunPointsAuto;

  public static final String SERIALIZED_NAME_AVERAGE_SCALE_OWNERSHIP_POINTS = "average_scale_ownership_points";
  @SerializedName(SERIALIZED_NAME_AVERAGE_SCALE_OWNERSHIP_POINTS)
  private Float averageScaleOwnershipPoints;

  public static final String SERIALIZED_NAME_AVERAGE_SCALE_OWNERSHIP_POINTS_AUTO = "average_scale_ownership_points_auto";
  @SerializedName(SERIALIZED_NAME_AVERAGE_SCALE_OWNERSHIP_POINTS_AUTO)
  private Float averageScaleOwnershipPointsAuto;

  public static final String SERIALIZED_NAME_AVERAGE_SCALE_OWNERSHIP_POINTS_TELEOP = "average_scale_ownership_points_teleop";
  @SerializedName(SERIALIZED_NAME_AVERAGE_SCALE_OWNERSHIP_POINTS_TELEOP)
  private Float averageScaleOwnershipPointsTeleop;

  public static final String SERIALIZED_NAME_AVERAGE_SCORE = "average_score";
  @SerializedName(SERIALIZED_NAME_AVERAGE_SCORE)
  private Float averageScore;

  public static final String SERIALIZED_NAME_AVERAGE_SWITCH_OWNERSHIP_POINTS = "average_switch_ownership_points";
  @SerializedName(SERIALIZED_NAME_AVERAGE_SWITCH_OWNERSHIP_POINTS)
  private Float averageSwitchOwnershipPoints;

  public static final String SERIALIZED_NAME_AVERAGE_SWITCH_OWNERSHIP_POINTS_AUTO = "average_switch_ownership_points_auto";
  @SerializedName(SERIALIZED_NAME_AVERAGE_SWITCH_OWNERSHIP_POINTS_AUTO)
  private Float averageSwitchOwnershipPointsAuto;

  public static final String SERIALIZED_NAME_AVERAGE_SWITCH_OWNERSHIP_POINTS_TELEOP = "average_switch_ownership_points_teleop";
  @SerializedName(SERIALIZED_NAME_AVERAGE_SWITCH_OWNERSHIP_POINTS_TELEOP)
  private Float averageSwitchOwnershipPointsTeleop;

  public static final String SERIALIZED_NAME_AVERAGE_VAULT_POINTS = "average_vault_points";
  @SerializedName(SERIALIZED_NAME_AVERAGE_VAULT_POINTS)
  private Float averageVaultPoints;

  public static final String SERIALIZED_NAME_AVERAGE_WIN_MARGIN = "average_win_margin";
  @SerializedName(SERIALIZED_NAME_AVERAGE_WIN_MARGIN)
  private Float averageWinMargin;

  public static final String SERIALIZED_NAME_AVERAGE_WIN_SCORE = "average_win_score";
  @SerializedName(SERIALIZED_NAME_AVERAGE_WIN_SCORE)
  private Float averageWinScore;

  public static final String SERIALIZED_NAME_BOOST_PLAYED_COUNTS = "boost_played_counts";
  @SerializedName(SERIALIZED_NAME_BOOST_PLAYED_COUNTS)
  private List<Float> boostPlayedCounts = new ArrayList<>();

  public static final String SERIALIZED_NAME_CLIMB_COUNTS = "climb_counts";
  @SerializedName(SERIALIZED_NAME_CLIMB_COUNTS)
  private List<Float> climbCounts = new ArrayList<>();

  public static final String SERIALIZED_NAME_FACE_THE_BOSS_ACHIEVED = "face_the_boss_achieved";
  @SerializedName(SERIALIZED_NAME_FACE_THE_BOSS_ACHIEVED)
  private List<Float> faceTheBossAchieved = new ArrayList<>();

  public static final String SERIALIZED_NAME_FORCE_PLAYED_COUNTS = "force_played_counts";
  @SerializedName(SERIALIZED_NAME_FORCE_PLAYED_COUNTS)
  private List<Float> forcePlayedCounts = new ArrayList<>();

  public static final String SERIALIZED_NAME_HIGH_SCORE = "high_score";
  @SerializedName(SERIALIZED_NAME_HIGH_SCORE)
  private List<String> highScore = new ArrayList<>();

  public static final String SERIALIZED_NAME_LEVITATE_PLAYED_COUNTS = "levitate_played_counts";
  @SerializedName(SERIALIZED_NAME_LEVITATE_PLAYED_COUNTS)
  private List<Float> levitatePlayedCounts = new ArrayList<>();

  public static final String SERIALIZED_NAME_RUN_COUNTS_AUTO = "run_counts_auto";
  @SerializedName(SERIALIZED_NAME_RUN_COUNTS_AUTO)
  private List<Float> runCountsAuto = new ArrayList<>();

  public static final String SERIALIZED_NAME_SCALE_NEUTRAL_PERCENTAGE = "scale_neutral_percentage";
  @SerializedName(SERIALIZED_NAME_SCALE_NEUTRAL_PERCENTAGE)
  private Float scaleNeutralPercentage;

  public static final String SERIALIZED_NAME_SCALE_NEUTRAL_PERCENTAGE_AUTO = "scale_neutral_percentage_auto";
  @SerializedName(SERIALIZED_NAME_SCALE_NEUTRAL_PERCENTAGE_AUTO)
  private Float scaleNeutralPercentageAuto;

  public static final String SERIALIZED_NAME_SCALE_NEUTRAL_PERCENTAGE_TELEOP = "scale_neutral_percentage_teleop";
  @SerializedName(SERIALIZED_NAME_SCALE_NEUTRAL_PERCENTAGE_TELEOP)
  private Float scaleNeutralPercentageTeleop;

  public static final String SERIALIZED_NAME_SWITCH_OWNED_COUNTS_AUTO = "switch_owned_counts_auto";
  @SerializedName(SERIALIZED_NAME_SWITCH_OWNED_COUNTS_AUTO)
  private List<Float> switchOwnedCountsAuto = new ArrayList<>();

  public static final String SERIALIZED_NAME_UNICORN_MATCHES = "unicorn_matches";
  @SerializedName(SERIALIZED_NAME_UNICORN_MATCHES)
  private List<Float> unicornMatches = new ArrayList<>();

  public static final String SERIALIZED_NAME_WINNING_OPP_SWITCH_DENIAL_PERCENTAGE_TELEOP = "winning_opp_switch_denial_percentage_teleop";
  @SerializedName(SERIALIZED_NAME_WINNING_OPP_SWITCH_DENIAL_PERCENTAGE_TELEOP)
  private Float winningOppSwitchDenialPercentageTeleop;

  public static final String SERIALIZED_NAME_WINNING_OWN_SWITCH_OWNERSHIP_PERCENTAGE = "winning_own_switch_ownership_percentage";
  @SerializedName(SERIALIZED_NAME_WINNING_OWN_SWITCH_OWNERSHIP_PERCENTAGE)
  private Float winningOwnSwitchOwnershipPercentage;

  public static final String SERIALIZED_NAME_WINNING_OWN_SWITCH_OWNERSHIP_PERCENTAGE_AUTO = "winning_own_switch_ownership_percentage_auto";
  @SerializedName(SERIALIZED_NAME_WINNING_OWN_SWITCH_OWNERSHIP_PERCENTAGE_AUTO)
  private Float winningOwnSwitchOwnershipPercentageAuto;

  public static final String SERIALIZED_NAME_WINNING_OWN_SWITCH_OWNERSHIP_PERCENTAGE_TELEOP = "winning_own_switch_ownership_percentage_teleop";
  @SerializedName(SERIALIZED_NAME_WINNING_OWN_SWITCH_OWNERSHIP_PERCENTAGE_TELEOP)
  private Float winningOwnSwitchOwnershipPercentageTeleop;

  public static final String SERIALIZED_NAME_WINNING_SCALE_OWNERSHIP_PERCENTAGE = "winning_scale_ownership_percentage";
  @SerializedName(SERIALIZED_NAME_WINNING_SCALE_OWNERSHIP_PERCENTAGE)
  private Float winningScaleOwnershipPercentage;

  public static final String SERIALIZED_NAME_WINNING_SCALE_OWNERSHIP_PERCENTAGE_AUTO = "winning_scale_ownership_percentage_auto";
  @SerializedName(SERIALIZED_NAME_WINNING_SCALE_OWNERSHIP_PERCENTAGE_AUTO)
  private Float winningScaleOwnershipPercentageAuto;

  public static final String SERIALIZED_NAME_WINNING_SCALE_OWNERSHIP_PERCENTAGE_TELEOP = "winning_scale_ownership_percentage_teleop";
  @SerializedName(SERIALIZED_NAME_WINNING_SCALE_OWNERSHIP_PERCENTAGE_TELEOP)
  private Float winningScaleOwnershipPercentageTeleop;

  public EventInsights2018() {
  }

  public EventInsights2018 autoQuestAchieved(List<Float> autoQuestAchieved) {
    this.autoQuestAchieved = autoQuestAchieved;
    return this;
  }

  public EventInsights2018 addAutoQuestAchievedItem(Float autoQuestAchievedItem) {
    if (this.autoQuestAchieved == null) {
      this.autoQuestAchieved = new ArrayList<>();
    }
    this.autoQuestAchieved.add(autoQuestAchievedItem);
    return this;
  }

  /**
   * An array with three values, number of times auto quest was completed, number of opportunities to complete the auto quest, and percentage.
   * @return autoQuestAchieved
   */
  @javax.annotation.Nonnull
  public List<Float> getAutoQuestAchieved() {
    return autoQuestAchieved;
  }

  public void setAutoQuestAchieved(List<Float> autoQuestAchieved) {
    this.autoQuestAchieved = autoQuestAchieved;
  }


  public EventInsights2018 averageBoostPlayed(Float averageBoostPlayed) {
    this.averageBoostPlayed = averageBoostPlayed;
    return this;
  }

  /**
   * Average number of boost power up scored (out of 3).
   * @return averageBoostPlayed
   */
  @javax.annotation.Nonnull
  public Float getAverageBoostPlayed() {
    return averageBoostPlayed;
  }

  public void setAverageBoostPlayed(Float averageBoostPlayed) {
    this.averageBoostPlayed = averageBoostPlayed;
  }


  public EventInsights2018 averageEndgamePoints(Float averageEndgamePoints) {
    this.averageEndgamePoints = averageEndgamePoints;
    return this;
  }

  /**
   * Average endgame points.
   * @return averageEndgamePoints
   */
  @javax.annotation.Nonnull
  public Float getAverageEndgamePoints() {
    return averageEndgamePoints;
  }

  public void setAverageEndgamePoints(Float averageEndgamePoints) {
    this.averageEndgamePoints = averageEndgamePoints;
  }


  public EventInsights2018 averageForcePlayed(Float averageForcePlayed) {
    this.averageForcePlayed = averageForcePlayed;
    return this;
  }

  /**
   * Average number of force power up scored (out of 3).
   * @return averageForcePlayed
   */
  @javax.annotation.Nonnull
  public Float getAverageForcePlayed() {
    return averageForcePlayed;
  }

  public void setAverageForcePlayed(Float averageForcePlayed) {
    this.averageForcePlayed = averageForcePlayed;
  }


  public EventInsights2018 averageFoulScore(Float averageFoulScore) {
    this.averageFoulScore = averageFoulScore;
    return this;
  }

  /**
   * Average foul score.
   * @return averageFoulScore
   */
  @javax.annotation.Nonnull
  public Float getAverageFoulScore() {
    return averageFoulScore;
  }

  public void setAverageFoulScore(Float averageFoulScore) {
    this.averageFoulScore = averageFoulScore;
  }


  public EventInsights2018 averagePointsAuto(Float averagePointsAuto) {
    this.averagePointsAuto = averagePointsAuto;
    return this;
  }

  /**
   * Average points scored during auto.
   * @return averagePointsAuto
   */
  @javax.annotation.Nonnull
  public Float getAveragePointsAuto() {
    return averagePointsAuto;
  }

  public void setAveragePointsAuto(Float averagePointsAuto) {
    this.averagePointsAuto = averagePointsAuto;
  }


  public EventInsights2018 averagePointsTeleop(Float averagePointsTeleop) {
    this.averagePointsTeleop = averagePointsTeleop;
    return this;
  }

  /**
   * Average points scored during teleop.
   * @return averagePointsTeleop
   */
  @javax.annotation.Nonnull
  public Float getAveragePointsTeleop() {
    return averagePointsTeleop;
  }

  public void setAveragePointsTeleop(Float averagePointsTeleop) {
    this.averagePointsTeleop = averagePointsTeleop;
  }


  public EventInsights2018 averageRunPointsAuto(Float averageRunPointsAuto) {
    this.averageRunPointsAuto = averageRunPointsAuto;
    return this;
  }

  /**
   * Average mobility points scored during auto.
   * @return averageRunPointsAuto
   */
  @javax.annotation.Nonnull
  public Float getAverageRunPointsAuto() {
    return averageRunPointsAuto;
  }

  public void setAverageRunPointsAuto(Float averageRunPointsAuto) {
    this.averageRunPointsAuto = averageRunPointsAuto;
  }


  public EventInsights2018 averageScaleOwnershipPoints(Float averageScaleOwnershipPoints) {
    this.averageScaleOwnershipPoints = averageScaleOwnershipPoints;
    return this;
  }

  /**
   * Average scale ownership points scored.
   * @return averageScaleOwnershipPoints
   */
  @javax.annotation.Nonnull
  public Float getAverageScaleOwnershipPoints() {
    return averageScaleOwnershipPoints;
  }

  public void setAverageScaleOwnershipPoints(Float averageScaleOwnershipPoints) {
    this.averageScaleOwnershipPoints = averageScaleOwnershipPoints;
  }


  public EventInsights2018 averageScaleOwnershipPointsAuto(Float averageScaleOwnershipPointsAuto) {
    this.averageScaleOwnershipPointsAuto = averageScaleOwnershipPointsAuto;
    return this;
  }

  /**
   * Average scale ownership points scored during auto.
   * @return averageScaleOwnershipPointsAuto
   */
  @javax.annotation.Nonnull
  public Float getAverageScaleOwnershipPointsAuto() {
    return averageScaleOwnershipPointsAuto;
  }

  public void setAverageScaleOwnershipPointsAuto(Float averageScaleOwnershipPointsAuto) {
    this.averageScaleOwnershipPointsAuto = averageScaleOwnershipPointsAuto;
  }


  public EventInsights2018 averageScaleOwnershipPointsTeleop(Float averageScaleOwnershipPointsTeleop) {
    this.averageScaleOwnershipPointsTeleop = averageScaleOwnershipPointsTeleop;
    return this;
  }

  /**
   * Average scale ownership points scored during teleop.
   * @return averageScaleOwnershipPointsTeleop
   */
  @javax.annotation.Nonnull
  public Float getAverageScaleOwnershipPointsTeleop() {
    return averageScaleOwnershipPointsTeleop;
  }

  public void setAverageScaleOwnershipPointsTeleop(Float averageScaleOwnershipPointsTeleop) {
    this.averageScaleOwnershipPointsTeleop = averageScaleOwnershipPointsTeleop;
  }


  public EventInsights2018 averageScore(Float averageScore) {
    this.averageScore = averageScore;
    return this;
  }

  /**
   * Average score.
   * @return averageScore
   */
  @javax.annotation.Nonnull
  public Float getAverageScore() {
    return averageScore;
  }

  public void setAverageScore(Float averageScore) {
    this.averageScore = averageScore;
  }


  public EventInsights2018 averageSwitchOwnershipPoints(Float averageSwitchOwnershipPoints) {
    this.averageSwitchOwnershipPoints = averageSwitchOwnershipPoints;
    return this;
  }

  /**
   * Average switch ownership points scored.
   * @return averageSwitchOwnershipPoints
   */
  @javax.annotation.Nonnull
  public Float getAverageSwitchOwnershipPoints() {
    return averageSwitchOwnershipPoints;
  }

  public void setAverageSwitchOwnershipPoints(Float averageSwitchOwnershipPoints) {
    this.averageSwitchOwnershipPoints = averageSwitchOwnershipPoints;
  }


  public EventInsights2018 averageSwitchOwnershipPointsAuto(Float averageSwitchOwnershipPointsAuto) {
    this.averageSwitchOwnershipPointsAuto = averageSwitchOwnershipPointsAuto;
    return this;
  }

  /**
   * Average switch ownership points scored during auto.
   * @return averageSwitchOwnershipPointsAuto
   */
  @javax.annotation.Nonnull
  public Float getAverageSwitchOwnershipPointsAuto() {
    return averageSwitchOwnershipPointsAuto;
  }

  public void setAverageSwitchOwnershipPointsAuto(Float averageSwitchOwnershipPointsAuto) {
    this.averageSwitchOwnershipPointsAuto = averageSwitchOwnershipPointsAuto;
  }


  public EventInsights2018 averageSwitchOwnershipPointsTeleop(Float averageSwitchOwnershipPointsTeleop) {
    this.averageSwitchOwnershipPointsTeleop = averageSwitchOwnershipPointsTeleop;
    return this;
  }

  /**
   * Average switch ownership points scored during teleop.
   * @return averageSwitchOwnershipPointsTeleop
   */
  @javax.annotation.Nonnull
  public Float getAverageSwitchOwnershipPointsTeleop() {
    return averageSwitchOwnershipPointsTeleop;
  }

  public void setAverageSwitchOwnershipPointsTeleop(Float averageSwitchOwnershipPointsTeleop) {
    this.averageSwitchOwnershipPointsTeleop = averageSwitchOwnershipPointsTeleop;
  }


  public EventInsights2018 averageVaultPoints(Float averageVaultPoints) {
    this.averageVaultPoints = averageVaultPoints;
    return this;
  }

  /**
   * Average value points scored.
   * @return averageVaultPoints
   */
  @javax.annotation.Nonnull
  public Float getAverageVaultPoints() {
    return averageVaultPoints;
  }

  public void setAverageVaultPoints(Float averageVaultPoints) {
    this.averageVaultPoints = averageVaultPoints;
  }


  public EventInsights2018 averageWinMargin(Float averageWinMargin) {
    this.averageWinMargin = averageWinMargin;
    return this;
  }

  /**
   * Average margin of victory.
   * @return averageWinMargin
   */
  @javax.annotation.Nonnull
  public Float getAverageWinMargin() {
    return averageWinMargin;
  }

  public void setAverageWinMargin(Float averageWinMargin) {
    this.averageWinMargin = averageWinMargin;
  }


  public EventInsights2018 averageWinScore(Float averageWinScore) {
    this.averageWinScore = averageWinScore;
    return this;
  }

  /**
   * Average winning score.
   * @return averageWinScore
   */
  @javax.annotation.Nonnull
  public Float getAverageWinScore() {
    return averageWinScore;
  }

  public void setAverageWinScore(Float averageWinScore) {
    this.averageWinScore = averageWinScore;
  }


  public EventInsights2018 boostPlayedCounts(List<Float> boostPlayedCounts) {
    this.boostPlayedCounts = boostPlayedCounts;
    return this;
  }

  public EventInsights2018 addBoostPlayedCountsItem(Float boostPlayedCountsItem) {
    if (this.boostPlayedCounts == null) {
      this.boostPlayedCounts = new ArrayList<>();
    }
    this.boostPlayedCounts.add(boostPlayedCountsItem);
    return this;
  }

  /**
   * An array with three values, number of times a boost power up was played, number of opportunities to play a boost power up, and percentage.
   * @return boostPlayedCounts
   */
  @javax.annotation.Nonnull
  public List<Float> getBoostPlayedCounts() {
    return boostPlayedCounts;
  }

  public void setBoostPlayedCounts(List<Float> boostPlayedCounts) {
    this.boostPlayedCounts = boostPlayedCounts;
  }


  public EventInsights2018 climbCounts(List<Float> climbCounts) {
    this.climbCounts = climbCounts;
    return this;
  }

  public EventInsights2018 addClimbCountsItem(Float climbCountsItem) {
    if (this.climbCounts == null) {
      this.climbCounts = new ArrayList<>();
    }
    this.climbCounts.add(climbCountsItem);
    return this;
  }

  /**
   * An array with three values, number of times a climb occurred, number of opportunities to climb, and percentage.
   * @return climbCounts
   */
  @javax.annotation.Nonnull
  public List<Float> getClimbCounts() {
    return climbCounts;
  }

  public void setClimbCounts(List<Float> climbCounts) {
    this.climbCounts = climbCounts;
  }


  public EventInsights2018 faceTheBossAchieved(List<Float> faceTheBossAchieved) {
    this.faceTheBossAchieved = faceTheBossAchieved;
    return this;
  }

  public EventInsights2018 addFaceTheBossAchievedItem(Float faceTheBossAchievedItem) {
    if (this.faceTheBossAchieved == null) {
      this.faceTheBossAchieved = new ArrayList<>();
    }
    this.faceTheBossAchieved.add(faceTheBossAchievedItem);
    return this;
  }

  /**
   * An array with three values, number of times an alliance faced the boss, number of opportunities to face the boss, and percentage.
   * @return faceTheBossAchieved
   */
  @javax.annotation.Nonnull
  public List<Float> getFaceTheBossAchieved() {
    return faceTheBossAchieved;
  }

  public void setFaceTheBossAchieved(List<Float> faceTheBossAchieved) {
    this.faceTheBossAchieved = faceTheBossAchieved;
  }


  public EventInsights2018 forcePlayedCounts(List<Float> forcePlayedCounts) {
    this.forcePlayedCounts = forcePlayedCounts;
    return this;
  }

  public EventInsights2018 addForcePlayedCountsItem(Float forcePlayedCountsItem) {
    if (this.forcePlayedCounts == null) {
      this.forcePlayedCounts = new ArrayList<>();
    }
    this.forcePlayedCounts.add(forcePlayedCountsItem);
    return this;
  }

  /**
   * An array with three values, number of times a force power up was played, number of opportunities to play a force power up, and percentage.
   * @return forcePlayedCounts
   */
  @javax.annotation.Nonnull
  public List<Float> getForcePlayedCounts() {
    return forcePlayedCounts;
  }

  public void setForcePlayedCounts(List<Float> forcePlayedCounts) {
    this.forcePlayedCounts = forcePlayedCounts;
  }


  public EventInsights2018 highScore(List<String> highScore) {
    this.highScore = highScore;
    return this;
  }

  public EventInsights2018 addHighScoreItem(String highScoreItem) {
    if (this.highScore == null) {
      this.highScore = new ArrayList<>();
    }
    this.highScore.add(highScoreItem);
    return this;
  }

  /**
   * An array with three values, high score, match key from the match with the high score, and the name of the match
   * @return highScore
   */
  @javax.annotation.Nonnull
  public List<String> getHighScore() {
    return highScore;
  }

  public void setHighScore(List<String> highScore) {
    this.highScore = highScore;
  }


  public EventInsights2018 levitatePlayedCounts(List<Float> levitatePlayedCounts) {
    this.levitatePlayedCounts = levitatePlayedCounts;
    return this;
  }

  public EventInsights2018 addLevitatePlayedCountsItem(Float levitatePlayedCountsItem) {
    if (this.levitatePlayedCounts == null) {
      this.levitatePlayedCounts = new ArrayList<>();
    }
    this.levitatePlayedCounts.add(levitatePlayedCountsItem);
    return this;
  }

  /**
   * An array with three values, number of times a levitate power up was played, number of opportunities to play a levitate power up, and percentage.
   * @return levitatePlayedCounts
   */
  @javax.annotation.Nonnull
  public List<Float> getLevitatePlayedCounts() {
    return levitatePlayedCounts;
  }

  public void setLevitatePlayedCounts(List<Float> levitatePlayedCounts) {
    this.levitatePlayedCounts = levitatePlayedCounts;
  }


  public EventInsights2018 runCountsAuto(List<Float> runCountsAuto) {
    this.runCountsAuto = runCountsAuto;
    return this;
  }

  public EventInsights2018 addRunCountsAutoItem(Float runCountsAutoItem) {
    if (this.runCountsAuto == null) {
      this.runCountsAuto = new ArrayList<>();
    }
    this.runCountsAuto.add(runCountsAutoItem);
    return this;
  }

  /**
   * An array with three values, number of times a team scored mobility points in auto, number of opportunities to score mobility points in auto, and percentage.
   * @return runCountsAuto
   */
  @javax.annotation.Nonnull
  public List<Float> getRunCountsAuto() {
    return runCountsAuto;
  }

  public void setRunCountsAuto(List<Float> runCountsAuto) {
    this.runCountsAuto = runCountsAuto;
  }


  public EventInsights2018 scaleNeutralPercentage(Float scaleNeutralPercentage) {
    this.scaleNeutralPercentage = scaleNeutralPercentage;
    return this;
  }

  /**
   * Average scale neutral percentage.
   * @return scaleNeutralPercentage
   */
  @javax.annotation.Nonnull
  public Float getScaleNeutralPercentage() {
    return scaleNeutralPercentage;
  }

  public void setScaleNeutralPercentage(Float scaleNeutralPercentage) {
    this.scaleNeutralPercentage = scaleNeutralPercentage;
  }


  public EventInsights2018 scaleNeutralPercentageAuto(Float scaleNeutralPercentageAuto) {
    this.scaleNeutralPercentageAuto = scaleNeutralPercentageAuto;
    return this;
  }

  /**
   * Average scale neutral percentage during auto.
   * @return scaleNeutralPercentageAuto
   */
  @javax.annotation.Nonnull
  public Float getScaleNeutralPercentageAuto() {
    return scaleNeutralPercentageAuto;
  }

  public void setScaleNeutralPercentageAuto(Float scaleNeutralPercentageAuto) {
    this.scaleNeutralPercentageAuto = scaleNeutralPercentageAuto;
  }


  public EventInsights2018 scaleNeutralPercentageTeleop(Float scaleNeutralPercentageTeleop) {
    this.scaleNeutralPercentageTeleop = scaleNeutralPercentageTeleop;
    return this;
  }

  /**
   * Average scale neutral percentage during teleop.
   * @return scaleNeutralPercentageTeleop
   */
  @javax.annotation.Nonnull
  public Float getScaleNeutralPercentageTeleop() {
    return scaleNeutralPercentageTeleop;
  }

  public void setScaleNeutralPercentageTeleop(Float scaleNeutralPercentageTeleop) {
    this.scaleNeutralPercentageTeleop = scaleNeutralPercentageTeleop;
  }


  public EventInsights2018 switchOwnedCountsAuto(List<Float> switchOwnedCountsAuto) {
    this.switchOwnedCountsAuto = switchOwnedCountsAuto;
    return this;
  }

  public EventInsights2018 addSwitchOwnedCountsAutoItem(Float switchOwnedCountsAutoItem) {
    if (this.switchOwnedCountsAuto == null) {
      this.switchOwnedCountsAuto = new ArrayList<>();
    }
    this.switchOwnedCountsAuto.add(switchOwnedCountsAutoItem);
    return this;
  }

  /**
   * An array with three values, number of times a switch was owned during auto, number of opportunities to own a switch during auto, and percentage.
   * @return switchOwnedCountsAuto
   */
  @javax.annotation.Nonnull
  public List<Float> getSwitchOwnedCountsAuto() {
    return switchOwnedCountsAuto;
  }

  public void setSwitchOwnedCountsAuto(List<Float> switchOwnedCountsAuto) {
    this.switchOwnedCountsAuto = switchOwnedCountsAuto;
  }


  public EventInsights2018 unicornMatches(List<Float> unicornMatches) {
    this.unicornMatches = unicornMatches;
    return this;
  }

  public EventInsights2018 addUnicornMatchesItem(Float unicornMatchesItem) {
    if (this.unicornMatches == null) {
      this.unicornMatches = new ArrayList<>();
    }
    this.unicornMatches.add(unicornMatchesItem);
    return this;
  }

  /**
   * An array with three values, number of times a unicorn match (Win + Auto Quest + Face the Boss) occurred, number of opportunities to have a unicorn match, and percentage.
   * @return unicornMatches
   */
  @javax.annotation.Nonnull
  public List<Float> getUnicornMatches() {
    return unicornMatches;
  }

  public void setUnicornMatches(List<Float> unicornMatches) {
    this.unicornMatches = unicornMatches;
  }


  public EventInsights2018 winningOppSwitchDenialPercentageTeleop(Float winningOppSwitchDenialPercentageTeleop) {
    this.winningOppSwitchDenialPercentageTeleop = winningOppSwitchDenialPercentageTeleop;
    return this;
  }

  /**
   * Average opposing switch denail percentage for the winning alliance during teleop.
   * @return winningOppSwitchDenialPercentageTeleop
   */
  @javax.annotation.Nonnull
  public Float getWinningOppSwitchDenialPercentageTeleop() {
    return winningOppSwitchDenialPercentageTeleop;
  }

  public void setWinningOppSwitchDenialPercentageTeleop(Float winningOppSwitchDenialPercentageTeleop) {
    this.winningOppSwitchDenialPercentageTeleop = winningOppSwitchDenialPercentageTeleop;
  }


  public EventInsights2018 winningOwnSwitchOwnershipPercentage(Float winningOwnSwitchOwnershipPercentage) {
    this.winningOwnSwitchOwnershipPercentage = winningOwnSwitchOwnershipPercentage;
    return this;
  }

  /**
   * Average own switch ownership percentage for the winning alliance.
   * @return winningOwnSwitchOwnershipPercentage
   */
  @javax.annotation.Nonnull
  public Float getWinningOwnSwitchOwnershipPercentage() {
    return winningOwnSwitchOwnershipPercentage;
  }

  public void setWinningOwnSwitchOwnershipPercentage(Float winningOwnSwitchOwnershipPercentage) {
    this.winningOwnSwitchOwnershipPercentage = winningOwnSwitchOwnershipPercentage;
  }


  public EventInsights2018 winningOwnSwitchOwnershipPercentageAuto(Float winningOwnSwitchOwnershipPercentageAuto) {
    this.winningOwnSwitchOwnershipPercentageAuto = winningOwnSwitchOwnershipPercentageAuto;
    return this;
  }

  /**
   * Average own switch ownership percentage for the winning alliance during auto.
   * @return winningOwnSwitchOwnershipPercentageAuto
   */
  @javax.annotation.Nonnull
  public Float getWinningOwnSwitchOwnershipPercentageAuto() {
    return winningOwnSwitchOwnershipPercentageAuto;
  }

  public void setWinningOwnSwitchOwnershipPercentageAuto(Float winningOwnSwitchOwnershipPercentageAuto) {
    this.winningOwnSwitchOwnershipPercentageAuto = winningOwnSwitchOwnershipPercentageAuto;
  }


  public EventInsights2018 winningOwnSwitchOwnershipPercentageTeleop(Float winningOwnSwitchOwnershipPercentageTeleop) {
    this.winningOwnSwitchOwnershipPercentageTeleop = winningOwnSwitchOwnershipPercentageTeleop;
    return this;
  }

  /**
   * Average own switch ownership percentage for the winning alliance during teleop.
   * @return winningOwnSwitchOwnershipPercentageTeleop
   */
  @javax.annotation.Nonnull
  public Float getWinningOwnSwitchOwnershipPercentageTeleop() {
    return winningOwnSwitchOwnershipPercentageTeleop;
  }

  public void setWinningOwnSwitchOwnershipPercentageTeleop(Float winningOwnSwitchOwnershipPercentageTeleop) {
    this.winningOwnSwitchOwnershipPercentageTeleop = winningOwnSwitchOwnershipPercentageTeleop;
  }


  public EventInsights2018 winningScaleOwnershipPercentage(Float winningScaleOwnershipPercentage) {
    this.winningScaleOwnershipPercentage = winningScaleOwnershipPercentage;
    return this;
  }

  /**
   * Average scale ownership percentage for the winning alliance.
   * @return winningScaleOwnershipPercentage
   */
  @javax.annotation.Nonnull
  public Float getWinningScaleOwnershipPercentage() {
    return winningScaleOwnershipPercentage;
  }

  public void setWinningScaleOwnershipPercentage(Float winningScaleOwnershipPercentage) {
    this.winningScaleOwnershipPercentage = winningScaleOwnershipPercentage;
  }


  public EventInsights2018 winningScaleOwnershipPercentageAuto(Float winningScaleOwnershipPercentageAuto) {
    this.winningScaleOwnershipPercentageAuto = winningScaleOwnershipPercentageAuto;
    return this;
  }

  /**
   * Average scale ownership percentage for the winning alliance during auto.
   * @return winningScaleOwnershipPercentageAuto
   */
  @javax.annotation.Nonnull
  public Float getWinningScaleOwnershipPercentageAuto() {
    return winningScaleOwnershipPercentageAuto;
  }

  public void setWinningScaleOwnershipPercentageAuto(Float winningScaleOwnershipPercentageAuto) {
    this.winningScaleOwnershipPercentageAuto = winningScaleOwnershipPercentageAuto;
  }


  public EventInsights2018 winningScaleOwnershipPercentageTeleop(Float winningScaleOwnershipPercentageTeleop) {
    this.winningScaleOwnershipPercentageTeleop = winningScaleOwnershipPercentageTeleop;
    return this;
  }

  /**
   * Average scale ownership percentage for the winning alliance during teleop.
   * @return winningScaleOwnershipPercentageTeleop
   */
  @javax.annotation.Nonnull
  public Float getWinningScaleOwnershipPercentageTeleop() {
    return winningScaleOwnershipPercentageTeleop;
  }

  public void setWinningScaleOwnershipPercentageTeleop(Float winningScaleOwnershipPercentageTeleop) {
    this.winningScaleOwnershipPercentageTeleop = winningScaleOwnershipPercentageTeleop;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EventInsights2018 eventInsights2018 = (EventInsights2018) o;
    return Objects.equals(this.autoQuestAchieved, eventInsights2018.autoQuestAchieved) &&
        Objects.equals(this.averageBoostPlayed, eventInsights2018.averageBoostPlayed) &&
        Objects.equals(this.averageEndgamePoints, eventInsights2018.averageEndgamePoints) &&
        Objects.equals(this.averageForcePlayed, eventInsights2018.averageForcePlayed) &&
        Objects.equals(this.averageFoulScore, eventInsights2018.averageFoulScore) &&
        Objects.equals(this.averagePointsAuto, eventInsights2018.averagePointsAuto) &&
        Objects.equals(this.averagePointsTeleop, eventInsights2018.averagePointsTeleop) &&
        Objects.equals(this.averageRunPointsAuto, eventInsights2018.averageRunPointsAuto) &&
        Objects.equals(this.averageScaleOwnershipPoints, eventInsights2018.averageScaleOwnershipPoints) &&
        Objects.equals(this.averageScaleOwnershipPointsAuto, eventInsights2018.averageScaleOwnershipPointsAuto) &&
        Objects.equals(this.averageScaleOwnershipPointsTeleop, eventInsights2018.averageScaleOwnershipPointsTeleop) &&
        Objects.equals(this.averageScore, eventInsights2018.averageScore) &&
        Objects.equals(this.averageSwitchOwnershipPoints, eventInsights2018.averageSwitchOwnershipPoints) &&
        Objects.equals(this.averageSwitchOwnershipPointsAuto, eventInsights2018.averageSwitchOwnershipPointsAuto) &&
        Objects.equals(this.averageSwitchOwnershipPointsTeleop, eventInsights2018.averageSwitchOwnershipPointsTeleop) &&
        Objects.equals(this.averageVaultPoints, eventInsights2018.averageVaultPoints) &&
        Objects.equals(this.averageWinMargin, eventInsights2018.averageWinMargin) &&
        Objects.equals(this.averageWinScore, eventInsights2018.averageWinScore) &&
        Objects.equals(this.boostPlayedCounts, eventInsights2018.boostPlayedCounts) &&
        Objects.equals(this.climbCounts, eventInsights2018.climbCounts) &&
        Objects.equals(this.faceTheBossAchieved, eventInsights2018.faceTheBossAchieved) &&
        Objects.equals(this.forcePlayedCounts, eventInsights2018.forcePlayedCounts) &&
        Objects.equals(this.highScore, eventInsights2018.highScore) &&
        Objects.equals(this.levitatePlayedCounts, eventInsights2018.levitatePlayedCounts) &&
        Objects.equals(this.runCountsAuto, eventInsights2018.runCountsAuto) &&
        Objects.equals(this.scaleNeutralPercentage, eventInsights2018.scaleNeutralPercentage) &&
        Objects.equals(this.scaleNeutralPercentageAuto, eventInsights2018.scaleNeutralPercentageAuto) &&
        Objects.equals(this.scaleNeutralPercentageTeleop, eventInsights2018.scaleNeutralPercentageTeleop) &&
        Objects.equals(this.switchOwnedCountsAuto, eventInsights2018.switchOwnedCountsAuto) &&
        Objects.equals(this.unicornMatches, eventInsights2018.unicornMatches) &&
        Objects.equals(this.winningOppSwitchDenialPercentageTeleop, eventInsights2018.winningOppSwitchDenialPercentageTeleop) &&
        Objects.equals(this.winningOwnSwitchOwnershipPercentage, eventInsights2018.winningOwnSwitchOwnershipPercentage) &&
        Objects.equals(this.winningOwnSwitchOwnershipPercentageAuto, eventInsights2018.winningOwnSwitchOwnershipPercentageAuto) &&
        Objects.equals(this.winningOwnSwitchOwnershipPercentageTeleop, eventInsights2018.winningOwnSwitchOwnershipPercentageTeleop) &&
        Objects.equals(this.winningScaleOwnershipPercentage, eventInsights2018.winningScaleOwnershipPercentage) &&
        Objects.equals(this.winningScaleOwnershipPercentageAuto, eventInsights2018.winningScaleOwnershipPercentageAuto) &&
        Objects.equals(this.winningScaleOwnershipPercentageTeleop, eventInsights2018.winningScaleOwnershipPercentageTeleop);
  }

  @Override
  public int hashCode() {
    return Objects.hash(autoQuestAchieved, averageBoostPlayed, averageEndgamePoints, averageForcePlayed, averageFoulScore, averagePointsAuto, averagePointsTeleop, averageRunPointsAuto, averageScaleOwnershipPoints, averageScaleOwnershipPointsAuto, averageScaleOwnershipPointsTeleop, averageScore, averageSwitchOwnershipPoints, averageSwitchOwnershipPointsAuto, averageSwitchOwnershipPointsTeleop, averageVaultPoints, averageWinMargin, averageWinScore, boostPlayedCounts, climbCounts, faceTheBossAchieved, forcePlayedCounts, highScore, levitatePlayedCounts, runCountsAuto, scaleNeutralPercentage, scaleNeutralPercentageAuto, scaleNeutralPercentageTeleop, switchOwnedCountsAuto, unicornMatches, winningOppSwitchDenialPercentageTeleop, winningOwnSwitchOwnershipPercentage, winningOwnSwitchOwnershipPercentageAuto, winningOwnSwitchOwnershipPercentageTeleop, winningScaleOwnershipPercentage, winningScaleOwnershipPercentageAuto, winningScaleOwnershipPercentageTeleop);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EventInsights2018 {\n");
    sb.append("    autoQuestAchieved: ").append(toIndentedString(autoQuestAchieved)).append("\n");
    sb.append("    averageBoostPlayed: ").append(toIndentedString(averageBoostPlayed)).append("\n");
    sb.append("    averageEndgamePoints: ").append(toIndentedString(averageEndgamePoints)).append("\n");
    sb.append("    averageForcePlayed: ").append(toIndentedString(averageForcePlayed)).append("\n");
    sb.append("    averageFoulScore: ").append(toIndentedString(averageFoulScore)).append("\n");
    sb.append("    averagePointsAuto: ").append(toIndentedString(averagePointsAuto)).append("\n");
    sb.append("    averagePointsTeleop: ").append(toIndentedString(averagePointsTeleop)).append("\n");
    sb.append("    averageRunPointsAuto: ").append(toIndentedString(averageRunPointsAuto)).append("\n");
    sb.append("    averageScaleOwnershipPoints: ").append(toIndentedString(averageScaleOwnershipPoints)).append("\n");
    sb.append("    averageScaleOwnershipPointsAuto: ").append(toIndentedString(averageScaleOwnershipPointsAuto)).append("\n");
    sb.append("    averageScaleOwnershipPointsTeleop: ").append(toIndentedString(averageScaleOwnershipPointsTeleop)).append("\n");
    sb.append("    averageScore: ").append(toIndentedString(averageScore)).append("\n");
    sb.append("    averageSwitchOwnershipPoints: ").append(toIndentedString(averageSwitchOwnershipPoints)).append("\n");
    sb.append("    averageSwitchOwnershipPointsAuto: ").append(toIndentedString(averageSwitchOwnershipPointsAuto)).append("\n");
    sb.append("    averageSwitchOwnershipPointsTeleop: ").append(toIndentedString(averageSwitchOwnershipPointsTeleop)).append("\n");
    sb.append("    averageVaultPoints: ").append(toIndentedString(averageVaultPoints)).append("\n");
    sb.append("    averageWinMargin: ").append(toIndentedString(averageWinMargin)).append("\n");
    sb.append("    averageWinScore: ").append(toIndentedString(averageWinScore)).append("\n");
    sb.append("    boostPlayedCounts: ").append(toIndentedString(boostPlayedCounts)).append("\n");
    sb.append("    climbCounts: ").append(toIndentedString(climbCounts)).append("\n");
    sb.append("    faceTheBossAchieved: ").append(toIndentedString(faceTheBossAchieved)).append("\n");
    sb.append("    forcePlayedCounts: ").append(toIndentedString(forcePlayedCounts)).append("\n");
    sb.append("    highScore: ").append(toIndentedString(highScore)).append("\n");
    sb.append("    levitatePlayedCounts: ").append(toIndentedString(levitatePlayedCounts)).append("\n");
    sb.append("    runCountsAuto: ").append(toIndentedString(runCountsAuto)).append("\n");
    sb.append("    scaleNeutralPercentage: ").append(toIndentedString(scaleNeutralPercentage)).append("\n");
    sb.append("    scaleNeutralPercentageAuto: ").append(toIndentedString(scaleNeutralPercentageAuto)).append("\n");
    sb.append("    scaleNeutralPercentageTeleop: ").append(toIndentedString(scaleNeutralPercentageTeleop)).append("\n");
    sb.append("    switchOwnedCountsAuto: ").append(toIndentedString(switchOwnedCountsAuto)).append("\n");
    sb.append("    unicornMatches: ").append(toIndentedString(unicornMatches)).append("\n");
    sb.append("    winningOppSwitchDenialPercentageTeleop: ").append(toIndentedString(winningOppSwitchDenialPercentageTeleop)).append("\n");
    sb.append("    winningOwnSwitchOwnershipPercentage: ").append(toIndentedString(winningOwnSwitchOwnershipPercentage)).append("\n");
    sb.append("    winningOwnSwitchOwnershipPercentageAuto: ").append(toIndentedString(winningOwnSwitchOwnershipPercentageAuto)).append("\n");
    sb.append("    winningOwnSwitchOwnershipPercentageTeleop: ").append(toIndentedString(winningOwnSwitchOwnershipPercentageTeleop)).append("\n");
    sb.append("    winningScaleOwnershipPercentage: ").append(toIndentedString(winningScaleOwnershipPercentage)).append("\n");
    sb.append("    winningScaleOwnershipPercentageAuto: ").append(toIndentedString(winningScaleOwnershipPercentageAuto)).append("\n");
    sb.append("    winningScaleOwnershipPercentageTeleop: ").append(toIndentedString(winningScaleOwnershipPercentageTeleop)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("auto_quest_achieved");
    openapiFields.add("average_boost_played");
    openapiFields.add("average_endgame_points");
    openapiFields.add("average_force_played");
    openapiFields.add("average_foul_score");
    openapiFields.add("average_points_auto");
    openapiFields.add("average_points_teleop");
    openapiFields.add("average_run_points_auto");
    openapiFields.add("average_scale_ownership_points");
    openapiFields.add("average_scale_ownership_points_auto");
    openapiFields.add("average_scale_ownership_points_teleop");
    openapiFields.add("average_score");
    openapiFields.add("average_switch_ownership_points");
    openapiFields.add("average_switch_ownership_points_auto");
    openapiFields.add("average_switch_ownership_points_teleop");
    openapiFields.add("average_vault_points");
    openapiFields.add("average_win_margin");
    openapiFields.add("average_win_score");
    openapiFields.add("boost_played_counts");
    openapiFields.add("climb_counts");
    openapiFields.add("face_the_boss_achieved");
    openapiFields.add("force_played_counts");
    openapiFields.add("high_score");
    openapiFields.add("levitate_played_counts");
    openapiFields.add("run_counts_auto");
    openapiFields.add("scale_neutral_percentage");
    openapiFields.add("scale_neutral_percentage_auto");
    openapiFields.add("scale_neutral_percentage_teleop");
    openapiFields.add("switch_owned_counts_auto");
    openapiFields.add("unicorn_matches");
    openapiFields.add("winning_opp_switch_denial_percentage_teleop");
    openapiFields.add("winning_own_switch_ownership_percentage");
    openapiFields.add("winning_own_switch_ownership_percentage_auto");
    openapiFields.add("winning_own_switch_ownership_percentage_teleop");
    openapiFields.add("winning_scale_ownership_percentage");
    openapiFields.add("winning_scale_ownership_percentage_auto");
    openapiFields.add("winning_scale_ownership_percentage_teleop");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("auto_quest_achieved");
    openapiRequiredFields.add("average_boost_played");
    openapiRequiredFields.add("average_endgame_points");
    openapiRequiredFields.add("average_force_played");
    openapiRequiredFields.add("average_foul_score");
    openapiRequiredFields.add("average_points_auto");
    openapiRequiredFields.add("average_points_teleop");
    openapiRequiredFields.add("average_run_points_auto");
    openapiRequiredFields.add("average_scale_ownership_points");
    openapiRequiredFields.add("average_scale_ownership_points_auto");
    openapiRequiredFields.add("average_scale_ownership_points_teleop");
    openapiRequiredFields.add("average_score");
    openapiRequiredFields.add("average_switch_ownership_points");
    openapiRequiredFields.add("average_switch_ownership_points_auto");
    openapiRequiredFields.add("average_switch_ownership_points_teleop");
    openapiRequiredFields.add("average_vault_points");
    openapiRequiredFields.add("average_win_margin");
    openapiRequiredFields.add("average_win_score");
    openapiRequiredFields.add("boost_played_counts");
    openapiRequiredFields.add("climb_counts");
    openapiRequiredFields.add("face_the_boss_achieved");
    openapiRequiredFields.add("force_played_counts");
    openapiRequiredFields.add("high_score");
    openapiRequiredFields.add("levitate_played_counts");
    openapiRequiredFields.add("run_counts_auto");
    openapiRequiredFields.add("scale_neutral_percentage");
    openapiRequiredFields.add("scale_neutral_percentage_auto");
    openapiRequiredFields.add("scale_neutral_percentage_teleop");
    openapiRequiredFields.add("switch_owned_counts_auto");
    openapiRequiredFields.add("unicorn_matches");
    openapiRequiredFields.add("winning_opp_switch_denial_percentage_teleop");
    openapiRequiredFields.add("winning_own_switch_ownership_percentage");
    openapiRequiredFields.add("winning_own_switch_ownership_percentage_auto");
    openapiRequiredFields.add("winning_own_switch_ownership_percentage_teleop");
    openapiRequiredFields.add("winning_scale_ownership_percentage");
    openapiRequiredFields.add("winning_scale_ownership_percentage_auto");
    openapiRequiredFields.add("winning_scale_ownership_percentage_teleop");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EventInsights2018
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EventInsights2018.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EventInsights2018 is not found in the empty JSON string", EventInsights2018.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EventInsights2018.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EventInsights2018` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : EventInsights2018.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the required json array is present
      if (jsonObj.get("auto_quest_achieved") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("auto_quest_achieved").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `auto_quest_achieved` to be an array in the JSON string but got `%s`", jsonObj.get("auto_quest_achieved").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("boost_played_counts") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("boost_played_counts").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `boost_played_counts` to be an array in the JSON string but got `%s`", jsonObj.get("boost_played_counts").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("climb_counts") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("climb_counts").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `climb_counts` to be an array in the JSON string but got `%s`", jsonObj.get("climb_counts").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("face_the_boss_achieved") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("face_the_boss_achieved").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `face_the_boss_achieved` to be an array in the JSON string but got `%s`", jsonObj.get("face_the_boss_achieved").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("force_played_counts") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("force_played_counts").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `force_played_counts` to be an array in the JSON string but got `%s`", jsonObj.get("force_played_counts").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("high_score") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("high_score").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `high_score` to be an array in the JSON string but got `%s`", jsonObj.get("high_score").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("levitate_played_counts") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("levitate_played_counts").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `levitate_played_counts` to be an array in the JSON string but got `%s`", jsonObj.get("levitate_played_counts").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("run_counts_auto") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("run_counts_auto").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `run_counts_auto` to be an array in the JSON string but got `%s`", jsonObj.get("run_counts_auto").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("switch_owned_counts_auto") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("switch_owned_counts_auto").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `switch_owned_counts_auto` to be an array in the JSON string but got `%s`", jsonObj.get("switch_owned_counts_auto").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("unicorn_matches") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("unicorn_matches").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `unicorn_matches` to be an array in the JSON string but got `%s`", jsonObj.get("unicorn_matches").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EventInsights2018.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EventInsights2018' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EventInsights2018> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EventInsights2018.class));

       return (TypeAdapter<T>) new TypeAdapter<EventInsights2018>() {
           @Override
           public void write(JsonWriter out, EventInsights2018 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EventInsights2018 read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EventInsights2018 given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EventInsights2018
   * @throws IOException if the JSON string is invalid with respect to EventInsights2018
   */
  public static EventInsights2018 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EventInsights2018.class);
  }

  /**
   * Convert an instance of EventInsights2018 to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

