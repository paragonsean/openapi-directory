/*
 * The Blue Alliance API v3
 * # Overview    Information and statistics about FIRST Robotics Competition teams and events.   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).
 *
 * The version of the OpenAPI document: 3.8.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DistrictRankingEventPointsInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:56:47.661723-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DistrictRankingEventPointsInner {
  public static final String SERIALIZED_NAME_ALLIANCE_POINTS = "alliance_points";
  @SerializedName(SERIALIZED_NAME_ALLIANCE_POINTS)
  private Integer alliancePoints;

  public static final String SERIALIZED_NAME_AWARD_POINTS = "award_points";
  @SerializedName(SERIALIZED_NAME_AWARD_POINTS)
  private Integer awardPoints;

  public static final String SERIALIZED_NAME_DISTRICT_CMP = "district_cmp";
  @SerializedName(SERIALIZED_NAME_DISTRICT_CMP)
  private Boolean districtCmp;

  public static final String SERIALIZED_NAME_ELIM_POINTS = "elim_points";
  @SerializedName(SERIALIZED_NAME_ELIM_POINTS)
  private Integer elimPoints;

  public static final String SERIALIZED_NAME_EVENT_KEY = "event_key";
  @SerializedName(SERIALIZED_NAME_EVENT_KEY)
  private String eventKey;

  public static final String SERIALIZED_NAME_QUAL_POINTS = "qual_points";
  @SerializedName(SERIALIZED_NAME_QUAL_POINTS)
  private Integer qualPoints;

  public static final String SERIALIZED_NAME_TOTAL = "total";
  @SerializedName(SERIALIZED_NAME_TOTAL)
  private Integer total;

  public DistrictRankingEventPointsInner() {
  }

  public DistrictRankingEventPointsInner alliancePoints(Integer alliancePoints) {
    this.alliancePoints = alliancePoints;
    return this;
  }

  /**
   * Points awarded for alliance selection.
   * @return alliancePoints
   */
  @javax.annotation.Nonnull
  public Integer getAlliancePoints() {
    return alliancePoints;
  }

  public void setAlliancePoints(Integer alliancePoints) {
    this.alliancePoints = alliancePoints;
  }


  public DistrictRankingEventPointsInner awardPoints(Integer awardPoints) {
    this.awardPoints = awardPoints;
    return this;
  }

  /**
   * Points awarded for event awards.
   * @return awardPoints
   */
  @javax.annotation.Nonnull
  public Integer getAwardPoints() {
    return awardPoints;
  }

  public void setAwardPoints(Integer awardPoints) {
    this.awardPoints = awardPoints;
  }


  public DistrictRankingEventPointsInner districtCmp(Boolean districtCmp) {
    this.districtCmp = districtCmp;
    return this;
  }

  /**
   * &#x60;true&#x60; if this event is a District Championship event.
   * @return districtCmp
   */
  @javax.annotation.Nonnull
  public Boolean getDistrictCmp() {
    return districtCmp;
  }

  public void setDistrictCmp(Boolean districtCmp) {
    this.districtCmp = districtCmp;
  }


  public DistrictRankingEventPointsInner elimPoints(Integer elimPoints) {
    this.elimPoints = elimPoints;
    return this;
  }

  /**
   * Points awarded for elimination match performance.
   * @return elimPoints
   */
  @javax.annotation.Nonnull
  public Integer getElimPoints() {
    return elimPoints;
  }

  public void setElimPoints(Integer elimPoints) {
    this.elimPoints = elimPoints;
  }


  public DistrictRankingEventPointsInner eventKey(String eventKey) {
    this.eventKey = eventKey;
    return this;
  }

  /**
   * TBA Event key for this event.
   * @return eventKey
   */
  @javax.annotation.Nonnull
  public String getEventKey() {
    return eventKey;
  }

  public void setEventKey(String eventKey) {
    this.eventKey = eventKey;
  }


  public DistrictRankingEventPointsInner qualPoints(Integer qualPoints) {
    this.qualPoints = qualPoints;
    return this;
  }

  /**
   * Points awarded for qualification match performance.
   * @return qualPoints
   */
  @javax.annotation.Nonnull
  public Integer getQualPoints() {
    return qualPoints;
  }

  public void setQualPoints(Integer qualPoints) {
    this.qualPoints = qualPoints;
  }


  public DistrictRankingEventPointsInner total(Integer total) {
    this.total = total;
    return this;
  }

  /**
   * Total points awarded at this event.
   * @return total
   */
  @javax.annotation.Nonnull
  public Integer getTotal() {
    return total;
  }

  public void setTotal(Integer total) {
    this.total = total;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DistrictRankingEventPointsInner districtRankingEventPointsInner = (DistrictRankingEventPointsInner) o;
    return Objects.equals(this.alliancePoints, districtRankingEventPointsInner.alliancePoints) &&
        Objects.equals(this.awardPoints, districtRankingEventPointsInner.awardPoints) &&
        Objects.equals(this.districtCmp, districtRankingEventPointsInner.districtCmp) &&
        Objects.equals(this.elimPoints, districtRankingEventPointsInner.elimPoints) &&
        Objects.equals(this.eventKey, districtRankingEventPointsInner.eventKey) &&
        Objects.equals(this.qualPoints, districtRankingEventPointsInner.qualPoints) &&
        Objects.equals(this.total, districtRankingEventPointsInner.total);
  }

  @Override
  public int hashCode() {
    return Objects.hash(alliancePoints, awardPoints, districtCmp, elimPoints, eventKey, qualPoints, total);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DistrictRankingEventPointsInner {\n");
    sb.append("    alliancePoints: ").append(toIndentedString(alliancePoints)).append("\n");
    sb.append("    awardPoints: ").append(toIndentedString(awardPoints)).append("\n");
    sb.append("    districtCmp: ").append(toIndentedString(districtCmp)).append("\n");
    sb.append("    elimPoints: ").append(toIndentedString(elimPoints)).append("\n");
    sb.append("    eventKey: ").append(toIndentedString(eventKey)).append("\n");
    sb.append("    qualPoints: ").append(toIndentedString(qualPoints)).append("\n");
    sb.append("    total: ").append(toIndentedString(total)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("alliance_points");
    openapiFields.add("award_points");
    openapiFields.add("district_cmp");
    openapiFields.add("elim_points");
    openapiFields.add("event_key");
    openapiFields.add("qual_points");
    openapiFields.add("total");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("alliance_points");
    openapiRequiredFields.add("award_points");
    openapiRequiredFields.add("district_cmp");
    openapiRequiredFields.add("elim_points");
    openapiRequiredFields.add("event_key");
    openapiRequiredFields.add("qual_points");
    openapiRequiredFields.add("total");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DistrictRankingEventPointsInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DistrictRankingEventPointsInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DistrictRankingEventPointsInner is not found in the empty JSON string", DistrictRankingEventPointsInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DistrictRankingEventPointsInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DistrictRankingEventPointsInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DistrictRankingEventPointsInner.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("event_key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `event_key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("event_key").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DistrictRankingEventPointsInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DistrictRankingEventPointsInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DistrictRankingEventPointsInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DistrictRankingEventPointsInner.class));

       return (TypeAdapter<T>) new TypeAdapter<DistrictRankingEventPointsInner>() {
           @Override
           public void write(JsonWriter out, DistrictRankingEventPointsInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DistrictRankingEventPointsInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DistrictRankingEventPointsInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DistrictRankingEventPointsInner
   * @throws IOException if the JSON string is invalid with respect to DistrictRankingEventPointsInner
   */
  public static DistrictRankingEventPointsInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DistrictRankingEventPointsInner.class);
  }

  /**
   * Convert an instance of DistrictRankingEventPointsInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

