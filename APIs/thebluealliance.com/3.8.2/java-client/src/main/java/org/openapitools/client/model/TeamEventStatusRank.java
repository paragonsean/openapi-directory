/*
 * The Blue Alliance API v3
 * # Overview    Information and statistics about FIRST Robotics Competition teams and events.   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).
 *
 * The version of the OpenAPI document: 3.8.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.TeamEventStatusRankRanking;
import org.openapitools.client.model.TeamEventStatusRankSortOrderInfoInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * TeamEventStatusRank
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:56:47.661723-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TeamEventStatusRank {
  public static final String SERIALIZED_NAME_NUM_TEAMS = "num_teams";
  @SerializedName(SERIALIZED_NAME_NUM_TEAMS)
  private Integer numTeams;

  public static final String SERIALIZED_NAME_RANKING = "ranking";
  @SerializedName(SERIALIZED_NAME_RANKING)
  private TeamEventStatusRankRanking ranking;

  public static final String SERIALIZED_NAME_SORT_ORDER_INFO = "sort_order_info";
  @SerializedName(SERIALIZED_NAME_SORT_ORDER_INFO)
  private List<TeamEventStatusRankSortOrderInfoInner> sortOrderInfo = new ArrayList<>();

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public TeamEventStatusRank() {
  }

  public TeamEventStatusRank numTeams(Integer numTeams) {
    this.numTeams = numTeams;
    return this;
  }

  /**
   * Number of teams ranked.
   * @return numTeams
   */
  @javax.annotation.Nullable
  public Integer getNumTeams() {
    return numTeams;
  }

  public void setNumTeams(Integer numTeams) {
    this.numTeams = numTeams;
  }


  public TeamEventStatusRank ranking(TeamEventStatusRankRanking ranking) {
    this.ranking = ranking;
    return this;
  }

  /**
   * Get ranking
   * @return ranking
   */
  @javax.annotation.Nullable
  public TeamEventStatusRankRanking getRanking() {
    return ranking;
  }

  public void setRanking(TeamEventStatusRankRanking ranking) {
    this.ranking = ranking;
  }


  public TeamEventStatusRank sortOrderInfo(List<TeamEventStatusRankSortOrderInfoInner> sortOrderInfo) {
    this.sortOrderInfo = sortOrderInfo;
    return this;
  }

  public TeamEventStatusRank addSortOrderInfoItem(TeamEventStatusRankSortOrderInfoInner sortOrderInfoItem) {
    if (this.sortOrderInfo == null) {
      this.sortOrderInfo = new ArrayList<>();
    }
    this.sortOrderInfo.add(sortOrderInfoItem);
    return this;
  }

  /**
   * Ordered list of names corresponding to the elements of the &#x60;sort_orders&#x60; array.
   * @return sortOrderInfo
   */
  @javax.annotation.Nullable
  public List<TeamEventStatusRankSortOrderInfoInner> getSortOrderInfo() {
    return sortOrderInfo;
  }

  public void setSortOrderInfo(List<TeamEventStatusRankSortOrderInfoInner> sortOrderInfo) {
    this.sortOrderInfo = sortOrderInfo;
  }


  public TeamEventStatusRank status(String status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TeamEventStatusRank teamEventStatusRank = (TeamEventStatusRank) o;
    return Objects.equals(this.numTeams, teamEventStatusRank.numTeams) &&
        Objects.equals(this.ranking, teamEventStatusRank.ranking) &&
        Objects.equals(this.sortOrderInfo, teamEventStatusRank.sortOrderInfo) &&
        Objects.equals(this.status, teamEventStatusRank.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(numTeams, ranking, sortOrderInfo, status);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TeamEventStatusRank {\n");
    sb.append("    numTeams: ").append(toIndentedString(numTeams)).append("\n");
    sb.append("    ranking: ").append(toIndentedString(ranking)).append("\n");
    sb.append("    sortOrderInfo: ").append(toIndentedString(sortOrderInfo)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("num_teams");
    openapiFields.add("ranking");
    openapiFields.add("sort_order_info");
    openapiFields.add("status");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TeamEventStatusRank
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TeamEventStatusRank.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TeamEventStatusRank is not found in the empty JSON string", TeamEventStatusRank.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TeamEventStatusRank.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TeamEventStatusRank` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `ranking`
      if (jsonObj.get("ranking") != null && !jsonObj.get("ranking").isJsonNull()) {
        TeamEventStatusRankRanking.validateJsonElement(jsonObj.get("ranking"));
      }
      if (jsonObj.get("sort_order_info") != null && !jsonObj.get("sort_order_info").isJsonNull()) {
        JsonArray jsonArraysortOrderInfo = jsonObj.getAsJsonArray("sort_order_info");
        if (jsonArraysortOrderInfo != null) {
          // ensure the json data is an array
          if (!jsonObj.get("sort_order_info").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `sort_order_info` to be an array in the JSON string but got `%s`", jsonObj.get("sort_order_info").toString()));
          }

          // validate the optional field `sort_order_info` (array)
          for (int i = 0; i < jsonArraysortOrderInfo.size(); i++) {
            TeamEventStatusRankSortOrderInfoInner.validateJsonElement(jsonArraysortOrderInfo.get(i));
          };
        }
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TeamEventStatusRank.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TeamEventStatusRank' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TeamEventStatusRank> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TeamEventStatusRank.class));

       return (TypeAdapter<T>) new TypeAdapter<TeamEventStatusRank>() {
           @Override
           public void write(JsonWriter out, TeamEventStatusRank value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TeamEventStatusRank read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TeamEventStatusRank given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TeamEventStatusRank
   * @throws IOException if the JSON string is invalid with respect to TeamEventStatusRank
   */
  public static TeamEventStatusRank fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TeamEventStatusRank.class);
  }

  /**
   * Convert an instance of TeamEventStatusRank to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

