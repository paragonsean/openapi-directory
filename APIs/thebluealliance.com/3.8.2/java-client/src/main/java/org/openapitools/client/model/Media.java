/*
 * The Blue Alliance API v3
 * # Overview    Information and statistics about FIRST Robotics Competition teams and events.   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).
 *
 * The version of the OpenAPI document: 3.8.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The &#x60;Media&#x60; object contains a reference for most any media associated with a team or event on TBA.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:56:47.661723-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Media {
  public static final String SERIALIZED_NAME_DETAILS = "details";
  @SerializedName(SERIALIZED_NAME_DETAILS)
  private Object details;

  public static final String SERIALIZED_NAME_DIRECT_URL = "direct_url";
  @SerializedName(SERIALIZED_NAME_DIRECT_URL)
  private String directUrl;

  public static final String SERIALIZED_NAME_FOREIGN_KEY = "foreign_key";
  @SerializedName(SERIALIZED_NAME_FOREIGN_KEY)
  private String foreignKey;

  public static final String SERIALIZED_NAME_PREFERRED = "preferred";
  @SerializedName(SERIALIZED_NAME_PREFERRED)
  private Boolean preferred;

  /**
   * String type of the media element.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    YOUTUBE("youtube"),
    
    CDPHOTOTHREAD("cdphotothread"),
    
    IMGUR("imgur"),
    
    FACEBOOK_PROFILE("facebook-profile"),
    
    YOUTUBE_CHANNEL("youtube-channel"),
    
    TWITTER_PROFILE("twitter-profile"),
    
    GITHUB_PROFILE("github-profile"),
    
    INSTAGRAM_PROFILE("instagram-profile"),
    
    PERISCOPE_PROFILE("periscope-profile"),
    
    GRABCAD("grabcad"),
    
    INSTAGRAM_IMAGE("instagram-image"),
    
    EXTERNAL_LINK("external-link"),
    
    AVATAR("avatar");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_VIEW_URL = "view_url";
  @SerializedName(SERIALIZED_NAME_VIEW_URL)
  private String viewUrl;

  public Media() {
  }

  public Media details(Object details) {
    this.details = details;
    return this;
  }

  /**
   * If required, a JSON dict of additional media information.
   * @return details
   */
  @javax.annotation.Nullable
  public Object getDetails() {
    return details;
  }

  public void setDetails(Object details) {
    this.details = details;
  }


  public Media directUrl(String directUrl) {
    this.directUrl = directUrl;
    return this;
  }

  /**
   * Direct URL to the media.
   * @return directUrl
   */
  @javax.annotation.Nullable
  public String getDirectUrl() {
    return directUrl;
  }

  public void setDirectUrl(String directUrl) {
    this.directUrl = directUrl;
  }


  public Media foreignKey(String foreignKey) {
    this.foreignKey = foreignKey;
    return this;
  }

  /**
   * The key used to identify this media on the media site.
   * @return foreignKey
   */
  @javax.annotation.Nonnull
  public String getForeignKey() {
    return foreignKey;
  }

  public void setForeignKey(String foreignKey) {
    this.foreignKey = foreignKey;
  }


  public Media preferred(Boolean preferred) {
    this.preferred = preferred;
    return this;
  }

  /**
   * True if the media is of high quality.
   * @return preferred
   */
  @javax.annotation.Nullable
  public Boolean getPreferred() {
    return preferred;
  }

  public void setPreferred(Boolean preferred) {
    this.preferred = preferred;
  }


  public Media type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * String type of the media element.
   * @return type
   */
  @javax.annotation.Nonnull
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }


  public Media viewUrl(String viewUrl) {
    this.viewUrl = viewUrl;
    return this;
  }

  /**
   * The URL that leads to the full web page for the media, if one exists.
   * @return viewUrl
   */
  @javax.annotation.Nullable
  public String getViewUrl() {
    return viewUrl;
  }

  public void setViewUrl(String viewUrl) {
    this.viewUrl = viewUrl;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Media media = (Media) o;
    return Objects.equals(this.details, media.details) &&
        Objects.equals(this.directUrl, media.directUrl) &&
        Objects.equals(this.foreignKey, media.foreignKey) &&
        Objects.equals(this.preferred, media.preferred) &&
        Objects.equals(this.type, media.type) &&
        Objects.equals(this.viewUrl, media.viewUrl);
  }

  @Override
  public int hashCode() {
    return Objects.hash(details, directUrl, foreignKey, preferred, type, viewUrl);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Media {\n");
    sb.append("    details: ").append(toIndentedString(details)).append("\n");
    sb.append("    directUrl: ").append(toIndentedString(directUrl)).append("\n");
    sb.append("    foreignKey: ").append(toIndentedString(foreignKey)).append("\n");
    sb.append("    preferred: ").append(toIndentedString(preferred)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    viewUrl: ").append(toIndentedString(viewUrl)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("details");
    openapiFields.add("direct_url");
    openapiFields.add("foreign_key");
    openapiFields.add("preferred");
    openapiFields.add("type");
    openapiFields.add("view_url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("foreign_key");
    openapiRequiredFields.add("type");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Media
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Media.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Media is not found in the empty JSON string", Media.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Media.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Media` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Media.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("direct_url") != null && !jsonObj.get("direct_url").isJsonNull()) && !jsonObj.get("direct_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `direct_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("direct_url").toString()));
      }
      if (!jsonObj.get("foreign_key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `foreign_key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("foreign_key").toString()));
      }
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the required field `type`
      TypeEnum.validateJsonElement(jsonObj.get("type"));
      if ((jsonObj.get("view_url") != null && !jsonObj.get("view_url").isJsonNull()) && !jsonObj.get("view_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `view_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("view_url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Media.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Media' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Media> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Media.class));

       return (TypeAdapter<T>) new TypeAdapter<Media>() {
           @Override
           public void write(JsonWriter out, Media value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Media read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Media given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Media
   * @throws IOException if the JSON string is invalid with respect to Media
   */
  public static Media fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Media.class);
  }

  /**
   * Convert an instance of Media to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

