/*
 * The Blue Alliance API v3
 * # Overview    Information and statistics about FIRST Robotics Competition teams and events.   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).
 *
 * The version of the OpenAPI document: 3.8.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.EventRankingExtraStatsInfoInner;
import org.openapitools.client.model.EventRankingRankingsInner;
import org.openapitools.client.model.EventRankingSortOrderInfoInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * EventRanking
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:56:47.661723-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class EventRanking {
  public static final String SERIALIZED_NAME_EXTRA_STATS_INFO = "extra_stats_info";
  @SerializedName(SERIALIZED_NAME_EXTRA_STATS_INFO)
  private List<EventRankingExtraStatsInfoInner> extraStatsInfo = new ArrayList<>();

  public static final String SERIALIZED_NAME_RANKINGS = "rankings";
  @SerializedName(SERIALIZED_NAME_RANKINGS)
  private List<EventRankingRankingsInner> rankings = new ArrayList<>();

  public static final String SERIALIZED_NAME_SORT_ORDER_INFO = "sort_order_info";
  @SerializedName(SERIALIZED_NAME_SORT_ORDER_INFO)
  private List<EventRankingSortOrderInfoInner> sortOrderInfo = new ArrayList<>();

  public EventRanking() {
  }

  public EventRanking extraStatsInfo(List<EventRankingExtraStatsInfoInner> extraStatsInfo) {
    this.extraStatsInfo = extraStatsInfo;
    return this;
  }

  public EventRanking addExtraStatsInfoItem(EventRankingExtraStatsInfoInner extraStatsInfoItem) {
    if (this.extraStatsInfo == null) {
      this.extraStatsInfo = new ArrayList<>();
    }
    this.extraStatsInfo.add(extraStatsInfoItem);
    return this;
  }

  /**
   * List of special TBA-generated values provided in the &#x60;extra_stats&#x60; array for each item.
   * @return extraStatsInfo
   */
  @javax.annotation.Nullable
  public List<EventRankingExtraStatsInfoInner> getExtraStatsInfo() {
    return extraStatsInfo;
  }

  public void setExtraStatsInfo(List<EventRankingExtraStatsInfoInner> extraStatsInfo) {
    this.extraStatsInfo = extraStatsInfo;
  }


  public EventRanking rankings(List<EventRankingRankingsInner> rankings) {
    this.rankings = rankings;
    return this;
  }

  public EventRanking addRankingsItem(EventRankingRankingsInner rankingsItem) {
    if (this.rankings == null) {
      this.rankings = new ArrayList<>();
    }
    this.rankings.add(rankingsItem);
    return this;
  }

  /**
   * List of rankings at the event.
   * @return rankings
   */
  @javax.annotation.Nonnull
  public List<EventRankingRankingsInner> getRankings() {
    return rankings;
  }

  public void setRankings(List<EventRankingRankingsInner> rankings) {
    this.rankings = rankings;
  }


  public EventRanking sortOrderInfo(List<EventRankingSortOrderInfoInner> sortOrderInfo) {
    this.sortOrderInfo = sortOrderInfo;
    return this;
  }

  public EventRanking addSortOrderInfoItem(EventRankingSortOrderInfoInner sortOrderInfoItem) {
    if (this.sortOrderInfo == null) {
      this.sortOrderInfo = new ArrayList<>();
    }
    this.sortOrderInfo.add(sortOrderInfoItem);
    return this;
  }

  /**
   * List of year-specific values provided in the &#x60;sort_orders&#x60; array for each team.
   * @return sortOrderInfo
   */
  @javax.annotation.Nonnull
  public List<EventRankingSortOrderInfoInner> getSortOrderInfo() {
    return sortOrderInfo;
  }

  public void setSortOrderInfo(List<EventRankingSortOrderInfoInner> sortOrderInfo) {
    this.sortOrderInfo = sortOrderInfo;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EventRanking eventRanking = (EventRanking) o;
    return Objects.equals(this.extraStatsInfo, eventRanking.extraStatsInfo) &&
        Objects.equals(this.rankings, eventRanking.rankings) &&
        Objects.equals(this.sortOrderInfo, eventRanking.sortOrderInfo);
  }

  @Override
  public int hashCode() {
    return Objects.hash(extraStatsInfo, rankings, sortOrderInfo);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EventRanking {\n");
    sb.append("    extraStatsInfo: ").append(toIndentedString(extraStatsInfo)).append("\n");
    sb.append("    rankings: ").append(toIndentedString(rankings)).append("\n");
    sb.append("    sortOrderInfo: ").append(toIndentedString(sortOrderInfo)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("extra_stats_info");
    openapiFields.add("rankings");
    openapiFields.add("sort_order_info");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("rankings");
    openapiRequiredFields.add("sort_order_info");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EventRanking
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EventRanking.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EventRanking is not found in the empty JSON string", EventRanking.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EventRanking.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EventRanking` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : EventRanking.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("extra_stats_info") != null && !jsonObj.get("extra_stats_info").isJsonNull()) {
        JsonArray jsonArrayextraStatsInfo = jsonObj.getAsJsonArray("extra_stats_info");
        if (jsonArrayextraStatsInfo != null) {
          // ensure the json data is an array
          if (!jsonObj.get("extra_stats_info").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `extra_stats_info` to be an array in the JSON string but got `%s`", jsonObj.get("extra_stats_info").toString()));
          }

          // validate the optional field `extra_stats_info` (array)
          for (int i = 0; i < jsonArrayextraStatsInfo.size(); i++) {
            EventRankingExtraStatsInfoInner.validateJsonElement(jsonArrayextraStatsInfo.get(i));
          };
        }
      }
      // ensure the json data is an array
      if (!jsonObj.get("rankings").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `rankings` to be an array in the JSON string but got `%s`", jsonObj.get("rankings").toString()));
      }

      JsonArray jsonArrayrankings = jsonObj.getAsJsonArray("rankings");
      // validate the required field `rankings` (array)
      for (int i = 0; i < jsonArrayrankings.size(); i++) {
        EventRankingRankingsInner.validateJsonElement(jsonArrayrankings.get(i));
      };
      // ensure the json data is an array
      if (!jsonObj.get("sort_order_info").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `sort_order_info` to be an array in the JSON string but got `%s`", jsonObj.get("sort_order_info").toString()));
      }

      JsonArray jsonArraysortOrderInfo = jsonObj.getAsJsonArray("sort_order_info");
      // validate the required field `sort_order_info` (array)
      for (int i = 0; i < jsonArraysortOrderInfo.size(); i++) {
        EventRankingSortOrderInfoInner.validateJsonElement(jsonArraysortOrderInfo.get(i));
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EventRanking.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EventRanking' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EventRanking> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EventRanking.class));

       return (TypeAdapter<T>) new TypeAdapter<EventRanking>() {
           @Override
           public void write(JsonWriter out, EventRanking value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EventRanking read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EventRanking given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EventRanking
   * @throws IOException if the JSON string is invalid with respect to EventRanking
   */
  public static EventRanking fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EventRanking.class);
  }

  /**
   * Convert an instance of EventRanking to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

