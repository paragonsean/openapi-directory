/*
 * The Blue Alliance API v3
 * # Overview    Information and statistics about FIRST Robotics Competition teams and events.   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).
 *
 * The version of the OpenAPI document: 3.8.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Timeseries data for the 2018 game *FIRST* POWER UP. *WARNING:* This is *not* official data, and is subject to a significant possibility of error, or missing data. Do not rely on this data for any purpose. In fact, pretend we made it up. *WARNING:* This model is currently under active development and may change at any time, including in breaking ways.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:56:47.661723-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MatchTimeseries2018 {
  public static final String SERIALIZED_NAME_BLUE_AUTO_QUEST = "blue_auto_quest";
  @SerializedName(SERIALIZED_NAME_BLUE_AUTO_QUEST)
  private Integer blueAutoQuest;

  public static final String SERIALIZED_NAME_BLUE_BOOST_COUNT = "blue_boost_count";
  @SerializedName(SERIALIZED_NAME_BLUE_BOOST_COUNT)
  private Integer blueBoostCount;

  public static final String SERIALIZED_NAME_BLUE_BOOST_PLAYED = "blue_boost_played";
  @SerializedName(SERIALIZED_NAME_BLUE_BOOST_PLAYED)
  private Integer blueBoostPlayed;

  public static final String SERIALIZED_NAME_BLUE_CURRENT_POWERUP = "blue_current_powerup";
  @SerializedName(SERIALIZED_NAME_BLUE_CURRENT_POWERUP)
  private String blueCurrentPowerup;

  public static final String SERIALIZED_NAME_BLUE_FACE_THE_BOSS = "blue_face_the_boss";
  @SerializedName(SERIALIZED_NAME_BLUE_FACE_THE_BOSS)
  private Integer blueFaceTheBoss;

  public static final String SERIALIZED_NAME_BLUE_FORCE_COUNT = "blue_force_count";
  @SerializedName(SERIALIZED_NAME_BLUE_FORCE_COUNT)
  private Integer blueForceCount;

  public static final String SERIALIZED_NAME_BLUE_FORCE_PLAYED = "blue_force_played";
  @SerializedName(SERIALIZED_NAME_BLUE_FORCE_PLAYED)
  private Integer blueForcePlayed;

  public static final String SERIALIZED_NAME_BLUE_LEVITATE_COUNT = "blue_levitate_count";
  @SerializedName(SERIALIZED_NAME_BLUE_LEVITATE_COUNT)
  private Integer blueLevitateCount;

  public static final String SERIALIZED_NAME_BLUE_LEVITATE_PLAYED = "blue_levitate_played";
  @SerializedName(SERIALIZED_NAME_BLUE_LEVITATE_PLAYED)
  private Integer blueLevitatePlayed;

  public static final String SERIALIZED_NAME_BLUE_POWERUP_TIME_REMAINING = "blue_powerup_time_remaining";
  @SerializedName(SERIALIZED_NAME_BLUE_POWERUP_TIME_REMAINING)
  private String bluePowerupTimeRemaining;

  public static final String SERIALIZED_NAME_BLUE_SCALE_OWNED = "blue_scale_owned";
  @SerializedName(SERIALIZED_NAME_BLUE_SCALE_OWNED)
  private Integer blueScaleOwned;

  public static final String SERIALIZED_NAME_BLUE_SCORE = "blue_score";
  @SerializedName(SERIALIZED_NAME_BLUE_SCORE)
  private Integer blueScore;

  public static final String SERIALIZED_NAME_BLUE_SWITCH_OWNED = "blue_switch_owned";
  @SerializedName(SERIALIZED_NAME_BLUE_SWITCH_OWNED)
  private Integer blueSwitchOwned;

  public static final String SERIALIZED_NAME_EVENT_KEY = "event_key";
  @SerializedName(SERIALIZED_NAME_EVENT_KEY)
  private String eventKey;

  public static final String SERIALIZED_NAME_MATCH_ID = "match_id";
  @SerializedName(SERIALIZED_NAME_MATCH_ID)
  private String matchId;

  public static final String SERIALIZED_NAME_MODE = "mode";
  @SerializedName(SERIALIZED_NAME_MODE)
  private String mode;

  public static final String SERIALIZED_NAME_PLAY = "play";
  @SerializedName(SERIALIZED_NAME_PLAY)
  private Integer play;

  public static final String SERIALIZED_NAME_RED_AUTO_QUEST = "red_auto_quest";
  @SerializedName(SERIALIZED_NAME_RED_AUTO_QUEST)
  private Integer redAutoQuest;

  public static final String SERIALIZED_NAME_RED_BOOST_COUNT = "red_boost_count";
  @SerializedName(SERIALIZED_NAME_RED_BOOST_COUNT)
  private Integer redBoostCount;

  public static final String SERIALIZED_NAME_RED_BOOST_PLAYED = "red_boost_played";
  @SerializedName(SERIALIZED_NAME_RED_BOOST_PLAYED)
  private Integer redBoostPlayed;

  public static final String SERIALIZED_NAME_RED_CURRENT_POWERUP = "red_current_powerup";
  @SerializedName(SERIALIZED_NAME_RED_CURRENT_POWERUP)
  private String redCurrentPowerup;

  public static final String SERIALIZED_NAME_RED_FACE_THE_BOSS = "red_face_the_boss";
  @SerializedName(SERIALIZED_NAME_RED_FACE_THE_BOSS)
  private Integer redFaceTheBoss;

  public static final String SERIALIZED_NAME_RED_FORCE_COUNT = "red_force_count";
  @SerializedName(SERIALIZED_NAME_RED_FORCE_COUNT)
  private Integer redForceCount;

  public static final String SERIALIZED_NAME_RED_FORCE_PLAYED = "red_force_played";
  @SerializedName(SERIALIZED_NAME_RED_FORCE_PLAYED)
  private Integer redForcePlayed;

  public static final String SERIALIZED_NAME_RED_LEVITATE_COUNT = "red_levitate_count";
  @SerializedName(SERIALIZED_NAME_RED_LEVITATE_COUNT)
  private Integer redLevitateCount;

  public static final String SERIALIZED_NAME_RED_LEVITATE_PLAYED = "red_levitate_played";
  @SerializedName(SERIALIZED_NAME_RED_LEVITATE_PLAYED)
  private Integer redLevitatePlayed;

  public static final String SERIALIZED_NAME_RED_POWERUP_TIME_REMAINING = "red_powerup_time_remaining";
  @SerializedName(SERIALIZED_NAME_RED_POWERUP_TIME_REMAINING)
  private String redPowerupTimeRemaining;

  public static final String SERIALIZED_NAME_RED_SCALE_OWNED = "red_scale_owned";
  @SerializedName(SERIALIZED_NAME_RED_SCALE_OWNED)
  private Integer redScaleOwned;

  public static final String SERIALIZED_NAME_RED_SCORE = "red_score";
  @SerializedName(SERIALIZED_NAME_RED_SCORE)
  private Integer redScore;

  public static final String SERIALIZED_NAME_RED_SWITCH_OWNED = "red_switch_owned";
  @SerializedName(SERIALIZED_NAME_RED_SWITCH_OWNED)
  private Integer redSwitchOwned;

  public static final String SERIALIZED_NAME_TIME_REMAINING = "time_remaining";
  @SerializedName(SERIALIZED_NAME_TIME_REMAINING)
  private Integer timeRemaining;

  public MatchTimeseries2018() {
  }

  public MatchTimeseries2018 blueAutoQuest(Integer blueAutoQuest) {
    this.blueAutoQuest = blueAutoQuest;
    return this;
  }

  /**
   * 1 if the blue alliance is credited with the AUTO QUEST, 0 if not.
   * @return blueAutoQuest
   */
  @javax.annotation.Nullable
  public Integer getBlueAutoQuest() {
    return blueAutoQuest;
  }

  public void setBlueAutoQuest(Integer blueAutoQuest) {
    this.blueAutoQuest = blueAutoQuest;
  }


  public MatchTimeseries2018 blueBoostCount(Integer blueBoostCount) {
    this.blueBoostCount = blueBoostCount;
    return this;
  }

  /**
   * Number of POWER CUBES in the BOOST section of the blue alliance VAULT.
   * @return blueBoostCount
   */
  @javax.annotation.Nullable
  public Integer getBlueBoostCount() {
    return blueBoostCount;
  }

  public void setBlueBoostCount(Integer blueBoostCount) {
    this.blueBoostCount = blueBoostCount;
  }


  public MatchTimeseries2018 blueBoostPlayed(Integer blueBoostPlayed) {
    this.blueBoostPlayed = blueBoostPlayed;
    return this;
  }

  /**
   * Returns 1 if the blue alliance BOOST was played, or 0 if not played.
   * @return blueBoostPlayed
   */
  @javax.annotation.Nullable
  public Integer getBlueBoostPlayed() {
    return blueBoostPlayed;
  }

  public void setBlueBoostPlayed(Integer blueBoostPlayed) {
    this.blueBoostPlayed = blueBoostPlayed;
  }


  public MatchTimeseries2018 blueCurrentPowerup(String blueCurrentPowerup) {
    this.blueCurrentPowerup = blueCurrentPowerup;
    return this;
  }

  /**
   * Name of the current blue alliance POWER UP being played, or &#x60;null&#x60;.
   * @return blueCurrentPowerup
   */
  @javax.annotation.Nullable
  public String getBlueCurrentPowerup() {
    return blueCurrentPowerup;
  }

  public void setBlueCurrentPowerup(String blueCurrentPowerup) {
    this.blueCurrentPowerup = blueCurrentPowerup;
  }


  public MatchTimeseries2018 blueFaceTheBoss(Integer blueFaceTheBoss) {
    this.blueFaceTheBoss = blueFaceTheBoss;
    return this;
  }

  /**
   * 1 if the blue alliance is credited with FACING THE BOSS, 0 if not.
   * @return blueFaceTheBoss
   */
  @javax.annotation.Nullable
  public Integer getBlueFaceTheBoss() {
    return blueFaceTheBoss;
  }

  public void setBlueFaceTheBoss(Integer blueFaceTheBoss) {
    this.blueFaceTheBoss = blueFaceTheBoss;
  }


  public MatchTimeseries2018 blueForceCount(Integer blueForceCount) {
    this.blueForceCount = blueForceCount;
    return this;
  }

  /**
   * Number of POWER CUBES in the FORCE section of the blue alliance VAULT.
   * @return blueForceCount
   */
  @javax.annotation.Nullable
  public Integer getBlueForceCount() {
    return blueForceCount;
  }

  public void setBlueForceCount(Integer blueForceCount) {
    this.blueForceCount = blueForceCount;
  }


  public MatchTimeseries2018 blueForcePlayed(Integer blueForcePlayed) {
    this.blueForcePlayed = blueForcePlayed;
    return this;
  }

  /**
   * Returns 1 if the blue alliance FORCE was played, or 0 if not played.
   * @return blueForcePlayed
   */
  @javax.annotation.Nullable
  public Integer getBlueForcePlayed() {
    return blueForcePlayed;
  }

  public void setBlueForcePlayed(Integer blueForcePlayed) {
    this.blueForcePlayed = blueForcePlayed;
  }


  public MatchTimeseries2018 blueLevitateCount(Integer blueLevitateCount) {
    this.blueLevitateCount = blueLevitateCount;
    return this;
  }

  /**
   * Number of POWER CUBES in the LEVITATE section of the blue alliance VAULT.
   * @return blueLevitateCount
   */
  @javax.annotation.Nullable
  public Integer getBlueLevitateCount() {
    return blueLevitateCount;
  }

  public void setBlueLevitateCount(Integer blueLevitateCount) {
    this.blueLevitateCount = blueLevitateCount;
  }


  public MatchTimeseries2018 blueLevitatePlayed(Integer blueLevitatePlayed) {
    this.blueLevitatePlayed = blueLevitatePlayed;
    return this;
  }

  /**
   * Returns 1 if the blue alliance LEVITATE was played, or 0 if not played.
   * @return blueLevitatePlayed
   */
  @javax.annotation.Nullable
  public Integer getBlueLevitatePlayed() {
    return blueLevitatePlayed;
  }

  public void setBlueLevitatePlayed(Integer blueLevitatePlayed) {
    this.blueLevitatePlayed = blueLevitatePlayed;
  }


  public MatchTimeseries2018 bluePowerupTimeRemaining(String bluePowerupTimeRemaining) {
    this.bluePowerupTimeRemaining = bluePowerupTimeRemaining;
    return this;
  }

  /**
   * Number of seconds remaining in the blue alliance POWER UP time, or 0 if none is active.
   * @return bluePowerupTimeRemaining
   */
  @javax.annotation.Nullable
  public String getBluePowerupTimeRemaining() {
    return bluePowerupTimeRemaining;
  }

  public void setBluePowerupTimeRemaining(String bluePowerupTimeRemaining) {
    this.bluePowerupTimeRemaining = bluePowerupTimeRemaining;
  }


  public MatchTimeseries2018 blueScaleOwned(Integer blueScaleOwned) {
    this.blueScaleOwned = blueScaleOwned;
    return this;
  }

  /**
   * 1 if the blue alliance owns the SCALE, 0 if not.
   * @return blueScaleOwned
   */
  @javax.annotation.Nullable
  public Integer getBlueScaleOwned() {
    return blueScaleOwned;
  }

  public void setBlueScaleOwned(Integer blueScaleOwned) {
    this.blueScaleOwned = blueScaleOwned;
  }


  public MatchTimeseries2018 blueScore(Integer blueScore) {
    this.blueScore = blueScore;
    return this;
  }

  /**
   * Current score for the blue alliance.
   * @return blueScore
   */
  @javax.annotation.Nullable
  public Integer getBlueScore() {
    return blueScore;
  }

  public void setBlueScore(Integer blueScore) {
    this.blueScore = blueScore;
  }


  public MatchTimeseries2018 blueSwitchOwned(Integer blueSwitchOwned) {
    this.blueSwitchOwned = blueSwitchOwned;
    return this;
  }

  /**
   * 1 if the blue alliance owns their SWITCH, 0 if not.
   * @return blueSwitchOwned
   */
  @javax.annotation.Nullable
  public Integer getBlueSwitchOwned() {
    return blueSwitchOwned;
  }

  public void setBlueSwitchOwned(Integer blueSwitchOwned) {
    this.blueSwitchOwned = blueSwitchOwned;
  }


  public MatchTimeseries2018 eventKey(String eventKey) {
    this.eventKey = eventKey;
    return this;
  }

  /**
   * TBA event key with the format yyyy[EVENT_CODE], where yyyy is the year, and EVENT_CODE is the event code of the event.
   * @return eventKey
   */
  @javax.annotation.Nullable
  public String getEventKey() {
    return eventKey;
  }

  public void setEventKey(String eventKey) {
    this.eventKey = eventKey;
  }


  public MatchTimeseries2018 matchId(String matchId) {
    this.matchId = matchId;
    return this;
  }

  /**
   * Match ID consisting of the level, match number, and set number, eg &#x60;qm45&#x60; or &#x60;f1m1&#x60;.
   * @return matchId
   */
  @javax.annotation.Nullable
  public String getMatchId() {
    return matchId;
  }

  public void setMatchId(String matchId) {
    this.matchId = matchId;
  }


  public MatchTimeseries2018 mode(String mode) {
    this.mode = mode;
    return this;
  }

  /**
   * Current mode of play, can be &#x60;pre_match&#x60;, &#x60;auto&#x60;, &#x60;telop&#x60;, or &#x60;post_match&#x60;.
   * @return mode
   */
  @javax.annotation.Nullable
  public String getMode() {
    return mode;
  }

  public void setMode(String mode) {
    this.mode = mode;
  }


  public MatchTimeseries2018 play(Integer play) {
    this.play = play;
    return this;
  }

  /**
   * Get play
   * @return play
   */
  @javax.annotation.Nullable
  public Integer getPlay() {
    return play;
  }

  public void setPlay(Integer play) {
    this.play = play;
  }


  public MatchTimeseries2018 redAutoQuest(Integer redAutoQuest) {
    this.redAutoQuest = redAutoQuest;
    return this;
  }

  /**
   * 1 if the red alliance is credited with the AUTO QUEST, 0 if not.
   * @return redAutoQuest
   */
  @javax.annotation.Nullable
  public Integer getRedAutoQuest() {
    return redAutoQuest;
  }

  public void setRedAutoQuest(Integer redAutoQuest) {
    this.redAutoQuest = redAutoQuest;
  }


  public MatchTimeseries2018 redBoostCount(Integer redBoostCount) {
    this.redBoostCount = redBoostCount;
    return this;
  }

  /**
   * Number of POWER CUBES in the BOOST section of the red alliance VAULT.
   * @return redBoostCount
   */
  @javax.annotation.Nullable
  public Integer getRedBoostCount() {
    return redBoostCount;
  }

  public void setRedBoostCount(Integer redBoostCount) {
    this.redBoostCount = redBoostCount;
  }


  public MatchTimeseries2018 redBoostPlayed(Integer redBoostPlayed) {
    this.redBoostPlayed = redBoostPlayed;
    return this;
  }

  /**
   * Returns 1 if the red alliance BOOST was played, or 0 if not played.
   * @return redBoostPlayed
   */
  @javax.annotation.Nullable
  public Integer getRedBoostPlayed() {
    return redBoostPlayed;
  }

  public void setRedBoostPlayed(Integer redBoostPlayed) {
    this.redBoostPlayed = redBoostPlayed;
  }


  public MatchTimeseries2018 redCurrentPowerup(String redCurrentPowerup) {
    this.redCurrentPowerup = redCurrentPowerup;
    return this;
  }

  /**
   * Name of the current red alliance POWER UP being played, or &#x60;null&#x60;.
   * @return redCurrentPowerup
   */
  @javax.annotation.Nullable
  public String getRedCurrentPowerup() {
    return redCurrentPowerup;
  }

  public void setRedCurrentPowerup(String redCurrentPowerup) {
    this.redCurrentPowerup = redCurrentPowerup;
  }


  public MatchTimeseries2018 redFaceTheBoss(Integer redFaceTheBoss) {
    this.redFaceTheBoss = redFaceTheBoss;
    return this;
  }

  /**
   * 1 if the red alliance is credited with FACING THE BOSS, 0 if not.
   * @return redFaceTheBoss
   */
  @javax.annotation.Nullable
  public Integer getRedFaceTheBoss() {
    return redFaceTheBoss;
  }

  public void setRedFaceTheBoss(Integer redFaceTheBoss) {
    this.redFaceTheBoss = redFaceTheBoss;
  }


  public MatchTimeseries2018 redForceCount(Integer redForceCount) {
    this.redForceCount = redForceCount;
    return this;
  }

  /**
   * Number of POWER CUBES in the FORCE section of the red alliance VAULT.
   * @return redForceCount
   */
  @javax.annotation.Nullable
  public Integer getRedForceCount() {
    return redForceCount;
  }

  public void setRedForceCount(Integer redForceCount) {
    this.redForceCount = redForceCount;
  }


  public MatchTimeseries2018 redForcePlayed(Integer redForcePlayed) {
    this.redForcePlayed = redForcePlayed;
    return this;
  }

  /**
   * Returns 1 if the red alliance FORCE was played, or 0 if not played.
   * @return redForcePlayed
   */
  @javax.annotation.Nullable
  public Integer getRedForcePlayed() {
    return redForcePlayed;
  }

  public void setRedForcePlayed(Integer redForcePlayed) {
    this.redForcePlayed = redForcePlayed;
  }


  public MatchTimeseries2018 redLevitateCount(Integer redLevitateCount) {
    this.redLevitateCount = redLevitateCount;
    return this;
  }

  /**
   * Number of POWER CUBES in the LEVITATE section of the red alliance VAULT.
   * @return redLevitateCount
   */
  @javax.annotation.Nullable
  public Integer getRedLevitateCount() {
    return redLevitateCount;
  }

  public void setRedLevitateCount(Integer redLevitateCount) {
    this.redLevitateCount = redLevitateCount;
  }


  public MatchTimeseries2018 redLevitatePlayed(Integer redLevitatePlayed) {
    this.redLevitatePlayed = redLevitatePlayed;
    return this;
  }

  /**
   * Returns 1 if the red alliance LEVITATE was played, or 0 if not played.
   * @return redLevitatePlayed
   */
  @javax.annotation.Nullable
  public Integer getRedLevitatePlayed() {
    return redLevitatePlayed;
  }

  public void setRedLevitatePlayed(Integer redLevitatePlayed) {
    this.redLevitatePlayed = redLevitatePlayed;
  }


  public MatchTimeseries2018 redPowerupTimeRemaining(String redPowerupTimeRemaining) {
    this.redPowerupTimeRemaining = redPowerupTimeRemaining;
    return this;
  }

  /**
   * Number of seconds remaining in the red alliance POWER UP time, or 0 if none is active.
   * @return redPowerupTimeRemaining
   */
  @javax.annotation.Nullable
  public String getRedPowerupTimeRemaining() {
    return redPowerupTimeRemaining;
  }

  public void setRedPowerupTimeRemaining(String redPowerupTimeRemaining) {
    this.redPowerupTimeRemaining = redPowerupTimeRemaining;
  }


  public MatchTimeseries2018 redScaleOwned(Integer redScaleOwned) {
    this.redScaleOwned = redScaleOwned;
    return this;
  }

  /**
   * 1 if the red alliance owns the SCALE, 0 if not.
   * @return redScaleOwned
   */
  @javax.annotation.Nullable
  public Integer getRedScaleOwned() {
    return redScaleOwned;
  }

  public void setRedScaleOwned(Integer redScaleOwned) {
    this.redScaleOwned = redScaleOwned;
  }


  public MatchTimeseries2018 redScore(Integer redScore) {
    this.redScore = redScore;
    return this;
  }

  /**
   * Current score for the red alliance.
   * @return redScore
   */
  @javax.annotation.Nullable
  public Integer getRedScore() {
    return redScore;
  }

  public void setRedScore(Integer redScore) {
    this.redScore = redScore;
  }


  public MatchTimeseries2018 redSwitchOwned(Integer redSwitchOwned) {
    this.redSwitchOwned = redSwitchOwned;
    return this;
  }

  /**
   * 1 if the red alliance owns their SWITCH, 0 if not.
   * @return redSwitchOwned
   */
  @javax.annotation.Nullable
  public Integer getRedSwitchOwned() {
    return redSwitchOwned;
  }

  public void setRedSwitchOwned(Integer redSwitchOwned) {
    this.redSwitchOwned = redSwitchOwned;
  }


  public MatchTimeseries2018 timeRemaining(Integer timeRemaining) {
    this.timeRemaining = timeRemaining;
    return this;
  }

  /**
   * Amount of time remaining in the match, only valid during &#x60;auto&#x60; and &#x60;teleop&#x60; modes.
   * @return timeRemaining
   */
  @javax.annotation.Nullable
  public Integer getTimeRemaining() {
    return timeRemaining;
  }

  public void setTimeRemaining(Integer timeRemaining) {
    this.timeRemaining = timeRemaining;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MatchTimeseries2018 matchTimeseries2018 = (MatchTimeseries2018) o;
    return Objects.equals(this.blueAutoQuest, matchTimeseries2018.blueAutoQuest) &&
        Objects.equals(this.blueBoostCount, matchTimeseries2018.blueBoostCount) &&
        Objects.equals(this.blueBoostPlayed, matchTimeseries2018.blueBoostPlayed) &&
        Objects.equals(this.blueCurrentPowerup, matchTimeseries2018.blueCurrentPowerup) &&
        Objects.equals(this.blueFaceTheBoss, matchTimeseries2018.blueFaceTheBoss) &&
        Objects.equals(this.blueForceCount, matchTimeseries2018.blueForceCount) &&
        Objects.equals(this.blueForcePlayed, matchTimeseries2018.blueForcePlayed) &&
        Objects.equals(this.blueLevitateCount, matchTimeseries2018.blueLevitateCount) &&
        Objects.equals(this.blueLevitatePlayed, matchTimeseries2018.blueLevitatePlayed) &&
        Objects.equals(this.bluePowerupTimeRemaining, matchTimeseries2018.bluePowerupTimeRemaining) &&
        Objects.equals(this.blueScaleOwned, matchTimeseries2018.blueScaleOwned) &&
        Objects.equals(this.blueScore, matchTimeseries2018.blueScore) &&
        Objects.equals(this.blueSwitchOwned, matchTimeseries2018.blueSwitchOwned) &&
        Objects.equals(this.eventKey, matchTimeseries2018.eventKey) &&
        Objects.equals(this.matchId, matchTimeseries2018.matchId) &&
        Objects.equals(this.mode, matchTimeseries2018.mode) &&
        Objects.equals(this.play, matchTimeseries2018.play) &&
        Objects.equals(this.redAutoQuest, matchTimeseries2018.redAutoQuest) &&
        Objects.equals(this.redBoostCount, matchTimeseries2018.redBoostCount) &&
        Objects.equals(this.redBoostPlayed, matchTimeseries2018.redBoostPlayed) &&
        Objects.equals(this.redCurrentPowerup, matchTimeseries2018.redCurrentPowerup) &&
        Objects.equals(this.redFaceTheBoss, matchTimeseries2018.redFaceTheBoss) &&
        Objects.equals(this.redForceCount, matchTimeseries2018.redForceCount) &&
        Objects.equals(this.redForcePlayed, matchTimeseries2018.redForcePlayed) &&
        Objects.equals(this.redLevitateCount, matchTimeseries2018.redLevitateCount) &&
        Objects.equals(this.redLevitatePlayed, matchTimeseries2018.redLevitatePlayed) &&
        Objects.equals(this.redPowerupTimeRemaining, matchTimeseries2018.redPowerupTimeRemaining) &&
        Objects.equals(this.redScaleOwned, matchTimeseries2018.redScaleOwned) &&
        Objects.equals(this.redScore, matchTimeseries2018.redScore) &&
        Objects.equals(this.redSwitchOwned, matchTimeseries2018.redSwitchOwned) &&
        Objects.equals(this.timeRemaining, matchTimeseries2018.timeRemaining);
  }

  @Override
  public int hashCode() {
    return Objects.hash(blueAutoQuest, blueBoostCount, blueBoostPlayed, blueCurrentPowerup, blueFaceTheBoss, blueForceCount, blueForcePlayed, blueLevitateCount, blueLevitatePlayed, bluePowerupTimeRemaining, blueScaleOwned, blueScore, blueSwitchOwned, eventKey, matchId, mode, play, redAutoQuest, redBoostCount, redBoostPlayed, redCurrentPowerup, redFaceTheBoss, redForceCount, redForcePlayed, redLevitateCount, redLevitatePlayed, redPowerupTimeRemaining, redScaleOwned, redScore, redSwitchOwned, timeRemaining);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MatchTimeseries2018 {\n");
    sb.append("    blueAutoQuest: ").append(toIndentedString(blueAutoQuest)).append("\n");
    sb.append("    blueBoostCount: ").append(toIndentedString(blueBoostCount)).append("\n");
    sb.append("    blueBoostPlayed: ").append(toIndentedString(blueBoostPlayed)).append("\n");
    sb.append("    blueCurrentPowerup: ").append(toIndentedString(blueCurrentPowerup)).append("\n");
    sb.append("    blueFaceTheBoss: ").append(toIndentedString(blueFaceTheBoss)).append("\n");
    sb.append("    blueForceCount: ").append(toIndentedString(blueForceCount)).append("\n");
    sb.append("    blueForcePlayed: ").append(toIndentedString(blueForcePlayed)).append("\n");
    sb.append("    blueLevitateCount: ").append(toIndentedString(blueLevitateCount)).append("\n");
    sb.append("    blueLevitatePlayed: ").append(toIndentedString(blueLevitatePlayed)).append("\n");
    sb.append("    bluePowerupTimeRemaining: ").append(toIndentedString(bluePowerupTimeRemaining)).append("\n");
    sb.append("    blueScaleOwned: ").append(toIndentedString(blueScaleOwned)).append("\n");
    sb.append("    blueScore: ").append(toIndentedString(blueScore)).append("\n");
    sb.append("    blueSwitchOwned: ").append(toIndentedString(blueSwitchOwned)).append("\n");
    sb.append("    eventKey: ").append(toIndentedString(eventKey)).append("\n");
    sb.append("    matchId: ").append(toIndentedString(matchId)).append("\n");
    sb.append("    mode: ").append(toIndentedString(mode)).append("\n");
    sb.append("    play: ").append(toIndentedString(play)).append("\n");
    sb.append("    redAutoQuest: ").append(toIndentedString(redAutoQuest)).append("\n");
    sb.append("    redBoostCount: ").append(toIndentedString(redBoostCount)).append("\n");
    sb.append("    redBoostPlayed: ").append(toIndentedString(redBoostPlayed)).append("\n");
    sb.append("    redCurrentPowerup: ").append(toIndentedString(redCurrentPowerup)).append("\n");
    sb.append("    redFaceTheBoss: ").append(toIndentedString(redFaceTheBoss)).append("\n");
    sb.append("    redForceCount: ").append(toIndentedString(redForceCount)).append("\n");
    sb.append("    redForcePlayed: ").append(toIndentedString(redForcePlayed)).append("\n");
    sb.append("    redLevitateCount: ").append(toIndentedString(redLevitateCount)).append("\n");
    sb.append("    redLevitatePlayed: ").append(toIndentedString(redLevitatePlayed)).append("\n");
    sb.append("    redPowerupTimeRemaining: ").append(toIndentedString(redPowerupTimeRemaining)).append("\n");
    sb.append("    redScaleOwned: ").append(toIndentedString(redScaleOwned)).append("\n");
    sb.append("    redScore: ").append(toIndentedString(redScore)).append("\n");
    sb.append("    redSwitchOwned: ").append(toIndentedString(redSwitchOwned)).append("\n");
    sb.append("    timeRemaining: ").append(toIndentedString(timeRemaining)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("blue_auto_quest");
    openapiFields.add("blue_boost_count");
    openapiFields.add("blue_boost_played");
    openapiFields.add("blue_current_powerup");
    openapiFields.add("blue_face_the_boss");
    openapiFields.add("blue_force_count");
    openapiFields.add("blue_force_played");
    openapiFields.add("blue_levitate_count");
    openapiFields.add("blue_levitate_played");
    openapiFields.add("blue_powerup_time_remaining");
    openapiFields.add("blue_scale_owned");
    openapiFields.add("blue_score");
    openapiFields.add("blue_switch_owned");
    openapiFields.add("event_key");
    openapiFields.add("match_id");
    openapiFields.add("mode");
    openapiFields.add("play");
    openapiFields.add("red_auto_quest");
    openapiFields.add("red_boost_count");
    openapiFields.add("red_boost_played");
    openapiFields.add("red_current_powerup");
    openapiFields.add("red_face_the_boss");
    openapiFields.add("red_force_count");
    openapiFields.add("red_force_played");
    openapiFields.add("red_levitate_count");
    openapiFields.add("red_levitate_played");
    openapiFields.add("red_powerup_time_remaining");
    openapiFields.add("red_scale_owned");
    openapiFields.add("red_score");
    openapiFields.add("red_switch_owned");
    openapiFields.add("time_remaining");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MatchTimeseries2018
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MatchTimeseries2018.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MatchTimeseries2018 is not found in the empty JSON string", MatchTimeseries2018.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MatchTimeseries2018.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MatchTimeseries2018` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("blue_current_powerup") != null && !jsonObj.get("blue_current_powerup").isJsonNull()) && !jsonObj.get("blue_current_powerup").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `blue_current_powerup` to be a primitive type in the JSON string but got `%s`", jsonObj.get("blue_current_powerup").toString()));
      }
      if ((jsonObj.get("blue_powerup_time_remaining") != null && !jsonObj.get("blue_powerup_time_remaining").isJsonNull()) && !jsonObj.get("blue_powerup_time_remaining").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `blue_powerup_time_remaining` to be a primitive type in the JSON string but got `%s`", jsonObj.get("blue_powerup_time_remaining").toString()));
      }
      if ((jsonObj.get("event_key") != null && !jsonObj.get("event_key").isJsonNull()) && !jsonObj.get("event_key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `event_key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("event_key").toString()));
      }
      if ((jsonObj.get("match_id") != null && !jsonObj.get("match_id").isJsonNull()) && !jsonObj.get("match_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `match_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("match_id").toString()));
      }
      if ((jsonObj.get("mode") != null && !jsonObj.get("mode").isJsonNull()) && !jsonObj.get("mode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mode").toString()));
      }
      if ((jsonObj.get("red_current_powerup") != null && !jsonObj.get("red_current_powerup").isJsonNull()) && !jsonObj.get("red_current_powerup").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `red_current_powerup` to be a primitive type in the JSON string but got `%s`", jsonObj.get("red_current_powerup").toString()));
      }
      if ((jsonObj.get("red_powerup_time_remaining") != null && !jsonObj.get("red_powerup_time_remaining").isJsonNull()) && !jsonObj.get("red_powerup_time_remaining").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `red_powerup_time_remaining` to be a primitive type in the JSON string but got `%s`", jsonObj.get("red_powerup_time_remaining").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MatchTimeseries2018.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MatchTimeseries2018' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MatchTimeseries2018> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MatchTimeseries2018.class));

       return (TypeAdapter<T>) new TypeAdapter<MatchTimeseries2018>() {
           @Override
           public void write(JsonWriter out, MatchTimeseries2018 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MatchTimeseries2018 read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MatchTimeseries2018 given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MatchTimeseries2018
   * @throws IOException if the JSON string is invalid with respect to MatchTimeseries2018
   */
  public static MatchTimeseries2018 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MatchTimeseries2018.class);
  }

  /**
   * Convert an instance of MatchTimeseries2018 to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

