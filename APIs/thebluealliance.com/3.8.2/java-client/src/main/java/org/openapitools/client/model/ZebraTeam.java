/*
 * The Blue Alliance API v3
 * # Overview    Information and statistics about FIRST Robotics Competition teams and events.   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).
 *
 * The version of the OpenAPI document: 3.8.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ZebraTeam
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:56:47.661723-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ZebraTeam {
  public static final String SERIALIZED_NAME_TEAM_KEY = "team_key";
  @SerializedName(SERIALIZED_NAME_TEAM_KEY)
  private String teamKey;

  public static final String SERIALIZED_NAME_XS = "xs";
  @SerializedName(SERIALIZED_NAME_XS)
  private List<Double> xs = new ArrayList<>();

  public static final String SERIALIZED_NAME_YS = "ys";
  @SerializedName(SERIALIZED_NAME_YS)
  private List<Double> ys = new ArrayList<>();

  public ZebraTeam() {
  }

  public ZebraTeam teamKey(String teamKey) {
    this.teamKey = teamKey;
    return this;
  }

  /**
   * The TBA team key for the Zebra MotionWorks data.
   * @return teamKey
   */
  @javax.annotation.Nonnull
  public String getTeamKey() {
    return teamKey;
  }

  public void setTeamKey(String teamKey) {
    this.teamKey = teamKey;
  }


  public ZebraTeam xs(List<Double> xs) {
    this.xs = xs;
    return this;
  }

  public ZebraTeam addXsItem(Double xsItem) {
    if (this.xs == null) {
      this.xs = new ArrayList<>();
    }
    this.xs.add(xsItem);
    return this;
  }

  /**
   * A list containing doubles and nulls representing a teams X position in feet at the corresponding timestamp. A null value represents no tracking data for a given timestamp.
   * @return xs
   */
  @javax.annotation.Nonnull
  public List<Double> getXs() {
    return xs;
  }

  public void setXs(List<Double> xs) {
    this.xs = xs;
  }


  public ZebraTeam ys(List<Double> ys) {
    this.ys = ys;
    return this;
  }

  public ZebraTeam addYsItem(Double ysItem) {
    if (this.ys == null) {
      this.ys = new ArrayList<>();
    }
    this.ys.add(ysItem);
    return this;
  }

  /**
   * A list containing doubles and nulls representing a teams Y position in feet at the corresponding timestamp. A null value represents no tracking data for a given timestamp.
   * @return ys
   */
  @javax.annotation.Nonnull
  public List<Double> getYs() {
    return ys;
  }

  public void setYs(List<Double> ys) {
    this.ys = ys;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ZebraTeam zebraTeam = (ZebraTeam) o;
    return Objects.equals(this.teamKey, zebraTeam.teamKey) &&
        Objects.equals(this.xs, zebraTeam.xs) &&
        Objects.equals(this.ys, zebraTeam.ys);
  }

  @Override
  public int hashCode() {
    return Objects.hash(teamKey, xs, ys);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ZebraTeam {\n");
    sb.append("    teamKey: ").append(toIndentedString(teamKey)).append("\n");
    sb.append("    xs: ").append(toIndentedString(xs)).append("\n");
    sb.append("    ys: ").append(toIndentedString(ys)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("team_key");
    openapiFields.add("xs");
    openapiFields.add("ys");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("team_key");
    openapiRequiredFields.add("xs");
    openapiRequiredFields.add("ys");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ZebraTeam
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ZebraTeam.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ZebraTeam is not found in the empty JSON string", ZebraTeam.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ZebraTeam.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ZebraTeam` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ZebraTeam.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("team_key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `team_key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("team_key").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("xs") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("xs").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `xs` to be an array in the JSON string but got `%s`", jsonObj.get("xs").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("ys") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("ys").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `ys` to be an array in the JSON string but got `%s`", jsonObj.get("ys").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ZebraTeam.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ZebraTeam' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ZebraTeam> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ZebraTeam.class));

       return (TypeAdapter<T>) new TypeAdapter<ZebraTeam>() {
           @Override
           public void write(JsonWriter out, ZebraTeam value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ZebraTeam read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ZebraTeam given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ZebraTeam
   * @throws IOException if the JSON string is invalid with respect to ZebraTeam
   */
  public static ZebraTeam fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ZebraTeam.class);
  }

  /**
   * Convert an instance of ZebraTeam to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

