/*
 * The Blue Alliance API v3
 * # Overview    Information and statistics about FIRST Robotics Competition teams and events.   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).
 *
 * The version of the OpenAPI document: 3.8.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.WLTRecord;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * TeamEventStatusRankRanking
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:56:47.661723-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TeamEventStatusRankRanking {
  public static final String SERIALIZED_NAME_DQ = "dq";
  @SerializedName(SERIALIZED_NAME_DQ)
  private Integer dq;

  public static final String SERIALIZED_NAME_MATCHES_PLAYED = "matches_played";
  @SerializedName(SERIALIZED_NAME_MATCHES_PLAYED)
  private Integer matchesPlayed;

  public static final String SERIALIZED_NAME_QUAL_AVERAGE = "qual_average";
  @SerializedName(SERIALIZED_NAME_QUAL_AVERAGE)
  private Double qualAverage;

  public static final String SERIALIZED_NAME_RANK = "rank";
  @SerializedName(SERIALIZED_NAME_RANK)
  private Integer rank;

  public static final String SERIALIZED_NAME_RECORD = "record";
  @SerializedName(SERIALIZED_NAME_RECORD)
  private WLTRecord record;

  public static final String SERIALIZED_NAME_SORT_ORDERS = "sort_orders";
  @SerializedName(SERIALIZED_NAME_SORT_ORDERS)
  private List<BigDecimal> sortOrders = new ArrayList<>();

  public static final String SERIALIZED_NAME_TEAM_KEY = "team_key";
  @SerializedName(SERIALIZED_NAME_TEAM_KEY)
  private String teamKey;

  public TeamEventStatusRankRanking() {
  }

  public TeamEventStatusRankRanking dq(Integer dq) {
    this.dq = dq;
    return this;
  }

  /**
   * Number of matches the team was disqualified for.
   * @return dq
   */
  @javax.annotation.Nullable
  public Integer getDq() {
    return dq;
  }

  public void setDq(Integer dq) {
    this.dq = dq;
  }


  public TeamEventStatusRankRanking matchesPlayed(Integer matchesPlayed) {
    this.matchesPlayed = matchesPlayed;
    return this;
  }

  /**
   * Number of matches played.
   * @return matchesPlayed
   */
  @javax.annotation.Nullable
  public Integer getMatchesPlayed() {
    return matchesPlayed;
  }

  public void setMatchesPlayed(Integer matchesPlayed) {
    this.matchesPlayed = matchesPlayed;
  }


  public TeamEventStatusRankRanking qualAverage(Double qualAverage) {
    this.qualAverage = qualAverage;
    return this;
  }

  /**
   * For some years, average qualification score. Can be null.
   * @return qualAverage
   */
  @javax.annotation.Nullable
  public Double getQualAverage() {
    return qualAverage;
  }

  public void setQualAverage(Double qualAverage) {
    this.qualAverage = qualAverage;
  }


  public TeamEventStatusRankRanking rank(Integer rank) {
    this.rank = rank;
    return this;
  }

  /**
   * Relative rank of this team.
   * @return rank
   */
  @javax.annotation.Nullable
  public Integer getRank() {
    return rank;
  }

  public void setRank(Integer rank) {
    this.rank = rank;
  }


  public TeamEventStatusRankRanking record(WLTRecord record) {
    this.record = record;
    return this;
  }

  /**
   * Get record
   * @return record
   */
  @javax.annotation.Nullable
  public WLTRecord getRecord() {
    return record;
  }

  public void setRecord(WLTRecord record) {
    this.record = record;
  }


  public TeamEventStatusRankRanking sortOrders(List<BigDecimal> sortOrders) {
    this.sortOrders = sortOrders;
    return this;
  }

  public TeamEventStatusRankRanking addSortOrdersItem(BigDecimal sortOrdersItem) {
    if (this.sortOrders == null) {
      this.sortOrders = new ArrayList<>();
    }
    this.sortOrders.add(sortOrdersItem);
    return this;
  }

  /**
   * Ordered list of values used to determine the rank. See the &#x60;sort_order_info&#x60; property for the name of each value.
   * @return sortOrders
   */
  @javax.annotation.Nullable
  public List<BigDecimal> getSortOrders() {
    return sortOrders;
  }

  public void setSortOrders(List<BigDecimal> sortOrders) {
    this.sortOrders = sortOrders;
  }


  public TeamEventStatusRankRanking teamKey(String teamKey) {
    this.teamKey = teamKey;
    return this;
  }

  /**
   * TBA team key for this rank.
   * @return teamKey
   */
  @javax.annotation.Nullable
  public String getTeamKey() {
    return teamKey;
  }

  public void setTeamKey(String teamKey) {
    this.teamKey = teamKey;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TeamEventStatusRankRanking teamEventStatusRankRanking = (TeamEventStatusRankRanking) o;
    return Objects.equals(this.dq, teamEventStatusRankRanking.dq) &&
        Objects.equals(this.matchesPlayed, teamEventStatusRankRanking.matchesPlayed) &&
        Objects.equals(this.qualAverage, teamEventStatusRankRanking.qualAverage) &&
        Objects.equals(this.rank, teamEventStatusRankRanking.rank) &&
        Objects.equals(this.record, teamEventStatusRankRanking.record) &&
        Objects.equals(this.sortOrders, teamEventStatusRankRanking.sortOrders) &&
        Objects.equals(this.teamKey, teamEventStatusRankRanking.teamKey);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dq, matchesPlayed, qualAverage, rank, record, sortOrders, teamKey);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TeamEventStatusRankRanking {\n");
    sb.append("    dq: ").append(toIndentedString(dq)).append("\n");
    sb.append("    matchesPlayed: ").append(toIndentedString(matchesPlayed)).append("\n");
    sb.append("    qualAverage: ").append(toIndentedString(qualAverage)).append("\n");
    sb.append("    rank: ").append(toIndentedString(rank)).append("\n");
    sb.append("    record: ").append(toIndentedString(record)).append("\n");
    sb.append("    sortOrders: ").append(toIndentedString(sortOrders)).append("\n");
    sb.append("    teamKey: ").append(toIndentedString(teamKey)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dq");
    openapiFields.add("matches_played");
    openapiFields.add("qual_average");
    openapiFields.add("rank");
    openapiFields.add("record");
    openapiFields.add("sort_orders");
    openapiFields.add("team_key");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TeamEventStatusRankRanking
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TeamEventStatusRankRanking.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TeamEventStatusRankRanking is not found in the empty JSON string", TeamEventStatusRankRanking.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TeamEventStatusRankRanking.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TeamEventStatusRankRanking` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `record`
      if (jsonObj.get("record") != null && !jsonObj.get("record").isJsonNull()) {
        WLTRecord.validateJsonElement(jsonObj.get("record"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("sort_orders") != null && !jsonObj.get("sort_orders").isJsonNull() && !jsonObj.get("sort_orders").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `sort_orders` to be an array in the JSON string but got `%s`", jsonObj.get("sort_orders").toString()));
      }
      if ((jsonObj.get("team_key") != null && !jsonObj.get("team_key").isJsonNull()) && !jsonObj.get("team_key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `team_key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("team_key").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TeamEventStatusRankRanking.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TeamEventStatusRankRanking' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TeamEventStatusRankRanking> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TeamEventStatusRankRanking.class));

       return (TypeAdapter<T>) new TypeAdapter<TeamEventStatusRankRanking>() {
           @Override
           public void write(JsonWriter out, TeamEventStatusRankRanking value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TeamEventStatusRankRanking read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TeamEventStatusRankRanking given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TeamEventStatusRankRanking
   * @throws IOException if the JSON string is invalid with respect to TeamEventStatusRankRanking
   */
  public static TeamEventStatusRankRanking fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TeamEventStatusRankRanking.class);
  }

  /**
   * Convert an instance of TeamEventStatusRankRanking to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

