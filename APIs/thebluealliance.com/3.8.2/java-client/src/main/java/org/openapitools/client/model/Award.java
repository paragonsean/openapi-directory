/*
 * The Blue Alliance API v3
 * # Overview    Information and statistics about FIRST Robotics Competition teams and events.   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).
 *
 * The version of the OpenAPI document: 3.8.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AwardRecipient;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Award
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:56:47.661723-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Award {
  public static final String SERIALIZED_NAME_AWARD_TYPE = "award_type";
  @SerializedName(SERIALIZED_NAME_AWARD_TYPE)
  private Integer awardType;

  public static final String SERIALIZED_NAME_EVENT_KEY = "event_key";
  @SerializedName(SERIALIZED_NAME_EVENT_KEY)
  private String eventKey;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_RECIPIENT_LIST = "recipient_list";
  @SerializedName(SERIALIZED_NAME_RECIPIENT_LIST)
  private List<AwardRecipient> recipientList = new ArrayList<>();

  public static final String SERIALIZED_NAME_YEAR = "year";
  @SerializedName(SERIALIZED_NAME_YEAR)
  private Integer year;

  public Award() {
  }

  public Award awardType(Integer awardType) {
    this.awardType = awardType;
    return this;
  }

  /**
   * Type of award given. See https://github.com/the-blue-alliance/the-blue-alliance/blob/master/consts/award_type.py#L6
   * @return awardType
   */
  @javax.annotation.Nonnull
  public Integer getAwardType() {
    return awardType;
  }

  public void setAwardType(Integer awardType) {
    this.awardType = awardType;
  }


  public Award eventKey(String eventKey) {
    this.eventKey = eventKey;
    return this;
  }

  /**
   * The event_key of the event the award was won at.
   * @return eventKey
   */
  @javax.annotation.Nonnull
  public String getEventKey() {
    return eventKey;
  }

  public void setEventKey(String eventKey) {
    this.eventKey = eventKey;
  }


  public Award name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the award as provided by FIRST. May vary for the same award type.
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Award recipientList(List<AwardRecipient> recipientList) {
    this.recipientList = recipientList;
    return this;
  }

  public Award addRecipientListItem(AwardRecipient recipientListItem) {
    if (this.recipientList == null) {
      this.recipientList = new ArrayList<>();
    }
    this.recipientList.add(recipientListItem);
    return this;
  }

  /**
   * A list of recipients of the award at the event. May have either a team_key or an awardee, both, or neither (in the case the award wasn&#39;t awarded at the event).
   * @return recipientList
   */
  @javax.annotation.Nonnull
  public List<AwardRecipient> getRecipientList() {
    return recipientList;
  }

  public void setRecipientList(List<AwardRecipient> recipientList) {
    this.recipientList = recipientList;
  }


  public Award year(Integer year) {
    this.year = year;
    return this;
  }

  /**
   * The year this award was won.
   * @return year
   */
  @javax.annotation.Nonnull
  public Integer getYear() {
    return year;
  }

  public void setYear(Integer year) {
    this.year = year;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Award award = (Award) o;
    return Objects.equals(this.awardType, award.awardType) &&
        Objects.equals(this.eventKey, award.eventKey) &&
        Objects.equals(this.name, award.name) &&
        Objects.equals(this.recipientList, award.recipientList) &&
        Objects.equals(this.year, award.year);
  }

  @Override
  public int hashCode() {
    return Objects.hash(awardType, eventKey, name, recipientList, year);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Award {\n");
    sb.append("    awardType: ").append(toIndentedString(awardType)).append("\n");
    sb.append("    eventKey: ").append(toIndentedString(eventKey)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    recipientList: ").append(toIndentedString(recipientList)).append("\n");
    sb.append("    year: ").append(toIndentedString(year)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("award_type");
    openapiFields.add("event_key");
    openapiFields.add("name");
    openapiFields.add("recipient_list");
    openapiFields.add("year");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("award_type");
    openapiRequiredFields.add("event_key");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("recipient_list");
    openapiRequiredFields.add("year");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Award
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Award.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Award is not found in the empty JSON string", Award.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Award.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Award` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Award.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("event_key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `event_key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("event_key").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("recipient_list").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `recipient_list` to be an array in the JSON string but got `%s`", jsonObj.get("recipient_list").toString()));
      }

      JsonArray jsonArrayrecipientList = jsonObj.getAsJsonArray("recipient_list");
      // validate the required field `recipient_list` (array)
      for (int i = 0; i < jsonArrayrecipientList.size(); i++) {
        AwardRecipient.validateJsonElement(jsonArrayrecipientList.get(i));
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Award.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Award' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Award> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Award.class));

       return (TypeAdapter<T>) new TypeAdapter<Award>() {
           @Override
           public void write(JsonWriter out, Award value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Award read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Award given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Award
   * @throws IOException if the JSON string is invalid with respect to Award
   */
  public static Award fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Award.class);
  }

  /**
   * Convert an instance of Award to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

