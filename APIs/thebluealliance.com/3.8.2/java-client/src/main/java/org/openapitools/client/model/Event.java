/*
 * The Blue Alliance API v3
 * # Overview    Information and statistics about FIRST Robotics Competition teams and events.   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).
 *
 * The version of the OpenAPI document: 3.8.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DistrictList;
import org.openapitools.client.model.Webcast;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Event
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:56:47.661723-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Event {
  public static final String SERIALIZED_NAME_ADDRESS = "address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  private String address;

  public static final String SERIALIZED_NAME_CITY = "city";
  @SerializedName(SERIALIZED_NAME_CITY)
  private String city;

  public static final String SERIALIZED_NAME_COUNTRY = "country";
  @SerializedName(SERIALIZED_NAME_COUNTRY)
  private String country;

  public static final String SERIALIZED_NAME_DISTRICT = "district";
  @SerializedName(SERIALIZED_NAME_DISTRICT)
  private DistrictList district;

  public static final String SERIALIZED_NAME_DIVISION_KEYS = "division_keys";
  @SerializedName(SERIALIZED_NAME_DIVISION_KEYS)
  private List<String> divisionKeys = new ArrayList<>();

  public static final String SERIALIZED_NAME_END_DATE = "end_date";
  @SerializedName(SERIALIZED_NAME_END_DATE)
  private LocalDate endDate;

  public static final String SERIALIZED_NAME_EVENT_CODE = "event_code";
  @SerializedName(SERIALIZED_NAME_EVENT_CODE)
  private String eventCode;

  public static final String SERIALIZED_NAME_EVENT_TYPE = "event_type";
  @SerializedName(SERIALIZED_NAME_EVENT_TYPE)
  private Integer eventType;

  public static final String SERIALIZED_NAME_EVENT_TYPE_STRING = "event_type_string";
  @SerializedName(SERIALIZED_NAME_EVENT_TYPE_STRING)
  private String eventTypeString;

  public static final String SERIALIZED_NAME_FIRST_EVENT_CODE = "first_event_code";
  @SerializedName(SERIALIZED_NAME_FIRST_EVENT_CODE)
  private String firstEventCode;

  public static final String SERIALIZED_NAME_FIRST_EVENT_ID = "first_event_id";
  @SerializedName(SERIALIZED_NAME_FIRST_EVENT_ID)
  private String firstEventId;

  public static final String SERIALIZED_NAME_GMAPS_PLACE_ID = "gmaps_place_id";
  @SerializedName(SERIALIZED_NAME_GMAPS_PLACE_ID)
  private String gmapsPlaceId;

  public static final String SERIALIZED_NAME_GMAPS_URL = "gmaps_url";
  @SerializedName(SERIALIZED_NAME_GMAPS_URL)
  private String gmapsUrl;

  public static final String SERIALIZED_NAME_KEY = "key";
  @SerializedName(SERIALIZED_NAME_KEY)
  private String key;

  public static final String SERIALIZED_NAME_LAT = "lat";
  @SerializedName(SERIALIZED_NAME_LAT)
  private Double lat;

  public static final String SERIALIZED_NAME_LNG = "lng";
  @SerializedName(SERIALIZED_NAME_LNG)
  private Double lng;

  public static final String SERIALIZED_NAME_LOCATION_NAME = "location_name";
  @SerializedName(SERIALIZED_NAME_LOCATION_NAME)
  private String locationName;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PARENT_EVENT_KEY = "parent_event_key";
  @SerializedName(SERIALIZED_NAME_PARENT_EVENT_KEY)
  private String parentEventKey;

  public static final String SERIALIZED_NAME_PLAYOFF_TYPE = "playoff_type";
  @SerializedName(SERIALIZED_NAME_PLAYOFF_TYPE)
  private Integer playoffType;

  public static final String SERIALIZED_NAME_PLAYOFF_TYPE_STRING = "playoff_type_string";
  @SerializedName(SERIALIZED_NAME_PLAYOFF_TYPE_STRING)
  private String playoffTypeString;

  public static final String SERIALIZED_NAME_POSTAL_CODE = "postal_code";
  @SerializedName(SERIALIZED_NAME_POSTAL_CODE)
  private String postalCode;

  public static final String SERIALIZED_NAME_SHORT_NAME = "short_name";
  @SerializedName(SERIALIZED_NAME_SHORT_NAME)
  private String shortName;

  public static final String SERIALIZED_NAME_START_DATE = "start_date";
  @SerializedName(SERIALIZED_NAME_START_DATE)
  private LocalDate startDate;

  public static final String SERIALIZED_NAME_STATE_PROV = "state_prov";
  @SerializedName(SERIALIZED_NAME_STATE_PROV)
  private String stateProv;

  public static final String SERIALIZED_NAME_TIMEZONE = "timezone";
  @SerializedName(SERIALIZED_NAME_TIMEZONE)
  private String timezone;

  public static final String SERIALIZED_NAME_WEBCASTS = "webcasts";
  @SerializedName(SERIALIZED_NAME_WEBCASTS)
  private List<Webcast> webcasts = new ArrayList<>();

  public static final String SERIALIZED_NAME_WEBSITE = "website";
  @SerializedName(SERIALIZED_NAME_WEBSITE)
  private String website;

  public static final String SERIALIZED_NAME_WEEK = "week";
  @SerializedName(SERIALIZED_NAME_WEEK)
  private Integer week;

  public static final String SERIALIZED_NAME_YEAR = "year";
  @SerializedName(SERIALIZED_NAME_YEAR)
  private Integer year;

  public Event() {
  }

  public Event address(String address) {
    this.address = address;
    return this;
  }

  /**
   * Address of the event&#39;s venue, if available.
   * @return address
   */
  @javax.annotation.Nullable
  public String getAddress() {
    return address;
  }

  public void setAddress(String address) {
    this.address = address;
  }


  public Event city(String city) {
    this.city = city;
    return this;
  }

  /**
   * City, town, village, etc. the event is located in.
   * @return city
   */
  @javax.annotation.Nullable
  public String getCity() {
    return city;
  }

  public void setCity(String city) {
    this.city = city;
  }


  public Event country(String country) {
    this.country = country;
    return this;
  }

  /**
   * Country the event is located in.
   * @return country
   */
  @javax.annotation.Nullable
  public String getCountry() {
    return country;
  }

  public void setCountry(String country) {
    this.country = country;
  }


  public Event district(DistrictList district) {
    this.district = district;
    return this;
  }

  /**
   * Get district
   * @return district
   */
  @javax.annotation.Nullable
  public DistrictList getDistrict() {
    return district;
  }

  public void setDistrict(DistrictList district) {
    this.district = district;
  }


  public Event divisionKeys(List<String> divisionKeys) {
    this.divisionKeys = divisionKeys;
    return this;
  }

  public Event addDivisionKeysItem(String divisionKeysItem) {
    if (this.divisionKeys == null) {
      this.divisionKeys = new ArrayList<>();
    }
    this.divisionKeys.add(divisionKeysItem);
    return this;
  }

  /**
   * An array of event keys for the divisions at this event.
   * @return divisionKeys
   */
  @javax.annotation.Nullable
  public List<String> getDivisionKeys() {
    return divisionKeys;
  }

  public void setDivisionKeys(List<String> divisionKeys) {
    this.divisionKeys = divisionKeys;
  }


  public Event endDate(LocalDate endDate) {
    this.endDate = endDate;
    return this;
  }

  /**
   * Event end date in &#x60;yyyy-mm-dd&#x60; format.
   * @return endDate
   */
  @javax.annotation.Nonnull
  public LocalDate getEndDate() {
    return endDate;
  }

  public void setEndDate(LocalDate endDate) {
    this.endDate = endDate;
  }


  public Event eventCode(String eventCode) {
    this.eventCode = eventCode;
    return this;
  }

  /**
   * Event short code, as provided by FIRST.
   * @return eventCode
   */
  @javax.annotation.Nonnull
  public String getEventCode() {
    return eventCode;
  }

  public void setEventCode(String eventCode) {
    this.eventCode = eventCode;
  }


  public Event eventType(Integer eventType) {
    this.eventType = eventType;
    return this;
  }

  /**
   * Event Type, as defined here: https://github.com/the-blue-alliance/the-blue-alliance/blob/master/consts/event_type.py#L2
   * @return eventType
   */
  @javax.annotation.Nonnull
  public Integer getEventType() {
    return eventType;
  }

  public void setEventType(Integer eventType) {
    this.eventType = eventType;
  }


  public Event eventTypeString(String eventTypeString) {
    this.eventTypeString = eventTypeString;
    return this;
  }

  /**
   * Event Type, eg Regional, District, or Offseason.
   * @return eventTypeString
   */
  @javax.annotation.Nonnull
  public String getEventTypeString() {
    return eventTypeString;
  }

  public void setEventTypeString(String eventTypeString) {
    this.eventTypeString = eventTypeString;
  }


  public Event firstEventCode(String firstEventCode) {
    this.firstEventCode = firstEventCode;
    return this;
  }

  /**
   * Public facing event code used by FIRST (on frc-events.firstinspires.org, for example)
   * @return firstEventCode
   */
  @javax.annotation.Nullable
  public String getFirstEventCode() {
    return firstEventCode;
  }

  public void setFirstEventCode(String firstEventCode) {
    this.firstEventCode = firstEventCode;
  }


  public Event firstEventId(String firstEventId) {
    this.firstEventId = firstEventId;
    return this;
  }

  /**
   * The FIRST internal Event ID, used to link to the event on the FRC webpage.
   * @return firstEventId
   */
  @javax.annotation.Nullable
  public String getFirstEventId() {
    return firstEventId;
  }

  public void setFirstEventId(String firstEventId) {
    this.firstEventId = firstEventId;
  }


  public Event gmapsPlaceId(String gmapsPlaceId) {
    this.gmapsPlaceId = gmapsPlaceId;
    return this;
  }

  /**
   * Google Maps Place ID for the event address.
   * @return gmapsPlaceId
   */
  @javax.annotation.Nullable
  public String getGmapsPlaceId() {
    return gmapsPlaceId;
  }

  public void setGmapsPlaceId(String gmapsPlaceId) {
    this.gmapsPlaceId = gmapsPlaceId;
  }


  public Event gmapsUrl(String gmapsUrl) {
    this.gmapsUrl = gmapsUrl;
    return this;
  }

  /**
   * Link to address location on Google Maps.
   * @return gmapsUrl
   */
  @javax.annotation.Nullable
  public String getGmapsUrl() {
    return gmapsUrl;
  }

  public void setGmapsUrl(String gmapsUrl) {
    this.gmapsUrl = gmapsUrl;
  }


  public Event key(String key) {
    this.key = key;
    return this;
  }

  /**
   * TBA event key with the format yyyy[EVENT_CODE], where yyyy is the year, and EVENT_CODE is the event code of the event.
   * @return key
   */
  @javax.annotation.Nonnull
  public String getKey() {
    return key;
  }

  public void setKey(String key) {
    this.key = key;
  }


  public Event lat(Double lat) {
    this.lat = lat;
    return this;
  }

  /**
   * Latitude for the event address.
   * @return lat
   */
  @javax.annotation.Nullable
  public Double getLat() {
    return lat;
  }

  public void setLat(Double lat) {
    this.lat = lat;
  }


  public Event lng(Double lng) {
    this.lng = lng;
    return this;
  }

  /**
   * Longitude for the event address.
   * @return lng
   */
  @javax.annotation.Nullable
  public Double getLng() {
    return lng;
  }

  public void setLng(Double lng) {
    this.lng = lng;
  }


  public Event locationName(String locationName) {
    this.locationName = locationName;
    return this;
  }

  /**
   * Name of the location at the address for the event, eg. Blue Alliance High School.
   * @return locationName
   */
  @javax.annotation.Nullable
  public String getLocationName() {
    return locationName;
  }

  public void setLocationName(String locationName) {
    this.locationName = locationName;
  }


  public Event name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Official name of event on record either provided by FIRST or organizers of offseason event.
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Event parentEventKey(String parentEventKey) {
    this.parentEventKey = parentEventKey;
    return this;
  }

  /**
   * The TBA Event key that represents the event&#39;s parent. Used to link back to the event from a division event. It is also the inverse relation of &#x60;divison_keys&#x60;.
   * @return parentEventKey
   */
  @javax.annotation.Nullable
  public String getParentEventKey() {
    return parentEventKey;
  }

  public void setParentEventKey(String parentEventKey) {
    this.parentEventKey = parentEventKey;
  }


  public Event playoffType(Integer playoffType) {
    this.playoffType = playoffType;
    return this;
  }

  /**
   * Playoff Type, as defined here: https://github.com/the-blue-alliance/the-blue-alliance/blob/master/consts/playoff_type.py#L4, or null.
   * @return playoffType
   */
  @javax.annotation.Nullable
  public Integer getPlayoffType() {
    return playoffType;
  }

  public void setPlayoffType(Integer playoffType) {
    this.playoffType = playoffType;
  }


  public Event playoffTypeString(String playoffTypeString) {
    this.playoffTypeString = playoffTypeString;
    return this;
  }

  /**
   * String representation of the &#x60;playoff_type&#x60;, or null.
   * @return playoffTypeString
   */
  @javax.annotation.Nullable
  public String getPlayoffTypeString() {
    return playoffTypeString;
  }

  public void setPlayoffTypeString(String playoffTypeString) {
    this.playoffTypeString = playoffTypeString;
  }


  public Event postalCode(String postalCode) {
    this.postalCode = postalCode;
    return this;
  }

  /**
   * Postal code from the event address.
   * @return postalCode
   */
  @javax.annotation.Nullable
  public String getPostalCode() {
    return postalCode;
  }

  public void setPostalCode(String postalCode) {
    this.postalCode = postalCode;
  }


  public Event shortName(String shortName) {
    this.shortName = shortName;
    return this;
  }

  /**
   * Same as &#x60;name&#x60; but doesn&#39;t include event specifiers, such as &#39;Regional&#39; or &#39;District&#39;. May be null.
   * @return shortName
   */
  @javax.annotation.Nullable
  public String getShortName() {
    return shortName;
  }

  public void setShortName(String shortName) {
    this.shortName = shortName;
  }


  public Event startDate(LocalDate startDate) {
    this.startDate = startDate;
    return this;
  }

  /**
   * Event start date in &#x60;yyyy-mm-dd&#x60; format.
   * @return startDate
   */
  @javax.annotation.Nonnull
  public LocalDate getStartDate() {
    return startDate;
  }

  public void setStartDate(LocalDate startDate) {
    this.startDate = startDate;
  }


  public Event stateProv(String stateProv) {
    this.stateProv = stateProv;
    return this;
  }

  /**
   * State or Province the event is located in.
   * @return stateProv
   */
  @javax.annotation.Nullable
  public String getStateProv() {
    return stateProv;
  }

  public void setStateProv(String stateProv) {
    this.stateProv = stateProv;
  }


  public Event timezone(String timezone) {
    this.timezone = timezone;
    return this;
  }

  /**
   * Timezone name.
   * @return timezone
   */
  @javax.annotation.Nullable
  public String getTimezone() {
    return timezone;
  }

  public void setTimezone(String timezone) {
    this.timezone = timezone;
  }


  public Event webcasts(List<Webcast> webcasts) {
    this.webcasts = webcasts;
    return this;
  }

  public Event addWebcastsItem(Webcast webcastsItem) {
    if (this.webcasts == null) {
      this.webcasts = new ArrayList<>();
    }
    this.webcasts.add(webcastsItem);
    return this;
  }

  /**
   * Get webcasts
   * @return webcasts
   */
  @javax.annotation.Nullable
  public List<Webcast> getWebcasts() {
    return webcasts;
  }

  public void setWebcasts(List<Webcast> webcasts) {
    this.webcasts = webcasts;
  }


  public Event website(String website) {
    this.website = website;
    return this;
  }

  /**
   * The event&#39;s website, if any.
   * @return website
   */
  @javax.annotation.Nullable
  public String getWebsite() {
    return website;
  }

  public void setWebsite(String website) {
    this.website = website;
  }


  public Event week(Integer week) {
    this.week = week;
    return this;
  }

  /**
   * Week of the event relative to the first official season event, zero-indexed. Only valid for Regionals, Districts, and District Championships. Null otherwise. (Eg. A season with a week 0 &#39;preseason&#39; event does not count, and week 1 events will show 0 here. Seasons with a week 0.5 regional event will show week 0 for those event(s) and week 1 for week 1 events and so on.)
   * @return week
   */
  @javax.annotation.Nullable
  public Integer getWeek() {
    return week;
  }

  public void setWeek(Integer week) {
    this.week = week;
  }


  public Event year(Integer year) {
    this.year = year;
    return this;
  }

  /**
   * Year the event data is for.
   * @return year
   */
  @javax.annotation.Nonnull
  public Integer getYear() {
    return year;
  }

  public void setYear(Integer year) {
    this.year = year;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Event event = (Event) o;
    return Objects.equals(this.address, event.address) &&
        Objects.equals(this.city, event.city) &&
        Objects.equals(this.country, event.country) &&
        Objects.equals(this.district, event.district) &&
        Objects.equals(this.divisionKeys, event.divisionKeys) &&
        Objects.equals(this.endDate, event.endDate) &&
        Objects.equals(this.eventCode, event.eventCode) &&
        Objects.equals(this.eventType, event.eventType) &&
        Objects.equals(this.eventTypeString, event.eventTypeString) &&
        Objects.equals(this.firstEventCode, event.firstEventCode) &&
        Objects.equals(this.firstEventId, event.firstEventId) &&
        Objects.equals(this.gmapsPlaceId, event.gmapsPlaceId) &&
        Objects.equals(this.gmapsUrl, event.gmapsUrl) &&
        Objects.equals(this.key, event.key) &&
        Objects.equals(this.lat, event.lat) &&
        Objects.equals(this.lng, event.lng) &&
        Objects.equals(this.locationName, event.locationName) &&
        Objects.equals(this.name, event.name) &&
        Objects.equals(this.parentEventKey, event.parentEventKey) &&
        Objects.equals(this.playoffType, event.playoffType) &&
        Objects.equals(this.playoffTypeString, event.playoffTypeString) &&
        Objects.equals(this.postalCode, event.postalCode) &&
        Objects.equals(this.shortName, event.shortName) &&
        Objects.equals(this.startDate, event.startDate) &&
        Objects.equals(this.stateProv, event.stateProv) &&
        Objects.equals(this.timezone, event.timezone) &&
        Objects.equals(this.webcasts, event.webcasts) &&
        Objects.equals(this.website, event.website) &&
        Objects.equals(this.week, event.week) &&
        Objects.equals(this.year, event.year);
  }

  @Override
  public int hashCode() {
    return Objects.hash(address, city, country, district, divisionKeys, endDate, eventCode, eventType, eventTypeString, firstEventCode, firstEventId, gmapsPlaceId, gmapsUrl, key, lat, lng, locationName, name, parentEventKey, playoffType, playoffTypeString, postalCode, shortName, startDate, stateProv, timezone, webcasts, website, week, year);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Event {\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    city: ").append(toIndentedString(city)).append("\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    district: ").append(toIndentedString(district)).append("\n");
    sb.append("    divisionKeys: ").append(toIndentedString(divisionKeys)).append("\n");
    sb.append("    endDate: ").append(toIndentedString(endDate)).append("\n");
    sb.append("    eventCode: ").append(toIndentedString(eventCode)).append("\n");
    sb.append("    eventType: ").append(toIndentedString(eventType)).append("\n");
    sb.append("    eventTypeString: ").append(toIndentedString(eventTypeString)).append("\n");
    sb.append("    firstEventCode: ").append(toIndentedString(firstEventCode)).append("\n");
    sb.append("    firstEventId: ").append(toIndentedString(firstEventId)).append("\n");
    sb.append("    gmapsPlaceId: ").append(toIndentedString(gmapsPlaceId)).append("\n");
    sb.append("    gmapsUrl: ").append(toIndentedString(gmapsUrl)).append("\n");
    sb.append("    key: ").append(toIndentedString(key)).append("\n");
    sb.append("    lat: ").append(toIndentedString(lat)).append("\n");
    sb.append("    lng: ").append(toIndentedString(lng)).append("\n");
    sb.append("    locationName: ").append(toIndentedString(locationName)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    parentEventKey: ").append(toIndentedString(parentEventKey)).append("\n");
    sb.append("    playoffType: ").append(toIndentedString(playoffType)).append("\n");
    sb.append("    playoffTypeString: ").append(toIndentedString(playoffTypeString)).append("\n");
    sb.append("    postalCode: ").append(toIndentedString(postalCode)).append("\n");
    sb.append("    shortName: ").append(toIndentedString(shortName)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("    stateProv: ").append(toIndentedString(stateProv)).append("\n");
    sb.append("    timezone: ").append(toIndentedString(timezone)).append("\n");
    sb.append("    webcasts: ").append(toIndentedString(webcasts)).append("\n");
    sb.append("    website: ").append(toIndentedString(website)).append("\n");
    sb.append("    week: ").append(toIndentedString(week)).append("\n");
    sb.append("    year: ").append(toIndentedString(year)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("address");
    openapiFields.add("city");
    openapiFields.add("country");
    openapiFields.add("district");
    openapiFields.add("division_keys");
    openapiFields.add("end_date");
    openapiFields.add("event_code");
    openapiFields.add("event_type");
    openapiFields.add("event_type_string");
    openapiFields.add("first_event_code");
    openapiFields.add("first_event_id");
    openapiFields.add("gmaps_place_id");
    openapiFields.add("gmaps_url");
    openapiFields.add("key");
    openapiFields.add("lat");
    openapiFields.add("lng");
    openapiFields.add("location_name");
    openapiFields.add("name");
    openapiFields.add("parent_event_key");
    openapiFields.add("playoff_type");
    openapiFields.add("playoff_type_string");
    openapiFields.add("postal_code");
    openapiFields.add("short_name");
    openapiFields.add("start_date");
    openapiFields.add("state_prov");
    openapiFields.add("timezone");
    openapiFields.add("webcasts");
    openapiFields.add("website");
    openapiFields.add("week");
    openapiFields.add("year");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("end_date");
    openapiRequiredFields.add("event_code");
    openapiRequiredFields.add("event_type");
    openapiRequiredFields.add("event_type_string");
    openapiRequiredFields.add("key");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("start_date");
    openapiRequiredFields.add("year");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Event
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Event.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Event is not found in the empty JSON string", Event.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Event.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Event` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Event.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("address") != null && !jsonObj.get("address").isJsonNull()) && !jsonObj.get("address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("address").toString()));
      }
      if ((jsonObj.get("city") != null && !jsonObj.get("city").isJsonNull()) && !jsonObj.get("city").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `city` to be a primitive type in the JSON string but got `%s`", jsonObj.get("city").toString()));
      }
      if ((jsonObj.get("country") != null && !jsonObj.get("country").isJsonNull()) && !jsonObj.get("country").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `country` to be a primitive type in the JSON string but got `%s`", jsonObj.get("country").toString()));
      }
      // validate the optional field `district`
      if (jsonObj.get("district") != null && !jsonObj.get("district").isJsonNull()) {
        DistrictList.validateJsonElement(jsonObj.get("district"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("division_keys") != null && !jsonObj.get("division_keys").isJsonNull() && !jsonObj.get("division_keys").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `division_keys` to be an array in the JSON string but got `%s`", jsonObj.get("division_keys").toString()));
      }
      if (!jsonObj.get("event_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `event_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("event_code").toString()));
      }
      if (!jsonObj.get("event_type_string").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `event_type_string` to be a primitive type in the JSON string but got `%s`", jsonObj.get("event_type_string").toString()));
      }
      if ((jsonObj.get("first_event_code") != null && !jsonObj.get("first_event_code").isJsonNull()) && !jsonObj.get("first_event_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `first_event_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("first_event_code").toString()));
      }
      if ((jsonObj.get("first_event_id") != null && !jsonObj.get("first_event_id").isJsonNull()) && !jsonObj.get("first_event_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `first_event_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("first_event_id").toString()));
      }
      if ((jsonObj.get("gmaps_place_id") != null && !jsonObj.get("gmaps_place_id").isJsonNull()) && !jsonObj.get("gmaps_place_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gmaps_place_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gmaps_place_id").toString()));
      }
      if ((jsonObj.get("gmaps_url") != null && !jsonObj.get("gmaps_url").isJsonNull()) && !jsonObj.get("gmaps_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gmaps_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gmaps_url").toString()));
      }
      if (!jsonObj.get("key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("key").toString()));
      }
      if ((jsonObj.get("location_name") != null && !jsonObj.get("location_name").isJsonNull()) && !jsonObj.get("location_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `location_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("location_name").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("parent_event_key") != null && !jsonObj.get("parent_event_key").isJsonNull()) && !jsonObj.get("parent_event_key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `parent_event_key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("parent_event_key").toString()));
      }
      if ((jsonObj.get("playoff_type_string") != null && !jsonObj.get("playoff_type_string").isJsonNull()) && !jsonObj.get("playoff_type_string").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `playoff_type_string` to be a primitive type in the JSON string but got `%s`", jsonObj.get("playoff_type_string").toString()));
      }
      if ((jsonObj.get("postal_code") != null && !jsonObj.get("postal_code").isJsonNull()) && !jsonObj.get("postal_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `postal_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("postal_code").toString()));
      }
      if ((jsonObj.get("short_name") != null && !jsonObj.get("short_name").isJsonNull()) && !jsonObj.get("short_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `short_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("short_name").toString()));
      }
      if ((jsonObj.get("state_prov") != null && !jsonObj.get("state_prov").isJsonNull()) && !jsonObj.get("state_prov").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state_prov` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state_prov").toString()));
      }
      if ((jsonObj.get("timezone") != null && !jsonObj.get("timezone").isJsonNull()) && !jsonObj.get("timezone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timezone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timezone").toString()));
      }
      if (jsonObj.get("webcasts") != null && !jsonObj.get("webcasts").isJsonNull()) {
        JsonArray jsonArraywebcasts = jsonObj.getAsJsonArray("webcasts");
        if (jsonArraywebcasts != null) {
          // ensure the json data is an array
          if (!jsonObj.get("webcasts").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `webcasts` to be an array in the JSON string but got `%s`", jsonObj.get("webcasts").toString()));
          }

          // validate the optional field `webcasts` (array)
          for (int i = 0; i < jsonArraywebcasts.size(); i++) {
            Webcast.validateJsonElement(jsonArraywebcasts.get(i));
          };
        }
      }
      if ((jsonObj.get("website") != null && !jsonObj.get("website").isJsonNull()) && !jsonObj.get("website").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `website` to be a primitive type in the JSON string but got `%s`", jsonObj.get("website").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Event.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Event' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Event> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Event.class));

       return (TypeAdapter<T>) new TypeAdapter<Event>() {
           @Override
           public void write(JsonWriter out, Event value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Event read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Event given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Event
   * @throws IOException if the JSON string is invalid with respect to Event
   */
  public static Event fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Event.class);
  }

  /**
   * Convert an instance of Event to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

