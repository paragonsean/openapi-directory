/*
 * The Blue Alliance API v3
 * # Overview    Information and statistics about FIRST Robotics Competition teams and events.   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).
 *
 * The version of the OpenAPI document: 3.8.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Team
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:56:47.661723-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Team {
  public static final String SERIALIZED_NAME_ADDRESS = "address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  private String address;

  public static final String SERIALIZED_NAME_CITY = "city";
  @SerializedName(SERIALIZED_NAME_CITY)
  private String city;

  public static final String SERIALIZED_NAME_COUNTRY = "country";
  @SerializedName(SERIALIZED_NAME_COUNTRY)
  private String country;

  public static final String SERIALIZED_NAME_GMAPS_PLACE_ID = "gmaps_place_id";
  @SerializedName(SERIALIZED_NAME_GMAPS_PLACE_ID)
  private String gmapsPlaceId;

  public static final String SERIALIZED_NAME_GMAPS_URL = "gmaps_url";
  @SerializedName(SERIALIZED_NAME_GMAPS_URL)
  private String gmapsUrl;

  public static final String SERIALIZED_NAME_HOME_CHAMPIONSHIP = "home_championship";
  @SerializedName(SERIALIZED_NAME_HOME_CHAMPIONSHIP)
  private Object homeChampionship;

  public static final String SERIALIZED_NAME_KEY = "key";
  @SerializedName(SERIALIZED_NAME_KEY)
  private String key;

  public static final String SERIALIZED_NAME_LAT = "lat";
  @SerializedName(SERIALIZED_NAME_LAT)
  private Double lat;

  public static final String SERIALIZED_NAME_LNG = "lng";
  @SerializedName(SERIALIZED_NAME_LNG)
  private Double lng;

  public static final String SERIALIZED_NAME_LOCATION_NAME = "location_name";
  @SerializedName(SERIALIZED_NAME_LOCATION_NAME)
  private String locationName;

  public static final String SERIALIZED_NAME_MOTTO = "motto";
  @SerializedName(SERIALIZED_NAME_MOTTO)
  private String motto;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NICKNAME = "nickname";
  @SerializedName(SERIALIZED_NAME_NICKNAME)
  private String nickname;

  public static final String SERIALIZED_NAME_POSTAL_CODE = "postal_code";
  @SerializedName(SERIALIZED_NAME_POSTAL_CODE)
  private String postalCode;

  public static final String SERIALIZED_NAME_ROOKIE_YEAR = "rookie_year";
  @SerializedName(SERIALIZED_NAME_ROOKIE_YEAR)
  private Integer rookieYear;

  public static final String SERIALIZED_NAME_SCHOOL_NAME = "school_name";
  @SerializedName(SERIALIZED_NAME_SCHOOL_NAME)
  private String schoolName;

  public static final String SERIALIZED_NAME_STATE_PROV = "state_prov";
  @SerializedName(SERIALIZED_NAME_STATE_PROV)
  private String stateProv;

  public static final String SERIALIZED_NAME_TEAM_NUMBER = "team_number";
  @SerializedName(SERIALIZED_NAME_TEAM_NUMBER)
  private Integer teamNumber;

  public static final String SERIALIZED_NAME_WEBSITE = "website";
  @SerializedName(SERIALIZED_NAME_WEBSITE)
  private String website;

  public Team() {
  }

  public Team address(String address) {
    this.address = address;
    return this;
  }

  /**
   * Will be NULL, for future development.
   * @return address
   */
  @javax.annotation.Nullable
  public String getAddress() {
    return address;
  }

  public void setAddress(String address) {
    this.address = address;
  }


  public Team city(String city) {
    this.city = city;
    return this;
  }

  /**
   * City of team derived from parsing the address registered with FIRST.
   * @return city
   */
  @javax.annotation.Nullable
  public String getCity() {
    return city;
  }

  public void setCity(String city) {
    this.city = city;
  }


  public Team country(String country) {
    this.country = country;
    return this;
  }

  /**
   * Country of team derived from parsing the address registered with FIRST.
   * @return country
   */
  @javax.annotation.Nullable
  public String getCountry() {
    return country;
  }

  public void setCountry(String country) {
    this.country = country;
  }


  public Team gmapsPlaceId(String gmapsPlaceId) {
    this.gmapsPlaceId = gmapsPlaceId;
    return this;
  }

  /**
   * Will be NULL, for future development.
   * @return gmapsPlaceId
   */
  @javax.annotation.Nullable
  public String getGmapsPlaceId() {
    return gmapsPlaceId;
  }

  public void setGmapsPlaceId(String gmapsPlaceId) {
    this.gmapsPlaceId = gmapsPlaceId;
  }


  public Team gmapsUrl(String gmapsUrl) {
    this.gmapsUrl = gmapsUrl;
    return this;
  }

  /**
   * Will be NULL, for future development.
   * @return gmapsUrl
   */
  @javax.annotation.Nullable
  public String getGmapsUrl() {
    return gmapsUrl;
  }

  public void setGmapsUrl(String gmapsUrl) {
    this.gmapsUrl = gmapsUrl;
  }


  public Team homeChampionship(Object homeChampionship) {
    this.homeChampionship = homeChampionship;
    return this;
  }

  /**
   * Location of the team&#39;s home championship each year as a key-value pair. The year (as a string) is the key, and the city is the value.
   * @return homeChampionship
   */
  @javax.annotation.Nullable
  public Object getHomeChampionship() {
    return homeChampionship;
  }

  public void setHomeChampionship(Object homeChampionship) {
    this.homeChampionship = homeChampionship;
  }


  public Team key(String key) {
    this.key = key;
    return this;
  }

  /**
   * TBA team key with the format &#x60;frcXXXX&#x60; with &#x60;XXXX&#x60; representing the team number.
   * @return key
   */
  @javax.annotation.Nonnull
  public String getKey() {
    return key;
  }

  public void setKey(String key) {
    this.key = key;
  }


  public Team lat(Double lat) {
    this.lat = lat;
    return this;
  }

  /**
   * Will be NULL, for future development.
   * @return lat
   */
  @javax.annotation.Nullable
  public Double getLat() {
    return lat;
  }

  public void setLat(Double lat) {
    this.lat = lat;
  }


  public Team lng(Double lng) {
    this.lng = lng;
    return this;
  }

  /**
   * Will be NULL, for future development.
   * @return lng
   */
  @javax.annotation.Nullable
  public Double getLng() {
    return lng;
  }

  public void setLng(Double lng) {
    this.lng = lng;
  }


  public Team locationName(String locationName) {
    this.locationName = locationName;
    return this;
  }

  /**
   * Will be NULL, for future development.
   * @return locationName
   */
  @javax.annotation.Nullable
  public String getLocationName() {
    return locationName;
  }

  public void setLocationName(String locationName) {
    this.locationName = locationName;
  }


  public Team motto(String motto) {
    this.motto = motto;
    return this;
  }

  /**
   * Team&#39;s motto as provided by FIRST. This field is deprecated and will return null - will be removed at end-of-season in 2019.
   * @return motto
   */
  @javax.annotation.Nullable
  public String getMotto() {
    return motto;
  }

  public void setMotto(String motto) {
    this.motto = motto;
  }


  public Team name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Official long name registered with FIRST.
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Team nickname(String nickname) {
    this.nickname = nickname;
    return this;
  }

  /**
   * Team nickname provided by FIRST.
   * @return nickname
   */
  @javax.annotation.Nullable
  public String getNickname() {
    return nickname;
  }

  public void setNickname(String nickname) {
    this.nickname = nickname;
  }


  public Team postalCode(String postalCode) {
    this.postalCode = postalCode;
    return this;
  }

  /**
   * Postal code from the team address.
   * @return postalCode
   */
  @javax.annotation.Nullable
  public String getPostalCode() {
    return postalCode;
  }

  public void setPostalCode(String postalCode) {
    this.postalCode = postalCode;
  }


  public Team rookieYear(Integer rookieYear) {
    this.rookieYear = rookieYear;
    return this;
  }

  /**
   * First year the team officially competed.
   * @return rookieYear
   */
  @javax.annotation.Nullable
  public Integer getRookieYear() {
    return rookieYear;
  }

  public void setRookieYear(Integer rookieYear) {
    this.rookieYear = rookieYear;
  }


  public Team schoolName(String schoolName) {
    this.schoolName = schoolName;
    return this;
  }

  /**
   * Name of team school or affilited group registered with FIRST.
   * @return schoolName
   */
  @javax.annotation.Nullable
  public String getSchoolName() {
    return schoolName;
  }

  public void setSchoolName(String schoolName) {
    this.schoolName = schoolName;
  }


  public Team stateProv(String stateProv) {
    this.stateProv = stateProv;
    return this;
  }

  /**
   * State of team derived from parsing the address registered with FIRST.
   * @return stateProv
   */
  @javax.annotation.Nullable
  public String getStateProv() {
    return stateProv;
  }

  public void setStateProv(String stateProv) {
    this.stateProv = stateProv;
  }


  public Team teamNumber(Integer teamNumber) {
    this.teamNumber = teamNumber;
    return this;
  }

  /**
   * Official team number issued by FIRST.
   * @return teamNumber
   */
  @javax.annotation.Nonnull
  public Integer getTeamNumber() {
    return teamNumber;
  }

  public void setTeamNumber(Integer teamNumber) {
    this.teamNumber = teamNumber;
  }


  public Team website(String website) {
    this.website = website;
    return this;
  }

  /**
   * Official website associated with the team.
   * @return website
   */
  @javax.annotation.Nullable
  public String getWebsite() {
    return website;
  }

  public void setWebsite(String website) {
    this.website = website;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Team team = (Team) o;
    return Objects.equals(this.address, team.address) &&
        Objects.equals(this.city, team.city) &&
        Objects.equals(this.country, team.country) &&
        Objects.equals(this.gmapsPlaceId, team.gmapsPlaceId) &&
        Objects.equals(this.gmapsUrl, team.gmapsUrl) &&
        Objects.equals(this.homeChampionship, team.homeChampionship) &&
        Objects.equals(this.key, team.key) &&
        Objects.equals(this.lat, team.lat) &&
        Objects.equals(this.lng, team.lng) &&
        Objects.equals(this.locationName, team.locationName) &&
        Objects.equals(this.motto, team.motto) &&
        Objects.equals(this.name, team.name) &&
        Objects.equals(this.nickname, team.nickname) &&
        Objects.equals(this.postalCode, team.postalCode) &&
        Objects.equals(this.rookieYear, team.rookieYear) &&
        Objects.equals(this.schoolName, team.schoolName) &&
        Objects.equals(this.stateProv, team.stateProv) &&
        Objects.equals(this.teamNumber, team.teamNumber) &&
        Objects.equals(this.website, team.website);
  }

  @Override
  public int hashCode() {
    return Objects.hash(address, city, country, gmapsPlaceId, gmapsUrl, homeChampionship, key, lat, lng, locationName, motto, name, nickname, postalCode, rookieYear, schoolName, stateProv, teamNumber, website);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Team {\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    city: ").append(toIndentedString(city)).append("\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    gmapsPlaceId: ").append(toIndentedString(gmapsPlaceId)).append("\n");
    sb.append("    gmapsUrl: ").append(toIndentedString(gmapsUrl)).append("\n");
    sb.append("    homeChampionship: ").append(toIndentedString(homeChampionship)).append("\n");
    sb.append("    key: ").append(toIndentedString(key)).append("\n");
    sb.append("    lat: ").append(toIndentedString(lat)).append("\n");
    sb.append("    lng: ").append(toIndentedString(lng)).append("\n");
    sb.append("    locationName: ").append(toIndentedString(locationName)).append("\n");
    sb.append("    motto: ").append(toIndentedString(motto)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    nickname: ").append(toIndentedString(nickname)).append("\n");
    sb.append("    postalCode: ").append(toIndentedString(postalCode)).append("\n");
    sb.append("    rookieYear: ").append(toIndentedString(rookieYear)).append("\n");
    sb.append("    schoolName: ").append(toIndentedString(schoolName)).append("\n");
    sb.append("    stateProv: ").append(toIndentedString(stateProv)).append("\n");
    sb.append("    teamNumber: ").append(toIndentedString(teamNumber)).append("\n");
    sb.append("    website: ").append(toIndentedString(website)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("address");
    openapiFields.add("city");
    openapiFields.add("country");
    openapiFields.add("gmaps_place_id");
    openapiFields.add("gmaps_url");
    openapiFields.add("home_championship");
    openapiFields.add("key");
    openapiFields.add("lat");
    openapiFields.add("lng");
    openapiFields.add("location_name");
    openapiFields.add("motto");
    openapiFields.add("name");
    openapiFields.add("nickname");
    openapiFields.add("postal_code");
    openapiFields.add("rookie_year");
    openapiFields.add("school_name");
    openapiFields.add("state_prov");
    openapiFields.add("team_number");
    openapiFields.add("website");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("key");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("team_number");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Team
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Team.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Team is not found in the empty JSON string", Team.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Team.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Team` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Team.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("address") != null && !jsonObj.get("address").isJsonNull()) && !jsonObj.get("address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("address").toString()));
      }
      if ((jsonObj.get("city") != null && !jsonObj.get("city").isJsonNull()) && !jsonObj.get("city").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `city` to be a primitive type in the JSON string but got `%s`", jsonObj.get("city").toString()));
      }
      if ((jsonObj.get("country") != null && !jsonObj.get("country").isJsonNull()) && !jsonObj.get("country").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `country` to be a primitive type in the JSON string but got `%s`", jsonObj.get("country").toString()));
      }
      if ((jsonObj.get("gmaps_place_id") != null && !jsonObj.get("gmaps_place_id").isJsonNull()) && !jsonObj.get("gmaps_place_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gmaps_place_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gmaps_place_id").toString()));
      }
      if ((jsonObj.get("gmaps_url") != null && !jsonObj.get("gmaps_url").isJsonNull()) && !jsonObj.get("gmaps_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gmaps_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gmaps_url").toString()));
      }
      if (!jsonObj.get("key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("key").toString()));
      }
      if ((jsonObj.get("location_name") != null && !jsonObj.get("location_name").isJsonNull()) && !jsonObj.get("location_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `location_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("location_name").toString()));
      }
      if ((jsonObj.get("motto") != null && !jsonObj.get("motto").isJsonNull()) && !jsonObj.get("motto").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `motto` to be a primitive type in the JSON string but got `%s`", jsonObj.get("motto").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("nickname") != null && !jsonObj.get("nickname").isJsonNull()) && !jsonObj.get("nickname").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nickname` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nickname").toString()));
      }
      if ((jsonObj.get("postal_code") != null && !jsonObj.get("postal_code").isJsonNull()) && !jsonObj.get("postal_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `postal_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("postal_code").toString()));
      }
      if ((jsonObj.get("school_name") != null && !jsonObj.get("school_name").isJsonNull()) && !jsonObj.get("school_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `school_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("school_name").toString()));
      }
      if ((jsonObj.get("state_prov") != null && !jsonObj.get("state_prov").isJsonNull()) && !jsonObj.get("state_prov").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state_prov` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state_prov").toString()));
      }
      if ((jsonObj.get("website") != null && !jsonObj.get("website").isJsonNull()) && !jsonObj.get("website").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `website` to be a primitive type in the JSON string but got `%s`", jsonObj.get("website").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Team.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Team' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Team> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Team.class));

       return (TypeAdapter<T>) new TypeAdapter<Team>() {
           @Override
           public void write(JsonWriter out, Team value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Team read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Team given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Team
   * @throws IOException if the JSON string is invalid with respect to Team
   */
  public static Team fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Team.class);
  }

  /**
   * Convert an instance of Team to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

