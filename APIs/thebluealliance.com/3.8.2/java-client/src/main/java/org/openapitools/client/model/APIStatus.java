/*
 * The Blue Alliance API v3
 * # Overview    Information and statistics about FIRST Robotics Competition teams and events.   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).
 *
 * The version of the OpenAPI document: 3.8.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.APIStatusAppVersion;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * APIStatus
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:56:47.661723-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class APIStatus {
  public static final String SERIALIZED_NAME_ANDROID = "android";
  @SerializedName(SERIALIZED_NAME_ANDROID)
  private APIStatusAppVersion android;

  public static final String SERIALIZED_NAME_CURRENT_SEASON = "current_season";
  @SerializedName(SERIALIZED_NAME_CURRENT_SEASON)
  private Integer currentSeason;

  public static final String SERIALIZED_NAME_DOWN_EVENTS = "down_events";
  @SerializedName(SERIALIZED_NAME_DOWN_EVENTS)
  private List<String> downEvents = new ArrayList<>();

  public static final String SERIALIZED_NAME_IOS = "ios";
  @SerializedName(SERIALIZED_NAME_IOS)
  private APIStatusAppVersion ios;

  public static final String SERIALIZED_NAME_IS_DATAFEED_DOWN = "is_datafeed_down";
  @SerializedName(SERIALIZED_NAME_IS_DATAFEED_DOWN)
  private Boolean isDatafeedDown;

  public static final String SERIALIZED_NAME_MAX_SEASON = "max_season";
  @SerializedName(SERIALIZED_NAME_MAX_SEASON)
  private Integer maxSeason;

  public APIStatus() {
  }

  public APIStatus android(APIStatusAppVersion android) {
    this.android = android;
    return this;
  }

  /**
   * Get android
   * @return android
   */
  @javax.annotation.Nonnull
  public APIStatusAppVersion getAndroid() {
    return android;
  }

  public void setAndroid(APIStatusAppVersion android) {
    this.android = android;
  }


  public APIStatus currentSeason(Integer currentSeason) {
    this.currentSeason = currentSeason;
    return this;
  }

  /**
   * Year of the current FRC season.
   * @return currentSeason
   */
  @javax.annotation.Nonnull
  public Integer getCurrentSeason() {
    return currentSeason;
  }

  public void setCurrentSeason(Integer currentSeason) {
    this.currentSeason = currentSeason;
  }


  public APIStatus downEvents(List<String> downEvents) {
    this.downEvents = downEvents;
    return this;
  }

  public APIStatus addDownEventsItem(String downEventsItem) {
    if (this.downEvents == null) {
      this.downEvents = new ArrayList<>();
    }
    this.downEvents.add(downEventsItem);
    return this;
  }

  /**
   * An array of strings containing event keys of any active events that are no longer updating.
   * @return downEvents
   */
  @javax.annotation.Nonnull
  public List<String> getDownEvents() {
    return downEvents;
  }

  public void setDownEvents(List<String> downEvents) {
    this.downEvents = downEvents;
  }


  public APIStatus ios(APIStatusAppVersion ios) {
    this.ios = ios;
    return this;
  }

  /**
   * Get ios
   * @return ios
   */
  @javax.annotation.Nonnull
  public APIStatusAppVersion getIos() {
    return ios;
  }

  public void setIos(APIStatusAppVersion ios) {
    this.ios = ios;
  }


  public APIStatus isDatafeedDown(Boolean isDatafeedDown) {
    this.isDatafeedDown = isDatafeedDown;
    return this;
  }

  /**
   * True if the entire FMS API provided by FIRST is down.
   * @return isDatafeedDown
   */
  @javax.annotation.Nonnull
  public Boolean getIsDatafeedDown() {
    return isDatafeedDown;
  }

  public void setIsDatafeedDown(Boolean isDatafeedDown) {
    this.isDatafeedDown = isDatafeedDown;
  }


  public APIStatus maxSeason(Integer maxSeason) {
    this.maxSeason = maxSeason;
    return this;
  }

  /**
   * Maximum FRC season year for valid queries.
   * @return maxSeason
   */
  @javax.annotation.Nonnull
  public Integer getMaxSeason() {
    return maxSeason;
  }

  public void setMaxSeason(Integer maxSeason) {
    this.maxSeason = maxSeason;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    APIStatus apIStatus = (APIStatus) o;
    return Objects.equals(this.android, apIStatus.android) &&
        Objects.equals(this.currentSeason, apIStatus.currentSeason) &&
        Objects.equals(this.downEvents, apIStatus.downEvents) &&
        Objects.equals(this.ios, apIStatus.ios) &&
        Objects.equals(this.isDatafeedDown, apIStatus.isDatafeedDown) &&
        Objects.equals(this.maxSeason, apIStatus.maxSeason);
  }

  @Override
  public int hashCode() {
    return Objects.hash(android, currentSeason, downEvents, ios, isDatafeedDown, maxSeason);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class APIStatus {\n");
    sb.append("    android: ").append(toIndentedString(android)).append("\n");
    sb.append("    currentSeason: ").append(toIndentedString(currentSeason)).append("\n");
    sb.append("    downEvents: ").append(toIndentedString(downEvents)).append("\n");
    sb.append("    ios: ").append(toIndentedString(ios)).append("\n");
    sb.append("    isDatafeedDown: ").append(toIndentedString(isDatafeedDown)).append("\n");
    sb.append("    maxSeason: ").append(toIndentedString(maxSeason)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("android");
    openapiFields.add("current_season");
    openapiFields.add("down_events");
    openapiFields.add("ios");
    openapiFields.add("is_datafeed_down");
    openapiFields.add("max_season");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("android");
    openapiRequiredFields.add("current_season");
    openapiRequiredFields.add("down_events");
    openapiRequiredFields.add("ios");
    openapiRequiredFields.add("is_datafeed_down");
    openapiRequiredFields.add("max_season");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to APIStatus
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!APIStatus.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in APIStatus is not found in the empty JSON string", APIStatus.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!APIStatus.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `APIStatus` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : APIStatus.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `android`
      APIStatusAppVersion.validateJsonElement(jsonObj.get("android"));
      // ensure the required json array is present
      if (jsonObj.get("down_events") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("down_events").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `down_events` to be an array in the JSON string but got `%s`", jsonObj.get("down_events").toString()));
      }
      // validate the required field `ios`
      APIStatusAppVersion.validateJsonElement(jsonObj.get("ios"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!APIStatus.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'APIStatus' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<APIStatus> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(APIStatus.class));

       return (TypeAdapter<T>) new TypeAdapter<APIStatus>() {
           @Override
           public void write(JsonWriter out, APIStatus value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public APIStatus read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of APIStatus given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of APIStatus
   * @throws IOException if the JSON string is invalid with respect to APIStatus
   */
  public static APIStatus fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, APIStatus.class);
  }

  /**
   * Convert an instance of APIStatus to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

