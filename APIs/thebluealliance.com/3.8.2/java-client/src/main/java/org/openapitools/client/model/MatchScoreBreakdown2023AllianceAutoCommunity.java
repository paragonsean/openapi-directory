/*
 * The Blue Alliance API v3
 * # Overview    Information and statistics about FIRST Robotics Competition teams and events.   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).
 *
 * The version of the OpenAPI document: 3.8.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * MatchScoreBreakdown2023AllianceAutoCommunity
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:56:47.661723-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MatchScoreBreakdown2023AllianceAutoCommunity {
  /**
   * Gets or Sets B
   */
  @JsonAdapter(BEnum.Adapter.class)
  public enum BEnum {
    NONE("None"),
    
    CONE("Cone"),
    
    CUBE("Cube");

    private String value;

    BEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static BEnum fromValue(String value) {
      for (BEnum b : BEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<BEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final BEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public BEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return BEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      BEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_B = "B";
  @SerializedName(SERIALIZED_NAME_B)
  private List<BEnum> B = new ArrayList<>();

  /**
   * Gets or Sets M
   */
  @JsonAdapter(MEnum.Adapter.class)
  public enum MEnum {
    NONE("None"),
    
    CONE("Cone"),
    
    CUBE("Cube");

    private String value;

    MEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MEnum fromValue(String value) {
      for (MEnum b : MEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      MEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_M = "M";
  @SerializedName(SERIALIZED_NAME_M)
  private List<MEnum> M = new ArrayList<>();

  /**
   * Gets or Sets T
   */
  @JsonAdapter(TEnum.Adapter.class)
  public enum TEnum {
    NONE("None"),
    
    CONE("Cone"),
    
    CUBE("Cube");

    private String value;

    TEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TEnum fromValue(String value) {
      for (TEnum b : TEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_T = "T";
  @SerializedName(SERIALIZED_NAME_T)
  private List<TEnum> T = new ArrayList<>();

  public MatchScoreBreakdown2023AllianceAutoCommunity() {
  }

  public MatchScoreBreakdown2023AllianceAutoCommunity B(List<BEnum> B) {
    this.B = B;
    return this;
  }

  public MatchScoreBreakdown2023AllianceAutoCommunity addBItem(BEnum BItem) {
    if (this.B == null) {
      this.B = new ArrayList<>();
    }
    this.B.add(BItem);
    return this;
  }

  /**
   * Get B
   * @return B
   */
  @javax.annotation.Nullable
  public List<BEnum> getB() {
    return B;
  }

  public void setB(List<BEnum> B) {
    this.B = B;
  }


  public MatchScoreBreakdown2023AllianceAutoCommunity M(List<MEnum> M) {
    this.M = M;
    return this;
  }

  public MatchScoreBreakdown2023AllianceAutoCommunity addMItem(MEnum MItem) {
    if (this.M == null) {
      this.M = new ArrayList<>();
    }
    this.M.add(MItem);
    return this;
  }

  /**
   * Get M
   * @return M
   */
  @javax.annotation.Nullable
  public List<MEnum> getM() {
    return M;
  }

  public void setM(List<MEnum> M) {
    this.M = M;
  }


  public MatchScoreBreakdown2023AllianceAutoCommunity T(List<TEnum> T) {
    this.T = T;
    return this;
  }

  public MatchScoreBreakdown2023AllianceAutoCommunity addTItem(TEnum TItem) {
    if (this.T == null) {
      this.T = new ArrayList<>();
    }
    this.T.add(TItem);
    return this;
  }

  /**
   * Get T
   * @return T
   */
  @javax.annotation.Nullable
  public List<TEnum> getT() {
    return T;
  }

  public void setT(List<TEnum> T) {
    this.T = T;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MatchScoreBreakdown2023AllianceAutoCommunity matchScoreBreakdown2023AllianceAutoCommunity = (MatchScoreBreakdown2023AllianceAutoCommunity) o;
    return Objects.equals(this.B, matchScoreBreakdown2023AllianceAutoCommunity.B) &&
        Objects.equals(this.M, matchScoreBreakdown2023AllianceAutoCommunity.M) &&
        Objects.equals(this.T, matchScoreBreakdown2023AllianceAutoCommunity.T);
  }

  @Override
  public int hashCode() {
    return Objects.hash(B, M, T);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MatchScoreBreakdown2023AllianceAutoCommunity {\n");
    sb.append("    B: ").append(toIndentedString(B)).append("\n");
    sb.append("    M: ").append(toIndentedString(M)).append("\n");
    sb.append("    T: ").append(toIndentedString(T)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("B");
    openapiFields.add("M");
    openapiFields.add("T");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MatchScoreBreakdown2023AllianceAutoCommunity
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MatchScoreBreakdown2023AllianceAutoCommunity.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MatchScoreBreakdown2023AllianceAutoCommunity is not found in the empty JSON string", MatchScoreBreakdown2023AllianceAutoCommunity.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MatchScoreBreakdown2023AllianceAutoCommunity.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MatchScoreBreakdown2023AllianceAutoCommunity` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("B") != null && !jsonObj.get("B").isJsonNull() && !jsonObj.get("B").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `B` to be an array in the JSON string but got `%s`", jsonObj.get("B").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("M") != null && !jsonObj.get("M").isJsonNull() && !jsonObj.get("M").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `M` to be an array in the JSON string but got `%s`", jsonObj.get("M").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("T") != null && !jsonObj.get("T").isJsonNull() && !jsonObj.get("T").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `T` to be an array in the JSON string but got `%s`", jsonObj.get("T").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MatchScoreBreakdown2023AllianceAutoCommunity.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MatchScoreBreakdown2023AllianceAutoCommunity' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MatchScoreBreakdown2023AllianceAutoCommunity> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MatchScoreBreakdown2023AllianceAutoCommunity.class));

       return (TypeAdapter<T>) new TypeAdapter<MatchScoreBreakdown2023AllianceAutoCommunity>() {
           @Override
           public void write(JsonWriter out, MatchScoreBreakdown2023AllianceAutoCommunity value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MatchScoreBreakdown2023AllianceAutoCommunity read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MatchScoreBreakdown2023AllianceAutoCommunity given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MatchScoreBreakdown2023AllianceAutoCommunity
   * @throws IOException if the JSON string is invalid with respect to MatchScoreBreakdown2023AllianceAutoCommunity
   */
  public static MatchScoreBreakdown2023AllianceAutoCommunity fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MatchScoreBreakdown2023AllianceAutoCommunity.class);
  }

  /**
   * Convert an instance of MatchScoreBreakdown2023AllianceAutoCommunity to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

