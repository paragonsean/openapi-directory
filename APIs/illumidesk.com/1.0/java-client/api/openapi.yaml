openapi: 3.0.1
info:
  title: IllumiDesk
  version: "1.0"
  x-apisguru-categories:
  - open_data
  x-logo:
    backgroundColor: '#FFFFFF'
    url: https://avatars3.githubusercontent.com/u/12212444?v=4&s=200
  x-origin:
  - format: swagger
    url: https://raw.githubusercontent.com/3Blades/openapi/master/tbs_swagger.yml
    version: "2.0"
  x-providerName: illumidesk.com
servers:
- url: https://api.illumidesk.com/
security:
- jwt: []
paths:
  /auth/jwt-token-auth/:
    post:
      operationId: auth_jwt-token-auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JWTData'
        required: false
      responses:
        "201":
          content:
            application/json:
              example:
                token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ
              schema:
                $ref: '#/components/schemas/JWT'
            text/html:
              schema:
                $ref: '#/components/schemas/JWT'
          description: JWT created
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JWTError'
            text/html:
              schema:
                $ref: '#/components/schemas/JWTError'
          description: Invalid data supplied
      security: []
      summary: Create JSON Web Token (JWT)
      tags:
      - auth
      x-codegen-request-body-name: jwt_data
      x-content-type: application/json
      x-accepts:
      - application/json
      - text/html
  /auth/jwt-token-refresh/:
    post:
      description: Obtains a new JSON Web Token using existing user credentials.
      operationId: auth_jwt-token-refresh
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshJSONWebTokenData'
        required: false
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RefreshJSONWebToken'
            text/html:
              schema:
                $ref: '#/components/schemas/RefreshJSONWebToken'
          description: RefreshJSONWebToken created
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RefreshJSONWebTokenError'
            text/html:
              schema:
                $ref: '#/components/schemas/RefreshJSONWebTokenError'
          description: Invalid data supplied
      security: []
      summary: Refresh a JSON Web Token (JWT)
      tags:
      - auth
      x-codegen-request-body-name: refreshjwt_data
      x-content-type: application/json
      x-accepts:
      - application/json
      - text/html
  /auth/jwt-token-verify/:
    post:
      description: Checks veraciy of token.
      operationId: auth_jwt-token-verify
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VerifyJSONWebTokenData'
        required: false
      responses:
        "201":
          content:
            application/json:
              example:
                token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ
              schema:
                $ref: '#/components/schemas/VerifyJSONWebToken'
            text/html:
              schema:
                $ref: '#/components/schemas/VerifyJSONWebToken'
          description: VerifyJSONWebToken created
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VerifyJSONWebTokenError'
            text/html:
              schema:
                $ref: '#/components/schemas/VerifyJSONWebTokenError'
          description: Invalid data supplied
      security: []
      summary: Validate JSON Web Token (JWT)
      tags:
      - auth
      x-codegen-request-body-name: verifyjwt_data
      x-content-type: application/json
      x-accepts:
      - application/json
      - text/html
  /auth/login/{provider}/:
    get:
      operationId: oauth_login
      parameters:
      - description: OAuth2 provider
        in: path
        name: provider
        required: true
        schema:
          enum:
          - github
          - google
          - slack
          type: string
      responses:
        "302":
          content: {}
          description: Redirect to backend auth page
      tags:
      - auth
      x-accepts:
      - application/json
  /auth/register/:
    post:
      description: User registration requires confirming email address to activate
        user.
      operationId: auth_register
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserData'
        required: false
      responses:
        "201":
          content:
            application/json:
              example:
                email: user@email.com
                first_name: John
                id: 536686d7-0096-4c72-a4c3-5d710a361a0a
                last_name: Doe
                profile:
                  avatar_url: http://example.com/
                  bio: I like tests
                  company: IllumiDesk
                  location: "Atlanta, GA"
                  timezone: America/New_York
                  url: http://about.me/myprofile
                username: johndoe
              schema:
                $ref: '#/components/schemas/User'
            text/html:
              schema:
                $ref: '#/components/schemas/User'
          description: User created
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserError'
            text/html:
              schema:
                $ref: '#/components/schemas/UserError'
          description: Invalid data supplied
      security: []
      summary: Register a user
      tags:
      - auth
      x-codegen-request-body-name: user_data
      x-content-type: application/json
      x-accepts:
      - application/json
      - text/html
  /v1/me:
    get:
      operationId: me
      responses:
        "200":
          content:
            application/json:
              example:
                email: johndoe@email.com
                first_name: John
                id: 66949654-1f75-4c6f-a5c5-e3572eae6527
                last_name: Doe
                profile:
                  avatar_url: http://example.com/
                  bio: I like tests
                  company: 3Blades
                  location: "Atlanta, GA"
                  timezone: America/New_York
                  url: http://about.me/myprofile
                username: johndoe
              schema:
                $ref: '#/components/schemas/User'
            text/html:
              schema:
                $ref: '#/components/schemas/User'
          description: User information retrieved.
      summary: A convenience endpoint that is equivalent to GET /v1/users/profiles/<my
        user id>/
      tags:
      - users
      x-accepts:
      - application/json
      - text/html
  /v1/servers/options/server-size/:
    get:
      operationId: servers_options_sizes_list
      parameters:
      - description: Set limit when retrieving items.
        in: query
        name: limit
        schema:
          type: string
      - description: Offset when retrieving items.
        in: query
        name: offset
        schema:
          type: string
      - description: Set order when retrieving items.
        in: query
        name: ordering
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              example: []
              schema:
                items:
                  $ref: '#/components/schemas/ServerSize'
                type: array
            text/html:
              schema:
                items:
                  $ref: '#/components/schemas/ServerSize'
                type: array
          description: Server size list.
      summary: Retrieve available server sizes
      tags:
      - servers
      x-accepts:
      - application/json
      - text/html
    post:
      description: Only super users with on-premises version have acceess to this
        endpoint.
      operationId: servers_options_server_size_create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServerSizeData'
        required: false
      responses:
        "201":
          content:
            application/json:
              example:
                active: true
                cpu: 1
                id: 2f4a5830-169d-4111-b913-e68c7b94fdbe
                memory: 512
                name: myResource
              schema:
                $ref: '#/components/schemas/ServerSize'
            text/html:
              schema:
                $ref: '#/components/schemas/ServerSize'
          description: ServerSize created. This operation is available only to super
            users.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerSizeError'
            text/html:
              schema:
                $ref: '#/components/schemas/ServerSizeError'
          description: Invalid data supplied
      summary: Create a new server size item
      tags:
      - servers
      x-codegen-request-body-name: serversize_data
      x-content-type: application/json
      x-accepts:
      - application/json
      - text/html
  /v1/servers/options/server-size/{size}/:
    delete:
      description: Only super users with on-premises version have acceess to this
        endpoint.
      operationId: servers_options_server_size_delete
      parameters:
      - description: Server size unique identifier expressed as UUID or name.
        in: path
        name: size
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: Server size deleted. This operation is available only to super
            users
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
            text/html:
              schema:
                $ref: '#/components/schemas/NotFound'
          description: ServerSize not found.
      summary: Delete a server size by id
      tags:
      - servers
      x-accepts:
      - application/json
      - text/html
    get:
      operationId: servers_options_resources_read
      parameters:
      - description: Server size unique identifier expressed as UUID or name.
        in: path
        name: size
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              example:
                active: true
                cpu: 1
                id: 2f4a5830-169d-4111-b913-e68c7b94fdbe
                memory: 512
                name: myResource
              schema:
                $ref: '#/components/schemas/ServerSize'
            text/html:
              schema:
                $ref: '#/components/schemas/ServerSize'
          description: Environment resource retrieved.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
            text/html:
              schema:
                $ref: '#/components/schemas/NotFound'
          description: Environment resource not found.
      summary: Get a server size by id
      tags:
      - servers
      x-accepts:
      - application/json
      - text/html
    patch:
      description: Only super users with on-premises version have acceess to this
        endpoint.
      operationId: servers_options_server_size_update
      parameters:
      - description: Server size unique identifier expressed as UUID or name.
        in: path
        name: size
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServerSizeData'
        required: false
      responses:
        "200":
          content:
            application/json:
              example:
                active: true
                cpu: 1
                id: b673c7ab-65ad-4d6e-859e-0483eea86ad6
                memory: 512
                name: myServerSizeWithPatch
              schema:
                $ref: '#/components/schemas/ServerSize'
            text/html:
              schema:
                $ref: '#/components/schemas/ServerSize'
          description: Server size updated. This operation is available only to super
            users.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerSizeError'
            text/html:
              schema:
                $ref: '#/components/schemas/ServerSizeError'
          description: Invalid data supplied.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
            text/html:
              schema:
                $ref: '#/components/schemas/NotFound'
          description: Server size not found.
      summary: Update a server size by id
      tags:
      - servers
      x-codegen-request-body-name: serversize_data
      x-content-type: application/json
      x-accepts:
      - application/json
      - text/html
    put:
      description: Only super users with on-premises version have acceess to this
        endpoint.
      operationId: servers_options_server_size_replace
      parameters:
      - description: Server size unique identifier expressed as UUID or name.
        in: path
        name: size
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServerSizeData'
        required: false
      responses:
        "200":
          content:
            application/json:
              example:
                active: true
                cpu: 1
                id: b673c7ab-65ad-4d6e-859e-0483eea86ad6
                memory: 512
                name: myResourceWithPut
              schema:
                $ref: '#/components/schemas/ServerSize'
            text/html:
              schema:
                $ref: '#/components/schemas/ServerSize'
          description: Server size replaced. This operation is available only to super
            users.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerSizeError'
            text/html:
              schema:
                $ref: '#/components/schemas/ServerSizeError'
          description: Invalid data supplied.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
            text/html:
              schema:
                $ref: '#/components/schemas/NotFound'
          description: ServerSize not found
      summary: Replace a server size by id
      tags:
      - servers
      x-codegen-request-body-name: serversize_data
      x-content-type: application/json
      x-accepts:
      - application/json
      - text/html
  /v1/teams/:
    get:
      operationId: teams_list
      parameters:
      - description: Limit when getting data.
        in: query
        name: limit
        schema:
          type: string
      - description: Offset when getting data.
        in: query
        name: offset
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              example: []
              schema:
                items:
                  $ref: '#/components/schemas/Team'
                type: array
            text/html:
              schema:
                items:
                  $ref: '#/components/schemas/Team'
                type: array
          description: Team list
      summary: Get teams
      tags:
      - teams
      x-accepts:
      - application/json
      - text/html
    post:
      operationId: teams_create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TeamData'
        required: false
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Team'
            text/html:
              schema:
                $ref: '#/components/schemas/Team'
          description: Team created
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TeamError'
            text/html:
              schema:
                $ref: '#/components/schemas/TeamError'
          description: Invalid data supplied
      summary: Create a new team
      tags:
      - teams
      x-codegen-request-body-name: team_data
      x-content-type: application/json
      x-accepts:
      - application/json
      - text/html
  /v1/teams/{team}/:
    delete:
      operationId: teams_delete
      parameters:
      - description: Team unique identifier expressed as UUID or name.
        in: path
        name: team
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: Team deleted.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
            text/html:
              schema:
                $ref: '#/components/schemas/NotFound'
          description: Team not found.
      summary: Delete a team
      tags:
      - teams
      x-accepts:
      - application/json
      - text/html
    get:
      operationId: teams_read
      parameters:
      - description: Team unique identifier expressed as UUID or name.
        in: path
        name: team
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Team'
            text/html:
              schema:
                $ref: '#/components/schemas/Team'
          description: Team retrieved successfully.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
            text/html:
              schema:
                $ref: '#/components/schemas/NotFound'
          description: Team not found.
      summary: Get a team
      tags:
      - teams
      x-accepts:
      - application/json
      - text/html
    patch:
      operationId: teams_update
      parameters:
      - description: Team unique identifier expressed as UUID or name.
        in: path
        name: team
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TeamData'
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Team'
            text/html:
              schema:
                $ref: '#/components/schemas/Team'
          description: Team updated
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TeamError'
            text/html:
              schema:
                $ref: '#/components/schemas/TeamError'
          description: Invalid data supplied
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
            text/html:
              schema:
                $ref: '#/components/schemas/NotFound'
          description: Team not found
      summary: Update a team
      tags:
      - teams
      x-codegen-request-body-name: team_data
      x-content-type: application/json
      x-accepts:
      - application/json
      - text/html
    put:
      operationId: teams_replace
      parameters:
      - description: Team unique identifier expressed as UUID or name.
        in: path
        name: team
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TeamData'
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Team'
            text/html:
              schema:
                $ref: '#/components/schemas/Team'
          description: Team updated
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TeamError'
            text/html:
              schema:
                $ref: '#/components/schemas/TeamError'
          description: Invalid data supplied.
      summary: Replace a team
      tags:
      - teams
      x-codegen-request-body-name: team_data
      x-content-type: application/json
      x-accepts:
      - application/json
      - text/html
  /v1/teams/{team}/billing/invoices/:
    get:
      operationId: teams_billing_invoices_list
      parameters:
      - description: Team unique identifier expressed as UUID or name.
        in: path
        name: team
        required: true
        schema:
          type: string
      - description: Limit when getting items.
        in: query
        name: limit
        schema:
          type: string
      - description: Offset when getting items.
        in: query
        name: offset
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              example: []
              schema:
                items:
                  $ref: '#/components/schemas/Invoice'
                type: array
            text/html:
              schema:
                items:
                  $ref: '#/components/schemas/Invoice'
                type: array
          description: Invoice list.
      summary: Get team invoices
      tags:
      - teams
      - billing
      x-accepts:
      - application/json
      - text/html
  /v1/teams/{team}/billing/invoices/{id}/:
    get:
      operationId: teams_billing_invoices_read
      parameters:
      - description: Team unique identifier expressed as UUID or name.
        in: path
        name: team
        required: true
        schema:
          type: string
      - description: Invoice unique identifier expressed as UUID.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Invoice'
            text/html:
              schema:
                $ref: '#/components/schemas/Invoice'
          description: Team invoice retrieved.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
            text/html:
              schema:
                $ref: '#/components/schemas/NotFound'
          description: Team invoice not found.
      summary: Get an invoice
      tags:
      - teams
      - billing
      x-accepts:
      - application/json
      - text/html
  /v1/teams/{team}/billing/invoices/{invoice_id}/invoice-items/:
    get:
      operationId: teams_billing_invoice_items_list
      parameters:
      - description: Team unique identifier expressed as UUID or name.
        in: path
        name: team
        required: true
        schema:
          type: string
      - description: "Invoice id, expressed as UUID."
        in: path
        name: invoice_id
        required: true
        schema:
          type: string
      - description: Limit when getting items.
        in: query
        name: limit
        schema:
          type: string
      - description: Offset when getting items.
        in: query
        name: offset
        schema:
          type: string
      - description: Ordering when getting items.
        in: query
        name: ordering
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              example: []
              schema:
                items:
                  $ref: '#/components/schemas/InvoiceItem'
                type: array
            text/html:
              schema:
                items:
                  $ref: '#/components/schemas/InvoiceItem'
                type: array
          description: Team invoiceItem list.
      summary: Get team invoice items for a given invoice.
      tags:
      - teams
      - billing
      x-accepts:
      - application/json
      - text/html
  /v1/teams/{team}/billing/invoices/{invoice_id}/invoice-items/{id}:
    get:
      operationId: teams_billing_invoice_items_read
      parameters:
      - description: Team unique identifier expressed as UUID or name.
        in: path
        name: team
        required: true
        schema:
          type: string
      - description: "Invoice id, expressed as UUID."
        in: path
        name: invoice_id
        required: true
        schema:
          type: string
      - description: "InvoiceItem id, expressed as UUID."
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvoiceItem'
            text/html:
              schema:
                $ref: '#/components/schemas/InvoiceItem'
          description: Team invoiceItem retrieved.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
            text/html:
              schema:
                $ref: '#/components/schemas/NotFound'
          description: InvoiceItem not found.
      summary: Get a specific team InvoiceItem.
      tags:
      - teams
      - billing
      x-accepts:
      - application/json
      - text/html
  /v1/teams/{team}/billing/subscriptions/:
    get:
      operationId: teams_billing_subscriptions_list
      parameters:
      - description: Team unique identifier expressed as UUID or name.
        in: path
        name: team
        required: true
        schema:
          type: string
      - description: Limit when getting items.
        in: query
        name: limit
        schema:
          type: string
      - description: Offset when getting items.
        in: query
        name: offset
        schema:
          type: string
      - description: Ordering when getting items.
        in: query
        name: ordering
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              example:
              - application_fee_percent: 0
                cancel_at_period_end: false
                canceled_at: ""
                created: 2017-07-24T17:25:04Z
                current_period_end: 2017-07-31T17:25:04Z
                current_period_start: 2017-07-24T17:25:04Z
                ended_at: ""
                id: 579208c3-4f5c-4b5d-baa3-309a06db681c
                livemode: false
                plan: efb36cb0-0ef2-4af3-ae5d-10d9ae73845d
                quantity: 1
                start: 2017-07-24T17:25:04Z
                status: trialing
                stripe_id: sub_B5KyO9BZ6lUNPP
                trial_end: 2017-07-31T17:25:04Z
                trial_start: 2017-07-24T17:25:04Z
              schema:
                items:
                  $ref: '#/components/schemas/Subscription'
                type: array
            text/html:
              schema:
                items:
                  $ref: '#/components/schemas/Subscription'
                type: array
          description: Teams subscription list.
      summary: Get active team subscriptons
      tags:
      - teams
      - billing
      x-accepts:
      - application/json
      - text/html
    post:
      operationId: teams_billing_subscriptions_create
      parameters:
      - description: Team unique identifier expressed as UUID or name.
        in: path
        name: team
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubscriptionData'
        required: false
      responses:
        "201":
          content:
            application/json:
              example:
                application_fee_percent: 0
                cancel_at_period_end: false
                canceled_at: ""
                created: 2017-07-24T17:25:04Z
                current_period_end: 2017-07-31T17:25:04Z
                current_period_start: 2017-07-24T17:25:04Z
                ended_at: ""
                id: 579208c3-4f5c-4b5d-baa3-309a06db681c
                livemode: false
                plan: efb36cb0-0ef2-4af3-ae5d-10d9ae73845d
                quantity: 1
                start: 2017-07-24T17:25:04Z
                status: trialing
                stripe_id: sub_B5KyO9BZ6lUNPP
                trial_end: 2017-07-31T17:25:04Z
                trial_start: 2017-07-24T17:25:04Z
              schema:
                $ref: '#/components/schemas/Subscription'
            text/html:
              schema:
                $ref: '#/components/schemas/Subscription'
          description: Team subscription created
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscriptionError'
            text/html:
              schema:
                $ref: '#/components/schemas/SubscriptionError'
          description: Invalid data supplied
      summary: Create a new team subscription
      tags:
      - teams
      - billing
      x-codegen-request-body-name: subscription_data
      x-content-type: application/json
      x-accepts:
      - application/json
      - text/html
  /v1/teams/{team}/billing/subscriptions/{id}/:
    delete:
      operationId: teams_billing_subscriptions_delete
      parameters:
      - description: Team unique identifier expressed as UUID or name.
        in: path
        name: team
        required: true
        schema:
          type: string
      - description: Subscription unique identifier expressed as UUID.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: Subscription deleted.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
            text/html:
              schema:
                $ref: '#/components/schemas/NotFound'
          description: Subscription not found.
      summary: Delete a subscription
      tags:
      - teams
      - billing
      x-accepts:
      - application/json
      - text/html
    get:
      operationId: teams_billing_subscriptions_read
      parameters:
      - description: Team unique identifier expressed as UUID or name.
        in: path
        name: team
        required: true
        schema:
          type: string
      - description: Unique identifier expressed as UUID.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subscription'
            text/html:
              schema:
                $ref: '#/components/schemas/Subscription'
          description: Team subscription retrieved.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
            text/html:
              schema:
                $ref: '#/components/schemas/NotFound'
          description: Subscription not found.
      summary: Get team subscriptions
      tags:
      - teams
      - billing
      x-accepts:
      - application/json
      - text/html
  /v1/teams/{team}/groups/:
    get:
      operationId: teams_groups_list
      parameters:
      - description: Team unique identifier expressed as UUID or name.
        in: path
        name: team
        required: true
        schema:
          type: string
      - description: Limit when getting data.
        in: query
        name: limit
        schema:
          type: string
      - description: Offset when getting data.
        in: query
        name: offset
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Group'
                type: array
            text/html:
              schema:
                items:
                  $ref: '#/components/schemas/Group'
                type: array
          description: Team groups list
      summary: Get team groups
      tags:
      - teams
      x-accepts:
      - application/json
      - text/html
  /v1/teams/{team}/groups/{group}/:
    delete:
      operationId: teams_groups_delete
      parameters:
      - description: Team unique identifier expressed as UUID or name.
        in: path
        name: team
        required: true
        schema:
          type: string
      - description: Group unique identifier expressed as UUID or name.
        in: path
        name: group
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: Group deleted
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
            text/html:
              schema:
                $ref: '#/components/schemas/NotFound'
          description: Group not found.
      summary: Delete team group
      tags:
      - teams
      x-accepts:
      - application/json
      - text/html
    get:
      operationId: teams_groups_read
      parameters:
      - description: Team unique identifier expressed as UUID or name.
        in: path
        name: team
        required: true
        schema:
          type: string
      - description: Group unique identifier expressed as UUID or name.
        in: path
        name: group
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
            text/html:
              schema:
                $ref: '#/components/schemas/Group'
          description: Group retrieved.
      summary: Get team group
      tags:
      - teams
      x-accepts:
      - application/json
      - text/html
    patch:
      operationId: teams_groups_update
      parameters:
      - description: Team unique identifier expressed as UUID or name.
        in: path
        name: team
        required: true
        schema:
          type: string
      - description: Group unique identifier expressed as UUID or name.
        in: path
        name: group
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GroupData'
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
            text/html:
              schema:
                $ref: '#/components/schemas/Group'
          description: Group updated
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupError'
            text/html:
              schema:
                $ref: '#/components/schemas/GroupError'
          description: Invalid data supplied
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
            text/html:
              schema:
                $ref: '#/components/schemas/NotFound'
          description: Group not found.
      summary: Patch team group
      tags:
      - teams
      x-codegen-request-body-name: group_data
      x-content-type: application/json
      x-accepts:
      - application/json
      - text/html
    put:
      operationId: teams_groups_replace
      parameters:
      - description: Team unique identifier expressed as UUID or name.
        in: path
        name: team
        required: true
        schema:
          type: string
      - description: Group unique identifier expressed as UUID or name.
        in: path
        name: group
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GroupData'
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
            text/html:
              schema:
                $ref: '#/components/schemas/Group'
          description: Group replaced
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupError'
            text/html:
              schema:
                $ref: '#/components/schemas/GroupError'
          description: Invalid data supplied
      summary: Patch team group
      tags:
      - teams
      x-codegen-request-body-name: group_data
      x-content-type: application/json
      x-accepts:
      - application/json
      - text/html
  /v1/teams/{team}/groups/{group}/add/:
    post:
      operationId: teams_groups_add_to_group
      parameters:
      - description: Team unique identifier expressed as UUID or name.
        in: path
        name: team
        required: true
        schema:
          type: string
      - description: Group unique identifier expressed as UUID or name.
        in: path
        name: group
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupUser'
            text/html:
              schema:
                $ref: '#/components/schemas/GroupUser'
          description: User added to group.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupUserError'
            text/html:
              schema:
                $ref: '#/components/schemas/GroupUserError'
          description: Invalid data supplied
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
            text/html:
              schema:
                $ref: '#/components/schemas/NotFound'
          description: Group not found
      summary: Add user to group
      tags:
      - teams
      x-accepts:
      - application/json
      - text/html
  /v1/teams/{team}/groups/{group}/remove/:
    post:
      operationId: teams_groups_remove_from_group
      parameters:
      - description: Team unique identifier expressed as UUID or name.
        in: path
        name: team
        required: true
        schema:
          type: string
      - description: Group unique identifier expressed as UUID or name.
        in: path
        name: group
        required: true
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: User removed from group.
        "400":
          content: {}
          description: Invalid data supplied
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
            text/html:
              schema:
                $ref: '#/components/schemas/NotFound'
          description: Group not found
      summary: User removed from group
      tags:
      - teams
      x-accepts:
      - application/json
      - text/html
  /v1/users/profiles/:
    get:
      operationId: users_list
      parameters:
      - description: Limit user list.
        in: query
        name: limit
        schema:
          type: string
      - description: Offset when getting users.
        in: query
        name: offset
        schema:
          type: string
      - description: User username.
        in: query
        name: username
        schema:
          type: string
      - description: User email.
        in: query
        name: email
        schema:
          type: string
      - description: Ordering when getting users.
        in: query
        name: ordering
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              example:
              - email: johndoe@email.com
                first_name: John
                id: 66949654-1f75-4c6f-a5c5-e3572eae6527
                last_name: Doe
                profile:
                  avatar_url: http://example.com/
                  bio: I like tests
                  company: 3Blades
                  location: "Atlanta, GA"
                  timezone: America/New_York
                  url: http://about.me/myprofile
                username: johndoe
              - email: janedoe@email.com
                first_name: John
                id: 66949654-1f75-4c6f-a5c5-e3572eae6527
                last_name: Doe
                profile:
                  avatar_url: http://example.com/
                  bio: I like tests
                  company: 3Blades
                  location: "Atlanta, GA"
                  timezone: America/New_York
                  url: http://about.me/myprofile
                username: janedoe
              schema:
                items:
                  $ref: '#/components/schemas/User'
                type: array
            text/html:
              schema:
                items:
                  $ref: '#/components/schemas/User'
                type: array
          description: User list
      summary: Get user list
      tags:
      - users
      x-accepts:
      - application/json
      - text/html
    post:
      description: Only admin users can create new users. New users have active status
        by default.
      operationId: users_create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserData'
        required: false
      responses:
        "201":
          content:
            application/json:
              example:
                email: johndoe@email.com
                first_name: John
                id: 66949654-1f75-4c6f-a5c5-e3572eae6527
                last_name: Doe
                profile:
                  avatar_url: http://example.com/
                  bio: I like tests
                  company: 3Blades
                  location: "Atlanta, GA"
                  timezone: America/New_York
                  url: http://about.me/myprofile
                username: johndoe
              schema:
                $ref: '#/components/schemas/User'
            text/html:
              schema:
                $ref: '#/components/schemas/User'
          description: User created
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserError'
            text/html:
              schema:
                $ref: '#/components/schemas/UserError'
          description: Invalid data supplied
      summary: Create new user
      tags:
      - users
      x-codegen-request-body-name: user_data
      x-content-type: application/json
      x-accepts:
      - application/json
      - text/html
  /v1/users/profiles/{user}/:
    delete:
      operationId: users_delete
      parameters:
      - description: User identifier expressed as UUID or username.
        in: path
        name: user
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: User deleted.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
            text/html:
              schema:
                $ref: '#/components/schemas/NotFound'
          description: User not found
      summary: Delete a user
      tags:
      - users
      x-accepts:
      - application/json
      - text/html
    get:
      operationId: users_read
      parameters:
      - description: Unique identifier expressed as UUID or username.
        in: path
        name: user
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              example:
                email: johndoe@email.com
                first_name: John
                id: 66949654-1f75-4c6f-a5c5-e3572eae6527
                last_name: Doe
                profile:
                  avatar_url: http://example.com/
                  bio: I like tests
                  company: 3Blades
                  location: "Atlanta, GA"
                  timezone: America/New_York
                  url: http://about.me/myprofile
                username: johndoe
              schema:
                $ref: '#/components/schemas/User'
            text/html:
              schema:
                $ref: '#/components/schemas/User'
          description: User retrieved.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
            text/html:
              schema:
                $ref: '#/components/schemas/NotFound'
          description: User not found.
      summary: Retrieve a user
      tags:
      - users
      x-accepts:
      - application/json
      - text/html
    patch:
      operationId: users_update
      parameters:
      - description: User unique identifier expressed as UUID or username.
        in: path
        name: user
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserData'
        required: false
      responses:
        "200":
          content:
            application/json:
              example:
                email: runB@email.com
                first_name: John
                id: 66949654-1f75-4c6f-a5c5-e3572eae6527
                last_name: Doe
                profile:
                  avatar_url: http://example.com/
                  bio: Data updated with patch
                  company: 3Blades
                  location: "Atlanta, GA"
                  timezone: America/New_York
                  url: http://about.me/myprofile
                username: johndoe
              schema:
                $ref: '#/components/schemas/User'
            text/html:
              schema:
                $ref: '#/components/schemas/User'
          description: User updated.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserError'
            text/html:
              schema:
                $ref: '#/components/schemas/UserError'
          description: Invalid data supplied.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
            text/html:
              schema:
                $ref: '#/components/schemas/NotFound'
          description: User not found.
      summary: Update a user
      tags:
      - users
      x-codegen-request-body-name: user_data
      x-content-type: application/json
      x-accepts:
      - application/json
      - text/html
  /v1/users/{user}/api-key/:
    get:
      operationId: users_api-key_list
      parameters:
      - description: User unique identifier expressed as UUID or username.
        in: path
        name: user
        required: true
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Api Key
      summary: Retrieve account's API key
      tags:
      - users
      x-accepts:
      - application/json
  /v1/users/{user}/avatar/:
    delete:
      operationId: user_avatar_delete
      parameters:
      - description: User unique identifier expressed as UUID or username.
        in: path
        name: user
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: Avatar deleted
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
            text/html:
              schema:
                $ref: '#/components/schemas/NotFound'
          description: Avatar not found
      summary: Delete avatar
      tags:
      - users
      x-accepts:
      - application/json
      - text/html
    get:
      operationId: user_avatar_get
      parameters:
      - description: User unique identifier expressed as UUIDor username.
        in: path
        name: user
        required: true
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: User avatar
      summary: Retrieve user's avatar
      tags:
      - users
      x-accepts:
      - application/json
    patch:
      operationId: user_avatar_update
      parameters:
      - description: User unique identifier expressed as UUID or username.
        in: path
        name: user
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            text/html:
              schema:
                $ref: '#/components/schemas/User'
          description: Avatar updated.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserError'
            text/html:
              schema:
                $ref: '#/components/schemas/UserError'
          description: Invalid data supplied.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
            text/html:
              schema:
                $ref: '#/components/schemas/NotFound'
          description: Avatar not found.
      summary: Update a project file
      tags:
      - users
      x-accepts:
      - application/json
      - text/html
    post:
      operationId: user_avatar_set
      parameters:
      - description: User unique identifier expressed as UUID or username.
        in: path
        name: user
        required: true
        schema:
          type: string
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            text/html:
              schema:
                $ref: '#/components/schemas/User'
          description: Added user avatar
        "400":
          content: {}
          description: Invalid data supplied
      summary: Add user avatar
      tags:
      - users
      x-accepts:
      - application/json
      - text/html
  /v1/users/{user}/emails/:
    get:
      operationId: users_emails_list
      parameters:
      - description: User unique identifier as expressed as UUID or username.
        in: path
        name: user
        required: true
        schema:
          type: string
      - description: Limite when getting email list.
        in: query
        name: limit
        schema:
          type: string
      - description: Offset when getting email list.
        in: query
        name: offset
        schema:
          type: string
      - description: Ordering when getting email list.
        in: query
        name: ordering
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              example: []
              schema:
                items:
                  $ref: '#/components/schemas/Email'
                type: array
            text/html:
              schema:
                items:
                  $ref: '#/components/schemas/Email'
                type: array
          description: Email list
      summary: Retrieve account email addresses
      tags:
      - users
      x-accepts:
      - application/json
      - text/html
    post:
      operationId: users_emails_create
      parameters:
      - description: User unique identifier expressed as UUID or username.
        in: path
        name: user
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmailData'
        required: false
      responses:
        "201":
          content:
            application/json:
              example:
                address: post@email.com
                id: 383e0d16-2052-4196-95b8-d9d73ed043a9
                public: true
                unsubscribed: false
              schema:
                $ref: '#/components/schemas/Email'
            text/html:
              schema:
                $ref: '#/components/schemas/Email'
          description: Email created
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmailError'
            text/html:
              schema:
                $ref: '#/components/schemas/EmailError'
          description: Invalid data supplied
      summary: Create an email address
      tags:
      - users
      x-codegen-request-body-name: email_data
      x-content-type: application/json
      x-accepts:
      - application/json
      - text/html
  /v1/users/{user}/emails/{email_id}/:
    delete:
      operationId: users_emails_delete
      parameters:
      - description: Email unique identifier expressed as UUID.
        in: path
        name: email_id
        required: true
        schema:
          type: string
      - description: User unique identifier expressed as UUID or username.
        in: path
        name: user
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: Email deleted.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
            text/html:
              schema:
                $ref: '#/components/schemas/NotFound'
          description: Email not found.
      summary: Delete an email address
      tags:
      - users
      x-accepts:
      - application/json
      - text/html
    get:
      operationId: users_emails_read
      parameters:
      - description: Email unique identifier expressed as UUID.
        in: path
        name: email_id
        required: true
        schema:
          type: string
      - description: User unique identifier expressed as UUID or username.
        in: path
        name: user
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              example:
                address: post@email.com
                id: 383e0d16-2052-4196-95b8-d9d73ed043a9
                public: true
                unsubscribed: false
              schema:
                $ref: '#/components/schemas/Email'
            text/html:
              schema:
                $ref: '#/components/schemas/Email'
          description: Email retrieved
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
            text/html:
              schema:
                $ref: '#/components/schemas/NotFound'
          description: Email not found
      summary: Retrieve a user's email addresses
      tags:
      - users
      x-accepts:
      - application/json
      - text/html
    patch:
      operationId: users_emails_update
      parameters:
      - description: Email unique identifier expressed as UUID.
        in: path
        name: email_id
        required: true
        schema:
          type: string
      - description: User unique identifier expressed as UUID or username.
        in: path
        name: user
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmailData'
        required: false
      responses:
        "200":
          content:
            application/json:
              example:
                address: patch@email.com
                id: 383e0d16-2052-4196-95b8-d9d73ed043a9
                public: false
                unsubscribed: false
              schema:
                $ref: '#/components/schemas/Email'
            text/html:
              schema:
                $ref: '#/components/schemas/Email'
          description: Email updated
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmailError'
            text/html:
              schema:
                $ref: '#/components/schemas/EmailError'
          description: Invalid data supplied
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
            text/html:
              schema:
                $ref: '#/components/schemas/NotFound'
          description: Email not found
      summary: Update an email address
      tags:
      - users
      x-codegen-request-body-name: email_data
      x-content-type: application/json
      x-accepts:
      - application/json
      - text/html
    put:
      operationId: users_emails_replace
      parameters:
      - description: Email unique identifier expressed as UUID.
        in: path
        name: email_id
        required: true
        schema:
          type: string
      - description: User unique identifier expressed as UUID or username.
        in: path
        name: user
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmailData'
        required: false
      responses:
        "200":
          content:
            application/json:
              example:
                address: put@email.com
                id: 383e0d16-2052-4196-95b8-d9d73ed043a9
                public: false
                unsubscribed: true
              schema:
                $ref: '#/components/schemas/Email'
            text/html:
              schema:
                $ref: '#/components/schemas/Email'
          description: Email updated
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmailError'
            text/html:
              schema:
                $ref: '#/components/schemas/EmailError'
          description: Invalid data supplied
      summary: Replace an email address
      tags:
      - users
      x-codegen-request-body-name: email_data
      x-content-type: application/json
      x-accepts:
      - application/json
      - text/html
  /v1/users/{user}/ssh-key/:
    get:
      operationId: users_ssh-key_list
      parameters:
      - description: User unique identifier expressed as UUID or username.
        in: path
        name: user
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              example:
                key: ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQCqadyIPIEOF4M7SDoI+MHnAj6q2CY2j62Eg0sNbBbjnuekxnhSWVVKPte+NVtK4MWIyw3wnCCzTjwe0p2pQpMqxjqnCAkBPGhOjrRWTvV54hHTihBxiAEmXqbaBg5e6SaXcqP1OajWYzDqhts4ISer0uymzi0hW65At5i5k87Xu9HSM/Q0ySVJGm0rMuDCIoaTIeQdTkAI9ww/cmOM7uvIDO0OJv2xai9xLB9APVq8zCtqWdivMaqo2waPDT/I9bwtSZxRsnRMakGmj3CWvciHv13UsGlbB7nTeDKX0eyQl/5SADLO0bU+hY/8BpRjjtdq57Pqn/Xyw22YarDkG74gjLG5GBFZkBxcpENoUtCUyE2bhBT4x9yXlTeycMBTopGtzTfIHrJtIgNCFMhg9LbK4IKP/1pLj8SrVaQ9/k/QkxmDFoqfwdGd3AWOghMCAbAB7KaDKrj/XBf/KgTd8ZozjvkTzu2YRf4o3DebxRJipPQumrH3iXX5Kfe9lBWkR7Smewwp2XZrdgBeXN/54hd+Ic3upi528IGzEzu3/xtLT/e7kLi1QH7CVVN1sskZkIRr7aukw4YiVWgVOAlqKzJEoE/BPZSOA0NlgG0h37ZmyhdY1VqtoD+Vnj7Qh272PlTB14ndEVTqGuZhsCSxIhXev+METZ6XezK5n1VQeHGveQ==
          description: SSH Key.
      summary: Retrieve an SSH key
      tags:
      - users
      x-accepts:
      - application/json
  /v1/users/{user}/ssh-key/reset/:
    post:
      operationId: users_ssh-key_reset
      parameters:
      - description: User unique identifier expressed as UUID or username.
        in: path
        name: user
        required: true
        schema:
          type: string
      responses:
        "201":
          content:
            application/json:
              example:
                key: ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQDhMvg2+n2yNu0H2Hg8uiXfQtAid0WGRigNckb5J0T9GFINmqkYalI/AsWZbl4UfNMviD73h9xowUx+d7s2vB3E8bFxB9OWM22eLSp8fnbuhdI5mKBflq0jr6ms1cR/SD3YsbZ9sX6BqycQrjjYYl7WLM9rgec6b+EYyr/6nbDH/wql06TrNl6LUNkqI+YIqjRvqMeNEY9ux3sB+f46FRKO683u/cRCcp1eWAYf1ByYupIGREbQFLxhYv/NcKD8uIo7DRAuutwHKGOgnAl4WGUVsT5dplhaDYKlDTf2iMiJ+QDT25QABdrkHcIsu5D21AIdH3FI5UQnnu4unyEA77IDLp2EwKRr9k1XQc1o3zQ61+9Gm7Rt80WWgRsnhmshvAIDNcBv1+82kmA9jyeUf3M7KoRJLk6nIbZ1NwoVCX0VF3lRIB0Hvm/dL7Rpk8m/hE0SIIWIGaXbOT4ANFj+TxcF1Mfk7C3/T5/AYLHcq9ocYFKe4Q3Jv7tuHm600edpUfORdpCpjytcKStza07dRDa+OU577r6a1zHMrEMh8oEUtVO5pC1+EaRijTVaOR62DoarHdxJ23Ctk44o0JZfzj9VoVaAwVAhL1aT3pAQxQlWiTKpmYaHUYUp9SRJhyeFr/gpeIGTydKdawkh9Mz8KMlnu1GUolDDuOvSnvidzWaEaw==
          description: Reset SSH Key successfully.
        "400":
          content: {}
          description: Invalid data supplied.
      summary: Recreate an SSH key
      tags:
      - users
      x-accepts:
      - application/json
  /v1/{namespace}/billing/cards/:
    get:
      operationId: billing_cards_list
      parameters:
      - description: User or team name.
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Set limit when retrieving credit or debit cards.
        in: query
        name: limit
        schema:
          type: string
      - description: Set offset when retriving cards.
        in: query
        name: offset
        schema:
          type: string
      - description: Order when retrieving cards.
        in: query
        name: ordering
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              example: []
              schema:
                items:
                  $ref: '#/components/schemas/Card'
                type: array
            text/html:
              schema:
                items:
                  $ref: '#/components/schemas/Card'
                type: array
          description: Card list
      summary: Get credit cards
      tags:
      - billing
      x-accepts:
      - application/json
      - text/html
    post:
      operationId: billing_cards_create
      parameters:
      - description: User or team name.
        in: path
        name: namespace
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CardDataPost'
        required: false
      responses:
        "201":
          content:
            application/json:
              example:
                address_city: Atlanta
                address_country: United States
                address_line1: 3423 Piedmont Rd NE
                address_line1_check: pass
                address_line2: ""
                address_state: Georgia
                address_zip: "30305"
                address_zip_check: pass
                brand: Visa
                created: 2017-07-24T15:16:07.995380Z
                customer: 7e102c7b-55cd-49a0-9b23-58865eba1cc3
                cvc_check: ""
                exp_month: 1
                exp_year: 2019
                fingerprint: WpZ4zQymdmF5LhbH
                funding: credit
                id: 4126086e-525a-4027-b9e7-ae8de47210b2
                last4: "4242"
                name: John Doe
                stripe_id: card_1Aj8HuLUHPUzUsaQlDbaXjzA
              schema:
                $ref: '#/components/schemas/Card'
            text/html:
              schema:
                $ref: '#/components/schemas/Card'
          description: Card created
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardError'
            text/html:
              schema:
                $ref: '#/components/schemas/CardError'
          description: Invalid data supplied
      summary: Create new credit card
      tags:
      - billing
      x-codegen-request-body-name: card_data
      x-content-type: application/json
      x-accepts:
      - application/json
      - text/html
  /v1/{namespace}/billing/cards/{id}/:
    delete:
      operationId: billing_cards_delete
      parameters:
      - description: User or team name.
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Card unique identifier expressed as UUID.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: Card deleted.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
            text/html:
              schema:
                $ref: '#/components/schemas/NotFound'
          description: Card not found.
      summary: Delete a credit card
      tags:
      - billing
      x-accepts:
      - application/json
      - text/html
    get:
      operationId: billing_cards_read
      parameters:
      - description: User or team name.
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: User unique identifier expressed as UUID.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              example:
                address_city: Atlanta
                address_country: United States
                address_line1: 3423 Piedmont Rd NE
                address_line1_check: pass
                address_line2: ""
                address_state: Georgia
                address_zip: "30305"
                address_zip_check: pass
                brand: Visa
                created: 2017-07-24T15:16:07.995380Z
                customer: 7e102c7b-55cd-49a0-9b23-58865eba1cc3
                cvc_check: ""
                exp_month: 1
                exp_year: 2019
                fingerprint: WpZ4zQymdmF5LhbH
                funding: credit
                id: 4126086e-525a-4027-b9e7-ae8de47210b2
                last4: "4242"
                name: John Doe
                stripe_id: card_1Aj8HuLUHPUzUsaQlDbaXjzA
              schema:
                $ref: '#/components/schemas/Card'
            text/html:
              schema:
                $ref: '#/components/schemas/Card'
          description: Card retrieved.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
            text/html:
              schema:
                $ref: '#/components/schemas/NotFound'
          description: Card not found.
      summary: Get credit card by id
      tags:
      - billing
      x-accepts:
      - application/json
      - text/html
    patch:
      operationId: billing_cards_update
      parameters:
      - description: User or team name.
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Card unique identifier.
        in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CardDataPutandPatch'
        required: false
      responses:
        "200":
          content:
            application/json:
              example:
                address_city: Atlanta
                address_country: United States
                address_line1: 3423 Piedmont Rd NE
                address_line1_check: pass
                address_line2: ""
                address_state: Georgia
                address_zip: "30305"
                address_zip_check: pass
                brand: Visa
                created: 2017-07-24T15:16:10.806003Z
                customer: 7e102c7b-55cd-49a0-9b23-58865eba1cc3
                cvc_check: ""
                exp_month: 1
                exp_year: 2025
                fingerprint: WpZ4zQymdmF5LhbH
                funding: credit
                id: 4126086e-525a-4027-b9e7-ae8de47210b2
                last4: "4242"
                name: John Doe
                stripe_id: card_1Aj8HuLUHPUzUsaQlDbaXjzA
              schema:
                $ref: '#/components/schemas/Card'
            text/html:
              schema:
                $ref: '#/components/schemas/Card'
          description: Card updated
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardUpdateError'
            text/html:
              schema:
                $ref: '#/components/schemas/CardUpdateError'
          description: Invalid data supplied
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
            text/html:
              schema:
                $ref: '#/components/schemas/NotFound'
          description: Card not found
      summary: Update a credit card
      tags:
      - billing
      x-codegen-request-body-name: card_data
      x-content-type: application/json
      x-accepts:
      - application/json
      - text/html
    put:
      operationId: billing_cards_replace
      parameters:
      - description: User or team name.
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CardDataPutandPatch'
        required: false
      responses:
        "200":
          content:
            application/json:
              example:
                address_city: Atlanta
                address_country: United States
                address_line1: 3423 Piedmont Rd NE
                address_line1_check: pass
                address_line2: ""
                address_state: Georgia
                address_zip: "30305"
                address_zip_check: pass
                brand: Visa
                created: 2017-07-24T15:16:07.995380Z
                customer: 7e102c7b-55cd-49a0-9b23-58865eba1cc3
                cvc_check: ""
                exp_month: 1
                exp_year: 2027
                fingerprint: WpZ4zQymdmF5LhbH
                funding: credit
                id: 4126086e-525a-4027-b9e7-ae8de47210b2
                last4: "4242"
                name: John Doe
                stripe_id: card_1Aj8HuLUHPUzUsaQlDbaXjzA
              schema:
                $ref: '#/components/schemas/Card'
            text/html:
              schema:
                $ref: '#/components/schemas/Card'
          description: Card updated
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardError'
            text/html:
              schema:
                $ref: '#/components/schemas/CardError'
          description: Invalid data supplied
      summary: Replace a credit card
      tags:
      - billing
      x-codegen-request-body-name: card_data
      x-content-type: application/json
      x-accepts:
      - application/json
      - text/html
  /v1/{namespace}/billing/invoices/:
    get:
      operationId: billing_invoices_list
      parameters:
      - description: User or team name.
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Limit when getting items.
        in: query
        name: limit
        schema:
          type: string
      - description: Offset when getting items.
        in: query
        name: offset
        schema:
          type: string
      - description: Ordering when getting items.
        in: query
        name: ordering
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              example: []
              schema:
                items:
                  $ref: '#/components/schemas/Invoice'
                type: array
            text/html:
              schema:
                items:
                  $ref: '#/components/schemas/Invoice'
                type: array
          description: Invoice list.
      summary: Get invoices
      tags:
      - billing
      x-accepts:
      - application/json
      - text/html
  /v1/{namespace}/billing/invoices/{id}/:
    get:
      operationId: billing_invoices_read
      parameters:
      - description: User or team name.
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Invoice unique identifier expressed as UUID.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Invoice'
            text/html:
              schema:
                $ref: '#/components/schemas/Invoice'
          description: Invoice retrieved.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
            text/html:
              schema:
                $ref: '#/components/schemas/NotFound'
          description: Invoice not found.
      summary: Get an invoice
      tags:
      - billing
      x-accepts:
      - application/json
      - text/html
  /v1/{namespace}/billing/invoices/{invoice_id}/invoice-items/:
    get:
      operationId: billing_invoice_items_list
      parameters:
      - description: User or team name.
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: "Invoice id, expressed as UUID."
        in: path
        name: invoice_id
        required: true
        schema:
          type: string
      - description: Limit when getting items.
        in: query
        name: limit
        schema:
          type: string
      - description: Offset when getting items.
        in: query
        name: offset
        schema:
          type: string
      - description: Ordering when getting items.
        in: query
        name: ordering
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              example: []
              schema:
                items:
                  $ref: '#/components/schemas/InvoiceItem'
                type: array
            text/html:
              schema:
                items:
                  $ref: '#/components/schemas/InvoiceItem'
                type: array
          description: InvoiceItem list.
      summary: Get invoice items for a given invoice.
      tags:
      - billing
      x-accepts:
      - application/json
      - text/html
  /v1/{namespace}/billing/invoices/{invoice_id}/invoice-items/{id}:
    get:
      operationId: billing_invoice_items_read
      parameters:
      - description: User or team name.
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: "Invoice id, expressed as UUID."
        in: path
        name: invoice_id
        required: true
        schema:
          type: string
      - description: "InvoiceItem id, expressed as UUID."
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvoiceItem'
            text/html:
              schema:
                $ref: '#/components/schemas/InvoiceItem'
          description: InvoiceItem retrieved.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
            text/html:
              schema:
                $ref: '#/components/schemas/NotFound'
          description: InvoiceItem not found.
      summary: Get a specific InvoiceItem.
      tags:
      - billing
      x-accepts:
      - application/json
      - text/html
  /v1/{namespace}/billing/plans/:
    get:
      operationId: billing_plans_list
      parameters:
      - description: User or team name.
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Limit when getting items.
        in: query
        name: limit
        schema:
          type: string
      - description: Offset when getting items.
        in: query
        name: offset
        schema:
          type: string
      - description: Ordering when getting items.
        in: query
        name: ordering
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              example:
              - amount: 20
                created: 2017-07-24T15:46:39Z
                currency: usd
                id: d5791ab3-aefb-45af-80fc-2c7a166d78eb
                interval: year
                interval_count: 1
                livemode: false
                metadata: {}
                name: patch_billing_plan
                statement_descriptor: ""
                stripe_id: post_billing_plan
                trial_period_days: 7
              - amount: 20
                created: 2017-07-24T15:46:48Z
                currency: usd
                id: 256fd63a-9d6b-48d2-8ff5-f56eaf54c59b
                interval: week
                interval_count: 52
                livemode: false
                metadata: {}
                name: post_billing_plan_2
                statement_descriptor: ""
                stripe_id: post_billing_plan_2
                trial_period_days: 7
              - amount: 20
                created: 2017-07-24T15:46:52Z
                currency: usd
                id: 5915a2ae-12f5-4927-bb26-3b0609228791
                interval: month
                interval_count: 12
                livemode: false
                metadata: {}
                name: post_billing_plan_3
                statement_descriptor: ""
                stripe_id: post_billing_plan_3
                trial_period_days: 7
              schema:
                items:
                  $ref: '#/components/schemas/Plan'
                type: array
            text/html:
              schema:
                items:
                  $ref: '#/components/schemas/Plan'
                type: array
          description: Plan list.
      summary: Get billing plans
      tags:
      - billing
      x-accepts:
      - application/json
      - text/html
  /v1/{namespace}/billing/plans/{id}/:
    get:
      operationId: billing_plans_read
      parameters:
      - description: User or team name.
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Plan unique identifier expressed as UUID.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              example:
                amount: 20
                created: 2017-07-24T15:46:39Z
                currency: usd
                id: d5791ab3-aefb-45af-80fc-2c7a166d78eb
                interval: year
                interval_count: 1
                livemode: false
                metadata: {}
                name: post_billing_plan
                statement_descriptor: ""
                stripe_id: post_billing_plan
                trial_period_days: 7
              schema:
                $ref: '#/components/schemas/Plan'
            text/html:
              schema:
                $ref: '#/components/schemas/Plan'
          description: Plan retrieved
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
            text/html:
              schema:
                $ref: '#/components/schemas/NotFound'
          description: Plan not found
      summary: Get a billing plan
      tags:
      - billing
      x-accepts:
      - application/json
      - text/html
  /v1/{namespace}/billing/subscriptions/:
    get:
      operationId: billing_subscriptions_list
      parameters:
      - description: User or team name.
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Limit when getting items.
        in: query
        name: limit
        schema:
          type: string
      - description: Offset when getting items.
        in: query
        name: offset
        schema:
          type: string
      - description: Ordering when getting items.
        in: query
        name: ordering
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              example:
              - application_fee_percent: 0
                cancel_at_period_end: false
                canceled_at: ""
                created: 2017-07-24T17:25:04Z
                current_period_end: 2017-07-31T17:25:04Z
                current_period_start: 2017-07-24T17:25:04Z
                ended_at: ""
                id: 579208c3-4f5c-4b5d-baa3-309a06db681c
                livemode: false
                plan: efb36cb0-0ef2-4af3-ae5d-10d9ae73845d
                quantity: 1
                start: 2017-07-24T17:25:04Z
                status: trialing
                stripe_id: sub_B5KyO9BZ6lUNPP
                trial_end: 2017-07-31T17:25:04Z
                trial_start: 2017-07-24T17:25:04Z
              schema:
                items:
                  $ref: '#/components/schemas/Subscription'
                type: array
            text/html:
              schema:
                items:
                  $ref: '#/components/schemas/Subscription'
                type: array
          description: Subscription list.
      summary: Get active subscriptons
      tags:
      - billing
      x-accepts:
      - application/json
      - text/html
    post:
      operationId: billing_subscriptions_create
      parameters:
      - description: User or team name.
        in: path
        name: namespace
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubscriptionData'
        required: false
      responses:
        "201":
          content:
            application/json:
              example:
                application_fee_percent: 0
                cancel_at_period_end: false
                canceled_at: ""
                created: 2017-07-24T17:25:04Z
                current_period_end: 2017-07-31T17:25:04Z
                current_period_start: 2017-07-24T17:25:04Z
                ended_at: ""
                id: 579208c3-4f5c-4b5d-baa3-309a06db681c
                livemode: false
                plan: efb36cb0-0ef2-4af3-ae5d-10d9ae73845d
                quantity: 1
                start: 2017-07-24T17:25:04Z
                status: trialing
                stripe_id: sub_B5KyO9BZ6lUNPP
                trial_end: 2017-07-31T17:25:04Z
                trial_start: 2017-07-24T17:25:04Z
              schema:
                $ref: '#/components/schemas/Subscription'
            text/html:
              schema:
                $ref: '#/components/schemas/Subscription'
          description: Subscription created
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscriptionError'
            text/html:
              schema:
                $ref: '#/components/schemas/SubscriptionError'
          description: Invalid data supplied
      summary: Create a new subscription
      tags:
      - billing
      x-codegen-request-body-name: subscription_data
      x-content-type: application/json
      x-accepts:
      - application/json
      - text/html
  /v1/{namespace}/billing/subscriptions/{id}/:
    delete:
      operationId: billing_subscriptions_delete
      parameters:
      - description: User or team name.
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Subscription unique identifier expressed as UUID.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: Subscription deleted.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
            text/html:
              schema:
                $ref: '#/components/schemas/NotFound'
          description: Subscription not found.
      summary: Delete a subscription
      tags:
      - billing
      x-accepts:
      - application/json
      - text/html
    get:
      operationId: billing_subscriptions_read
      parameters:
      - description: User or team name.
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Unique identifier expressed as UUID.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subscription'
            text/html:
              schema:
                $ref: '#/components/schemas/Subscription'
          description: Subscription retrieved.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
            text/html:
              schema:
                $ref: '#/components/schemas/NotFound'
          description: Subscription not found.
      summary: Get a subscriptions
      tags:
      - billing
      x-accepts:
      - application/json
      - text/html
  /v1/{namespace}/notifications/:
    get:
      operationId: notifications_list
      parameters:
      - description: User or team data.
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Limit when getting items.
        in: query
        name: limit
        schema:
          type: string
      - description: Offset when getting items.
        in: query
        name: offset
        schema:
          type: string
      - description: Ordering when getting items.
        in: query
        name: ordering
        schema:
          type: string
      - description: "When true, get only read notifications. When false, get only\
          \ unread notifications. Default behavior is to return both read and unread."
        in: query
        name: read
        schema:
          type: boolean
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Notification'
                type: array
            text/html:
              schema:
                items:
                  $ref: '#/components/schemas/Notification'
                type: array
          description: List of notifications
      summary: Get notifications of all types and entities for the authenticated user.
      tags:
      - notifications
      x-accepts:
      - application/json
      - text/html
    patch:
      operationId: notifications_update_list
      parameters:
      - description: User or team name.
        in: path
        name: namespace
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NotificationListUpdateData'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Notification'
            text/html:
              schema:
                $ref: '#/components/schemas/Notification'
          description: Notification updated
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationError'
            text/html:
              schema:
                $ref: '#/components/schemas/NotificationError'
          description: Invalid data supplied
      summary: Mark a list of notifications as either read or unread.
      tags:
      - notifications
      x-codegen-request-body-name: notification_data
      x-content-type: application/json
      x-accepts:
      - application/json
      - text/html
  /v1/{namespace}/notifications/entity/{entity}:
    get:
      operationId: notifications_list_entity
      parameters:
      - description: User or team data.
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Limit when getting items.
        in: query
        name: limit
        schema:
          type: string
      - description: Offset when getting items.
        in: query
        name: offset
        schema:
          type: string
      - description: Ordering when getting items.
        in: query
        name: ordering
        schema:
          type: string
      - description: Entity to filter notifications by.
        in: path
        name: entity
        required: true
        schema:
          enum:
          - billing
          type: string
      - description: "When true, get only read notifications. When false, get only\
          \ unread notifications. Default behavior is to return both read and unread."
        in: query
        name: read
        schema:
          type: boolean
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Notification'
                type: array
            text/html:
              schema:
                items:
                  $ref: '#/components/schemas/Notification'
                type: array
          description: List of notifications
      summary: Get notifications of all types and entities for the authenticated user.
      tags:
      - notifications
      x-accepts:
      - application/json
      - text/html
    patch:
      operationId: notifications_update_entity_list
      parameters:
      - description: User or team name.
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Entity to filter notifications by.
        in: path
        name: entity
        required: true
        schema:
          enum:
          - billing
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NotificationListUpdateData'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Notification'
            text/html:
              schema:
                $ref: '#/components/schemas/Notification'
          description: Notification updated
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationError'
            text/html:
              schema:
                $ref: '#/components/schemas/NotificationError'
          description: Invalid data supplied
      summary: Mark a list of notifications as either read or unread.
      tags:
      - notifications
      x-codegen-request-body-name: notification_data
      x-content-type: application/json
      x-accepts:
      - application/json
      - text/html
  /v1/{namespace}/notifications/settings/:
    get:
      operationId: notification_settings_read
      parameters:
      - description: User or team data.
        in: path
        name: namespace
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/NotificationSettings'
                type: array
            text/html:
              schema:
                items:
                  $ref: '#/components/schemas/NotificationSettings'
                type: array
          description: Global notification settings
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
            text/html:
              schema:
                $ref: '#/components/schemas/NotFound'
          description: Notification not found.
      summary: Retrieve global notification settings for the authenticated user
      tags:
      - notifications
      x-accepts:
      - application/json
      - text/html
    patch:
      operationId: notification_settings_update
      parameters:
      - description: User or team name.
        in: path
        name: namespace
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NotificationSettingsData'
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationSettings'
            text/html:
              schema:
                $ref: '#/components/schemas/NotificationSettings'
          description: Notification Settings updated
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationSettingsError'
            text/html:
              schema:
                $ref: '#/components/schemas/NotificationSettingsError'
          description: Invalid data supplied
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
            text/html:
              schema:
                $ref: '#/components/schemas/NotFound'
          description: Notification Settings not found.
      summary: Modify global notification settings.
      tags:
      - notifications
      x-codegen-request-body-name: notification_settings_data
      x-content-type: application/json
      x-accepts:
      - application/json
      - text/html
    post:
      operationId: notification_settings_create
      parameters:
      - description: User or team name.
        in: path
        name: namespace
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NotificationSettingsData'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationSettings'
            text/html:
              schema:
                $ref: '#/components/schemas/NotificationSettings'
          description: Global Notification Settings created successfully.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationSettingsError'
            text/html:
              schema:
                $ref: '#/components/schemas/NotificationSettingsError'
          description: Invalid data supplied.
      summary: Create global notification settings
      tags:
      - notifications
      x-codegen-request-body-name: notification_settings_data
      x-content-type: application/json
      x-accepts:
      - application/json
      - text/html
  /v1/{namespace}/notifications/settings/entity/{entity}:
    get:
      operationId: notification_settings_entity_read
      parameters:
      - description: User or team data.
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Entity whose settings should be retrieved.
        in: path
        name: entity
        required: true
        schema:
          enum:
          - billing
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/NotificationSettings'
                type: array
            text/html:
              schema:
                items:
                  $ref: '#/components/schemas/NotificationSettings'
                type: array
          description: Global notification settings
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
            text/html:
              schema:
                $ref: '#/components/schemas/NotFound'
          description: Notification not found.
      summary: Retrieve global notification settings for the authenticated user
      tags:
      - notifications
      x-accepts:
      - application/json
      - text/html
    patch:
      operationId: notification_settings_entity_update
      parameters:
      - description: User or team name.
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Entity whose settings should be retrieved.
        in: path
        name: entity
        required: true
        schema:
          enum:
          - billing
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NotificationSettingsData'
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationSettings'
            text/html:
              schema:
                $ref: '#/components/schemas/NotificationSettings'
          description: Notification Settings updated
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationSettingsError'
            text/html:
              schema:
                $ref: '#/components/schemas/NotificationSettingsError'
          description: Invalid data supplied
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
            text/html:
              schema:
                $ref: '#/components/schemas/NotFound'
          description: Notification Settings not found.
      summary: Modify global notification settings.
      tags:
      - notifications
      x-codegen-request-body-name: notification_settings_data
      x-content-type: application/json
      x-accepts:
      - application/json
      - text/html
    post:
      operationId: notification_settings_entity_create
      parameters:
      - description: User or team name.
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Entity whose settings should be retrieved.
        in: path
        name: entity
        required: true
        schema:
          enum:
          - billing
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NotificationSettingsData'
        required: false
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationSettings'
            text/html:
              schema:
                $ref: '#/components/schemas/NotificationSettings'
          description: Global Notification Settings created successfully.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationSettingsError'
            text/html:
              schema:
                $ref: '#/components/schemas/NotificationSettingsError'
          description: Invalid data supplied.
      summary: Create global notification settings
      tags:
      - notifications
      x-codegen-request-body-name: notification_settings_data
      x-content-type: application/json
      x-accepts:
      - application/json
      - text/html
  /v1/{namespace}/notifications/{notification_id}:
    get:
      operationId: notification_read
      parameters:
      - description: User or team data.
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Notification UUID.
        in: path
        name: notification_id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Notification'
            text/html:
              schema:
                $ref: '#/components/schemas/Notification'
          description: Retrieve a notification.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
            text/html:
              schema:
                $ref: '#/components/schemas/NotFound'
          description: Notification not found.
      summary: Retrieve a specific notification.
      tags:
      - notifications
      x-accepts:
      - application/json
      - text/html
    patch:
      operationId: notification_update
      parameters:
      - description: User or team data.
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Notification UUID.
        in: path
        name: notification_id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NotificationUpdateData'
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Notification'
            text/html:
              schema:
                $ref: '#/components/schemas/Notification'
          description: Notification updated
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationError'
            text/html:
              schema:
                $ref: '#/components/schemas/NotificationError'
          description: Invalid data supplied
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
            text/html:
              schema:
                $ref: '#/components/schemas/NotFound'
          description: Notification not found.
      summary: Mark a specific notification as either read or unread.
      tags:
      - notifications
      x-codegen-request-body-name: notification_data
      x-content-type: application/json
      x-accepts:
      - application/json
      - text/html
  /v1/{namespace}/oauth/applications/:
    get:
      operationId: oauth_applications_list
      parameters:
      - description: User or team name.
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Set limit when retrieving items.
        in: query
        name: limit
        schema:
          type: string
      - description: Offset when retrieving items.
        in: query
        name: offset
        schema:
          type: string
      - description: Set order when retrieving items.
        in: query
        name: ordering
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              example:
              - authorization_grant_type: client-credentials
                client_id: CsJiQuhq66C6QP7ZKYzclOwrSVKctdYAbAXu7iHm
                client_secret: iIzh1cidklpF6eoCin986j0YTDS3hjgH1JDs4Wv4jriG7yXpJu8TfoKmtMC4QTRBbF2IzJnfRLBGdZvKm1koyS9xfGfdTDSi5JAVJAwTrxw0VAkZZr0u80afSQ9OVKvJ
                client_type: confidential
                id: 7011a6e6-b4ea-4600-8ab1-01127e1ccdda
                name: Test
                redirect_uris: ""
              schema:
                items:
                  $ref: '#/components/schemas/Application'
                type: array
            text/html:
              schema:
                items:
                  $ref: '#/components/schemas/Application'
                type: array
          description: OAuth2 application list
      summary: Retrieve oauth applications
      tags:
      - oauth
      x-accepts:
      - application/json
      - text/html
    post:
      operationId: oauth_application_create
      parameters:
      - description: User or team name.
        in: path
        name: namespace
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApplicationData'
        required: false
      responses:
        "201":
          content:
            application/json:
              example:
                authorization_grant_type: client-credentials
                client_id: CsJiQuhq66C6QP7ZKYzclOwrSVKctdYAbAXu7iHm
                client_secret: iIzh1cidklpF6eoCin986j0YTDS3hjgH1JDs4Wv4jriG7yXpJu8TfoKmtMC4QTRBbF2IzJnfRLBGdZvKm1koyS9xfGfdTDSi5JAVJAwTrxw0VAkZZr0u80afSQ9OVKvJ
                client_type: confidential
                id: 7011a6e6-b4ea-4600-8ab1-01127e1ccdda
                name: Test
                redirect_uris: ""
              schema:
                $ref: '#/components/schemas/Application'
            text/html:
              schema:
                $ref: '#/components/schemas/Application'
          description: Application created.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationError'
            text/html:
              schema:
                $ref: '#/components/schemas/ApplicationError'
          description: Invalid data supplied
      summary: Create a new OAuth2 application
      tags:
      - oauth
      x-codegen-request-body-name: application_data
      x-content-type: application/json
      x-accepts:
      - application/json
      - text/html
  /v1/{namespace}/oauth/applications/{application}/:
    delete:
      operationId: oauth_application_delete
      parameters:
      - description: User or team name.
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Application unique identifier expressed as UUID or name.
        in: path
        name: application
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: Application deleted.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
            text/html:
              schema:
                $ref: '#/components/schemas/NotFound'
          description: Application not found.
      summary: Delete an application by id
      tags:
      - oauth
      x-accepts:
      - application/json
      - text/html
    get:
      operationId: oauth_application_read
      parameters:
      - description: User or team name.
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Application unique identifier expressed as UUID or name.
        in: path
        name: application
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              example:
                authorization_grant_type: client-credentials
                client_id: CsJiQuhq66C6QP7ZKYzclOwrSVKctdYAbAXu7iHm
                client_secret: iIzh1cidklpF6eoCin986j0YTDS3hjgH1JDs4Wv4jriG7yXpJu8TfoKmtMC4QTRBbF2IzJnfRLBGdZvKm1koyS9xfGfdTDSi5JAVJAwTrxw0VAkZZr0u80afSQ9OVKvJ
                client_type: confidential
                id: 7011a6e6-b4ea-4600-8ab1-01127e1ccdda
                name: Test
                redirect_uris: ""
              schema:
                $ref: '#/components/schemas/Application'
            text/html:
              schema:
                $ref: '#/components/schemas/Application'
          description: Application retrieved.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
            text/html:
              schema:
                $ref: '#/components/schemas/NotFound'
          description: Application not found.
      summary: Get an application by id
      tags:
      - oauth
      x-accepts:
      - application/json
      - text/html
    patch:
      operationId: oauth_application_update
      parameters:
      - description: User or team name.
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Application unique identifier expressed as UUID or name.
        in: path
        name: application
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApplicationData'
        required: false
      responses:
        "200":
          content:
            application/json:
              example:
                authorization_grant_type: client-credentials
                client_id: CsJiQuhq66C6QP7ZKYzclOwrSVKctdYAbAXu7iHm
                client_secret: iIzh1cidklpF6eoCin986j0YTDS3hjgH1JDs4Wv4jriG7yXpJu8TfoKmtMC4QTRBbF2IzJnfRLBGdZvKm1koyS9xfGfdTDSi5JAVJAwTrxw0VAkZZr0u80afSQ9OVKvJ
                client_type: confidential
                id: 7011a6e6-b4ea-4600-8ab1-01127e1ccdda
                name: Test
                redirect_uris: ""
              schema:
                $ref: '#/components/schemas/Application'
            text/html:
              schema:
                $ref: '#/components/schemas/Application'
          description: Application updated.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationError'
            text/html:
              schema:
                $ref: '#/components/schemas/ApplicationError'
          description: Invalid data supplied.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
            text/html:
              schema:
                $ref: '#/components/schemas/NotFound'
          description: Application not found.
      summary: Update an application by id
      tags:
      - oauth
      x-codegen-request-body-name: application_data
      x-content-type: application/json
      x-accepts:
      - application/json
      - text/html
    put:
      operationId: oauth_application_replace
      parameters:
      - description: User or team name.
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Application unique identifier expressed as UUID or name.
        in: path
        name: application
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApplicationData'
        required: false
      responses:
        "200":
          content:
            application/json:
              example:
                authorization_grant_type: client-credentials
                client_id: CsJiQuhq66C6QP7ZKYzclOwrSVKctdYAbAXu7iHm
                client_secret: iIzh1cidklpF6eoCin986j0YTDS3hjgH1JDs4Wv4jriG7yXpJu8TfoKmtMC4QTRBbF2IzJnfRLBGdZvKm1koyS9xfGfdTDSi5JAVJAwTrxw0VAkZZr0u80afSQ9OVKvJ
                client_type: confidential
                id: 7011a6e6-b4ea-4600-8ab1-01127e1ccdda
                name: Test
                redirect_uris: ""
              schema:
                $ref: '#/components/schemas/Application'
            text/html:
              schema:
                $ref: '#/components/schemas/Application'
          description: Application replaced.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationError'
            text/html:
              schema:
                $ref: '#/components/schemas/ApplicationError'
          description: Invalid data supplied.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
            text/html:
              schema:
                $ref: '#/components/schemas/NotFound'
          description: Application not found
      summary: Replace an application by id
      tags:
      - oauth
      x-codegen-request-body-name: oauth_application_data
      x-content-type: application/json
      x-accepts:
      - application/json
      - text/html
  /v1/{namespace}/projects/:
    get:
      operationId: projects_list
      parameters:
      - description: User or team name.
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Limit when getting data.
        in: query
        name: limit
        schema:
          type: string
      - description: Offset when getting data.
        in: query
        name: offset
        schema:
          type: string
      - description: Private project or public project.
        in: query
        name: private
        schema:
          type: string
      - description: Project name.
        in: query
        name: name
        schema:
          type: string
      - description: Ordering when getting projects.
        in: query
        name: ordering
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              example: []
              schema:
                items:
                  $ref: '#/components/schemas/Project'
                type: array
            text/html:
              schema:
                items:
                  $ref: '#/components/schemas/Project'
                type: array
          description: Project list.
      summary: Get available projects
      tags:
      - projects
      x-accepts:
      - application/json
      - text/html
    post:
      operationId: projects_create
      parameters:
      - description: User or team name.
        in: path
        name: namespace
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectData'
        required: false
      responses:
        "201":
          content:
            application/json:
              example:
                collaborators:
                - johndoe
                description: Project created by me
                id: 79cadd17-5738-4f02-8377-68e67d3eee18
                last_updated: 2017-07-24T14:54:38.797878Z
                name: myProject
                owner: johndoe
                private: false
              schema:
                $ref: '#/components/schemas/Project'
            text/html:
              schema:
                $ref: '#/components/schemas/Project'
          description: Project created
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectError'
            text/html:
              schema:
                $ref: '#/components/schemas/ProjectError'
          description: Invalid data supplied
      summary: Create a new project
      tags:
      - projects
      x-codegen-request-body-name: project_data
      x-content-type: application/json
      x-accepts:
      - application/json
      - text/html
  /v1/{namespace}/projects/project-copy-check/:
    head:
      operationId: project_copy_check
      parameters:
      - description: User or team name.
        in: path
        name: namespace
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/project_copy_check_request'
        required: true
      responses:
        "200":
          content: {}
          description: The authenticated has permission to copy this project
        "404":
          content: {}
          description: Project not found.
      summary: Check if you are able to copy a project to your account.
      tags:
      - projects
      x-codegen-request-body-name: project_copy_data
      x-content-type: application/json
      x-accepts:
      - application/json
  /v1/{namespace}/projects/project-copy/:
    post:
      operationId: project_copy
      parameters:
      - description: User or team name.
        in: path
        name: namespace
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/project_copy_request'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
            text/html:
              schema:
                $ref: '#/components/schemas/Project'
          description: Project copied
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectError'
            text/html:
              schema:
                $ref: '#/components/schemas/ProjectError'
          description: Invalid data supplied
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
            text/html:
              schema:
                $ref: '#/components/schemas/NotFound'
          description: Project not found.
      summary: Copy a project to your own account.
      tags:
      - projects
      x-codegen-request-body-name: project_copy_data
      x-content-type: application/json
      x-accepts:
      - application/json
      - text/html
  /v1/{namespace}/projects/{project}/:
    delete:
      operationId: projects_delete
      parameters:
      - description: User or team name.
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Project unique identifier expressed as UUID or name.
        in: path
        name: project
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: Project deleted.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
            text/html:
              schema:
                $ref: '#/components/schemas/NotFound'
          description: Project not found.
      summary: Delete a project
      tags:
      - projects
      x-accepts:
      - application/json
      - text/html
    get:
      operationId: projects_read
      parameters:
      - description: User or team name.
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Project unique identifier expressed as UUID or name.
        in: path
        name: project
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              example:
                collaborators:
                - johndoe
                description: Project created by me
                id: 79cadd17-5738-4f02-8377-68e67d3eee18
                last_updated: 2017-07-24T14:54:38.797878Z
                name: myProject
                owner: johndoe
                private: false
              schema:
                $ref: '#/components/schemas/Project'
            text/html:
              schema:
                $ref: '#/components/schemas/Project'
          description: Project retrieved.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
            text/html:
              schema:
                $ref: '#/components/schemas/NotFound'
          description: Project not found.
      summary: Get a project
      tags:
      - projects
      x-accepts:
      - application/json
      - text/html
    patch:
      operationId: projects_update
      parameters:
      - description: User or team name.
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Project unique identifier expressed as UUID or name.
        in: path
        name: project
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectData'
        required: false
      responses:
        "200":
          content:
            application/json:
              example:
                collaborators:
                - johndoe
                description: My project updated by me using PATCH
                id: 79cadd17-5738-4f02-8377-68e67d3eee18
                last_updated: 2017-07-24T14:54:43.225603Z
                name: myProject
                owner: johndoe
                private: true
              schema:
                $ref: '#/components/schemas/Project'
            text/html:
              schema:
                $ref: '#/components/schemas/Project'
          description: Project updated
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectError'
            text/html:
              schema:
                $ref: '#/components/schemas/ProjectError'
          description: Invalid data supplied
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
            text/html:
              schema:
                $ref: '#/components/schemas/NotFound'
          description: Project not found
      summary: Update a project
      tags:
      - projects
      x-codegen-request-body-name: project_data
      x-content-type: application/json
      x-accepts:
      - application/json
      - text/html
    put:
      operationId: projects_replace
      parameters:
      - description: User or team namespace.
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Project unique identifier expressed as UUID or name.
        in: path
        name: project
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectData'
        required: false
      responses:
        "200":
          content:
            application/json:
              example:
                collaborators:
                - johndoe
                description: My project updated by me using PUT
                id: 79cadd17-5738-4f02-8377-68e67d3eee18
                last_updated: 2017-07-24T14:54:43.225603Z
                name: myProject
                owner: johndoe
                private: true
              schema:
                $ref: '#/components/schemas/Project'
            text/html:
              schema:
                $ref: '#/components/schemas/Project'
          description: Project updated.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectError'
            text/html:
              schema:
                $ref: '#/components/schemas/ProjectError'
          description: Invalid data supplied.
      summary: Replace a project
      tags:
      - projects
      x-codegen-request-body-name: project_data
      x-content-type: application/json
      x-accepts:
      - application/json
      - text/html
  /v1/{namespace}/projects/{project}/collaborators/:
    get:
      operationId: projects_collaborators_list
      parameters:
      - description: Project unique identifier expressed as UUID or name.
        in: path
        name: project
        required: true
        schema:
          type: string
      - description: User or team name.
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Limit when retrieving items.
        in: query
        name: limit
        schema:
          type: string
      - description: Offset when retrieving items.
        in: query
        name: offset
        schema:
          type: string
      - description: Ordering when retrieving items.
        in: query
        name: ordering
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              example:
              - email: johndoe@example.com
                first_name: John
                id: 42946cd9-2fb6-4764-944b-e107b972dd97
                joined: 2017-07-24T14:54:38.819171Z
                last_name: Doe
                owner: true
                permissions:
                - read_project
                - write_project
                username: johndoe
              schema:
                items:
                  $ref: '#/components/schemas/Collaborator'
                type: array
            text/html:
              schema:
                items:
                  $ref: '#/components/schemas/Collaborator'
                type: array
          description: Collaborator list.
      summary: Get project collaborators
      tags:
      - projects
      x-accepts:
      - application/json
      - text/html
    post:
      operationId: projects_collaborators_create
      parameters:
      - description: Project unique identifier expressed as UUID or name.
        in: path
        name: project
        required: true
        schema:
          type: string
      - description: User or team name.
        in: path
        name: namespace
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CollaboratorData'
        required: false
      responses:
        "201":
          content:
            application/json:
              example:
                email: collaborator@examples.com
                first_name: John
                id: ef4d3a93-ae36-428c-b00f-5805b496ed95
                joined: 2017-07-24T14:54:49.205912Z
                last_name: Doe
                owner: false
                permissions:
                - read_project
                - write_project
                username: collaborator
              schema:
                $ref: '#/components/schemas/Collaborator'
            text/html:
              schema:
                $ref: '#/components/schemas/Collaborator'
          description: Collaborator created.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollaboratorError'
            text/html:
              schema:
                $ref: '#/components/schemas/CollaboratorError'
          description: Invalid data supplied.
      summary: Create project collaborators
      tags:
      - projects
      x-codegen-request-body-name: collaborator_data
      x-content-type: application/json
      x-accepts:
      - application/json
      - text/html
  /v1/{namespace}/projects/{project}/collaborators/{collaborator}/:
    delete:
      operationId: projects_collaborators_delete
      parameters:
      - description: Project unique identifier.
        in: path
        name: project
        required: true
        schema:
          type: string
      - description: User or team name.
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Collaborator unique identifier.
        in: path
        name: collaborator
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: Collaborator deleted.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
            text/html:
              schema:
                $ref: '#/components/schemas/NotFound'
          description: Collaborator not found.
      summary: Delete a project collaborator
      tags:
      - projects
      x-accepts:
      - application/json
      - text/html
    get:
      operationId: projects_collaborators_read
      parameters:
      - description: Project unique identifier.
        in: path
        name: project
        required: true
        schema:
          type: string
      - description: User or team name.
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Collaborator unique identifier expressed as UUID or name.
        in: path
        name: collaborator
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              example:
                email: collaborator@illumidesk.com
                first_name: John
                id: ef4d3a93-ae36-428c-b00f-5805b496ed95
                joined: 2017-07-24T14:54:49.205912Z
                last_name: Doe
                owner: false
                permissions:
                - read_project
                - write_project
                username: collaborator
              schema:
                $ref: '#/components/schemas/Collaborator'
            text/html:
              schema:
                $ref: '#/components/schemas/Collaborator'
          description: Collaborator retrieved.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
            text/html:
              schema:
                $ref: '#/components/schemas/NotFound'
          description: Collaborator not found.
      summary: Get a project collaborator
      tags:
      - projects
      x-accepts:
      - application/json
      - text/html
    patch:
      operationId: projects_collaborators_update
      parameters:
      - in: path
        name: project
        required: true
        schema:
          type: string
      - description: User or team name.
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: collaborator
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CollaboratorData'
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Collaborator'
            text/html:
              schema:
                $ref: '#/components/schemas/Collaborator'
          description: Collaborator updated
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollaboratorError'
            text/html:
              schema:
                $ref: '#/components/schemas/CollaboratorError'
          description: Invalid data supplied
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
            text/html:
              schema:
                $ref: '#/components/schemas/NotFound'
          description: Collaborator not found
      summary: Update project collaborator
      tags:
      - projects
      x-codegen-request-body-name: collaborator_data
      x-content-type: application/json
      x-accepts:
      - application/json
      - text/html
  /v1/{namespace}/projects/{project}/deployments/:
    get:
      operationId: projects_deployments_list
      parameters:
      - description: Project unique identifier expressed as UUID or name.
        in: path
        name: project
        required: true
        schema:
          type: string
      - description: User or team name.
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Limit results when getting deployment list.
        in: query
        name: limit
        schema:
          type: string
      - description: Offset results when getting deployment list.
        in: query
        name: offset
        schema:
          type: string
      - description: Server name.
        in: query
        name: name
        schema:
          type: string
      - description: Ordering option when getting deployment list.
        in: query
        name: ordering
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              example: []
              schema:
                items:
                  $ref: '#/components/schemas/Deployment'
                type: array
            text/html:
              schema:
                items:
                  $ref: '#/components/schemas/Deployment'
                type: array
          description: Deployment list.
      summary: Retrieve deployments
      tags:
      - projects
      x-accepts:
      - application/json
      - text/html
    post:
      operationId: projects_deployments_create
      parameters:
      - description: Project unique identifer expressed as UUID or name.
        in: path
        name: project
        required: true
        schema:
          type: string
      - description: User or team name.
        in: path
        name: namespace
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeploymentData'
        required: false
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Deployment'
            text/html:
              schema:
                $ref: '#/components/schemas/Deployment'
          description: Deployment created.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeploymentError'
            text/html:
              schema:
                $ref: '#/components/schemas/DeploymentError'
          description: Invalid data supplied.
      summary: Create a new deployment
      tags:
      - projects
      x-codegen-request-body-name: deployment_data
      x-content-type: application/json
      x-accepts:
      - application/json
      - text/html
  /v1/{namespace}/projects/{project}/deployments/{deployment}/:
    delete:
      operationId: projects_deployment_delete
      parameters:
      - description: Project unique identifier.
        in: path
        name: project
        required: true
        schema:
          type: string
      - description: User or team name.
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: User unique identifier.
        in: path
        name: deployment
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: Deployment deleted
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
            text/html:
              schema:
                $ref: '#/components/schemas/NotFound'
          description: Deployment not found
      summary: Delete a deployment
      tags:
      - projects
      x-accepts:
      - application/json
      - text/html
    get:
      operationId: projects_deployments_read
      parameters:
      - description: Project unique identifier expressed as UUID or name.
        in: path
        name: project
        required: true
        schema:
          type: string
      - description: User or team name.
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Deployment unique identifier expressed as UUID or name.
        in: path
        name: deployment
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Deployment'
            text/html:
              schema:
                $ref: '#/components/schemas/Deployment'
          description: Deployment retrieved.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
            text/html:
              schema:
                $ref: '#/components/schemas/NotFound'
          description: Deployment not found.
      summary: Retrieve a deployment
      tags:
      - projects
      x-accepts:
      - application/json
      - text/html
    patch:
      operationId: projects_deployments_update
      parameters:
      - description: Project unique identifier expressed as UUID or name.
        in: path
        name: project
        required: true
        schema:
          type: string
      - description: User or team name.
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Deployment unique identifier expressed as UUID or name.
        in: path
        name: deployment
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeploymentData'
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Deployment'
            text/html:
              schema:
                $ref: '#/components/schemas/Deployment'
          description: Deployment updated
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeploymentData'
            text/html:
              schema:
                $ref: '#/components/schemas/DeploymentData'
          description: Invalid data supplied
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
            text/html:
              schema:
                $ref: '#/components/schemas/NotFound'
          description: Deployment not found
      summary: Update a deployment
      tags:
      - projects
      x-codegen-request-body-name: deployment_data
      x-content-type: application/json
      x-accepts:
      - application/json
      - text/html
    put:
      operationId: projects_deployments_replace
      parameters:
      - description: Project unique identifier expressed as UUID or name.
        in: path
        name: project
        required: true
        schema:
          type: string
      - description: User or team name.
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Deployment unique identifier expressed as UUID or name.
        in: path
        name: deployment
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeploymentData'
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Deployment'
            text/html:
              schema:
                $ref: '#/components/schemas/Deployment'
          description: Deployment updated.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeploymentError'
            text/html:
              schema:
                $ref: '#/components/schemas/DeploymentError'
          description: Invalid data supplied.
      summary: Replace a deployment
      tags:
      - projects
      x-codegen-request-body-name: deployment_data
      x-content-type: application/json
      x-accepts:
      - application/json
      - text/html
  /v1/{namespace}/projects/{project}/deployments/{deployment}/deploy/:
    post:
      operationId: projects_deployments_deploy
      parameters:
      - description: Project unique identifier expressed as UUID or name.
        in: path
        name: project
        required: true
        schema:
          type: string
      - description: User or team name.
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Deployment unique identifier expressed as UUID or name.
        in: path
        name: deployment
        required: true
        schema:
          type: string
      responses:
        "201":
          content: {}
          description: Deployment successful.
        "400":
          content: {}
          description: Invalid data supplied.
      summary: Deploy an existing model
      tags:
      - projects
      x-accepts:
      - application/json
  /v1/{namespace}/projects/{project}/project_files/:
    get:
      operationId: projects_project_files_list
      parameters:
      - description: Unique identifier for project file expressed as UUID or name.
        in: path
        name: project
        required: true
        schema:
          type: string
      - description: User or team name.
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Limit when getting project file list.
        in: query
        name: limit
        schema:
          type: string
      - description: Offset when getting project file list.
        in: query
        name: offset
        schema:
          type: string
      - description: Ordering of list values when getting project file list.
        in: query
        name: ordering
        schema:
          type: string
      - description: "Exact file name, relative to the project root. If no such file\
          \ is found, an empty list will be returned."
        in: query
        name: filename
        schema:
          type: string
      - description: Determines whether or not content is returned as base64. Defaults
          to false.
        in: query
        name: content
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ProjectFile'
                type: array
            text/html:
              schema:
                items:
                  $ref: '#/components/schemas/ProjectFile'
                type: array
          description: ProjectFile list
      summary: Get project files
      tags:
      - projects
      x-accepts:
      - application/json
      - text/html
    post:
      operationId: projects_project_files_create
      parameters:
      - description: Project unique identifier.
        in: path
        name: project
        required: true
        schema:
          type: string
      - description: User or team name.
        in: path
        name: namespace
        required: true
        schema:
          type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/projects_project_files_create_request'
          application/json:
            schema:
              $ref: '#/components/schemas/projects_project_files_create_request'
      responses:
        "201":
          content:
            application/json:
              example:
                file: http://api.illumidesk.com/media/johndoe/79cadd17-5738-4f02-8377-68e67d3eee18/foo
                id: 592ac8da-dbf5-4654-9127-8df9ba9280a3
                name: myfile
                path: ""
                project: 79cadd17-5738-4f02-8377-68e67d3eee18
                public: false
              schema:
                $ref: '#/components/schemas/ProjectFile'
            text/html:
              schema:
                $ref: '#/components/schemas/ProjectFile'
          description: ProjectFile created
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectFileError'
            text/html:
              schema:
                $ref: '#/components/schemas/ProjectFileError'
          description: Invalid data supplied
      summary: Create project files
      tags:
      - projects
      x-content-type: multipart/form-data
      x-accepts:
      - application/json
      - text/html
  /v1/{namespace}/projects/{project}/project_files/{id}/:
    delete:
      operationId: projects_project_files_delete
      parameters:
      - description: Project unique identifer.
        in: path
        name: project
        required: true
        schema:
          type: string
      - description: User or team name.
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: File unique identifier.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: ProjectFile deleted
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
            text/html:
              schema:
                $ref: '#/components/schemas/NotFound'
          description: ProjectFile not found
      summary: Delete a project file
      tags:
      - projects
      x-accepts:
      - application/json
      - text/html
    get:
      operationId: projects_project_files_read
      parameters:
      - description: Project unique identifer.
        in: path
        name: project
        required: true
        schema:
          type: string
      - description: User or team name.
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: File unique identifier.
        in: path
        name: id
        required: true
        schema:
          type: string
      - description: Determines whether or not content is returned as base64. Defaults
          to false.
        in: query
        name: content
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              example:
                file: http://api.illumidesk.com/media/johndoe/79cadd17-5738-4f02-8377-68e67d3eee18/myfile
                id: 592ac8da-dbf5-4654-9127-8df9ba9280a3
                name: myfile
                path: ""
                project: 79cadd17-5738-4f02-8377-68e67d3eee18
                public: false
              schema:
                $ref: '#/components/schemas/ProjectFile'
            text/html:
              schema:
                $ref: '#/components/schemas/ProjectFile'
          description: ProjectFile retrieved
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
            text/html:
              schema:
                $ref: '#/components/schemas/NotFound'
          description: ProjectFile not found
      summary: Get a project file
      tags:
      - projects
      x-accepts:
      - application/json
      - text/html
    patch:
      operationId: projects_project_files_update
      parameters:
      - description: Project unique identifer.
        in: path
        name: project
        required: true
        schema:
          type: string
      - description: User or team name.
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: File unique identifier.
        in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/projects_project_files_create_request'
      responses:
        "200":
          content:
            application/json:
              example:
                file: /media/johndoe/79cadd17-5738-4f02-8377-68e67d3eee18/myfile
                id: 592ac8da-dbf5-4654-9127-8df9ba9280a3
                name: foo
                path: ""
                project: 79cadd17-5738-4f02-8377-68e67d3eee18
                public: false
              schema:
                $ref: '#/components/schemas/ProjectFile'
            text/html:
              schema:
                $ref: '#/components/schemas/ProjectFile'
          description: ProjectFile updated.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectFileError'
            text/html:
              schema:
                $ref: '#/components/schemas/ProjectFileError'
          description: Invalid data supplied.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
            text/html:
              schema:
                $ref: '#/components/schemas/NotFound'
          description: ProjectFile not found.
      summary: Update a project file
      tags:
      - projects
      x-content-type: multipart/form-data
      x-accepts:
      - application/json
      - text/html
    put:
      operationId: projects_project_files_replace
      parameters:
      - description: Project unique identifer.
        in: path
        name: project
        required: true
        schema:
          type: string
      - description: User or team name.
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: File unique identifier.
        in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/projects_project_files_create_request'
      responses:
        "200":
          content:
            application/json:
              example:
                file: /media/johndoe/79cadd17-5738-4f02-8377-68e67d3eee18/myfile
                id: 592ac8da-dbf5-4654-9127-8df9ba9280a3
                name: myfile
                path: ""
                project: 79cadd17-5738-4f02-8377-68e67d3eee18
                public: false
              schema:
                $ref: '#/components/schemas/ProjectFile'
            text/html:
              schema:
                $ref: '#/components/schemas/ProjectFile'
          description: ProjectFile updated
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectFileError'
            text/html:
              schema:
                $ref: '#/components/schemas/ProjectFileError'
          description: Invalid data supplied.
      summary: Replace a project file
      tags:
      - projects
      x-content-type: multipart/form-data
      x-accepts:
      - application/json
      - text/html
  /v1/{namespace}/projects/{project}/servers/:
    get:
      operationId: projects_servers_list
      parameters:
      - description: Project unique identifier expressed as UUID or name.
        in: path
        name: project
        required: true
        schema:
          type: string
      - description: User or team name.
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Limit results when getting server list.
        in: query
        name: limit
        schema:
          type: string
      - description: Offset results when getting server list.
        in: query
        name: offset
        schema:
          type: string
      - description: Server name.
        in: query
        name: name
        schema:
          type: string
      - description: Ordering option when getting server list.
        in: query
        name: ordering
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              example: []
              schema:
                items:
                  $ref: '#/components/schemas/Server'
                type: array
            text/html:
              schema:
                items:
                  $ref: '#/components/schemas/Server'
                type: array
          description: Server list.
      summary: Retrieve servers
      tags:
      - projects
      x-accepts:
      - application/json
      - text/html
    post:
      operationId: projects_servers_create
      parameters:
      - description: Project unique identifer expressed as UUID or name.
        in: path
        name: project
        required: true
        schema:
          type: string
      - description: User or team name.
        in: path
        name: namespace
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServerData'
        required: false
      responses:
        "201":
          content:
            application/json:
              example:
                config:
                  type: jupyter
                connected: []
                created_at: 2017-07-24T13:41:57.089722Z
                endpoint: https://api.illumidesk.com/v1/johndoe/projects/d56271ef-eea7-44ad-8d46-828a288c7a3d/servers/768f6eef-d07b-40ce-bce1-0dcce5bfbfc3/endpoint/jupyter/tree
                host: ""
                id: 768f6eef-d07b-40ce-bce1-0dcce5bfbfc3
                image_name: ""
                logs_url: wss://api.illumidesk.com/v1/johndoe/projects/d56271ef-eea7-44ad-8d46-828a288c7a3d/servers/768f6eef-d07b-40ce-bce1-0dcce5bfbfc3/logs/
                name: testPostServer
                server_size: d16e2091-7596-481b-a50f-285812beb98c
                startup_script: ""
                status: Stopped
                status_url: wss://api.illumidesk.com/v1/johndoe/projects/d56271ef-eea7-44ad-8d46-828a288c7a3d/servers/768f6eef-d07b-40ce-bce1-0dcce5bfbfc3/status/
              schema:
                $ref: '#/components/schemas/Server'
            text/html:
              schema:
                $ref: '#/components/schemas/Server'
          description: Server created.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerError'
            text/html:
              schema:
                $ref: '#/components/schemas/ServerError'
          description: Invalid data supplied.
      summary: Create a new server
      tags:
      - projects
      x-codegen-request-body-name: server_data
      x-content-type: application/json
      x-accepts:
      - application/json
      - text/html
  /v1/{namespace}/projects/{project}/servers/statuses/:
    get:
      operationId: projects_servers_statuses
      parameters:
      - description: Project unique identifier expressed as UUID or name.
        in: path
        name: project
        required: true
        schema:
          type: string
      - description: User or team name.
        in: path
        name: namespace
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              example:
              - id: 768f6eef-d07b-40ce-bce1-0dcce5bfbfc3
                status: Running
              - id: 768f6eef-d07b-40ce-bce1-0dcce5bfbfc3
                status: Running
              schema:
                items:
                  $ref: '#/components/schemas/ServerStatus'
                type: array
            text/html:
              schema:
                items:
                  $ref: '#/components/schemas/ServerStatus'
                type: array
          description: Server statuses list.
      summary: Retrieve server statuses
      tags:
      - projects
      x-accepts:
      - application/json
      - text/html
  /v1/{namespace}/projects/{project}/servers/{server}/:
    delete:
      operationId: projects_servers_delete
      parameters:
      - description: Project unique identifier.
        in: path
        name: project
        required: true
        schema:
          type: string
      - description: User or team name.
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: User unique identifier.
        in: path
        name: server
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: Server deleted
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
            text/html:
              schema:
                $ref: '#/components/schemas/NotFound'
          description: Server not found
      summary: Delete a server
      tags:
      - projects
      x-accepts:
      - application/json
      - text/html
    get:
      operationId: projects_servers_read
      parameters:
      - description: Project unique identifier expressed as UUID or name.
        in: path
        name: project
        required: true
        schema:
          type: string
      - description: User or team name.
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Server unique identifier expressed as UUID or name.
        in: path
        name: server
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              example:
                config:
                  type: jupyter
                connected: []
                created_at: 2017-07-24T13:41:57.089722Z
                endpoint: https://api.illumidesk.com/v1/johndoe/projects/d56271ef-eea7-44ad-8d46-828a288c7a3d/servers/768f6eef-d07b-40ce-bce1-0dcce5bfbfc3/endpoint/jupyter/tree
                host: ""
                id: 768f6eef-d07b-40ce-bce1-0dcce5bfbfc3
                image_name: ""
                logs_url: wss://api.illumidesk.com/v1/johndoe/projects/d56271ef-eea7-44ad-8d46-828a288c7a3d/servers/768f6eef-d07b-40ce-bce1-0dcce5bfbfc3/logs/
                name: testPostServer
                server_size: d16e2091-7596-481b-a50f-285812beb98c
                startup_script: ""
                status: Stopped
                status_url: wss://api.illumidesk.com/v1/johndoe/projects/d56271ef-eea7-44ad-8d46-828a288c7a3d/servers/768f6eef-d07b-40ce-bce1-0dcce5bfbfc3/status/
              schema:
                $ref: '#/components/schemas/Server'
            text/html:
              schema:
                $ref: '#/components/schemas/Server'
          description: Server retrieved.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
            text/html:
              schema:
                $ref: '#/components/schemas/NotFound'
          description: Server not found.
      summary: Retrieve a server
      tags:
      - projects
      x-accepts:
      - application/json
      - text/html
    patch:
      operationId: projects_servers_update
      parameters:
      - description: Project unique identifier expressed as UUID or name.
        in: path
        name: project
        required: true
        schema:
          type: string
      - description: User or team name.
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Server unique identifier expressed as UUID or name.
        in: path
        name: server
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServerData'
        required: false
      responses:
        "200":
          content:
            application/json:
              example:
                config:
                  type: jupyter
                connected: []
                created_at: 2017-07-24T13:41:57.089722Z
                endpoint: https://api.illumidesk.com/v1/johndoe/projects/d56271ef-eea7-44ad-8d46-828a288c7a3d/servers/768f6eef-d07b-40ce-bce1-0dcce5bfbfc3/endpoint/jupyter/tree
                host: ""
                id: 768f6eef-d07b-40ce-bce1-0dcce5bfbfc3
                image_name: ""
                logs_url: wss://api.illumidesk.com/v1/johndoe/projects/d56271ef-eea7-44ad-8d46-828a288c7a3d/servers/768f6eef-d07b-40ce-bce1-0dcce5bfbfc3/logs/
                name: testPatchServer
                server_size: d16e2091-7596-481b-a50f-285812beb98c
                startup_script: ""
                status: Stopped
                status_url: wss://api.illumidesk.com/v1/johndoe/projects/d56271ef-eea7-44ad-8d46-828a288c7a3d/servers/768f6eef-d07b-40ce-bce1-0dcce5bfbfc3/status/
              schema:
                $ref: '#/components/schemas/Server'
            text/html:
              schema:
                $ref: '#/components/schemas/Server'
          description: Server updated
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerData'
            text/html:
              schema:
                $ref: '#/components/schemas/ServerData'
          description: Invalid data supplied
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
            text/html:
              schema:
                $ref: '#/components/schemas/NotFound'
          description: Server not found
      summary: Update a server
      tags:
      - projects
      x-codegen-request-body-name: server_data
      x-content-type: application/json
      x-accepts:
      - application/json
      - text/html
    put:
      operationId: projects_servers_replace
      parameters:
      - description: Project unique identifier expressed as UUID or name.
        in: path
        name: project
        required: true
        schema:
          type: string
      - description: User or team name.
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Server unique identifier expressed as UUID or name.
        in: path
        name: server
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServerData'
        required: false
      responses:
        "200":
          content:
            application/json:
              example:
                config:
                  type: jupyter
                connected: []
                created_at: 2017-07-24T13:41:57.089722Z
                endpoint: https://api.illumidesk.com/v1/johndoe/projects/d56271ef-eea7-44ad-8d46-828a288c7a3d/servers/768f6eef-d07b-40ce-bce1-0dcce5bfbfc3/endpoint/jupyter/tree
                host: ""
                id: 768f6eef-d07b-40ce-bce1-0dcce5bfbfc3
                image_name: ""
                logs_url: wss://api.illumidesk.com/v1/johndoe/projects/d56271ef-eea7-44ad-8d46-828a288c7a3d/servers/768f6eef-d07b-40ce-bce1-0dcce5bfbfc3/logs/
                name: testPutServer
                server_size: d16e2091-7596-481b-a50f-285812beb98c
                startup_script: ""
                status: Stopped
                status_url: wss://api.illumidesk.com/v1/johndoe/projects/d56271ef-eea7-44ad-8d46-828a288c7a3d/servers/768f6eef-d07b-40ce-bce1-0dcce5bfbfc3/status/
              schema:
                $ref: '#/components/schemas/Server'
            text/html:
              schema:
                $ref: '#/components/schemas/Server'
          description: Server updated.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerError'
            text/html:
              schema:
                $ref: '#/components/schemas/ServerError'
          description: Invalid data supplied.
      summary: Replace a server
      tags:
      - projects
      x-codegen-request-body-name: server_data
      x-content-type: application/json
      x-accepts:
      - application/json
      - text/html
  /v1/{namespace}/projects/{project}/servers/{server}/api-key/:
    get:
      operationId: projects_servers_api-key
      parameters:
      - description: Project unique identifier expressed as UUID or name.
        in: path
        name: project
        required: true
        schema:
          type: string
      - description: User or team name.
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Server unique identifier expressed as UUID or name.
        in: path
        name: server
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JWT'
            text/html:
              schema:
                $ref: '#/components/schemas/JWT'
          description: Server API key
      summary: Get server API key
      tags:
      - projects
      x-accepts:
      - application/json
      - text/html
  /v1/{namespace}/projects/{project}/servers/{server}/auth/:
    post:
      operationId: projects_servers_auth
      parameters:
      - description: Project unique identifier expressed as UUID or name.
        in: path
        name: project
        required: true
        schema:
          type: string
      - description: User or team name.
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Server unique identifier expressed as UUID or name.
        in: path
        name: server
        required: true
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Api key verified
        "401":
          content: {}
          description: Invalid api key.
      summary: Server api key validation
      tags:
      - projects
      x-accepts:
      - application/json
  /v1/{namespace}/projects/{project}/servers/{server}/run-stats/:
    post:
      operationId: projects_servers_run-stats_create
      parameters:
      - description: Server unique identifier expressed as UUID or name.
        in: path
        name: server
        required: true
        schema:
          type: string
      - description: Project unique identifier expressed as UUID or name.
        in: path
        name: project
        required: true
        schema:
          type: string
      - description: User or team name.
        in: path
        name: namespace
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServerRunStatisticsData'
        required: false
      responses:
        "201":
          content:
            application/json:
              example:
                exit_code: 0
                id: 7d55fca5-2ba3-4af4-95ab-26dc141e6bfc
                size: 0
                stacktrace: ""
                start: 2017-07-24T13:42:14.883820Z
                stop: ""
              schema:
                $ref: '#/components/schemas/ServerRunStatistics'
            text/html:
              schema:
                $ref: '#/components/schemas/ServerRunStatistics'
          description: ServerRunStatistics created.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerRunStatisticsError'
            text/html:
              schema:
                $ref: '#/components/schemas/ServerRunStatisticsError'
          description: Invalid data supplied.
      summary: Create a new server's run statistics
      tags:
      - projects
      x-codegen-request-body-name: serverrunstats_data
      x-content-type: application/json
      x-accepts:
      - application/json
      - text/html
  /v1/{namespace}/projects/{project}/servers/{server}/run-stats/{id}/:
    delete:
      operationId: projects_servers_run-stats_delete
      parameters:
      - description: Server unique identifier expressed as UUID or name.
        in: path
        name: server
        required: true
        schema:
          type: string
      - description: Project unique identifier expressed as UUID or name.
        in: path
        name: project
        required: true
        schema:
          type: string
      - description: User or team name.
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Server run statistics unique identifier expressed as UUID.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: ServerRunStatistics deleted.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
            text/html:
              schema:
                $ref: '#/components/schemas/NotFound'
          description: ServerRunStatistics not found.
      summary: Delete a server's statistics
      tags:
      - projects
      x-accepts:
      - application/json
      - text/html
    get:
      operationId: projects_servers_run-stats_read
      parameters:
      - description: Server unique identifier expressed as UUID or name.
        in: path
        name: server
        required: true
        schema:
          type: string
      - description: Project unique identifier expressed as UUID or name.
        in: path
        name: project
        required: true
        schema:
          type: string
      - description: User or team name.
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Run statistics unique identifier expressed as UUID.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerRunStatistics'
            text/html:
              schema:
                $ref: '#/components/schemas/ServerRunStatistics'
          description: ServerRunStatistics retrieved.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
            text/html:
              schema:
                $ref: '#/components/schemas/NotFound'
          description: ServerRunStatistics not found.
      summary: Retrieve statistics for a server
      tags:
      - projects
      x-accepts:
      - application/json
      - text/html
    patch:
      operationId: projects_servers_run-stats_update
      parameters:
      - description: Server unique identifier expressed as UUID or name.
        in: path
        name: server
        required: true
        schema:
          type: string
      - description: Project unique identifier expressed as UUID or name.
        in: path
        name: project
        required: true
        schema:
          type: string
      - description: User or team name.
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Server run statistics unique identifier expressed as UUID.
        in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServerRunStatisticsData'
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerRunStatistics'
            text/html:
              schema:
                $ref: '#/components/schemas/ServerRunStatistics'
          description: ServerRunStatistics updated.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerRunStatisticsError'
            text/html:
              schema:
                $ref: '#/components/schemas/ServerRunStatisticsError'
          description: Invalid data supplied.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
            text/html:
              schema:
                $ref: '#/components/schemas/NotFound'
          description: ServerRunStatistics not found.
      summary: Update a server's statistics
      tags:
      - projects
      x-codegen-request-body-name: serverrunstats_data
      x-content-type: application/json
      x-accepts:
      - application/json
      - text/html
    put:
      operationId: projects_servers_run-stats_replace
      parameters:
      - description: Server unique identifier expressed as UUID or name.
        in: path
        name: server
        required: true
        schema:
          type: string
      - description: Project unique identifier expressed as UUID or name.
        in: path
        name: project
        required: true
        schema:
          type: string
      - description: User or team name.
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Server run statistics expressed as UUID.
        in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServerRunStatisticsData'
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerRunStatistics'
            text/html:
              schema:
                $ref: '#/components/schemas/ServerRunStatistics'
          description: ServerRunStatistics updated.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerRunStatisticsError'
            text/html:
              schema:
                $ref: '#/components/schemas/ServerRunStatisticsError'
          description: Invalid data supplied.
      summary: Replace a server's statistics
      tags:
      - projects
      x-codegen-request-body-name: serverrunstats_data
      x-content-type: application/json
      x-accepts:
      - application/json
      - text/html
  /v1/{namespace}/projects/{project}/servers/{server}/ssh-tunnels/:
    get:
      operationId: projects_servers_ssh-tunnels_list
      parameters:
      - description: Server unique identifier expressed as UUID or name.
        in: path
        name: server
        required: true
        schema:
          type: string
      - description: Project unique identifier expressed as UUID or name.
        in: path
        name: project
        required: true
        schema:
          type: string
      - description: User or team name.
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Limit retrieved items.
        in: query
        name: limit
        schema:
          type: string
      - description: Offset retrieved items.
        in: query
        name: offset
        schema:
          type: string
      - description: Order retrieved items.
        in: query
        name: ordering
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              example: []
              schema:
                items:
                  $ref: '#/components/schemas/SshTunnel'
                type: array
            text/html:
              schema:
                items:
                  $ref: '#/components/schemas/SshTunnel'
                type: array
          description: SshTunnel list
      summary: Get SSH Tunnels associated to a server
      tags:
      - projects
      x-accepts:
      - application/json
      - text/html
    post:
      operationId: projects_servers_ssh-tunnels_create
      parameters:
      - description: Server unique identifier expressed as UUID or name.
        in: path
        name: server
        required: true
        schema:
          type: string
      - description: Project unique identifier expressed as UUID or name.
        in: path
        name: project
        required: true
        schema:
          type: string
      - description: User or team name.
        in: path
        name: namespace
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SshTunnelData'
        required: false
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SshTunnel'
            text/html:
              schema:
                $ref: '#/components/schemas/SshTunnel'
          description: SSH Tunnel created.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SshTunnelError'
            text/html:
              schema:
                $ref: '#/components/schemas/SshTunnelError'
          description: Invalid data supplied.
      summary: Create SSH Tunnel associated to a server
      tags:
      - projects
      x-codegen-request-body-name: sshtunnel_data
      x-content-type: application/json
      x-accepts:
      - application/json
      - text/html
  /v1/{namespace}/projects/{project}/servers/{server}/ssh-tunnels/{tunnel}/:
    delete:
      operationId: projects_servers_ssh-tunnels_delete
      parameters:
      - description: Server unique identifier expressed as UUID or name.
        in: path
        name: server
        required: true
        schema:
          type: string
      - description: Project unique identifier expressed as UUID or name.
        in: path
        name: project
        required: true
        schema:
          type: string
      - description: User or team name.
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: SSH tunnel unique identifier expressed as UUID or name.
        in: path
        name: tunnel
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: SSH tunnel deleted.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
            text/html:
              schema:
                $ref: '#/components/schemas/NotFound'
          description: SSH tunnel not found.
      summary: Delete an SSH Tunnel associated to a server
      tags:
      - projects
      x-accepts:
      - application/json
      - text/html
    get:
      operationId: projects_servers_ssh-tunnels_read
      parameters:
      - description: Server unique identifier expressed as UUID or name.
        in: path
        name: server
        required: true
        schema:
          type: string
      - description: Project unique identifier expressed as UUID or name.
        in: path
        name: project
        required: true
        schema:
          type: string
      - description: User or team name.
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: SSH tunnel unique identifier expressed as UUID or name.
        in: path
        name: tunnel
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SshTunnel'
            text/html:
              schema:
                $ref: '#/components/schemas/SshTunnel'
          description: SSH Tunnel retrieved.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
            text/html:
              schema:
                $ref: '#/components/schemas/NotFound'
          description: SSH Tunnel not found.
      summary: Get an SSH Tunnel associated to a server
      tags:
      - projects
      x-accepts:
      - application/json
      - text/html
    patch:
      operationId: projects_servers_ssh-tunnels_update
      parameters:
      - in: path
        name: server
        required: true
        schema:
          type: string
      - in: path
        name: project
        required: true
        schema:
          type: string
      - description: User or team name.
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: tunnel
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SshTunnelData'
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SshTunnel'
            text/html:
              schema:
                $ref: '#/components/schemas/SshTunnel'
          description: ' SSH Tunnel updated.'
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SshTunnelError'
            text/html:
              schema:
                $ref: '#/components/schemas/SshTunnelError'
          description: Invalid data supplied.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
            text/html:
              schema:
                $ref: '#/components/schemas/NotFound'
          description: SSH tunnel not found.
      summary: Update an SSH Tunnel associated to a server
      tags:
      - projects
      x-codegen-request-body-name: sshtunnel_data
      x-content-type: application/json
      x-accepts:
      - application/json
      - text/html
    put:
      operationId: projects_servers_ssh-tunnels_replace
      parameters:
      - description: Server unique identifier expressed as UUID or name.
        in: path
        name: server
        required: true
        schema:
          type: string
      - description: Project unique identifier expressed as UUID or name.
        in: path
        name: project
        required: true
        schema:
          type: string
      - description: User or team name.
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: SSH tunnel unique identifier expressed as UUID or name.
        in: path
        name: tunnel
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SshTunnelData'
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SshTunnel'
            text/html:
              schema:
                $ref: '#/components/schemas/SshTunnel'
          description: SshTunnel updated
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SshTunnelError'
            text/html:
              schema:
                $ref: '#/components/schemas/SshTunnelError'
          description: Invalid data supplied
      summary: Replace SSH Tunnel associated to a server
      tags:
      - projects
      x-codegen-request-body-name: sshtunnel_data
      x-content-type: application/json
      x-accepts:
      - application/json
      - text/html
  /v1/{namespace}/projects/{project}/servers/{server}/start/:
    post:
      operationId: projects_servers_start
      parameters:
      - description: Project unique identifier expressed as UUID or name.
        in: path
        name: project
        required: true
        schema:
          type: string
      - description: User or team name.
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Server unique identifier expressed as UUID or name.
        in: path
        name: server
        required: true
        schema:
          type: string
      responses:
        "201":
          content: {}
          description: Server started.
        "400":
          content: {}
          description: Invalid data supplied.
      summary: Start a server
      tags:
      - projects
      x-accepts:
      - application/json
  /v1/{namespace}/projects/{project}/servers/{server}/stats/{id}/:
    delete:
      operationId: projects_servers_stats_delete
      parameters:
      - description: Server unique identifier expressed as UUID or name.
        in: path
        name: server
        required: true
        schema:
          type: string
      - description: Project unique identifier expressed as UUID or name.
        in: path
        name: project
        required: true
        schema:
          type: string
      - description: User or team name.
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Stats unique identifier expressed as UUID.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: ServerStatistics deleted.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
            text/html:
              schema:
                $ref: '#/components/schemas/NotFound'
          description: ServerStatistics not found.
      summary: Delete a server's statistics
      tags:
      - projects
      x-accepts:
      - application/json
      - text/html
    get:
      operationId: projects_servers_stats_read
      parameters:
      - description: Server unique identifier expressed as UUID or name.
        in: path
        name: server
        required: true
        schema:
          type: string
      - description: Project unique identifier expressed as UUID or name.
        in: path
        name: project
        required: true
        schema:
          type: string
      - description: User or team name.
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Server statistics unique identifier expressed as UUID.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerStatistics'
            text/html:
              schema:
                $ref: '#/components/schemas/ServerStatistics'
          description: ServerStatistics retrieved
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
            text/html:
              schema:
                $ref: '#/components/schemas/NotFound'
          description: ServerStatistics not found
      summary: Retrieve a server's statistics
      tags:
      - projects
      x-accepts:
      - application/json
      - text/html
    patch:
      operationId: projects_servers_stats_update
      parameters:
      - description: Server unique identifier expressed as UUID or name.
        in: path
        name: server
        required: true
        schema:
          type: string
      - description: Project unique identifier expressed as UUID or name.
        in: path
        name: project
        required: true
        schema:
          type: string
      - description: User or team name.
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Server statistics unique identifier expressed as UUID.
        in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServerStatisticsData'
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerStatistics'
            text/html:
              schema:
                $ref: '#/components/schemas/ServerStatistics'
          description: ServerStatistics updated.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerStatisticsError'
            text/html:
              schema:
                $ref: '#/components/schemas/ServerStatisticsError'
          description: Invalid data supplied.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
            text/html:
              schema:
                $ref: '#/components/schemas/NotFound'
          description: ServerStatistics not found.
      summary: Update a server's statistics
      tags:
      - projects
      x-codegen-request-body-name: serverstats_data
      x-content-type: application/json
      x-accepts:
      - application/json
      - text/html
    put:
      operationId: projects_servers_stats_replace
      parameters:
      - description: Server unique identifier expressed as UUID or name.
        in: path
        name: server
        required: true
        schema:
          type: string
      - description: Project unique identifier expressed as UUID or name.
        in: path
        name: project
        required: true
        schema:
          type: string
      - description: User or team name.
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Server statistics unique identifier expressed as UUID.
        in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServerStatisticsData'
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerStatistics'
            text/html:
              schema:
                $ref: '#/components/schemas/ServerStatistics'
          description: ServerStatistics updated
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerStatisticsError'
            text/html:
              schema:
                $ref: '#/components/schemas/ServerStatisticsError'
          description: Invalid data supplied.
      summary: Replace a server's statistics
      tags:
      - projects
      x-codegen-request-body-name: serverstats_data
      x-content-type: application/json
      x-accepts:
      - application/json
      - text/html
  /v1/{namespace}/projects/{project}/servers/{server}/stop/:
    post:
      operationId: projects_servers_stop
      parameters:
      - description: Project unique identifier expressed as UUID or name.
        in: path
        name: project
        required: true
        schema:
          type: string
      - description: User or team name.
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Server unique identifier expressed as UUID or name.
        in: path
        name: server
        required: true
        schema:
          type: string
      responses:
        "201":
          content: {}
          description: Server stopped.
        "400":
          content: {}
          description: Invalid data supplied.
      summary: Stop a server
      tags:
      - projects
      x-accepts:
      - application/json
  /v1/{namespace}/projects/{project}/servers/{server}/triggers/:
    get:
      operationId: service_trigger_list
      parameters:
      - description: Server unique identifier expressed as UUID or name.
        in: path
        name: server
        required: true
        schema:
          type: string
      - description: Project unique identifier expressed as UUID or name.
        in: path
        name: project
        required: true
        schema:
          type: string
      - description: User or team name.
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Trigger name.
        in: query
        name: name
        schema:
          type: string
      - description: Limit when getting triggers.
        in: query
        name: limit
        schema:
          type: string
      - description: Offset when getting triggers.
        in: query
        name: offset
        schema:
          type: string
      - description: Ordering when getting triggers.
        in: query
        name: ordering
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              example: []
              schema:
                items:
                  $ref: '#/components/schemas/ServerAction'
                type: array
            text/html:
              schema:
                items:
                  $ref: '#/components/schemas/ServerAction'
                type: array
          description: ServerAction list
      summary: Retrieve server triggers
      tags:
      - projects
      x-accepts:
      - application/json
      - text/html
    post:
      operationId: service_trigger_create
      parameters:
      - description: Server unique identifier expressed as UUID or name.
        in: path
        name: server
        required: true
        schema:
          type: string
      - description: Project unique identifier expressed as UUID or name.
        in: path
        name: project
        required: true
        schema:
          type: string
      - description: User or team name.
        in: path
        name: namespace
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServerActionData'
        description: Server action.
        required: false
      responses:
        "201":
          content:
            application/json:
              example:
                id: 19938b2c-17f6-46ed-a506-f5b196853951
                name: serverStartPost
                operation: start
                url: /v1/johndoe/service/ed81aac7-835d-4702-a58e-4eeda89d4a5a/trigger/19938b2c-17f6-46ed-a506-f5b196853951/call/
              schema:
                $ref: '#/components/schemas/ServerAction'
            text/html:
              schema:
                $ref: '#/components/schemas/ServerAction'
          description: Server action created.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerActionError'
            text/html:
              schema:
                $ref: '#/components/schemas/ServerActionError'
          description: Invalid data supplied
      summary: Create a new server trigger
      tags:
      - projects
      x-codegen-request-body-name: server_action
      x-content-type: application/json
      x-accepts:
      - application/json
      - text/html
  /v1/{namespace}/projects/{project}/servers/{server}/triggers/{trigger}/:
    delete:
      operationId: service_trigger_delete
      parameters:
      - description: Server unique identifier expressed as UUID or name.
        in: path
        name: server
        required: true
        schema:
          type: string
      - description: Project unique identifier expressed as UUID or name.
        in: path
        name: project
        required: true
        schema:
          type: string
      - description: User or team name.
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Trigger identifier expressed as UUID or name.
        in: path
        name: trigger
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: ServerAction deleted
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
            text/html:
              schema:
                $ref: '#/components/schemas/NotFound'
          description: ServerAction not found
      summary: Delete a server trigger
      tags:
      - projects
      x-accepts:
      - application/json
      - text/html
    get:
      operationId: service_trigger_read
      parameters:
      - description: Server unique identifier expressed as UUID or name.
        in: path
        name: server
        required: true
        schema:
          type: string
      - description: Project unique identifier expressed as UUID or name.
        in: path
        name: project
        required: true
        schema:
          type: string
      - description: User or team name.
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Trigger unique identifier.
        in: path
        name: trigger
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              example:
                id: 19938b2c-17f6-46ed-a506-f5b196853951
                name: serverStartPost
                operation: start
                url: /v1/johndoe/service/ed81aac7-835d-4702-a58e-4eeda89d4a5a/trigger/19938b2c-17f6-46ed-a506-f5b196853951/call/
              schema:
                $ref: '#/components/schemas/ServerAction'
            text/html:
              schema:
                $ref: '#/components/schemas/ServerAction'
          description: Server action retrieved.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
            text/html:
              schema:
                $ref: '#/components/schemas/NotFound'
          description: ServerAction not found.
      summary: Get a server trigger
      tags:
      - projects
      x-accepts:
      - application/json
      - text/html
    patch:
      operationId: service_trigger_update
      parameters:
      - description: Server unique identifier expressed as UUID or name.
        in: path
        name: server
        required: true
        schema:
          type: string
      - description: Project unique identifier expressed as UUID or name.
        in: path
        name: project
        required: true
        schema:
          type: string
      - description: User or team name.
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Trigger identifier expressed as UUID or name.
        in: path
        name: trigger
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServerActionData'
        required: false
      responses:
        "200":
          content:
            application/json:
              example:
                id: 19938b2c-17f6-46ed-a506-f5b196853951
                name: serverStartPatch
                operation: start
                url: /v1/johndoe/service/ed81aac7-835d-4702-a58e-4eeda89d4a5a/trigger/19938b2c-17f6-46ed-a506-f5b196853951/call/
              schema:
                $ref: '#/components/schemas/ServerAction'
            text/html:
              schema:
                $ref: '#/components/schemas/ServerAction'
          description: Server action updated.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerActionError'
            text/html:
              schema:
                $ref: '#/components/schemas/ServerActionError'
          description: Invalid data supplied
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
            text/html:
              schema:
                $ref: '#/components/schemas/NotFound'
          description: Server action not found.
      summary: Update a server trigger
      tags:
      - projects
      x-codegen-request-body-name: server_action
      x-content-type: application/json
      x-accepts:
      - application/json
      - text/html
    put:
      operationId: service_trigger_replace
      parameters:
      - description: Server unique identifier expressed as UUID or name.
        in: path
        name: server
        required: true
        schema:
          type: string
      - description: Project unique identifier expressed as UUID or name.
        in: path
        name: project
        required: true
        schema:
          type: string
      - description: User or team name.
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Trigger unique identifier.
        in: path
        name: trigger
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServerActionData'
        required: false
      responses:
        "200":
          content:
            application/json:
              example:
                id: 19938b2c-17f6-46ed-a506-f5b196853951
                name: serverStartPut
                operation: start
                url: /v1/johndoe/service/ed81aac7-835d-4702-a58e-4eeda89d4a5a/trigger/19938b2c-17f6-46ed-a506-f5b196853951/call/
              schema:
                $ref: '#/components/schemas/ServerAction'
            text/html:
              schema:
                $ref: '#/components/schemas/ServerAction'
          description: ServerAction updated.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerActionError'
            text/html:
              schema:
                $ref: '#/components/schemas/ServerActionError'
          description: Invalid data supplied.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
            text/html:
              schema:
                $ref: '#/components/schemas/NotFound'
          description: Server action not found.
      summary: Replace a server trigger
      tags:
      - projects
      x-codegen-request-body-name: server_action
      x-content-type: application/json
      x-accepts:
      - application/json
      - text/html
  /v1/{namespace}/search/:
    get:
      operationId: search
      parameters:
      - description: User or team name.
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Search string.
        in: query
        name: q
        required: true
        schema:
          type: string
      - description: Limit results to specific types.
        in: query
        name: type
        schema:
          enum:
          - users
          - projects
          - servers
          type: string
      - description: Limit data when getting items.
        in: query
        name: limit
        schema:
          type: string
      - description: Offset data when getting items.
        in: query
        name: offset
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Search'
                type: array
            text/html:
              schema:
                items:
                  $ref: '#/components/schemas/Search'
                type: array
          description: Search list.
      summary: Get a search results
      tags:
      - search
      x-accepts:
      - application/json
      - text/html
components:
  schemas:
    Action:
      properties:
        action:
          description: Action name.
          type: string
        action_name:
          description: Action name.
          type: string
        can_be_cancelled:
          description: "Can action be cancelled, or not."
          type: boolean
        can_be_retried:
          description: "May action be retried, or not."
          type: boolean
        end_date:
          description: Action needs to end before a certain date and time.
          type: string
        id:
          description: "Action unique identifier, expressed as UUID."
          type: string
        ip:
          description: IP address that action is related to.
          type: string
        is_user_action:
          description: "Is the action related to a user, or not."
          type: boolean
        method:
          description: Action method.
          type: string
        object:
          description: Action object.
          type: string
        path:
          description: Action path.
          type: string
        payload:
          description: Object action payload.
          properties: {}
          type: object
        resource_uri:
          description: Resource URI.
          type: string
        start_date:
          description: Action date and time start.
          type: string
        state:
          description: Action state.
          type: string
        user:
          description: User that action is assigned to.
          type: string
        user_agent:
          description: User agent that action is related to.
          type: string
      required:
      - action
      - method
      - state
      - user_agent
      type: object
    Application:
      example:
        name: name
        authorization_grant_type: authorization-code
        client_secret: client_secret
        client_type: confidential
        id: id
        redirect_uris: redirect_uris
        client_id: client_id
      properties:
        authorization_grant_type:
          description: OAuth2 authorization grant type
          enum:
          - authorization-code
          - implicit
          - password
          - client-credentials
          type: string
        client_id:
          description: OAuth2 client id
          type: string
        client_secret:
          description: OAuth2 client secret
          type: string
        client_type:
          description: OAuth2 client type
          enum:
          - confidential
          - public
          type: string
        id:
          description: "Application unique identifier, expressed as UUID."
          type: string
        name:
          description: Application name
          type: string
        redirect_uris:
          description: Uris to redirect auth request
          type: string
      type: object
    ApplicationData:
      example:
        name: name
        authorization_grant_type: authorization-code
        client_type: confidential
        redirect_uris: redirect_uris
      properties:
        authorization_grant_type:
          description: OAuth2 authorization grant type
          enum:
          - authorization-code
          - implicit
          - password
          - client-credentials
          type: string
        client_type:
          description: OAuth2 client type
          enum:
          - confidential
          - public
          type: string
        name:
          description: Application name
          type: string
        redirect_uris:
          description: Uris to redirect auth request
          type: string
      required:
      - authorization_grant_type
      - client_type
      - name
      type: object
    ApplicationError:
      example:
        non_field_errors:
        - non_field_errors
        - non_field_errors
        name:
        - name
        - name
        authorization_grant_type:
        - authorization_grant_type
        - authorization_grant_type
        client_type:
        - client_type
        - client_type
        redirect_uris:
        - redirect_uris
        - redirect_uris
      properties:
        authorization_grant_type:
          description: Authorization grant type field errors.
          items:
            type: string
          type: array
        client_type:
          description: Client type field errors.
          items:
            type: string
          type: array
        name:
          description: Name field errors.
          items:
            type: string
          type: array
        non_field_errors:
          description: Errors not connected to any field.
          items:
            type: string
          type: array
        redirect_uris:
          description: Redirect uris field errors.
          items:
            type: string
          type: array
      type: object
    AuthToken:
      properties:
        token:
          description: Unique JWT authorization token.
          type: string
      type: object
    AuthTokenData:
      properties:
        password:
          description: User's password.
          type: string
        username:
          description: User's username.
          type: string
      required:
      - password
      - username
      type: object
    AuthTokenError:
      properties:
        non_field_errors:
          description: Errors not connected to any field.
          items:
            type: string
          type: array
        password:
          description: Password field errors.
          items:
            type: string
          type: array
        token:
          description: Token field errors.
          items:
            type: string
          type: array
        username:
          description: Username field errors.
          items:
            type: string
          type: array
      type: object
    Card:
      example:
        address_zip_check: address_zip_check
        last4: last4
        funding: funding
        address_country: address_country
        created: created
        address_state: address_state
        exp_month: 0
        exp_year: 6
        address_city: address_city
        token: token
        cvc_check: cvc_check
        address_line2: address_line2
        address_line1: address_line1
        fingerprint: fingerprint
        name: name
        address_line1_check: address_line1_check
        address_zip: address_zip
        id: id
        brand: brand
        stripe_id: stripe_id
        customer: customer
      properties:
        address_city:
          description: Address city.
          type: string
        address_country:
          description: Address country.
          type: string
        address_line1:
          description: Address line 1.
          type: string
        address_line1_check:
          description: "Address line 1 check, when processing card."
          type: string
        address_line2:
          description: Address line 2.
          type: string
        address_state:
          description: Address state.
          type: string
        address_zip:
          description: Address zip code.
          type: string
        address_zip_check:
          description: "Address check, when processing card."
          type: string
        brand:
          description: Credit or debit card brand.
          type: string
        created:
          description: Card date and time creation.
          type: string
        customer:
          description: Card customer.
          type: string
        cvc_check:
          description: Security code check.
          type: string
        exp_month:
          description: Card expiration month.
          type: integer
        exp_year:
          description: Card expiration year.
          type: integer
        fingerprint:
          description: Card fingerprint.
          type: string
        funding:
          description: Funding.
          type: string
        id:
          description: "Card unique identifier, expressed as UUID."
          type: string
        last4:
          description: Last four digits of credit or debit card.
          type: string
        name:
          description: Card name.
          type: string
        stripe_id:
          description: Unique stripe identifier.
          type: string
        token:
          description: Card unique token.
          type: string
      type: object
    CardDataPost:
      example:
        address_line2: address_line2
        address_line1: address_line1
        address_country: address_country
        address_state: address_state
        name: name
        exp_month: 0
        address_zip: address_zip
        exp_year: 6
        address_city: address_city
        token: token
      properties:
        address_city:
          description: Address city.
          type: string
        address_country:
          description: Address country.
          type: string
        address_line1:
          description: Address line 1.
          type: string
        address_line2:
          description: Address line 2.
          type: string
        address_state:
          description: Address state.
          type: string
        address_zip:
          description: Address zip code.
          type: string
        exp_month:
          description: Card expiration month.
          type: integer
        exp_year:
          description: Card expiration year.
          type: integer
        name:
          description: Card name.
          type: string
        token:
          description: Card unique token.
          type: string
      type: object
    CardDataPutandPatch:
      example:
        address_line2: address_line2
        address_line1: address_line1
        address_country: address_country
        address_state: address_state
        name: name
        exp_month: 0
        address_zip: address_zip
        exp_year: 6
        address_city: address_city
      properties:
        address_city:
          description: Address city.
          type: string
        address_country:
          description: Address country.
          type: string
        address_line1:
          description: Address line 1.
          type: string
        address_line2:
          description: Address line 2.
          type: string
        address_state:
          description: Address state.
          type: string
        address_zip:
          description: Address zip code.
          type: string
        exp_month:
          description: Card expiration month.
          type: integer
        exp_year:
          description: Card expiration year.
          type: integer
        name:
          description: Card name.
          type: string
      type: object
    CardError:
      example:
        address_zip_check:
        - address_zip_check
        - address_zip_check
        last4:
        - last4
        - last4
        funding:
        - funding
        - funding
        address_country:
        - address_country
        - address_country
        created:
        - created
        - created
        non_field_errors:
        - non_field_errors
        - non_field_errors
        address_state:
        - address_state
        - address_state
        exp_month:
        - exp_month
        - exp_month
        exp_year:
        - exp_year
        - exp_year
        address_city:
        - address_city
        - address_city
        token:
        - token
        - token
        cvc_check:
        - cvc_check
        - cvc_check
        address_line2:
        - address_line2
        - address_line2
        address_line1:
        - address_line1
        - address_line1
        fingerprint:
        - fingerprint
        - fingerprint
        name:
        - name
        - name
        address_line1_check:
        - address_line1_check
        - address_line1_check
        address_zip:
        - address_zip
        - address_zip
        id:
        - id
        - id
        brand:
        - brand
        - brand
        stripe_id:
        - stripe_id
        - stripe_id
        customer:
        - customer
        - customer
      properties:
        address_city:
          description: address_city field errors
          items:
            type: string
          type: array
        address_country:
          description: address_country field errors
          items:
            type: string
          type: array
        address_line1:
          description: address_line1 field errors
          items:
            type: string
          type: array
        address_line1_check:
          description: address_line1_check field errors
          items:
            type: string
          type: array
        address_line2:
          description: address_line2 field errors
          items:
            type: string
          type: array
        address_state:
          description: address_state field errors
          items:
            type: string
          type: array
        address_zip:
          description: address_zip field errors
          items:
            type: string
          type: array
        address_zip_check:
          description: address_zip_check field errors
          items:
            type: string
          type: array
        brand:
          description: brand field errors
          items:
            type: string
          type: array
        created:
          description: created field errors
          items:
            type: string
          type: array
        customer:
          description: customer field errors
          items:
            type: string
          type: array
        cvc_check:
          description: cvc_check field errors
          items:
            type: string
          type: array
        exp_month:
          description: exp_month field errors
          items:
            type: string
          type: array
        exp_year:
          description: exp_year field errors
          items:
            type: string
          type: array
        fingerprint:
          description: fingerprint field errors
          items:
            type: string
          type: array
        funding:
          description: funding field errors
          items:
            type: string
          type: array
        id:
          description: id field errors
          items:
            type: string
          type: array
        last4:
          description: last4 field errors
          items:
            type: string
          type: array
        name:
          description: name field errors
          items:
            type: string
          type: array
        non_field_errors:
          description: Errors not connected to any field
          items:
            type: string
          type: array
        stripe_id:
          description: stripe_id field errors
          items:
            type: string
          type: array
        token:
          description: token field errors
          items:
            type: string
          type: array
      type: object
    CardUpdateError:
      example:
        address_zip_check:
        - address_zip_check
        - address_zip_check
        last4:
        - last4
        - last4
        funding:
        - funding
        - funding
        address_country:
        - address_country
        - address_country
        created:
        - created
        - created
        non_field_errors:
        - non_field_errors
        - non_field_errors
        address_state:
        - address_state
        - address_state
        exp_month:
        - exp_month
        - exp_month
        exp_year:
        - exp_year
        - exp_year
        address_city:
        - address_city
        - address_city
        token:
        - token
        - token
        cvc_check:
        - cvc_check
        - cvc_check
        address_line2:
        - address_line2
        - address_line2
        address_line1:
        - address_line1
        - address_line1
        fingerprint:
        - fingerprint
        - fingerprint
        name:
        - name
        - name
        address_line1_check:
        - address_line1_check
        - address_line1_check
        address_zip:
        - address_zip
        - address_zip
        id:
        - id
        - id
        brand:
        - brand
        - brand
        stripe_id:
        - stripe_id
        - stripe_id
        customer:
        - customer
        - customer
      properties:
        address_city:
          description: address_city field errors
          items:
            type: string
          type: array
        address_country:
          description: address_country field errors
          items:
            type: string
          type: array
        address_line1:
          description: address_line1 field errors
          items:
            type: string
          type: array
        address_line1_check:
          description: address_line1_check field errors
          items:
            type: string
          type: array
        address_line2:
          description: address_line2 field errors
          items:
            type: string
          type: array
        address_state:
          description: address_state field errors
          items:
            type: string
          type: array
        address_zip:
          description: address_zip field errors
          items:
            type: string
          type: array
        address_zip_check:
          description: address_zip_check field errors
          items:
            type: string
          type: array
        brand:
          description: brand field errors
          items:
            type: string
          type: array
        created:
          description: created field errors
          items:
            type: string
          type: array
        customer:
          description: customer field errors
          items:
            type: string
          type: array
        cvc_check:
          description: cvc_check field errors
          items:
            type: string
          type: array
        exp_month:
          description: exp_month field errors
          items:
            type: string
          type: array
        exp_year:
          description: exp_year field errors
          items:
            type: string
          type: array
        fingerprint:
          description: fingerprint field errors
          items:
            type: string
          type: array
        funding:
          description: funding field errors
          items:
            type: string
          type: array
        id:
          description: id field errors
          items:
            type: string
          type: array
        last4:
          description: last4 field errors
          items:
            type: string
          type: array
        name:
          description: name field errors
          items:
            type: string
          type: array
        non_field_errors:
          description: Errors not connected to any field
          items:
            type: string
          type: array
        stripe_id:
          description: stripe_id field errors
          items:
            type: string
          type: array
        token:
          description: token field errors
          items:
            type: string
          type: array
      type: object
    Collaborator:
      example:
        owner: true
        joined: joined
        permissions:
        - write_project
        - write_project
        last_name: last_name
        project: project
        id: id
        first_name: first_name
        user: user
        email: email
        username: username
      properties:
        email:
          description: Collaborator's valid email address.
          type: string
        first_name:
          description: Collaborator's first name.
          type: string
        id:
          description: Collaborator unique identifier in UUID format.
          type: string
        joined:
          description: Date time of when collaborator joined.
          type: string
        last_name:
          description: Collaborator's last name.
          type: string
        owner:
          description: |
            Boolean that states whether collaborator is project owner, or not.
          type: boolean
        permissions:
          description: |
            Collaborator permissions. Project creators are assigned owner
            priviledges by default. Permissions are write and read.
          items:
            enum:
            - write_project
            - read_project
            type: string
          type: array
        project:
          description: Collaborator project name.
          type: string
        user:
          description: Collaborator user name.
          type: string
        username:
          description: |
            Collaborator's user name. This must be a valid user name within the
            system.
          type: string
      type: object
    CollaboratorData:
      example:
        owner: true
        permissions: read_project
        member: member
      properties:
        member:
          description: Project member username.
          type: string
        owner:
          description: Project owner. Defaults to false.
          type: boolean
        permissions:
          description: Permissions assigned to collaborator.
          enum:
          - read_project
          - write_project
          type: string
      required:
      - member
      - permissions
      type: object
    CollaboratorError:
      example:
        owner:
        - owner
        - owner
        joined:
        - joined
        - joined
        permissions:
        - permissions
        - permissions
        non_field_errors:
        - non_field_errors
        - non_field_errors
        member:
        - member
        - member
        last_name:
        - last_name
        - last_name
        id:
        - id
        - id
        first_name:
        - first_name
        - first_name
        email:
        - email
        - email
        username:
        - username
        - username
      properties:
        email:
          description: Email field errors.
          items:
            type: string
          type: array
        first_name:
          description: First name field errors.
          items:
            type: string
          type: array
        id:
          description: Id field errors this
          items:
            type: string
          type: array
        joined:
          description: Joined field errors.
          items:
            type: string
          type: array
        last_name:
          description: Last name field errors.
          items:
            type: string
          type: array
        member:
          description: Member field errors.
          items:
            type: string
          type: array
        non_field_errors:
          description: Errors not connected to any field.
          items:
            type: string
          type: array
        owner:
          description: Owner field errors.
          items:
            type: string
          type: array
        permissions:
          description: Permissions field errors.
          items:
            type: string
          type: array
        username:
          description: Username field errors.
          items:
            type: string
          type: array
      required:
      - member
      - permissions
      type: object
    Deployment:
      example:
        framework: tensorflow
        name: name
        created_at: created_at
        project: project
        runtime: python2.7
        id: id
        config:
          handler: handler
          files:
          - files
          - files
        created_by: created_by
      properties:
        config:
          $ref: '#/components/schemas/DeploymentConfig'
        created_at:
          description: Date and time when server was created.
          type: string
        created_by:
          description: User that created server.
          type: string
        framework:
          description: Framework that the deployment will have access to.
          enum:
          - tensorflow
          type: string
        id:
          description: Deploymeny unique identifier
          type: string
        name:
          description: Deployment name.
          type: string
        project:
          description: Project name.
          type: string
        runtime:
          description: Language runtime the deployment will use.
          enum:
          - python2.7
          type: string
      type: object
    DeploymentConfig:
      example:
        handler: handler
        files:
        - files
        - files
      properties:
        files:
          description: An array of ProjectFile names that should be included in the
            deployment.
          items:
            type: string
          type: array
        handler:
          description: "The filename and handler function defined by the user that\
            \ will handle requests to the deployment. Ex: handler.predict"
          type: string
      type: object
    DeploymentData:
      example:
        framework: tensorflow
        name: name
        runtime: python2.7
        config:
          handler: handler
          files:
          - files
          - files
      properties:
        config:
          $ref: '#/components/schemas/DeploymentConfig'
        framework:
          description: Framework that the deployment will have access to.
          enum:
          - tensorflow
          type: string
        name:
          description: Deployment name.
          type: string
        runtime:
          description: Language runtime the deployment will use.
          enum:
          - python2.7
          type: string
      required:
      - config
      - framework
      - name
      - runtime
      type: object
    DeploymentError:
      example:
        framework:
        - framework
        - framework
        non_field_errors:
        - non_field_errors
        - non_field_errors
        name:
        - name
        - name
        runtime:
        - runtime
        - runtime
        config:
        - config
        - config
      properties:
        config:
          description: Invalid deployment configuration.
          items:
            type: string
          type: array
        framework:
          description: Invalid framework.
          items:
            type: string
          type: array
        name:
          description: Invalid deployment name.
          items:
            type: string
          type: array
        non_field_errors:
          description: Errors not connected to any field.
          items:
            type: string
          type: array
        runtime:
          description: Invalid runtime.
          items:
            type: string
          type: array
      type: object
    Email:
      example:
        unsubscribed: true
        address: address
        public: true
        id: id
        user: user
      properties:
        address:
          description: Email address.
          type: string
        id:
          description: Email unique identifier expressed as UUID.
          type: string
        public:
          description: Boolean to determine if email is public or private.
          type: boolean
        unsubscribed:
          description: Boolean to determine whether user is suscribed or unsubscribed
            to out going email campaigns.
          type: boolean
        user:
          description: User name for email.
          type: string
      required:
      - address
      type: object
    EmailData:
      example:
        unsubscribed: true
        address: address
        public: true
      properties:
        address:
          description: Email address.
          type: string
        public:
          description: Public or private email address.
          type: boolean
        unsubscribed:
          description: Unsubscribed or suscribed.
          type: boolean
      required:
      - address
      type: object
    EmailError:
      example:
        unsubscribed:
        - unsubscribed
        - unsubscribed
        address:
        - address
        - address
        public:
        - public
        - public
        non_field_errors:
        - non_field_errors
        - non_field_errors
      properties:
        address:
          description: Address field errors.
          items:
            type: string
          type: array
        non_field_errors:
          description: Errors not connected to any field.
          items:
            type: string
          type: array
        public:
          description: Public field errors.
          items:
            type: string
          type: array
        unsubscribed:
          description: Unsubscribed field errors.
          items:
            type: string
          type: array
      type: object
    Group:
      example:
        parent: parent
        private: true
        permissions:
        - permissions
        - permissions
        members:
        - members
        - members
        name: name
        description: description
        id: id
        created_by: created_by
      properties:
        created_by:
          description: UUID of a user that created this group.
          type: string
        description:
          description: Group description
          type: string
        id:
          description: Group unique identifier expressed as UUID.
          type: string
        members:
          description: List of group members usernames.
          items:
            type: string
          type: array
        name:
          description: Group name
          type: string
        parent:
          description: Parent group
          type: string
        permissions:
          description: List of group permissions.
          items:
            type: string
          type: array
        private:
          description: States whether group is visible to all users.
          type: boolean
      type: object
    GroupData:
      example:
        parent: parent
        private: true
        name: name
        description: description
      properties:
        description:
          description: Group description
          type: string
        name:
          description: Group name
          type: string
        parent:
          description: Parent group
          type: string
        private:
          description: States whether group is visible to all users.
          type: boolean
      required:
      - name
      type: object
    GroupError:
      example:
        parent:
        - parent
        - parent
        private:
        - private
        - private
        non_field_errors:
        - non_field_errors
        - non_field_errors
        name:
        - name
        - name
        description:
        - description
        - description
        id:
        - id
        - id
      properties:
        description:
          description: Description field errors.
          items:
            type: string
          type: array
        id:
          description: Id field errors.
          items:
            type: string
          type: array
        name:
          description: Name field errors.
          items:
            type: string
          type: array
        non_field_errors:
          description: Errors not connected to any field.
          items:
            type: string
          type: array
        parent:
          description: Private field errors.
          items:
            type: string
          type: array
        private:
          description: Private field errors.
          items:
            type: string
          type: array
      type: object
    GroupUser:
      example:
        user: user
      properties:
        user:
          description: User username
          type: string
      type: object
    GroupUserError:
      example:
        non_field_errors:
        - non_field_errors
        - non_field_errors
        user:
        - user
        - user
      properties:
        non_field_errors:
          description: Errors not connected to any field.
          items:
            type: string
          type: array
        user:
          description: User field errors.
          items:
            type: string
          type: array
      type: object
    Invoice:
      example:
        metadata: "{}"
        livemode: true
        reciept_number: reciept_number
        description: description
        subscription: subscription
        starting_balance: 5
        invoice_date: invoice_date
        statement_descriptor: statement_descriptor
        total: 7
        period_start: period_start
        amount_due: 0
        currency: currency
        id: id
        stripe_id: stripe_id
        attempt_count: 1
        created: created
        tax: 2
        period_end: period_end
        subtotal: 5
        paid: true
        closed: true
        application_fee: 6
        attempted: true
        next_payment_attempt: next_payment_attempt
        customer: customer
      properties:
        amount_due:
          description: Amount due set in invoice.
          type: integer
        application_fee:
          description: Application fee set in invoice.
          type: integer
        attempt_count:
          description: Number of attempts to deliver invoice.
          type: integer
        attempted:
          description: "Boolean to determine whether delivery attempt executed, or\
            \ not."
          type: boolean
        closed:
          description: "Invoice closed, or pending."
          type: boolean
        created:
          description: Date and time when invoice was created.
          type: string
        currency:
          description: Currency used in invoice.
          type: string
        customer:
          description: Customer name.
          type: string
        description:
          description: Invoice description.
          type: string
        id:
          description: Invoice unique identifier expressed as UUID.
          type: string
        invoice_date:
          description: Invoice issue date.
          type: string
        livemode:
          description: "Boolean that determines whether invoice is live, or not."
          type: boolean
        metadata:
          description: Optional metadata object of invoice.
          properties: {}
          type: object
        next_payment_attempt:
          description: Next payment attempt.
          type: string
        paid:
          description: "Determines whether invoice has been paid, or not."
          type: boolean
        period_end:
          description: Invoice end period.
          type: string
        period_start:
          description: Invoice start period.
          type: string
        reciept_number:
          description: Invoice receipt number.
          type: string
        starting_balance:
          description: Invoice starting balance.
          type: integer
        statement_descriptor:
          description: Invoice statement descriptor.
          type: string
        stripe_id:
          description: Stripe account identifier.
          type: string
        subscription:
          description: Suscription name.
          type: string
        subtotal:
          description: Invoice sub total.
          type: integer
        tax:
          description: "Tax, if applicable."
          type: integer
        total:
          description: Invoice total.
          type: integer
      required:
      - amount_due
      - created
      - currency
      - customer
      - invoice_date
      - period_end
      - period_start
      - reciept_number
      - starting_balance
      - stripe_id
      - subtotal
      - total
      type: object
    InvoiceItem:
      example:
        amount: 0
        metadata: "{}"
        quantity: 6
        livemode: true
        created: created
        description: description
        currency: currency
        id: id
        invoice: invoice
        stripe_id: stripe_id
        invoice_date: invoice_date
        proration: true
      properties:
        amount:
          description: Amount the the invoice item will be billed for.
          type: integer
        created:
          description: Date and time when invoice was created.
          type: string
        currency:
          description: Currency used in invoice.
          type: string
        description:
          description: Item description.
          type: string
        id:
          description: InvoiceItem unique identifier expressed as UUID.
          type: string
        invoice:
          description: Invoice unique identifier expressed as UUID.
          type: string
        invoice_date:
          description: Date the item was added to the invoice.
          type: string
        livemode:
          description: "Boolean that determines whether invoice is live, or not."
          type: boolean
        metadata:
          description: Optional metadata object of invoice.
          properties: {}
          type: object
        proration:
          description: Whether or not the items cost will be prorated for the billing
            period.
          type: boolean
        quantity:
          description: Number of units for this item.
          type: integer
        stripe_id:
          description: Stripe account identifier.
          type: string
      required:
      - amount
      - created
      - currency
      - invoice
      - invoice_date
      - quantity
      - stripe_id
      type: object
    JWT:
      example:
        token: token
      properties:
        token:
          description: Unique JSON Web Token (JWT).
          type: string
      type: object
    JWTData:
      example:
        password: password
        username: username
      properties:
        password:
          description: User password.
          type: string
        username:
          description: User name.
          type: string
      required:
      - password
      - username
      type: object
    JWTError:
      example:
        password:
        - password
        - password
        non_field_errors:
        - non_field_errors
        - non_field_errors
        token:
        - token
        - token
        username:
        - username
        - username
      properties:
        non_field_errors:
          description: Errors not connected to any field
          items:
            type: string
          type: array
        password:
          description: password field errors
          items:
            type: string
          type: array
        token:
          description: token field errors
          items:
            type: string
          type: array
        username:
          description: username field errors
          items:
            type: string
          type: array
      type: object
    NotFound:
      example:
        detail: detail
      properties:
        detail:
          description: Requested item not found.
          type: string
      type: object
    Notification:
      example:
        actor: actor
        read: true
        id: id
        type: type
        user: user
        target: target
        timestamp: timestamp
      properties:
        actor:
          description: Unique identifier of the object that triggered the notification.
          type: string
        id:
          description: Notification unique identifier expressed as a UUID
          type: string
        read:
          description: Whether or not the notification has been marked as read by
            the user.
          type: boolean
        target:
          description: Unique identifier of the object that was acted upon by the
            object referred to in actor.
          type: string
        timestamp:
          description: Timestamp that the notification was created at.
          type: string
        type:
          description: "Type of the notification, e.g. invoice.created, subscription.created,\
            \ etc."
          type: string
        user:
          description: User the notification is for.
          type: string
      required:
      - read
      type: object
    NotificationError:
      example:
        read:
        - read
        - read
        non_field_errors:
        - non_field_errors
        - non_field_errors
      properties:
        non_field_errors:
          description: Errors not connected to any field
          items:
            type: string
          type: array
        read:
          description: read field errors
          items:
            type: string
          type: array
      type: object
    NotificationListUpdateData:
      example:
        read: true
        notifications:
        - notifications
        - notifications
      properties:
        notifications:
          description: An array of notification IDs to update.
          items:
            type: string
          type: array
        read:
          description: Mark the notification as either read or unread
          type: boolean
      required:
      - notifications
      - read
      type: object
    NotificationSettings:
      example:
        email_address: email_address
        emails_enabled: true
        id: id
        user: user
        enabled: true
        entity: global
      properties:
        email_address:
          description: Email address to send notifications.
          type: string
        emails_enabled:
          description: Turn emails on or off.
          type: boolean
        enabled:
          description: Turn notifications on or off entirely.
          type: boolean
        entity:
          description: The entity type that the settings pertain to.
          enum:
          - global
          - billing
          type: string
        id:
          description: Notification unique identifier expressed as a UUID
          type: string
        user:
          description: User the notification settings is for.
          type: string
      required:
      - emails_enabled
      - enabled
      type: object
    NotificationSettingsData:
      example:
        emails_enabled: true
        enabled: true
      properties:
        emails_enabled:
          description: Turn emails on or off.
          type: boolean
        enabled:
          description: Turn notifications on or off entirely.
          type: boolean
      required:
      - emails_enabled
      - enabled
      type: object
    NotificationSettingsError:
      example:
        non_field_errors:
        - non_field_errors
        - non_field_errors
        emails_enabled: true
        enabled: true
      properties:
        emails_enabled:
          description: emails_enabled field errors
          type: boolean
        enabled:
          description: enabled field errors
          type: boolean
        non_field_errors:
          description: Errors not connected to any field
          items:
            type: string
          type: array
      type: object
    NotificationUpdateData:
      example:
        read: true
      properties:
        read:
          description: Mark the notification as either read or unread
          type: boolean
      required:
      - read
      type: object
    Plan:
      example:
        statement_descriptor: statement_descriptor
        interval_count: 6
        amount: 0
        metadata: "{}"
        livemode: true
        created: created
        name: name
        currency: currency
        interval: interval
        id: id
        trial_period_days: 1
        stripe_id: stripe_id
      properties:
        amount:
          description: Amount (cost/price) of plan.
          type: integer
        created:
          description: Date and time when plan was created.
          type: string
        currency:
          description: Currency used to specify amount.
          type: string
        id:
          description: Plan unique identifier as UUID.
          type: string
        interval:
          description: "Interval for plan, such as montly or yearly."
          type: string
        interval_count:
          description: ""
          type: integer
        livemode:
          description: "Boolean to determine whether plan is live, or not."
          type: boolean
        metadata:
          description: Optional meta data object.
          properties: {}
          type: object
        name:
          description: Plan name.
          type: string
        statement_descriptor:
          description: Statement that describes plan to users.
          type: string
        stripe_id:
          description: Stripe identifier to identify entity charging for plans.
          type: string
        trial_period_days:
          description: "Number of days for plan trial, used for try and buy campaigns."
          type: integer
      required:
      - amount
      - interval
      - interval_count
      - name
      type: object
    Project:
      example:
        owner: owner
        last_updated: last_updated
        private: true
        name: name
        collaborators:
        - collaborators
        - collaborators
        description: description
        id: id
        team: team
      properties:
        collaborators:
          description: Array of project collaborators.
          items:
            type: string
          type: array
        description:
          description: Project description.
          type: string
        id:
          description: Unique identifier for project as UUID.
          type: string
        last_updated:
          description: Date and time when project was last updated.
          type: string
        name:
          description: Project name.
          type: string
        owner:
          description: Username of project owner.
          type: string
        private:
          description: Value that states whether project is private or public.
          type: boolean
        team:
          description: Project team name.
          type: string
      required:
      - name
      type: object
    ProjectData:
      example:
        private: true
        name: name
        description: description
      properties:
        description:
          description: Project description.
          type: string
        name:
          description: Project name.
          type: string
        private:
          description: "Private project true, otherwise public."
          type: boolean
      required:
      - name
      type: object
    ProjectError:
      example:
        owner:
        - owner
        - owner
        last_updated:
        - last_updated
        - last_updated
        private:
        - private
        - private
        non_field_errors:
        - non_field_errors
        - non_field_errors
        name:
        - name
        - name
        collaborators:
        - collaborators
        - collaborators
        description:
        - description
        - description
        id:
        - id
        - id
      properties:
        collaborators:
          description: Collaborators field errors.
          items:
            type: string
          type: array
        description:
          description: Description field errors.
          items:
            type: string
          type: array
        id:
          description: Id field errors.
          items:
            type: string
          type: array
        last_updated:
          description: Last_updated field errors.
          items:
            type: string
          type: array
        name:
          description: Name field errors.
          items:
            type: string
          type: array
        non_field_errors:
          description: Errors not connected to any field.
          items:
            type: string
          type: array
        owner:
          description: Owner field errors.
          items:
            type: string
          type: array
        private:
          description: Private field errors.
          items:
            type: string
          type: array
      type: object
    ProjectFile:
      example:
        path: path
        name: name
        project: project
        id: id
        content: content
      properties:
        content:
          description: "Data sent as string, in base64 format."
          type: string
        id:
          description: File unique identifier in UUID format.
          type: string
        name:
          description: File name and extension.
          type: string
        path:
          description: File path. Defaults to root (/).
          type: string
        project:
          description: Project name where file is located.
          type: string
      required:
      - project
      type: object
    ProjectFileError:
      example:
        path:
        - path
        - path
        file:
        - file
        - file
        non_field_errors:
        - non_field_errors
        - non_field_errors
        name:
        - name
        - name
        project:
        - project
        - project
        id:
        - id
        - id
        content:
        - content
        - content
      properties:
        content:
          description: base64_data field errors
          items:
            type: string
          type: array
        file:
          description: file field errors
          items:
            type: string
          type: array
        id:
          description: id field errors
          items:
            type: string
          type: array
        name:
          description: name field errors
          items:
            type: string
          type: array
        non_field_errors:
          description: Errors not connected to any field
          items:
            type: string
          type: array
        path:
          description: path field errors
          items:
            type: string
          type: array
        project:
          description: project field errors
          items:
            type: string
          type: array
      type: object
    RefreshJSONWebToken:
      example:
        token: token
      properties:
        token:
          description: Refresh JWT token.
          type: string
      required:
      - token
      type: object
    RefreshJSONWebTokenData:
      example:
        token: token
      properties:
        token:
          description: Refreshed token.
          type: string
      required:
      - token
      type: object
    RefreshJSONWebTokenError:
      example:
        non_field_errors:
        - non_field_errors
        - non_field_errors
        token:
        - token
        - token
      properties:
        non_field_errors:
          description: Errors not connected to any field.
          items:
            type: string
          type: array
        token:
          description: Token field errors.
          items:
            type: string
          type: array
      type: object
    Search:
      type: object
    Server:
      example:
        startup_script: startup_script
        logs_url: logs_url
        created_at: created_at
        project: project
        created_by: created_by
        status_url: status_url
        connected:
        - connected
        - connected
        image_name: image_name
        endpoint: endpoint
        server_size: server_size
        host: host
        name: name
        id: id
        config: "{}"
        status: Stopped
      properties:
        config:
          description: "Server configuration option. Values are jupyter, restful and\
            \ cron."
          properties: {}
          type: object
        connected:
          description: Array that represents what other servers the server is connected
            to.
          items:
            type: string
          type: array
        created_at:
          description: Date and time when server was created.
          type: string
        created_by:
          description: User that created server.
          type: string
        endpoint:
          description: Server endpoint path.
          type: string
        host:
          description: |
            Value that represents user defined host, otherwise known as BYON (Bring Your Own Node).
          type: string
        id:
          description: Server unique identifier in UUID format.
          type: string
        image_name:
          description: |
            Server image source, such as 3blades/tensorflow-notebook.
          type: string
        logs_url:
          description: |
            A WebSocket URL for streaming stdout and stderr logs from the server.
          type: string
        name:
          description: Server name.
          type: string
        project:
          description: Project name.
          type: string
        server_size:
          description: Server size unique identifier.
          type: string
        startup_script:
          description: Optional startup script to use when launching server.
          type: string
        status:
          description: "Server status, such as Running or Error."
          enum:
          - Stopped
          - Running
          - Error
          type: string
        status_url:
          description: |
            A WebSocket URL for listening to server status changes.
          type: string
      required:
      - name
      type: object
    ServerAction:
      example:
        webhook:
          payload: "{}"
          url: url
        name: name
        id: id
        operation: start
      properties:
        id:
          description: Server trigger unique identifier.
          type: string
        name:
          description: Name for server action.
          type: string
        operation:
          description: |
            Manage server state. Starting a server changes state from Pending to Running. Terminating a server changes state from Running to Terminated. If the action results in Error, status will change to Error.
          enum:
          - start
          - stop
          - terminate
          type: string
        webhook:
          $ref: '#/components/schemas/Webhook'
      type: object
    ServerActionData:
      example:
        webhook:
          payload: "{}"
          url: url
        name: name
        operation: start
      properties:
        name:
          description: Name of server action.
          type: string
        operation:
          description: |
            Manage server state. Starting a server changes state from Pending to Running. Terminating a server changes state from Running to Terminated. Stopping a server changes state from Running to Stopped. If the action results in Error, status will change to Error.
          enum:
          - start
          - stop
          - terminate
          type: string
        webhook:
          $ref: '#/components/schemas/Webhook'
      type: object
    ServerActionError:
      example:
        non_field_errors:
        - non_field_errors
        - non_field_errors
        name:
        - name
        - name
        id:
        - id
        - id
        operation:
        - operation
        - operation
      properties:
        id:
          description: Id field errors.
          items:
            type: string
          type: array
        name:
          description: Name field errors.
          items:
            type: string
          type: array
        non_field_errors:
          description: Errors not connected to any field.
          items:
            type: string
          type: array
        operation:
          description: Operation field errors.
          items:
            type: string
          type: array
      type: object
    ServerConfig:
      example:
        function: function
        type: jupyter
        command: command
        script: script
      properties:
        command:
          description: Command to run
          type: string
        function:
          description: Server function.
          type: string
        script:
          description: Server script file.
          type: string
        type:
          description: Server type.
          enum:
          - jupyter
          - restful
          - cron
          type: string
      type: object
    ServerData:
      example:
        connected:
        - connected
        - connected
        image_name: image_name
        startup_script: startup_script
        server_size: server_size
        host: host
        name: name
        config:
          function: function
          type: jupyter
          command: command
          script: script
      properties:
        config:
          $ref: '#/components/schemas/ServerConfig'
        connected:
          description: Array of other servers the server is connected to.
          items:
            type: string
          type: array
        host:
          description: External host IPv4 address or hostname.
          type: string
        image_name:
          description: Image name.
          type: string
        name:
          description: Server name.
          type: string
        server_size:
          description: Server size unique identifier.
          type: string
        startup_script:
          description: Startup script to run when launching server.
          type: string
      required:
      - name
      type: object
    ServerError:
      example:
        startup_script:
        - startup_script
        - startup_script
        non_field_errors:
        - non_field_errors
        - non_field_errors
        logs_url:
        - logs_url
        - logs_url
        created_at:
        - created_at
        - created_at
        status_url:
        - status_url
        - status_url
        connected:
        - connected
        - connected
        image_name:
        - image_name
        - image_name
        endpoint:
        - endpoint
        - endpoint
        server_size:
        - server_size
        - server_size
        host:
        - host
        - host
        name:
        - name
        - name
        id:
        - id
        - id
        config:
        - config
        - config
        status:
        - status
        - status
      properties:
        config:
          description: config field errors.
          items:
            type: string
          type: array
        connected:
          description: connected field errors.
          items:
            type: string
          type: array
        created_at:
          description: created_at field errors.
          items:
            type: string
          type: array
        endpoint:
          description: endpoint field errors.
          items:
            type: string
          type: array
        host:
          description: host field errors.
          items:
            type: string
          type: array
        id:
          description: id field errors.
          items:
            type: string
          type: array
        image_name:
          description: image_name field errors.
          items:
            type: string
          type: array
        logs_url:
          description: logs_url field errors.
          items:
            type: string
          type: array
        name:
          description: name field errors.
          items:
            type: string
          type: array
        non_field_errors:
          description: Errors not connected to any field.
          items:
            type: string
          type: array
        server_size:
          description: server_size field errors.
          items:
            type: string
          type: array
        startup_script:
          description: startup_script field errors.
          items:
            type: string
          type: array
        status:
          description: status field errors.
          items:
            type: string
          type: array
        status_url:
          description: status_url field errors.
          items:
            type: string
          type: array
      type: object
    ServerRunStatistics:
      example:
        server: server
        size: 6
        stacktrace: stacktrace
        stop: stop
        exit_code: 0
        start: start
        id: id
      properties:
        exit_code:
          description: "Exit code, such as Exit 0 or Exit 1."
          type: integer
        id:
          description: Server run statistics object unique identifier in UUID format.
          type: string
        server:
          description: Server name.
          type: string
        size:
          description: Size of server.
          type: integer
        stacktrace:
          description: "Stacktrace, if there was one."
          type: string
        start:
          description: Date and time that represents when server started.
          type: string
        stop:
          description: Date and time that represents when server stopped.
          type: string
      type: object
    ServerRunStatisticsData:
      example:
        size: 6
        stacktrace: stacktrace
        stop: stop
        exit_code: 0
        start: start
      properties:
        exit_code:
          description: Server exit code.
          type: integer
        size:
          description: Server size.
          type: integer
        stacktrace:
          description: Server stacktrace.
          type: string
        start:
          description: Server start.
          type: string
        stop:
          description: Server stop.
          type: string
      type: object
    ServerRunStatisticsError:
      example:
        size:
        - size
        - size
        stacktrace:
        - stacktrace
        - stacktrace
        stop:
        - stop
        - stop
        non_field_errors:
        - non_field_errors
        - non_field_errors
        exit_code:
        - exit_code
        - exit_code
        start:
        - start
        - start
        id:
        - id
        - id
      properties:
        exit_code:
          description: exit_code field errors.
          items:
            type: string
          type: array
        id:
          description: id field errors.
          items:
            type: string
          type: array
        non_field_errors:
          description: Errors not connected to any field.
          items:
            type: string
          type: array
        size:
          description: size field errors.
          items:
            type: string
          type: array
        stacktrace:
          description: stacktrace field errors.
          items:
            type: string
          type: array
        start:
          description: start field errors.
          items:
            type: string
          type: array
        stop:
          description: stop field errors.
          items:
            type: string
          type: array
      type: object
    ServerSize:
      example:
        memory: 6
        name: name
        active: true
        cpu: 0
        id: id
      properties:
        active:
          description: "States whether the Server size is active, or not."
          type: boolean
        cpu:
          description: |
            CPU availability, equivalent to --cpus=<value>. For example if a host has
            2 CPU's, then a value of 1.5 would be limit the container to using all of the
            first CPU and half of the second CPU.
          type: integer
        id:
          description: Server size unique identifier.
          type: string
        memory:
          description: Memory restriction for container.
          type: integer
        name:
          description: Server size name.
          type: string
      required:
      - cpu
      - memory
      - name
      type: object
    ServerSizeData:
      example:
        memory: 6
        name: name
        active: true
        cpu: 0
      properties:
        active:
          description: Active or not active.
          type: boolean
        cpu:
          description: CPU set for server size.
          type: integer
        memory:
          description: Memory set for server size.
          type: integer
        name:
          description: Server size name.
          type: string
      required:
      - active
      - cpu
      - memory
      - name
      type: object
    ServerSizeError:
      example:
        memory:
        - memory
        - memory
        non_field_errors:
        - non_field_errors
        - non_field_errors
        name:
        - name
        - name
        active:
        - active
        - active
        cpu:
        - cpu
        - cpu
        id:
        - id
        - id
      properties:
        active:
          description: Active field errors.
          items:
            type: string
          type: array
        cpu:
          description: CPU field errors.
          items:
            type: string
          type: array
        id:
          description: Id field errors.
          items:
            type: string
          type: array
        memory:
          description: Memory field errors.
          items:
            type: string
          type: array
        name:
          description: Name field errors.
          items:
            type: string
          type: array
        non_field_errors:
          description: Errors not connected to any field.
          items:
            type: string
          type: array
      type: object
    ServerStatistics:
      example:
        server: server
        size: 0
        stop: stop
        start: start
        id: id
      properties:
        id:
          description: Server statistics unique identifier in UUID format.
          type: string
        server:
          description: Server name.
          type: string
        size:
          description: Size of statistics.
          type: integer
        start:
          description: "Start statistics, such as start time and date."
          type: string
        stop:
          description: "Stop statistics, such as stop time and date."
          type: string
      type: object
    ServerStatisticsData:
      example:
        size:
        - size
        - size
        stop:
        - stop
        - stop
        non_field_errors:
        - non_field_errors
        - non_field_errors
        start:
        - start
        - start
        id:
        - id
        - id
      properties:
        id:
          description: id field errors.
          items:
            type: string
          type: array
        non_field_errors:
          description: Errors not connected to any field.
          items:
            type: string
          type: array
        size:
          description: size field errors.
          items:
            type: string
          type: array
        start:
          description: start field errors.
          items:
            type: string
          type: array
        stop:
          description: stop field errors.
          items:
            type: string
          type: array
      type: object
    ServerStatisticsError:
      example:
        size:
        - size
        - size
        stop:
        - stop
        - stop
        non_field_errors:
        - non_field_errors
        - non_field_errors
        start:
        - start
        - start
        id:
        - id
        - id
      properties:
        id:
          description: Id field errors.
          items:
            type: string
          type: array
        non_field_errors:
          description: Errors not connected to any field.
          items:
            type: string
          type: array
        size:
          description: Size field errors.
          items:
            type: string
          type: array
        start:
          description: Start field errors.
          items:
            type: string
          type: array
        stop:
          description: Stop field errors.
          items:
            type: string
          type: array
      type: object
    ServerStatus:
      example:
        id: id
        status: Stopped
      properties:
        id:
          description: Server unique identifier in UUID format.
          type: string
        status:
          enum:
          - Stopped
          - Running
          - Error
          type: string
      type: object
    SshTunnel:
      example:
        server: server
        endpoint: endpoint
        local_port: 0
        host: host
        name: name
        remote_port: 6
        id: id
        username: username
      properties:
        endpoint:
          description: SSH tunnel destination endpoint.
          type: string
        host:
          description: "Host, usually IPv4, for SSH tunnel."
          type: string
        id:
          description: SSH tunnel unique identifier in UUID format.
          type: string
        local_port:
          description: Local source port for SSH tunnel.
          type: integer
        name:
          description: SSH tunnel name.
          type: string
        remote_port:
          description: Remote port to establish SSH tunnel.
          type: integer
        server:
          description: Server name.
          type: string
        username:
          description: SSH tunnel user name.
          type: string
      required:
      - endpoint
      - host
      - local_port
      - name
      - remote_port
      - username
      type: object
    SshTunnelData:
      example:
        endpoint: endpoint
        local_port: 0
        host: host
        name: name
        remote_port: 6
        username: username
      properties:
        endpoint:
          description: SSH tunnel endpoint.
          type: string
        host:
          description: SSH tunnel host.
          type: string
        local_port:
          description: SSH tunnel local port.
          type: integer
        name:
          description: SSH tunnel name.
          type: string
        remote_port:
          description: SSH tunnel remote port.
          type: integer
        username:
          description: User name to establish SSH tunnel.
          type: string
      required:
      - endpoint
      - host
      - local_port
      - name
      - remote_port
      - username
      type: object
    SshTunnelError:
      example:
        endpoint:
        - endpoint
        - endpoint
        local_port:
        - local_port
        - local_port
        non_field_errors:
        - non_field_errors
        - non_field_errors
        host:
        - host
        - host
        name:
        - name
        - name
        remote_port:
        - remote_port
        - remote_port
        id:
        - id
        - id
        username:
        - username
        - username
      properties:
        endpoint:
          description: endpoint field errors.
          items:
            type: string
          type: array
        host:
          description: host field errors.
          items:
            type: string
          type: array
        id:
          description: id field errors.
          items:
            type: string
          type: array
        local_port:
          description: local_port field errors.
          items:
            type: string
          type: array
        name:
          description: name field errors.
          items:
            type: string
          type: array
        non_field_errors:
          description: Errors not connected to any field.
          items:
            type: string
          type: array
        remote_port:
          description: remote_port field errors.
          items:
            type: string
          type: array
        username:
          description: username field errors.
          items:
            type: string
          type: array
      type: object
    Subscription:
      example:
        quantity: 6
        cancel_at_period_end: true
        livemode: true
        canceled_at: canceled_at
        created: created
        start: start
        trial_end: trial_end
        current_period_end: current_period_end
        application_fee_percent: 0.8008281904610115
        trial_start: trial_start
        id: id
        plan: plan
        current_period_start: current_period_start
        ended_at: ended_at
        stripe_id: stripe_id
        status: status
      properties:
        application_fee_percent:
          description: Application fee percent.
          type: number
        cancel_at_period_end:
          description: "Boolean value to determine whether plan cancels at the end\
            \ of the period, or not."
          type: boolean
        canceled_at:
          description: Date and time when plan was cancelled.
          type: string
        created:
          description: Date and time suscription was created.
          type: string
        current_period_end:
          description: Current suscription plan end date.
          type: string
        current_period_start:
          description: Current suscription plan start date.
          type: string
        ended_at:
          description: Date and time for when plan ended.
          type: string
        id:
          description: Unique identifier for suscription as UUID.
          type: string
        livemode:
          description: "Suscription live, or not."
          type: boolean
        plan:
          description: Plan name.
          type: string
        quantity:
          description: Quantity purchased as integer.
          type: integer
        start:
          description: Date and time for when plan started.
          type: string
        status:
          description: Suscription status.
          type: string
        stripe_id:
          description: Stripe (payment processor) identifier.
          type: string
        trial_end:
          description: Date and time for trial end.
          type: string
        trial_start:
          description: Date and time for trial start.
          type: string
      required:
      - plan
      type: object
    SubscriptionData:
      example:
        plan: plan
      properties:
        plan:
          description: Plan unique identifier.
          type: string
      required:
      - plan
      type: object
    SubscriptionError:
      example:
        quantity:
        - quantity
        - quantity
        cancel_at_period_end:
        - cancel_at_period_end
        - cancel_at_period_end
        livemode:
        - livemode
        - livemode
        canceled_at:
        - canceled_at
        - canceled_at
        created:
        - created
        - created
        non_field_errors:
        - non_field_errors
        - non_field_errors
        start:
        - start
        - start
        trial_end:
        - trial_end
        - trial_end
        current_period_end:
        - current_period_end
        - current_period_end
        application_fee_percent:
        - application_fee_percent
        - application_fee_percent
        trial_start:
        - trial_start
        - trial_start
        id:
        - id
        - id
        plan:
        - plan
        - plan
        current_period_start:
        - current_period_start
        - current_period_start
        ended_at:
        - ended_at
        - ended_at
        stripe_id:
        - stripe_id
        - stripe_id
        status:
        - status
        - status
      properties:
        application_fee_percent:
          description: application_fee_percent field errors
          items:
            type: string
          type: array
        cancel_at_period_end:
          description: cancel_at_period_end field errors
          items:
            type: string
          type: array
        canceled_at:
          description: canceled_at field errors
          items:
            type: string
          type: array
        created:
          description: created field errors
          items:
            type: string
          type: array
        current_period_end:
          description: current_period_end field errors
          items:
            type: string
          type: array
        current_period_start:
          description: current_period_start field errors
          items:
            type: string
          type: array
        ended_at:
          description: ended_at field errors
          items:
            type: string
          type: array
        id:
          description: id field errors
          items:
            type: string
          type: array
        livemode:
          description: livemode field errors
          items:
            type: string
          type: array
        non_field_errors:
          description: Errors not connected to any field
          items:
            type: string
          type: array
        plan:
          description: plan field errors
          items:
            type: string
          type: array
        quantity:
          description: quantity field errors
          items:
            type: string
          type: array
        start:
          description: start field errors
          items:
            type: string
          type: array
        status:
          description: status field errors
          items:
            type: string
          type: array
        stripe_id:
          description: stripe_id field errors
          items:
            type: string
          type: array
        trial_end:
          description: trial_end field errors
          items:
            type: string
          type: array
        trial_start:
          description: trial_start field errors
          items:
            type: string
          type: array
      type: object
    Team:
      example:
        website: website
        avatar_url: avatar_url
        name: name
        description: description
        location: location
        avatar: avatar
        id: id
        created_by: created_by
      properties:
        avatar:
          description: Team avatar image.
          format: byte
          pattern: "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
          type: string
        avatar_url:
          description: Team avatar url.
          type: string
        created_by:
          description: UUID of a user that created this team.
          type: string
        description:
          description: Team description
          type: string
        id:
          description: Team unique identifier expressed as UUID.
          type: string
        location:
          description: Team location.
          type: string
        name:
          description: Team name
          type: string
        website:
          description: Teams website.
          type: string
      type: object
    TeamData:
      example:
        website: website
        avatar_url: avatar_url
        name: name
        description: description
        location: location
        avatar: avatar
      properties:
        avatar:
          description: Team avatar image.
          format: byte
          pattern: "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
          type: string
        avatar_url:
          description: Team avatar url.
          type: string
        description:
          description: Team description
          type: string
        location:
          description: Team location.
          type: string
        name:
          description: Team name
          type: string
        website:
          description: Teams website.
          type: string
      required:
      - name
      type: object
    TeamError:
      example:
        website:
        - website
        - website
        avatar_url:
        - avatar_url
        - avatar_url
        non_field_errors:
        - non_field_errors
        - non_field_errors
        name:
        - name
        - name
        description:
        - description
        - description
        location:
        - location
        - location
        avatar:
        - avatar
        - avatar
        id:
        - id
        - id
      properties:
        avatar:
          description: Avatar field errors.
          items:
            type: string
          type: array
        avatar_url:
          description: Avatar url field errors.
          items:
            type: string
          type: array
        description:
          description: Description field errors.
          items:
            type: string
          type: array
        id:
          description: Id field errors.
          items:
            type: string
          type: array
        location:
          description: Location field errors.
          items:
            type: string
          type: array
        name:
          description: Name field errors.
          items:
            type: string
          type: array
        non_field_errors:
          description: Errors not connected to any field.
          items:
            type: string
          type: array
        website:
          description: Website field errors.
          items:
            type: string
          type: array
      type: object
    User:
      example:
        profile:
          timezone: timezone
          bio: bio
          company: company
          location: location
          avatar: avatar
          url: url
        last_name: last_name
        id: id
        first_name: first_name
        email: email
        username: username
      properties:
        email:
          description: User email address.
          type: string
        first_name:
          description: User first name.
          type: string
        id:
          description: "User unique identifier, expressed as UUID."
          type: string
        last_name:
          description: User last name.
          type: string
        profile:
          $ref: '#/components/schemas/UserProfile'
        username:
          description: "Required. 150 characters or fewer. Letters, digits and @/./+/-/_\
            \ only."
          maxLength: 64
          minLength: 6
          pattern: "[a-z0-9]{6,64}"
          type: string
      required:
      - profile
      - username
      type: object
    UserData:
      example:
        password: password
        profile:
          timezone: timezone
          bio: bio
          company: company
          location: location
          avatar: avatar
          url: url
        last_name: last_name
        first_name: first_name
        email: email
        username: username
      properties:
        email:
          description: User email.
          type: string
        first_name:
          description: User first name.
          type: string
        last_name:
          description: User last name.
          type: string
        password:
          description: User password.
          type: string
        profile:
          $ref: '#/components/schemas/UserProfile'
        username:
          description: "Required. 150 characters or fewer. Letters, digits and @/./+/-/_\
            \ only."
          type: string
      required:
      - password
      - profile
      - username
      type: object
    UserError:
      example:
        password:
        - password
        - password
        non_field_errors:
        - non_field_errors
        - non_field_errors
        profile:
          timezone:
          - timezone
          - timezone
          non_field_errors:
          - non_field_errors
          - non_field_errors
          bio:
          - bio
          - bio
          company:
          - company
          - company
          location:
          - location
          - location
          url:
          - url
          - url
        last_name:
        - last_name
        - last_name
        id:
        - id
        - id
        first_name:
        - first_name
        - first_name
        email:
        - email
        - email
        username:
        - username
        - username
      properties:
        email:
          description: Email field errors.
          items:
            type: string
          type: array
        first_name:
          description: First name field errors.
          items:
            type: string
          type: array
        id:
          description: id field errors.
          items:
            type: string
          type: array
        last_name:
          description: Last name field errors.
          items:
            type: string
          type: array
        non_field_errors:
          description: Errors not connected to any field.
          items:
            type: string
          type: array
        password:
          description: Password field errors.
          items:
            type: string
          type: array
        profile:
          $ref: '#/components/schemas/UserProfileError'
        username:
          description: Username field errors.
          items:
            type: string
          type: array
      type: object
    UserProfile:
      example:
        timezone: timezone
        bio: bio
        company: company
        location: location
        avatar: avatar
        url: url
      properties:
        avatar:
          description: Avatar image
          format: byte
          pattern: "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
          type: string
        bio:
          description: Description of user's biography.
          type: string
        company:
          description: User's company.
          type: string
        location:
          description: User location.
          type: string
        timezone:
          description: User's time zone.
          type: string
        url:
          description: Users's personal website.
          type: string
      type: object
    UserProfileError:
      example:
        timezone:
        - timezone
        - timezone
        non_field_errors:
        - non_field_errors
        - non_field_errors
        bio:
        - bio
        - bio
        company:
        - company
        - company
        location:
        - location
        - location
        url:
        - url
        - url
      properties:
        bio:
          description: Bio field errors.
          items:
            type: string
          type: array
        company:
          description: Company field errors.
          items:
            type: string
          type: array
        location:
          description: Location field errors.
          items:
            type: string
          type: array
        non_field_errors:
          description: Errors not connected to any field.
          items:
            type: string
          type: array
        timezone:
          description: Timezone field errors.
          items:
            type: string
          type: array
        url:
          description: URL field errors.
          items:
            type: string
          type: array
      type: object
    VerifyJSONWebToken:
      example:
        token: token
      properties:
        token:
          description: Varify JWT token.
          type: string
      required:
      - token
      type: object
    VerifyJSONWebTokenData:
      example:
        token: token
      properties:
        token:
          description: JSON Web Token (JWT).
          type: string
      required:
      - token
      type: object
    VerifyJSONWebTokenError:
      example:
        non_field_errors:
        - non_field_errors
        - non_field_errors
        token:
        - token
        - token
      properties:
        non_field_errors:
          description: Errors not connected to any field.
          items:
            type: string
          type: array
        token:
          description: Token field errors.
          items:
            type: string
          type: array
      type: object
    Webhook:
      example:
        payload: "{}"
        url: url
      properties:
        payload:
          description: JSON with payload and webhook configurations.
          properties: {}
          type: object
        url:
          description: URL for webhook.
          type: string
      required:
      - url
      type: object
    project_copy_check_request:
      properties:
        project:
          description: UUID of the project the user wishes to copy.
          type: string
      required:
      - project
      type: object
    project_copy_request:
      properties:
        name:
          description: Name for the newly copied project
          type: string
        project:
          description: UUID of the project the user wishes to copy.
          type: string
      required:
      - project
      type: object
    projects_project_files_create_request:
      properties:
        file:
          description: "File to send, to create new file. This parameter is only used\
            \ with form data and may include multiple files."
          format: binary
          type: string
        base64_data:
          description: "Fila data, represented as base64."
          type: string
        name:
          description: File name. May include path when creating file with base64
            field.
          type: string
        path:
          description: File path. Defaults to (/).
          type: string
      type: object
  securitySchemes:
    jwt:
      description: |
        A valid JSON Web Token (JWT) must be passed for all operations except for those in the `/auth` route. A JWT can be retrieved from the `/auth/jwt-token-auth` endpoint.

        The following syntax is required:

          Authorization: Bearer <token>
      in: header
      name: Authorization
      type: apiKey
x-headers:
- Content-Type: application/json
x-samples-languages:
- curl
- python
- javascript
- node
- ruby
- php
- go
- csharp
- java
- swift
x-original-swagger-version: "2.0"

