/*
 * IllumiDesk
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CardUpdateError
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:54:22.511892-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CardUpdateError {
  public static final String SERIALIZED_NAME_ADDRESS_CITY = "address_city";
  @SerializedName(SERIALIZED_NAME_ADDRESS_CITY)
  private List<String> addressCity = new ArrayList<>();

  public static final String SERIALIZED_NAME_ADDRESS_COUNTRY = "address_country";
  @SerializedName(SERIALIZED_NAME_ADDRESS_COUNTRY)
  private List<String> addressCountry = new ArrayList<>();

  public static final String SERIALIZED_NAME_ADDRESS_LINE1 = "address_line1";
  @SerializedName(SERIALIZED_NAME_ADDRESS_LINE1)
  private List<String> addressLine1 = new ArrayList<>();

  public static final String SERIALIZED_NAME_ADDRESS_LINE1_CHECK = "address_line1_check";
  @SerializedName(SERIALIZED_NAME_ADDRESS_LINE1_CHECK)
  private List<String> addressLine1Check = new ArrayList<>();

  public static final String SERIALIZED_NAME_ADDRESS_LINE2 = "address_line2";
  @SerializedName(SERIALIZED_NAME_ADDRESS_LINE2)
  private List<String> addressLine2 = new ArrayList<>();

  public static final String SERIALIZED_NAME_ADDRESS_STATE = "address_state";
  @SerializedName(SERIALIZED_NAME_ADDRESS_STATE)
  private List<String> addressState = new ArrayList<>();

  public static final String SERIALIZED_NAME_ADDRESS_ZIP = "address_zip";
  @SerializedName(SERIALIZED_NAME_ADDRESS_ZIP)
  private List<String> addressZip = new ArrayList<>();

  public static final String SERIALIZED_NAME_ADDRESS_ZIP_CHECK = "address_zip_check";
  @SerializedName(SERIALIZED_NAME_ADDRESS_ZIP_CHECK)
  private List<String> addressZipCheck = new ArrayList<>();

  public static final String SERIALIZED_NAME_BRAND = "brand";
  @SerializedName(SERIALIZED_NAME_BRAND)
  private List<String> brand = new ArrayList<>();

  public static final String SERIALIZED_NAME_CREATED = "created";
  @SerializedName(SERIALIZED_NAME_CREATED)
  private List<String> created = new ArrayList<>();

  public static final String SERIALIZED_NAME_CUSTOMER = "customer";
  @SerializedName(SERIALIZED_NAME_CUSTOMER)
  private List<String> customer = new ArrayList<>();

  public static final String SERIALIZED_NAME_CVC_CHECK = "cvc_check";
  @SerializedName(SERIALIZED_NAME_CVC_CHECK)
  private List<String> cvcCheck = new ArrayList<>();

  public static final String SERIALIZED_NAME_EXP_MONTH = "exp_month";
  @SerializedName(SERIALIZED_NAME_EXP_MONTH)
  private List<String> expMonth = new ArrayList<>();

  public static final String SERIALIZED_NAME_EXP_YEAR = "exp_year";
  @SerializedName(SERIALIZED_NAME_EXP_YEAR)
  private List<String> expYear = new ArrayList<>();

  public static final String SERIALIZED_NAME_FINGERPRINT = "fingerprint";
  @SerializedName(SERIALIZED_NAME_FINGERPRINT)
  private List<String> fingerprint = new ArrayList<>();

  public static final String SERIALIZED_NAME_FUNDING = "funding";
  @SerializedName(SERIALIZED_NAME_FUNDING)
  private List<String> funding = new ArrayList<>();

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private List<String> id = new ArrayList<>();

  public static final String SERIALIZED_NAME_LAST4 = "last4";
  @SerializedName(SERIALIZED_NAME_LAST4)
  private List<String> last4 = new ArrayList<>();

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private List<String> name = new ArrayList<>();

  public static final String SERIALIZED_NAME_NON_FIELD_ERRORS = "non_field_errors";
  @SerializedName(SERIALIZED_NAME_NON_FIELD_ERRORS)
  private List<String> nonFieldErrors = new ArrayList<>();

  public static final String SERIALIZED_NAME_STRIPE_ID = "stripe_id";
  @SerializedName(SERIALIZED_NAME_STRIPE_ID)
  private List<String> stripeId = new ArrayList<>();

  public static final String SERIALIZED_NAME_TOKEN = "token";
  @SerializedName(SERIALIZED_NAME_TOKEN)
  private List<String> token = new ArrayList<>();

  public CardUpdateError() {
  }

  public CardUpdateError addressCity(List<String> addressCity) {
    this.addressCity = addressCity;
    return this;
  }

  public CardUpdateError addAddressCityItem(String addressCityItem) {
    if (this.addressCity == null) {
      this.addressCity = new ArrayList<>();
    }
    this.addressCity.add(addressCityItem);
    return this;
  }

  /**
   * address_city field errors
   * @return addressCity
   */
  @javax.annotation.Nullable
  public List<String> getAddressCity() {
    return addressCity;
  }

  public void setAddressCity(List<String> addressCity) {
    this.addressCity = addressCity;
  }


  public CardUpdateError addressCountry(List<String> addressCountry) {
    this.addressCountry = addressCountry;
    return this;
  }

  public CardUpdateError addAddressCountryItem(String addressCountryItem) {
    if (this.addressCountry == null) {
      this.addressCountry = new ArrayList<>();
    }
    this.addressCountry.add(addressCountryItem);
    return this;
  }

  /**
   * address_country field errors
   * @return addressCountry
   */
  @javax.annotation.Nullable
  public List<String> getAddressCountry() {
    return addressCountry;
  }

  public void setAddressCountry(List<String> addressCountry) {
    this.addressCountry = addressCountry;
  }


  public CardUpdateError addressLine1(List<String> addressLine1) {
    this.addressLine1 = addressLine1;
    return this;
  }

  public CardUpdateError addAddressLine1Item(String addressLine1Item) {
    if (this.addressLine1 == null) {
      this.addressLine1 = new ArrayList<>();
    }
    this.addressLine1.add(addressLine1Item);
    return this;
  }

  /**
   * address_line1 field errors
   * @return addressLine1
   */
  @javax.annotation.Nullable
  public List<String> getAddressLine1() {
    return addressLine1;
  }

  public void setAddressLine1(List<String> addressLine1) {
    this.addressLine1 = addressLine1;
  }


  public CardUpdateError addressLine1Check(List<String> addressLine1Check) {
    this.addressLine1Check = addressLine1Check;
    return this;
  }

  public CardUpdateError addAddressLine1CheckItem(String addressLine1CheckItem) {
    if (this.addressLine1Check == null) {
      this.addressLine1Check = new ArrayList<>();
    }
    this.addressLine1Check.add(addressLine1CheckItem);
    return this;
  }

  /**
   * address_line1_check field errors
   * @return addressLine1Check
   */
  @javax.annotation.Nullable
  public List<String> getAddressLine1Check() {
    return addressLine1Check;
  }

  public void setAddressLine1Check(List<String> addressLine1Check) {
    this.addressLine1Check = addressLine1Check;
  }


  public CardUpdateError addressLine2(List<String> addressLine2) {
    this.addressLine2 = addressLine2;
    return this;
  }

  public CardUpdateError addAddressLine2Item(String addressLine2Item) {
    if (this.addressLine2 == null) {
      this.addressLine2 = new ArrayList<>();
    }
    this.addressLine2.add(addressLine2Item);
    return this;
  }

  /**
   * address_line2 field errors
   * @return addressLine2
   */
  @javax.annotation.Nullable
  public List<String> getAddressLine2() {
    return addressLine2;
  }

  public void setAddressLine2(List<String> addressLine2) {
    this.addressLine2 = addressLine2;
  }


  public CardUpdateError addressState(List<String> addressState) {
    this.addressState = addressState;
    return this;
  }

  public CardUpdateError addAddressStateItem(String addressStateItem) {
    if (this.addressState == null) {
      this.addressState = new ArrayList<>();
    }
    this.addressState.add(addressStateItem);
    return this;
  }

  /**
   * address_state field errors
   * @return addressState
   */
  @javax.annotation.Nullable
  public List<String> getAddressState() {
    return addressState;
  }

  public void setAddressState(List<String> addressState) {
    this.addressState = addressState;
  }


  public CardUpdateError addressZip(List<String> addressZip) {
    this.addressZip = addressZip;
    return this;
  }

  public CardUpdateError addAddressZipItem(String addressZipItem) {
    if (this.addressZip == null) {
      this.addressZip = new ArrayList<>();
    }
    this.addressZip.add(addressZipItem);
    return this;
  }

  /**
   * address_zip field errors
   * @return addressZip
   */
  @javax.annotation.Nullable
  public List<String> getAddressZip() {
    return addressZip;
  }

  public void setAddressZip(List<String> addressZip) {
    this.addressZip = addressZip;
  }


  public CardUpdateError addressZipCheck(List<String> addressZipCheck) {
    this.addressZipCheck = addressZipCheck;
    return this;
  }

  public CardUpdateError addAddressZipCheckItem(String addressZipCheckItem) {
    if (this.addressZipCheck == null) {
      this.addressZipCheck = new ArrayList<>();
    }
    this.addressZipCheck.add(addressZipCheckItem);
    return this;
  }

  /**
   * address_zip_check field errors
   * @return addressZipCheck
   */
  @javax.annotation.Nullable
  public List<String> getAddressZipCheck() {
    return addressZipCheck;
  }

  public void setAddressZipCheck(List<String> addressZipCheck) {
    this.addressZipCheck = addressZipCheck;
  }


  public CardUpdateError brand(List<String> brand) {
    this.brand = brand;
    return this;
  }

  public CardUpdateError addBrandItem(String brandItem) {
    if (this.brand == null) {
      this.brand = new ArrayList<>();
    }
    this.brand.add(brandItem);
    return this;
  }

  /**
   * brand field errors
   * @return brand
   */
  @javax.annotation.Nullable
  public List<String> getBrand() {
    return brand;
  }

  public void setBrand(List<String> brand) {
    this.brand = brand;
  }


  public CardUpdateError created(List<String> created) {
    this.created = created;
    return this;
  }

  public CardUpdateError addCreatedItem(String createdItem) {
    if (this.created == null) {
      this.created = new ArrayList<>();
    }
    this.created.add(createdItem);
    return this;
  }

  /**
   * created field errors
   * @return created
   */
  @javax.annotation.Nullable
  public List<String> getCreated() {
    return created;
  }

  public void setCreated(List<String> created) {
    this.created = created;
  }


  public CardUpdateError customer(List<String> customer) {
    this.customer = customer;
    return this;
  }

  public CardUpdateError addCustomerItem(String customerItem) {
    if (this.customer == null) {
      this.customer = new ArrayList<>();
    }
    this.customer.add(customerItem);
    return this;
  }

  /**
   * customer field errors
   * @return customer
   */
  @javax.annotation.Nullable
  public List<String> getCustomer() {
    return customer;
  }

  public void setCustomer(List<String> customer) {
    this.customer = customer;
  }


  public CardUpdateError cvcCheck(List<String> cvcCheck) {
    this.cvcCheck = cvcCheck;
    return this;
  }

  public CardUpdateError addCvcCheckItem(String cvcCheckItem) {
    if (this.cvcCheck == null) {
      this.cvcCheck = new ArrayList<>();
    }
    this.cvcCheck.add(cvcCheckItem);
    return this;
  }

  /**
   * cvc_check field errors
   * @return cvcCheck
   */
  @javax.annotation.Nullable
  public List<String> getCvcCheck() {
    return cvcCheck;
  }

  public void setCvcCheck(List<String> cvcCheck) {
    this.cvcCheck = cvcCheck;
  }


  public CardUpdateError expMonth(List<String> expMonth) {
    this.expMonth = expMonth;
    return this;
  }

  public CardUpdateError addExpMonthItem(String expMonthItem) {
    if (this.expMonth == null) {
      this.expMonth = new ArrayList<>();
    }
    this.expMonth.add(expMonthItem);
    return this;
  }

  /**
   * exp_month field errors
   * @return expMonth
   */
  @javax.annotation.Nullable
  public List<String> getExpMonth() {
    return expMonth;
  }

  public void setExpMonth(List<String> expMonth) {
    this.expMonth = expMonth;
  }


  public CardUpdateError expYear(List<String> expYear) {
    this.expYear = expYear;
    return this;
  }

  public CardUpdateError addExpYearItem(String expYearItem) {
    if (this.expYear == null) {
      this.expYear = new ArrayList<>();
    }
    this.expYear.add(expYearItem);
    return this;
  }

  /**
   * exp_year field errors
   * @return expYear
   */
  @javax.annotation.Nullable
  public List<String> getExpYear() {
    return expYear;
  }

  public void setExpYear(List<String> expYear) {
    this.expYear = expYear;
  }


  public CardUpdateError fingerprint(List<String> fingerprint) {
    this.fingerprint = fingerprint;
    return this;
  }

  public CardUpdateError addFingerprintItem(String fingerprintItem) {
    if (this.fingerprint == null) {
      this.fingerprint = new ArrayList<>();
    }
    this.fingerprint.add(fingerprintItem);
    return this;
  }

  /**
   * fingerprint field errors
   * @return fingerprint
   */
  @javax.annotation.Nullable
  public List<String> getFingerprint() {
    return fingerprint;
  }

  public void setFingerprint(List<String> fingerprint) {
    this.fingerprint = fingerprint;
  }


  public CardUpdateError funding(List<String> funding) {
    this.funding = funding;
    return this;
  }

  public CardUpdateError addFundingItem(String fundingItem) {
    if (this.funding == null) {
      this.funding = new ArrayList<>();
    }
    this.funding.add(fundingItem);
    return this;
  }

  /**
   * funding field errors
   * @return funding
   */
  @javax.annotation.Nullable
  public List<String> getFunding() {
    return funding;
  }

  public void setFunding(List<String> funding) {
    this.funding = funding;
  }


  public CardUpdateError id(List<String> id) {
    this.id = id;
    return this;
  }

  public CardUpdateError addIdItem(String idItem) {
    if (this.id == null) {
      this.id = new ArrayList<>();
    }
    this.id.add(idItem);
    return this;
  }

  /**
   * id field errors
   * @return id
   */
  @javax.annotation.Nullable
  public List<String> getId() {
    return id;
  }

  public void setId(List<String> id) {
    this.id = id;
  }


  public CardUpdateError last4(List<String> last4) {
    this.last4 = last4;
    return this;
  }

  public CardUpdateError addLast4Item(String last4Item) {
    if (this.last4 == null) {
      this.last4 = new ArrayList<>();
    }
    this.last4.add(last4Item);
    return this;
  }

  /**
   * last4 field errors
   * @return last4
   */
  @javax.annotation.Nullable
  public List<String> getLast4() {
    return last4;
  }

  public void setLast4(List<String> last4) {
    this.last4 = last4;
  }


  public CardUpdateError name(List<String> name) {
    this.name = name;
    return this;
  }

  public CardUpdateError addNameItem(String nameItem) {
    if (this.name == null) {
      this.name = new ArrayList<>();
    }
    this.name.add(nameItem);
    return this;
  }

  /**
   * name field errors
   * @return name
   */
  @javax.annotation.Nullable
  public List<String> getName() {
    return name;
  }

  public void setName(List<String> name) {
    this.name = name;
  }


  public CardUpdateError nonFieldErrors(List<String> nonFieldErrors) {
    this.nonFieldErrors = nonFieldErrors;
    return this;
  }

  public CardUpdateError addNonFieldErrorsItem(String nonFieldErrorsItem) {
    if (this.nonFieldErrors == null) {
      this.nonFieldErrors = new ArrayList<>();
    }
    this.nonFieldErrors.add(nonFieldErrorsItem);
    return this;
  }

  /**
   * Errors not connected to any field
   * @return nonFieldErrors
   */
  @javax.annotation.Nullable
  public List<String> getNonFieldErrors() {
    return nonFieldErrors;
  }

  public void setNonFieldErrors(List<String> nonFieldErrors) {
    this.nonFieldErrors = nonFieldErrors;
  }


  public CardUpdateError stripeId(List<String> stripeId) {
    this.stripeId = stripeId;
    return this;
  }

  public CardUpdateError addStripeIdItem(String stripeIdItem) {
    if (this.stripeId == null) {
      this.stripeId = new ArrayList<>();
    }
    this.stripeId.add(stripeIdItem);
    return this;
  }

  /**
   * stripe_id field errors
   * @return stripeId
   */
  @javax.annotation.Nullable
  public List<String> getStripeId() {
    return stripeId;
  }

  public void setStripeId(List<String> stripeId) {
    this.stripeId = stripeId;
  }


  public CardUpdateError token(List<String> token) {
    this.token = token;
    return this;
  }

  public CardUpdateError addTokenItem(String tokenItem) {
    if (this.token == null) {
      this.token = new ArrayList<>();
    }
    this.token.add(tokenItem);
    return this;
  }

  /**
   * token field errors
   * @return token
   */
  @javax.annotation.Nullable
  public List<String> getToken() {
    return token;
  }

  public void setToken(List<String> token) {
    this.token = token;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CardUpdateError cardUpdateError = (CardUpdateError) o;
    return Objects.equals(this.addressCity, cardUpdateError.addressCity) &&
        Objects.equals(this.addressCountry, cardUpdateError.addressCountry) &&
        Objects.equals(this.addressLine1, cardUpdateError.addressLine1) &&
        Objects.equals(this.addressLine1Check, cardUpdateError.addressLine1Check) &&
        Objects.equals(this.addressLine2, cardUpdateError.addressLine2) &&
        Objects.equals(this.addressState, cardUpdateError.addressState) &&
        Objects.equals(this.addressZip, cardUpdateError.addressZip) &&
        Objects.equals(this.addressZipCheck, cardUpdateError.addressZipCheck) &&
        Objects.equals(this.brand, cardUpdateError.brand) &&
        Objects.equals(this.created, cardUpdateError.created) &&
        Objects.equals(this.customer, cardUpdateError.customer) &&
        Objects.equals(this.cvcCheck, cardUpdateError.cvcCheck) &&
        Objects.equals(this.expMonth, cardUpdateError.expMonth) &&
        Objects.equals(this.expYear, cardUpdateError.expYear) &&
        Objects.equals(this.fingerprint, cardUpdateError.fingerprint) &&
        Objects.equals(this.funding, cardUpdateError.funding) &&
        Objects.equals(this.id, cardUpdateError.id) &&
        Objects.equals(this.last4, cardUpdateError.last4) &&
        Objects.equals(this.name, cardUpdateError.name) &&
        Objects.equals(this.nonFieldErrors, cardUpdateError.nonFieldErrors) &&
        Objects.equals(this.stripeId, cardUpdateError.stripeId) &&
        Objects.equals(this.token, cardUpdateError.token);
  }

  @Override
  public int hashCode() {
    return Objects.hash(addressCity, addressCountry, addressLine1, addressLine1Check, addressLine2, addressState, addressZip, addressZipCheck, brand, created, customer, cvcCheck, expMonth, expYear, fingerprint, funding, id, last4, name, nonFieldErrors, stripeId, token);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CardUpdateError {\n");
    sb.append("    addressCity: ").append(toIndentedString(addressCity)).append("\n");
    sb.append("    addressCountry: ").append(toIndentedString(addressCountry)).append("\n");
    sb.append("    addressLine1: ").append(toIndentedString(addressLine1)).append("\n");
    sb.append("    addressLine1Check: ").append(toIndentedString(addressLine1Check)).append("\n");
    sb.append("    addressLine2: ").append(toIndentedString(addressLine2)).append("\n");
    sb.append("    addressState: ").append(toIndentedString(addressState)).append("\n");
    sb.append("    addressZip: ").append(toIndentedString(addressZip)).append("\n");
    sb.append("    addressZipCheck: ").append(toIndentedString(addressZipCheck)).append("\n");
    sb.append("    brand: ").append(toIndentedString(brand)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    customer: ").append(toIndentedString(customer)).append("\n");
    sb.append("    cvcCheck: ").append(toIndentedString(cvcCheck)).append("\n");
    sb.append("    expMonth: ").append(toIndentedString(expMonth)).append("\n");
    sb.append("    expYear: ").append(toIndentedString(expYear)).append("\n");
    sb.append("    fingerprint: ").append(toIndentedString(fingerprint)).append("\n");
    sb.append("    funding: ").append(toIndentedString(funding)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    last4: ").append(toIndentedString(last4)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    nonFieldErrors: ").append(toIndentedString(nonFieldErrors)).append("\n");
    sb.append("    stripeId: ").append(toIndentedString(stripeId)).append("\n");
    sb.append("    token: ").append(toIndentedString(token)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("address_city");
    openapiFields.add("address_country");
    openapiFields.add("address_line1");
    openapiFields.add("address_line1_check");
    openapiFields.add("address_line2");
    openapiFields.add("address_state");
    openapiFields.add("address_zip");
    openapiFields.add("address_zip_check");
    openapiFields.add("brand");
    openapiFields.add("created");
    openapiFields.add("customer");
    openapiFields.add("cvc_check");
    openapiFields.add("exp_month");
    openapiFields.add("exp_year");
    openapiFields.add("fingerprint");
    openapiFields.add("funding");
    openapiFields.add("id");
    openapiFields.add("last4");
    openapiFields.add("name");
    openapiFields.add("non_field_errors");
    openapiFields.add("stripe_id");
    openapiFields.add("token");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CardUpdateError
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CardUpdateError.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CardUpdateError is not found in the empty JSON string", CardUpdateError.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CardUpdateError.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CardUpdateError` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("address_city") != null && !jsonObj.get("address_city").isJsonNull() && !jsonObj.get("address_city").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `address_city` to be an array in the JSON string but got `%s`", jsonObj.get("address_city").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("address_country") != null && !jsonObj.get("address_country").isJsonNull() && !jsonObj.get("address_country").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `address_country` to be an array in the JSON string but got `%s`", jsonObj.get("address_country").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("address_line1") != null && !jsonObj.get("address_line1").isJsonNull() && !jsonObj.get("address_line1").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `address_line1` to be an array in the JSON string but got `%s`", jsonObj.get("address_line1").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("address_line1_check") != null && !jsonObj.get("address_line1_check").isJsonNull() && !jsonObj.get("address_line1_check").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `address_line1_check` to be an array in the JSON string but got `%s`", jsonObj.get("address_line1_check").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("address_line2") != null && !jsonObj.get("address_line2").isJsonNull() && !jsonObj.get("address_line2").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `address_line2` to be an array in the JSON string but got `%s`", jsonObj.get("address_line2").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("address_state") != null && !jsonObj.get("address_state").isJsonNull() && !jsonObj.get("address_state").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `address_state` to be an array in the JSON string but got `%s`", jsonObj.get("address_state").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("address_zip") != null && !jsonObj.get("address_zip").isJsonNull() && !jsonObj.get("address_zip").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `address_zip` to be an array in the JSON string but got `%s`", jsonObj.get("address_zip").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("address_zip_check") != null && !jsonObj.get("address_zip_check").isJsonNull() && !jsonObj.get("address_zip_check").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `address_zip_check` to be an array in the JSON string but got `%s`", jsonObj.get("address_zip_check").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("brand") != null && !jsonObj.get("brand").isJsonNull() && !jsonObj.get("brand").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `brand` to be an array in the JSON string but got `%s`", jsonObj.get("brand").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("created") != null && !jsonObj.get("created").isJsonNull() && !jsonObj.get("created").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `created` to be an array in the JSON string but got `%s`", jsonObj.get("created").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("customer") != null && !jsonObj.get("customer").isJsonNull() && !jsonObj.get("customer").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `customer` to be an array in the JSON string but got `%s`", jsonObj.get("customer").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("cvc_check") != null && !jsonObj.get("cvc_check").isJsonNull() && !jsonObj.get("cvc_check").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `cvc_check` to be an array in the JSON string but got `%s`", jsonObj.get("cvc_check").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("exp_month") != null && !jsonObj.get("exp_month").isJsonNull() && !jsonObj.get("exp_month").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `exp_month` to be an array in the JSON string but got `%s`", jsonObj.get("exp_month").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("exp_year") != null && !jsonObj.get("exp_year").isJsonNull() && !jsonObj.get("exp_year").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `exp_year` to be an array in the JSON string but got `%s`", jsonObj.get("exp_year").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("fingerprint") != null && !jsonObj.get("fingerprint").isJsonNull() && !jsonObj.get("fingerprint").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `fingerprint` to be an array in the JSON string but got `%s`", jsonObj.get("fingerprint").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("funding") != null && !jsonObj.get("funding").isJsonNull() && !jsonObj.get("funding").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `funding` to be an array in the JSON string but got `%s`", jsonObj.get("funding").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull() && !jsonObj.get("id").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be an array in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("last4") != null && !jsonObj.get("last4").isJsonNull() && !jsonObj.get("last4").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `last4` to be an array in the JSON string but got `%s`", jsonObj.get("last4").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull() && !jsonObj.get("name").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be an array in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("non_field_errors") != null && !jsonObj.get("non_field_errors").isJsonNull() && !jsonObj.get("non_field_errors").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `non_field_errors` to be an array in the JSON string but got `%s`", jsonObj.get("non_field_errors").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("stripe_id") != null && !jsonObj.get("stripe_id").isJsonNull() && !jsonObj.get("stripe_id").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `stripe_id` to be an array in the JSON string but got `%s`", jsonObj.get("stripe_id").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("token") != null && !jsonObj.get("token").isJsonNull() && !jsonObj.get("token").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `token` to be an array in the JSON string but got `%s`", jsonObj.get("token").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CardUpdateError.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CardUpdateError' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CardUpdateError> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CardUpdateError.class));

       return (TypeAdapter<T>) new TypeAdapter<CardUpdateError>() {
           @Override
           public void write(JsonWriter out, CardUpdateError value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CardUpdateError read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CardUpdateError given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CardUpdateError
   * @throws IOException if the JSON string is invalid with respect to CardUpdateError
   */
  public static CardUpdateError fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CardUpdateError.class);
  }

  /**
   * Convert an instance of CardUpdateError to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

