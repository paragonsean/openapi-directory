/*
 * IllumiDesk
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UserProfileError
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:54:22.511892-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UserProfileError {
  public static final String SERIALIZED_NAME_BIO = "bio";
  @SerializedName(SERIALIZED_NAME_BIO)
  private List<String> bio = new ArrayList<>();

  public static final String SERIALIZED_NAME_COMPANY = "company";
  @SerializedName(SERIALIZED_NAME_COMPANY)
  private List<String> company = new ArrayList<>();

  public static final String SERIALIZED_NAME_LOCATION = "location";
  @SerializedName(SERIALIZED_NAME_LOCATION)
  private List<String> location = new ArrayList<>();

  public static final String SERIALIZED_NAME_NON_FIELD_ERRORS = "non_field_errors";
  @SerializedName(SERIALIZED_NAME_NON_FIELD_ERRORS)
  private List<String> nonFieldErrors = new ArrayList<>();

  public static final String SERIALIZED_NAME_TIMEZONE = "timezone";
  @SerializedName(SERIALIZED_NAME_TIMEZONE)
  private List<String> timezone = new ArrayList<>();

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private List<String> url = new ArrayList<>();

  public UserProfileError() {
  }

  public UserProfileError bio(List<String> bio) {
    this.bio = bio;
    return this;
  }

  public UserProfileError addBioItem(String bioItem) {
    if (this.bio == null) {
      this.bio = new ArrayList<>();
    }
    this.bio.add(bioItem);
    return this;
  }

  /**
   * Bio field errors.
   * @return bio
   */
  @javax.annotation.Nullable
  public List<String> getBio() {
    return bio;
  }

  public void setBio(List<String> bio) {
    this.bio = bio;
  }


  public UserProfileError company(List<String> company) {
    this.company = company;
    return this;
  }

  public UserProfileError addCompanyItem(String companyItem) {
    if (this.company == null) {
      this.company = new ArrayList<>();
    }
    this.company.add(companyItem);
    return this;
  }

  /**
   * Company field errors.
   * @return company
   */
  @javax.annotation.Nullable
  public List<String> getCompany() {
    return company;
  }

  public void setCompany(List<String> company) {
    this.company = company;
  }


  public UserProfileError location(List<String> location) {
    this.location = location;
    return this;
  }

  public UserProfileError addLocationItem(String locationItem) {
    if (this.location == null) {
      this.location = new ArrayList<>();
    }
    this.location.add(locationItem);
    return this;
  }

  /**
   * Location field errors.
   * @return location
   */
  @javax.annotation.Nullable
  public List<String> getLocation() {
    return location;
  }

  public void setLocation(List<String> location) {
    this.location = location;
  }


  public UserProfileError nonFieldErrors(List<String> nonFieldErrors) {
    this.nonFieldErrors = nonFieldErrors;
    return this;
  }

  public UserProfileError addNonFieldErrorsItem(String nonFieldErrorsItem) {
    if (this.nonFieldErrors == null) {
      this.nonFieldErrors = new ArrayList<>();
    }
    this.nonFieldErrors.add(nonFieldErrorsItem);
    return this;
  }

  /**
   * Errors not connected to any field.
   * @return nonFieldErrors
   */
  @javax.annotation.Nullable
  public List<String> getNonFieldErrors() {
    return nonFieldErrors;
  }

  public void setNonFieldErrors(List<String> nonFieldErrors) {
    this.nonFieldErrors = nonFieldErrors;
  }


  public UserProfileError timezone(List<String> timezone) {
    this.timezone = timezone;
    return this;
  }

  public UserProfileError addTimezoneItem(String timezoneItem) {
    if (this.timezone == null) {
      this.timezone = new ArrayList<>();
    }
    this.timezone.add(timezoneItem);
    return this;
  }

  /**
   * Timezone field errors.
   * @return timezone
   */
  @javax.annotation.Nullable
  public List<String> getTimezone() {
    return timezone;
  }

  public void setTimezone(List<String> timezone) {
    this.timezone = timezone;
  }


  public UserProfileError url(List<String> url) {
    this.url = url;
    return this;
  }

  public UserProfileError addUrlItem(String urlItem) {
    if (this.url == null) {
      this.url = new ArrayList<>();
    }
    this.url.add(urlItem);
    return this;
  }

  /**
   * URL field errors.
   * @return url
   */
  @javax.annotation.Nullable
  public List<String> getUrl() {
    return url;
  }

  public void setUrl(List<String> url) {
    this.url = url;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UserProfileError userProfileError = (UserProfileError) o;
    return Objects.equals(this.bio, userProfileError.bio) &&
        Objects.equals(this.company, userProfileError.company) &&
        Objects.equals(this.location, userProfileError.location) &&
        Objects.equals(this.nonFieldErrors, userProfileError.nonFieldErrors) &&
        Objects.equals(this.timezone, userProfileError.timezone) &&
        Objects.equals(this.url, userProfileError.url);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bio, company, location, nonFieldErrors, timezone, url);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UserProfileError {\n");
    sb.append("    bio: ").append(toIndentedString(bio)).append("\n");
    sb.append("    company: ").append(toIndentedString(company)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    nonFieldErrors: ").append(toIndentedString(nonFieldErrors)).append("\n");
    sb.append("    timezone: ").append(toIndentedString(timezone)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("bio");
    openapiFields.add("company");
    openapiFields.add("location");
    openapiFields.add("non_field_errors");
    openapiFields.add("timezone");
    openapiFields.add("url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UserProfileError
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UserProfileError.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UserProfileError is not found in the empty JSON string", UserProfileError.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UserProfileError.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UserProfileError` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("bio") != null && !jsonObj.get("bio").isJsonNull() && !jsonObj.get("bio").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `bio` to be an array in the JSON string but got `%s`", jsonObj.get("bio").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("company") != null && !jsonObj.get("company").isJsonNull() && !jsonObj.get("company").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `company` to be an array in the JSON string but got `%s`", jsonObj.get("company").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("location") != null && !jsonObj.get("location").isJsonNull() && !jsonObj.get("location").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `location` to be an array in the JSON string but got `%s`", jsonObj.get("location").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("non_field_errors") != null && !jsonObj.get("non_field_errors").isJsonNull() && !jsonObj.get("non_field_errors").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `non_field_errors` to be an array in the JSON string but got `%s`", jsonObj.get("non_field_errors").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("timezone") != null && !jsonObj.get("timezone").isJsonNull() && !jsonObj.get("timezone").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `timezone` to be an array in the JSON string but got `%s`", jsonObj.get("timezone").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull() && !jsonObj.get("url").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be an array in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UserProfileError.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UserProfileError' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UserProfileError> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UserProfileError.class));

       return (TypeAdapter<T>) new TypeAdapter<UserProfileError>() {
           @Override
           public void write(JsonWriter out, UserProfileError value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UserProfileError read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UserProfileError given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UserProfileError
   * @throws IOException if the JSON string is invalid with respect to UserProfileError
   */
  public static UserProfileError fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UserProfileError.class);
  }

  /**
   * Convert an instance of UserProfileError to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

