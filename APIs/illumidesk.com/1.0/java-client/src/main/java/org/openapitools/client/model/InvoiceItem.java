/*
 * IllumiDesk
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * InvoiceItem
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:54:22.511892-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class InvoiceItem {
  public static final String SERIALIZED_NAME_AMOUNT = "amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  private Integer amount;

  public static final String SERIALIZED_NAME_CREATED = "created";
  @SerializedName(SERIALIZED_NAME_CREATED)
  private String created;

  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  private String currency;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_INVOICE = "invoice";
  @SerializedName(SERIALIZED_NAME_INVOICE)
  private String invoice;

  public static final String SERIALIZED_NAME_INVOICE_DATE = "invoice_date";
  @SerializedName(SERIALIZED_NAME_INVOICE_DATE)
  private String invoiceDate;

  public static final String SERIALIZED_NAME_LIVEMODE = "livemode";
  @SerializedName(SERIALIZED_NAME_LIVEMODE)
  private Boolean livemode;

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private Object metadata;

  public static final String SERIALIZED_NAME_PRORATION = "proration";
  @SerializedName(SERIALIZED_NAME_PRORATION)
  private Boolean proration;

  public static final String SERIALIZED_NAME_QUANTITY = "quantity";
  @SerializedName(SERIALIZED_NAME_QUANTITY)
  private Integer quantity;

  public static final String SERIALIZED_NAME_STRIPE_ID = "stripe_id";
  @SerializedName(SERIALIZED_NAME_STRIPE_ID)
  private String stripeId;

  public InvoiceItem() {
  }

  public InvoiceItem amount(Integer amount) {
    this.amount = amount;
    return this;
  }

  /**
   * Amount the the invoice item will be billed for.
   * @return amount
   */
  @javax.annotation.Nonnull
  public Integer getAmount() {
    return amount;
  }

  public void setAmount(Integer amount) {
    this.amount = amount;
  }


  public InvoiceItem created(String created) {
    this.created = created;
    return this;
  }

  /**
   * Date and time when invoice was created.
   * @return created
   */
  @javax.annotation.Nonnull
  public String getCreated() {
    return created;
  }

  public void setCreated(String created) {
    this.created = created;
  }


  public InvoiceItem currency(String currency) {
    this.currency = currency;
    return this;
  }

  /**
   * Currency used in invoice.
   * @return currency
   */
  @javax.annotation.Nonnull
  public String getCurrency() {
    return currency;
  }

  public void setCurrency(String currency) {
    this.currency = currency;
  }


  public InvoiceItem description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Item description.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public InvoiceItem id(String id) {
    this.id = id;
    return this;
  }

  /**
   * InvoiceItem unique identifier expressed as UUID.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public InvoiceItem invoice(String invoice) {
    this.invoice = invoice;
    return this;
  }

  /**
   * Invoice unique identifier expressed as UUID.
   * @return invoice
   */
  @javax.annotation.Nonnull
  public String getInvoice() {
    return invoice;
  }

  public void setInvoice(String invoice) {
    this.invoice = invoice;
  }


  public InvoiceItem invoiceDate(String invoiceDate) {
    this.invoiceDate = invoiceDate;
    return this;
  }

  /**
   * Date the item was added to the invoice.
   * @return invoiceDate
   */
  @javax.annotation.Nonnull
  public String getInvoiceDate() {
    return invoiceDate;
  }

  public void setInvoiceDate(String invoiceDate) {
    this.invoiceDate = invoiceDate;
  }


  public InvoiceItem livemode(Boolean livemode) {
    this.livemode = livemode;
    return this;
  }

  /**
   * Boolean that determines whether invoice is live, or not.
   * @return livemode
   */
  @javax.annotation.Nullable
  public Boolean getLivemode() {
    return livemode;
  }

  public void setLivemode(Boolean livemode) {
    this.livemode = livemode;
  }


  public InvoiceItem metadata(Object metadata) {
    this.metadata = metadata;
    return this;
  }

  /**
   * Optional metadata object of invoice.
   * @return metadata
   */
  @javax.annotation.Nullable
  public Object getMetadata() {
    return metadata;
  }

  public void setMetadata(Object metadata) {
    this.metadata = metadata;
  }


  public InvoiceItem proration(Boolean proration) {
    this.proration = proration;
    return this;
  }

  /**
   * Whether or not the items cost will be prorated for the billing period.
   * @return proration
   */
  @javax.annotation.Nullable
  public Boolean getProration() {
    return proration;
  }

  public void setProration(Boolean proration) {
    this.proration = proration;
  }


  public InvoiceItem quantity(Integer quantity) {
    this.quantity = quantity;
    return this;
  }

  /**
   * Number of units for this item.
   * @return quantity
   */
  @javax.annotation.Nonnull
  public Integer getQuantity() {
    return quantity;
  }

  public void setQuantity(Integer quantity) {
    this.quantity = quantity;
  }


  public InvoiceItem stripeId(String stripeId) {
    this.stripeId = stripeId;
    return this;
  }

  /**
   * Stripe account identifier.
   * @return stripeId
   */
  @javax.annotation.Nonnull
  public String getStripeId() {
    return stripeId;
  }

  public void setStripeId(String stripeId) {
    this.stripeId = stripeId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InvoiceItem invoiceItem = (InvoiceItem) o;
    return Objects.equals(this.amount, invoiceItem.amount) &&
        Objects.equals(this.created, invoiceItem.created) &&
        Objects.equals(this.currency, invoiceItem.currency) &&
        Objects.equals(this.description, invoiceItem.description) &&
        Objects.equals(this.id, invoiceItem.id) &&
        Objects.equals(this.invoice, invoiceItem.invoice) &&
        Objects.equals(this.invoiceDate, invoiceItem.invoiceDate) &&
        Objects.equals(this.livemode, invoiceItem.livemode) &&
        Objects.equals(this.metadata, invoiceItem.metadata) &&
        Objects.equals(this.proration, invoiceItem.proration) &&
        Objects.equals(this.quantity, invoiceItem.quantity) &&
        Objects.equals(this.stripeId, invoiceItem.stripeId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(amount, created, currency, description, id, invoice, invoiceDate, livemode, metadata, proration, quantity, stripeId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InvoiceItem {\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    invoice: ").append(toIndentedString(invoice)).append("\n");
    sb.append("    invoiceDate: ").append(toIndentedString(invoiceDate)).append("\n");
    sb.append("    livemode: ").append(toIndentedString(livemode)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    proration: ").append(toIndentedString(proration)).append("\n");
    sb.append("    quantity: ").append(toIndentedString(quantity)).append("\n");
    sb.append("    stripeId: ").append(toIndentedString(stripeId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("amount");
    openapiFields.add("created");
    openapiFields.add("currency");
    openapiFields.add("description");
    openapiFields.add("id");
    openapiFields.add("invoice");
    openapiFields.add("invoice_date");
    openapiFields.add("livemode");
    openapiFields.add("metadata");
    openapiFields.add("proration");
    openapiFields.add("quantity");
    openapiFields.add("stripe_id");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("amount");
    openapiRequiredFields.add("created");
    openapiRequiredFields.add("currency");
    openapiRequiredFields.add("invoice");
    openapiRequiredFields.add("invoice_date");
    openapiRequiredFields.add("quantity");
    openapiRequiredFields.add("stripe_id");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to InvoiceItem
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!InvoiceItem.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in InvoiceItem is not found in the empty JSON string", InvoiceItem.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!InvoiceItem.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `InvoiceItem` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : InvoiceItem.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("created").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `created` to be a primitive type in the JSON string but got `%s`", jsonObj.get("created").toString()));
      }
      if (!jsonObj.get("currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currency").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("invoice").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `invoice` to be a primitive type in the JSON string but got `%s`", jsonObj.get("invoice").toString()));
      }
      if (!jsonObj.get("invoice_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `invoice_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("invoice_date").toString()));
      }
      if (!jsonObj.get("stripe_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stripe_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stripe_id").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InvoiceItem.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InvoiceItem' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InvoiceItem> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InvoiceItem.class));

       return (TypeAdapter<T>) new TypeAdapter<InvoiceItem>() {
           @Override
           public void write(JsonWriter out, InvoiceItem value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public InvoiceItem read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of InvoiceItem given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of InvoiceItem
   * @throws IOException if the JSON string is invalid with respect to InvoiceItem
   */
  public static InvoiceItem fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InvoiceItem.class);
  }

  /**
   * Convert an instance of InvoiceItem to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

