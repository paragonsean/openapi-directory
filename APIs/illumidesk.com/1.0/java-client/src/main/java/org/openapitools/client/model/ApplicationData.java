/*
 * IllumiDesk
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ApplicationData
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:54:22.511892-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ApplicationData {
  /**
   * OAuth2 authorization grant type
   */
  @JsonAdapter(AuthorizationGrantTypeEnum.Adapter.class)
  public enum AuthorizationGrantTypeEnum {
    AUTHORIZATION_CODE("authorization-code"),
    
    IMPLICIT("implicit"),
    
    PASSWORD("password"),
    
    CLIENT_CREDENTIALS("client-credentials");

    private String value;

    AuthorizationGrantTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AuthorizationGrantTypeEnum fromValue(String value) {
      for (AuthorizationGrantTypeEnum b : AuthorizationGrantTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AuthorizationGrantTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AuthorizationGrantTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AuthorizationGrantTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AuthorizationGrantTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AuthorizationGrantTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_AUTHORIZATION_GRANT_TYPE = "authorization_grant_type";
  @SerializedName(SERIALIZED_NAME_AUTHORIZATION_GRANT_TYPE)
  private AuthorizationGrantTypeEnum authorizationGrantType;

  /**
   * OAuth2 client type
   */
  @JsonAdapter(ClientTypeEnum.Adapter.class)
  public enum ClientTypeEnum {
    CONFIDENTIAL("confidential"),
    
    PUBLIC("public");

    private String value;

    ClientTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ClientTypeEnum fromValue(String value) {
      for (ClientTypeEnum b : ClientTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ClientTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ClientTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ClientTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ClientTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ClientTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CLIENT_TYPE = "client_type";
  @SerializedName(SERIALIZED_NAME_CLIENT_TYPE)
  private ClientTypeEnum clientType;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_REDIRECT_URIS = "redirect_uris";
  @SerializedName(SERIALIZED_NAME_REDIRECT_URIS)
  private String redirectUris;

  public ApplicationData() {
  }

  public ApplicationData authorizationGrantType(AuthorizationGrantTypeEnum authorizationGrantType) {
    this.authorizationGrantType = authorizationGrantType;
    return this;
  }

  /**
   * OAuth2 authorization grant type
   * @return authorizationGrantType
   */
  @javax.annotation.Nonnull
  public AuthorizationGrantTypeEnum getAuthorizationGrantType() {
    return authorizationGrantType;
  }

  public void setAuthorizationGrantType(AuthorizationGrantTypeEnum authorizationGrantType) {
    this.authorizationGrantType = authorizationGrantType;
  }


  public ApplicationData clientType(ClientTypeEnum clientType) {
    this.clientType = clientType;
    return this;
  }

  /**
   * OAuth2 client type
   * @return clientType
   */
  @javax.annotation.Nonnull
  public ClientTypeEnum getClientType() {
    return clientType;
  }

  public void setClientType(ClientTypeEnum clientType) {
    this.clientType = clientType;
  }


  public ApplicationData name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Application name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public ApplicationData redirectUris(String redirectUris) {
    this.redirectUris = redirectUris;
    return this;
  }

  /**
   * Uris to redirect auth request
   * @return redirectUris
   */
  @javax.annotation.Nullable
  public String getRedirectUris() {
    return redirectUris;
  }

  public void setRedirectUris(String redirectUris) {
    this.redirectUris = redirectUris;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApplicationData applicationData = (ApplicationData) o;
    return Objects.equals(this.authorizationGrantType, applicationData.authorizationGrantType) &&
        Objects.equals(this.clientType, applicationData.clientType) &&
        Objects.equals(this.name, applicationData.name) &&
        Objects.equals(this.redirectUris, applicationData.redirectUris);
  }

  @Override
  public int hashCode() {
    return Objects.hash(authorizationGrantType, clientType, name, redirectUris);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApplicationData {\n");
    sb.append("    authorizationGrantType: ").append(toIndentedString(authorizationGrantType)).append("\n");
    sb.append("    clientType: ").append(toIndentedString(clientType)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    redirectUris: ").append(toIndentedString(redirectUris)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("authorization_grant_type");
    openapiFields.add("client_type");
    openapiFields.add("name");
    openapiFields.add("redirect_uris");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("authorization_grant_type");
    openapiRequiredFields.add("client_type");
    openapiRequiredFields.add("name");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ApplicationData
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ApplicationData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ApplicationData is not found in the empty JSON string", ApplicationData.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ApplicationData.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ApplicationData` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ApplicationData.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("authorization_grant_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `authorization_grant_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("authorization_grant_type").toString()));
      }
      // validate the required field `authorization_grant_type`
      AuthorizationGrantTypeEnum.validateJsonElement(jsonObj.get("authorization_grant_type"));
      if (!jsonObj.get("client_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `client_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("client_type").toString()));
      }
      // validate the required field `client_type`
      ClientTypeEnum.validateJsonElement(jsonObj.get("client_type"));
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("redirect_uris") != null && !jsonObj.get("redirect_uris").isJsonNull()) && !jsonObj.get("redirect_uris").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `redirect_uris` to be a primitive type in the JSON string but got `%s`", jsonObj.get("redirect_uris").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ApplicationData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ApplicationData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ApplicationData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ApplicationData.class));

       return (TypeAdapter<T>) new TypeAdapter<ApplicationData>() {
           @Override
           public void write(JsonWriter out, ApplicationData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ApplicationData read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ApplicationData given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ApplicationData
   * @throws IOException if the JSON string is invalid with respect to ApplicationData
   */
  public static ApplicationData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ApplicationData.class);
  }

  /**
   * Convert an instance of ApplicationData to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

