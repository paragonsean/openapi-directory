/*
 * IllumiDesk
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Card
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:54:22.511892-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Card {
  public static final String SERIALIZED_NAME_ADDRESS_CITY = "address_city";
  @SerializedName(SERIALIZED_NAME_ADDRESS_CITY)
  private String addressCity;

  public static final String SERIALIZED_NAME_ADDRESS_COUNTRY = "address_country";
  @SerializedName(SERIALIZED_NAME_ADDRESS_COUNTRY)
  private String addressCountry;

  public static final String SERIALIZED_NAME_ADDRESS_LINE1 = "address_line1";
  @SerializedName(SERIALIZED_NAME_ADDRESS_LINE1)
  private String addressLine1;

  public static final String SERIALIZED_NAME_ADDRESS_LINE1_CHECK = "address_line1_check";
  @SerializedName(SERIALIZED_NAME_ADDRESS_LINE1_CHECK)
  private String addressLine1Check;

  public static final String SERIALIZED_NAME_ADDRESS_LINE2 = "address_line2";
  @SerializedName(SERIALIZED_NAME_ADDRESS_LINE2)
  private String addressLine2;

  public static final String SERIALIZED_NAME_ADDRESS_STATE = "address_state";
  @SerializedName(SERIALIZED_NAME_ADDRESS_STATE)
  private String addressState;

  public static final String SERIALIZED_NAME_ADDRESS_ZIP = "address_zip";
  @SerializedName(SERIALIZED_NAME_ADDRESS_ZIP)
  private String addressZip;

  public static final String SERIALIZED_NAME_ADDRESS_ZIP_CHECK = "address_zip_check";
  @SerializedName(SERIALIZED_NAME_ADDRESS_ZIP_CHECK)
  private String addressZipCheck;

  public static final String SERIALIZED_NAME_BRAND = "brand";
  @SerializedName(SERIALIZED_NAME_BRAND)
  private String brand;

  public static final String SERIALIZED_NAME_CREATED = "created";
  @SerializedName(SERIALIZED_NAME_CREATED)
  private String created;

  public static final String SERIALIZED_NAME_CUSTOMER = "customer";
  @SerializedName(SERIALIZED_NAME_CUSTOMER)
  private String customer;

  public static final String SERIALIZED_NAME_CVC_CHECK = "cvc_check";
  @SerializedName(SERIALIZED_NAME_CVC_CHECK)
  private String cvcCheck;

  public static final String SERIALIZED_NAME_EXP_MONTH = "exp_month";
  @SerializedName(SERIALIZED_NAME_EXP_MONTH)
  private Integer expMonth;

  public static final String SERIALIZED_NAME_EXP_YEAR = "exp_year";
  @SerializedName(SERIALIZED_NAME_EXP_YEAR)
  private Integer expYear;

  public static final String SERIALIZED_NAME_FINGERPRINT = "fingerprint";
  @SerializedName(SERIALIZED_NAME_FINGERPRINT)
  private String fingerprint;

  public static final String SERIALIZED_NAME_FUNDING = "funding";
  @SerializedName(SERIALIZED_NAME_FUNDING)
  private String funding;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_LAST4 = "last4";
  @SerializedName(SERIALIZED_NAME_LAST4)
  private String last4;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_STRIPE_ID = "stripe_id";
  @SerializedName(SERIALIZED_NAME_STRIPE_ID)
  private String stripeId;

  public static final String SERIALIZED_NAME_TOKEN = "token";
  @SerializedName(SERIALIZED_NAME_TOKEN)
  private String token;

  public Card() {
  }

  public Card addressCity(String addressCity) {
    this.addressCity = addressCity;
    return this;
  }

  /**
   * Address city.
   * @return addressCity
   */
  @javax.annotation.Nullable
  public String getAddressCity() {
    return addressCity;
  }

  public void setAddressCity(String addressCity) {
    this.addressCity = addressCity;
  }


  public Card addressCountry(String addressCountry) {
    this.addressCountry = addressCountry;
    return this;
  }

  /**
   * Address country.
   * @return addressCountry
   */
  @javax.annotation.Nullable
  public String getAddressCountry() {
    return addressCountry;
  }

  public void setAddressCountry(String addressCountry) {
    this.addressCountry = addressCountry;
  }


  public Card addressLine1(String addressLine1) {
    this.addressLine1 = addressLine1;
    return this;
  }

  /**
   * Address line 1.
   * @return addressLine1
   */
  @javax.annotation.Nullable
  public String getAddressLine1() {
    return addressLine1;
  }

  public void setAddressLine1(String addressLine1) {
    this.addressLine1 = addressLine1;
  }


  public Card addressLine1Check(String addressLine1Check) {
    this.addressLine1Check = addressLine1Check;
    return this;
  }

  /**
   * Address line 1 check, when processing card.
   * @return addressLine1Check
   */
  @javax.annotation.Nullable
  public String getAddressLine1Check() {
    return addressLine1Check;
  }

  public void setAddressLine1Check(String addressLine1Check) {
    this.addressLine1Check = addressLine1Check;
  }


  public Card addressLine2(String addressLine2) {
    this.addressLine2 = addressLine2;
    return this;
  }

  /**
   * Address line 2.
   * @return addressLine2
   */
  @javax.annotation.Nullable
  public String getAddressLine2() {
    return addressLine2;
  }

  public void setAddressLine2(String addressLine2) {
    this.addressLine2 = addressLine2;
  }


  public Card addressState(String addressState) {
    this.addressState = addressState;
    return this;
  }

  /**
   * Address state.
   * @return addressState
   */
  @javax.annotation.Nullable
  public String getAddressState() {
    return addressState;
  }

  public void setAddressState(String addressState) {
    this.addressState = addressState;
  }


  public Card addressZip(String addressZip) {
    this.addressZip = addressZip;
    return this;
  }

  /**
   * Address zip code.
   * @return addressZip
   */
  @javax.annotation.Nullable
  public String getAddressZip() {
    return addressZip;
  }

  public void setAddressZip(String addressZip) {
    this.addressZip = addressZip;
  }


  public Card addressZipCheck(String addressZipCheck) {
    this.addressZipCheck = addressZipCheck;
    return this;
  }

  /**
   * Address check, when processing card.
   * @return addressZipCheck
   */
  @javax.annotation.Nullable
  public String getAddressZipCheck() {
    return addressZipCheck;
  }

  public void setAddressZipCheck(String addressZipCheck) {
    this.addressZipCheck = addressZipCheck;
  }


  public Card brand(String brand) {
    this.brand = brand;
    return this;
  }

  /**
   * Credit or debit card brand.
   * @return brand
   */
  @javax.annotation.Nullable
  public String getBrand() {
    return brand;
  }

  public void setBrand(String brand) {
    this.brand = brand;
  }


  public Card created(String created) {
    this.created = created;
    return this;
  }

  /**
   * Card date and time creation.
   * @return created
   */
  @javax.annotation.Nullable
  public String getCreated() {
    return created;
  }

  public void setCreated(String created) {
    this.created = created;
  }


  public Card customer(String customer) {
    this.customer = customer;
    return this;
  }

  /**
   * Card customer.
   * @return customer
   */
  @javax.annotation.Nullable
  public String getCustomer() {
    return customer;
  }

  public void setCustomer(String customer) {
    this.customer = customer;
  }


  public Card cvcCheck(String cvcCheck) {
    this.cvcCheck = cvcCheck;
    return this;
  }

  /**
   * Security code check.
   * @return cvcCheck
   */
  @javax.annotation.Nullable
  public String getCvcCheck() {
    return cvcCheck;
  }

  public void setCvcCheck(String cvcCheck) {
    this.cvcCheck = cvcCheck;
  }


  public Card expMonth(Integer expMonth) {
    this.expMonth = expMonth;
    return this;
  }

  /**
   * Card expiration month.
   * @return expMonth
   */
  @javax.annotation.Nullable
  public Integer getExpMonth() {
    return expMonth;
  }

  public void setExpMonth(Integer expMonth) {
    this.expMonth = expMonth;
  }


  public Card expYear(Integer expYear) {
    this.expYear = expYear;
    return this;
  }

  /**
   * Card expiration year.
   * @return expYear
   */
  @javax.annotation.Nullable
  public Integer getExpYear() {
    return expYear;
  }

  public void setExpYear(Integer expYear) {
    this.expYear = expYear;
  }


  public Card fingerprint(String fingerprint) {
    this.fingerprint = fingerprint;
    return this;
  }

  /**
   * Card fingerprint.
   * @return fingerprint
   */
  @javax.annotation.Nullable
  public String getFingerprint() {
    return fingerprint;
  }

  public void setFingerprint(String fingerprint) {
    this.fingerprint = fingerprint;
  }


  public Card funding(String funding) {
    this.funding = funding;
    return this;
  }

  /**
   * Funding.
   * @return funding
   */
  @javax.annotation.Nullable
  public String getFunding() {
    return funding;
  }

  public void setFunding(String funding) {
    this.funding = funding;
  }


  public Card id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Card unique identifier, expressed as UUID.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public Card last4(String last4) {
    this.last4 = last4;
    return this;
  }

  /**
   * Last four digits of credit or debit card.
   * @return last4
   */
  @javax.annotation.Nullable
  public String getLast4() {
    return last4;
  }

  public void setLast4(String last4) {
    this.last4 = last4;
  }


  public Card name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Card name.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Card stripeId(String stripeId) {
    this.stripeId = stripeId;
    return this;
  }

  /**
   * Unique stripe identifier.
   * @return stripeId
   */
  @javax.annotation.Nullable
  public String getStripeId() {
    return stripeId;
  }

  public void setStripeId(String stripeId) {
    this.stripeId = stripeId;
  }


  public Card token(String token) {
    this.token = token;
    return this;
  }

  /**
   * Card unique token.
   * @return token
   */
  @javax.annotation.Nullable
  public String getToken() {
    return token;
  }

  public void setToken(String token) {
    this.token = token;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Card card = (Card) o;
    return Objects.equals(this.addressCity, card.addressCity) &&
        Objects.equals(this.addressCountry, card.addressCountry) &&
        Objects.equals(this.addressLine1, card.addressLine1) &&
        Objects.equals(this.addressLine1Check, card.addressLine1Check) &&
        Objects.equals(this.addressLine2, card.addressLine2) &&
        Objects.equals(this.addressState, card.addressState) &&
        Objects.equals(this.addressZip, card.addressZip) &&
        Objects.equals(this.addressZipCheck, card.addressZipCheck) &&
        Objects.equals(this.brand, card.brand) &&
        Objects.equals(this.created, card.created) &&
        Objects.equals(this.customer, card.customer) &&
        Objects.equals(this.cvcCheck, card.cvcCheck) &&
        Objects.equals(this.expMonth, card.expMonth) &&
        Objects.equals(this.expYear, card.expYear) &&
        Objects.equals(this.fingerprint, card.fingerprint) &&
        Objects.equals(this.funding, card.funding) &&
        Objects.equals(this.id, card.id) &&
        Objects.equals(this.last4, card.last4) &&
        Objects.equals(this.name, card.name) &&
        Objects.equals(this.stripeId, card.stripeId) &&
        Objects.equals(this.token, card.token);
  }

  @Override
  public int hashCode() {
    return Objects.hash(addressCity, addressCountry, addressLine1, addressLine1Check, addressLine2, addressState, addressZip, addressZipCheck, brand, created, customer, cvcCheck, expMonth, expYear, fingerprint, funding, id, last4, name, stripeId, token);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Card {\n");
    sb.append("    addressCity: ").append(toIndentedString(addressCity)).append("\n");
    sb.append("    addressCountry: ").append(toIndentedString(addressCountry)).append("\n");
    sb.append("    addressLine1: ").append(toIndentedString(addressLine1)).append("\n");
    sb.append("    addressLine1Check: ").append(toIndentedString(addressLine1Check)).append("\n");
    sb.append("    addressLine2: ").append(toIndentedString(addressLine2)).append("\n");
    sb.append("    addressState: ").append(toIndentedString(addressState)).append("\n");
    sb.append("    addressZip: ").append(toIndentedString(addressZip)).append("\n");
    sb.append("    addressZipCheck: ").append(toIndentedString(addressZipCheck)).append("\n");
    sb.append("    brand: ").append(toIndentedString(brand)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    customer: ").append(toIndentedString(customer)).append("\n");
    sb.append("    cvcCheck: ").append(toIndentedString(cvcCheck)).append("\n");
    sb.append("    expMonth: ").append(toIndentedString(expMonth)).append("\n");
    sb.append("    expYear: ").append(toIndentedString(expYear)).append("\n");
    sb.append("    fingerprint: ").append(toIndentedString(fingerprint)).append("\n");
    sb.append("    funding: ").append(toIndentedString(funding)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    last4: ").append(toIndentedString(last4)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    stripeId: ").append(toIndentedString(stripeId)).append("\n");
    sb.append("    token: ").append(toIndentedString(token)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("address_city");
    openapiFields.add("address_country");
    openapiFields.add("address_line1");
    openapiFields.add("address_line1_check");
    openapiFields.add("address_line2");
    openapiFields.add("address_state");
    openapiFields.add("address_zip");
    openapiFields.add("address_zip_check");
    openapiFields.add("brand");
    openapiFields.add("created");
    openapiFields.add("customer");
    openapiFields.add("cvc_check");
    openapiFields.add("exp_month");
    openapiFields.add("exp_year");
    openapiFields.add("fingerprint");
    openapiFields.add("funding");
    openapiFields.add("id");
    openapiFields.add("last4");
    openapiFields.add("name");
    openapiFields.add("stripe_id");
    openapiFields.add("token");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Card
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Card.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Card is not found in the empty JSON string", Card.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Card.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Card` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("address_city") != null && !jsonObj.get("address_city").isJsonNull()) && !jsonObj.get("address_city").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `address_city` to be a primitive type in the JSON string but got `%s`", jsonObj.get("address_city").toString()));
      }
      if ((jsonObj.get("address_country") != null && !jsonObj.get("address_country").isJsonNull()) && !jsonObj.get("address_country").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `address_country` to be a primitive type in the JSON string but got `%s`", jsonObj.get("address_country").toString()));
      }
      if ((jsonObj.get("address_line1") != null && !jsonObj.get("address_line1").isJsonNull()) && !jsonObj.get("address_line1").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `address_line1` to be a primitive type in the JSON string but got `%s`", jsonObj.get("address_line1").toString()));
      }
      if ((jsonObj.get("address_line1_check") != null && !jsonObj.get("address_line1_check").isJsonNull()) && !jsonObj.get("address_line1_check").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `address_line1_check` to be a primitive type in the JSON string but got `%s`", jsonObj.get("address_line1_check").toString()));
      }
      if ((jsonObj.get("address_line2") != null && !jsonObj.get("address_line2").isJsonNull()) && !jsonObj.get("address_line2").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `address_line2` to be a primitive type in the JSON string but got `%s`", jsonObj.get("address_line2").toString()));
      }
      if ((jsonObj.get("address_state") != null && !jsonObj.get("address_state").isJsonNull()) && !jsonObj.get("address_state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `address_state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("address_state").toString()));
      }
      if ((jsonObj.get("address_zip") != null && !jsonObj.get("address_zip").isJsonNull()) && !jsonObj.get("address_zip").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `address_zip` to be a primitive type in the JSON string but got `%s`", jsonObj.get("address_zip").toString()));
      }
      if ((jsonObj.get("address_zip_check") != null && !jsonObj.get("address_zip_check").isJsonNull()) && !jsonObj.get("address_zip_check").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `address_zip_check` to be a primitive type in the JSON string but got `%s`", jsonObj.get("address_zip_check").toString()));
      }
      if ((jsonObj.get("brand") != null && !jsonObj.get("brand").isJsonNull()) && !jsonObj.get("brand").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `brand` to be a primitive type in the JSON string but got `%s`", jsonObj.get("brand").toString()));
      }
      if ((jsonObj.get("created") != null && !jsonObj.get("created").isJsonNull()) && !jsonObj.get("created").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `created` to be a primitive type in the JSON string but got `%s`", jsonObj.get("created").toString()));
      }
      if ((jsonObj.get("customer") != null && !jsonObj.get("customer").isJsonNull()) && !jsonObj.get("customer").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customer` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customer").toString()));
      }
      if ((jsonObj.get("cvc_check") != null && !jsonObj.get("cvc_check").isJsonNull()) && !jsonObj.get("cvc_check").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cvc_check` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cvc_check").toString()));
      }
      if ((jsonObj.get("fingerprint") != null && !jsonObj.get("fingerprint").isJsonNull()) && !jsonObj.get("fingerprint").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fingerprint` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fingerprint").toString()));
      }
      if ((jsonObj.get("funding") != null && !jsonObj.get("funding").isJsonNull()) && !jsonObj.get("funding").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `funding` to be a primitive type in the JSON string but got `%s`", jsonObj.get("funding").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("last4") != null && !jsonObj.get("last4").isJsonNull()) && !jsonObj.get("last4").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `last4` to be a primitive type in the JSON string but got `%s`", jsonObj.get("last4").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("stripe_id") != null && !jsonObj.get("stripe_id").isJsonNull()) && !jsonObj.get("stripe_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stripe_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stripe_id").toString()));
      }
      if ((jsonObj.get("token") != null && !jsonObj.get("token").isJsonNull()) && !jsonObj.get("token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("token").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Card.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Card' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Card> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Card.class));

       return (TypeAdapter<T>) new TypeAdapter<Card>() {
           @Override
           public void write(JsonWriter out, Card value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Card read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Card given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Card
   * @throws IOException if the JSON string is invalid with respect to Card
   */
  public static Card fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Card.class);
  }

  /**
   * Convert an instance of Card to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

