/*
 * IllumiDesk
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Application;
import org.openapitools.client.model.ApplicationData;
import org.openapitools.client.model.ApplicationError;
import org.openapitools.client.model.NotFound;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class OauthApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public OauthApi() {
        this(Configuration.getDefaultApiClient());
    }

    public OauthApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for oauthApplicationCreate
     * @param namespace User or team name. (required)
     * @param applicationData  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Application created. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call oauthApplicationCreateCall(String namespace, ApplicationData applicationData, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = applicationData;

        // create path and map variables
        String localVarPath = "/v1/{namespace}/oauth/applications/"
            .replace("{" + "namespace" + "}", localVarApiClient.escapeString(namespace.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call oauthApplicationCreateValidateBeforeCall(String namespace, ApplicationData applicationData, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'namespace' is set
        if (namespace == null) {
            throw new ApiException("Missing the required parameter 'namespace' when calling oauthApplicationCreate(Async)");
        }

        return oauthApplicationCreateCall(namespace, applicationData, _callback);

    }

    /**
     * Create a new OAuth2 application
     * 
     * @param namespace User or team name. (required)
     * @param applicationData  (optional)
     * @return Application
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Application created. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied </td><td>  -  </td></tr>
     </table>
     */
    public Application oauthApplicationCreate(String namespace, ApplicationData applicationData) throws ApiException {
        ApiResponse<Application> localVarResp = oauthApplicationCreateWithHttpInfo(namespace, applicationData);
        return localVarResp.getData();
    }

    /**
     * Create a new OAuth2 application
     * 
     * @param namespace User or team name. (required)
     * @param applicationData  (optional)
     * @return ApiResponse&lt;Application&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Application created. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Application> oauthApplicationCreateWithHttpInfo(String namespace, ApplicationData applicationData) throws ApiException {
        okhttp3.Call localVarCall = oauthApplicationCreateValidateBeforeCall(namespace, applicationData, null);
        Type localVarReturnType = new TypeToken<Application>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a new OAuth2 application (asynchronously)
     * 
     * @param namespace User or team name. (required)
     * @param applicationData  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Application created. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call oauthApplicationCreateAsync(String namespace, ApplicationData applicationData, final ApiCallback<Application> _callback) throws ApiException {

        okhttp3.Call localVarCall = oauthApplicationCreateValidateBeforeCall(namespace, applicationData, _callback);
        Type localVarReturnType = new TypeToken<Application>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for oauthApplicationDelete
     * @param namespace User or team name. (required)
     * @param application Application unique identifier expressed as UUID or name. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Application deleted. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Application not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call oauthApplicationDeleteCall(String namespace, String application, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/{namespace}/oauth/applications/{application}/"
            .replace("{" + "namespace" + "}", localVarApiClient.escapeString(namespace.toString()))
            .replace("{" + "application" + "}", localVarApiClient.escapeString(application.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call oauthApplicationDeleteValidateBeforeCall(String namespace, String application, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'namespace' is set
        if (namespace == null) {
            throw new ApiException("Missing the required parameter 'namespace' when calling oauthApplicationDelete(Async)");
        }

        // verify the required parameter 'application' is set
        if (application == null) {
            throw new ApiException("Missing the required parameter 'application' when calling oauthApplicationDelete(Async)");
        }

        return oauthApplicationDeleteCall(namespace, application, _callback);

    }

    /**
     * Delete an application by id
     * 
     * @param namespace User or team name. (required)
     * @param application Application unique identifier expressed as UUID or name. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Application deleted. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Application not found. </td><td>  -  </td></tr>
     </table>
     */
    public void oauthApplicationDelete(String namespace, String application) throws ApiException {
        oauthApplicationDeleteWithHttpInfo(namespace, application);
    }

    /**
     * Delete an application by id
     * 
     * @param namespace User or team name. (required)
     * @param application Application unique identifier expressed as UUID or name. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Application deleted. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Application not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> oauthApplicationDeleteWithHttpInfo(String namespace, String application) throws ApiException {
        okhttp3.Call localVarCall = oauthApplicationDeleteValidateBeforeCall(namespace, application, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete an application by id (asynchronously)
     * 
     * @param namespace User or team name. (required)
     * @param application Application unique identifier expressed as UUID or name. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Application deleted. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Application not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call oauthApplicationDeleteAsync(String namespace, String application, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = oauthApplicationDeleteValidateBeforeCall(namespace, application, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for oauthApplicationRead
     * @param namespace User or team name. (required)
     * @param application Application unique identifier expressed as UUID or name. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Application retrieved. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Application not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call oauthApplicationReadCall(String namespace, String application, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/{namespace}/oauth/applications/{application}/"
            .replace("{" + "namespace" + "}", localVarApiClient.escapeString(namespace.toString()))
            .replace("{" + "application" + "}", localVarApiClient.escapeString(application.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call oauthApplicationReadValidateBeforeCall(String namespace, String application, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'namespace' is set
        if (namespace == null) {
            throw new ApiException("Missing the required parameter 'namespace' when calling oauthApplicationRead(Async)");
        }

        // verify the required parameter 'application' is set
        if (application == null) {
            throw new ApiException("Missing the required parameter 'application' when calling oauthApplicationRead(Async)");
        }

        return oauthApplicationReadCall(namespace, application, _callback);

    }

    /**
     * Get an application by id
     * 
     * @param namespace User or team name. (required)
     * @param application Application unique identifier expressed as UUID or name. (required)
     * @return Application
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Application retrieved. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Application not found. </td><td>  -  </td></tr>
     </table>
     */
    public Application oauthApplicationRead(String namespace, String application) throws ApiException {
        ApiResponse<Application> localVarResp = oauthApplicationReadWithHttpInfo(namespace, application);
        return localVarResp.getData();
    }

    /**
     * Get an application by id
     * 
     * @param namespace User or team name. (required)
     * @param application Application unique identifier expressed as UUID or name. (required)
     * @return ApiResponse&lt;Application&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Application retrieved. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Application not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Application> oauthApplicationReadWithHttpInfo(String namespace, String application) throws ApiException {
        okhttp3.Call localVarCall = oauthApplicationReadValidateBeforeCall(namespace, application, null);
        Type localVarReturnType = new TypeToken<Application>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get an application by id (asynchronously)
     * 
     * @param namespace User or team name. (required)
     * @param application Application unique identifier expressed as UUID or name. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Application retrieved. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Application not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call oauthApplicationReadAsync(String namespace, String application, final ApiCallback<Application> _callback) throws ApiException {

        okhttp3.Call localVarCall = oauthApplicationReadValidateBeforeCall(namespace, application, _callback);
        Type localVarReturnType = new TypeToken<Application>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for oauthApplicationReplace
     * @param namespace User or team name. (required)
     * @param application Application unique identifier expressed as UUID or name. (required)
     * @param oauthApplicationData  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Application replaced. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Application not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call oauthApplicationReplaceCall(String namespace, String application, ApplicationData oauthApplicationData, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = oauthApplicationData;

        // create path and map variables
        String localVarPath = "/v1/{namespace}/oauth/applications/{application}/"
            .replace("{" + "namespace" + "}", localVarApiClient.escapeString(namespace.toString()))
            .replace("{" + "application" + "}", localVarApiClient.escapeString(application.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call oauthApplicationReplaceValidateBeforeCall(String namespace, String application, ApplicationData oauthApplicationData, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'namespace' is set
        if (namespace == null) {
            throw new ApiException("Missing the required parameter 'namespace' when calling oauthApplicationReplace(Async)");
        }

        // verify the required parameter 'application' is set
        if (application == null) {
            throw new ApiException("Missing the required parameter 'application' when calling oauthApplicationReplace(Async)");
        }

        return oauthApplicationReplaceCall(namespace, application, oauthApplicationData, _callback);

    }

    /**
     * Replace an application by id
     * 
     * @param namespace User or team name. (required)
     * @param application Application unique identifier expressed as UUID or name. (required)
     * @param oauthApplicationData  (optional)
     * @return Application
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Application replaced. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Application not found </td><td>  -  </td></tr>
     </table>
     */
    public Application oauthApplicationReplace(String namespace, String application, ApplicationData oauthApplicationData) throws ApiException {
        ApiResponse<Application> localVarResp = oauthApplicationReplaceWithHttpInfo(namespace, application, oauthApplicationData);
        return localVarResp.getData();
    }

    /**
     * Replace an application by id
     * 
     * @param namespace User or team name. (required)
     * @param application Application unique identifier expressed as UUID or name. (required)
     * @param oauthApplicationData  (optional)
     * @return ApiResponse&lt;Application&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Application replaced. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Application not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Application> oauthApplicationReplaceWithHttpInfo(String namespace, String application, ApplicationData oauthApplicationData) throws ApiException {
        okhttp3.Call localVarCall = oauthApplicationReplaceValidateBeforeCall(namespace, application, oauthApplicationData, null);
        Type localVarReturnType = new TypeToken<Application>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Replace an application by id (asynchronously)
     * 
     * @param namespace User or team name. (required)
     * @param application Application unique identifier expressed as UUID or name. (required)
     * @param oauthApplicationData  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Application replaced. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Application not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call oauthApplicationReplaceAsync(String namespace, String application, ApplicationData oauthApplicationData, final ApiCallback<Application> _callback) throws ApiException {

        okhttp3.Call localVarCall = oauthApplicationReplaceValidateBeforeCall(namespace, application, oauthApplicationData, _callback);
        Type localVarReturnType = new TypeToken<Application>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for oauthApplicationUpdate
     * @param namespace User or team name. (required)
     * @param application Application unique identifier expressed as UUID or name. (required)
     * @param applicationData  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Application updated. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Application not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call oauthApplicationUpdateCall(String namespace, String application, ApplicationData applicationData, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = applicationData;

        // create path and map variables
        String localVarPath = "/v1/{namespace}/oauth/applications/{application}/"
            .replace("{" + "namespace" + "}", localVarApiClient.escapeString(namespace.toString()))
            .replace("{" + "application" + "}", localVarApiClient.escapeString(application.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call oauthApplicationUpdateValidateBeforeCall(String namespace, String application, ApplicationData applicationData, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'namespace' is set
        if (namespace == null) {
            throw new ApiException("Missing the required parameter 'namespace' when calling oauthApplicationUpdate(Async)");
        }

        // verify the required parameter 'application' is set
        if (application == null) {
            throw new ApiException("Missing the required parameter 'application' when calling oauthApplicationUpdate(Async)");
        }

        return oauthApplicationUpdateCall(namespace, application, applicationData, _callback);

    }

    /**
     * Update an application by id
     * 
     * @param namespace User or team name. (required)
     * @param application Application unique identifier expressed as UUID or name. (required)
     * @param applicationData  (optional)
     * @return Application
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Application updated. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Application not found. </td><td>  -  </td></tr>
     </table>
     */
    public Application oauthApplicationUpdate(String namespace, String application, ApplicationData applicationData) throws ApiException {
        ApiResponse<Application> localVarResp = oauthApplicationUpdateWithHttpInfo(namespace, application, applicationData);
        return localVarResp.getData();
    }

    /**
     * Update an application by id
     * 
     * @param namespace User or team name. (required)
     * @param application Application unique identifier expressed as UUID or name. (required)
     * @param applicationData  (optional)
     * @return ApiResponse&lt;Application&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Application updated. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Application not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Application> oauthApplicationUpdateWithHttpInfo(String namespace, String application, ApplicationData applicationData) throws ApiException {
        okhttp3.Call localVarCall = oauthApplicationUpdateValidateBeforeCall(namespace, application, applicationData, null);
        Type localVarReturnType = new TypeToken<Application>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update an application by id (asynchronously)
     * 
     * @param namespace User or team name. (required)
     * @param application Application unique identifier expressed as UUID or name. (required)
     * @param applicationData  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Application updated. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Application not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call oauthApplicationUpdateAsync(String namespace, String application, ApplicationData applicationData, final ApiCallback<Application> _callback) throws ApiException {

        okhttp3.Call localVarCall = oauthApplicationUpdateValidateBeforeCall(namespace, application, applicationData, _callback);
        Type localVarReturnType = new TypeToken<Application>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for oauthApplicationsList
     * @param namespace User or team name. (required)
     * @param limit Set limit when retrieving items. (optional)
     * @param offset Offset when retrieving items. (optional)
     * @param ordering Set order when retrieving items. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OAuth2 application list </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call oauthApplicationsListCall(String namespace, String limit, String offset, String ordering, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/{namespace}/oauth/applications/"
            .replace("{" + "namespace" + "}", localVarApiClient.escapeString(namespace.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call oauthApplicationsListValidateBeforeCall(String namespace, String limit, String offset, String ordering, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'namespace' is set
        if (namespace == null) {
            throw new ApiException("Missing the required parameter 'namespace' when calling oauthApplicationsList(Async)");
        }

        return oauthApplicationsListCall(namespace, limit, offset, ordering, _callback);

    }

    /**
     * Retrieve oauth applications
     * 
     * @param namespace User or team name. (required)
     * @param limit Set limit when retrieving items. (optional)
     * @param offset Offset when retrieving items. (optional)
     * @param ordering Set order when retrieving items. (optional)
     * @return List&lt;Application&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OAuth2 application list </td><td>  -  </td></tr>
     </table>
     */
    public List<Application> oauthApplicationsList(String namespace, String limit, String offset, String ordering) throws ApiException {
        ApiResponse<List<Application>> localVarResp = oauthApplicationsListWithHttpInfo(namespace, limit, offset, ordering);
        return localVarResp.getData();
    }

    /**
     * Retrieve oauth applications
     * 
     * @param namespace User or team name. (required)
     * @param limit Set limit when retrieving items. (optional)
     * @param offset Offset when retrieving items. (optional)
     * @param ordering Set order when retrieving items. (optional)
     * @return ApiResponse&lt;List&lt;Application&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OAuth2 application list </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Application>> oauthApplicationsListWithHttpInfo(String namespace, String limit, String offset, String ordering) throws ApiException {
        okhttp3.Call localVarCall = oauthApplicationsListValidateBeforeCall(namespace, limit, offset, ordering, null);
        Type localVarReturnType = new TypeToken<List<Application>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve oauth applications (asynchronously)
     * 
     * @param namespace User or team name. (required)
     * @param limit Set limit when retrieving items. (optional)
     * @param offset Offset when retrieving items. (optional)
     * @param ordering Set order when retrieving items. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OAuth2 application list </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call oauthApplicationsListAsync(String namespace, String limit, String offset, String ordering, final ApiCallback<List<Application>> _callback) throws ApiException {

        okhttp3.Call localVarCall = oauthApplicationsListValidateBeforeCall(namespace, limit, offset, ordering, _callback);
        Type localVarReturnType = new TypeToken<List<Application>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
