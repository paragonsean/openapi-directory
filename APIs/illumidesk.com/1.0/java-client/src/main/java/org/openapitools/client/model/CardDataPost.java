/*
 * IllumiDesk
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CardDataPost
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:54:22.511892-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CardDataPost {
  public static final String SERIALIZED_NAME_ADDRESS_CITY = "address_city";
  @SerializedName(SERIALIZED_NAME_ADDRESS_CITY)
  private String addressCity;

  public static final String SERIALIZED_NAME_ADDRESS_COUNTRY = "address_country";
  @SerializedName(SERIALIZED_NAME_ADDRESS_COUNTRY)
  private String addressCountry;

  public static final String SERIALIZED_NAME_ADDRESS_LINE1 = "address_line1";
  @SerializedName(SERIALIZED_NAME_ADDRESS_LINE1)
  private String addressLine1;

  public static final String SERIALIZED_NAME_ADDRESS_LINE2 = "address_line2";
  @SerializedName(SERIALIZED_NAME_ADDRESS_LINE2)
  private String addressLine2;

  public static final String SERIALIZED_NAME_ADDRESS_STATE = "address_state";
  @SerializedName(SERIALIZED_NAME_ADDRESS_STATE)
  private String addressState;

  public static final String SERIALIZED_NAME_ADDRESS_ZIP = "address_zip";
  @SerializedName(SERIALIZED_NAME_ADDRESS_ZIP)
  private String addressZip;

  public static final String SERIALIZED_NAME_EXP_MONTH = "exp_month";
  @SerializedName(SERIALIZED_NAME_EXP_MONTH)
  private Integer expMonth;

  public static final String SERIALIZED_NAME_EXP_YEAR = "exp_year";
  @SerializedName(SERIALIZED_NAME_EXP_YEAR)
  private Integer expYear;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_TOKEN = "token";
  @SerializedName(SERIALIZED_NAME_TOKEN)
  private String token;

  public CardDataPost() {
  }

  public CardDataPost addressCity(String addressCity) {
    this.addressCity = addressCity;
    return this;
  }

  /**
   * Address city.
   * @return addressCity
   */
  @javax.annotation.Nullable
  public String getAddressCity() {
    return addressCity;
  }

  public void setAddressCity(String addressCity) {
    this.addressCity = addressCity;
  }


  public CardDataPost addressCountry(String addressCountry) {
    this.addressCountry = addressCountry;
    return this;
  }

  /**
   * Address country.
   * @return addressCountry
   */
  @javax.annotation.Nullable
  public String getAddressCountry() {
    return addressCountry;
  }

  public void setAddressCountry(String addressCountry) {
    this.addressCountry = addressCountry;
  }


  public CardDataPost addressLine1(String addressLine1) {
    this.addressLine1 = addressLine1;
    return this;
  }

  /**
   * Address line 1.
   * @return addressLine1
   */
  @javax.annotation.Nullable
  public String getAddressLine1() {
    return addressLine1;
  }

  public void setAddressLine1(String addressLine1) {
    this.addressLine1 = addressLine1;
  }


  public CardDataPost addressLine2(String addressLine2) {
    this.addressLine2 = addressLine2;
    return this;
  }

  /**
   * Address line 2.
   * @return addressLine2
   */
  @javax.annotation.Nullable
  public String getAddressLine2() {
    return addressLine2;
  }

  public void setAddressLine2(String addressLine2) {
    this.addressLine2 = addressLine2;
  }


  public CardDataPost addressState(String addressState) {
    this.addressState = addressState;
    return this;
  }

  /**
   * Address state.
   * @return addressState
   */
  @javax.annotation.Nullable
  public String getAddressState() {
    return addressState;
  }

  public void setAddressState(String addressState) {
    this.addressState = addressState;
  }


  public CardDataPost addressZip(String addressZip) {
    this.addressZip = addressZip;
    return this;
  }

  /**
   * Address zip code.
   * @return addressZip
   */
  @javax.annotation.Nullable
  public String getAddressZip() {
    return addressZip;
  }

  public void setAddressZip(String addressZip) {
    this.addressZip = addressZip;
  }


  public CardDataPost expMonth(Integer expMonth) {
    this.expMonth = expMonth;
    return this;
  }

  /**
   * Card expiration month.
   * @return expMonth
   */
  @javax.annotation.Nullable
  public Integer getExpMonth() {
    return expMonth;
  }

  public void setExpMonth(Integer expMonth) {
    this.expMonth = expMonth;
  }


  public CardDataPost expYear(Integer expYear) {
    this.expYear = expYear;
    return this;
  }

  /**
   * Card expiration year.
   * @return expYear
   */
  @javax.annotation.Nullable
  public Integer getExpYear() {
    return expYear;
  }

  public void setExpYear(Integer expYear) {
    this.expYear = expYear;
  }


  public CardDataPost name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Card name.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public CardDataPost token(String token) {
    this.token = token;
    return this;
  }

  /**
   * Card unique token.
   * @return token
   */
  @javax.annotation.Nullable
  public String getToken() {
    return token;
  }

  public void setToken(String token) {
    this.token = token;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CardDataPost cardDataPost = (CardDataPost) o;
    return Objects.equals(this.addressCity, cardDataPost.addressCity) &&
        Objects.equals(this.addressCountry, cardDataPost.addressCountry) &&
        Objects.equals(this.addressLine1, cardDataPost.addressLine1) &&
        Objects.equals(this.addressLine2, cardDataPost.addressLine2) &&
        Objects.equals(this.addressState, cardDataPost.addressState) &&
        Objects.equals(this.addressZip, cardDataPost.addressZip) &&
        Objects.equals(this.expMonth, cardDataPost.expMonth) &&
        Objects.equals(this.expYear, cardDataPost.expYear) &&
        Objects.equals(this.name, cardDataPost.name) &&
        Objects.equals(this.token, cardDataPost.token);
  }

  @Override
  public int hashCode() {
    return Objects.hash(addressCity, addressCountry, addressLine1, addressLine2, addressState, addressZip, expMonth, expYear, name, token);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CardDataPost {\n");
    sb.append("    addressCity: ").append(toIndentedString(addressCity)).append("\n");
    sb.append("    addressCountry: ").append(toIndentedString(addressCountry)).append("\n");
    sb.append("    addressLine1: ").append(toIndentedString(addressLine1)).append("\n");
    sb.append("    addressLine2: ").append(toIndentedString(addressLine2)).append("\n");
    sb.append("    addressState: ").append(toIndentedString(addressState)).append("\n");
    sb.append("    addressZip: ").append(toIndentedString(addressZip)).append("\n");
    sb.append("    expMonth: ").append(toIndentedString(expMonth)).append("\n");
    sb.append("    expYear: ").append(toIndentedString(expYear)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    token: ").append(toIndentedString(token)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("address_city");
    openapiFields.add("address_country");
    openapiFields.add("address_line1");
    openapiFields.add("address_line2");
    openapiFields.add("address_state");
    openapiFields.add("address_zip");
    openapiFields.add("exp_month");
    openapiFields.add("exp_year");
    openapiFields.add("name");
    openapiFields.add("token");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CardDataPost
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CardDataPost.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CardDataPost is not found in the empty JSON string", CardDataPost.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CardDataPost.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CardDataPost` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("address_city") != null && !jsonObj.get("address_city").isJsonNull()) && !jsonObj.get("address_city").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `address_city` to be a primitive type in the JSON string but got `%s`", jsonObj.get("address_city").toString()));
      }
      if ((jsonObj.get("address_country") != null && !jsonObj.get("address_country").isJsonNull()) && !jsonObj.get("address_country").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `address_country` to be a primitive type in the JSON string but got `%s`", jsonObj.get("address_country").toString()));
      }
      if ((jsonObj.get("address_line1") != null && !jsonObj.get("address_line1").isJsonNull()) && !jsonObj.get("address_line1").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `address_line1` to be a primitive type in the JSON string but got `%s`", jsonObj.get("address_line1").toString()));
      }
      if ((jsonObj.get("address_line2") != null && !jsonObj.get("address_line2").isJsonNull()) && !jsonObj.get("address_line2").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `address_line2` to be a primitive type in the JSON string but got `%s`", jsonObj.get("address_line2").toString()));
      }
      if ((jsonObj.get("address_state") != null && !jsonObj.get("address_state").isJsonNull()) && !jsonObj.get("address_state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `address_state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("address_state").toString()));
      }
      if ((jsonObj.get("address_zip") != null && !jsonObj.get("address_zip").isJsonNull()) && !jsonObj.get("address_zip").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `address_zip` to be a primitive type in the JSON string but got `%s`", jsonObj.get("address_zip").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("token") != null && !jsonObj.get("token").isJsonNull()) && !jsonObj.get("token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("token").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CardDataPost.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CardDataPost' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CardDataPost> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CardDataPost.class));

       return (TypeAdapter<T>) new TypeAdapter<CardDataPost>() {
           @Override
           public void write(JsonWriter out, CardDataPost value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CardDataPost read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CardDataPost given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CardDataPost
   * @throws IOException if the JSON string is invalid with respect to CardDataPost
   */
  public static CardDataPost fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CardDataPost.class);
  }

  /**
   * Convert an instance of CardDataPost to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

