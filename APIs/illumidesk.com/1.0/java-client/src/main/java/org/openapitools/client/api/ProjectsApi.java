/*
 * IllumiDesk
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Collaborator;
import org.openapitools.client.model.CollaboratorData;
import org.openapitools.client.model.CollaboratorError;
import org.openapitools.client.model.Deployment;
import org.openapitools.client.model.DeploymentData;
import org.openapitools.client.model.DeploymentError;
import java.io.File;
import org.openapitools.client.model.JWT;
import org.openapitools.client.model.NotFound;
import org.openapitools.client.model.Project;
import org.openapitools.client.model.ProjectCopyCheckRequest;
import org.openapitools.client.model.ProjectCopyRequest;
import org.openapitools.client.model.ProjectData;
import org.openapitools.client.model.ProjectError;
import org.openapitools.client.model.ProjectFile;
import org.openapitools.client.model.ProjectFileError;
import org.openapitools.client.model.Server;
import org.openapitools.client.model.ServerAction;
import org.openapitools.client.model.ServerActionData;
import org.openapitools.client.model.ServerActionError;
import org.openapitools.client.model.ServerData;
import org.openapitools.client.model.ServerError;
import org.openapitools.client.model.ServerRunStatistics;
import org.openapitools.client.model.ServerRunStatisticsData;
import org.openapitools.client.model.ServerRunStatisticsError;
import org.openapitools.client.model.ServerStatistics;
import org.openapitools.client.model.ServerStatisticsData;
import org.openapitools.client.model.ServerStatisticsError;
import org.openapitools.client.model.ServerStatus;
import org.openapitools.client.model.SshTunnel;
import org.openapitools.client.model.SshTunnelData;
import org.openapitools.client.model.SshTunnelError;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ProjectsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ProjectsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ProjectsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for projectCopy
     * @param namespace User or team name. (required)
     * @param projectCopyData  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Project copied </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Project not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectCopyCall(String namespace, ProjectCopyRequest projectCopyData, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = projectCopyData;

        // create path and map variables
        String localVarPath = "/v1/{namespace}/projects/project-copy/"
            .replace("{" + "namespace" + "}", localVarApiClient.escapeString(namespace.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectCopyValidateBeforeCall(String namespace, ProjectCopyRequest projectCopyData, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'namespace' is set
        if (namespace == null) {
            throw new ApiException("Missing the required parameter 'namespace' when calling projectCopy(Async)");
        }

        // verify the required parameter 'projectCopyData' is set
        if (projectCopyData == null) {
            throw new ApiException("Missing the required parameter 'projectCopyData' when calling projectCopy(Async)");
        }

        return projectCopyCall(namespace, projectCopyData, _callback);

    }

    /**
     * Copy a project to your own account.
     * 
     * @param namespace User or team name. (required)
     * @param projectCopyData  (required)
     * @return Project
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Project copied </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Project not found. </td><td>  -  </td></tr>
     </table>
     */
    public Project projectCopy(String namespace, ProjectCopyRequest projectCopyData) throws ApiException {
        ApiResponse<Project> localVarResp = projectCopyWithHttpInfo(namespace, projectCopyData);
        return localVarResp.getData();
    }

    /**
     * Copy a project to your own account.
     * 
     * @param namespace User or team name. (required)
     * @param projectCopyData  (required)
     * @return ApiResponse&lt;Project&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Project copied </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Project not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Project> projectCopyWithHttpInfo(String namespace, ProjectCopyRequest projectCopyData) throws ApiException {
        okhttp3.Call localVarCall = projectCopyValidateBeforeCall(namespace, projectCopyData, null);
        Type localVarReturnType = new TypeToken<Project>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Copy a project to your own account. (asynchronously)
     * 
     * @param namespace User or team name. (required)
     * @param projectCopyData  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Project copied </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Project not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectCopyAsync(String namespace, ProjectCopyRequest projectCopyData, final ApiCallback<Project> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectCopyValidateBeforeCall(namespace, projectCopyData, _callback);
        Type localVarReturnType = new TypeToken<Project>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectCopyCheck
     * @param namespace User or team name. (required)
     * @param projectCopyData  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The authenticated has permission to copy this project </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Project not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectCopyCheckCall(String namespace, ProjectCopyCheckRequest projectCopyData, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = projectCopyData;

        // create path and map variables
        String localVarPath = "/v1/{namespace}/projects/project-copy-check/"
            .replace("{" + "namespace" + "}", localVarApiClient.escapeString(namespace.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "HEAD", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectCopyCheckValidateBeforeCall(String namespace, ProjectCopyCheckRequest projectCopyData, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'namespace' is set
        if (namespace == null) {
            throw new ApiException("Missing the required parameter 'namespace' when calling projectCopyCheck(Async)");
        }

        // verify the required parameter 'projectCopyData' is set
        if (projectCopyData == null) {
            throw new ApiException("Missing the required parameter 'projectCopyData' when calling projectCopyCheck(Async)");
        }

        return projectCopyCheckCall(namespace, projectCopyData, _callback);

    }

    /**
     * Check if you are able to copy a project to your account.
     * 
     * @param namespace User or team name. (required)
     * @param projectCopyData  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The authenticated has permission to copy this project </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Project not found. </td><td>  -  </td></tr>
     </table>
     */
    public void projectCopyCheck(String namespace, ProjectCopyCheckRequest projectCopyData) throws ApiException {
        projectCopyCheckWithHttpInfo(namespace, projectCopyData);
    }

    /**
     * Check if you are able to copy a project to your account.
     * 
     * @param namespace User or team name. (required)
     * @param projectCopyData  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The authenticated has permission to copy this project </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Project not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> projectCopyCheckWithHttpInfo(String namespace, ProjectCopyCheckRequest projectCopyData) throws ApiException {
        okhttp3.Call localVarCall = projectCopyCheckValidateBeforeCall(namespace, projectCopyData, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Check if you are able to copy a project to your account. (asynchronously)
     * 
     * @param namespace User or team name. (required)
     * @param projectCopyData  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The authenticated has permission to copy this project </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Project not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectCopyCheckAsync(String namespace, ProjectCopyCheckRequest projectCopyData, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectCopyCheckValidateBeforeCall(namespace, projectCopyData, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectsCollaboratorsCreate
     * @param project Project unique identifier expressed as UUID or name. (required)
     * @param namespace User or team name. (required)
     * @param collaboratorData  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Collaborator created. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectsCollaboratorsCreateCall(String project, String namespace, CollaboratorData collaboratorData, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = collaboratorData;

        // create path and map variables
        String localVarPath = "/v1/{namespace}/projects/{project}/collaborators/"
            .replace("{" + "project" + "}", localVarApiClient.escapeString(project.toString()))
            .replace("{" + "namespace" + "}", localVarApiClient.escapeString(namespace.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectsCollaboratorsCreateValidateBeforeCall(String project, String namespace, CollaboratorData collaboratorData, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'project' is set
        if (project == null) {
            throw new ApiException("Missing the required parameter 'project' when calling projectsCollaboratorsCreate(Async)");
        }

        // verify the required parameter 'namespace' is set
        if (namespace == null) {
            throw new ApiException("Missing the required parameter 'namespace' when calling projectsCollaboratorsCreate(Async)");
        }

        return projectsCollaboratorsCreateCall(project, namespace, collaboratorData, _callback);

    }

    /**
     * Create project collaborators
     * 
     * @param project Project unique identifier expressed as UUID or name. (required)
     * @param namespace User or team name. (required)
     * @param collaboratorData  (optional)
     * @return Collaborator
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Collaborator created. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied. </td><td>  -  </td></tr>
     </table>
     */
    public Collaborator projectsCollaboratorsCreate(String project, String namespace, CollaboratorData collaboratorData) throws ApiException {
        ApiResponse<Collaborator> localVarResp = projectsCollaboratorsCreateWithHttpInfo(project, namespace, collaboratorData);
        return localVarResp.getData();
    }

    /**
     * Create project collaborators
     * 
     * @param project Project unique identifier expressed as UUID or name. (required)
     * @param namespace User or team name. (required)
     * @param collaboratorData  (optional)
     * @return ApiResponse&lt;Collaborator&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Collaborator created. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Collaborator> projectsCollaboratorsCreateWithHttpInfo(String project, String namespace, CollaboratorData collaboratorData) throws ApiException {
        okhttp3.Call localVarCall = projectsCollaboratorsCreateValidateBeforeCall(project, namespace, collaboratorData, null);
        Type localVarReturnType = new TypeToken<Collaborator>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create project collaborators (asynchronously)
     * 
     * @param project Project unique identifier expressed as UUID or name. (required)
     * @param namespace User or team name. (required)
     * @param collaboratorData  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Collaborator created. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectsCollaboratorsCreateAsync(String project, String namespace, CollaboratorData collaboratorData, final ApiCallback<Collaborator> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectsCollaboratorsCreateValidateBeforeCall(project, namespace, collaboratorData, _callback);
        Type localVarReturnType = new TypeToken<Collaborator>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectsCollaboratorsDelete
     * @param project Project unique identifier. (required)
     * @param namespace User or team name. (required)
     * @param collaborator Collaborator unique identifier. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Collaborator deleted. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Collaborator not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectsCollaboratorsDeleteCall(String project, String namespace, String collaborator, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/{namespace}/projects/{project}/collaborators/{collaborator}/"
            .replace("{" + "project" + "}", localVarApiClient.escapeString(project.toString()))
            .replace("{" + "namespace" + "}", localVarApiClient.escapeString(namespace.toString()))
            .replace("{" + "collaborator" + "}", localVarApiClient.escapeString(collaborator.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectsCollaboratorsDeleteValidateBeforeCall(String project, String namespace, String collaborator, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'project' is set
        if (project == null) {
            throw new ApiException("Missing the required parameter 'project' when calling projectsCollaboratorsDelete(Async)");
        }

        // verify the required parameter 'namespace' is set
        if (namespace == null) {
            throw new ApiException("Missing the required parameter 'namespace' when calling projectsCollaboratorsDelete(Async)");
        }

        // verify the required parameter 'collaborator' is set
        if (collaborator == null) {
            throw new ApiException("Missing the required parameter 'collaborator' when calling projectsCollaboratorsDelete(Async)");
        }

        return projectsCollaboratorsDeleteCall(project, namespace, collaborator, _callback);

    }

    /**
     * Delete a project collaborator
     * 
     * @param project Project unique identifier. (required)
     * @param namespace User or team name. (required)
     * @param collaborator Collaborator unique identifier. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Collaborator deleted. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Collaborator not found. </td><td>  -  </td></tr>
     </table>
     */
    public void projectsCollaboratorsDelete(String project, String namespace, String collaborator) throws ApiException {
        projectsCollaboratorsDeleteWithHttpInfo(project, namespace, collaborator);
    }

    /**
     * Delete a project collaborator
     * 
     * @param project Project unique identifier. (required)
     * @param namespace User or team name. (required)
     * @param collaborator Collaborator unique identifier. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Collaborator deleted. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Collaborator not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> projectsCollaboratorsDeleteWithHttpInfo(String project, String namespace, String collaborator) throws ApiException {
        okhttp3.Call localVarCall = projectsCollaboratorsDeleteValidateBeforeCall(project, namespace, collaborator, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a project collaborator (asynchronously)
     * 
     * @param project Project unique identifier. (required)
     * @param namespace User or team name. (required)
     * @param collaborator Collaborator unique identifier. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Collaborator deleted. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Collaborator not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectsCollaboratorsDeleteAsync(String project, String namespace, String collaborator, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectsCollaboratorsDeleteValidateBeforeCall(project, namespace, collaborator, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectsCollaboratorsList
     * @param project Project unique identifier expressed as UUID or name. (required)
     * @param namespace User or team name. (required)
     * @param limit Limit when retrieving items. (optional)
     * @param offset Offset when retrieving items. (optional)
     * @param ordering Ordering when retrieving items. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Collaborator list. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectsCollaboratorsListCall(String project, String namespace, String limit, String offset, String ordering, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/{namespace}/projects/{project}/collaborators/"
            .replace("{" + "project" + "}", localVarApiClient.escapeString(project.toString()))
            .replace("{" + "namespace" + "}", localVarApiClient.escapeString(namespace.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectsCollaboratorsListValidateBeforeCall(String project, String namespace, String limit, String offset, String ordering, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'project' is set
        if (project == null) {
            throw new ApiException("Missing the required parameter 'project' when calling projectsCollaboratorsList(Async)");
        }

        // verify the required parameter 'namespace' is set
        if (namespace == null) {
            throw new ApiException("Missing the required parameter 'namespace' when calling projectsCollaboratorsList(Async)");
        }

        return projectsCollaboratorsListCall(project, namespace, limit, offset, ordering, _callback);

    }

    /**
     * Get project collaborators
     * 
     * @param project Project unique identifier expressed as UUID or name. (required)
     * @param namespace User or team name. (required)
     * @param limit Limit when retrieving items. (optional)
     * @param offset Offset when retrieving items. (optional)
     * @param ordering Ordering when retrieving items. (optional)
     * @return List&lt;Collaborator&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Collaborator list. </td><td>  -  </td></tr>
     </table>
     */
    public List<Collaborator> projectsCollaboratorsList(String project, String namespace, String limit, String offset, String ordering) throws ApiException {
        ApiResponse<List<Collaborator>> localVarResp = projectsCollaboratorsListWithHttpInfo(project, namespace, limit, offset, ordering);
        return localVarResp.getData();
    }

    /**
     * Get project collaborators
     * 
     * @param project Project unique identifier expressed as UUID or name. (required)
     * @param namespace User or team name. (required)
     * @param limit Limit when retrieving items. (optional)
     * @param offset Offset when retrieving items. (optional)
     * @param ordering Ordering when retrieving items. (optional)
     * @return ApiResponse&lt;List&lt;Collaborator&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Collaborator list. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Collaborator>> projectsCollaboratorsListWithHttpInfo(String project, String namespace, String limit, String offset, String ordering) throws ApiException {
        okhttp3.Call localVarCall = projectsCollaboratorsListValidateBeforeCall(project, namespace, limit, offset, ordering, null);
        Type localVarReturnType = new TypeToken<List<Collaborator>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get project collaborators (asynchronously)
     * 
     * @param project Project unique identifier expressed as UUID or name. (required)
     * @param namespace User or team name. (required)
     * @param limit Limit when retrieving items. (optional)
     * @param offset Offset when retrieving items. (optional)
     * @param ordering Ordering when retrieving items. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Collaborator list. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectsCollaboratorsListAsync(String project, String namespace, String limit, String offset, String ordering, final ApiCallback<List<Collaborator>> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectsCollaboratorsListValidateBeforeCall(project, namespace, limit, offset, ordering, _callback);
        Type localVarReturnType = new TypeToken<List<Collaborator>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectsCollaboratorsRead
     * @param project Project unique identifier. (required)
     * @param namespace User or team name. (required)
     * @param collaborator Collaborator unique identifier expressed as UUID or name. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Collaborator retrieved. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Collaborator not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectsCollaboratorsReadCall(String project, String namespace, String collaborator, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/{namespace}/projects/{project}/collaborators/{collaborator}/"
            .replace("{" + "project" + "}", localVarApiClient.escapeString(project.toString()))
            .replace("{" + "namespace" + "}", localVarApiClient.escapeString(namespace.toString()))
            .replace("{" + "collaborator" + "}", localVarApiClient.escapeString(collaborator.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectsCollaboratorsReadValidateBeforeCall(String project, String namespace, String collaborator, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'project' is set
        if (project == null) {
            throw new ApiException("Missing the required parameter 'project' when calling projectsCollaboratorsRead(Async)");
        }

        // verify the required parameter 'namespace' is set
        if (namespace == null) {
            throw new ApiException("Missing the required parameter 'namespace' when calling projectsCollaboratorsRead(Async)");
        }

        // verify the required parameter 'collaborator' is set
        if (collaborator == null) {
            throw new ApiException("Missing the required parameter 'collaborator' when calling projectsCollaboratorsRead(Async)");
        }

        return projectsCollaboratorsReadCall(project, namespace, collaborator, _callback);

    }

    /**
     * Get a project collaborator
     * 
     * @param project Project unique identifier. (required)
     * @param namespace User or team name. (required)
     * @param collaborator Collaborator unique identifier expressed as UUID or name. (required)
     * @return Collaborator
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Collaborator retrieved. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Collaborator not found. </td><td>  -  </td></tr>
     </table>
     */
    public Collaborator projectsCollaboratorsRead(String project, String namespace, String collaborator) throws ApiException {
        ApiResponse<Collaborator> localVarResp = projectsCollaboratorsReadWithHttpInfo(project, namespace, collaborator);
        return localVarResp.getData();
    }

    /**
     * Get a project collaborator
     * 
     * @param project Project unique identifier. (required)
     * @param namespace User or team name. (required)
     * @param collaborator Collaborator unique identifier expressed as UUID or name. (required)
     * @return ApiResponse&lt;Collaborator&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Collaborator retrieved. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Collaborator not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Collaborator> projectsCollaboratorsReadWithHttpInfo(String project, String namespace, String collaborator) throws ApiException {
        okhttp3.Call localVarCall = projectsCollaboratorsReadValidateBeforeCall(project, namespace, collaborator, null);
        Type localVarReturnType = new TypeToken<Collaborator>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a project collaborator (asynchronously)
     * 
     * @param project Project unique identifier. (required)
     * @param namespace User or team name. (required)
     * @param collaborator Collaborator unique identifier expressed as UUID or name. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Collaborator retrieved. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Collaborator not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectsCollaboratorsReadAsync(String project, String namespace, String collaborator, final ApiCallback<Collaborator> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectsCollaboratorsReadValidateBeforeCall(project, namespace, collaborator, _callback);
        Type localVarReturnType = new TypeToken<Collaborator>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectsCollaboratorsUpdate
     * @param project  (required)
     * @param namespace User or team name. (required)
     * @param collaborator  (required)
     * @param collaboratorData  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Collaborator updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Collaborator not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectsCollaboratorsUpdateCall(String project, String namespace, String collaborator, CollaboratorData collaboratorData, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = collaboratorData;

        // create path and map variables
        String localVarPath = "/v1/{namespace}/projects/{project}/collaborators/{collaborator}/"
            .replace("{" + "project" + "}", localVarApiClient.escapeString(project.toString()))
            .replace("{" + "namespace" + "}", localVarApiClient.escapeString(namespace.toString()))
            .replace("{" + "collaborator" + "}", localVarApiClient.escapeString(collaborator.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectsCollaboratorsUpdateValidateBeforeCall(String project, String namespace, String collaborator, CollaboratorData collaboratorData, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'project' is set
        if (project == null) {
            throw new ApiException("Missing the required parameter 'project' when calling projectsCollaboratorsUpdate(Async)");
        }

        // verify the required parameter 'namespace' is set
        if (namespace == null) {
            throw new ApiException("Missing the required parameter 'namespace' when calling projectsCollaboratorsUpdate(Async)");
        }

        // verify the required parameter 'collaborator' is set
        if (collaborator == null) {
            throw new ApiException("Missing the required parameter 'collaborator' when calling projectsCollaboratorsUpdate(Async)");
        }

        return projectsCollaboratorsUpdateCall(project, namespace, collaborator, collaboratorData, _callback);

    }

    /**
     * Update project collaborator
     * 
     * @param project  (required)
     * @param namespace User or team name. (required)
     * @param collaborator  (required)
     * @param collaboratorData  (optional)
     * @return Collaborator
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Collaborator updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Collaborator not found </td><td>  -  </td></tr>
     </table>
     */
    public Collaborator projectsCollaboratorsUpdate(String project, String namespace, String collaborator, CollaboratorData collaboratorData) throws ApiException {
        ApiResponse<Collaborator> localVarResp = projectsCollaboratorsUpdateWithHttpInfo(project, namespace, collaborator, collaboratorData);
        return localVarResp.getData();
    }

    /**
     * Update project collaborator
     * 
     * @param project  (required)
     * @param namespace User or team name. (required)
     * @param collaborator  (required)
     * @param collaboratorData  (optional)
     * @return ApiResponse&lt;Collaborator&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Collaborator updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Collaborator not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Collaborator> projectsCollaboratorsUpdateWithHttpInfo(String project, String namespace, String collaborator, CollaboratorData collaboratorData) throws ApiException {
        okhttp3.Call localVarCall = projectsCollaboratorsUpdateValidateBeforeCall(project, namespace, collaborator, collaboratorData, null);
        Type localVarReturnType = new TypeToken<Collaborator>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update project collaborator (asynchronously)
     * 
     * @param project  (required)
     * @param namespace User or team name. (required)
     * @param collaborator  (required)
     * @param collaboratorData  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Collaborator updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Collaborator not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectsCollaboratorsUpdateAsync(String project, String namespace, String collaborator, CollaboratorData collaboratorData, final ApiCallback<Collaborator> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectsCollaboratorsUpdateValidateBeforeCall(project, namespace, collaborator, collaboratorData, _callback);
        Type localVarReturnType = new TypeToken<Collaborator>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectsCreate
     * @param namespace User or team name. (required)
     * @param projectData  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Project created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectsCreateCall(String namespace, ProjectData projectData, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = projectData;

        // create path and map variables
        String localVarPath = "/v1/{namespace}/projects/"
            .replace("{" + "namespace" + "}", localVarApiClient.escapeString(namespace.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectsCreateValidateBeforeCall(String namespace, ProjectData projectData, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'namespace' is set
        if (namespace == null) {
            throw new ApiException("Missing the required parameter 'namespace' when calling projectsCreate(Async)");
        }

        return projectsCreateCall(namespace, projectData, _callback);

    }

    /**
     * Create a new project
     * 
     * @param namespace User or team name. (required)
     * @param projectData  (optional)
     * @return Project
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Project created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied </td><td>  -  </td></tr>
     </table>
     */
    public Project projectsCreate(String namespace, ProjectData projectData) throws ApiException {
        ApiResponse<Project> localVarResp = projectsCreateWithHttpInfo(namespace, projectData);
        return localVarResp.getData();
    }

    /**
     * Create a new project
     * 
     * @param namespace User or team name. (required)
     * @param projectData  (optional)
     * @return ApiResponse&lt;Project&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Project created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Project> projectsCreateWithHttpInfo(String namespace, ProjectData projectData) throws ApiException {
        okhttp3.Call localVarCall = projectsCreateValidateBeforeCall(namespace, projectData, null);
        Type localVarReturnType = new TypeToken<Project>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a new project (asynchronously)
     * 
     * @param namespace User or team name. (required)
     * @param projectData  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Project created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectsCreateAsync(String namespace, ProjectData projectData, final ApiCallback<Project> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectsCreateValidateBeforeCall(namespace, projectData, _callback);
        Type localVarReturnType = new TypeToken<Project>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectsDelete
     * @param namespace User or team name. (required)
     * @param project Project unique identifier expressed as UUID or name. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Project deleted. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Project not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectsDeleteCall(String namespace, String project, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/{namespace}/projects/{project}/"
            .replace("{" + "namespace" + "}", localVarApiClient.escapeString(namespace.toString()))
            .replace("{" + "project" + "}", localVarApiClient.escapeString(project.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectsDeleteValidateBeforeCall(String namespace, String project, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'namespace' is set
        if (namespace == null) {
            throw new ApiException("Missing the required parameter 'namespace' when calling projectsDelete(Async)");
        }

        // verify the required parameter 'project' is set
        if (project == null) {
            throw new ApiException("Missing the required parameter 'project' when calling projectsDelete(Async)");
        }

        return projectsDeleteCall(namespace, project, _callback);

    }

    /**
     * Delete a project
     * 
     * @param namespace User or team name. (required)
     * @param project Project unique identifier expressed as UUID or name. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Project deleted. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Project not found. </td><td>  -  </td></tr>
     </table>
     */
    public void projectsDelete(String namespace, String project) throws ApiException {
        projectsDeleteWithHttpInfo(namespace, project);
    }

    /**
     * Delete a project
     * 
     * @param namespace User or team name. (required)
     * @param project Project unique identifier expressed as UUID or name. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Project deleted. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Project not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> projectsDeleteWithHttpInfo(String namespace, String project) throws ApiException {
        okhttp3.Call localVarCall = projectsDeleteValidateBeforeCall(namespace, project, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a project (asynchronously)
     * 
     * @param namespace User or team name. (required)
     * @param project Project unique identifier expressed as UUID or name. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Project deleted. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Project not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectsDeleteAsync(String namespace, String project, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectsDeleteValidateBeforeCall(namespace, project, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectsDeploymentDelete
     * @param project Project unique identifier. (required)
     * @param namespace User or team name. (required)
     * @param deployment User unique identifier. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Deployment deleted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Deployment not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectsDeploymentDeleteCall(String project, String namespace, String deployment, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/{namespace}/projects/{project}/deployments/{deployment}/"
            .replace("{" + "project" + "}", localVarApiClient.escapeString(project.toString()))
            .replace("{" + "namespace" + "}", localVarApiClient.escapeString(namespace.toString()))
            .replace("{" + "deployment" + "}", localVarApiClient.escapeString(deployment.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectsDeploymentDeleteValidateBeforeCall(String project, String namespace, String deployment, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'project' is set
        if (project == null) {
            throw new ApiException("Missing the required parameter 'project' when calling projectsDeploymentDelete(Async)");
        }

        // verify the required parameter 'namespace' is set
        if (namespace == null) {
            throw new ApiException("Missing the required parameter 'namespace' when calling projectsDeploymentDelete(Async)");
        }

        // verify the required parameter 'deployment' is set
        if (deployment == null) {
            throw new ApiException("Missing the required parameter 'deployment' when calling projectsDeploymentDelete(Async)");
        }

        return projectsDeploymentDeleteCall(project, namespace, deployment, _callback);

    }

    /**
     * Delete a deployment
     * 
     * @param project Project unique identifier. (required)
     * @param namespace User or team name. (required)
     * @param deployment User unique identifier. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Deployment deleted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Deployment not found </td><td>  -  </td></tr>
     </table>
     */
    public void projectsDeploymentDelete(String project, String namespace, String deployment) throws ApiException {
        projectsDeploymentDeleteWithHttpInfo(project, namespace, deployment);
    }

    /**
     * Delete a deployment
     * 
     * @param project Project unique identifier. (required)
     * @param namespace User or team name. (required)
     * @param deployment User unique identifier. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Deployment deleted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Deployment not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> projectsDeploymentDeleteWithHttpInfo(String project, String namespace, String deployment) throws ApiException {
        okhttp3.Call localVarCall = projectsDeploymentDeleteValidateBeforeCall(project, namespace, deployment, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a deployment (asynchronously)
     * 
     * @param project Project unique identifier. (required)
     * @param namespace User or team name. (required)
     * @param deployment User unique identifier. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Deployment deleted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Deployment not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectsDeploymentDeleteAsync(String project, String namespace, String deployment, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectsDeploymentDeleteValidateBeforeCall(project, namespace, deployment, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectsDeploymentsCreate
     * @param project Project unique identifer expressed as UUID or name. (required)
     * @param namespace User or team name. (required)
     * @param deploymentData  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Deployment created. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectsDeploymentsCreateCall(String project, String namespace, DeploymentData deploymentData, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deploymentData;

        // create path and map variables
        String localVarPath = "/v1/{namespace}/projects/{project}/deployments/"
            .replace("{" + "project" + "}", localVarApiClient.escapeString(project.toString()))
            .replace("{" + "namespace" + "}", localVarApiClient.escapeString(namespace.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectsDeploymentsCreateValidateBeforeCall(String project, String namespace, DeploymentData deploymentData, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'project' is set
        if (project == null) {
            throw new ApiException("Missing the required parameter 'project' when calling projectsDeploymentsCreate(Async)");
        }

        // verify the required parameter 'namespace' is set
        if (namespace == null) {
            throw new ApiException("Missing the required parameter 'namespace' when calling projectsDeploymentsCreate(Async)");
        }

        return projectsDeploymentsCreateCall(project, namespace, deploymentData, _callback);

    }

    /**
     * Create a new deployment
     * 
     * @param project Project unique identifer expressed as UUID or name. (required)
     * @param namespace User or team name. (required)
     * @param deploymentData  (optional)
     * @return Deployment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Deployment created. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied. </td><td>  -  </td></tr>
     </table>
     */
    public Deployment projectsDeploymentsCreate(String project, String namespace, DeploymentData deploymentData) throws ApiException {
        ApiResponse<Deployment> localVarResp = projectsDeploymentsCreateWithHttpInfo(project, namespace, deploymentData);
        return localVarResp.getData();
    }

    /**
     * Create a new deployment
     * 
     * @param project Project unique identifer expressed as UUID or name. (required)
     * @param namespace User or team name. (required)
     * @param deploymentData  (optional)
     * @return ApiResponse&lt;Deployment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Deployment created. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Deployment> projectsDeploymentsCreateWithHttpInfo(String project, String namespace, DeploymentData deploymentData) throws ApiException {
        okhttp3.Call localVarCall = projectsDeploymentsCreateValidateBeforeCall(project, namespace, deploymentData, null);
        Type localVarReturnType = new TypeToken<Deployment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a new deployment (asynchronously)
     * 
     * @param project Project unique identifer expressed as UUID or name. (required)
     * @param namespace User or team name. (required)
     * @param deploymentData  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Deployment created. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectsDeploymentsCreateAsync(String project, String namespace, DeploymentData deploymentData, final ApiCallback<Deployment> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectsDeploymentsCreateValidateBeforeCall(project, namespace, deploymentData, _callback);
        Type localVarReturnType = new TypeToken<Deployment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectsDeploymentsDeploy
     * @param project Project unique identifier expressed as UUID or name. (required)
     * @param namespace User or team name. (required)
     * @param deployment Deployment unique identifier expressed as UUID or name. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Deployment successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectsDeploymentsDeployCall(String project, String namespace, String deployment, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/{namespace}/projects/{project}/deployments/{deployment}/deploy/"
            .replace("{" + "project" + "}", localVarApiClient.escapeString(project.toString()))
            .replace("{" + "namespace" + "}", localVarApiClient.escapeString(namespace.toString()))
            .replace("{" + "deployment" + "}", localVarApiClient.escapeString(deployment.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectsDeploymentsDeployValidateBeforeCall(String project, String namespace, String deployment, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'project' is set
        if (project == null) {
            throw new ApiException("Missing the required parameter 'project' when calling projectsDeploymentsDeploy(Async)");
        }

        // verify the required parameter 'namespace' is set
        if (namespace == null) {
            throw new ApiException("Missing the required parameter 'namespace' when calling projectsDeploymentsDeploy(Async)");
        }

        // verify the required parameter 'deployment' is set
        if (deployment == null) {
            throw new ApiException("Missing the required parameter 'deployment' when calling projectsDeploymentsDeploy(Async)");
        }

        return projectsDeploymentsDeployCall(project, namespace, deployment, _callback);

    }

    /**
     * Deploy an existing model
     * 
     * @param project Project unique identifier expressed as UUID or name. (required)
     * @param namespace User or team name. (required)
     * @param deployment Deployment unique identifier expressed as UUID or name. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Deployment successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied. </td><td>  -  </td></tr>
     </table>
     */
    public void projectsDeploymentsDeploy(String project, String namespace, String deployment) throws ApiException {
        projectsDeploymentsDeployWithHttpInfo(project, namespace, deployment);
    }

    /**
     * Deploy an existing model
     * 
     * @param project Project unique identifier expressed as UUID or name. (required)
     * @param namespace User or team name. (required)
     * @param deployment Deployment unique identifier expressed as UUID or name. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Deployment successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> projectsDeploymentsDeployWithHttpInfo(String project, String namespace, String deployment) throws ApiException {
        okhttp3.Call localVarCall = projectsDeploymentsDeployValidateBeforeCall(project, namespace, deployment, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Deploy an existing model (asynchronously)
     * 
     * @param project Project unique identifier expressed as UUID or name. (required)
     * @param namespace User or team name. (required)
     * @param deployment Deployment unique identifier expressed as UUID or name. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Deployment successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectsDeploymentsDeployAsync(String project, String namespace, String deployment, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectsDeploymentsDeployValidateBeforeCall(project, namespace, deployment, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectsDeploymentsList
     * @param project Project unique identifier expressed as UUID or name. (required)
     * @param namespace User or team name. (required)
     * @param limit Limit results when getting deployment list. (optional)
     * @param offset Offset results when getting deployment list. (optional)
     * @param name Server name. (optional)
     * @param ordering Ordering option when getting deployment list. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deployment list. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectsDeploymentsListCall(String project, String namespace, String limit, String offset, String name, String ordering, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/{namespace}/projects/{project}/deployments/"
            .replace("{" + "project" + "}", localVarApiClient.escapeString(project.toString()))
            .replace("{" + "namespace" + "}", localVarApiClient.escapeString(namespace.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectsDeploymentsListValidateBeforeCall(String project, String namespace, String limit, String offset, String name, String ordering, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'project' is set
        if (project == null) {
            throw new ApiException("Missing the required parameter 'project' when calling projectsDeploymentsList(Async)");
        }

        // verify the required parameter 'namespace' is set
        if (namespace == null) {
            throw new ApiException("Missing the required parameter 'namespace' when calling projectsDeploymentsList(Async)");
        }

        return projectsDeploymentsListCall(project, namespace, limit, offset, name, ordering, _callback);

    }

    /**
     * Retrieve deployments
     * 
     * @param project Project unique identifier expressed as UUID or name. (required)
     * @param namespace User or team name. (required)
     * @param limit Limit results when getting deployment list. (optional)
     * @param offset Offset results when getting deployment list. (optional)
     * @param name Server name. (optional)
     * @param ordering Ordering option when getting deployment list. (optional)
     * @return List&lt;Deployment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deployment list. </td><td>  -  </td></tr>
     </table>
     */
    public List<Deployment> projectsDeploymentsList(String project, String namespace, String limit, String offset, String name, String ordering) throws ApiException {
        ApiResponse<List<Deployment>> localVarResp = projectsDeploymentsListWithHttpInfo(project, namespace, limit, offset, name, ordering);
        return localVarResp.getData();
    }

    /**
     * Retrieve deployments
     * 
     * @param project Project unique identifier expressed as UUID or name. (required)
     * @param namespace User or team name. (required)
     * @param limit Limit results when getting deployment list. (optional)
     * @param offset Offset results when getting deployment list. (optional)
     * @param name Server name. (optional)
     * @param ordering Ordering option when getting deployment list. (optional)
     * @return ApiResponse&lt;List&lt;Deployment&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deployment list. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Deployment>> projectsDeploymentsListWithHttpInfo(String project, String namespace, String limit, String offset, String name, String ordering) throws ApiException {
        okhttp3.Call localVarCall = projectsDeploymentsListValidateBeforeCall(project, namespace, limit, offset, name, ordering, null);
        Type localVarReturnType = new TypeToken<List<Deployment>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve deployments (asynchronously)
     * 
     * @param project Project unique identifier expressed as UUID or name. (required)
     * @param namespace User or team name. (required)
     * @param limit Limit results when getting deployment list. (optional)
     * @param offset Offset results when getting deployment list. (optional)
     * @param name Server name. (optional)
     * @param ordering Ordering option when getting deployment list. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deployment list. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectsDeploymentsListAsync(String project, String namespace, String limit, String offset, String name, String ordering, final ApiCallback<List<Deployment>> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectsDeploymentsListValidateBeforeCall(project, namespace, limit, offset, name, ordering, _callback);
        Type localVarReturnType = new TypeToken<List<Deployment>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectsDeploymentsRead
     * @param project Project unique identifier expressed as UUID or name. (required)
     * @param namespace User or team name. (required)
     * @param deployment Deployment unique identifier expressed as UUID or name. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deployment retrieved. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Deployment not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectsDeploymentsReadCall(String project, String namespace, String deployment, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/{namespace}/projects/{project}/deployments/{deployment}/"
            .replace("{" + "project" + "}", localVarApiClient.escapeString(project.toString()))
            .replace("{" + "namespace" + "}", localVarApiClient.escapeString(namespace.toString()))
            .replace("{" + "deployment" + "}", localVarApiClient.escapeString(deployment.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectsDeploymentsReadValidateBeforeCall(String project, String namespace, String deployment, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'project' is set
        if (project == null) {
            throw new ApiException("Missing the required parameter 'project' when calling projectsDeploymentsRead(Async)");
        }

        // verify the required parameter 'namespace' is set
        if (namespace == null) {
            throw new ApiException("Missing the required parameter 'namespace' when calling projectsDeploymentsRead(Async)");
        }

        // verify the required parameter 'deployment' is set
        if (deployment == null) {
            throw new ApiException("Missing the required parameter 'deployment' when calling projectsDeploymentsRead(Async)");
        }

        return projectsDeploymentsReadCall(project, namespace, deployment, _callback);

    }

    /**
     * Retrieve a deployment
     * 
     * @param project Project unique identifier expressed as UUID or name. (required)
     * @param namespace User or team name. (required)
     * @param deployment Deployment unique identifier expressed as UUID or name. (required)
     * @return Deployment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deployment retrieved. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Deployment not found. </td><td>  -  </td></tr>
     </table>
     */
    public Deployment projectsDeploymentsRead(String project, String namespace, String deployment) throws ApiException {
        ApiResponse<Deployment> localVarResp = projectsDeploymentsReadWithHttpInfo(project, namespace, deployment);
        return localVarResp.getData();
    }

    /**
     * Retrieve a deployment
     * 
     * @param project Project unique identifier expressed as UUID or name. (required)
     * @param namespace User or team name. (required)
     * @param deployment Deployment unique identifier expressed as UUID or name. (required)
     * @return ApiResponse&lt;Deployment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deployment retrieved. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Deployment not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Deployment> projectsDeploymentsReadWithHttpInfo(String project, String namespace, String deployment) throws ApiException {
        okhttp3.Call localVarCall = projectsDeploymentsReadValidateBeforeCall(project, namespace, deployment, null);
        Type localVarReturnType = new TypeToken<Deployment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve a deployment (asynchronously)
     * 
     * @param project Project unique identifier expressed as UUID or name. (required)
     * @param namespace User or team name. (required)
     * @param deployment Deployment unique identifier expressed as UUID or name. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deployment retrieved. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Deployment not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectsDeploymentsReadAsync(String project, String namespace, String deployment, final ApiCallback<Deployment> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectsDeploymentsReadValidateBeforeCall(project, namespace, deployment, _callback);
        Type localVarReturnType = new TypeToken<Deployment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectsDeploymentsReplace
     * @param project Project unique identifier expressed as UUID or name. (required)
     * @param namespace User or team name. (required)
     * @param deployment Deployment unique identifier expressed as UUID or name. (required)
     * @param deploymentData  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deployment updated. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectsDeploymentsReplaceCall(String project, String namespace, String deployment, DeploymentData deploymentData, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deploymentData;

        // create path and map variables
        String localVarPath = "/v1/{namespace}/projects/{project}/deployments/{deployment}/"
            .replace("{" + "project" + "}", localVarApiClient.escapeString(project.toString()))
            .replace("{" + "namespace" + "}", localVarApiClient.escapeString(namespace.toString()))
            .replace("{" + "deployment" + "}", localVarApiClient.escapeString(deployment.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectsDeploymentsReplaceValidateBeforeCall(String project, String namespace, String deployment, DeploymentData deploymentData, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'project' is set
        if (project == null) {
            throw new ApiException("Missing the required parameter 'project' when calling projectsDeploymentsReplace(Async)");
        }

        // verify the required parameter 'namespace' is set
        if (namespace == null) {
            throw new ApiException("Missing the required parameter 'namespace' when calling projectsDeploymentsReplace(Async)");
        }

        // verify the required parameter 'deployment' is set
        if (deployment == null) {
            throw new ApiException("Missing the required parameter 'deployment' when calling projectsDeploymentsReplace(Async)");
        }

        return projectsDeploymentsReplaceCall(project, namespace, deployment, deploymentData, _callback);

    }

    /**
     * Replace a deployment
     * 
     * @param project Project unique identifier expressed as UUID or name. (required)
     * @param namespace User or team name. (required)
     * @param deployment Deployment unique identifier expressed as UUID or name. (required)
     * @param deploymentData  (optional)
     * @return Deployment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deployment updated. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied. </td><td>  -  </td></tr>
     </table>
     */
    public Deployment projectsDeploymentsReplace(String project, String namespace, String deployment, DeploymentData deploymentData) throws ApiException {
        ApiResponse<Deployment> localVarResp = projectsDeploymentsReplaceWithHttpInfo(project, namespace, deployment, deploymentData);
        return localVarResp.getData();
    }

    /**
     * Replace a deployment
     * 
     * @param project Project unique identifier expressed as UUID or name. (required)
     * @param namespace User or team name. (required)
     * @param deployment Deployment unique identifier expressed as UUID or name. (required)
     * @param deploymentData  (optional)
     * @return ApiResponse&lt;Deployment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deployment updated. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Deployment> projectsDeploymentsReplaceWithHttpInfo(String project, String namespace, String deployment, DeploymentData deploymentData) throws ApiException {
        okhttp3.Call localVarCall = projectsDeploymentsReplaceValidateBeforeCall(project, namespace, deployment, deploymentData, null);
        Type localVarReturnType = new TypeToken<Deployment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Replace a deployment (asynchronously)
     * 
     * @param project Project unique identifier expressed as UUID or name. (required)
     * @param namespace User or team name. (required)
     * @param deployment Deployment unique identifier expressed as UUID or name. (required)
     * @param deploymentData  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deployment updated. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectsDeploymentsReplaceAsync(String project, String namespace, String deployment, DeploymentData deploymentData, final ApiCallback<Deployment> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectsDeploymentsReplaceValidateBeforeCall(project, namespace, deployment, deploymentData, _callback);
        Type localVarReturnType = new TypeToken<Deployment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectsDeploymentsUpdate
     * @param project Project unique identifier expressed as UUID or name. (required)
     * @param namespace User or team name. (required)
     * @param deployment Deployment unique identifier expressed as UUID or name. (required)
     * @param deploymentData  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deployment updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Deployment not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectsDeploymentsUpdateCall(String project, String namespace, String deployment, DeploymentData deploymentData, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deploymentData;

        // create path and map variables
        String localVarPath = "/v1/{namespace}/projects/{project}/deployments/{deployment}/"
            .replace("{" + "project" + "}", localVarApiClient.escapeString(project.toString()))
            .replace("{" + "namespace" + "}", localVarApiClient.escapeString(namespace.toString()))
            .replace("{" + "deployment" + "}", localVarApiClient.escapeString(deployment.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectsDeploymentsUpdateValidateBeforeCall(String project, String namespace, String deployment, DeploymentData deploymentData, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'project' is set
        if (project == null) {
            throw new ApiException("Missing the required parameter 'project' when calling projectsDeploymentsUpdate(Async)");
        }

        // verify the required parameter 'namespace' is set
        if (namespace == null) {
            throw new ApiException("Missing the required parameter 'namespace' when calling projectsDeploymentsUpdate(Async)");
        }

        // verify the required parameter 'deployment' is set
        if (deployment == null) {
            throw new ApiException("Missing the required parameter 'deployment' when calling projectsDeploymentsUpdate(Async)");
        }

        return projectsDeploymentsUpdateCall(project, namespace, deployment, deploymentData, _callback);

    }

    /**
     * Update a deployment
     * 
     * @param project Project unique identifier expressed as UUID or name. (required)
     * @param namespace User or team name. (required)
     * @param deployment Deployment unique identifier expressed as UUID or name. (required)
     * @param deploymentData  (optional)
     * @return Deployment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deployment updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Deployment not found </td><td>  -  </td></tr>
     </table>
     */
    public Deployment projectsDeploymentsUpdate(String project, String namespace, String deployment, DeploymentData deploymentData) throws ApiException {
        ApiResponse<Deployment> localVarResp = projectsDeploymentsUpdateWithHttpInfo(project, namespace, deployment, deploymentData);
        return localVarResp.getData();
    }

    /**
     * Update a deployment
     * 
     * @param project Project unique identifier expressed as UUID or name. (required)
     * @param namespace User or team name. (required)
     * @param deployment Deployment unique identifier expressed as UUID or name. (required)
     * @param deploymentData  (optional)
     * @return ApiResponse&lt;Deployment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deployment updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Deployment not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Deployment> projectsDeploymentsUpdateWithHttpInfo(String project, String namespace, String deployment, DeploymentData deploymentData) throws ApiException {
        okhttp3.Call localVarCall = projectsDeploymentsUpdateValidateBeforeCall(project, namespace, deployment, deploymentData, null);
        Type localVarReturnType = new TypeToken<Deployment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a deployment (asynchronously)
     * 
     * @param project Project unique identifier expressed as UUID or name. (required)
     * @param namespace User or team name. (required)
     * @param deployment Deployment unique identifier expressed as UUID or name. (required)
     * @param deploymentData  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deployment updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Deployment not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectsDeploymentsUpdateAsync(String project, String namespace, String deployment, DeploymentData deploymentData, final ApiCallback<Deployment> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectsDeploymentsUpdateValidateBeforeCall(project, namespace, deployment, deploymentData, _callback);
        Type localVarReturnType = new TypeToken<Deployment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectsList
     * @param namespace User or team name. (required)
     * @param limit Limit when getting data. (optional)
     * @param offset Offset when getting data. (optional)
     * @param _private Private project or public project. (optional)
     * @param name Project name. (optional)
     * @param ordering Ordering when getting projects. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Project list. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectsListCall(String namespace, String limit, String offset, String _private, String name, String ordering, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/{namespace}/projects/"
            .replace("{" + "namespace" + "}", localVarApiClient.escapeString(namespace.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (_private != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("private", _private));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectsListValidateBeforeCall(String namespace, String limit, String offset, String _private, String name, String ordering, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'namespace' is set
        if (namespace == null) {
            throw new ApiException("Missing the required parameter 'namespace' when calling projectsList(Async)");
        }

        return projectsListCall(namespace, limit, offset, _private, name, ordering, _callback);

    }

    /**
     * Get available projects
     * 
     * @param namespace User or team name. (required)
     * @param limit Limit when getting data. (optional)
     * @param offset Offset when getting data. (optional)
     * @param _private Private project or public project. (optional)
     * @param name Project name. (optional)
     * @param ordering Ordering when getting projects. (optional)
     * @return List&lt;Project&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Project list. </td><td>  -  </td></tr>
     </table>
     */
    public List<Project> projectsList(String namespace, String limit, String offset, String _private, String name, String ordering) throws ApiException {
        ApiResponse<List<Project>> localVarResp = projectsListWithHttpInfo(namespace, limit, offset, _private, name, ordering);
        return localVarResp.getData();
    }

    /**
     * Get available projects
     * 
     * @param namespace User or team name. (required)
     * @param limit Limit when getting data. (optional)
     * @param offset Offset when getting data. (optional)
     * @param _private Private project or public project. (optional)
     * @param name Project name. (optional)
     * @param ordering Ordering when getting projects. (optional)
     * @return ApiResponse&lt;List&lt;Project&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Project list. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Project>> projectsListWithHttpInfo(String namespace, String limit, String offset, String _private, String name, String ordering) throws ApiException {
        okhttp3.Call localVarCall = projectsListValidateBeforeCall(namespace, limit, offset, _private, name, ordering, null);
        Type localVarReturnType = new TypeToken<List<Project>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get available projects (asynchronously)
     * 
     * @param namespace User or team name. (required)
     * @param limit Limit when getting data. (optional)
     * @param offset Offset when getting data. (optional)
     * @param _private Private project or public project. (optional)
     * @param name Project name. (optional)
     * @param ordering Ordering when getting projects. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Project list. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectsListAsync(String namespace, String limit, String offset, String _private, String name, String ordering, final ApiCallback<List<Project>> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectsListValidateBeforeCall(namespace, limit, offset, _private, name, ordering, _callback);
        Type localVarReturnType = new TypeToken<List<Project>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectsProjectFilesCreate
     * @param project Project unique identifier. (required)
     * @param namespace User or team name. (required)
     * @param _file File to send, to create new file. This parameter is only used with form data and may include multiple files. (optional)
     * @param base64Data Fila data, represented as base64. (optional)
     * @param name File name. May include path when creating file with base64 field. (optional)
     * @param path File path. Defaults to (/). (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> ProjectFile created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectsProjectFilesCreateCall(String project, String namespace, File _file, String base64Data, String name, String path, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/{namespace}/projects/{project}/project_files/"
            .replace("{" + "project" + "}", localVarApiClient.escapeString(project.toString()))
            .replace("{" + "namespace" + "}", localVarApiClient.escapeString(namespace.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (_file != null) {
            localVarFormParams.put("file", _file);
        }

        if (base64Data != null) {
            localVarFormParams.put("base64_data", base64Data);
        }

        if (name != null) {
            localVarFormParams.put("name", name);
        }

        if (path != null) {
            localVarFormParams.put("path", path);
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data",
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectsProjectFilesCreateValidateBeforeCall(String project, String namespace, File _file, String base64Data, String name, String path, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'project' is set
        if (project == null) {
            throw new ApiException("Missing the required parameter 'project' when calling projectsProjectFilesCreate(Async)");
        }

        // verify the required parameter 'namespace' is set
        if (namespace == null) {
            throw new ApiException("Missing the required parameter 'namespace' when calling projectsProjectFilesCreate(Async)");
        }

        return projectsProjectFilesCreateCall(project, namespace, _file, base64Data, name, path, _callback);

    }

    /**
     * Create project files
     * 
     * @param project Project unique identifier. (required)
     * @param namespace User or team name. (required)
     * @param _file File to send, to create new file. This parameter is only used with form data and may include multiple files. (optional)
     * @param base64Data Fila data, represented as base64. (optional)
     * @param name File name. May include path when creating file with base64 field. (optional)
     * @param path File path. Defaults to (/). (optional)
     * @return ProjectFile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> ProjectFile created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied </td><td>  -  </td></tr>
     </table>
     */
    public ProjectFile projectsProjectFilesCreate(String project, String namespace, File _file, String base64Data, String name, String path) throws ApiException {
        ApiResponse<ProjectFile> localVarResp = projectsProjectFilesCreateWithHttpInfo(project, namespace, _file, base64Data, name, path);
        return localVarResp.getData();
    }

    /**
     * Create project files
     * 
     * @param project Project unique identifier. (required)
     * @param namespace User or team name. (required)
     * @param _file File to send, to create new file. This parameter is only used with form data and may include multiple files. (optional)
     * @param base64Data Fila data, represented as base64. (optional)
     * @param name File name. May include path when creating file with base64 field. (optional)
     * @param path File path. Defaults to (/). (optional)
     * @return ApiResponse&lt;ProjectFile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> ProjectFile created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProjectFile> projectsProjectFilesCreateWithHttpInfo(String project, String namespace, File _file, String base64Data, String name, String path) throws ApiException {
        okhttp3.Call localVarCall = projectsProjectFilesCreateValidateBeforeCall(project, namespace, _file, base64Data, name, path, null);
        Type localVarReturnType = new TypeToken<ProjectFile>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create project files (asynchronously)
     * 
     * @param project Project unique identifier. (required)
     * @param namespace User or team name. (required)
     * @param _file File to send, to create new file. This parameter is only used with form data and may include multiple files. (optional)
     * @param base64Data Fila data, represented as base64. (optional)
     * @param name File name. May include path when creating file with base64 field. (optional)
     * @param path File path. Defaults to (/). (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> ProjectFile created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectsProjectFilesCreateAsync(String project, String namespace, File _file, String base64Data, String name, String path, final ApiCallback<ProjectFile> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectsProjectFilesCreateValidateBeforeCall(project, namespace, _file, base64Data, name, path, _callback);
        Type localVarReturnType = new TypeToken<ProjectFile>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectsProjectFilesDelete
     * @param project Project unique identifer. (required)
     * @param namespace User or team name. (required)
     * @param id File unique identifier. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> ProjectFile deleted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ProjectFile not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectsProjectFilesDeleteCall(String project, String namespace, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/{namespace}/projects/{project}/project_files/{id}/"
            .replace("{" + "project" + "}", localVarApiClient.escapeString(project.toString()))
            .replace("{" + "namespace" + "}", localVarApiClient.escapeString(namespace.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectsProjectFilesDeleteValidateBeforeCall(String project, String namespace, String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'project' is set
        if (project == null) {
            throw new ApiException("Missing the required parameter 'project' when calling projectsProjectFilesDelete(Async)");
        }

        // verify the required parameter 'namespace' is set
        if (namespace == null) {
            throw new ApiException("Missing the required parameter 'namespace' when calling projectsProjectFilesDelete(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling projectsProjectFilesDelete(Async)");
        }

        return projectsProjectFilesDeleteCall(project, namespace, id, _callback);

    }

    /**
     * Delete a project file
     * 
     * @param project Project unique identifer. (required)
     * @param namespace User or team name. (required)
     * @param id File unique identifier. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> ProjectFile deleted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ProjectFile not found </td><td>  -  </td></tr>
     </table>
     */
    public void projectsProjectFilesDelete(String project, String namespace, String id) throws ApiException {
        projectsProjectFilesDeleteWithHttpInfo(project, namespace, id);
    }

    /**
     * Delete a project file
     * 
     * @param project Project unique identifer. (required)
     * @param namespace User or team name. (required)
     * @param id File unique identifier. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> ProjectFile deleted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ProjectFile not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> projectsProjectFilesDeleteWithHttpInfo(String project, String namespace, String id) throws ApiException {
        okhttp3.Call localVarCall = projectsProjectFilesDeleteValidateBeforeCall(project, namespace, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a project file (asynchronously)
     * 
     * @param project Project unique identifer. (required)
     * @param namespace User or team name. (required)
     * @param id File unique identifier. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> ProjectFile deleted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ProjectFile not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectsProjectFilesDeleteAsync(String project, String namespace, String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectsProjectFilesDeleteValidateBeforeCall(project, namespace, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectsProjectFilesList
     * @param project Unique identifier for project file expressed as UUID or name. (required)
     * @param namespace User or team name. (required)
     * @param limit Limit when getting project file list. (optional)
     * @param offset Offset when getting project file list. (optional)
     * @param ordering Ordering of list values when getting project file list. (optional)
     * @param filename Exact file name, relative to the project root. If no such file is found, an empty list will be returned. (optional)
     * @param content Determines whether or not content is returned as base64. Defaults to false. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ProjectFile list </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectsProjectFilesListCall(String project, String namespace, String limit, String offset, String ordering, String filename, String content, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/{namespace}/projects/{project}/project_files/"
            .replace("{" + "project" + "}", localVarApiClient.escapeString(project.toString()))
            .replace("{" + "namespace" + "}", localVarApiClient.escapeString(namespace.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }

        if (filename != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filename", filename));
        }

        if (content != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("content", content));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectsProjectFilesListValidateBeforeCall(String project, String namespace, String limit, String offset, String ordering, String filename, String content, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'project' is set
        if (project == null) {
            throw new ApiException("Missing the required parameter 'project' when calling projectsProjectFilesList(Async)");
        }

        // verify the required parameter 'namespace' is set
        if (namespace == null) {
            throw new ApiException("Missing the required parameter 'namespace' when calling projectsProjectFilesList(Async)");
        }

        return projectsProjectFilesListCall(project, namespace, limit, offset, ordering, filename, content, _callback);

    }

    /**
     * Get project files
     * 
     * @param project Unique identifier for project file expressed as UUID or name. (required)
     * @param namespace User or team name. (required)
     * @param limit Limit when getting project file list. (optional)
     * @param offset Offset when getting project file list. (optional)
     * @param ordering Ordering of list values when getting project file list. (optional)
     * @param filename Exact file name, relative to the project root. If no such file is found, an empty list will be returned. (optional)
     * @param content Determines whether or not content is returned as base64. Defaults to false. (optional)
     * @return List&lt;ProjectFile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ProjectFile list </td><td>  -  </td></tr>
     </table>
     */
    public List<ProjectFile> projectsProjectFilesList(String project, String namespace, String limit, String offset, String ordering, String filename, String content) throws ApiException {
        ApiResponse<List<ProjectFile>> localVarResp = projectsProjectFilesListWithHttpInfo(project, namespace, limit, offset, ordering, filename, content);
        return localVarResp.getData();
    }

    /**
     * Get project files
     * 
     * @param project Unique identifier for project file expressed as UUID or name. (required)
     * @param namespace User or team name. (required)
     * @param limit Limit when getting project file list. (optional)
     * @param offset Offset when getting project file list. (optional)
     * @param ordering Ordering of list values when getting project file list. (optional)
     * @param filename Exact file name, relative to the project root. If no such file is found, an empty list will be returned. (optional)
     * @param content Determines whether or not content is returned as base64. Defaults to false. (optional)
     * @return ApiResponse&lt;List&lt;ProjectFile&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ProjectFile list </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ProjectFile>> projectsProjectFilesListWithHttpInfo(String project, String namespace, String limit, String offset, String ordering, String filename, String content) throws ApiException {
        okhttp3.Call localVarCall = projectsProjectFilesListValidateBeforeCall(project, namespace, limit, offset, ordering, filename, content, null);
        Type localVarReturnType = new TypeToken<List<ProjectFile>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get project files (asynchronously)
     * 
     * @param project Unique identifier for project file expressed as UUID or name. (required)
     * @param namespace User or team name. (required)
     * @param limit Limit when getting project file list. (optional)
     * @param offset Offset when getting project file list. (optional)
     * @param ordering Ordering of list values when getting project file list. (optional)
     * @param filename Exact file name, relative to the project root. If no such file is found, an empty list will be returned. (optional)
     * @param content Determines whether or not content is returned as base64. Defaults to false. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ProjectFile list </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectsProjectFilesListAsync(String project, String namespace, String limit, String offset, String ordering, String filename, String content, final ApiCallback<List<ProjectFile>> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectsProjectFilesListValidateBeforeCall(project, namespace, limit, offset, ordering, filename, content, _callback);
        Type localVarReturnType = new TypeToken<List<ProjectFile>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectsProjectFilesRead
     * @param project Project unique identifer. (required)
     * @param namespace User or team name. (required)
     * @param id File unique identifier. (required)
     * @param content Determines whether or not content is returned as base64. Defaults to false. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ProjectFile retrieved </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ProjectFile not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectsProjectFilesReadCall(String project, String namespace, String id, String content, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/{namespace}/projects/{project}/project_files/{id}/"
            .replace("{" + "project" + "}", localVarApiClient.escapeString(project.toString()))
            .replace("{" + "namespace" + "}", localVarApiClient.escapeString(namespace.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (content != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("content", content));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectsProjectFilesReadValidateBeforeCall(String project, String namespace, String id, String content, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'project' is set
        if (project == null) {
            throw new ApiException("Missing the required parameter 'project' when calling projectsProjectFilesRead(Async)");
        }

        // verify the required parameter 'namespace' is set
        if (namespace == null) {
            throw new ApiException("Missing the required parameter 'namespace' when calling projectsProjectFilesRead(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling projectsProjectFilesRead(Async)");
        }

        return projectsProjectFilesReadCall(project, namespace, id, content, _callback);

    }

    /**
     * Get a project file
     * 
     * @param project Project unique identifer. (required)
     * @param namespace User or team name. (required)
     * @param id File unique identifier. (required)
     * @param content Determines whether or not content is returned as base64. Defaults to false. (optional)
     * @return ProjectFile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ProjectFile retrieved </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ProjectFile not found </td><td>  -  </td></tr>
     </table>
     */
    public ProjectFile projectsProjectFilesRead(String project, String namespace, String id, String content) throws ApiException {
        ApiResponse<ProjectFile> localVarResp = projectsProjectFilesReadWithHttpInfo(project, namespace, id, content);
        return localVarResp.getData();
    }

    /**
     * Get a project file
     * 
     * @param project Project unique identifer. (required)
     * @param namespace User or team name. (required)
     * @param id File unique identifier. (required)
     * @param content Determines whether or not content is returned as base64. Defaults to false. (optional)
     * @return ApiResponse&lt;ProjectFile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ProjectFile retrieved </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ProjectFile not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProjectFile> projectsProjectFilesReadWithHttpInfo(String project, String namespace, String id, String content) throws ApiException {
        okhttp3.Call localVarCall = projectsProjectFilesReadValidateBeforeCall(project, namespace, id, content, null);
        Type localVarReturnType = new TypeToken<ProjectFile>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a project file (asynchronously)
     * 
     * @param project Project unique identifer. (required)
     * @param namespace User or team name. (required)
     * @param id File unique identifier. (required)
     * @param content Determines whether or not content is returned as base64. Defaults to false. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ProjectFile retrieved </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ProjectFile not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectsProjectFilesReadAsync(String project, String namespace, String id, String content, final ApiCallback<ProjectFile> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectsProjectFilesReadValidateBeforeCall(project, namespace, id, content, _callback);
        Type localVarReturnType = new TypeToken<ProjectFile>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectsProjectFilesReplace
     * @param project Project unique identifer. (required)
     * @param namespace User or team name. (required)
     * @param id File unique identifier. (required)
     * @param _file File to send, to create new file. This parameter is only used with form data and may include multiple files. (optional)
     * @param base64Data Fila data, represented as base64. (optional)
     * @param name File name. May include path when creating file with base64 field. (optional)
     * @param path File path. Defaults to (/). (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ProjectFile updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectsProjectFilesReplaceCall(String project, String namespace, String id, File _file, String base64Data, String name, String path, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/{namespace}/projects/{project}/project_files/{id}/"
            .replace("{" + "project" + "}", localVarApiClient.escapeString(project.toString()))
            .replace("{" + "namespace" + "}", localVarApiClient.escapeString(namespace.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (_file != null) {
            localVarFormParams.put("file", _file);
        }

        if (base64Data != null) {
            localVarFormParams.put("base64_data", base64Data);
        }

        if (name != null) {
            localVarFormParams.put("name", name);
        }

        if (path != null) {
            localVarFormParams.put("path", path);
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectsProjectFilesReplaceValidateBeforeCall(String project, String namespace, String id, File _file, String base64Data, String name, String path, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'project' is set
        if (project == null) {
            throw new ApiException("Missing the required parameter 'project' when calling projectsProjectFilesReplace(Async)");
        }

        // verify the required parameter 'namespace' is set
        if (namespace == null) {
            throw new ApiException("Missing the required parameter 'namespace' when calling projectsProjectFilesReplace(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling projectsProjectFilesReplace(Async)");
        }

        return projectsProjectFilesReplaceCall(project, namespace, id, _file, base64Data, name, path, _callback);

    }

    /**
     * Replace a project file
     * 
     * @param project Project unique identifer. (required)
     * @param namespace User or team name. (required)
     * @param id File unique identifier. (required)
     * @param _file File to send, to create new file. This parameter is only used with form data and may include multiple files. (optional)
     * @param base64Data Fila data, represented as base64. (optional)
     * @param name File name. May include path when creating file with base64 field. (optional)
     * @param path File path. Defaults to (/). (optional)
     * @return ProjectFile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ProjectFile updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied. </td><td>  -  </td></tr>
     </table>
     */
    public ProjectFile projectsProjectFilesReplace(String project, String namespace, String id, File _file, String base64Data, String name, String path) throws ApiException {
        ApiResponse<ProjectFile> localVarResp = projectsProjectFilesReplaceWithHttpInfo(project, namespace, id, _file, base64Data, name, path);
        return localVarResp.getData();
    }

    /**
     * Replace a project file
     * 
     * @param project Project unique identifer. (required)
     * @param namespace User or team name. (required)
     * @param id File unique identifier. (required)
     * @param _file File to send, to create new file. This parameter is only used with form data and may include multiple files. (optional)
     * @param base64Data Fila data, represented as base64. (optional)
     * @param name File name. May include path when creating file with base64 field. (optional)
     * @param path File path. Defaults to (/). (optional)
     * @return ApiResponse&lt;ProjectFile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ProjectFile updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProjectFile> projectsProjectFilesReplaceWithHttpInfo(String project, String namespace, String id, File _file, String base64Data, String name, String path) throws ApiException {
        okhttp3.Call localVarCall = projectsProjectFilesReplaceValidateBeforeCall(project, namespace, id, _file, base64Data, name, path, null);
        Type localVarReturnType = new TypeToken<ProjectFile>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Replace a project file (asynchronously)
     * 
     * @param project Project unique identifer. (required)
     * @param namespace User or team name. (required)
     * @param id File unique identifier. (required)
     * @param _file File to send, to create new file. This parameter is only used with form data and may include multiple files. (optional)
     * @param base64Data Fila data, represented as base64. (optional)
     * @param name File name. May include path when creating file with base64 field. (optional)
     * @param path File path. Defaults to (/). (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ProjectFile updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectsProjectFilesReplaceAsync(String project, String namespace, String id, File _file, String base64Data, String name, String path, final ApiCallback<ProjectFile> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectsProjectFilesReplaceValidateBeforeCall(project, namespace, id, _file, base64Data, name, path, _callback);
        Type localVarReturnType = new TypeToken<ProjectFile>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectsProjectFilesUpdate
     * @param project Project unique identifer. (required)
     * @param namespace User or team name. (required)
     * @param id File unique identifier. (required)
     * @param _file File to send, to create new file. This parameter is only used with form data and may include multiple files. (optional)
     * @param base64Data Fila data, represented as base64. (optional)
     * @param name File name. May include path when creating file with base64 field. (optional)
     * @param path File path. Defaults to (/). (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ProjectFile updated. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ProjectFile not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectsProjectFilesUpdateCall(String project, String namespace, String id, File _file, String base64Data, String name, String path, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/{namespace}/projects/{project}/project_files/{id}/"
            .replace("{" + "project" + "}", localVarApiClient.escapeString(project.toString()))
            .replace("{" + "namespace" + "}", localVarApiClient.escapeString(namespace.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (_file != null) {
            localVarFormParams.put("file", _file);
        }

        if (base64Data != null) {
            localVarFormParams.put("base64_data", base64Data);
        }

        if (name != null) {
            localVarFormParams.put("name", name);
        }

        if (path != null) {
            localVarFormParams.put("path", path);
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectsProjectFilesUpdateValidateBeforeCall(String project, String namespace, String id, File _file, String base64Data, String name, String path, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'project' is set
        if (project == null) {
            throw new ApiException("Missing the required parameter 'project' when calling projectsProjectFilesUpdate(Async)");
        }

        // verify the required parameter 'namespace' is set
        if (namespace == null) {
            throw new ApiException("Missing the required parameter 'namespace' when calling projectsProjectFilesUpdate(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling projectsProjectFilesUpdate(Async)");
        }

        return projectsProjectFilesUpdateCall(project, namespace, id, _file, base64Data, name, path, _callback);

    }

    /**
     * Update a project file
     * 
     * @param project Project unique identifer. (required)
     * @param namespace User or team name. (required)
     * @param id File unique identifier. (required)
     * @param _file File to send, to create new file. This parameter is only used with form data and may include multiple files. (optional)
     * @param base64Data Fila data, represented as base64. (optional)
     * @param name File name. May include path when creating file with base64 field. (optional)
     * @param path File path. Defaults to (/). (optional)
     * @return ProjectFile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ProjectFile updated. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ProjectFile not found. </td><td>  -  </td></tr>
     </table>
     */
    public ProjectFile projectsProjectFilesUpdate(String project, String namespace, String id, File _file, String base64Data, String name, String path) throws ApiException {
        ApiResponse<ProjectFile> localVarResp = projectsProjectFilesUpdateWithHttpInfo(project, namespace, id, _file, base64Data, name, path);
        return localVarResp.getData();
    }

    /**
     * Update a project file
     * 
     * @param project Project unique identifer. (required)
     * @param namespace User or team name. (required)
     * @param id File unique identifier. (required)
     * @param _file File to send, to create new file. This parameter is only used with form data and may include multiple files. (optional)
     * @param base64Data Fila data, represented as base64. (optional)
     * @param name File name. May include path when creating file with base64 field. (optional)
     * @param path File path. Defaults to (/). (optional)
     * @return ApiResponse&lt;ProjectFile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ProjectFile updated. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ProjectFile not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProjectFile> projectsProjectFilesUpdateWithHttpInfo(String project, String namespace, String id, File _file, String base64Data, String name, String path) throws ApiException {
        okhttp3.Call localVarCall = projectsProjectFilesUpdateValidateBeforeCall(project, namespace, id, _file, base64Data, name, path, null);
        Type localVarReturnType = new TypeToken<ProjectFile>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a project file (asynchronously)
     * 
     * @param project Project unique identifer. (required)
     * @param namespace User or team name. (required)
     * @param id File unique identifier. (required)
     * @param _file File to send, to create new file. This parameter is only used with form data and may include multiple files. (optional)
     * @param base64Data Fila data, represented as base64. (optional)
     * @param name File name. May include path when creating file with base64 field. (optional)
     * @param path File path. Defaults to (/). (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ProjectFile updated. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ProjectFile not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectsProjectFilesUpdateAsync(String project, String namespace, String id, File _file, String base64Data, String name, String path, final ApiCallback<ProjectFile> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectsProjectFilesUpdateValidateBeforeCall(project, namespace, id, _file, base64Data, name, path, _callback);
        Type localVarReturnType = new TypeToken<ProjectFile>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectsRead
     * @param namespace User or team name. (required)
     * @param project Project unique identifier expressed as UUID or name. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Project retrieved. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Project not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectsReadCall(String namespace, String project, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/{namespace}/projects/{project}/"
            .replace("{" + "namespace" + "}", localVarApiClient.escapeString(namespace.toString()))
            .replace("{" + "project" + "}", localVarApiClient.escapeString(project.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectsReadValidateBeforeCall(String namespace, String project, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'namespace' is set
        if (namespace == null) {
            throw new ApiException("Missing the required parameter 'namespace' when calling projectsRead(Async)");
        }

        // verify the required parameter 'project' is set
        if (project == null) {
            throw new ApiException("Missing the required parameter 'project' when calling projectsRead(Async)");
        }

        return projectsReadCall(namespace, project, _callback);

    }

    /**
     * Get a project
     * 
     * @param namespace User or team name. (required)
     * @param project Project unique identifier expressed as UUID or name. (required)
     * @return Project
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Project retrieved. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Project not found. </td><td>  -  </td></tr>
     </table>
     */
    public Project projectsRead(String namespace, String project) throws ApiException {
        ApiResponse<Project> localVarResp = projectsReadWithHttpInfo(namespace, project);
        return localVarResp.getData();
    }

    /**
     * Get a project
     * 
     * @param namespace User or team name. (required)
     * @param project Project unique identifier expressed as UUID or name. (required)
     * @return ApiResponse&lt;Project&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Project retrieved. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Project not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Project> projectsReadWithHttpInfo(String namespace, String project) throws ApiException {
        okhttp3.Call localVarCall = projectsReadValidateBeforeCall(namespace, project, null);
        Type localVarReturnType = new TypeToken<Project>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a project (asynchronously)
     * 
     * @param namespace User or team name. (required)
     * @param project Project unique identifier expressed as UUID or name. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Project retrieved. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Project not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectsReadAsync(String namespace, String project, final ApiCallback<Project> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectsReadValidateBeforeCall(namespace, project, _callback);
        Type localVarReturnType = new TypeToken<Project>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectsReplace
     * @param namespace User or team namespace. (required)
     * @param project Project unique identifier expressed as UUID or name. (required)
     * @param projectData  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Project updated. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectsReplaceCall(String namespace, String project, ProjectData projectData, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = projectData;

        // create path and map variables
        String localVarPath = "/v1/{namespace}/projects/{project}/"
            .replace("{" + "namespace" + "}", localVarApiClient.escapeString(namespace.toString()))
            .replace("{" + "project" + "}", localVarApiClient.escapeString(project.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectsReplaceValidateBeforeCall(String namespace, String project, ProjectData projectData, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'namespace' is set
        if (namespace == null) {
            throw new ApiException("Missing the required parameter 'namespace' when calling projectsReplace(Async)");
        }

        // verify the required parameter 'project' is set
        if (project == null) {
            throw new ApiException("Missing the required parameter 'project' when calling projectsReplace(Async)");
        }

        return projectsReplaceCall(namespace, project, projectData, _callback);

    }

    /**
     * Replace a project
     * 
     * @param namespace User or team namespace. (required)
     * @param project Project unique identifier expressed as UUID or name. (required)
     * @param projectData  (optional)
     * @return Project
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Project updated. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied. </td><td>  -  </td></tr>
     </table>
     */
    public Project projectsReplace(String namespace, String project, ProjectData projectData) throws ApiException {
        ApiResponse<Project> localVarResp = projectsReplaceWithHttpInfo(namespace, project, projectData);
        return localVarResp.getData();
    }

    /**
     * Replace a project
     * 
     * @param namespace User or team namespace. (required)
     * @param project Project unique identifier expressed as UUID or name. (required)
     * @param projectData  (optional)
     * @return ApiResponse&lt;Project&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Project updated. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Project> projectsReplaceWithHttpInfo(String namespace, String project, ProjectData projectData) throws ApiException {
        okhttp3.Call localVarCall = projectsReplaceValidateBeforeCall(namespace, project, projectData, null);
        Type localVarReturnType = new TypeToken<Project>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Replace a project (asynchronously)
     * 
     * @param namespace User or team namespace. (required)
     * @param project Project unique identifier expressed as UUID or name. (required)
     * @param projectData  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Project updated. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectsReplaceAsync(String namespace, String project, ProjectData projectData, final ApiCallback<Project> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectsReplaceValidateBeforeCall(namespace, project, projectData, _callback);
        Type localVarReturnType = new TypeToken<Project>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectsServersApiKey
     * @param project Project unique identifier expressed as UUID or name. (required)
     * @param namespace User or team name. (required)
     * @param server Server unique identifier expressed as UUID or name. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Server API key </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectsServersApiKeyCall(String project, String namespace, String server, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/{namespace}/projects/{project}/servers/{server}/api-key/"
            .replace("{" + "project" + "}", localVarApiClient.escapeString(project.toString()))
            .replace("{" + "namespace" + "}", localVarApiClient.escapeString(namespace.toString()))
            .replace("{" + "server" + "}", localVarApiClient.escapeString(server.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectsServersApiKeyValidateBeforeCall(String project, String namespace, String server, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'project' is set
        if (project == null) {
            throw new ApiException("Missing the required parameter 'project' when calling projectsServersApiKey(Async)");
        }

        // verify the required parameter 'namespace' is set
        if (namespace == null) {
            throw new ApiException("Missing the required parameter 'namespace' when calling projectsServersApiKey(Async)");
        }

        // verify the required parameter 'server' is set
        if (server == null) {
            throw new ApiException("Missing the required parameter 'server' when calling projectsServersApiKey(Async)");
        }

        return projectsServersApiKeyCall(project, namespace, server, _callback);

    }

    /**
     * Get server API key
     * 
     * @param project Project unique identifier expressed as UUID or name. (required)
     * @param namespace User or team name. (required)
     * @param server Server unique identifier expressed as UUID or name. (required)
     * @return JWT
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Server API key </td><td>  -  </td></tr>
     </table>
     */
    public JWT projectsServersApiKey(String project, String namespace, String server) throws ApiException {
        ApiResponse<JWT> localVarResp = projectsServersApiKeyWithHttpInfo(project, namespace, server);
        return localVarResp.getData();
    }

    /**
     * Get server API key
     * 
     * @param project Project unique identifier expressed as UUID or name. (required)
     * @param namespace User or team name. (required)
     * @param server Server unique identifier expressed as UUID or name. (required)
     * @return ApiResponse&lt;JWT&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Server API key </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JWT> projectsServersApiKeyWithHttpInfo(String project, String namespace, String server) throws ApiException {
        okhttp3.Call localVarCall = projectsServersApiKeyValidateBeforeCall(project, namespace, server, null);
        Type localVarReturnType = new TypeToken<JWT>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get server API key (asynchronously)
     * 
     * @param project Project unique identifier expressed as UUID or name. (required)
     * @param namespace User or team name. (required)
     * @param server Server unique identifier expressed as UUID or name. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Server API key </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectsServersApiKeyAsync(String project, String namespace, String server, final ApiCallback<JWT> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectsServersApiKeyValidateBeforeCall(project, namespace, server, _callback);
        Type localVarReturnType = new TypeToken<JWT>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectsServersAuth
     * @param project Project unique identifier expressed as UUID or name. (required)
     * @param namespace User or team name. (required)
     * @param server Server unique identifier expressed as UUID or name. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Api key verified </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid api key. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectsServersAuthCall(String project, String namespace, String server, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/{namespace}/projects/{project}/servers/{server}/auth/"
            .replace("{" + "project" + "}", localVarApiClient.escapeString(project.toString()))
            .replace("{" + "namespace" + "}", localVarApiClient.escapeString(namespace.toString()))
            .replace("{" + "server" + "}", localVarApiClient.escapeString(server.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectsServersAuthValidateBeforeCall(String project, String namespace, String server, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'project' is set
        if (project == null) {
            throw new ApiException("Missing the required parameter 'project' when calling projectsServersAuth(Async)");
        }

        // verify the required parameter 'namespace' is set
        if (namespace == null) {
            throw new ApiException("Missing the required parameter 'namespace' when calling projectsServersAuth(Async)");
        }

        // verify the required parameter 'server' is set
        if (server == null) {
            throw new ApiException("Missing the required parameter 'server' when calling projectsServersAuth(Async)");
        }

        return projectsServersAuthCall(project, namespace, server, _callback);

    }

    /**
     * Server api key validation
     * 
     * @param project Project unique identifier expressed as UUID or name. (required)
     * @param namespace User or team name. (required)
     * @param server Server unique identifier expressed as UUID or name. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Api key verified </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid api key. </td><td>  -  </td></tr>
     </table>
     */
    public void projectsServersAuth(String project, String namespace, String server) throws ApiException {
        projectsServersAuthWithHttpInfo(project, namespace, server);
    }

    /**
     * Server api key validation
     * 
     * @param project Project unique identifier expressed as UUID or name. (required)
     * @param namespace User or team name. (required)
     * @param server Server unique identifier expressed as UUID or name. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Api key verified </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid api key. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> projectsServersAuthWithHttpInfo(String project, String namespace, String server) throws ApiException {
        okhttp3.Call localVarCall = projectsServersAuthValidateBeforeCall(project, namespace, server, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Server api key validation (asynchronously)
     * 
     * @param project Project unique identifier expressed as UUID or name. (required)
     * @param namespace User or team name. (required)
     * @param server Server unique identifier expressed as UUID or name. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Api key verified </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid api key. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectsServersAuthAsync(String project, String namespace, String server, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectsServersAuthValidateBeforeCall(project, namespace, server, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectsServersCreate
     * @param project Project unique identifer expressed as UUID or name. (required)
     * @param namespace User or team name. (required)
     * @param serverData  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Server created. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectsServersCreateCall(String project, String namespace, ServerData serverData, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = serverData;

        // create path and map variables
        String localVarPath = "/v1/{namespace}/projects/{project}/servers/"
            .replace("{" + "project" + "}", localVarApiClient.escapeString(project.toString()))
            .replace("{" + "namespace" + "}", localVarApiClient.escapeString(namespace.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectsServersCreateValidateBeforeCall(String project, String namespace, ServerData serverData, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'project' is set
        if (project == null) {
            throw new ApiException("Missing the required parameter 'project' when calling projectsServersCreate(Async)");
        }

        // verify the required parameter 'namespace' is set
        if (namespace == null) {
            throw new ApiException("Missing the required parameter 'namespace' when calling projectsServersCreate(Async)");
        }

        return projectsServersCreateCall(project, namespace, serverData, _callback);

    }

    /**
     * Create a new server
     * 
     * @param project Project unique identifer expressed as UUID or name. (required)
     * @param namespace User or team name. (required)
     * @param serverData  (optional)
     * @return Server
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Server created. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied. </td><td>  -  </td></tr>
     </table>
     */
    public Server projectsServersCreate(String project, String namespace, ServerData serverData) throws ApiException {
        ApiResponse<Server> localVarResp = projectsServersCreateWithHttpInfo(project, namespace, serverData);
        return localVarResp.getData();
    }

    /**
     * Create a new server
     * 
     * @param project Project unique identifer expressed as UUID or name. (required)
     * @param namespace User or team name. (required)
     * @param serverData  (optional)
     * @return ApiResponse&lt;Server&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Server created. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Server> projectsServersCreateWithHttpInfo(String project, String namespace, ServerData serverData) throws ApiException {
        okhttp3.Call localVarCall = projectsServersCreateValidateBeforeCall(project, namespace, serverData, null);
        Type localVarReturnType = new TypeToken<Server>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a new server (asynchronously)
     * 
     * @param project Project unique identifer expressed as UUID or name. (required)
     * @param namespace User or team name. (required)
     * @param serverData  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Server created. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectsServersCreateAsync(String project, String namespace, ServerData serverData, final ApiCallback<Server> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectsServersCreateValidateBeforeCall(project, namespace, serverData, _callback);
        Type localVarReturnType = new TypeToken<Server>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectsServersDelete
     * @param project Project unique identifier. (required)
     * @param namespace User or team name. (required)
     * @param server User unique identifier. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Server deleted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Server not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectsServersDeleteCall(String project, String namespace, String server, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/{namespace}/projects/{project}/servers/{server}/"
            .replace("{" + "project" + "}", localVarApiClient.escapeString(project.toString()))
            .replace("{" + "namespace" + "}", localVarApiClient.escapeString(namespace.toString()))
            .replace("{" + "server" + "}", localVarApiClient.escapeString(server.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectsServersDeleteValidateBeforeCall(String project, String namespace, String server, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'project' is set
        if (project == null) {
            throw new ApiException("Missing the required parameter 'project' when calling projectsServersDelete(Async)");
        }

        // verify the required parameter 'namespace' is set
        if (namespace == null) {
            throw new ApiException("Missing the required parameter 'namespace' when calling projectsServersDelete(Async)");
        }

        // verify the required parameter 'server' is set
        if (server == null) {
            throw new ApiException("Missing the required parameter 'server' when calling projectsServersDelete(Async)");
        }

        return projectsServersDeleteCall(project, namespace, server, _callback);

    }

    /**
     * Delete a server
     * 
     * @param project Project unique identifier. (required)
     * @param namespace User or team name. (required)
     * @param server User unique identifier. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Server deleted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Server not found </td><td>  -  </td></tr>
     </table>
     */
    public void projectsServersDelete(String project, String namespace, String server) throws ApiException {
        projectsServersDeleteWithHttpInfo(project, namespace, server);
    }

    /**
     * Delete a server
     * 
     * @param project Project unique identifier. (required)
     * @param namespace User or team name. (required)
     * @param server User unique identifier. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Server deleted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Server not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> projectsServersDeleteWithHttpInfo(String project, String namespace, String server) throws ApiException {
        okhttp3.Call localVarCall = projectsServersDeleteValidateBeforeCall(project, namespace, server, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a server (asynchronously)
     * 
     * @param project Project unique identifier. (required)
     * @param namespace User or team name. (required)
     * @param server User unique identifier. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Server deleted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Server not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectsServersDeleteAsync(String project, String namespace, String server, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectsServersDeleteValidateBeforeCall(project, namespace, server, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectsServersList
     * @param project Project unique identifier expressed as UUID or name. (required)
     * @param namespace User or team name. (required)
     * @param limit Limit results when getting server list. (optional)
     * @param offset Offset results when getting server list. (optional)
     * @param name Server name. (optional)
     * @param ordering Ordering option when getting server list. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Server list. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectsServersListCall(String project, String namespace, String limit, String offset, String name, String ordering, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/{namespace}/projects/{project}/servers/"
            .replace("{" + "project" + "}", localVarApiClient.escapeString(project.toString()))
            .replace("{" + "namespace" + "}", localVarApiClient.escapeString(namespace.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectsServersListValidateBeforeCall(String project, String namespace, String limit, String offset, String name, String ordering, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'project' is set
        if (project == null) {
            throw new ApiException("Missing the required parameter 'project' when calling projectsServersList(Async)");
        }

        // verify the required parameter 'namespace' is set
        if (namespace == null) {
            throw new ApiException("Missing the required parameter 'namespace' when calling projectsServersList(Async)");
        }

        return projectsServersListCall(project, namespace, limit, offset, name, ordering, _callback);

    }

    /**
     * Retrieve servers
     * 
     * @param project Project unique identifier expressed as UUID or name. (required)
     * @param namespace User or team name. (required)
     * @param limit Limit results when getting server list. (optional)
     * @param offset Offset results when getting server list. (optional)
     * @param name Server name. (optional)
     * @param ordering Ordering option when getting server list. (optional)
     * @return List&lt;Server&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Server list. </td><td>  -  </td></tr>
     </table>
     */
    public List<Server> projectsServersList(String project, String namespace, String limit, String offset, String name, String ordering) throws ApiException {
        ApiResponse<List<Server>> localVarResp = projectsServersListWithHttpInfo(project, namespace, limit, offset, name, ordering);
        return localVarResp.getData();
    }

    /**
     * Retrieve servers
     * 
     * @param project Project unique identifier expressed as UUID or name. (required)
     * @param namespace User or team name. (required)
     * @param limit Limit results when getting server list. (optional)
     * @param offset Offset results when getting server list. (optional)
     * @param name Server name. (optional)
     * @param ordering Ordering option when getting server list. (optional)
     * @return ApiResponse&lt;List&lt;Server&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Server list. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Server>> projectsServersListWithHttpInfo(String project, String namespace, String limit, String offset, String name, String ordering) throws ApiException {
        okhttp3.Call localVarCall = projectsServersListValidateBeforeCall(project, namespace, limit, offset, name, ordering, null);
        Type localVarReturnType = new TypeToken<List<Server>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve servers (asynchronously)
     * 
     * @param project Project unique identifier expressed as UUID or name. (required)
     * @param namespace User or team name. (required)
     * @param limit Limit results when getting server list. (optional)
     * @param offset Offset results when getting server list. (optional)
     * @param name Server name. (optional)
     * @param ordering Ordering option when getting server list. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Server list. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectsServersListAsync(String project, String namespace, String limit, String offset, String name, String ordering, final ApiCallback<List<Server>> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectsServersListValidateBeforeCall(project, namespace, limit, offset, name, ordering, _callback);
        Type localVarReturnType = new TypeToken<List<Server>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectsServersRead
     * @param project Project unique identifier expressed as UUID or name. (required)
     * @param namespace User or team name. (required)
     * @param server Server unique identifier expressed as UUID or name. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Server retrieved. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Server not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectsServersReadCall(String project, String namespace, String server, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/{namespace}/projects/{project}/servers/{server}/"
            .replace("{" + "project" + "}", localVarApiClient.escapeString(project.toString()))
            .replace("{" + "namespace" + "}", localVarApiClient.escapeString(namespace.toString()))
            .replace("{" + "server" + "}", localVarApiClient.escapeString(server.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectsServersReadValidateBeforeCall(String project, String namespace, String server, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'project' is set
        if (project == null) {
            throw new ApiException("Missing the required parameter 'project' when calling projectsServersRead(Async)");
        }

        // verify the required parameter 'namespace' is set
        if (namespace == null) {
            throw new ApiException("Missing the required parameter 'namespace' when calling projectsServersRead(Async)");
        }

        // verify the required parameter 'server' is set
        if (server == null) {
            throw new ApiException("Missing the required parameter 'server' when calling projectsServersRead(Async)");
        }

        return projectsServersReadCall(project, namespace, server, _callback);

    }

    /**
     * Retrieve a server
     * 
     * @param project Project unique identifier expressed as UUID or name. (required)
     * @param namespace User or team name. (required)
     * @param server Server unique identifier expressed as UUID or name. (required)
     * @return Server
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Server retrieved. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Server not found. </td><td>  -  </td></tr>
     </table>
     */
    public Server projectsServersRead(String project, String namespace, String server) throws ApiException {
        ApiResponse<Server> localVarResp = projectsServersReadWithHttpInfo(project, namespace, server);
        return localVarResp.getData();
    }

    /**
     * Retrieve a server
     * 
     * @param project Project unique identifier expressed as UUID or name. (required)
     * @param namespace User or team name. (required)
     * @param server Server unique identifier expressed as UUID or name. (required)
     * @return ApiResponse&lt;Server&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Server retrieved. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Server not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Server> projectsServersReadWithHttpInfo(String project, String namespace, String server) throws ApiException {
        okhttp3.Call localVarCall = projectsServersReadValidateBeforeCall(project, namespace, server, null);
        Type localVarReturnType = new TypeToken<Server>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve a server (asynchronously)
     * 
     * @param project Project unique identifier expressed as UUID or name. (required)
     * @param namespace User or team name. (required)
     * @param server Server unique identifier expressed as UUID or name. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Server retrieved. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Server not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectsServersReadAsync(String project, String namespace, String server, final ApiCallback<Server> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectsServersReadValidateBeforeCall(project, namespace, server, _callback);
        Type localVarReturnType = new TypeToken<Server>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectsServersReplace
     * @param project Project unique identifier expressed as UUID or name. (required)
     * @param namespace User or team name. (required)
     * @param server Server unique identifier expressed as UUID or name. (required)
     * @param serverData  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Server updated. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectsServersReplaceCall(String project, String namespace, String server, ServerData serverData, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = serverData;

        // create path and map variables
        String localVarPath = "/v1/{namespace}/projects/{project}/servers/{server}/"
            .replace("{" + "project" + "}", localVarApiClient.escapeString(project.toString()))
            .replace("{" + "namespace" + "}", localVarApiClient.escapeString(namespace.toString()))
            .replace("{" + "server" + "}", localVarApiClient.escapeString(server.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectsServersReplaceValidateBeforeCall(String project, String namespace, String server, ServerData serverData, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'project' is set
        if (project == null) {
            throw new ApiException("Missing the required parameter 'project' when calling projectsServersReplace(Async)");
        }

        // verify the required parameter 'namespace' is set
        if (namespace == null) {
            throw new ApiException("Missing the required parameter 'namespace' when calling projectsServersReplace(Async)");
        }

        // verify the required parameter 'server' is set
        if (server == null) {
            throw new ApiException("Missing the required parameter 'server' when calling projectsServersReplace(Async)");
        }

        return projectsServersReplaceCall(project, namespace, server, serverData, _callback);

    }

    /**
     * Replace a server
     * 
     * @param project Project unique identifier expressed as UUID or name. (required)
     * @param namespace User or team name. (required)
     * @param server Server unique identifier expressed as UUID or name. (required)
     * @param serverData  (optional)
     * @return Server
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Server updated. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied. </td><td>  -  </td></tr>
     </table>
     */
    public Server projectsServersReplace(String project, String namespace, String server, ServerData serverData) throws ApiException {
        ApiResponse<Server> localVarResp = projectsServersReplaceWithHttpInfo(project, namespace, server, serverData);
        return localVarResp.getData();
    }

    /**
     * Replace a server
     * 
     * @param project Project unique identifier expressed as UUID or name. (required)
     * @param namespace User or team name. (required)
     * @param server Server unique identifier expressed as UUID or name. (required)
     * @param serverData  (optional)
     * @return ApiResponse&lt;Server&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Server updated. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Server> projectsServersReplaceWithHttpInfo(String project, String namespace, String server, ServerData serverData) throws ApiException {
        okhttp3.Call localVarCall = projectsServersReplaceValidateBeforeCall(project, namespace, server, serverData, null);
        Type localVarReturnType = new TypeToken<Server>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Replace a server (asynchronously)
     * 
     * @param project Project unique identifier expressed as UUID or name. (required)
     * @param namespace User or team name. (required)
     * @param server Server unique identifier expressed as UUID or name. (required)
     * @param serverData  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Server updated. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectsServersReplaceAsync(String project, String namespace, String server, ServerData serverData, final ApiCallback<Server> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectsServersReplaceValidateBeforeCall(project, namespace, server, serverData, _callback);
        Type localVarReturnType = new TypeToken<Server>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectsServersRunStatsCreate
     * @param server Server unique identifier expressed as UUID or name. (required)
     * @param project Project unique identifier expressed as UUID or name. (required)
     * @param namespace User or team name. (required)
     * @param serverrunstatsData  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> ServerRunStatistics created. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectsServersRunStatsCreateCall(String server, String project, String namespace, ServerRunStatisticsData serverrunstatsData, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = serverrunstatsData;

        // create path and map variables
        String localVarPath = "/v1/{namespace}/projects/{project}/servers/{server}/run-stats/"
            .replace("{" + "server" + "}", localVarApiClient.escapeString(server.toString()))
            .replace("{" + "project" + "}", localVarApiClient.escapeString(project.toString()))
            .replace("{" + "namespace" + "}", localVarApiClient.escapeString(namespace.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectsServersRunStatsCreateValidateBeforeCall(String server, String project, String namespace, ServerRunStatisticsData serverrunstatsData, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'server' is set
        if (server == null) {
            throw new ApiException("Missing the required parameter 'server' when calling projectsServersRunStatsCreate(Async)");
        }

        // verify the required parameter 'project' is set
        if (project == null) {
            throw new ApiException("Missing the required parameter 'project' when calling projectsServersRunStatsCreate(Async)");
        }

        // verify the required parameter 'namespace' is set
        if (namespace == null) {
            throw new ApiException("Missing the required parameter 'namespace' when calling projectsServersRunStatsCreate(Async)");
        }

        return projectsServersRunStatsCreateCall(server, project, namespace, serverrunstatsData, _callback);

    }

    /**
     * Create a new server&#39;s run statistics
     * 
     * @param server Server unique identifier expressed as UUID or name. (required)
     * @param project Project unique identifier expressed as UUID or name. (required)
     * @param namespace User or team name. (required)
     * @param serverrunstatsData  (optional)
     * @return ServerRunStatistics
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> ServerRunStatistics created. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied. </td><td>  -  </td></tr>
     </table>
     */
    public ServerRunStatistics projectsServersRunStatsCreate(String server, String project, String namespace, ServerRunStatisticsData serverrunstatsData) throws ApiException {
        ApiResponse<ServerRunStatistics> localVarResp = projectsServersRunStatsCreateWithHttpInfo(server, project, namespace, serverrunstatsData);
        return localVarResp.getData();
    }

    /**
     * Create a new server&#39;s run statistics
     * 
     * @param server Server unique identifier expressed as UUID or name. (required)
     * @param project Project unique identifier expressed as UUID or name. (required)
     * @param namespace User or team name. (required)
     * @param serverrunstatsData  (optional)
     * @return ApiResponse&lt;ServerRunStatistics&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> ServerRunStatistics created. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServerRunStatistics> projectsServersRunStatsCreateWithHttpInfo(String server, String project, String namespace, ServerRunStatisticsData serverrunstatsData) throws ApiException {
        okhttp3.Call localVarCall = projectsServersRunStatsCreateValidateBeforeCall(server, project, namespace, serverrunstatsData, null);
        Type localVarReturnType = new TypeToken<ServerRunStatistics>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a new server&#39;s run statistics (asynchronously)
     * 
     * @param server Server unique identifier expressed as UUID or name. (required)
     * @param project Project unique identifier expressed as UUID or name. (required)
     * @param namespace User or team name. (required)
     * @param serverrunstatsData  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> ServerRunStatistics created. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectsServersRunStatsCreateAsync(String server, String project, String namespace, ServerRunStatisticsData serverrunstatsData, final ApiCallback<ServerRunStatistics> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectsServersRunStatsCreateValidateBeforeCall(server, project, namespace, serverrunstatsData, _callback);
        Type localVarReturnType = new TypeToken<ServerRunStatistics>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectsServersRunStatsDelete
     * @param server Server unique identifier expressed as UUID or name. (required)
     * @param project Project unique identifier expressed as UUID or name. (required)
     * @param namespace User or team name. (required)
     * @param id Server run statistics unique identifier expressed as UUID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> ServerRunStatistics deleted. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ServerRunStatistics not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectsServersRunStatsDeleteCall(String server, String project, String namespace, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/{namespace}/projects/{project}/servers/{server}/run-stats/{id}/"
            .replace("{" + "server" + "}", localVarApiClient.escapeString(server.toString()))
            .replace("{" + "project" + "}", localVarApiClient.escapeString(project.toString()))
            .replace("{" + "namespace" + "}", localVarApiClient.escapeString(namespace.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectsServersRunStatsDeleteValidateBeforeCall(String server, String project, String namespace, String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'server' is set
        if (server == null) {
            throw new ApiException("Missing the required parameter 'server' when calling projectsServersRunStatsDelete(Async)");
        }

        // verify the required parameter 'project' is set
        if (project == null) {
            throw new ApiException("Missing the required parameter 'project' when calling projectsServersRunStatsDelete(Async)");
        }

        // verify the required parameter 'namespace' is set
        if (namespace == null) {
            throw new ApiException("Missing the required parameter 'namespace' when calling projectsServersRunStatsDelete(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling projectsServersRunStatsDelete(Async)");
        }

        return projectsServersRunStatsDeleteCall(server, project, namespace, id, _callback);

    }

    /**
     * Delete a server&#39;s statistics
     * 
     * @param server Server unique identifier expressed as UUID or name. (required)
     * @param project Project unique identifier expressed as UUID or name. (required)
     * @param namespace User or team name. (required)
     * @param id Server run statistics unique identifier expressed as UUID. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> ServerRunStatistics deleted. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ServerRunStatistics not found. </td><td>  -  </td></tr>
     </table>
     */
    public void projectsServersRunStatsDelete(String server, String project, String namespace, String id) throws ApiException {
        projectsServersRunStatsDeleteWithHttpInfo(server, project, namespace, id);
    }

    /**
     * Delete a server&#39;s statistics
     * 
     * @param server Server unique identifier expressed as UUID or name. (required)
     * @param project Project unique identifier expressed as UUID or name. (required)
     * @param namespace User or team name. (required)
     * @param id Server run statistics unique identifier expressed as UUID. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> ServerRunStatistics deleted. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ServerRunStatistics not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> projectsServersRunStatsDeleteWithHttpInfo(String server, String project, String namespace, String id) throws ApiException {
        okhttp3.Call localVarCall = projectsServersRunStatsDeleteValidateBeforeCall(server, project, namespace, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a server&#39;s statistics (asynchronously)
     * 
     * @param server Server unique identifier expressed as UUID or name. (required)
     * @param project Project unique identifier expressed as UUID or name. (required)
     * @param namespace User or team name. (required)
     * @param id Server run statistics unique identifier expressed as UUID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> ServerRunStatistics deleted. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ServerRunStatistics not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectsServersRunStatsDeleteAsync(String server, String project, String namespace, String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectsServersRunStatsDeleteValidateBeforeCall(server, project, namespace, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectsServersRunStatsRead
     * @param server Server unique identifier expressed as UUID or name. (required)
     * @param project Project unique identifier expressed as UUID or name. (required)
     * @param namespace User or team name. (required)
     * @param id Run statistics unique identifier expressed as UUID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ServerRunStatistics retrieved. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ServerRunStatistics not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectsServersRunStatsReadCall(String server, String project, String namespace, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/{namespace}/projects/{project}/servers/{server}/run-stats/{id}/"
            .replace("{" + "server" + "}", localVarApiClient.escapeString(server.toString()))
            .replace("{" + "project" + "}", localVarApiClient.escapeString(project.toString()))
            .replace("{" + "namespace" + "}", localVarApiClient.escapeString(namespace.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectsServersRunStatsReadValidateBeforeCall(String server, String project, String namespace, String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'server' is set
        if (server == null) {
            throw new ApiException("Missing the required parameter 'server' when calling projectsServersRunStatsRead(Async)");
        }

        // verify the required parameter 'project' is set
        if (project == null) {
            throw new ApiException("Missing the required parameter 'project' when calling projectsServersRunStatsRead(Async)");
        }

        // verify the required parameter 'namespace' is set
        if (namespace == null) {
            throw new ApiException("Missing the required parameter 'namespace' when calling projectsServersRunStatsRead(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling projectsServersRunStatsRead(Async)");
        }

        return projectsServersRunStatsReadCall(server, project, namespace, id, _callback);

    }

    /**
     * Retrieve statistics for a server
     * 
     * @param server Server unique identifier expressed as UUID or name. (required)
     * @param project Project unique identifier expressed as UUID or name. (required)
     * @param namespace User or team name. (required)
     * @param id Run statistics unique identifier expressed as UUID. (required)
     * @return ServerRunStatistics
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ServerRunStatistics retrieved. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ServerRunStatistics not found. </td><td>  -  </td></tr>
     </table>
     */
    public ServerRunStatistics projectsServersRunStatsRead(String server, String project, String namespace, String id) throws ApiException {
        ApiResponse<ServerRunStatistics> localVarResp = projectsServersRunStatsReadWithHttpInfo(server, project, namespace, id);
        return localVarResp.getData();
    }

    /**
     * Retrieve statistics for a server
     * 
     * @param server Server unique identifier expressed as UUID or name. (required)
     * @param project Project unique identifier expressed as UUID or name. (required)
     * @param namespace User or team name. (required)
     * @param id Run statistics unique identifier expressed as UUID. (required)
     * @return ApiResponse&lt;ServerRunStatistics&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ServerRunStatistics retrieved. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ServerRunStatistics not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServerRunStatistics> projectsServersRunStatsReadWithHttpInfo(String server, String project, String namespace, String id) throws ApiException {
        okhttp3.Call localVarCall = projectsServersRunStatsReadValidateBeforeCall(server, project, namespace, id, null);
        Type localVarReturnType = new TypeToken<ServerRunStatistics>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve statistics for a server (asynchronously)
     * 
     * @param server Server unique identifier expressed as UUID or name. (required)
     * @param project Project unique identifier expressed as UUID or name. (required)
     * @param namespace User or team name. (required)
     * @param id Run statistics unique identifier expressed as UUID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ServerRunStatistics retrieved. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ServerRunStatistics not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectsServersRunStatsReadAsync(String server, String project, String namespace, String id, final ApiCallback<ServerRunStatistics> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectsServersRunStatsReadValidateBeforeCall(server, project, namespace, id, _callback);
        Type localVarReturnType = new TypeToken<ServerRunStatistics>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectsServersRunStatsReplace
     * @param server Server unique identifier expressed as UUID or name. (required)
     * @param project Project unique identifier expressed as UUID or name. (required)
     * @param namespace User or team name. (required)
     * @param id Server run statistics expressed as UUID. (required)
     * @param serverrunstatsData  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ServerRunStatistics updated. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectsServersRunStatsReplaceCall(String server, String project, String namespace, String id, ServerRunStatisticsData serverrunstatsData, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = serverrunstatsData;

        // create path and map variables
        String localVarPath = "/v1/{namespace}/projects/{project}/servers/{server}/run-stats/{id}/"
            .replace("{" + "server" + "}", localVarApiClient.escapeString(server.toString()))
            .replace("{" + "project" + "}", localVarApiClient.escapeString(project.toString()))
            .replace("{" + "namespace" + "}", localVarApiClient.escapeString(namespace.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectsServersRunStatsReplaceValidateBeforeCall(String server, String project, String namespace, String id, ServerRunStatisticsData serverrunstatsData, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'server' is set
        if (server == null) {
            throw new ApiException("Missing the required parameter 'server' when calling projectsServersRunStatsReplace(Async)");
        }

        // verify the required parameter 'project' is set
        if (project == null) {
            throw new ApiException("Missing the required parameter 'project' when calling projectsServersRunStatsReplace(Async)");
        }

        // verify the required parameter 'namespace' is set
        if (namespace == null) {
            throw new ApiException("Missing the required parameter 'namespace' when calling projectsServersRunStatsReplace(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling projectsServersRunStatsReplace(Async)");
        }

        return projectsServersRunStatsReplaceCall(server, project, namespace, id, serverrunstatsData, _callback);

    }

    /**
     * Replace a server&#39;s statistics
     * 
     * @param server Server unique identifier expressed as UUID or name. (required)
     * @param project Project unique identifier expressed as UUID or name. (required)
     * @param namespace User or team name. (required)
     * @param id Server run statistics expressed as UUID. (required)
     * @param serverrunstatsData  (optional)
     * @return ServerRunStatistics
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ServerRunStatistics updated. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied. </td><td>  -  </td></tr>
     </table>
     */
    public ServerRunStatistics projectsServersRunStatsReplace(String server, String project, String namespace, String id, ServerRunStatisticsData serverrunstatsData) throws ApiException {
        ApiResponse<ServerRunStatistics> localVarResp = projectsServersRunStatsReplaceWithHttpInfo(server, project, namespace, id, serverrunstatsData);
        return localVarResp.getData();
    }

    /**
     * Replace a server&#39;s statistics
     * 
     * @param server Server unique identifier expressed as UUID or name. (required)
     * @param project Project unique identifier expressed as UUID or name. (required)
     * @param namespace User or team name. (required)
     * @param id Server run statistics expressed as UUID. (required)
     * @param serverrunstatsData  (optional)
     * @return ApiResponse&lt;ServerRunStatistics&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ServerRunStatistics updated. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServerRunStatistics> projectsServersRunStatsReplaceWithHttpInfo(String server, String project, String namespace, String id, ServerRunStatisticsData serverrunstatsData) throws ApiException {
        okhttp3.Call localVarCall = projectsServersRunStatsReplaceValidateBeforeCall(server, project, namespace, id, serverrunstatsData, null);
        Type localVarReturnType = new TypeToken<ServerRunStatistics>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Replace a server&#39;s statistics (asynchronously)
     * 
     * @param server Server unique identifier expressed as UUID or name. (required)
     * @param project Project unique identifier expressed as UUID or name. (required)
     * @param namespace User or team name. (required)
     * @param id Server run statistics expressed as UUID. (required)
     * @param serverrunstatsData  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ServerRunStatistics updated. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectsServersRunStatsReplaceAsync(String server, String project, String namespace, String id, ServerRunStatisticsData serverrunstatsData, final ApiCallback<ServerRunStatistics> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectsServersRunStatsReplaceValidateBeforeCall(server, project, namespace, id, serverrunstatsData, _callback);
        Type localVarReturnType = new TypeToken<ServerRunStatistics>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectsServersRunStatsUpdate
     * @param server Server unique identifier expressed as UUID or name. (required)
     * @param project Project unique identifier expressed as UUID or name. (required)
     * @param namespace User or team name. (required)
     * @param id Server run statistics unique identifier expressed as UUID. (required)
     * @param serverrunstatsData  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ServerRunStatistics updated. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ServerRunStatistics not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectsServersRunStatsUpdateCall(String server, String project, String namespace, String id, ServerRunStatisticsData serverrunstatsData, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = serverrunstatsData;

        // create path and map variables
        String localVarPath = "/v1/{namespace}/projects/{project}/servers/{server}/run-stats/{id}/"
            .replace("{" + "server" + "}", localVarApiClient.escapeString(server.toString()))
            .replace("{" + "project" + "}", localVarApiClient.escapeString(project.toString()))
            .replace("{" + "namespace" + "}", localVarApiClient.escapeString(namespace.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectsServersRunStatsUpdateValidateBeforeCall(String server, String project, String namespace, String id, ServerRunStatisticsData serverrunstatsData, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'server' is set
        if (server == null) {
            throw new ApiException("Missing the required parameter 'server' when calling projectsServersRunStatsUpdate(Async)");
        }

        // verify the required parameter 'project' is set
        if (project == null) {
            throw new ApiException("Missing the required parameter 'project' when calling projectsServersRunStatsUpdate(Async)");
        }

        // verify the required parameter 'namespace' is set
        if (namespace == null) {
            throw new ApiException("Missing the required parameter 'namespace' when calling projectsServersRunStatsUpdate(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling projectsServersRunStatsUpdate(Async)");
        }

        return projectsServersRunStatsUpdateCall(server, project, namespace, id, serverrunstatsData, _callback);

    }

    /**
     * Update a server&#39;s statistics
     * 
     * @param server Server unique identifier expressed as UUID or name. (required)
     * @param project Project unique identifier expressed as UUID or name. (required)
     * @param namespace User or team name. (required)
     * @param id Server run statistics unique identifier expressed as UUID. (required)
     * @param serverrunstatsData  (optional)
     * @return ServerRunStatistics
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ServerRunStatistics updated. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ServerRunStatistics not found. </td><td>  -  </td></tr>
     </table>
     */
    public ServerRunStatistics projectsServersRunStatsUpdate(String server, String project, String namespace, String id, ServerRunStatisticsData serverrunstatsData) throws ApiException {
        ApiResponse<ServerRunStatistics> localVarResp = projectsServersRunStatsUpdateWithHttpInfo(server, project, namespace, id, serverrunstatsData);
        return localVarResp.getData();
    }

    /**
     * Update a server&#39;s statistics
     * 
     * @param server Server unique identifier expressed as UUID or name. (required)
     * @param project Project unique identifier expressed as UUID or name. (required)
     * @param namespace User or team name. (required)
     * @param id Server run statistics unique identifier expressed as UUID. (required)
     * @param serverrunstatsData  (optional)
     * @return ApiResponse&lt;ServerRunStatistics&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ServerRunStatistics updated. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ServerRunStatistics not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServerRunStatistics> projectsServersRunStatsUpdateWithHttpInfo(String server, String project, String namespace, String id, ServerRunStatisticsData serverrunstatsData) throws ApiException {
        okhttp3.Call localVarCall = projectsServersRunStatsUpdateValidateBeforeCall(server, project, namespace, id, serverrunstatsData, null);
        Type localVarReturnType = new TypeToken<ServerRunStatistics>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a server&#39;s statistics (asynchronously)
     * 
     * @param server Server unique identifier expressed as UUID or name. (required)
     * @param project Project unique identifier expressed as UUID or name. (required)
     * @param namespace User or team name. (required)
     * @param id Server run statistics unique identifier expressed as UUID. (required)
     * @param serverrunstatsData  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ServerRunStatistics updated. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ServerRunStatistics not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectsServersRunStatsUpdateAsync(String server, String project, String namespace, String id, ServerRunStatisticsData serverrunstatsData, final ApiCallback<ServerRunStatistics> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectsServersRunStatsUpdateValidateBeforeCall(server, project, namespace, id, serverrunstatsData, _callback);
        Type localVarReturnType = new TypeToken<ServerRunStatistics>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectsServersSshTunnelsCreate
     * @param server Server unique identifier expressed as UUID or name. (required)
     * @param project Project unique identifier expressed as UUID or name. (required)
     * @param namespace User or team name. (required)
     * @param sshtunnelData  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> SSH Tunnel created. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectsServersSshTunnelsCreateCall(String server, String project, String namespace, SshTunnelData sshtunnelData, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = sshtunnelData;

        // create path and map variables
        String localVarPath = "/v1/{namespace}/projects/{project}/servers/{server}/ssh-tunnels/"
            .replace("{" + "server" + "}", localVarApiClient.escapeString(server.toString()))
            .replace("{" + "project" + "}", localVarApiClient.escapeString(project.toString()))
            .replace("{" + "namespace" + "}", localVarApiClient.escapeString(namespace.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectsServersSshTunnelsCreateValidateBeforeCall(String server, String project, String namespace, SshTunnelData sshtunnelData, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'server' is set
        if (server == null) {
            throw new ApiException("Missing the required parameter 'server' when calling projectsServersSshTunnelsCreate(Async)");
        }

        // verify the required parameter 'project' is set
        if (project == null) {
            throw new ApiException("Missing the required parameter 'project' when calling projectsServersSshTunnelsCreate(Async)");
        }

        // verify the required parameter 'namespace' is set
        if (namespace == null) {
            throw new ApiException("Missing the required parameter 'namespace' when calling projectsServersSshTunnelsCreate(Async)");
        }

        return projectsServersSshTunnelsCreateCall(server, project, namespace, sshtunnelData, _callback);

    }

    /**
     * Create SSH Tunnel associated to a server
     * 
     * @param server Server unique identifier expressed as UUID or name. (required)
     * @param project Project unique identifier expressed as UUID or name. (required)
     * @param namespace User or team name. (required)
     * @param sshtunnelData  (optional)
     * @return SshTunnel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> SSH Tunnel created. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied. </td><td>  -  </td></tr>
     </table>
     */
    public SshTunnel projectsServersSshTunnelsCreate(String server, String project, String namespace, SshTunnelData sshtunnelData) throws ApiException {
        ApiResponse<SshTunnel> localVarResp = projectsServersSshTunnelsCreateWithHttpInfo(server, project, namespace, sshtunnelData);
        return localVarResp.getData();
    }

    /**
     * Create SSH Tunnel associated to a server
     * 
     * @param server Server unique identifier expressed as UUID or name. (required)
     * @param project Project unique identifier expressed as UUID or name. (required)
     * @param namespace User or team name. (required)
     * @param sshtunnelData  (optional)
     * @return ApiResponse&lt;SshTunnel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> SSH Tunnel created. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SshTunnel> projectsServersSshTunnelsCreateWithHttpInfo(String server, String project, String namespace, SshTunnelData sshtunnelData) throws ApiException {
        okhttp3.Call localVarCall = projectsServersSshTunnelsCreateValidateBeforeCall(server, project, namespace, sshtunnelData, null);
        Type localVarReturnType = new TypeToken<SshTunnel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create SSH Tunnel associated to a server (asynchronously)
     * 
     * @param server Server unique identifier expressed as UUID or name. (required)
     * @param project Project unique identifier expressed as UUID or name. (required)
     * @param namespace User or team name. (required)
     * @param sshtunnelData  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> SSH Tunnel created. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectsServersSshTunnelsCreateAsync(String server, String project, String namespace, SshTunnelData sshtunnelData, final ApiCallback<SshTunnel> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectsServersSshTunnelsCreateValidateBeforeCall(server, project, namespace, sshtunnelData, _callback);
        Type localVarReturnType = new TypeToken<SshTunnel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectsServersSshTunnelsDelete
     * @param server Server unique identifier expressed as UUID or name. (required)
     * @param project Project unique identifier expressed as UUID or name. (required)
     * @param namespace User or team name. (required)
     * @param tunnel SSH tunnel unique identifier expressed as UUID or name. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> SSH tunnel deleted. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> SSH tunnel not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectsServersSshTunnelsDeleteCall(String server, String project, String namespace, String tunnel, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/{namespace}/projects/{project}/servers/{server}/ssh-tunnels/{tunnel}/"
            .replace("{" + "server" + "}", localVarApiClient.escapeString(server.toString()))
            .replace("{" + "project" + "}", localVarApiClient.escapeString(project.toString()))
            .replace("{" + "namespace" + "}", localVarApiClient.escapeString(namespace.toString()))
            .replace("{" + "tunnel" + "}", localVarApiClient.escapeString(tunnel.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectsServersSshTunnelsDeleteValidateBeforeCall(String server, String project, String namespace, String tunnel, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'server' is set
        if (server == null) {
            throw new ApiException("Missing the required parameter 'server' when calling projectsServersSshTunnelsDelete(Async)");
        }

        // verify the required parameter 'project' is set
        if (project == null) {
            throw new ApiException("Missing the required parameter 'project' when calling projectsServersSshTunnelsDelete(Async)");
        }

        // verify the required parameter 'namespace' is set
        if (namespace == null) {
            throw new ApiException("Missing the required parameter 'namespace' when calling projectsServersSshTunnelsDelete(Async)");
        }

        // verify the required parameter 'tunnel' is set
        if (tunnel == null) {
            throw new ApiException("Missing the required parameter 'tunnel' when calling projectsServersSshTunnelsDelete(Async)");
        }

        return projectsServersSshTunnelsDeleteCall(server, project, namespace, tunnel, _callback);

    }

    /**
     * Delete an SSH Tunnel associated to a server
     * 
     * @param server Server unique identifier expressed as UUID or name. (required)
     * @param project Project unique identifier expressed as UUID or name. (required)
     * @param namespace User or team name. (required)
     * @param tunnel SSH tunnel unique identifier expressed as UUID or name. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> SSH tunnel deleted. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> SSH tunnel not found. </td><td>  -  </td></tr>
     </table>
     */
    public void projectsServersSshTunnelsDelete(String server, String project, String namespace, String tunnel) throws ApiException {
        projectsServersSshTunnelsDeleteWithHttpInfo(server, project, namespace, tunnel);
    }

    /**
     * Delete an SSH Tunnel associated to a server
     * 
     * @param server Server unique identifier expressed as UUID or name. (required)
     * @param project Project unique identifier expressed as UUID or name. (required)
     * @param namespace User or team name. (required)
     * @param tunnel SSH tunnel unique identifier expressed as UUID or name. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> SSH tunnel deleted. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> SSH tunnel not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> projectsServersSshTunnelsDeleteWithHttpInfo(String server, String project, String namespace, String tunnel) throws ApiException {
        okhttp3.Call localVarCall = projectsServersSshTunnelsDeleteValidateBeforeCall(server, project, namespace, tunnel, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete an SSH Tunnel associated to a server (asynchronously)
     * 
     * @param server Server unique identifier expressed as UUID or name. (required)
     * @param project Project unique identifier expressed as UUID or name. (required)
     * @param namespace User or team name. (required)
     * @param tunnel SSH tunnel unique identifier expressed as UUID or name. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> SSH tunnel deleted. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> SSH tunnel not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectsServersSshTunnelsDeleteAsync(String server, String project, String namespace, String tunnel, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectsServersSshTunnelsDeleteValidateBeforeCall(server, project, namespace, tunnel, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectsServersSshTunnelsList
     * @param server Server unique identifier expressed as UUID or name. (required)
     * @param project Project unique identifier expressed as UUID or name. (required)
     * @param namespace User or team name. (required)
     * @param limit Limit retrieved items. (optional)
     * @param offset Offset retrieved items. (optional)
     * @param ordering Order retrieved items. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> SshTunnel list </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectsServersSshTunnelsListCall(String server, String project, String namespace, String limit, String offset, String ordering, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/{namespace}/projects/{project}/servers/{server}/ssh-tunnels/"
            .replace("{" + "server" + "}", localVarApiClient.escapeString(server.toString()))
            .replace("{" + "project" + "}", localVarApiClient.escapeString(project.toString()))
            .replace("{" + "namespace" + "}", localVarApiClient.escapeString(namespace.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectsServersSshTunnelsListValidateBeforeCall(String server, String project, String namespace, String limit, String offset, String ordering, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'server' is set
        if (server == null) {
            throw new ApiException("Missing the required parameter 'server' when calling projectsServersSshTunnelsList(Async)");
        }

        // verify the required parameter 'project' is set
        if (project == null) {
            throw new ApiException("Missing the required parameter 'project' when calling projectsServersSshTunnelsList(Async)");
        }

        // verify the required parameter 'namespace' is set
        if (namespace == null) {
            throw new ApiException("Missing the required parameter 'namespace' when calling projectsServersSshTunnelsList(Async)");
        }

        return projectsServersSshTunnelsListCall(server, project, namespace, limit, offset, ordering, _callback);

    }

    /**
     * Get SSH Tunnels associated to a server
     * 
     * @param server Server unique identifier expressed as UUID or name. (required)
     * @param project Project unique identifier expressed as UUID or name. (required)
     * @param namespace User or team name. (required)
     * @param limit Limit retrieved items. (optional)
     * @param offset Offset retrieved items. (optional)
     * @param ordering Order retrieved items. (optional)
     * @return List&lt;SshTunnel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> SshTunnel list </td><td>  -  </td></tr>
     </table>
     */
    public List<SshTunnel> projectsServersSshTunnelsList(String server, String project, String namespace, String limit, String offset, String ordering) throws ApiException {
        ApiResponse<List<SshTunnel>> localVarResp = projectsServersSshTunnelsListWithHttpInfo(server, project, namespace, limit, offset, ordering);
        return localVarResp.getData();
    }

    /**
     * Get SSH Tunnels associated to a server
     * 
     * @param server Server unique identifier expressed as UUID or name. (required)
     * @param project Project unique identifier expressed as UUID or name. (required)
     * @param namespace User or team name. (required)
     * @param limit Limit retrieved items. (optional)
     * @param offset Offset retrieved items. (optional)
     * @param ordering Order retrieved items. (optional)
     * @return ApiResponse&lt;List&lt;SshTunnel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> SshTunnel list </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<SshTunnel>> projectsServersSshTunnelsListWithHttpInfo(String server, String project, String namespace, String limit, String offset, String ordering) throws ApiException {
        okhttp3.Call localVarCall = projectsServersSshTunnelsListValidateBeforeCall(server, project, namespace, limit, offset, ordering, null);
        Type localVarReturnType = new TypeToken<List<SshTunnel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get SSH Tunnels associated to a server (asynchronously)
     * 
     * @param server Server unique identifier expressed as UUID or name. (required)
     * @param project Project unique identifier expressed as UUID or name. (required)
     * @param namespace User or team name. (required)
     * @param limit Limit retrieved items. (optional)
     * @param offset Offset retrieved items. (optional)
     * @param ordering Order retrieved items. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> SshTunnel list </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectsServersSshTunnelsListAsync(String server, String project, String namespace, String limit, String offset, String ordering, final ApiCallback<List<SshTunnel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectsServersSshTunnelsListValidateBeforeCall(server, project, namespace, limit, offset, ordering, _callback);
        Type localVarReturnType = new TypeToken<List<SshTunnel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectsServersSshTunnelsRead
     * @param server Server unique identifier expressed as UUID or name. (required)
     * @param project Project unique identifier expressed as UUID or name. (required)
     * @param namespace User or team name. (required)
     * @param tunnel SSH tunnel unique identifier expressed as UUID or name. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> SSH Tunnel retrieved. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> SSH Tunnel not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectsServersSshTunnelsReadCall(String server, String project, String namespace, String tunnel, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/{namespace}/projects/{project}/servers/{server}/ssh-tunnels/{tunnel}/"
            .replace("{" + "server" + "}", localVarApiClient.escapeString(server.toString()))
            .replace("{" + "project" + "}", localVarApiClient.escapeString(project.toString()))
            .replace("{" + "namespace" + "}", localVarApiClient.escapeString(namespace.toString()))
            .replace("{" + "tunnel" + "}", localVarApiClient.escapeString(tunnel.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectsServersSshTunnelsReadValidateBeforeCall(String server, String project, String namespace, String tunnel, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'server' is set
        if (server == null) {
            throw new ApiException("Missing the required parameter 'server' when calling projectsServersSshTunnelsRead(Async)");
        }

        // verify the required parameter 'project' is set
        if (project == null) {
            throw new ApiException("Missing the required parameter 'project' when calling projectsServersSshTunnelsRead(Async)");
        }

        // verify the required parameter 'namespace' is set
        if (namespace == null) {
            throw new ApiException("Missing the required parameter 'namespace' when calling projectsServersSshTunnelsRead(Async)");
        }

        // verify the required parameter 'tunnel' is set
        if (tunnel == null) {
            throw new ApiException("Missing the required parameter 'tunnel' when calling projectsServersSshTunnelsRead(Async)");
        }

        return projectsServersSshTunnelsReadCall(server, project, namespace, tunnel, _callback);

    }

    /**
     * Get an SSH Tunnel associated to a server
     * 
     * @param server Server unique identifier expressed as UUID or name. (required)
     * @param project Project unique identifier expressed as UUID or name. (required)
     * @param namespace User or team name. (required)
     * @param tunnel SSH tunnel unique identifier expressed as UUID or name. (required)
     * @return SshTunnel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> SSH Tunnel retrieved. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> SSH Tunnel not found. </td><td>  -  </td></tr>
     </table>
     */
    public SshTunnel projectsServersSshTunnelsRead(String server, String project, String namespace, String tunnel) throws ApiException {
        ApiResponse<SshTunnel> localVarResp = projectsServersSshTunnelsReadWithHttpInfo(server, project, namespace, tunnel);
        return localVarResp.getData();
    }

    /**
     * Get an SSH Tunnel associated to a server
     * 
     * @param server Server unique identifier expressed as UUID or name. (required)
     * @param project Project unique identifier expressed as UUID or name. (required)
     * @param namespace User or team name. (required)
     * @param tunnel SSH tunnel unique identifier expressed as UUID or name. (required)
     * @return ApiResponse&lt;SshTunnel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> SSH Tunnel retrieved. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> SSH Tunnel not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SshTunnel> projectsServersSshTunnelsReadWithHttpInfo(String server, String project, String namespace, String tunnel) throws ApiException {
        okhttp3.Call localVarCall = projectsServersSshTunnelsReadValidateBeforeCall(server, project, namespace, tunnel, null);
        Type localVarReturnType = new TypeToken<SshTunnel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get an SSH Tunnel associated to a server (asynchronously)
     * 
     * @param server Server unique identifier expressed as UUID or name. (required)
     * @param project Project unique identifier expressed as UUID or name. (required)
     * @param namespace User or team name. (required)
     * @param tunnel SSH tunnel unique identifier expressed as UUID or name. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> SSH Tunnel retrieved. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> SSH Tunnel not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectsServersSshTunnelsReadAsync(String server, String project, String namespace, String tunnel, final ApiCallback<SshTunnel> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectsServersSshTunnelsReadValidateBeforeCall(server, project, namespace, tunnel, _callback);
        Type localVarReturnType = new TypeToken<SshTunnel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectsServersSshTunnelsReplace
     * @param server Server unique identifier expressed as UUID or name. (required)
     * @param project Project unique identifier expressed as UUID or name. (required)
     * @param namespace User or team name. (required)
     * @param tunnel SSH tunnel unique identifier expressed as UUID or name. (required)
     * @param sshtunnelData  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> SshTunnel updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectsServersSshTunnelsReplaceCall(String server, String project, String namespace, String tunnel, SshTunnelData sshtunnelData, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = sshtunnelData;

        // create path and map variables
        String localVarPath = "/v1/{namespace}/projects/{project}/servers/{server}/ssh-tunnels/{tunnel}/"
            .replace("{" + "server" + "}", localVarApiClient.escapeString(server.toString()))
            .replace("{" + "project" + "}", localVarApiClient.escapeString(project.toString()))
            .replace("{" + "namespace" + "}", localVarApiClient.escapeString(namespace.toString()))
            .replace("{" + "tunnel" + "}", localVarApiClient.escapeString(tunnel.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectsServersSshTunnelsReplaceValidateBeforeCall(String server, String project, String namespace, String tunnel, SshTunnelData sshtunnelData, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'server' is set
        if (server == null) {
            throw new ApiException("Missing the required parameter 'server' when calling projectsServersSshTunnelsReplace(Async)");
        }

        // verify the required parameter 'project' is set
        if (project == null) {
            throw new ApiException("Missing the required parameter 'project' when calling projectsServersSshTunnelsReplace(Async)");
        }

        // verify the required parameter 'namespace' is set
        if (namespace == null) {
            throw new ApiException("Missing the required parameter 'namespace' when calling projectsServersSshTunnelsReplace(Async)");
        }

        // verify the required parameter 'tunnel' is set
        if (tunnel == null) {
            throw new ApiException("Missing the required parameter 'tunnel' when calling projectsServersSshTunnelsReplace(Async)");
        }

        return projectsServersSshTunnelsReplaceCall(server, project, namespace, tunnel, sshtunnelData, _callback);

    }

    /**
     * Replace SSH Tunnel associated to a server
     * 
     * @param server Server unique identifier expressed as UUID or name. (required)
     * @param project Project unique identifier expressed as UUID or name. (required)
     * @param namespace User or team name. (required)
     * @param tunnel SSH tunnel unique identifier expressed as UUID or name. (required)
     * @param sshtunnelData  (optional)
     * @return SshTunnel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> SshTunnel updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied </td><td>  -  </td></tr>
     </table>
     */
    public SshTunnel projectsServersSshTunnelsReplace(String server, String project, String namespace, String tunnel, SshTunnelData sshtunnelData) throws ApiException {
        ApiResponse<SshTunnel> localVarResp = projectsServersSshTunnelsReplaceWithHttpInfo(server, project, namespace, tunnel, sshtunnelData);
        return localVarResp.getData();
    }

    /**
     * Replace SSH Tunnel associated to a server
     * 
     * @param server Server unique identifier expressed as UUID or name. (required)
     * @param project Project unique identifier expressed as UUID or name. (required)
     * @param namespace User or team name. (required)
     * @param tunnel SSH tunnel unique identifier expressed as UUID or name. (required)
     * @param sshtunnelData  (optional)
     * @return ApiResponse&lt;SshTunnel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> SshTunnel updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SshTunnel> projectsServersSshTunnelsReplaceWithHttpInfo(String server, String project, String namespace, String tunnel, SshTunnelData sshtunnelData) throws ApiException {
        okhttp3.Call localVarCall = projectsServersSshTunnelsReplaceValidateBeforeCall(server, project, namespace, tunnel, sshtunnelData, null);
        Type localVarReturnType = new TypeToken<SshTunnel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Replace SSH Tunnel associated to a server (asynchronously)
     * 
     * @param server Server unique identifier expressed as UUID or name. (required)
     * @param project Project unique identifier expressed as UUID or name. (required)
     * @param namespace User or team name. (required)
     * @param tunnel SSH tunnel unique identifier expressed as UUID or name. (required)
     * @param sshtunnelData  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> SshTunnel updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectsServersSshTunnelsReplaceAsync(String server, String project, String namespace, String tunnel, SshTunnelData sshtunnelData, final ApiCallback<SshTunnel> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectsServersSshTunnelsReplaceValidateBeforeCall(server, project, namespace, tunnel, sshtunnelData, _callback);
        Type localVarReturnType = new TypeToken<SshTunnel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectsServersSshTunnelsUpdate
     * @param server  (required)
     * @param project  (required)
     * @param namespace User or team name. (required)
     * @param tunnel  (required)
     * @param sshtunnelData  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  SSH Tunnel updated. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> SSH tunnel not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectsServersSshTunnelsUpdateCall(String server, String project, String namespace, String tunnel, SshTunnelData sshtunnelData, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = sshtunnelData;

        // create path and map variables
        String localVarPath = "/v1/{namespace}/projects/{project}/servers/{server}/ssh-tunnels/{tunnel}/"
            .replace("{" + "server" + "}", localVarApiClient.escapeString(server.toString()))
            .replace("{" + "project" + "}", localVarApiClient.escapeString(project.toString()))
            .replace("{" + "namespace" + "}", localVarApiClient.escapeString(namespace.toString()))
            .replace("{" + "tunnel" + "}", localVarApiClient.escapeString(tunnel.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectsServersSshTunnelsUpdateValidateBeforeCall(String server, String project, String namespace, String tunnel, SshTunnelData sshtunnelData, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'server' is set
        if (server == null) {
            throw new ApiException("Missing the required parameter 'server' when calling projectsServersSshTunnelsUpdate(Async)");
        }

        // verify the required parameter 'project' is set
        if (project == null) {
            throw new ApiException("Missing the required parameter 'project' when calling projectsServersSshTunnelsUpdate(Async)");
        }

        // verify the required parameter 'namespace' is set
        if (namespace == null) {
            throw new ApiException("Missing the required parameter 'namespace' when calling projectsServersSshTunnelsUpdate(Async)");
        }

        // verify the required parameter 'tunnel' is set
        if (tunnel == null) {
            throw new ApiException("Missing the required parameter 'tunnel' when calling projectsServersSshTunnelsUpdate(Async)");
        }

        return projectsServersSshTunnelsUpdateCall(server, project, namespace, tunnel, sshtunnelData, _callback);

    }

    /**
     * Update an SSH Tunnel associated to a server
     * 
     * @param server  (required)
     * @param project  (required)
     * @param namespace User or team name. (required)
     * @param tunnel  (required)
     * @param sshtunnelData  (optional)
     * @return SshTunnel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  SSH Tunnel updated. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> SSH tunnel not found. </td><td>  -  </td></tr>
     </table>
     */
    public SshTunnel projectsServersSshTunnelsUpdate(String server, String project, String namespace, String tunnel, SshTunnelData sshtunnelData) throws ApiException {
        ApiResponse<SshTunnel> localVarResp = projectsServersSshTunnelsUpdateWithHttpInfo(server, project, namespace, tunnel, sshtunnelData);
        return localVarResp.getData();
    }

    /**
     * Update an SSH Tunnel associated to a server
     * 
     * @param server  (required)
     * @param project  (required)
     * @param namespace User or team name. (required)
     * @param tunnel  (required)
     * @param sshtunnelData  (optional)
     * @return ApiResponse&lt;SshTunnel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  SSH Tunnel updated. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> SSH tunnel not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SshTunnel> projectsServersSshTunnelsUpdateWithHttpInfo(String server, String project, String namespace, String tunnel, SshTunnelData sshtunnelData) throws ApiException {
        okhttp3.Call localVarCall = projectsServersSshTunnelsUpdateValidateBeforeCall(server, project, namespace, tunnel, sshtunnelData, null);
        Type localVarReturnType = new TypeToken<SshTunnel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update an SSH Tunnel associated to a server (asynchronously)
     * 
     * @param server  (required)
     * @param project  (required)
     * @param namespace User or team name. (required)
     * @param tunnel  (required)
     * @param sshtunnelData  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  SSH Tunnel updated. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> SSH tunnel not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectsServersSshTunnelsUpdateAsync(String server, String project, String namespace, String tunnel, SshTunnelData sshtunnelData, final ApiCallback<SshTunnel> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectsServersSshTunnelsUpdateValidateBeforeCall(server, project, namespace, tunnel, sshtunnelData, _callback);
        Type localVarReturnType = new TypeToken<SshTunnel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectsServersStart
     * @param project Project unique identifier expressed as UUID or name. (required)
     * @param namespace User or team name. (required)
     * @param server Server unique identifier expressed as UUID or name. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Server started. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectsServersStartCall(String project, String namespace, String server, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/{namespace}/projects/{project}/servers/{server}/start/"
            .replace("{" + "project" + "}", localVarApiClient.escapeString(project.toString()))
            .replace("{" + "namespace" + "}", localVarApiClient.escapeString(namespace.toString()))
            .replace("{" + "server" + "}", localVarApiClient.escapeString(server.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectsServersStartValidateBeforeCall(String project, String namespace, String server, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'project' is set
        if (project == null) {
            throw new ApiException("Missing the required parameter 'project' when calling projectsServersStart(Async)");
        }

        // verify the required parameter 'namespace' is set
        if (namespace == null) {
            throw new ApiException("Missing the required parameter 'namespace' when calling projectsServersStart(Async)");
        }

        // verify the required parameter 'server' is set
        if (server == null) {
            throw new ApiException("Missing the required parameter 'server' when calling projectsServersStart(Async)");
        }

        return projectsServersStartCall(project, namespace, server, _callback);

    }

    /**
     * Start a server
     * 
     * @param project Project unique identifier expressed as UUID or name. (required)
     * @param namespace User or team name. (required)
     * @param server Server unique identifier expressed as UUID or name. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Server started. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied. </td><td>  -  </td></tr>
     </table>
     */
    public void projectsServersStart(String project, String namespace, String server) throws ApiException {
        projectsServersStartWithHttpInfo(project, namespace, server);
    }

    /**
     * Start a server
     * 
     * @param project Project unique identifier expressed as UUID or name. (required)
     * @param namespace User or team name. (required)
     * @param server Server unique identifier expressed as UUID or name. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Server started. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> projectsServersStartWithHttpInfo(String project, String namespace, String server) throws ApiException {
        okhttp3.Call localVarCall = projectsServersStartValidateBeforeCall(project, namespace, server, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Start a server (asynchronously)
     * 
     * @param project Project unique identifier expressed as UUID or name. (required)
     * @param namespace User or team name. (required)
     * @param server Server unique identifier expressed as UUID or name. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Server started. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectsServersStartAsync(String project, String namespace, String server, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectsServersStartValidateBeforeCall(project, namespace, server, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectsServersStatsDelete
     * @param server Server unique identifier expressed as UUID or name. (required)
     * @param project Project unique identifier expressed as UUID or name. (required)
     * @param namespace User or team name. (required)
     * @param id Stats unique identifier expressed as UUID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> ServerStatistics deleted. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ServerStatistics not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectsServersStatsDeleteCall(String server, String project, String namespace, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/{namespace}/projects/{project}/servers/{server}/stats/{id}/"
            .replace("{" + "server" + "}", localVarApiClient.escapeString(server.toString()))
            .replace("{" + "project" + "}", localVarApiClient.escapeString(project.toString()))
            .replace("{" + "namespace" + "}", localVarApiClient.escapeString(namespace.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectsServersStatsDeleteValidateBeforeCall(String server, String project, String namespace, String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'server' is set
        if (server == null) {
            throw new ApiException("Missing the required parameter 'server' when calling projectsServersStatsDelete(Async)");
        }

        // verify the required parameter 'project' is set
        if (project == null) {
            throw new ApiException("Missing the required parameter 'project' when calling projectsServersStatsDelete(Async)");
        }

        // verify the required parameter 'namespace' is set
        if (namespace == null) {
            throw new ApiException("Missing the required parameter 'namespace' when calling projectsServersStatsDelete(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling projectsServersStatsDelete(Async)");
        }

        return projectsServersStatsDeleteCall(server, project, namespace, id, _callback);

    }

    /**
     * Delete a server&#39;s statistics
     * 
     * @param server Server unique identifier expressed as UUID or name. (required)
     * @param project Project unique identifier expressed as UUID or name. (required)
     * @param namespace User or team name. (required)
     * @param id Stats unique identifier expressed as UUID. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> ServerStatistics deleted. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ServerStatistics not found. </td><td>  -  </td></tr>
     </table>
     */
    public void projectsServersStatsDelete(String server, String project, String namespace, String id) throws ApiException {
        projectsServersStatsDeleteWithHttpInfo(server, project, namespace, id);
    }

    /**
     * Delete a server&#39;s statistics
     * 
     * @param server Server unique identifier expressed as UUID or name. (required)
     * @param project Project unique identifier expressed as UUID or name. (required)
     * @param namespace User or team name. (required)
     * @param id Stats unique identifier expressed as UUID. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> ServerStatistics deleted. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ServerStatistics not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> projectsServersStatsDeleteWithHttpInfo(String server, String project, String namespace, String id) throws ApiException {
        okhttp3.Call localVarCall = projectsServersStatsDeleteValidateBeforeCall(server, project, namespace, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a server&#39;s statistics (asynchronously)
     * 
     * @param server Server unique identifier expressed as UUID or name. (required)
     * @param project Project unique identifier expressed as UUID or name. (required)
     * @param namespace User or team name. (required)
     * @param id Stats unique identifier expressed as UUID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> ServerStatistics deleted. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ServerStatistics not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectsServersStatsDeleteAsync(String server, String project, String namespace, String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectsServersStatsDeleteValidateBeforeCall(server, project, namespace, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectsServersStatsRead
     * @param server Server unique identifier expressed as UUID or name. (required)
     * @param project Project unique identifier expressed as UUID or name. (required)
     * @param namespace User or team name. (required)
     * @param id Server statistics unique identifier expressed as UUID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ServerStatistics retrieved </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ServerStatistics not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectsServersStatsReadCall(String server, String project, String namespace, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/{namespace}/projects/{project}/servers/{server}/stats/{id}/"
            .replace("{" + "server" + "}", localVarApiClient.escapeString(server.toString()))
            .replace("{" + "project" + "}", localVarApiClient.escapeString(project.toString()))
            .replace("{" + "namespace" + "}", localVarApiClient.escapeString(namespace.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectsServersStatsReadValidateBeforeCall(String server, String project, String namespace, String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'server' is set
        if (server == null) {
            throw new ApiException("Missing the required parameter 'server' when calling projectsServersStatsRead(Async)");
        }

        // verify the required parameter 'project' is set
        if (project == null) {
            throw new ApiException("Missing the required parameter 'project' when calling projectsServersStatsRead(Async)");
        }

        // verify the required parameter 'namespace' is set
        if (namespace == null) {
            throw new ApiException("Missing the required parameter 'namespace' when calling projectsServersStatsRead(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling projectsServersStatsRead(Async)");
        }

        return projectsServersStatsReadCall(server, project, namespace, id, _callback);

    }

    /**
     * Retrieve a server&#39;s statistics
     * 
     * @param server Server unique identifier expressed as UUID or name. (required)
     * @param project Project unique identifier expressed as UUID or name. (required)
     * @param namespace User or team name. (required)
     * @param id Server statistics unique identifier expressed as UUID. (required)
     * @return ServerStatistics
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ServerStatistics retrieved </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ServerStatistics not found </td><td>  -  </td></tr>
     </table>
     */
    public ServerStatistics projectsServersStatsRead(String server, String project, String namespace, String id) throws ApiException {
        ApiResponse<ServerStatistics> localVarResp = projectsServersStatsReadWithHttpInfo(server, project, namespace, id);
        return localVarResp.getData();
    }

    /**
     * Retrieve a server&#39;s statistics
     * 
     * @param server Server unique identifier expressed as UUID or name. (required)
     * @param project Project unique identifier expressed as UUID or name. (required)
     * @param namespace User or team name. (required)
     * @param id Server statistics unique identifier expressed as UUID. (required)
     * @return ApiResponse&lt;ServerStatistics&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ServerStatistics retrieved </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ServerStatistics not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServerStatistics> projectsServersStatsReadWithHttpInfo(String server, String project, String namespace, String id) throws ApiException {
        okhttp3.Call localVarCall = projectsServersStatsReadValidateBeforeCall(server, project, namespace, id, null);
        Type localVarReturnType = new TypeToken<ServerStatistics>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve a server&#39;s statistics (asynchronously)
     * 
     * @param server Server unique identifier expressed as UUID or name. (required)
     * @param project Project unique identifier expressed as UUID or name. (required)
     * @param namespace User or team name. (required)
     * @param id Server statistics unique identifier expressed as UUID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ServerStatistics retrieved </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ServerStatistics not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectsServersStatsReadAsync(String server, String project, String namespace, String id, final ApiCallback<ServerStatistics> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectsServersStatsReadValidateBeforeCall(server, project, namespace, id, _callback);
        Type localVarReturnType = new TypeToken<ServerStatistics>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectsServersStatsReplace
     * @param server Server unique identifier expressed as UUID or name. (required)
     * @param project Project unique identifier expressed as UUID or name. (required)
     * @param namespace User or team name. (required)
     * @param id Server statistics unique identifier expressed as UUID. (required)
     * @param serverstatsData  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ServerStatistics updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectsServersStatsReplaceCall(String server, String project, String namespace, String id, ServerStatisticsData serverstatsData, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = serverstatsData;

        // create path and map variables
        String localVarPath = "/v1/{namespace}/projects/{project}/servers/{server}/stats/{id}/"
            .replace("{" + "server" + "}", localVarApiClient.escapeString(server.toString()))
            .replace("{" + "project" + "}", localVarApiClient.escapeString(project.toString()))
            .replace("{" + "namespace" + "}", localVarApiClient.escapeString(namespace.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectsServersStatsReplaceValidateBeforeCall(String server, String project, String namespace, String id, ServerStatisticsData serverstatsData, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'server' is set
        if (server == null) {
            throw new ApiException("Missing the required parameter 'server' when calling projectsServersStatsReplace(Async)");
        }

        // verify the required parameter 'project' is set
        if (project == null) {
            throw new ApiException("Missing the required parameter 'project' when calling projectsServersStatsReplace(Async)");
        }

        // verify the required parameter 'namespace' is set
        if (namespace == null) {
            throw new ApiException("Missing the required parameter 'namespace' when calling projectsServersStatsReplace(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling projectsServersStatsReplace(Async)");
        }

        return projectsServersStatsReplaceCall(server, project, namespace, id, serverstatsData, _callback);

    }

    /**
     * Replace a server&#39;s statistics
     * 
     * @param server Server unique identifier expressed as UUID or name. (required)
     * @param project Project unique identifier expressed as UUID or name. (required)
     * @param namespace User or team name. (required)
     * @param id Server statistics unique identifier expressed as UUID. (required)
     * @param serverstatsData  (optional)
     * @return ServerStatistics
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ServerStatistics updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied. </td><td>  -  </td></tr>
     </table>
     */
    public ServerStatistics projectsServersStatsReplace(String server, String project, String namespace, String id, ServerStatisticsData serverstatsData) throws ApiException {
        ApiResponse<ServerStatistics> localVarResp = projectsServersStatsReplaceWithHttpInfo(server, project, namespace, id, serverstatsData);
        return localVarResp.getData();
    }

    /**
     * Replace a server&#39;s statistics
     * 
     * @param server Server unique identifier expressed as UUID or name. (required)
     * @param project Project unique identifier expressed as UUID or name. (required)
     * @param namespace User or team name. (required)
     * @param id Server statistics unique identifier expressed as UUID. (required)
     * @param serverstatsData  (optional)
     * @return ApiResponse&lt;ServerStatistics&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ServerStatistics updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServerStatistics> projectsServersStatsReplaceWithHttpInfo(String server, String project, String namespace, String id, ServerStatisticsData serverstatsData) throws ApiException {
        okhttp3.Call localVarCall = projectsServersStatsReplaceValidateBeforeCall(server, project, namespace, id, serverstatsData, null);
        Type localVarReturnType = new TypeToken<ServerStatistics>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Replace a server&#39;s statistics (asynchronously)
     * 
     * @param server Server unique identifier expressed as UUID or name. (required)
     * @param project Project unique identifier expressed as UUID or name. (required)
     * @param namespace User or team name. (required)
     * @param id Server statistics unique identifier expressed as UUID. (required)
     * @param serverstatsData  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ServerStatistics updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectsServersStatsReplaceAsync(String server, String project, String namespace, String id, ServerStatisticsData serverstatsData, final ApiCallback<ServerStatistics> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectsServersStatsReplaceValidateBeforeCall(server, project, namespace, id, serverstatsData, _callback);
        Type localVarReturnType = new TypeToken<ServerStatistics>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectsServersStatsUpdate
     * @param server Server unique identifier expressed as UUID or name. (required)
     * @param project Project unique identifier expressed as UUID or name. (required)
     * @param namespace User or team name. (required)
     * @param id Server statistics unique identifier expressed as UUID. (required)
     * @param serverstatsData  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ServerStatistics updated. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ServerStatistics not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectsServersStatsUpdateCall(String server, String project, String namespace, String id, ServerStatisticsData serverstatsData, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = serverstatsData;

        // create path and map variables
        String localVarPath = "/v1/{namespace}/projects/{project}/servers/{server}/stats/{id}/"
            .replace("{" + "server" + "}", localVarApiClient.escapeString(server.toString()))
            .replace("{" + "project" + "}", localVarApiClient.escapeString(project.toString()))
            .replace("{" + "namespace" + "}", localVarApiClient.escapeString(namespace.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectsServersStatsUpdateValidateBeforeCall(String server, String project, String namespace, String id, ServerStatisticsData serverstatsData, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'server' is set
        if (server == null) {
            throw new ApiException("Missing the required parameter 'server' when calling projectsServersStatsUpdate(Async)");
        }

        // verify the required parameter 'project' is set
        if (project == null) {
            throw new ApiException("Missing the required parameter 'project' when calling projectsServersStatsUpdate(Async)");
        }

        // verify the required parameter 'namespace' is set
        if (namespace == null) {
            throw new ApiException("Missing the required parameter 'namespace' when calling projectsServersStatsUpdate(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling projectsServersStatsUpdate(Async)");
        }

        return projectsServersStatsUpdateCall(server, project, namespace, id, serverstatsData, _callback);

    }

    /**
     * Update a server&#39;s statistics
     * 
     * @param server Server unique identifier expressed as UUID or name. (required)
     * @param project Project unique identifier expressed as UUID or name. (required)
     * @param namespace User or team name. (required)
     * @param id Server statistics unique identifier expressed as UUID. (required)
     * @param serverstatsData  (optional)
     * @return ServerStatistics
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ServerStatistics updated. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ServerStatistics not found. </td><td>  -  </td></tr>
     </table>
     */
    public ServerStatistics projectsServersStatsUpdate(String server, String project, String namespace, String id, ServerStatisticsData serverstatsData) throws ApiException {
        ApiResponse<ServerStatistics> localVarResp = projectsServersStatsUpdateWithHttpInfo(server, project, namespace, id, serverstatsData);
        return localVarResp.getData();
    }

    /**
     * Update a server&#39;s statistics
     * 
     * @param server Server unique identifier expressed as UUID or name. (required)
     * @param project Project unique identifier expressed as UUID or name. (required)
     * @param namespace User or team name. (required)
     * @param id Server statistics unique identifier expressed as UUID. (required)
     * @param serverstatsData  (optional)
     * @return ApiResponse&lt;ServerStatistics&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ServerStatistics updated. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ServerStatistics not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServerStatistics> projectsServersStatsUpdateWithHttpInfo(String server, String project, String namespace, String id, ServerStatisticsData serverstatsData) throws ApiException {
        okhttp3.Call localVarCall = projectsServersStatsUpdateValidateBeforeCall(server, project, namespace, id, serverstatsData, null);
        Type localVarReturnType = new TypeToken<ServerStatistics>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a server&#39;s statistics (asynchronously)
     * 
     * @param server Server unique identifier expressed as UUID or name. (required)
     * @param project Project unique identifier expressed as UUID or name. (required)
     * @param namespace User or team name. (required)
     * @param id Server statistics unique identifier expressed as UUID. (required)
     * @param serverstatsData  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ServerStatistics updated. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ServerStatistics not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectsServersStatsUpdateAsync(String server, String project, String namespace, String id, ServerStatisticsData serverstatsData, final ApiCallback<ServerStatistics> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectsServersStatsUpdateValidateBeforeCall(server, project, namespace, id, serverstatsData, _callback);
        Type localVarReturnType = new TypeToken<ServerStatistics>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectsServersStatuses
     * @param project Project unique identifier expressed as UUID or name. (required)
     * @param namespace User or team name. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Server statuses list. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectsServersStatusesCall(String project, String namespace, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/{namespace}/projects/{project}/servers/statuses/"
            .replace("{" + "project" + "}", localVarApiClient.escapeString(project.toString()))
            .replace("{" + "namespace" + "}", localVarApiClient.escapeString(namespace.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectsServersStatusesValidateBeforeCall(String project, String namespace, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'project' is set
        if (project == null) {
            throw new ApiException("Missing the required parameter 'project' when calling projectsServersStatuses(Async)");
        }

        // verify the required parameter 'namespace' is set
        if (namespace == null) {
            throw new ApiException("Missing the required parameter 'namespace' when calling projectsServersStatuses(Async)");
        }

        return projectsServersStatusesCall(project, namespace, _callback);

    }

    /**
     * Retrieve server statuses
     * 
     * @param project Project unique identifier expressed as UUID or name. (required)
     * @param namespace User or team name. (required)
     * @return List&lt;ServerStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Server statuses list. </td><td>  -  </td></tr>
     </table>
     */
    public List<ServerStatus> projectsServersStatuses(String project, String namespace) throws ApiException {
        ApiResponse<List<ServerStatus>> localVarResp = projectsServersStatusesWithHttpInfo(project, namespace);
        return localVarResp.getData();
    }

    /**
     * Retrieve server statuses
     * 
     * @param project Project unique identifier expressed as UUID or name. (required)
     * @param namespace User or team name. (required)
     * @return ApiResponse&lt;List&lt;ServerStatus&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Server statuses list. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ServerStatus>> projectsServersStatusesWithHttpInfo(String project, String namespace) throws ApiException {
        okhttp3.Call localVarCall = projectsServersStatusesValidateBeforeCall(project, namespace, null);
        Type localVarReturnType = new TypeToken<List<ServerStatus>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve server statuses (asynchronously)
     * 
     * @param project Project unique identifier expressed as UUID or name. (required)
     * @param namespace User or team name. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Server statuses list. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectsServersStatusesAsync(String project, String namespace, final ApiCallback<List<ServerStatus>> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectsServersStatusesValidateBeforeCall(project, namespace, _callback);
        Type localVarReturnType = new TypeToken<List<ServerStatus>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectsServersStop
     * @param project Project unique identifier expressed as UUID or name. (required)
     * @param namespace User or team name. (required)
     * @param server Server unique identifier expressed as UUID or name. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Server stopped. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectsServersStopCall(String project, String namespace, String server, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/{namespace}/projects/{project}/servers/{server}/stop/"
            .replace("{" + "project" + "}", localVarApiClient.escapeString(project.toString()))
            .replace("{" + "namespace" + "}", localVarApiClient.escapeString(namespace.toString()))
            .replace("{" + "server" + "}", localVarApiClient.escapeString(server.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectsServersStopValidateBeforeCall(String project, String namespace, String server, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'project' is set
        if (project == null) {
            throw new ApiException("Missing the required parameter 'project' when calling projectsServersStop(Async)");
        }

        // verify the required parameter 'namespace' is set
        if (namespace == null) {
            throw new ApiException("Missing the required parameter 'namespace' when calling projectsServersStop(Async)");
        }

        // verify the required parameter 'server' is set
        if (server == null) {
            throw new ApiException("Missing the required parameter 'server' when calling projectsServersStop(Async)");
        }

        return projectsServersStopCall(project, namespace, server, _callback);

    }

    /**
     * Stop a server
     * 
     * @param project Project unique identifier expressed as UUID or name. (required)
     * @param namespace User or team name. (required)
     * @param server Server unique identifier expressed as UUID or name. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Server stopped. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied. </td><td>  -  </td></tr>
     </table>
     */
    public void projectsServersStop(String project, String namespace, String server) throws ApiException {
        projectsServersStopWithHttpInfo(project, namespace, server);
    }

    /**
     * Stop a server
     * 
     * @param project Project unique identifier expressed as UUID or name. (required)
     * @param namespace User or team name. (required)
     * @param server Server unique identifier expressed as UUID or name. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Server stopped. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> projectsServersStopWithHttpInfo(String project, String namespace, String server) throws ApiException {
        okhttp3.Call localVarCall = projectsServersStopValidateBeforeCall(project, namespace, server, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Stop a server (asynchronously)
     * 
     * @param project Project unique identifier expressed as UUID or name. (required)
     * @param namespace User or team name. (required)
     * @param server Server unique identifier expressed as UUID or name. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Server stopped. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectsServersStopAsync(String project, String namespace, String server, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectsServersStopValidateBeforeCall(project, namespace, server, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectsServersUpdate
     * @param project Project unique identifier expressed as UUID or name. (required)
     * @param namespace User or team name. (required)
     * @param server Server unique identifier expressed as UUID or name. (required)
     * @param serverData  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Server updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Server not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectsServersUpdateCall(String project, String namespace, String server, ServerData serverData, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = serverData;

        // create path and map variables
        String localVarPath = "/v1/{namespace}/projects/{project}/servers/{server}/"
            .replace("{" + "project" + "}", localVarApiClient.escapeString(project.toString()))
            .replace("{" + "namespace" + "}", localVarApiClient.escapeString(namespace.toString()))
            .replace("{" + "server" + "}", localVarApiClient.escapeString(server.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectsServersUpdateValidateBeforeCall(String project, String namespace, String server, ServerData serverData, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'project' is set
        if (project == null) {
            throw new ApiException("Missing the required parameter 'project' when calling projectsServersUpdate(Async)");
        }

        // verify the required parameter 'namespace' is set
        if (namespace == null) {
            throw new ApiException("Missing the required parameter 'namespace' when calling projectsServersUpdate(Async)");
        }

        // verify the required parameter 'server' is set
        if (server == null) {
            throw new ApiException("Missing the required parameter 'server' when calling projectsServersUpdate(Async)");
        }

        return projectsServersUpdateCall(project, namespace, server, serverData, _callback);

    }

    /**
     * Update a server
     * 
     * @param project Project unique identifier expressed as UUID or name. (required)
     * @param namespace User or team name. (required)
     * @param server Server unique identifier expressed as UUID or name. (required)
     * @param serverData  (optional)
     * @return Server
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Server updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Server not found </td><td>  -  </td></tr>
     </table>
     */
    public Server projectsServersUpdate(String project, String namespace, String server, ServerData serverData) throws ApiException {
        ApiResponse<Server> localVarResp = projectsServersUpdateWithHttpInfo(project, namespace, server, serverData);
        return localVarResp.getData();
    }

    /**
     * Update a server
     * 
     * @param project Project unique identifier expressed as UUID or name. (required)
     * @param namespace User or team name. (required)
     * @param server Server unique identifier expressed as UUID or name. (required)
     * @param serverData  (optional)
     * @return ApiResponse&lt;Server&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Server updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Server not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Server> projectsServersUpdateWithHttpInfo(String project, String namespace, String server, ServerData serverData) throws ApiException {
        okhttp3.Call localVarCall = projectsServersUpdateValidateBeforeCall(project, namespace, server, serverData, null);
        Type localVarReturnType = new TypeToken<Server>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a server (asynchronously)
     * 
     * @param project Project unique identifier expressed as UUID or name. (required)
     * @param namespace User or team name. (required)
     * @param server Server unique identifier expressed as UUID or name. (required)
     * @param serverData  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Server updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Server not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectsServersUpdateAsync(String project, String namespace, String server, ServerData serverData, final ApiCallback<Server> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectsServersUpdateValidateBeforeCall(project, namespace, server, serverData, _callback);
        Type localVarReturnType = new TypeToken<Server>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectsUpdate
     * @param namespace User or team name. (required)
     * @param project Project unique identifier expressed as UUID or name. (required)
     * @param projectData  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Project updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Project not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectsUpdateCall(String namespace, String project, ProjectData projectData, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = projectData;

        // create path and map variables
        String localVarPath = "/v1/{namespace}/projects/{project}/"
            .replace("{" + "namespace" + "}", localVarApiClient.escapeString(namespace.toString()))
            .replace("{" + "project" + "}", localVarApiClient.escapeString(project.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectsUpdateValidateBeforeCall(String namespace, String project, ProjectData projectData, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'namespace' is set
        if (namespace == null) {
            throw new ApiException("Missing the required parameter 'namespace' when calling projectsUpdate(Async)");
        }

        // verify the required parameter 'project' is set
        if (project == null) {
            throw new ApiException("Missing the required parameter 'project' when calling projectsUpdate(Async)");
        }

        return projectsUpdateCall(namespace, project, projectData, _callback);

    }

    /**
     * Update a project
     * 
     * @param namespace User or team name. (required)
     * @param project Project unique identifier expressed as UUID or name. (required)
     * @param projectData  (optional)
     * @return Project
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Project updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Project not found </td><td>  -  </td></tr>
     </table>
     */
    public Project projectsUpdate(String namespace, String project, ProjectData projectData) throws ApiException {
        ApiResponse<Project> localVarResp = projectsUpdateWithHttpInfo(namespace, project, projectData);
        return localVarResp.getData();
    }

    /**
     * Update a project
     * 
     * @param namespace User or team name. (required)
     * @param project Project unique identifier expressed as UUID or name. (required)
     * @param projectData  (optional)
     * @return ApiResponse&lt;Project&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Project updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Project not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Project> projectsUpdateWithHttpInfo(String namespace, String project, ProjectData projectData) throws ApiException {
        okhttp3.Call localVarCall = projectsUpdateValidateBeforeCall(namespace, project, projectData, null);
        Type localVarReturnType = new TypeToken<Project>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a project (asynchronously)
     * 
     * @param namespace User or team name. (required)
     * @param project Project unique identifier expressed as UUID or name. (required)
     * @param projectData  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Project updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Project not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectsUpdateAsync(String namespace, String project, ProjectData projectData, final ApiCallback<Project> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectsUpdateValidateBeforeCall(namespace, project, projectData, _callback);
        Type localVarReturnType = new TypeToken<Project>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for serviceTriggerCreate
     * @param server Server unique identifier expressed as UUID or name. (required)
     * @param project Project unique identifier expressed as UUID or name. (required)
     * @param namespace User or team name. (required)
     * @param serverAction Server action. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Server action created. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serviceTriggerCreateCall(String server, String project, String namespace, ServerActionData serverAction, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = serverAction;

        // create path and map variables
        String localVarPath = "/v1/{namespace}/projects/{project}/servers/{server}/triggers/"
            .replace("{" + "server" + "}", localVarApiClient.escapeString(server.toString()))
            .replace("{" + "project" + "}", localVarApiClient.escapeString(project.toString()))
            .replace("{" + "namespace" + "}", localVarApiClient.escapeString(namespace.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call serviceTriggerCreateValidateBeforeCall(String server, String project, String namespace, ServerActionData serverAction, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'server' is set
        if (server == null) {
            throw new ApiException("Missing the required parameter 'server' when calling serviceTriggerCreate(Async)");
        }

        // verify the required parameter 'project' is set
        if (project == null) {
            throw new ApiException("Missing the required parameter 'project' when calling serviceTriggerCreate(Async)");
        }

        // verify the required parameter 'namespace' is set
        if (namespace == null) {
            throw new ApiException("Missing the required parameter 'namespace' when calling serviceTriggerCreate(Async)");
        }

        return serviceTriggerCreateCall(server, project, namespace, serverAction, _callback);

    }

    /**
     * Create a new server trigger
     * 
     * @param server Server unique identifier expressed as UUID or name. (required)
     * @param project Project unique identifier expressed as UUID or name. (required)
     * @param namespace User or team name. (required)
     * @param serverAction Server action. (optional)
     * @return ServerAction
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Server action created. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied </td><td>  -  </td></tr>
     </table>
     */
    public ServerAction serviceTriggerCreate(String server, String project, String namespace, ServerActionData serverAction) throws ApiException {
        ApiResponse<ServerAction> localVarResp = serviceTriggerCreateWithHttpInfo(server, project, namespace, serverAction);
        return localVarResp.getData();
    }

    /**
     * Create a new server trigger
     * 
     * @param server Server unique identifier expressed as UUID or name. (required)
     * @param project Project unique identifier expressed as UUID or name. (required)
     * @param namespace User or team name. (required)
     * @param serverAction Server action. (optional)
     * @return ApiResponse&lt;ServerAction&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Server action created. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServerAction> serviceTriggerCreateWithHttpInfo(String server, String project, String namespace, ServerActionData serverAction) throws ApiException {
        okhttp3.Call localVarCall = serviceTriggerCreateValidateBeforeCall(server, project, namespace, serverAction, null);
        Type localVarReturnType = new TypeToken<ServerAction>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a new server trigger (asynchronously)
     * 
     * @param server Server unique identifier expressed as UUID or name. (required)
     * @param project Project unique identifier expressed as UUID or name. (required)
     * @param namespace User or team name. (required)
     * @param serverAction Server action. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Server action created. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serviceTriggerCreateAsync(String server, String project, String namespace, ServerActionData serverAction, final ApiCallback<ServerAction> _callback) throws ApiException {

        okhttp3.Call localVarCall = serviceTriggerCreateValidateBeforeCall(server, project, namespace, serverAction, _callback);
        Type localVarReturnType = new TypeToken<ServerAction>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for serviceTriggerDelete
     * @param server Server unique identifier expressed as UUID or name. (required)
     * @param project Project unique identifier expressed as UUID or name. (required)
     * @param namespace User or team name. (required)
     * @param trigger Trigger identifier expressed as UUID or name. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> ServerAction deleted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ServerAction not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serviceTriggerDeleteCall(String server, String project, String namespace, String trigger, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/{namespace}/projects/{project}/servers/{server}/triggers/{trigger}/"
            .replace("{" + "server" + "}", localVarApiClient.escapeString(server.toString()))
            .replace("{" + "project" + "}", localVarApiClient.escapeString(project.toString()))
            .replace("{" + "namespace" + "}", localVarApiClient.escapeString(namespace.toString()))
            .replace("{" + "trigger" + "}", localVarApiClient.escapeString(trigger.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call serviceTriggerDeleteValidateBeforeCall(String server, String project, String namespace, String trigger, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'server' is set
        if (server == null) {
            throw new ApiException("Missing the required parameter 'server' when calling serviceTriggerDelete(Async)");
        }

        // verify the required parameter 'project' is set
        if (project == null) {
            throw new ApiException("Missing the required parameter 'project' when calling serviceTriggerDelete(Async)");
        }

        // verify the required parameter 'namespace' is set
        if (namespace == null) {
            throw new ApiException("Missing the required parameter 'namespace' when calling serviceTriggerDelete(Async)");
        }

        // verify the required parameter 'trigger' is set
        if (trigger == null) {
            throw new ApiException("Missing the required parameter 'trigger' when calling serviceTriggerDelete(Async)");
        }

        return serviceTriggerDeleteCall(server, project, namespace, trigger, _callback);

    }

    /**
     * Delete a server trigger
     * 
     * @param server Server unique identifier expressed as UUID or name. (required)
     * @param project Project unique identifier expressed as UUID or name. (required)
     * @param namespace User or team name. (required)
     * @param trigger Trigger identifier expressed as UUID or name. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> ServerAction deleted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ServerAction not found </td><td>  -  </td></tr>
     </table>
     */
    public void serviceTriggerDelete(String server, String project, String namespace, String trigger) throws ApiException {
        serviceTriggerDeleteWithHttpInfo(server, project, namespace, trigger);
    }

    /**
     * Delete a server trigger
     * 
     * @param server Server unique identifier expressed as UUID or name. (required)
     * @param project Project unique identifier expressed as UUID or name. (required)
     * @param namespace User or team name. (required)
     * @param trigger Trigger identifier expressed as UUID or name. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> ServerAction deleted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ServerAction not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> serviceTriggerDeleteWithHttpInfo(String server, String project, String namespace, String trigger) throws ApiException {
        okhttp3.Call localVarCall = serviceTriggerDeleteValidateBeforeCall(server, project, namespace, trigger, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a server trigger (asynchronously)
     * 
     * @param server Server unique identifier expressed as UUID or name. (required)
     * @param project Project unique identifier expressed as UUID or name. (required)
     * @param namespace User or team name. (required)
     * @param trigger Trigger identifier expressed as UUID or name. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> ServerAction deleted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ServerAction not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serviceTriggerDeleteAsync(String server, String project, String namespace, String trigger, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = serviceTriggerDeleteValidateBeforeCall(server, project, namespace, trigger, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for serviceTriggerList
     * @param server Server unique identifier expressed as UUID or name. (required)
     * @param project Project unique identifier expressed as UUID or name. (required)
     * @param namespace User or team name. (required)
     * @param name Trigger name. (optional)
     * @param limit Limit when getting triggers. (optional)
     * @param offset Offset when getting triggers. (optional)
     * @param ordering Ordering when getting triggers. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ServerAction list </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serviceTriggerListCall(String server, String project, String namespace, String name, String limit, String offset, String ordering, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/{namespace}/projects/{project}/servers/{server}/triggers/"
            .replace("{" + "server" + "}", localVarApiClient.escapeString(server.toString()))
            .replace("{" + "project" + "}", localVarApiClient.escapeString(project.toString()))
            .replace("{" + "namespace" + "}", localVarApiClient.escapeString(namespace.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call serviceTriggerListValidateBeforeCall(String server, String project, String namespace, String name, String limit, String offset, String ordering, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'server' is set
        if (server == null) {
            throw new ApiException("Missing the required parameter 'server' when calling serviceTriggerList(Async)");
        }

        // verify the required parameter 'project' is set
        if (project == null) {
            throw new ApiException("Missing the required parameter 'project' when calling serviceTriggerList(Async)");
        }

        // verify the required parameter 'namespace' is set
        if (namespace == null) {
            throw new ApiException("Missing the required parameter 'namespace' when calling serviceTriggerList(Async)");
        }

        return serviceTriggerListCall(server, project, namespace, name, limit, offset, ordering, _callback);

    }

    /**
     * Retrieve server triggers
     * 
     * @param server Server unique identifier expressed as UUID or name. (required)
     * @param project Project unique identifier expressed as UUID or name. (required)
     * @param namespace User or team name. (required)
     * @param name Trigger name. (optional)
     * @param limit Limit when getting triggers. (optional)
     * @param offset Offset when getting triggers. (optional)
     * @param ordering Ordering when getting triggers. (optional)
     * @return List&lt;ServerAction&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ServerAction list </td><td>  -  </td></tr>
     </table>
     */
    public List<ServerAction> serviceTriggerList(String server, String project, String namespace, String name, String limit, String offset, String ordering) throws ApiException {
        ApiResponse<List<ServerAction>> localVarResp = serviceTriggerListWithHttpInfo(server, project, namespace, name, limit, offset, ordering);
        return localVarResp.getData();
    }

    /**
     * Retrieve server triggers
     * 
     * @param server Server unique identifier expressed as UUID or name. (required)
     * @param project Project unique identifier expressed as UUID or name. (required)
     * @param namespace User or team name. (required)
     * @param name Trigger name. (optional)
     * @param limit Limit when getting triggers. (optional)
     * @param offset Offset when getting triggers. (optional)
     * @param ordering Ordering when getting triggers. (optional)
     * @return ApiResponse&lt;List&lt;ServerAction&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ServerAction list </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ServerAction>> serviceTriggerListWithHttpInfo(String server, String project, String namespace, String name, String limit, String offset, String ordering) throws ApiException {
        okhttp3.Call localVarCall = serviceTriggerListValidateBeforeCall(server, project, namespace, name, limit, offset, ordering, null);
        Type localVarReturnType = new TypeToken<List<ServerAction>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve server triggers (asynchronously)
     * 
     * @param server Server unique identifier expressed as UUID or name. (required)
     * @param project Project unique identifier expressed as UUID or name. (required)
     * @param namespace User or team name. (required)
     * @param name Trigger name. (optional)
     * @param limit Limit when getting triggers. (optional)
     * @param offset Offset when getting triggers. (optional)
     * @param ordering Ordering when getting triggers. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ServerAction list </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serviceTriggerListAsync(String server, String project, String namespace, String name, String limit, String offset, String ordering, final ApiCallback<List<ServerAction>> _callback) throws ApiException {

        okhttp3.Call localVarCall = serviceTriggerListValidateBeforeCall(server, project, namespace, name, limit, offset, ordering, _callback);
        Type localVarReturnType = new TypeToken<List<ServerAction>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for serviceTriggerRead
     * @param server Server unique identifier expressed as UUID or name. (required)
     * @param project Project unique identifier expressed as UUID or name. (required)
     * @param namespace User or team name. (required)
     * @param trigger Trigger unique identifier. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Server action retrieved. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ServerAction not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serviceTriggerReadCall(String server, String project, String namespace, String trigger, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/{namespace}/projects/{project}/servers/{server}/triggers/{trigger}/"
            .replace("{" + "server" + "}", localVarApiClient.escapeString(server.toString()))
            .replace("{" + "project" + "}", localVarApiClient.escapeString(project.toString()))
            .replace("{" + "namespace" + "}", localVarApiClient.escapeString(namespace.toString()))
            .replace("{" + "trigger" + "}", localVarApiClient.escapeString(trigger.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call serviceTriggerReadValidateBeforeCall(String server, String project, String namespace, String trigger, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'server' is set
        if (server == null) {
            throw new ApiException("Missing the required parameter 'server' when calling serviceTriggerRead(Async)");
        }

        // verify the required parameter 'project' is set
        if (project == null) {
            throw new ApiException("Missing the required parameter 'project' when calling serviceTriggerRead(Async)");
        }

        // verify the required parameter 'namespace' is set
        if (namespace == null) {
            throw new ApiException("Missing the required parameter 'namespace' when calling serviceTriggerRead(Async)");
        }

        // verify the required parameter 'trigger' is set
        if (trigger == null) {
            throw new ApiException("Missing the required parameter 'trigger' when calling serviceTriggerRead(Async)");
        }

        return serviceTriggerReadCall(server, project, namespace, trigger, _callback);

    }

    /**
     * Get a server trigger
     * 
     * @param server Server unique identifier expressed as UUID or name. (required)
     * @param project Project unique identifier expressed as UUID or name. (required)
     * @param namespace User or team name. (required)
     * @param trigger Trigger unique identifier. (required)
     * @return ServerAction
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Server action retrieved. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ServerAction not found. </td><td>  -  </td></tr>
     </table>
     */
    public ServerAction serviceTriggerRead(String server, String project, String namespace, String trigger) throws ApiException {
        ApiResponse<ServerAction> localVarResp = serviceTriggerReadWithHttpInfo(server, project, namespace, trigger);
        return localVarResp.getData();
    }

    /**
     * Get a server trigger
     * 
     * @param server Server unique identifier expressed as UUID or name. (required)
     * @param project Project unique identifier expressed as UUID or name. (required)
     * @param namespace User or team name. (required)
     * @param trigger Trigger unique identifier. (required)
     * @return ApiResponse&lt;ServerAction&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Server action retrieved. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ServerAction not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServerAction> serviceTriggerReadWithHttpInfo(String server, String project, String namespace, String trigger) throws ApiException {
        okhttp3.Call localVarCall = serviceTriggerReadValidateBeforeCall(server, project, namespace, trigger, null);
        Type localVarReturnType = new TypeToken<ServerAction>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a server trigger (asynchronously)
     * 
     * @param server Server unique identifier expressed as UUID or name. (required)
     * @param project Project unique identifier expressed as UUID or name. (required)
     * @param namespace User or team name. (required)
     * @param trigger Trigger unique identifier. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Server action retrieved. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ServerAction not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serviceTriggerReadAsync(String server, String project, String namespace, String trigger, final ApiCallback<ServerAction> _callback) throws ApiException {

        okhttp3.Call localVarCall = serviceTriggerReadValidateBeforeCall(server, project, namespace, trigger, _callback);
        Type localVarReturnType = new TypeToken<ServerAction>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for serviceTriggerReplace
     * @param server Server unique identifier expressed as UUID or name. (required)
     * @param project Project unique identifier expressed as UUID or name. (required)
     * @param namespace User or team name. (required)
     * @param trigger Trigger unique identifier. (required)
     * @param serverAction  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ServerAction updated. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Server action not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serviceTriggerReplaceCall(String server, String project, String namespace, String trigger, ServerActionData serverAction, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = serverAction;

        // create path and map variables
        String localVarPath = "/v1/{namespace}/projects/{project}/servers/{server}/triggers/{trigger}/"
            .replace("{" + "server" + "}", localVarApiClient.escapeString(server.toString()))
            .replace("{" + "project" + "}", localVarApiClient.escapeString(project.toString()))
            .replace("{" + "namespace" + "}", localVarApiClient.escapeString(namespace.toString()))
            .replace("{" + "trigger" + "}", localVarApiClient.escapeString(trigger.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call serviceTriggerReplaceValidateBeforeCall(String server, String project, String namespace, String trigger, ServerActionData serverAction, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'server' is set
        if (server == null) {
            throw new ApiException("Missing the required parameter 'server' when calling serviceTriggerReplace(Async)");
        }

        // verify the required parameter 'project' is set
        if (project == null) {
            throw new ApiException("Missing the required parameter 'project' when calling serviceTriggerReplace(Async)");
        }

        // verify the required parameter 'namespace' is set
        if (namespace == null) {
            throw new ApiException("Missing the required parameter 'namespace' when calling serviceTriggerReplace(Async)");
        }

        // verify the required parameter 'trigger' is set
        if (trigger == null) {
            throw new ApiException("Missing the required parameter 'trigger' when calling serviceTriggerReplace(Async)");
        }

        return serviceTriggerReplaceCall(server, project, namespace, trigger, serverAction, _callback);

    }

    /**
     * Replace a server trigger
     * 
     * @param server Server unique identifier expressed as UUID or name. (required)
     * @param project Project unique identifier expressed as UUID or name. (required)
     * @param namespace User or team name. (required)
     * @param trigger Trigger unique identifier. (required)
     * @param serverAction  (optional)
     * @return ServerAction
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ServerAction updated. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Server action not found. </td><td>  -  </td></tr>
     </table>
     */
    public ServerAction serviceTriggerReplace(String server, String project, String namespace, String trigger, ServerActionData serverAction) throws ApiException {
        ApiResponse<ServerAction> localVarResp = serviceTriggerReplaceWithHttpInfo(server, project, namespace, trigger, serverAction);
        return localVarResp.getData();
    }

    /**
     * Replace a server trigger
     * 
     * @param server Server unique identifier expressed as UUID or name. (required)
     * @param project Project unique identifier expressed as UUID or name. (required)
     * @param namespace User or team name. (required)
     * @param trigger Trigger unique identifier. (required)
     * @param serverAction  (optional)
     * @return ApiResponse&lt;ServerAction&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ServerAction updated. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Server action not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServerAction> serviceTriggerReplaceWithHttpInfo(String server, String project, String namespace, String trigger, ServerActionData serverAction) throws ApiException {
        okhttp3.Call localVarCall = serviceTriggerReplaceValidateBeforeCall(server, project, namespace, trigger, serverAction, null);
        Type localVarReturnType = new TypeToken<ServerAction>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Replace a server trigger (asynchronously)
     * 
     * @param server Server unique identifier expressed as UUID or name. (required)
     * @param project Project unique identifier expressed as UUID or name. (required)
     * @param namespace User or team name. (required)
     * @param trigger Trigger unique identifier. (required)
     * @param serverAction  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ServerAction updated. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Server action not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serviceTriggerReplaceAsync(String server, String project, String namespace, String trigger, ServerActionData serverAction, final ApiCallback<ServerAction> _callback) throws ApiException {

        okhttp3.Call localVarCall = serviceTriggerReplaceValidateBeforeCall(server, project, namespace, trigger, serverAction, _callback);
        Type localVarReturnType = new TypeToken<ServerAction>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for serviceTriggerUpdate
     * @param server Server unique identifier expressed as UUID or name. (required)
     * @param project Project unique identifier expressed as UUID or name. (required)
     * @param namespace User or team name. (required)
     * @param trigger Trigger identifier expressed as UUID or name. (required)
     * @param serverAction  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Server action updated. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Server action not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serviceTriggerUpdateCall(String server, String project, String namespace, String trigger, ServerActionData serverAction, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = serverAction;

        // create path and map variables
        String localVarPath = "/v1/{namespace}/projects/{project}/servers/{server}/triggers/{trigger}/"
            .replace("{" + "server" + "}", localVarApiClient.escapeString(server.toString()))
            .replace("{" + "project" + "}", localVarApiClient.escapeString(project.toString()))
            .replace("{" + "namespace" + "}", localVarApiClient.escapeString(namespace.toString()))
            .replace("{" + "trigger" + "}", localVarApiClient.escapeString(trigger.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call serviceTriggerUpdateValidateBeforeCall(String server, String project, String namespace, String trigger, ServerActionData serverAction, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'server' is set
        if (server == null) {
            throw new ApiException("Missing the required parameter 'server' when calling serviceTriggerUpdate(Async)");
        }

        // verify the required parameter 'project' is set
        if (project == null) {
            throw new ApiException("Missing the required parameter 'project' when calling serviceTriggerUpdate(Async)");
        }

        // verify the required parameter 'namespace' is set
        if (namespace == null) {
            throw new ApiException("Missing the required parameter 'namespace' when calling serviceTriggerUpdate(Async)");
        }

        // verify the required parameter 'trigger' is set
        if (trigger == null) {
            throw new ApiException("Missing the required parameter 'trigger' when calling serviceTriggerUpdate(Async)");
        }

        return serviceTriggerUpdateCall(server, project, namespace, trigger, serverAction, _callback);

    }

    /**
     * Update a server trigger
     * 
     * @param server Server unique identifier expressed as UUID or name. (required)
     * @param project Project unique identifier expressed as UUID or name. (required)
     * @param namespace User or team name. (required)
     * @param trigger Trigger identifier expressed as UUID or name. (required)
     * @param serverAction  (optional)
     * @return ServerAction
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Server action updated. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Server action not found. </td><td>  -  </td></tr>
     </table>
     */
    public ServerAction serviceTriggerUpdate(String server, String project, String namespace, String trigger, ServerActionData serverAction) throws ApiException {
        ApiResponse<ServerAction> localVarResp = serviceTriggerUpdateWithHttpInfo(server, project, namespace, trigger, serverAction);
        return localVarResp.getData();
    }

    /**
     * Update a server trigger
     * 
     * @param server Server unique identifier expressed as UUID or name. (required)
     * @param project Project unique identifier expressed as UUID or name. (required)
     * @param namespace User or team name. (required)
     * @param trigger Trigger identifier expressed as UUID or name. (required)
     * @param serverAction  (optional)
     * @return ApiResponse&lt;ServerAction&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Server action updated. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Server action not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServerAction> serviceTriggerUpdateWithHttpInfo(String server, String project, String namespace, String trigger, ServerActionData serverAction) throws ApiException {
        okhttp3.Call localVarCall = serviceTriggerUpdateValidateBeforeCall(server, project, namespace, trigger, serverAction, null);
        Type localVarReturnType = new TypeToken<ServerAction>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a server trigger (asynchronously)
     * 
     * @param server Server unique identifier expressed as UUID or name. (required)
     * @param project Project unique identifier expressed as UUID or name. (required)
     * @param namespace User or team name. (required)
     * @param trigger Trigger identifier expressed as UUID or name. (required)
     * @param serverAction  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Server action updated. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Server action not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serviceTriggerUpdateAsync(String server, String project, String namespace, String trigger, ServerActionData serverAction, final ApiCallback<ServerAction> _callback) throws ApiException {

        okhttp3.Call localVarCall = serviceTriggerUpdateValidateBeforeCall(server, project, namespace, trigger, serverAction, _callback);
        Type localVarReturnType = new TypeToken<ServerAction>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
