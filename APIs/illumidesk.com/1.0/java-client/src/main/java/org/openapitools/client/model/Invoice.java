/*
 * IllumiDesk
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Invoice
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:54:22.511892-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Invoice {
  public static final String SERIALIZED_NAME_AMOUNT_DUE = "amount_due";
  @SerializedName(SERIALIZED_NAME_AMOUNT_DUE)
  private Integer amountDue;

  public static final String SERIALIZED_NAME_APPLICATION_FEE = "application_fee";
  @SerializedName(SERIALIZED_NAME_APPLICATION_FEE)
  private Integer applicationFee;

  public static final String SERIALIZED_NAME_ATTEMPT_COUNT = "attempt_count";
  @SerializedName(SERIALIZED_NAME_ATTEMPT_COUNT)
  private Integer attemptCount;

  public static final String SERIALIZED_NAME_ATTEMPTED = "attempted";
  @SerializedName(SERIALIZED_NAME_ATTEMPTED)
  private Boolean attempted;

  public static final String SERIALIZED_NAME_CLOSED = "closed";
  @SerializedName(SERIALIZED_NAME_CLOSED)
  private Boolean closed;

  public static final String SERIALIZED_NAME_CREATED = "created";
  @SerializedName(SERIALIZED_NAME_CREATED)
  private String created;

  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  private String currency;

  public static final String SERIALIZED_NAME_CUSTOMER = "customer";
  @SerializedName(SERIALIZED_NAME_CUSTOMER)
  private String customer;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_INVOICE_DATE = "invoice_date";
  @SerializedName(SERIALIZED_NAME_INVOICE_DATE)
  private String invoiceDate;

  public static final String SERIALIZED_NAME_LIVEMODE = "livemode";
  @SerializedName(SERIALIZED_NAME_LIVEMODE)
  private Boolean livemode;

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private Object metadata;

  public static final String SERIALIZED_NAME_NEXT_PAYMENT_ATTEMPT = "next_payment_attempt";
  @SerializedName(SERIALIZED_NAME_NEXT_PAYMENT_ATTEMPT)
  private String nextPaymentAttempt;

  public static final String SERIALIZED_NAME_PAID = "paid";
  @SerializedName(SERIALIZED_NAME_PAID)
  private Boolean paid;

  public static final String SERIALIZED_NAME_PERIOD_END = "period_end";
  @SerializedName(SERIALIZED_NAME_PERIOD_END)
  private String periodEnd;

  public static final String SERIALIZED_NAME_PERIOD_START = "period_start";
  @SerializedName(SERIALIZED_NAME_PERIOD_START)
  private String periodStart;

  public static final String SERIALIZED_NAME_RECIEPT_NUMBER = "reciept_number";
  @SerializedName(SERIALIZED_NAME_RECIEPT_NUMBER)
  private String recieptNumber;

  public static final String SERIALIZED_NAME_STARTING_BALANCE = "starting_balance";
  @SerializedName(SERIALIZED_NAME_STARTING_BALANCE)
  private Integer startingBalance;

  public static final String SERIALIZED_NAME_STATEMENT_DESCRIPTOR = "statement_descriptor";
  @SerializedName(SERIALIZED_NAME_STATEMENT_DESCRIPTOR)
  private String statementDescriptor;

  public static final String SERIALIZED_NAME_STRIPE_ID = "stripe_id";
  @SerializedName(SERIALIZED_NAME_STRIPE_ID)
  private String stripeId;

  public static final String SERIALIZED_NAME_SUBSCRIPTION = "subscription";
  @SerializedName(SERIALIZED_NAME_SUBSCRIPTION)
  private String subscription;

  public static final String SERIALIZED_NAME_SUBTOTAL = "subtotal";
  @SerializedName(SERIALIZED_NAME_SUBTOTAL)
  private Integer subtotal;

  public static final String SERIALIZED_NAME_TAX = "tax";
  @SerializedName(SERIALIZED_NAME_TAX)
  private Integer tax;

  public static final String SERIALIZED_NAME_TOTAL = "total";
  @SerializedName(SERIALIZED_NAME_TOTAL)
  private Integer total;

  public Invoice() {
  }

  public Invoice amountDue(Integer amountDue) {
    this.amountDue = amountDue;
    return this;
  }

  /**
   * Amount due set in invoice.
   * @return amountDue
   */
  @javax.annotation.Nonnull
  public Integer getAmountDue() {
    return amountDue;
  }

  public void setAmountDue(Integer amountDue) {
    this.amountDue = amountDue;
  }


  public Invoice applicationFee(Integer applicationFee) {
    this.applicationFee = applicationFee;
    return this;
  }

  /**
   * Application fee set in invoice.
   * @return applicationFee
   */
  @javax.annotation.Nullable
  public Integer getApplicationFee() {
    return applicationFee;
  }

  public void setApplicationFee(Integer applicationFee) {
    this.applicationFee = applicationFee;
  }


  public Invoice attemptCount(Integer attemptCount) {
    this.attemptCount = attemptCount;
    return this;
  }

  /**
   * Number of attempts to deliver invoice.
   * @return attemptCount
   */
  @javax.annotation.Nullable
  public Integer getAttemptCount() {
    return attemptCount;
  }

  public void setAttemptCount(Integer attemptCount) {
    this.attemptCount = attemptCount;
  }


  public Invoice attempted(Boolean attempted) {
    this.attempted = attempted;
    return this;
  }

  /**
   * Boolean to determine whether delivery attempt executed, or not.
   * @return attempted
   */
  @javax.annotation.Nullable
  public Boolean getAttempted() {
    return attempted;
  }

  public void setAttempted(Boolean attempted) {
    this.attempted = attempted;
  }


  public Invoice closed(Boolean closed) {
    this.closed = closed;
    return this;
  }

  /**
   * Invoice closed, or pending.
   * @return closed
   */
  @javax.annotation.Nullable
  public Boolean getClosed() {
    return closed;
  }

  public void setClosed(Boolean closed) {
    this.closed = closed;
  }


  public Invoice created(String created) {
    this.created = created;
    return this;
  }

  /**
   * Date and time when invoice was created.
   * @return created
   */
  @javax.annotation.Nonnull
  public String getCreated() {
    return created;
  }

  public void setCreated(String created) {
    this.created = created;
  }


  public Invoice currency(String currency) {
    this.currency = currency;
    return this;
  }

  /**
   * Currency used in invoice.
   * @return currency
   */
  @javax.annotation.Nonnull
  public String getCurrency() {
    return currency;
  }

  public void setCurrency(String currency) {
    this.currency = currency;
  }


  public Invoice customer(String customer) {
    this.customer = customer;
    return this;
  }

  /**
   * Customer name.
   * @return customer
   */
  @javax.annotation.Nonnull
  public String getCustomer() {
    return customer;
  }

  public void setCustomer(String customer) {
    this.customer = customer;
  }


  public Invoice description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Invoice description.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public Invoice id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Invoice unique identifier expressed as UUID.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public Invoice invoiceDate(String invoiceDate) {
    this.invoiceDate = invoiceDate;
    return this;
  }

  /**
   * Invoice issue date.
   * @return invoiceDate
   */
  @javax.annotation.Nonnull
  public String getInvoiceDate() {
    return invoiceDate;
  }

  public void setInvoiceDate(String invoiceDate) {
    this.invoiceDate = invoiceDate;
  }


  public Invoice livemode(Boolean livemode) {
    this.livemode = livemode;
    return this;
  }

  /**
   * Boolean that determines whether invoice is live, or not.
   * @return livemode
   */
  @javax.annotation.Nullable
  public Boolean getLivemode() {
    return livemode;
  }

  public void setLivemode(Boolean livemode) {
    this.livemode = livemode;
  }


  public Invoice metadata(Object metadata) {
    this.metadata = metadata;
    return this;
  }

  /**
   * Optional metadata object of invoice.
   * @return metadata
   */
  @javax.annotation.Nullable
  public Object getMetadata() {
    return metadata;
  }

  public void setMetadata(Object metadata) {
    this.metadata = metadata;
  }


  public Invoice nextPaymentAttempt(String nextPaymentAttempt) {
    this.nextPaymentAttempt = nextPaymentAttempt;
    return this;
  }

  /**
   * Next payment attempt.
   * @return nextPaymentAttempt
   */
  @javax.annotation.Nullable
  public String getNextPaymentAttempt() {
    return nextPaymentAttempt;
  }

  public void setNextPaymentAttempt(String nextPaymentAttempt) {
    this.nextPaymentAttempt = nextPaymentAttempt;
  }


  public Invoice paid(Boolean paid) {
    this.paid = paid;
    return this;
  }

  /**
   * Determines whether invoice has been paid, or not.
   * @return paid
   */
  @javax.annotation.Nullable
  public Boolean getPaid() {
    return paid;
  }

  public void setPaid(Boolean paid) {
    this.paid = paid;
  }


  public Invoice periodEnd(String periodEnd) {
    this.periodEnd = periodEnd;
    return this;
  }

  /**
   * Invoice end period.
   * @return periodEnd
   */
  @javax.annotation.Nonnull
  public String getPeriodEnd() {
    return periodEnd;
  }

  public void setPeriodEnd(String periodEnd) {
    this.periodEnd = periodEnd;
  }


  public Invoice periodStart(String periodStart) {
    this.periodStart = periodStart;
    return this;
  }

  /**
   * Invoice start period.
   * @return periodStart
   */
  @javax.annotation.Nonnull
  public String getPeriodStart() {
    return periodStart;
  }

  public void setPeriodStart(String periodStart) {
    this.periodStart = periodStart;
  }


  public Invoice recieptNumber(String recieptNumber) {
    this.recieptNumber = recieptNumber;
    return this;
  }

  /**
   * Invoice receipt number.
   * @return recieptNumber
   */
  @javax.annotation.Nonnull
  public String getRecieptNumber() {
    return recieptNumber;
  }

  public void setRecieptNumber(String recieptNumber) {
    this.recieptNumber = recieptNumber;
  }


  public Invoice startingBalance(Integer startingBalance) {
    this.startingBalance = startingBalance;
    return this;
  }

  /**
   * Invoice starting balance.
   * @return startingBalance
   */
  @javax.annotation.Nonnull
  public Integer getStartingBalance() {
    return startingBalance;
  }

  public void setStartingBalance(Integer startingBalance) {
    this.startingBalance = startingBalance;
  }


  public Invoice statementDescriptor(String statementDescriptor) {
    this.statementDescriptor = statementDescriptor;
    return this;
  }

  /**
   * Invoice statement descriptor.
   * @return statementDescriptor
   */
  @javax.annotation.Nullable
  public String getStatementDescriptor() {
    return statementDescriptor;
  }

  public void setStatementDescriptor(String statementDescriptor) {
    this.statementDescriptor = statementDescriptor;
  }


  public Invoice stripeId(String stripeId) {
    this.stripeId = stripeId;
    return this;
  }

  /**
   * Stripe account identifier.
   * @return stripeId
   */
  @javax.annotation.Nonnull
  public String getStripeId() {
    return stripeId;
  }

  public void setStripeId(String stripeId) {
    this.stripeId = stripeId;
  }


  public Invoice subscription(String subscription) {
    this.subscription = subscription;
    return this;
  }

  /**
   * Suscription name.
   * @return subscription
   */
  @javax.annotation.Nullable
  public String getSubscription() {
    return subscription;
  }

  public void setSubscription(String subscription) {
    this.subscription = subscription;
  }


  public Invoice subtotal(Integer subtotal) {
    this.subtotal = subtotal;
    return this;
  }

  /**
   * Invoice sub total.
   * @return subtotal
   */
  @javax.annotation.Nonnull
  public Integer getSubtotal() {
    return subtotal;
  }

  public void setSubtotal(Integer subtotal) {
    this.subtotal = subtotal;
  }


  public Invoice tax(Integer tax) {
    this.tax = tax;
    return this;
  }

  /**
   * Tax, if applicable.
   * @return tax
   */
  @javax.annotation.Nullable
  public Integer getTax() {
    return tax;
  }

  public void setTax(Integer tax) {
    this.tax = tax;
  }


  public Invoice total(Integer total) {
    this.total = total;
    return this;
  }

  /**
   * Invoice total.
   * @return total
   */
  @javax.annotation.Nonnull
  public Integer getTotal() {
    return total;
  }

  public void setTotal(Integer total) {
    this.total = total;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Invoice invoice = (Invoice) o;
    return Objects.equals(this.amountDue, invoice.amountDue) &&
        Objects.equals(this.applicationFee, invoice.applicationFee) &&
        Objects.equals(this.attemptCount, invoice.attemptCount) &&
        Objects.equals(this.attempted, invoice.attempted) &&
        Objects.equals(this.closed, invoice.closed) &&
        Objects.equals(this.created, invoice.created) &&
        Objects.equals(this.currency, invoice.currency) &&
        Objects.equals(this.customer, invoice.customer) &&
        Objects.equals(this.description, invoice.description) &&
        Objects.equals(this.id, invoice.id) &&
        Objects.equals(this.invoiceDate, invoice.invoiceDate) &&
        Objects.equals(this.livemode, invoice.livemode) &&
        Objects.equals(this.metadata, invoice.metadata) &&
        Objects.equals(this.nextPaymentAttempt, invoice.nextPaymentAttempt) &&
        Objects.equals(this.paid, invoice.paid) &&
        Objects.equals(this.periodEnd, invoice.periodEnd) &&
        Objects.equals(this.periodStart, invoice.periodStart) &&
        Objects.equals(this.recieptNumber, invoice.recieptNumber) &&
        Objects.equals(this.startingBalance, invoice.startingBalance) &&
        Objects.equals(this.statementDescriptor, invoice.statementDescriptor) &&
        Objects.equals(this.stripeId, invoice.stripeId) &&
        Objects.equals(this.subscription, invoice.subscription) &&
        Objects.equals(this.subtotal, invoice.subtotal) &&
        Objects.equals(this.tax, invoice.tax) &&
        Objects.equals(this.total, invoice.total);
  }

  @Override
  public int hashCode() {
    return Objects.hash(amountDue, applicationFee, attemptCount, attempted, closed, created, currency, customer, description, id, invoiceDate, livemode, metadata, nextPaymentAttempt, paid, periodEnd, periodStart, recieptNumber, startingBalance, statementDescriptor, stripeId, subscription, subtotal, tax, total);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Invoice {\n");
    sb.append("    amountDue: ").append(toIndentedString(amountDue)).append("\n");
    sb.append("    applicationFee: ").append(toIndentedString(applicationFee)).append("\n");
    sb.append("    attemptCount: ").append(toIndentedString(attemptCount)).append("\n");
    sb.append("    attempted: ").append(toIndentedString(attempted)).append("\n");
    sb.append("    closed: ").append(toIndentedString(closed)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    customer: ").append(toIndentedString(customer)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    invoiceDate: ").append(toIndentedString(invoiceDate)).append("\n");
    sb.append("    livemode: ").append(toIndentedString(livemode)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    nextPaymentAttempt: ").append(toIndentedString(nextPaymentAttempt)).append("\n");
    sb.append("    paid: ").append(toIndentedString(paid)).append("\n");
    sb.append("    periodEnd: ").append(toIndentedString(periodEnd)).append("\n");
    sb.append("    periodStart: ").append(toIndentedString(periodStart)).append("\n");
    sb.append("    recieptNumber: ").append(toIndentedString(recieptNumber)).append("\n");
    sb.append("    startingBalance: ").append(toIndentedString(startingBalance)).append("\n");
    sb.append("    statementDescriptor: ").append(toIndentedString(statementDescriptor)).append("\n");
    sb.append("    stripeId: ").append(toIndentedString(stripeId)).append("\n");
    sb.append("    subscription: ").append(toIndentedString(subscription)).append("\n");
    sb.append("    subtotal: ").append(toIndentedString(subtotal)).append("\n");
    sb.append("    tax: ").append(toIndentedString(tax)).append("\n");
    sb.append("    total: ").append(toIndentedString(total)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("amount_due");
    openapiFields.add("application_fee");
    openapiFields.add("attempt_count");
    openapiFields.add("attempted");
    openapiFields.add("closed");
    openapiFields.add("created");
    openapiFields.add("currency");
    openapiFields.add("customer");
    openapiFields.add("description");
    openapiFields.add("id");
    openapiFields.add("invoice_date");
    openapiFields.add("livemode");
    openapiFields.add("metadata");
    openapiFields.add("next_payment_attempt");
    openapiFields.add("paid");
    openapiFields.add("period_end");
    openapiFields.add("period_start");
    openapiFields.add("reciept_number");
    openapiFields.add("starting_balance");
    openapiFields.add("statement_descriptor");
    openapiFields.add("stripe_id");
    openapiFields.add("subscription");
    openapiFields.add("subtotal");
    openapiFields.add("tax");
    openapiFields.add("total");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("amount_due");
    openapiRequiredFields.add("created");
    openapiRequiredFields.add("currency");
    openapiRequiredFields.add("customer");
    openapiRequiredFields.add("invoice_date");
    openapiRequiredFields.add("period_end");
    openapiRequiredFields.add("period_start");
    openapiRequiredFields.add("reciept_number");
    openapiRequiredFields.add("starting_balance");
    openapiRequiredFields.add("stripe_id");
    openapiRequiredFields.add("subtotal");
    openapiRequiredFields.add("total");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Invoice
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Invoice.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Invoice is not found in the empty JSON string", Invoice.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Invoice.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Invoice` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Invoice.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("created").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `created` to be a primitive type in the JSON string but got `%s`", jsonObj.get("created").toString()));
      }
      if (!jsonObj.get("currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currency").toString()));
      }
      if (!jsonObj.get("customer").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customer` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customer").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("invoice_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `invoice_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("invoice_date").toString()));
      }
      if ((jsonObj.get("next_payment_attempt") != null && !jsonObj.get("next_payment_attempt").isJsonNull()) && !jsonObj.get("next_payment_attempt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `next_payment_attempt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("next_payment_attempt").toString()));
      }
      if (!jsonObj.get("period_end").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `period_end` to be a primitive type in the JSON string but got `%s`", jsonObj.get("period_end").toString()));
      }
      if (!jsonObj.get("period_start").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `period_start` to be a primitive type in the JSON string but got `%s`", jsonObj.get("period_start").toString()));
      }
      if (!jsonObj.get("reciept_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reciept_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reciept_number").toString()));
      }
      if ((jsonObj.get("statement_descriptor") != null && !jsonObj.get("statement_descriptor").isJsonNull()) && !jsonObj.get("statement_descriptor").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `statement_descriptor` to be a primitive type in the JSON string but got `%s`", jsonObj.get("statement_descriptor").toString()));
      }
      if (!jsonObj.get("stripe_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stripe_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stripe_id").toString()));
      }
      if ((jsonObj.get("subscription") != null && !jsonObj.get("subscription").isJsonNull()) && !jsonObj.get("subscription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subscription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subscription").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Invoice.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Invoice' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Invoice> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Invoice.class));

       return (TypeAdapter<T>) new TypeAdapter<Invoice>() {
           @Override
           public void write(JsonWriter out, Invoice value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Invoice read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Invoice given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Invoice
   * @throws IOException if the JSON string is invalid with respect to Invoice
   */
  public static Invoice fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Invoice.class);
  }

  /**
   * Convert an instance of Invoice to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

