/*
 * IllumiDesk
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.JWT;
import org.openapitools.client.model.JWTData;
import org.openapitools.client.model.JWTError;
import org.openapitools.client.model.RefreshJSONWebToken;
import org.openapitools.client.model.RefreshJSONWebTokenData;
import org.openapitools.client.model.RefreshJSONWebTokenError;
import org.openapitools.client.model.User;
import org.openapitools.client.model.UserData;
import org.openapitools.client.model.UserError;
import org.openapitools.client.model.VerifyJSONWebToken;
import org.openapitools.client.model.VerifyJSONWebTokenData;
import org.openapitools.client.model.VerifyJSONWebTokenError;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AuthApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AuthApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AuthApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for authJwtTokenAuth
     * @param jwtData  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> JWT created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authJwtTokenAuthCall(JWTData jwtData, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = jwtData;

        // create path and map variables
        String localVarPath = "/auth/jwt-token-auth/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call authJwtTokenAuthValidateBeforeCall(JWTData jwtData, final ApiCallback _callback) throws ApiException {
        return authJwtTokenAuthCall(jwtData, _callback);

    }

    /**
     * Create JSON Web Token (JWT)
     * 
     * @param jwtData  (optional)
     * @return JWT
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> JWT created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied </td><td>  -  </td></tr>
     </table>
     */
    public JWT authJwtTokenAuth(JWTData jwtData) throws ApiException {
        ApiResponse<JWT> localVarResp = authJwtTokenAuthWithHttpInfo(jwtData);
        return localVarResp.getData();
    }

    /**
     * Create JSON Web Token (JWT)
     * 
     * @param jwtData  (optional)
     * @return ApiResponse&lt;JWT&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> JWT created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JWT> authJwtTokenAuthWithHttpInfo(JWTData jwtData) throws ApiException {
        okhttp3.Call localVarCall = authJwtTokenAuthValidateBeforeCall(jwtData, null);
        Type localVarReturnType = new TypeToken<JWT>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create JSON Web Token (JWT) (asynchronously)
     * 
     * @param jwtData  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> JWT created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authJwtTokenAuthAsync(JWTData jwtData, final ApiCallback<JWT> _callback) throws ApiException {

        okhttp3.Call localVarCall = authJwtTokenAuthValidateBeforeCall(jwtData, _callback);
        Type localVarReturnType = new TypeToken<JWT>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for authJwtTokenRefresh
     * @param refreshjwtData  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> RefreshJSONWebToken created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authJwtTokenRefreshCall(RefreshJSONWebTokenData refreshjwtData, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = refreshjwtData;

        // create path and map variables
        String localVarPath = "/auth/jwt-token-refresh/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call authJwtTokenRefreshValidateBeforeCall(RefreshJSONWebTokenData refreshjwtData, final ApiCallback _callback) throws ApiException {
        return authJwtTokenRefreshCall(refreshjwtData, _callback);

    }

    /**
     * Refresh a JSON Web Token (JWT)
     * Obtains a new JSON Web Token using existing user credentials.
     * @param refreshjwtData  (optional)
     * @return RefreshJSONWebToken
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> RefreshJSONWebToken created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied </td><td>  -  </td></tr>
     </table>
     */
    public RefreshJSONWebToken authJwtTokenRefresh(RefreshJSONWebTokenData refreshjwtData) throws ApiException {
        ApiResponse<RefreshJSONWebToken> localVarResp = authJwtTokenRefreshWithHttpInfo(refreshjwtData);
        return localVarResp.getData();
    }

    /**
     * Refresh a JSON Web Token (JWT)
     * Obtains a new JSON Web Token using existing user credentials.
     * @param refreshjwtData  (optional)
     * @return ApiResponse&lt;RefreshJSONWebToken&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> RefreshJSONWebToken created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RefreshJSONWebToken> authJwtTokenRefreshWithHttpInfo(RefreshJSONWebTokenData refreshjwtData) throws ApiException {
        okhttp3.Call localVarCall = authJwtTokenRefreshValidateBeforeCall(refreshjwtData, null);
        Type localVarReturnType = new TypeToken<RefreshJSONWebToken>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Refresh a JSON Web Token (JWT) (asynchronously)
     * Obtains a new JSON Web Token using existing user credentials.
     * @param refreshjwtData  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> RefreshJSONWebToken created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authJwtTokenRefreshAsync(RefreshJSONWebTokenData refreshjwtData, final ApiCallback<RefreshJSONWebToken> _callback) throws ApiException {

        okhttp3.Call localVarCall = authJwtTokenRefreshValidateBeforeCall(refreshjwtData, _callback);
        Type localVarReturnType = new TypeToken<RefreshJSONWebToken>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for authJwtTokenVerify
     * @param verifyjwtData  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> VerifyJSONWebToken created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authJwtTokenVerifyCall(VerifyJSONWebTokenData verifyjwtData, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = verifyjwtData;

        // create path and map variables
        String localVarPath = "/auth/jwt-token-verify/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call authJwtTokenVerifyValidateBeforeCall(VerifyJSONWebTokenData verifyjwtData, final ApiCallback _callback) throws ApiException {
        return authJwtTokenVerifyCall(verifyjwtData, _callback);

    }

    /**
     * Validate JSON Web Token (JWT)
     * Checks veraciy of token.
     * @param verifyjwtData  (optional)
     * @return VerifyJSONWebToken
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> VerifyJSONWebToken created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied </td><td>  -  </td></tr>
     </table>
     */
    public VerifyJSONWebToken authJwtTokenVerify(VerifyJSONWebTokenData verifyjwtData) throws ApiException {
        ApiResponse<VerifyJSONWebToken> localVarResp = authJwtTokenVerifyWithHttpInfo(verifyjwtData);
        return localVarResp.getData();
    }

    /**
     * Validate JSON Web Token (JWT)
     * Checks veraciy of token.
     * @param verifyjwtData  (optional)
     * @return ApiResponse&lt;VerifyJSONWebToken&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> VerifyJSONWebToken created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VerifyJSONWebToken> authJwtTokenVerifyWithHttpInfo(VerifyJSONWebTokenData verifyjwtData) throws ApiException {
        okhttp3.Call localVarCall = authJwtTokenVerifyValidateBeforeCall(verifyjwtData, null);
        Type localVarReturnType = new TypeToken<VerifyJSONWebToken>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Validate JSON Web Token (JWT) (asynchronously)
     * Checks veraciy of token.
     * @param verifyjwtData  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> VerifyJSONWebToken created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authJwtTokenVerifyAsync(VerifyJSONWebTokenData verifyjwtData, final ApiCallback<VerifyJSONWebToken> _callback) throws ApiException {

        okhttp3.Call localVarCall = authJwtTokenVerifyValidateBeforeCall(verifyjwtData, _callback);
        Type localVarReturnType = new TypeToken<VerifyJSONWebToken>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for authRegister
     * @param userData  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> User created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authRegisterCall(UserData userData, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = userData;

        // create path and map variables
        String localVarPath = "/auth/register/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call authRegisterValidateBeforeCall(UserData userData, final ApiCallback _callback) throws ApiException {
        return authRegisterCall(userData, _callback);

    }

    /**
     * Register a user
     * User registration requires confirming email address to activate user.
     * @param userData  (optional)
     * @return User
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> User created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied </td><td>  -  </td></tr>
     </table>
     */
    public User authRegister(UserData userData) throws ApiException {
        ApiResponse<User> localVarResp = authRegisterWithHttpInfo(userData);
        return localVarResp.getData();
    }

    /**
     * Register a user
     * User registration requires confirming email address to activate user.
     * @param userData  (optional)
     * @return ApiResponse&lt;User&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> User created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<User> authRegisterWithHttpInfo(UserData userData) throws ApiException {
        okhttp3.Call localVarCall = authRegisterValidateBeforeCall(userData, null);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Register a user (asynchronously)
     * User registration requires confirming email address to activate user.
     * @param userData  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> User created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authRegisterAsync(UserData userData, final ApiCallback<User> _callback) throws ApiException {

        okhttp3.Call localVarCall = authRegisterValidateBeforeCall(userData, _callback);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for oauthLogin
     * @param provider OAuth2 provider (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 302 </td><td> Redirect to backend auth page </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call oauthLoginCall(String provider, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/auth/login/{provider}/"
            .replace("{" + "provider" + "}", localVarApiClient.escapeString(provider.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call oauthLoginValidateBeforeCall(String provider, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'provider' is set
        if (provider == null) {
            throw new ApiException("Missing the required parameter 'provider' when calling oauthLogin(Async)");
        }

        return oauthLoginCall(provider, _callback);

    }

    /**
     * 
     * 
     * @param provider OAuth2 provider (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 302 </td><td> Redirect to backend auth page </td><td>  -  </td></tr>
     </table>
     */
    public void oauthLogin(String provider) throws ApiException {
        oauthLoginWithHttpInfo(provider);
    }

    /**
     * 
     * 
     * @param provider OAuth2 provider (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 302 </td><td> Redirect to backend auth page </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> oauthLoginWithHttpInfo(String provider) throws ApiException {
        okhttp3.Call localVarCall = oauthLoginValidateBeforeCall(provider, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param provider OAuth2 provider (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 302 </td><td> Redirect to backend auth page </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call oauthLoginAsync(String provider, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = oauthLoginValidateBeforeCall(provider, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
