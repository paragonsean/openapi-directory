/*
 * IllumiDesk
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.NotFound;
import org.openapitools.client.model.Notification;
import org.openapitools.client.model.NotificationError;
import org.openapitools.client.model.NotificationListUpdateData;
import org.openapitools.client.model.NotificationSettings;
import org.openapitools.client.model.NotificationSettingsData;
import org.openapitools.client.model.NotificationSettingsError;
import org.openapitools.client.model.NotificationUpdateData;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class NotificationsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public NotificationsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public NotificationsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for notificationRead
     * @param namespace User or team data. (required)
     * @param notificationId Notification UUID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Retrieve a notification. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Notification not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call notificationReadCall(String namespace, String notificationId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/{namespace}/notifications/{notification_id}"
            .replace("{" + "namespace" + "}", localVarApiClient.escapeString(namespace.toString()))
            .replace("{" + "notification_id" + "}", localVarApiClient.escapeString(notificationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call notificationReadValidateBeforeCall(String namespace, String notificationId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'namespace' is set
        if (namespace == null) {
            throw new ApiException("Missing the required parameter 'namespace' when calling notificationRead(Async)");
        }

        // verify the required parameter 'notificationId' is set
        if (notificationId == null) {
            throw new ApiException("Missing the required parameter 'notificationId' when calling notificationRead(Async)");
        }

        return notificationReadCall(namespace, notificationId, _callback);

    }

    /**
     * Retrieve a specific notification.
     * 
     * @param namespace User or team data. (required)
     * @param notificationId Notification UUID. (required)
     * @return Notification
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Retrieve a notification. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Notification not found. </td><td>  -  </td></tr>
     </table>
     */
    public Notification notificationRead(String namespace, String notificationId) throws ApiException {
        ApiResponse<Notification> localVarResp = notificationReadWithHttpInfo(namespace, notificationId);
        return localVarResp.getData();
    }

    /**
     * Retrieve a specific notification.
     * 
     * @param namespace User or team data. (required)
     * @param notificationId Notification UUID. (required)
     * @return ApiResponse&lt;Notification&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Retrieve a notification. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Notification not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Notification> notificationReadWithHttpInfo(String namespace, String notificationId) throws ApiException {
        okhttp3.Call localVarCall = notificationReadValidateBeforeCall(namespace, notificationId, null);
        Type localVarReturnType = new TypeToken<Notification>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve a specific notification. (asynchronously)
     * 
     * @param namespace User or team data. (required)
     * @param notificationId Notification UUID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Retrieve a notification. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Notification not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call notificationReadAsync(String namespace, String notificationId, final ApiCallback<Notification> _callback) throws ApiException {

        okhttp3.Call localVarCall = notificationReadValidateBeforeCall(namespace, notificationId, _callback);
        Type localVarReturnType = new TypeToken<Notification>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for notificationSettingsCreate
     * @param namespace User or team name. (required)
     * @param notificationSettingsData  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Global Notification Settings created successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call notificationSettingsCreateCall(String namespace, NotificationSettingsData notificationSettingsData, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = notificationSettingsData;

        // create path and map variables
        String localVarPath = "/v1/{namespace}/notifications/settings/"
            .replace("{" + "namespace" + "}", localVarApiClient.escapeString(namespace.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call notificationSettingsCreateValidateBeforeCall(String namespace, NotificationSettingsData notificationSettingsData, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'namespace' is set
        if (namespace == null) {
            throw new ApiException("Missing the required parameter 'namespace' when calling notificationSettingsCreate(Async)");
        }

        // verify the required parameter 'notificationSettingsData' is set
        if (notificationSettingsData == null) {
            throw new ApiException("Missing the required parameter 'notificationSettingsData' when calling notificationSettingsCreate(Async)");
        }

        return notificationSettingsCreateCall(namespace, notificationSettingsData, _callback);

    }

    /**
     * Create global notification settings
     * 
     * @param namespace User or team name. (required)
     * @param notificationSettingsData  (required)
     * @return NotificationSettings
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Global Notification Settings created successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied. </td><td>  -  </td></tr>
     </table>
     */
    public NotificationSettings notificationSettingsCreate(String namespace, NotificationSettingsData notificationSettingsData) throws ApiException {
        ApiResponse<NotificationSettings> localVarResp = notificationSettingsCreateWithHttpInfo(namespace, notificationSettingsData);
        return localVarResp.getData();
    }

    /**
     * Create global notification settings
     * 
     * @param namespace User or team name. (required)
     * @param notificationSettingsData  (required)
     * @return ApiResponse&lt;NotificationSettings&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Global Notification Settings created successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NotificationSettings> notificationSettingsCreateWithHttpInfo(String namespace, NotificationSettingsData notificationSettingsData) throws ApiException {
        okhttp3.Call localVarCall = notificationSettingsCreateValidateBeforeCall(namespace, notificationSettingsData, null);
        Type localVarReturnType = new TypeToken<NotificationSettings>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create global notification settings (asynchronously)
     * 
     * @param namespace User or team name. (required)
     * @param notificationSettingsData  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Global Notification Settings created successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call notificationSettingsCreateAsync(String namespace, NotificationSettingsData notificationSettingsData, final ApiCallback<NotificationSettings> _callback) throws ApiException {

        okhttp3.Call localVarCall = notificationSettingsCreateValidateBeforeCall(namespace, notificationSettingsData, _callback);
        Type localVarReturnType = new TypeToken<NotificationSettings>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for notificationSettingsEntityCreate
     * @param namespace User or team name. (required)
     * @param entity Entity whose settings should be retrieved. (required)
     * @param notificationSettingsData  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Global Notification Settings created successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call notificationSettingsEntityCreateCall(String namespace, String entity, NotificationSettingsData notificationSettingsData, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = notificationSettingsData;

        // create path and map variables
        String localVarPath = "/v1/{namespace}/notifications/settings/entity/{entity}"
            .replace("{" + "namespace" + "}", localVarApiClient.escapeString(namespace.toString()))
            .replace("{" + "entity" + "}", localVarApiClient.escapeString(entity.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call notificationSettingsEntityCreateValidateBeforeCall(String namespace, String entity, NotificationSettingsData notificationSettingsData, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'namespace' is set
        if (namespace == null) {
            throw new ApiException("Missing the required parameter 'namespace' when calling notificationSettingsEntityCreate(Async)");
        }

        // verify the required parameter 'entity' is set
        if (entity == null) {
            throw new ApiException("Missing the required parameter 'entity' when calling notificationSettingsEntityCreate(Async)");
        }

        return notificationSettingsEntityCreateCall(namespace, entity, notificationSettingsData, _callback);

    }

    /**
     * Create global notification settings
     * 
     * @param namespace User or team name. (required)
     * @param entity Entity whose settings should be retrieved. (required)
     * @param notificationSettingsData  (optional)
     * @return NotificationSettings
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Global Notification Settings created successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied. </td><td>  -  </td></tr>
     </table>
     */
    public NotificationSettings notificationSettingsEntityCreate(String namespace, String entity, NotificationSettingsData notificationSettingsData) throws ApiException {
        ApiResponse<NotificationSettings> localVarResp = notificationSettingsEntityCreateWithHttpInfo(namespace, entity, notificationSettingsData);
        return localVarResp.getData();
    }

    /**
     * Create global notification settings
     * 
     * @param namespace User or team name. (required)
     * @param entity Entity whose settings should be retrieved. (required)
     * @param notificationSettingsData  (optional)
     * @return ApiResponse&lt;NotificationSettings&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Global Notification Settings created successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NotificationSettings> notificationSettingsEntityCreateWithHttpInfo(String namespace, String entity, NotificationSettingsData notificationSettingsData) throws ApiException {
        okhttp3.Call localVarCall = notificationSettingsEntityCreateValidateBeforeCall(namespace, entity, notificationSettingsData, null);
        Type localVarReturnType = new TypeToken<NotificationSettings>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create global notification settings (asynchronously)
     * 
     * @param namespace User or team name. (required)
     * @param entity Entity whose settings should be retrieved. (required)
     * @param notificationSettingsData  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Global Notification Settings created successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call notificationSettingsEntityCreateAsync(String namespace, String entity, NotificationSettingsData notificationSettingsData, final ApiCallback<NotificationSettings> _callback) throws ApiException {

        okhttp3.Call localVarCall = notificationSettingsEntityCreateValidateBeforeCall(namespace, entity, notificationSettingsData, _callback);
        Type localVarReturnType = new TypeToken<NotificationSettings>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for notificationSettingsEntityRead
     * @param namespace User or team data. (required)
     * @param entity Entity whose settings should be retrieved. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Global notification settings </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Notification not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call notificationSettingsEntityReadCall(String namespace, String entity, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/{namespace}/notifications/settings/entity/{entity}"
            .replace("{" + "namespace" + "}", localVarApiClient.escapeString(namespace.toString()))
            .replace("{" + "entity" + "}", localVarApiClient.escapeString(entity.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call notificationSettingsEntityReadValidateBeforeCall(String namespace, String entity, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'namespace' is set
        if (namespace == null) {
            throw new ApiException("Missing the required parameter 'namespace' when calling notificationSettingsEntityRead(Async)");
        }

        // verify the required parameter 'entity' is set
        if (entity == null) {
            throw new ApiException("Missing the required parameter 'entity' when calling notificationSettingsEntityRead(Async)");
        }

        return notificationSettingsEntityReadCall(namespace, entity, _callback);

    }

    /**
     * Retrieve global notification settings for the authenticated user
     * 
     * @param namespace User or team data. (required)
     * @param entity Entity whose settings should be retrieved. (required)
     * @return List&lt;NotificationSettings&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Global notification settings </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Notification not found. </td><td>  -  </td></tr>
     </table>
     */
    public List<NotificationSettings> notificationSettingsEntityRead(String namespace, String entity) throws ApiException {
        ApiResponse<List<NotificationSettings>> localVarResp = notificationSettingsEntityReadWithHttpInfo(namespace, entity);
        return localVarResp.getData();
    }

    /**
     * Retrieve global notification settings for the authenticated user
     * 
     * @param namespace User or team data. (required)
     * @param entity Entity whose settings should be retrieved. (required)
     * @return ApiResponse&lt;List&lt;NotificationSettings&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Global notification settings </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Notification not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<NotificationSettings>> notificationSettingsEntityReadWithHttpInfo(String namespace, String entity) throws ApiException {
        okhttp3.Call localVarCall = notificationSettingsEntityReadValidateBeforeCall(namespace, entity, null);
        Type localVarReturnType = new TypeToken<List<NotificationSettings>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve global notification settings for the authenticated user (asynchronously)
     * 
     * @param namespace User or team data. (required)
     * @param entity Entity whose settings should be retrieved. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Global notification settings </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Notification not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call notificationSettingsEntityReadAsync(String namespace, String entity, final ApiCallback<List<NotificationSettings>> _callback) throws ApiException {

        okhttp3.Call localVarCall = notificationSettingsEntityReadValidateBeforeCall(namespace, entity, _callback);
        Type localVarReturnType = new TypeToken<List<NotificationSettings>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for notificationSettingsEntityUpdate
     * @param namespace User or team name. (required)
     * @param entity Entity whose settings should be retrieved. (required)
     * @param notificationSettingsData  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Notification Settings updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Notification Settings not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call notificationSettingsEntityUpdateCall(String namespace, String entity, NotificationSettingsData notificationSettingsData, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = notificationSettingsData;

        // create path and map variables
        String localVarPath = "/v1/{namespace}/notifications/settings/entity/{entity}"
            .replace("{" + "namespace" + "}", localVarApiClient.escapeString(namespace.toString()))
            .replace("{" + "entity" + "}", localVarApiClient.escapeString(entity.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call notificationSettingsEntityUpdateValidateBeforeCall(String namespace, String entity, NotificationSettingsData notificationSettingsData, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'namespace' is set
        if (namespace == null) {
            throw new ApiException("Missing the required parameter 'namespace' when calling notificationSettingsEntityUpdate(Async)");
        }

        // verify the required parameter 'entity' is set
        if (entity == null) {
            throw new ApiException("Missing the required parameter 'entity' when calling notificationSettingsEntityUpdate(Async)");
        }

        return notificationSettingsEntityUpdateCall(namespace, entity, notificationSettingsData, _callback);

    }

    /**
     * Modify global notification settings.
     * 
     * @param namespace User or team name. (required)
     * @param entity Entity whose settings should be retrieved. (required)
     * @param notificationSettingsData  (optional)
     * @return NotificationSettings
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Notification Settings updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Notification Settings not found. </td><td>  -  </td></tr>
     </table>
     */
    public NotificationSettings notificationSettingsEntityUpdate(String namespace, String entity, NotificationSettingsData notificationSettingsData) throws ApiException {
        ApiResponse<NotificationSettings> localVarResp = notificationSettingsEntityUpdateWithHttpInfo(namespace, entity, notificationSettingsData);
        return localVarResp.getData();
    }

    /**
     * Modify global notification settings.
     * 
     * @param namespace User or team name. (required)
     * @param entity Entity whose settings should be retrieved. (required)
     * @param notificationSettingsData  (optional)
     * @return ApiResponse&lt;NotificationSettings&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Notification Settings updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Notification Settings not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NotificationSettings> notificationSettingsEntityUpdateWithHttpInfo(String namespace, String entity, NotificationSettingsData notificationSettingsData) throws ApiException {
        okhttp3.Call localVarCall = notificationSettingsEntityUpdateValidateBeforeCall(namespace, entity, notificationSettingsData, null);
        Type localVarReturnType = new TypeToken<NotificationSettings>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Modify global notification settings. (asynchronously)
     * 
     * @param namespace User or team name. (required)
     * @param entity Entity whose settings should be retrieved. (required)
     * @param notificationSettingsData  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Notification Settings updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Notification Settings not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call notificationSettingsEntityUpdateAsync(String namespace, String entity, NotificationSettingsData notificationSettingsData, final ApiCallback<NotificationSettings> _callback) throws ApiException {

        okhttp3.Call localVarCall = notificationSettingsEntityUpdateValidateBeforeCall(namespace, entity, notificationSettingsData, _callback);
        Type localVarReturnType = new TypeToken<NotificationSettings>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for notificationSettingsRead
     * @param namespace User or team data. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Global notification settings </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Notification not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call notificationSettingsReadCall(String namespace, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/{namespace}/notifications/settings/"
            .replace("{" + "namespace" + "}", localVarApiClient.escapeString(namespace.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call notificationSettingsReadValidateBeforeCall(String namespace, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'namespace' is set
        if (namespace == null) {
            throw new ApiException("Missing the required parameter 'namespace' when calling notificationSettingsRead(Async)");
        }

        return notificationSettingsReadCall(namespace, _callback);

    }

    /**
     * Retrieve global notification settings for the authenticated user
     * 
     * @param namespace User or team data. (required)
     * @return List&lt;NotificationSettings&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Global notification settings </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Notification not found. </td><td>  -  </td></tr>
     </table>
     */
    public List<NotificationSettings> notificationSettingsRead(String namespace) throws ApiException {
        ApiResponse<List<NotificationSettings>> localVarResp = notificationSettingsReadWithHttpInfo(namespace);
        return localVarResp.getData();
    }

    /**
     * Retrieve global notification settings for the authenticated user
     * 
     * @param namespace User or team data. (required)
     * @return ApiResponse&lt;List&lt;NotificationSettings&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Global notification settings </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Notification not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<NotificationSettings>> notificationSettingsReadWithHttpInfo(String namespace) throws ApiException {
        okhttp3.Call localVarCall = notificationSettingsReadValidateBeforeCall(namespace, null);
        Type localVarReturnType = new TypeToken<List<NotificationSettings>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve global notification settings for the authenticated user (asynchronously)
     * 
     * @param namespace User or team data. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Global notification settings </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Notification not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call notificationSettingsReadAsync(String namespace, final ApiCallback<List<NotificationSettings>> _callback) throws ApiException {

        okhttp3.Call localVarCall = notificationSettingsReadValidateBeforeCall(namespace, _callback);
        Type localVarReturnType = new TypeToken<List<NotificationSettings>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for notificationSettingsUpdate
     * @param namespace User or team name. (required)
     * @param notificationSettingsData  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Notification Settings updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Notification Settings not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call notificationSettingsUpdateCall(String namespace, NotificationSettingsData notificationSettingsData, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = notificationSettingsData;

        // create path and map variables
        String localVarPath = "/v1/{namespace}/notifications/settings/"
            .replace("{" + "namespace" + "}", localVarApiClient.escapeString(namespace.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call notificationSettingsUpdateValidateBeforeCall(String namespace, NotificationSettingsData notificationSettingsData, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'namespace' is set
        if (namespace == null) {
            throw new ApiException("Missing the required parameter 'namespace' when calling notificationSettingsUpdate(Async)");
        }

        return notificationSettingsUpdateCall(namespace, notificationSettingsData, _callback);

    }

    /**
     * Modify global notification settings.
     * 
     * @param namespace User or team name. (required)
     * @param notificationSettingsData  (optional)
     * @return NotificationSettings
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Notification Settings updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Notification Settings not found. </td><td>  -  </td></tr>
     </table>
     */
    public NotificationSettings notificationSettingsUpdate(String namespace, NotificationSettingsData notificationSettingsData) throws ApiException {
        ApiResponse<NotificationSettings> localVarResp = notificationSettingsUpdateWithHttpInfo(namespace, notificationSettingsData);
        return localVarResp.getData();
    }

    /**
     * Modify global notification settings.
     * 
     * @param namespace User or team name. (required)
     * @param notificationSettingsData  (optional)
     * @return ApiResponse&lt;NotificationSettings&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Notification Settings updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Notification Settings not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NotificationSettings> notificationSettingsUpdateWithHttpInfo(String namespace, NotificationSettingsData notificationSettingsData) throws ApiException {
        okhttp3.Call localVarCall = notificationSettingsUpdateValidateBeforeCall(namespace, notificationSettingsData, null);
        Type localVarReturnType = new TypeToken<NotificationSettings>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Modify global notification settings. (asynchronously)
     * 
     * @param namespace User or team name. (required)
     * @param notificationSettingsData  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Notification Settings updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Notification Settings not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call notificationSettingsUpdateAsync(String namespace, NotificationSettingsData notificationSettingsData, final ApiCallback<NotificationSettings> _callback) throws ApiException {

        okhttp3.Call localVarCall = notificationSettingsUpdateValidateBeforeCall(namespace, notificationSettingsData, _callback);
        Type localVarReturnType = new TypeToken<NotificationSettings>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for notificationUpdate
     * @param namespace User or team data. (required)
     * @param notificationId Notification UUID. (required)
     * @param notificationData  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Notification updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Notification not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call notificationUpdateCall(String namespace, String notificationId, NotificationUpdateData notificationData, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = notificationData;

        // create path and map variables
        String localVarPath = "/v1/{namespace}/notifications/{notification_id}"
            .replace("{" + "namespace" + "}", localVarApiClient.escapeString(namespace.toString()))
            .replace("{" + "notification_id" + "}", localVarApiClient.escapeString(notificationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call notificationUpdateValidateBeforeCall(String namespace, String notificationId, NotificationUpdateData notificationData, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'namespace' is set
        if (namespace == null) {
            throw new ApiException("Missing the required parameter 'namespace' when calling notificationUpdate(Async)");
        }

        // verify the required parameter 'notificationId' is set
        if (notificationId == null) {
            throw new ApiException("Missing the required parameter 'notificationId' when calling notificationUpdate(Async)");
        }

        return notificationUpdateCall(namespace, notificationId, notificationData, _callback);

    }

    /**
     * Mark a specific notification as either read or unread.
     * 
     * @param namespace User or team data. (required)
     * @param notificationId Notification UUID. (required)
     * @param notificationData  (optional)
     * @return Notification
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Notification updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Notification not found. </td><td>  -  </td></tr>
     </table>
     */
    public Notification notificationUpdate(String namespace, String notificationId, NotificationUpdateData notificationData) throws ApiException {
        ApiResponse<Notification> localVarResp = notificationUpdateWithHttpInfo(namespace, notificationId, notificationData);
        return localVarResp.getData();
    }

    /**
     * Mark a specific notification as either read or unread.
     * 
     * @param namespace User or team data. (required)
     * @param notificationId Notification UUID. (required)
     * @param notificationData  (optional)
     * @return ApiResponse&lt;Notification&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Notification updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Notification not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Notification> notificationUpdateWithHttpInfo(String namespace, String notificationId, NotificationUpdateData notificationData) throws ApiException {
        okhttp3.Call localVarCall = notificationUpdateValidateBeforeCall(namespace, notificationId, notificationData, null);
        Type localVarReturnType = new TypeToken<Notification>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Mark a specific notification as either read or unread. (asynchronously)
     * 
     * @param namespace User or team data. (required)
     * @param notificationId Notification UUID. (required)
     * @param notificationData  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Notification updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Notification not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call notificationUpdateAsync(String namespace, String notificationId, NotificationUpdateData notificationData, final ApiCallback<Notification> _callback) throws ApiException {

        okhttp3.Call localVarCall = notificationUpdateValidateBeforeCall(namespace, notificationId, notificationData, _callback);
        Type localVarReturnType = new TypeToken<Notification>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for notificationsList
     * @param namespace User or team data. (required)
     * @param limit Limit when getting items. (optional)
     * @param offset Offset when getting items. (optional)
     * @param ordering Ordering when getting items. (optional)
     * @param read When true, get only read notifications. When false, get only unread notifications. Default behavior is to return both read and unread. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of notifications </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call notificationsListCall(String namespace, String limit, String offset, String ordering, Boolean read, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/{namespace}/notifications/"
            .replace("{" + "namespace" + "}", localVarApiClient.escapeString(namespace.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }

        if (read != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("read", read));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call notificationsListValidateBeforeCall(String namespace, String limit, String offset, String ordering, Boolean read, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'namespace' is set
        if (namespace == null) {
            throw new ApiException("Missing the required parameter 'namespace' when calling notificationsList(Async)");
        }

        return notificationsListCall(namespace, limit, offset, ordering, read, _callback);

    }

    /**
     * Get notifications of all types and entities for the authenticated user.
     * 
     * @param namespace User or team data. (required)
     * @param limit Limit when getting items. (optional)
     * @param offset Offset when getting items. (optional)
     * @param ordering Ordering when getting items. (optional)
     * @param read When true, get only read notifications. When false, get only unread notifications. Default behavior is to return both read and unread. (optional)
     * @return List&lt;Notification&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of notifications </td><td>  -  </td></tr>
     </table>
     */
    public List<Notification> notificationsList(String namespace, String limit, String offset, String ordering, Boolean read) throws ApiException {
        ApiResponse<List<Notification>> localVarResp = notificationsListWithHttpInfo(namespace, limit, offset, ordering, read);
        return localVarResp.getData();
    }

    /**
     * Get notifications of all types and entities for the authenticated user.
     * 
     * @param namespace User or team data. (required)
     * @param limit Limit when getting items. (optional)
     * @param offset Offset when getting items. (optional)
     * @param ordering Ordering when getting items. (optional)
     * @param read When true, get only read notifications. When false, get only unread notifications. Default behavior is to return both read and unread. (optional)
     * @return ApiResponse&lt;List&lt;Notification&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of notifications </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Notification>> notificationsListWithHttpInfo(String namespace, String limit, String offset, String ordering, Boolean read) throws ApiException {
        okhttp3.Call localVarCall = notificationsListValidateBeforeCall(namespace, limit, offset, ordering, read, null);
        Type localVarReturnType = new TypeToken<List<Notification>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get notifications of all types and entities for the authenticated user. (asynchronously)
     * 
     * @param namespace User or team data. (required)
     * @param limit Limit when getting items. (optional)
     * @param offset Offset when getting items. (optional)
     * @param ordering Ordering when getting items. (optional)
     * @param read When true, get only read notifications. When false, get only unread notifications. Default behavior is to return both read and unread. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of notifications </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call notificationsListAsync(String namespace, String limit, String offset, String ordering, Boolean read, final ApiCallback<List<Notification>> _callback) throws ApiException {

        okhttp3.Call localVarCall = notificationsListValidateBeforeCall(namespace, limit, offset, ordering, read, _callback);
        Type localVarReturnType = new TypeToken<List<Notification>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for notificationsListEntity
     * @param namespace User or team data. (required)
     * @param entity Entity to filter notifications by. (required)
     * @param limit Limit when getting items. (optional)
     * @param offset Offset when getting items. (optional)
     * @param ordering Ordering when getting items. (optional)
     * @param read When true, get only read notifications. When false, get only unread notifications. Default behavior is to return both read and unread. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of notifications </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call notificationsListEntityCall(String namespace, String entity, String limit, String offset, String ordering, Boolean read, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/{namespace}/notifications/entity/{entity}"
            .replace("{" + "namespace" + "}", localVarApiClient.escapeString(namespace.toString()))
            .replace("{" + "entity" + "}", localVarApiClient.escapeString(entity.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }

        if (read != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("read", read));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call notificationsListEntityValidateBeforeCall(String namespace, String entity, String limit, String offset, String ordering, Boolean read, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'namespace' is set
        if (namespace == null) {
            throw new ApiException("Missing the required parameter 'namespace' when calling notificationsListEntity(Async)");
        }

        // verify the required parameter 'entity' is set
        if (entity == null) {
            throw new ApiException("Missing the required parameter 'entity' when calling notificationsListEntity(Async)");
        }

        return notificationsListEntityCall(namespace, entity, limit, offset, ordering, read, _callback);

    }

    /**
     * Get notifications of all types and entities for the authenticated user.
     * 
     * @param namespace User or team data. (required)
     * @param entity Entity to filter notifications by. (required)
     * @param limit Limit when getting items. (optional)
     * @param offset Offset when getting items. (optional)
     * @param ordering Ordering when getting items. (optional)
     * @param read When true, get only read notifications. When false, get only unread notifications. Default behavior is to return both read and unread. (optional)
     * @return List&lt;Notification&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of notifications </td><td>  -  </td></tr>
     </table>
     */
    public List<Notification> notificationsListEntity(String namespace, String entity, String limit, String offset, String ordering, Boolean read) throws ApiException {
        ApiResponse<List<Notification>> localVarResp = notificationsListEntityWithHttpInfo(namespace, entity, limit, offset, ordering, read);
        return localVarResp.getData();
    }

    /**
     * Get notifications of all types and entities for the authenticated user.
     * 
     * @param namespace User or team data. (required)
     * @param entity Entity to filter notifications by. (required)
     * @param limit Limit when getting items. (optional)
     * @param offset Offset when getting items. (optional)
     * @param ordering Ordering when getting items. (optional)
     * @param read When true, get only read notifications. When false, get only unread notifications. Default behavior is to return both read and unread. (optional)
     * @return ApiResponse&lt;List&lt;Notification&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of notifications </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Notification>> notificationsListEntityWithHttpInfo(String namespace, String entity, String limit, String offset, String ordering, Boolean read) throws ApiException {
        okhttp3.Call localVarCall = notificationsListEntityValidateBeforeCall(namespace, entity, limit, offset, ordering, read, null);
        Type localVarReturnType = new TypeToken<List<Notification>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get notifications of all types and entities for the authenticated user. (asynchronously)
     * 
     * @param namespace User or team data. (required)
     * @param entity Entity to filter notifications by. (required)
     * @param limit Limit when getting items. (optional)
     * @param offset Offset when getting items. (optional)
     * @param ordering Ordering when getting items. (optional)
     * @param read When true, get only read notifications. When false, get only unread notifications. Default behavior is to return both read and unread. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of notifications </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call notificationsListEntityAsync(String namespace, String entity, String limit, String offset, String ordering, Boolean read, final ApiCallback<List<Notification>> _callback) throws ApiException {

        okhttp3.Call localVarCall = notificationsListEntityValidateBeforeCall(namespace, entity, limit, offset, ordering, read, _callback);
        Type localVarReturnType = new TypeToken<List<Notification>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for notificationsUpdateEntityList
     * @param namespace User or team name. (required)
     * @param entity Entity to filter notifications by. (required)
     * @param notificationData  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Notification updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call notificationsUpdateEntityListCall(String namespace, String entity, NotificationListUpdateData notificationData, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = notificationData;

        // create path and map variables
        String localVarPath = "/v1/{namespace}/notifications/entity/{entity}"
            .replace("{" + "namespace" + "}", localVarApiClient.escapeString(namespace.toString()))
            .replace("{" + "entity" + "}", localVarApiClient.escapeString(entity.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call notificationsUpdateEntityListValidateBeforeCall(String namespace, String entity, NotificationListUpdateData notificationData, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'namespace' is set
        if (namespace == null) {
            throw new ApiException("Missing the required parameter 'namespace' when calling notificationsUpdateEntityList(Async)");
        }

        // verify the required parameter 'entity' is set
        if (entity == null) {
            throw new ApiException("Missing the required parameter 'entity' when calling notificationsUpdateEntityList(Async)");
        }

        // verify the required parameter 'notificationData' is set
        if (notificationData == null) {
            throw new ApiException("Missing the required parameter 'notificationData' when calling notificationsUpdateEntityList(Async)");
        }

        return notificationsUpdateEntityListCall(namespace, entity, notificationData, _callback);

    }

    /**
     * Mark a list of notifications as either read or unread.
     * 
     * @param namespace User or team name. (required)
     * @param entity Entity to filter notifications by. (required)
     * @param notificationData  (required)
     * @return Notification
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Notification updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied </td><td>  -  </td></tr>
     </table>
     */
    public Notification notificationsUpdateEntityList(String namespace, String entity, NotificationListUpdateData notificationData) throws ApiException {
        ApiResponse<Notification> localVarResp = notificationsUpdateEntityListWithHttpInfo(namespace, entity, notificationData);
        return localVarResp.getData();
    }

    /**
     * Mark a list of notifications as either read or unread.
     * 
     * @param namespace User or team name. (required)
     * @param entity Entity to filter notifications by. (required)
     * @param notificationData  (required)
     * @return ApiResponse&lt;Notification&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Notification updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Notification> notificationsUpdateEntityListWithHttpInfo(String namespace, String entity, NotificationListUpdateData notificationData) throws ApiException {
        okhttp3.Call localVarCall = notificationsUpdateEntityListValidateBeforeCall(namespace, entity, notificationData, null);
        Type localVarReturnType = new TypeToken<Notification>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Mark a list of notifications as either read or unread. (asynchronously)
     * 
     * @param namespace User or team name. (required)
     * @param entity Entity to filter notifications by. (required)
     * @param notificationData  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Notification updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call notificationsUpdateEntityListAsync(String namespace, String entity, NotificationListUpdateData notificationData, final ApiCallback<Notification> _callback) throws ApiException {

        okhttp3.Call localVarCall = notificationsUpdateEntityListValidateBeforeCall(namespace, entity, notificationData, _callback);
        Type localVarReturnType = new TypeToken<Notification>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for notificationsUpdateList
     * @param namespace User or team name. (required)
     * @param notificationData  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Notification updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call notificationsUpdateListCall(String namespace, NotificationListUpdateData notificationData, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = notificationData;

        // create path and map variables
        String localVarPath = "/v1/{namespace}/notifications/"
            .replace("{" + "namespace" + "}", localVarApiClient.escapeString(namespace.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call notificationsUpdateListValidateBeforeCall(String namespace, NotificationListUpdateData notificationData, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'namespace' is set
        if (namespace == null) {
            throw new ApiException("Missing the required parameter 'namespace' when calling notificationsUpdateList(Async)");
        }

        // verify the required parameter 'notificationData' is set
        if (notificationData == null) {
            throw new ApiException("Missing the required parameter 'notificationData' when calling notificationsUpdateList(Async)");
        }

        return notificationsUpdateListCall(namespace, notificationData, _callback);

    }

    /**
     * Mark a list of notifications as either read or unread.
     * 
     * @param namespace User or team name. (required)
     * @param notificationData  (required)
     * @return Notification
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Notification updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied </td><td>  -  </td></tr>
     </table>
     */
    public Notification notificationsUpdateList(String namespace, NotificationListUpdateData notificationData) throws ApiException {
        ApiResponse<Notification> localVarResp = notificationsUpdateListWithHttpInfo(namespace, notificationData);
        return localVarResp.getData();
    }

    /**
     * Mark a list of notifications as either read or unread.
     * 
     * @param namespace User or team name. (required)
     * @param notificationData  (required)
     * @return ApiResponse&lt;Notification&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Notification updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Notification> notificationsUpdateListWithHttpInfo(String namespace, NotificationListUpdateData notificationData) throws ApiException {
        okhttp3.Call localVarCall = notificationsUpdateListValidateBeforeCall(namespace, notificationData, null);
        Type localVarReturnType = new TypeToken<Notification>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Mark a list of notifications as either read or unread. (asynchronously)
     * 
     * @param namespace User or team name. (required)
     * @param notificationData  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Notification updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call notificationsUpdateListAsync(String namespace, NotificationListUpdateData notificationData, final ApiCallback<Notification> _callback) throws ApiException {

        okhttp3.Call localVarCall = notificationsUpdateListValidateBeforeCall(namespace, notificationData, _callback);
        Type localVarReturnType = new TypeToken<Notification>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
