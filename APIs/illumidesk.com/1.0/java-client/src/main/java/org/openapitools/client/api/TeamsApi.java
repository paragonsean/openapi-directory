/*
 * IllumiDesk
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Group;
import org.openapitools.client.model.GroupData;
import org.openapitools.client.model.GroupError;
import org.openapitools.client.model.GroupUser;
import org.openapitools.client.model.GroupUserError;
import org.openapitools.client.model.Invoice;
import org.openapitools.client.model.InvoiceItem;
import org.openapitools.client.model.NotFound;
import org.openapitools.client.model.Subscription;
import org.openapitools.client.model.SubscriptionData;
import org.openapitools.client.model.SubscriptionError;
import org.openapitools.client.model.Team;
import org.openapitools.client.model.TeamData;
import org.openapitools.client.model.TeamError;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TeamsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TeamsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TeamsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for teamsBillingInvoiceItemsList
     * @param team Team unique identifier expressed as UUID or name. (required)
     * @param invoiceId Invoice id, expressed as UUID. (required)
     * @param limit Limit when getting items. (optional)
     * @param offset Offset when getting items. (optional)
     * @param ordering Ordering when getting items. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Team invoiceItem list. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call teamsBillingInvoiceItemsListCall(String team, String invoiceId, String limit, String offset, String ordering, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/teams/{team}/billing/invoices/{invoice_id}/invoice-items/"
            .replace("{" + "team" + "}", localVarApiClient.escapeString(team.toString()))
            .replace("{" + "invoice_id" + "}", localVarApiClient.escapeString(invoiceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call teamsBillingInvoiceItemsListValidateBeforeCall(String team, String invoiceId, String limit, String offset, String ordering, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'team' is set
        if (team == null) {
            throw new ApiException("Missing the required parameter 'team' when calling teamsBillingInvoiceItemsList(Async)");
        }

        // verify the required parameter 'invoiceId' is set
        if (invoiceId == null) {
            throw new ApiException("Missing the required parameter 'invoiceId' when calling teamsBillingInvoiceItemsList(Async)");
        }

        return teamsBillingInvoiceItemsListCall(team, invoiceId, limit, offset, ordering, _callback);

    }

    /**
     * Get team invoice items for a given invoice.
     * 
     * @param team Team unique identifier expressed as UUID or name. (required)
     * @param invoiceId Invoice id, expressed as UUID. (required)
     * @param limit Limit when getting items. (optional)
     * @param offset Offset when getting items. (optional)
     * @param ordering Ordering when getting items. (optional)
     * @return List&lt;InvoiceItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Team invoiceItem list. </td><td>  -  </td></tr>
     </table>
     */
    public List<InvoiceItem> teamsBillingInvoiceItemsList(String team, String invoiceId, String limit, String offset, String ordering) throws ApiException {
        ApiResponse<List<InvoiceItem>> localVarResp = teamsBillingInvoiceItemsListWithHttpInfo(team, invoiceId, limit, offset, ordering);
        return localVarResp.getData();
    }

    /**
     * Get team invoice items for a given invoice.
     * 
     * @param team Team unique identifier expressed as UUID or name. (required)
     * @param invoiceId Invoice id, expressed as UUID. (required)
     * @param limit Limit when getting items. (optional)
     * @param offset Offset when getting items. (optional)
     * @param ordering Ordering when getting items. (optional)
     * @return ApiResponse&lt;List&lt;InvoiceItem&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Team invoiceItem list. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<InvoiceItem>> teamsBillingInvoiceItemsListWithHttpInfo(String team, String invoiceId, String limit, String offset, String ordering) throws ApiException {
        okhttp3.Call localVarCall = teamsBillingInvoiceItemsListValidateBeforeCall(team, invoiceId, limit, offset, ordering, null);
        Type localVarReturnType = new TypeToken<List<InvoiceItem>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get team invoice items for a given invoice. (asynchronously)
     * 
     * @param team Team unique identifier expressed as UUID or name. (required)
     * @param invoiceId Invoice id, expressed as UUID. (required)
     * @param limit Limit when getting items. (optional)
     * @param offset Offset when getting items. (optional)
     * @param ordering Ordering when getting items. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Team invoiceItem list. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call teamsBillingInvoiceItemsListAsync(String team, String invoiceId, String limit, String offset, String ordering, final ApiCallback<List<InvoiceItem>> _callback) throws ApiException {

        okhttp3.Call localVarCall = teamsBillingInvoiceItemsListValidateBeforeCall(team, invoiceId, limit, offset, ordering, _callback);
        Type localVarReturnType = new TypeToken<List<InvoiceItem>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for teamsBillingInvoiceItemsRead
     * @param team Team unique identifier expressed as UUID or name. (required)
     * @param invoiceId Invoice id, expressed as UUID. (required)
     * @param id InvoiceItem id, expressed as UUID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Team invoiceItem retrieved. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> InvoiceItem not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call teamsBillingInvoiceItemsReadCall(String team, String invoiceId, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/teams/{team}/billing/invoices/{invoice_id}/invoice-items/{id}"
            .replace("{" + "team" + "}", localVarApiClient.escapeString(team.toString()))
            .replace("{" + "invoice_id" + "}", localVarApiClient.escapeString(invoiceId.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call teamsBillingInvoiceItemsReadValidateBeforeCall(String team, String invoiceId, String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'team' is set
        if (team == null) {
            throw new ApiException("Missing the required parameter 'team' when calling teamsBillingInvoiceItemsRead(Async)");
        }

        // verify the required parameter 'invoiceId' is set
        if (invoiceId == null) {
            throw new ApiException("Missing the required parameter 'invoiceId' when calling teamsBillingInvoiceItemsRead(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling teamsBillingInvoiceItemsRead(Async)");
        }

        return teamsBillingInvoiceItemsReadCall(team, invoiceId, id, _callback);

    }

    /**
     * Get a specific team InvoiceItem.
     * 
     * @param team Team unique identifier expressed as UUID or name. (required)
     * @param invoiceId Invoice id, expressed as UUID. (required)
     * @param id InvoiceItem id, expressed as UUID. (required)
     * @return InvoiceItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Team invoiceItem retrieved. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> InvoiceItem not found. </td><td>  -  </td></tr>
     </table>
     */
    public InvoiceItem teamsBillingInvoiceItemsRead(String team, String invoiceId, String id) throws ApiException {
        ApiResponse<InvoiceItem> localVarResp = teamsBillingInvoiceItemsReadWithHttpInfo(team, invoiceId, id);
        return localVarResp.getData();
    }

    /**
     * Get a specific team InvoiceItem.
     * 
     * @param team Team unique identifier expressed as UUID or name. (required)
     * @param invoiceId Invoice id, expressed as UUID. (required)
     * @param id InvoiceItem id, expressed as UUID. (required)
     * @return ApiResponse&lt;InvoiceItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Team invoiceItem retrieved. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> InvoiceItem not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InvoiceItem> teamsBillingInvoiceItemsReadWithHttpInfo(String team, String invoiceId, String id) throws ApiException {
        okhttp3.Call localVarCall = teamsBillingInvoiceItemsReadValidateBeforeCall(team, invoiceId, id, null);
        Type localVarReturnType = new TypeToken<InvoiceItem>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a specific team InvoiceItem. (asynchronously)
     * 
     * @param team Team unique identifier expressed as UUID or name. (required)
     * @param invoiceId Invoice id, expressed as UUID. (required)
     * @param id InvoiceItem id, expressed as UUID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Team invoiceItem retrieved. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> InvoiceItem not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call teamsBillingInvoiceItemsReadAsync(String team, String invoiceId, String id, final ApiCallback<InvoiceItem> _callback) throws ApiException {

        okhttp3.Call localVarCall = teamsBillingInvoiceItemsReadValidateBeforeCall(team, invoiceId, id, _callback);
        Type localVarReturnType = new TypeToken<InvoiceItem>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for teamsBillingInvoicesList
     * @param team Team unique identifier expressed as UUID or name. (required)
     * @param limit Limit when getting items. (optional)
     * @param offset Offset when getting items. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Invoice list. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call teamsBillingInvoicesListCall(String team, String limit, String offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/teams/{team}/billing/invoices/"
            .replace("{" + "team" + "}", localVarApiClient.escapeString(team.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call teamsBillingInvoicesListValidateBeforeCall(String team, String limit, String offset, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'team' is set
        if (team == null) {
            throw new ApiException("Missing the required parameter 'team' when calling teamsBillingInvoicesList(Async)");
        }

        return teamsBillingInvoicesListCall(team, limit, offset, _callback);

    }

    /**
     * Get team invoices
     * 
     * @param team Team unique identifier expressed as UUID or name. (required)
     * @param limit Limit when getting items. (optional)
     * @param offset Offset when getting items. (optional)
     * @return List&lt;Invoice&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Invoice list. </td><td>  -  </td></tr>
     </table>
     */
    public List<Invoice> teamsBillingInvoicesList(String team, String limit, String offset) throws ApiException {
        ApiResponse<List<Invoice>> localVarResp = teamsBillingInvoicesListWithHttpInfo(team, limit, offset);
        return localVarResp.getData();
    }

    /**
     * Get team invoices
     * 
     * @param team Team unique identifier expressed as UUID or name. (required)
     * @param limit Limit when getting items. (optional)
     * @param offset Offset when getting items. (optional)
     * @return ApiResponse&lt;List&lt;Invoice&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Invoice list. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Invoice>> teamsBillingInvoicesListWithHttpInfo(String team, String limit, String offset) throws ApiException {
        okhttp3.Call localVarCall = teamsBillingInvoicesListValidateBeforeCall(team, limit, offset, null);
        Type localVarReturnType = new TypeToken<List<Invoice>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get team invoices (asynchronously)
     * 
     * @param team Team unique identifier expressed as UUID or name. (required)
     * @param limit Limit when getting items. (optional)
     * @param offset Offset when getting items. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Invoice list. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call teamsBillingInvoicesListAsync(String team, String limit, String offset, final ApiCallback<List<Invoice>> _callback) throws ApiException {

        okhttp3.Call localVarCall = teamsBillingInvoicesListValidateBeforeCall(team, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<List<Invoice>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for teamsBillingInvoicesRead
     * @param team Team unique identifier expressed as UUID or name. (required)
     * @param id Invoice unique identifier expressed as UUID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Team invoice retrieved. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Team invoice not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call teamsBillingInvoicesReadCall(String team, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/teams/{team}/billing/invoices/{id}/"
            .replace("{" + "team" + "}", localVarApiClient.escapeString(team.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call teamsBillingInvoicesReadValidateBeforeCall(String team, String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'team' is set
        if (team == null) {
            throw new ApiException("Missing the required parameter 'team' when calling teamsBillingInvoicesRead(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling teamsBillingInvoicesRead(Async)");
        }

        return teamsBillingInvoicesReadCall(team, id, _callback);

    }

    /**
     * Get an invoice
     * 
     * @param team Team unique identifier expressed as UUID or name. (required)
     * @param id Invoice unique identifier expressed as UUID. (required)
     * @return Invoice
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Team invoice retrieved. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Team invoice not found. </td><td>  -  </td></tr>
     </table>
     */
    public Invoice teamsBillingInvoicesRead(String team, String id) throws ApiException {
        ApiResponse<Invoice> localVarResp = teamsBillingInvoicesReadWithHttpInfo(team, id);
        return localVarResp.getData();
    }

    /**
     * Get an invoice
     * 
     * @param team Team unique identifier expressed as UUID or name. (required)
     * @param id Invoice unique identifier expressed as UUID. (required)
     * @return ApiResponse&lt;Invoice&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Team invoice retrieved. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Team invoice not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Invoice> teamsBillingInvoicesReadWithHttpInfo(String team, String id) throws ApiException {
        okhttp3.Call localVarCall = teamsBillingInvoicesReadValidateBeforeCall(team, id, null);
        Type localVarReturnType = new TypeToken<Invoice>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get an invoice (asynchronously)
     * 
     * @param team Team unique identifier expressed as UUID or name. (required)
     * @param id Invoice unique identifier expressed as UUID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Team invoice retrieved. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Team invoice not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call teamsBillingInvoicesReadAsync(String team, String id, final ApiCallback<Invoice> _callback) throws ApiException {

        okhttp3.Call localVarCall = teamsBillingInvoicesReadValidateBeforeCall(team, id, _callback);
        Type localVarReturnType = new TypeToken<Invoice>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for teamsBillingSubscriptionsCreate
     * @param team Team unique identifier expressed as UUID or name. (required)
     * @param subscriptionData  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Team subscription created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call teamsBillingSubscriptionsCreateCall(String team, SubscriptionData subscriptionData, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = subscriptionData;

        // create path and map variables
        String localVarPath = "/v1/teams/{team}/billing/subscriptions/"
            .replace("{" + "team" + "}", localVarApiClient.escapeString(team.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call teamsBillingSubscriptionsCreateValidateBeforeCall(String team, SubscriptionData subscriptionData, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'team' is set
        if (team == null) {
            throw new ApiException("Missing the required parameter 'team' when calling teamsBillingSubscriptionsCreate(Async)");
        }

        return teamsBillingSubscriptionsCreateCall(team, subscriptionData, _callback);

    }

    /**
     * Create a new team subscription
     * 
     * @param team Team unique identifier expressed as UUID or name. (required)
     * @param subscriptionData  (optional)
     * @return Subscription
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Team subscription created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied </td><td>  -  </td></tr>
     </table>
     */
    public Subscription teamsBillingSubscriptionsCreate(String team, SubscriptionData subscriptionData) throws ApiException {
        ApiResponse<Subscription> localVarResp = teamsBillingSubscriptionsCreateWithHttpInfo(team, subscriptionData);
        return localVarResp.getData();
    }

    /**
     * Create a new team subscription
     * 
     * @param team Team unique identifier expressed as UUID or name. (required)
     * @param subscriptionData  (optional)
     * @return ApiResponse&lt;Subscription&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Team subscription created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Subscription> teamsBillingSubscriptionsCreateWithHttpInfo(String team, SubscriptionData subscriptionData) throws ApiException {
        okhttp3.Call localVarCall = teamsBillingSubscriptionsCreateValidateBeforeCall(team, subscriptionData, null);
        Type localVarReturnType = new TypeToken<Subscription>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a new team subscription (asynchronously)
     * 
     * @param team Team unique identifier expressed as UUID or name. (required)
     * @param subscriptionData  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Team subscription created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call teamsBillingSubscriptionsCreateAsync(String team, SubscriptionData subscriptionData, final ApiCallback<Subscription> _callback) throws ApiException {

        okhttp3.Call localVarCall = teamsBillingSubscriptionsCreateValidateBeforeCall(team, subscriptionData, _callback);
        Type localVarReturnType = new TypeToken<Subscription>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for teamsBillingSubscriptionsDelete
     * @param team Team unique identifier expressed as UUID or name. (required)
     * @param id Subscription unique identifier expressed as UUID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Subscription deleted. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Subscription not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call teamsBillingSubscriptionsDeleteCall(String team, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/teams/{team}/billing/subscriptions/{id}/"
            .replace("{" + "team" + "}", localVarApiClient.escapeString(team.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call teamsBillingSubscriptionsDeleteValidateBeforeCall(String team, String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'team' is set
        if (team == null) {
            throw new ApiException("Missing the required parameter 'team' when calling teamsBillingSubscriptionsDelete(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling teamsBillingSubscriptionsDelete(Async)");
        }

        return teamsBillingSubscriptionsDeleteCall(team, id, _callback);

    }

    /**
     * Delete a subscription
     * 
     * @param team Team unique identifier expressed as UUID or name. (required)
     * @param id Subscription unique identifier expressed as UUID. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Subscription deleted. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Subscription not found. </td><td>  -  </td></tr>
     </table>
     */
    public void teamsBillingSubscriptionsDelete(String team, String id) throws ApiException {
        teamsBillingSubscriptionsDeleteWithHttpInfo(team, id);
    }

    /**
     * Delete a subscription
     * 
     * @param team Team unique identifier expressed as UUID or name. (required)
     * @param id Subscription unique identifier expressed as UUID. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Subscription deleted. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Subscription not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> teamsBillingSubscriptionsDeleteWithHttpInfo(String team, String id) throws ApiException {
        okhttp3.Call localVarCall = teamsBillingSubscriptionsDeleteValidateBeforeCall(team, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a subscription (asynchronously)
     * 
     * @param team Team unique identifier expressed as UUID or name. (required)
     * @param id Subscription unique identifier expressed as UUID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Subscription deleted. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Subscription not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call teamsBillingSubscriptionsDeleteAsync(String team, String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = teamsBillingSubscriptionsDeleteValidateBeforeCall(team, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for teamsBillingSubscriptionsList
     * @param team Team unique identifier expressed as UUID or name. (required)
     * @param limit Limit when getting items. (optional)
     * @param offset Offset when getting items. (optional)
     * @param ordering Ordering when getting items. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Teams subscription list. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call teamsBillingSubscriptionsListCall(String team, String limit, String offset, String ordering, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/teams/{team}/billing/subscriptions/"
            .replace("{" + "team" + "}", localVarApiClient.escapeString(team.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call teamsBillingSubscriptionsListValidateBeforeCall(String team, String limit, String offset, String ordering, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'team' is set
        if (team == null) {
            throw new ApiException("Missing the required parameter 'team' when calling teamsBillingSubscriptionsList(Async)");
        }

        return teamsBillingSubscriptionsListCall(team, limit, offset, ordering, _callback);

    }

    /**
     * Get active team subscriptons
     * 
     * @param team Team unique identifier expressed as UUID or name. (required)
     * @param limit Limit when getting items. (optional)
     * @param offset Offset when getting items. (optional)
     * @param ordering Ordering when getting items. (optional)
     * @return List&lt;Subscription&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Teams subscription list. </td><td>  -  </td></tr>
     </table>
     */
    public List<Subscription> teamsBillingSubscriptionsList(String team, String limit, String offset, String ordering) throws ApiException {
        ApiResponse<List<Subscription>> localVarResp = teamsBillingSubscriptionsListWithHttpInfo(team, limit, offset, ordering);
        return localVarResp.getData();
    }

    /**
     * Get active team subscriptons
     * 
     * @param team Team unique identifier expressed as UUID or name. (required)
     * @param limit Limit when getting items. (optional)
     * @param offset Offset when getting items. (optional)
     * @param ordering Ordering when getting items. (optional)
     * @return ApiResponse&lt;List&lt;Subscription&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Teams subscription list. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Subscription>> teamsBillingSubscriptionsListWithHttpInfo(String team, String limit, String offset, String ordering) throws ApiException {
        okhttp3.Call localVarCall = teamsBillingSubscriptionsListValidateBeforeCall(team, limit, offset, ordering, null);
        Type localVarReturnType = new TypeToken<List<Subscription>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get active team subscriptons (asynchronously)
     * 
     * @param team Team unique identifier expressed as UUID or name. (required)
     * @param limit Limit when getting items. (optional)
     * @param offset Offset when getting items. (optional)
     * @param ordering Ordering when getting items. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Teams subscription list. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call teamsBillingSubscriptionsListAsync(String team, String limit, String offset, String ordering, final ApiCallback<List<Subscription>> _callback) throws ApiException {

        okhttp3.Call localVarCall = teamsBillingSubscriptionsListValidateBeforeCall(team, limit, offset, ordering, _callback);
        Type localVarReturnType = new TypeToken<List<Subscription>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for teamsBillingSubscriptionsRead
     * @param team Team unique identifier expressed as UUID or name. (required)
     * @param id Unique identifier expressed as UUID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Team subscription retrieved. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Subscription not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call teamsBillingSubscriptionsReadCall(String team, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/teams/{team}/billing/subscriptions/{id}/"
            .replace("{" + "team" + "}", localVarApiClient.escapeString(team.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call teamsBillingSubscriptionsReadValidateBeforeCall(String team, String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'team' is set
        if (team == null) {
            throw new ApiException("Missing the required parameter 'team' when calling teamsBillingSubscriptionsRead(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling teamsBillingSubscriptionsRead(Async)");
        }

        return teamsBillingSubscriptionsReadCall(team, id, _callback);

    }

    /**
     * Get team subscriptions
     * 
     * @param team Team unique identifier expressed as UUID or name. (required)
     * @param id Unique identifier expressed as UUID. (required)
     * @return Subscription
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Team subscription retrieved. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Subscription not found. </td><td>  -  </td></tr>
     </table>
     */
    public Subscription teamsBillingSubscriptionsRead(String team, String id) throws ApiException {
        ApiResponse<Subscription> localVarResp = teamsBillingSubscriptionsReadWithHttpInfo(team, id);
        return localVarResp.getData();
    }

    /**
     * Get team subscriptions
     * 
     * @param team Team unique identifier expressed as UUID or name. (required)
     * @param id Unique identifier expressed as UUID. (required)
     * @return ApiResponse&lt;Subscription&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Team subscription retrieved. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Subscription not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Subscription> teamsBillingSubscriptionsReadWithHttpInfo(String team, String id) throws ApiException {
        okhttp3.Call localVarCall = teamsBillingSubscriptionsReadValidateBeforeCall(team, id, null);
        Type localVarReturnType = new TypeToken<Subscription>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get team subscriptions (asynchronously)
     * 
     * @param team Team unique identifier expressed as UUID or name. (required)
     * @param id Unique identifier expressed as UUID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Team subscription retrieved. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Subscription not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call teamsBillingSubscriptionsReadAsync(String team, String id, final ApiCallback<Subscription> _callback) throws ApiException {

        okhttp3.Call localVarCall = teamsBillingSubscriptionsReadValidateBeforeCall(team, id, _callback);
        Type localVarReturnType = new TypeToken<Subscription>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for teamsCreate
     * @param teamData  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Team created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call teamsCreateCall(TeamData teamData, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = teamData;

        // create path and map variables
        String localVarPath = "/v1/teams/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call teamsCreateValidateBeforeCall(TeamData teamData, final ApiCallback _callback) throws ApiException {
        return teamsCreateCall(teamData, _callback);

    }

    /**
     * Create a new team
     * 
     * @param teamData  (optional)
     * @return Team
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Team created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied </td><td>  -  </td></tr>
     </table>
     */
    public Team teamsCreate(TeamData teamData) throws ApiException {
        ApiResponse<Team> localVarResp = teamsCreateWithHttpInfo(teamData);
        return localVarResp.getData();
    }

    /**
     * Create a new team
     * 
     * @param teamData  (optional)
     * @return ApiResponse&lt;Team&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Team created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Team> teamsCreateWithHttpInfo(TeamData teamData) throws ApiException {
        okhttp3.Call localVarCall = teamsCreateValidateBeforeCall(teamData, null);
        Type localVarReturnType = new TypeToken<Team>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a new team (asynchronously)
     * 
     * @param teamData  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Team created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call teamsCreateAsync(TeamData teamData, final ApiCallback<Team> _callback) throws ApiException {

        okhttp3.Call localVarCall = teamsCreateValidateBeforeCall(teamData, _callback);
        Type localVarReturnType = new TypeToken<Team>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for teamsDelete
     * @param team Team unique identifier expressed as UUID or name. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Team deleted. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Team not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call teamsDeleteCall(String team, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/teams/{team}/"
            .replace("{" + "team" + "}", localVarApiClient.escapeString(team.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call teamsDeleteValidateBeforeCall(String team, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'team' is set
        if (team == null) {
            throw new ApiException("Missing the required parameter 'team' when calling teamsDelete(Async)");
        }

        return teamsDeleteCall(team, _callback);

    }

    /**
     * Delete a team
     * 
     * @param team Team unique identifier expressed as UUID or name. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Team deleted. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Team not found. </td><td>  -  </td></tr>
     </table>
     */
    public void teamsDelete(String team) throws ApiException {
        teamsDeleteWithHttpInfo(team);
    }

    /**
     * Delete a team
     * 
     * @param team Team unique identifier expressed as UUID or name. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Team deleted. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Team not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> teamsDeleteWithHttpInfo(String team) throws ApiException {
        okhttp3.Call localVarCall = teamsDeleteValidateBeforeCall(team, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a team (asynchronously)
     * 
     * @param team Team unique identifier expressed as UUID or name. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Team deleted. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Team not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call teamsDeleteAsync(String team, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = teamsDeleteValidateBeforeCall(team, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for teamsGroupsAddToGroup
     * @param team Team unique identifier expressed as UUID or name. (required)
     * @param group Group unique identifier expressed as UUID or name. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User added to group. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Group not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call teamsGroupsAddToGroupCall(String team, String group, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/teams/{team}/groups/{group}/add/"
            .replace("{" + "team" + "}", localVarApiClient.escapeString(team.toString()))
            .replace("{" + "group" + "}", localVarApiClient.escapeString(group.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call teamsGroupsAddToGroupValidateBeforeCall(String team, String group, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'team' is set
        if (team == null) {
            throw new ApiException("Missing the required parameter 'team' when calling teamsGroupsAddToGroup(Async)");
        }

        // verify the required parameter 'group' is set
        if (group == null) {
            throw new ApiException("Missing the required parameter 'group' when calling teamsGroupsAddToGroup(Async)");
        }

        return teamsGroupsAddToGroupCall(team, group, _callback);

    }

    /**
     * Add user to group
     * 
     * @param team Team unique identifier expressed as UUID or name. (required)
     * @param group Group unique identifier expressed as UUID or name. (required)
     * @return GroupUser
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User added to group. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Group not found </td><td>  -  </td></tr>
     </table>
     */
    public GroupUser teamsGroupsAddToGroup(String team, String group) throws ApiException {
        ApiResponse<GroupUser> localVarResp = teamsGroupsAddToGroupWithHttpInfo(team, group);
        return localVarResp.getData();
    }

    /**
     * Add user to group
     * 
     * @param team Team unique identifier expressed as UUID or name. (required)
     * @param group Group unique identifier expressed as UUID or name. (required)
     * @return ApiResponse&lt;GroupUser&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User added to group. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Group not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GroupUser> teamsGroupsAddToGroupWithHttpInfo(String team, String group) throws ApiException {
        okhttp3.Call localVarCall = teamsGroupsAddToGroupValidateBeforeCall(team, group, null);
        Type localVarReturnType = new TypeToken<GroupUser>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add user to group (asynchronously)
     * 
     * @param team Team unique identifier expressed as UUID or name. (required)
     * @param group Group unique identifier expressed as UUID or name. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User added to group. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Group not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call teamsGroupsAddToGroupAsync(String team, String group, final ApiCallback<GroupUser> _callback) throws ApiException {

        okhttp3.Call localVarCall = teamsGroupsAddToGroupValidateBeforeCall(team, group, _callback);
        Type localVarReturnType = new TypeToken<GroupUser>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for teamsGroupsDelete
     * @param team Team unique identifier expressed as UUID or name. (required)
     * @param group Group unique identifier expressed as UUID or name. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Group deleted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Group not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call teamsGroupsDeleteCall(String team, String group, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/teams/{team}/groups/{group}/"
            .replace("{" + "team" + "}", localVarApiClient.escapeString(team.toString()))
            .replace("{" + "group" + "}", localVarApiClient.escapeString(group.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call teamsGroupsDeleteValidateBeforeCall(String team, String group, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'team' is set
        if (team == null) {
            throw new ApiException("Missing the required parameter 'team' when calling teamsGroupsDelete(Async)");
        }

        // verify the required parameter 'group' is set
        if (group == null) {
            throw new ApiException("Missing the required parameter 'group' when calling teamsGroupsDelete(Async)");
        }

        return teamsGroupsDeleteCall(team, group, _callback);

    }

    /**
     * Delete team group
     * 
     * @param team Team unique identifier expressed as UUID or name. (required)
     * @param group Group unique identifier expressed as UUID or name. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Group deleted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Group not found. </td><td>  -  </td></tr>
     </table>
     */
    public void teamsGroupsDelete(String team, String group) throws ApiException {
        teamsGroupsDeleteWithHttpInfo(team, group);
    }

    /**
     * Delete team group
     * 
     * @param team Team unique identifier expressed as UUID or name. (required)
     * @param group Group unique identifier expressed as UUID or name. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Group deleted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Group not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> teamsGroupsDeleteWithHttpInfo(String team, String group) throws ApiException {
        okhttp3.Call localVarCall = teamsGroupsDeleteValidateBeforeCall(team, group, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete team group (asynchronously)
     * 
     * @param team Team unique identifier expressed as UUID or name. (required)
     * @param group Group unique identifier expressed as UUID or name. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Group deleted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Group not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call teamsGroupsDeleteAsync(String team, String group, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = teamsGroupsDeleteValidateBeforeCall(team, group, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for teamsGroupsList
     * @param team Team unique identifier expressed as UUID or name. (required)
     * @param limit Limit when getting data. (optional)
     * @param offset Offset when getting data. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Team groups list </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call teamsGroupsListCall(String team, String limit, String offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/teams/{team}/groups/"
            .replace("{" + "team" + "}", localVarApiClient.escapeString(team.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call teamsGroupsListValidateBeforeCall(String team, String limit, String offset, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'team' is set
        if (team == null) {
            throw new ApiException("Missing the required parameter 'team' when calling teamsGroupsList(Async)");
        }

        return teamsGroupsListCall(team, limit, offset, _callback);

    }

    /**
     * Get team groups
     * 
     * @param team Team unique identifier expressed as UUID or name. (required)
     * @param limit Limit when getting data. (optional)
     * @param offset Offset when getting data. (optional)
     * @return List&lt;Group&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Team groups list </td><td>  -  </td></tr>
     </table>
     */
    public List<Group> teamsGroupsList(String team, String limit, String offset) throws ApiException {
        ApiResponse<List<Group>> localVarResp = teamsGroupsListWithHttpInfo(team, limit, offset);
        return localVarResp.getData();
    }

    /**
     * Get team groups
     * 
     * @param team Team unique identifier expressed as UUID or name. (required)
     * @param limit Limit when getting data. (optional)
     * @param offset Offset when getting data. (optional)
     * @return ApiResponse&lt;List&lt;Group&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Team groups list </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Group>> teamsGroupsListWithHttpInfo(String team, String limit, String offset) throws ApiException {
        okhttp3.Call localVarCall = teamsGroupsListValidateBeforeCall(team, limit, offset, null);
        Type localVarReturnType = new TypeToken<List<Group>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get team groups (asynchronously)
     * 
     * @param team Team unique identifier expressed as UUID or name. (required)
     * @param limit Limit when getting data. (optional)
     * @param offset Offset when getting data. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Team groups list </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call teamsGroupsListAsync(String team, String limit, String offset, final ApiCallback<List<Group>> _callback) throws ApiException {

        okhttp3.Call localVarCall = teamsGroupsListValidateBeforeCall(team, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<List<Group>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for teamsGroupsRead
     * @param team Team unique identifier expressed as UUID or name. (required)
     * @param group Group unique identifier expressed as UUID or name. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Group retrieved. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call teamsGroupsReadCall(String team, String group, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/teams/{team}/groups/{group}/"
            .replace("{" + "team" + "}", localVarApiClient.escapeString(team.toString()))
            .replace("{" + "group" + "}", localVarApiClient.escapeString(group.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call teamsGroupsReadValidateBeforeCall(String team, String group, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'team' is set
        if (team == null) {
            throw new ApiException("Missing the required parameter 'team' when calling teamsGroupsRead(Async)");
        }

        // verify the required parameter 'group' is set
        if (group == null) {
            throw new ApiException("Missing the required parameter 'group' when calling teamsGroupsRead(Async)");
        }

        return teamsGroupsReadCall(team, group, _callback);

    }

    /**
     * Get team group
     * 
     * @param team Team unique identifier expressed as UUID or name. (required)
     * @param group Group unique identifier expressed as UUID or name. (required)
     * @return Group
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Group retrieved. </td><td>  -  </td></tr>
     </table>
     */
    public Group teamsGroupsRead(String team, String group) throws ApiException {
        ApiResponse<Group> localVarResp = teamsGroupsReadWithHttpInfo(team, group);
        return localVarResp.getData();
    }

    /**
     * Get team group
     * 
     * @param team Team unique identifier expressed as UUID or name. (required)
     * @param group Group unique identifier expressed as UUID or name. (required)
     * @return ApiResponse&lt;Group&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Group retrieved. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Group> teamsGroupsReadWithHttpInfo(String team, String group) throws ApiException {
        okhttp3.Call localVarCall = teamsGroupsReadValidateBeforeCall(team, group, null);
        Type localVarReturnType = new TypeToken<Group>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get team group (asynchronously)
     * 
     * @param team Team unique identifier expressed as UUID or name. (required)
     * @param group Group unique identifier expressed as UUID or name. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Group retrieved. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call teamsGroupsReadAsync(String team, String group, final ApiCallback<Group> _callback) throws ApiException {

        okhttp3.Call localVarCall = teamsGroupsReadValidateBeforeCall(team, group, _callback);
        Type localVarReturnType = new TypeToken<Group>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for teamsGroupsRemoveFromGroup
     * @param team Team unique identifier expressed as UUID or name. (required)
     * @param group Group unique identifier expressed as UUID or name. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User removed from group. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Group not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call teamsGroupsRemoveFromGroupCall(String team, String group, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/teams/{team}/groups/{group}/remove/"
            .replace("{" + "team" + "}", localVarApiClient.escapeString(team.toString()))
            .replace("{" + "group" + "}", localVarApiClient.escapeString(group.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call teamsGroupsRemoveFromGroupValidateBeforeCall(String team, String group, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'team' is set
        if (team == null) {
            throw new ApiException("Missing the required parameter 'team' when calling teamsGroupsRemoveFromGroup(Async)");
        }

        // verify the required parameter 'group' is set
        if (group == null) {
            throw new ApiException("Missing the required parameter 'group' when calling teamsGroupsRemoveFromGroup(Async)");
        }

        return teamsGroupsRemoveFromGroupCall(team, group, _callback);

    }

    /**
     * User removed from group
     * 
     * @param team Team unique identifier expressed as UUID or name. (required)
     * @param group Group unique identifier expressed as UUID or name. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User removed from group. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Group not found </td><td>  -  </td></tr>
     </table>
     */
    public void teamsGroupsRemoveFromGroup(String team, String group) throws ApiException {
        teamsGroupsRemoveFromGroupWithHttpInfo(team, group);
    }

    /**
     * User removed from group
     * 
     * @param team Team unique identifier expressed as UUID or name. (required)
     * @param group Group unique identifier expressed as UUID or name. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User removed from group. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Group not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> teamsGroupsRemoveFromGroupWithHttpInfo(String team, String group) throws ApiException {
        okhttp3.Call localVarCall = teamsGroupsRemoveFromGroupValidateBeforeCall(team, group, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * User removed from group (asynchronously)
     * 
     * @param team Team unique identifier expressed as UUID or name. (required)
     * @param group Group unique identifier expressed as UUID or name. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User removed from group. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Group not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call teamsGroupsRemoveFromGroupAsync(String team, String group, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = teamsGroupsRemoveFromGroupValidateBeforeCall(team, group, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for teamsGroupsReplace
     * @param team Team unique identifier expressed as UUID or name. (required)
     * @param group Group unique identifier expressed as UUID or name. (required)
     * @param groupData  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Group replaced </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call teamsGroupsReplaceCall(String team, String group, GroupData groupData, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = groupData;

        // create path and map variables
        String localVarPath = "/v1/teams/{team}/groups/{group}/"
            .replace("{" + "team" + "}", localVarApiClient.escapeString(team.toString()))
            .replace("{" + "group" + "}", localVarApiClient.escapeString(group.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call teamsGroupsReplaceValidateBeforeCall(String team, String group, GroupData groupData, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'team' is set
        if (team == null) {
            throw new ApiException("Missing the required parameter 'team' when calling teamsGroupsReplace(Async)");
        }

        // verify the required parameter 'group' is set
        if (group == null) {
            throw new ApiException("Missing the required parameter 'group' when calling teamsGroupsReplace(Async)");
        }

        return teamsGroupsReplaceCall(team, group, groupData, _callback);

    }

    /**
     * Patch team group
     * 
     * @param team Team unique identifier expressed as UUID or name. (required)
     * @param group Group unique identifier expressed as UUID or name. (required)
     * @param groupData  (optional)
     * @return Group
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Group replaced </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied </td><td>  -  </td></tr>
     </table>
     */
    public Group teamsGroupsReplace(String team, String group, GroupData groupData) throws ApiException {
        ApiResponse<Group> localVarResp = teamsGroupsReplaceWithHttpInfo(team, group, groupData);
        return localVarResp.getData();
    }

    /**
     * Patch team group
     * 
     * @param team Team unique identifier expressed as UUID or name. (required)
     * @param group Group unique identifier expressed as UUID or name. (required)
     * @param groupData  (optional)
     * @return ApiResponse&lt;Group&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Group replaced </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Group> teamsGroupsReplaceWithHttpInfo(String team, String group, GroupData groupData) throws ApiException {
        okhttp3.Call localVarCall = teamsGroupsReplaceValidateBeforeCall(team, group, groupData, null);
        Type localVarReturnType = new TypeToken<Group>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Patch team group (asynchronously)
     * 
     * @param team Team unique identifier expressed as UUID or name. (required)
     * @param group Group unique identifier expressed as UUID or name. (required)
     * @param groupData  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Group replaced </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call teamsGroupsReplaceAsync(String team, String group, GroupData groupData, final ApiCallback<Group> _callback) throws ApiException {

        okhttp3.Call localVarCall = teamsGroupsReplaceValidateBeforeCall(team, group, groupData, _callback);
        Type localVarReturnType = new TypeToken<Group>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for teamsGroupsUpdate
     * @param team Team unique identifier expressed as UUID or name. (required)
     * @param group Group unique identifier expressed as UUID or name. (required)
     * @param groupData  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Group updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Group not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call teamsGroupsUpdateCall(String team, String group, GroupData groupData, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = groupData;

        // create path and map variables
        String localVarPath = "/v1/teams/{team}/groups/{group}/"
            .replace("{" + "team" + "}", localVarApiClient.escapeString(team.toString()))
            .replace("{" + "group" + "}", localVarApiClient.escapeString(group.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call teamsGroupsUpdateValidateBeforeCall(String team, String group, GroupData groupData, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'team' is set
        if (team == null) {
            throw new ApiException("Missing the required parameter 'team' when calling teamsGroupsUpdate(Async)");
        }

        // verify the required parameter 'group' is set
        if (group == null) {
            throw new ApiException("Missing the required parameter 'group' when calling teamsGroupsUpdate(Async)");
        }

        return teamsGroupsUpdateCall(team, group, groupData, _callback);

    }

    /**
     * Patch team group
     * 
     * @param team Team unique identifier expressed as UUID or name. (required)
     * @param group Group unique identifier expressed as UUID or name. (required)
     * @param groupData  (optional)
     * @return Group
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Group updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Group not found. </td><td>  -  </td></tr>
     </table>
     */
    public Group teamsGroupsUpdate(String team, String group, GroupData groupData) throws ApiException {
        ApiResponse<Group> localVarResp = teamsGroupsUpdateWithHttpInfo(team, group, groupData);
        return localVarResp.getData();
    }

    /**
     * Patch team group
     * 
     * @param team Team unique identifier expressed as UUID or name. (required)
     * @param group Group unique identifier expressed as UUID or name. (required)
     * @param groupData  (optional)
     * @return ApiResponse&lt;Group&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Group updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Group not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Group> teamsGroupsUpdateWithHttpInfo(String team, String group, GroupData groupData) throws ApiException {
        okhttp3.Call localVarCall = teamsGroupsUpdateValidateBeforeCall(team, group, groupData, null);
        Type localVarReturnType = new TypeToken<Group>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Patch team group (asynchronously)
     * 
     * @param team Team unique identifier expressed as UUID or name. (required)
     * @param group Group unique identifier expressed as UUID or name. (required)
     * @param groupData  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Group updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Group not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call teamsGroupsUpdateAsync(String team, String group, GroupData groupData, final ApiCallback<Group> _callback) throws ApiException {

        okhttp3.Call localVarCall = teamsGroupsUpdateValidateBeforeCall(team, group, groupData, _callback);
        Type localVarReturnType = new TypeToken<Group>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for teamsList
     * @param limit Limit when getting data. (optional)
     * @param offset Offset when getting data. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Team list </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call teamsListCall(String limit, String offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/teams/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call teamsListValidateBeforeCall(String limit, String offset, final ApiCallback _callback) throws ApiException {
        return teamsListCall(limit, offset, _callback);

    }

    /**
     * Get teams
     * 
     * @param limit Limit when getting data. (optional)
     * @param offset Offset when getting data. (optional)
     * @return List&lt;Team&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Team list </td><td>  -  </td></tr>
     </table>
     */
    public List<Team> teamsList(String limit, String offset) throws ApiException {
        ApiResponse<List<Team>> localVarResp = teamsListWithHttpInfo(limit, offset);
        return localVarResp.getData();
    }

    /**
     * Get teams
     * 
     * @param limit Limit when getting data. (optional)
     * @param offset Offset when getting data. (optional)
     * @return ApiResponse&lt;List&lt;Team&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Team list </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Team>> teamsListWithHttpInfo(String limit, String offset) throws ApiException {
        okhttp3.Call localVarCall = teamsListValidateBeforeCall(limit, offset, null);
        Type localVarReturnType = new TypeToken<List<Team>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get teams (asynchronously)
     * 
     * @param limit Limit when getting data. (optional)
     * @param offset Offset when getting data. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Team list </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call teamsListAsync(String limit, String offset, final ApiCallback<List<Team>> _callback) throws ApiException {

        okhttp3.Call localVarCall = teamsListValidateBeforeCall(limit, offset, _callback);
        Type localVarReturnType = new TypeToken<List<Team>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for teamsRead
     * @param team Team unique identifier expressed as UUID or name. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Team retrieved successfully. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Team not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call teamsReadCall(String team, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/teams/{team}/"
            .replace("{" + "team" + "}", localVarApiClient.escapeString(team.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call teamsReadValidateBeforeCall(String team, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'team' is set
        if (team == null) {
            throw new ApiException("Missing the required parameter 'team' when calling teamsRead(Async)");
        }

        return teamsReadCall(team, _callback);

    }

    /**
     * Get a team
     * 
     * @param team Team unique identifier expressed as UUID or name. (required)
     * @return Team
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Team retrieved successfully. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Team not found. </td><td>  -  </td></tr>
     </table>
     */
    public Team teamsRead(String team) throws ApiException {
        ApiResponse<Team> localVarResp = teamsReadWithHttpInfo(team);
        return localVarResp.getData();
    }

    /**
     * Get a team
     * 
     * @param team Team unique identifier expressed as UUID or name. (required)
     * @return ApiResponse&lt;Team&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Team retrieved successfully. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Team not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Team> teamsReadWithHttpInfo(String team) throws ApiException {
        okhttp3.Call localVarCall = teamsReadValidateBeforeCall(team, null);
        Type localVarReturnType = new TypeToken<Team>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a team (asynchronously)
     * 
     * @param team Team unique identifier expressed as UUID or name. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Team retrieved successfully. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Team not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call teamsReadAsync(String team, final ApiCallback<Team> _callback) throws ApiException {

        okhttp3.Call localVarCall = teamsReadValidateBeforeCall(team, _callback);
        Type localVarReturnType = new TypeToken<Team>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for teamsReplace
     * @param team Team unique identifier expressed as UUID or name. (required)
     * @param teamData  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Team updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call teamsReplaceCall(String team, TeamData teamData, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = teamData;

        // create path and map variables
        String localVarPath = "/v1/teams/{team}/"
            .replace("{" + "team" + "}", localVarApiClient.escapeString(team.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call teamsReplaceValidateBeforeCall(String team, TeamData teamData, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'team' is set
        if (team == null) {
            throw new ApiException("Missing the required parameter 'team' when calling teamsReplace(Async)");
        }

        return teamsReplaceCall(team, teamData, _callback);

    }

    /**
     * Replace a team
     * 
     * @param team Team unique identifier expressed as UUID or name. (required)
     * @param teamData  (optional)
     * @return Team
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Team updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied. </td><td>  -  </td></tr>
     </table>
     */
    public Team teamsReplace(String team, TeamData teamData) throws ApiException {
        ApiResponse<Team> localVarResp = teamsReplaceWithHttpInfo(team, teamData);
        return localVarResp.getData();
    }

    /**
     * Replace a team
     * 
     * @param team Team unique identifier expressed as UUID or name. (required)
     * @param teamData  (optional)
     * @return ApiResponse&lt;Team&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Team updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Team> teamsReplaceWithHttpInfo(String team, TeamData teamData) throws ApiException {
        okhttp3.Call localVarCall = teamsReplaceValidateBeforeCall(team, teamData, null);
        Type localVarReturnType = new TypeToken<Team>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Replace a team (asynchronously)
     * 
     * @param team Team unique identifier expressed as UUID or name. (required)
     * @param teamData  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Team updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call teamsReplaceAsync(String team, TeamData teamData, final ApiCallback<Team> _callback) throws ApiException {

        okhttp3.Call localVarCall = teamsReplaceValidateBeforeCall(team, teamData, _callback);
        Type localVarReturnType = new TypeToken<Team>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for teamsUpdate
     * @param team Team unique identifier expressed as UUID or name. (required)
     * @param teamData  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Team updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Team not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call teamsUpdateCall(String team, TeamData teamData, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = teamData;

        // create path and map variables
        String localVarPath = "/v1/teams/{team}/"
            .replace("{" + "team" + "}", localVarApiClient.escapeString(team.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call teamsUpdateValidateBeforeCall(String team, TeamData teamData, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'team' is set
        if (team == null) {
            throw new ApiException("Missing the required parameter 'team' when calling teamsUpdate(Async)");
        }

        return teamsUpdateCall(team, teamData, _callback);

    }

    /**
     * Update a team
     * 
     * @param team Team unique identifier expressed as UUID or name. (required)
     * @param teamData  (optional)
     * @return Team
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Team updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Team not found </td><td>  -  </td></tr>
     </table>
     */
    public Team teamsUpdate(String team, TeamData teamData) throws ApiException {
        ApiResponse<Team> localVarResp = teamsUpdateWithHttpInfo(team, teamData);
        return localVarResp.getData();
    }

    /**
     * Update a team
     * 
     * @param team Team unique identifier expressed as UUID or name. (required)
     * @param teamData  (optional)
     * @return ApiResponse&lt;Team&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Team updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Team not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Team> teamsUpdateWithHttpInfo(String team, TeamData teamData) throws ApiException {
        okhttp3.Call localVarCall = teamsUpdateValidateBeforeCall(team, teamData, null);
        Type localVarReturnType = new TypeToken<Team>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a team (asynchronously)
     * 
     * @param team Team unique identifier expressed as UUID or name. (required)
     * @param teamData  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Team updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Team not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call teamsUpdateAsync(String team, TeamData teamData, final ApiCallback<Team> _callback) throws ApiException {

        okhttp3.Call localVarCall = teamsUpdateValidateBeforeCall(team, teamData, _callback);
        Type localVarReturnType = new TypeToken<Team>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
