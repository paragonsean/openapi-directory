/*
 * IllumiDesk
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ServerError
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:54:22.511892-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ServerError {
  public static final String SERIALIZED_NAME_CONFIG = "config";
  @SerializedName(SERIALIZED_NAME_CONFIG)
  private List<String> config = new ArrayList<>();

  public static final String SERIALIZED_NAME_CONNECTED = "connected";
  @SerializedName(SERIALIZED_NAME_CONNECTED)
  private List<String> connected = new ArrayList<>();

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private List<String> createdAt = new ArrayList<>();

  public static final String SERIALIZED_NAME_ENDPOINT = "endpoint";
  @SerializedName(SERIALIZED_NAME_ENDPOINT)
  private List<String> endpoint = new ArrayList<>();

  public static final String SERIALIZED_NAME_HOST = "host";
  @SerializedName(SERIALIZED_NAME_HOST)
  private List<String> host = new ArrayList<>();

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private List<String> id = new ArrayList<>();

  public static final String SERIALIZED_NAME_IMAGE_NAME = "image_name";
  @SerializedName(SERIALIZED_NAME_IMAGE_NAME)
  private List<String> imageName = new ArrayList<>();

  public static final String SERIALIZED_NAME_LOGS_URL = "logs_url";
  @SerializedName(SERIALIZED_NAME_LOGS_URL)
  private List<String> logsUrl = new ArrayList<>();

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private List<String> name = new ArrayList<>();

  public static final String SERIALIZED_NAME_NON_FIELD_ERRORS = "non_field_errors";
  @SerializedName(SERIALIZED_NAME_NON_FIELD_ERRORS)
  private List<String> nonFieldErrors = new ArrayList<>();

  public static final String SERIALIZED_NAME_SERVER_SIZE = "server_size";
  @SerializedName(SERIALIZED_NAME_SERVER_SIZE)
  private List<String> serverSize = new ArrayList<>();

  public static final String SERIALIZED_NAME_STARTUP_SCRIPT = "startup_script";
  @SerializedName(SERIALIZED_NAME_STARTUP_SCRIPT)
  private List<String> startupScript = new ArrayList<>();

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private List<String> status = new ArrayList<>();

  public static final String SERIALIZED_NAME_STATUS_URL = "status_url";
  @SerializedName(SERIALIZED_NAME_STATUS_URL)
  private List<String> statusUrl = new ArrayList<>();

  public ServerError() {
  }

  public ServerError config(List<String> config) {
    this.config = config;
    return this;
  }

  public ServerError addConfigItem(String configItem) {
    if (this.config == null) {
      this.config = new ArrayList<>();
    }
    this.config.add(configItem);
    return this;
  }

  /**
   * config field errors.
   * @return config
   */
  @javax.annotation.Nullable
  public List<String> getConfig() {
    return config;
  }

  public void setConfig(List<String> config) {
    this.config = config;
  }


  public ServerError connected(List<String> connected) {
    this.connected = connected;
    return this;
  }

  public ServerError addConnectedItem(String connectedItem) {
    if (this.connected == null) {
      this.connected = new ArrayList<>();
    }
    this.connected.add(connectedItem);
    return this;
  }

  /**
   * connected field errors.
   * @return connected
   */
  @javax.annotation.Nullable
  public List<String> getConnected() {
    return connected;
  }

  public void setConnected(List<String> connected) {
    this.connected = connected;
  }


  public ServerError createdAt(List<String> createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  public ServerError addCreatedAtItem(String createdAtItem) {
    if (this.createdAt == null) {
      this.createdAt = new ArrayList<>();
    }
    this.createdAt.add(createdAtItem);
    return this;
  }

  /**
   * created_at field errors.
   * @return createdAt
   */
  @javax.annotation.Nullable
  public List<String> getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(List<String> createdAt) {
    this.createdAt = createdAt;
  }


  public ServerError endpoint(List<String> endpoint) {
    this.endpoint = endpoint;
    return this;
  }

  public ServerError addEndpointItem(String endpointItem) {
    if (this.endpoint == null) {
      this.endpoint = new ArrayList<>();
    }
    this.endpoint.add(endpointItem);
    return this;
  }

  /**
   * endpoint field errors.
   * @return endpoint
   */
  @javax.annotation.Nullable
  public List<String> getEndpoint() {
    return endpoint;
  }

  public void setEndpoint(List<String> endpoint) {
    this.endpoint = endpoint;
  }


  public ServerError host(List<String> host) {
    this.host = host;
    return this;
  }

  public ServerError addHostItem(String hostItem) {
    if (this.host == null) {
      this.host = new ArrayList<>();
    }
    this.host.add(hostItem);
    return this;
  }

  /**
   * host field errors.
   * @return host
   */
  @javax.annotation.Nullable
  public List<String> getHost() {
    return host;
  }

  public void setHost(List<String> host) {
    this.host = host;
  }


  public ServerError id(List<String> id) {
    this.id = id;
    return this;
  }

  public ServerError addIdItem(String idItem) {
    if (this.id == null) {
      this.id = new ArrayList<>();
    }
    this.id.add(idItem);
    return this;
  }

  /**
   * id field errors.
   * @return id
   */
  @javax.annotation.Nullable
  public List<String> getId() {
    return id;
  }

  public void setId(List<String> id) {
    this.id = id;
  }


  public ServerError imageName(List<String> imageName) {
    this.imageName = imageName;
    return this;
  }

  public ServerError addImageNameItem(String imageNameItem) {
    if (this.imageName == null) {
      this.imageName = new ArrayList<>();
    }
    this.imageName.add(imageNameItem);
    return this;
  }

  /**
   * image_name field errors.
   * @return imageName
   */
  @javax.annotation.Nullable
  public List<String> getImageName() {
    return imageName;
  }

  public void setImageName(List<String> imageName) {
    this.imageName = imageName;
  }


  public ServerError logsUrl(List<String> logsUrl) {
    this.logsUrl = logsUrl;
    return this;
  }

  public ServerError addLogsUrlItem(String logsUrlItem) {
    if (this.logsUrl == null) {
      this.logsUrl = new ArrayList<>();
    }
    this.logsUrl.add(logsUrlItem);
    return this;
  }

  /**
   * logs_url field errors.
   * @return logsUrl
   */
  @javax.annotation.Nullable
  public List<String> getLogsUrl() {
    return logsUrl;
  }

  public void setLogsUrl(List<String> logsUrl) {
    this.logsUrl = logsUrl;
  }


  public ServerError name(List<String> name) {
    this.name = name;
    return this;
  }

  public ServerError addNameItem(String nameItem) {
    if (this.name == null) {
      this.name = new ArrayList<>();
    }
    this.name.add(nameItem);
    return this;
  }

  /**
   * name field errors.
   * @return name
   */
  @javax.annotation.Nullable
  public List<String> getName() {
    return name;
  }

  public void setName(List<String> name) {
    this.name = name;
  }


  public ServerError nonFieldErrors(List<String> nonFieldErrors) {
    this.nonFieldErrors = nonFieldErrors;
    return this;
  }

  public ServerError addNonFieldErrorsItem(String nonFieldErrorsItem) {
    if (this.nonFieldErrors == null) {
      this.nonFieldErrors = new ArrayList<>();
    }
    this.nonFieldErrors.add(nonFieldErrorsItem);
    return this;
  }

  /**
   * Errors not connected to any field.
   * @return nonFieldErrors
   */
  @javax.annotation.Nullable
  public List<String> getNonFieldErrors() {
    return nonFieldErrors;
  }

  public void setNonFieldErrors(List<String> nonFieldErrors) {
    this.nonFieldErrors = nonFieldErrors;
  }


  public ServerError serverSize(List<String> serverSize) {
    this.serverSize = serverSize;
    return this;
  }

  public ServerError addServerSizeItem(String serverSizeItem) {
    if (this.serverSize == null) {
      this.serverSize = new ArrayList<>();
    }
    this.serverSize.add(serverSizeItem);
    return this;
  }

  /**
   * server_size field errors.
   * @return serverSize
   */
  @javax.annotation.Nullable
  public List<String> getServerSize() {
    return serverSize;
  }

  public void setServerSize(List<String> serverSize) {
    this.serverSize = serverSize;
  }


  public ServerError startupScript(List<String> startupScript) {
    this.startupScript = startupScript;
    return this;
  }

  public ServerError addStartupScriptItem(String startupScriptItem) {
    if (this.startupScript == null) {
      this.startupScript = new ArrayList<>();
    }
    this.startupScript.add(startupScriptItem);
    return this;
  }

  /**
   * startup_script field errors.
   * @return startupScript
   */
  @javax.annotation.Nullable
  public List<String> getStartupScript() {
    return startupScript;
  }

  public void setStartupScript(List<String> startupScript) {
    this.startupScript = startupScript;
  }


  public ServerError status(List<String> status) {
    this.status = status;
    return this;
  }

  public ServerError addStatusItem(String statusItem) {
    if (this.status == null) {
      this.status = new ArrayList<>();
    }
    this.status.add(statusItem);
    return this;
  }

  /**
   * status field errors.
   * @return status
   */
  @javax.annotation.Nullable
  public List<String> getStatus() {
    return status;
  }

  public void setStatus(List<String> status) {
    this.status = status;
  }


  public ServerError statusUrl(List<String> statusUrl) {
    this.statusUrl = statusUrl;
    return this;
  }

  public ServerError addStatusUrlItem(String statusUrlItem) {
    if (this.statusUrl == null) {
      this.statusUrl = new ArrayList<>();
    }
    this.statusUrl.add(statusUrlItem);
    return this;
  }

  /**
   * status_url field errors.
   * @return statusUrl
   */
  @javax.annotation.Nullable
  public List<String> getStatusUrl() {
    return statusUrl;
  }

  public void setStatusUrl(List<String> statusUrl) {
    this.statusUrl = statusUrl;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ServerError serverError = (ServerError) o;
    return Objects.equals(this.config, serverError.config) &&
        Objects.equals(this.connected, serverError.connected) &&
        Objects.equals(this.createdAt, serverError.createdAt) &&
        Objects.equals(this.endpoint, serverError.endpoint) &&
        Objects.equals(this.host, serverError.host) &&
        Objects.equals(this.id, serverError.id) &&
        Objects.equals(this.imageName, serverError.imageName) &&
        Objects.equals(this.logsUrl, serverError.logsUrl) &&
        Objects.equals(this.name, serverError.name) &&
        Objects.equals(this.nonFieldErrors, serverError.nonFieldErrors) &&
        Objects.equals(this.serverSize, serverError.serverSize) &&
        Objects.equals(this.startupScript, serverError.startupScript) &&
        Objects.equals(this.status, serverError.status) &&
        Objects.equals(this.statusUrl, serverError.statusUrl);
  }

  @Override
  public int hashCode() {
    return Objects.hash(config, connected, createdAt, endpoint, host, id, imageName, logsUrl, name, nonFieldErrors, serverSize, startupScript, status, statusUrl);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ServerError {\n");
    sb.append("    config: ").append(toIndentedString(config)).append("\n");
    sb.append("    connected: ").append(toIndentedString(connected)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    endpoint: ").append(toIndentedString(endpoint)).append("\n");
    sb.append("    host: ").append(toIndentedString(host)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    imageName: ").append(toIndentedString(imageName)).append("\n");
    sb.append("    logsUrl: ").append(toIndentedString(logsUrl)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    nonFieldErrors: ").append(toIndentedString(nonFieldErrors)).append("\n");
    sb.append("    serverSize: ").append(toIndentedString(serverSize)).append("\n");
    sb.append("    startupScript: ").append(toIndentedString(startupScript)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    statusUrl: ").append(toIndentedString(statusUrl)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("config");
    openapiFields.add("connected");
    openapiFields.add("created_at");
    openapiFields.add("endpoint");
    openapiFields.add("host");
    openapiFields.add("id");
    openapiFields.add("image_name");
    openapiFields.add("logs_url");
    openapiFields.add("name");
    openapiFields.add("non_field_errors");
    openapiFields.add("server_size");
    openapiFields.add("startup_script");
    openapiFields.add("status");
    openapiFields.add("status_url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ServerError
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ServerError.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ServerError is not found in the empty JSON string", ServerError.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ServerError.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ServerError` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("config") != null && !jsonObj.get("config").isJsonNull() && !jsonObj.get("config").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `config` to be an array in the JSON string but got `%s`", jsonObj.get("config").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("connected") != null && !jsonObj.get("connected").isJsonNull() && !jsonObj.get("connected").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `connected` to be an array in the JSON string but got `%s`", jsonObj.get("connected").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("created_at") != null && !jsonObj.get("created_at").isJsonNull() && !jsonObj.get("created_at").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `created_at` to be an array in the JSON string but got `%s`", jsonObj.get("created_at").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("endpoint") != null && !jsonObj.get("endpoint").isJsonNull() && !jsonObj.get("endpoint").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `endpoint` to be an array in the JSON string but got `%s`", jsonObj.get("endpoint").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("host") != null && !jsonObj.get("host").isJsonNull() && !jsonObj.get("host").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `host` to be an array in the JSON string but got `%s`", jsonObj.get("host").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull() && !jsonObj.get("id").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be an array in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("image_name") != null && !jsonObj.get("image_name").isJsonNull() && !jsonObj.get("image_name").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `image_name` to be an array in the JSON string but got `%s`", jsonObj.get("image_name").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("logs_url") != null && !jsonObj.get("logs_url").isJsonNull() && !jsonObj.get("logs_url").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `logs_url` to be an array in the JSON string but got `%s`", jsonObj.get("logs_url").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull() && !jsonObj.get("name").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be an array in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("non_field_errors") != null && !jsonObj.get("non_field_errors").isJsonNull() && !jsonObj.get("non_field_errors").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `non_field_errors` to be an array in the JSON string but got `%s`", jsonObj.get("non_field_errors").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("server_size") != null && !jsonObj.get("server_size").isJsonNull() && !jsonObj.get("server_size").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `server_size` to be an array in the JSON string but got `%s`", jsonObj.get("server_size").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("startup_script") != null && !jsonObj.get("startup_script").isJsonNull() && !jsonObj.get("startup_script").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `startup_script` to be an array in the JSON string but got `%s`", jsonObj.get("startup_script").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull() && !jsonObj.get("status").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be an array in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("status_url") != null && !jsonObj.get("status_url").isJsonNull() && !jsonObj.get("status_url").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `status_url` to be an array in the JSON string but got `%s`", jsonObj.get("status_url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ServerError.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ServerError' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ServerError> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ServerError.class));

       return (TypeAdapter<T>) new TypeAdapter<ServerError>() {
           @Override
           public void write(JsonWriter out, ServerError value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ServerError read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ServerError given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ServerError
   * @throws IOException if the JSON string is invalid with respect to ServerError
   */
  public static ServerError fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ServerError.class);
  }

  /**
   * Convert an instance of ServerError to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

