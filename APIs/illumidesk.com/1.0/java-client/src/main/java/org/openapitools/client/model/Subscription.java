/*
 * IllumiDesk
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Subscription
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:54:22.511892-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Subscription {
  public static final String SERIALIZED_NAME_APPLICATION_FEE_PERCENT = "application_fee_percent";
  @SerializedName(SERIALIZED_NAME_APPLICATION_FEE_PERCENT)
  private BigDecimal applicationFeePercent;

  public static final String SERIALIZED_NAME_CANCEL_AT_PERIOD_END = "cancel_at_period_end";
  @SerializedName(SERIALIZED_NAME_CANCEL_AT_PERIOD_END)
  private Boolean cancelAtPeriodEnd;

  public static final String SERIALIZED_NAME_CANCELED_AT = "canceled_at";
  @SerializedName(SERIALIZED_NAME_CANCELED_AT)
  private String canceledAt;

  public static final String SERIALIZED_NAME_CREATED = "created";
  @SerializedName(SERIALIZED_NAME_CREATED)
  private String created;

  public static final String SERIALIZED_NAME_CURRENT_PERIOD_END = "current_period_end";
  @SerializedName(SERIALIZED_NAME_CURRENT_PERIOD_END)
  private String currentPeriodEnd;

  public static final String SERIALIZED_NAME_CURRENT_PERIOD_START = "current_period_start";
  @SerializedName(SERIALIZED_NAME_CURRENT_PERIOD_START)
  private String currentPeriodStart;

  public static final String SERIALIZED_NAME_ENDED_AT = "ended_at";
  @SerializedName(SERIALIZED_NAME_ENDED_AT)
  private String endedAt;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_LIVEMODE = "livemode";
  @SerializedName(SERIALIZED_NAME_LIVEMODE)
  private Boolean livemode;

  public static final String SERIALIZED_NAME_PLAN = "plan";
  @SerializedName(SERIALIZED_NAME_PLAN)
  private String plan;

  public static final String SERIALIZED_NAME_QUANTITY = "quantity";
  @SerializedName(SERIALIZED_NAME_QUANTITY)
  private Integer quantity;

  public static final String SERIALIZED_NAME_START = "start";
  @SerializedName(SERIALIZED_NAME_START)
  private String start;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_STRIPE_ID = "stripe_id";
  @SerializedName(SERIALIZED_NAME_STRIPE_ID)
  private String stripeId;

  public static final String SERIALIZED_NAME_TRIAL_END = "trial_end";
  @SerializedName(SERIALIZED_NAME_TRIAL_END)
  private String trialEnd;

  public static final String SERIALIZED_NAME_TRIAL_START = "trial_start";
  @SerializedName(SERIALIZED_NAME_TRIAL_START)
  private String trialStart;

  public Subscription() {
  }

  public Subscription applicationFeePercent(BigDecimal applicationFeePercent) {
    this.applicationFeePercent = applicationFeePercent;
    return this;
  }

  /**
   * Application fee percent.
   * @return applicationFeePercent
   */
  @javax.annotation.Nullable
  public BigDecimal getApplicationFeePercent() {
    return applicationFeePercent;
  }

  public void setApplicationFeePercent(BigDecimal applicationFeePercent) {
    this.applicationFeePercent = applicationFeePercent;
  }


  public Subscription cancelAtPeriodEnd(Boolean cancelAtPeriodEnd) {
    this.cancelAtPeriodEnd = cancelAtPeriodEnd;
    return this;
  }

  /**
   * Boolean value to determine whether plan cancels at the end of the period, or not.
   * @return cancelAtPeriodEnd
   */
  @javax.annotation.Nullable
  public Boolean getCancelAtPeriodEnd() {
    return cancelAtPeriodEnd;
  }

  public void setCancelAtPeriodEnd(Boolean cancelAtPeriodEnd) {
    this.cancelAtPeriodEnd = cancelAtPeriodEnd;
  }


  public Subscription canceledAt(String canceledAt) {
    this.canceledAt = canceledAt;
    return this;
  }

  /**
   * Date and time when plan was cancelled.
   * @return canceledAt
   */
  @javax.annotation.Nullable
  public String getCanceledAt() {
    return canceledAt;
  }

  public void setCanceledAt(String canceledAt) {
    this.canceledAt = canceledAt;
  }


  public Subscription created(String created) {
    this.created = created;
    return this;
  }

  /**
   * Date and time suscription was created.
   * @return created
   */
  @javax.annotation.Nullable
  public String getCreated() {
    return created;
  }

  public void setCreated(String created) {
    this.created = created;
  }


  public Subscription currentPeriodEnd(String currentPeriodEnd) {
    this.currentPeriodEnd = currentPeriodEnd;
    return this;
  }

  /**
   * Current suscription plan end date.
   * @return currentPeriodEnd
   */
  @javax.annotation.Nullable
  public String getCurrentPeriodEnd() {
    return currentPeriodEnd;
  }

  public void setCurrentPeriodEnd(String currentPeriodEnd) {
    this.currentPeriodEnd = currentPeriodEnd;
  }


  public Subscription currentPeriodStart(String currentPeriodStart) {
    this.currentPeriodStart = currentPeriodStart;
    return this;
  }

  /**
   * Current suscription plan start date.
   * @return currentPeriodStart
   */
  @javax.annotation.Nullable
  public String getCurrentPeriodStart() {
    return currentPeriodStart;
  }

  public void setCurrentPeriodStart(String currentPeriodStart) {
    this.currentPeriodStart = currentPeriodStart;
  }


  public Subscription endedAt(String endedAt) {
    this.endedAt = endedAt;
    return this;
  }

  /**
   * Date and time for when plan ended.
   * @return endedAt
   */
  @javax.annotation.Nullable
  public String getEndedAt() {
    return endedAt;
  }

  public void setEndedAt(String endedAt) {
    this.endedAt = endedAt;
  }


  public Subscription id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Unique identifier for suscription as UUID.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public Subscription livemode(Boolean livemode) {
    this.livemode = livemode;
    return this;
  }

  /**
   * Suscription live, or not.
   * @return livemode
   */
  @javax.annotation.Nullable
  public Boolean getLivemode() {
    return livemode;
  }

  public void setLivemode(Boolean livemode) {
    this.livemode = livemode;
  }


  public Subscription plan(String plan) {
    this.plan = plan;
    return this;
  }

  /**
   * Plan name.
   * @return plan
   */
  @javax.annotation.Nonnull
  public String getPlan() {
    return plan;
  }

  public void setPlan(String plan) {
    this.plan = plan;
  }


  public Subscription quantity(Integer quantity) {
    this.quantity = quantity;
    return this;
  }

  /**
   * Quantity purchased as integer.
   * @return quantity
   */
  @javax.annotation.Nullable
  public Integer getQuantity() {
    return quantity;
  }

  public void setQuantity(Integer quantity) {
    this.quantity = quantity;
  }


  public Subscription start(String start) {
    this.start = start;
    return this;
  }

  /**
   * Date and time for when plan started.
   * @return start
   */
  @javax.annotation.Nullable
  public String getStart() {
    return start;
  }

  public void setStart(String start) {
    this.start = start;
  }


  public Subscription status(String status) {
    this.status = status;
    return this;
  }

  /**
   * Suscription status.
   * @return status
   */
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }


  public Subscription stripeId(String stripeId) {
    this.stripeId = stripeId;
    return this;
  }

  /**
   * Stripe (payment processor) identifier.
   * @return stripeId
   */
  @javax.annotation.Nullable
  public String getStripeId() {
    return stripeId;
  }

  public void setStripeId(String stripeId) {
    this.stripeId = stripeId;
  }


  public Subscription trialEnd(String trialEnd) {
    this.trialEnd = trialEnd;
    return this;
  }

  /**
   * Date and time for trial end.
   * @return trialEnd
   */
  @javax.annotation.Nullable
  public String getTrialEnd() {
    return trialEnd;
  }

  public void setTrialEnd(String trialEnd) {
    this.trialEnd = trialEnd;
  }


  public Subscription trialStart(String trialStart) {
    this.trialStart = trialStart;
    return this;
  }

  /**
   * Date and time for trial start.
   * @return trialStart
   */
  @javax.annotation.Nullable
  public String getTrialStart() {
    return trialStart;
  }

  public void setTrialStart(String trialStart) {
    this.trialStart = trialStart;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Subscription subscription = (Subscription) o;
    return Objects.equals(this.applicationFeePercent, subscription.applicationFeePercent) &&
        Objects.equals(this.cancelAtPeriodEnd, subscription.cancelAtPeriodEnd) &&
        Objects.equals(this.canceledAt, subscription.canceledAt) &&
        Objects.equals(this.created, subscription.created) &&
        Objects.equals(this.currentPeriodEnd, subscription.currentPeriodEnd) &&
        Objects.equals(this.currentPeriodStart, subscription.currentPeriodStart) &&
        Objects.equals(this.endedAt, subscription.endedAt) &&
        Objects.equals(this.id, subscription.id) &&
        Objects.equals(this.livemode, subscription.livemode) &&
        Objects.equals(this.plan, subscription.plan) &&
        Objects.equals(this.quantity, subscription.quantity) &&
        Objects.equals(this.start, subscription.start) &&
        Objects.equals(this.status, subscription.status) &&
        Objects.equals(this.stripeId, subscription.stripeId) &&
        Objects.equals(this.trialEnd, subscription.trialEnd) &&
        Objects.equals(this.trialStart, subscription.trialStart);
  }

  @Override
  public int hashCode() {
    return Objects.hash(applicationFeePercent, cancelAtPeriodEnd, canceledAt, created, currentPeriodEnd, currentPeriodStart, endedAt, id, livemode, plan, quantity, start, status, stripeId, trialEnd, trialStart);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Subscription {\n");
    sb.append("    applicationFeePercent: ").append(toIndentedString(applicationFeePercent)).append("\n");
    sb.append("    cancelAtPeriodEnd: ").append(toIndentedString(cancelAtPeriodEnd)).append("\n");
    sb.append("    canceledAt: ").append(toIndentedString(canceledAt)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    currentPeriodEnd: ").append(toIndentedString(currentPeriodEnd)).append("\n");
    sb.append("    currentPeriodStart: ").append(toIndentedString(currentPeriodStart)).append("\n");
    sb.append("    endedAt: ").append(toIndentedString(endedAt)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    livemode: ").append(toIndentedString(livemode)).append("\n");
    sb.append("    plan: ").append(toIndentedString(plan)).append("\n");
    sb.append("    quantity: ").append(toIndentedString(quantity)).append("\n");
    sb.append("    start: ").append(toIndentedString(start)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    stripeId: ").append(toIndentedString(stripeId)).append("\n");
    sb.append("    trialEnd: ").append(toIndentedString(trialEnd)).append("\n");
    sb.append("    trialStart: ").append(toIndentedString(trialStart)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("application_fee_percent");
    openapiFields.add("cancel_at_period_end");
    openapiFields.add("canceled_at");
    openapiFields.add("created");
    openapiFields.add("current_period_end");
    openapiFields.add("current_period_start");
    openapiFields.add("ended_at");
    openapiFields.add("id");
    openapiFields.add("livemode");
    openapiFields.add("plan");
    openapiFields.add("quantity");
    openapiFields.add("start");
    openapiFields.add("status");
    openapiFields.add("stripe_id");
    openapiFields.add("trial_end");
    openapiFields.add("trial_start");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("plan");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Subscription
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Subscription.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Subscription is not found in the empty JSON string", Subscription.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Subscription.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Subscription` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Subscription.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("canceled_at") != null && !jsonObj.get("canceled_at").isJsonNull()) && !jsonObj.get("canceled_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `canceled_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("canceled_at").toString()));
      }
      if ((jsonObj.get("created") != null && !jsonObj.get("created").isJsonNull()) && !jsonObj.get("created").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `created` to be a primitive type in the JSON string but got `%s`", jsonObj.get("created").toString()));
      }
      if ((jsonObj.get("current_period_end") != null && !jsonObj.get("current_period_end").isJsonNull()) && !jsonObj.get("current_period_end").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `current_period_end` to be a primitive type in the JSON string but got `%s`", jsonObj.get("current_period_end").toString()));
      }
      if ((jsonObj.get("current_period_start") != null && !jsonObj.get("current_period_start").isJsonNull()) && !jsonObj.get("current_period_start").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `current_period_start` to be a primitive type in the JSON string but got `%s`", jsonObj.get("current_period_start").toString()));
      }
      if ((jsonObj.get("ended_at") != null && !jsonObj.get("ended_at").isJsonNull()) && !jsonObj.get("ended_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ended_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ended_at").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("plan").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `plan` to be a primitive type in the JSON string but got `%s`", jsonObj.get("plan").toString()));
      }
      if ((jsonObj.get("start") != null && !jsonObj.get("start").isJsonNull()) && !jsonObj.get("start").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `start` to be a primitive type in the JSON string but got `%s`", jsonObj.get("start").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if ((jsonObj.get("stripe_id") != null && !jsonObj.get("stripe_id").isJsonNull()) && !jsonObj.get("stripe_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stripe_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stripe_id").toString()));
      }
      if ((jsonObj.get("trial_end") != null && !jsonObj.get("trial_end").isJsonNull()) && !jsonObj.get("trial_end").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `trial_end` to be a primitive type in the JSON string but got `%s`", jsonObj.get("trial_end").toString()));
      }
      if ((jsonObj.get("trial_start") != null && !jsonObj.get("trial_start").isJsonNull()) && !jsonObj.get("trial_start").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `trial_start` to be a primitive type in the JSON string but got `%s`", jsonObj.get("trial_start").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Subscription.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Subscription' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Subscription> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Subscription.class));

       return (TypeAdapter<T>) new TypeAdapter<Subscription>() {
           @Override
           public void write(JsonWriter out, Subscription value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Subscription read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Subscription given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Subscription
   * @throws IOException if the JSON string is invalid with respect to Subscription
   */
  public static Subscription fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Subscription.class);
  }

  /**
   * Convert an instance of Subscription to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

