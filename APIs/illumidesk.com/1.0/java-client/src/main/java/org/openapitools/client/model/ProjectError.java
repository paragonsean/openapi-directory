/*
 * IllumiDesk
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ProjectError
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:54:22.511892-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ProjectError {
  public static final String SERIALIZED_NAME_COLLABORATORS = "collaborators";
  @SerializedName(SERIALIZED_NAME_COLLABORATORS)
  private List<String> collaborators = new ArrayList<>();

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private List<String> description = new ArrayList<>();

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private List<String> id = new ArrayList<>();

  public static final String SERIALIZED_NAME_LAST_UPDATED = "last_updated";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATED)
  private List<String> lastUpdated = new ArrayList<>();

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private List<String> name = new ArrayList<>();

  public static final String SERIALIZED_NAME_NON_FIELD_ERRORS = "non_field_errors";
  @SerializedName(SERIALIZED_NAME_NON_FIELD_ERRORS)
  private List<String> nonFieldErrors = new ArrayList<>();

  public static final String SERIALIZED_NAME_OWNER = "owner";
  @SerializedName(SERIALIZED_NAME_OWNER)
  private List<String> owner = new ArrayList<>();

  public static final String SERIALIZED_NAME_PRIVATE = "private";
  @SerializedName(SERIALIZED_NAME_PRIVATE)
  private List<String> _private = new ArrayList<>();

  public ProjectError() {
  }

  public ProjectError collaborators(List<String> collaborators) {
    this.collaborators = collaborators;
    return this;
  }

  public ProjectError addCollaboratorsItem(String collaboratorsItem) {
    if (this.collaborators == null) {
      this.collaborators = new ArrayList<>();
    }
    this.collaborators.add(collaboratorsItem);
    return this;
  }

  /**
   * Collaborators field errors.
   * @return collaborators
   */
  @javax.annotation.Nullable
  public List<String> getCollaborators() {
    return collaborators;
  }

  public void setCollaborators(List<String> collaborators) {
    this.collaborators = collaborators;
  }


  public ProjectError description(List<String> description) {
    this.description = description;
    return this;
  }

  public ProjectError addDescriptionItem(String descriptionItem) {
    if (this.description == null) {
      this.description = new ArrayList<>();
    }
    this.description.add(descriptionItem);
    return this;
  }

  /**
   * Description field errors.
   * @return description
   */
  @javax.annotation.Nullable
  public List<String> getDescription() {
    return description;
  }

  public void setDescription(List<String> description) {
    this.description = description;
  }


  public ProjectError id(List<String> id) {
    this.id = id;
    return this;
  }

  public ProjectError addIdItem(String idItem) {
    if (this.id == null) {
      this.id = new ArrayList<>();
    }
    this.id.add(idItem);
    return this;
  }

  /**
   * Id field errors.
   * @return id
   */
  @javax.annotation.Nullable
  public List<String> getId() {
    return id;
  }

  public void setId(List<String> id) {
    this.id = id;
  }


  public ProjectError lastUpdated(List<String> lastUpdated) {
    this.lastUpdated = lastUpdated;
    return this;
  }

  public ProjectError addLastUpdatedItem(String lastUpdatedItem) {
    if (this.lastUpdated == null) {
      this.lastUpdated = new ArrayList<>();
    }
    this.lastUpdated.add(lastUpdatedItem);
    return this;
  }

  /**
   * Last_updated field errors.
   * @return lastUpdated
   */
  @javax.annotation.Nullable
  public List<String> getLastUpdated() {
    return lastUpdated;
  }

  public void setLastUpdated(List<String> lastUpdated) {
    this.lastUpdated = lastUpdated;
  }


  public ProjectError name(List<String> name) {
    this.name = name;
    return this;
  }

  public ProjectError addNameItem(String nameItem) {
    if (this.name == null) {
      this.name = new ArrayList<>();
    }
    this.name.add(nameItem);
    return this;
  }

  /**
   * Name field errors.
   * @return name
   */
  @javax.annotation.Nullable
  public List<String> getName() {
    return name;
  }

  public void setName(List<String> name) {
    this.name = name;
  }


  public ProjectError nonFieldErrors(List<String> nonFieldErrors) {
    this.nonFieldErrors = nonFieldErrors;
    return this;
  }

  public ProjectError addNonFieldErrorsItem(String nonFieldErrorsItem) {
    if (this.nonFieldErrors == null) {
      this.nonFieldErrors = new ArrayList<>();
    }
    this.nonFieldErrors.add(nonFieldErrorsItem);
    return this;
  }

  /**
   * Errors not connected to any field.
   * @return nonFieldErrors
   */
  @javax.annotation.Nullable
  public List<String> getNonFieldErrors() {
    return nonFieldErrors;
  }

  public void setNonFieldErrors(List<String> nonFieldErrors) {
    this.nonFieldErrors = nonFieldErrors;
  }


  public ProjectError owner(List<String> owner) {
    this.owner = owner;
    return this;
  }

  public ProjectError addOwnerItem(String ownerItem) {
    if (this.owner == null) {
      this.owner = new ArrayList<>();
    }
    this.owner.add(ownerItem);
    return this;
  }

  /**
   * Owner field errors.
   * @return owner
   */
  @javax.annotation.Nullable
  public List<String> getOwner() {
    return owner;
  }

  public void setOwner(List<String> owner) {
    this.owner = owner;
  }


  public ProjectError _private(List<String> _private) {
    this._private = _private;
    return this;
  }

  public ProjectError addPrivateItem(String _privateItem) {
    if (this._private == null) {
      this._private = new ArrayList<>();
    }
    this._private.add(_privateItem);
    return this;
  }

  /**
   * Private field errors.
   * @return _private
   */
  @javax.annotation.Nullable
  public List<String> getPrivate() {
    return _private;
  }

  public void setPrivate(List<String> _private) {
    this._private = _private;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProjectError projectError = (ProjectError) o;
    return Objects.equals(this.collaborators, projectError.collaborators) &&
        Objects.equals(this.description, projectError.description) &&
        Objects.equals(this.id, projectError.id) &&
        Objects.equals(this.lastUpdated, projectError.lastUpdated) &&
        Objects.equals(this.name, projectError.name) &&
        Objects.equals(this.nonFieldErrors, projectError.nonFieldErrors) &&
        Objects.equals(this.owner, projectError.owner) &&
        Objects.equals(this._private, projectError._private);
  }

  @Override
  public int hashCode() {
    return Objects.hash(collaborators, description, id, lastUpdated, name, nonFieldErrors, owner, _private);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProjectError {\n");
    sb.append("    collaborators: ").append(toIndentedString(collaborators)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    lastUpdated: ").append(toIndentedString(lastUpdated)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    nonFieldErrors: ").append(toIndentedString(nonFieldErrors)).append("\n");
    sb.append("    owner: ").append(toIndentedString(owner)).append("\n");
    sb.append("    _private: ").append(toIndentedString(_private)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("collaborators");
    openapiFields.add("description");
    openapiFields.add("id");
    openapiFields.add("last_updated");
    openapiFields.add("name");
    openapiFields.add("non_field_errors");
    openapiFields.add("owner");
    openapiFields.add("private");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ProjectError
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ProjectError.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ProjectError is not found in the empty JSON string", ProjectError.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ProjectError.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ProjectError` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("collaborators") != null && !jsonObj.get("collaborators").isJsonNull() && !jsonObj.get("collaborators").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `collaborators` to be an array in the JSON string but got `%s`", jsonObj.get("collaborators").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull() && !jsonObj.get("description").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be an array in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull() && !jsonObj.get("id").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be an array in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("last_updated") != null && !jsonObj.get("last_updated").isJsonNull() && !jsonObj.get("last_updated").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `last_updated` to be an array in the JSON string but got `%s`", jsonObj.get("last_updated").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull() && !jsonObj.get("name").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be an array in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("non_field_errors") != null && !jsonObj.get("non_field_errors").isJsonNull() && !jsonObj.get("non_field_errors").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `non_field_errors` to be an array in the JSON string but got `%s`", jsonObj.get("non_field_errors").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("owner") != null && !jsonObj.get("owner").isJsonNull() && !jsonObj.get("owner").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `owner` to be an array in the JSON string but got `%s`", jsonObj.get("owner").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("private") != null && !jsonObj.get("private").isJsonNull() && !jsonObj.get("private").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `private` to be an array in the JSON string but got `%s`", jsonObj.get("private").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ProjectError.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ProjectError' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ProjectError> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ProjectError.class));

       return (TypeAdapter<T>) new TypeAdapter<ProjectError>() {
           @Override
           public void write(JsonWriter out, ProjectError value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ProjectError read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ProjectError given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ProjectError
   * @throws IOException if the JSON string is invalid with respect to ProjectError
   */
  public static ProjectError fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ProjectError.class);
  }

  /**
   * Convert an instance of ProjectError to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

