/*
 * IllumiDesk
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DeploymentError
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:54:22.511892-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DeploymentError {
  public static final String SERIALIZED_NAME_CONFIG = "config";
  @SerializedName(SERIALIZED_NAME_CONFIG)
  private List<String> config = new ArrayList<>();

  public static final String SERIALIZED_NAME_FRAMEWORK = "framework";
  @SerializedName(SERIALIZED_NAME_FRAMEWORK)
  private List<String> framework = new ArrayList<>();

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private List<String> name = new ArrayList<>();

  public static final String SERIALIZED_NAME_NON_FIELD_ERRORS = "non_field_errors";
  @SerializedName(SERIALIZED_NAME_NON_FIELD_ERRORS)
  private List<String> nonFieldErrors = new ArrayList<>();

  public static final String SERIALIZED_NAME_RUNTIME = "runtime";
  @SerializedName(SERIALIZED_NAME_RUNTIME)
  private List<String> runtime = new ArrayList<>();

  public DeploymentError() {
  }

  public DeploymentError config(List<String> config) {
    this.config = config;
    return this;
  }

  public DeploymentError addConfigItem(String configItem) {
    if (this.config == null) {
      this.config = new ArrayList<>();
    }
    this.config.add(configItem);
    return this;
  }

  /**
   * Invalid deployment configuration.
   * @return config
   */
  @javax.annotation.Nullable
  public List<String> getConfig() {
    return config;
  }

  public void setConfig(List<String> config) {
    this.config = config;
  }


  public DeploymentError framework(List<String> framework) {
    this.framework = framework;
    return this;
  }

  public DeploymentError addFrameworkItem(String frameworkItem) {
    if (this.framework == null) {
      this.framework = new ArrayList<>();
    }
    this.framework.add(frameworkItem);
    return this;
  }

  /**
   * Invalid framework.
   * @return framework
   */
  @javax.annotation.Nullable
  public List<String> getFramework() {
    return framework;
  }

  public void setFramework(List<String> framework) {
    this.framework = framework;
  }


  public DeploymentError name(List<String> name) {
    this.name = name;
    return this;
  }

  public DeploymentError addNameItem(String nameItem) {
    if (this.name == null) {
      this.name = new ArrayList<>();
    }
    this.name.add(nameItem);
    return this;
  }

  /**
   * Invalid deployment name.
   * @return name
   */
  @javax.annotation.Nullable
  public List<String> getName() {
    return name;
  }

  public void setName(List<String> name) {
    this.name = name;
  }


  public DeploymentError nonFieldErrors(List<String> nonFieldErrors) {
    this.nonFieldErrors = nonFieldErrors;
    return this;
  }

  public DeploymentError addNonFieldErrorsItem(String nonFieldErrorsItem) {
    if (this.nonFieldErrors == null) {
      this.nonFieldErrors = new ArrayList<>();
    }
    this.nonFieldErrors.add(nonFieldErrorsItem);
    return this;
  }

  /**
   * Errors not connected to any field.
   * @return nonFieldErrors
   */
  @javax.annotation.Nullable
  public List<String> getNonFieldErrors() {
    return nonFieldErrors;
  }

  public void setNonFieldErrors(List<String> nonFieldErrors) {
    this.nonFieldErrors = nonFieldErrors;
  }


  public DeploymentError runtime(List<String> runtime) {
    this.runtime = runtime;
    return this;
  }

  public DeploymentError addRuntimeItem(String runtimeItem) {
    if (this.runtime == null) {
      this.runtime = new ArrayList<>();
    }
    this.runtime.add(runtimeItem);
    return this;
  }

  /**
   * Invalid runtime.
   * @return runtime
   */
  @javax.annotation.Nullable
  public List<String> getRuntime() {
    return runtime;
  }

  public void setRuntime(List<String> runtime) {
    this.runtime = runtime;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DeploymentError deploymentError = (DeploymentError) o;
    return Objects.equals(this.config, deploymentError.config) &&
        Objects.equals(this.framework, deploymentError.framework) &&
        Objects.equals(this.name, deploymentError.name) &&
        Objects.equals(this.nonFieldErrors, deploymentError.nonFieldErrors) &&
        Objects.equals(this.runtime, deploymentError.runtime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(config, framework, name, nonFieldErrors, runtime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DeploymentError {\n");
    sb.append("    config: ").append(toIndentedString(config)).append("\n");
    sb.append("    framework: ").append(toIndentedString(framework)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    nonFieldErrors: ").append(toIndentedString(nonFieldErrors)).append("\n");
    sb.append("    runtime: ").append(toIndentedString(runtime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("config");
    openapiFields.add("framework");
    openapiFields.add("name");
    openapiFields.add("non_field_errors");
    openapiFields.add("runtime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DeploymentError
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DeploymentError.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DeploymentError is not found in the empty JSON string", DeploymentError.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DeploymentError.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DeploymentError` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("config") != null && !jsonObj.get("config").isJsonNull() && !jsonObj.get("config").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `config` to be an array in the JSON string but got `%s`", jsonObj.get("config").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("framework") != null && !jsonObj.get("framework").isJsonNull() && !jsonObj.get("framework").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `framework` to be an array in the JSON string but got `%s`", jsonObj.get("framework").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull() && !jsonObj.get("name").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be an array in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("non_field_errors") != null && !jsonObj.get("non_field_errors").isJsonNull() && !jsonObj.get("non_field_errors").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `non_field_errors` to be an array in the JSON string but got `%s`", jsonObj.get("non_field_errors").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("runtime") != null && !jsonObj.get("runtime").isJsonNull() && !jsonObj.get("runtime").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `runtime` to be an array in the JSON string but got `%s`", jsonObj.get("runtime").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DeploymentError.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DeploymentError' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DeploymentError> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DeploymentError.class));

       return (TypeAdapter<T>) new TypeAdapter<DeploymentError>() {
           @Override
           public void write(JsonWriter out, DeploymentError value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DeploymentError read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DeploymentError given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DeploymentError
   * @throws IOException if the JSON string is invalid with respect to DeploymentError
   */
  public static DeploymentError fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DeploymentError.class);
  }

  /**
   * Convert an instance of DeploymentError to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

