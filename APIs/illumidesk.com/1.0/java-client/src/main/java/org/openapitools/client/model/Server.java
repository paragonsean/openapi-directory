/*
 * IllumiDesk
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Server
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:54:22.511892-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Server {
  public static final String SERIALIZED_NAME_CONFIG = "config";
  @SerializedName(SERIALIZED_NAME_CONFIG)
  private Object config;

  public static final String SERIALIZED_NAME_CONNECTED = "connected";
  @SerializedName(SERIALIZED_NAME_CONNECTED)
  private List<String> connected = new ArrayList<>();

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private String createdAt;

  public static final String SERIALIZED_NAME_CREATED_BY = "created_by";
  @SerializedName(SERIALIZED_NAME_CREATED_BY)
  private String createdBy;

  public static final String SERIALIZED_NAME_ENDPOINT = "endpoint";
  @SerializedName(SERIALIZED_NAME_ENDPOINT)
  private String endpoint;

  public static final String SERIALIZED_NAME_HOST = "host";
  @SerializedName(SERIALIZED_NAME_HOST)
  private String host;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_IMAGE_NAME = "image_name";
  @SerializedName(SERIALIZED_NAME_IMAGE_NAME)
  private String imageName;

  public static final String SERIALIZED_NAME_LOGS_URL = "logs_url";
  @SerializedName(SERIALIZED_NAME_LOGS_URL)
  private String logsUrl;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PROJECT = "project";
  @SerializedName(SERIALIZED_NAME_PROJECT)
  private String project;

  public static final String SERIALIZED_NAME_SERVER_SIZE = "server_size";
  @SerializedName(SERIALIZED_NAME_SERVER_SIZE)
  private String serverSize;

  public static final String SERIALIZED_NAME_STARTUP_SCRIPT = "startup_script";
  @SerializedName(SERIALIZED_NAME_STARTUP_SCRIPT)
  private String startupScript;

  /**
   * Server status, such as Running or Error.
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    STOPPED("Stopped"),
    
    RUNNING("Running"),
    
    ERROR("Error");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_STATUS_URL = "status_url";
  @SerializedName(SERIALIZED_NAME_STATUS_URL)
  private String statusUrl;

  public Server() {
  }

  public Server config(Object config) {
    this.config = config;
    return this;
  }

  /**
   * Server configuration option. Values are jupyter, restful and cron.
   * @return config
   */
  @javax.annotation.Nullable
  public Object getConfig() {
    return config;
  }

  public void setConfig(Object config) {
    this.config = config;
  }


  public Server connected(List<String> connected) {
    this.connected = connected;
    return this;
  }

  public Server addConnectedItem(String connectedItem) {
    if (this.connected == null) {
      this.connected = new ArrayList<>();
    }
    this.connected.add(connectedItem);
    return this;
  }

  /**
   * Array that represents what other servers the server is connected to.
   * @return connected
   */
  @javax.annotation.Nullable
  public List<String> getConnected() {
    return connected;
  }

  public void setConnected(List<String> connected) {
    this.connected = connected;
  }


  public Server createdAt(String createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Date and time when server was created.
   * @return createdAt
   */
  @javax.annotation.Nullable
  public String getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(String createdAt) {
    this.createdAt = createdAt;
  }


  public Server createdBy(String createdBy) {
    this.createdBy = createdBy;
    return this;
  }

  /**
   * User that created server.
   * @return createdBy
   */
  @javax.annotation.Nullable
  public String getCreatedBy() {
    return createdBy;
  }

  public void setCreatedBy(String createdBy) {
    this.createdBy = createdBy;
  }


  public Server endpoint(String endpoint) {
    this.endpoint = endpoint;
    return this;
  }

  /**
   * Server endpoint path.
   * @return endpoint
   */
  @javax.annotation.Nullable
  public String getEndpoint() {
    return endpoint;
  }

  public void setEndpoint(String endpoint) {
    this.endpoint = endpoint;
  }


  public Server host(String host) {
    this.host = host;
    return this;
  }

  /**
   * Value that represents user defined host, otherwise known as BYON (Bring Your Own Node). 
   * @return host
   */
  @javax.annotation.Nullable
  public String getHost() {
    return host;
  }

  public void setHost(String host) {
    this.host = host;
  }


  public Server id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Server unique identifier in UUID format.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public Server imageName(String imageName) {
    this.imageName = imageName;
    return this;
  }

  /**
   * Server image source, such as 3blades/tensorflow-notebook. 
   * @return imageName
   */
  @javax.annotation.Nullable
  public String getImageName() {
    return imageName;
  }

  public void setImageName(String imageName) {
    this.imageName = imageName;
  }


  public Server logsUrl(String logsUrl) {
    this.logsUrl = logsUrl;
    return this;
  }

  /**
   * A WebSocket URL for streaming stdout and stderr logs from the server. 
   * @return logsUrl
   */
  @javax.annotation.Nullable
  public String getLogsUrl() {
    return logsUrl;
  }

  public void setLogsUrl(String logsUrl) {
    this.logsUrl = logsUrl;
  }


  public Server name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Server name.
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Server project(String project) {
    this.project = project;
    return this;
  }

  /**
   * Project name.
   * @return project
   */
  @javax.annotation.Nullable
  public String getProject() {
    return project;
  }

  public void setProject(String project) {
    this.project = project;
  }


  public Server serverSize(String serverSize) {
    this.serverSize = serverSize;
    return this;
  }

  /**
   * Server size unique identifier.
   * @return serverSize
   */
  @javax.annotation.Nullable
  public String getServerSize() {
    return serverSize;
  }

  public void setServerSize(String serverSize) {
    this.serverSize = serverSize;
  }


  public Server startupScript(String startupScript) {
    this.startupScript = startupScript;
    return this;
  }

  /**
   * Optional startup script to use when launching server.
   * @return startupScript
   */
  @javax.annotation.Nullable
  public String getStartupScript() {
    return startupScript;
  }

  public void setStartupScript(String startupScript) {
    this.startupScript = startupScript;
  }


  public Server status(StatusEnum status) {
    this.status = status;
    return this;
  }

  /**
   * Server status, such as Running or Error.
   * @return status
   */
  @javax.annotation.Nullable
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  public Server statusUrl(String statusUrl) {
    this.statusUrl = statusUrl;
    return this;
  }

  /**
   * A WebSocket URL for listening to server status changes. 
   * @return statusUrl
   */
  @javax.annotation.Nullable
  public String getStatusUrl() {
    return statusUrl;
  }

  public void setStatusUrl(String statusUrl) {
    this.statusUrl = statusUrl;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Server server = (Server) o;
    return Objects.equals(this.config, server.config) &&
        Objects.equals(this.connected, server.connected) &&
        Objects.equals(this.createdAt, server.createdAt) &&
        Objects.equals(this.createdBy, server.createdBy) &&
        Objects.equals(this.endpoint, server.endpoint) &&
        Objects.equals(this.host, server.host) &&
        Objects.equals(this.id, server.id) &&
        Objects.equals(this.imageName, server.imageName) &&
        Objects.equals(this.logsUrl, server.logsUrl) &&
        Objects.equals(this.name, server.name) &&
        Objects.equals(this.project, server.project) &&
        Objects.equals(this.serverSize, server.serverSize) &&
        Objects.equals(this.startupScript, server.startupScript) &&
        Objects.equals(this.status, server.status) &&
        Objects.equals(this.statusUrl, server.statusUrl);
  }

  @Override
  public int hashCode() {
    return Objects.hash(config, connected, createdAt, createdBy, endpoint, host, id, imageName, logsUrl, name, project, serverSize, startupScript, status, statusUrl);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Server {\n");
    sb.append("    config: ").append(toIndentedString(config)).append("\n");
    sb.append("    connected: ").append(toIndentedString(connected)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    createdBy: ").append(toIndentedString(createdBy)).append("\n");
    sb.append("    endpoint: ").append(toIndentedString(endpoint)).append("\n");
    sb.append("    host: ").append(toIndentedString(host)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    imageName: ").append(toIndentedString(imageName)).append("\n");
    sb.append("    logsUrl: ").append(toIndentedString(logsUrl)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    project: ").append(toIndentedString(project)).append("\n");
    sb.append("    serverSize: ").append(toIndentedString(serverSize)).append("\n");
    sb.append("    startupScript: ").append(toIndentedString(startupScript)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    statusUrl: ").append(toIndentedString(statusUrl)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("config");
    openapiFields.add("connected");
    openapiFields.add("created_at");
    openapiFields.add("created_by");
    openapiFields.add("endpoint");
    openapiFields.add("host");
    openapiFields.add("id");
    openapiFields.add("image_name");
    openapiFields.add("logs_url");
    openapiFields.add("name");
    openapiFields.add("project");
    openapiFields.add("server_size");
    openapiFields.add("startup_script");
    openapiFields.add("status");
    openapiFields.add("status_url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Server
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Server.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Server is not found in the empty JSON string", Server.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Server.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Server` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Server.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("connected") != null && !jsonObj.get("connected").isJsonNull() && !jsonObj.get("connected").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `connected` to be an array in the JSON string but got `%s`", jsonObj.get("connected").toString()));
      }
      if ((jsonObj.get("created_at") != null && !jsonObj.get("created_at").isJsonNull()) && !jsonObj.get("created_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `created_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("created_at").toString()));
      }
      if ((jsonObj.get("created_by") != null && !jsonObj.get("created_by").isJsonNull()) && !jsonObj.get("created_by").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `created_by` to be a primitive type in the JSON string but got `%s`", jsonObj.get("created_by").toString()));
      }
      if ((jsonObj.get("endpoint") != null && !jsonObj.get("endpoint").isJsonNull()) && !jsonObj.get("endpoint").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `endpoint` to be a primitive type in the JSON string but got `%s`", jsonObj.get("endpoint").toString()));
      }
      if ((jsonObj.get("host") != null && !jsonObj.get("host").isJsonNull()) && !jsonObj.get("host").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `host` to be a primitive type in the JSON string but got `%s`", jsonObj.get("host").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("image_name") != null && !jsonObj.get("image_name").isJsonNull()) && !jsonObj.get("image_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `image_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("image_name").toString()));
      }
      if ((jsonObj.get("logs_url") != null && !jsonObj.get("logs_url").isJsonNull()) && !jsonObj.get("logs_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `logs_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("logs_url").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("project") != null && !jsonObj.get("project").isJsonNull()) && !jsonObj.get("project").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `project` to be a primitive type in the JSON string but got `%s`", jsonObj.get("project").toString()));
      }
      if ((jsonObj.get("server_size") != null && !jsonObj.get("server_size").isJsonNull()) && !jsonObj.get("server_size").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `server_size` to be a primitive type in the JSON string but got `%s`", jsonObj.get("server_size").toString()));
      }
      if ((jsonObj.get("startup_script") != null && !jsonObj.get("startup_script").isJsonNull()) && !jsonObj.get("startup_script").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `startup_script` to be a primitive type in the JSON string but got `%s`", jsonObj.get("startup_script").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        StatusEnum.validateJsonElement(jsonObj.get("status"));
      }
      if ((jsonObj.get("status_url") != null && !jsonObj.get("status_url").isJsonNull()) && !jsonObj.get("status_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status_url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Server.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Server' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Server> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Server.class));

       return (TypeAdapter<T>) new TypeAdapter<Server>() {
           @Override
           public void write(JsonWriter out, Server value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Server read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Server given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Server
   * @throws IOException if the JSON string is invalid with respect to Server
   */
  public static Server fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Server.class);
  }

  /**
   * Convert an instance of Server to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

