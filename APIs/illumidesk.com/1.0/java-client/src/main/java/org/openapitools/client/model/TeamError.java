/*
 * IllumiDesk
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * TeamError
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:54:22.511892-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TeamError {
  public static final String SERIALIZED_NAME_AVATAR = "avatar";
  @SerializedName(SERIALIZED_NAME_AVATAR)
  private List<String> avatar = new ArrayList<>();

  public static final String SERIALIZED_NAME_AVATAR_URL = "avatar_url";
  @SerializedName(SERIALIZED_NAME_AVATAR_URL)
  private List<String> avatarUrl = new ArrayList<>();

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private List<String> description = new ArrayList<>();

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private List<String> id = new ArrayList<>();

  public static final String SERIALIZED_NAME_LOCATION = "location";
  @SerializedName(SERIALIZED_NAME_LOCATION)
  private List<String> location = new ArrayList<>();

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private List<String> name = new ArrayList<>();

  public static final String SERIALIZED_NAME_NON_FIELD_ERRORS = "non_field_errors";
  @SerializedName(SERIALIZED_NAME_NON_FIELD_ERRORS)
  private List<String> nonFieldErrors = new ArrayList<>();

  public static final String SERIALIZED_NAME_WEBSITE = "website";
  @SerializedName(SERIALIZED_NAME_WEBSITE)
  private List<String> website = new ArrayList<>();

  public TeamError() {
  }

  public TeamError avatar(List<String> avatar) {
    this.avatar = avatar;
    return this;
  }

  public TeamError addAvatarItem(String avatarItem) {
    if (this.avatar == null) {
      this.avatar = new ArrayList<>();
    }
    this.avatar.add(avatarItem);
    return this;
  }

  /**
   * Avatar field errors.
   * @return avatar
   */
  @javax.annotation.Nullable
  public List<String> getAvatar() {
    return avatar;
  }

  public void setAvatar(List<String> avatar) {
    this.avatar = avatar;
  }


  public TeamError avatarUrl(List<String> avatarUrl) {
    this.avatarUrl = avatarUrl;
    return this;
  }

  public TeamError addAvatarUrlItem(String avatarUrlItem) {
    if (this.avatarUrl == null) {
      this.avatarUrl = new ArrayList<>();
    }
    this.avatarUrl.add(avatarUrlItem);
    return this;
  }

  /**
   * Avatar url field errors.
   * @return avatarUrl
   */
  @javax.annotation.Nullable
  public List<String> getAvatarUrl() {
    return avatarUrl;
  }

  public void setAvatarUrl(List<String> avatarUrl) {
    this.avatarUrl = avatarUrl;
  }


  public TeamError description(List<String> description) {
    this.description = description;
    return this;
  }

  public TeamError addDescriptionItem(String descriptionItem) {
    if (this.description == null) {
      this.description = new ArrayList<>();
    }
    this.description.add(descriptionItem);
    return this;
  }

  /**
   * Description field errors.
   * @return description
   */
  @javax.annotation.Nullable
  public List<String> getDescription() {
    return description;
  }

  public void setDescription(List<String> description) {
    this.description = description;
  }


  public TeamError id(List<String> id) {
    this.id = id;
    return this;
  }

  public TeamError addIdItem(String idItem) {
    if (this.id == null) {
      this.id = new ArrayList<>();
    }
    this.id.add(idItem);
    return this;
  }

  /**
   * Id field errors.
   * @return id
   */
  @javax.annotation.Nullable
  public List<String> getId() {
    return id;
  }

  public void setId(List<String> id) {
    this.id = id;
  }


  public TeamError location(List<String> location) {
    this.location = location;
    return this;
  }

  public TeamError addLocationItem(String locationItem) {
    if (this.location == null) {
      this.location = new ArrayList<>();
    }
    this.location.add(locationItem);
    return this;
  }

  /**
   * Location field errors.
   * @return location
   */
  @javax.annotation.Nullable
  public List<String> getLocation() {
    return location;
  }

  public void setLocation(List<String> location) {
    this.location = location;
  }


  public TeamError name(List<String> name) {
    this.name = name;
    return this;
  }

  public TeamError addNameItem(String nameItem) {
    if (this.name == null) {
      this.name = new ArrayList<>();
    }
    this.name.add(nameItem);
    return this;
  }

  /**
   * Name field errors.
   * @return name
   */
  @javax.annotation.Nullable
  public List<String> getName() {
    return name;
  }

  public void setName(List<String> name) {
    this.name = name;
  }


  public TeamError nonFieldErrors(List<String> nonFieldErrors) {
    this.nonFieldErrors = nonFieldErrors;
    return this;
  }

  public TeamError addNonFieldErrorsItem(String nonFieldErrorsItem) {
    if (this.nonFieldErrors == null) {
      this.nonFieldErrors = new ArrayList<>();
    }
    this.nonFieldErrors.add(nonFieldErrorsItem);
    return this;
  }

  /**
   * Errors not connected to any field.
   * @return nonFieldErrors
   */
  @javax.annotation.Nullable
  public List<String> getNonFieldErrors() {
    return nonFieldErrors;
  }

  public void setNonFieldErrors(List<String> nonFieldErrors) {
    this.nonFieldErrors = nonFieldErrors;
  }


  public TeamError website(List<String> website) {
    this.website = website;
    return this;
  }

  public TeamError addWebsiteItem(String websiteItem) {
    if (this.website == null) {
      this.website = new ArrayList<>();
    }
    this.website.add(websiteItem);
    return this;
  }

  /**
   * Website field errors.
   * @return website
   */
  @javax.annotation.Nullable
  public List<String> getWebsite() {
    return website;
  }

  public void setWebsite(List<String> website) {
    this.website = website;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TeamError teamError = (TeamError) o;
    return Objects.equals(this.avatar, teamError.avatar) &&
        Objects.equals(this.avatarUrl, teamError.avatarUrl) &&
        Objects.equals(this.description, teamError.description) &&
        Objects.equals(this.id, teamError.id) &&
        Objects.equals(this.location, teamError.location) &&
        Objects.equals(this.name, teamError.name) &&
        Objects.equals(this.nonFieldErrors, teamError.nonFieldErrors) &&
        Objects.equals(this.website, teamError.website);
  }

  @Override
  public int hashCode() {
    return Objects.hash(avatar, avatarUrl, description, id, location, name, nonFieldErrors, website);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TeamError {\n");
    sb.append("    avatar: ").append(toIndentedString(avatar)).append("\n");
    sb.append("    avatarUrl: ").append(toIndentedString(avatarUrl)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    nonFieldErrors: ").append(toIndentedString(nonFieldErrors)).append("\n");
    sb.append("    website: ").append(toIndentedString(website)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("avatar");
    openapiFields.add("avatar_url");
    openapiFields.add("description");
    openapiFields.add("id");
    openapiFields.add("location");
    openapiFields.add("name");
    openapiFields.add("non_field_errors");
    openapiFields.add("website");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TeamError
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TeamError.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TeamError is not found in the empty JSON string", TeamError.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TeamError.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TeamError` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("avatar") != null && !jsonObj.get("avatar").isJsonNull() && !jsonObj.get("avatar").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `avatar` to be an array in the JSON string but got `%s`", jsonObj.get("avatar").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("avatar_url") != null && !jsonObj.get("avatar_url").isJsonNull() && !jsonObj.get("avatar_url").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `avatar_url` to be an array in the JSON string but got `%s`", jsonObj.get("avatar_url").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull() && !jsonObj.get("description").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be an array in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull() && !jsonObj.get("id").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be an array in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("location") != null && !jsonObj.get("location").isJsonNull() && !jsonObj.get("location").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `location` to be an array in the JSON string but got `%s`", jsonObj.get("location").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull() && !jsonObj.get("name").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be an array in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("non_field_errors") != null && !jsonObj.get("non_field_errors").isJsonNull() && !jsonObj.get("non_field_errors").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `non_field_errors` to be an array in the JSON string but got `%s`", jsonObj.get("non_field_errors").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("website") != null && !jsonObj.get("website").isJsonNull() && !jsonObj.get("website").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `website` to be an array in the JSON string but got `%s`", jsonObj.get("website").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TeamError.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TeamError' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TeamError> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TeamError.class));

       return (TypeAdapter<T>) new TypeAdapter<TeamError>() {
           @Override
           public void write(JsonWriter out, TeamError value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TeamError read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TeamError given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TeamError
   * @throws IOException if the JSON string is invalid with respect to TeamError
   */
  public static TeamError fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TeamError.class);
  }

  /**
   * Convert an instance of TeamError to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

