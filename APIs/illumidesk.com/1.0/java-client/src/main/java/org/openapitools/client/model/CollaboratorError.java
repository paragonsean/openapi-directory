/*
 * IllumiDesk
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CollaboratorError
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:54:22.511892-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CollaboratorError {
  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private List<String> email = new ArrayList<>();

  public static final String SERIALIZED_NAME_FIRST_NAME = "first_name";
  @SerializedName(SERIALIZED_NAME_FIRST_NAME)
  private List<String> firstName = new ArrayList<>();

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private List<String> id = new ArrayList<>();

  public static final String SERIALIZED_NAME_JOINED = "joined";
  @SerializedName(SERIALIZED_NAME_JOINED)
  private List<String> joined = new ArrayList<>();

  public static final String SERIALIZED_NAME_LAST_NAME = "last_name";
  @SerializedName(SERIALIZED_NAME_LAST_NAME)
  private List<String> lastName = new ArrayList<>();

  public static final String SERIALIZED_NAME_MEMBER = "member";
  @SerializedName(SERIALIZED_NAME_MEMBER)
  private List<String> member = new ArrayList<>();

  public static final String SERIALIZED_NAME_NON_FIELD_ERRORS = "non_field_errors";
  @SerializedName(SERIALIZED_NAME_NON_FIELD_ERRORS)
  private List<String> nonFieldErrors = new ArrayList<>();

  public static final String SERIALIZED_NAME_OWNER = "owner";
  @SerializedName(SERIALIZED_NAME_OWNER)
  private List<String> owner = new ArrayList<>();

  public static final String SERIALIZED_NAME_PERMISSIONS = "permissions";
  @SerializedName(SERIALIZED_NAME_PERMISSIONS)
  private List<String> permissions = new ArrayList<>();

  public static final String SERIALIZED_NAME_USERNAME = "username";
  @SerializedName(SERIALIZED_NAME_USERNAME)
  private List<String> username = new ArrayList<>();

  public CollaboratorError() {
  }

  public CollaboratorError email(List<String> email) {
    this.email = email;
    return this;
  }

  public CollaboratorError addEmailItem(String emailItem) {
    if (this.email == null) {
      this.email = new ArrayList<>();
    }
    this.email.add(emailItem);
    return this;
  }

  /**
   * Email field errors.
   * @return email
   */
  @javax.annotation.Nullable
  public List<String> getEmail() {
    return email;
  }

  public void setEmail(List<String> email) {
    this.email = email;
  }


  public CollaboratorError firstName(List<String> firstName) {
    this.firstName = firstName;
    return this;
  }

  public CollaboratorError addFirstNameItem(String firstNameItem) {
    if (this.firstName == null) {
      this.firstName = new ArrayList<>();
    }
    this.firstName.add(firstNameItem);
    return this;
  }

  /**
   * First name field errors.
   * @return firstName
   */
  @javax.annotation.Nullable
  public List<String> getFirstName() {
    return firstName;
  }

  public void setFirstName(List<String> firstName) {
    this.firstName = firstName;
  }


  public CollaboratorError id(List<String> id) {
    this.id = id;
    return this;
  }

  public CollaboratorError addIdItem(String idItem) {
    if (this.id == null) {
      this.id = new ArrayList<>();
    }
    this.id.add(idItem);
    return this;
  }

  /**
   * Id field errors this
   * @return id
   */
  @javax.annotation.Nullable
  public List<String> getId() {
    return id;
  }

  public void setId(List<String> id) {
    this.id = id;
  }


  public CollaboratorError joined(List<String> joined) {
    this.joined = joined;
    return this;
  }

  public CollaboratorError addJoinedItem(String joinedItem) {
    if (this.joined == null) {
      this.joined = new ArrayList<>();
    }
    this.joined.add(joinedItem);
    return this;
  }

  /**
   * Joined field errors.
   * @return joined
   */
  @javax.annotation.Nullable
  public List<String> getJoined() {
    return joined;
  }

  public void setJoined(List<String> joined) {
    this.joined = joined;
  }


  public CollaboratorError lastName(List<String> lastName) {
    this.lastName = lastName;
    return this;
  }

  public CollaboratorError addLastNameItem(String lastNameItem) {
    if (this.lastName == null) {
      this.lastName = new ArrayList<>();
    }
    this.lastName.add(lastNameItem);
    return this;
  }

  /**
   * Last name field errors.
   * @return lastName
   */
  @javax.annotation.Nullable
  public List<String> getLastName() {
    return lastName;
  }

  public void setLastName(List<String> lastName) {
    this.lastName = lastName;
  }


  public CollaboratorError member(List<String> member) {
    this.member = member;
    return this;
  }

  public CollaboratorError addMemberItem(String memberItem) {
    if (this.member == null) {
      this.member = new ArrayList<>();
    }
    this.member.add(memberItem);
    return this;
  }

  /**
   * Member field errors.
   * @return member
   */
  @javax.annotation.Nonnull
  public List<String> getMember() {
    return member;
  }

  public void setMember(List<String> member) {
    this.member = member;
  }


  public CollaboratorError nonFieldErrors(List<String> nonFieldErrors) {
    this.nonFieldErrors = nonFieldErrors;
    return this;
  }

  public CollaboratorError addNonFieldErrorsItem(String nonFieldErrorsItem) {
    if (this.nonFieldErrors == null) {
      this.nonFieldErrors = new ArrayList<>();
    }
    this.nonFieldErrors.add(nonFieldErrorsItem);
    return this;
  }

  /**
   * Errors not connected to any field.
   * @return nonFieldErrors
   */
  @javax.annotation.Nullable
  public List<String> getNonFieldErrors() {
    return nonFieldErrors;
  }

  public void setNonFieldErrors(List<String> nonFieldErrors) {
    this.nonFieldErrors = nonFieldErrors;
  }


  public CollaboratorError owner(List<String> owner) {
    this.owner = owner;
    return this;
  }

  public CollaboratorError addOwnerItem(String ownerItem) {
    if (this.owner == null) {
      this.owner = new ArrayList<>();
    }
    this.owner.add(ownerItem);
    return this;
  }

  /**
   * Owner field errors.
   * @return owner
   */
  @javax.annotation.Nullable
  public List<String> getOwner() {
    return owner;
  }

  public void setOwner(List<String> owner) {
    this.owner = owner;
  }


  public CollaboratorError permissions(List<String> permissions) {
    this.permissions = permissions;
    return this;
  }

  public CollaboratorError addPermissionsItem(String permissionsItem) {
    if (this.permissions == null) {
      this.permissions = new ArrayList<>();
    }
    this.permissions.add(permissionsItem);
    return this;
  }

  /**
   * Permissions field errors.
   * @return permissions
   */
  @javax.annotation.Nonnull
  public List<String> getPermissions() {
    return permissions;
  }

  public void setPermissions(List<String> permissions) {
    this.permissions = permissions;
  }


  public CollaboratorError username(List<String> username) {
    this.username = username;
    return this;
  }

  public CollaboratorError addUsernameItem(String usernameItem) {
    if (this.username == null) {
      this.username = new ArrayList<>();
    }
    this.username.add(usernameItem);
    return this;
  }

  /**
   * Username field errors.
   * @return username
   */
  @javax.annotation.Nullable
  public List<String> getUsername() {
    return username;
  }

  public void setUsername(List<String> username) {
    this.username = username;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CollaboratorError collaboratorError = (CollaboratorError) o;
    return Objects.equals(this.email, collaboratorError.email) &&
        Objects.equals(this.firstName, collaboratorError.firstName) &&
        Objects.equals(this.id, collaboratorError.id) &&
        Objects.equals(this.joined, collaboratorError.joined) &&
        Objects.equals(this.lastName, collaboratorError.lastName) &&
        Objects.equals(this.member, collaboratorError.member) &&
        Objects.equals(this.nonFieldErrors, collaboratorError.nonFieldErrors) &&
        Objects.equals(this.owner, collaboratorError.owner) &&
        Objects.equals(this.permissions, collaboratorError.permissions) &&
        Objects.equals(this.username, collaboratorError.username);
  }

  @Override
  public int hashCode() {
    return Objects.hash(email, firstName, id, joined, lastName, member, nonFieldErrors, owner, permissions, username);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CollaboratorError {\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    firstName: ").append(toIndentedString(firstName)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    joined: ").append(toIndentedString(joined)).append("\n");
    sb.append("    lastName: ").append(toIndentedString(lastName)).append("\n");
    sb.append("    member: ").append(toIndentedString(member)).append("\n");
    sb.append("    nonFieldErrors: ").append(toIndentedString(nonFieldErrors)).append("\n");
    sb.append("    owner: ").append(toIndentedString(owner)).append("\n");
    sb.append("    permissions: ").append(toIndentedString(permissions)).append("\n");
    sb.append("    username: ").append(toIndentedString(username)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("email");
    openapiFields.add("first_name");
    openapiFields.add("id");
    openapiFields.add("joined");
    openapiFields.add("last_name");
    openapiFields.add("member");
    openapiFields.add("non_field_errors");
    openapiFields.add("owner");
    openapiFields.add("permissions");
    openapiFields.add("username");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("member");
    openapiRequiredFields.add("permissions");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CollaboratorError
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CollaboratorError.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CollaboratorError is not found in the empty JSON string", CollaboratorError.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CollaboratorError.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CollaboratorError` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CollaboratorError.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("email") != null && !jsonObj.get("email").isJsonNull() && !jsonObj.get("email").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be an array in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("first_name") != null && !jsonObj.get("first_name").isJsonNull() && !jsonObj.get("first_name").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `first_name` to be an array in the JSON string but got `%s`", jsonObj.get("first_name").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull() && !jsonObj.get("id").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be an array in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("joined") != null && !jsonObj.get("joined").isJsonNull() && !jsonObj.get("joined").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `joined` to be an array in the JSON string but got `%s`", jsonObj.get("joined").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("last_name") != null && !jsonObj.get("last_name").isJsonNull() && !jsonObj.get("last_name").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `last_name` to be an array in the JSON string but got `%s`", jsonObj.get("last_name").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("member") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("member").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `member` to be an array in the JSON string but got `%s`", jsonObj.get("member").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("non_field_errors") != null && !jsonObj.get("non_field_errors").isJsonNull() && !jsonObj.get("non_field_errors").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `non_field_errors` to be an array in the JSON string but got `%s`", jsonObj.get("non_field_errors").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("owner") != null && !jsonObj.get("owner").isJsonNull() && !jsonObj.get("owner").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `owner` to be an array in the JSON string but got `%s`", jsonObj.get("owner").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("permissions") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("permissions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `permissions` to be an array in the JSON string but got `%s`", jsonObj.get("permissions").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("username") != null && !jsonObj.get("username").isJsonNull() && !jsonObj.get("username").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `username` to be an array in the JSON string but got `%s`", jsonObj.get("username").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CollaboratorError.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CollaboratorError' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CollaboratorError> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CollaboratorError.class));

       return (TypeAdapter<T>) new TypeAdapter<CollaboratorError>() {
           @Override
           public void write(JsonWriter out, CollaboratorError value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CollaboratorError read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CollaboratorError given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CollaboratorError
   * @throws IOException if the JSON string is invalid with respect to CollaboratorError
   */
  public static CollaboratorError fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CollaboratorError.class);
  }

  /**
   * Convert an instance of CollaboratorError to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

