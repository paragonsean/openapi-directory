/*
 * IllumiDesk
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SubscriptionError
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:54:22.511892-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SubscriptionError {
  public static final String SERIALIZED_NAME_APPLICATION_FEE_PERCENT = "application_fee_percent";
  @SerializedName(SERIALIZED_NAME_APPLICATION_FEE_PERCENT)
  private List<String> applicationFeePercent = new ArrayList<>();

  public static final String SERIALIZED_NAME_CANCEL_AT_PERIOD_END = "cancel_at_period_end";
  @SerializedName(SERIALIZED_NAME_CANCEL_AT_PERIOD_END)
  private List<String> cancelAtPeriodEnd = new ArrayList<>();

  public static final String SERIALIZED_NAME_CANCELED_AT = "canceled_at";
  @SerializedName(SERIALIZED_NAME_CANCELED_AT)
  private List<String> canceledAt = new ArrayList<>();

  public static final String SERIALIZED_NAME_CREATED = "created";
  @SerializedName(SERIALIZED_NAME_CREATED)
  private List<String> created = new ArrayList<>();

  public static final String SERIALIZED_NAME_CURRENT_PERIOD_END = "current_period_end";
  @SerializedName(SERIALIZED_NAME_CURRENT_PERIOD_END)
  private List<String> currentPeriodEnd = new ArrayList<>();

  public static final String SERIALIZED_NAME_CURRENT_PERIOD_START = "current_period_start";
  @SerializedName(SERIALIZED_NAME_CURRENT_PERIOD_START)
  private List<String> currentPeriodStart = new ArrayList<>();

  public static final String SERIALIZED_NAME_ENDED_AT = "ended_at";
  @SerializedName(SERIALIZED_NAME_ENDED_AT)
  private List<String> endedAt = new ArrayList<>();

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private List<String> id = new ArrayList<>();

  public static final String SERIALIZED_NAME_LIVEMODE = "livemode";
  @SerializedName(SERIALIZED_NAME_LIVEMODE)
  private List<String> livemode = new ArrayList<>();

  public static final String SERIALIZED_NAME_NON_FIELD_ERRORS = "non_field_errors";
  @SerializedName(SERIALIZED_NAME_NON_FIELD_ERRORS)
  private List<String> nonFieldErrors = new ArrayList<>();

  public static final String SERIALIZED_NAME_PLAN = "plan";
  @SerializedName(SERIALIZED_NAME_PLAN)
  private List<String> plan = new ArrayList<>();

  public static final String SERIALIZED_NAME_QUANTITY = "quantity";
  @SerializedName(SERIALIZED_NAME_QUANTITY)
  private List<String> quantity = new ArrayList<>();

  public static final String SERIALIZED_NAME_START = "start";
  @SerializedName(SERIALIZED_NAME_START)
  private List<String> start = new ArrayList<>();

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private List<String> status = new ArrayList<>();

  public static final String SERIALIZED_NAME_STRIPE_ID = "stripe_id";
  @SerializedName(SERIALIZED_NAME_STRIPE_ID)
  private List<String> stripeId = new ArrayList<>();

  public static final String SERIALIZED_NAME_TRIAL_END = "trial_end";
  @SerializedName(SERIALIZED_NAME_TRIAL_END)
  private List<String> trialEnd = new ArrayList<>();

  public static final String SERIALIZED_NAME_TRIAL_START = "trial_start";
  @SerializedName(SERIALIZED_NAME_TRIAL_START)
  private List<String> trialStart = new ArrayList<>();

  public SubscriptionError() {
  }

  public SubscriptionError applicationFeePercent(List<String> applicationFeePercent) {
    this.applicationFeePercent = applicationFeePercent;
    return this;
  }

  public SubscriptionError addApplicationFeePercentItem(String applicationFeePercentItem) {
    if (this.applicationFeePercent == null) {
      this.applicationFeePercent = new ArrayList<>();
    }
    this.applicationFeePercent.add(applicationFeePercentItem);
    return this;
  }

  /**
   * application_fee_percent field errors
   * @return applicationFeePercent
   */
  @javax.annotation.Nullable
  public List<String> getApplicationFeePercent() {
    return applicationFeePercent;
  }

  public void setApplicationFeePercent(List<String> applicationFeePercent) {
    this.applicationFeePercent = applicationFeePercent;
  }


  public SubscriptionError cancelAtPeriodEnd(List<String> cancelAtPeriodEnd) {
    this.cancelAtPeriodEnd = cancelAtPeriodEnd;
    return this;
  }

  public SubscriptionError addCancelAtPeriodEndItem(String cancelAtPeriodEndItem) {
    if (this.cancelAtPeriodEnd == null) {
      this.cancelAtPeriodEnd = new ArrayList<>();
    }
    this.cancelAtPeriodEnd.add(cancelAtPeriodEndItem);
    return this;
  }

  /**
   * cancel_at_period_end field errors
   * @return cancelAtPeriodEnd
   */
  @javax.annotation.Nullable
  public List<String> getCancelAtPeriodEnd() {
    return cancelAtPeriodEnd;
  }

  public void setCancelAtPeriodEnd(List<String> cancelAtPeriodEnd) {
    this.cancelAtPeriodEnd = cancelAtPeriodEnd;
  }


  public SubscriptionError canceledAt(List<String> canceledAt) {
    this.canceledAt = canceledAt;
    return this;
  }

  public SubscriptionError addCanceledAtItem(String canceledAtItem) {
    if (this.canceledAt == null) {
      this.canceledAt = new ArrayList<>();
    }
    this.canceledAt.add(canceledAtItem);
    return this;
  }

  /**
   * canceled_at field errors
   * @return canceledAt
   */
  @javax.annotation.Nullable
  public List<String> getCanceledAt() {
    return canceledAt;
  }

  public void setCanceledAt(List<String> canceledAt) {
    this.canceledAt = canceledAt;
  }


  public SubscriptionError created(List<String> created) {
    this.created = created;
    return this;
  }

  public SubscriptionError addCreatedItem(String createdItem) {
    if (this.created == null) {
      this.created = new ArrayList<>();
    }
    this.created.add(createdItem);
    return this;
  }

  /**
   * created field errors
   * @return created
   */
  @javax.annotation.Nullable
  public List<String> getCreated() {
    return created;
  }

  public void setCreated(List<String> created) {
    this.created = created;
  }


  public SubscriptionError currentPeriodEnd(List<String> currentPeriodEnd) {
    this.currentPeriodEnd = currentPeriodEnd;
    return this;
  }

  public SubscriptionError addCurrentPeriodEndItem(String currentPeriodEndItem) {
    if (this.currentPeriodEnd == null) {
      this.currentPeriodEnd = new ArrayList<>();
    }
    this.currentPeriodEnd.add(currentPeriodEndItem);
    return this;
  }

  /**
   * current_period_end field errors
   * @return currentPeriodEnd
   */
  @javax.annotation.Nullable
  public List<String> getCurrentPeriodEnd() {
    return currentPeriodEnd;
  }

  public void setCurrentPeriodEnd(List<String> currentPeriodEnd) {
    this.currentPeriodEnd = currentPeriodEnd;
  }


  public SubscriptionError currentPeriodStart(List<String> currentPeriodStart) {
    this.currentPeriodStart = currentPeriodStart;
    return this;
  }

  public SubscriptionError addCurrentPeriodStartItem(String currentPeriodStartItem) {
    if (this.currentPeriodStart == null) {
      this.currentPeriodStart = new ArrayList<>();
    }
    this.currentPeriodStart.add(currentPeriodStartItem);
    return this;
  }

  /**
   * current_period_start field errors
   * @return currentPeriodStart
   */
  @javax.annotation.Nullable
  public List<String> getCurrentPeriodStart() {
    return currentPeriodStart;
  }

  public void setCurrentPeriodStart(List<String> currentPeriodStart) {
    this.currentPeriodStart = currentPeriodStart;
  }


  public SubscriptionError endedAt(List<String> endedAt) {
    this.endedAt = endedAt;
    return this;
  }

  public SubscriptionError addEndedAtItem(String endedAtItem) {
    if (this.endedAt == null) {
      this.endedAt = new ArrayList<>();
    }
    this.endedAt.add(endedAtItem);
    return this;
  }

  /**
   * ended_at field errors
   * @return endedAt
   */
  @javax.annotation.Nullable
  public List<String> getEndedAt() {
    return endedAt;
  }

  public void setEndedAt(List<String> endedAt) {
    this.endedAt = endedAt;
  }


  public SubscriptionError id(List<String> id) {
    this.id = id;
    return this;
  }

  public SubscriptionError addIdItem(String idItem) {
    if (this.id == null) {
      this.id = new ArrayList<>();
    }
    this.id.add(idItem);
    return this;
  }

  /**
   * id field errors
   * @return id
   */
  @javax.annotation.Nullable
  public List<String> getId() {
    return id;
  }

  public void setId(List<String> id) {
    this.id = id;
  }


  public SubscriptionError livemode(List<String> livemode) {
    this.livemode = livemode;
    return this;
  }

  public SubscriptionError addLivemodeItem(String livemodeItem) {
    if (this.livemode == null) {
      this.livemode = new ArrayList<>();
    }
    this.livemode.add(livemodeItem);
    return this;
  }

  /**
   * livemode field errors
   * @return livemode
   */
  @javax.annotation.Nullable
  public List<String> getLivemode() {
    return livemode;
  }

  public void setLivemode(List<String> livemode) {
    this.livemode = livemode;
  }


  public SubscriptionError nonFieldErrors(List<String> nonFieldErrors) {
    this.nonFieldErrors = nonFieldErrors;
    return this;
  }

  public SubscriptionError addNonFieldErrorsItem(String nonFieldErrorsItem) {
    if (this.nonFieldErrors == null) {
      this.nonFieldErrors = new ArrayList<>();
    }
    this.nonFieldErrors.add(nonFieldErrorsItem);
    return this;
  }

  /**
   * Errors not connected to any field
   * @return nonFieldErrors
   */
  @javax.annotation.Nullable
  public List<String> getNonFieldErrors() {
    return nonFieldErrors;
  }

  public void setNonFieldErrors(List<String> nonFieldErrors) {
    this.nonFieldErrors = nonFieldErrors;
  }


  public SubscriptionError plan(List<String> plan) {
    this.plan = plan;
    return this;
  }

  public SubscriptionError addPlanItem(String planItem) {
    if (this.plan == null) {
      this.plan = new ArrayList<>();
    }
    this.plan.add(planItem);
    return this;
  }

  /**
   * plan field errors
   * @return plan
   */
  @javax.annotation.Nullable
  public List<String> getPlan() {
    return plan;
  }

  public void setPlan(List<String> plan) {
    this.plan = plan;
  }


  public SubscriptionError quantity(List<String> quantity) {
    this.quantity = quantity;
    return this;
  }

  public SubscriptionError addQuantityItem(String quantityItem) {
    if (this.quantity == null) {
      this.quantity = new ArrayList<>();
    }
    this.quantity.add(quantityItem);
    return this;
  }

  /**
   * quantity field errors
   * @return quantity
   */
  @javax.annotation.Nullable
  public List<String> getQuantity() {
    return quantity;
  }

  public void setQuantity(List<String> quantity) {
    this.quantity = quantity;
  }


  public SubscriptionError start(List<String> start) {
    this.start = start;
    return this;
  }

  public SubscriptionError addStartItem(String startItem) {
    if (this.start == null) {
      this.start = new ArrayList<>();
    }
    this.start.add(startItem);
    return this;
  }

  /**
   * start field errors
   * @return start
   */
  @javax.annotation.Nullable
  public List<String> getStart() {
    return start;
  }

  public void setStart(List<String> start) {
    this.start = start;
  }


  public SubscriptionError status(List<String> status) {
    this.status = status;
    return this;
  }

  public SubscriptionError addStatusItem(String statusItem) {
    if (this.status == null) {
      this.status = new ArrayList<>();
    }
    this.status.add(statusItem);
    return this;
  }

  /**
   * status field errors
   * @return status
   */
  @javax.annotation.Nullable
  public List<String> getStatus() {
    return status;
  }

  public void setStatus(List<String> status) {
    this.status = status;
  }


  public SubscriptionError stripeId(List<String> stripeId) {
    this.stripeId = stripeId;
    return this;
  }

  public SubscriptionError addStripeIdItem(String stripeIdItem) {
    if (this.stripeId == null) {
      this.stripeId = new ArrayList<>();
    }
    this.stripeId.add(stripeIdItem);
    return this;
  }

  /**
   * stripe_id field errors
   * @return stripeId
   */
  @javax.annotation.Nullable
  public List<String> getStripeId() {
    return stripeId;
  }

  public void setStripeId(List<String> stripeId) {
    this.stripeId = stripeId;
  }


  public SubscriptionError trialEnd(List<String> trialEnd) {
    this.trialEnd = trialEnd;
    return this;
  }

  public SubscriptionError addTrialEndItem(String trialEndItem) {
    if (this.trialEnd == null) {
      this.trialEnd = new ArrayList<>();
    }
    this.trialEnd.add(trialEndItem);
    return this;
  }

  /**
   * trial_end field errors
   * @return trialEnd
   */
  @javax.annotation.Nullable
  public List<String> getTrialEnd() {
    return trialEnd;
  }

  public void setTrialEnd(List<String> trialEnd) {
    this.trialEnd = trialEnd;
  }


  public SubscriptionError trialStart(List<String> trialStart) {
    this.trialStart = trialStart;
    return this;
  }

  public SubscriptionError addTrialStartItem(String trialStartItem) {
    if (this.trialStart == null) {
      this.trialStart = new ArrayList<>();
    }
    this.trialStart.add(trialStartItem);
    return this;
  }

  /**
   * trial_start field errors
   * @return trialStart
   */
  @javax.annotation.Nullable
  public List<String> getTrialStart() {
    return trialStart;
  }

  public void setTrialStart(List<String> trialStart) {
    this.trialStart = trialStart;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SubscriptionError subscriptionError = (SubscriptionError) o;
    return Objects.equals(this.applicationFeePercent, subscriptionError.applicationFeePercent) &&
        Objects.equals(this.cancelAtPeriodEnd, subscriptionError.cancelAtPeriodEnd) &&
        Objects.equals(this.canceledAt, subscriptionError.canceledAt) &&
        Objects.equals(this.created, subscriptionError.created) &&
        Objects.equals(this.currentPeriodEnd, subscriptionError.currentPeriodEnd) &&
        Objects.equals(this.currentPeriodStart, subscriptionError.currentPeriodStart) &&
        Objects.equals(this.endedAt, subscriptionError.endedAt) &&
        Objects.equals(this.id, subscriptionError.id) &&
        Objects.equals(this.livemode, subscriptionError.livemode) &&
        Objects.equals(this.nonFieldErrors, subscriptionError.nonFieldErrors) &&
        Objects.equals(this.plan, subscriptionError.plan) &&
        Objects.equals(this.quantity, subscriptionError.quantity) &&
        Objects.equals(this.start, subscriptionError.start) &&
        Objects.equals(this.status, subscriptionError.status) &&
        Objects.equals(this.stripeId, subscriptionError.stripeId) &&
        Objects.equals(this.trialEnd, subscriptionError.trialEnd) &&
        Objects.equals(this.trialStart, subscriptionError.trialStart);
  }

  @Override
  public int hashCode() {
    return Objects.hash(applicationFeePercent, cancelAtPeriodEnd, canceledAt, created, currentPeriodEnd, currentPeriodStart, endedAt, id, livemode, nonFieldErrors, plan, quantity, start, status, stripeId, trialEnd, trialStart);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SubscriptionError {\n");
    sb.append("    applicationFeePercent: ").append(toIndentedString(applicationFeePercent)).append("\n");
    sb.append("    cancelAtPeriodEnd: ").append(toIndentedString(cancelAtPeriodEnd)).append("\n");
    sb.append("    canceledAt: ").append(toIndentedString(canceledAt)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    currentPeriodEnd: ").append(toIndentedString(currentPeriodEnd)).append("\n");
    sb.append("    currentPeriodStart: ").append(toIndentedString(currentPeriodStart)).append("\n");
    sb.append("    endedAt: ").append(toIndentedString(endedAt)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    livemode: ").append(toIndentedString(livemode)).append("\n");
    sb.append("    nonFieldErrors: ").append(toIndentedString(nonFieldErrors)).append("\n");
    sb.append("    plan: ").append(toIndentedString(plan)).append("\n");
    sb.append("    quantity: ").append(toIndentedString(quantity)).append("\n");
    sb.append("    start: ").append(toIndentedString(start)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    stripeId: ").append(toIndentedString(stripeId)).append("\n");
    sb.append("    trialEnd: ").append(toIndentedString(trialEnd)).append("\n");
    sb.append("    trialStart: ").append(toIndentedString(trialStart)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("application_fee_percent");
    openapiFields.add("cancel_at_period_end");
    openapiFields.add("canceled_at");
    openapiFields.add("created");
    openapiFields.add("current_period_end");
    openapiFields.add("current_period_start");
    openapiFields.add("ended_at");
    openapiFields.add("id");
    openapiFields.add("livemode");
    openapiFields.add("non_field_errors");
    openapiFields.add("plan");
    openapiFields.add("quantity");
    openapiFields.add("start");
    openapiFields.add("status");
    openapiFields.add("stripe_id");
    openapiFields.add("trial_end");
    openapiFields.add("trial_start");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SubscriptionError
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SubscriptionError.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SubscriptionError is not found in the empty JSON string", SubscriptionError.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SubscriptionError.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SubscriptionError` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("application_fee_percent") != null && !jsonObj.get("application_fee_percent").isJsonNull() && !jsonObj.get("application_fee_percent").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `application_fee_percent` to be an array in the JSON string but got `%s`", jsonObj.get("application_fee_percent").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("cancel_at_period_end") != null && !jsonObj.get("cancel_at_period_end").isJsonNull() && !jsonObj.get("cancel_at_period_end").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `cancel_at_period_end` to be an array in the JSON string but got `%s`", jsonObj.get("cancel_at_period_end").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("canceled_at") != null && !jsonObj.get("canceled_at").isJsonNull() && !jsonObj.get("canceled_at").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `canceled_at` to be an array in the JSON string but got `%s`", jsonObj.get("canceled_at").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("created") != null && !jsonObj.get("created").isJsonNull() && !jsonObj.get("created").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `created` to be an array in the JSON string but got `%s`", jsonObj.get("created").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("current_period_end") != null && !jsonObj.get("current_period_end").isJsonNull() && !jsonObj.get("current_period_end").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `current_period_end` to be an array in the JSON string but got `%s`", jsonObj.get("current_period_end").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("current_period_start") != null && !jsonObj.get("current_period_start").isJsonNull() && !jsonObj.get("current_period_start").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `current_period_start` to be an array in the JSON string but got `%s`", jsonObj.get("current_period_start").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("ended_at") != null && !jsonObj.get("ended_at").isJsonNull() && !jsonObj.get("ended_at").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `ended_at` to be an array in the JSON string but got `%s`", jsonObj.get("ended_at").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull() && !jsonObj.get("id").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be an array in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("livemode") != null && !jsonObj.get("livemode").isJsonNull() && !jsonObj.get("livemode").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `livemode` to be an array in the JSON string but got `%s`", jsonObj.get("livemode").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("non_field_errors") != null && !jsonObj.get("non_field_errors").isJsonNull() && !jsonObj.get("non_field_errors").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `non_field_errors` to be an array in the JSON string but got `%s`", jsonObj.get("non_field_errors").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("plan") != null && !jsonObj.get("plan").isJsonNull() && !jsonObj.get("plan").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `plan` to be an array in the JSON string but got `%s`", jsonObj.get("plan").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("quantity") != null && !jsonObj.get("quantity").isJsonNull() && !jsonObj.get("quantity").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `quantity` to be an array in the JSON string but got `%s`", jsonObj.get("quantity").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("start") != null && !jsonObj.get("start").isJsonNull() && !jsonObj.get("start").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `start` to be an array in the JSON string but got `%s`", jsonObj.get("start").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull() && !jsonObj.get("status").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be an array in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("stripe_id") != null && !jsonObj.get("stripe_id").isJsonNull() && !jsonObj.get("stripe_id").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `stripe_id` to be an array in the JSON string but got `%s`", jsonObj.get("stripe_id").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("trial_end") != null && !jsonObj.get("trial_end").isJsonNull() && !jsonObj.get("trial_end").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `trial_end` to be an array in the JSON string but got `%s`", jsonObj.get("trial_end").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("trial_start") != null && !jsonObj.get("trial_start").isJsonNull() && !jsonObj.get("trial_start").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `trial_start` to be an array in the JSON string but got `%s`", jsonObj.get("trial_start").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SubscriptionError.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SubscriptionError' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SubscriptionError> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SubscriptionError.class));

       return (TypeAdapter<T>) new TypeAdapter<SubscriptionError>() {
           @Override
           public void write(JsonWriter out, SubscriptionError value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SubscriptionError read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SubscriptionError given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SubscriptionError
   * @throws IOException if the JSON string is invalid with respect to SubscriptionError
   */
  public static SubscriptionError fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SubscriptionError.class);
  }

  /**
   * Convert an instance of SubscriptionError to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

