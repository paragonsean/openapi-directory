/*
 * IllumiDesk
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.NotFound;
import org.openapitools.client.model.ServerSize;
import org.openapitools.client.model.ServerSizeData;
import org.openapitools.client.model.ServerSizeError;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ServersApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ServersApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ServersApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for serversOptionsResourcesRead
     * @param size Server size unique identifier expressed as UUID or name. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Environment resource retrieved. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Environment resource not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serversOptionsResourcesReadCall(String size, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/servers/options/server-size/{size}/"
            .replace("{" + "size" + "}", localVarApiClient.escapeString(size.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call serversOptionsResourcesReadValidateBeforeCall(String size, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'size' is set
        if (size == null) {
            throw new ApiException("Missing the required parameter 'size' when calling serversOptionsResourcesRead(Async)");
        }

        return serversOptionsResourcesReadCall(size, _callback);

    }

    /**
     * Get a server size by id
     * 
     * @param size Server size unique identifier expressed as UUID or name. (required)
     * @return ServerSize
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Environment resource retrieved. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Environment resource not found. </td><td>  -  </td></tr>
     </table>
     */
    public ServerSize serversOptionsResourcesRead(String size) throws ApiException {
        ApiResponse<ServerSize> localVarResp = serversOptionsResourcesReadWithHttpInfo(size);
        return localVarResp.getData();
    }

    /**
     * Get a server size by id
     * 
     * @param size Server size unique identifier expressed as UUID or name. (required)
     * @return ApiResponse&lt;ServerSize&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Environment resource retrieved. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Environment resource not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServerSize> serversOptionsResourcesReadWithHttpInfo(String size) throws ApiException {
        okhttp3.Call localVarCall = serversOptionsResourcesReadValidateBeforeCall(size, null);
        Type localVarReturnType = new TypeToken<ServerSize>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a server size by id (asynchronously)
     * 
     * @param size Server size unique identifier expressed as UUID or name. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Environment resource retrieved. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Environment resource not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serversOptionsResourcesReadAsync(String size, final ApiCallback<ServerSize> _callback) throws ApiException {

        okhttp3.Call localVarCall = serversOptionsResourcesReadValidateBeforeCall(size, _callback);
        Type localVarReturnType = new TypeToken<ServerSize>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for serversOptionsServerSizeCreate
     * @param serversizeData  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> ServerSize created. This operation is available only to super users. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serversOptionsServerSizeCreateCall(ServerSizeData serversizeData, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = serversizeData;

        // create path and map variables
        String localVarPath = "/v1/servers/options/server-size/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call serversOptionsServerSizeCreateValidateBeforeCall(ServerSizeData serversizeData, final ApiCallback _callback) throws ApiException {
        return serversOptionsServerSizeCreateCall(serversizeData, _callback);

    }

    /**
     * Create a new server size item
     * Only super users with on-premises version have acceess to this endpoint.
     * @param serversizeData  (optional)
     * @return ServerSize
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> ServerSize created. This operation is available only to super users. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied </td><td>  -  </td></tr>
     </table>
     */
    public ServerSize serversOptionsServerSizeCreate(ServerSizeData serversizeData) throws ApiException {
        ApiResponse<ServerSize> localVarResp = serversOptionsServerSizeCreateWithHttpInfo(serversizeData);
        return localVarResp.getData();
    }

    /**
     * Create a new server size item
     * Only super users with on-premises version have acceess to this endpoint.
     * @param serversizeData  (optional)
     * @return ApiResponse&lt;ServerSize&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> ServerSize created. This operation is available only to super users. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServerSize> serversOptionsServerSizeCreateWithHttpInfo(ServerSizeData serversizeData) throws ApiException {
        okhttp3.Call localVarCall = serversOptionsServerSizeCreateValidateBeforeCall(serversizeData, null);
        Type localVarReturnType = new TypeToken<ServerSize>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a new server size item (asynchronously)
     * Only super users with on-premises version have acceess to this endpoint.
     * @param serversizeData  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> ServerSize created. This operation is available only to super users. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serversOptionsServerSizeCreateAsync(ServerSizeData serversizeData, final ApiCallback<ServerSize> _callback) throws ApiException {

        okhttp3.Call localVarCall = serversOptionsServerSizeCreateValidateBeforeCall(serversizeData, _callback);
        Type localVarReturnType = new TypeToken<ServerSize>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for serversOptionsServerSizeDelete
     * @param size Server size unique identifier expressed as UUID or name. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Server size deleted. This operation is available only to super users </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ServerSize not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serversOptionsServerSizeDeleteCall(String size, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/servers/options/server-size/{size}/"
            .replace("{" + "size" + "}", localVarApiClient.escapeString(size.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call serversOptionsServerSizeDeleteValidateBeforeCall(String size, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'size' is set
        if (size == null) {
            throw new ApiException("Missing the required parameter 'size' when calling serversOptionsServerSizeDelete(Async)");
        }

        return serversOptionsServerSizeDeleteCall(size, _callback);

    }

    /**
     * Delete a server size by id
     * Only super users with on-premises version have acceess to this endpoint.
     * @param size Server size unique identifier expressed as UUID or name. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Server size deleted. This operation is available only to super users </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ServerSize not found. </td><td>  -  </td></tr>
     </table>
     */
    public void serversOptionsServerSizeDelete(String size) throws ApiException {
        serversOptionsServerSizeDeleteWithHttpInfo(size);
    }

    /**
     * Delete a server size by id
     * Only super users with on-premises version have acceess to this endpoint.
     * @param size Server size unique identifier expressed as UUID or name. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Server size deleted. This operation is available only to super users </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ServerSize not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> serversOptionsServerSizeDeleteWithHttpInfo(String size) throws ApiException {
        okhttp3.Call localVarCall = serversOptionsServerSizeDeleteValidateBeforeCall(size, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a server size by id (asynchronously)
     * Only super users with on-premises version have acceess to this endpoint.
     * @param size Server size unique identifier expressed as UUID or name. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Server size deleted. This operation is available only to super users </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ServerSize not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serversOptionsServerSizeDeleteAsync(String size, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = serversOptionsServerSizeDeleteValidateBeforeCall(size, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for serversOptionsServerSizeReplace
     * @param size Server size unique identifier expressed as UUID or name. (required)
     * @param serversizeData  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Server size replaced. This operation is available only to super users. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ServerSize not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serversOptionsServerSizeReplaceCall(String size, ServerSizeData serversizeData, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = serversizeData;

        // create path and map variables
        String localVarPath = "/v1/servers/options/server-size/{size}/"
            .replace("{" + "size" + "}", localVarApiClient.escapeString(size.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call serversOptionsServerSizeReplaceValidateBeforeCall(String size, ServerSizeData serversizeData, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'size' is set
        if (size == null) {
            throw new ApiException("Missing the required parameter 'size' when calling serversOptionsServerSizeReplace(Async)");
        }

        return serversOptionsServerSizeReplaceCall(size, serversizeData, _callback);

    }

    /**
     * Replace a server size by id
     * Only super users with on-premises version have acceess to this endpoint.
     * @param size Server size unique identifier expressed as UUID or name. (required)
     * @param serversizeData  (optional)
     * @return ServerSize
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Server size replaced. This operation is available only to super users. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ServerSize not found </td><td>  -  </td></tr>
     </table>
     */
    public ServerSize serversOptionsServerSizeReplace(String size, ServerSizeData serversizeData) throws ApiException {
        ApiResponse<ServerSize> localVarResp = serversOptionsServerSizeReplaceWithHttpInfo(size, serversizeData);
        return localVarResp.getData();
    }

    /**
     * Replace a server size by id
     * Only super users with on-premises version have acceess to this endpoint.
     * @param size Server size unique identifier expressed as UUID or name. (required)
     * @param serversizeData  (optional)
     * @return ApiResponse&lt;ServerSize&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Server size replaced. This operation is available only to super users. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ServerSize not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServerSize> serversOptionsServerSizeReplaceWithHttpInfo(String size, ServerSizeData serversizeData) throws ApiException {
        okhttp3.Call localVarCall = serversOptionsServerSizeReplaceValidateBeforeCall(size, serversizeData, null);
        Type localVarReturnType = new TypeToken<ServerSize>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Replace a server size by id (asynchronously)
     * Only super users with on-premises version have acceess to this endpoint.
     * @param size Server size unique identifier expressed as UUID or name. (required)
     * @param serversizeData  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Server size replaced. This operation is available only to super users. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ServerSize not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serversOptionsServerSizeReplaceAsync(String size, ServerSizeData serversizeData, final ApiCallback<ServerSize> _callback) throws ApiException {

        okhttp3.Call localVarCall = serversOptionsServerSizeReplaceValidateBeforeCall(size, serversizeData, _callback);
        Type localVarReturnType = new TypeToken<ServerSize>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for serversOptionsServerSizeUpdate
     * @param size Server size unique identifier expressed as UUID or name. (required)
     * @param serversizeData  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Server size updated. This operation is available only to super users. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Server size not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serversOptionsServerSizeUpdateCall(String size, ServerSizeData serversizeData, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = serversizeData;

        // create path and map variables
        String localVarPath = "/v1/servers/options/server-size/{size}/"
            .replace("{" + "size" + "}", localVarApiClient.escapeString(size.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call serversOptionsServerSizeUpdateValidateBeforeCall(String size, ServerSizeData serversizeData, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'size' is set
        if (size == null) {
            throw new ApiException("Missing the required parameter 'size' when calling serversOptionsServerSizeUpdate(Async)");
        }

        return serversOptionsServerSizeUpdateCall(size, serversizeData, _callback);

    }

    /**
     * Update a server size by id
     * Only super users with on-premises version have acceess to this endpoint.
     * @param size Server size unique identifier expressed as UUID or name. (required)
     * @param serversizeData  (optional)
     * @return ServerSize
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Server size updated. This operation is available only to super users. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Server size not found. </td><td>  -  </td></tr>
     </table>
     */
    public ServerSize serversOptionsServerSizeUpdate(String size, ServerSizeData serversizeData) throws ApiException {
        ApiResponse<ServerSize> localVarResp = serversOptionsServerSizeUpdateWithHttpInfo(size, serversizeData);
        return localVarResp.getData();
    }

    /**
     * Update a server size by id
     * Only super users with on-premises version have acceess to this endpoint.
     * @param size Server size unique identifier expressed as UUID or name. (required)
     * @param serversizeData  (optional)
     * @return ApiResponse&lt;ServerSize&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Server size updated. This operation is available only to super users. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Server size not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServerSize> serversOptionsServerSizeUpdateWithHttpInfo(String size, ServerSizeData serversizeData) throws ApiException {
        okhttp3.Call localVarCall = serversOptionsServerSizeUpdateValidateBeforeCall(size, serversizeData, null);
        Type localVarReturnType = new TypeToken<ServerSize>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a server size by id (asynchronously)
     * Only super users with on-premises version have acceess to this endpoint.
     * @param size Server size unique identifier expressed as UUID or name. (required)
     * @param serversizeData  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Server size updated. This operation is available only to super users. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Server size not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serversOptionsServerSizeUpdateAsync(String size, ServerSizeData serversizeData, final ApiCallback<ServerSize> _callback) throws ApiException {

        okhttp3.Call localVarCall = serversOptionsServerSizeUpdateValidateBeforeCall(size, serversizeData, _callback);
        Type localVarReturnType = new TypeToken<ServerSize>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for serversOptionsSizesList
     * @param limit Set limit when retrieving items. (optional)
     * @param offset Offset when retrieving items. (optional)
     * @param ordering Set order when retrieving items. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Server size list. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serversOptionsSizesListCall(String limit, String offset, String ordering, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/servers/options/server-size/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call serversOptionsSizesListValidateBeforeCall(String limit, String offset, String ordering, final ApiCallback _callback) throws ApiException {
        return serversOptionsSizesListCall(limit, offset, ordering, _callback);

    }

    /**
     * Retrieve available server sizes
     * 
     * @param limit Set limit when retrieving items. (optional)
     * @param offset Offset when retrieving items. (optional)
     * @param ordering Set order when retrieving items. (optional)
     * @return List&lt;ServerSize&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Server size list. </td><td>  -  </td></tr>
     </table>
     */
    public List<ServerSize> serversOptionsSizesList(String limit, String offset, String ordering) throws ApiException {
        ApiResponse<List<ServerSize>> localVarResp = serversOptionsSizesListWithHttpInfo(limit, offset, ordering);
        return localVarResp.getData();
    }

    /**
     * Retrieve available server sizes
     * 
     * @param limit Set limit when retrieving items. (optional)
     * @param offset Offset when retrieving items. (optional)
     * @param ordering Set order when retrieving items. (optional)
     * @return ApiResponse&lt;List&lt;ServerSize&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Server size list. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ServerSize>> serversOptionsSizesListWithHttpInfo(String limit, String offset, String ordering) throws ApiException {
        okhttp3.Call localVarCall = serversOptionsSizesListValidateBeforeCall(limit, offset, ordering, null);
        Type localVarReturnType = new TypeToken<List<ServerSize>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve available server sizes (asynchronously)
     * 
     * @param limit Set limit when retrieving items. (optional)
     * @param offset Offset when retrieving items. (optional)
     * @param ordering Set order when retrieving items. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Server size list. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serversOptionsSizesListAsync(String limit, String offset, String ordering, final ApiCallback<List<ServerSize>> _callback) throws ApiException {

        okhttp3.Call localVarCall = serversOptionsSizesListValidateBeforeCall(limit, offset, ordering, _callback);
        Type localVarReturnType = new TypeToken<List<ServerSize>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
