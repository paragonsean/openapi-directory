/*
 * IllumiDesk
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Card;
import org.openapitools.client.model.CardDataPost;
import org.openapitools.client.model.CardDataPutandPatch;
import org.openapitools.client.model.CardError;
import org.openapitools.client.model.CardUpdateError;
import org.openapitools.client.model.Invoice;
import org.openapitools.client.model.InvoiceItem;
import org.openapitools.client.model.NotFound;
import org.openapitools.client.model.Plan;
import org.openapitools.client.model.Subscription;
import org.openapitools.client.model.SubscriptionData;
import org.openapitools.client.model.SubscriptionError;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class BillingApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public BillingApi() {
        this(Configuration.getDefaultApiClient());
    }

    public BillingApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for billingCardsCreate
     * @param namespace User or team name. (required)
     * @param cardData  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Card created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call billingCardsCreateCall(String namespace, CardDataPost cardData, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cardData;

        // create path and map variables
        String localVarPath = "/v1/{namespace}/billing/cards/"
            .replace("{" + "namespace" + "}", localVarApiClient.escapeString(namespace.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call billingCardsCreateValidateBeforeCall(String namespace, CardDataPost cardData, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'namespace' is set
        if (namespace == null) {
            throw new ApiException("Missing the required parameter 'namespace' when calling billingCardsCreate(Async)");
        }

        return billingCardsCreateCall(namespace, cardData, _callback);

    }

    /**
     * Create new credit card
     * 
     * @param namespace User or team name. (required)
     * @param cardData  (optional)
     * @return Card
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Card created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied </td><td>  -  </td></tr>
     </table>
     */
    public Card billingCardsCreate(String namespace, CardDataPost cardData) throws ApiException {
        ApiResponse<Card> localVarResp = billingCardsCreateWithHttpInfo(namespace, cardData);
        return localVarResp.getData();
    }

    /**
     * Create new credit card
     * 
     * @param namespace User or team name. (required)
     * @param cardData  (optional)
     * @return ApiResponse&lt;Card&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Card created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Card> billingCardsCreateWithHttpInfo(String namespace, CardDataPost cardData) throws ApiException {
        okhttp3.Call localVarCall = billingCardsCreateValidateBeforeCall(namespace, cardData, null);
        Type localVarReturnType = new TypeToken<Card>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create new credit card (asynchronously)
     * 
     * @param namespace User or team name. (required)
     * @param cardData  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Card created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call billingCardsCreateAsync(String namespace, CardDataPost cardData, final ApiCallback<Card> _callback) throws ApiException {

        okhttp3.Call localVarCall = billingCardsCreateValidateBeforeCall(namespace, cardData, _callback);
        Type localVarReturnType = new TypeToken<Card>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for billingCardsDelete
     * @param namespace User or team name. (required)
     * @param id Card unique identifier expressed as UUID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Card deleted. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Card not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call billingCardsDeleteCall(String namespace, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/{namespace}/billing/cards/{id}/"
            .replace("{" + "namespace" + "}", localVarApiClient.escapeString(namespace.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call billingCardsDeleteValidateBeforeCall(String namespace, String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'namespace' is set
        if (namespace == null) {
            throw new ApiException("Missing the required parameter 'namespace' when calling billingCardsDelete(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling billingCardsDelete(Async)");
        }

        return billingCardsDeleteCall(namespace, id, _callback);

    }

    /**
     * Delete a credit card
     * 
     * @param namespace User or team name. (required)
     * @param id Card unique identifier expressed as UUID. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Card deleted. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Card not found. </td><td>  -  </td></tr>
     </table>
     */
    public void billingCardsDelete(String namespace, String id) throws ApiException {
        billingCardsDeleteWithHttpInfo(namespace, id);
    }

    /**
     * Delete a credit card
     * 
     * @param namespace User or team name. (required)
     * @param id Card unique identifier expressed as UUID. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Card deleted. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Card not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> billingCardsDeleteWithHttpInfo(String namespace, String id) throws ApiException {
        okhttp3.Call localVarCall = billingCardsDeleteValidateBeforeCall(namespace, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a credit card (asynchronously)
     * 
     * @param namespace User or team name. (required)
     * @param id Card unique identifier expressed as UUID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Card deleted. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Card not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call billingCardsDeleteAsync(String namespace, String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = billingCardsDeleteValidateBeforeCall(namespace, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for billingCardsList
     * @param namespace User or team name. (required)
     * @param limit Set limit when retrieving credit or debit cards. (optional)
     * @param offset Set offset when retriving cards. (optional)
     * @param ordering Order when retrieving cards. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Card list </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call billingCardsListCall(String namespace, String limit, String offset, String ordering, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/{namespace}/billing/cards/"
            .replace("{" + "namespace" + "}", localVarApiClient.escapeString(namespace.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call billingCardsListValidateBeforeCall(String namespace, String limit, String offset, String ordering, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'namespace' is set
        if (namespace == null) {
            throw new ApiException("Missing the required parameter 'namespace' when calling billingCardsList(Async)");
        }

        return billingCardsListCall(namespace, limit, offset, ordering, _callback);

    }

    /**
     * Get credit cards
     * 
     * @param namespace User or team name. (required)
     * @param limit Set limit when retrieving credit or debit cards. (optional)
     * @param offset Set offset when retriving cards. (optional)
     * @param ordering Order when retrieving cards. (optional)
     * @return List&lt;Card&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Card list </td><td>  -  </td></tr>
     </table>
     */
    public List<Card> billingCardsList(String namespace, String limit, String offset, String ordering) throws ApiException {
        ApiResponse<List<Card>> localVarResp = billingCardsListWithHttpInfo(namespace, limit, offset, ordering);
        return localVarResp.getData();
    }

    /**
     * Get credit cards
     * 
     * @param namespace User or team name. (required)
     * @param limit Set limit when retrieving credit or debit cards. (optional)
     * @param offset Set offset when retriving cards. (optional)
     * @param ordering Order when retrieving cards. (optional)
     * @return ApiResponse&lt;List&lt;Card&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Card list </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Card>> billingCardsListWithHttpInfo(String namespace, String limit, String offset, String ordering) throws ApiException {
        okhttp3.Call localVarCall = billingCardsListValidateBeforeCall(namespace, limit, offset, ordering, null);
        Type localVarReturnType = new TypeToken<List<Card>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get credit cards (asynchronously)
     * 
     * @param namespace User or team name. (required)
     * @param limit Set limit when retrieving credit or debit cards. (optional)
     * @param offset Set offset when retriving cards. (optional)
     * @param ordering Order when retrieving cards. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Card list </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call billingCardsListAsync(String namespace, String limit, String offset, String ordering, final ApiCallback<List<Card>> _callback) throws ApiException {

        okhttp3.Call localVarCall = billingCardsListValidateBeforeCall(namespace, limit, offset, ordering, _callback);
        Type localVarReturnType = new TypeToken<List<Card>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for billingCardsRead
     * @param namespace User or team name. (required)
     * @param id User unique identifier expressed as UUID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Card retrieved. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Card not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call billingCardsReadCall(String namespace, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/{namespace}/billing/cards/{id}/"
            .replace("{" + "namespace" + "}", localVarApiClient.escapeString(namespace.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call billingCardsReadValidateBeforeCall(String namespace, String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'namespace' is set
        if (namespace == null) {
            throw new ApiException("Missing the required parameter 'namespace' when calling billingCardsRead(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling billingCardsRead(Async)");
        }

        return billingCardsReadCall(namespace, id, _callback);

    }

    /**
     * Get credit card by id
     * 
     * @param namespace User or team name. (required)
     * @param id User unique identifier expressed as UUID. (required)
     * @return Card
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Card retrieved. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Card not found. </td><td>  -  </td></tr>
     </table>
     */
    public Card billingCardsRead(String namespace, String id) throws ApiException {
        ApiResponse<Card> localVarResp = billingCardsReadWithHttpInfo(namespace, id);
        return localVarResp.getData();
    }

    /**
     * Get credit card by id
     * 
     * @param namespace User or team name. (required)
     * @param id User unique identifier expressed as UUID. (required)
     * @return ApiResponse&lt;Card&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Card retrieved. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Card not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Card> billingCardsReadWithHttpInfo(String namespace, String id) throws ApiException {
        okhttp3.Call localVarCall = billingCardsReadValidateBeforeCall(namespace, id, null);
        Type localVarReturnType = new TypeToken<Card>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get credit card by id (asynchronously)
     * 
     * @param namespace User or team name. (required)
     * @param id User unique identifier expressed as UUID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Card retrieved. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Card not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call billingCardsReadAsync(String namespace, String id, final ApiCallback<Card> _callback) throws ApiException {

        okhttp3.Call localVarCall = billingCardsReadValidateBeforeCall(namespace, id, _callback);
        Type localVarReturnType = new TypeToken<Card>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for billingCardsReplace
     * @param namespace User or team name. (required)
     * @param id  (required)
     * @param cardData  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Card updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call billingCardsReplaceCall(String namespace, String id, CardDataPutandPatch cardData, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cardData;

        // create path and map variables
        String localVarPath = "/v1/{namespace}/billing/cards/{id}/"
            .replace("{" + "namespace" + "}", localVarApiClient.escapeString(namespace.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call billingCardsReplaceValidateBeforeCall(String namespace, String id, CardDataPutandPatch cardData, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'namespace' is set
        if (namespace == null) {
            throw new ApiException("Missing the required parameter 'namespace' when calling billingCardsReplace(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling billingCardsReplace(Async)");
        }

        return billingCardsReplaceCall(namespace, id, cardData, _callback);

    }

    /**
     * Replace a credit card
     * 
     * @param namespace User or team name. (required)
     * @param id  (required)
     * @param cardData  (optional)
     * @return Card
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Card updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied </td><td>  -  </td></tr>
     </table>
     */
    public Card billingCardsReplace(String namespace, String id, CardDataPutandPatch cardData) throws ApiException {
        ApiResponse<Card> localVarResp = billingCardsReplaceWithHttpInfo(namespace, id, cardData);
        return localVarResp.getData();
    }

    /**
     * Replace a credit card
     * 
     * @param namespace User or team name. (required)
     * @param id  (required)
     * @param cardData  (optional)
     * @return ApiResponse&lt;Card&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Card updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Card> billingCardsReplaceWithHttpInfo(String namespace, String id, CardDataPutandPatch cardData) throws ApiException {
        okhttp3.Call localVarCall = billingCardsReplaceValidateBeforeCall(namespace, id, cardData, null);
        Type localVarReturnType = new TypeToken<Card>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Replace a credit card (asynchronously)
     * 
     * @param namespace User or team name. (required)
     * @param id  (required)
     * @param cardData  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Card updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call billingCardsReplaceAsync(String namespace, String id, CardDataPutandPatch cardData, final ApiCallback<Card> _callback) throws ApiException {

        okhttp3.Call localVarCall = billingCardsReplaceValidateBeforeCall(namespace, id, cardData, _callback);
        Type localVarReturnType = new TypeToken<Card>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for billingCardsUpdate
     * @param namespace User or team name. (required)
     * @param id Card unique identifier. (required)
     * @param cardData  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Card updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Card not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call billingCardsUpdateCall(String namespace, String id, CardDataPutandPatch cardData, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cardData;

        // create path and map variables
        String localVarPath = "/v1/{namespace}/billing/cards/{id}/"
            .replace("{" + "namespace" + "}", localVarApiClient.escapeString(namespace.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call billingCardsUpdateValidateBeforeCall(String namespace, String id, CardDataPutandPatch cardData, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'namespace' is set
        if (namespace == null) {
            throw new ApiException("Missing the required parameter 'namespace' when calling billingCardsUpdate(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling billingCardsUpdate(Async)");
        }

        return billingCardsUpdateCall(namespace, id, cardData, _callback);

    }

    /**
     * Update a credit card
     * 
     * @param namespace User or team name. (required)
     * @param id Card unique identifier. (required)
     * @param cardData  (optional)
     * @return Card
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Card updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Card not found </td><td>  -  </td></tr>
     </table>
     */
    public Card billingCardsUpdate(String namespace, String id, CardDataPutandPatch cardData) throws ApiException {
        ApiResponse<Card> localVarResp = billingCardsUpdateWithHttpInfo(namespace, id, cardData);
        return localVarResp.getData();
    }

    /**
     * Update a credit card
     * 
     * @param namespace User or team name. (required)
     * @param id Card unique identifier. (required)
     * @param cardData  (optional)
     * @return ApiResponse&lt;Card&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Card updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Card not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Card> billingCardsUpdateWithHttpInfo(String namespace, String id, CardDataPutandPatch cardData) throws ApiException {
        okhttp3.Call localVarCall = billingCardsUpdateValidateBeforeCall(namespace, id, cardData, null);
        Type localVarReturnType = new TypeToken<Card>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a credit card (asynchronously)
     * 
     * @param namespace User or team name. (required)
     * @param id Card unique identifier. (required)
     * @param cardData  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Card updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Card not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call billingCardsUpdateAsync(String namespace, String id, CardDataPutandPatch cardData, final ApiCallback<Card> _callback) throws ApiException {

        okhttp3.Call localVarCall = billingCardsUpdateValidateBeforeCall(namespace, id, cardData, _callback);
        Type localVarReturnType = new TypeToken<Card>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for billingInvoiceItemsList
     * @param namespace User or team name. (required)
     * @param invoiceId Invoice id, expressed as UUID. (required)
     * @param limit Limit when getting items. (optional)
     * @param offset Offset when getting items. (optional)
     * @param ordering Ordering when getting items. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> InvoiceItem list. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call billingInvoiceItemsListCall(String namespace, String invoiceId, String limit, String offset, String ordering, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/{namespace}/billing/invoices/{invoice_id}/invoice-items/"
            .replace("{" + "namespace" + "}", localVarApiClient.escapeString(namespace.toString()))
            .replace("{" + "invoice_id" + "}", localVarApiClient.escapeString(invoiceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call billingInvoiceItemsListValidateBeforeCall(String namespace, String invoiceId, String limit, String offset, String ordering, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'namespace' is set
        if (namespace == null) {
            throw new ApiException("Missing the required parameter 'namespace' when calling billingInvoiceItemsList(Async)");
        }

        // verify the required parameter 'invoiceId' is set
        if (invoiceId == null) {
            throw new ApiException("Missing the required parameter 'invoiceId' when calling billingInvoiceItemsList(Async)");
        }

        return billingInvoiceItemsListCall(namespace, invoiceId, limit, offset, ordering, _callback);

    }

    /**
     * Get invoice items for a given invoice.
     * 
     * @param namespace User or team name. (required)
     * @param invoiceId Invoice id, expressed as UUID. (required)
     * @param limit Limit when getting items. (optional)
     * @param offset Offset when getting items. (optional)
     * @param ordering Ordering when getting items. (optional)
     * @return List&lt;InvoiceItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> InvoiceItem list. </td><td>  -  </td></tr>
     </table>
     */
    public List<InvoiceItem> billingInvoiceItemsList(String namespace, String invoiceId, String limit, String offset, String ordering) throws ApiException {
        ApiResponse<List<InvoiceItem>> localVarResp = billingInvoiceItemsListWithHttpInfo(namespace, invoiceId, limit, offset, ordering);
        return localVarResp.getData();
    }

    /**
     * Get invoice items for a given invoice.
     * 
     * @param namespace User or team name. (required)
     * @param invoiceId Invoice id, expressed as UUID. (required)
     * @param limit Limit when getting items. (optional)
     * @param offset Offset when getting items. (optional)
     * @param ordering Ordering when getting items. (optional)
     * @return ApiResponse&lt;List&lt;InvoiceItem&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> InvoiceItem list. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<InvoiceItem>> billingInvoiceItemsListWithHttpInfo(String namespace, String invoiceId, String limit, String offset, String ordering) throws ApiException {
        okhttp3.Call localVarCall = billingInvoiceItemsListValidateBeforeCall(namespace, invoiceId, limit, offset, ordering, null);
        Type localVarReturnType = new TypeToken<List<InvoiceItem>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get invoice items for a given invoice. (asynchronously)
     * 
     * @param namespace User or team name. (required)
     * @param invoiceId Invoice id, expressed as UUID. (required)
     * @param limit Limit when getting items. (optional)
     * @param offset Offset when getting items. (optional)
     * @param ordering Ordering when getting items. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> InvoiceItem list. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call billingInvoiceItemsListAsync(String namespace, String invoiceId, String limit, String offset, String ordering, final ApiCallback<List<InvoiceItem>> _callback) throws ApiException {

        okhttp3.Call localVarCall = billingInvoiceItemsListValidateBeforeCall(namespace, invoiceId, limit, offset, ordering, _callback);
        Type localVarReturnType = new TypeToken<List<InvoiceItem>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for billingInvoiceItemsRead
     * @param namespace User or team name. (required)
     * @param invoiceId Invoice id, expressed as UUID. (required)
     * @param id InvoiceItem id, expressed as UUID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> InvoiceItem retrieved. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> InvoiceItem not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call billingInvoiceItemsReadCall(String namespace, String invoiceId, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/{namespace}/billing/invoices/{invoice_id}/invoice-items/{id}"
            .replace("{" + "namespace" + "}", localVarApiClient.escapeString(namespace.toString()))
            .replace("{" + "invoice_id" + "}", localVarApiClient.escapeString(invoiceId.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call billingInvoiceItemsReadValidateBeforeCall(String namespace, String invoiceId, String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'namespace' is set
        if (namespace == null) {
            throw new ApiException("Missing the required parameter 'namespace' when calling billingInvoiceItemsRead(Async)");
        }

        // verify the required parameter 'invoiceId' is set
        if (invoiceId == null) {
            throw new ApiException("Missing the required parameter 'invoiceId' when calling billingInvoiceItemsRead(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling billingInvoiceItemsRead(Async)");
        }

        return billingInvoiceItemsReadCall(namespace, invoiceId, id, _callback);

    }

    /**
     * Get a specific InvoiceItem.
     * 
     * @param namespace User or team name. (required)
     * @param invoiceId Invoice id, expressed as UUID. (required)
     * @param id InvoiceItem id, expressed as UUID. (required)
     * @return InvoiceItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> InvoiceItem retrieved. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> InvoiceItem not found. </td><td>  -  </td></tr>
     </table>
     */
    public InvoiceItem billingInvoiceItemsRead(String namespace, String invoiceId, String id) throws ApiException {
        ApiResponse<InvoiceItem> localVarResp = billingInvoiceItemsReadWithHttpInfo(namespace, invoiceId, id);
        return localVarResp.getData();
    }

    /**
     * Get a specific InvoiceItem.
     * 
     * @param namespace User or team name. (required)
     * @param invoiceId Invoice id, expressed as UUID. (required)
     * @param id InvoiceItem id, expressed as UUID. (required)
     * @return ApiResponse&lt;InvoiceItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> InvoiceItem retrieved. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> InvoiceItem not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InvoiceItem> billingInvoiceItemsReadWithHttpInfo(String namespace, String invoiceId, String id) throws ApiException {
        okhttp3.Call localVarCall = billingInvoiceItemsReadValidateBeforeCall(namespace, invoiceId, id, null);
        Type localVarReturnType = new TypeToken<InvoiceItem>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a specific InvoiceItem. (asynchronously)
     * 
     * @param namespace User or team name. (required)
     * @param invoiceId Invoice id, expressed as UUID. (required)
     * @param id InvoiceItem id, expressed as UUID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> InvoiceItem retrieved. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> InvoiceItem not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call billingInvoiceItemsReadAsync(String namespace, String invoiceId, String id, final ApiCallback<InvoiceItem> _callback) throws ApiException {

        okhttp3.Call localVarCall = billingInvoiceItemsReadValidateBeforeCall(namespace, invoiceId, id, _callback);
        Type localVarReturnType = new TypeToken<InvoiceItem>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for billingInvoicesList
     * @param namespace User or team name. (required)
     * @param limit Limit when getting items. (optional)
     * @param offset Offset when getting items. (optional)
     * @param ordering Ordering when getting items. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Invoice list. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call billingInvoicesListCall(String namespace, String limit, String offset, String ordering, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/{namespace}/billing/invoices/"
            .replace("{" + "namespace" + "}", localVarApiClient.escapeString(namespace.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call billingInvoicesListValidateBeforeCall(String namespace, String limit, String offset, String ordering, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'namespace' is set
        if (namespace == null) {
            throw new ApiException("Missing the required parameter 'namespace' when calling billingInvoicesList(Async)");
        }

        return billingInvoicesListCall(namespace, limit, offset, ordering, _callback);

    }

    /**
     * Get invoices
     * 
     * @param namespace User or team name. (required)
     * @param limit Limit when getting items. (optional)
     * @param offset Offset when getting items. (optional)
     * @param ordering Ordering when getting items. (optional)
     * @return List&lt;Invoice&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Invoice list. </td><td>  -  </td></tr>
     </table>
     */
    public List<Invoice> billingInvoicesList(String namespace, String limit, String offset, String ordering) throws ApiException {
        ApiResponse<List<Invoice>> localVarResp = billingInvoicesListWithHttpInfo(namespace, limit, offset, ordering);
        return localVarResp.getData();
    }

    /**
     * Get invoices
     * 
     * @param namespace User or team name. (required)
     * @param limit Limit when getting items. (optional)
     * @param offset Offset when getting items. (optional)
     * @param ordering Ordering when getting items. (optional)
     * @return ApiResponse&lt;List&lt;Invoice&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Invoice list. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Invoice>> billingInvoicesListWithHttpInfo(String namespace, String limit, String offset, String ordering) throws ApiException {
        okhttp3.Call localVarCall = billingInvoicesListValidateBeforeCall(namespace, limit, offset, ordering, null);
        Type localVarReturnType = new TypeToken<List<Invoice>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get invoices (asynchronously)
     * 
     * @param namespace User or team name. (required)
     * @param limit Limit when getting items. (optional)
     * @param offset Offset when getting items. (optional)
     * @param ordering Ordering when getting items. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Invoice list. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call billingInvoicesListAsync(String namespace, String limit, String offset, String ordering, final ApiCallback<List<Invoice>> _callback) throws ApiException {

        okhttp3.Call localVarCall = billingInvoicesListValidateBeforeCall(namespace, limit, offset, ordering, _callback);
        Type localVarReturnType = new TypeToken<List<Invoice>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for billingInvoicesRead
     * @param namespace User or team name. (required)
     * @param id Invoice unique identifier expressed as UUID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Invoice retrieved. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invoice not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call billingInvoicesReadCall(String namespace, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/{namespace}/billing/invoices/{id}/"
            .replace("{" + "namespace" + "}", localVarApiClient.escapeString(namespace.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call billingInvoicesReadValidateBeforeCall(String namespace, String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'namespace' is set
        if (namespace == null) {
            throw new ApiException("Missing the required parameter 'namespace' when calling billingInvoicesRead(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling billingInvoicesRead(Async)");
        }

        return billingInvoicesReadCall(namespace, id, _callback);

    }

    /**
     * Get an invoice
     * 
     * @param namespace User or team name. (required)
     * @param id Invoice unique identifier expressed as UUID. (required)
     * @return Invoice
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Invoice retrieved. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invoice not found. </td><td>  -  </td></tr>
     </table>
     */
    public Invoice billingInvoicesRead(String namespace, String id) throws ApiException {
        ApiResponse<Invoice> localVarResp = billingInvoicesReadWithHttpInfo(namespace, id);
        return localVarResp.getData();
    }

    /**
     * Get an invoice
     * 
     * @param namespace User or team name. (required)
     * @param id Invoice unique identifier expressed as UUID. (required)
     * @return ApiResponse&lt;Invoice&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Invoice retrieved. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invoice not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Invoice> billingInvoicesReadWithHttpInfo(String namespace, String id) throws ApiException {
        okhttp3.Call localVarCall = billingInvoicesReadValidateBeforeCall(namespace, id, null);
        Type localVarReturnType = new TypeToken<Invoice>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get an invoice (asynchronously)
     * 
     * @param namespace User or team name. (required)
     * @param id Invoice unique identifier expressed as UUID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Invoice retrieved. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invoice not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call billingInvoicesReadAsync(String namespace, String id, final ApiCallback<Invoice> _callback) throws ApiException {

        okhttp3.Call localVarCall = billingInvoicesReadValidateBeforeCall(namespace, id, _callback);
        Type localVarReturnType = new TypeToken<Invoice>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for billingPlansList
     * @param namespace User or team name. (required)
     * @param limit Limit when getting items. (optional)
     * @param offset Offset when getting items. (optional)
     * @param ordering Ordering when getting items. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Plan list. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call billingPlansListCall(String namespace, String limit, String offset, String ordering, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/{namespace}/billing/plans/"
            .replace("{" + "namespace" + "}", localVarApiClient.escapeString(namespace.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call billingPlansListValidateBeforeCall(String namespace, String limit, String offset, String ordering, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'namespace' is set
        if (namespace == null) {
            throw new ApiException("Missing the required parameter 'namespace' when calling billingPlansList(Async)");
        }

        return billingPlansListCall(namespace, limit, offset, ordering, _callback);

    }

    /**
     * Get billing plans
     * 
     * @param namespace User or team name. (required)
     * @param limit Limit when getting items. (optional)
     * @param offset Offset when getting items. (optional)
     * @param ordering Ordering when getting items. (optional)
     * @return List&lt;Plan&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Plan list. </td><td>  -  </td></tr>
     </table>
     */
    public List<Plan> billingPlansList(String namespace, String limit, String offset, String ordering) throws ApiException {
        ApiResponse<List<Plan>> localVarResp = billingPlansListWithHttpInfo(namespace, limit, offset, ordering);
        return localVarResp.getData();
    }

    /**
     * Get billing plans
     * 
     * @param namespace User or team name. (required)
     * @param limit Limit when getting items. (optional)
     * @param offset Offset when getting items. (optional)
     * @param ordering Ordering when getting items. (optional)
     * @return ApiResponse&lt;List&lt;Plan&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Plan list. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Plan>> billingPlansListWithHttpInfo(String namespace, String limit, String offset, String ordering) throws ApiException {
        okhttp3.Call localVarCall = billingPlansListValidateBeforeCall(namespace, limit, offset, ordering, null);
        Type localVarReturnType = new TypeToken<List<Plan>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get billing plans (asynchronously)
     * 
     * @param namespace User or team name. (required)
     * @param limit Limit when getting items. (optional)
     * @param offset Offset when getting items. (optional)
     * @param ordering Ordering when getting items. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Plan list. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call billingPlansListAsync(String namespace, String limit, String offset, String ordering, final ApiCallback<List<Plan>> _callback) throws ApiException {

        okhttp3.Call localVarCall = billingPlansListValidateBeforeCall(namespace, limit, offset, ordering, _callback);
        Type localVarReturnType = new TypeToken<List<Plan>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for billingPlansRead
     * @param namespace User or team name. (required)
     * @param id Plan unique identifier expressed as UUID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Plan retrieved </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Plan not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call billingPlansReadCall(String namespace, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/{namespace}/billing/plans/{id}/"
            .replace("{" + "namespace" + "}", localVarApiClient.escapeString(namespace.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call billingPlansReadValidateBeforeCall(String namespace, String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'namespace' is set
        if (namespace == null) {
            throw new ApiException("Missing the required parameter 'namespace' when calling billingPlansRead(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling billingPlansRead(Async)");
        }

        return billingPlansReadCall(namespace, id, _callback);

    }

    /**
     * Get a billing plan
     * 
     * @param namespace User or team name. (required)
     * @param id Plan unique identifier expressed as UUID. (required)
     * @return Plan
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Plan retrieved </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Plan not found </td><td>  -  </td></tr>
     </table>
     */
    public Plan billingPlansRead(String namespace, String id) throws ApiException {
        ApiResponse<Plan> localVarResp = billingPlansReadWithHttpInfo(namespace, id);
        return localVarResp.getData();
    }

    /**
     * Get a billing plan
     * 
     * @param namespace User or team name. (required)
     * @param id Plan unique identifier expressed as UUID. (required)
     * @return ApiResponse&lt;Plan&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Plan retrieved </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Plan not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Plan> billingPlansReadWithHttpInfo(String namespace, String id) throws ApiException {
        okhttp3.Call localVarCall = billingPlansReadValidateBeforeCall(namespace, id, null);
        Type localVarReturnType = new TypeToken<Plan>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a billing plan (asynchronously)
     * 
     * @param namespace User or team name. (required)
     * @param id Plan unique identifier expressed as UUID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Plan retrieved </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Plan not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call billingPlansReadAsync(String namespace, String id, final ApiCallback<Plan> _callback) throws ApiException {

        okhttp3.Call localVarCall = billingPlansReadValidateBeforeCall(namespace, id, _callback);
        Type localVarReturnType = new TypeToken<Plan>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for billingSubscriptionsCreate
     * @param namespace User or team name. (required)
     * @param subscriptionData  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Subscription created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call billingSubscriptionsCreateCall(String namespace, SubscriptionData subscriptionData, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = subscriptionData;

        // create path and map variables
        String localVarPath = "/v1/{namespace}/billing/subscriptions/"
            .replace("{" + "namespace" + "}", localVarApiClient.escapeString(namespace.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call billingSubscriptionsCreateValidateBeforeCall(String namespace, SubscriptionData subscriptionData, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'namespace' is set
        if (namespace == null) {
            throw new ApiException("Missing the required parameter 'namespace' when calling billingSubscriptionsCreate(Async)");
        }

        return billingSubscriptionsCreateCall(namespace, subscriptionData, _callback);

    }

    /**
     * Create a new subscription
     * 
     * @param namespace User or team name. (required)
     * @param subscriptionData  (optional)
     * @return Subscription
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Subscription created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied </td><td>  -  </td></tr>
     </table>
     */
    public Subscription billingSubscriptionsCreate(String namespace, SubscriptionData subscriptionData) throws ApiException {
        ApiResponse<Subscription> localVarResp = billingSubscriptionsCreateWithHttpInfo(namespace, subscriptionData);
        return localVarResp.getData();
    }

    /**
     * Create a new subscription
     * 
     * @param namespace User or team name. (required)
     * @param subscriptionData  (optional)
     * @return ApiResponse&lt;Subscription&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Subscription created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Subscription> billingSubscriptionsCreateWithHttpInfo(String namespace, SubscriptionData subscriptionData) throws ApiException {
        okhttp3.Call localVarCall = billingSubscriptionsCreateValidateBeforeCall(namespace, subscriptionData, null);
        Type localVarReturnType = new TypeToken<Subscription>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a new subscription (asynchronously)
     * 
     * @param namespace User or team name. (required)
     * @param subscriptionData  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Subscription created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call billingSubscriptionsCreateAsync(String namespace, SubscriptionData subscriptionData, final ApiCallback<Subscription> _callback) throws ApiException {

        okhttp3.Call localVarCall = billingSubscriptionsCreateValidateBeforeCall(namespace, subscriptionData, _callback);
        Type localVarReturnType = new TypeToken<Subscription>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for billingSubscriptionsDelete
     * @param namespace User or team name. (required)
     * @param id Subscription unique identifier expressed as UUID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Subscription deleted. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Subscription not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call billingSubscriptionsDeleteCall(String namespace, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/{namespace}/billing/subscriptions/{id}/"
            .replace("{" + "namespace" + "}", localVarApiClient.escapeString(namespace.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call billingSubscriptionsDeleteValidateBeforeCall(String namespace, String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'namespace' is set
        if (namespace == null) {
            throw new ApiException("Missing the required parameter 'namespace' when calling billingSubscriptionsDelete(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling billingSubscriptionsDelete(Async)");
        }

        return billingSubscriptionsDeleteCall(namespace, id, _callback);

    }

    /**
     * Delete a subscription
     * 
     * @param namespace User or team name. (required)
     * @param id Subscription unique identifier expressed as UUID. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Subscription deleted. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Subscription not found. </td><td>  -  </td></tr>
     </table>
     */
    public void billingSubscriptionsDelete(String namespace, String id) throws ApiException {
        billingSubscriptionsDeleteWithHttpInfo(namespace, id);
    }

    /**
     * Delete a subscription
     * 
     * @param namespace User or team name. (required)
     * @param id Subscription unique identifier expressed as UUID. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Subscription deleted. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Subscription not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> billingSubscriptionsDeleteWithHttpInfo(String namespace, String id) throws ApiException {
        okhttp3.Call localVarCall = billingSubscriptionsDeleteValidateBeforeCall(namespace, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a subscription (asynchronously)
     * 
     * @param namespace User or team name. (required)
     * @param id Subscription unique identifier expressed as UUID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Subscription deleted. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Subscription not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call billingSubscriptionsDeleteAsync(String namespace, String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = billingSubscriptionsDeleteValidateBeforeCall(namespace, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for billingSubscriptionsList
     * @param namespace User or team name. (required)
     * @param limit Limit when getting items. (optional)
     * @param offset Offset when getting items. (optional)
     * @param ordering Ordering when getting items. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Subscription list. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call billingSubscriptionsListCall(String namespace, String limit, String offset, String ordering, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/{namespace}/billing/subscriptions/"
            .replace("{" + "namespace" + "}", localVarApiClient.escapeString(namespace.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call billingSubscriptionsListValidateBeforeCall(String namespace, String limit, String offset, String ordering, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'namespace' is set
        if (namespace == null) {
            throw new ApiException("Missing the required parameter 'namespace' when calling billingSubscriptionsList(Async)");
        }

        return billingSubscriptionsListCall(namespace, limit, offset, ordering, _callback);

    }

    /**
     * Get active subscriptons
     * 
     * @param namespace User or team name. (required)
     * @param limit Limit when getting items. (optional)
     * @param offset Offset when getting items. (optional)
     * @param ordering Ordering when getting items. (optional)
     * @return List&lt;Subscription&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Subscription list. </td><td>  -  </td></tr>
     </table>
     */
    public List<Subscription> billingSubscriptionsList(String namespace, String limit, String offset, String ordering) throws ApiException {
        ApiResponse<List<Subscription>> localVarResp = billingSubscriptionsListWithHttpInfo(namespace, limit, offset, ordering);
        return localVarResp.getData();
    }

    /**
     * Get active subscriptons
     * 
     * @param namespace User or team name. (required)
     * @param limit Limit when getting items. (optional)
     * @param offset Offset when getting items. (optional)
     * @param ordering Ordering when getting items. (optional)
     * @return ApiResponse&lt;List&lt;Subscription&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Subscription list. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Subscription>> billingSubscriptionsListWithHttpInfo(String namespace, String limit, String offset, String ordering) throws ApiException {
        okhttp3.Call localVarCall = billingSubscriptionsListValidateBeforeCall(namespace, limit, offset, ordering, null);
        Type localVarReturnType = new TypeToken<List<Subscription>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get active subscriptons (asynchronously)
     * 
     * @param namespace User or team name. (required)
     * @param limit Limit when getting items. (optional)
     * @param offset Offset when getting items. (optional)
     * @param ordering Ordering when getting items. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Subscription list. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call billingSubscriptionsListAsync(String namespace, String limit, String offset, String ordering, final ApiCallback<List<Subscription>> _callback) throws ApiException {

        okhttp3.Call localVarCall = billingSubscriptionsListValidateBeforeCall(namespace, limit, offset, ordering, _callback);
        Type localVarReturnType = new TypeToken<List<Subscription>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for billingSubscriptionsRead
     * @param namespace User or team name. (required)
     * @param id Unique identifier expressed as UUID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Subscription retrieved. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Subscription not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call billingSubscriptionsReadCall(String namespace, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/{namespace}/billing/subscriptions/{id}/"
            .replace("{" + "namespace" + "}", localVarApiClient.escapeString(namespace.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call billingSubscriptionsReadValidateBeforeCall(String namespace, String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'namespace' is set
        if (namespace == null) {
            throw new ApiException("Missing the required parameter 'namespace' when calling billingSubscriptionsRead(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling billingSubscriptionsRead(Async)");
        }

        return billingSubscriptionsReadCall(namespace, id, _callback);

    }

    /**
     * Get a subscriptions
     * 
     * @param namespace User or team name. (required)
     * @param id Unique identifier expressed as UUID. (required)
     * @return Subscription
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Subscription retrieved. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Subscription not found. </td><td>  -  </td></tr>
     </table>
     */
    public Subscription billingSubscriptionsRead(String namespace, String id) throws ApiException {
        ApiResponse<Subscription> localVarResp = billingSubscriptionsReadWithHttpInfo(namespace, id);
        return localVarResp.getData();
    }

    /**
     * Get a subscriptions
     * 
     * @param namespace User or team name. (required)
     * @param id Unique identifier expressed as UUID. (required)
     * @return ApiResponse&lt;Subscription&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Subscription retrieved. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Subscription not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Subscription> billingSubscriptionsReadWithHttpInfo(String namespace, String id) throws ApiException {
        okhttp3.Call localVarCall = billingSubscriptionsReadValidateBeforeCall(namespace, id, null);
        Type localVarReturnType = new TypeToken<Subscription>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a subscriptions (asynchronously)
     * 
     * @param namespace User or team name. (required)
     * @param id Unique identifier expressed as UUID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Subscription retrieved. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Subscription not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call billingSubscriptionsReadAsync(String namespace, String id, final ApiCallback<Subscription> _callback) throws ApiException {

        okhttp3.Call localVarCall = billingSubscriptionsReadValidateBeforeCall(namespace, id, _callback);
        Type localVarReturnType = new TypeToken<Subscription>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for teamsBillingInvoiceItemsList_0
     * @param team Team unique identifier expressed as UUID or name. (required)
     * @param invoiceId Invoice id, expressed as UUID. (required)
     * @param limit Limit when getting items. (optional)
     * @param offset Offset when getting items. (optional)
     * @param ordering Ordering when getting items. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Team invoiceItem list. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call teamsBillingInvoiceItemsList_0Call(String team, String invoiceId, String limit, String offset, String ordering, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/teams/{team}/billing/invoices/{invoice_id}/invoice-items/"
            .replace("{" + "team" + "}", localVarApiClient.escapeString(team.toString()))
            .replace("{" + "invoice_id" + "}", localVarApiClient.escapeString(invoiceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call teamsBillingInvoiceItemsList_0ValidateBeforeCall(String team, String invoiceId, String limit, String offset, String ordering, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'team' is set
        if (team == null) {
            throw new ApiException("Missing the required parameter 'team' when calling teamsBillingInvoiceItemsList_0(Async)");
        }

        // verify the required parameter 'invoiceId' is set
        if (invoiceId == null) {
            throw new ApiException("Missing the required parameter 'invoiceId' when calling teamsBillingInvoiceItemsList_0(Async)");
        }

        return teamsBillingInvoiceItemsList_0Call(team, invoiceId, limit, offset, ordering, _callback);

    }

    /**
     * Get team invoice items for a given invoice.
     * 
     * @param team Team unique identifier expressed as UUID or name. (required)
     * @param invoiceId Invoice id, expressed as UUID. (required)
     * @param limit Limit when getting items. (optional)
     * @param offset Offset when getting items. (optional)
     * @param ordering Ordering when getting items. (optional)
     * @return List&lt;InvoiceItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Team invoiceItem list. </td><td>  -  </td></tr>
     </table>
     */
    public List<InvoiceItem> teamsBillingInvoiceItemsList_0(String team, String invoiceId, String limit, String offset, String ordering) throws ApiException {
        ApiResponse<List<InvoiceItem>> localVarResp = teamsBillingInvoiceItemsList_0WithHttpInfo(team, invoiceId, limit, offset, ordering);
        return localVarResp.getData();
    }

    /**
     * Get team invoice items for a given invoice.
     * 
     * @param team Team unique identifier expressed as UUID or name. (required)
     * @param invoiceId Invoice id, expressed as UUID. (required)
     * @param limit Limit when getting items. (optional)
     * @param offset Offset when getting items. (optional)
     * @param ordering Ordering when getting items. (optional)
     * @return ApiResponse&lt;List&lt;InvoiceItem&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Team invoiceItem list. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<InvoiceItem>> teamsBillingInvoiceItemsList_0WithHttpInfo(String team, String invoiceId, String limit, String offset, String ordering) throws ApiException {
        okhttp3.Call localVarCall = teamsBillingInvoiceItemsList_0ValidateBeforeCall(team, invoiceId, limit, offset, ordering, null);
        Type localVarReturnType = new TypeToken<List<InvoiceItem>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get team invoice items for a given invoice. (asynchronously)
     * 
     * @param team Team unique identifier expressed as UUID or name. (required)
     * @param invoiceId Invoice id, expressed as UUID. (required)
     * @param limit Limit when getting items. (optional)
     * @param offset Offset when getting items. (optional)
     * @param ordering Ordering when getting items. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Team invoiceItem list. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call teamsBillingInvoiceItemsList_0Async(String team, String invoiceId, String limit, String offset, String ordering, final ApiCallback<List<InvoiceItem>> _callback) throws ApiException {

        okhttp3.Call localVarCall = teamsBillingInvoiceItemsList_0ValidateBeforeCall(team, invoiceId, limit, offset, ordering, _callback);
        Type localVarReturnType = new TypeToken<List<InvoiceItem>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for teamsBillingInvoiceItemsRead_0
     * @param team Team unique identifier expressed as UUID or name. (required)
     * @param invoiceId Invoice id, expressed as UUID. (required)
     * @param id InvoiceItem id, expressed as UUID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Team invoiceItem retrieved. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> InvoiceItem not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call teamsBillingInvoiceItemsRead_0Call(String team, String invoiceId, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/teams/{team}/billing/invoices/{invoice_id}/invoice-items/{id}"
            .replace("{" + "team" + "}", localVarApiClient.escapeString(team.toString()))
            .replace("{" + "invoice_id" + "}", localVarApiClient.escapeString(invoiceId.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call teamsBillingInvoiceItemsRead_0ValidateBeforeCall(String team, String invoiceId, String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'team' is set
        if (team == null) {
            throw new ApiException("Missing the required parameter 'team' when calling teamsBillingInvoiceItemsRead_0(Async)");
        }

        // verify the required parameter 'invoiceId' is set
        if (invoiceId == null) {
            throw new ApiException("Missing the required parameter 'invoiceId' when calling teamsBillingInvoiceItemsRead_0(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling teamsBillingInvoiceItemsRead_0(Async)");
        }

        return teamsBillingInvoiceItemsRead_0Call(team, invoiceId, id, _callback);

    }

    /**
     * Get a specific team InvoiceItem.
     * 
     * @param team Team unique identifier expressed as UUID or name. (required)
     * @param invoiceId Invoice id, expressed as UUID. (required)
     * @param id InvoiceItem id, expressed as UUID. (required)
     * @return InvoiceItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Team invoiceItem retrieved. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> InvoiceItem not found. </td><td>  -  </td></tr>
     </table>
     */
    public InvoiceItem teamsBillingInvoiceItemsRead_0(String team, String invoiceId, String id) throws ApiException {
        ApiResponse<InvoiceItem> localVarResp = teamsBillingInvoiceItemsRead_0WithHttpInfo(team, invoiceId, id);
        return localVarResp.getData();
    }

    /**
     * Get a specific team InvoiceItem.
     * 
     * @param team Team unique identifier expressed as UUID or name. (required)
     * @param invoiceId Invoice id, expressed as UUID. (required)
     * @param id InvoiceItem id, expressed as UUID. (required)
     * @return ApiResponse&lt;InvoiceItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Team invoiceItem retrieved. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> InvoiceItem not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InvoiceItem> teamsBillingInvoiceItemsRead_0WithHttpInfo(String team, String invoiceId, String id) throws ApiException {
        okhttp3.Call localVarCall = teamsBillingInvoiceItemsRead_0ValidateBeforeCall(team, invoiceId, id, null);
        Type localVarReturnType = new TypeToken<InvoiceItem>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a specific team InvoiceItem. (asynchronously)
     * 
     * @param team Team unique identifier expressed as UUID or name. (required)
     * @param invoiceId Invoice id, expressed as UUID. (required)
     * @param id InvoiceItem id, expressed as UUID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Team invoiceItem retrieved. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> InvoiceItem not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call teamsBillingInvoiceItemsRead_0Async(String team, String invoiceId, String id, final ApiCallback<InvoiceItem> _callback) throws ApiException {

        okhttp3.Call localVarCall = teamsBillingInvoiceItemsRead_0ValidateBeforeCall(team, invoiceId, id, _callback);
        Type localVarReturnType = new TypeToken<InvoiceItem>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for teamsBillingInvoicesList_0
     * @param team Team unique identifier expressed as UUID or name. (required)
     * @param limit Limit when getting items. (optional)
     * @param offset Offset when getting items. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Invoice list. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call teamsBillingInvoicesList_0Call(String team, String limit, String offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/teams/{team}/billing/invoices/"
            .replace("{" + "team" + "}", localVarApiClient.escapeString(team.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call teamsBillingInvoicesList_0ValidateBeforeCall(String team, String limit, String offset, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'team' is set
        if (team == null) {
            throw new ApiException("Missing the required parameter 'team' when calling teamsBillingInvoicesList_0(Async)");
        }

        return teamsBillingInvoicesList_0Call(team, limit, offset, _callback);

    }

    /**
     * Get team invoices
     * 
     * @param team Team unique identifier expressed as UUID or name. (required)
     * @param limit Limit when getting items. (optional)
     * @param offset Offset when getting items. (optional)
     * @return List&lt;Invoice&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Invoice list. </td><td>  -  </td></tr>
     </table>
     */
    public List<Invoice> teamsBillingInvoicesList_0(String team, String limit, String offset) throws ApiException {
        ApiResponse<List<Invoice>> localVarResp = teamsBillingInvoicesList_0WithHttpInfo(team, limit, offset);
        return localVarResp.getData();
    }

    /**
     * Get team invoices
     * 
     * @param team Team unique identifier expressed as UUID or name. (required)
     * @param limit Limit when getting items. (optional)
     * @param offset Offset when getting items. (optional)
     * @return ApiResponse&lt;List&lt;Invoice&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Invoice list. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Invoice>> teamsBillingInvoicesList_0WithHttpInfo(String team, String limit, String offset) throws ApiException {
        okhttp3.Call localVarCall = teamsBillingInvoicesList_0ValidateBeforeCall(team, limit, offset, null);
        Type localVarReturnType = new TypeToken<List<Invoice>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get team invoices (asynchronously)
     * 
     * @param team Team unique identifier expressed as UUID or name. (required)
     * @param limit Limit when getting items. (optional)
     * @param offset Offset when getting items. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Invoice list. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call teamsBillingInvoicesList_0Async(String team, String limit, String offset, final ApiCallback<List<Invoice>> _callback) throws ApiException {

        okhttp3.Call localVarCall = teamsBillingInvoicesList_0ValidateBeforeCall(team, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<List<Invoice>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for teamsBillingInvoicesRead_0
     * @param team Team unique identifier expressed as UUID or name. (required)
     * @param id Invoice unique identifier expressed as UUID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Team invoice retrieved. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Team invoice not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call teamsBillingInvoicesRead_0Call(String team, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/teams/{team}/billing/invoices/{id}/"
            .replace("{" + "team" + "}", localVarApiClient.escapeString(team.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call teamsBillingInvoicesRead_0ValidateBeforeCall(String team, String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'team' is set
        if (team == null) {
            throw new ApiException("Missing the required parameter 'team' when calling teamsBillingInvoicesRead_0(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling teamsBillingInvoicesRead_0(Async)");
        }

        return teamsBillingInvoicesRead_0Call(team, id, _callback);

    }

    /**
     * Get an invoice
     * 
     * @param team Team unique identifier expressed as UUID or name. (required)
     * @param id Invoice unique identifier expressed as UUID. (required)
     * @return Invoice
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Team invoice retrieved. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Team invoice not found. </td><td>  -  </td></tr>
     </table>
     */
    public Invoice teamsBillingInvoicesRead_0(String team, String id) throws ApiException {
        ApiResponse<Invoice> localVarResp = teamsBillingInvoicesRead_0WithHttpInfo(team, id);
        return localVarResp.getData();
    }

    /**
     * Get an invoice
     * 
     * @param team Team unique identifier expressed as UUID or name. (required)
     * @param id Invoice unique identifier expressed as UUID. (required)
     * @return ApiResponse&lt;Invoice&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Team invoice retrieved. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Team invoice not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Invoice> teamsBillingInvoicesRead_0WithHttpInfo(String team, String id) throws ApiException {
        okhttp3.Call localVarCall = teamsBillingInvoicesRead_0ValidateBeforeCall(team, id, null);
        Type localVarReturnType = new TypeToken<Invoice>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get an invoice (asynchronously)
     * 
     * @param team Team unique identifier expressed as UUID or name. (required)
     * @param id Invoice unique identifier expressed as UUID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Team invoice retrieved. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Team invoice not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call teamsBillingInvoicesRead_0Async(String team, String id, final ApiCallback<Invoice> _callback) throws ApiException {

        okhttp3.Call localVarCall = teamsBillingInvoicesRead_0ValidateBeforeCall(team, id, _callback);
        Type localVarReturnType = new TypeToken<Invoice>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for teamsBillingSubscriptionsCreate_0
     * @param team Team unique identifier expressed as UUID or name. (required)
     * @param subscriptionData  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Team subscription created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call teamsBillingSubscriptionsCreate_0Call(String team, SubscriptionData subscriptionData, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = subscriptionData;

        // create path and map variables
        String localVarPath = "/v1/teams/{team}/billing/subscriptions/"
            .replace("{" + "team" + "}", localVarApiClient.escapeString(team.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call teamsBillingSubscriptionsCreate_0ValidateBeforeCall(String team, SubscriptionData subscriptionData, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'team' is set
        if (team == null) {
            throw new ApiException("Missing the required parameter 'team' when calling teamsBillingSubscriptionsCreate_0(Async)");
        }

        return teamsBillingSubscriptionsCreate_0Call(team, subscriptionData, _callback);

    }

    /**
     * Create a new team subscription
     * 
     * @param team Team unique identifier expressed as UUID or name. (required)
     * @param subscriptionData  (optional)
     * @return Subscription
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Team subscription created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied </td><td>  -  </td></tr>
     </table>
     */
    public Subscription teamsBillingSubscriptionsCreate_0(String team, SubscriptionData subscriptionData) throws ApiException {
        ApiResponse<Subscription> localVarResp = teamsBillingSubscriptionsCreate_0WithHttpInfo(team, subscriptionData);
        return localVarResp.getData();
    }

    /**
     * Create a new team subscription
     * 
     * @param team Team unique identifier expressed as UUID or name. (required)
     * @param subscriptionData  (optional)
     * @return ApiResponse&lt;Subscription&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Team subscription created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Subscription> teamsBillingSubscriptionsCreate_0WithHttpInfo(String team, SubscriptionData subscriptionData) throws ApiException {
        okhttp3.Call localVarCall = teamsBillingSubscriptionsCreate_0ValidateBeforeCall(team, subscriptionData, null);
        Type localVarReturnType = new TypeToken<Subscription>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a new team subscription (asynchronously)
     * 
     * @param team Team unique identifier expressed as UUID or name. (required)
     * @param subscriptionData  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Team subscription created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call teamsBillingSubscriptionsCreate_0Async(String team, SubscriptionData subscriptionData, final ApiCallback<Subscription> _callback) throws ApiException {

        okhttp3.Call localVarCall = teamsBillingSubscriptionsCreate_0ValidateBeforeCall(team, subscriptionData, _callback);
        Type localVarReturnType = new TypeToken<Subscription>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for teamsBillingSubscriptionsDelete_0
     * @param team Team unique identifier expressed as UUID or name. (required)
     * @param id Subscription unique identifier expressed as UUID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Subscription deleted. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Subscription not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call teamsBillingSubscriptionsDelete_0Call(String team, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/teams/{team}/billing/subscriptions/{id}/"
            .replace("{" + "team" + "}", localVarApiClient.escapeString(team.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call teamsBillingSubscriptionsDelete_0ValidateBeforeCall(String team, String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'team' is set
        if (team == null) {
            throw new ApiException("Missing the required parameter 'team' when calling teamsBillingSubscriptionsDelete_0(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling teamsBillingSubscriptionsDelete_0(Async)");
        }

        return teamsBillingSubscriptionsDelete_0Call(team, id, _callback);

    }

    /**
     * Delete a subscription
     * 
     * @param team Team unique identifier expressed as UUID or name. (required)
     * @param id Subscription unique identifier expressed as UUID. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Subscription deleted. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Subscription not found. </td><td>  -  </td></tr>
     </table>
     */
    public void teamsBillingSubscriptionsDelete_0(String team, String id) throws ApiException {
        teamsBillingSubscriptionsDelete_0WithHttpInfo(team, id);
    }

    /**
     * Delete a subscription
     * 
     * @param team Team unique identifier expressed as UUID or name. (required)
     * @param id Subscription unique identifier expressed as UUID. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Subscription deleted. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Subscription not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> teamsBillingSubscriptionsDelete_0WithHttpInfo(String team, String id) throws ApiException {
        okhttp3.Call localVarCall = teamsBillingSubscriptionsDelete_0ValidateBeforeCall(team, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a subscription (asynchronously)
     * 
     * @param team Team unique identifier expressed as UUID or name. (required)
     * @param id Subscription unique identifier expressed as UUID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Subscription deleted. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Subscription not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call teamsBillingSubscriptionsDelete_0Async(String team, String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = teamsBillingSubscriptionsDelete_0ValidateBeforeCall(team, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for teamsBillingSubscriptionsList_0
     * @param team Team unique identifier expressed as UUID or name. (required)
     * @param limit Limit when getting items. (optional)
     * @param offset Offset when getting items. (optional)
     * @param ordering Ordering when getting items. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Teams subscription list. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call teamsBillingSubscriptionsList_0Call(String team, String limit, String offset, String ordering, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/teams/{team}/billing/subscriptions/"
            .replace("{" + "team" + "}", localVarApiClient.escapeString(team.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call teamsBillingSubscriptionsList_0ValidateBeforeCall(String team, String limit, String offset, String ordering, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'team' is set
        if (team == null) {
            throw new ApiException("Missing the required parameter 'team' when calling teamsBillingSubscriptionsList_0(Async)");
        }

        return teamsBillingSubscriptionsList_0Call(team, limit, offset, ordering, _callback);

    }

    /**
     * Get active team subscriptons
     * 
     * @param team Team unique identifier expressed as UUID or name. (required)
     * @param limit Limit when getting items. (optional)
     * @param offset Offset when getting items. (optional)
     * @param ordering Ordering when getting items. (optional)
     * @return List&lt;Subscription&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Teams subscription list. </td><td>  -  </td></tr>
     </table>
     */
    public List<Subscription> teamsBillingSubscriptionsList_0(String team, String limit, String offset, String ordering) throws ApiException {
        ApiResponse<List<Subscription>> localVarResp = teamsBillingSubscriptionsList_0WithHttpInfo(team, limit, offset, ordering);
        return localVarResp.getData();
    }

    /**
     * Get active team subscriptons
     * 
     * @param team Team unique identifier expressed as UUID or name. (required)
     * @param limit Limit when getting items. (optional)
     * @param offset Offset when getting items. (optional)
     * @param ordering Ordering when getting items. (optional)
     * @return ApiResponse&lt;List&lt;Subscription&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Teams subscription list. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Subscription>> teamsBillingSubscriptionsList_0WithHttpInfo(String team, String limit, String offset, String ordering) throws ApiException {
        okhttp3.Call localVarCall = teamsBillingSubscriptionsList_0ValidateBeforeCall(team, limit, offset, ordering, null);
        Type localVarReturnType = new TypeToken<List<Subscription>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get active team subscriptons (asynchronously)
     * 
     * @param team Team unique identifier expressed as UUID or name. (required)
     * @param limit Limit when getting items. (optional)
     * @param offset Offset when getting items. (optional)
     * @param ordering Ordering when getting items. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Teams subscription list. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call teamsBillingSubscriptionsList_0Async(String team, String limit, String offset, String ordering, final ApiCallback<List<Subscription>> _callback) throws ApiException {

        okhttp3.Call localVarCall = teamsBillingSubscriptionsList_0ValidateBeforeCall(team, limit, offset, ordering, _callback);
        Type localVarReturnType = new TypeToken<List<Subscription>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for teamsBillingSubscriptionsRead_0
     * @param team Team unique identifier expressed as UUID or name. (required)
     * @param id Unique identifier expressed as UUID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Team subscription retrieved. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Subscription not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call teamsBillingSubscriptionsRead_0Call(String team, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/teams/{team}/billing/subscriptions/{id}/"
            .replace("{" + "team" + "}", localVarApiClient.escapeString(team.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call teamsBillingSubscriptionsRead_0ValidateBeforeCall(String team, String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'team' is set
        if (team == null) {
            throw new ApiException("Missing the required parameter 'team' when calling teamsBillingSubscriptionsRead_0(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling teamsBillingSubscriptionsRead_0(Async)");
        }

        return teamsBillingSubscriptionsRead_0Call(team, id, _callback);

    }

    /**
     * Get team subscriptions
     * 
     * @param team Team unique identifier expressed as UUID or name. (required)
     * @param id Unique identifier expressed as UUID. (required)
     * @return Subscription
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Team subscription retrieved. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Subscription not found. </td><td>  -  </td></tr>
     </table>
     */
    public Subscription teamsBillingSubscriptionsRead_0(String team, String id) throws ApiException {
        ApiResponse<Subscription> localVarResp = teamsBillingSubscriptionsRead_0WithHttpInfo(team, id);
        return localVarResp.getData();
    }

    /**
     * Get team subscriptions
     * 
     * @param team Team unique identifier expressed as UUID or name. (required)
     * @param id Unique identifier expressed as UUID. (required)
     * @return ApiResponse&lt;Subscription&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Team subscription retrieved. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Subscription not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Subscription> teamsBillingSubscriptionsRead_0WithHttpInfo(String team, String id) throws ApiException {
        okhttp3.Call localVarCall = teamsBillingSubscriptionsRead_0ValidateBeforeCall(team, id, null);
        Type localVarReturnType = new TypeToken<Subscription>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get team subscriptions (asynchronously)
     * 
     * @param team Team unique identifier expressed as UUID or name. (required)
     * @param id Unique identifier expressed as UUID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Team subscription retrieved. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Subscription not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call teamsBillingSubscriptionsRead_0Async(String team, String id, final ApiCallback<Subscription> _callback) throws ApiException {

        okhttp3.Call localVarCall = teamsBillingSubscriptionsRead_0ValidateBeforeCall(team, id, _callback);
        Type localVarReturnType = new TypeToken<Subscription>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
