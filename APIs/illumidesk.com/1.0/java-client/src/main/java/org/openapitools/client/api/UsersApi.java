/*
 * IllumiDesk
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Email;
import org.openapitools.client.model.EmailData;
import org.openapitools.client.model.EmailError;
import org.openapitools.client.model.NotFound;
import org.openapitools.client.model.User;
import org.openapitools.client.model.UserData;
import org.openapitools.client.model.UserError;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class UsersApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public UsersApi() {
        this(Configuration.getDefaultApiClient());
    }

    public UsersApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for me
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User information retrieved. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call meCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/me";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call meValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return meCall(_callback);

    }

    /**
     * A convenience endpoint that is equivalent to GET /v1/users/profiles/&lt;my user id&gt;/
     * 
     * @return User
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User information retrieved. </td><td>  -  </td></tr>
     </table>
     */
    public User me() throws ApiException {
        ApiResponse<User> localVarResp = meWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * A convenience endpoint that is equivalent to GET /v1/users/profiles/&lt;my user id&gt;/
     * 
     * @return ApiResponse&lt;User&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User information retrieved. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<User> meWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = meValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * A convenience endpoint that is equivalent to GET /v1/users/profiles/&lt;my user id&gt;/ (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User information retrieved. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call meAsync(final ApiCallback<User> _callback) throws ApiException {

        okhttp3.Call localVarCall = meValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for userAvatarDelete
     * @param user User unique identifier expressed as UUID or username. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Avatar deleted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Avatar not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userAvatarDeleteCall(String user, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/users/{user}/avatar/"
            .replace("{" + "user" + "}", localVarApiClient.escapeString(user.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call userAvatarDeleteValidateBeforeCall(String user, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'user' is set
        if (user == null) {
            throw new ApiException("Missing the required parameter 'user' when calling userAvatarDelete(Async)");
        }

        return userAvatarDeleteCall(user, _callback);

    }

    /**
     * Delete avatar
     * 
     * @param user User unique identifier expressed as UUID or username. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Avatar deleted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Avatar not found </td><td>  -  </td></tr>
     </table>
     */
    public void userAvatarDelete(String user) throws ApiException {
        userAvatarDeleteWithHttpInfo(user);
    }

    /**
     * Delete avatar
     * 
     * @param user User unique identifier expressed as UUID or username. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Avatar deleted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Avatar not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> userAvatarDeleteWithHttpInfo(String user) throws ApiException {
        okhttp3.Call localVarCall = userAvatarDeleteValidateBeforeCall(user, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete avatar (asynchronously)
     * 
     * @param user User unique identifier expressed as UUID or username. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Avatar deleted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Avatar not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userAvatarDeleteAsync(String user, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = userAvatarDeleteValidateBeforeCall(user, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for userAvatarGet
     * @param user User unique identifier expressed as UUIDor username. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User avatar </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userAvatarGetCall(String user, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/users/{user}/avatar/"
            .replace("{" + "user" + "}", localVarApiClient.escapeString(user.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call userAvatarGetValidateBeforeCall(String user, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'user' is set
        if (user == null) {
            throw new ApiException("Missing the required parameter 'user' when calling userAvatarGet(Async)");
        }

        return userAvatarGetCall(user, _callback);

    }

    /**
     * Retrieve user&#39;s avatar
     * 
     * @param user User unique identifier expressed as UUIDor username. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User avatar </td><td>  -  </td></tr>
     </table>
     */
    public void userAvatarGet(String user) throws ApiException {
        userAvatarGetWithHttpInfo(user);
    }

    /**
     * Retrieve user&#39;s avatar
     * 
     * @param user User unique identifier expressed as UUIDor username. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User avatar </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> userAvatarGetWithHttpInfo(String user) throws ApiException {
        okhttp3.Call localVarCall = userAvatarGetValidateBeforeCall(user, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retrieve user&#39;s avatar (asynchronously)
     * 
     * @param user User unique identifier expressed as UUIDor username. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User avatar </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userAvatarGetAsync(String user, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = userAvatarGetValidateBeforeCall(user, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for userAvatarSet
     * @param user User unique identifier expressed as UUID or username. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Added user avatar </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userAvatarSetCall(String user, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/users/{user}/avatar/"
            .replace("{" + "user" + "}", localVarApiClient.escapeString(user.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call userAvatarSetValidateBeforeCall(String user, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'user' is set
        if (user == null) {
            throw new ApiException("Missing the required parameter 'user' when calling userAvatarSet(Async)");
        }

        return userAvatarSetCall(user, _callback);

    }

    /**
     * Add user avatar
     * 
     * @param user User unique identifier expressed as UUID or username. (required)
     * @return User
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Added user avatar </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied </td><td>  -  </td></tr>
     </table>
     */
    public User userAvatarSet(String user) throws ApiException {
        ApiResponse<User> localVarResp = userAvatarSetWithHttpInfo(user);
        return localVarResp.getData();
    }

    /**
     * Add user avatar
     * 
     * @param user User unique identifier expressed as UUID or username. (required)
     * @return ApiResponse&lt;User&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Added user avatar </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<User> userAvatarSetWithHttpInfo(String user) throws ApiException {
        okhttp3.Call localVarCall = userAvatarSetValidateBeforeCall(user, null);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add user avatar (asynchronously)
     * 
     * @param user User unique identifier expressed as UUID or username. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Added user avatar </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userAvatarSetAsync(String user, final ApiCallback<User> _callback) throws ApiException {

        okhttp3.Call localVarCall = userAvatarSetValidateBeforeCall(user, _callback);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for userAvatarUpdate
     * @param user User unique identifier expressed as UUID or username. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Avatar updated. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Avatar not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userAvatarUpdateCall(String user, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/users/{user}/avatar/"
            .replace("{" + "user" + "}", localVarApiClient.escapeString(user.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call userAvatarUpdateValidateBeforeCall(String user, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'user' is set
        if (user == null) {
            throw new ApiException("Missing the required parameter 'user' when calling userAvatarUpdate(Async)");
        }

        return userAvatarUpdateCall(user, _callback);

    }

    /**
     * Update a project file
     * 
     * @param user User unique identifier expressed as UUID or username. (required)
     * @return User
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Avatar updated. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Avatar not found. </td><td>  -  </td></tr>
     </table>
     */
    public User userAvatarUpdate(String user) throws ApiException {
        ApiResponse<User> localVarResp = userAvatarUpdateWithHttpInfo(user);
        return localVarResp.getData();
    }

    /**
     * Update a project file
     * 
     * @param user User unique identifier expressed as UUID or username. (required)
     * @return ApiResponse&lt;User&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Avatar updated. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Avatar not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<User> userAvatarUpdateWithHttpInfo(String user) throws ApiException {
        okhttp3.Call localVarCall = userAvatarUpdateValidateBeforeCall(user, null);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a project file (asynchronously)
     * 
     * @param user User unique identifier expressed as UUID or username. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Avatar updated. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Avatar not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userAvatarUpdateAsync(String user, final ApiCallback<User> _callback) throws ApiException {

        okhttp3.Call localVarCall = userAvatarUpdateValidateBeforeCall(user, _callback);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for usersApiKeyList
     * @param user User unique identifier expressed as UUID or username. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Api Key </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersApiKeyListCall(String user, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/users/{user}/api-key/"
            .replace("{" + "user" + "}", localVarApiClient.escapeString(user.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usersApiKeyListValidateBeforeCall(String user, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'user' is set
        if (user == null) {
            throw new ApiException("Missing the required parameter 'user' when calling usersApiKeyList(Async)");
        }

        return usersApiKeyListCall(user, _callback);

    }

    /**
     * Retrieve account&#39;s API key
     * 
     * @param user User unique identifier expressed as UUID or username. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Api Key </td><td>  -  </td></tr>
     </table>
     */
    public void usersApiKeyList(String user) throws ApiException {
        usersApiKeyListWithHttpInfo(user);
    }

    /**
     * Retrieve account&#39;s API key
     * 
     * @param user User unique identifier expressed as UUID or username. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Api Key </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> usersApiKeyListWithHttpInfo(String user) throws ApiException {
        okhttp3.Call localVarCall = usersApiKeyListValidateBeforeCall(user, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retrieve account&#39;s API key (asynchronously)
     * 
     * @param user User unique identifier expressed as UUID or username. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Api Key </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersApiKeyListAsync(String user, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = usersApiKeyListValidateBeforeCall(user, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for usersCreate
     * @param userData  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> User created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersCreateCall(UserData userData, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = userData;

        // create path and map variables
        String localVarPath = "/v1/users/profiles/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usersCreateValidateBeforeCall(UserData userData, final ApiCallback _callback) throws ApiException {
        return usersCreateCall(userData, _callback);

    }

    /**
     * Create new user
     * Only admin users can create new users. New users have active status by default.
     * @param userData  (optional)
     * @return User
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> User created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied </td><td>  -  </td></tr>
     </table>
     */
    public User usersCreate(UserData userData) throws ApiException {
        ApiResponse<User> localVarResp = usersCreateWithHttpInfo(userData);
        return localVarResp.getData();
    }

    /**
     * Create new user
     * Only admin users can create new users. New users have active status by default.
     * @param userData  (optional)
     * @return ApiResponse&lt;User&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> User created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<User> usersCreateWithHttpInfo(UserData userData) throws ApiException {
        okhttp3.Call localVarCall = usersCreateValidateBeforeCall(userData, null);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create new user (asynchronously)
     * Only admin users can create new users. New users have active status by default.
     * @param userData  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> User created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersCreateAsync(UserData userData, final ApiCallback<User> _callback) throws ApiException {

        okhttp3.Call localVarCall = usersCreateValidateBeforeCall(userData, _callback);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for usersDelete
     * @param user User identifier expressed as UUID or username. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> User deleted. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersDeleteCall(String user, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/users/profiles/{user}/"
            .replace("{" + "user" + "}", localVarApiClient.escapeString(user.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usersDeleteValidateBeforeCall(String user, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'user' is set
        if (user == null) {
            throw new ApiException("Missing the required parameter 'user' when calling usersDelete(Async)");
        }

        return usersDeleteCall(user, _callback);

    }

    /**
     * Delete a user
     * 
     * @param user User identifier expressed as UUID or username. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> User deleted. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found </td><td>  -  </td></tr>
     </table>
     */
    public void usersDelete(String user) throws ApiException {
        usersDeleteWithHttpInfo(user);
    }

    /**
     * Delete a user
     * 
     * @param user User identifier expressed as UUID or username. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> User deleted. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> usersDeleteWithHttpInfo(String user) throws ApiException {
        okhttp3.Call localVarCall = usersDeleteValidateBeforeCall(user, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a user (asynchronously)
     * 
     * @param user User identifier expressed as UUID or username. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> User deleted. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersDeleteAsync(String user, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = usersDeleteValidateBeforeCall(user, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for usersEmailsCreate
     * @param user User unique identifier expressed as UUID or username. (required)
     * @param emailData  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Email created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersEmailsCreateCall(String user, EmailData emailData, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = emailData;

        // create path and map variables
        String localVarPath = "/v1/users/{user}/emails/"
            .replace("{" + "user" + "}", localVarApiClient.escapeString(user.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usersEmailsCreateValidateBeforeCall(String user, EmailData emailData, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'user' is set
        if (user == null) {
            throw new ApiException("Missing the required parameter 'user' when calling usersEmailsCreate(Async)");
        }

        return usersEmailsCreateCall(user, emailData, _callback);

    }

    /**
     * Create an email address
     * 
     * @param user User unique identifier expressed as UUID or username. (required)
     * @param emailData  (optional)
     * @return Email
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Email created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied </td><td>  -  </td></tr>
     </table>
     */
    public Email usersEmailsCreate(String user, EmailData emailData) throws ApiException {
        ApiResponse<Email> localVarResp = usersEmailsCreateWithHttpInfo(user, emailData);
        return localVarResp.getData();
    }

    /**
     * Create an email address
     * 
     * @param user User unique identifier expressed as UUID or username. (required)
     * @param emailData  (optional)
     * @return ApiResponse&lt;Email&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Email created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Email> usersEmailsCreateWithHttpInfo(String user, EmailData emailData) throws ApiException {
        okhttp3.Call localVarCall = usersEmailsCreateValidateBeforeCall(user, emailData, null);
        Type localVarReturnType = new TypeToken<Email>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create an email address (asynchronously)
     * 
     * @param user User unique identifier expressed as UUID or username. (required)
     * @param emailData  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Email created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersEmailsCreateAsync(String user, EmailData emailData, final ApiCallback<Email> _callback) throws ApiException {

        okhttp3.Call localVarCall = usersEmailsCreateValidateBeforeCall(user, emailData, _callback);
        Type localVarReturnType = new TypeToken<Email>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for usersEmailsDelete
     * @param emailId Email unique identifier expressed as UUID. (required)
     * @param user User unique identifier expressed as UUID or username. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Email deleted. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Email not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersEmailsDeleteCall(String emailId, String user, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/users/{user}/emails/{email_id}/"
            .replace("{" + "email_id" + "}", localVarApiClient.escapeString(emailId.toString()))
            .replace("{" + "user" + "}", localVarApiClient.escapeString(user.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usersEmailsDeleteValidateBeforeCall(String emailId, String user, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'emailId' is set
        if (emailId == null) {
            throw new ApiException("Missing the required parameter 'emailId' when calling usersEmailsDelete(Async)");
        }

        // verify the required parameter 'user' is set
        if (user == null) {
            throw new ApiException("Missing the required parameter 'user' when calling usersEmailsDelete(Async)");
        }

        return usersEmailsDeleteCall(emailId, user, _callback);

    }

    /**
     * Delete an email address
     * 
     * @param emailId Email unique identifier expressed as UUID. (required)
     * @param user User unique identifier expressed as UUID or username. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Email deleted. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Email not found. </td><td>  -  </td></tr>
     </table>
     */
    public void usersEmailsDelete(String emailId, String user) throws ApiException {
        usersEmailsDeleteWithHttpInfo(emailId, user);
    }

    /**
     * Delete an email address
     * 
     * @param emailId Email unique identifier expressed as UUID. (required)
     * @param user User unique identifier expressed as UUID or username. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Email deleted. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Email not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> usersEmailsDeleteWithHttpInfo(String emailId, String user) throws ApiException {
        okhttp3.Call localVarCall = usersEmailsDeleteValidateBeforeCall(emailId, user, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete an email address (asynchronously)
     * 
     * @param emailId Email unique identifier expressed as UUID. (required)
     * @param user User unique identifier expressed as UUID or username. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Email deleted. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Email not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersEmailsDeleteAsync(String emailId, String user, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = usersEmailsDeleteValidateBeforeCall(emailId, user, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for usersEmailsList
     * @param user User unique identifier as expressed as UUID or username. (required)
     * @param limit Limite when getting email list. (optional)
     * @param offset Offset when getting email list. (optional)
     * @param ordering Ordering when getting email list. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Email list </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersEmailsListCall(String user, String limit, String offset, String ordering, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/users/{user}/emails/"
            .replace("{" + "user" + "}", localVarApiClient.escapeString(user.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usersEmailsListValidateBeforeCall(String user, String limit, String offset, String ordering, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'user' is set
        if (user == null) {
            throw new ApiException("Missing the required parameter 'user' when calling usersEmailsList(Async)");
        }

        return usersEmailsListCall(user, limit, offset, ordering, _callback);

    }

    /**
     * Retrieve account email addresses
     * 
     * @param user User unique identifier as expressed as UUID or username. (required)
     * @param limit Limite when getting email list. (optional)
     * @param offset Offset when getting email list. (optional)
     * @param ordering Ordering when getting email list. (optional)
     * @return List&lt;Email&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Email list </td><td>  -  </td></tr>
     </table>
     */
    public List<Email> usersEmailsList(String user, String limit, String offset, String ordering) throws ApiException {
        ApiResponse<List<Email>> localVarResp = usersEmailsListWithHttpInfo(user, limit, offset, ordering);
        return localVarResp.getData();
    }

    /**
     * Retrieve account email addresses
     * 
     * @param user User unique identifier as expressed as UUID or username. (required)
     * @param limit Limite when getting email list. (optional)
     * @param offset Offset when getting email list. (optional)
     * @param ordering Ordering when getting email list. (optional)
     * @return ApiResponse&lt;List&lt;Email&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Email list </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Email>> usersEmailsListWithHttpInfo(String user, String limit, String offset, String ordering) throws ApiException {
        okhttp3.Call localVarCall = usersEmailsListValidateBeforeCall(user, limit, offset, ordering, null);
        Type localVarReturnType = new TypeToken<List<Email>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve account email addresses (asynchronously)
     * 
     * @param user User unique identifier as expressed as UUID or username. (required)
     * @param limit Limite when getting email list. (optional)
     * @param offset Offset when getting email list. (optional)
     * @param ordering Ordering when getting email list. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Email list </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersEmailsListAsync(String user, String limit, String offset, String ordering, final ApiCallback<List<Email>> _callback) throws ApiException {

        okhttp3.Call localVarCall = usersEmailsListValidateBeforeCall(user, limit, offset, ordering, _callback);
        Type localVarReturnType = new TypeToken<List<Email>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for usersEmailsRead
     * @param emailId Email unique identifier expressed as UUID. (required)
     * @param user User unique identifier expressed as UUID or username. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Email retrieved </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Email not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersEmailsReadCall(String emailId, String user, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/users/{user}/emails/{email_id}/"
            .replace("{" + "email_id" + "}", localVarApiClient.escapeString(emailId.toString()))
            .replace("{" + "user" + "}", localVarApiClient.escapeString(user.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usersEmailsReadValidateBeforeCall(String emailId, String user, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'emailId' is set
        if (emailId == null) {
            throw new ApiException("Missing the required parameter 'emailId' when calling usersEmailsRead(Async)");
        }

        // verify the required parameter 'user' is set
        if (user == null) {
            throw new ApiException("Missing the required parameter 'user' when calling usersEmailsRead(Async)");
        }

        return usersEmailsReadCall(emailId, user, _callback);

    }

    /**
     * Retrieve a user&#39;s email addresses
     * 
     * @param emailId Email unique identifier expressed as UUID. (required)
     * @param user User unique identifier expressed as UUID or username. (required)
     * @return Email
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Email retrieved </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Email not found </td><td>  -  </td></tr>
     </table>
     */
    public Email usersEmailsRead(String emailId, String user) throws ApiException {
        ApiResponse<Email> localVarResp = usersEmailsReadWithHttpInfo(emailId, user);
        return localVarResp.getData();
    }

    /**
     * Retrieve a user&#39;s email addresses
     * 
     * @param emailId Email unique identifier expressed as UUID. (required)
     * @param user User unique identifier expressed as UUID or username. (required)
     * @return ApiResponse&lt;Email&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Email retrieved </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Email not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Email> usersEmailsReadWithHttpInfo(String emailId, String user) throws ApiException {
        okhttp3.Call localVarCall = usersEmailsReadValidateBeforeCall(emailId, user, null);
        Type localVarReturnType = new TypeToken<Email>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve a user&#39;s email addresses (asynchronously)
     * 
     * @param emailId Email unique identifier expressed as UUID. (required)
     * @param user User unique identifier expressed as UUID or username. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Email retrieved </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Email not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersEmailsReadAsync(String emailId, String user, final ApiCallback<Email> _callback) throws ApiException {

        okhttp3.Call localVarCall = usersEmailsReadValidateBeforeCall(emailId, user, _callback);
        Type localVarReturnType = new TypeToken<Email>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for usersEmailsReplace
     * @param emailId Email unique identifier expressed as UUID. (required)
     * @param user User unique identifier expressed as UUID or username. (required)
     * @param emailData  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Email updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersEmailsReplaceCall(String emailId, String user, EmailData emailData, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = emailData;

        // create path and map variables
        String localVarPath = "/v1/users/{user}/emails/{email_id}/"
            .replace("{" + "email_id" + "}", localVarApiClient.escapeString(emailId.toString()))
            .replace("{" + "user" + "}", localVarApiClient.escapeString(user.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usersEmailsReplaceValidateBeforeCall(String emailId, String user, EmailData emailData, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'emailId' is set
        if (emailId == null) {
            throw new ApiException("Missing the required parameter 'emailId' when calling usersEmailsReplace(Async)");
        }

        // verify the required parameter 'user' is set
        if (user == null) {
            throw new ApiException("Missing the required parameter 'user' when calling usersEmailsReplace(Async)");
        }

        return usersEmailsReplaceCall(emailId, user, emailData, _callback);

    }

    /**
     * Replace an email address
     * 
     * @param emailId Email unique identifier expressed as UUID. (required)
     * @param user User unique identifier expressed as UUID or username. (required)
     * @param emailData  (optional)
     * @return Email
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Email updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied </td><td>  -  </td></tr>
     </table>
     */
    public Email usersEmailsReplace(String emailId, String user, EmailData emailData) throws ApiException {
        ApiResponse<Email> localVarResp = usersEmailsReplaceWithHttpInfo(emailId, user, emailData);
        return localVarResp.getData();
    }

    /**
     * Replace an email address
     * 
     * @param emailId Email unique identifier expressed as UUID. (required)
     * @param user User unique identifier expressed as UUID or username. (required)
     * @param emailData  (optional)
     * @return ApiResponse&lt;Email&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Email updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Email> usersEmailsReplaceWithHttpInfo(String emailId, String user, EmailData emailData) throws ApiException {
        okhttp3.Call localVarCall = usersEmailsReplaceValidateBeforeCall(emailId, user, emailData, null);
        Type localVarReturnType = new TypeToken<Email>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Replace an email address (asynchronously)
     * 
     * @param emailId Email unique identifier expressed as UUID. (required)
     * @param user User unique identifier expressed as UUID or username. (required)
     * @param emailData  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Email updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersEmailsReplaceAsync(String emailId, String user, EmailData emailData, final ApiCallback<Email> _callback) throws ApiException {

        okhttp3.Call localVarCall = usersEmailsReplaceValidateBeforeCall(emailId, user, emailData, _callback);
        Type localVarReturnType = new TypeToken<Email>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for usersEmailsUpdate
     * @param emailId Email unique identifier expressed as UUID. (required)
     * @param user User unique identifier expressed as UUID or username. (required)
     * @param emailData  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Email updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Email not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersEmailsUpdateCall(String emailId, String user, EmailData emailData, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = emailData;

        // create path and map variables
        String localVarPath = "/v1/users/{user}/emails/{email_id}/"
            .replace("{" + "email_id" + "}", localVarApiClient.escapeString(emailId.toString()))
            .replace("{" + "user" + "}", localVarApiClient.escapeString(user.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usersEmailsUpdateValidateBeforeCall(String emailId, String user, EmailData emailData, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'emailId' is set
        if (emailId == null) {
            throw new ApiException("Missing the required parameter 'emailId' when calling usersEmailsUpdate(Async)");
        }

        // verify the required parameter 'user' is set
        if (user == null) {
            throw new ApiException("Missing the required parameter 'user' when calling usersEmailsUpdate(Async)");
        }

        return usersEmailsUpdateCall(emailId, user, emailData, _callback);

    }

    /**
     * Update an email address
     * 
     * @param emailId Email unique identifier expressed as UUID. (required)
     * @param user User unique identifier expressed as UUID or username. (required)
     * @param emailData  (optional)
     * @return Email
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Email updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Email not found </td><td>  -  </td></tr>
     </table>
     */
    public Email usersEmailsUpdate(String emailId, String user, EmailData emailData) throws ApiException {
        ApiResponse<Email> localVarResp = usersEmailsUpdateWithHttpInfo(emailId, user, emailData);
        return localVarResp.getData();
    }

    /**
     * Update an email address
     * 
     * @param emailId Email unique identifier expressed as UUID. (required)
     * @param user User unique identifier expressed as UUID or username. (required)
     * @param emailData  (optional)
     * @return ApiResponse&lt;Email&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Email updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Email not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Email> usersEmailsUpdateWithHttpInfo(String emailId, String user, EmailData emailData) throws ApiException {
        okhttp3.Call localVarCall = usersEmailsUpdateValidateBeforeCall(emailId, user, emailData, null);
        Type localVarReturnType = new TypeToken<Email>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update an email address (asynchronously)
     * 
     * @param emailId Email unique identifier expressed as UUID. (required)
     * @param user User unique identifier expressed as UUID or username. (required)
     * @param emailData  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Email updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Email not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersEmailsUpdateAsync(String emailId, String user, EmailData emailData, final ApiCallback<Email> _callback) throws ApiException {

        okhttp3.Call localVarCall = usersEmailsUpdateValidateBeforeCall(emailId, user, emailData, _callback);
        Type localVarReturnType = new TypeToken<Email>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for usersList
     * @param limit Limit user list. (optional)
     * @param offset Offset when getting users. (optional)
     * @param username User username. (optional)
     * @param email User email. (optional)
     * @param ordering Ordering when getting users. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User list </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersListCall(String limit, String offset, String username, String email, String ordering, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/users/profiles/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (username != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("username", username));
        }

        if (email != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("email", email));
        }

        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usersListValidateBeforeCall(String limit, String offset, String username, String email, String ordering, final ApiCallback _callback) throws ApiException {
        return usersListCall(limit, offset, username, email, ordering, _callback);

    }

    /**
     * Get user list
     * 
     * @param limit Limit user list. (optional)
     * @param offset Offset when getting users. (optional)
     * @param username User username. (optional)
     * @param email User email. (optional)
     * @param ordering Ordering when getting users. (optional)
     * @return List&lt;User&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User list </td><td>  -  </td></tr>
     </table>
     */
    public List<User> usersList(String limit, String offset, String username, String email, String ordering) throws ApiException {
        ApiResponse<List<User>> localVarResp = usersListWithHttpInfo(limit, offset, username, email, ordering);
        return localVarResp.getData();
    }

    /**
     * Get user list
     * 
     * @param limit Limit user list. (optional)
     * @param offset Offset when getting users. (optional)
     * @param username User username. (optional)
     * @param email User email. (optional)
     * @param ordering Ordering when getting users. (optional)
     * @return ApiResponse&lt;List&lt;User&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User list </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<User>> usersListWithHttpInfo(String limit, String offset, String username, String email, String ordering) throws ApiException {
        okhttp3.Call localVarCall = usersListValidateBeforeCall(limit, offset, username, email, ordering, null);
        Type localVarReturnType = new TypeToken<List<User>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get user list (asynchronously)
     * 
     * @param limit Limit user list. (optional)
     * @param offset Offset when getting users. (optional)
     * @param username User username. (optional)
     * @param email User email. (optional)
     * @param ordering Ordering when getting users. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User list </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersListAsync(String limit, String offset, String username, String email, String ordering, final ApiCallback<List<User>> _callback) throws ApiException {

        okhttp3.Call localVarCall = usersListValidateBeforeCall(limit, offset, username, email, ordering, _callback);
        Type localVarReturnType = new TypeToken<List<User>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for usersRead
     * @param user Unique identifier expressed as UUID or username. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User retrieved. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersReadCall(String user, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/users/profiles/{user}/"
            .replace("{" + "user" + "}", localVarApiClient.escapeString(user.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usersReadValidateBeforeCall(String user, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'user' is set
        if (user == null) {
            throw new ApiException("Missing the required parameter 'user' when calling usersRead(Async)");
        }

        return usersReadCall(user, _callback);

    }

    /**
     * Retrieve a user
     * 
     * @param user Unique identifier expressed as UUID or username. (required)
     * @return User
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User retrieved. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found. </td><td>  -  </td></tr>
     </table>
     */
    public User usersRead(String user) throws ApiException {
        ApiResponse<User> localVarResp = usersReadWithHttpInfo(user);
        return localVarResp.getData();
    }

    /**
     * Retrieve a user
     * 
     * @param user Unique identifier expressed as UUID or username. (required)
     * @return ApiResponse&lt;User&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User retrieved. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<User> usersReadWithHttpInfo(String user) throws ApiException {
        okhttp3.Call localVarCall = usersReadValidateBeforeCall(user, null);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve a user (asynchronously)
     * 
     * @param user Unique identifier expressed as UUID or username. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User retrieved. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersReadAsync(String user, final ApiCallback<User> _callback) throws ApiException {

        okhttp3.Call localVarCall = usersReadValidateBeforeCall(user, _callback);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for usersSshKeyList
     * @param user User unique identifier expressed as UUID or username. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> SSH Key. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersSshKeyListCall(String user, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/users/{user}/ssh-key/"
            .replace("{" + "user" + "}", localVarApiClient.escapeString(user.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usersSshKeyListValidateBeforeCall(String user, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'user' is set
        if (user == null) {
            throw new ApiException("Missing the required parameter 'user' when calling usersSshKeyList(Async)");
        }

        return usersSshKeyListCall(user, _callback);

    }

    /**
     * Retrieve an SSH key
     * 
     * @param user User unique identifier expressed as UUID or username. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> SSH Key. </td><td>  -  </td></tr>
     </table>
     */
    public void usersSshKeyList(String user) throws ApiException {
        usersSshKeyListWithHttpInfo(user);
    }

    /**
     * Retrieve an SSH key
     * 
     * @param user User unique identifier expressed as UUID or username. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> SSH Key. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> usersSshKeyListWithHttpInfo(String user) throws ApiException {
        okhttp3.Call localVarCall = usersSshKeyListValidateBeforeCall(user, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retrieve an SSH key (asynchronously)
     * 
     * @param user User unique identifier expressed as UUID or username. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> SSH Key. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersSshKeyListAsync(String user, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = usersSshKeyListValidateBeforeCall(user, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for usersSshKeyReset
     * @param user User unique identifier expressed as UUID or username. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Reset SSH Key successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersSshKeyResetCall(String user, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/users/{user}/ssh-key/reset/"
            .replace("{" + "user" + "}", localVarApiClient.escapeString(user.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usersSshKeyResetValidateBeforeCall(String user, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'user' is set
        if (user == null) {
            throw new ApiException("Missing the required parameter 'user' when calling usersSshKeyReset(Async)");
        }

        return usersSshKeyResetCall(user, _callback);

    }

    /**
     * Recreate an SSH key
     * 
     * @param user User unique identifier expressed as UUID or username. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Reset SSH Key successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied. </td><td>  -  </td></tr>
     </table>
     */
    public void usersSshKeyReset(String user) throws ApiException {
        usersSshKeyResetWithHttpInfo(user);
    }

    /**
     * Recreate an SSH key
     * 
     * @param user User unique identifier expressed as UUID or username. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Reset SSH Key successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> usersSshKeyResetWithHttpInfo(String user) throws ApiException {
        okhttp3.Call localVarCall = usersSshKeyResetValidateBeforeCall(user, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Recreate an SSH key (asynchronously)
     * 
     * @param user User unique identifier expressed as UUID or username. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Reset SSH Key successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersSshKeyResetAsync(String user, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = usersSshKeyResetValidateBeforeCall(user, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for usersUpdate
     * @param user User unique identifier expressed as UUID or username. (required)
     * @param userData  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User updated. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersUpdateCall(String user, UserData userData, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = userData;

        // create path and map variables
        String localVarPath = "/v1/users/profiles/{user}/"
            .replace("{" + "user" + "}", localVarApiClient.escapeString(user.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usersUpdateValidateBeforeCall(String user, UserData userData, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'user' is set
        if (user == null) {
            throw new ApiException("Missing the required parameter 'user' when calling usersUpdate(Async)");
        }

        return usersUpdateCall(user, userData, _callback);

    }

    /**
     * Update a user
     * 
     * @param user User unique identifier expressed as UUID or username. (required)
     * @param userData  (optional)
     * @return User
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User updated. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found. </td><td>  -  </td></tr>
     </table>
     */
    public User usersUpdate(String user, UserData userData) throws ApiException {
        ApiResponse<User> localVarResp = usersUpdateWithHttpInfo(user, userData);
        return localVarResp.getData();
    }

    /**
     * Update a user
     * 
     * @param user User unique identifier expressed as UUID or username. (required)
     * @param userData  (optional)
     * @return ApiResponse&lt;User&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User updated. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<User> usersUpdateWithHttpInfo(String user, UserData userData) throws ApiException {
        okhttp3.Call localVarCall = usersUpdateValidateBeforeCall(user, userData, null);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a user (asynchronously)
     * 
     * @param user User unique identifier expressed as UUID or username. (required)
     * @param userData  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User updated. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data supplied. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersUpdateAsync(String user, UserData userData, final ApiCallback<User> _callback) throws ApiException {

        okhttp3.Call localVarCall = usersUpdateValidateBeforeCall(user, userData, _callback);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
