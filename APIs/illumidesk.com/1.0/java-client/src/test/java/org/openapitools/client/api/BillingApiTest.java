/*
 * IllumiDesk
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Card;
import org.openapitools.client.model.CardDataPost;
import org.openapitools.client.model.CardDataPutandPatch;
import org.openapitools.client.model.CardError;
import org.openapitools.client.model.CardUpdateError;
import org.openapitools.client.model.Invoice;
import org.openapitools.client.model.InvoiceItem;
import org.openapitools.client.model.NotFound;
import org.openapitools.client.model.Plan;
import org.openapitools.client.model.Subscription;
import org.openapitools.client.model.SubscriptionData;
import org.openapitools.client.model.SubscriptionError;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for BillingApi
 */
@Disabled
public class BillingApiTest {

    private final BillingApi api = new BillingApi();

    /**
     * Create new credit card
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void billingCardsCreateTest() throws ApiException {
        String namespace = null;
        CardDataPost cardData = null;
        Card response = api.billingCardsCreate(namespace, cardData);
        // TODO: test validations
    }

    /**
     * Delete a credit card
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void billingCardsDeleteTest() throws ApiException {
        String namespace = null;
        String id = null;
        api.billingCardsDelete(namespace, id);
        // TODO: test validations
    }

    /**
     * Get credit cards
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void billingCardsListTest() throws ApiException {
        String namespace = null;
        String limit = null;
        String offset = null;
        String ordering = null;
        List<Card> response = api.billingCardsList(namespace, limit, offset, ordering);
        // TODO: test validations
    }

    /**
     * Get credit card by id
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void billingCardsReadTest() throws ApiException {
        String namespace = null;
        String id = null;
        Card response = api.billingCardsRead(namespace, id);
        // TODO: test validations
    }

    /**
     * Replace a credit card
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void billingCardsReplaceTest() throws ApiException {
        String namespace = null;
        String id = null;
        CardDataPutandPatch cardData = null;
        Card response = api.billingCardsReplace(namespace, id, cardData);
        // TODO: test validations
    }

    /**
     * Update a credit card
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void billingCardsUpdateTest() throws ApiException {
        String namespace = null;
        String id = null;
        CardDataPutandPatch cardData = null;
        Card response = api.billingCardsUpdate(namespace, id, cardData);
        // TODO: test validations
    }

    /**
     * Get invoice items for a given invoice.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void billingInvoiceItemsListTest() throws ApiException {
        String namespace = null;
        String invoiceId = null;
        String limit = null;
        String offset = null;
        String ordering = null;
        List<InvoiceItem> response = api.billingInvoiceItemsList(namespace, invoiceId, limit, offset, ordering);
        // TODO: test validations
    }

    /**
     * Get a specific InvoiceItem.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void billingInvoiceItemsReadTest() throws ApiException {
        String namespace = null;
        String invoiceId = null;
        String id = null;
        InvoiceItem response = api.billingInvoiceItemsRead(namespace, invoiceId, id);
        // TODO: test validations
    }

    /**
     * Get invoices
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void billingInvoicesListTest() throws ApiException {
        String namespace = null;
        String limit = null;
        String offset = null;
        String ordering = null;
        List<Invoice> response = api.billingInvoicesList(namespace, limit, offset, ordering);
        // TODO: test validations
    }

    /**
     * Get an invoice
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void billingInvoicesReadTest() throws ApiException {
        String namespace = null;
        String id = null;
        Invoice response = api.billingInvoicesRead(namespace, id);
        // TODO: test validations
    }

    /**
     * Get billing plans
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void billingPlansListTest() throws ApiException {
        String namespace = null;
        String limit = null;
        String offset = null;
        String ordering = null;
        List<Plan> response = api.billingPlansList(namespace, limit, offset, ordering);
        // TODO: test validations
    }

    /**
     * Get a billing plan
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void billingPlansReadTest() throws ApiException {
        String namespace = null;
        String id = null;
        Plan response = api.billingPlansRead(namespace, id);
        // TODO: test validations
    }

    /**
     * Create a new subscription
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void billingSubscriptionsCreateTest() throws ApiException {
        String namespace = null;
        SubscriptionData subscriptionData = null;
        Subscription response = api.billingSubscriptionsCreate(namespace, subscriptionData);
        // TODO: test validations
    }

    /**
     * Delete a subscription
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void billingSubscriptionsDeleteTest() throws ApiException {
        String namespace = null;
        String id = null;
        api.billingSubscriptionsDelete(namespace, id);
        // TODO: test validations
    }

    /**
     * Get active subscriptons
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void billingSubscriptionsListTest() throws ApiException {
        String namespace = null;
        String limit = null;
        String offset = null;
        String ordering = null;
        List<Subscription> response = api.billingSubscriptionsList(namespace, limit, offset, ordering);
        // TODO: test validations
    }

    /**
     * Get a subscriptions
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void billingSubscriptionsReadTest() throws ApiException {
        String namespace = null;
        String id = null;
        Subscription response = api.billingSubscriptionsRead(namespace, id);
        // TODO: test validations
    }

    /**
     * Get team invoice items for a given invoice.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void teamsBillingInvoiceItemsList_0Test() throws ApiException {
        String team = null;
        String invoiceId = null;
        String limit = null;
        String offset = null;
        String ordering = null;
        List<InvoiceItem> response = api.teamsBillingInvoiceItemsList_0(team, invoiceId, limit, offset, ordering);
        // TODO: test validations
    }

    /**
     * Get a specific team InvoiceItem.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void teamsBillingInvoiceItemsRead_0Test() throws ApiException {
        String team = null;
        String invoiceId = null;
        String id = null;
        InvoiceItem response = api.teamsBillingInvoiceItemsRead_0(team, invoiceId, id);
        // TODO: test validations
    }

    /**
     * Get team invoices
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void teamsBillingInvoicesList_0Test() throws ApiException {
        String team = null;
        String limit = null;
        String offset = null;
        List<Invoice> response = api.teamsBillingInvoicesList_0(team, limit, offset);
        // TODO: test validations
    }

    /**
     * Get an invoice
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void teamsBillingInvoicesRead_0Test() throws ApiException {
        String team = null;
        String id = null;
        Invoice response = api.teamsBillingInvoicesRead_0(team, id);
        // TODO: test validations
    }

    /**
     * Create a new team subscription
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void teamsBillingSubscriptionsCreate_0Test() throws ApiException {
        String team = null;
        SubscriptionData subscriptionData = null;
        Subscription response = api.teamsBillingSubscriptionsCreate_0(team, subscriptionData);
        // TODO: test validations
    }

    /**
     * Delete a subscription
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void teamsBillingSubscriptionsDelete_0Test() throws ApiException {
        String team = null;
        String id = null;
        api.teamsBillingSubscriptionsDelete_0(team, id);
        // TODO: test validations
    }

    /**
     * Get active team subscriptons
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void teamsBillingSubscriptionsList_0Test() throws ApiException {
        String team = null;
        String limit = null;
        String offset = null;
        String ordering = null;
        List<Subscription> response = api.teamsBillingSubscriptionsList_0(team, limit, offset, ordering);
        // TODO: test validations
    }

    /**
     * Get team subscriptions
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void teamsBillingSubscriptionsRead_0Test() throws ApiException {
        String team = null;
        String id = null;
        Subscription response = api.teamsBillingSubscriptionsRead_0(team, id);
        // TODO: test validations
    }

}
