/*
 * IllumiDesk
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Group;
import org.openapitools.client.model.GroupData;
import org.openapitools.client.model.GroupError;
import org.openapitools.client.model.GroupUser;
import org.openapitools.client.model.GroupUserError;
import org.openapitools.client.model.Invoice;
import org.openapitools.client.model.InvoiceItem;
import org.openapitools.client.model.NotFound;
import org.openapitools.client.model.Subscription;
import org.openapitools.client.model.SubscriptionData;
import org.openapitools.client.model.SubscriptionError;
import org.openapitools.client.model.Team;
import org.openapitools.client.model.TeamData;
import org.openapitools.client.model.TeamError;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TeamsApi
 */
@Disabled
public class TeamsApiTest {

    private final TeamsApi api = new TeamsApi();

    /**
     * Get team invoice items for a given invoice.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void teamsBillingInvoiceItemsListTest() throws ApiException {
        String team = null;
        String invoiceId = null;
        String limit = null;
        String offset = null;
        String ordering = null;
        List<InvoiceItem> response = api.teamsBillingInvoiceItemsList(team, invoiceId, limit, offset, ordering);
        // TODO: test validations
    }

    /**
     * Get a specific team InvoiceItem.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void teamsBillingInvoiceItemsReadTest() throws ApiException {
        String team = null;
        String invoiceId = null;
        String id = null;
        InvoiceItem response = api.teamsBillingInvoiceItemsRead(team, invoiceId, id);
        // TODO: test validations
    }

    /**
     * Get team invoices
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void teamsBillingInvoicesListTest() throws ApiException {
        String team = null;
        String limit = null;
        String offset = null;
        List<Invoice> response = api.teamsBillingInvoicesList(team, limit, offset);
        // TODO: test validations
    }

    /**
     * Get an invoice
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void teamsBillingInvoicesReadTest() throws ApiException {
        String team = null;
        String id = null;
        Invoice response = api.teamsBillingInvoicesRead(team, id);
        // TODO: test validations
    }

    /**
     * Create a new team subscription
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void teamsBillingSubscriptionsCreateTest() throws ApiException {
        String team = null;
        SubscriptionData subscriptionData = null;
        Subscription response = api.teamsBillingSubscriptionsCreate(team, subscriptionData);
        // TODO: test validations
    }

    /**
     * Delete a subscription
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void teamsBillingSubscriptionsDeleteTest() throws ApiException {
        String team = null;
        String id = null;
        api.teamsBillingSubscriptionsDelete(team, id);
        // TODO: test validations
    }

    /**
     * Get active team subscriptons
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void teamsBillingSubscriptionsListTest() throws ApiException {
        String team = null;
        String limit = null;
        String offset = null;
        String ordering = null;
        List<Subscription> response = api.teamsBillingSubscriptionsList(team, limit, offset, ordering);
        // TODO: test validations
    }

    /**
     * Get team subscriptions
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void teamsBillingSubscriptionsReadTest() throws ApiException {
        String team = null;
        String id = null;
        Subscription response = api.teamsBillingSubscriptionsRead(team, id);
        // TODO: test validations
    }

    /**
     * Create a new team
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void teamsCreateTest() throws ApiException {
        TeamData teamData = null;
        Team response = api.teamsCreate(teamData);
        // TODO: test validations
    }

    /**
     * Delete a team
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void teamsDeleteTest() throws ApiException {
        String team = null;
        api.teamsDelete(team);
        // TODO: test validations
    }

    /**
     * Add user to group
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void teamsGroupsAddToGroupTest() throws ApiException {
        String team = null;
        String group = null;
        GroupUser response = api.teamsGroupsAddToGroup(team, group);
        // TODO: test validations
    }

    /**
     * Delete team group
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void teamsGroupsDeleteTest() throws ApiException {
        String team = null;
        String group = null;
        api.teamsGroupsDelete(team, group);
        // TODO: test validations
    }

    /**
     * Get team groups
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void teamsGroupsListTest() throws ApiException {
        String team = null;
        String limit = null;
        String offset = null;
        List<Group> response = api.teamsGroupsList(team, limit, offset);
        // TODO: test validations
    }

    /**
     * Get team group
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void teamsGroupsReadTest() throws ApiException {
        String team = null;
        String group = null;
        Group response = api.teamsGroupsRead(team, group);
        // TODO: test validations
    }

    /**
     * User removed from group
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void teamsGroupsRemoveFromGroupTest() throws ApiException {
        String team = null;
        String group = null;
        api.teamsGroupsRemoveFromGroup(team, group);
        // TODO: test validations
    }

    /**
     * Patch team group
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void teamsGroupsReplaceTest() throws ApiException {
        String team = null;
        String group = null;
        GroupData groupData = null;
        Group response = api.teamsGroupsReplace(team, group, groupData);
        // TODO: test validations
    }

    /**
     * Patch team group
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void teamsGroupsUpdateTest() throws ApiException {
        String team = null;
        String group = null;
        GroupData groupData = null;
        Group response = api.teamsGroupsUpdate(team, group, groupData);
        // TODO: test validations
    }

    /**
     * Get teams
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void teamsListTest() throws ApiException {
        String limit = null;
        String offset = null;
        List<Team> response = api.teamsList(limit, offset);
        // TODO: test validations
    }

    /**
     * Get a team
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void teamsReadTest() throws ApiException {
        String team = null;
        Team response = api.teamsRead(team);
        // TODO: test validations
    }

    /**
     * Replace a team
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void teamsReplaceTest() throws ApiException {
        String team = null;
        TeamData teamData = null;
        Team response = api.teamsReplace(team, teamData);
        // TODO: test validations
    }

    /**
     * Update a team
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void teamsUpdateTest() throws ApiException {
        String team = null;
        TeamData teamData = null;
        Team response = api.teamsUpdate(team, teamData);
        // TODO: test validations
    }

}
