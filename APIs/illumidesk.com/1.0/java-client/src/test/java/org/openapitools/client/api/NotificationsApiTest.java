/*
 * IllumiDesk
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.NotFound;
import org.openapitools.client.model.Notification;
import org.openapitools.client.model.NotificationError;
import org.openapitools.client.model.NotificationListUpdateData;
import org.openapitools.client.model.NotificationSettings;
import org.openapitools.client.model.NotificationSettingsData;
import org.openapitools.client.model.NotificationSettingsError;
import org.openapitools.client.model.NotificationUpdateData;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for NotificationsApi
 */
@Disabled
public class NotificationsApiTest {

    private final NotificationsApi api = new NotificationsApi();

    /**
     * Retrieve a specific notification.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void notificationReadTest() throws ApiException {
        String namespace = null;
        String notificationId = null;
        Notification response = api.notificationRead(namespace, notificationId);
        // TODO: test validations
    }

    /**
     * Create global notification settings
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void notificationSettingsCreateTest() throws ApiException {
        String namespace = null;
        NotificationSettingsData notificationSettingsData = null;
        NotificationSettings response = api.notificationSettingsCreate(namespace, notificationSettingsData);
        // TODO: test validations
    }

    /**
     * Create global notification settings
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void notificationSettingsEntityCreateTest() throws ApiException {
        String namespace = null;
        String entity = null;
        NotificationSettingsData notificationSettingsData = null;
        NotificationSettings response = api.notificationSettingsEntityCreate(namespace, entity, notificationSettingsData);
        // TODO: test validations
    }

    /**
     * Retrieve global notification settings for the authenticated user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void notificationSettingsEntityReadTest() throws ApiException {
        String namespace = null;
        String entity = null;
        List<NotificationSettings> response = api.notificationSettingsEntityRead(namespace, entity);
        // TODO: test validations
    }

    /**
     * Modify global notification settings.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void notificationSettingsEntityUpdateTest() throws ApiException {
        String namespace = null;
        String entity = null;
        NotificationSettingsData notificationSettingsData = null;
        NotificationSettings response = api.notificationSettingsEntityUpdate(namespace, entity, notificationSettingsData);
        // TODO: test validations
    }

    /**
     * Retrieve global notification settings for the authenticated user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void notificationSettingsReadTest() throws ApiException {
        String namespace = null;
        List<NotificationSettings> response = api.notificationSettingsRead(namespace);
        // TODO: test validations
    }

    /**
     * Modify global notification settings.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void notificationSettingsUpdateTest() throws ApiException {
        String namespace = null;
        NotificationSettingsData notificationSettingsData = null;
        NotificationSettings response = api.notificationSettingsUpdate(namespace, notificationSettingsData);
        // TODO: test validations
    }

    /**
     * Mark a specific notification as either read or unread.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void notificationUpdateTest() throws ApiException {
        String namespace = null;
        String notificationId = null;
        NotificationUpdateData notificationData = null;
        Notification response = api.notificationUpdate(namespace, notificationId, notificationData);
        // TODO: test validations
    }

    /**
     * Get notifications of all types and entities for the authenticated user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void notificationsListTest() throws ApiException {
        String namespace = null;
        String limit = null;
        String offset = null;
        String ordering = null;
        Boolean read = null;
        List<Notification> response = api.notificationsList(namespace, limit, offset, ordering, read);
        // TODO: test validations
    }

    /**
     * Get notifications of all types and entities for the authenticated user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void notificationsListEntityTest() throws ApiException {
        String namespace = null;
        String entity = null;
        String limit = null;
        String offset = null;
        String ordering = null;
        Boolean read = null;
        List<Notification> response = api.notificationsListEntity(namespace, entity, limit, offset, ordering, read);
        // TODO: test validations
    }

    /**
     * Mark a list of notifications as either read or unread.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void notificationsUpdateEntityListTest() throws ApiException {
        String namespace = null;
        String entity = null;
        NotificationListUpdateData notificationData = null;
        Notification response = api.notificationsUpdateEntityList(namespace, entity, notificationData);
        // TODO: test validations
    }

    /**
     * Mark a list of notifications as either read or unread.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void notificationsUpdateListTest() throws ApiException {
        String namespace = null;
        NotificationListUpdateData notificationData = null;
        Notification response = api.notificationsUpdateList(namespace, notificationData);
        // TODO: test validations
    }

}
