/*
 * IllumiDesk
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.JWT;
import org.openapitools.client.model.JWTData;
import org.openapitools.client.model.JWTError;
import org.openapitools.client.model.RefreshJSONWebToken;
import org.openapitools.client.model.RefreshJSONWebTokenData;
import org.openapitools.client.model.RefreshJSONWebTokenError;
import org.openapitools.client.model.User;
import org.openapitools.client.model.UserData;
import org.openapitools.client.model.UserError;
import org.openapitools.client.model.VerifyJSONWebToken;
import org.openapitools.client.model.VerifyJSONWebTokenData;
import org.openapitools.client.model.VerifyJSONWebTokenError;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AuthApi
 */
@Disabled
public class AuthApiTest {

    private final AuthApi api = new AuthApi();

    /**
     * Create JSON Web Token (JWT)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void authJwtTokenAuthTest() throws ApiException {
        JWTData jwtData = null;
        JWT response = api.authJwtTokenAuth(jwtData);
        // TODO: test validations
    }

    /**
     * Refresh a JSON Web Token (JWT)
     *
     * Obtains a new JSON Web Token using existing user credentials.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void authJwtTokenRefreshTest() throws ApiException {
        RefreshJSONWebTokenData refreshjwtData = null;
        RefreshJSONWebToken response = api.authJwtTokenRefresh(refreshjwtData);
        // TODO: test validations
    }

    /**
     * Validate JSON Web Token (JWT)
     *
     * Checks veraciy of token.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void authJwtTokenVerifyTest() throws ApiException {
        VerifyJSONWebTokenData verifyjwtData = null;
        VerifyJSONWebToken response = api.authJwtTokenVerify(verifyjwtData);
        // TODO: test validations
    }

    /**
     * Register a user
     *
     * User registration requires confirming email address to activate user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void authRegisterTest() throws ApiException {
        UserData userData = null;
        User response = api.authRegister(userData);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void oauthLoginTest() throws ApiException {
        String provider = null;
        api.oauthLogin(provider);
        // TODO: test validations
    }

}
