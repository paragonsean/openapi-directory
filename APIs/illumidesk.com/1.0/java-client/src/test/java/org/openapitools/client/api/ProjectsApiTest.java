/*
 * IllumiDesk
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Collaborator;
import org.openapitools.client.model.CollaboratorData;
import org.openapitools.client.model.CollaboratorError;
import org.openapitools.client.model.Deployment;
import org.openapitools.client.model.DeploymentData;
import org.openapitools.client.model.DeploymentError;
import java.io.File;
import org.openapitools.client.model.JWT;
import org.openapitools.client.model.NotFound;
import org.openapitools.client.model.Project;
import org.openapitools.client.model.ProjectCopyCheckRequest;
import org.openapitools.client.model.ProjectCopyRequest;
import org.openapitools.client.model.ProjectData;
import org.openapitools.client.model.ProjectError;
import org.openapitools.client.model.ProjectFile;
import org.openapitools.client.model.ProjectFileError;
import org.openapitools.client.model.Server;
import org.openapitools.client.model.ServerAction;
import org.openapitools.client.model.ServerActionData;
import org.openapitools.client.model.ServerActionError;
import org.openapitools.client.model.ServerData;
import org.openapitools.client.model.ServerError;
import org.openapitools.client.model.ServerRunStatistics;
import org.openapitools.client.model.ServerRunStatisticsData;
import org.openapitools.client.model.ServerRunStatisticsError;
import org.openapitools.client.model.ServerStatistics;
import org.openapitools.client.model.ServerStatisticsData;
import org.openapitools.client.model.ServerStatisticsError;
import org.openapitools.client.model.ServerStatus;
import org.openapitools.client.model.SshTunnel;
import org.openapitools.client.model.SshTunnelData;
import org.openapitools.client.model.SshTunnelError;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ProjectsApi
 */
@Disabled
public class ProjectsApiTest {

    private final ProjectsApi api = new ProjectsApi();

    /**
     * Copy a project to your own account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectCopyTest() throws ApiException {
        String namespace = null;
        ProjectCopyRequest projectCopyData = null;
        Project response = api.projectCopy(namespace, projectCopyData);
        // TODO: test validations
    }

    /**
     * Check if you are able to copy a project to your account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectCopyCheckTest() throws ApiException {
        String namespace = null;
        ProjectCopyCheckRequest projectCopyData = null;
        api.projectCopyCheck(namespace, projectCopyData);
        // TODO: test validations
    }

    /**
     * Create project collaborators
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectsCollaboratorsCreateTest() throws ApiException {
        String project = null;
        String namespace = null;
        CollaboratorData collaboratorData = null;
        Collaborator response = api.projectsCollaboratorsCreate(project, namespace, collaboratorData);
        // TODO: test validations
    }

    /**
     * Delete a project collaborator
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectsCollaboratorsDeleteTest() throws ApiException {
        String project = null;
        String namespace = null;
        String collaborator = null;
        api.projectsCollaboratorsDelete(project, namespace, collaborator);
        // TODO: test validations
    }

    /**
     * Get project collaborators
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectsCollaboratorsListTest() throws ApiException {
        String project = null;
        String namespace = null;
        String limit = null;
        String offset = null;
        String ordering = null;
        List<Collaborator> response = api.projectsCollaboratorsList(project, namespace, limit, offset, ordering);
        // TODO: test validations
    }

    /**
     * Get a project collaborator
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectsCollaboratorsReadTest() throws ApiException {
        String project = null;
        String namespace = null;
        String collaborator = null;
        Collaborator response = api.projectsCollaboratorsRead(project, namespace, collaborator);
        // TODO: test validations
    }

    /**
     * Update project collaborator
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectsCollaboratorsUpdateTest() throws ApiException {
        String project = null;
        String namespace = null;
        String collaborator = null;
        CollaboratorData collaboratorData = null;
        Collaborator response = api.projectsCollaboratorsUpdate(project, namespace, collaborator, collaboratorData);
        // TODO: test validations
    }

    /**
     * Create a new project
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectsCreateTest() throws ApiException {
        String namespace = null;
        ProjectData projectData = null;
        Project response = api.projectsCreate(namespace, projectData);
        // TODO: test validations
    }

    /**
     * Delete a project
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectsDeleteTest() throws ApiException {
        String namespace = null;
        String project = null;
        api.projectsDelete(namespace, project);
        // TODO: test validations
    }

    /**
     * Delete a deployment
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectsDeploymentDeleteTest() throws ApiException {
        String project = null;
        String namespace = null;
        String deployment = null;
        api.projectsDeploymentDelete(project, namespace, deployment);
        // TODO: test validations
    }

    /**
     * Create a new deployment
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectsDeploymentsCreateTest() throws ApiException {
        String project = null;
        String namespace = null;
        DeploymentData deploymentData = null;
        Deployment response = api.projectsDeploymentsCreate(project, namespace, deploymentData);
        // TODO: test validations
    }

    /**
     * Deploy an existing model
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectsDeploymentsDeployTest() throws ApiException {
        String project = null;
        String namespace = null;
        String deployment = null;
        api.projectsDeploymentsDeploy(project, namespace, deployment);
        // TODO: test validations
    }

    /**
     * Retrieve deployments
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectsDeploymentsListTest() throws ApiException {
        String project = null;
        String namespace = null;
        String limit = null;
        String offset = null;
        String name = null;
        String ordering = null;
        List<Deployment> response = api.projectsDeploymentsList(project, namespace, limit, offset, name, ordering);
        // TODO: test validations
    }

    /**
     * Retrieve a deployment
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectsDeploymentsReadTest() throws ApiException {
        String project = null;
        String namespace = null;
        String deployment = null;
        Deployment response = api.projectsDeploymentsRead(project, namespace, deployment);
        // TODO: test validations
    }

    /**
     * Replace a deployment
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectsDeploymentsReplaceTest() throws ApiException {
        String project = null;
        String namespace = null;
        String deployment = null;
        DeploymentData deploymentData = null;
        Deployment response = api.projectsDeploymentsReplace(project, namespace, deployment, deploymentData);
        // TODO: test validations
    }

    /**
     * Update a deployment
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectsDeploymentsUpdateTest() throws ApiException {
        String project = null;
        String namespace = null;
        String deployment = null;
        DeploymentData deploymentData = null;
        Deployment response = api.projectsDeploymentsUpdate(project, namespace, deployment, deploymentData);
        // TODO: test validations
    }

    /**
     * Get available projects
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectsListTest() throws ApiException {
        String namespace = null;
        String limit = null;
        String offset = null;
        String _private = null;
        String name = null;
        String ordering = null;
        List<Project> response = api.projectsList(namespace, limit, offset, _private, name, ordering);
        // TODO: test validations
    }

    /**
     * Create project files
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectsProjectFilesCreateTest() throws ApiException {
        String project = null;
        String namespace = null;
        File _file = null;
        String base64Data = null;
        String name = null;
        String path = null;
        ProjectFile response = api.projectsProjectFilesCreate(project, namespace, _file, base64Data, name, path);
        // TODO: test validations
    }

    /**
     * Delete a project file
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectsProjectFilesDeleteTest() throws ApiException {
        String project = null;
        String namespace = null;
        String id = null;
        api.projectsProjectFilesDelete(project, namespace, id);
        // TODO: test validations
    }

    /**
     * Get project files
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectsProjectFilesListTest() throws ApiException {
        String project = null;
        String namespace = null;
        String limit = null;
        String offset = null;
        String ordering = null;
        String filename = null;
        String content = null;
        List<ProjectFile> response = api.projectsProjectFilesList(project, namespace, limit, offset, ordering, filename, content);
        // TODO: test validations
    }

    /**
     * Get a project file
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectsProjectFilesReadTest() throws ApiException {
        String project = null;
        String namespace = null;
        String id = null;
        String content = null;
        ProjectFile response = api.projectsProjectFilesRead(project, namespace, id, content);
        // TODO: test validations
    }

    /**
     * Replace a project file
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectsProjectFilesReplaceTest() throws ApiException {
        String project = null;
        String namespace = null;
        String id = null;
        File _file = null;
        String base64Data = null;
        String name = null;
        String path = null;
        ProjectFile response = api.projectsProjectFilesReplace(project, namespace, id, _file, base64Data, name, path);
        // TODO: test validations
    }

    /**
     * Update a project file
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectsProjectFilesUpdateTest() throws ApiException {
        String project = null;
        String namespace = null;
        String id = null;
        File _file = null;
        String base64Data = null;
        String name = null;
        String path = null;
        ProjectFile response = api.projectsProjectFilesUpdate(project, namespace, id, _file, base64Data, name, path);
        // TODO: test validations
    }

    /**
     * Get a project
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectsReadTest() throws ApiException {
        String namespace = null;
        String project = null;
        Project response = api.projectsRead(namespace, project);
        // TODO: test validations
    }

    /**
     * Replace a project
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectsReplaceTest() throws ApiException {
        String namespace = null;
        String project = null;
        ProjectData projectData = null;
        Project response = api.projectsReplace(namespace, project, projectData);
        // TODO: test validations
    }

    /**
     * Get server API key
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectsServersApiKeyTest() throws ApiException {
        String project = null;
        String namespace = null;
        String server = null;
        JWT response = api.projectsServersApiKey(project, namespace, server);
        // TODO: test validations
    }

    /**
     * Server api key validation
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectsServersAuthTest() throws ApiException {
        String project = null;
        String namespace = null;
        String server = null;
        api.projectsServersAuth(project, namespace, server);
        // TODO: test validations
    }

    /**
     * Create a new server
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectsServersCreateTest() throws ApiException {
        String project = null;
        String namespace = null;
        ServerData serverData = null;
        Server response = api.projectsServersCreate(project, namespace, serverData);
        // TODO: test validations
    }

    /**
     * Delete a server
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectsServersDeleteTest() throws ApiException {
        String project = null;
        String namespace = null;
        String server = null;
        api.projectsServersDelete(project, namespace, server);
        // TODO: test validations
    }

    /**
     * Retrieve servers
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectsServersListTest() throws ApiException {
        String project = null;
        String namespace = null;
        String limit = null;
        String offset = null;
        String name = null;
        String ordering = null;
        List<Server> response = api.projectsServersList(project, namespace, limit, offset, name, ordering);
        // TODO: test validations
    }

    /**
     * Retrieve a server
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectsServersReadTest() throws ApiException {
        String project = null;
        String namespace = null;
        String server = null;
        Server response = api.projectsServersRead(project, namespace, server);
        // TODO: test validations
    }

    /**
     * Replace a server
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectsServersReplaceTest() throws ApiException {
        String project = null;
        String namespace = null;
        String server = null;
        ServerData serverData = null;
        Server response = api.projectsServersReplace(project, namespace, server, serverData);
        // TODO: test validations
    }

    /**
     * Create a new server&#39;s run statistics
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectsServersRunStatsCreateTest() throws ApiException {
        String server = null;
        String project = null;
        String namespace = null;
        ServerRunStatisticsData serverrunstatsData = null;
        ServerRunStatistics response = api.projectsServersRunStatsCreate(server, project, namespace, serverrunstatsData);
        // TODO: test validations
    }

    /**
     * Delete a server&#39;s statistics
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectsServersRunStatsDeleteTest() throws ApiException {
        String server = null;
        String project = null;
        String namespace = null;
        String id = null;
        api.projectsServersRunStatsDelete(server, project, namespace, id);
        // TODO: test validations
    }

    /**
     * Retrieve statistics for a server
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectsServersRunStatsReadTest() throws ApiException {
        String server = null;
        String project = null;
        String namespace = null;
        String id = null;
        ServerRunStatistics response = api.projectsServersRunStatsRead(server, project, namespace, id);
        // TODO: test validations
    }

    /**
     * Replace a server&#39;s statistics
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectsServersRunStatsReplaceTest() throws ApiException {
        String server = null;
        String project = null;
        String namespace = null;
        String id = null;
        ServerRunStatisticsData serverrunstatsData = null;
        ServerRunStatistics response = api.projectsServersRunStatsReplace(server, project, namespace, id, serverrunstatsData);
        // TODO: test validations
    }

    /**
     * Update a server&#39;s statistics
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectsServersRunStatsUpdateTest() throws ApiException {
        String server = null;
        String project = null;
        String namespace = null;
        String id = null;
        ServerRunStatisticsData serverrunstatsData = null;
        ServerRunStatistics response = api.projectsServersRunStatsUpdate(server, project, namespace, id, serverrunstatsData);
        // TODO: test validations
    }

    /**
     * Create SSH Tunnel associated to a server
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectsServersSshTunnelsCreateTest() throws ApiException {
        String server = null;
        String project = null;
        String namespace = null;
        SshTunnelData sshtunnelData = null;
        SshTunnel response = api.projectsServersSshTunnelsCreate(server, project, namespace, sshtunnelData);
        // TODO: test validations
    }

    /**
     * Delete an SSH Tunnel associated to a server
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectsServersSshTunnelsDeleteTest() throws ApiException {
        String server = null;
        String project = null;
        String namespace = null;
        String tunnel = null;
        api.projectsServersSshTunnelsDelete(server, project, namespace, tunnel);
        // TODO: test validations
    }

    /**
     * Get SSH Tunnels associated to a server
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectsServersSshTunnelsListTest() throws ApiException {
        String server = null;
        String project = null;
        String namespace = null;
        String limit = null;
        String offset = null;
        String ordering = null;
        List<SshTunnel> response = api.projectsServersSshTunnelsList(server, project, namespace, limit, offset, ordering);
        // TODO: test validations
    }

    /**
     * Get an SSH Tunnel associated to a server
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectsServersSshTunnelsReadTest() throws ApiException {
        String server = null;
        String project = null;
        String namespace = null;
        String tunnel = null;
        SshTunnel response = api.projectsServersSshTunnelsRead(server, project, namespace, tunnel);
        // TODO: test validations
    }

    /**
     * Replace SSH Tunnel associated to a server
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectsServersSshTunnelsReplaceTest() throws ApiException {
        String server = null;
        String project = null;
        String namespace = null;
        String tunnel = null;
        SshTunnelData sshtunnelData = null;
        SshTunnel response = api.projectsServersSshTunnelsReplace(server, project, namespace, tunnel, sshtunnelData);
        // TODO: test validations
    }

    /**
     * Update an SSH Tunnel associated to a server
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectsServersSshTunnelsUpdateTest() throws ApiException {
        String server = null;
        String project = null;
        String namespace = null;
        String tunnel = null;
        SshTunnelData sshtunnelData = null;
        SshTunnel response = api.projectsServersSshTunnelsUpdate(server, project, namespace, tunnel, sshtunnelData);
        // TODO: test validations
    }

    /**
     * Start a server
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectsServersStartTest() throws ApiException {
        String project = null;
        String namespace = null;
        String server = null;
        api.projectsServersStart(project, namespace, server);
        // TODO: test validations
    }

    /**
     * Delete a server&#39;s statistics
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectsServersStatsDeleteTest() throws ApiException {
        String server = null;
        String project = null;
        String namespace = null;
        String id = null;
        api.projectsServersStatsDelete(server, project, namespace, id);
        // TODO: test validations
    }

    /**
     * Retrieve a server&#39;s statistics
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectsServersStatsReadTest() throws ApiException {
        String server = null;
        String project = null;
        String namespace = null;
        String id = null;
        ServerStatistics response = api.projectsServersStatsRead(server, project, namespace, id);
        // TODO: test validations
    }

    /**
     * Replace a server&#39;s statistics
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectsServersStatsReplaceTest() throws ApiException {
        String server = null;
        String project = null;
        String namespace = null;
        String id = null;
        ServerStatisticsData serverstatsData = null;
        ServerStatistics response = api.projectsServersStatsReplace(server, project, namespace, id, serverstatsData);
        // TODO: test validations
    }

    /**
     * Update a server&#39;s statistics
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectsServersStatsUpdateTest() throws ApiException {
        String server = null;
        String project = null;
        String namespace = null;
        String id = null;
        ServerStatisticsData serverstatsData = null;
        ServerStatistics response = api.projectsServersStatsUpdate(server, project, namespace, id, serverstatsData);
        // TODO: test validations
    }

    /**
     * Retrieve server statuses
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectsServersStatusesTest() throws ApiException {
        String project = null;
        String namespace = null;
        List<ServerStatus> response = api.projectsServersStatuses(project, namespace);
        // TODO: test validations
    }

    /**
     * Stop a server
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectsServersStopTest() throws ApiException {
        String project = null;
        String namespace = null;
        String server = null;
        api.projectsServersStop(project, namespace, server);
        // TODO: test validations
    }

    /**
     * Update a server
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectsServersUpdateTest() throws ApiException {
        String project = null;
        String namespace = null;
        String server = null;
        ServerData serverData = null;
        Server response = api.projectsServersUpdate(project, namespace, server, serverData);
        // TODO: test validations
    }

    /**
     * Update a project
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectsUpdateTest() throws ApiException {
        String namespace = null;
        String project = null;
        ProjectData projectData = null;
        Project response = api.projectsUpdate(namespace, project, projectData);
        // TODO: test validations
    }

    /**
     * Create a new server trigger
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void serviceTriggerCreateTest() throws ApiException {
        String server = null;
        String project = null;
        String namespace = null;
        ServerActionData serverAction = null;
        ServerAction response = api.serviceTriggerCreate(server, project, namespace, serverAction);
        // TODO: test validations
    }

    /**
     * Delete a server trigger
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void serviceTriggerDeleteTest() throws ApiException {
        String server = null;
        String project = null;
        String namespace = null;
        String trigger = null;
        api.serviceTriggerDelete(server, project, namespace, trigger);
        // TODO: test validations
    }

    /**
     * Retrieve server triggers
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void serviceTriggerListTest() throws ApiException {
        String server = null;
        String project = null;
        String namespace = null;
        String name = null;
        String limit = null;
        String offset = null;
        String ordering = null;
        List<ServerAction> response = api.serviceTriggerList(server, project, namespace, name, limit, offset, ordering);
        // TODO: test validations
    }

    /**
     * Get a server trigger
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void serviceTriggerReadTest() throws ApiException {
        String server = null;
        String project = null;
        String namespace = null;
        String trigger = null;
        ServerAction response = api.serviceTriggerRead(server, project, namespace, trigger);
        // TODO: test validations
    }

    /**
     * Replace a server trigger
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void serviceTriggerReplaceTest() throws ApiException {
        String server = null;
        String project = null;
        String namespace = null;
        String trigger = null;
        ServerActionData serverAction = null;
        ServerAction response = api.serviceTriggerReplace(server, project, namespace, trigger, serverAction);
        // TODO: test validations
    }

    /**
     * Update a server trigger
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void serviceTriggerUpdateTest() throws ApiException {
        String server = null;
        String project = null;
        String namespace = null;
        String trigger = null;
        ServerActionData serverAction = null;
        ServerAction response = api.serviceTriggerUpdate(server, project, namespace, trigger, serverAction);
        // TODO: test validations
    }

}
