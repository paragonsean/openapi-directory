/*
 * IllumiDesk
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Email;
import org.openapitools.client.model.EmailData;
import org.openapitools.client.model.EmailError;
import org.openapitools.client.model.NotFound;
import org.openapitools.client.model.User;
import org.openapitools.client.model.UserData;
import org.openapitools.client.model.UserError;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for UsersApi
 */
@Disabled
public class UsersApiTest {

    private final UsersApi api = new UsersApi();

    /**
     * A convenience endpoint that is equivalent to GET /v1/users/profiles/&lt;my user id&gt;/
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void meTest() throws ApiException {
        User response = api.me();
        // TODO: test validations
    }

    /**
     * Delete avatar
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void userAvatarDeleteTest() throws ApiException {
        String user = null;
        api.userAvatarDelete(user);
        // TODO: test validations
    }

    /**
     * Retrieve user&#39;s avatar
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void userAvatarGetTest() throws ApiException {
        String user = null;
        api.userAvatarGet(user);
        // TODO: test validations
    }

    /**
     * Add user avatar
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void userAvatarSetTest() throws ApiException {
        String user = null;
        User response = api.userAvatarSet(user);
        // TODO: test validations
    }

    /**
     * Update a project file
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void userAvatarUpdateTest() throws ApiException {
        String user = null;
        User response = api.userAvatarUpdate(user);
        // TODO: test validations
    }

    /**
     * Retrieve account&#39;s API key
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersApiKeyListTest() throws ApiException {
        String user = null;
        api.usersApiKeyList(user);
        // TODO: test validations
    }

    /**
     * Create new user
     *
     * Only admin users can create new users. New users have active status by default.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersCreateTest() throws ApiException {
        UserData userData = null;
        User response = api.usersCreate(userData);
        // TODO: test validations
    }

    /**
     * Delete a user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersDeleteTest() throws ApiException {
        String user = null;
        api.usersDelete(user);
        // TODO: test validations
    }

    /**
     * Create an email address
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersEmailsCreateTest() throws ApiException {
        String user = null;
        EmailData emailData = null;
        Email response = api.usersEmailsCreate(user, emailData);
        // TODO: test validations
    }

    /**
     * Delete an email address
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersEmailsDeleteTest() throws ApiException {
        String emailId = null;
        String user = null;
        api.usersEmailsDelete(emailId, user);
        // TODO: test validations
    }

    /**
     * Retrieve account email addresses
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersEmailsListTest() throws ApiException {
        String user = null;
        String limit = null;
        String offset = null;
        String ordering = null;
        List<Email> response = api.usersEmailsList(user, limit, offset, ordering);
        // TODO: test validations
    }

    /**
     * Retrieve a user&#39;s email addresses
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersEmailsReadTest() throws ApiException {
        String emailId = null;
        String user = null;
        Email response = api.usersEmailsRead(emailId, user);
        // TODO: test validations
    }

    /**
     * Replace an email address
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersEmailsReplaceTest() throws ApiException {
        String emailId = null;
        String user = null;
        EmailData emailData = null;
        Email response = api.usersEmailsReplace(emailId, user, emailData);
        // TODO: test validations
    }

    /**
     * Update an email address
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersEmailsUpdateTest() throws ApiException {
        String emailId = null;
        String user = null;
        EmailData emailData = null;
        Email response = api.usersEmailsUpdate(emailId, user, emailData);
        // TODO: test validations
    }

    /**
     * Get user list
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersListTest() throws ApiException {
        String limit = null;
        String offset = null;
        String username = null;
        String email = null;
        String ordering = null;
        List<User> response = api.usersList(limit, offset, username, email, ordering);
        // TODO: test validations
    }

    /**
     * Retrieve a user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersReadTest() throws ApiException {
        String user = null;
        User response = api.usersRead(user);
        // TODO: test validations
    }

    /**
     * Retrieve an SSH key
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersSshKeyListTest() throws ApiException {
        String user = null;
        api.usersSshKeyList(user);
        // TODO: test validations
    }

    /**
     * Recreate an SSH key
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersSshKeyResetTest() throws ApiException {
        String user = null;
        api.usersSshKeyReset(user);
        // TODO: test validations
    }

    /**
     * Update a user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersUpdateTest() throws ApiException {
        String user = null;
        UserData userData = null;
        User response = api.usersUpdate(user, userData);
        // TODO: test validations
    }

}
