/**
 * IllumiDesk
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGroupUserError.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGroupUserError::OAIGroupUserError(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGroupUserError::OAIGroupUserError() {
    this->initializeModel();
}

OAIGroupUserError::~OAIGroupUserError() {}

void OAIGroupUserError::initializeModel() {

    m_non_field_errors_isSet = false;
    m_non_field_errors_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;
}

void OAIGroupUserError::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGroupUserError::fromJsonObject(QJsonObject json) {

    m_non_field_errors_isValid = ::OpenAPI::fromJsonValue(m_non_field_errors, json[QString("non_field_errors")]);
    m_non_field_errors_isSet = !json[QString("non_field_errors")].isNull() && m_non_field_errors_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;
}

QString OAIGroupUserError::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGroupUserError::asJsonObject() const {
    QJsonObject obj;
    if (m_non_field_errors.size() > 0) {
        obj.insert(QString("non_field_errors"), ::OpenAPI::toJsonValue(m_non_field_errors));
    }
    if (m_user.size() > 0) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    return obj;
}

QList<QString> OAIGroupUserError::getNonFieldErrors() const {
    return m_non_field_errors;
}
void OAIGroupUserError::setNonFieldErrors(const QList<QString> &non_field_errors) {
    m_non_field_errors = non_field_errors;
    m_non_field_errors_isSet = true;
}

bool OAIGroupUserError::is_non_field_errors_Set() const{
    return m_non_field_errors_isSet;
}

bool OAIGroupUserError::is_non_field_errors_Valid() const{
    return m_non_field_errors_isValid;
}

QList<QString> OAIGroupUserError::getUser() const {
    return m_user;
}
void OAIGroupUserError::setUser(const QList<QString> &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAIGroupUserError::is_user_Set() const{
    return m_user_isSet;
}

bool OAIGroupUserError::is_user_Valid() const{
    return m_user_isValid;
}

bool OAIGroupUserError::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_non_field_errors.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_user.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGroupUserError::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
