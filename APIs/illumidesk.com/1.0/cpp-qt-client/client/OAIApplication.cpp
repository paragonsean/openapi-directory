/**
 * IllumiDesk
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApplication.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApplication::OAIApplication(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApplication::OAIApplication() {
    this->initializeModel();
}

OAIApplication::~OAIApplication() {}

void OAIApplication::initializeModel() {

    m_authorization_grant_type_isSet = false;
    m_authorization_grant_type_isValid = false;

    m_client_id_isSet = false;
    m_client_id_isValid = false;

    m_client_secret_isSet = false;
    m_client_secret_isValid = false;

    m_client_type_isSet = false;
    m_client_type_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_redirect_uris_isSet = false;
    m_redirect_uris_isValid = false;
}

void OAIApplication::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApplication::fromJsonObject(QJsonObject json) {

    m_authorization_grant_type_isValid = ::OpenAPI::fromJsonValue(m_authorization_grant_type, json[QString("authorization_grant_type")]);
    m_authorization_grant_type_isSet = !json[QString("authorization_grant_type")].isNull() && m_authorization_grant_type_isValid;

    m_client_id_isValid = ::OpenAPI::fromJsonValue(m_client_id, json[QString("client_id")]);
    m_client_id_isSet = !json[QString("client_id")].isNull() && m_client_id_isValid;

    m_client_secret_isValid = ::OpenAPI::fromJsonValue(m_client_secret, json[QString("client_secret")]);
    m_client_secret_isSet = !json[QString("client_secret")].isNull() && m_client_secret_isValid;

    m_client_type_isValid = ::OpenAPI::fromJsonValue(m_client_type, json[QString("client_type")]);
    m_client_type_isSet = !json[QString("client_type")].isNull() && m_client_type_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_redirect_uris_isValid = ::OpenAPI::fromJsonValue(m_redirect_uris, json[QString("redirect_uris")]);
    m_redirect_uris_isSet = !json[QString("redirect_uris")].isNull() && m_redirect_uris_isValid;
}

QString OAIApplication::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApplication::asJsonObject() const {
    QJsonObject obj;
    if (m_authorization_grant_type_isSet) {
        obj.insert(QString("authorization_grant_type"), ::OpenAPI::toJsonValue(m_authorization_grant_type));
    }
    if (m_client_id_isSet) {
        obj.insert(QString("client_id"), ::OpenAPI::toJsonValue(m_client_id));
    }
    if (m_client_secret_isSet) {
        obj.insert(QString("client_secret"), ::OpenAPI::toJsonValue(m_client_secret));
    }
    if (m_client_type_isSet) {
        obj.insert(QString("client_type"), ::OpenAPI::toJsonValue(m_client_type));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_redirect_uris_isSet) {
        obj.insert(QString("redirect_uris"), ::OpenAPI::toJsonValue(m_redirect_uris));
    }
    return obj;
}

QString OAIApplication::getAuthorizationGrantType() const {
    return m_authorization_grant_type;
}
void OAIApplication::setAuthorizationGrantType(const QString &authorization_grant_type) {
    m_authorization_grant_type = authorization_grant_type;
    m_authorization_grant_type_isSet = true;
}

bool OAIApplication::is_authorization_grant_type_Set() const{
    return m_authorization_grant_type_isSet;
}

bool OAIApplication::is_authorization_grant_type_Valid() const{
    return m_authorization_grant_type_isValid;
}

QString OAIApplication::getClientId() const {
    return m_client_id;
}
void OAIApplication::setClientId(const QString &client_id) {
    m_client_id = client_id;
    m_client_id_isSet = true;
}

bool OAIApplication::is_client_id_Set() const{
    return m_client_id_isSet;
}

bool OAIApplication::is_client_id_Valid() const{
    return m_client_id_isValid;
}

QString OAIApplication::getClientSecret() const {
    return m_client_secret;
}
void OAIApplication::setClientSecret(const QString &client_secret) {
    m_client_secret = client_secret;
    m_client_secret_isSet = true;
}

bool OAIApplication::is_client_secret_Set() const{
    return m_client_secret_isSet;
}

bool OAIApplication::is_client_secret_Valid() const{
    return m_client_secret_isValid;
}

QString OAIApplication::getClientType() const {
    return m_client_type;
}
void OAIApplication::setClientType(const QString &client_type) {
    m_client_type = client_type;
    m_client_type_isSet = true;
}

bool OAIApplication::is_client_type_Set() const{
    return m_client_type_isSet;
}

bool OAIApplication::is_client_type_Valid() const{
    return m_client_type_isValid;
}

QString OAIApplication::getId() const {
    return m_id;
}
void OAIApplication::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIApplication::is_id_Set() const{
    return m_id_isSet;
}

bool OAIApplication::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIApplication::getName() const {
    return m_name;
}
void OAIApplication::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIApplication::is_name_Set() const{
    return m_name_isSet;
}

bool OAIApplication::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIApplication::getRedirectUris() const {
    return m_redirect_uris;
}
void OAIApplication::setRedirectUris(const QString &redirect_uris) {
    m_redirect_uris = redirect_uris;
    m_redirect_uris_isSet = true;
}

bool OAIApplication::is_redirect_uris_Set() const{
    return m_redirect_uris_isSet;
}

bool OAIApplication::is_redirect_uris_Valid() const{
    return m_redirect_uris_isValid;
}

bool OAIApplication::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_authorization_grant_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_secret_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_redirect_uris_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApplication::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
