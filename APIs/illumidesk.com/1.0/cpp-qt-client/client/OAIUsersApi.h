/**
 * IllumiDesk
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIUsersApi_H
#define OAI_OAIUsersApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIEmail.h"
#include "OAIEmailData.h"
#include "OAIEmailError.h"
#include "OAINotFound.h"
#include "OAIUser.h"
#include "OAIUserData.h"
#include "OAIUserError.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIUsersApi : public QObject {
    Q_OBJECT

public:
    OAIUsersApi(const int timeOut = 0);
    ~OAIUsersApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);


    virtual void me();

    /**
    * @param[in]  user QString [required]
    */
    virtual void userAvatarDelete(const QString &user);

    /**
    * @param[in]  user QString [required]
    */
    virtual void userAvatarGet(const QString &user);

    /**
    * @param[in]  user QString [required]
    */
    virtual void userAvatarSet(const QString &user);

    /**
    * @param[in]  user QString [required]
    */
    virtual void userAvatarUpdate(const QString &user);

    /**
    * @param[in]  user QString [required]
    */
    virtual void usersApiKeyList(const QString &user);

    /**
    * @param[in]  user_data OAIUserData [optional]
    */
    virtual void usersCreate(const ::OpenAPI::OptionalParam<OAIUserData> &user_data = ::OpenAPI::OptionalParam<OAIUserData>());

    /**
    * @param[in]  user QString [required]
    */
    virtual void usersDelete(const QString &user);

    /**
    * @param[in]  user QString [required]
    * @param[in]  email_data OAIEmailData [optional]
    */
    virtual void usersEmailsCreate(const QString &user, const ::OpenAPI::OptionalParam<OAIEmailData> &email_data = ::OpenAPI::OptionalParam<OAIEmailData>());

    /**
    * @param[in]  email_id QString [required]
    * @param[in]  user QString [required]
    */
    virtual void usersEmailsDelete(const QString &email_id, const QString &user);

    /**
    * @param[in]  user QString [required]
    * @param[in]  limit QString [optional]
    * @param[in]  offset QString [optional]
    * @param[in]  ordering QString [optional]
    */
    virtual void usersEmailsList(const QString &user, const ::OpenAPI::OptionalParam<QString> &limit = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &offset = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ordering = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  email_id QString [required]
    * @param[in]  user QString [required]
    */
    virtual void usersEmailsRead(const QString &email_id, const QString &user);

    /**
    * @param[in]  email_id QString [required]
    * @param[in]  user QString [required]
    * @param[in]  email_data OAIEmailData [optional]
    */
    virtual void usersEmailsReplace(const QString &email_id, const QString &user, const ::OpenAPI::OptionalParam<OAIEmailData> &email_data = ::OpenAPI::OptionalParam<OAIEmailData>());

    /**
    * @param[in]  email_id QString [required]
    * @param[in]  user QString [required]
    * @param[in]  email_data OAIEmailData [optional]
    */
    virtual void usersEmailsUpdate(const QString &email_id, const QString &user, const ::OpenAPI::OptionalParam<OAIEmailData> &email_data = ::OpenAPI::OptionalParam<OAIEmailData>());

    /**
    * @param[in]  limit QString [optional]
    * @param[in]  offset QString [optional]
    * @param[in]  username QString [optional]
    * @param[in]  email QString [optional]
    * @param[in]  ordering QString [optional]
    */
    virtual void usersList(const ::OpenAPI::OptionalParam<QString> &limit = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &offset = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &username = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &email = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ordering = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  user QString [required]
    */
    virtual void usersRead(const QString &user);

    /**
    * @param[in]  user QString [required]
    */
    virtual void usersSshKeyList(const QString &user);

    /**
    * @param[in]  user QString [required]
    */
    virtual void usersSshKeyReset(const QString &user);

    /**
    * @param[in]  user QString [required]
    * @param[in]  user_data OAIUserData [optional]
    */
    virtual void usersUpdate(const QString &user, const ::OpenAPI::OptionalParam<OAIUserData> &user_data = ::OpenAPI::OptionalParam<OAIUserData>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void meCallback(OAIHttpRequestWorker *worker);
    void userAvatarDeleteCallback(OAIHttpRequestWorker *worker);
    void userAvatarGetCallback(OAIHttpRequestWorker *worker);
    void userAvatarSetCallback(OAIHttpRequestWorker *worker);
    void userAvatarUpdateCallback(OAIHttpRequestWorker *worker);
    void usersApiKeyListCallback(OAIHttpRequestWorker *worker);
    void usersCreateCallback(OAIHttpRequestWorker *worker);
    void usersDeleteCallback(OAIHttpRequestWorker *worker);
    void usersEmailsCreateCallback(OAIHttpRequestWorker *worker);
    void usersEmailsDeleteCallback(OAIHttpRequestWorker *worker);
    void usersEmailsListCallback(OAIHttpRequestWorker *worker);
    void usersEmailsReadCallback(OAIHttpRequestWorker *worker);
    void usersEmailsReplaceCallback(OAIHttpRequestWorker *worker);
    void usersEmailsUpdateCallback(OAIHttpRequestWorker *worker);
    void usersListCallback(OAIHttpRequestWorker *worker);
    void usersReadCallback(OAIHttpRequestWorker *worker);
    void usersSshKeyListCallback(OAIHttpRequestWorker *worker);
    void usersSshKeyResetCallback(OAIHttpRequestWorker *worker);
    void usersUpdateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void meSignal(OAIUser summary);
    void userAvatarDeleteSignal();
    void userAvatarGetSignal();
    void userAvatarSetSignal(OAIUser summary);
    void userAvatarUpdateSignal(OAIUser summary);
    void usersApiKeyListSignal();
    void usersCreateSignal(OAIUser summary);
    void usersDeleteSignal();
    void usersEmailsCreateSignal(OAIEmail summary);
    void usersEmailsDeleteSignal();
    void usersEmailsListSignal(QList<OAIEmail> summary);
    void usersEmailsReadSignal(OAIEmail summary);
    void usersEmailsReplaceSignal(OAIEmail summary);
    void usersEmailsUpdateSignal(OAIEmail summary);
    void usersListSignal(QList<OAIUser> summary);
    void usersReadSignal(OAIUser summary);
    void usersSshKeyListSignal();
    void usersSshKeyResetSignal();
    void usersUpdateSignal(OAIUser summary);


    void meSignalFull(OAIHttpRequestWorker *worker, OAIUser summary);
    void userAvatarDeleteSignalFull(OAIHttpRequestWorker *worker);
    void userAvatarGetSignalFull(OAIHttpRequestWorker *worker);
    void userAvatarSetSignalFull(OAIHttpRequestWorker *worker, OAIUser summary);
    void userAvatarUpdateSignalFull(OAIHttpRequestWorker *worker, OAIUser summary);
    void usersApiKeyListSignalFull(OAIHttpRequestWorker *worker);
    void usersCreateSignalFull(OAIHttpRequestWorker *worker, OAIUser summary);
    void usersDeleteSignalFull(OAIHttpRequestWorker *worker);
    void usersEmailsCreateSignalFull(OAIHttpRequestWorker *worker, OAIEmail summary);
    void usersEmailsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void usersEmailsListSignalFull(OAIHttpRequestWorker *worker, QList<OAIEmail> summary);
    void usersEmailsReadSignalFull(OAIHttpRequestWorker *worker, OAIEmail summary);
    void usersEmailsReplaceSignalFull(OAIHttpRequestWorker *worker, OAIEmail summary);
    void usersEmailsUpdateSignalFull(OAIHttpRequestWorker *worker, OAIEmail summary);
    void usersListSignalFull(OAIHttpRequestWorker *worker, QList<OAIUser> summary);
    void usersReadSignalFull(OAIHttpRequestWorker *worker, OAIUser summary);
    void usersSshKeyListSignalFull(OAIHttpRequestWorker *worker);
    void usersSshKeyResetSignalFull(OAIHttpRequestWorker *worker);
    void usersUpdateSignalFull(OAIHttpRequestWorker *worker, OAIUser summary);

    Q_DECL_DEPRECATED_X("Use meSignalError() instead")
    void meSignalE(OAIUser summary, QNetworkReply::NetworkError error_type, QString error_str);
    void meSignalError(OAIUser summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userAvatarDeleteSignalError() instead")
    void userAvatarDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void userAvatarDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userAvatarGetSignalError() instead")
    void userAvatarGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void userAvatarGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userAvatarSetSignalError() instead")
    void userAvatarSetSignalE(OAIUser summary, QNetworkReply::NetworkError error_type, QString error_str);
    void userAvatarSetSignalError(OAIUser summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userAvatarUpdateSignalError() instead")
    void userAvatarUpdateSignalE(OAIUser summary, QNetworkReply::NetworkError error_type, QString error_str);
    void userAvatarUpdateSignalError(OAIUser summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersApiKeyListSignalError() instead")
    void usersApiKeyListSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void usersApiKeyListSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersCreateSignalError() instead")
    void usersCreateSignalE(OAIUser summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usersCreateSignalError(OAIUser summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersDeleteSignalError() instead")
    void usersDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void usersDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersEmailsCreateSignalError() instead")
    void usersEmailsCreateSignalE(OAIEmail summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usersEmailsCreateSignalError(OAIEmail summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersEmailsDeleteSignalError() instead")
    void usersEmailsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void usersEmailsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersEmailsListSignalError() instead")
    void usersEmailsListSignalE(QList<OAIEmail> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usersEmailsListSignalError(QList<OAIEmail> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersEmailsReadSignalError() instead")
    void usersEmailsReadSignalE(OAIEmail summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usersEmailsReadSignalError(OAIEmail summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersEmailsReplaceSignalError() instead")
    void usersEmailsReplaceSignalE(OAIEmail summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usersEmailsReplaceSignalError(OAIEmail summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersEmailsUpdateSignalError() instead")
    void usersEmailsUpdateSignalE(OAIEmail summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usersEmailsUpdateSignalError(OAIEmail summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersListSignalError() instead")
    void usersListSignalE(QList<OAIUser> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usersListSignalError(QList<OAIUser> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersReadSignalError() instead")
    void usersReadSignalE(OAIUser summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usersReadSignalError(OAIUser summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersSshKeyListSignalError() instead")
    void usersSshKeyListSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void usersSshKeyListSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersSshKeyResetSignalError() instead")
    void usersSshKeyResetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void usersSshKeyResetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersUpdateSignalError() instead")
    void usersUpdateSignalE(OAIUser summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usersUpdateSignalError(OAIUser summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use meSignalErrorFull() instead")
    void meSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void meSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userAvatarDeleteSignalErrorFull() instead")
    void userAvatarDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void userAvatarDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userAvatarGetSignalErrorFull() instead")
    void userAvatarGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void userAvatarGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userAvatarSetSignalErrorFull() instead")
    void userAvatarSetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void userAvatarSetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userAvatarUpdateSignalErrorFull() instead")
    void userAvatarUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void userAvatarUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersApiKeyListSignalErrorFull() instead")
    void usersApiKeyListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersApiKeyListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersCreateSignalErrorFull() instead")
    void usersCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersDeleteSignalErrorFull() instead")
    void usersDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersEmailsCreateSignalErrorFull() instead")
    void usersEmailsCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersEmailsCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersEmailsDeleteSignalErrorFull() instead")
    void usersEmailsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersEmailsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersEmailsListSignalErrorFull() instead")
    void usersEmailsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersEmailsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersEmailsReadSignalErrorFull() instead")
    void usersEmailsReadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersEmailsReadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersEmailsReplaceSignalErrorFull() instead")
    void usersEmailsReplaceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersEmailsReplaceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersEmailsUpdateSignalErrorFull() instead")
    void usersEmailsUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersEmailsUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersListSignalErrorFull() instead")
    void usersListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersReadSignalErrorFull() instead")
    void usersReadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersReadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersSshKeyListSignalErrorFull() instead")
    void usersSshKeyListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersSshKeyListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersSshKeyResetSignalErrorFull() instead")
    void usersSshKeyResetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersSshKeyResetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersUpdateSignalErrorFull() instead")
    void usersUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
