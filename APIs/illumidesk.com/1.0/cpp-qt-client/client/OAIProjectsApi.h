/**
 * IllumiDesk
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIProjectsApi_H
#define OAI_OAIProjectsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICollaborator.h"
#include "OAICollaboratorData.h"
#include "OAICollaboratorError.h"
#include "OAIDeployment.h"
#include "OAIDeploymentData.h"
#include "OAIDeploymentError.h"
#include "OAIHttpFileElement.h"
#include "OAIJWT.h"
#include "OAINotFound.h"
#include "OAIProject.h"
#include "OAIProjectData.h"
#include "OAIProjectError.h"
#include "OAIProjectFile.h"
#include "OAIProjectFileError.h"
#include "OAIProject_copy_check_request.h"
#include "OAIProject_copy_request.h"
#include "OAIServer.h"
#include "OAIServerAction.h"
#include "OAIServerActionData.h"
#include "OAIServerActionError.h"
#include "OAIServerData.h"
#include "OAIServerError.h"
#include "OAIServerRunStatistics.h"
#include "OAIServerRunStatisticsData.h"
#include "OAIServerRunStatisticsError.h"
#include "OAIServerStatistics.h"
#include "OAIServerStatisticsData.h"
#include "OAIServerStatisticsError.h"
#include "OAIServerStatus.h"
#include "OAISshTunnel.h"
#include "OAISshTunnelData.h"
#include "OAISshTunnelError.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIProjectsApi : public QObject {
    Q_OBJECT

public:
    OAIProjectsApi(const int timeOut = 0);
    ~OAIProjectsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  r_namespace QString [required]
    * @param[in]  project_copy_data OAIProject_copy_request [required]
    */
    virtual void projectCopy(const QString &r_namespace, const OAIProject_copy_request &project_copy_data);

    /**
    * @param[in]  r_namespace QString [required]
    * @param[in]  project_copy_data OAIProject_copy_check_request [required]
    */
    virtual void projectCopyCheck(const QString &r_namespace, const OAIProject_copy_check_request &project_copy_data);

    /**
    * @param[in]  project QString [required]
    * @param[in]  r_namespace QString [required]
    * @param[in]  collaborator_data OAICollaboratorData [optional]
    */
    virtual void projectsCollaboratorsCreate(const QString &project, const QString &r_namespace, const ::OpenAPI::OptionalParam<OAICollaboratorData> &collaborator_data = ::OpenAPI::OptionalParam<OAICollaboratorData>());

    /**
    * @param[in]  project QString [required]
    * @param[in]  r_namespace QString [required]
    * @param[in]  collaborator QString [required]
    */
    virtual void projectsCollaboratorsDelete(const QString &project, const QString &r_namespace, const QString &collaborator);

    /**
    * @param[in]  project QString [required]
    * @param[in]  r_namespace QString [required]
    * @param[in]  limit QString [optional]
    * @param[in]  offset QString [optional]
    * @param[in]  ordering QString [optional]
    */
    virtual void projectsCollaboratorsList(const QString &project, const QString &r_namespace, const ::OpenAPI::OptionalParam<QString> &limit = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &offset = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ordering = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  project QString [required]
    * @param[in]  r_namespace QString [required]
    * @param[in]  collaborator QString [required]
    */
    virtual void projectsCollaboratorsRead(const QString &project, const QString &r_namespace, const QString &collaborator);

    /**
    * @param[in]  project QString [required]
    * @param[in]  r_namespace QString [required]
    * @param[in]  collaborator QString [required]
    * @param[in]  collaborator_data OAICollaboratorData [optional]
    */
    virtual void projectsCollaboratorsUpdate(const QString &project, const QString &r_namespace, const QString &collaborator, const ::OpenAPI::OptionalParam<OAICollaboratorData> &collaborator_data = ::OpenAPI::OptionalParam<OAICollaboratorData>());

    /**
    * @param[in]  r_namespace QString [required]
    * @param[in]  project_data OAIProjectData [optional]
    */
    virtual void projectsCreate(const QString &r_namespace, const ::OpenAPI::OptionalParam<OAIProjectData> &project_data = ::OpenAPI::OptionalParam<OAIProjectData>());

    /**
    * @param[in]  r_namespace QString [required]
    * @param[in]  project QString [required]
    */
    virtual void projectsDelete(const QString &r_namespace, const QString &project);

    /**
    * @param[in]  project QString [required]
    * @param[in]  r_namespace QString [required]
    * @param[in]  deployment QString [required]
    */
    virtual void projectsDeploymentDelete(const QString &project, const QString &r_namespace, const QString &deployment);

    /**
    * @param[in]  project QString [required]
    * @param[in]  r_namespace QString [required]
    * @param[in]  deployment_data OAIDeploymentData [optional]
    */
    virtual void projectsDeploymentsCreate(const QString &project, const QString &r_namespace, const ::OpenAPI::OptionalParam<OAIDeploymentData> &deployment_data = ::OpenAPI::OptionalParam<OAIDeploymentData>());

    /**
    * @param[in]  project QString [required]
    * @param[in]  r_namespace QString [required]
    * @param[in]  deployment QString [required]
    */
    virtual void projectsDeploymentsDeploy(const QString &project, const QString &r_namespace, const QString &deployment);

    /**
    * @param[in]  project QString [required]
    * @param[in]  r_namespace QString [required]
    * @param[in]  limit QString [optional]
    * @param[in]  offset QString [optional]
    * @param[in]  name QString [optional]
    * @param[in]  ordering QString [optional]
    */
    virtual void projectsDeploymentsList(const QString &project, const QString &r_namespace, const ::OpenAPI::OptionalParam<QString> &limit = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &offset = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ordering = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  project QString [required]
    * @param[in]  r_namespace QString [required]
    * @param[in]  deployment QString [required]
    */
    virtual void projectsDeploymentsRead(const QString &project, const QString &r_namespace, const QString &deployment);

    /**
    * @param[in]  project QString [required]
    * @param[in]  r_namespace QString [required]
    * @param[in]  deployment QString [required]
    * @param[in]  deployment_data OAIDeploymentData [optional]
    */
    virtual void projectsDeploymentsReplace(const QString &project, const QString &r_namespace, const QString &deployment, const ::OpenAPI::OptionalParam<OAIDeploymentData> &deployment_data = ::OpenAPI::OptionalParam<OAIDeploymentData>());

    /**
    * @param[in]  project QString [required]
    * @param[in]  r_namespace QString [required]
    * @param[in]  deployment QString [required]
    * @param[in]  deployment_data OAIDeploymentData [optional]
    */
    virtual void projectsDeploymentsUpdate(const QString &project, const QString &r_namespace, const QString &deployment, const ::OpenAPI::OptionalParam<OAIDeploymentData> &deployment_data = ::OpenAPI::OptionalParam<OAIDeploymentData>());

    /**
    * @param[in]  r_namespace QString [required]
    * @param[in]  limit QString [optional]
    * @param[in]  offset QString [optional]
    * @param[in]  r_private QString [optional]
    * @param[in]  name QString [optional]
    * @param[in]  ordering QString [optional]
    */
    virtual void projectsList(const QString &r_namespace, const ::OpenAPI::OptionalParam<QString> &limit = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &offset = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &r_private = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ordering = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  project QString [required]
    * @param[in]  r_namespace QString [required]
    * @param[in]  file OAIHttpFileElement [optional]
    * @param[in]  base64_data QString [optional]
    * @param[in]  name QString [optional]
    * @param[in]  path QString [optional]
    */
    virtual void projectsProjectFilesCreate(const QString &project, const QString &r_namespace, const ::OpenAPI::OptionalParam<OAIHttpFileElement> &file = ::OpenAPI::OptionalParam<OAIHttpFileElement>(), const ::OpenAPI::OptionalParam<QString> &base64_data = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &path = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  project QString [required]
    * @param[in]  r_namespace QString [required]
    * @param[in]  id QString [required]
    */
    virtual void projectsProjectFilesDelete(const QString &project, const QString &r_namespace, const QString &id);

    /**
    * @param[in]  project QString [required]
    * @param[in]  r_namespace QString [required]
    * @param[in]  limit QString [optional]
    * @param[in]  offset QString [optional]
    * @param[in]  ordering QString [optional]
    * @param[in]  filename QString [optional]
    * @param[in]  content QString [optional]
    */
    virtual void projectsProjectFilesList(const QString &project, const QString &r_namespace, const ::OpenAPI::OptionalParam<QString> &limit = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &offset = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ordering = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filename = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &content = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  project QString [required]
    * @param[in]  r_namespace QString [required]
    * @param[in]  id QString [required]
    * @param[in]  content QString [optional]
    */
    virtual void projectsProjectFilesRead(const QString &project, const QString &r_namespace, const QString &id, const ::OpenAPI::OptionalParam<QString> &content = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  project QString [required]
    * @param[in]  r_namespace QString [required]
    * @param[in]  id QString [required]
    * @param[in]  file OAIHttpFileElement [optional]
    * @param[in]  base64_data QString [optional]
    * @param[in]  name QString [optional]
    * @param[in]  path QString [optional]
    */
    virtual void projectsProjectFilesReplace(const QString &project, const QString &r_namespace, const QString &id, const ::OpenAPI::OptionalParam<OAIHttpFileElement> &file = ::OpenAPI::OptionalParam<OAIHttpFileElement>(), const ::OpenAPI::OptionalParam<QString> &base64_data = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &path = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  project QString [required]
    * @param[in]  r_namespace QString [required]
    * @param[in]  id QString [required]
    * @param[in]  file OAIHttpFileElement [optional]
    * @param[in]  base64_data QString [optional]
    * @param[in]  name QString [optional]
    * @param[in]  path QString [optional]
    */
    virtual void projectsProjectFilesUpdate(const QString &project, const QString &r_namespace, const QString &id, const ::OpenAPI::OptionalParam<OAIHttpFileElement> &file = ::OpenAPI::OptionalParam<OAIHttpFileElement>(), const ::OpenAPI::OptionalParam<QString> &base64_data = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &path = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  r_namespace QString [required]
    * @param[in]  project QString [required]
    */
    virtual void projectsRead(const QString &r_namespace, const QString &project);

    /**
    * @param[in]  r_namespace QString [required]
    * @param[in]  project QString [required]
    * @param[in]  project_data OAIProjectData [optional]
    */
    virtual void projectsReplace(const QString &r_namespace, const QString &project, const ::OpenAPI::OptionalParam<OAIProjectData> &project_data = ::OpenAPI::OptionalParam<OAIProjectData>());

    /**
    * @param[in]  project QString [required]
    * @param[in]  r_namespace QString [required]
    * @param[in]  server QString [required]
    */
    virtual void projectsServersApiKey(const QString &project, const QString &r_namespace, const QString &server);

    /**
    * @param[in]  project QString [required]
    * @param[in]  r_namespace QString [required]
    * @param[in]  server QString [required]
    */
    virtual void projectsServersAuth(const QString &project, const QString &r_namespace, const QString &server);

    /**
    * @param[in]  project QString [required]
    * @param[in]  r_namespace QString [required]
    * @param[in]  server_data OAIServerData [optional]
    */
    virtual void projectsServersCreate(const QString &project, const QString &r_namespace, const ::OpenAPI::OptionalParam<OAIServerData> &server_data = ::OpenAPI::OptionalParam<OAIServerData>());

    /**
    * @param[in]  project QString [required]
    * @param[in]  r_namespace QString [required]
    * @param[in]  server QString [required]
    */
    virtual void projectsServersDelete(const QString &project, const QString &r_namespace, const QString &server);

    /**
    * @param[in]  project QString [required]
    * @param[in]  r_namespace QString [required]
    * @param[in]  limit QString [optional]
    * @param[in]  offset QString [optional]
    * @param[in]  name QString [optional]
    * @param[in]  ordering QString [optional]
    */
    virtual void projectsServersList(const QString &project, const QString &r_namespace, const ::OpenAPI::OptionalParam<QString> &limit = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &offset = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ordering = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  project QString [required]
    * @param[in]  r_namespace QString [required]
    * @param[in]  server QString [required]
    */
    virtual void projectsServersRead(const QString &project, const QString &r_namespace, const QString &server);

    /**
    * @param[in]  project QString [required]
    * @param[in]  r_namespace QString [required]
    * @param[in]  server QString [required]
    * @param[in]  server_data OAIServerData [optional]
    */
    virtual void projectsServersReplace(const QString &project, const QString &r_namespace, const QString &server, const ::OpenAPI::OptionalParam<OAIServerData> &server_data = ::OpenAPI::OptionalParam<OAIServerData>());

    /**
    * @param[in]  server QString [required]
    * @param[in]  project QString [required]
    * @param[in]  r_namespace QString [required]
    * @param[in]  serverrunstats_data OAIServerRunStatisticsData [optional]
    */
    virtual void projectsServersRunStatsCreate(const QString &server, const QString &project, const QString &r_namespace, const ::OpenAPI::OptionalParam<OAIServerRunStatisticsData> &serverrunstats_data = ::OpenAPI::OptionalParam<OAIServerRunStatisticsData>());

    /**
    * @param[in]  server QString [required]
    * @param[in]  project QString [required]
    * @param[in]  r_namespace QString [required]
    * @param[in]  id QString [required]
    */
    virtual void projectsServersRunStatsDelete(const QString &server, const QString &project, const QString &r_namespace, const QString &id);

    /**
    * @param[in]  server QString [required]
    * @param[in]  project QString [required]
    * @param[in]  r_namespace QString [required]
    * @param[in]  id QString [required]
    */
    virtual void projectsServersRunStatsRead(const QString &server, const QString &project, const QString &r_namespace, const QString &id);

    /**
    * @param[in]  server QString [required]
    * @param[in]  project QString [required]
    * @param[in]  r_namespace QString [required]
    * @param[in]  id QString [required]
    * @param[in]  serverrunstats_data OAIServerRunStatisticsData [optional]
    */
    virtual void projectsServersRunStatsReplace(const QString &server, const QString &project, const QString &r_namespace, const QString &id, const ::OpenAPI::OptionalParam<OAIServerRunStatisticsData> &serverrunstats_data = ::OpenAPI::OptionalParam<OAIServerRunStatisticsData>());

    /**
    * @param[in]  server QString [required]
    * @param[in]  project QString [required]
    * @param[in]  r_namespace QString [required]
    * @param[in]  id QString [required]
    * @param[in]  serverrunstats_data OAIServerRunStatisticsData [optional]
    */
    virtual void projectsServersRunStatsUpdate(const QString &server, const QString &project, const QString &r_namespace, const QString &id, const ::OpenAPI::OptionalParam<OAIServerRunStatisticsData> &serverrunstats_data = ::OpenAPI::OptionalParam<OAIServerRunStatisticsData>());

    /**
    * @param[in]  server QString [required]
    * @param[in]  project QString [required]
    * @param[in]  r_namespace QString [required]
    * @param[in]  sshtunnel_data OAISshTunnelData [optional]
    */
    virtual void projectsServersSshTunnelsCreate(const QString &server, const QString &project, const QString &r_namespace, const ::OpenAPI::OptionalParam<OAISshTunnelData> &sshtunnel_data = ::OpenAPI::OptionalParam<OAISshTunnelData>());

    /**
    * @param[in]  server QString [required]
    * @param[in]  project QString [required]
    * @param[in]  r_namespace QString [required]
    * @param[in]  tunnel QString [required]
    */
    virtual void projectsServersSshTunnelsDelete(const QString &server, const QString &project, const QString &r_namespace, const QString &tunnel);

    /**
    * @param[in]  server QString [required]
    * @param[in]  project QString [required]
    * @param[in]  r_namespace QString [required]
    * @param[in]  limit QString [optional]
    * @param[in]  offset QString [optional]
    * @param[in]  ordering QString [optional]
    */
    virtual void projectsServersSshTunnelsList(const QString &server, const QString &project, const QString &r_namespace, const ::OpenAPI::OptionalParam<QString> &limit = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &offset = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ordering = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  server QString [required]
    * @param[in]  project QString [required]
    * @param[in]  r_namespace QString [required]
    * @param[in]  tunnel QString [required]
    */
    virtual void projectsServersSshTunnelsRead(const QString &server, const QString &project, const QString &r_namespace, const QString &tunnel);

    /**
    * @param[in]  server QString [required]
    * @param[in]  project QString [required]
    * @param[in]  r_namespace QString [required]
    * @param[in]  tunnel QString [required]
    * @param[in]  sshtunnel_data OAISshTunnelData [optional]
    */
    virtual void projectsServersSshTunnelsReplace(const QString &server, const QString &project, const QString &r_namespace, const QString &tunnel, const ::OpenAPI::OptionalParam<OAISshTunnelData> &sshtunnel_data = ::OpenAPI::OptionalParam<OAISshTunnelData>());

    /**
    * @param[in]  server QString [required]
    * @param[in]  project QString [required]
    * @param[in]  r_namespace QString [required]
    * @param[in]  tunnel QString [required]
    * @param[in]  sshtunnel_data OAISshTunnelData [optional]
    */
    virtual void projectsServersSshTunnelsUpdate(const QString &server, const QString &project, const QString &r_namespace, const QString &tunnel, const ::OpenAPI::OptionalParam<OAISshTunnelData> &sshtunnel_data = ::OpenAPI::OptionalParam<OAISshTunnelData>());

    /**
    * @param[in]  project QString [required]
    * @param[in]  r_namespace QString [required]
    * @param[in]  server QString [required]
    */
    virtual void projectsServersStart(const QString &project, const QString &r_namespace, const QString &server);

    /**
    * @param[in]  server QString [required]
    * @param[in]  project QString [required]
    * @param[in]  r_namespace QString [required]
    * @param[in]  id QString [required]
    */
    virtual void projectsServersStatsDelete(const QString &server, const QString &project, const QString &r_namespace, const QString &id);

    /**
    * @param[in]  server QString [required]
    * @param[in]  project QString [required]
    * @param[in]  r_namespace QString [required]
    * @param[in]  id QString [required]
    */
    virtual void projectsServersStatsRead(const QString &server, const QString &project, const QString &r_namespace, const QString &id);

    /**
    * @param[in]  server QString [required]
    * @param[in]  project QString [required]
    * @param[in]  r_namespace QString [required]
    * @param[in]  id QString [required]
    * @param[in]  serverstats_data OAIServerStatisticsData [optional]
    */
    virtual void projectsServersStatsReplace(const QString &server, const QString &project, const QString &r_namespace, const QString &id, const ::OpenAPI::OptionalParam<OAIServerStatisticsData> &serverstats_data = ::OpenAPI::OptionalParam<OAIServerStatisticsData>());

    /**
    * @param[in]  server QString [required]
    * @param[in]  project QString [required]
    * @param[in]  r_namespace QString [required]
    * @param[in]  id QString [required]
    * @param[in]  serverstats_data OAIServerStatisticsData [optional]
    */
    virtual void projectsServersStatsUpdate(const QString &server, const QString &project, const QString &r_namespace, const QString &id, const ::OpenAPI::OptionalParam<OAIServerStatisticsData> &serverstats_data = ::OpenAPI::OptionalParam<OAIServerStatisticsData>());

    /**
    * @param[in]  project QString [required]
    * @param[in]  r_namespace QString [required]
    */
    virtual void projectsServersStatuses(const QString &project, const QString &r_namespace);

    /**
    * @param[in]  project QString [required]
    * @param[in]  r_namespace QString [required]
    * @param[in]  server QString [required]
    */
    virtual void projectsServersStop(const QString &project, const QString &r_namespace, const QString &server);

    /**
    * @param[in]  project QString [required]
    * @param[in]  r_namespace QString [required]
    * @param[in]  server QString [required]
    * @param[in]  server_data OAIServerData [optional]
    */
    virtual void projectsServersUpdate(const QString &project, const QString &r_namespace, const QString &server, const ::OpenAPI::OptionalParam<OAIServerData> &server_data = ::OpenAPI::OptionalParam<OAIServerData>());

    /**
    * @param[in]  r_namespace QString [required]
    * @param[in]  project QString [required]
    * @param[in]  project_data OAIProjectData [optional]
    */
    virtual void projectsUpdate(const QString &r_namespace, const QString &project, const ::OpenAPI::OptionalParam<OAIProjectData> &project_data = ::OpenAPI::OptionalParam<OAIProjectData>());

    /**
    * @param[in]  server QString [required]
    * @param[in]  project QString [required]
    * @param[in]  r_namespace QString [required]
    * @param[in]  server_action OAIServerActionData [optional]
    */
    virtual void serviceTriggerCreate(const QString &server, const QString &project, const QString &r_namespace, const ::OpenAPI::OptionalParam<OAIServerActionData> &server_action = ::OpenAPI::OptionalParam<OAIServerActionData>());

    /**
    * @param[in]  server QString [required]
    * @param[in]  project QString [required]
    * @param[in]  r_namespace QString [required]
    * @param[in]  trigger QString [required]
    */
    virtual void serviceTriggerDelete(const QString &server, const QString &project, const QString &r_namespace, const QString &trigger);

    /**
    * @param[in]  server QString [required]
    * @param[in]  project QString [required]
    * @param[in]  r_namespace QString [required]
    * @param[in]  name QString [optional]
    * @param[in]  limit QString [optional]
    * @param[in]  offset QString [optional]
    * @param[in]  ordering QString [optional]
    */
    virtual void serviceTriggerList(const QString &server, const QString &project, const QString &r_namespace, const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &limit = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &offset = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ordering = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  server QString [required]
    * @param[in]  project QString [required]
    * @param[in]  r_namespace QString [required]
    * @param[in]  trigger QString [required]
    */
    virtual void serviceTriggerRead(const QString &server, const QString &project, const QString &r_namespace, const QString &trigger);

    /**
    * @param[in]  server QString [required]
    * @param[in]  project QString [required]
    * @param[in]  r_namespace QString [required]
    * @param[in]  trigger QString [required]
    * @param[in]  server_action OAIServerActionData [optional]
    */
    virtual void serviceTriggerReplace(const QString &server, const QString &project, const QString &r_namespace, const QString &trigger, const ::OpenAPI::OptionalParam<OAIServerActionData> &server_action = ::OpenAPI::OptionalParam<OAIServerActionData>());

    /**
    * @param[in]  server QString [required]
    * @param[in]  project QString [required]
    * @param[in]  r_namespace QString [required]
    * @param[in]  trigger QString [required]
    * @param[in]  server_action OAIServerActionData [optional]
    */
    virtual void serviceTriggerUpdate(const QString &server, const QString &project, const QString &r_namespace, const QString &trigger, const ::OpenAPI::OptionalParam<OAIServerActionData> &server_action = ::OpenAPI::OptionalParam<OAIServerActionData>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void projectCopyCallback(OAIHttpRequestWorker *worker);
    void projectCopyCheckCallback(OAIHttpRequestWorker *worker);
    void projectsCollaboratorsCreateCallback(OAIHttpRequestWorker *worker);
    void projectsCollaboratorsDeleteCallback(OAIHttpRequestWorker *worker);
    void projectsCollaboratorsListCallback(OAIHttpRequestWorker *worker);
    void projectsCollaboratorsReadCallback(OAIHttpRequestWorker *worker);
    void projectsCollaboratorsUpdateCallback(OAIHttpRequestWorker *worker);
    void projectsCreateCallback(OAIHttpRequestWorker *worker);
    void projectsDeleteCallback(OAIHttpRequestWorker *worker);
    void projectsDeploymentDeleteCallback(OAIHttpRequestWorker *worker);
    void projectsDeploymentsCreateCallback(OAIHttpRequestWorker *worker);
    void projectsDeploymentsDeployCallback(OAIHttpRequestWorker *worker);
    void projectsDeploymentsListCallback(OAIHttpRequestWorker *worker);
    void projectsDeploymentsReadCallback(OAIHttpRequestWorker *worker);
    void projectsDeploymentsReplaceCallback(OAIHttpRequestWorker *worker);
    void projectsDeploymentsUpdateCallback(OAIHttpRequestWorker *worker);
    void projectsListCallback(OAIHttpRequestWorker *worker);
    void projectsProjectFilesCreateCallback(OAIHttpRequestWorker *worker);
    void projectsProjectFilesDeleteCallback(OAIHttpRequestWorker *worker);
    void projectsProjectFilesListCallback(OAIHttpRequestWorker *worker);
    void projectsProjectFilesReadCallback(OAIHttpRequestWorker *worker);
    void projectsProjectFilesReplaceCallback(OAIHttpRequestWorker *worker);
    void projectsProjectFilesUpdateCallback(OAIHttpRequestWorker *worker);
    void projectsReadCallback(OAIHttpRequestWorker *worker);
    void projectsReplaceCallback(OAIHttpRequestWorker *worker);
    void projectsServersApiKeyCallback(OAIHttpRequestWorker *worker);
    void projectsServersAuthCallback(OAIHttpRequestWorker *worker);
    void projectsServersCreateCallback(OAIHttpRequestWorker *worker);
    void projectsServersDeleteCallback(OAIHttpRequestWorker *worker);
    void projectsServersListCallback(OAIHttpRequestWorker *worker);
    void projectsServersReadCallback(OAIHttpRequestWorker *worker);
    void projectsServersReplaceCallback(OAIHttpRequestWorker *worker);
    void projectsServersRunStatsCreateCallback(OAIHttpRequestWorker *worker);
    void projectsServersRunStatsDeleteCallback(OAIHttpRequestWorker *worker);
    void projectsServersRunStatsReadCallback(OAIHttpRequestWorker *worker);
    void projectsServersRunStatsReplaceCallback(OAIHttpRequestWorker *worker);
    void projectsServersRunStatsUpdateCallback(OAIHttpRequestWorker *worker);
    void projectsServersSshTunnelsCreateCallback(OAIHttpRequestWorker *worker);
    void projectsServersSshTunnelsDeleteCallback(OAIHttpRequestWorker *worker);
    void projectsServersSshTunnelsListCallback(OAIHttpRequestWorker *worker);
    void projectsServersSshTunnelsReadCallback(OAIHttpRequestWorker *worker);
    void projectsServersSshTunnelsReplaceCallback(OAIHttpRequestWorker *worker);
    void projectsServersSshTunnelsUpdateCallback(OAIHttpRequestWorker *worker);
    void projectsServersStartCallback(OAIHttpRequestWorker *worker);
    void projectsServersStatsDeleteCallback(OAIHttpRequestWorker *worker);
    void projectsServersStatsReadCallback(OAIHttpRequestWorker *worker);
    void projectsServersStatsReplaceCallback(OAIHttpRequestWorker *worker);
    void projectsServersStatsUpdateCallback(OAIHttpRequestWorker *worker);
    void projectsServersStatusesCallback(OAIHttpRequestWorker *worker);
    void projectsServersStopCallback(OAIHttpRequestWorker *worker);
    void projectsServersUpdateCallback(OAIHttpRequestWorker *worker);
    void projectsUpdateCallback(OAIHttpRequestWorker *worker);
    void serviceTriggerCreateCallback(OAIHttpRequestWorker *worker);
    void serviceTriggerDeleteCallback(OAIHttpRequestWorker *worker);
    void serviceTriggerListCallback(OAIHttpRequestWorker *worker);
    void serviceTriggerReadCallback(OAIHttpRequestWorker *worker);
    void serviceTriggerReplaceCallback(OAIHttpRequestWorker *worker);
    void serviceTriggerUpdateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void projectCopySignal(OAIProject summary);
    void projectCopyCheckSignal();
    void projectsCollaboratorsCreateSignal(OAICollaborator summary);
    void projectsCollaboratorsDeleteSignal();
    void projectsCollaboratorsListSignal(QList<OAICollaborator> summary);
    void projectsCollaboratorsReadSignal(OAICollaborator summary);
    void projectsCollaboratorsUpdateSignal(OAICollaborator summary);
    void projectsCreateSignal(OAIProject summary);
    void projectsDeleteSignal();
    void projectsDeploymentDeleteSignal();
    void projectsDeploymentsCreateSignal(OAIDeployment summary);
    void projectsDeploymentsDeploySignal();
    void projectsDeploymentsListSignal(QList<OAIDeployment> summary);
    void projectsDeploymentsReadSignal(OAIDeployment summary);
    void projectsDeploymentsReplaceSignal(OAIDeployment summary);
    void projectsDeploymentsUpdateSignal(OAIDeployment summary);
    void projectsListSignal(QList<OAIProject> summary);
    void projectsProjectFilesCreateSignal(OAIProjectFile summary);
    void projectsProjectFilesDeleteSignal();
    void projectsProjectFilesListSignal(QList<OAIProjectFile> summary);
    void projectsProjectFilesReadSignal(OAIProjectFile summary);
    void projectsProjectFilesReplaceSignal(OAIProjectFile summary);
    void projectsProjectFilesUpdateSignal(OAIProjectFile summary);
    void projectsReadSignal(OAIProject summary);
    void projectsReplaceSignal(OAIProject summary);
    void projectsServersApiKeySignal(OAIJWT summary);
    void projectsServersAuthSignal();
    void projectsServersCreateSignal(OAIServer summary);
    void projectsServersDeleteSignal();
    void projectsServersListSignal(QList<OAIServer> summary);
    void projectsServersReadSignal(OAIServer summary);
    void projectsServersReplaceSignal(OAIServer summary);
    void projectsServersRunStatsCreateSignal(OAIServerRunStatistics summary);
    void projectsServersRunStatsDeleteSignal();
    void projectsServersRunStatsReadSignal(OAIServerRunStatistics summary);
    void projectsServersRunStatsReplaceSignal(OAIServerRunStatistics summary);
    void projectsServersRunStatsUpdateSignal(OAIServerRunStatistics summary);
    void projectsServersSshTunnelsCreateSignal(OAISshTunnel summary);
    void projectsServersSshTunnelsDeleteSignal();
    void projectsServersSshTunnelsListSignal(QList<OAISshTunnel> summary);
    void projectsServersSshTunnelsReadSignal(OAISshTunnel summary);
    void projectsServersSshTunnelsReplaceSignal(OAISshTunnel summary);
    void projectsServersSshTunnelsUpdateSignal(OAISshTunnel summary);
    void projectsServersStartSignal();
    void projectsServersStatsDeleteSignal();
    void projectsServersStatsReadSignal(OAIServerStatistics summary);
    void projectsServersStatsReplaceSignal(OAIServerStatistics summary);
    void projectsServersStatsUpdateSignal(OAIServerStatistics summary);
    void projectsServersStatusesSignal(QList<OAIServerStatus> summary);
    void projectsServersStopSignal();
    void projectsServersUpdateSignal(OAIServer summary);
    void projectsUpdateSignal(OAIProject summary);
    void serviceTriggerCreateSignal(OAIServerAction summary);
    void serviceTriggerDeleteSignal();
    void serviceTriggerListSignal(QList<OAIServerAction> summary);
    void serviceTriggerReadSignal(OAIServerAction summary);
    void serviceTriggerReplaceSignal(OAIServerAction summary);
    void serviceTriggerUpdateSignal(OAIServerAction summary);


    void projectCopySignalFull(OAIHttpRequestWorker *worker, OAIProject summary);
    void projectCopyCheckSignalFull(OAIHttpRequestWorker *worker);
    void projectsCollaboratorsCreateSignalFull(OAIHttpRequestWorker *worker, OAICollaborator summary);
    void projectsCollaboratorsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void projectsCollaboratorsListSignalFull(OAIHttpRequestWorker *worker, QList<OAICollaborator> summary);
    void projectsCollaboratorsReadSignalFull(OAIHttpRequestWorker *worker, OAICollaborator summary);
    void projectsCollaboratorsUpdateSignalFull(OAIHttpRequestWorker *worker, OAICollaborator summary);
    void projectsCreateSignalFull(OAIHttpRequestWorker *worker, OAIProject summary);
    void projectsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void projectsDeploymentDeleteSignalFull(OAIHttpRequestWorker *worker);
    void projectsDeploymentsCreateSignalFull(OAIHttpRequestWorker *worker, OAIDeployment summary);
    void projectsDeploymentsDeploySignalFull(OAIHttpRequestWorker *worker);
    void projectsDeploymentsListSignalFull(OAIHttpRequestWorker *worker, QList<OAIDeployment> summary);
    void projectsDeploymentsReadSignalFull(OAIHttpRequestWorker *worker, OAIDeployment summary);
    void projectsDeploymentsReplaceSignalFull(OAIHttpRequestWorker *worker, OAIDeployment summary);
    void projectsDeploymentsUpdateSignalFull(OAIHttpRequestWorker *worker, OAIDeployment summary);
    void projectsListSignalFull(OAIHttpRequestWorker *worker, QList<OAIProject> summary);
    void projectsProjectFilesCreateSignalFull(OAIHttpRequestWorker *worker, OAIProjectFile summary);
    void projectsProjectFilesDeleteSignalFull(OAIHttpRequestWorker *worker);
    void projectsProjectFilesListSignalFull(OAIHttpRequestWorker *worker, QList<OAIProjectFile> summary);
    void projectsProjectFilesReadSignalFull(OAIHttpRequestWorker *worker, OAIProjectFile summary);
    void projectsProjectFilesReplaceSignalFull(OAIHttpRequestWorker *worker, OAIProjectFile summary);
    void projectsProjectFilesUpdateSignalFull(OAIHttpRequestWorker *worker, OAIProjectFile summary);
    void projectsReadSignalFull(OAIHttpRequestWorker *worker, OAIProject summary);
    void projectsReplaceSignalFull(OAIHttpRequestWorker *worker, OAIProject summary);
    void projectsServersApiKeySignalFull(OAIHttpRequestWorker *worker, OAIJWT summary);
    void projectsServersAuthSignalFull(OAIHttpRequestWorker *worker);
    void projectsServersCreateSignalFull(OAIHttpRequestWorker *worker, OAIServer summary);
    void projectsServersDeleteSignalFull(OAIHttpRequestWorker *worker);
    void projectsServersListSignalFull(OAIHttpRequestWorker *worker, QList<OAIServer> summary);
    void projectsServersReadSignalFull(OAIHttpRequestWorker *worker, OAIServer summary);
    void projectsServersReplaceSignalFull(OAIHttpRequestWorker *worker, OAIServer summary);
    void projectsServersRunStatsCreateSignalFull(OAIHttpRequestWorker *worker, OAIServerRunStatistics summary);
    void projectsServersRunStatsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void projectsServersRunStatsReadSignalFull(OAIHttpRequestWorker *worker, OAIServerRunStatistics summary);
    void projectsServersRunStatsReplaceSignalFull(OAIHttpRequestWorker *worker, OAIServerRunStatistics summary);
    void projectsServersRunStatsUpdateSignalFull(OAIHttpRequestWorker *worker, OAIServerRunStatistics summary);
    void projectsServersSshTunnelsCreateSignalFull(OAIHttpRequestWorker *worker, OAISshTunnel summary);
    void projectsServersSshTunnelsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void projectsServersSshTunnelsListSignalFull(OAIHttpRequestWorker *worker, QList<OAISshTunnel> summary);
    void projectsServersSshTunnelsReadSignalFull(OAIHttpRequestWorker *worker, OAISshTunnel summary);
    void projectsServersSshTunnelsReplaceSignalFull(OAIHttpRequestWorker *worker, OAISshTunnel summary);
    void projectsServersSshTunnelsUpdateSignalFull(OAIHttpRequestWorker *worker, OAISshTunnel summary);
    void projectsServersStartSignalFull(OAIHttpRequestWorker *worker);
    void projectsServersStatsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void projectsServersStatsReadSignalFull(OAIHttpRequestWorker *worker, OAIServerStatistics summary);
    void projectsServersStatsReplaceSignalFull(OAIHttpRequestWorker *worker, OAIServerStatistics summary);
    void projectsServersStatsUpdateSignalFull(OAIHttpRequestWorker *worker, OAIServerStatistics summary);
    void projectsServersStatusesSignalFull(OAIHttpRequestWorker *worker, QList<OAIServerStatus> summary);
    void projectsServersStopSignalFull(OAIHttpRequestWorker *worker);
    void projectsServersUpdateSignalFull(OAIHttpRequestWorker *worker, OAIServer summary);
    void projectsUpdateSignalFull(OAIHttpRequestWorker *worker, OAIProject summary);
    void serviceTriggerCreateSignalFull(OAIHttpRequestWorker *worker, OAIServerAction summary);
    void serviceTriggerDeleteSignalFull(OAIHttpRequestWorker *worker);
    void serviceTriggerListSignalFull(OAIHttpRequestWorker *worker, QList<OAIServerAction> summary);
    void serviceTriggerReadSignalFull(OAIHttpRequestWorker *worker, OAIServerAction summary);
    void serviceTriggerReplaceSignalFull(OAIHttpRequestWorker *worker, OAIServerAction summary);
    void serviceTriggerUpdateSignalFull(OAIHttpRequestWorker *worker, OAIServerAction summary);

    Q_DECL_DEPRECATED_X("Use projectCopySignalError() instead")
    void projectCopySignalE(OAIProject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void projectCopySignalError(OAIProject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectCopyCheckSignalError() instead")
    void projectCopyCheckSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void projectCopyCheckSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectsCollaboratorsCreateSignalError() instead")
    void projectsCollaboratorsCreateSignalE(OAICollaborator summary, QNetworkReply::NetworkError error_type, QString error_str);
    void projectsCollaboratorsCreateSignalError(OAICollaborator summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectsCollaboratorsDeleteSignalError() instead")
    void projectsCollaboratorsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void projectsCollaboratorsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectsCollaboratorsListSignalError() instead")
    void projectsCollaboratorsListSignalE(QList<OAICollaborator> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void projectsCollaboratorsListSignalError(QList<OAICollaborator> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectsCollaboratorsReadSignalError() instead")
    void projectsCollaboratorsReadSignalE(OAICollaborator summary, QNetworkReply::NetworkError error_type, QString error_str);
    void projectsCollaboratorsReadSignalError(OAICollaborator summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectsCollaboratorsUpdateSignalError() instead")
    void projectsCollaboratorsUpdateSignalE(OAICollaborator summary, QNetworkReply::NetworkError error_type, QString error_str);
    void projectsCollaboratorsUpdateSignalError(OAICollaborator summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectsCreateSignalError() instead")
    void projectsCreateSignalE(OAIProject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void projectsCreateSignalError(OAIProject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectsDeleteSignalError() instead")
    void projectsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void projectsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectsDeploymentDeleteSignalError() instead")
    void projectsDeploymentDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void projectsDeploymentDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectsDeploymentsCreateSignalError() instead")
    void projectsDeploymentsCreateSignalE(OAIDeployment summary, QNetworkReply::NetworkError error_type, QString error_str);
    void projectsDeploymentsCreateSignalError(OAIDeployment summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectsDeploymentsDeploySignalError() instead")
    void projectsDeploymentsDeploySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void projectsDeploymentsDeploySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectsDeploymentsListSignalError() instead")
    void projectsDeploymentsListSignalE(QList<OAIDeployment> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void projectsDeploymentsListSignalError(QList<OAIDeployment> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectsDeploymentsReadSignalError() instead")
    void projectsDeploymentsReadSignalE(OAIDeployment summary, QNetworkReply::NetworkError error_type, QString error_str);
    void projectsDeploymentsReadSignalError(OAIDeployment summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectsDeploymentsReplaceSignalError() instead")
    void projectsDeploymentsReplaceSignalE(OAIDeployment summary, QNetworkReply::NetworkError error_type, QString error_str);
    void projectsDeploymentsReplaceSignalError(OAIDeployment summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectsDeploymentsUpdateSignalError() instead")
    void projectsDeploymentsUpdateSignalE(OAIDeployment summary, QNetworkReply::NetworkError error_type, QString error_str);
    void projectsDeploymentsUpdateSignalError(OAIDeployment summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectsListSignalError() instead")
    void projectsListSignalE(QList<OAIProject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void projectsListSignalError(QList<OAIProject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectsProjectFilesCreateSignalError() instead")
    void projectsProjectFilesCreateSignalE(OAIProjectFile summary, QNetworkReply::NetworkError error_type, QString error_str);
    void projectsProjectFilesCreateSignalError(OAIProjectFile summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectsProjectFilesDeleteSignalError() instead")
    void projectsProjectFilesDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void projectsProjectFilesDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectsProjectFilesListSignalError() instead")
    void projectsProjectFilesListSignalE(QList<OAIProjectFile> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void projectsProjectFilesListSignalError(QList<OAIProjectFile> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectsProjectFilesReadSignalError() instead")
    void projectsProjectFilesReadSignalE(OAIProjectFile summary, QNetworkReply::NetworkError error_type, QString error_str);
    void projectsProjectFilesReadSignalError(OAIProjectFile summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectsProjectFilesReplaceSignalError() instead")
    void projectsProjectFilesReplaceSignalE(OAIProjectFile summary, QNetworkReply::NetworkError error_type, QString error_str);
    void projectsProjectFilesReplaceSignalError(OAIProjectFile summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectsProjectFilesUpdateSignalError() instead")
    void projectsProjectFilesUpdateSignalE(OAIProjectFile summary, QNetworkReply::NetworkError error_type, QString error_str);
    void projectsProjectFilesUpdateSignalError(OAIProjectFile summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectsReadSignalError() instead")
    void projectsReadSignalE(OAIProject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void projectsReadSignalError(OAIProject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectsReplaceSignalError() instead")
    void projectsReplaceSignalE(OAIProject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void projectsReplaceSignalError(OAIProject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectsServersApiKeySignalError() instead")
    void projectsServersApiKeySignalE(OAIJWT summary, QNetworkReply::NetworkError error_type, QString error_str);
    void projectsServersApiKeySignalError(OAIJWT summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectsServersAuthSignalError() instead")
    void projectsServersAuthSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void projectsServersAuthSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectsServersCreateSignalError() instead")
    void projectsServersCreateSignalE(OAIServer summary, QNetworkReply::NetworkError error_type, QString error_str);
    void projectsServersCreateSignalError(OAIServer summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectsServersDeleteSignalError() instead")
    void projectsServersDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void projectsServersDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectsServersListSignalError() instead")
    void projectsServersListSignalE(QList<OAIServer> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void projectsServersListSignalError(QList<OAIServer> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectsServersReadSignalError() instead")
    void projectsServersReadSignalE(OAIServer summary, QNetworkReply::NetworkError error_type, QString error_str);
    void projectsServersReadSignalError(OAIServer summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectsServersReplaceSignalError() instead")
    void projectsServersReplaceSignalE(OAIServer summary, QNetworkReply::NetworkError error_type, QString error_str);
    void projectsServersReplaceSignalError(OAIServer summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectsServersRunStatsCreateSignalError() instead")
    void projectsServersRunStatsCreateSignalE(OAIServerRunStatistics summary, QNetworkReply::NetworkError error_type, QString error_str);
    void projectsServersRunStatsCreateSignalError(OAIServerRunStatistics summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectsServersRunStatsDeleteSignalError() instead")
    void projectsServersRunStatsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void projectsServersRunStatsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectsServersRunStatsReadSignalError() instead")
    void projectsServersRunStatsReadSignalE(OAIServerRunStatistics summary, QNetworkReply::NetworkError error_type, QString error_str);
    void projectsServersRunStatsReadSignalError(OAIServerRunStatistics summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectsServersRunStatsReplaceSignalError() instead")
    void projectsServersRunStatsReplaceSignalE(OAIServerRunStatistics summary, QNetworkReply::NetworkError error_type, QString error_str);
    void projectsServersRunStatsReplaceSignalError(OAIServerRunStatistics summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectsServersRunStatsUpdateSignalError() instead")
    void projectsServersRunStatsUpdateSignalE(OAIServerRunStatistics summary, QNetworkReply::NetworkError error_type, QString error_str);
    void projectsServersRunStatsUpdateSignalError(OAIServerRunStatistics summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectsServersSshTunnelsCreateSignalError() instead")
    void projectsServersSshTunnelsCreateSignalE(OAISshTunnel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void projectsServersSshTunnelsCreateSignalError(OAISshTunnel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectsServersSshTunnelsDeleteSignalError() instead")
    void projectsServersSshTunnelsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void projectsServersSshTunnelsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectsServersSshTunnelsListSignalError() instead")
    void projectsServersSshTunnelsListSignalE(QList<OAISshTunnel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void projectsServersSshTunnelsListSignalError(QList<OAISshTunnel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectsServersSshTunnelsReadSignalError() instead")
    void projectsServersSshTunnelsReadSignalE(OAISshTunnel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void projectsServersSshTunnelsReadSignalError(OAISshTunnel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectsServersSshTunnelsReplaceSignalError() instead")
    void projectsServersSshTunnelsReplaceSignalE(OAISshTunnel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void projectsServersSshTunnelsReplaceSignalError(OAISshTunnel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectsServersSshTunnelsUpdateSignalError() instead")
    void projectsServersSshTunnelsUpdateSignalE(OAISshTunnel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void projectsServersSshTunnelsUpdateSignalError(OAISshTunnel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectsServersStartSignalError() instead")
    void projectsServersStartSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void projectsServersStartSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectsServersStatsDeleteSignalError() instead")
    void projectsServersStatsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void projectsServersStatsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectsServersStatsReadSignalError() instead")
    void projectsServersStatsReadSignalE(OAIServerStatistics summary, QNetworkReply::NetworkError error_type, QString error_str);
    void projectsServersStatsReadSignalError(OAIServerStatistics summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectsServersStatsReplaceSignalError() instead")
    void projectsServersStatsReplaceSignalE(OAIServerStatistics summary, QNetworkReply::NetworkError error_type, QString error_str);
    void projectsServersStatsReplaceSignalError(OAIServerStatistics summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectsServersStatsUpdateSignalError() instead")
    void projectsServersStatsUpdateSignalE(OAIServerStatistics summary, QNetworkReply::NetworkError error_type, QString error_str);
    void projectsServersStatsUpdateSignalError(OAIServerStatistics summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectsServersStatusesSignalError() instead")
    void projectsServersStatusesSignalE(QList<OAIServerStatus> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void projectsServersStatusesSignalError(QList<OAIServerStatus> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectsServersStopSignalError() instead")
    void projectsServersStopSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void projectsServersStopSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectsServersUpdateSignalError() instead")
    void projectsServersUpdateSignalE(OAIServer summary, QNetworkReply::NetworkError error_type, QString error_str);
    void projectsServersUpdateSignalError(OAIServer summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectsUpdateSignalError() instead")
    void projectsUpdateSignalE(OAIProject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void projectsUpdateSignalError(OAIProject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serviceTriggerCreateSignalError() instead")
    void serviceTriggerCreateSignalE(OAIServerAction summary, QNetworkReply::NetworkError error_type, QString error_str);
    void serviceTriggerCreateSignalError(OAIServerAction summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serviceTriggerDeleteSignalError() instead")
    void serviceTriggerDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void serviceTriggerDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serviceTriggerListSignalError() instead")
    void serviceTriggerListSignalE(QList<OAIServerAction> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void serviceTriggerListSignalError(QList<OAIServerAction> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serviceTriggerReadSignalError() instead")
    void serviceTriggerReadSignalE(OAIServerAction summary, QNetworkReply::NetworkError error_type, QString error_str);
    void serviceTriggerReadSignalError(OAIServerAction summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serviceTriggerReplaceSignalError() instead")
    void serviceTriggerReplaceSignalE(OAIServerAction summary, QNetworkReply::NetworkError error_type, QString error_str);
    void serviceTriggerReplaceSignalError(OAIServerAction summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serviceTriggerUpdateSignalError() instead")
    void serviceTriggerUpdateSignalE(OAIServerAction summary, QNetworkReply::NetworkError error_type, QString error_str);
    void serviceTriggerUpdateSignalError(OAIServerAction summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use projectCopySignalErrorFull() instead")
    void projectCopySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectCopySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectCopyCheckSignalErrorFull() instead")
    void projectCopyCheckSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectCopyCheckSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectsCollaboratorsCreateSignalErrorFull() instead")
    void projectsCollaboratorsCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectsCollaboratorsCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectsCollaboratorsDeleteSignalErrorFull() instead")
    void projectsCollaboratorsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectsCollaboratorsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectsCollaboratorsListSignalErrorFull() instead")
    void projectsCollaboratorsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectsCollaboratorsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectsCollaboratorsReadSignalErrorFull() instead")
    void projectsCollaboratorsReadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectsCollaboratorsReadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectsCollaboratorsUpdateSignalErrorFull() instead")
    void projectsCollaboratorsUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectsCollaboratorsUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectsCreateSignalErrorFull() instead")
    void projectsCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectsCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectsDeleteSignalErrorFull() instead")
    void projectsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectsDeploymentDeleteSignalErrorFull() instead")
    void projectsDeploymentDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectsDeploymentDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectsDeploymentsCreateSignalErrorFull() instead")
    void projectsDeploymentsCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectsDeploymentsCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectsDeploymentsDeploySignalErrorFull() instead")
    void projectsDeploymentsDeploySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectsDeploymentsDeploySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectsDeploymentsListSignalErrorFull() instead")
    void projectsDeploymentsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectsDeploymentsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectsDeploymentsReadSignalErrorFull() instead")
    void projectsDeploymentsReadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectsDeploymentsReadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectsDeploymentsReplaceSignalErrorFull() instead")
    void projectsDeploymentsReplaceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectsDeploymentsReplaceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectsDeploymentsUpdateSignalErrorFull() instead")
    void projectsDeploymentsUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectsDeploymentsUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectsListSignalErrorFull() instead")
    void projectsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectsProjectFilesCreateSignalErrorFull() instead")
    void projectsProjectFilesCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectsProjectFilesCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectsProjectFilesDeleteSignalErrorFull() instead")
    void projectsProjectFilesDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectsProjectFilesDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectsProjectFilesListSignalErrorFull() instead")
    void projectsProjectFilesListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectsProjectFilesListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectsProjectFilesReadSignalErrorFull() instead")
    void projectsProjectFilesReadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectsProjectFilesReadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectsProjectFilesReplaceSignalErrorFull() instead")
    void projectsProjectFilesReplaceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectsProjectFilesReplaceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectsProjectFilesUpdateSignalErrorFull() instead")
    void projectsProjectFilesUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectsProjectFilesUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectsReadSignalErrorFull() instead")
    void projectsReadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectsReadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectsReplaceSignalErrorFull() instead")
    void projectsReplaceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectsReplaceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectsServersApiKeySignalErrorFull() instead")
    void projectsServersApiKeySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectsServersApiKeySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectsServersAuthSignalErrorFull() instead")
    void projectsServersAuthSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectsServersAuthSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectsServersCreateSignalErrorFull() instead")
    void projectsServersCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectsServersCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectsServersDeleteSignalErrorFull() instead")
    void projectsServersDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectsServersDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectsServersListSignalErrorFull() instead")
    void projectsServersListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectsServersListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectsServersReadSignalErrorFull() instead")
    void projectsServersReadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectsServersReadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectsServersReplaceSignalErrorFull() instead")
    void projectsServersReplaceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectsServersReplaceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectsServersRunStatsCreateSignalErrorFull() instead")
    void projectsServersRunStatsCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectsServersRunStatsCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectsServersRunStatsDeleteSignalErrorFull() instead")
    void projectsServersRunStatsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectsServersRunStatsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectsServersRunStatsReadSignalErrorFull() instead")
    void projectsServersRunStatsReadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectsServersRunStatsReadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectsServersRunStatsReplaceSignalErrorFull() instead")
    void projectsServersRunStatsReplaceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectsServersRunStatsReplaceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectsServersRunStatsUpdateSignalErrorFull() instead")
    void projectsServersRunStatsUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectsServersRunStatsUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectsServersSshTunnelsCreateSignalErrorFull() instead")
    void projectsServersSshTunnelsCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectsServersSshTunnelsCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectsServersSshTunnelsDeleteSignalErrorFull() instead")
    void projectsServersSshTunnelsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectsServersSshTunnelsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectsServersSshTunnelsListSignalErrorFull() instead")
    void projectsServersSshTunnelsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectsServersSshTunnelsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectsServersSshTunnelsReadSignalErrorFull() instead")
    void projectsServersSshTunnelsReadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectsServersSshTunnelsReadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectsServersSshTunnelsReplaceSignalErrorFull() instead")
    void projectsServersSshTunnelsReplaceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectsServersSshTunnelsReplaceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectsServersSshTunnelsUpdateSignalErrorFull() instead")
    void projectsServersSshTunnelsUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectsServersSshTunnelsUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectsServersStartSignalErrorFull() instead")
    void projectsServersStartSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectsServersStartSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectsServersStatsDeleteSignalErrorFull() instead")
    void projectsServersStatsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectsServersStatsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectsServersStatsReadSignalErrorFull() instead")
    void projectsServersStatsReadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectsServersStatsReadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectsServersStatsReplaceSignalErrorFull() instead")
    void projectsServersStatsReplaceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectsServersStatsReplaceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectsServersStatsUpdateSignalErrorFull() instead")
    void projectsServersStatsUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectsServersStatsUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectsServersStatusesSignalErrorFull() instead")
    void projectsServersStatusesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectsServersStatusesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectsServersStopSignalErrorFull() instead")
    void projectsServersStopSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectsServersStopSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectsServersUpdateSignalErrorFull() instead")
    void projectsServersUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectsServersUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectsUpdateSignalErrorFull() instead")
    void projectsUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectsUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serviceTriggerCreateSignalErrorFull() instead")
    void serviceTriggerCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void serviceTriggerCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serviceTriggerDeleteSignalErrorFull() instead")
    void serviceTriggerDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void serviceTriggerDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serviceTriggerListSignalErrorFull() instead")
    void serviceTriggerListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void serviceTriggerListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serviceTriggerReadSignalErrorFull() instead")
    void serviceTriggerReadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void serviceTriggerReadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serviceTriggerReplaceSignalErrorFull() instead")
    void serviceTriggerReplaceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void serviceTriggerReplaceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serviceTriggerUpdateSignalErrorFull() instead")
    void serviceTriggerUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void serviceTriggerUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
