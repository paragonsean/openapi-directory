/**
 * IllumiDesk
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInvoice.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInvoice::OAIInvoice(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInvoice::OAIInvoice() {
    this->initializeModel();
}

OAIInvoice::~OAIInvoice() {}

void OAIInvoice::initializeModel() {

    m_amount_due_isSet = false;
    m_amount_due_isValid = false;

    m_application_fee_isSet = false;
    m_application_fee_isValid = false;

    m_attempt_count_isSet = false;
    m_attempt_count_isValid = false;

    m_attempted_isSet = false;
    m_attempted_isValid = false;

    m_closed_isSet = false;
    m_closed_isValid = false;

    m_created_isSet = false;
    m_created_isValid = false;

    m_currency_isSet = false;
    m_currency_isValid = false;

    m_customer_isSet = false;
    m_customer_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_invoice_date_isSet = false;
    m_invoice_date_isValid = false;

    m_livemode_isSet = false;
    m_livemode_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_next_payment_attempt_isSet = false;
    m_next_payment_attempt_isValid = false;

    m_paid_isSet = false;
    m_paid_isValid = false;

    m_period_end_isSet = false;
    m_period_end_isValid = false;

    m_period_start_isSet = false;
    m_period_start_isValid = false;

    m_reciept_number_isSet = false;
    m_reciept_number_isValid = false;

    m_starting_balance_isSet = false;
    m_starting_balance_isValid = false;

    m_statement_descriptor_isSet = false;
    m_statement_descriptor_isValid = false;

    m_stripe_id_isSet = false;
    m_stripe_id_isValid = false;

    m_subscription_isSet = false;
    m_subscription_isValid = false;

    m_subtotal_isSet = false;
    m_subtotal_isValid = false;

    m_tax_isSet = false;
    m_tax_isValid = false;

    m_total_isSet = false;
    m_total_isValid = false;
}

void OAIInvoice::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInvoice::fromJsonObject(QJsonObject json) {

    m_amount_due_isValid = ::OpenAPI::fromJsonValue(m_amount_due, json[QString("amount_due")]);
    m_amount_due_isSet = !json[QString("amount_due")].isNull() && m_amount_due_isValid;

    m_application_fee_isValid = ::OpenAPI::fromJsonValue(m_application_fee, json[QString("application_fee")]);
    m_application_fee_isSet = !json[QString("application_fee")].isNull() && m_application_fee_isValid;

    m_attempt_count_isValid = ::OpenAPI::fromJsonValue(m_attempt_count, json[QString("attempt_count")]);
    m_attempt_count_isSet = !json[QString("attempt_count")].isNull() && m_attempt_count_isValid;

    m_attempted_isValid = ::OpenAPI::fromJsonValue(m_attempted, json[QString("attempted")]);
    m_attempted_isSet = !json[QString("attempted")].isNull() && m_attempted_isValid;

    m_closed_isValid = ::OpenAPI::fromJsonValue(m_closed, json[QString("closed")]);
    m_closed_isSet = !json[QString("closed")].isNull() && m_closed_isValid;

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("created")]);
    m_created_isSet = !json[QString("created")].isNull() && m_created_isValid;

    m_currency_isValid = ::OpenAPI::fromJsonValue(m_currency, json[QString("currency")]);
    m_currency_isSet = !json[QString("currency")].isNull() && m_currency_isValid;

    m_customer_isValid = ::OpenAPI::fromJsonValue(m_customer, json[QString("customer")]);
    m_customer_isSet = !json[QString("customer")].isNull() && m_customer_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_invoice_date_isValid = ::OpenAPI::fromJsonValue(m_invoice_date, json[QString("invoice_date")]);
    m_invoice_date_isSet = !json[QString("invoice_date")].isNull() && m_invoice_date_isValid;

    m_livemode_isValid = ::OpenAPI::fromJsonValue(m_livemode, json[QString("livemode")]);
    m_livemode_isSet = !json[QString("livemode")].isNull() && m_livemode_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_next_payment_attempt_isValid = ::OpenAPI::fromJsonValue(m_next_payment_attempt, json[QString("next_payment_attempt")]);
    m_next_payment_attempt_isSet = !json[QString("next_payment_attempt")].isNull() && m_next_payment_attempt_isValid;

    m_paid_isValid = ::OpenAPI::fromJsonValue(m_paid, json[QString("paid")]);
    m_paid_isSet = !json[QString("paid")].isNull() && m_paid_isValid;

    m_period_end_isValid = ::OpenAPI::fromJsonValue(m_period_end, json[QString("period_end")]);
    m_period_end_isSet = !json[QString("period_end")].isNull() && m_period_end_isValid;

    m_period_start_isValid = ::OpenAPI::fromJsonValue(m_period_start, json[QString("period_start")]);
    m_period_start_isSet = !json[QString("period_start")].isNull() && m_period_start_isValid;

    m_reciept_number_isValid = ::OpenAPI::fromJsonValue(m_reciept_number, json[QString("reciept_number")]);
    m_reciept_number_isSet = !json[QString("reciept_number")].isNull() && m_reciept_number_isValid;

    m_starting_balance_isValid = ::OpenAPI::fromJsonValue(m_starting_balance, json[QString("starting_balance")]);
    m_starting_balance_isSet = !json[QString("starting_balance")].isNull() && m_starting_balance_isValid;

    m_statement_descriptor_isValid = ::OpenAPI::fromJsonValue(m_statement_descriptor, json[QString("statement_descriptor")]);
    m_statement_descriptor_isSet = !json[QString("statement_descriptor")].isNull() && m_statement_descriptor_isValid;

    m_stripe_id_isValid = ::OpenAPI::fromJsonValue(m_stripe_id, json[QString("stripe_id")]);
    m_stripe_id_isSet = !json[QString("stripe_id")].isNull() && m_stripe_id_isValid;

    m_subscription_isValid = ::OpenAPI::fromJsonValue(m_subscription, json[QString("subscription")]);
    m_subscription_isSet = !json[QString("subscription")].isNull() && m_subscription_isValid;

    m_subtotal_isValid = ::OpenAPI::fromJsonValue(m_subtotal, json[QString("subtotal")]);
    m_subtotal_isSet = !json[QString("subtotal")].isNull() && m_subtotal_isValid;

    m_tax_isValid = ::OpenAPI::fromJsonValue(m_tax, json[QString("tax")]);
    m_tax_isSet = !json[QString("tax")].isNull() && m_tax_isValid;

    m_total_isValid = ::OpenAPI::fromJsonValue(m_total, json[QString("total")]);
    m_total_isSet = !json[QString("total")].isNull() && m_total_isValid;
}

QString OAIInvoice::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInvoice::asJsonObject() const {
    QJsonObject obj;
    if (m_amount_due_isSet) {
        obj.insert(QString("amount_due"), ::OpenAPI::toJsonValue(m_amount_due));
    }
    if (m_application_fee_isSet) {
        obj.insert(QString("application_fee"), ::OpenAPI::toJsonValue(m_application_fee));
    }
    if (m_attempt_count_isSet) {
        obj.insert(QString("attempt_count"), ::OpenAPI::toJsonValue(m_attempt_count));
    }
    if (m_attempted_isSet) {
        obj.insert(QString("attempted"), ::OpenAPI::toJsonValue(m_attempted));
    }
    if (m_closed_isSet) {
        obj.insert(QString("closed"), ::OpenAPI::toJsonValue(m_closed));
    }
    if (m_created_isSet) {
        obj.insert(QString("created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_currency_isSet) {
        obj.insert(QString("currency"), ::OpenAPI::toJsonValue(m_currency));
    }
    if (m_customer_isSet) {
        obj.insert(QString("customer"), ::OpenAPI::toJsonValue(m_customer));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_invoice_date_isSet) {
        obj.insert(QString("invoice_date"), ::OpenAPI::toJsonValue(m_invoice_date));
    }
    if (m_livemode_isSet) {
        obj.insert(QString("livemode"), ::OpenAPI::toJsonValue(m_livemode));
    }
    if (m_metadata_isSet) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_next_payment_attempt_isSet) {
        obj.insert(QString("next_payment_attempt"), ::OpenAPI::toJsonValue(m_next_payment_attempt));
    }
    if (m_paid_isSet) {
        obj.insert(QString("paid"), ::OpenAPI::toJsonValue(m_paid));
    }
    if (m_period_end_isSet) {
        obj.insert(QString("period_end"), ::OpenAPI::toJsonValue(m_period_end));
    }
    if (m_period_start_isSet) {
        obj.insert(QString("period_start"), ::OpenAPI::toJsonValue(m_period_start));
    }
    if (m_reciept_number_isSet) {
        obj.insert(QString("reciept_number"), ::OpenAPI::toJsonValue(m_reciept_number));
    }
    if (m_starting_balance_isSet) {
        obj.insert(QString("starting_balance"), ::OpenAPI::toJsonValue(m_starting_balance));
    }
    if (m_statement_descriptor_isSet) {
        obj.insert(QString("statement_descriptor"), ::OpenAPI::toJsonValue(m_statement_descriptor));
    }
    if (m_stripe_id_isSet) {
        obj.insert(QString("stripe_id"), ::OpenAPI::toJsonValue(m_stripe_id));
    }
    if (m_subscription_isSet) {
        obj.insert(QString("subscription"), ::OpenAPI::toJsonValue(m_subscription));
    }
    if (m_subtotal_isSet) {
        obj.insert(QString("subtotal"), ::OpenAPI::toJsonValue(m_subtotal));
    }
    if (m_tax_isSet) {
        obj.insert(QString("tax"), ::OpenAPI::toJsonValue(m_tax));
    }
    if (m_total_isSet) {
        obj.insert(QString("total"), ::OpenAPI::toJsonValue(m_total));
    }
    return obj;
}

qint32 OAIInvoice::getAmountDue() const {
    return m_amount_due;
}
void OAIInvoice::setAmountDue(const qint32 &amount_due) {
    m_amount_due = amount_due;
    m_amount_due_isSet = true;
}

bool OAIInvoice::is_amount_due_Set() const{
    return m_amount_due_isSet;
}

bool OAIInvoice::is_amount_due_Valid() const{
    return m_amount_due_isValid;
}

qint32 OAIInvoice::getApplicationFee() const {
    return m_application_fee;
}
void OAIInvoice::setApplicationFee(const qint32 &application_fee) {
    m_application_fee = application_fee;
    m_application_fee_isSet = true;
}

bool OAIInvoice::is_application_fee_Set() const{
    return m_application_fee_isSet;
}

bool OAIInvoice::is_application_fee_Valid() const{
    return m_application_fee_isValid;
}

qint32 OAIInvoice::getAttemptCount() const {
    return m_attempt_count;
}
void OAIInvoice::setAttemptCount(const qint32 &attempt_count) {
    m_attempt_count = attempt_count;
    m_attempt_count_isSet = true;
}

bool OAIInvoice::is_attempt_count_Set() const{
    return m_attempt_count_isSet;
}

bool OAIInvoice::is_attempt_count_Valid() const{
    return m_attempt_count_isValid;
}

bool OAIInvoice::isAttempted() const {
    return m_attempted;
}
void OAIInvoice::setAttempted(const bool &attempted) {
    m_attempted = attempted;
    m_attempted_isSet = true;
}

bool OAIInvoice::is_attempted_Set() const{
    return m_attempted_isSet;
}

bool OAIInvoice::is_attempted_Valid() const{
    return m_attempted_isValid;
}

bool OAIInvoice::isClosed() const {
    return m_closed;
}
void OAIInvoice::setClosed(const bool &closed) {
    m_closed = closed;
    m_closed_isSet = true;
}

bool OAIInvoice::is_closed_Set() const{
    return m_closed_isSet;
}

bool OAIInvoice::is_closed_Valid() const{
    return m_closed_isValid;
}

QString OAIInvoice::getCreated() const {
    return m_created;
}
void OAIInvoice::setCreated(const QString &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAIInvoice::is_created_Set() const{
    return m_created_isSet;
}

bool OAIInvoice::is_created_Valid() const{
    return m_created_isValid;
}

QString OAIInvoice::getCurrency() const {
    return m_currency;
}
void OAIInvoice::setCurrency(const QString &currency) {
    m_currency = currency;
    m_currency_isSet = true;
}

bool OAIInvoice::is_currency_Set() const{
    return m_currency_isSet;
}

bool OAIInvoice::is_currency_Valid() const{
    return m_currency_isValid;
}

QString OAIInvoice::getCustomer() const {
    return m_customer;
}
void OAIInvoice::setCustomer(const QString &customer) {
    m_customer = customer;
    m_customer_isSet = true;
}

bool OAIInvoice::is_customer_Set() const{
    return m_customer_isSet;
}

bool OAIInvoice::is_customer_Valid() const{
    return m_customer_isValid;
}

QString OAIInvoice::getDescription() const {
    return m_description;
}
void OAIInvoice::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIInvoice::is_description_Set() const{
    return m_description_isSet;
}

bool OAIInvoice::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIInvoice::getId() const {
    return m_id;
}
void OAIInvoice::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIInvoice::is_id_Set() const{
    return m_id_isSet;
}

bool OAIInvoice::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIInvoice::getInvoiceDate() const {
    return m_invoice_date;
}
void OAIInvoice::setInvoiceDate(const QString &invoice_date) {
    m_invoice_date = invoice_date;
    m_invoice_date_isSet = true;
}

bool OAIInvoice::is_invoice_date_Set() const{
    return m_invoice_date_isSet;
}

bool OAIInvoice::is_invoice_date_Valid() const{
    return m_invoice_date_isValid;
}

bool OAIInvoice::isLivemode() const {
    return m_livemode;
}
void OAIInvoice::setLivemode(const bool &livemode) {
    m_livemode = livemode;
    m_livemode_isSet = true;
}

bool OAIInvoice::is_livemode_Set() const{
    return m_livemode_isSet;
}

bool OAIInvoice::is_livemode_Valid() const{
    return m_livemode_isValid;
}

OAIObject OAIInvoice::getMetadata() const {
    return m_metadata;
}
void OAIInvoice::setMetadata(const OAIObject &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAIInvoice::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAIInvoice::is_metadata_Valid() const{
    return m_metadata_isValid;
}

QString OAIInvoice::getNextPaymentAttempt() const {
    return m_next_payment_attempt;
}
void OAIInvoice::setNextPaymentAttempt(const QString &next_payment_attempt) {
    m_next_payment_attempt = next_payment_attempt;
    m_next_payment_attempt_isSet = true;
}

bool OAIInvoice::is_next_payment_attempt_Set() const{
    return m_next_payment_attempt_isSet;
}

bool OAIInvoice::is_next_payment_attempt_Valid() const{
    return m_next_payment_attempt_isValid;
}

bool OAIInvoice::isPaid() const {
    return m_paid;
}
void OAIInvoice::setPaid(const bool &paid) {
    m_paid = paid;
    m_paid_isSet = true;
}

bool OAIInvoice::is_paid_Set() const{
    return m_paid_isSet;
}

bool OAIInvoice::is_paid_Valid() const{
    return m_paid_isValid;
}

QString OAIInvoice::getPeriodEnd() const {
    return m_period_end;
}
void OAIInvoice::setPeriodEnd(const QString &period_end) {
    m_period_end = period_end;
    m_period_end_isSet = true;
}

bool OAIInvoice::is_period_end_Set() const{
    return m_period_end_isSet;
}

bool OAIInvoice::is_period_end_Valid() const{
    return m_period_end_isValid;
}

QString OAIInvoice::getPeriodStart() const {
    return m_period_start;
}
void OAIInvoice::setPeriodStart(const QString &period_start) {
    m_period_start = period_start;
    m_period_start_isSet = true;
}

bool OAIInvoice::is_period_start_Set() const{
    return m_period_start_isSet;
}

bool OAIInvoice::is_period_start_Valid() const{
    return m_period_start_isValid;
}

QString OAIInvoice::getRecieptNumber() const {
    return m_reciept_number;
}
void OAIInvoice::setRecieptNumber(const QString &reciept_number) {
    m_reciept_number = reciept_number;
    m_reciept_number_isSet = true;
}

bool OAIInvoice::is_reciept_number_Set() const{
    return m_reciept_number_isSet;
}

bool OAIInvoice::is_reciept_number_Valid() const{
    return m_reciept_number_isValid;
}

qint32 OAIInvoice::getStartingBalance() const {
    return m_starting_balance;
}
void OAIInvoice::setStartingBalance(const qint32 &starting_balance) {
    m_starting_balance = starting_balance;
    m_starting_balance_isSet = true;
}

bool OAIInvoice::is_starting_balance_Set() const{
    return m_starting_balance_isSet;
}

bool OAIInvoice::is_starting_balance_Valid() const{
    return m_starting_balance_isValid;
}

QString OAIInvoice::getStatementDescriptor() const {
    return m_statement_descriptor;
}
void OAIInvoice::setStatementDescriptor(const QString &statement_descriptor) {
    m_statement_descriptor = statement_descriptor;
    m_statement_descriptor_isSet = true;
}

bool OAIInvoice::is_statement_descriptor_Set() const{
    return m_statement_descriptor_isSet;
}

bool OAIInvoice::is_statement_descriptor_Valid() const{
    return m_statement_descriptor_isValid;
}

QString OAIInvoice::getStripeId() const {
    return m_stripe_id;
}
void OAIInvoice::setStripeId(const QString &stripe_id) {
    m_stripe_id = stripe_id;
    m_stripe_id_isSet = true;
}

bool OAIInvoice::is_stripe_id_Set() const{
    return m_stripe_id_isSet;
}

bool OAIInvoice::is_stripe_id_Valid() const{
    return m_stripe_id_isValid;
}

QString OAIInvoice::getSubscription() const {
    return m_subscription;
}
void OAIInvoice::setSubscription(const QString &subscription) {
    m_subscription = subscription;
    m_subscription_isSet = true;
}

bool OAIInvoice::is_subscription_Set() const{
    return m_subscription_isSet;
}

bool OAIInvoice::is_subscription_Valid() const{
    return m_subscription_isValid;
}

qint32 OAIInvoice::getSubtotal() const {
    return m_subtotal;
}
void OAIInvoice::setSubtotal(const qint32 &subtotal) {
    m_subtotal = subtotal;
    m_subtotal_isSet = true;
}

bool OAIInvoice::is_subtotal_Set() const{
    return m_subtotal_isSet;
}

bool OAIInvoice::is_subtotal_Valid() const{
    return m_subtotal_isValid;
}

qint32 OAIInvoice::getTax() const {
    return m_tax;
}
void OAIInvoice::setTax(const qint32 &tax) {
    m_tax = tax;
    m_tax_isSet = true;
}

bool OAIInvoice::is_tax_Set() const{
    return m_tax_isSet;
}

bool OAIInvoice::is_tax_Valid() const{
    return m_tax_isValid;
}

qint32 OAIInvoice::getTotal() const {
    return m_total;
}
void OAIInvoice::setTotal(const qint32 &total) {
    m_total = total;
    m_total_isSet = true;
}

bool OAIInvoice::is_total_Set() const{
    return m_total_isSet;
}

bool OAIInvoice::is_total_Valid() const{
    return m_total_isValid;
}

bool OAIInvoice::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_amount_due_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_application_fee_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_attempt_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_attempted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_closed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_invoice_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_livemode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_payment_attempt_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_paid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_period_end_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_period_start_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reciept_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_starting_balance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_statement_descriptor_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stripe_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subscription_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subtotal_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInvoice::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_amount_due_isValid && m_created_isValid && m_currency_isValid && m_customer_isValid && m_invoice_date_isValid && m_period_end_isValid && m_period_start_isValid && m_reciept_number_isValid && m_starting_balance_isValid && m_stripe_id_isValid && m_subtotal_isValid && m_total_isValid && true;
}

} // namespace OpenAPI
