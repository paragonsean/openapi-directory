/**
 * IllumiDesk
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINotification.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINotification::OAINotification(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINotification::OAINotification() {
    this->initializeModel();
}

OAINotification::~OAINotification() {}

void OAINotification::initializeModel() {

    m_actor_isSet = false;
    m_actor_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_read_isSet = false;
    m_read_isValid = false;

    m_target_isSet = false;
    m_target_isValid = false;

    m_timestamp_isSet = false;
    m_timestamp_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;
}

void OAINotification::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINotification::fromJsonObject(QJsonObject json) {

    m_actor_isValid = ::OpenAPI::fromJsonValue(m_actor, json[QString("actor")]);
    m_actor_isSet = !json[QString("actor")].isNull() && m_actor_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_read_isValid = ::OpenAPI::fromJsonValue(m_read, json[QString("read")]);
    m_read_isSet = !json[QString("read")].isNull() && m_read_isValid;

    m_target_isValid = ::OpenAPI::fromJsonValue(m_target, json[QString("target")]);
    m_target_isSet = !json[QString("target")].isNull() && m_target_isValid;

    m_timestamp_isValid = ::OpenAPI::fromJsonValue(m_timestamp, json[QString("timestamp")]);
    m_timestamp_isSet = !json[QString("timestamp")].isNull() && m_timestamp_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;
}

QString OAINotification::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINotification::asJsonObject() const {
    QJsonObject obj;
    if (m_actor_isSet) {
        obj.insert(QString("actor"), ::OpenAPI::toJsonValue(m_actor));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_read_isSet) {
        obj.insert(QString("read"), ::OpenAPI::toJsonValue(m_read));
    }
    if (m_target_isSet) {
        obj.insert(QString("target"), ::OpenAPI::toJsonValue(m_target));
    }
    if (m_timestamp_isSet) {
        obj.insert(QString("timestamp"), ::OpenAPI::toJsonValue(m_timestamp));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_user_isSet) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    return obj;
}

QString OAINotification::getActor() const {
    return m_actor;
}
void OAINotification::setActor(const QString &actor) {
    m_actor = actor;
    m_actor_isSet = true;
}

bool OAINotification::is_actor_Set() const{
    return m_actor_isSet;
}

bool OAINotification::is_actor_Valid() const{
    return m_actor_isValid;
}

QString OAINotification::getId() const {
    return m_id;
}
void OAINotification::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAINotification::is_id_Set() const{
    return m_id_isSet;
}

bool OAINotification::is_id_Valid() const{
    return m_id_isValid;
}

bool OAINotification::isRead() const {
    return m_read;
}
void OAINotification::setRead(const bool &read) {
    m_read = read;
    m_read_isSet = true;
}

bool OAINotification::is_read_Set() const{
    return m_read_isSet;
}

bool OAINotification::is_read_Valid() const{
    return m_read_isValid;
}

QString OAINotification::getTarget() const {
    return m_target;
}
void OAINotification::setTarget(const QString &target) {
    m_target = target;
    m_target_isSet = true;
}

bool OAINotification::is_target_Set() const{
    return m_target_isSet;
}

bool OAINotification::is_target_Valid() const{
    return m_target_isValid;
}

QString OAINotification::getTimestamp() const {
    return m_timestamp;
}
void OAINotification::setTimestamp(const QString &timestamp) {
    m_timestamp = timestamp;
    m_timestamp_isSet = true;
}

bool OAINotification::is_timestamp_Set() const{
    return m_timestamp_isSet;
}

bool OAINotification::is_timestamp_Valid() const{
    return m_timestamp_isValid;
}

QString OAINotification::getType() const {
    return m_type;
}
void OAINotification::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAINotification::is_type_Set() const{
    return m_type_isSet;
}

bool OAINotification::is_type_Valid() const{
    return m_type_isValid;
}

QString OAINotification::getUser() const {
    return m_user;
}
void OAINotification::setUser(const QString &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAINotification::is_user_Set() const{
    return m_user_isSet;
}

bool OAINotification::is_user_Valid() const{
    return m_user_isValid;
}

bool OAINotification::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_actor_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_read_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINotification::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_read_isValid && true;
}

} // namespace OpenAPI
