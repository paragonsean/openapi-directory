/**
 * IllumiDesk
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeploymentError.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeploymentError::OAIDeploymentError(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeploymentError::OAIDeploymentError() {
    this->initializeModel();
}

OAIDeploymentError::~OAIDeploymentError() {}

void OAIDeploymentError::initializeModel() {

    m_config_isSet = false;
    m_config_isValid = false;

    m_framework_isSet = false;
    m_framework_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_non_field_errors_isSet = false;
    m_non_field_errors_isValid = false;

    m_runtime_isSet = false;
    m_runtime_isValid = false;
}

void OAIDeploymentError::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeploymentError::fromJsonObject(QJsonObject json) {

    m_config_isValid = ::OpenAPI::fromJsonValue(m_config, json[QString("config")]);
    m_config_isSet = !json[QString("config")].isNull() && m_config_isValid;

    m_framework_isValid = ::OpenAPI::fromJsonValue(m_framework, json[QString("framework")]);
    m_framework_isSet = !json[QString("framework")].isNull() && m_framework_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_non_field_errors_isValid = ::OpenAPI::fromJsonValue(m_non_field_errors, json[QString("non_field_errors")]);
    m_non_field_errors_isSet = !json[QString("non_field_errors")].isNull() && m_non_field_errors_isValid;

    m_runtime_isValid = ::OpenAPI::fromJsonValue(m_runtime, json[QString("runtime")]);
    m_runtime_isSet = !json[QString("runtime")].isNull() && m_runtime_isValid;
}

QString OAIDeploymentError::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeploymentError::asJsonObject() const {
    QJsonObject obj;
    if (m_config.size() > 0) {
        obj.insert(QString("config"), ::OpenAPI::toJsonValue(m_config));
    }
    if (m_framework.size() > 0) {
        obj.insert(QString("framework"), ::OpenAPI::toJsonValue(m_framework));
    }
    if (m_name.size() > 0) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_non_field_errors.size() > 0) {
        obj.insert(QString("non_field_errors"), ::OpenAPI::toJsonValue(m_non_field_errors));
    }
    if (m_runtime.size() > 0) {
        obj.insert(QString("runtime"), ::OpenAPI::toJsonValue(m_runtime));
    }
    return obj;
}

QList<QString> OAIDeploymentError::getConfig() const {
    return m_config;
}
void OAIDeploymentError::setConfig(const QList<QString> &config) {
    m_config = config;
    m_config_isSet = true;
}

bool OAIDeploymentError::is_config_Set() const{
    return m_config_isSet;
}

bool OAIDeploymentError::is_config_Valid() const{
    return m_config_isValid;
}

QList<QString> OAIDeploymentError::getFramework() const {
    return m_framework;
}
void OAIDeploymentError::setFramework(const QList<QString> &framework) {
    m_framework = framework;
    m_framework_isSet = true;
}

bool OAIDeploymentError::is_framework_Set() const{
    return m_framework_isSet;
}

bool OAIDeploymentError::is_framework_Valid() const{
    return m_framework_isValid;
}

QList<QString> OAIDeploymentError::getName() const {
    return m_name;
}
void OAIDeploymentError::setName(const QList<QString> &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIDeploymentError::is_name_Set() const{
    return m_name_isSet;
}

bool OAIDeploymentError::is_name_Valid() const{
    return m_name_isValid;
}

QList<QString> OAIDeploymentError::getNonFieldErrors() const {
    return m_non_field_errors;
}
void OAIDeploymentError::setNonFieldErrors(const QList<QString> &non_field_errors) {
    m_non_field_errors = non_field_errors;
    m_non_field_errors_isSet = true;
}

bool OAIDeploymentError::is_non_field_errors_Set() const{
    return m_non_field_errors_isSet;
}

bool OAIDeploymentError::is_non_field_errors_Valid() const{
    return m_non_field_errors_isValid;
}

QList<QString> OAIDeploymentError::getRuntime() const {
    return m_runtime;
}
void OAIDeploymentError::setRuntime(const QList<QString> &runtime) {
    m_runtime = runtime;
    m_runtime_isSet = true;
}

bool OAIDeploymentError::is_runtime_Set() const{
    return m_runtime_isSet;
}

bool OAIDeploymentError::is_runtime_Valid() const{
    return m_runtime_isValid;
}

bool OAIDeploymentError::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_config.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_framework.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_non_field_errors.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_runtime.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeploymentError::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
