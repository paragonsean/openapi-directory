/**
 * IllumiDesk
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISubscription.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISubscription::OAISubscription(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISubscription::OAISubscription() {
    this->initializeModel();
}

OAISubscription::~OAISubscription() {}

void OAISubscription::initializeModel() {

    m_application_fee_percent_isSet = false;
    m_application_fee_percent_isValid = false;

    m_cancel_at_period_end_isSet = false;
    m_cancel_at_period_end_isValid = false;

    m_canceled_at_isSet = false;
    m_canceled_at_isValid = false;

    m_created_isSet = false;
    m_created_isValid = false;

    m_current_period_end_isSet = false;
    m_current_period_end_isValid = false;

    m_current_period_start_isSet = false;
    m_current_period_start_isValid = false;

    m_ended_at_isSet = false;
    m_ended_at_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_livemode_isSet = false;
    m_livemode_isValid = false;

    m_plan_isSet = false;
    m_plan_isValid = false;

    m_quantity_isSet = false;
    m_quantity_isValid = false;

    m_start_isSet = false;
    m_start_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_stripe_id_isSet = false;
    m_stripe_id_isValid = false;

    m_trial_end_isSet = false;
    m_trial_end_isValid = false;

    m_trial_start_isSet = false;
    m_trial_start_isValid = false;
}

void OAISubscription::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISubscription::fromJsonObject(QJsonObject json) {

    m_application_fee_percent_isValid = ::OpenAPI::fromJsonValue(m_application_fee_percent, json[QString("application_fee_percent")]);
    m_application_fee_percent_isSet = !json[QString("application_fee_percent")].isNull() && m_application_fee_percent_isValid;

    m_cancel_at_period_end_isValid = ::OpenAPI::fromJsonValue(m_cancel_at_period_end, json[QString("cancel_at_period_end")]);
    m_cancel_at_period_end_isSet = !json[QString("cancel_at_period_end")].isNull() && m_cancel_at_period_end_isValid;

    m_canceled_at_isValid = ::OpenAPI::fromJsonValue(m_canceled_at, json[QString("canceled_at")]);
    m_canceled_at_isSet = !json[QString("canceled_at")].isNull() && m_canceled_at_isValid;

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("created")]);
    m_created_isSet = !json[QString("created")].isNull() && m_created_isValid;

    m_current_period_end_isValid = ::OpenAPI::fromJsonValue(m_current_period_end, json[QString("current_period_end")]);
    m_current_period_end_isSet = !json[QString("current_period_end")].isNull() && m_current_period_end_isValid;

    m_current_period_start_isValid = ::OpenAPI::fromJsonValue(m_current_period_start, json[QString("current_period_start")]);
    m_current_period_start_isSet = !json[QString("current_period_start")].isNull() && m_current_period_start_isValid;

    m_ended_at_isValid = ::OpenAPI::fromJsonValue(m_ended_at, json[QString("ended_at")]);
    m_ended_at_isSet = !json[QString("ended_at")].isNull() && m_ended_at_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_livemode_isValid = ::OpenAPI::fromJsonValue(m_livemode, json[QString("livemode")]);
    m_livemode_isSet = !json[QString("livemode")].isNull() && m_livemode_isValid;

    m_plan_isValid = ::OpenAPI::fromJsonValue(m_plan, json[QString("plan")]);
    m_plan_isSet = !json[QString("plan")].isNull() && m_plan_isValid;

    m_quantity_isValid = ::OpenAPI::fromJsonValue(m_quantity, json[QString("quantity")]);
    m_quantity_isSet = !json[QString("quantity")].isNull() && m_quantity_isValid;

    m_start_isValid = ::OpenAPI::fromJsonValue(m_start, json[QString("start")]);
    m_start_isSet = !json[QString("start")].isNull() && m_start_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_stripe_id_isValid = ::OpenAPI::fromJsonValue(m_stripe_id, json[QString("stripe_id")]);
    m_stripe_id_isSet = !json[QString("stripe_id")].isNull() && m_stripe_id_isValid;

    m_trial_end_isValid = ::OpenAPI::fromJsonValue(m_trial_end, json[QString("trial_end")]);
    m_trial_end_isSet = !json[QString("trial_end")].isNull() && m_trial_end_isValid;

    m_trial_start_isValid = ::OpenAPI::fromJsonValue(m_trial_start, json[QString("trial_start")]);
    m_trial_start_isSet = !json[QString("trial_start")].isNull() && m_trial_start_isValid;
}

QString OAISubscription::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISubscription::asJsonObject() const {
    QJsonObject obj;
    if (m_application_fee_percent_isSet) {
        obj.insert(QString("application_fee_percent"), ::OpenAPI::toJsonValue(m_application_fee_percent));
    }
    if (m_cancel_at_period_end_isSet) {
        obj.insert(QString("cancel_at_period_end"), ::OpenAPI::toJsonValue(m_cancel_at_period_end));
    }
    if (m_canceled_at_isSet) {
        obj.insert(QString("canceled_at"), ::OpenAPI::toJsonValue(m_canceled_at));
    }
    if (m_created_isSet) {
        obj.insert(QString("created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_current_period_end_isSet) {
        obj.insert(QString("current_period_end"), ::OpenAPI::toJsonValue(m_current_period_end));
    }
    if (m_current_period_start_isSet) {
        obj.insert(QString("current_period_start"), ::OpenAPI::toJsonValue(m_current_period_start));
    }
    if (m_ended_at_isSet) {
        obj.insert(QString("ended_at"), ::OpenAPI::toJsonValue(m_ended_at));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_livemode_isSet) {
        obj.insert(QString("livemode"), ::OpenAPI::toJsonValue(m_livemode));
    }
    if (m_plan_isSet) {
        obj.insert(QString("plan"), ::OpenAPI::toJsonValue(m_plan));
    }
    if (m_quantity_isSet) {
        obj.insert(QString("quantity"), ::OpenAPI::toJsonValue(m_quantity));
    }
    if (m_start_isSet) {
        obj.insert(QString("start"), ::OpenAPI::toJsonValue(m_start));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_stripe_id_isSet) {
        obj.insert(QString("stripe_id"), ::OpenAPI::toJsonValue(m_stripe_id));
    }
    if (m_trial_end_isSet) {
        obj.insert(QString("trial_end"), ::OpenAPI::toJsonValue(m_trial_end));
    }
    if (m_trial_start_isSet) {
        obj.insert(QString("trial_start"), ::OpenAPI::toJsonValue(m_trial_start));
    }
    return obj;
}

double OAISubscription::getApplicationFeePercent() const {
    return m_application_fee_percent;
}
void OAISubscription::setApplicationFeePercent(const double &application_fee_percent) {
    m_application_fee_percent = application_fee_percent;
    m_application_fee_percent_isSet = true;
}

bool OAISubscription::is_application_fee_percent_Set() const{
    return m_application_fee_percent_isSet;
}

bool OAISubscription::is_application_fee_percent_Valid() const{
    return m_application_fee_percent_isValid;
}

bool OAISubscription::isCancelAtPeriodEnd() const {
    return m_cancel_at_period_end;
}
void OAISubscription::setCancelAtPeriodEnd(const bool &cancel_at_period_end) {
    m_cancel_at_period_end = cancel_at_period_end;
    m_cancel_at_period_end_isSet = true;
}

bool OAISubscription::is_cancel_at_period_end_Set() const{
    return m_cancel_at_period_end_isSet;
}

bool OAISubscription::is_cancel_at_period_end_Valid() const{
    return m_cancel_at_period_end_isValid;
}

QString OAISubscription::getCanceledAt() const {
    return m_canceled_at;
}
void OAISubscription::setCanceledAt(const QString &canceled_at) {
    m_canceled_at = canceled_at;
    m_canceled_at_isSet = true;
}

bool OAISubscription::is_canceled_at_Set() const{
    return m_canceled_at_isSet;
}

bool OAISubscription::is_canceled_at_Valid() const{
    return m_canceled_at_isValid;
}

QString OAISubscription::getCreated() const {
    return m_created;
}
void OAISubscription::setCreated(const QString &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAISubscription::is_created_Set() const{
    return m_created_isSet;
}

bool OAISubscription::is_created_Valid() const{
    return m_created_isValid;
}

QString OAISubscription::getCurrentPeriodEnd() const {
    return m_current_period_end;
}
void OAISubscription::setCurrentPeriodEnd(const QString &current_period_end) {
    m_current_period_end = current_period_end;
    m_current_period_end_isSet = true;
}

bool OAISubscription::is_current_period_end_Set() const{
    return m_current_period_end_isSet;
}

bool OAISubscription::is_current_period_end_Valid() const{
    return m_current_period_end_isValid;
}

QString OAISubscription::getCurrentPeriodStart() const {
    return m_current_period_start;
}
void OAISubscription::setCurrentPeriodStart(const QString &current_period_start) {
    m_current_period_start = current_period_start;
    m_current_period_start_isSet = true;
}

bool OAISubscription::is_current_period_start_Set() const{
    return m_current_period_start_isSet;
}

bool OAISubscription::is_current_period_start_Valid() const{
    return m_current_period_start_isValid;
}

QString OAISubscription::getEndedAt() const {
    return m_ended_at;
}
void OAISubscription::setEndedAt(const QString &ended_at) {
    m_ended_at = ended_at;
    m_ended_at_isSet = true;
}

bool OAISubscription::is_ended_at_Set() const{
    return m_ended_at_isSet;
}

bool OAISubscription::is_ended_at_Valid() const{
    return m_ended_at_isValid;
}

QString OAISubscription::getId() const {
    return m_id;
}
void OAISubscription::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAISubscription::is_id_Set() const{
    return m_id_isSet;
}

bool OAISubscription::is_id_Valid() const{
    return m_id_isValid;
}

bool OAISubscription::isLivemode() const {
    return m_livemode;
}
void OAISubscription::setLivemode(const bool &livemode) {
    m_livemode = livemode;
    m_livemode_isSet = true;
}

bool OAISubscription::is_livemode_Set() const{
    return m_livemode_isSet;
}

bool OAISubscription::is_livemode_Valid() const{
    return m_livemode_isValid;
}

QString OAISubscription::getPlan() const {
    return m_plan;
}
void OAISubscription::setPlan(const QString &plan) {
    m_plan = plan;
    m_plan_isSet = true;
}

bool OAISubscription::is_plan_Set() const{
    return m_plan_isSet;
}

bool OAISubscription::is_plan_Valid() const{
    return m_plan_isValid;
}

qint32 OAISubscription::getQuantity() const {
    return m_quantity;
}
void OAISubscription::setQuantity(const qint32 &quantity) {
    m_quantity = quantity;
    m_quantity_isSet = true;
}

bool OAISubscription::is_quantity_Set() const{
    return m_quantity_isSet;
}

bool OAISubscription::is_quantity_Valid() const{
    return m_quantity_isValid;
}

QString OAISubscription::getStart() const {
    return m_start;
}
void OAISubscription::setStart(const QString &start) {
    m_start = start;
    m_start_isSet = true;
}

bool OAISubscription::is_start_Set() const{
    return m_start_isSet;
}

bool OAISubscription::is_start_Valid() const{
    return m_start_isValid;
}

QString OAISubscription::getStatus() const {
    return m_status;
}
void OAISubscription::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAISubscription::is_status_Set() const{
    return m_status_isSet;
}

bool OAISubscription::is_status_Valid() const{
    return m_status_isValid;
}

QString OAISubscription::getStripeId() const {
    return m_stripe_id;
}
void OAISubscription::setStripeId(const QString &stripe_id) {
    m_stripe_id = stripe_id;
    m_stripe_id_isSet = true;
}

bool OAISubscription::is_stripe_id_Set() const{
    return m_stripe_id_isSet;
}

bool OAISubscription::is_stripe_id_Valid() const{
    return m_stripe_id_isValid;
}

QString OAISubscription::getTrialEnd() const {
    return m_trial_end;
}
void OAISubscription::setTrialEnd(const QString &trial_end) {
    m_trial_end = trial_end;
    m_trial_end_isSet = true;
}

bool OAISubscription::is_trial_end_Set() const{
    return m_trial_end_isSet;
}

bool OAISubscription::is_trial_end_Valid() const{
    return m_trial_end_isValid;
}

QString OAISubscription::getTrialStart() const {
    return m_trial_start;
}
void OAISubscription::setTrialStart(const QString &trial_start) {
    m_trial_start = trial_start;
    m_trial_start_isSet = true;
}

bool OAISubscription::is_trial_start_Set() const{
    return m_trial_start_isSet;
}

bool OAISubscription::is_trial_start_Valid() const{
    return m_trial_start_isValid;
}

bool OAISubscription::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_application_fee_percent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cancel_at_period_end_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_canceled_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_period_end_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_period_start_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ended_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_livemode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_plan_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stripe_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_trial_end_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_trial_start_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISubscription::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_plan_isValid && true;
}

} // namespace OpenAPI
