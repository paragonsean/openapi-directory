/**
 * IllumiDesk
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApplicationData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApplicationData::OAIApplicationData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApplicationData::OAIApplicationData() {
    this->initializeModel();
}

OAIApplicationData::~OAIApplicationData() {}

void OAIApplicationData::initializeModel() {

    m_authorization_grant_type_isSet = false;
    m_authorization_grant_type_isValid = false;

    m_client_type_isSet = false;
    m_client_type_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_redirect_uris_isSet = false;
    m_redirect_uris_isValid = false;
}

void OAIApplicationData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApplicationData::fromJsonObject(QJsonObject json) {

    m_authorization_grant_type_isValid = ::OpenAPI::fromJsonValue(m_authorization_grant_type, json[QString("authorization_grant_type")]);
    m_authorization_grant_type_isSet = !json[QString("authorization_grant_type")].isNull() && m_authorization_grant_type_isValid;

    m_client_type_isValid = ::OpenAPI::fromJsonValue(m_client_type, json[QString("client_type")]);
    m_client_type_isSet = !json[QString("client_type")].isNull() && m_client_type_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_redirect_uris_isValid = ::OpenAPI::fromJsonValue(m_redirect_uris, json[QString("redirect_uris")]);
    m_redirect_uris_isSet = !json[QString("redirect_uris")].isNull() && m_redirect_uris_isValid;
}

QString OAIApplicationData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApplicationData::asJsonObject() const {
    QJsonObject obj;
    if (m_authorization_grant_type_isSet) {
        obj.insert(QString("authorization_grant_type"), ::OpenAPI::toJsonValue(m_authorization_grant_type));
    }
    if (m_client_type_isSet) {
        obj.insert(QString("client_type"), ::OpenAPI::toJsonValue(m_client_type));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_redirect_uris_isSet) {
        obj.insert(QString("redirect_uris"), ::OpenAPI::toJsonValue(m_redirect_uris));
    }
    return obj;
}

QString OAIApplicationData::getAuthorizationGrantType() const {
    return m_authorization_grant_type;
}
void OAIApplicationData::setAuthorizationGrantType(const QString &authorization_grant_type) {
    m_authorization_grant_type = authorization_grant_type;
    m_authorization_grant_type_isSet = true;
}

bool OAIApplicationData::is_authorization_grant_type_Set() const{
    return m_authorization_grant_type_isSet;
}

bool OAIApplicationData::is_authorization_grant_type_Valid() const{
    return m_authorization_grant_type_isValid;
}

QString OAIApplicationData::getClientType() const {
    return m_client_type;
}
void OAIApplicationData::setClientType(const QString &client_type) {
    m_client_type = client_type;
    m_client_type_isSet = true;
}

bool OAIApplicationData::is_client_type_Set() const{
    return m_client_type_isSet;
}

bool OAIApplicationData::is_client_type_Valid() const{
    return m_client_type_isValid;
}

QString OAIApplicationData::getName() const {
    return m_name;
}
void OAIApplicationData::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIApplicationData::is_name_Set() const{
    return m_name_isSet;
}

bool OAIApplicationData::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIApplicationData::getRedirectUris() const {
    return m_redirect_uris;
}
void OAIApplicationData::setRedirectUris(const QString &redirect_uris) {
    m_redirect_uris = redirect_uris;
    m_redirect_uris_isSet = true;
}

bool OAIApplicationData::is_redirect_uris_Set() const{
    return m_redirect_uris_isSet;
}

bool OAIApplicationData::is_redirect_uris_Valid() const{
    return m_redirect_uris_isValid;
}

bool OAIApplicationData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_authorization_grant_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_redirect_uris_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApplicationData::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_authorization_grant_type_isValid && m_client_type_isValid && m_name_isValid && true;
}

} // namespace OpenAPI
