/**
 * IllumiDesk
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIBillingApi_H
#define OAI_OAIBillingApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICard.h"
#include "OAICardDataPost.h"
#include "OAICardDataPutandPatch.h"
#include "OAICardError.h"
#include "OAICardUpdateError.h"
#include "OAIInvoice.h"
#include "OAIInvoiceItem.h"
#include "OAINotFound.h"
#include "OAIPlan.h"
#include "OAISubscription.h"
#include "OAISubscriptionData.h"
#include "OAISubscriptionError.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIBillingApi : public QObject {
    Q_OBJECT

public:
    OAIBillingApi(const int timeOut = 0);
    ~OAIBillingApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  r_namespace QString [required]
    * @param[in]  card_data OAICardDataPost [optional]
    */
    virtual void billingCardsCreate(const QString &r_namespace, const ::OpenAPI::OptionalParam<OAICardDataPost> &card_data = ::OpenAPI::OptionalParam<OAICardDataPost>());

    /**
    * @param[in]  r_namespace QString [required]
    * @param[in]  id QString [required]
    */
    virtual void billingCardsDelete(const QString &r_namespace, const QString &id);

    /**
    * @param[in]  r_namespace QString [required]
    * @param[in]  limit QString [optional]
    * @param[in]  offset QString [optional]
    * @param[in]  ordering QString [optional]
    */
    virtual void billingCardsList(const QString &r_namespace, const ::OpenAPI::OptionalParam<QString> &limit = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &offset = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ordering = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  r_namespace QString [required]
    * @param[in]  id QString [required]
    */
    virtual void billingCardsRead(const QString &r_namespace, const QString &id);

    /**
    * @param[in]  r_namespace QString [required]
    * @param[in]  id QString [required]
    * @param[in]  card_data OAICardDataPutandPatch [optional]
    */
    virtual void billingCardsReplace(const QString &r_namespace, const QString &id, const ::OpenAPI::OptionalParam<OAICardDataPutandPatch> &card_data = ::OpenAPI::OptionalParam<OAICardDataPutandPatch>());

    /**
    * @param[in]  r_namespace QString [required]
    * @param[in]  id QString [required]
    * @param[in]  card_data OAICardDataPutandPatch [optional]
    */
    virtual void billingCardsUpdate(const QString &r_namespace, const QString &id, const ::OpenAPI::OptionalParam<OAICardDataPutandPatch> &card_data = ::OpenAPI::OptionalParam<OAICardDataPutandPatch>());

    /**
    * @param[in]  r_namespace QString [required]
    * @param[in]  invoice_id QString [required]
    * @param[in]  limit QString [optional]
    * @param[in]  offset QString [optional]
    * @param[in]  ordering QString [optional]
    */
    virtual void billingInvoiceItemsList(const QString &r_namespace, const QString &invoice_id, const ::OpenAPI::OptionalParam<QString> &limit = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &offset = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ordering = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  r_namespace QString [required]
    * @param[in]  invoice_id QString [required]
    * @param[in]  id QString [required]
    */
    virtual void billingInvoiceItemsRead(const QString &r_namespace, const QString &invoice_id, const QString &id);

    /**
    * @param[in]  r_namespace QString [required]
    * @param[in]  limit QString [optional]
    * @param[in]  offset QString [optional]
    * @param[in]  ordering QString [optional]
    */
    virtual void billingInvoicesList(const QString &r_namespace, const ::OpenAPI::OptionalParam<QString> &limit = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &offset = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ordering = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  r_namespace QString [required]
    * @param[in]  id QString [required]
    */
    virtual void billingInvoicesRead(const QString &r_namespace, const QString &id);

    /**
    * @param[in]  r_namespace QString [required]
    * @param[in]  limit QString [optional]
    * @param[in]  offset QString [optional]
    * @param[in]  ordering QString [optional]
    */
    virtual void billingPlansList(const QString &r_namespace, const ::OpenAPI::OptionalParam<QString> &limit = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &offset = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ordering = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  r_namespace QString [required]
    * @param[in]  id QString [required]
    */
    virtual void billingPlansRead(const QString &r_namespace, const QString &id);

    /**
    * @param[in]  r_namespace QString [required]
    * @param[in]  subscription_data OAISubscriptionData [optional]
    */
    virtual void billingSubscriptionsCreate(const QString &r_namespace, const ::OpenAPI::OptionalParam<OAISubscriptionData> &subscription_data = ::OpenAPI::OptionalParam<OAISubscriptionData>());

    /**
    * @param[in]  r_namespace QString [required]
    * @param[in]  id QString [required]
    */
    virtual void billingSubscriptionsDelete(const QString &r_namespace, const QString &id);

    /**
    * @param[in]  r_namespace QString [required]
    * @param[in]  limit QString [optional]
    * @param[in]  offset QString [optional]
    * @param[in]  ordering QString [optional]
    */
    virtual void billingSubscriptionsList(const QString &r_namespace, const ::OpenAPI::OptionalParam<QString> &limit = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &offset = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ordering = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  r_namespace QString [required]
    * @param[in]  id QString [required]
    */
    virtual void billingSubscriptionsRead(const QString &r_namespace, const QString &id);

    /**
    * @param[in]  team QString [required]
    * @param[in]  invoice_id QString [required]
    * @param[in]  limit QString [optional]
    * @param[in]  offset QString [optional]
    * @param[in]  ordering QString [optional]
    */
    virtual void teamsBillingInvoiceItemsList(const QString &team, const QString &invoice_id, const ::OpenAPI::OptionalParam<QString> &limit = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &offset = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ordering = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  team QString [required]
    * @param[in]  invoice_id QString [required]
    * @param[in]  id QString [required]
    */
    virtual void teamsBillingInvoiceItemsRead(const QString &team, const QString &invoice_id, const QString &id);

    /**
    * @param[in]  team QString [required]
    * @param[in]  limit QString [optional]
    * @param[in]  offset QString [optional]
    */
    virtual void teamsBillingInvoicesList(const QString &team, const ::OpenAPI::OptionalParam<QString> &limit = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &offset = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  team QString [required]
    * @param[in]  id QString [required]
    */
    virtual void teamsBillingInvoicesRead(const QString &team, const QString &id);

    /**
    * @param[in]  team QString [required]
    * @param[in]  subscription_data OAISubscriptionData [optional]
    */
    virtual void teamsBillingSubscriptionsCreate(const QString &team, const ::OpenAPI::OptionalParam<OAISubscriptionData> &subscription_data = ::OpenAPI::OptionalParam<OAISubscriptionData>());

    /**
    * @param[in]  team QString [required]
    * @param[in]  id QString [required]
    */
    virtual void teamsBillingSubscriptionsDelete(const QString &team, const QString &id);

    /**
    * @param[in]  team QString [required]
    * @param[in]  limit QString [optional]
    * @param[in]  offset QString [optional]
    * @param[in]  ordering QString [optional]
    */
    virtual void teamsBillingSubscriptionsList(const QString &team, const ::OpenAPI::OptionalParam<QString> &limit = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &offset = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ordering = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  team QString [required]
    * @param[in]  id QString [required]
    */
    virtual void teamsBillingSubscriptionsRead(const QString &team, const QString &id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void billingCardsCreateCallback(OAIHttpRequestWorker *worker);
    void billingCardsDeleteCallback(OAIHttpRequestWorker *worker);
    void billingCardsListCallback(OAIHttpRequestWorker *worker);
    void billingCardsReadCallback(OAIHttpRequestWorker *worker);
    void billingCardsReplaceCallback(OAIHttpRequestWorker *worker);
    void billingCardsUpdateCallback(OAIHttpRequestWorker *worker);
    void billingInvoiceItemsListCallback(OAIHttpRequestWorker *worker);
    void billingInvoiceItemsReadCallback(OAIHttpRequestWorker *worker);
    void billingInvoicesListCallback(OAIHttpRequestWorker *worker);
    void billingInvoicesReadCallback(OAIHttpRequestWorker *worker);
    void billingPlansListCallback(OAIHttpRequestWorker *worker);
    void billingPlansReadCallback(OAIHttpRequestWorker *worker);
    void billingSubscriptionsCreateCallback(OAIHttpRequestWorker *worker);
    void billingSubscriptionsDeleteCallback(OAIHttpRequestWorker *worker);
    void billingSubscriptionsListCallback(OAIHttpRequestWorker *worker);
    void billingSubscriptionsReadCallback(OAIHttpRequestWorker *worker);
    void teamsBillingInvoiceItemsListCallback(OAIHttpRequestWorker *worker);
    void teamsBillingInvoiceItemsReadCallback(OAIHttpRequestWorker *worker);
    void teamsBillingInvoicesListCallback(OAIHttpRequestWorker *worker);
    void teamsBillingInvoicesReadCallback(OAIHttpRequestWorker *worker);
    void teamsBillingSubscriptionsCreateCallback(OAIHttpRequestWorker *worker);
    void teamsBillingSubscriptionsDeleteCallback(OAIHttpRequestWorker *worker);
    void teamsBillingSubscriptionsListCallback(OAIHttpRequestWorker *worker);
    void teamsBillingSubscriptionsReadCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void billingCardsCreateSignal(OAICard summary);
    void billingCardsDeleteSignal();
    void billingCardsListSignal(QList<OAICard> summary);
    void billingCardsReadSignal(OAICard summary);
    void billingCardsReplaceSignal(OAICard summary);
    void billingCardsUpdateSignal(OAICard summary);
    void billingInvoiceItemsListSignal(QList<OAIInvoiceItem> summary);
    void billingInvoiceItemsReadSignal(OAIInvoiceItem summary);
    void billingInvoicesListSignal(QList<OAIInvoice> summary);
    void billingInvoicesReadSignal(OAIInvoice summary);
    void billingPlansListSignal(QList<OAIPlan> summary);
    void billingPlansReadSignal(OAIPlan summary);
    void billingSubscriptionsCreateSignal(OAISubscription summary);
    void billingSubscriptionsDeleteSignal();
    void billingSubscriptionsListSignal(QList<OAISubscription> summary);
    void billingSubscriptionsReadSignal(OAISubscription summary);
    void teamsBillingInvoiceItemsListSignal(QList<OAIInvoiceItem> summary);
    void teamsBillingInvoiceItemsReadSignal(OAIInvoiceItem summary);
    void teamsBillingInvoicesListSignal(QList<OAIInvoice> summary);
    void teamsBillingInvoicesReadSignal(OAIInvoice summary);
    void teamsBillingSubscriptionsCreateSignal(OAISubscription summary);
    void teamsBillingSubscriptionsDeleteSignal();
    void teamsBillingSubscriptionsListSignal(QList<OAISubscription> summary);
    void teamsBillingSubscriptionsReadSignal(OAISubscription summary);


    void billingCardsCreateSignalFull(OAIHttpRequestWorker *worker, OAICard summary);
    void billingCardsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void billingCardsListSignalFull(OAIHttpRequestWorker *worker, QList<OAICard> summary);
    void billingCardsReadSignalFull(OAIHttpRequestWorker *worker, OAICard summary);
    void billingCardsReplaceSignalFull(OAIHttpRequestWorker *worker, OAICard summary);
    void billingCardsUpdateSignalFull(OAIHttpRequestWorker *worker, OAICard summary);
    void billingInvoiceItemsListSignalFull(OAIHttpRequestWorker *worker, QList<OAIInvoiceItem> summary);
    void billingInvoiceItemsReadSignalFull(OAIHttpRequestWorker *worker, OAIInvoiceItem summary);
    void billingInvoicesListSignalFull(OAIHttpRequestWorker *worker, QList<OAIInvoice> summary);
    void billingInvoicesReadSignalFull(OAIHttpRequestWorker *worker, OAIInvoice summary);
    void billingPlansListSignalFull(OAIHttpRequestWorker *worker, QList<OAIPlan> summary);
    void billingPlansReadSignalFull(OAIHttpRequestWorker *worker, OAIPlan summary);
    void billingSubscriptionsCreateSignalFull(OAIHttpRequestWorker *worker, OAISubscription summary);
    void billingSubscriptionsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void billingSubscriptionsListSignalFull(OAIHttpRequestWorker *worker, QList<OAISubscription> summary);
    void billingSubscriptionsReadSignalFull(OAIHttpRequestWorker *worker, OAISubscription summary);
    void teamsBillingInvoiceItemsListSignalFull(OAIHttpRequestWorker *worker, QList<OAIInvoiceItem> summary);
    void teamsBillingInvoiceItemsReadSignalFull(OAIHttpRequestWorker *worker, OAIInvoiceItem summary);
    void teamsBillingInvoicesListSignalFull(OAIHttpRequestWorker *worker, QList<OAIInvoice> summary);
    void teamsBillingInvoicesReadSignalFull(OAIHttpRequestWorker *worker, OAIInvoice summary);
    void teamsBillingSubscriptionsCreateSignalFull(OAIHttpRequestWorker *worker, OAISubscription summary);
    void teamsBillingSubscriptionsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void teamsBillingSubscriptionsListSignalFull(OAIHttpRequestWorker *worker, QList<OAISubscription> summary);
    void teamsBillingSubscriptionsReadSignalFull(OAIHttpRequestWorker *worker, OAISubscription summary);

    Q_DECL_DEPRECATED_X("Use billingCardsCreateSignalError() instead")
    void billingCardsCreateSignalE(OAICard summary, QNetworkReply::NetworkError error_type, QString error_str);
    void billingCardsCreateSignalError(OAICard summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use billingCardsDeleteSignalError() instead")
    void billingCardsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void billingCardsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use billingCardsListSignalError() instead")
    void billingCardsListSignalE(QList<OAICard> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void billingCardsListSignalError(QList<OAICard> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use billingCardsReadSignalError() instead")
    void billingCardsReadSignalE(OAICard summary, QNetworkReply::NetworkError error_type, QString error_str);
    void billingCardsReadSignalError(OAICard summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use billingCardsReplaceSignalError() instead")
    void billingCardsReplaceSignalE(OAICard summary, QNetworkReply::NetworkError error_type, QString error_str);
    void billingCardsReplaceSignalError(OAICard summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use billingCardsUpdateSignalError() instead")
    void billingCardsUpdateSignalE(OAICard summary, QNetworkReply::NetworkError error_type, QString error_str);
    void billingCardsUpdateSignalError(OAICard summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use billingInvoiceItemsListSignalError() instead")
    void billingInvoiceItemsListSignalE(QList<OAIInvoiceItem> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void billingInvoiceItemsListSignalError(QList<OAIInvoiceItem> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use billingInvoiceItemsReadSignalError() instead")
    void billingInvoiceItemsReadSignalE(OAIInvoiceItem summary, QNetworkReply::NetworkError error_type, QString error_str);
    void billingInvoiceItemsReadSignalError(OAIInvoiceItem summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use billingInvoicesListSignalError() instead")
    void billingInvoicesListSignalE(QList<OAIInvoice> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void billingInvoicesListSignalError(QList<OAIInvoice> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use billingInvoicesReadSignalError() instead")
    void billingInvoicesReadSignalE(OAIInvoice summary, QNetworkReply::NetworkError error_type, QString error_str);
    void billingInvoicesReadSignalError(OAIInvoice summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use billingPlansListSignalError() instead")
    void billingPlansListSignalE(QList<OAIPlan> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void billingPlansListSignalError(QList<OAIPlan> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use billingPlansReadSignalError() instead")
    void billingPlansReadSignalE(OAIPlan summary, QNetworkReply::NetworkError error_type, QString error_str);
    void billingPlansReadSignalError(OAIPlan summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use billingSubscriptionsCreateSignalError() instead")
    void billingSubscriptionsCreateSignalE(OAISubscription summary, QNetworkReply::NetworkError error_type, QString error_str);
    void billingSubscriptionsCreateSignalError(OAISubscription summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use billingSubscriptionsDeleteSignalError() instead")
    void billingSubscriptionsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void billingSubscriptionsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use billingSubscriptionsListSignalError() instead")
    void billingSubscriptionsListSignalE(QList<OAISubscription> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void billingSubscriptionsListSignalError(QList<OAISubscription> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use billingSubscriptionsReadSignalError() instead")
    void billingSubscriptionsReadSignalE(OAISubscription summary, QNetworkReply::NetworkError error_type, QString error_str);
    void billingSubscriptionsReadSignalError(OAISubscription summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamsBillingInvoiceItemsListSignalError() instead")
    void teamsBillingInvoiceItemsListSignalE(QList<OAIInvoiceItem> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void teamsBillingInvoiceItemsListSignalError(QList<OAIInvoiceItem> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamsBillingInvoiceItemsReadSignalError() instead")
    void teamsBillingInvoiceItemsReadSignalE(OAIInvoiceItem summary, QNetworkReply::NetworkError error_type, QString error_str);
    void teamsBillingInvoiceItemsReadSignalError(OAIInvoiceItem summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamsBillingInvoicesListSignalError() instead")
    void teamsBillingInvoicesListSignalE(QList<OAIInvoice> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void teamsBillingInvoicesListSignalError(QList<OAIInvoice> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamsBillingInvoicesReadSignalError() instead")
    void teamsBillingInvoicesReadSignalE(OAIInvoice summary, QNetworkReply::NetworkError error_type, QString error_str);
    void teamsBillingInvoicesReadSignalError(OAIInvoice summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamsBillingSubscriptionsCreateSignalError() instead")
    void teamsBillingSubscriptionsCreateSignalE(OAISubscription summary, QNetworkReply::NetworkError error_type, QString error_str);
    void teamsBillingSubscriptionsCreateSignalError(OAISubscription summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamsBillingSubscriptionsDeleteSignalError() instead")
    void teamsBillingSubscriptionsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void teamsBillingSubscriptionsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamsBillingSubscriptionsListSignalError() instead")
    void teamsBillingSubscriptionsListSignalE(QList<OAISubscription> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void teamsBillingSubscriptionsListSignalError(QList<OAISubscription> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamsBillingSubscriptionsReadSignalError() instead")
    void teamsBillingSubscriptionsReadSignalE(OAISubscription summary, QNetworkReply::NetworkError error_type, QString error_str);
    void teamsBillingSubscriptionsReadSignalError(OAISubscription summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use billingCardsCreateSignalErrorFull() instead")
    void billingCardsCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void billingCardsCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use billingCardsDeleteSignalErrorFull() instead")
    void billingCardsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void billingCardsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use billingCardsListSignalErrorFull() instead")
    void billingCardsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void billingCardsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use billingCardsReadSignalErrorFull() instead")
    void billingCardsReadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void billingCardsReadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use billingCardsReplaceSignalErrorFull() instead")
    void billingCardsReplaceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void billingCardsReplaceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use billingCardsUpdateSignalErrorFull() instead")
    void billingCardsUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void billingCardsUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use billingInvoiceItemsListSignalErrorFull() instead")
    void billingInvoiceItemsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void billingInvoiceItemsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use billingInvoiceItemsReadSignalErrorFull() instead")
    void billingInvoiceItemsReadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void billingInvoiceItemsReadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use billingInvoicesListSignalErrorFull() instead")
    void billingInvoicesListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void billingInvoicesListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use billingInvoicesReadSignalErrorFull() instead")
    void billingInvoicesReadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void billingInvoicesReadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use billingPlansListSignalErrorFull() instead")
    void billingPlansListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void billingPlansListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use billingPlansReadSignalErrorFull() instead")
    void billingPlansReadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void billingPlansReadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use billingSubscriptionsCreateSignalErrorFull() instead")
    void billingSubscriptionsCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void billingSubscriptionsCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use billingSubscriptionsDeleteSignalErrorFull() instead")
    void billingSubscriptionsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void billingSubscriptionsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use billingSubscriptionsListSignalErrorFull() instead")
    void billingSubscriptionsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void billingSubscriptionsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use billingSubscriptionsReadSignalErrorFull() instead")
    void billingSubscriptionsReadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void billingSubscriptionsReadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamsBillingInvoiceItemsListSignalErrorFull() instead")
    void teamsBillingInvoiceItemsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teamsBillingInvoiceItemsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamsBillingInvoiceItemsReadSignalErrorFull() instead")
    void teamsBillingInvoiceItemsReadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teamsBillingInvoiceItemsReadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamsBillingInvoicesListSignalErrorFull() instead")
    void teamsBillingInvoicesListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teamsBillingInvoicesListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamsBillingInvoicesReadSignalErrorFull() instead")
    void teamsBillingInvoicesReadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teamsBillingInvoicesReadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamsBillingSubscriptionsCreateSignalErrorFull() instead")
    void teamsBillingSubscriptionsCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teamsBillingSubscriptionsCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamsBillingSubscriptionsDeleteSignalErrorFull() instead")
    void teamsBillingSubscriptionsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teamsBillingSubscriptionsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamsBillingSubscriptionsListSignalErrorFull() instead")
    void teamsBillingSubscriptionsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teamsBillingSubscriptionsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamsBillingSubscriptionsReadSignalErrorFull() instead")
    void teamsBillingSubscriptionsReadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teamsBillingSubscriptionsReadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
