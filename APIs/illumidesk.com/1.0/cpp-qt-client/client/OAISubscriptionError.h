/**
 * IllumiDesk
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAISubscriptionError.h
 *
 * 
 */

#ifndef OAISubscriptionError_H
#define OAISubscriptionError_H

#include <QJsonObject>

#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAISubscriptionError : public OAIObject {
public:
    OAISubscriptionError();
    OAISubscriptionError(QString json);
    ~OAISubscriptionError() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<QString> getApplicationFeePercent() const;
    void setApplicationFeePercent(const QList<QString> &application_fee_percent);
    bool is_application_fee_percent_Set() const;
    bool is_application_fee_percent_Valid() const;

    QList<QString> getCancelAtPeriodEnd() const;
    void setCancelAtPeriodEnd(const QList<QString> &cancel_at_period_end);
    bool is_cancel_at_period_end_Set() const;
    bool is_cancel_at_period_end_Valid() const;

    QList<QString> getCanceledAt() const;
    void setCanceledAt(const QList<QString> &canceled_at);
    bool is_canceled_at_Set() const;
    bool is_canceled_at_Valid() const;

    QList<QString> getCreated() const;
    void setCreated(const QList<QString> &created);
    bool is_created_Set() const;
    bool is_created_Valid() const;

    QList<QString> getCurrentPeriodEnd() const;
    void setCurrentPeriodEnd(const QList<QString> &current_period_end);
    bool is_current_period_end_Set() const;
    bool is_current_period_end_Valid() const;

    QList<QString> getCurrentPeriodStart() const;
    void setCurrentPeriodStart(const QList<QString> &current_period_start);
    bool is_current_period_start_Set() const;
    bool is_current_period_start_Valid() const;

    QList<QString> getEndedAt() const;
    void setEndedAt(const QList<QString> &ended_at);
    bool is_ended_at_Set() const;
    bool is_ended_at_Valid() const;

    QList<QString> getId() const;
    void setId(const QList<QString> &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    QList<QString> getLivemode() const;
    void setLivemode(const QList<QString> &livemode);
    bool is_livemode_Set() const;
    bool is_livemode_Valid() const;

    QList<QString> getNonFieldErrors() const;
    void setNonFieldErrors(const QList<QString> &non_field_errors);
    bool is_non_field_errors_Set() const;
    bool is_non_field_errors_Valid() const;

    QList<QString> getPlan() const;
    void setPlan(const QList<QString> &plan);
    bool is_plan_Set() const;
    bool is_plan_Valid() const;

    QList<QString> getQuantity() const;
    void setQuantity(const QList<QString> &quantity);
    bool is_quantity_Set() const;
    bool is_quantity_Valid() const;

    QList<QString> getStart() const;
    void setStart(const QList<QString> &start);
    bool is_start_Set() const;
    bool is_start_Valid() const;

    QList<QString> getStatus() const;
    void setStatus(const QList<QString> &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    QList<QString> getStripeId() const;
    void setStripeId(const QList<QString> &stripe_id);
    bool is_stripe_id_Set() const;
    bool is_stripe_id_Valid() const;

    QList<QString> getTrialEnd() const;
    void setTrialEnd(const QList<QString> &trial_end);
    bool is_trial_end_Set() const;
    bool is_trial_end_Valid() const;

    QList<QString> getTrialStart() const;
    void setTrialStart(const QList<QString> &trial_start);
    bool is_trial_start_Set() const;
    bool is_trial_start_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<QString> m_application_fee_percent;
    bool m_application_fee_percent_isSet;
    bool m_application_fee_percent_isValid;

    QList<QString> m_cancel_at_period_end;
    bool m_cancel_at_period_end_isSet;
    bool m_cancel_at_period_end_isValid;

    QList<QString> m_canceled_at;
    bool m_canceled_at_isSet;
    bool m_canceled_at_isValid;

    QList<QString> m_created;
    bool m_created_isSet;
    bool m_created_isValid;

    QList<QString> m_current_period_end;
    bool m_current_period_end_isSet;
    bool m_current_period_end_isValid;

    QList<QString> m_current_period_start;
    bool m_current_period_start_isSet;
    bool m_current_period_start_isValid;

    QList<QString> m_ended_at;
    bool m_ended_at_isSet;
    bool m_ended_at_isValid;

    QList<QString> m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    QList<QString> m_livemode;
    bool m_livemode_isSet;
    bool m_livemode_isValid;

    QList<QString> m_non_field_errors;
    bool m_non_field_errors_isSet;
    bool m_non_field_errors_isValid;

    QList<QString> m_plan;
    bool m_plan_isSet;
    bool m_plan_isValid;

    QList<QString> m_quantity;
    bool m_quantity_isSet;
    bool m_quantity_isValid;

    QList<QString> m_start;
    bool m_start_isSet;
    bool m_start_isValid;

    QList<QString> m_status;
    bool m_status_isSet;
    bool m_status_isValid;

    QList<QString> m_stripe_id;
    bool m_stripe_id_isSet;
    bool m_stripe_id_isValid;

    QList<QString> m_trial_end;
    bool m_trial_end_isSet;
    bool m_trial_end_isValid;

    QList<QString> m_trial_start;
    bool m_trial_start_isSet;
    bool m_trial_start_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAISubscriptionError)

#endif // OAISubscriptionError_H
