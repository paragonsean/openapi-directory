/**
 * IllumiDesk
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUserProfile.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUserProfile::OAIUserProfile(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUserProfile::OAIUserProfile() {
    this->initializeModel();
}

OAIUserProfile::~OAIUserProfile() {}

void OAIUserProfile::initializeModel() {

    m_avatar_isSet = false;
    m_avatar_isValid = false;

    m_bio_isSet = false;
    m_bio_isValid = false;

    m_company_isSet = false;
    m_company_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_timezone_isSet = false;
    m_timezone_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIUserProfile::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUserProfile::fromJsonObject(QJsonObject json) {

    m_avatar_isValid = ::OpenAPI::fromJsonValue(m_avatar, json[QString("avatar")]);
    m_avatar_isSet = !json[QString("avatar")].isNull() && m_avatar_isValid;

    m_bio_isValid = ::OpenAPI::fromJsonValue(m_bio, json[QString("bio")]);
    m_bio_isSet = !json[QString("bio")].isNull() && m_bio_isValid;

    m_company_isValid = ::OpenAPI::fromJsonValue(m_company, json[QString("company")]);
    m_company_isSet = !json[QString("company")].isNull() && m_company_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_timezone_isValid = ::OpenAPI::fromJsonValue(m_timezone, json[QString("timezone")]);
    m_timezone_isSet = !json[QString("timezone")].isNull() && m_timezone_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIUserProfile::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUserProfile::asJsonObject() const {
    QJsonObject obj;
    if (m_avatar_isSet) {
        obj.insert(QString("avatar"), ::OpenAPI::toJsonValue(m_avatar));
    }
    if (m_bio_isSet) {
        obj.insert(QString("bio"), ::OpenAPI::toJsonValue(m_bio));
    }
    if (m_company_isSet) {
        obj.insert(QString("company"), ::OpenAPI::toJsonValue(m_company));
    }
    if (m_location_isSet) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_timezone_isSet) {
        obj.insert(QString("timezone"), ::OpenAPI::toJsonValue(m_timezone));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QByteArray OAIUserProfile::getAvatar() const {
    return m_avatar;
}
void OAIUserProfile::setAvatar(const QByteArray &avatar) {
    m_avatar = avatar;
    m_avatar_isSet = true;
}

bool OAIUserProfile::is_avatar_Set() const{
    return m_avatar_isSet;
}

bool OAIUserProfile::is_avatar_Valid() const{
    return m_avatar_isValid;
}

QString OAIUserProfile::getBio() const {
    return m_bio;
}
void OAIUserProfile::setBio(const QString &bio) {
    m_bio = bio;
    m_bio_isSet = true;
}

bool OAIUserProfile::is_bio_Set() const{
    return m_bio_isSet;
}

bool OAIUserProfile::is_bio_Valid() const{
    return m_bio_isValid;
}

QString OAIUserProfile::getCompany() const {
    return m_company;
}
void OAIUserProfile::setCompany(const QString &company) {
    m_company = company;
    m_company_isSet = true;
}

bool OAIUserProfile::is_company_Set() const{
    return m_company_isSet;
}

bool OAIUserProfile::is_company_Valid() const{
    return m_company_isValid;
}

QString OAIUserProfile::getLocation() const {
    return m_location;
}
void OAIUserProfile::setLocation(const QString &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIUserProfile::is_location_Set() const{
    return m_location_isSet;
}

bool OAIUserProfile::is_location_Valid() const{
    return m_location_isValid;
}

QString OAIUserProfile::getTimezone() const {
    return m_timezone;
}
void OAIUserProfile::setTimezone(const QString &timezone) {
    m_timezone = timezone;
    m_timezone_isSet = true;
}

bool OAIUserProfile::is_timezone_Set() const{
    return m_timezone_isSet;
}

bool OAIUserProfile::is_timezone_Valid() const{
    return m_timezone_isValid;
}

QString OAIUserProfile::getUrl() const {
    return m_url;
}
void OAIUserProfile::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIUserProfile::is_url_Set() const{
    return m_url_isSet;
}

bool OAIUserProfile::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIUserProfile::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_avatar_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bio_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_company_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timezone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUserProfile::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
