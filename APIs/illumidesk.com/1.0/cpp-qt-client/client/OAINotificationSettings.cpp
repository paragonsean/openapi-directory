/**
 * IllumiDesk
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINotificationSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINotificationSettings::OAINotificationSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINotificationSettings::OAINotificationSettings() {
    this->initializeModel();
}

OAINotificationSettings::~OAINotificationSettings() {}

void OAINotificationSettings::initializeModel() {

    m_email_address_isSet = false;
    m_email_address_isValid = false;

    m_emails_enabled_isSet = false;
    m_emails_enabled_isValid = false;

    m_enabled_isSet = false;
    m_enabled_isValid = false;

    m_entity_isSet = false;
    m_entity_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;
}

void OAINotificationSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINotificationSettings::fromJsonObject(QJsonObject json) {

    m_email_address_isValid = ::OpenAPI::fromJsonValue(m_email_address, json[QString("email_address")]);
    m_email_address_isSet = !json[QString("email_address")].isNull() && m_email_address_isValid;

    m_emails_enabled_isValid = ::OpenAPI::fromJsonValue(m_emails_enabled, json[QString("emails_enabled")]);
    m_emails_enabled_isSet = !json[QString("emails_enabled")].isNull() && m_emails_enabled_isValid;

    m_enabled_isValid = ::OpenAPI::fromJsonValue(m_enabled, json[QString("enabled")]);
    m_enabled_isSet = !json[QString("enabled")].isNull() && m_enabled_isValid;

    m_entity_isValid = ::OpenAPI::fromJsonValue(m_entity, json[QString("entity")]);
    m_entity_isSet = !json[QString("entity")].isNull() && m_entity_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;
}

QString OAINotificationSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINotificationSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_email_address_isSet) {
        obj.insert(QString("email_address"), ::OpenAPI::toJsonValue(m_email_address));
    }
    if (m_emails_enabled_isSet) {
        obj.insert(QString("emails_enabled"), ::OpenAPI::toJsonValue(m_emails_enabled));
    }
    if (m_enabled_isSet) {
        obj.insert(QString("enabled"), ::OpenAPI::toJsonValue(m_enabled));
    }
    if (m_entity_isSet) {
        obj.insert(QString("entity"), ::OpenAPI::toJsonValue(m_entity));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_user_isSet) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    return obj;
}

QString OAINotificationSettings::getEmailAddress() const {
    return m_email_address;
}
void OAINotificationSettings::setEmailAddress(const QString &email_address) {
    m_email_address = email_address;
    m_email_address_isSet = true;
}

bool OAINotificationSettings::is_email_address_Set() const{
    return m_email_address_isSet;
}

bool OAINotificationSettings::is_email_address_Valid() const{
    return m_email_address_isValid;
}

bool OAINotificationSettings::isEmailsEnabled() const {
    return m_emails_enabled;
}
void OAINotificationSettings::setEmailsEnabled(const bool &emails_enabled) {
    m_emails_enabled = emails_enabled;
    m_emails_enabled_isSet = true;
}

bool OAINotificationSettings::is_emails_enabled_Set() const{
    return m_emails_enabled_isSet;
}

bool OAINotificationSettings::is_emails_enabled_Valid() const{
    return m_emails_enabled_isValid;
}

bool OAINotificationSettings::isEnabled() const {
    return m_enabled;
}
void OAINotificationSettings::setEnabled(const bool &enabled) {
    m_enabled = enabled;
    m_enabled_isSet = true;
}

bool OAINotificationSettings::is_enabled_Set() const{
    return m_enabled_isSet;
}

bool OAINotificationSettings::is_enabled_Valid() const{
    return m_enabled_isValid;
}

QString OAINotificationSettings::getEntity() const {
    return m_entity;
}
void OAINotificationSettings::setEntity(const QString &entity) {
    m_entity = entity;
    m_entity_isSet = true;
}

bool OAINotificationSettings::is_entity_Set() const{
    return m_entity_isSet;
}

bool OAINotificationSettings::is_entity_Valid() const{
    return m_entity_isValid;
}

QString OAINotificationSettings::getId() const {
    return m_id;
}
void OAINotificationSettings::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAINotificationSettings::is_id_Set() const{
    return m_id_isSet;
}

bool OAINotificationSettings::is_id_Valid() const{
    return m_id_isValid;
}

QString OAINotificationSettings::getUser() const {
    return m_user;
}
void OAINotificationSettings::setUser(const QString &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAINotificationSettings::is_user_Set() const{
    return m_user_isSet;
}

bool OAINotificationSettings::is_user_Valid() const{
    return m_user_isValid;
}

bool OAINotificationSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_email_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_emails_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_entity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINotificationSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_emails_enabled_isValid && m_enabled_isValid && true;
}

} // namespace OpenAPI
