/**
 * IllumiDesk
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIServerRunStatisticsData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIServerRunStatisticsData::OAIServerRunStatisticsData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIServerRunStatisticsData::OAIServerRunStatisticsData() {
    this->initializeModel();
}

OAIServerRunStatisticsData::~OAIServerRunStatisticsData() {}

void OAIServerRunStatisticsData::initializeModel() {

    m_exit_code_isSet = false;
    m_exit_code_isValid = false;

    m_size_isSet = false;
    m_size_isValid = false;

    m_stacktrace_isSet = false;
    m_stacktrace_isValid = false;

    m_start_isSet = false;
    m_start_isValid = false;

    m_stop_isSet = false;
    m_stop_isValid = false;
}

void OAIServerRunStatisticsData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIServerRunStatisticsData::fromJsonObject(QJsonObject json) {

    m_exit_code_isValid = ::OpenAPI::fromJsonValue(m_exit_code, json[QString("exit_code")]);
    m_exit_code_isSet = !json[QString("exit_code")].isNull() && m_exit_code_isValid;

    m_size_isValid = ::OpenAPI::fromJsonValue(m_size, json[QString("size")]);
    m_size_isSet = !json[QString("size")].isNull() && m_size_isValid;

    m_stacktrace_isValid = ::OpenAPI::fromJsonValue(m_stacktrace, json[QString("stacktrace")]);
    m_stacktrace_isSet = !json[QString("stacktrace")].isNull() && m_stacktrace_isValid;

    m_start_isValid = ::OpenAPI::fromJsonValue(m_start, json[QString("start")]);
    m_start_isSet = !json[QString("start")].isNull() && m_start_isValid;

    m_stop_isValid = ::OpenAPI::fromJsonValue(m_stop, json[QString("stop")]);
    m_stop_isSet = !json[QString("stop")].isNull() && m_stop_isValid;
}

QString OAIServerRunStatisticsData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIServerRunStatisticsData::asJsonObject() const {
    QJsonObject obj;
    if (m_exit_code_isSet) {
        obj.insert(QString("exit_code"), ::OpenAPI::toJsonValue(m_exit_code));
    }
    if (m_size_isSet) {
        obj.insert(QString("size"), ::OpenAPI::toJsonValue(m_size));
    }
    if (m_stacktrace_isSet) {
        obj.insert(QString("stacktrace"), ::OpenAPI::toJsonValue(m_stacktrace));
    }
    if (m_start_isSet) {
        obj.insert(QString("start"), ::OpenAPI::toJsonValue(m_start));
    }
    if (m_stop_isSet) {
        obj.insert(QString("stop"), ::OpenAPI::toJsonValue(m_stop));
    }
    return obj;
}

qint32 OAIServerRunStatisticsData::getExitCode() const {
    return m_exit_code;
}
void OAIServerRunStatisticsData::setExitCode(const qint32 &exit_code) {
    m_exit_code = exit_code;
    m_exit_code_isSet = true;
}

bool OAIServerRunStatisticsData::is_exit_code_Set() const{
    return m_exit_code_isSet;
}

bool OAIServerRunStatisticsData::is_exit_code_Valid() const{
    return m_exit_code_isValid;
}

qint32 OAIServerRunStatisticsData::getSize() const {
    return m_size;
}
void OAIServerRunStatisticsData::setSize(const qint32 &size) {
    m_size = size;
    m_size_isSet = true;
}

bool OAIServerRunStatisticsData::is_size_Set() const{
    return m_size_isSet;
}

bool OAIServerRunStatisticsData::is_size_Valid() const{
    return m_size_isValid;
}

QString OAIServerRunStatisticsData::getStacktrace() const {
    return m_stacktrace;
}
void OAIServerRunStatisticsData::setStacktrace(const QString &stacktrace) {
    m_stacktrace = stacktrace;
    m_stacktrace_isSet = true;
}

bool OAIServerRunStatisticsData::is_stacktrace_Set() const{
    return m_stacktrace_isSet;
}

bool OAIServerRunStatisticsData::is_stacktrace_Valid() const{
    return m_stacktrace_isValid;
}

QString OAIServerRunStatisticsData::getStart() const {
    return m_start;
}
void OAIServerRunStatisticsData::setStart(const QString &start) {
    m_start = start;
    m_start_isSet = true;
}

bool OAIServerRunStatisticsData::is_start_Set() const{
    return m_start_isSet;
}

bool OAIServerRunStatisticsData::is_start_Valid() const{
    return m_start_isValid;
}

QString OAIServerRunStatisticsData::getStop() const {
    return m_stop;
}
void OAIServerRunStatisticsData::setStop(const QString &stop) {
    m_stop = stop;
    m_stop_isSet = true;
}

bool OAIServerRunStatisticsData::is_stop_Set() const{
    return m_stop_isSet;
}

bool OAIServerRunStatisticsData::is_stop_Valid() const{
    return m_stop_isValid;
}

bool OAIServerRunStatisticsData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_exit_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stacktrace_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stop_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIServerRunStatisticsData::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
