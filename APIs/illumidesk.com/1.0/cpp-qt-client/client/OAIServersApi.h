/**
 * IllumiDesk
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIServersApi_H
#define OAI_OAIServersApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAINotFound.h"
#include "OAIServerSize.h"
#include "OAIServerSizeData.h"
#include "OAIServerSizeError.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIServersApi : public QObject {
    Q_OBJECT

public:
    OAIServersApi(const int timeOut = 0);
    ~OAIServersApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  size QString [required]
    */
    virtual void serversOptionsResourcesRead(const QString &size);

    /**
    * @param[in]  serversize_data OAIServerSizeData [optional]
    */
    virtual void serversOptionsServerSizeCreate(const ::OpenAPI::OptionalParam<OAIServerSizeData> &serversize_data = ::OpenAPI::OptionalParam<OAIServerSizeData>());

    /**
    * @param[in]  size QString [required]
    */
    virtual void serversOptionsServerSizeDelete(const QString &size);

    /**
    * @param[in]  size QString [required]
    * @param[in]  serversize_data OAIServerSizeData [optional]
    */
    virtual void serversOptionsServerSizeReplace(const QString &size, const ::OpenAPI::OptionalParam<OAIServerSizeData> &serversize_data = ::OpenAPI::OptionalParam<OAIServerSizeData>());

    /**
    * @param[in]  size QString [required]
    * @param[in]  serversize_data OAIServerSizeData [optional]
    */
    virtual void serversOptionsServerSizeUpdate(const QString &size, const ::OpenAPI::OptionalParam<OAIServerSizeData> &serversize_data = ::OpenAPI::OptionalParam<OAIServerSizeData>());

    /**
    * @param[in]  limit QString [optional]
    * @param[in]  offset QString [optional]
    * @param[in]  ordering QString [optional]
    */
    virtual void serversOptionsSizesList(const ::OpenAPI::OptionalParam<QString> &limit = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &offset = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ordering = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void serversOptionsResourcesReadCallback(OAIHttpRequestWorker *worker);
    void serversOptionsServerSizeCreateCallback(OAIHttpRequestWorker *worker);
    void serversOptionsServerSizeDeleteCallback(OAIHttpRequestWorker *worker);
    void serversOptionsServerSizeReplaceCallback(OAIHttpRequestWorker *worker);
    void serversOptionsServerSizeUpdateCallback(OAIHttpRequestWorker *worker);
    void serversOptionsSizesListCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void serversOptionsResourcesReadSignal(OAIServerSize summary);
    void serversOptionsServerSizeCreateSignal(OAIServerSize summary);
    void serversOptionsServerSizeDeleteSignal();
    void serversOptionsServerSizeReplaceSignal(OAIServerSize summary);
    void serversOptionsServerSizeUpdateSignal(OAIServerSize summary);
    void serversOptionsSizesListSignal(QList<OAIServerSize> summary);


    void serversOptionsResourcesReadSignalFull(OAIHttpRequestWorker *worker, OAIServerSize summary);
    void serversOptionsServerSizeCreateSignalFull(OAIHttpRequestWorker *worker, OAIServerSize summary);
    void serversOptionsServerSizeDeleteSignalFull(OAIHttpRequestWorker *worker);
    void serversOptionsServerSizeReplaceSignalFull(OAIHttpRequestWorker *worker, OAIServerSize summary);
    void serversOptionsServerSizeUpdateSignalFull(OAIHttpRequestWorker *worker, OAIServerSize summary);
    void serversOptionsSizesListSignalFull(OAIHttpRequestWorker *worker, QList<OAIServerSize> summary);

    Q_DECL_DEPRECATED_X("Use serversOptionsResourcesReadSignalError() instead")
    void serversOptionsResourcesReadSignalE(OAIServerSize summary, QNetworkReply::NetworkError error_type, QString error_str);
    void serversOptionsResourcesReadSignalError(OAIServerSize summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serversOptionsServerSizeCreateSignalError() instead")
    void serversOptionsServerSizeCreateSignalE(OAIServerSize summary, QNetworkReply::NetworkError error_type, QString error_str);
    void serversOptionsServerSizeCreateSignalError(OAIServerSize summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serversOptionsServerSizeDeleteSignalError() instead")
    void serversOptionsServerSizeDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void serversOptionsServerSizeDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serversOptionsServerSizeReplaceSignalError() instead")
    void serversOptionsServerSizeReplaceSignalE(OAIServerSize summary, QNetworkReply::NetworkError error_type, QString error_str);
    void serversOptionsServerSizeReplaceSignalError(OAIServerSize summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serversOptionsServerSizeUpdateSignalError() instead")
    void serversOptionsServerSizeUpdateSignalE(OAIServerSize summary, QNetworkReply::NetworkError error_type, QString error_str);
    void serversOptionsServerSizeUpdateSignalError(OAIServerSize summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serversOptionsSizesListSignalError() instead")
    void serversOptionsSizesListSignalE(QList<OAIServerSize> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void serversOptionsSizesListSignalError(QList<OAIServerSize> summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use serversOptionsResourcesReadSignalErrorFull() instead")
    void serversOptionsResourcesReadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void serversOptionsResourcesReadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serversOptionsServerSizeCreateSignalErrorFull() instead")
    void serversOptionsServerSizeCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void serversOptionsServerSizeCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serversOptionsServerSizeDeleteSignalErrorFull() instead")
    void serversOptionsServerSizeDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void serversOptionsServerSizeDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serversOptionsServerSizeReplaceSignalErrorFull() instead")
    void serversOptionsServerSizeReplaceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void serversOptionsServerSizeReplaceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serversOptionsServerSizeUpdateSignalErrorFull() instead")
    void serversOptionsServerSizeUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void serversOptionsServerSizeUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serversOptionsSizesListSignalErrorFull() instead")
    void serversOptionsSizesListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void serversOptionsSizesListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
