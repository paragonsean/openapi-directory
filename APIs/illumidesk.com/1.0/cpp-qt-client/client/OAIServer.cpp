/**
 * IllumiDesk
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIServer.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIServer::OAIServer(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIServer::OAIServer() {
    this->initializeModel();
}

OAIServer::~OAIServer() {}

void OAIServer::initializeModel() {

    m_config_isSet = false;
    m_config_isValid = false;

    m_connected_isSet = false;
    m_connected_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_created_by_isSet = false;
    m_created_by_isValid = false;

    m_endpoint_isSet = false;
    m_endpoint_isValid = false;

    m_host_isSet = false;
    m_host_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_image_name_isSet = false;
    m_image_name_isValid = false;

    m_logs_url_isSet = false;
    m_logs_url_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_project_isSet = false;
    m_project_isValid = false;

    m_server_size_isSet = false;
    m_server_size_isValid = false;

    m_startup_script_isSet = false;
    m_startup_script_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_status_url_isSet = false;
    m_status_url_isValid = false;
}

void OAIServer::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIServer::fromJsonObject(QJsonObject json) {

    m_config_isValid = ::OpenAPI::fromJsonValue(m_config, json[QString("config")]);
    m_config_isSet = !json[QString("config")].isNull() && m_config_isValid;

    m_connected_isValid = ::OpenAPI::fromJsonValue(m_connected, json[QString("connected")]);
    m_connected_isSet = !json[QString("connected")].isNull() && m_connected_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_created_by_isValid = ::OpenAPI::fromJsonValue(m_created_by, json[QString("created_by")]);
    m_created_by_isSet = !json[QString("created_by")].isNull() && m_created_by_isValid;

    m_endpoint_isValid = ::OpenAPI::fromJsonValue(m_endpoint, json[QString("endpoint")]);
    m_endpoint_isSet = !json[QString("endpoint")].isNull() && m_endpoint_isValid;

    m_host_isValid = ::OpenAPI::fromJsonValue(m_host, json[QString("host")]);
    m_host_isSet = !json[QString("host")].isNull() && m_host_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_image_name_isValid = ::OpenAPI::fromJsonValue(m_image_name, json[QString("image_name")]);
    m_image_name_isSet = !json[QString("image_name")].isNull() && m_image_name_isValid;

    m_logs_url_isValid = ::OpenAPI::fromJsonValue(m_logs_url, json[QString("logs_url")]);
    m_logs_url_isSet = !json[QString("logs_url")].isNull() && m_logs_url_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_project_isValid = ::OpenAPI::fromJsonValue(m_project, json[QString("project")]);
    m_project_isSet = !json[QString("project")].isNull() && m_project_isValid;

    m_server_size_isValid = ::OpenAPI::fromJsonValue(m_server_size, json[QString("server_size")]);
    m_server_size_isSet = !json[QString("server_size")].isNull() && m_server_size_isValid;

    m_startup_script_isValid = ::OpenAPI::fromJsonValue(m_startup_script, json[QString("startup_script")]);
    m_startup_script_isSet = !json[QString("startup_script")].isNull() && m_startup_script_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_status_url_isValid = ::OpenAPI::fromJsonValue(m_status_url, json[QString("status_url")]);
    m_status_url_isSet = !json[QString("status_url")].isNull() && m_status_url_isValid;
}

QString OAIServer::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIServer::asJsonObject() const {
    QJsonObject obj;
    if (m_config_isSet) {
        obj.insert(QString("config"), ::OpenAPI::toJsonValue(m_config));
    }
    if (m_connected.size() > 0) {
        obj.insert(QString("connected"), ::OpenAPI::toJsonValue(m_connected));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_created_by_isSet) {
        obj.insert(QString("created_by"), ::OpenAPI::toJsonValue(m_created_by));
    }
    if (m_endpoint_isSet) {
        obj.insert(QString("endpoint"), ::OpenAPI::toJsonValue(m_endpoint));
    }
    if (m_host_isSet) {
        obj.insert(QString("host"), ::OpenAPI::toJsonValue(m_host));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_image_name_isSet) {
        obj.insert(QString("image_name"), ::OpenAPI::toJsonValue(m_image_name));
    }
    if (m_logs_url_isSet) {
        obj.insert(QString("logs_url"), ::OpenAPI::toJsonValue(m_logs_url));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_project_isSet) {
        obj.insert(QString("project"), ::OpenAPI::toJsonValue(m_project));
    }
    if (m_server_size_isSet) {
        obj.insert(QString("server_size"), ::OpenAPI::toJsonValue(m_server_size));
    }
    if (m_startup_script_isSet) {
        obj.insert(QString("startup_script"), ::OpenAPI::toJsonValue(m_startup_script));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_status_url_isSet) {
        obj.insert(QString("status_url"), ::OpenAPI::toJsonValue(m_status_url));
    }
    return obj;
}

OAIObject OAIServer::getConfig() const {
    return m_config;
}
void OAIServer::setConfig(const OAIObject &config) {
    m_config = config;
    m_config_isSet = true;
}

bool OAIServer::is_config_Set() const{
    return m_config_isSet;
}

bool OAIServer::is_config_Valid() const{
    return m_config_isValid;
}

QList<QString> OAIServer::getConnected() const {
    return m_connected;
}
void OAIServer::setConnected(const QList<QString> &connected) {
    m_connected = connected;
    m_connected_isSet = true;
}

bool OAIServer::is_connected_Set() const{
    return m_connected_isSet;
}

bool OAIServer::is_connected_Valid() const{
    return m_connected_isValid;
}

QString OAIServer::getCreatedAt() const {
    return m_created_at;
}
void OAIServer::setCreatedAt(const QString &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIServer::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIServer::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAIServer::getCreatedBy() const {
    return m_created_by;
}
void OAIServer::setCreatedBy(const QString &created_by) {
    m_created_by = created_by;
    m_created_by_isSet = true;
}

bool OAIServer::is_created_by_Set() const{
    return m_created_by_isSet;
}

bool OAIServer::is_created_by_Valid() const{
    return m_created_by_isValid;
}

QString OAIServer::getEndpoint() const {
    return m_endpoint;
}
void OAIServer::setEndpoint(const QString &endpoint) {
    m_endpoint = endpoint;
    m_endpoint_isSet = true;
}

bool OAIServer::is_endpoint_Set() const{
    return m_endpoint_isSet;
}

bool OAIServer::is_endpoint_Valid() const{
    return m_endpoint_isValid;
}

QString OAIServer::getHost() const {
    return m_host;
}
void OAIServer::setHost(const QString &host) {
    m_host = host;
    m_host_isSet = true;
}

bool OAIServer::is_host_Set() const{
    return m_host_isSet;
}

bool OAIServer::is_host_Valid() const{
    return m_host_isValid;
}

QString OAIServer::getId() const {
    return m_id;
}
void OAIServer::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIServer::is_id_Set() const{
    return m_id_isSet;
}

bool OAIServer::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIServer::getImageName() const {
    return m_image_name;
}
void OAIServer::setImageName(const QString &image_name) {
    m_image_name = image_name;
    m_image_name_isSet = true;
}

bool OAIServer::is_image_name_Set() const{
    return m_image_name_isSet;
}

bool OAIServer::is_image_name_Valid() const{
    return m_image_name_isValid;
}

QString OAIServer::getLogsUrl() const {
    return m_logs_url;
}
void OAIServer::setLogsUrl(const QString &logs_url) {
    m_logs_url = logs_url;
    m_logs_url_isSet = true;
}

bool OAIServer::is_logs_url_Set() const{
    return m_logs_url_isSet;
}

bool OAIServer::is_logs_url_Valid() const{
    return m_logs_url_isValid;
}

QString OAIServer::getName() const {
    return m_name;
}
void OAIServer::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIServer::is_name_Set() const{
    return m_name_isSet;
}

bool OAIServer::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIServer::getProject() const {
    return m_project;
}
void OAIServer::setProject(const QString &project) {
    m_project = project;
    m_project_isSet = true;
}

bool OAIServer::is_project_Set() const{
    return m_project_isSet;
}

bool OAIServer::is_project_Valid() const{
    return m_project_isValid;
}

QString OAIServer::getServerSize() const {
    return m_server_size;
}
void OAIServer::setServerSize(const QString &server_size) {
    m_server_size = server_size;
    m_server_size_isSet = true;
}

bool OAIServer::is_server_size_Set() const{
    return m_server_size_isSet;
}

bool OAIServer::is_server_size_Valid() const{
    return m_server_size_isValid;
}

QString OAIServer::getStartupScript() const {
    return m_startup_script;
}
void OAIServer::setStartupScript(const QString &startup_script) {
    m_startup_script = startup_script;
    m_startup_script_isSet = true;
}

bool OAIServer::is_startup_script_Set() const{
    return m_startup_script_isSet;
}

bool OAIServer::is_startup_script_Valid() const{
    return m_startup_script_isValid;
}

QString OAIServer::getStatus() const {
    return m_status;
}
void OAIServer::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIServer::is_status_Set() const{
    return m_status_isSet;
}

bool OAIServer::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIServer::getStatusUrl() const {
    return m_status_url;
}
void OAIServer::setStatusUrl(const QString &status_url) {
    m_status_url = status_url;
    m_status_url_isSet = true;
}

bool OAIServer::is_status_url_Set() const{
    return m_status_url_isSet;
}

bool OAIServer::is_status_url_Valid() const{
    return m_status_url_isValid;
}

bool OAIServer::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_config_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_connected.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_endpoint_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_host_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_logs_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_server_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_startup_script_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIServer::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && true;
}

} // namespace OpenAPI
