/**
 * IllumiDesk
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAuthApi_H
#define OAI_OAIAuthApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIJWT.h"
#include "OAIJWTData.h"
#include "OAIJWTError.h"
#include "OAIRefreshJSONWebToken.h"
#include "OAIRefreshJSONWebTokenData.h"
#include "OAIRefreshJSONWebTokenError.h"
#include "OAIUser.h"
#include "OAIUserData.h"
#include "OAIUserError.h"
#include "OAIVerifyJSONWebToken.h"
#include "OAIVerifyJSONWebTokenData.h"
#include "OAIVerifyJSONWebTokenError.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIAuthApi : public QObject {
    Q_OBJECT

public:
    OAIAuthApi(const int timeOut = 0);
    ~OAIAuthApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  jwt_data OAIJWTData [optional]
    */
    virtual void authJwtTokenAuth(const ::OpenAPI::OptionalParam<OAIJWTData> &jwt_data = ::OpenAPI::OptionalParam<OAIJWTData>());

    /**
    * @param[in]  refreshjwt_data OAIRefreshJSONWebTokenData [optional]
    */
    virtual void authJwtTokenRefresh(const ::OpenAPI::OptionalParam<OAIRefreshJSONWebTokenData> &refreshjwt_data = ::OpenAPI::OptionalParam<OAIRefreshJSONWebTokenData>());

    /**
    * @param[in]  verifyjwt_data OAIVerifyJSONWebTokenData [optional]
    */
    virtual void authJwtTokenVerify(const ::OpenAPI::OptionalParam<OAIVerifyJSONWebTokenData> &verifyjwt_data = ::OpenAPI::OptionalParam<OAIVerifyJSONWebTokenData>());

    /**
    * @param[in]  user_data OAIUserData [optional]
    */
    virtual void authRegister(const ::OpenAPI::OptionalParam<OAIUserData> &user_data = ::OpenAPI::OptionalParam<OAIUserData>());

    /**
    * @param[in]  provider QString [required]
    */
    virtual void oauthLogin(const QString &provider);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void authJwtTokenAuthCallback(OAIHttpRequestWorker *worker);
    void authJwtTokenRefreshCallback(OAIHttpRequestWorker *worker);
    void authJwtTokenVerifyCallback(OAIHttpRequestWorker *worker);
    void authRegisterCallback(OAIHttpRequestWorker *worker);
    void oauthLoginCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void authJwtTokenAuthSignal(OAIJWT summary);
    void authJwtTokenRefreshSignal(OAIRefreshJSONWebToken summary);
    void authJwtTokenVerifySignal(OAIVerifyJSONWebToken summary);
    void authRegisterSignal(OAIUser summary);
    void oauthLoginSignal();


    void authJwtTokenAuthSignalFull(OAIHttpRequestWorker *worker, OAIJWT summary);
    void authJwtTokenRefreshSignalFull(OAIHttpRequestWorker *worker, OAIRefreshJSONWebToken summary);
    void authJwtTokenVerifySignalFull(OAIHttpRequestWorker *worker, OAIVerifyJSONWebToken summary);
    void authRegisterSignalFull(OAIHttpRequestWorker *worker, OAIUser summary);
    void oauthLoginSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use authJwtTokenAuthSignalError() instead")
    void authJwtTokenAuthSignalE(OAIJWT summary, QNetworkReply::NetworkError error_type, QString error_str);
    void authJwtTokenAuthSignalError(OAIJWT summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use authJwtTokenRefreshSignalError() instead")
    void authJwtTokenRefreshSignalE(OAIRefreshJSONWebToken summary, QNetworkReply::NetworkError error_type, QString error_str);
    void authJwtTokenRefreshSignalError(OAIRefreshJSONWebToken summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use authJwtTokenVerifySignalError() instead")
    void authJwtTokenVerifySignalE(OAIVerifyJSONWebToken summary, QNetworkReply::NetworkError error_type, QString error_str);
    void authJwtTokenVerifySignalError(OAIVerifyJSONWebToken summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use authRegisterSignalError() instead")
    void authRegisterSignalE(OAIUser summary, QNetworkReply::NetworkError error_type, QString error_str);
    void authRegisterSignalError(OAIUser summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use oauthLoginSignalError() instead")
    void oauthLoginSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void oauthLoginSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use authJwtTokenAuthSignalErrorFull() instead")
    void authJwtTokenAuthSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void authJwtTokenAuthSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use authJwtTokenRefreshSignalErrorFull() instead")
    void authJwtTokenRefreshSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void authJwtTokenRefreshSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use authJwtTokenVerifySignalErrorFull() instead")
    void authJwtTokenVerifySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void authJwtTokenVerifySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use authRegisterSignalErrorFull() instead")
    void authRegisterSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void authRegisterSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use oauthLoginSignalErrorFull() instead")
    void oauthLoginSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void oauthLoginSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
