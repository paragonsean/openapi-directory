/**
 * IllumiDesk
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUserProfileError.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUserProfileError::OAIUserProfileError(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUserProfileError::OAIUserProfileError() {
    this->initializeModel();
}

OAIUserProfileError::~OAIUserProfileError() {}

void OAIUserProfileError::initializeModel() {

    m_bio_isSet = false;
    m_bio_isValid = false;

    m_company_isSet = false;
    m_company_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_non_field_errors_isSet = false;
    m_non_field_errors_isValid = false;

    m_timezone_isSet = false;
    m_timezone_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIUserProfileError::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUserProfileError::fromJsonObject(QJsonObject json) {

    m_bio_isValid = ::OpenAPI::fromJsonValue(m_bio, json[QString("bio")]);
    m_bio_isSet = !json[QString("bio")].isNull() && m_bio_isValid;

    m_company_isValid = ::OpenAPI::fromJsonValue(m_company, json[QString("company")]);
    m_company_isSet = !json[QString("company")].isNull() && m_company_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_non_field_errors_isValid = ::OpenAPI::fromJsonValue(m_non_field_errors, json[QString("non_field_errors")]);
    m_non_field_errors_isSet = !json[QString("non_field_errors")].isNull() && m_non_field_errors_isValid;

    m_timezone_isValid = ::OpenAPI::fromJsonValue(m_timezone, json[QString("timezone")]);
    m_timezone_isSet = !json[QString("timezone")].isNull() && m_timezone_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIUserProfileError::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUserProfileError::asJsonObject() const {
    QJsonObject obj;
    if (m_bio.size() > 0) {
        obj.insert(QString("bio"), ::OpenAPI::toJsonValue(m_bio));
    }
    if (m_company.size() > 0) {
        obj.insert(QString("company"), ::OpenAPI::toJsonValue(m_company));
    }
    if (m_location.size() > 0) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_non_field_errors.size() > 0) {
        obj.insert(QString("non_field_errors"), ::OpenAPI::toJsonValue(m_non_field_errors));
    }
    if (m_timezone.size() > 0) {
        obj.insert(QString("timezone"), ::OpenAPI::toJsonValue(m_timezone));
    }
    if (m_url.size() > 0) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QList<QString> OAIUserProfileError::getBio() const {
    return m_bio;
}
void OAIUserProfileError::setBio(const QList<QString> &bio) {
    m_bio = bio;
    m_bio_isSet = true;
}

bool OAIUserProfileError::is_bio_Set() const{
    return m_bio_isSet;
}

bool OAIUserProfileError::is_bio_Valid() const{
    return m_bio_isValid;
}

QList<QString> OAIUserProfileError::getCompany() const {
    return m_company;
}
void OAIUserProfileError::setCompany(const QList<QString> &company) {
    m_company = company;
    m_company_isSet = true;
}

bool OAIUserProfileError::is_company_Set() const{
    return m_company_isSet;
}

bool OAIUserProfileError::is_company_Valid() const{
    return m_company_isValid;
}

QList<QString> OAIUserProfileError::getLocation() const {
    return m_location;
}
void OAIUserProfileError::setLocation(const QList<QString> &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIUserProfileError::is_location_Set() const{
    return m_location_isSet;
}

bool OAIUserProfileError::is_location_Valid() const{
    return m_location_isValid;
}

QList<QString> OAIUserProfileError::getNonFieldErrors() const {
    return m_non_field_errors;
}
void OAIUserProfileError::setNonFieldErrors(const QList<QString> &non_field_errors) {
    m_non_field_errors = non_field_errors;
    m_non_field_errors_isSet = true;
}

bool OAIUserProfileError::is_non_field_errors_Set() const{
    return m_non_field_errors_isSet;
}

bool OAIUserProfileError::is_non_field_errors_Valid() const{
    return m_non_field_errors_isValid;
}

QList<QString> OAIUserProfileError::getTimezone() const {
    return m_timezone;
}
void OAIUserProfileError::setTimezone(const QList<QString> &timezone) {
    m_timezone = timezone;
    m_timezone_isSet = true;
}

bool OAIUserProfileError::is_timezone_Set() const{
    return m_timezone_isSet;
}

bool OAIUserProfileError::is_timezone_Valid() const{
    return m_timezone_isValid;
}

QList<QString> OAIUserProfileError::getUrl() const {
    return m_url;
}
void OAIUserProfileError::setUrl(const QList<QString> &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIUserProfileError::is_url_Set() const{
    return m_url_isSet;
}

bool OAIUserProfileError::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIUserProfileError::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bio.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_company.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_location.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_non_field_errors.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_timezone.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_url.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUserProfileError::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
