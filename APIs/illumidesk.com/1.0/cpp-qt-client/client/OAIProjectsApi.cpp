/**
 * IllumiDesk
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProjectsApi.h"
#include "OAIServerConfiguration.h"
#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAIProjectsApi::OAIProjectsApi(const int timeOut)
    : _timeOut(timeOut),
      _manager(nullptr),
      _isResponseCompressionEnabled(false),
      _isRequestCompressionEnabled(false) {
    initializeServerConfigs();
}

OAIProjectsApi::~OAIProjectsApi() {
}

void OAIProjectsApi::initializeServerConfigs() {
    //Default server
    QList<OAIServerConfiguration> defaultConf = QList<OAIServerConfiguration>();
    //varying endpoint server
    defaultConf.append(OAIServerConfiguration(
    QUrl("https://api.illumidesk.com/"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("projectCopy", defaultConf);
    _serverIndices.insert("projectCopy", 0);
    _serverConfigs.insert("projectCopyCheck", defaultConf);
    _serverIndices.insert("projectCopyCheck", 0);
    _serverConfigs.insert("projectsCollaboratorsCreate", defaultConf);
    _serverIndices.insert("projectsCollaboratorsCreate", 0);
    _serverConfigs.insert("projectsCollaboratorsDelete", defaultConf);
    _serverIndices.insert("projectsCollaboratorsDelete", 0);
    _serverConfigs.insert("projectsCollaboratorsList", defaultConf);
    _serverIndices.insert("projectsCollaboratorsList", 0);
    _serverConfigs.insert("projectsCollaboratorsRead", defaultConf);
    _serverIndices.insert("projectsCollaboratorsRead", 0);
    _serverConfigs.insert("projectsCollaboratorsUpdate", defaultConf);
    _serverIndices.insert("projectsCollaboratorsUpdate", 0);
    _serverConfigs.insert("projectsCreate", defaultConf);
    _serverIndices.insert("projectsCreate", 0);
    _serverConfigs.insert("projectsDelete", defaultConf);
    _serverIndices.insert("projectsDelete", 0);
    _serverConfigs.insert("projectsDeploymentDelete", defaultConf);
    _serverIndices.insert("projectsDeploymentDelete", 0);
    _serverConfigs.insert("projectsDeploymentsCreate", defaultConf);
    _serverIndices.insert("projectsDeploymentsCreate", 0);
    _serverConfigs.insert("projectsDeploymentsDeploy", defaultConf);
    _serverIndices.insert("projectsDeploymentsDeploy", 0);
    _serverConfigs.insert("projectsDeploymentsList", defaultConf);
    _serverIndices.insert("projectsDeploymentsList", 0);
    _serverConfigs.insert("projectsDeploymentsRead", defaultConf);
    _serverIndices.insert("projectsDeploymentsRead", 0);
    _serverConfigs.insert("projectsDeploymentsReplace", defaultConf);
    _serverIndices.insert("projectsDeploymentsReplace", 0);
    _serverConfigs.insert("projectsDeploymentsUpdate", defaultConf);
    _serverIndices.insert("projectsDeploymentsUpdate", 0);
    _serverConfigs.insert("projectsList", defaultConf);
    _serverIndices.insert("projectsList", 0);
    _serverConfigs.insert("projectsProjectFilesCreate", defaultConf);
    _serverIndices.insert("projectsProjectFilesCreate", 0);
    _serverConfigs.insert("projectsProjectFilesDelete", defaultConf);
    _serverIndices.insert("projectsProjectFilesDelete", 0);
    _serverConfigs.insert("projectsProjectFilesList", defaultConf);
    _serverIndices.insert("projectsProjectFilesList", 0);
    _serverConfigs.insert("projectsProjectFilesRead", defaultConf);
    _serverIndices.insert("projectsProjectFilesRead", 0);
    _serverConfigs.insert("projectsProjectFilesReplace", defaultConf);
    _serverIndices.insert("projectsProjectFilesReplace", 0);
    _serverConfigs.insert("projectsProjectFilesUpdate", defaultConf);
    _serverIndices.insert("projectsProjectFilesUpdate", 0);
    _serverConfigs.insert("projectsRead", defaultConf);
    _serverIndices.insert("projectsRead", 0);
    _serverConfigs.insert("projectsReplace", defaultConf);
    _serverIndices.insert("projectsReplace", 0);
    _serverConfigs.insert("projectsServersApiKey", defaultConf);
    _serverIndices.insert("projectsServersApiKey", 0);
    _serverConfigs.insert("projectsServersAuth", defaultConf);
    _serverIndices.insert("projectsServersAuth", 0);
    _serverConfigs.insert("projectsServersCreate", defaultConf);
    _serverIndices.insert("projectsServersCreate", 0);
    _serverConfigs.insert("projectsServersDelete", defaultConf);
    _serverIndices.insert("projectsServersDelete", 0);
    _serverConfigs.insert("projectsServersList", defaultConf);
    _serverIndices.insert("projectsServersList", 0);
    _serverConfigs.insert("projectsServersRead", defaultConf);
    _serverIndices.insert("projectsServersRead", 0);
    _serverConfigs.insert("projectsServersReplace", defaultConf);
    _serverIndices.insert("projectsServersReplace", 0);
    _serverConfigs.insert("projectsServersRunStatsCreate", defaultConf);
    _serverIndices.insert("projectsServersRunStatsCreate", 0);
    _serverConfigs.insert("projectsServersRunStatsDelete", defaultConf);
    _serverIndices.insert("projectsServersRunStatsDelete", 0);
    _serverConfigs.insert("projectsServersRunStatsRead", defaultConf);
    _serverIndices.insert("projectsServersRunStatsRead", 0);
    _serverConfigs.insert("projectsServersRunStatsReplace", defaultConf);
    _serverIndices.insert("projectsServersRunStatsReplace", 0);
    _serverConfigs.insert("projectsServersRunStatsUpdate", defaultConf);
    _serverIndices.insert("projectsServersRunStatsUpdate", 0);
    _serverConfigs.insert("projectsServersSshTunnelsCreate", defaultConf);
    _serverIndices.insert("projectsServersSshTunnelsCreate", 0);
    _serverConfigs.insert("projectsServersSshTunnelsDelete", defaultConf);
    _serverIndices.insert("projectsServersSshTunnelsDelete", 0);
    _serverConfigs.insert("projectsServersSshTunnelsList", defaultConf);
    _serverIndices.insert("projectsServersSshTunnelsList", 0);
    _serverConfigs.insert("projectsServersSshTunnelsRead", defaultConf);
    _serverIndices.insert("projectsServersSshTunnelsRead", 0);
    _serverConfigs.insert("projectsServersSshTunnelsReplace", defaultConf);
    _serverIndices.insert("projectsServersSshTunnelsReplace", 0);
    _serverConfigs.insert("projectsServersSshTunnelsUpdate", defaultConf);
    _serverIndices.insert("projectsServersSshTunnelsUpdate", 0);
    _serverConfigs.insert("projectsServersStart", defaultConf);
    _serverIndices.insert("projectsServersStart", 0);
    _serverConfigs.insert("projectsServersStatsDelete", defaultConf);
    _serverIndices.insert("projectsServersStatsDelete", 0);
    _serverConfigs.insert("projectsServersStatsRead", defaultConf);
    _serverIndices.insert("projectsServersStatsRead", 0);
    _serverConfigs.insert("projectsServersStatsReplace", defaultConf);
    _serverIndices.insert("projectsServersStatsReplace", 0);
    _serverConfigs.insert("projectsServersStatsUpdate", defaultConf);
    _serverIndices.insert("projectsServersStatsUpdate", 0);
    _serverConfigs.insert("projectsServersStatuses", defaultConf);
    _serverIndices.insert("projectsServersStatuses", 0);
    _serverConfigs.insert("projectsServersStop", defaultConf);
    _serverIndices.insert("projectsServersStop", 0);
    _serverConfigs.insert("projectsServersUpdate", defaultConf);
    _serverIndices.insert("projectsServersUpdate", 0);
    _serverConfigs.insert("projectsUpdate", defaultConf);
    _serverIndices.insert("projectsUpdate", 0);
    _serverConfigs.insert("serviceTriggerCreate", defaultConf);
    _serverIndices.insert("serviceTriggerCreate", 0);
    _serverConfigs.insert("serviceTriggerDelete", defaultConf);
    _serverIndices.insert("serviceTriggerDelete", 0);
    _serverConfigs.insert("serviceTriggerList", defaultConf);
    _serverIndices.insert("serviceTriggerList", 0);
    _serverConfigs.insert("serviceTriggerRead", defaultConf);
    _serverIndices.insert("serviceTriggerRead", 0);
    _serverConfigs.insert("serviceTriggerReplace", defaultConf);
    _serverIndices.insert("serviceTriggerReplace", 0);
    _serverConfigs.insert("serviceTriggerUpdate", defaultConf);
    _serverIndices.insert("serviceTriggerUpdate", 0);
}

/**
* returns 0 on success and -1, -2 or -3 on failure.
* -1 when the variable does not exist and -2 if the value is not defined in the enum and -3 if the operation or server index is not found
*/
int OAIProjectsApi::setDefaultServerValue(int serverIndex, const QString &operation, const QString &variable, const QString &value) {
    auto it = _serverConfigs.find(operation);
    if (it != _serverConfigs.end() && serverIndex < it.value().size()) {
      return _serverConfigs[operation][serverIndex].setDefaultValue(variable,value);
    }
    return -3;
}
void OAIProjectsApi::setServerIndex(const QString &operation, int serverIndex) {
    if (_serverIndices.contains(operation) && serverIndex < _serverConfigs.find(operation).value().size()) {
        _serverIndices[operation] = serverIndex;
    }
}

void OAIProjectsApi::setApiKey(const QString &apiKeyName, const QString &apiKey) {
    _apiKeys.insert(apiKeyName, apiKey);
}

void OAIProjectsApi::setBearerToken(const QString &token) {
    _bearerToken = token;
}

void OAIProjectsApi::setUsername(const QString &username) {
    _username = username;
}

void OAIProjectsApi::setPassword(const QString &password) {
    _password = password;
}


void OAIProjectsApi::setTimeOut(const int timeOut) {
    _timeOut = timeOut;
}

void OAIProjectsApi::setWorkingDirectory(const QString &path) {
    _workingDirectory = path;
}

void OAIProjectsApi::setNetworkAccessManager(QNetworkAccessManager* manager) {
    _manager = manager;
}

/**
    * Appends a new ServerConfiguration to the config map for a specific operation.
    * @param operation The id to the target operation.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    * returns the index of the new server config on success and -1 if the operation is not found
    */
int OAIProjectsApi::addServerConfiguration(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    if (_serverConfigs.contains(operation)) {
        _serverConfigs[operation].append(OAIServerConfiguration(
                    url,
                    description,
                    variables));
        return _serverConfigs[operation].size()-1;
    } else {
        return -1;
    }
}

/**
    * Appends a new ServerConfiguration to the config map for a all operations and sets the index to that server.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIProjectsApi::setNewServerForAllOperations(const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    for (auto keyIt = _serverIndices.keyBegin(); keyIt != _serverIndices.keyEnd(); keyIt++) {
        setServerIndex(*keyIt, addServerConfiguration(*keyIt, url, description, variables));
    }
}

/**
    * Appends a new ServerConfiguration to the config map for an operations and sets the index to that server.
    * @param URL A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIProjectsApi::setNewServer(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    setServerIndex(operation, addServerConfiguration(operation, url, description, variables));
}

void OAIProjectsApi::addHeaders(const QString &key, const QString &value) {
    _defaultHeaders.insert(key, value);
}

void OAIProjectsApi::enableRequestCompression() {
    _isRequestCompressionEnabled = true;
}

void OAIProjectsApi::enableResponseCompression() {
    _isResponseCompressionEnabled = true;
}

void OAIProjectsApi::abortRequests() {
    Q_EMIT abortRequestsSignal();
}

QString OAIProjectsApi::getParamStylePrefix(const QString &style) {
    if (style == "matrix") {
        return ";";
    } else if (style == "label") {
        return ".";
    } else if (style == "form") {
        return "&";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "&";
    } else if (style == "pipeDelimited") {
        return "&";
    } else {
        return "none";
    }
}

QString OAIProjectsApi::getParamStyleSuffix(const QString &style) {
    if (style == "matrix") {
        return "=";
    } else if (style == "label") {
        return "";
    } else if (style == "form") {
        return "=";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "=";
    } else if (style == "pipeDelimited") {
        return "=";
    } else {
        return "none";
    }
}

QString OAIProjectsApi::getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode) {

    if (style == "matrix") {
        return (isExplode) ? ";" + name + "=" : ",";

    } else if (style == "label") {
        return (isExplode) ? "." : ",";

    } else if (style == "form") {
        return (isExplode) ? "&" + name + "=" : ",";

    } else if (style == "simple") {
        return ",";
    } else if (style == "spaceDelimited") {
        return (isExplode) ? "&" + name + "=" : " ";

    } else if (style == "pipeDelimited") {
        return (isExplode) ? "&" + name + "=" : "|";

    } else if (style == "deepObject") {
        return (isExplode) ? "&" : "none";

    } else {
        return "none";
    }
}

void OAIProjectsApi::projectCopy(const QString &r_namespace, const OAIProject_copy_request &project_copy_data) {
    QString fullPath = QString(_serverConfigs["projectCopy"][_serverIndices.value("projectCopy")].URL()+"/v1/{namespace}/projects/project-copy/");
    
    if (_apiKeys.contains("jwt")) {
        addHeaders("jwt",_apiKeys.find("jwt").value());
    }
    
    
    {
        QString r_namespacePathParam("{");
        r_namespacePathParam.append("namespace").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "namespace", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"namespace"+pathSuffix : pathPrefix;
        fullPath.replace(r_namespacePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(r_namespace)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = project_copy_data.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIProjectsApi::projectCopyCallback);
    connect(this, &OAIProjectsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIProjectsApi::projectCopyCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIProject output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT projectCopySignal(output);
        Q_EMIT projectCopySignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT projectCopySignalE(output, error_type, error_str);
        Q_EMIT projectCopySignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT projectCopySignalError(output, error_type, error_str);
        Q_EMIT projectCopySignalErrorFull(worker, error_type, error_str);
    }
}

void OAIProjectsApi::projectCopyCheck(const QString &r_namespace, const OAIProject_copy_check_request &project_copy_data) {
    QString fullPath = QString(_serverConfigs["projectCopyCheck"][_serverIndices.value("projectCopyCheck")].URL()+"/v1/{namespace}/projects/project-copy-check/");
    
    if (_apiKeys.contains("jwt")) {
        addHeaders("jwt",_apiKeys.find("jwt").value());
    }
    
    
    {
        QString r_namespacePathParam("{");
        r_namespacePathParam.append("namespace").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "namespace", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"namespace"+pathSuffix : pathPrefix;
        fullPath.replace(r_namespacePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(r_namespace)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "HEAD");

    {

        
        QByteArray output = project_copy_data.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIProjectsApi::projectCopyCheckCallback);
    connect(this, &OAIProjectsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIProjectsApi::projectCopyCheckCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT projectCopyCheckSignal();
        Q_EMIT projectCopyCheckSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT projectCopyCheckSignalE(error_type, error_str);
        Q_EMIT projectCopyCheckSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT projectCopyCheckSignalError(error_type, error_str);
        Q_EMIT projectCopyCheckSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIProjectsApi::projectsCollaboratorsCreate(const QString &project, const QString &r_namespace, const ::OpenAPI::OptionalParam<OAICollaboratorData> &collaborator_data) {
    QString fullPath = QString(_serverConfigs["projectsCollaboratorsCreate"][_serverIndices.value("projectsCollaboratorsCreate")].URL()+"/v1/{namespace}/projects/{project}/collaborators/");
    
    if (_apiKeys.contains("jwt")) {
        addHeaders("jwt",_apiKeys.find("jwt").value());
    }
    
    
    {
        QString projectPathParam("{");
        projectPathParam.append("project").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "project", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"project"+pathSuffix : pathPrefix;
        fullPath.replace(projectPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(project)));
    }
    
    {
        QString r_namespacePathParam("{");
        r_namespacePathParam.append("namespace").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "namespace", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"namespace"+pathSuffix : pathPrefix;
        fullPath.replace(r_namespacePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(r_namespace)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (collaborator_data.hasValue()){

        
        QByteArray output = collaborator_data.value().asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIProjectsApi::projectsCollaboratorsCreateCallback);
    connect(this, &OAIProjectsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIProjectsApi::projectsCollaboratorsCreateCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAICollaborator output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT projectsCollaboratorsCreateSignal(output);
        Q_EMIT projectsCollaboratorsCreateSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT projectsCollaboratorsCreateSignalE(output, error_type, error_str);
        Q_EMIT projectsCollaboratorsCreateSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT projectsCollaboratorsCreateSignalError(output, error_type, error_str);
        Q_EMIT projectsCollaboratorsCreateSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIProjectsApi::projectsCollaboratorsDelete(const QString &project, const QString &r_namespace, const QString &collaborator) {
    QString fullPath = QString(_serverConfigs["projectsCollaboratorsDelete"][_serverIndices.value("projectsCollaboratorsDelete")].URL()+"/v1/{namespace}/projects/{project}/collaborators/{collaborator}/");
    
    if (_apiKeys.contains("jwt")) {
        addHeaders("jwt",_apiKeys.find("jwt").value());
    }
    
    
    {
        QString projectPathParam("{");
        projectPathParam.append("project").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "project", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"project"+pathSuffix : pathPrefix;
        fullPath.replace(projectPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(project)));
    }
    
    {
        QString r_namespacePathParam("{");
        r_namespacePathParam.append("namespace").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "namespace", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"namespace"+pathSuffix : pathPrefix;
        fullPath.replace(r_namespacePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(r_namespace)));
    }
    
    {
        QString collaboratorPathParam("{");
        collaboratorPathParam.append("collaborator").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "collaborator", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"collaborator"+pathSuffix : pathPrefix;
        fullPath.replace(collaboratorPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(collaborator)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIProjectsApi::projectsCollaboratorsDeleteCallback);
    connect(this, &OAIProjectsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIProjectsApi::projectsCollaboratorsDeleteCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT projectsCollaboratorsDeleteSignal();
        Q_EMIT projectsCollaboratorsDeleteSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT projectsCollaboratorsDeleteSignalE(error_type, error_str);
        Q_EMIT projectsCollaboratorsDeleteSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT projectsCollaboratorsDeleteSignalError(error_type, error_str);
        Q_EMIT projectsCollaboratorsDeleteSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIProjectsApi::projectsCollaboratorsList(const QString &project, const QString &r_namespace, const ::OpenAPI::OptionalParam<QString> &limit, const ::OpenAPI::OptionalParam<QString> &offset, const ::OpenAPI::OptionalParam<QString> &ordering) {
    QString fullPath = QString(_serverConfigs["projectsCollaboratorsList"][_serverIndices.value("projectsCollaboratorsList")].URL()+"/v1/{namespace}/projects/{project}/collaborators/");
    
    if (_apiKeys.contains("jwt")) {
        addHeaders("jwt",_apiKeys.find("jwt").value());
    }
    
    
    {
        QString projectPathParam("{");
        projectPathParam.append("project").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "project", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"project"+pathSuffix : pathPrefix;
        fullPath.replace(projectPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(project)));
    }
    
    {
        QString r_namespacePathParam("{");
        r_namespacePathParam.append("namespace").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "namespace", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"namespace"+pathSuffix : pathPrefix;
        fullPath.replace(r_namespacePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(r_namespace)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (limit.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "limit", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("limit")).append(querySuffix).append(QUrl::toPercentEncoding(limit.stringValue()));
    }
    if (offset.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "offset", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("offset")).append(querySuffix).append(QUrl::toPercentEncoding(offset.stringValue()));
    }
    if (ordering.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "ordering", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("ordering")).append(querySuffix).append(QUrl::toPercentEncoding(ordering.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIProjectsApi::projectsCollaboratorsListCallback);
    connect(this, &OAIProjectsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIProjectsApi::projectsCollaboratorsListCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAICollaborator> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAICollaborator val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT projectsCollaboratorsListSignal(output);
        Q_EMIT projectsCollaboratorsListSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT projectsCollaboratorsListSignalE(output, error_type, error_str);
        Q_EMIT projectsCollaboratorsListSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT projectsCollaboratorsListSignalError(output, error_type, error_str);
        Q_EMIT projectsCollaboratorsListSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIProjectsApi::projectsCollaboratorsRead(const QString &project, const QString &r_namespace, const QString &collaborator) {
    QString fullPath = QString(_serverConfigs["projectsCollaboratorsRead"][_serverIndices.value("projectsCollaboratorsRead")].URL()+"/v1/{namespace}/projects/{project}/collaborators/{collaborator}/");
    
    if (_apiKeys.contains("jwt")) {
        addHeaders("jwt",_apiKeys.find("jwt").value());
    }
    
    
    {
        QString projectPathParam("{");
        projectPathParam.append("project").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "project", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"project"+pathSuffix : pathPrefix;
        fullPath.replace(projectPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(project)));
    }
    
    {
        QString r_namespacePathParam("{");
        r_namespacePathParam.append("namespace").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "namespace", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"namespace"+pathSuffix : pathPrefix;
        fullPath.replace(r_namespacePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(r_namespace)));
    }
    
    {
        QString collaboratorPathParam("{");
        collaboratorPathParam.append("collaborator").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "collaborator", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"collaborator"+pathSuffix : pathPrefix;
        fullPath.replace(collaboratorPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(collaborator)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIProjectsApi::projectsCollaboratorsReadCallback);
    connect(this, &OAIProjectsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIProjectsApi::projectsCollaboratorsReadCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAICollaborator output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT projectsCollaboratorsReadSignal(output);
        Q_EMIT projectsCollaboratorsReadSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT projectsCollaboratorsReadSignalE(output, error_type, error_str);
        Q_EMIT projectsCollaboratorsReadSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT projectsCollaboratorsReadSignalError(output, error_type, error_str);
        Q_EMIT projectsCollaboratorsReadSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIProjectsApi::projectsCollaboratorsUpdate(const QString &project, const QString &r_namespace, const QString &collaborator, const ::OpenAPI::OptionalParam<OAICollaboratorData> &collaborator_data) {
    QString fullPath = QString(_serverConfigs["projectsCollaboratorsUpdate"][_serverIndices.value("projectsCollaboratorsUpdate")].URL()+"/v1/{namespace}/projects/{project}/collaborators/{collaborator}/");
    
    if (_apiKeys.contains("jwt")) {
        addHeaders("jwt",_apiKeys.find("jwt").value());
    }
    
    
    {
        QString projectPathParam("{");
        projectPathParam.append("project").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "project", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"project"+pathSuffix : pathPrefix;
        fullPath.replace(projectPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(project)));
    }
    
    {
        QString r_namespacePathParam("{");
        r_namespacePathParam.append("namespace").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "namespace", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"namespace"+pathSuffix : pathPrefix;
        fullPath.replace(r_namespacePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(r_namespace)));
    }
    
    {
        QString collaboratorPathParam("{");
        collaboratorPathParam.append("collaborator").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "collaborator", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"collaborator"+pathSuffix : pathPrefix;
        fullPath.replace(collaboratorPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(collaborator)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PATCH");

    if (collaborator_data.hasValue()){

        
        QByteArray output = collaborator_data.value().asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIProjectsApi::projectsCollaboratorsUpdateCallback);
    connect(this, &OAIProjectsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIProjectsApi::projectsCollaboratorsUpdateCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAICollaborator output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT projectsCollaboratorsUpdateSignal(output);
        Q_EMIT projectsCollaboratorsUpdateSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT projectsCollaboratorsUpdateSignalE(output, error_type, error_str);
        Q_EMIT projectsCollaboratorsUpdateSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT projectsCollaboratorsUpdateSignalError(output, error_type, error_str);
        Q_EMIT projectsCollaboratorsUpdateSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIProjectsApi::projectsCreate(const QString &r_namespace, const ::OpenAPI::OptionalParam<OAIProjectData> &project_data) {
    QString fullPath = QString(_serverConfigs["projectsCreate"][_serverIndices.value("projectsCreate")].URL()+"/v1/{namespace}/projects/");
    
    if (_apiKeys.contains("jwt")) {
        addHeaders("jwt",_apiKeys.find("jwt").value());
    }
    
    
    {
        QString r_namespacePathParam("{");
        r_namespacePathParam.append("namespace").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "namespace", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"namespace"+pathSuffix : pathPrefix;
        fullPath.replace(r_namespacePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(r_namespace)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (project_data.hasValue()){

        
        QByteArray output = project_data.value().asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIProjectsApi::projectsCreateCallback);
    connect(this, &OAIProjectsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIProjectsApi::projectsCreateCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIProject output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT projectsCreateSignal(output);
        Q_EMIT projectsCreateSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT projectsCreateSignalE(output, error_type, error_str);
        Q_EMIT projectsCreateSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT projectsCreateSignalError(output, error_type, error_str);
        Q_EMIT projectsCreateSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIProjectsApi::projectsDelete(const QString &r_namespace, const QString &project) {
    QString fullPath = QString(_serverConfigs["projectsDelete"][_serverIndices.value("projectsDelete")].URL()+"/v1/{namespace}/projects/{project}/");
    
    if (_apiKeys.contains("jwt")) {
        addHeaders("jwt",_apiKeys.find("jwt").value());
    }
    
    
    {
        QString r_namespacePathParam("{");
        r_namespacePathParam.append("namespace").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "namespace", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"namespace"+pathSuffix : pathPrefix;
        fullPath.replace(r_namespacePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(r_namespace)));
    }
    
    {
        QString projectPathParam("{");
        projectPathParam.append("project").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "project", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"project"+pathSuffix : pathPrefix;
        fullPath.replace(projectPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(project)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIProjectsApi::projectsDeleteCallback);
    connect(this, &OAIProjectsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIProjectsApi::projectsDeleteCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT projectsDeleteSignal();
        Q_EMIT projectsDeleteSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT projectsDeleteSignalE(error_type, error_str);
        Q_EMIT projectsDeleteSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT projectsDeleteSignalError(error_type, error_str);
        Q_EMIT projectsDeleteSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIProjectsApi::projectsDeploymentDelete(const QString &project, const QString &r_namespace, const QString &deployment) {
    QString fullPath = QString(_serverConfigs["projectsDeploymentDelete"][_serverIndices.value("projectsDeploymentDelete")].URL()+"/v1/{namespace}/projects/{project}/deployments/{deployment}/");
    
    if (_apiKeys.contains("jwt")) {
        addHeaders("jwt",_apiKeys.find("jwt").value());
    }
    
    
    {
        QString projectPathParam("{");
        projectPathParam.append("project").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "project", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"project"+pathSuffix : pathPrefix;
        fullPath.replace(projectPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(project)));
    }
    
    {
        QString r_namespacePathParam("{");
        r_namespacePathParam.append("namespace").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "namespace", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"namespace"+pathSuffix : pathPrefix;
        fullPath.replace(r_namespacePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(r_namespace)));
    }
    
    {
        QString deploymentPathParam("{");
        deploymentPathParam.append("deployment").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "deployment", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"deployment"+pathSuffix : pathPrefix;
        fullPath.replace(deploymentPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(deployment)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIProjectsApi::projectsDeploymentDeleteCallback);
    connect(this, &OAIProjectsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIProjectsApi::projectsDeploymentDeleteCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT projectsDeploymentDeleteSignal();
        Q_EMIT projectsDeploymentDeleteSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT projectsDeploymentDeleteSignalE(error_type, error_str);
        Q_EMIT projectsDeploymentDeleteSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT projectsDeploymentDeleteSignalError(error_type, error_str);
        Q_EMIT projectsDeploymentDeleteSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIProjectsApi::projectsDeploymentsCreate(const QString &project, const QString &r_namespace, const ::OpenAPI::OptionalParam<OAIDeploymentData> &deployment_data) {
    QString fullPath = QString(_serverConfigs["projectsDeploymentsCreate"][_serverIndices.value("projectsDeploymentsCreate")].URL()+"/v1/{namespace}/projects/{project}/deployments/");
    
    if (_apiKeys.contains("jwt")) {
        addHeaders("jwt",_apiKeys.find("jwt").value());
    }
    
    
    {
        QString projectPathParam("{");
        projectPathParam.append("project").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "project", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"project"+pathSuffix : pathPrefix;
        fullPath.replace(projectPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(project)));
    }
    
    {
        QString r_namespacePathParam("{");
        r_namespacePathParam.append("namespace").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "namespace", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"namespace"+pathSuffix : pathPrefix;
        fullPath.replace(r_namespacePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(r_namespace)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (deployment_data.hasValue()){

        
        QByteArray output = deployment_data.value().asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIProjectsApi::projectsDeploymentsCreateCallback);
    connect(this, &OAIProjectsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIProjectsApi::projectsDeploymentsCreateCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIDeployment output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT projectsDeploymentsCreateSignal(output);
        Q_EMIT projectsDeploymentsCreateSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT projectsDeploymentsCreateSignalE(output, error_type, error_str);
        Q_EMIT projectsDeploymentsCreateSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT projectsDeploymentsCreateSignalError(output, error_type, error_str);
        Q_EMIT projectsDeploymentsCreateSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIProjectsApi::projectsDeploymentsDeploy(const QString &project, const QString &r_namespace, const QString &deployment) {
    QString fullPath = QString(_serverConfigs["projectsDeploymentsDeploy"][_serverIndices.value("projectsDeploymentsDeploy")].URL()+"/v1/{namespace}/projects/{project}/deployments/{deployment}/deploy/");
    
    if (_apiKeys.contains("jwt")) {
        addHeaders("jwt",_apiKeys.find("jwt").value());
    }
    
    
    {
        QString projectPathParam("{");
        projectPathParam.append("project").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "project", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"project"+pathSuffix : pathPrefix;
        fullPath.replace(projectPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(project)));
    }
    
    {
        QString r_namespacePathParam("{");
        r_namespacePathParam.append("namespace").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "namespace", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"namespace"+pathSuffix : pathPrefix;
        fullPath.replace(r_namespacePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(r_namespace)));
    }
    
    {
        QString deploymentPathParam("{");
        deploymentPathParam.append("deployment").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "deployment", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"deployment"+pathSuffix : pathPrefix;
        fullPath.replace(deploymentPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(deployment)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIProjectsApi::projectsDeploymentsDeployCallback);
    connect(this, &OAIProjectsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIProjectsApi::projectsDeploymentsDeployCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT projectsDeploymentsDeploySignal();
        Q_EMIT projectsDeploymentsDeploySignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT projectsDeploymentsDeploySignalE(error_type, error_str);
        Q_EMIT projectsDeploymentsDeploySignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT projectsDeploymentsDeploySignalError(error_type, error_str);
        Q_EMIT projectsDeploymentsDeploySignalErrorFull(worker, error_type, error_str);
    }
}

void OAIProjectsApi::projectsDeploymentsList(const QString &project, const QString &r_namespace, const ::OpenAPI::OptionalParam<QString> &limit, const ::OpenAPI::OptionalParam<QString> &offset, const ::OpenAPI::OptionalParam<QString> &name, const ::OpenAPI::OptionalParam<QString> &ordering) {
    QString fullPath = QString(_serverConfigs["projectsDeploymentsList"][_serverIndices.value("projectsDeploymentsList")].URL()+"/v1/{namespace}/projects/{project}/deployments/");
    
    if (_apiKeys.contains("jwt")) {
        addHeaders("jwt",_apiKeys.find("jwt").value());
    }
    
    
    {
        QString projectPathParam("{");
        projectPathParam.append("project").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "project", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"project"+pathSuffix : pathPrefix;
        fullPath.replace(projectPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(project)));
    }
    
    {
        QString r_namespacePathParam("{");
        r_namespacePathParam.append("namespace").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "namespace", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"namespace"+pathSuffix : pathPrefix;
        fullPath.replace(r_namespacePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(r_namespace)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (limit.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "limit", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("limit")).append(querySuffix).append(QUrl::toPercentEncoding(limit.stringValue()));
    }
    if (offset.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "offset", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("offset")).append(querySuffix).append(QUrl::toPercentEncoding(offset.stringValue()));
    }
    if (name.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "name", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("name")).append(querySuffix).append(QUrl::toPercentEncoding(name.stringValue()));
    }
    if (ordering.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "ordering", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("ordering")).append(querySuffix).append(QUrl::toPercentEncoding(ordering.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIProjectsApi::projectsDeploymentsListCallback);
    connect(this, &OAIProjectsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIProjectsApi::projectsDeploymentsListCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAIDeployment> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAIDeployment val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT projectsDeploymentsListSignal(output);
        Q_EMIT projectsDeploymentsListSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT projectsDeploymentsListSignalE(output, error_type, error_str);
        Q_EMIT projectsDeploymentsListSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT projectsDeploymentsListSignalError(output, error_type, error_str);
        Q_EMIT projectsDeploymentsListSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIProjectsApi::projectsDeploymentsRead(const QString &project, const QString &r_namespace, const QString &deployment) {
    QString fullPath = QString(_serverConfigs["projectsDeploymentsRead"][_serverIndices.value("projectsDeploymentsRead")].URL()+"/v1/{namespace}/projects/{project}/deployments/{deployment}/");
    
    if (_apiKeys.contains("jwt")) {
        addHeaders("jwt",_apiKeys.find("jwt").value());
    }
    
    
    {
        QString projectPathParam("{");
        projectPathParam.append("project").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "project", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"project"+pathSuffix : pathPrefix;
        fullPath.replace(projectPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(project)));
    }
    
    {
        QString r_namespacePathParam("{");
        r_namespacePathParam.append("namespace").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "namespace", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"namespace"+pathSuffix : pathPrefix;
        fullPath.replace(r_namespacePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(r_namespace)));
    }
    
    {
        QString deploymentPathParam("{");
        deploymentPathParam.append("deployment").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "deployment", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"deployment"+pathSuffix : pathPrefix;
        fullPath.replace(deploymentPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(deployment)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIProjectsApi::projectsDeploymentsReadCallback);
    connect(this, &OAIProjectsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIProjectsApi::projectsDeploymentsReadCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIDeployment output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT projectsDeploymentsReadSignal(output);
        Q_EMIT projectsDeploymentsReadSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT projectsDeploymentsReadSignalE(output, error_type, error_str);
        Q_EMIT projectsDeploymentsReadSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT projectsDeploymentsReadSignalError(output, error_type, error_str);
        Q_EMIT projectsDeploymentsReadSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIProjectsApi::projectsDeploymentsReplace(const QString &project, const QString &r_namespace, const QString &deployment, const ::OpenAPI::OptionalParam<OAIDeploymentData> &deployment_data) {
    QString fullPath = QString(_serverConfigs["projectsDeploymentsReplace"][_serverIndices.value("projectsDeploymentsReplace")].URL()+"/v1/{namespace}/projects/{project}/deployments/{deployment}/");
    
    if (_apiKeys.contains("jwt")) {
        addHeaders("jwt",_apiKeys.find("jwt").value());
    }
    
    
    {
        QString projectPathParam("{");
        projectPathParam.append("project").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "project", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"project"+pathSuffix : pathPrefix;
        fullPath.replace(projectPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(project)));
    }
    
    {
        QString r_namespacePathParam("{");
        r_namespacePathParam.append("namespace").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "namespace", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"namespace"+pathSuffix : pathPrefix;
        fullPath.replace(r_namespacePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(r_namespace)));
    }
    
    {
        QString deploymentPathParam("{");
        deploymentPathParam.append("deployment").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "deployment", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"deployment"+pathSuffix : pathPrefix;
        fullPath.replace(deploymentPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(deployment)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PUT");

    if (deployment_data.hasValue()){

        
        QByteArray output = deployment_data.value().asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIProjectsApi::projectsDeploymentsReplaceCallback);
    connect(this, &OAIProjectsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIProjectsApi::projectsDeploymentsReplaceCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIDeployment output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT projectsDeploymentsReplaceSignal(output);
        Q_EMIT projectsDeploymentsReplaceSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT projectsDeploymentsReplaceSignalE(output, error_type, error_str);
        Q_EMIT projectsDeploymentsReplaceSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT projectsDeploymentsReplaceSignalError(output, error_type, error_str);
        Q_EMIT projectsDeploymentsReplaceSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIProjectsApi::projectsDeploymentsUpdate(const QString &project, const QString &r_namespace, const QString &deployment, const ::OpenAPI::OptionalParam<OAIDeploymentData> &deployment_data) {
    QString fullPath = QString(_serverConfigs["projectsDeploymentsUpdate"][_serverIndices.value("projectsDeploymentsUpdate")].URL()+"/v1/{namespace}/projects/{project}/deployments/{deployment}/");
    
    if (_apiKeys.contains("jwt")) {
        addHeaders("jwt",_apiKeys.find("jwt").value());
    }
    
    
    {
        QString projectPathParam("{");
        projectPathParam.append("project").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "project", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"project"+pathSuffix : pathPrefix;
        fullPath.replace(projectPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(project)));
    }
    
    {
        QString r_namespacePathParam("{");
        r_namespacePathParam.append("namespace").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "namespace", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"namespace"+pathSuffix : pathPrefix;
        fullPath.replace(r_namespacePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(r_namespace)));
    }
    
    {
        QString deploymentPathParam("{");
        deploymentPathParam.append("deployment").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "deployment", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"deployment"+pathSuffix : pathPrefix;
        fullPath.replace(deploymentPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(deployment)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PATCH");

    if (deployment_data.hasValue()){

        
        QByteArray output = deployment_data.value().asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIProjectsApi::projectsDeploymentsUpdateCallback);
    connect(this, &OAIProjectsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIProjectsApi::projectsDeploymentsUpdateCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIDeployment output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT projectsDeploymentsUpdateSignal(output);
        Q_EMIT projectsDeploymentsUpdateSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT projectsDeploymentsUpdateSignalE(output, error_type, error_str);
        Q_EMIT projectsDeploymentsUpdateSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT projectsDeploymentsUpdateSignalError(output, error_type, error_str);
        Q_EMIT projectsDeploymentsUpdateSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIProjectsApi::projectsList(const QString &r_namespace, const ::OpenAPI::OptionalParam<QString> &limit, const ::OpenAPI::OptionalParam<QString> &offset, const ::OpenAPI::OptionalParam<QString> &r_private, const ::OpenAPI::OptionalParam<QString> &name, const ::OpenAPI::OptionalParam<QString> &ordering) {
    QString fullPath = QString(_serverConfigs["projectsList"][_serverIndices.value("projectsList")].URL()+"/v1/{namespace}/projects/");
    
    if (_apiKeys.contains("jwt")) {
        addHeaders("jwt",_apiKeys.find("jwt").value());
    }
    
    
    {
        QString r_namespacePathParam("{");
        r_namespacePathParam.append("namespace").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "namespace", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"namespace"+pathSuffix : pathPrefix;
        fullPath.replace(r_namespacePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(r_namespace)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (limit.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "limit", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("limit")).append(querySuffix).append(QUrl::toPercentEncoding(limit.stringValue()));
    }
    if (offset.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "offset", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("offset")).append(querySuffix).append(QUrl::toPercentEncoding(offset.stringValue()));
    }
    if (r_private.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "private", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("private")).append(querySuffix).append(QUrl::toPercentEncoding(r_private.stringValue()));
    }
    if (name.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "name", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("name")).append(querySuffix).append(QUrl::toPercentEncoding(name.stringValue()));
    }
    if (ordering.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "ordering", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("ordering")).append(querySuffix).append(QUrl::toPercentEncoding(ordering.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIProjectsApi::projectsListCallback);
    connect(this, &OAIProjectsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIProjectsApi::projectsListCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAIProject> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAIProject val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT projectsListSignal(output);
        Q_EMIT projectsListSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT projectsListSignalE(output, error_type, error_str);
        Q_EMIT projectsListSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT projectsListSignalError(output, error_type, error_str);
        Q_EMIT projectsListSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIProjectsApi::projectsProjectFilesCreate(const QString &project, const QString &r_namespace, const ::OpenAPI::OptionalParam<OAIHttpFileElement> &file, const ::OpenAPI::OptionalParam<QString> &base64_data, const ::OpenAPI::OptionalParam<QString> &name, const ::OpenAPI::OptionalParam<QString> &path) {
    QString fullPath = QString(_serverConfigs["projectsProjectFilesCreate"][_serverIndices.value("projectsProjectFilesCreate")].URL()+"/v1/{namespace}/projects/{project}/project_files/");
    
    if (_apiKeys.contains("jwt")) {
        addHeaders("jwt",_apiKeys.find("jwt").value());
    }
    
    
    {
        QString projectPathParam("{");
        projectPathParam.append("project").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "project", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"project"+pathSuffix : pathPrefix;
        fullPath.replace(projectPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(project)));
    }
    
    {
        QString r_namespacePathParam("{");
        r_namespacePathParam.append("namespace").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "namespace", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"namespace"+pathSuffix : pathPrefix;
        fullPath.replace(r_namespacePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(r_namespace)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (file.hasValue())
    {
        input.add_file("file", file.value().local_filename, file.value().request_filename, file.value().mime_type);
    }
    if (base64_data.hasValue())
    {
        input.add_var("base64_data", ::OpenAPI::toStringValue(base64_data.value()));
    }
    if (name.hasValue())
    {
        input.add_var("name", ::OpenAPI::toStringValue(name.value()));
    }
    if (path.hasValue())
    {
        input.add_var("path", ::OpenAPI::toStringValue(path.value()));
    }

    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIProjectsApi::projectsProjectFilesCreateCallback);
    connect(this, &OAIProjectsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIProjectsApi::projectsProjectFilesCreateCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIProjectFile output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT projectsProjectFilesCreateSignal(output);
        Q_EMIT projectsProjectFilesCreateSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT projectsProjectFilesCreateSignalE(output, error_type, error_str);
        Q_EMIT projectsProjectFilesCreateSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT projectsProjectFilesCreateSignalError(output, error_type, error_str);
        Q_EMIT projectsProjectFilesCreateSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIProjectsApi::projectsProjectFilesDelete(const QString &project, const QString &r_namespace, const QString &id) {
    QString fullPath = QString(_serverConfigs["projectsProjectFilesDelete"][_serverIndices.value("projectsProjectFilesDelete")].URL()+"/v1/{namespace}/projects/{project}/project_files/{id}/");
    
    if (_apiKeys.contains("jwt")) {
        addHeaders("jwt",_apiKeys.find("jwt").value());
    }
    
    
    {
        QString projectPathParam("{");
        projectPathParam.append("project").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "project", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"project"+pathSuffix : pathPrefix;
        fullPath.replace(projectPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(project)));
    }
    
    {
        QString r_namespacePathParam("{");
        r_namespacePathParam.append("namespace").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "namespace", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"namespace"+pathSuffix : pathPrefix;
        fullPath.replace(r_namespacePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(r_namespace)));
    }
    
    {
        QString idPathParam("{");
        idPathParam.append("id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"id"+pathSuffix : pathPrefix;
        fullPath.replace(idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIProjectsApi::projectsProjectFilesDeleteCallback);
    connect(this, &OAIProjectsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIProjectsApi::projectsProjectFilesDeleteCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT projectsProjectFilesDeleteSignal();
        Q_EMIT projectsProjectFilesDeleteSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT projectsProjectFilesDeleteSignalE(error_type, error_str);
        Q_EMIT projectsProjectFilesDeleteSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT projectsProjectFilesDeleteSignalError(error_type, error_str);
        Q_EMIT projectsProjectFilesDeleteSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIProjectsApi::projectsProjectFilesList(const QString &project, const QString &r_namespace, const ::OpenAPI::OptionalParam<QString> &limit, const ::OpenAPI::OptionalParam<QString> &offset, const ::OpenAPI::OptionalParam<QString> &ordering, const ::OpenAPI::OptionalParam<QString> &filename, const ::OpenAPI::OptionalParam<QString> &content) {
    QString fullPath = QString(_serverConfigs["projectsProjectFilesList"][_serverIndices.value("projectsProjectFilesList")].URL()+"/v1/{namespace}/projects/{project}/project_files/");
    
    if (_apiKeys.contains("jwt")) {
        addHeaders("jwt",_apiKeys.find("jwt").value());
    }
    
    
    {
        QString projectPathParam("{");
        projectPathParam.append("project").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "project", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"project"+pathSuffix : pathPrefix;
        fullPath.replace(projectPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(project)));
    }
    
    {
        QString r_namespacePathParam("{");
        r_namespacePathParam.append("namespace").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "namespace", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"namespace"+pathSuffix : pathPrefix;
        fullPath.replace(r_namespacePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(r_namespace)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (limit.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "limit", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("limit")).append(querySuffix).append(QUrl::toPercentEncoding(limit.stringValue()));
    }
    if (offset.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "offset", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("offset")).append(querySuffix).append(QUrl::toPercentEncoding(offset.stringValue()));
    }
    if (ordering.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "ordering", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("ordering")).append(querySuffix).append(QUrl::toPercentEncoding(ordering.stringValue()));
    }
    if (filename.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "filename", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("filename")).append(querySuffix).append(QUrl::toPercentEncoding(filename.stringValue()));
    }
    if (content.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "content", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("content")).append(querySuffix).append(QUrl::toPercentEncoding(content.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIProjectsApi::projectsProjectFilesListCallback);
    connect(this, &OAIProjectsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIProjectsApi::projectsProjectFilesListCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAIProjectFile> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAIProjectFile val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT projectsProjectFilesListSignal(output);
        Q_EMIT projectsProjectFilesListSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT projectsProjectFilesListSignalE(output, error_type, error_str);
        Q_EMIT projectsProjectFilesListSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT projectsProjectFilesListSignalError(output, error_type, error_str);
        Q_EMIT projectsProjectFilesListSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIProjectsApi::projectsProjectFilesRead(const QString &project, const QString &r_namespace, const QString &id, const ::OpenAPI::OptionalParam<QString> &content) {
    QString fullPath = QString(_serverConfigs["projectsProjectFilesRead"][_serverIndices.value("projectsProjectFilesRead")].URL()+"/v1/{namespace}/projects/{project}/project_files/{id}/");
    
    if (_apiKeys.contains("jwt")) {
        addHeaders("jwt",_apiKeys.find("jwt").value());
    }
    
    
    {
        QString projectPathParam("{");
        projectPathParam.append("project").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "project", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"project"+pathSuffix : pathPrefix;
        fullPath.replace(projectPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(project)));
    }
    
    {
        QString r_namespacePathParam("{");
        r_namespacePathParam.append("namespace").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "namespace", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"namespace"+pathSuffix : pathPrefix;
        fullPath.replace(r_namespacePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(r_namespace)));
    }
    
    {
        QString idPathParam("{");
        idPathParam.append("id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"id"+pathSuffix : pathPrefix;
        fullPath.replace(idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(id)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (content.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "content", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("content")).append(querySuffix).append(QUrl::toPercentEncoding(content.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIProjectsApi::projectsProjectFilesReadCallback);
    connect(this, &OAIProjectsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIProjectsApi::projectsProjectFilesReadCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIProjectFile output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT projectsProjectFilesReadSignal(output);
        Q_EMIT projectsProjectFilesReadSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT projectsProjectFilesReadSignalE(output, error_type, error_str);
        Q_EMIT projectsProjectFilesReadSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT projectsProjectFilesReadSignalError(output, error_type, error_str);
        Q_EMIT projectsProjectFilesReadSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIProjectsApi::projectsProjectFilesReplace(const QString &project, const QString &r_namespace, const QString &id, const ::OpenAPI::OptionalParam<OAIHttpFileElement> &file, const ::OpenAPI::OptionalParam<QString> &base64_data, const ::OpenAPI::OptionalParam<QString> &name, const ::OpenAPI::OptionalParam<QString> &path) {
    QString fullPath = QString(_serverConfigs["projectsProjectFilesReplace"][_serverIndices.value("projectsProjectFilesReplace")].URL()+"/v1/{namespace}/projects/{project}/project_files/{id}/");
    
    if (_apiKeys.contains("jwt")) {
        addHeaders("jwt",_apiKeys.find("jwt").value());
    }
    
    
    {
        QString projectPathParam("{");
        projectPathParam.append("project").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "project", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"project"+pathSuffix : pathPrefix;
        fullPath.replace(projectPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(project)));
    }
    
    {
        QString r_namespacePathParam("{");
        r_namespacePathParam.append("namespace").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "namespace", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"namespace"+pathSuffix : pathPrefix;
        fullPath.replace(r_namespacePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(r_namespace)));
    }
    
    {
        QString idPathParam("{");
        idPathParam.append("id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"id"+pathSuffix : pathPrefix;
        fullPath.replace(idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PUT");

    if (file.hasValue())
    {
        input.add_file("file", file.value().local_filename, file.value().request_filename, file.value().mime_type);
    }
    if (base64_data.hasValue())
    {
        input.add_var("base64_data", ::OpenAPI::toStringValue(base64_data.value()));
    }
    if (name.hasValue())
    {
        input.add_var("name", ::OpenAPI::toStringValue(name.value()));
    }
    if (path.hasValue())
    {
        input.add_var("path", ::OpenAPI::toStringValue(path.value()));
    }

    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIProjectsApi::projectsProjectFilesReplaceCallback);
    connect(this, &OAIProjectsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIProjectsApi::projectsProjectFilesReplaceCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIProjectFile output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT projectsProjectFilesReplaceSignal(output);
        Q_EMIT projectsProjectFilesReplaceSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT projectsProjectFilesReplaceSignalE(output, error_type, error_str);
        Q_EMIT projectsProjectFilesReplaceSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT projectsProjectFilesReplaceSignalError(output, error_type, error_str);
        Q_EMIT projectsProjectFilesReplaceSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIProjectsApi::projectsProjectFilesUpdate(const QString &project, const QString &r_namespace, const QString &id, const ::OpenAPI::OptionalParam<OAIHttpFileElement> &file, const ::OpenAPI::OptionalParam<QString> &base64_data, const ::OpenAPI::OptionalParam<QString> &name, const ::OpenAPI::OptionalParam<QString> &path) {
    QString fullPath = QString(_serverConfigs["projectsProjectFilesUpdate"][_serverIndices.value("projectsProjectFilesUpdate")].URL()+"/v1/{namespace}/projects/{project}/project_files/{id}/");
    
    if (_apiKeys.contains("jwt")) {
        addHeaders("jwt",_apiKeys.find("jwt").value());
    }
    
    
    {
        QString projectPathParam("{");
        projectPathParam.append("project").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "project", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"project"+pathSuffix : pathPrefix;
        fullPath.replace(projectPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(project)));
    }
    
    {
        QString r_namespacePathParam("{");
        r_namespacePathParam.append("namespace").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "namespace", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"namespace"+pathSuffix : pathPrefix;
        fullPath.replace(r_namespacePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(r_namespace)));
    }
    
    {
        QString idPathParam("{");
        idPathParam.append("id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"id"+pathSuffix : pathPrefix;
        fullPath.replace(idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PATCH");

    if (file.hasValue())
    {
        input.add_file("file", file.value().local_filename, file.value().request_filename, file.value().mime_type);
    }
    if (base64_data.hasValue())
    {
        input.add_var("base64_data", ::OpenAPI::toStringValue(base64_data.value()));
    }
    if (name.hasValue())
    {
        input.add_var("name", ::OpenAPI::toStringValue(name.value()));
    }
    if (path.hasValue())
    {
        input.add_var("path", ::OpenAPI::toStringValue(path.value()));
    }

    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIProjectsApi::projectsProjectFilesUpdateCallback);
    connect(this, &OAIProjectsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIProjectsApi::projectsProjectFilesUpdateCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIProjectFile output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT projectsProjectFilesUpdateSignal(output);
        Q_EMIT projectsProjectFilesUpdateSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT projectsProjectFilesUpdateSignalE(output, error_type, error_str);
        Q_EMIT projectsProjectFilesUpdateSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT projectsProjectFilesUpdateSignalError(output, error_type, error_str);
        Q_EMIT projectsProjectFilesUpdateSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIProjectsApi::projectsRead(const QString &r_namespace, const QString &project) {
    QString fullPath = QString(_serverConfigs["projectsRead"][_serverIndices.value("projectsRead")].URL()+"/v1/{namespace}/projects/{project}/");
    
    if (_apiKeys.contains("jwt")) {
        addHeaders("jwt",_apiKeys.find("jwt").value());
    }
    
    
    {
        QString r_namespacePathParam("{");
        r_namespacePathParam.append("namespace").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "namespace", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"namespace"+pathSuffix : pathPrefix;
        fullPath.replace(r_namespacePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(r_namespace)));
    }
    
    {
        QString projectPathParam("{");
        projectPathParam.append("project").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "project", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"project"+pathSuffix : pathPrefix;
        fullPath.replace(projectPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(project)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIProjectsApi::projectsReadCallback);
    connect(this, &OAIProjectsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIProjectsApi::projectsReadCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIProject output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT projectsReadSignal(output);
        Q_EMIT projectsReadSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT projectsReadSignalE(output, error_type, error_str);
        Q_EMIT projectsReadSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT projectsReadSignalError(output, error_type, error_str);
        Q_EMIT projectsReadSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIProjectsApi::projectsReplace(const QString &r_namespace, const QString &project, const ::OpenAPI::OptionalParam<OAIProjectData> &project_data) {
    QString fullPath = QString(_serverConfigs["projectsReplace"][_serverIndices.value("projectsReplace")].URL()+"/v1/{namespace}/projects/{project}/");
    
    if (_apiKeys.contains("jwt")) {
        addHeaders("jwt",_apiKeys.find("jwt").value());
    }
    
    
    {
        QString r_namespacePathParam("{");
        r_namespacePathParam.append("namespace").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "namespace", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"namespace"+pathSuffix : pathPrefix;
        fullPath.replace(r_namespacePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(r_namespace)));
    }
    
    {
        QString projectPathParam("{");
        projectPathParam.append("project").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "project", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"project"+pathSuffix : pathPrefix;
        fullPath.replace(projectPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(project)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PUT");

    if (project_data.hasValue()){

        
        QByteArray output = project_data.value().asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIProjectsApi::projectsReplaceCallback);
    connect(this, &OAIProjectsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIProjectsApi::projectsReplaceCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIProject output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT projectsReplaceSignal(output);
        Q_EMIT projectsReplaceSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT projectsReplaceSignalE(output, error_type, error_str);
        Q_EMIT projectsReplaceSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT projectsReplaceSignalError(output, error_type, error_str);
        Q_EMIT projectsReplaceSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIProjectsApi::projectsServersApiKey(const QString &project, const QString &r_namespace, const QString &server) {
    QString fullPath = QString(_serverConfigs["projectsServersApiKey"][_serverIndices.value("projectsServersApiKey")].URL()+"/v1/{namespace}/projects/{project}/servers/{server}/api-key/");
    
    if (_apiKeys.contains("jwt")) {
        addHeaders("jwt",_apiKeys.find("jwt").value());
    }
    
    
    {
        QString projectPathParam("{");
        projectPathParam.append("project").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "project", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"project"+pathSuffix : pathPrefix;
        fullPath.replace(projectPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(project)));
    }
    
    {
        QString r_namespacePathParam("{");
        r_namespacePathParam.append("namespace").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "namespace", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"namespace"+pathSuffix : pathPrefix;
        fullPath.replace(r_namespacePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(r_namespace)));
    }
    
    {
        QString serverPathParam("{");
        serverPathParam.append("server").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "server", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"server"+pathSuffix : pathPrefix;
        fullPath.replace(serverPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(server)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIProjectsApi::projectsServersApiKeyCallback);
    connect(this, &OAIProjectsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIProjectsApi::projectsServersApiKeyCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIJWT output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT projectsServersApiKeySignal(output);
        Q_EMIT projectsServersApiKeySignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT projectsServersApiKeySignalE(output, error_type, error_str);
        Q_EMIT projectsServersApiKeySignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT projectsServersApiKeySignalError(output, error_type, error_str);
        Q_EMIT projectsServersApiKeySignalErrorFull(worker, error_type, error_str);
    }
}

void OAIProjectsApi::projectsServersAuth(const QString &project, const QString &r_namespace, const QString &server) {
    QString fullPath = QString(_serverConfigs["projectsServersAuth"][_serverIndices.value("projectsServersAuth")].URL()+"/v1/{namespace}/projects/{project}/servers/{server}/auth/");
    
    if (_apiKeys.contains("jwt")) {
        addHeaders("jwt",_apiKeys.find("jwt").value());
    }
    
    
    {
        QString projectPathParam("{");
        projectPathParam.append("project").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "project", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"project"+pathSuffix : pathPrefix;
        fullPath.replace(projectPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(project)));
    }
    
    {
        QString r_namespacePathParam("{");
        r_namespacePathParam.append("namespace").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "namespace", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"namespace"+pathSuffix : pathPrefix;
        fullPath.replace(r_namespacePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(r_namespace)));
    }
    
    {
        QString serverPathParam("{");
        serverPathParam.append("server").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "server", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"server"+pathSuffix : pathPrefix;
        fullPath.replace(serverPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(server)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIProjectsApi::projectsServersAuthCallback);
    connect(this, &OAIProjectsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIProjectsApi::projectsServersAuthCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT projectsServersAuthSignal();
        Q_EMIT projectsServersAuthSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT projectsServersAuthSignalE(error_type, error_str);
        Q_EMIT projectsServersAuthSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT projectsServersAuthSignalError(error_type, error_str);
        Q_EMIT projectsServersAuthSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIProjectsApi::projectsServersCreate(const QString &project, const QString &r_namespace, const ::OpenAPI::OptionalParam<OAIServerData> &server_data) {
    QString fullPath = QString(_serverConfigs["projectsServersCreate"][_serverIndices.value("projectsServersCreate")].URL()+"/v1/{namespace}/projects/{project}/servers/");
    
    if (_apiKeys.contains("jwt")) {
        addHeaders("jwt",_apiKeys.find("jwt").value());
    }
    
    
    {
        QString projectPathParam("{");
        projectPathParam.append("project").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "project", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"project"+pathSuffix : pathPrefix;
        fullPath.replace(projectPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(project)));
    }
    
    {
        QString r_namespacePathParam("{");
        r_namespacePathParam.append("namespace").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "namespace", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"namespace"+pathSuffix : pathPrefix;
        fullPath.replace(r_namespacePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(r_namespace)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (server_data.hasValue()){

        
        QByteArray output = server_data.value().asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIProjectsApi::projectsServersCreateCallback);
    connect(this, &OAIProjectsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIProjectsApi::projectsServersCreateCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIServer output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT projectsServersCreateSignal(output);
        Q_EMIT projectsServersCreateSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT projectsServersCreateSignalE(output, error_type, error_str);
        Q_EMIT projectsServersCreateSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT projectsServersCreateSignalError(output, error_type, error_str);
        Q_EMIT projectsServersCreateSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIProjectsApi::projectsServersDelete(const QString &project, const QString &r_namespace, const QString &server) {
    QString fullPath = QString(_serverConfigs["projectsServersDelete"][_serverIndices.value("projectsServersDelete")].URL()+"/v1/{namespace}/projects/{project}/servers/{server}/");
    
    if (_apiKeys.contains("jwt")) {
        addHeaders("jwt",_apiKeys.find("jwt").value());
    }
    
    
    {
        QString projectPathParam("{");
        projectPathParam.append("project").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "project", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"project"+pathSuffix : pathPrefix;
        fullPath.replace(projectPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(project)));
    }
    
    {
        QString r_namespacePathParam("{");
        r_namespacePathParam.append("namespace").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "namespace", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"namespace"+pathSuffix : pathPrefix;
        fullPath.replace(r_namespacePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(r_namespace)));
    }
    
    {
        QString serverPathParam("{");
        serverPathParam.append("server").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "server", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"server"+pathSuffix : pathPrefix;
        fullPath.replace(serverPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(server)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIProjectsApi::projectsServersDeleteCallback);
    connect(this, &OAIProjectsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIProjectsApi::projectsServersDeleteCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT projectsServersDeleteSignal();
        Q_EMIT projectsServersDeleteSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT projectsServersDeleteSignalE(error_type, error_str);
        Q_EMIT projectsServersDeleteSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT projectsServersDeleteSignalError(error_type, error_str);
        Q_EMIT projectsServersDeleteSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIProjectsApi::projectsServersList(const QString &project, const QString &r_namespace, const ::OpenAPI::OptionalParam<QString> &limit, const ::OpenAPI::OptionalParam<QString> &offset, const ::OpenAPI::OptionalParam<QString> &name, const ::OpenAPI::OptionalParam<QString> &ordering) {
    QString fullPath = QString(_serverConfigs["projectsServersList"][_serverIndices.value("projectsServersList")].URL()+"/v1/{namespace}/projects/{project}/servers/");
    
    if (_apiKeys.contains("jwt")) {
        addHeaders("jwt",_apiKeys.find("jwt").value());
    }
    
    
    {
        QString projectPathParam("{");
        projectPathParam.append("project").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "project", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"project"+pathSuffix : pathPrefix;
        fullPath.replace(projectPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(project)));
    }
    
    {
        QString r_namespacePathParam("{");
        r_namespacePathParam.append("namespace").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "namespace", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"namespace"+pathSuffix : pathPrefix;
        fullPath.replace(r_namespacePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(r_namespace)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (limit.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "limit", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("limit")).append(querySuffix).append(QUrl::toPercentEncoding(limit.stringValue()));
    }
    if (offset.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "offset", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("offset")).append(querySuffix).append(QUrl::toPercentEncoding(offset.stringValue()));
    }
    if (name.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "name", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("name")).append(querySuffix).append(QUrl::toPercentEncoding(name.stringValue()));
    }
    if (ordering.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "ordering", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("ordering")).append(querySuffix).append(QUrl::toPercentEncoding(ordering.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIProjectsApi::projectsServersListCallback);
    connect(this, &OAIProjectsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIProjectsApi::projectsServersListCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAIServer> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAIServer val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT projectsServersListSignal(output);
        Q_EMIT projectsServersListSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT projectsServersListSignalE(output, error_type, error_str);
        Q_EMIT projectsServersListSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT projectsServersListSignalError(output, error_type, error_str);
        Q_EMIT projectsServersListSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIProjectsApi::projectsServersRead(const QString &project, const QString &r_namespace, const QString &server) {
    QString fullPath = QString(_serverConfigs["projectsServersRead"][_serverIndices.value("projectsServersRead")].URL()+"/v1/{namespace}/projects/{project}/servers/{server}/");
    
    if (_apiKeys.contains("jwt")) {
        addHeaders("jwt",_apiKeys.find("jwt").value());
    }
    
    
    {
        QString projectPathParam("{");
        projectPathParam.append("project").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "project", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"project"+pathSuffix : pathPrefix;
        fullPath.replace(projectPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(project)));
    }
    
    {
        QString r_namespacePathParam("{");
        r_namespacePathParam.append("namespace").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "namespace", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"namespace"+pathSuffix : pathPrefix;
        fullPath.replace(r_namespacePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(r_namespace)));
    }
    
    {
        QString serverPathParam("{");
        serverPathParam.append("server").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "server", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"server"+pathSuffix : pathPrefix;
        fullPath.replace(serverPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(server)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIProjectsApi::projectsServersReadCallback);
    connect(this, &OAIProjectsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIProjectsApi::projectsServersReadCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIServer output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT projectsServersReadSignal(output);
        Q_EMIT projectsServersReadSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT projectsServersReadSignalE(output, error_type, error_str);
        Q_EMIT projectsServersReadSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT projectsServersReadSignalError(output, error_type, error_str);
        Q_EMIT projectsServersReadSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIProjectsApi::projectsServersReplace(const QString &project, const QString &r_namespace, const QString &server, const ::OpenAPI::OptionalParam<OAIServerData> &server_data) {
    QString fullPath = QString(_serverConfigs["projectsServersReplace"][_serverIndices.value("projectsServersReplace")].URL()+"/v1/{namespace}/projects/{project}/servers/{server}/");
    
    if (_apiKeys.contains("jwt")) {
        addHeaders("jwt",_apiKeys.find("jwt").value());
    }
    
    
    {
        QString projectPathParam("{");
        projectPathParam.append("project").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "project", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"project"+pathSuffix : pathPrefix;
        fullPath.replace(projectPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(project)));
    }
    
    {
        QString r_namespacePathParam("{");
        r_namespacePathParam.append("namespace").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "namespace", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"namespace"+pathSuffix : pathPrefix;
        fullPath.replace(r_namespacePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(r_namespace)));
    }
    
    {
        QString serverPathParam("{");
        serverPathParam.append("server").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "server", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"server"+pathSuffix : pathPrefix;
        fullPath.replace(serverPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(server)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PUT");

    if (server_data.hasValue()){

        
        QByteArray output = server_data.value().asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIProjectsApi::projectsServersReplaceCallback);
    connect(this, &OAIProjectsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIProjectsApi::projectsServersReplaceCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIServer output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT projectsServersReplaceSignal(output);
        Q_EMIT projectsServersReplaceSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT projectsServersReplaceSignalE(output, error_type, error_str);
        Q_EMIT projectsServersReplaceSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT projectsServersReplaceSignalError(output, error_type, error_str);
        Q_EMIT projectsServersReplaceSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIProjectsApi::projectsServersRunStatsCreate(const QString &server, const QString &project, const QString &r_namespace, const ::OpenAPI::OptionalParam<OAIServerRunStatisticsData> &serverrunstats_data) {
    QString fullPath = QString(_serverConfigs["projectsServersRunStatsCreate"][_serverIndices.value("projectsServersRunStatsCreate")].URL()+"/v1/{namespace}/projects/{project}/servers/{server}/run-stats/");
    
    if (_apiKeys.contains("jwt")) {
        addHeaders("jwt",_apiKeys.find("jwt").value());
    }
    
    
    {
        QString serverPathParam("{");
        serverPathParam.append("server").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "server", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"server"+pathSuffix : pathPrefix;
        fullPath.replace(serverPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(server)));
    }
    
    {
        QString projectPathParam("{");
        projectPathParam.append("project").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "project", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"project"+pathSuffix : pathPrefix;
        fullPath.replace(projectPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(project)));
    }
    
    {
        QString r_namespacePathParam("{");
        r_namespacePathParam.append("namespace").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "namespace", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"namespace"+pathSuffix : pathPrefix;
        fullPath.replace(r_namespacePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(r_namespace)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (serverrunstats_data.hasValue()){

        
        QByteArray output = serverrunstats_data.value().asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIProjectsApi::projectsServersRunStatsCreateCallback);
    connect(this, &OAIProjectsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIProjectsApi::projectsServersRunStatsCreateCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIServerRunStatistics output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT projectsServersRunStatsCreateSignal(output);
        Q_EMIT projectsServersRunStatsCreateSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT projectsServersRunStatsCreateSignalE(output, error_type, error_str);
        Q_EMIT projectsServersRunStatsCreateSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT projectsServersRunStatsCreateSignalError(output, error_type, error_str);
        Q_EMIT projectsServersRunStatsCreateSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIProjectsApi::projectsServersRunStatsDelete(const QString &server, const QString &project, const QString &r_namespace, const QString &id) {
    QString fullPath = QString(_serverConfigs["projectsServersRunStatsDelete"][_serverIndices.value("projectsServersRunStatsDelete")].URL()+"/v1/{namespace}/projects/{project}/servers/{server}/run-stats/{id}/");
    
    if (_apiKeys.contains("jwt")) {
        addHeaders("jwt",_apiKeys.find("jwt").value());
    }
    
    
    {
        QString serverPathParam("{");
        serverPathParam.append("server").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "server", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"server"+pathSuffix : pathPrefix;
        fullPath.replace(serverPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(server)));
    }
    
    {
        QString projectPathParam("{");
        projectPathParam.append("project").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "project", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"project"+pathSuffix : pathPrefix;
        fullPath.replace(projectPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(project)));
    }
    
    {
        QString r_namespacePathParam("{");
        r_namespacePathParam.append("namespace").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "namespace", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"namespace"+pathSuffix : pathPrefix;
        fullPath.replace(r_namespacePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(r_namespace)));
    }
    
    {
        QString idPathParam("{");
        idPathParam.append("id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"id"+pathSuffix : pathPrefix;
        fullPath.replace(idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIProjectsApi::projectsServersRunStatsDeleteCallback);
    connect(this, &OAIProjectsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIProjectsApi::projectsServersRunStatsDeleteCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT projectsServersRunStatsDeleteSignal();
        Q_EMIT projectsServersRunStatsDeleteSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT projectsServersRunStatsDeleteSignalE(error_type, error_str);
        Q_EMIT projectsServersRunStatsDeleteSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT projectsServersRunStatsDeleteSignalError(error_type, error_str);
        Q_EMIT projectsServersRunStatsDeleteSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIProjectsApi::projectsServersRunStatsRead(const QString &server, const QString &project, const QString &r_namespace, const QString &id) {
    QString fullPath = QString(_serverConfigs["projectsServersRunStatsRead"][_serverIndices.value("projectsServersRunStatsRead")].URL()+"/v1/{namespace}/projects/{project}/servers/{server}/run-stats/{id}/");
    
    if (_apiKeys.contains("jwt")) {
        addHeaders("jwt",_apiKeys.find("jwt").value());
    }
    
    
    {
        QString serverPathParam("{");
        serverPathParam.append("server").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "server", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"server"+pathSuffix : pathPrefix;
        fullPath.replace(serverPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(server)));
    }
    
    {
        QString projectPathParam("{");
        projectPathParam.append("project").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "project", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"project"+pathSuffix : pathPrefix;
        fullPath.replace(projectPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(project)));
    }
    
    {
        QString r_namespacePathParam("{");
        r_namespacePathParam.append("namespace").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "namespace", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"namespace"+pathSuffix : pathPrefix;
        fullPath.replace(r_namespacePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(r_namespace)));
    }
    
    {
        QString idPathParam("{");
        idPathParam.append("id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"id"+pathSuffix : pathPrefix;
        fullPath.replace(idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIProjectsApi::projectsServersRunStatsReadCallback);
    connect(this, &OAIProjectsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIProjectsApi::projectsServersRunStatsReadCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIServerRunStatistics output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT projectsServersRunStatsReadSignal(output);
        Q_EMIT projectsServersRunStatsReadSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT projectsServersRunStatsReadSignalE(output, error_type, error_str);
        Q_EMIT projectsServersRunStatsReadSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT projectsServersRunStatsReadSignalError(output, error_type, error_str);
        Q_EMIT projectsServersRunStatsReadSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIProjectsApi::projectsServersRunStatsReplace(const QString &server, const QString &project, const QString &r_namespace, const QString &id, const ::OpenAPI::OptionalParam<OAIServerRunStatisticsData> &serverrunstats_data) {
    QString fullPath = QString(_serverConfigs["projectsServersRunStatsReplace"][_serverIndices.value("projectsServersRunStatsReplace")].URL()+"/v1/{namespace}/projects/{project}/servers/{server}/run-stats/{id}/");
    
    if (_apiKeys.contains("jwt")) {
        addHeaders("jwt",_apiKeys.find("jwt").value());
    }
    
    
    {
        QString serverPathParam("{");
        serverPathParam.append("server").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "server", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"server"+pathSuffix : pathPrefix;
        fullPath.replace(serverPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(server)));
    }
    
    {
        QString projectPathParam("{");
        projectPathParam.append("project").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "project", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"project"+pathSuffix : pathPrefix;
        fullPath.replace(projectPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(project)));
    }
    
    {
        QString r_namespacePathParam("{");
        r_namespacePathParam.append("namespace").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "namespace", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"namespace"+pathSuffix : pathPrefix;
        fullPath.replace(r_namespacePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(r_namespace)));
    }
    
    {
        QString idPathParam("{");
        idPathParam.append("id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"id"+pathSuffix : pathPrefix;
        fullPath.replace(idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PUT");

    if (serverrunstats_data.hasValue()){

        
        QByteArray output = serverrunstats_data.value().asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIProjectsApi::projectsServersRunStatsReplaceCallback);
    connect(this, &OAIProjectsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIProjectsApi::projectsServersRunStatsReplaceCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIServerRunStatistics output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT projectsServersRunStatsReplaceSignal(output);
        Q_EMIT projectsServersRunStatsReplaceSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT projectsServersRunStatsReplaceSignalE(output, error_type, error_str);
        Q_EMIT projectsServersRunStatsReplaceSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT projectsServersRunStatsReplaceSignalError(output, error_type, error_str);
        Q_EMIT projectsServersRunStatsReplaceSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIProjectsApi::projectsServersRunStatsUpdate(const QString &server, const QString &project, const QString &r_namespace, const QString &id, const ::OpenAPI::OptionalParam<OAIServerRunStatisticsData> &serverrunstats_data) {
    QString fullPath = QString(_serverConfigs["projectsServersRunStatsUpdate"][_serverIndices.value("projectsServersRunStatsUpdate")].URL()+"/v1/{namespace}/projects/{project}/servers/{server}/run-stats/{id}/");
    
    if (_apiKeys.contains("jwt")) {
        addHeaders("jwt",_apiKeys.find("jwt").value());
    }
    
    
    {
        QString serverPathParam("{");
        serverPathParam.append("server").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "server", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"server"+pathSuffix : pathPrefix;
        fullPath.replace(serverPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(server)));
    }
    
    {
        QString projectPathParam("{");
        projectPathParam.append("project").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "project", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"project"+pathSuffix : pathPrefix;
        fullPath.replace(projectPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(project)));
    }
    
    {
        QString r_namespacePathParam("{");
        r_namespacePathParam.append("namespace").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "namespace", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"namespace"+pathSuffix : pathPrefix;
        fullPath.replace(r_namespacePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(r_namespace)));
    }
    
    {
        QString idPathParam("{");
        idPathParam.append("id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"id"+pathSuffix : pathPrefix;
        fullPath.replace(idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PATCH");

    if (serverrunstats_data.hasValue()){

        
        QByteArray output = serverrunstats_data.value().asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIProjectsApi::projectsServersRunStatsUpdateCallback);
    connect(this, &OAIProjectsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIProjectsApi::projectsServersRunStatsUpdateCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIServerRunStatistics output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT projectsServersRunStatsUpdateSignal(output);
        Q_EMIT projectsServersRunStatsUpdateSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT projectsServersRunStatsUpdateSignalE(output, error_type, error_str);
        Q_EMIT projectsServersRunStatsUpdateSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT projectsServersRunStatsUpdateSignalError(output, error_type, error_str);
        Q_EMIT projectsServersRunStatsUpdateSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIProjectsApi::projectsServersSshTunnelsCreate(const QString &server, const QString &project, const QString &r_namespace, const ::OpenAPI::OptionalParam<OAISshTunnelData> &sshtunnel_data) {
    QString fullPath = QString(_serverConfigs["projectsServersSshTunnelsCreate"][_serverIndices.value("projectsServersSshTunnelsCreate")].URL()+"/v1/{namespace}/projects/{project}/servers/{server}/ssh-tunnels/");
    
    if (_apiKeys.contains("jwt")) {
        addHeaders("jwt",_apiKeys.find("jwt").value());
    }
    
    
    {
        QString serverPathParam("{");
        serverPathParam.append("server").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "server", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"server"+pathSuffix : pathPrefix;
        fullPath.replace(serverPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(server)));
    }
    
    {
        QString projectPathParam("{");
        projectPathParam.append("project").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "project", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"project"+pathSuffix : pathPrefix;
        fullPath.replace(projectPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(project)));
    }
    
    {
        QString r_namespacePathParam("{");
        r_namespacePathParam.append("namespace").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "namespace", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"namespace"+pathSuffix : pathPrefix;
        fullPath.replace(r_namespacePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(r_namespace)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (sshtunnel_data.hasValue()){

        
        QByteArray output = sshtunnel_data.value().asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIProjectsApi::projectsServersSshTunnelsCreateCallback);
    connect(this, &OAIProjectsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIProjectsApi::projectsServersSshTunnelsCreateCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAISshTunnel output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT projectsServersSshTunnelsCreateSignal(output);
        Q_EMIT projectsServersSshTunnelsCreateSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT projectsServersSshTunnelsCreateSignalE(output, error_type, error_str);
        Q_EMIT projectsServersSshTunnelsCreateSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT projectsServersSshTunnelsCreateSignalError(output, error_type, error_str);
        Q_EMIT projectsServersSshTunnelsCreateSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIProjectsApi::projectsServersSshTunnelsDelete(const QString &server, const QString &project, const QString &r_namespace, const QString &tunnel) {
    QString fullPath = QString(_serverConfigs["projectsServersSshTunnelsDelete"][_serverIndices.value("projectsServersSshTunnelsDelete")].URL()+"/v1/{namespace}/projects/{project}/servers/{server}/ssh-tunnels/{tunnel}/");
    
    if (_apiKeys.contains("jwt")) {
        addHeaders("jwt",_apiKeys.find("jwt").value());
    }
    
    
    {
        QString serverPathParam("{");
        serverPathParam.append("server").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "server", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"server"+pathSuffix : pathPrefix;
        fullPath.replace(serverPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(server)));
    }
    
    {
        QString projectPathParam("{");
        projectPathParam.append("project").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "project", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"project"+pathSuffix : pathPrefix;
        fullPath.replace(projectPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(project)));
    }
    
    {
        QString r_namespacePathParam("{");
        r_namespacePathParam.append("namespace").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "namespace", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"namespace"+pathSuffix : pathPrefix;
        fullPath.replace(r_namespacePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(r_namespace)));
    }
    
    {
        QString tunnelPathParam("{");
        tunnelPathParam.append("tunnel").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "tunnel", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"tunnel"+pathSuffix : pathPrefix;
        fullPath.replace(tunnelPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(tunnel)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIProjectsApi::projectsServersSshTunnelsDeleteCallback);
    connect(this, &OAIProjectsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIProjectsApi::projectsServersSshTunnelsDeleteCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT projectsServersSshTunnelsDeleteSignal();
        Q_EMIT projectsServersSshTunnelsDeleteSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT projectsServersSshTunnelsDeleteSignalE(error_type, error_str);
        Q_EMIT projectsServersSshTunnelsDeleteSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT projectsServersSshTunnelsDeleteSignalError(error_type, error_str);
        Q_EMIT projectsServersSshTunnelsDeleteSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIProjectsApi::projectsServersSshTunnelsList(const QString &server, const QString &project, const QString &r_namespace, const ::OpenAPI::OptionalParam<QString> &limit, const ::OpenAPI::OptionalParam<QString> &offset, const ::OpenAPI::OptionalParam<QString> &ordering) {
    QString fullPath = QString(_serverConfigs["projectsServersSshTunnelsList"][_serverIndices.value("projectsServersSshTunnelsList")].URL()+"/v1/{namespace}/projects/{project}/servers/{server}/ssh-tunnels/");
    
    if (_apiKeys.contains("jwt")) {
        addHeaders("jwt",_apiKeys.find("jwt").value());
    }
    
    
    {
        QString serverPathParam("{");
        serverPathParam.append("server").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "server", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"server"+pathSuffix : pathPrefix;
        fullPath.replace(serverPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(server)));
    }
    
    {
        QString projectPathParam("{");
        projectPathParam.append("project").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "project", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"project"+pathSuffix : pathPrefix;
        fullPath.replace(projectPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(project)));
    }
    
    {
        QString r_namespacePathParam("{");
        r_namespacePathParam.append("namespace").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "namespace", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"namespace"+pathSuffix : pathPrefix;
        fullPath.replace(r_namespacePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(r_namespace)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (limit.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "limit", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("limit")).append(querySuffix).append(QUrl::toPercentEncoding(limit.stringValue()));
    }
    if (offset.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "offset", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("offset")).append(querySuffix).append(QUrl::toPercentEncoding(offset.stringValue()));
    }
    if (ordering.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "ordering", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("ordering")).append(querySuffix).append(QUrl::toPercentEncoding(ordering.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIProjectsApi::projectsServersSshTunnelsListCallback);
    connect(this, &OAIProjectsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIProjectsApi::projectsServersSshTunnelsListCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAISshTunnel> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAISshTunnel val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT projectsServersSshTunnelsListSignal(output);
        Q_EMIT projectsServersSshTunnelsListSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT projectsServersSshTunnelsListSignalE(output, error_type, error_str);
        Q_EMIT projectsServersSshTunnelsListSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT projectsServersSshTunnelsListSignalError(output, error_type, error_str);
        Q_EMIT projectsServersSshTunnelsListSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIProjectsApi::projectsServersSshTunnelsRead(const QString &server, const QString &project, const QString &r_namespace, const QString &tunnel) {
    QString fullPath = QString(_serverConfigs["projectsServersSshTunnelsRead"][_serverIndices.value("projectsServersSshTunnelsRead")].URL()+"/v1/{namespace}/projects/{project}/servers/{server}/ssh-tunnels/{tunnel}/");
    
    if (_apiKeys.contains("jwt")) {
        addHeaders("jwt",_apiKeys.find("jwt").value());
    }
    
    
    {
        QString serverPathParam("{");
        serverPathParam.append("server").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "server", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"server"+pathSuffix : pathPrefix;
        fullPath.replace(serverPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(server)));
    }
    
    {
        QString projectPathParam("{");
        projectPathParam.append("project").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "project", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"project"+pathSuffix : pathPrefix;
        fullPath.replace(projectPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(project)));
    }
    
    {
        QString r_namespacePathParam("{");
        r_namespacePathParam.append("namespace").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "namespace", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"namespace"+pathSuffix : pathPrefix;
        fullPath.replace(r_namespacePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(r_namespace)));
    }
    
    {
        QString tunnelPathParam("{");
        tunnelPathParam.append("tunnel").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "tunnel", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"tunnel"+pathSuffix : pathPrefix;
        fullPath.replace(tunnelPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(tunnel)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIProjectsApi::projectsServersSshTunnelsReadCallback);
    connect(this, &OAIProjectsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIProjectsApi::projectsServersSshTunnelsReadCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAISshTunnel output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT projectsServersSshTunnelsReadSignal(output);
        Q_EMIT projectsServersSshTunnelsReadSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT projectsServersSshTunnelsReadSignalE(output, error_type, error_str);
        Q_EMIT projectsServersSshTunnelsReadSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT projectsServersSshTunnelsReadSignalError(output, error_type, error_str);
        Q_EMIT projectsServersSshTunnelsReadSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIProjectsApi::projectsServersSshTunnelsReplace(const QString &server, const QString &project, const QString &r_namespace, const QString &tunnel, const ::OpenAPI::OptionalParam<OAISshTunnelData> &sshtunnel_data) {
    QString fullPath = QString(_serverConfigs["projectsServersSshTunnelsReplace"][_serverIndices.value("projectsServersSshTunnelsReplace")].URL()+"/v1/{namespace}/projects/{project}/servers/{server}/ssh-tunnels/{tunnel}/");
    
    if (_apiKeys.contains("jwt")) {
        addHeaders("jwt",_apiKeys.find("jwt").value());
    }
    
    
    {
        QString serverPathParam("{");
        serverPathParam.append("server").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "server", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"server"+pathSuffix : pathPrefix;
        fullPath.replace(serverPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(server)));
    }
    
    {
        QString projectPathParam("{");
        projectPathParam.append("project").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "project", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"project"+pathSuffix : pathPrefix;
        fullPath.replace(projectPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(project)));
    }
    
    {
        QString r_namespacePathParam("{");
        r_namespacePathParam.append("namespace").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "namespace", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"namespace"+pathSuffix : pathPrefix;
        fullPath.replace(r_namespacePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(r_namespace)));
    }
    
    {
        QString tunnelPathParam("{");
        tunnelPathParam.append("tunnel").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "tunnel", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"tunnel"+pathSuffix : pathPrefix;
        fullPath.replace(tunnelPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(tunnel)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PUT");

    if (sshtunnel_data.hasValue()){

        
        QByteArray output = sshtunnel_data.value().asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIProjectsApi::projectsServersSshTunnelsReplaceCallback);
    connect(this, &OAIProjectsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIProjectsApi::projectsServersSshTunnelsReplaceCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAISshTunnel output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT projectsServersSshTunnelsReplaceSignal(output);
        Q_EMIT projectsServersSshTunnelsReplaceSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT projectsServersSshTunnelsReplaceSignalE(output, error_type, error_str);
        Q_EMIT projectsServersSshTunnelsReplaceSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT projectsServersSshTunnelsReplaceSignalError(output, error_type, error_str);
        Q_EMIT projectsServersSshTunnelsReplaceSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIProjectsApi::projectsServersSshTunnelsUpdate(const QString &server, const QString &project, const QString &r_namespace, const QString &tunnel, const ::OpenAPI::OptionalParam<OAISshTunnelData> &sshtunnel_data) {
    QString fullPath = QString(_serverConfigs["projectsServersSshTunnelsUpdate"][_serverIndices.value("projectsServersSshTunnelsUpdate")].URL()+"/v1/{namespace}/projects/{project}/servers/{server}/ssh-tunnels/{tunnel}/");
    
    if (_apiKeys.contains("jwt")) {
        addHeaders("jwt",_apiKeys.find("jwt").value());
    }
    
    
    {
        QString serverPathParam("{");
        serverPathParam.append("server").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "server", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"server"+pathSuffix : pathPrefix;
        fullPath.replace(serverPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(server)));
    }
    
    {
        QString projectPathParam("{");
        projectPathParam.append("project").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "project", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"project"+pathSuffix : pathPrefix;
        fullPath.replace(projectPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(project)));
    }
    
    {
        QString r_namespacePathParam("{");
        r_namespacePathParam.append("namespace").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "namespace", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"namespace"+pathSuffix : pathPrefix;
        fullPath.replace(r_namespacePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(r_namespace)));
    }
    
    {
        QString tunnelPathParam("{");
        tunnelPathParam.append("tunnel").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "tunnel", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"tunnel"+pathSuffix : pathPrefix;
        fullPath.replace(tunnelPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(tunnel)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PATCH");

    if (sshtunnel_data.hasValue()){

        
        QByteArray output = sshtunnel_data.value().asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIProjectsApi::projectsServersSshTunnelsUpdateCallback);
    connect(this, &OAIProjectsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIProjectsApi::projectsServersSshTunnelsUpdateCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAISshTunnel output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT projectsServersSshTunnelsUpdateSignal(output);
        Q_EMIT projectsServersSshTunnelsUpdateSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT projectsServersSshTunnelsUpdateSignalE(output, error_type, error_str);
        Q_EMIT projectsServersSshTunnelsUpdateSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT projectsServersSshTunnelsUpdateSignalError(output, error_type, error_str);
        Q_EMIT projectsServersSshTunnelsUpdateSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIProjectsApi::projectsServersStart(const QString &project, const QString &r_namespace, const QString &server) {
    QString fullPath = QString(_serverConfigs["projectsServersStart"][_serverIndices.value("projectsServersStart")].URL()+"/v1/{namespace}/projects/{project}/servers/{server}/start/");
    
    if (_apiKeys.contains("jwt")) {
        addHeaders("jwt",_apiKeys.find("jwt").value());
    }
    
    
    {
        QString projectPathParam("{");
        projectPathParam.append("project").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "project", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"project"+pathSuffix : pathPrefix;
        fullPath.replace(projectPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(project)));
    }
    
    {
        QString r_namespacePathParam("{");
        r_namespacePathParam.append("namespace").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "namespace", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"namespace"+pathSuffix : pathPrefix;
        fullPath.replace(r_namespacePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(r_namespace)));
    }
    
    {
        QString serverPathParam("{");
        serverPathParam.append("server").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "server", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"server"+pathSuffix : pathPrefix;
        fullPath.replace(serverPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(server)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIProjectsApi::projectsServersStartCallback);
    connect(this, &OAIProjectsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIProjectsApi::projectsServersStartCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT projectsServersStartSignal();
        Q_EMIT projectsServersStartSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT projectsServersStartSignalE(error_type, error_str);
        Q_EMIT projectsServersStartSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT projectsServersStartSignalError(error_type, error_str);
        Q_EMIT projectsServersStartSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIProjectsApi::projectsServersStatsDelete(const QString &server, const QString &project, const QString &r_namespace, const QString &id) {
    QString fullPath = QString(_serverConfigs["projectsServersStatsDelete"][_serverIndices.value("projectsServersStatsDelete")].URL()+"/v1/{namespace}/projects/{project}/servers/{server}/stats/{id}/");
    
    if (_apiKeys.contains("jwt")) {
        addHeaders("jwt",_apiKeys.find("jwt").value());
    }
    
    
    {
        QString serverPathParam("{");
        serverPathParam.append("server").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "server", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"server"+pathSuffix : pathPrefix;
        fullPath.replace(serverPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(server)));
    }
    
    {
        QString projectPathParam("{");
        projectPathParam.append("project").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "project", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"project"+pathSuffix : pathPrefix;
        fullPath.replace(projectPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(project)));
    }
    
    {
        QString r_namespacePathParam("{");
        r_namespacePathParam.append("namespace").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "namespace", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"namespace"+pathSuffix : pathPrefix;
        fullPath.replace(r_namespacePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(r_namespace)));
    }
    
    {
        QString idPathParam("{");
        idPathParam.append("id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"id"+pathSuffix : pathPrefix;
        fullPath.replace(idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIProjectsApi::projectsServersStatsDeleteCallback);
    connect(this, &OAIProjectsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIProjectsApi::projectsServersStatsDeleteCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT projectsServersStatsDeleteSignal();
        Q_EMIT projectsServersStatsDeleteSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT projectsServersStatsDeleteSignalE(error_type, error_str);
        Q_EMIT projectsServersStatsDeleteSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT projectsServersStatsDeleteSignalError(error_type, error_str);
        Q_EMIT projectsServersStatsDeleteSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIProjectsApi::projectsServersStatsRead(const QString &server, const QString &project, const QString &r_namespace, const QString &id) {
    QString fullPath = QString(_serverConfigs["projectsServersStatsRead"][_serverIndices.value("projectsServersStatsRead")].URL()+"/v1/{namespace}/projects/{project}/servers/{server}/stats/{id}/");
    
    if (_apiKeys.contains("jwt")) {
        addHeaders("jwt",_apiKeys.find("jwt").value());
    }
    
    
    {
        QString serverPathParam("{");
        serverPathParam.append("server").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "server", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"server"+pathSuffix : pathPrefix;
        fullPath.replace(serverPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(server)));
    }
    
    {
        QString projectPathParam("{");
        projectPathParam.append("project").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "project", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"project"+pathSuffix : pathPrefix;
        fullPath.replace(projectPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(project)));
    }
    
    {
        QString r_namespacePathParam("{");
        r_namespacePathParam.append("namespace").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "namespace", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"namespace"+pathSuffix : pathPrefix;
        fullPath.replace(r_namespacePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(r_namespace)));
    }
    
    {
        QString idPathParam("{");
        idPathParam.append("id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"id"+pathSuffix : pathPrefix;
        fullPath.replace(idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIProjectsApi::projectsServersStatsReadCallback);
    connect(this, &OAIProjectsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIProjectsApi::projectsServersStatsReadCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIServerStatistics output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT projectsServersStatsReadSignal(output);
        Q_EMIT projectsServersStatsReadSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT projectsServersStatsReadSignalE(output, error_type, error_str);
        Q_EMIT projectsServersStatsReadSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT projectsServersStatsReadSignalError(output, error_type, error_str);
        Q_EMIT projectsServersStatsReadSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIProjectsApi::projectsServersStatsReplace(const QString &server, const QString &project, const QString &r_namespace, const QString &id, const ::OpenAPI::OptionalParam<OAIServerStatisticsData> &serverstats_data) {
    QString fullPath = QString(_serverConfigs["projectsServersStatsReplace"][_serverIndices.value("projectsServersStatsReplace")].URL()+"/v1/{namespace}/projects/{project}/servers/{server}/stats/{id}/");
    
    if (_apiKeys.contains("jwt")) {
        addHeaders("jwt",_apiKeys.find("jwt").value());
    }
    
    
    {
        QString serverPathParam("{");
        serverPathParam.append("server").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "server", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"server"+pathSuffix : pathPrefix;
        fullPath.replace(serverPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(server)));
    }
    
    {
        QString projectPathParam("{");
        projectPathParam.append("project").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "project", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"project"+pathSuffix : pathPrefix;
        fullPath.replace(projectPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(project)));
    }
    
    {
        QString r_namespacePathParam("{");
        r_namespacePathParam.append("namespace").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "namespace", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"namespace"+pathSuffix : pathPrefix;
        fullPath.replace(r_namespacePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(r_namespace)));
    }
    
    {
        QString idPathParam("{");
        idPathParam.append("id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"id"+pathSuffix : pathPrefix;
        fullPath.replace(idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PUT");

    if (serverstats_data.hasValue()){

        
        QByteArray output = serverstats_data.value().asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIProjectsApi::projectsServersStatsReplaceCallback);
    connect(this, &OAIProjectsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIProjectsApi::projectsServersStatsReplaceCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIServerStatistics output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT projectsServersStatsReplaceSignal(output);
        Q_EMIT projectsServersStatsReplaceSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT projectsServersStatsReplaceSignalE(output, error_type, error_str);
        Q_EMIT projectsServersStatsReplaceSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT projectsServersStatsReplaceSignalError(output, error_type, error_str);
        Q_EMIT projectsServersStatsReplaceSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIProjectsApi::projectsServersStatsUpdate(const QString &server, const QString &project, const QString &r_namespace, const QString &id, const ::OpenAPI::OptionalParam<OAIServerStatisticsData> &serverstats_data) {
    QString fullPath = QString(_serverConfigs["projectsServersStatsUpdate"][_serverIndices.value("projectsServersStatsUpdate")].URL()+"/v1/{namespace}/projects/{project}/servers/{server}/stats/{id}/");
    
    if (_apiKeys.contains("jwt")) {
        addHeaders("jwt",_apiKeys.find("jwt").value());
    }
    
    
    {
        QString serverPathParam("{");
        serverPathParam.append("server").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "server", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"server"+pathSuffix : pathPrefix;
        fullPath.replace(serverPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(server)));
    }
    
    {
        QString projectPathParam("{");
        projectPathParam.append("project").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "project", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"project"+pathSuffix : pathPrefix;
        fullPath.replace(projectPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(project)));
    }
    
    {
        QString r_namespacePathParam("{");
        r_namespacePathParam.append("namespace").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "namespace", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"namespace"+pathSuffix : pathPrefix;
        fullPath.replace(r_namespacePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(r_namespace)));
    }
    
    {
        QString idPathParam("{");
        idPathParam.append("id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"id"+pathSuffix : pathPrefix;
        fullPath.replace(idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PATCH");

    if (serverstats_data.hasValue()){

        
        QByteArray output = serverstats_data.value().asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIProjectsApi::projectsServersStatsUpdateCallback);
    connect(this, &OAIProjectsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIProjectsApi::projectsServersStatsUpdateCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIServerStatistics output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT projectsServersStatsUpdateSignal(output);
        Q_EMIT projectsServersStatsUpdateSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT projectsServersStatsUpdateSignalE(output, error_type, error_str);
        Q_EMIT projectsServersStatsUpdateSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT projectsServersStatsUpdateSignalError(output, error_type, error_str);
        Q_EMIT projectsServersStatsUpdateSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIProjectsApi::projectsServersStatuses(const QString &project, const QString &r_namespace) {
    QString fullPath = QString(_serverConfigs["projectsServersStatuses"][_serverIndices.value("projectsServersStatuses")].URL()+"/v1/{namespace}/projects/{project}/servers/statuses/");
    
    if (_apiKeys.contains("jwt")) {
        addHeaders("jwt",_apiKeys.find("jwt").value());
    }
    
    
    {
        QString projectPathParam("{");
        projectPathParam.append("project").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "project", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"project"+pathSuffix : pathPrefix;
        fullPath.replace(projectPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(project)));
    }
    
    {
        QString r_namespacePathParam("{");
        r_namespacePathParam.append("namespace").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "namespace", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"namespace"+pathSuffix : pathPrefix;
        fullPath.replace(r_namespacePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(r_namespace)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIProjectsApi::projectsServersStatusesCallback);
    connect(this, &OAIProjectsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIProjectsApi::projectsServersStatusesCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAIServerStatus> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAIServerStatus val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT projectsServersStatusesSignal(output);
        Q_EMIT projectsServersStatusesSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT projectsServersStatusesSignalE(output, error_type, error_str);
        Q_EMIT projectsServersStatusesSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT projectsServersStatusesSignalError(output, error_type, error_str);
        Q_EMIT projectsServersStatusesSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIProjectsApi::projectsServersStop(const QString &project, const QString &r_namespace, const QString &server) {
    QString fullPath = QString(_serverConfigs["projectsServersStop"][_serverIndices.value("projectsServersStop")].URL()+"/v1/{namespace}/projects/{project}/servers/{server}/stop/");
    
    if (_apiKeys.contains("jwt")) {
        addHeaders("jwt",_apiKeys.find("jwt").value());
    }
    
    
    {
        QString projectPathParam("{");
        projectPathParam.append("project").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "project", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"project"+pathSuffix : pathPrefix;
        fullPath.replace(projectPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(project)));
    }
    
    {
        QString r_namespacePathParam("{");
        r_namespacePathParam.append("namespace").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "namespace", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"namespace"+pathSuffix : pathPrefix;
        fullPath.replace(r_namespacePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(r_namespace)));
    }
    
    {
        QString serverPathParam("{");
        serverPathParam.append("server").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "server", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"server"+pathSuffix : pathPrefix;
        fullPath.replace(serverPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(server)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIProjectsApi::projectsServersStopCallback);
    connect(this, &OAIProjectsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIProjectsApi::projectsServersStopCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT projectsServersStopSignal();
        Q_EMIT projectsServersStopSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT projectsServersStopSignalE(error_type, error_str);
        Q_EMIT projectsServersStopSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT projectsServersStopSignalError(error_type, error_str);
        Q_EMIT projectsServersStopSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIProjectsApi::projectsServersUpdate(const QString &project, const QString &r_namespace, const QString &server, const ::OpenAPI::OptionalParam<OAIServerData> &server_data) {
    QString fullPath = QString(_serverConfigs["projectsServersUpdate"][_serverIndices.value("projectsServersUpdate")].URL()+"/v1/{namespace}/projects/{project}/servers/{server}/");
    
    if (_apiKeys.contains("jwt")) {
        addHeaders("jwt",_apiKeys.find("jwt").value());
    }
    
    
    {
        QString projectPathParam("{");
        projectPathParam.append("project").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "project", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"project"+pathSuffix : pathPrefix;
        fullPath.replace(projectPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(project)));
    }
    
    {
        QString r_namespacePathParam("{");
        r_namespacePathParam.append("namespace").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "namespace", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"namespace"+pathSuffix : pathPrefix;
        fullPath.replace(r_namespacePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(r_namespace)));
    }
    
    {
        QString serverPathParam("{");
        serverPathParam.append("server").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "server", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"server"+pathSuffix : pathPrefix;
        fullPath.replace(serverPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(server)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PATCH");

    if (server_data.hasValue()){

        
        QByteArray output = server_data.value().asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIProjectsApi::projectsServersUpdateCallback);
    connect(this, &OAIProjectsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIProjectsApi::projectsServersUpdateCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIServer output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT projectsServersUpdateSignal(output);
        Q_EMIT projectsServersUpdateSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT projectsServersUpdateSignalE(output, error_type, error_str);
        Q_EMIT projectsServersUpdateSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT projectsServersUpdateSignalError(output, error_type, error_str);
        Q_EMIT projectsServersUpdateSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIProjectsApi::projectsUpdate(const QString &r_namespace, const QString &project, const ::OpenAPI::OptionalParam<OAIProjectData> &project_data) {
    QString fullPath = QString(_serverConfigs["projectsUpdate"][_serverIndices.value("projectsUpdate")].URL()+"/v1/{namespace}/projects/{project}/");
    
    if (_apiKeys.contains("jwt")) {
        addHeaders("jwt",_apiKeys.find("jwt").value());
    }
    
    
    {
        QString r_namespacePathParam("{");
        r_namespacePathParam.append("namespace").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "namespace", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"namespace"+pathSuffix : pathPrefix;
        fullPath.replace(r_namespacePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(r_namespace)));
    }
    
    {
        QString projectPathParam("{");
        projectPathParam.append("project").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "project", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"project"+pathSuffix : pathPrefix;
        fullPath.replace(projectPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(project)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PATCH");

    if (project_data.hasValue()){

        
        QByteArray output = project_data.value().asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIProjectsApi::projectsUpdateCallback);
    connect(this, &OAIProjectsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIProjectsApi::projectsUpdateCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIProject output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT projectsUpdateSignal(output);
        Q_EMIT projectsUpdateSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT projectsUpdateSignalE(output, error_type, error_str);
        Q_EMIT projectsUpdateSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT projectsUpdateSignalError(output, error_type, error_str);
        Q_EMIT projectsUpdateSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIProjectsApi::serviceTriggerCreate(const QString &server, const QString &project, const QString &r_namespace, const ::OpenAPI::OptionalParam<OAIServerActionData> &server_action) {
    QString fullPath = QString(_serverConfigs["serviceTriggerCreate"][_serverIndices.value("serviceTriggerCreate")].URL()+"/v1/{namespace}/projects/{project}/servers/{server}/triggers/");
    
    if (_apiKeys.contains("jwt")) {
        addHeaders("jwt",_apiKeys.find("jwt").value());
    }
    
    
    {
        QString serverPathParam("{");
        serverPathParam.append("server").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "server", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"server"+pathSuffix : pathPrefix;
        fullPath.replace(serverPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(server)));
    }
    
    {
        QString projectPathParam("{");
        projectPathParam.append("project").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "project", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"project"+pathSuffix : pathPrefix;
        fullPath.replace(projectPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(project)));
    }
    
    {
        QString r_namespacePathParam("{");
        r_namespacePathParam.append("namespace").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "namespace", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"namespace"+pathSuffix : pathPrefix;
        fullPath.replace(r_namespacePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(r_namespace)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (server_action.hasValue()){

        
        QByteArray output = server_action.value().asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIProjectsApi::serviceTriggerCreateCallback);
    connect(this, &OAIProjectsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIProjectsApi::serviceTriggerCreateCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIServerAction output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT serviceTriggerCreateSignal(output);
        Q_EMIT serviceTriggerCreateSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT serviceTriggerCreateSignalE(output, error_type, error_str);
        Q_EMIT serviceTriggerCreateSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT serviceTriggerCreateSignalError(output, error_type, error_str);
        Q_EMIT serviceTriggerCreateSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIProjectsApi::serviceTriggerDelete(const QString &server, const QString &project, const QString &r_namespace, const QString &trigger) {
    QString fullPath = QString(_serverConfigs["serviceTriggerDelete"][_serverIndices.value("serviceTriggerDelete")].URL()+"/v1/{namespace}/projects/{project}/servers/{server}/triggers/{trigger}/");
    
    if (_apiKeys.contains("jwt")) {
        addHeaders("jwt",_apiKeys.find("jwt").value());
    }
    
    
    {
        QString serverPathParam("{");
        serverPathParam.append("server").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "server", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"server"+pathSuffix : pathPrefix;
        fullPath.replace(serverPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(server)));
    }
    
    {
        QString projectPathParam("{");
        projectPathParam.append("project").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "project", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"project"+pathSuffix : pathPrefix;
        fullPath.replace(projectPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(project)));
    }
    
    {
        QString r_namespacePathParam("{");
        r_namespacePathParam.append("namespace").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "namespace", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"namespace"+pathSuffix : pathPrefix;
        fullPath.replace(r_namespacePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(r_namespace)));
    }
    
    {
        QString triggerPathParam("{");
        triggerPathParam.append("trigger").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "trigger", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"trigger"+pathSuffix : pathPrefix;
        fullPath.replace(triggerPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(trigger)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIProjectsApi::serviceTriggerDeleteCallback);
    connect(this, &OAIProjectsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIProjectsApi::serviceTriggerDeleteCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT serviceTriggerDeleteSignal();
        Q_EMIT serviceTriggerDeleteSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT serviceTriggerDeleteSignalE(error_type, error_str);
        Q_EMIT serviceTriggerDeleteSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT serviceTriggerDeleteSignalError(error_type, error_str);
        Q_EMIT serviceTriggerDeleteSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIProjectsApi::serviceTriggerList(const QString &server, const QString &project, const QString &r_namespace, const ::OpenAPI::OptionalParam<QString> &name, const ::OpenAPI::OptionalParam<QString> &limit, const ::OpenAPI::OptionalParam<QString> &offset, const ::OpenAPI::OptionalParam<QString> &ordering) {
    QString fullPath = QString(_serverConfigs["serviceTriggerList"][_serverIndices.value("serviceTriggerList")].URL()+"/v1/{namespace}/projects/{project}/servers/{server}/triggers/");
    
    if (_apiKeys.contains("jwt")) {
        addHeaders("jwt",_apiKeys.find("jwt").value());
    }
    
    
    {
        QString serverPathParam("{");
        serverPathParam.append("server").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "server", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"server"+pathSuffix : pathPrefix;
        fullPath.replace(serverPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(server)));
    }
    
    {
        QString projectPathParam("{");
        projectPathParam.append("project").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "project", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"project"+pathSuffix : pathPrefix;
        fullPath.replace(projectPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(project)));
    }
    
    {
        QString r_namespacePathParam("{");
        r_namespacePathParam.append("namespace").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "namespace", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"namespace"+pathSuffix : pathPrefix;
        fullPath.replace(r_namespacePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(r_namespace)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (name.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "name", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("name")).append(querySuffix).append(QUrl::toPercentEncoding(name.stringValue()));
    }
    if (limit.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "limit", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("limit")).append(querySuffix).append(QUrl::toPercentEncoding(limit.stringValue()));
    }
    if (offset.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "offset", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("offset")).append(querySuffix).append(QUrl::toPercentEncoding(offset.stringValue()));
    }
    if (ordering.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "ordering", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("ordering")).append(querySuffix).append(QUrl::toPercentEncoding(ordering.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIProjectsApi::serviceTriggerListCallback);
    connect(this, &OAIProjectsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIProjectsApi::serviceTriggerListCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAIServerAction> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAIServerAction val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT serviceTriggerListSignal(output);
        Q_EMIT serviceTriggerListSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT serviceTriggerListSignalE(output, error_type, error_str);
        Q_EMIT serviceTriggerListSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT serviceTriggerListSignalError(output, error_type, error_str);
        Q_EMIT serviceTriggerListSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIProjectsApi::serviceTriggerRead(const QString &server, const QString &project, const QString &r_namespace, const QString &trigger) {
    QString fullPath = QString(_serverConfigs["serviceTriggerRead"][_serverIndices.value("serviceTriggerRead")].URL()+"/v1/{namespace}/projects/{project}/servers/{server}/triggers/{trigger}/");
    
    if (_apiKeys.contains("jwt")) {
        addHeaders("jwt",_apiKeys.find("jwt").value());
    }
    
    
    {
        QString serverPathParam("{");
        serverPathParam.append("server").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "server", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"server"+pathSuffix : pathPrefix;
        fullPath.replace(serverPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(server)));
    }
    
    {
        QString projectPathParam("{");
        projectPathParam.append("project").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "project", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"project"+pathSuffix : pathPrefix;
        fullPath.replace(projectPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(project)));
    }
    
    {
        QString r_namespacePathParam("{");
        r_namespacePathParam.append("namespace").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "namespace", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"namespace"+pathSuffix : pathPrefix;
        fullPath.replace(r_namespacePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(r_namespace)));
    }
    
    {
        QString triggerPathParam("{");
        triggerPathParam.append("trigger").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "trigger", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"trigger"+pathSuffix : pathPrefix;
        fullPath.replace(triggerPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(trigger)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIProjectsApi::serviceTriggerReadCallback);
    connect(this, &OAIProjectsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIProjectsApi::serviceTriggerReadCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIServerAction output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT serviceTriggerReadSignal(output);
        Q_EMIT serviceTriggerReadSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT serviceTriggerReadSignalE(output, error_type, error_str);
        Q_EMIT serviceTriggerReadSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT serviceTriggerReadSignalError(output, error_type, error_str);
        Q_EMIT serviceTriggerReadSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIProjectsApi::serviceTriggerReplace(const QString &server, const QString &project, const QString &r_namespace, const QString &trigger, const ::OpenAPI::OptionalParam<OAIServerActionData> &server_action) {
    QString fullPath = QString(_serverConfigs["serviceTriggerReplace"][_serverIndices.value("serviceTriggerReplace")].URL()+"/v1/{namespace}/projects/{project}/servers/{server}/triggers/{trigger}/");
    
    if (_apiKeys.contains("jwt")) {
        addHeaders("jwt",_apiKeys.find("jwt").value());
    }
    
    
    {
        QString serverPathParam("{");
        serverPathParam.append("server").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "server", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"server"+pathSuffix : pathPrefix;
        fullPath.replace(serverPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(server)));
    }
    
    {
        QString projectPathParam("{");
        projectPathParam.append("project").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "project", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"project"+pathSuffix : pathPrefix;
        fullPath.replace(projectPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(project)));
    }
    
    {
        QString r_namespacePathParam("{");
        r_namespacePathParam.append("namespace").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "namespace", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"namespace"+pathSuffix : pathPrefix;
        fullPath.replace(r_namespacePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(r_namespace)));
    }
    
    {
        QString triggerPathParam("{");
        triggerPathParam.append("trigger").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "trigger", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"trigger"+pathSuffix : pathPrefix;
        fullPath.replace(triggerPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(trigger)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PUT");

    if (server_action.hasValue()){

        
        QByteArray output = server_action.value().asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIProjectsApi::serviceTriggerReplaceCallback);
    connect(this, &OAIProjectsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIProjectsApi::serviceTriggerReplaceCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIServerAction output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT serviceTriggerReplaceSignal(output);
        Q_EMIT serviceTriggerReplaceSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT serviceTriggerReplaceSignalE(output, error_type, error_str);
        Q_EMIT serviceTriggerReplaceSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT serviceTriggerReplaceSignalError(output, error_type, error_str);
        Q_EMIT serviceTriggerReplaceSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIProjectsApi::serviceTriggerUpdate(const QString &server, const QString &project, const QString &r_namespace, const QString &trigger, const ::OpenAPI::OptionalParam<OAIServerActionData> &server_action) {
    QString fullPath = QString(_serverConfigs["serviceTriggerUpdate"][_serverIndices.value("serviceTriggerUpdate")].URL()+"/v1/{namespace}/projects/{project}/servers/{server}/triggers/{trigger}/");
    
    if (_apiKeys.contains("jwt")) {
        addHeaders("jwt",_apiKeys.find("jwt").value());
    }
    
    
    {
        QString serverPathParam("{");
        serverPathParam.append("server").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "server", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"server"+pathSuffix : pathPrefix;
        fullPath.replace(serverPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(server)));
    }
    
    {
        QString projectPathParam("{");
        projectPathParam.append("project").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "project", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"project"+pathSuffix : pathPrefix;
        fullPath.replace(projectPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(project)));
    }
    
    {
        QString r_namespacePathParam("{");
        r_namespacePathParam.append("namespace").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "namespace", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"namespace"+pathSuffix : pathPrefix;
        fullPath.replace(r_namespacePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(r_namespace)));
    }
    
    {
        QString triggerPathParam("{");
        triggerPathParam.append("trigger").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "trigger", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"trigger"+pathSuffix : pathPrefix;
        fullPath.replace(triggerPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(trigger)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PATCH");

    if (server_action.hasValue()){

        
        QByteArray output = server_action.value().asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIProjectsApi::serviceTriggerUpdateCallback);
    connect(this, &OAIProjectsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIProjectsApi::serviceTriggerUpdateCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIServerAction output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT serviceTriggerUpdateSignal(output);
        Q_EMIT serviceTriggerUpdateSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT serviceTriggerUpdateSignalE(output, error_type, error_str);
        Q_EMIT serviceTriggerUpdateSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT serviceTriggerUpdateSignalError(output, error_type, error_str);
        Q_EMIT serviceTriggerUpdateSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIProjectsApi::tokenAvailable(){

    oauthToken token;
    switch (_OauthMethod) {
    case 1: //implicit flow
        token = _implicitFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _implicitFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 2: //authorization flow
        token = _authFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _authFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 3: //client credentials flow
        token = _credentialFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 4: //resource owner password flow
        token = _passwordFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    default:
        qDebug() << "No Oauth method set!";
        break;
    }
}
} // namespace OpenAPI
