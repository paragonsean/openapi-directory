/**
 * IllumiDesk
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISshTunnel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISshTunnel::OAISshTunnel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISshTunnel::OAISshTunnel() {
    this->initializeModel();
}

OAISshTunnel::~OAISshTunnel() {}

void OAISshTunnel::initializeModel() {

    m_endpoint_isSet = false;
    m_endpoint_isValid = false;

    m_host_isSet = false;
    m_host_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_local_port_isSet = false;
    m_local_port_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_remote_port_isSet = false;
    m_remote_port_isValid = false;

    m_server_isSet = false;
    m_server_isValid = false;

    m_username_isSet = false;
    m_username_isValid = false;
}

void OAISshTunnel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISshTunnel::fromJsonObject(QJsonObject json) {

    m_endpoint_isValid = ::OpenAPI::fromJsonValue(m_endpoint, json[QString("endpoint")]);
    m_endpoint_isSet = !json[QString("endpoint")].isNull() && m_endpoint_isValid;

    m_host_isValid = ::OpenAPI::fromJsonValue(m_host, json[QString("host")]);
    m_host_isSet = !json[QString("host")].isNull() && m_host_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_local_port_isValid = ::OpenAPI::fromJsonValue(m_local_port, json[QString("local_port")]);
    m_local_port_isSet = !json[QString("local_port")].isNull() && m_local_port_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_remote_port_isValid = ::OpenAPI::fromJsonValue(m_remote_port, json[QString("remote_port")]);
    m_remote_port_isSet = !json[QString("remote_port")].isNull() && m_remote_port_isValid;

    m_server_isValid = ::OpenAPI::fromJsonValue(m_server, json[QString("server")]);
    m_server_isSet = !json[QString("server")].isNull() && m_server_isValid;

    m_username_isValid = ::OpenAPI::fromJsonValue(m_username, json[QString("username")]);
    m_username_isSet = !json[QString("username")].isNull() && m_username_isValid;
}

QString OAISshTunnel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISshTunnel::asJsonObject() const {
    QJsonObject obj;
    if (m_endpoint_isSet) {
        obj.insert(QString("endpoint"), ::OpenAPI::toJsonValue(m_endpoint));
    }
    if (m_host_isSet) {
        obj.insert(QString("host"), ::OpenAPI::toJsonValue(m_host));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_local_port_isSet) {
        obj.insert(QString("local_port"), ::OpenAPI::toJsonValue(m_local_port));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_remote_port_isSet) {
        obj.insert(QString("remote_port"), ::OpenAPI::toJsonValue(m_remote_port));
    }
    if (m_server_isSet) {
        obj.insert(QString("server"), ::OpenAPI::toJsonValue(m_server));
    }
    if (m_username_isSet) {
        obj.insert(QString("username"), ::OpenAPI::toJsonValue(m_username));
    }
    return obj;
}

QString OAISshTunnel::getEndpoint() const {
    return m_endpoint;
}
void OAISshTunnel::setEndpoint(const QString &endpoint) {
    m_endpoint = endpoint;
    m_endpoint_isSet = true;
}

bool OAISshTunnel::is_endpoint_Set() const{
    return m_endpoint_isSet;
}

bool OAISshTunnel::is_endpoint_Valid() const{
    return m_endpoint_isValid;
}

QString OAISshTunnel::getHost() const {
    return m_host;
}
void OAISshTunnel::setHost(const QString &host) {
    m_host = host;
    m_host_isSet = true;
}

bool OAISshTunnel::is_host_Set() const{
    return m_host_isSet;
}

bool OAISshTunnel::is_host_Valid() const{
    return m_host_isValid;
}

QString OAISshTunnel::getId() const {
    return m_id;
}
void OAISshTunnel::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAISshTunnel::is_id_Set() const{
    return m_id_isSet;
}

bool OAISshTunnel::is_id_Valid() const{
    return m_id_isValid;
}

qint32 OAISshTunnel::getLocalPort() const {
    return m_local_port;
}
void OAISshTunnel::setLocalPort(const qint32 &local_port) {
    m_local_port = local_port;
    m_local_port_isSet = true;
}

bool OAISshTunnel::is_local_port_Set() const{
    return m_local_port_isSet;
}

bool OAISshTunnel::is_local_port_Valid() const{
    return m_local_port_isValid;
}

QString OAISshTunnel::getName() const {
    return m_name;
}
void OAISshTunnel::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAISshTunnel::is_name_Set() const{
    return m_name_isSet;
}

bool OAISshTunnel::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAISshTunnel::getRemotePort() const {
    return m_remote_port;
}
void OAISshTunnel::setRemotePort(const qint32 &remote_port) {
    m_remote_port = remote_port;
    m_remote_port_isSet = true;
}

bool OAISshTunnel::is_remote_port_Set() const{
    return m_remote_port_isSet;
}

bool OAISshTunnel::is_remote_port_Valid() const{
    return m_remote_port_isValid;
}

QString OAISshTunnel::getServer() const {
    return m_server;
}
void OAISshTunnel::setServer(const QString &server) {
    m_server = server;
    m_server_isSet = true;
}

bool OAISshTunnel::is_server_Set() const{
    return m_server_isSet;
}

bool OAISshTunnel::is_server_Valid() const{
    return m_server_isValid;
}

QString OAISshTunnel::getUsername() const {
    return m_username;
}
void OAISshTunnel::setUsername(const QString &username) {
    m_username = username;
    m_username_isSet = true;
}

bool OAISshTunnel::is_username_Set() const{
    return m_username_isSet;
}

bool OAISshTunnel::is_username_Valid() const{
    return m_username_isValid;
}

bool OAISshTunnel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_endpoint_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_host_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_local_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_remote_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_server_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_username_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISshTunnel::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_endpoint_isValid && m_host_isValid && m_local_port_isValid && m_name_isValid && m_remote_port_isValid && m_username_isValid && true;
}

} // namespace OpenAPI
