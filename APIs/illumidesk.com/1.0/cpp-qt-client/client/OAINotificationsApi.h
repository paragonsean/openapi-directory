/**
 * IllumiDesk
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAINotificationsApi_H
#define OAI_OAINotificationsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAINotFound.h"
#include "OAINotification.h"
#include "OAINotificationError.h"
#include "OAINotificationListUpdateData.h"
#include "OAINotificationSettings.h"
#include "OAINotificationSettingsData.h"
#include "OAINotificationSettingsError.h"
#include "OAINotificationUpdateData.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAINotificationsApi : public QObject {
    Q_OBJECT

public:
    OAINotificationsApi(const int timeOut = 0);
    ~OAINotificationsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  r_namespace QString [required]
    * @param[in]  notification_id QString [required]
    */
    virtual void notificationRead(const QString &r_namespace, const QString &notification_id);

    /**
    * @param[in]  r_namespace QString [required]
    * @param[in]  notification_settings_data OAINotificationSettingsData [required]
    */
    virtual void notificationSettingsCreate(const QString &r_namespace, const OAINotificationSettingsData &notification_settings_data);

    /**
    * @param[in]  r_namespace QString [required]
    * @param[in]  entity QString [required]
    * @param[in]  notification_settings_data OAINotificationSettingsData [optional]
    */
    virtual void notificationSettingsEntityCreate(const QString &r_namespace, const QString &entity, const ::OpenAPI::OptionalParam<OAINotificationSettingsData> &notification_settings_data = ::OpenAPI::OptionalParam<OAINotificationSettingsData>());

    /**
    * @param[in]  r_namespace QString [required]
    * @param[in]  entity QString [required]
    */
    virtual void notificationSettingsEntityRead(const QString &r_namespace, const QString &entity);

    /**
    * @param[in]  r_namespace QString [required]
    * @param[in]  entity QString [required]
    * @param[in]  notification_settings_data OAINotificationSettingsData [optional]
    */
    virtual void notificationSettingsEntityUpdate(const QString &r_namespace, const QString &entity, const ::OpenAPI::OptionalParam<OAINotificationSettingsData> &notification_settings_data = ::OpenAPI::OptionalParam<OAINotificationSettingsData>());

    /**
    * @param[in]  r_namespace QString [required]
    */
    virtual void notificationSettingsRead(const QString &r_namespace);

    /**
    * @param[in]  r_namespace QString [required]
    * @param[in]  notification_settings_data OAINotificationSettingsData [optional]
    */
    virtual void notificationSettingsUpdate(const QString &r_namespace, const ::OpenAPI::OptionalParam<OAINotificationSettingsData> &notification_settings_data = ::OpenAPI::OptionalParam<OAINotificationSettingsData>());

    /**
    * @param[in]  r_namespace QString [required]
    * @param[in]  notification_id QString [required]
    * @param[in]  notification_data OAINotificationUpdateData [optional]
    */
    virtual void notificationUpdate(const QString &r_namespace, const QString &notification_id, const ::OpenAPI::OptionalParam<OAINotificationUpdateData> &notification_data = ::OpenAPI::OptionalParam<OAINotificationUpdateData>());

    /**
    * @param[in]  r_namespace QString [required]
    * @param[in]  limit QString [optional]
    * @param[in]  offset QString [optional]
    * @param[in]  ordering QString [optional]
    * @param[in]  read bool [optional]
    */
    virtual void notificationsList(const QString &r_namespace, const ::OpenAPI::OptionalParam<QString> &limit = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &offset = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ordering = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &read = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  r_namespace QString [required]
    * @param[in]  entity QString [required]
    * @param[in]  limit QString [optional]
    * @param[in]  offset QString [optional]
    * @param[in]  ordering QString [optional]
    * @param[in]  read bool [optional]
    */
    virtual void notificationsListEntity(const QString &r_namespace, const QString &entity, const ::OpenAPI::OptionalParam<QString> &limit = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &offset = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ordering = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &read = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  r_namespace QString [required]
    * @param[in]  entity QString [required]
    * @param[in]  notification_data OAINotificationListUpdateData [required]
    */
    virtual void notificationsUpdateEntityList(const QString &r_namespace, const QString &entity, const OAINotificationListUpdateData &notification_data);

    /**
    * @param[in]  r_namespace QString [required]
    * @param[in]  notification_data OAINotificationListUpdateData [required]
    */
    virtual void notificationsUpdateList(const QString &r_namespace, const OAINotificationListUpdateData &notification_data);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void notificationReadCallback(OAIHttpRequestWorker *worker);
    void notificationSettingsCreateCallback(OAIHttpRequestWorker *worker);
    void notificationSettingsEntityCreateCallback(OAIHttpRequestWorker *worker);
    void notificationSettingsEntityReadCallback(OAIHttpRequestWorker *worker);
    void notificationSettingsEntityUpdateCallback(OAIHttpRequestWorker *worker);
    void notificationSettingsReadCallback(OAIHttpRequestWorker *worker);
    void notificationSettingsUpdateCallback(OAIHttpRequestWorker *worker);
    void notificationUpdateCallback(OAIHttpRequestWorker *worker);
    void notificationsListCallback(OAIHttpRequestWorker *worker);
    void notificationsListEntityCallback(OAIHttpRequestWorker *worker);
    void notificationsUpdateEntityListCallback(OAIHttpRequestWorker *worker);
    void notificationsUpdateListCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void notificationReadSignal(OAINotification summary);
    void notificationSettingsCreateSignal(OAINotificationSettings summary);
    void notificationSettingsEntityCreateSignal(OAINotificationSettings summary);
    void notificationSettingsEntityReadSignal(QList<OAINotificationSettings> summary);
    void notificationSettingsEntityUpdateSignal(OAINotificationSettings summary);
    void notificationSettingsReadSignal(QList<OAINotificationSettings> summary);
    void notificationSettingsUpdateSignal(OAINotificationSettings summary);
    void notificationUpdateSignal(OAINotification summary);
    void notificationsListSignal(QList<OAINotification> summary);
    void notificationsListEntitySignal(QList<OAINotification> summary);
    void notificationsUpdateEntityListSignal(OAINotification summary);
    void notificationsUpdateListSignal(OAINotification summary);


    void notificationReadSignalFull(OAIHttpRequestWorker *worker, OAINotification summary);
    void notificationSettingsCreateSignalFull(OAIHttpRequestWorker *worker, OAINotificationSettings summary);
    void notificationSettingsEntityCreateSignalFull(OAIHttpRequestWorker *worker, OAINotificationSettings summary);
    void notificationSettingsEntityReadSignalFull(OAIHttpRequestWorker *worker, QList<OAINotificationSettings> summary);
    void notificationSettingsEntityUpdateSignalFull(OAIHttpRequestWorker *worker, OAINotificationSettings summary);
    void notificationSettingsReadSignalFull(OAIHttpRequestWorker *worker, QList<OAINotificationSettings> summary);
    void notificationSettingsUpdateSignalFull(OAIHttpRequestWorker *worker, OAINotificationSettings summary);
    void notificationUpdateSignalFull(OAIHttpRequestWorker *worker, OAINotification summary);
    void notificationsListSignalFull(OAIHttpRequestWorker *worker, QList<OAINotification> summary);
    void notificationsListEntitySignalFull(OAIHttpRequestWorker *worker, QList<OAINotification> summary);
    void notificationsUpdateEntityListSignalFull(OAIHttpRequestWorker *worker, OAINotification summary);
    void notificationsUpdateListSignalFull(OAIHttpRequestWorker *worker, OAINotification summary);

    Q_DECL_DEPRECATED_X("Use notificationReadSignalError() instead")
    void notificationReadSignalE(OAINotification summary, QNetworkReply::NetworkError error_type, QString error_str);
    void notificationReadSignalError(OAINotification summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notificationSettingsCreateSignalError() instead")
    void notificationSettingsCreateSignalE(OAINotificationSettings summary, QNetworkReply::NetworkError error_type, QString error_str);
    void notificationSettingsCreateSignalError(OAINotificationSettings summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notificationSettingsEntityCreateSignalError() instead")
    void notificationSettingsEntityCreateSignalE(OAINotificationSettings summary, QNetworkReply::NetworkError error_type, QString error_str);
    void notificationSettingsEntityCreateSignalError(OAINotificationSettings summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notificationSettingsEntityReadSignalError() instead")
    void notificationSettingsEntityReadSignalE(QList<OAINotificationSettings> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void notificationSettingsEntityReadSignalError(QList<OAINotificationSettings> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notificationSettingsEntityUpdateSignalError() instead")
    void notificationSettingsEntityUpdateSignalE(OAINotificationSettings summary, QNetworkReply::NetworkError error_type, QString error_str);
    void notificationSettingsEntityUpdateSignalError(OAINotificationSettings summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notificationSettingsReadSignalError() instead")
    void notificationSettingsReadSignalE(QList<OAINotificationSettings> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void notificationSettingsReadSignalError(QList<OAINotificationSettings> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notificationSettingsUpdateSignalError() instead")
    void notificationSettingsUpdateSignalE(OAINotificationSettings summary, QNetworkReply::NetworkError error_type, QString error_str);
    void notificationSettingsUpdateSignalError(OAINotificationSettings summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notificationUpdateSignalError() instead")
    void notificationUpdateSignalE(OAINotification summary, QNetworkReply::NetworkError error_type, QString error_str);
    void notificationUpdateSignalError(OAINotification summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notificationsListSignalError() instead")
    void notificationsListSignalE(QList<OAINotification> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void notificationsListSignalError(QList<OAINotification> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notificationsListEntitySignalError() instead")
    void notificationsListEntitySignalE(QList<OAINotification> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void notificationsListEntitySignalError(QList<OAINotification> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notificationsUpdateEntityListSignalError() instead")
    void notificationsUpdateEntityListSignalE(OAINotification summary, QNetworkReply::NetworkError error_type, QString error_str);
    void notificationsUpdateEntityListSignalError(OAINotification summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notificationsUpdateListSignalError() instead")
    void notificationsUpdateListSignalE(OAINotification summary, QNetworkReply::NetworkError error_type, QString error_str);
    void notificationsUpdateListSignalError(OAINotification summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use notificationReadSignalErrorFull() instead")
    void notificationReadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void notificationReadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notificationSettingsCreateSignalErrorFull() instead")
    void notificationSettingsCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void notificationSettingsCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notificationSettingsEntityCreateSignalErrorFull() instead")
    void notificationSettingsEntityCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void notificationSettingsEntityCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notificationSettingsEntityReadSignalErrorFull() instead")
    void notificationSettingsEntityReadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void notificationSettingsEntityReadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notificationSettingsEntityUpdateSignalErrorFull() instead")
    void notificationSettingsEntityUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void notificationSettingsEntityUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notificationSettingsReadSignalErrorFull() instead")
    void notificationSettingsReadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void notificationSettingsReadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notificationSettingsUpdateSignalErrorFull() instead")
    void notificationSettingsUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void notificationSettingsUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notificationUpdateSignalErrorFull() instead")
    void notificationUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void notificationUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notificationsListSignalErrorFull() instead")
    void notificationsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void notificationsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notificationsListEntitySignalErrorFull() instead")
    void notificationsListEntitySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void notificationsListEntitySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notificationsUpdateEntityListSignalErrorFull() instead")
    void notificationsUpdateEntityListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void notificationsUpdateEntityListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notificationsUpdateListSignalErrorFull() instead")
    void notificationsUpdateListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void notificationsUpdateListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
