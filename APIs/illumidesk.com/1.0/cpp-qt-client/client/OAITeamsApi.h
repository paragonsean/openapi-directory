/**
 * IllumiDesk
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAITeamsApi_H
#define OAI_OAITeamsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIGroup.h"
#include "OAIGroupData.h"
#include "OAIGroupError.h"
#include "OAIGroupUser.h"
#include "OAIGroupUserError.h"
#include "OAIInvoice.h"
#include "OAIInvoiceItem.h"
#include "OAINotFound.h"
#include "OAISubscription.h"
#include "OAISubscriptionData.h"
#include "OAISubscriptionError.h"
#include "OAITeam.h"
#include "OAITeamData.h"
#include "OAITeamError.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAITeamsApi : public QObject {
    Q_OBJECT

public:
    OAITeamsApi(const int timeOut = 0);
    ~OAITeamsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  team QString [required]
    * @param[in]  invoice_id QString [required]
    * @param[in]  limit QString [optional]
    * @param[in]  offset QString [optional]
    * @param[in]  ordering QString [optional]
    */
    virtual void teamsBillingInvoiceItemsList(const QString &team, const QString &invoice_id, const ::OpenAPI::OptionalParam<QString> &limit = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &offset = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ordering = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  team QString [required]
    * @param[in]  invoice_id QString [required]
    * @param[in]  id QString [required]
    */
    virtual void teamsBillingInvoiceItemsRead(const QString &team, const QString &invoice_id, const QString &id);

    /**
    * @param[in]  team QString [required]
    * @param[in]  limit QString [optional]
    * @param[in]  offset QString [optional]
    */
    virtual void teamsBillingInvoicesList(const QString &team, const ::OpenAPI::OptionalParam<QString> &limit = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &offset = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  team QString [required]
    * @param[in]  id QString [required]
    */
    virtual void teamsBillingInvoicesRead(const QString &team, const QString &id);

    /**
    * @param[in]  team QString [required]
    * @param[in]  subscription_data OAISubscriptionData [optional]
    */
    virtual void teamsBillingSubscriptionsCreate(const QString &team, const ::OpenAPI::OptionalParam<OAISubscriptionData> &subscription_data = ::OpenAPI::OptionalParam<OAISubscriptionData>());

    /**
    * @param[in]  team QString [required]
    * @param[in]  id QString [required]
    */
    virtual void teamsBillingSubscriptionsDelete(const QString &team, const QString &id);

    /**
    * @param[in]  team QString [required]
    * @param[in]  limit QString [optional]
    * @param[in]  offset QString [optional]
    * @param[in]  ordering QString [optional]
    */
    virtual void teamsBillingSubscriptionsList(const QString &team, const ::OpenAPI::OptionalParam<QString> &limit = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &offset = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ordering = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  team QString [required]
    * @param[in]  id QString [required]
    */
    virtual void teamsBillingSubscriptionsRead(const QString &team, const QString &id);

    /**
    * @param[in]  team_data OAITeamData [optional]
    */
    virtual void teamsCreate(const ::OpenAPI::OptionalParam<OAITeamData> &team_data = ::OpenAPI::OptionalParam<OAITeamData>());

    /**
    * @param[in]  team QString [required]
    */
    virtual void teamsDelete(const QString &team);

    /**
    * @param[in]  team QString [required]
    * @param[in]  group QString [required]
    */
    virtual void teamsGroupsAddToGroup(const QString &team, const QString &group);

    /**
    * @param[in]  team QString [required]
    * @param[in]  group QString [required]
    */
    virtual void teamsGroupsDelete(const QString &team, const QString &group);

    /**
    * @param[in]  team QString [required]
    * @param[in]  limit QString [optional]
    * @param[in]  offset QString [optional]
    */
    virtual void teamsGroupsList(const QString &team, const ::OpenAPI::OptionalParam<QString> &limit = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &offset = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  team QString [required]
    * @param[in]  group QString [required]
    */
    virtual void teamsGroupsRead(const QString &team, const QString &group);

    /**
    * @param[in]  team QString [required]
    * @param[in]  group QString [required]
    */
    virtual void teamsGroupsRemoveFromGroup(const QString &team, const QString &group);

    /**
    * @param[in]  team QString [required]
    * @param[in]  group QString [required]
    * @param[in]  group_data OAIGroupData [optional]
    */
    virtual void teamsGroupsReplace(const QString &team, const QString &group, const ::OpenAPI::OptionalParam<OAIGroupData> &group_data = ::OpenAPI::OptionalParam<OAIGroupData>());

    /**
    * @param[in]  team QString [required]
    * @param[in]  group QString [required]
    * @param[in]  group_data OAIGroupData [optional]
    */
    virtual void teamsGroupsUpdate(const QString &team, const QString &group, const ::OpenAPI::OptionalParam<OAIGroupData> &group_data = ::OpenAPI::OptionalParam<OAIGroupData>());

    /**
    * @param[in]  limit QString [optional]
    * @param[in]  offset QString [optional]
    */
    virtual void teamsList(const ::OpenAPI::OptionalParam<QString> &limit = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &offset = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  team QString [required]
    */
    virtual void teamsRead(const QString &team);

    /**
    * @param[in]  team QString [required]
    * @param[in]  team_data OAITeamData [optional]
    */
    virtual void teamsReplace(const QString &team, const ::OpenAPI::OptionalParam<OAITeamData> &team_data = ::OpenAPI::OptionalParam<OAITeamData>());

    /**
    * @param[in]  team QString [required]
    * @param[in]  team_data OAITeamData [optional]
    */
    virtual void teamsUpdate(const QString &team, const ::OpenAPI::OptionalParam<OAITeamData> &team_data = ::OpenAPI::OptionalParam<OAITeamData>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void teamsBillingInvoiceItemsListCallback(OAIHttpRequestWorker *worker);
    void teamsBillingInvoiceItemsReadCallback(OAIHttpRequestWorker *worker);
    void teamsBillingInvoicesListCallback(OAIHttpRequestWorker *worker);
    void teamsBillingInvoicesReadCallback(OAIHttpRequestWorker *worker);
    void teamsBillingSubscriptionsCreateCallback(OAIHttpRequestWorker *worker);
    void teamsBillingSubscriptionsDeleteCallback(OAIHttpRequestWorker *worker);
    void teamsBillingSubscriptionsListCallback(OAIHttpRequestWorker *worker);
    void teamsBillingSubscriptionsReadCallback(OAIHttpRequestWorker *worker);
    void teamsCreateCallback(OAIHttpRequestWorker *worker);
    void teamsDeleteCallback(OAIHttpRequestWorker *worker);
    void teamsGroupsAddToGroupCallback(OAIHttpRequestWorker *worker);
    void teamsGroupsDeleteCallback(OAIHttpRequestWorker *worker);
    void teamsGroupsListCallback(OAIHttpRequestWorker *worker);
    void teamsGroupsReadCallback(OAIHttpRequestWorker *worker);
    void teamsGroupsRemoveFromGroupCallback(OAIHttpRequestWorker *worker);
    void teamsGroupsReplaceCallback(OAIHttpRequestWorker *worker);
    void teamsGroupsUpdateCallback(OAIHttpRequestWorker *worker);
    void teamsListCallback(OAIHttpRequestWorker *worker);
    void teamsReadCallback(OAIHttpRequestWorker *worker);
    void teamsReplaceCallback(OAIHttpRequestWorker *worker);
    void teamsUpdateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void teamsBillingInvoiceItemsListSignal(QList<OAIInvoiceItem> summary);
    void teamsBillingInvoiceItemsReadSignal(OAIInvoiceItem summary);
    void teamsBillingInvoicesListSignal(QList<OAIInvoice> summary);
    void teamsBillingInvoicesReadSignal(OAIInvoice summary);
    void teamsBillingSubscriptionsCreateSignal(OAISubscription summary);
    void teamsBillingSubscriptionsDeleteSignal();
    void teamsBillingSubscriptionsListSignal(QList<OAISubscription> summary);
    void teamsBillingSubscriptionsReadSignal(OAISubscription summary);
    void teamsCreateSignal(OAITeam summary);
    void teamsDeleteSignal();
    void teamsGroupsAddToGroupSignal(OAIGroupUser summary);
    void teamsGroupsDeleteSignal();
    void teamsGroupsListSignal(QList<OAIGroup> summary);
    void teamsGroupsReadSignal(OAIGroup summary);
    void teamsGroupsRemoveFromGroupSignal();
    void teamsGroupsReplaceSignal(OAIGroup summary);
    void teamsGroupsUpdateSignal(OAIGroup summary);
    void teamsListSignal(QList<OAITeam> summary);
    void teamsReadSignal(OAITeam summary);
    void teamsReplaceSignal(OAITeam summary);
    void teamsUpdateSignal(OAITeam summary);


    void teamsBillingInvoiceItemsListSignalFull(OAIHttpRequestWorker *worker, QList<OAIInvoiceItem> summary);
    void teamsBillingInvoiceItemsReadSignalFull(OAIHttpRequestWorker *worker, OAIInvoiceItem summary);
    void teamsBillingInvoicesListSignalFull(OAIHttpRequestWorker *worker, QList<OAIInvoice> summary);
    void teamsBillingInvoicesReadSignalFull(OAIHttpRequestWorker *worker, OAIInvoice summary);
    void teamsBillingSubscriptionsCreateSignalFull(OAIHttpRequestWorker *worker, OAISubscription summary);
    void teamsBillingSubscriptionsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void teamsBillingSubscriptionsListSignalFull(OAIHttpRequestWorker *worker, QList<OAISubscription> summary);
    void teamsBillingSubscriptionsReadSignalFull(OAIHttpRequestWorker *worker, OAISubscription summary);
    void teamsCreateSignalFull(OAIHttpRequestWorker *worker, OAITeam summary);
    void teamsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void teamsGroupsAddToGroupSignalFull(OAIHttpRequestWorker *worker, OAIGroupUser summary);
    void teamsGroupsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void teamsGroupsListSignalFull(OAIHttpRequestWorker *worker, QList<OAIGroup> summary);
    void teamsGroupsReadSignalFull(OAIHttpRequestWorker *worker, OAIGroup summary);
    void teamsGroupsRemoveFromGroupSignalFull(OAIHttpRequestWorker *worker);
    void teamsGroupsReplaceSignalFull(OAIHttpRequestWorker *worker, OAIGroup summary);
    void teamsGroupsUpdateSignalFull(OAIHttpRequestWorker *worker, OAIGroup summary);
    void teamsListSignalFull(OAIHttpRequestWorker *worker, QList<OAITeam> summary);
    void teamsReadSignalFull(OAIHttpRequestWorker *worker, OAITeam summary);
    void teamsReplaceSignalFull(OAIHttpRequestWorker *worker, OAITeam summary);
    void teamsUpdateSignalFull(OAIHttpRequestWorker *worker, OAITeam summary);

    Q_DECL_DEPRECATED_X("Use teamsBillingInvoiceItemsListSignalError() instead")
    void teamsBillingInvoiceItemsListSignalE(QList<OAIInvoiceItem> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void teamsBillingInvoiceItemsListSignalError(QList<OAIInvoiceItem> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamsBillingInvoiceItemsReadSignalError() instead")
    void teamsBillingInvoiceItemsReadSignalE(OAIInvoiceItem summary, QNetworkReply::NetworkError error_type, QString error_str);
    void teamsBillingInvoiceItemsReadSignalError(OAIInvoiceItem summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamsBillingInvoicesListSignalError() instead")
    void teamsBillingInvoicesListSignalE(QList<OAIInvoice> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void teamsBillingInvoicesListSignalError(QList<OAIInvoice> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamsBillingInvoicesReadSignalError() instead")
    void teamsBillingInvoicesReadSignalE(OAIInvoice summary, QNetworkReply::NetworkError error_type, QString error_str);
    void teamsBillingInvoicesReadSignalError(OAIInvoice summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamsBillingSubscriptionsCreateSignalError() instead")
    void teamsBillingSubscriptionsCreateSignalE(OAISubscription summary, QNetworkReply::NetworkError error_type, QString error_str);
    void teamsBillingSubscriptionsCreateSignalError(OAISubscription summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamsBillingSubscriptionsDeleteSignalError() instead")
    void teamsBillingSubscriptionsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void teamsBillingSubscriptionsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamsBillingSubscriptionsListSignalError() instead")
    void teamsBillingSubscriptionsListSignalE(QList<OAISubscription> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void teamsBillingSubscriptionsListSignalError(QList<OAISubscription> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamsBillingSubscriptionsReadSignalError() instead")
    void teamsBillingSubscriptionsReadSignalE(OAISubscription summary, QNetworkReply::NetworkError error_type, QString error_str);
    void teamsBillingSubscriptionsReadSignalError(OAISubscription summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamsCreateSignalError() instead")
    void teamsCreateSignalE(OAITeam summary, QNetworkReply::NetworkError error_type, QString error_str);
    void teamsCreateSignalError(OAITeam summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamsDeleteSignalError() instead")
    void teamsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void teamsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamsGroupsAddToGroupSignalError() instead")
    void teamsGroupsAddToGroupSignalE(OAIGroupUser summary, QNetworkReply::NetworkError error_type, QString error_str);
    void teamsGroupsAddToGroupSignalError(OAIGroupUser summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamsGroupsDeleteSignalError() instead")
    void teamsGroupsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void teamsGroupsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamsGroupsListSignalError() instead")
    void teamsGroupsListSignalE(QList<OAIGroup> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void teamsGroupsListSignalError(QList<OAIGroup> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamsGroupsReadSignalError() instead")
    void teamsGroupsReadSignalE(OAIGroup summary, QNetworkReply::NetworkError error_type, QString error_str);
    void teamsGroupsReadSignalError(OAIGroup summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamsGroupsRemoveFromGroupSignalError() instead")
    void teamsGroupsRemoveFromGroupSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void teamsGroupsRemoveFromGroupSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamsGroupsReplaceSignalError() instead")
    void teamsGroupsReplaceSignalE(OAIGroup summary, QNetworkReply::NetworkError error_type, QString error_str);
    void teamsGroupsReplaceSignalError(OAIGroup summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamsGroupsUpdateSignalError() instead")
    void teamsGroupsUpdateSignalE(OAIGroup summary, QNetworkReply::NetworkError error_type, QString error_str);
    void teamsGroupsUpdateSignalError(OAIGroup summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamsListSignalError() instead")
    void teamsListSignalE(QList<OAITeam> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void teamsListSignalError(QList<OAITeam> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamsReadSignalError() instead")
    void teamsReadSignalE(OAITeam summary, QNetworkReply::NetworkError error_type, QString error_str);
    void teamsReadSignalError(OAITeam summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamsReplaceSignalError() instead")
    void teamsReplaceSignalE(OAITeam summary, QNetworkReply::NetworkError error_type, QString error_str);
    void teamsReplaceSignalError(OAITeam summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamsUpdateSignalError() instead")
    void teamsUpdateSignalE(OAITeam summary, QNetworkReply::NetworkError error_type, QString error_str);
    void teamsUpdateSignalError(OAITeam summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use teamsBillingInvoiceItemsListSignalErrorFull() instead")
    void teamsBillingInvoiceItemsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teamsBillingInvoiceItemsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamsBillingInvoiceItemsReadSignalErrorFull() instead")
    void teamsBillingInvoiceItemsReadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teamsBillingInvoiceItemsReadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamsBillingInvoicesListSignalErrorFull() instead")
    void teamsBillingInvoicesListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teamsBillingInvoicesListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamsBillingInvoicesReadSignalErrorFull() instead")
    void teamsBillingInvoicesReadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teamsBillingInvoicesReadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamsBillingSubscriptionsCreateSignalErrorFull() instead")
    void teamsBillingSubscriptionsCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teamsBillingSubscriptionsCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamsBillingSubscriptionsDeleteSignalErrorFull() instead")
    void teamsBillingSubscriptionsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teamsBillingSubscriptionsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamsBillingSubscriptionsListSignalErrorFull() instead")
    void teamsBillingSubscriptionsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teamsBillingSubscriptionsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamsBillingSubscriptionsReadSignalErrorFull() instead")
    void teamsBillingSubscriptionsReadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teamsBillingSubscriptionsReadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamsCreateSignalErrorFull() instead")
    void teamsCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teamsCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamsDeleteSignalErrorFull() instead")
    void teamsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teamsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamsGroupsAddToGroupSignalErrorFull() instead")
    void teamsGroupsAddToGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teamsGroupsAddToGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamsGroupsDeleteSignalErrorFull() instead")
    void teamsGroupsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teamsGroupsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamsGroupsListSignalErrorFull() instead")
    void teamsGroupsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teamsGroupsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamsGroupsReadSignalErrorFull() instead")
    void teamsGroupsReadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teamsGroupsReadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamsGroupsRemoveFromGroupSignalErrorFull() instead")
    void teamsGroupsRemoveFromGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teamsGroupsRemoveFromGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamsGroupsReplaceSignalErrorFull() instead")
    void teamsGroupsReplaceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teamsGroupsReplaceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamsGroupsUpdateSignalErrorFull() instead")
    void teamsGroupsUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teamsGroupsUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamsListSignalErrorFull() instead")
    void teamsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teamsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamsReadSignalErrorFull() instead")
    void teamsReadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teamsReadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamsReplaceSignalErrorFull() instead")
    void teamsReplaceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teamsReplaceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamsUpdateSignalErrorFull() instead")
    void teamsUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teamsUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
