/**
 * IllumiDesk
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAction.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAction::OAIAction(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAction::OAIAction() {
    this->initializeModel();
}

OAIAction::~OAIAction() {}

void OAIAction::initializeModel() {

    m_action_isSet = false;
    m_action_isValid = false;

    m_action_name_isSet = false;
    m_action_name_isValid = false;

    m_can_be_cancelled_isSet = false;
    m_can_be_cancelled_isValid = false;

    m_can_be_retried_isSet = false;
    m_can_be_retried_isValid = false;

    m_end_date_isSet = false;
    m_end_date_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_ip_isSet = false;
    m_ip_isValid = false;

    m_is_user_action_isSet = false;
    m_is_user_action_isValid = false;

    m_method_isSet = false;
    m_method_isValid = false;

    m_object_isSet = false;
    m_object_isValid = false;

    m_path_isSet = false;
    m_path_isValid = false;

    m_payload_isSet = false;
    m_payload_isValid = false;

    m_resource_uri_isSet = false;
    m_resource_uri_isValid = false;

    m_start_date_isSet = false;
    m_start_date_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;

    m_user_agent_isSet = false;
    m_user_agent_isValid = false;
}

void OAIAction::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAction::fromJsonObject(QJsonObject json) {

    m_action_isValid = ::OpenAPI::fromJsonValue(m_action, json[QString("action")]);
    m_action_isSet = !json[QString("action")].isNull() && m_action_isValid;

    m_action_name_isValid = ::OpenAPI::fromJsonValue(m_action_name, json[QString("action_name")]);
    m_action_name_isSet = !json[QString("action_name")].isNull() && m_action_name_isValid;

    m_can_be_cancelled_isValid = ::OpenAPI::fromJsonValue(m_can_be_cancelled, json[QString("can_be_cancelled")]);
    m_can_be_cancelled_isSet = !json[QString("can_be_cancelled")].isNull() && m_can_be_cancelled_isValid;

    m_can_be_retried_isValid = ::OpenAPI::fromJsonValue(m_can_be_retried, json[QString("can_be_retried")]);
    m_can_be_retried_isSet = !json[QString("can_be_retried")].isNull() && m_can_be_retried_isValid;

    m_end_date_isValid = ::OpenAPI::fromJsonValue(m_end_date, json[QString("end_date")]);
    m_end_date_isSet = !json[QString("end_date")].isNull() && m_end_date_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_ip_isValid = ::OpenAPI::fromJsonValue(m_ip, json[QString("ip")]);
    m_ip_isSet = !json[QString("ip")].isNull() && m_ip_isValid;

    m_is_user_action_isValid = ::OpenAPI::fromJsonValue(m_is_user_action, json[QString("is_user_action")]);
    m_is_user_action_isSet = !json[QString("is_user_action")].isNull() && m_is_user_action_isValid;

    m_method_isValid = ::OpenAPI::fromJsonValue(m_method, json[QString("method")]);
    m_method_isSet = !json[QString("method")].isNull() && m_method_isValid;

    m_object_isValid = ::OpenAPI::fromJsonValue(m_object, json[QString("object")]);
    m_object_isSet = !json[QString("object")].isNull() && m_object_isValid;

    m_path_isValid = ::OpenAPI::fromJsonValue(m_path, json[QString("path")]);
    m_path_isSet = !json[QString("path")].isNull() && m_path_isValid;

    m_payload_isValid = ::OpenAPI::fromJsonValue(m_payload, json[QString("payload")]);
    m_payload_isSet = !json[QString("payload")].isNull() && m_payload_isValid;

    m_resource_uri_isValid = ::OpenAPI::fromJsonValue(m_resource_uri, json[QString("resource_uri")]);
    m_resource_uri_isSet = !json[QString("resource_uri")].isNull() && m_resource_uri_isValid;

    m_start_date_isValid = ::OpenAPI::fromJsonValue(m_start_date, json[QString("start_date")]);
    m_start_date_isSet = !json[QString("start_date")].isNull() && m_start_date_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;

    m_user_agent_isValid = ::OpenAPI::fromJsonValue(m_user_agent, json[QString("user_agent")]);
    m_user_agent_isSet = !json[QString("user_agent")].isNull() && m_user_agent_isValid;
}

QString OAIAction::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAction::asJsonObject() const {
    QJsonObject obj;
    if (m_action_isSet) {
        obj.insert(QString("action"), ::OpenAPI::toJsonValue(m_action));
    }
    if (m_action_name_isSet) {
        obj.insert(QString("action_name"), ::OpenAPI::toJsonValue(m_action_name));
    }
    if (m_can_be_cancelled_isSet) {
        obj.insert(QString("can_be_cancelled"), ::OpenAPI::toJsonValue(m_can_be_cancelled));
    }
    if (m_can_be_retried_isSet) {
        obj.insert(QString("can_be_retried"), ::OpenAPI::toJsonValue(m_can_be_retried));
    }
    if (m_end_date_isSet) {
        obj.insert(QString("end_date"), ::OpenAPI::toJsonValue(m_end_date));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_ip_isSet) {
        obj.insert(QString("ip"), ::OpenAPI::toJsonValue(m_ip));
    }
    if (m_is_user_action_isSet) {
        obj.insert(QString("is_user_action"), ::OpenAPI::toJsonValue(m_is_user_action));
    }
    if (m_method_isSet) {
        obj.insert(QString("method"), ::OpenAPI::toJsonValue(m_method));
    }
    if (m_object_isSet) {
        obj.insert(QString("object"), ::OpenAPI::toJsonValue(m_object));
    }
    if (m_path_isSet) {
        obj.insert(QString("path"), ::OpenAPI::toJsonValue(m_path));
    }
    if (m_payload_isSet) {
        obj.insert(QString("payload"), ::OpenAPI::toJsonValue(m_payload));
    }
    if (m_resource_uri_isSet) {
        obj.insert(QString("resource_uri"), ::OpenAPI::toJsonValue(m_resource_uri));
    }
    if (m_start_date_isSet) {
        obj.insert(QString("start_date"), ::OpenAPI::toJsonValue(m_start_date));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_user_isSet) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    if (m_user_agent_isSet) {
        obj.insert(QString("user_agent"), ::OpenAPI::toJsonValue(m_user_agent));
    }
    return obj;
}

QString OAIAction::getAction() const {
    return m_action;
}
void OAIAction::setAction(const QString &action) {
    m_action = action;
    m_action_isSet = true;
}

bool OAIAction::is_action_Set() const{
    return m_action_isSet;
}

bool OAIAction::is_action_Valid() const{
    return m_action_isValid;
}

QString OAIAction::getActionName() const {
    return m_action_name;
}
void OAIAction::setActionName(const QString &action_name) {
    m_action_name = action_name;
    m_action_name_isSet = true;
}

bool OAIAction::is_action_name_Set() const{
    return m_action_name_isSet;
}

bool OAIAction::is_action_name_Valid() const{
    return m_action_name_isValid;
}

bool OAIAction::isCanBeCancelled() const {
    return m_can_be_cancelled;
}
void OAIAction::setCanBeCancelled(const bool &can_be_cancelled) {
    m_can_be_cancelled = can_be_cancelled;
    m_can_be_cancelled_isSet = true;
}

bool OAIAction::is_can_be_cancelled_Set() const{
    return m_can_be_cancelled_isSet;
}

bool OAIAction::is_can_be_cancelled_Valid() const{
    return m_can_be_cancelled_isValid;
}

bool OAIAction::isCanBeRetried() const {
    return m_can_be_retried;
}
void OAIAction::setCanBeRetried(const bool &can_be_retried) {
    m_can_be_retried = can_be_retried;
    m_can_be_retried_isSet = true;
}

bool OAIAction::is_can_be_retried_Set() const{
    return m_can_be_retried_isSet;
}

bool OAIAction::is_can_be_retried_Valid() const{
    return m_can_be_retried_isValid;
}

QString OAIAction::getEndDate() const {
    return m_end_date;
}
void OAIAction::setEndDate(const QString &end_date) {
    m_end_date = end_date;
    m_end_date_isSet = true;
}

bool OAIAction::is_end_date_Set() const{
    return m_end_date_isSet;
}

bool OAIAction::is_end_date_Valid() const{
    return m_end_date_isValid;
}

QString OAIAction::getId() const {
    return m_id;
}
void OAIAction::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIAction::is_id_Set() const{
    return m_id_isSet;
}

bool OAIAction::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIAction::getIp() const {
    return m_ip;
}
void OAIAction::setIp(const QString &ip) {
    m_ip = ip;
    m_ip_isSet = true;
}

bool OAIAction::is_ip_Set() const{
    return m_ip_isSet;
}

bool OAIAction::is_ip_Valid() const{
    return m_ip_isValid;
}

bool OAIAction::isIsUserAction() const {
    return m_is_user_action;
}
void OAIAction::setIsUserAction(const bool &is_user_action) {
    m_is_user_action = is_user_action;
    m_is_user_action_isSet = true;
}

bool OAIAction::is_is_user_action_Set() const{
    return m_is_user_action_isSet;
}

bool OAIAction::is_is_user_action_Valid() const{
    return m_is_user_action_isValid;
}

QString OAIAction::getMethod() const {
    return m_method;
}
void OAIAction::setMethod(const QString &method) {
    m_method = method;
    m_method_isSet = true;
}

bool OAIAction::is_method_Set() const{
    return m_method_isSet;
}

bool OAIAction::is_method_Valid() const{
    return m_method_isValid;
}

QString OAIAction::getObject() const {
    return m_object;
}
void OAIAction::setObject(const QString &object) {
    m_object = object;
    m_object_isSet = true;
}

bool OAIAction::is_object_Set() const{
    return m_object_isSet;
}

bool OAIAction::is_object_Valid() const{
    return m_object_isValid;
}

QString OAIAction::getPath() const {
    return m_path;
}
void OAIAction::setPath(const QString &path) {
    m_path = path;
    m_path_isSet = true;
}

bool OAIAction::is_path_Set() const{
    return m_path_isSet;
}

bool OAIAction::is_path_Valid() const{
    return m_path_isValid;
}

OAIObject OAIAction::getPayload() const {
    return m_payload;
}
void OAIAction::setPayload(const OAIObject &payload) {
    m_payload = payload;
    m_payload_isSet = true;
}

bool OAIAction::is_payload_Set() const{
    return m_payload_isSet;
}

bool OAIAction::is_payload_Valid() const{
    return m_payload_isValid;
}

QString OAIAction::getResourceUri() const {
    return m_resource_uri;
}
void OAIAction::setResourceUri(const QString &resource_uri) {
    m_resource_uri = resource_uri;
    m_resource_uri_isSet = true;
}

bool OAIAction::is_resource_uri_Set() const{
    return m_resource_uri_isSet;
}

bool OAIAction::is_resource_uri_Valid() const{
    return m_resource_uri_isValid;
}

QString OAIAction::getStartDate() const {
    return m_start_date;
}
void OAIAction::setStartDate(const QString &start_date) {
    m_start_date = start_date;
    m_start_date_isSet = true;
}

bool OAIAction::is_start_date_Set() const{
    return m_start_date_isSet;
}

bool OAIAction::is_start_date_Valid() const{
    return m_start_date_isValid;
}

QString OAIAction::getState() const {
    return m_state;
}
void OAIAction::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIAction::is_state_Set() const{
    return m_state_isSet;
}

bool OAIAction::is_state_Valid() const{
    return m_state_isValid;
}

QString OAIAction::getUser() const {
    return m_user;
}
void OAIAction::setUser(const QString &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAIAction::is_user_Set() const{
    return m_user_isSet;
}

bool OAIAction::is_user_Valid() const{
    return m_user_isValid;
}

QString OAIAction::getUserAgent() const {
    return m_user_agent;
}
void OAIAction::setUserAgent(const QString &user_agent) {
    m_user_agent = user_agent;
    m_user_agent_isSet = true;
}

bool OAIAction::is_user_agent_Set() const{
    return m_user_agent_isSet;
}

bool OAIAction::is_user_agent_Valid() const{
    return m_user_agent_isValid;
}

bool OAIAction::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_action_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_action_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_be_cancelled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_be_retried_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_user_action_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_method_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_object_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payload_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_agent_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAction::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_action_isValid && m_method_isValid && m_state_isValid && m_user_agent_isValid && true;
}

} // namespace OpenAPI
