/**
 * IllumiDesk
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEmail.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEmail::OAIEmail(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEmail::OAIEmail() {
    this->initializeModel();
}

OAIEmail::~OAIEmail() {}

void OAIEmail::initializeModel() {

    m_address_isSet = false;
    m_address_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_r_public_isSet = false;
    m_r_public_isValid = false;

    m_unsubscribed_isSet = false;
    m_unsubscribed_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;
}

void OAIEmail::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEmail::fromJsonObject(QJsonObject json) {

    m_address_isValid = ::OpenAPI::fromJsonValue(m_address, json[QString("address")]);
    m_address_isSet = !json[QString("address")].isNull() && m_address_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_r_public_isValid = ::OpenAPI::fromJsonValue(m_r_public, json[QString("public")]);
    m_r_public_isSet = !json[QString("public")].isNull() && m_r_public_isValid;

    m_unsubscribed_isValid = ::OpenAPI::fromJsonValue(m_unsubscribed, json[QString("unsubscribed")]);
    m_unsubscribed_isSet = !json[QString("unsubscribed")].isNull() && m_unsubscribed_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;
}

QString OAIEmail::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEmail::asJsonObject() const {
    QJsonObject obj;
    if (m_address_isSet) {
        obj.insert(QString("address"), ::OpenAPI::toJsonValue(m_address));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_r_public_isSet) {
        obj.insert(QString("public"), ::OpenAPI::toJsonValue(m_r_public));
    }
    if (m_unsubscribed_isSet) {
        obj.insert(QString("unsubscribed"), ::OpenAPI::toJsonValue(m_unsubscribed));
    }
    if (m_user_isSet) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    return obj;
}

QString OAIEmail::getAddress() const {
    return m_address;
}
void OAIEmail::setAddress(const QString &address) {
    m_address = address;
    m_address_isSet = true;
}

bool OAIEmail::is_address_Set() const{
    return m_address_isSet;
}

bool OAIEmail::is_address_Valid() const{
    return m_address_isValid;
}

QString OAIEmail::getId() const {
    return m_id;
}
void OAIEmail::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIEmail::is_id_Set() const{
    return m_id_isSet;
}

bool OAIEmail::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIEmail::isRPublic() const {
    return m_r_public;
}
void OAIEmail::setRPublic(const bool &r_public) {
    m_r_public = r_public;
    m_r_public_isSet = true;
}

bool OAIEmail::is_r_public_Set() const{
    return m_r_public_isSet;
}

bool OAIEmail::is_r_public_Valid() const{
    return m_r_public_isValid;
}

bool OAIEmail::isUnsubscribed() const {
    return m_unsubscribed;
}
void OAIEmail::setUnsubscribed(const bool &unsubscribed) {
    m_unsubscribed = unsubscribed;
    m_unsubscribed_isSet = true;
}

bool OAIEmail::is_unsubscribed_Set() const{
    return m_unsubscribed_isSet;
}

bool OAIEmail::is_unsubscribed_Valid() const{
    return m_unsubscribed_isValid;
}

QString OAIEmail::getUser() const {
    return m_user;
}
void OAIEmail::setUser(const QString &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAIEmail::is_user_Set() const{
    return m_user_isSet;
}

bool OAIEmail::is_user_Valid() const{
    return m_user_isValid;
}

bool OAIEmail::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_public_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unsubscribed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEmail::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_address_isValid && true;
}

} // namespace OpenAPI
