/**
 * IllumiDesk
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIServerStatisticsError.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIServerStatisticsError::OAIServerStatisticsError(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIServerStatisticsError::OAIServerStatisticsError() {
    this->initializeModel();
}

OAIServerStatisticsError::~OAIServerStatisticsError() {}

void OAIServerStatisticsError::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_non_field_errors_isSet = false;
    m_non_field_errors_isValid = false;

    m_size_isSet = false;
    m_size_isValid = false;

    m_start_isSet = false;
    m_start_isValid = false;

    m_stop_isSet = false;
    m_stop_isValid = false;
}

void OAIServerStatisticsError::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIServerStatisticsError::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_non_field_errors_isValid = ::OpenAPI::fromJsonValue(m_non_field_errors, json[QString("non_field_errors")]);
    m_non_field_errors_isSet = !json[QString("non_field_errors")].isNull() && m_non_field_errors_isValid;

    m_size_isValid = ::OpenAPI::fromJsonValue(m_size, json[QString("size")]);
    m_size_isSet = !json[QString("size")].isNull() && m_size_isValid;

    m_start_isValid = ::OpenAPI::fromJsonValue(m_start, json[QString("start")]);
    m_start_isSet = !json[QString("start")].isNull() && m_start_isValid;

    m_stop_isValid = ::OpenAPI::fromJsonValue(m_stop, json[QString("stop")]);
    m_stop_isSet = !json[QString("stop")].isNull() && m_stop_isValid;
}

QString OAIServerStatisticsError::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIServerStatisticsError::asJsonObject() const {
    QJsonObject obj;
    if (m_id.size() > 0) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_non_field_errors.size() > 0) {
        obj.insert(QString("non_field_errors"), ::OpenAPI::toJsonValue(m_non_field_errors));
    }
    if (m_size.size() > 0) {
        obj.insert(QString("size"), ::OpenAPI::toJsonValue(m_size));
    }
    if (m_start.size() > 0) {
        obj.insert(QString("start"), ::OpenAPI::toJsonValue(m_start));
    }
    if (m_stop.size() > 0) {
        obj.insert(QString("stop"), ::OpenAPI::toJsonValue(m_stop));
    }
    return obj;
}

QList<QString> OAIServerStatisticsError::getId() const {
    return m_id;
}
void OAIServerStatisticsError::setId(const QList<QString> &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIServerStatisticsError::is_id_Set() const{
    return m_id_isSet;
}

bool OAIServerStatisticsError::is_id_Valid() const{
    return m_id_isValid;
}

QList<QString> OAIServerStatisticsError::getNonFieldErrors() const {
    return m_non_field_errors;
}
void OAIServerStatisticsError::setNonFieldErrors(const QList<QString> &non_field_errors) {
    m_non_field_errors = non_field_errors;
    m_non_field_errors_isSet = true;
}

bool OAIServerStatisticsError::is_non_field_errors_Set() const{
    return m_non_field_errors_isSet;
}

bool OAIServerStatisticsError::is_non_field_errors_Valid() const{
    return m_non_field_errors_isValid;
}

QList<QString> OAIServerStatisticsError::getSize() const {
    return m_size;
}
void OAIServerStatisticsError::setSize(const QList<QString> &size) {
    m_size = size;
    m_size_isSet = true;
}

bool OAIServerStatisticsError::is_size_Set() const{
    return m_size_isSet;
}

bool OAIServerStatisticsError::is_size_Valid() const{
    return m_size_isValid;
}

QList<QString> OAIServerStatisticsError::getStart() const {
    return m_start;
}
void OAIServerStatisticsError::setStart(const QList<QString> &start) {
    m_start = start;
    m_start_isSet = true;
}

bool OAIServerStatisticsError::is_start_Set() const{
    return m_start_isSet;
}

bool OAIServerStatisticsError::is_start_Valid() const{
    return m_start_isValid;
}

QList<QString> OAIServerStatisticsError::getStop() const {
    return m_stop;
}
void OAIServerStatisticsError::setStop(const QList<QString> &stop) {
    m_stop = stop;
    m_stop_isSet = true;
}

bool OAIServerStatisticsError::is_stop_Set() const{
    return m_stop_isSet;
}

bool OAIServerStatisticsError::is_stop_Valid() const{
    return m_stop_isValid;
}

bool OAIServerStatisticsError::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_non_field_errors.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_size.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_start.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_stop.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIServerStatisticsError::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
