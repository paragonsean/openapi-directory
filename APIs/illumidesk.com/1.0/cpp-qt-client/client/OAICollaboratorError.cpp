/**
 * IllumiDesk
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICollaboratorError.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICollaboratorError::OAICollaboratorError(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICollaboratorError::OAICollaboratorError() {
    this->initializeModel();
}

OAICollaboratorError::~OAICollaboratorError() {}

void OAICollaboratorError::initializeModel() {

    m_email_isSet = false;
    m_email_isValid = false;

    m_first_name_isSet = false;
    m_first_name_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_joined_isSet = false;
    m_joined_isValid = false;

    m_last_name_isSet = false;
    m_last_name_isValid = false;

    m_member_isSet = false;
    m_member_isValid = false;

    m_non_field_errors_isSet = false;
    m_non_field_errors_isValid = false;

    m_owner_isSet = false;
    m_owner_isValid = false;

    m_permissions_isSet = false;
    m_permissions_isValid = false;

    m_username_isSet = false;
    m_username_isValid = false;
}

void OAICollaboratorError::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICollaboratorError::fromJsonObject(QJsonObject json) {

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_first_name_isValid = ::OpenAPI::fromJsonValue(m_first_name, json[QString("first_name")]);
    m_first_name_isSet = !json[QString("first_name")].isNull() && m_first_name_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_joined_isValid = ::OpenAPI::fromJsonValue(m_joined, json[QString("joined")]);
    m_joined_isSet = !json[QString("joined")].isNull() && m_joined_isValid;

    m_last_name_isValid = ::OpenAPI::fromJsonValue(m_last_name, json[QString("last_name")]);
    m_last_name_isSet = !json[QString("last_name")].isNull() && m_last_name_isValid;

    m_member_isValid = ::OpenAPI::fromJsonValue(m_member, json[QString("member")]);
    m_member_isSet = !json[QString("member")].isNull() && m_member_isValid;

    m_non_field_errors_isValid = ::OpenAPI::fromJsonValue(m_non_field_errors, json[QString("non_field_errors")]);
    m_non_field_errors_isSet = !json[QString("non_field_errors")].isNull() && m_non_field_errors_isValid;

    m_owner_isValid = ::OpenAPI::fromJsonValue(m_owner, json[QString("owner")]);
    m_owner_isSet = !json[QString("owner")].isNull() && m_owner_isValid;

    m_permissions_isValid = ::OpenAPI::fromJsonValue(m_permissions, json[QString("permissions")]);
    m_permissions_isSet = !json[QString("permissions")].isNull() && m_permissions_isValid;

    m_username_isValid = ::OpenAPI::fromJsonValue(m_username, json[QString("username")]);
    m_username_isSet = !json[QString("username")].isNull() && m_username_isValid;
}

QString OAICollaboratorError::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICollaboratorError::asJsonObject() const {
    QJsonObject obj;
    if (m_email.size() > 0) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_first_name.size() > 0) {
        obj.insert(QString("first_name"), ::OpenAPI::toJsonValue(m_first_name));
    }
    if (m_id.size() > 0) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_joined.size() > 0) {
        obj.insert(QString("joined"), ::OpenAPI::toJsonValue(m_joined));
    }
    if (m_last_name.size() > 0) {
        obj.insert(QString("last_name"), ::OpenAPI::toJsonValue(m_last_name));
    }
    if (m_member.size() > 0) {
        obj.insert(QString("member"), ::OpenAPI::toJsonValue(m_member));
    }
    if (m_non_field_errors.size() > 0) {
        obj.insert(QString("non_field_errors"), ::OpenAPI::toJsonValue(m_non_field_errors));
    }
    if (m_owner.size() > 0) {
        obj.insert(QString("owner"), ::OpenAPI::toJsonValue(m_owner));
    }
    if (m_permissions.size() > 0) {
        obj.insert(QString("permissions"), ::OpenAPI::toJsonValue(m_permissions));
    }
    if (m_username.size() > 0) {
        obj.insert(QString("username"), ::OpenAPI::toJsonValue(m_username));
    }
    return obj;
}

QList<QString> OAICollaboratorError::getEmail() const {
    return m_email;
}
void OAICollaboratorError::setEmail(const QList<QString> &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAICollaboratorError::is_email_Set() const{
    return m_email_isSet;
}

bool OAICollaboratorError::is_email_Valid() const{
    return m_email_isValid;
}

QList<QString> OAICollaboratorError::getFirstName() const {
    return m_first_name;
}
void OAICollaboratorError::setFirstName(const QList<QString> &first_name) {
    m_first_name = first_name;
    m_first_name_isSet = true;
}

bool OAICollaboratorError::is_first_name_Set() const{
    return m_first_name_isSet;
}

bool OAICollaboratorError::is_first_name_Valid() const{
    return m_first_name_isValid;
}

QList<QString> OAICollaboratorError::getId() const {
    return m_id;
}
void OAICollaboratorError::setId(const QList<QString> &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAICollaboratorError::is_id_Set() const{
    return m_id_isSet;
}

bool OAICollaboratorError::is_id_Valid() const{
    return m_id_isValid;
}

QList<QString> OAICollaboratorError::getJoined() const {
    return m_joined;
}
void OAICollaboratorError::setJoined(const QList<QString> &joined) {
    m_joined = joined;
    m_joined_isSet = true;
}

bool OAICollaboratorError::is_joined_Set() const{
    return m_joined_isSet;
}

bool OAICollaboratorError::is_joined_Valid() const{
    return m_joined_isValid;
}

QList<QString> OAICollaboratorError::getLastName() const {
    return m_last_name;
}
void OAICollaboratorError::setLastName(const QList<QString> &last_name) {
    m_last_name = last_name;
    m_last_name_isSet = true;
}

bool OAICollaboratorError::is_last_name_Set() const{
    return m_last_name_isSet;
}

bool OAICollaboratorError::is_last_name_Valid() const{
    return m_last_name_isValid;
}

QList<QString> OAICollaboratorError::getMember() const {
    return m_member;
}
void OAICollaboratorError::setMember(const QList<QString> &member) {
    m_member = member;
    m_member_isSet = true;
}

bool OAICollaboratorError::is_member_Set() const{
    return m_member_isSet;
}

bool OAICollaboratorError::is_member_Valid() const{
    return m_member_isValid;
}

QList<QString> OAICollaboratorError::getNonFieldErrors() const {
    return m_non_field_errors;
}
void OAICollaboratorError::setNonFieldErrors(const QList<QString> &non_field_errors) {
    m_non_field_errors = non_field_errors;
    m_non_field_errors_isSet = true;
}

bool OAICollaboratorError::is_non_field_errors_Set() const{
    return m_non_field_errors_isSet;
}

bool OAICollaboratorError::is_non_field_errors_Valid() const{
    return m_non_field_errors_isValid;
}

QList<QString> OAICollaboratorError::getOwner() const {
    return m_owner;
}
void OAICollaboratorError::setOwner(const QList<QString> &owner) {
    m_owner = owner;
    m_owner_isSet = true;
}

bool OAICollaboratorError::is_owner_Set() const{
    return m_owner_isSet;
}

bool OAICollaboratorError::is_owner_Valid() const{
    return m_owner_isValid;
}

QList<QString> OAICollaboratorError::getPermissions() const {
    return m_permissions;
}
void OAICollaboratorError::setPermissions(const QList<QString> &permissions) {
    m_permissions = permissions;
    m_permissions_isSet = true;
}

bool OAICollaboratorError::is_permissions_Set() const{
    return m_permissions_isSet;
}

bool OAICollaboratorError::is_permissions_Valid() const{
    return m_permissions_isValid;
}

QList<QString> OAICollaboratorError::getUsername() const {
    return m_username;
}
void OAICollaboratorError::setUsername(const QList<QString> &username) {
    m_username = username;
    m_username_isSet = true;
}

bool OAICollaboratorError::is_username_Set() const{
    return m_username_isSet;
}

bool OAICollaboratorError::is_username_Valid() const{
    return m_username_isValid;
}

bool OAICollaboratorError::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_email.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_name.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_id.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_joined.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_name.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_member.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_non_field_errors.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_permissions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_username.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICollaboratorError::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_member_isValid && m_permissions_isValid && true;
}

} // namespace OpenAPI
