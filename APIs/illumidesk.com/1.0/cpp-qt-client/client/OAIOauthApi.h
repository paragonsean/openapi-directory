/**
 * IllumiDesk
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIOauthApi_H
#define OAI_OAIOauthApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIApplication.h"
#include "OAIApplicationData.h"
#include "OAIApplicationError.h"
#include "OAINotFound.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIOauthApi : public QObject {
    Q_OBJECT

public:
    OAIOauthApi(const int timeOut = 0);
    ~OAIOauthApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  r_namespace QString [required]
    * @param[in]  application_data OAIApplicationData [optional]
    */
    virtual void oauthApplicationCreate(const QString &r_namespace, const ::OpenAPI::OptionalParam<OAIApplicationData> &application_data = ::OpenAPI::OptionalParam<OAIApplicationData>());

    /**
    * @param[in]  r_namespace QString [required]
    * @param[in]  application QString [required]
    */
    virtual void oauthApplicationDelete(const QString &r_namespace, const QString &application);

    /**
    * @param[in]  r_namespace QString [required]
    * @param[in]  application QString [required]
    */
    virtual void oauthApplicationRead(const QString &r_namespace, const QString &application);

    /**
    * @param[in]  r_namespace QString [required]
    * @param[in]  application QString [required]
    * @param[in]  oauth_application_data OAIApplicationData [optional]
    */
    virtual void oauthApplicationReplace(const QString &r_namespace, const QString &application, const ::OpenAPI::OptionalParam<OAIApplicationData> &oauth_application_data = ::OpenAPI::OptionalParam<OAIApplicationData>());

    /**
    * @param[in]  r_namespace QString [required]
    * @param[in]  application QString [required]
    * @param[in]  application_data OAIApplicationData [optional]
    */
    virtual void oauthApplicationUpdate(const QString &r_namespace, const QString &application, const ::OpenAPI::OptionalParam<OAIApplicationData> &application_data = ::OpenAPI::OptionalParam<OAIApplicationData>());

    /**
    * @param[in]  r_namespace QString [required]
    * @param[in]  limit QString [optional]
    * @param[in]  offset QString [optional]
    * @param[in]  ordering QString [optional]
    */
    virtual void oauthApplicationsList(const QString &r_namespace, const ::OpenAPI::OptionalParam<QString> &limit = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &offset = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ordering = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void oauthApplicationCreateCallback(OAIHttpRequestWorker *worker);
    void oauthApplicationDeleteCallback(OAIHttpRequestWorker *worker);
    void oauthApplicationReadCallback(OAIHttpRequestWorker *worker);
    void oauthApplicationReplaceCallback(OAIHttpRequestWorker *worker);
    void oauthApplicationUpdateCallback(OAIHttpRequestWorker *worker);
    void oauthApplicationsListCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void oauthApplicationCreateSignal(OAIApplication summary);
    void oauthApplicationDeleteSignal();
    void oauthApplicationReadSignal(OAIApplication summary);
    void oauthApplicationReplaceSignal(OAIApplication summary);
    void oauthApplicationUpdateSignal(OAIApplication summary);
    void oauthApplicationsListSignal(QList<OAIApplication> summary);


    void oauthApplicationCreateSignalFull(OAIHttpRequestWorker *worker, OAIApplication summary);
    void oauthApplicationDeleteSignalFull(OAIHttpRequestWorker *worker);
    void oauthApplicationReadSignalFull(OAIHttpRequestWorker *worker, OAIApplication summary);
    void oauthApplicationReplaceSignalFull(OAIHttpRequestWorker *worker, OAIApplication summary);
    void oauthApplicationUpdateSignalFull(OAIHttpRequestWorker *worker, OAIApplication summary);
    void oauthApplicationsListSignalFull(OAIHttpRequestWorker *worker, QList<OAIApplication> summary);

    Q_DECL_DEPRECATED_X("Use oauthApplicationCreateSignalError() instead")
    void oauthApplicationCreateSignalE(OAIApplication summary, QNetworkReply::NetworkError error_type, QString error_str);
    void oauthApplicationCreateSignalError(OAIApplication summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use oauthApplicationDeleteSignalError() instead")
    void oauthApplicationDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void oauthApplicationDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use oauthApplicationReadSignalError() instead")
    void oauthApplicationReadSignalE(OAIApplication summary, QNetworkReply::NetworkError error_type, QString error_str);
    void oauthApplicationReadSignalError(OAIApplication summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use oauthApplicationReplaceSignalError() instead")
    void oauthApplicationReplaceSignalE(OAIApplication summary, QNetworkReply::NetworkError error_type, QString error_str);
    void oauthApplicationReplaceSignalError(OAIApplication summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use oauthApplicationUpdateSignalError() instead")
    void oauthApplicationUpdateSignalE(OAIApplication summary, QNetworkReply::NetworkError error_type, QString error_str);
    void oauthApplicationUpdateSignalError(OAIApplication summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use oauthApplicationsListSignalError() instead")
    void oauthApplicationsListSignalE(QList<OAIApplication> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void oauthApplicationsListSignalError(QList<OAIApplication> summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use oauthApplicationCreateSignalErrorFull() instead")
    void oauthApplicationCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void oauthApplicationCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use oauthApplicationDeleteSignalErrorFull() instead")
    void oauthApplicationDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void oauthApplicationDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use oauthApplicationReadSignalErrorFull() instead")
    void oauthApplicationReadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void oauthApplicationReadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use oauthApplicationReplaceSignalErrorFull() instead")
    void oauthApplicationReplaceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void oauthApplicationReplaceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use oauthApplicationUpdateSignalErrorFull() instead")
    void oauthApplicationUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void oauthApplicationUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use oauthApplicationsListSignalErrorFull() instead")
    void oauthApplicationsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void oauthApplicationsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
