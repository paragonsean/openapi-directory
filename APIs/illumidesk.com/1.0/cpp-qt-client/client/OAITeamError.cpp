/**
 * IllumiDesk
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITeamError.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITeamError::OAITeamError(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITeamError::OAITeamError() {
    this->initializeModel();
}

OAITeamError::~OAITeamError() {}

void OAITeamError::initializeModel() {

    m_avatar_isSet = false;
    m_avatar_isValid = false;

    m_avatar_url_isSet = false;
    m_avatar_url_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_non_field_errors_isSet = false;
    m_non_field_errors_isValid = false;

    m_website_isSet = false;
    m_website_isValid = false;
}

void OAITeamError::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITeamError::fromJsonObject(QJsonObject json) {

    m_avatar_isValid = ::OpenAPI::fromJsonValue(m_avatar, json[QString("avatar")]);
    m_avatar_isSet = !json[QString("avatar")].isNull() && m_avatar_isValid;

    m_avatar_url_isValid = ::OpenAPI::fromJsonValue(m_avatar_url, json[QString("avatar_url")]);
    m_avatar_url_isSet = !json[QString("avatar_url")].isNull() && m_avatar_url_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_non_field_errors_isValid = ::OpenAPI::fromJsonValue(m_non_field_errors, json[QString("non_field_errors")]);
    m_non_field_errors_isSet = !json[QString("non_field_errors")].isNull() && m_non_field_errors_isValid;

    m_website_isValid = ::OpenAPI::fromJsonValue(m_website, json[QString("website")]);
    m_website_isSet = !json[QString("website")].isNull() && m_website_isValid;
}

QString OAITeamError::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITeamError::asJsonObject() const {
    QJsonObject obj;
    if (m_avatar.size() > 0) {
        obj.insert(QString("avatar"), ::OpenAPI::toJsonValue(m_avatar));
    }
    if (m_avatar_url.size() > 0) {
        obj.insert(QString("avatar_url"), ::OpenAPI::toJsonValue(m_avatar_url));
    }
    if (m_description.size() > 0) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_id.size() > 0) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_location.size() > 0) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_name.size() > 0) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_non_field_errors.size() > 0) {
        obj.insert(QString("non_field_errors"), ::OpenAPI::toJsonValue(m_non_field_errors));
    }
    if (m_website.size() > 0) {
        obj.insert(QString("website"), ::OpenAPI::toJsonValue(m_website));
    }
    return obj;
}

QList<QString> OAITeamError::getAvatar() const {
    return m_avatar;
}
void OAITeamError::setAvatar(const QList<QString> &avatar) {
    m_avatar = avatar;
    m_avatar_isSet = true;
}

bool OAITeamError::is_avatar_Set() const{
    return m_avatar_isSet;
}

bool OAITeamError::is_avatar_Valid() const{
    return m_avatar_isValid;
}

QList<QString> OAITeamError::getAvatarUrl() const {
    return m_avatar_url;
}
void OAITeamError::setAvatarUrl(const QList<QString> &avatar_url) {
    m_avatar_url = avatar_url;
    m_avatar_url_isSet = true;
}

bool OAITeamError::is_avatar_url_Set() const{
    return m_avatar_url_isSet;
}

bool OAITeamError::is_avatar_url_Valid() const{
    return m_avatar_url_isValid;
}

QList<QString> OAITeamError::getDescription() const {
    return m_description;
}
void OAITeamError::setDescription(const QList<QString> &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAITeamError::is_description_Set() const{
    return m_description_isSet;
}

bool OAITeamError::is_description_Valid() const{
    return m_description_isValid;
}

QList<QString> OAITeamError::getId() const {
    return m_id;
}
void OAITeamError::setId(const QList<QString> &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAITeamError::is_id_Set() const{
    return m_id_isSet;
}

bool OAITeamError::is_id_Valid() const{
    return m_id_isValid;
}

QList<QString> OAITeamError::getLocation() const {
    return m_location;
}
void OAITeamError::setLocation(const QList<QString> &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAITeamError::is_location_Set() const{
    return m_location_isSet;
}

bool OAITeamError::is_location_Valid() const{
    return m_location_isValid;
}

QList<QString> OAITeamError::getName() const {
    return m_name;
}
void OAITeamError::setName(const QList<QString> &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAITeamError::is_name_Set() const{
    return m_name_isSet;
}

bool OAITeamError::is_name_Valid() const{
    return m_name_isValid;
}

QList<QString> OAITeamError::getNonFieldErrors() const {
    return m_non_field_errors;
}
void OAITeamError::setNonFieldErrors(const QList<QString> &non_field_errors) {
    m_non_field_errors = non_field_errors;
    m_non_field_errors_isSet = true;
}

bool OAITeamError::is_non_field_errors_Set() const{
    return m_non_field_errors_isSet;
}

bool OAITeamError::is_non_field_errors_Valid() const{
    return m_non_field_errors_isValid;
}

QList<QString> OAITeamError::getWebsite() const {
    return m_website;
}
void OAITeamError::setWebsite(const QList<QString> &website) {
    m_website = website;
    m_website_isSet = true;
}

bool OAITeamError::is_website_Set() const{
    return m_website_isSet;
}

bool OAITeamError::is_website_Valid() const{
    return m_website_isValid;
}

bool OAITeamError::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_avatar.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_avatar_url.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_description.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_id.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_location.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_non_field_errors.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_website.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITeamError::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
