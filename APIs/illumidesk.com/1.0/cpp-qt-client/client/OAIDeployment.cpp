/**
 * IllumiDesk
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeployment.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeployment::OAIDeployment(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeployment::OAIDeployment() {
    this->initializeModel();
}

OAIDeployment::~OAIDeployment() {}

void OAIDeployment::initializeModel() {

    m_config_isSet = false;
    m_config_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_created_by_isSet = false;
    m_created_by_isValid = false;

    m_framework_isSet = false;
    m_framework_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_project_isSet = false;
    m_project_isValid = false;

    m_runtime_isSet = false;
    m_runtime_isValid = false;
}

void OAIDeployment::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeployment::fromJsonObject(QJsonObject json) {

    m_config_isValid = ::OpenAPI::fromJsonValue(m_config, json[QString("config")]);
    m_config_isSet = !json[QString("config")].isNull() && m_config_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_created_by_isValid = ::OpenAPI::fromJsonValue(m_created_by, json[QString("created_by")]);
    m_created_by_isSet = !json[QString("created_by")].isNull() && m_created_by_isValid;

    m_framework_isValid = ::OpenAPI::fromJsonValue(m_framework, json[QString("framework")]);
    m_framework_isSet = !json[QString("framework")].isNull() && m_framework_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_project_isValid = ::OpenAPI::fromJsonValue(m_project, json[QString("project")]);
    m_project_isSet = !json[QString("project")].isNull() && m_project_isValid;

    m_runtime_isValid = ::OpenAPI::fromJsonValue(m_runtime, json[QString("runtime")]);
    m_runtime_isSet = !json[QString("runtime")].isNull() && m_runtime_isValid;
}

QString OAIDeployment::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeployment::asJsonObject() const {
    QJsonObject obj;
    if (m_config.isSet()) {
        obj.insert(QString("config"), ::OpenAPI::toJsonValue(m_config));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_created_by_isSet) {
        obj.insert(QString("created_by"), ::OpenAPI::toJsonValue(m_created_by));
    }
    if (m_framework_isSet) {
        obj.insert(QString("framework"), ::OpenAPI::toJsonValue(m_framework));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_project_isSet) {
        obj.insert(QString("project"), ::OpenAPI::toJsonValue(m_project));
    }
    if (m_runtime_isSet) {
        obj.insert(QString("runtime"), ::OpenAPI::toJsonValue(m_runtime));
    }
    return obj;
}

OAIDeploymentConfig OAIDeployment::getConfig() const {
    return m_config;
}
void OAIDeployment::setConfig(const OAIDeploymentConfig &config) {
    m_config = config;
    m_config_isSet = true;
}

bool OAIDeployment::is_config_Set() const{
    return m_config_isSet;
}

bool OAIDeployment::is_config_Valid() const{
    return m_config_isValid;
}

QString OAIDeployment::getCreatedAt() const {
    return m_created_at;
}
void OAIDeployment::setCreatedAt(const QString &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIDeployment::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIDeployment::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAIDeployment::getCreatedBy() const {
    return m_created_by;
}
void OAIDeployment::setCreatedBy(const QString &created_by) {
    m_created_by = created_by;
    m_created_by_isSet = true;
}

bool OAIDeployment::is_created_by_Set() const{
    return m_created_by_isSet;
}

bool OAIDeployment::is_created_by_Valid() const{
    return m_created_by_isValid;
}

QString OAIDeployment::getFramework() const {
    return m_framework;
}
void OAIDeployment::setFramework(const QString &framework) {
    m_framework = framework;
    m_framework_isSet = true;
}

bool OAIDeployment::is_framework_Set() const{
    return m_framework_isSet;
}

bool OAIDeployment::is_framework_Valid() const{
    return m_framework_isValid;
}

QString OAIDeployment::getId() const {
    return m_id;
}
void OAIDeployment::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIDeployment::is_id_Set() const{
    return m_id_isSet;
}

bool OAIDeployment::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIDeployment::getName() const {
    return m_name;
}
void OAIDeployment::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIDeployment::is_name_Set() const{
    return m_name_isSet;
}

bool OAIDeployment::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIDeployment::getProject() const {
    return m_project;
}
void OAIDeployment::setProject(const QString &project) {
    m_project = project;
    m_project_isSet = true;
}

bool OAIDeployment::is_project_Set() const{
    return m_project_isSet;
}

bool OAIDeployment::is_project_Valid() const{
    return m_project_isValid;
}

QString OAIDeployment::getRuntime() const {
    return m_runtime;
}
void OAIDeployment::setRuntime(const QString &runtime) {
    m_runtime = runtime;
    m_runtime_isSet = true;
}

bool OAIDeployment::is_runtime_Set() const{
    return m_runtime_isSet;
}

bool OAIDeployment::is_runtime_Valid() const{
    return m_runtime_isValid;
}

bool OAIDeployment::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_framework_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_runtime_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeployment::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
