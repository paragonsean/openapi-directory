/**
 * IllumiDesk
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProject.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProject::OAIProject(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProject::OAIProject() {
    this->initializeModel();
}

OAIProject::~OAIProject() {}

void OAIProject::initializeModel() {

    m_collaborators_isSet = false;
    m_collaborators_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_last_updated_isSet = false;
    m_last_updated_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_owner_isSet = false;
    m_owner_isValid = false;

    m_r_private_isSet = false;
    m_r_private_isValid = false;

    m_team_isSet = false;
    m_team_isValid = false;
}

void OAIProject::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProject::fromJsonObject(QJsonObject json) {

    m_collaborators_isValid = ::OpenAPI::fromJsonValue(m_collaborators, json[QString("collaborators")]);
    m_collaborators_isSet = !json[QString("collaborators")].isNull() && m_collaborators_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_last_updated_isValid = ::OpenAPI::fromJsonValue(m_last_updated, json[QString("last_updated")]);
    m_last_updated_isSet = !json[QString("last_updated")].isNull() && m_last_updated_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_owner_isValid = ::OpenAPI::fromJsonValue(m_owner, json[QString("owner")]);
    m_owner_isSet = !json[QString("owner")].isNull() && m_owner_isValid;

    m_r_private_isValid = ::OpenAPI::fromJsonValue(m_r_private, json[QString("private")]);
    m_r_private_isSet = !json[QString("private")].isNull() && m_r_private_isValid;

    m_team_isValid = ::OpenAPI::fromJsonValue(m_team, json[QString("team")]);
    m_team_isSet = !json[QString("team")].isNull() && m_team_isValid;
}

QString OAIProject::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProject::asJsonObject() const {
    QJsonObject obj;
    if (m_collaborators.size() > 0) {
        obj.insert(QString("collaborators"), ::OpenAPI::toJsonValue(m_collaborators));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_last_updated_isSet) {
        obj.insert(QString("last_updated"), ::OpenAPI::toJsonValue(m_last_updated));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_owner_isSet) {
        obj.insert(QString("owner"), ::OpenAPI::toJsonValue(m_owner));
    }
    if (m_r_private_isSet) {
        obj.insert(QString("private"), ::OpenAPI::toJsonValue(m_r_private));
    }
    if (m_team_isSet) {
        obj.insert(QString("team"), ::OpenAPI::toJsonValue(m_team));
    }
    return obj;
}

QList<QString> OAIProject::getCollaborators() const {
    return m_collaborators;
}
void OAIProject::setCollaborators(const QList<QString> &collaborators) {
    m_collaborators = collaborators;
    m_collaborators_isSet = true;
}

bool OAIProject::is_collaborators_Set() const{
    return m_collaborators_isSet;
}

bool OAIProject::is_collaborators_Valid() const{
    return m_collaborators_isValid;
}

QString OAIProject::getDescription() const {
    return m_description;
}
void OAIProject::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIProject::is_description_Set() const{
    return m_description_isSet;
}

bool OAIProject::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIProject::getId() const {
    return m_id;
}
void OAIProject::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIProject::is_id_Set() const{
    return m_id_isSet;
}

bool OAIProject::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIProject::getLastUpdated() const {
    return m_last_updated;
}
void OAIProject::setLastUpdated(const QString &last_updated) {
    m_last_updated = last_updated;
    m_last_updated_isSet = true;
}

bool OAIProject::is_last_updated_Set() const{
    return m_last_updated_isSet;
}

bool OAIProject::is_last_updated_Valid() const{
    return m_last_updated_isValid;
}

QString OAIProject::getName() const {
    return m_name;
}
void OAIProject::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIProject::is_name_Set() const{
    return m_name_isSet;
}

bool OAIProject::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIProject::getOwner() const {
    return m_owner;
}
void OAIProject::setOwner(const QString &owner) {
    m_owner = owner;
    m_owner_isSet = true;
}

bool OAIProject::is_owner_Set() const{
    return m_owner_isSet;
}

bool OAIProject::is_owner_Valid() const{
    return m_owner_isValid;
}

bool OAIProject::isRPrivate() const {
    return m_r_private;
}
void OAIProject::setRPrivate(const bool &r_private) {
    m_r_private = r_private;
    m_r_private_isSet = true;
}

bool OAIProject::is_r_private_Set() const{
    return m_r_private_isSet;
}

bool OAIProject::is_r_private_Valid() const{
    return m_r_private_isValid;
}

QString OAIProject::getTeam() const {
    return m_team;
}
void OAIProject::setTeam(const QString &team) {
    m_team = team;
    m_team_isSet = true;
}

bool OAIProject::is_team_Set() const{
    return m_team_isSet;
}

bool OAIProject::is_team_Valid() const{
    return m_team_isValid;
}

bool OAIProject::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_collaborators.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_private_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_team_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProject::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && true;
}

} // namespace OpenAPI
