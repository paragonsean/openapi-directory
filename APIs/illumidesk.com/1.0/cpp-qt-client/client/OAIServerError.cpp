/**
 * IllumiDesk
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIServerError.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIServerError::OAIServerError(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIServerError::OAIServerError() {
    this->initializeModel();
}

OAIServerError::~OAIServerError() {}

void OAIServerError::initializeModel() {

    m_config_isSet = false;
    m_config_isValid = false;

    m_connected_isSet = false;
    m_connected_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_endpoint_isSet = false;
    m_endpoint_isValid = false;

    m_host_isSet = false;
    m_host_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_image_name_isSet = false;
    m_image_name_isValid = false;

    m_logs_url_isSet = false;
    m_logs_url_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_non_field_errors_isSet = false;
    m_non_field_errors_isValid = false;

    m_server_size_isSet = false;
    m_server_size_isValid = false;

    m_startup_script_isSet = false;
    m_startup_script_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_status_url_isSet = false;
    m_status_url_isValid = false;
}

void OAIServerError::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIServerError::fromJsonObject(QJsonObject json) {

    m_config_isValid = ::OpenAPI::fromJsonValue(m_config, json[QString("config")]);
    m_config_isSet = !json[QString("config")].isNull() && m_config_isValid;

    m_connected_isValid = ::OpenAPI::fromJsonValue(m_connected, json[QString("connected")]);
    m_connected_isSet = !json[QString("connected")].isNull() && m_connected_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_endpoint_isValid = ::OpenAPI::fromJsonValue(m_endpoint, json[QString("endpoint")]);
    m_endpoint_isSet = !json[QString("endpoint")].isNull() && m_endpoint_isValid;

    m_host_isValid = ::OpenAPI::fromJsonValue(m_host, json[QString("host")]);
    m_host_isSet = !json[QString("host")].isNull() && m_host_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_image_name_isValid = ::OpenAPI::fromJsonValue(m_image_name, json[QString("image_name")]);
    m_image_name_isSet = !json[QString("image_name")].isNull() && m_image_name_isValid;

    m_logs_url_isValid = ::OpenAPI::fromJsonValue(m_logs_url, json[QString("logs_url")]);
    m_logs_url_isSet = !json[QString("logs_url")].isNull() && m_logs_url_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_non_field_errors_isValid = ::OpenAPI::fromJsonValue(m_non_field_errors, json[QString("non_field_errors")]);
    m_non_field_errors_isSet = !json[QString("non_field_errors")].isNull() && m_non_field_errors_isValid;

    m_server_size_isValid = ::OpenAPI::fromJsonValue(m_server_size, json[QString("server_size")]);
    m_server_size_isSet = !json[QString("server_size")].isNull() && m_server_size_isValid;

    m_startup_script_isValid = ::OpenAPI::fromJsonValue(m_startup_script, json[QString("startup_script")]);
    m_startup_script_isSet = !json[QString("startup_script")].isNull() && m_startup_script_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_status_url_isValid = ::OpenAPI::fromJsonValue(m_status_url, json[QString("status_url")]);
    m_status_url_isSet = !json[QString("status_url")].isNull() && m_status_url_isValid;
}

QString OAIServerError::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIServerError::asJsonObject() const {
    QJsonObject obj;
    if (m_config.size() > 0) {
        obj.insert(QString("config"), ::OpenAPI::toJsonValue(m_config));
    }
    if (m_connected.size() > 0) {
        obj.insert(QString("connected"), ::OpenAPI::toJsonValue(m_connected));
    }
    if (m_created_at.size() > 0) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_endpoint.size() > 0) {
        obj.insert(QString("endpoint"), ::OpenAPI::toJsonValue(m_endpoint));
    }
    if (m_host.size() > 0) {
        obj.insert(QString("host"), ::OpenAPI::toJsonValue(m_host));
    }
    if (m_id.size() > 0) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_image_name.size() > 0) {
        obj.insert(QString("image_name"), ::OpenAPI::toJsonValue(m_image_name));
    }
    if (m_logs_url.size() > 0) {
        obj.insert(QString("logs_url"), ::OpenAPI::toJsonValue(m_logs_url));
    }
    if (m_name.size() > 0) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_non_field_errors.size() > 0) {
        obj.insert(QString("non_field_errors"), ::OpenAPI::toJsonValue(m_non_field_errors));
    }
    if (m_server_size.size() > 0) {
        obj.insert(QString("server_size"), ::OpenAPI::toJsonValue(m_server_size));
    }
    if (m_startup_script.size() > 0) {
        obj.insert(QString("startup_script"), ::OpenAPI::toJsonValue(m_startup_script));
    }
    if (m_status.size() > 0) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_status_url.size() > 0) {
        obj.insert(QString("status_url"), ::OpenAPI::toJsonValue(m_status_url));
    }
    return obj;
}

QList<QString> OAIServerError::getConfig() const {
    return m_config;
}
void OAIServerError::setConfig(const QList<QString> &config) {
    m_config = config;
    m_config_isSet = true;
}

bool OAIServerError::is_config_Set() const{
    return m_config_isSet;
}

bool OAIServerError::is_config_Valid() const{
    return m_config_isValid;
}

QList<QString> OAIServerError::getConnected() const {
    return m_connected;
}
void OAIServerError::setConnected(const QList<QString> &connected) {
    m_connected = connected;
    m_connected_isSet = true;
}

bool OAIServerError::is_connected_Set() const{
    return m_connected_isSet;
}

bool OAIServerError::is_connected_Valid() const{
    return m_connected_isValid;
}

QList<QString> OAIServerError::getCreatedAt() const {
    return m_created_at;
}
void OAIServerError::setCreatedAt(const QList<QString> &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIServerError::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIServerError::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QList<QString> OAIServerError::getEndpoint() const {
    return m_endpoint;
}
void OAIServerError::setEndpoint(const QList<QString> &endpoint) {
    m_endpoint = endpoint;
    m_endpoint_isSet = true;
}

bool OAIServerError::is_endpoint_Set() const{
    return m_endpoint_isSet;
}

bool OAIServerError::is_endpoint_Valid() const{
    return m_endpoint_isValid;
}

QList<QString> OAIServerError::getHost() const {
    return m_host;
}
void OAIServerError::setHost(const QList<QString> &host) {
    m_host = host;
    m_host_isSet = true;
}

bool OAIServerError::is_host_Set() const{
    return m_host_isSet;
}

bool OAIServerError::is_host_Valid() const{
    return m_host_isValid;
}

QList<QString> OAIServerError::getId() const {
    return m_id;
}
void OAIServerError::setId(const QList<QString> &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIServerError::is_id_Set() const{
    return m_id_isSet;
}

bool OAIServerError::is_id_Valid() const{
    return m_id_isValid;
}

QList<QString> OAIServerError::getImageName() const {
    return m_image_name;
}
void OAIServerError::setImageName(const QList<QString> &image_name) {
    m_image_name = image_name;
    m_image_name_isSet = true;
}

bool OAIServerError::is_image_name_Set() const{
    return m_image_name_isSet;
}

bool OAIServerError::is_image_name_Valid() const{
    return m_image_name_isValid;
}

QList<QString> OAIServerError::getLogsUrl() const {
    return m_logs_url;
}
void OAIServerError::setLogsUrl(const QList<QString> &logs_url) {
    m_logs_url = logs_url;
    m_logs_url_isSet = true;
}

bool OAIServerError::is_logs_url_Set() const{
    return m_logs_url_isSet;
}

bool OAIServerError::is_logs_url_Valid() const{
    return m_logs_url_isValid;
}

QList<QString> OAIServerError::getName() const {
    return m_name;
}
void OAIServerError::setName(const QList<QString> &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIServerError::is_name_Set() const{
    return m_name_isSet;
}

bool OAIServerError::is_name_Valid() const{
    return m_name_isValid;
}

QList<QString> OAIServerError::getNonFieldErrors() const {
    return m_non_field_errors;
}
void OAIServerError::setNonFieldErrors(const QList<QString> &non_field_errors) {
    m_non_field_errors = non_field_errors;
    m_non_field_errors_isSet = true;
}

bool OAIServerError::is_non_field_errors_Set() const{
    return m_non_field_errors_isSet;
}

bool OAIServerError::is_non_field_errors_Valid() const{
    return m_non_field_errors_isValid;
}

QList<QString> OAIServerError::getServerSize() const {
    return m_server_size;
}
void OAIServerError::setServerSize(const QList<QString> &server_size) {
    m_server_size = server_size;
    m_server_size_isSet = true;
}

bool OAIServerError::is_server_size_Set() const{
    return m_server_size_isSet;
}

bool OAIServerError::is_server_size_Valid() const{
    return m_server_size_isValid;
}

QList<QString> OAIServerError::getStartupScript() const {
    return m_startup_script;
}
void OAIServerError::setStartupScript(const QList<QString> &startup_script) {
    m_startup_script = startup_script;
    m_startup_script_isSet = true;
}

bool OAIServerError::is_startup_script_Set() const{
    return m_startup_script_isSet;
}

bool OAIServerError::is_startup_script_Valid() const{
    return m_startup_script_isValid;
}

QList<QString> OAIServerError::getStatus() const {
    return m_status;
}
void OAIServerError::setStatus(const QList<QString> &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIServerError::is_status_Set() const{
    return m_status_isSet;
}

bool OAIServerError::is_status_Valid() const{
    return m_status_isValid;
}

QList<QString> OAIServerError::getStatusUrl() const {
    return m_status_url;
}
void OAIServerError::setStatusUrl(const QList<QString> &status_url) {
    m_status_url = status_url;
    m_status_url_isSet = true;
}

bool OAIServerError::is_status_url_Set() const{
    return m_status_url_isSet;
}

bool OAIServerError::is_status_url_Valid() const{
    return m_status_url_isValid;
}

bool OAIServerError::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_config.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_connected.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_endpoint.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_host.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_id.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_name.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_logs_url.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_non_field_errors.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_server_size.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_startup_script.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_url.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIServerError::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
