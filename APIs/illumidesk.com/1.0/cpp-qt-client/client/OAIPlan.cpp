/**
 * IllumiDesk
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPlan.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPlan::OAIPlan(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPlan::OAIPlan() {
    this->initializeModel();
}

OAIPlan::~OAIPlan() {}

void OAIPlan::initializeModel() {

    m_amount_isSet = false;
    m_amount_isValid = false;

    m_created_isSet = false;
    m_created_isValid = false;

    m_currency_isSet = false;
    m_currency_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_interval_isSet = false;
    m_interval_isValid = false;

    m_interval_count_isSet = false;
    m_interval_count_isValid = false;

    m_livemode_isSet = false;
    m_livemode_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_statement_descriptor_isSet = false;
    m_statement_descriptor_isValid = false;

    m_stripe_id_isSet = false;
    m_stripe_id_isValid = false;

    m_trial_period_days_isSet = false;
    m_trial_period_days_isValid = false;
}

void OAIPlan::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPlan::fromJsonObject(QJsonObject json) {

    m_amount_isValid = ::OpenAPI::fromJsonValue(m_amount, json[QString("amount")]);
    m_amount_isSet = !json[QString("amount")].isNull() && m_amount_isValid;

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("created")]);
    m_created_isSet = !json[QString("created")].isNull() && m_created_isValid;

    m_currency_isValid = ::OpenAPI::fromJsonValue(m_currency, json[QString("currency")]);
    m_currency_isSet = !json[QString("currency")].isNull() && m_currency_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_interval_isValid = ::OpenAPI::fromJsonValue(m_interval, json[QString("interval")]);
    m_interval_isSet = !json[QString("interval")].isNull() && m_interval_isValid;

    m_interval_count_isValid = ::OpenAPI::fromJsonValue(m_interval_count, json[QString("interval_count")]);
    m_interval_count_isSet = !json[QString("interval_count")].isNull() && m_interval_count_isValid;

    m_livemode_isValid = ::OpenAPI::fromJsonValue(m_livemode, json[QString("livemode")]);
    m_livemode_isSet = !json[QString("livemode")].isNull() && m_livemode_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_statement_descriptor_isValid = ::OpenAPI::fromJsonValue(m_statement_descriptor, json[QString("statement_descriptor")]);
    m_statement_descriptor_isSet = !json[QString("statement_descriptor")].isNull() && m_statement_descriptor_isValid;

    m_stripe_id_isValid = ::OpenAPI::fromJsonValue(m_stripe_id, json[QString("stripe_id")]);
    m_stripe_id_isSet = !json[QString("stripe_id")].isNull() && m_stripe_id_isValid;

    m_trial_period_days_isValid = ::OpenAPI::fromJsonValue(m_trial_period_days, json[QString("trial_period_days")]);
    m_trial_period_days_isSet = !json[QString("trial_period_days")].isNull() && m_trial_period_days_isValid;
}

QString OAIPlan::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPlan::asJsonObject() const {
    QJsonObject obj;
    if (m_amount_isSet) {
        obj.insert(QString("amount"), ::OpenAPI::toJsonValue(m_amount));
    }
    if (m_created_isSet) {
        obj.insert(QString("created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_currency_isSet) {
        obj.insert(QString("currency"), ::OpenAPI::toJsonValue(m_currency));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_interval_isSet) {
        obj.insert(QString("interval"), ::OpenAPI::toJsonValue(m_interval));
    }
    if (m_interval_count_isSet) {
        obj.insert(QString("interval_count"), ::OpenAPI::toJsonValue(m_interval_count));
    }
    if (m_livemode_isSet) {
        obj.insert(QString("livemode"), ::OpenAPI::toJsonValue(m_livemode));
    }
    if (m_metadata_isSet) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_statement_descriptor_isSet) {
        obj.insert(QString("statement_descriptor"), ::OpenAPI::toJsonValue(m_statement_descriptor));
    }
    if (m_stripe_id_isSet) {
        obj.insert(QString("stripe_id"), ::OpenAPI::toJsonValue(m_stripe_id));
    }
    if (m_trial_period_days_isSet) {
        obj.insert(QString("trial_period_days"), ::OpenAPI::toJsonValue(m_trial_period_days));
    }
    return obj;
}

qint32 OAIPlan::getAmount() const {
    return m_amount;
}
void OAIPlan::setAmount(const qint32 &amount) {
    m_amount = amount;
    m_amount_isSet = true;
}

bool OAIPlan::is_amount_Set() const{
    return m_amount_isSet;
}

bool OAIPlan::is_amount_Valid() const{
    return m_amount_isValid;
}

QString OAIPlan::getCreated() const {
    return m_created;
}
void OAIPlan::setCreated(const QString &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAIPlan::is_created_Set() const{
    return m_created_isSet;
}

bool OAIPlan::is_created_Valid() const{
    return m_created_isValid;
}

QString OAIPlan::getCurrency() const {
    return m_currency;
}
void OAIPlan::setCurrency(const QString &currency) {
    m_currency = currency;
    m_currency_isSet = true;
}

bool OAIPlan::is_currency_Set() const{
    return m_currency_isSet;
}

bool OAIPlan::is_currency_Valid() const{
    return m_currency_isValid;
}

QString OAIPlan::getId() const {
    return m_id;
}
void OAIPlan::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIPlan::is_id_Set() const{
    return m_id_isSet;
}

bool OAIPlan::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIPlan::getInterval() const {
    return m_interval;
}
void OAIPlan::setInterval(const QString &interval) {
    m_interval = interval;
    m_interval_isSet = true;
}

bool OAIPlan::is_interval_Set() const{
    return m_interval_isSet;
}

bool OAIPlan::is_interval_Valid() const{
    return m_interval_isValid;
}

qint32 OAIPlan::getIntervalCount() const {
    return m_interval_count;
}
void OAIPlan::setIntervalCount(const qint32 &interval_count) {
    m_interval_count = interval_count;
    m_interval_count_isSet = true;
}

bool OAIPlan::is_interval_count_Set() const{
    return m_interval_count_isSet;
}

bool OAIPlan::is_interval_count_Valid() const{
    return m_interval_count_isValid;
}

bool OAIPlan::isLivemode() const {
    return m_livemode;
}
void OAIPlan::setLivemode(const bool &livemode) {
    m_livemode = livemode;
    m_livemode_isSet = true;
}

bool OAIPlan::is_livemode_Set() const{
    return m_livemode_isSet;
}

bool OAIPlan::is_livemode_Valid() const{
    return m_livemode_isValid;
}

OAIObject OAIPlan::getMetadata() const {
    return m_metadata;
}
void OAIPlan::setMetadata(const OAIObject &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAIPlan::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAIPlan::is_metadata_Valid() const{
    return m_metadata_isValid;
}

QString OAIPlan::getName() const {
    return m_name;
}
void OAIPlan::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIPlan::is_name_Set() const{
    return m_name_isSet;
}

bool OAIPlan::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIPlan::getStatementDescriptor() const {
    return m_statement_descriptor;
}
void OAIPlan::setStatementDescriptor(const QString &statement_descriptor) {
    m_statement_descriptor = statement_descriptor;
    m_statement_descriptor_isSet = true;
}

bool OAIPlan::is_statement_descriptor_Set() const{
    return m_statement_descriptor_isSet;
}

bool OAIPlan::is_statement_descriptor_Valid() const{
    return m_statement_descriptor_isValid;
}

QString OAIPlan::getStripeId() const {
    return m_stripe_id;
}
void OAIPlan::setStripeId(const QString &stripe_id) {
    m_stripe_id = stripe_id;
    m_stripe_id_isSet = true;
}

bool OAIPlan::is_stripe_id_Set() const{
    return m_stripe_id_isSet;
}

bool OAIPlan::is_stripe_id_Valid() const{
    return m_stripe_id_isValid;
}

qint32 OAIPlan::getTrialPeriodDays() const {
    return m_trial_period_days;
}
void OAIPlan::setTrialPeriodDays(const qint32 &trial_period_days) {
    m_trial_period_days = trial_period_days;
    m_trial_period_days_isSet = true;
}

bool OAIPlan::is_trial_period_days_Set() const{
    return m_trial_period_days_isSet;
}

bool OAIPlan::is_trial_period_days_Valid() const{
    return m_trial_period_days_isValid;
}

bool OAIPlan::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_interval_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_interval_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_livemode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_statement_descriptor_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stripe_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_trial_period_days_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPlan::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_amount_isValid && m_interval_isValid && m_interval_count_isValid && m_name_isValid && true;
}

} // namespace OpenAPI
