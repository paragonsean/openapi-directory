/**
 * IllumiDesk
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import NotFound from '../model/NotFound';
import ServerSize from '../model/ServerSize';
import ServerSizeData from '../model/ServerSizeData';
import ServerSizeError from '../model/ServerSizeError';

/**
* Servers service.
* @module api/ServersApi
* @version 1.0
*/
export default class ServersApi {

    /**
    * Constructs a new ServersApi. 
    * @alias module:api/ServersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the serversOptionsResourcesRead operation.
     * @callback module:api/ServersApi~serversOptionsResourcesReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ServerSize} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a server size by id
     * @param {String} size Server size unique identifier expressed as UUID or name.
     * @param {module:api/ServersApi~serversOptionsResourcesReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ServerSize}
     */
    serversOptionsResourcesRead(size, callback) {
      let postBody = null;
      // verify the required parameter 'size' is set
      if (size === undefined || size === null) {
        throw new Error("Missing the required parameter 'size' when calling serversOptionsResourcesRead");
      }

      let pathParams = {
        'size': size
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = ServerSize;
      return this.apiClient.callApi(
        '/v1/servers/options/server-size/{size}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the serversOptionsServerSizeCreate operation.
     * @callback module:api/ServersApi~serversOptionsServerSizeCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ServerSize} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new server size item
     * Only super users with on-premises version have acceess to this endpoint.
     * @param {Object} opts Optional parameters
     * @param {module:model/ServerSizeData} [serversizeData] 
     * @param {module:api/ServersApi~serversOptionsServerSizeCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ServerSize}
     */
    serversOptionsServerSizeCreate(opts, callback) {
      opts = opts || {};
      let postBody = opts['serversizeData'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'text/html'];
      let returnType = ServerSize;
      return this.apiClient.callApi(
        '/v1/servers/options/server-size/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the serversOptionsServerSizeDelete operation.
     * @callback module:api/ServersApi~serversOptionsServerSizeDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a server size by id
     * Only super users with on-premises version have acceess to this endpoint.
     * @param {String} size Server size unique identifier expressed as UUID or name.
     * @param {module:api/ServersApi~serversOptionsServerSizeDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    serversOptionsServerSizeDelete(size, callback) {
      let postBody = null;
      // verify the required parameter 'size' is set
      if (size === undefined || size === null) {
        throw new Error("Missing the required parameter 'size' when calling serversOptionsServerSizeDelete");
      }

      let pathParams = {
        'size': size
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/servers/options/server-size/{size}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the serversOptionsServerSizeReplace operation.
     * @callback module:api/ServersApi~serversOptionsServerSizeReplaceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ServerSize} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Replace a server size by id
     * Only super users with on-premises version have acceess to this endpoint.
     * @param {String} size Server size unique identifier expressed as UUID or name.
     * @param {Object} opts Optional parameters
     * @param {module:model/ServerSizeData} [serversizeData] 
     * @param {module:api/ServersApi~serversOptionsServerSizeReplaceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ServerSize}
     */
    serversOptionsServerSizeReplace(size, opts, callback) {
      opts = opts || {};
      let postBody = opts['serversizeData'];
      // verify the required parameter 'size' is set
      if (size === undefined || size === null) {
        throw new Error("Missing the required parameter 'size' when calling serversOptionsServerSizeReplace");
      }

      let pathParams = {
        'size': size
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'text/html'];
      let returnType = ServerSize;
      return this.apiClient.callApi(
        '/v1/servers/options/server-size/{size}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the serversOptionsServerSizeUpdate operation.
     * @callback module:api/ServersApi~serversOptionsServerSizeUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ServerSize} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a server size by id
     * Only super users with on-premises version have acceess to this endpoint.
     * @param {String} size Server size unique identifier expressed as UUID or name.
     * @param {Object} opts Optional parameters
     * @param {module:model/ServerSizeData} [serversizeData] 
     * @param {module:api/ServersApi~serversOptionsServerSizeUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ServerSize}
     */
    serversOptionsServerSizeUpdate(size, opts, callback) {
      opts = opts || {};
      let postBody = opts['serversizeData'];
      // verify the required parameter 'size' is set
      if (size === undefined || size === null) {
        throw new Error("Missing the required parameter 'size' when calling serversOptionsServerSizeUpdate");
      }

      let pathParams = {
        'size': size
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'text/html'];
      let returnType = ServerSize;
      return this.apiClient.callApi(
        '/v1/servers/options/server-size/{size}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the serversOptionsSizesList operation.
     * @callback module:api/ServersApi~serversOptionsSizesListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ServerSize>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve available server sizes
     * @param {Object} opts Optional parameters
     * @param {String} [limit] Set limit when retrieving items.
     * @param {String} [offset] Offset when retrieving items.
     * @param {String} [ordering] Set order when retrieving items.
     * @param {module:api/ServersApi~serversOptionsSizesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ServerSize>}
     */
    serversOptionsSizesList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset'],
        'ordering': opts['ordering']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = [ServerSize];
      return this.apiClient.callApi(
        '/v1/servers/options/server-size/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
