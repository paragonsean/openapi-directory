/**
 * IllumiDesk
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Card from '../model/Card';
import CardDataPost from '../model/CardDataPost';
import CardDataPutandPatch from '../model/CardDataPutandPatch';
import CardError from '../model/CardError';
import CardUpdateError from '../model/CardUpdateError';
import Invoice from '../model/Invoice';
import InvoiceItem from '../model/InvoiceItem';
import NotFound from '../model/NotFound';
import Plan from '../model/Plan';
import Subscription from '../model/Subscription';
import SubscriptionData from '../model/SubscriptionData';
import SubscriptionError from '../model/SubscriptionError';

/**
* Billing service.
* @module api/BillingApi
* @version 1.0
*/
export default class BillingApi {

    /**
    * Constructs a new BillingApi. 
    * @alias module:api/BillingApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the billingCardsCreate operation.
     * @callback module:api/BillingApi~billingCardsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Card} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create new credit card
     * @param {String} namespace User or team name.
     * @param {Object} opts Optional parameters
     * @param {module:model/CardDataPost} [cardData] 
     * @param {module:api/BillingApi~billingCardsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Card}
     */
    billingCardsCreate(namespace, opts, callback) {
      opts = opts || {};
      let postBody = opts['cardData'];
      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling billingCardsCreate");
      }

      let pathParams = {
        'namespace': namespace
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'text/html'];
      let returnType = Card;
      return this.apiClient.callApi(
        '/v1/{namespace}/billing/cards/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the billingCardsDelete operation.
     * @callback module:api/BillingApi~billingCardsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a credit card
     * @param {String} namespace User or team name.
     * @param {String} id Card unique identifier expressed as UUID.
     * @param {module:api/BillingApi~billingCardsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    billingCardsDelete(namespace, id, callback) {
      let postBody = null;
      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling billingCardsDelete");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling billingCardsDelete");
      }

      let pathParams = {
        'namespace': namespace,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/{namespace}/billing/cards/{id}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the billingCardsList operation.
     * @callback module:api/BillingApi~billingCardsListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Card>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get credit cards
     * @param {String} namespace User or team name.
     * @param {Object} opts Optional parameters
     * @param {String} [limit] Set limit when retrieving credit or debit cards.
     * @param {String} [offset] Set offset when retriving cards.
     * @param {String} [ordering] Order when retrieving cards.
     * @param {module:api/BillingApi~billingCardsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Card>}
     */
    billingCardsList(namespace, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling billingCardsList");
      }

      let pathParams = {
        'namespace': namespace
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset'],
        'ordering': opts['ordering']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = [Card];
      return this.apiClient.callApi(
        '/v1/{namespace}/billing/cards/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the billingCardsRead operation.
     * @callback module:api/BillingApi~billingCardsReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Card} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get credit card by id
     * @param {String} namespace User or team name.
     * @param {String} id User unique identifier expressed as UUID.
     * @param {module:api/BillingApi~billingCardsReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Card}
     */
    billingCardsRead(namespace, id, callback) {
      let postBody = null;
      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling billingCardsRead");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling billingCardsRead");
      }

      let pathParams = {
        'namespace': namespace,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = Card;
      return this.apiClient.callApi(
        '/v1/{namespace}/billing/cards/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the billingCardsReplace operation.
     * @callback module:api/BillingApi~billingCardsReplaceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Card} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Replace a credit card
     * @param {String} namespace User or team name.
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/CardDataPutandPatch} [cardData] 
     * @param {module:api/BillingApi~billingCardsReplaceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Card}
     */
    billingCardsReplace(namespace, id, opts, callback) {
      opts = opts || {};
      let postBody = opts['cardData'];
      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling billingCardsReplace");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling billingCardsReplace");
      }

      let pathParams = {
        'namespace': namespace,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'text/html'];
      let returnType = Card;
      return this.apiClient.callApi(
        '/v1/{namespace}/billing/cards/{id}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the billingCardsUpdate operation.
     * @callback module:api/BillingApi~billingCardsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Card} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a credit card
     * @param {String} namespace User or team name.
     * @param {String} id Card unique identifier.
     * @param {Object} opts Optional parameters
     * @param {module:model/CardDataPutandPatch} [cardData] 
     * @param {module:api/BillingApi~billingCardsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Card}
     */
    billingCardsUpdate(namespace, id, opts, callback) {
      opts = opts || {};
      let postBody = opts['cardData'];
      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling billingCardsUpdate");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling billingCardsUpdate");
      }

      let pathParams = {
        'namespace': namespace,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'text/html'];
      let returnType = Card;
      return this.apiClient.callApi(
        '/v1/{namespace}/billing/cards/{id}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the billingInvoiceItemsList operation.
     * @callback module:api/BillingApi~billingInvoiceItemsListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/InvoiceItem>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get invoice items for a given invoice.
     * @param {String} namespace User or team name.
     * @param {String} invoiceId Invoice id, expressed as UUID.
     * @param {Object} opts Optional parameters
     * @param {String} [limit] Limit when getting items.
     * @param {String} [offset] Offset when getting items.
     * @param {String} [ordering] Ordering when getting items.
     * @param {module:api/BillingApi~billingInvoiceItemsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/InvoiceItem>}
     */
    billingInvoiceItemsList(namespace, invoiceId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling billingInvoiceItemsList");
      }
      // verify the required parameter 'invoiceId' is set
      if (invoiceId === undefined || invoiceId === null) {
        throw new Error("Missing the required parameter 'invoiceId' when calling billingInvoiceItemsList");
      }

      let pathParams = {
        'namespace': namespace,
        'invoice_id': invoiceId
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset'],
        'ordering': opts['ordering']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = [InvoiceItem];
      return this.apiClient.callApi(
        '/v1/{namespace}/billing/invoices/{invoice_id}/invoice-items/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the billingInvoiceItemsRead operation.
     * @callback module:api/BillingApi~billingInvoiceItemsReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InvoiceItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a specific InvoiceItem.
     * @param {String} namespace User or team name.
     * @param {String} invoiceId Invoice id, expressed as UUID.
     * @param {String} id InvoiceItem id, expressed as UUID.
     * @param {module:api/BillingApi~billingInvoiceItemsReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InvoiceItem}
     */
    billingInvoiceItemsRead(namespace, invoiceId, id, callback) {
      let postBody = null;
      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling billingInvoiceItemsRead");
      }
      // verify the required parameter 'invoiceId' is set
      if (invoiceId === undefined || invoiceId === null) {
        throw new Error("Missing the required parameter 'invoiceId' when calling billingInvoiceItemsRead");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling billingInvoiceItemsRead");
      }

      let pathParams = {
        'namespace': namespace,
        'invoice_id': invoiceId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = InvoiceItem;
      return this.apiClient.callApi(
        '/v1/{namespace}/billing/invoices/{invoice_id}/invoice-items/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the billingInvoicesList operation.
     * @callback module:api/BillingApi~billingInvoicesListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Invoice>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get invoices
     * @param {String} namespace User or team name.
     * @param {Object} opts Optional parameters
     * @param {String} [limit] Limit when getting items.
     * @param {String} [offset] Offset when getting items.
     * @param {String} [ordering] Ordering when getting items.
     * @param {module:api/BillingApi~billingInvoicesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Invoice>}
     */
    billingInvoicesList(namespace, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling billingInvoicesList");
      }

      let pathParams = {
        'namespace': namespace
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset'],
        'ordering': opts['ordering']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = [Invoice];
      return this.apiClient.callApi(
        '/v1/{namespace}/billing/invoices/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the billingInvoicesRead operation.
     * @callback module:api/BillingApi~billingInvoicesReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Invoice} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get an invoice
     * @param {String} namespace User or team name.
     * @param {String} id Invoice unique identifier expressed as UUID.
     * @param {module:api/BillingApi~billingInvoicesReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Invoice}
     */
    billingInvoicesRead(namespace, id, callback) {
      let postBody = null;
      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling billingInvoicesRead");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling billingInvoicesRead");
      }

      let pathParams = {
        'namespace': namespace,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = Invoice;
      return this.apiClient.callApi(
        '/v1/{namespace}/billing/invoices/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the billingPlansList operation.
     * @callback module:api/BillingApi~billingPlansListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Plan>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get billing plans
     * @param {String} namespace User or team name.
     * @param {Object} opts Optional parameters
     * @param {String} [limit] Limit when getting items.
     * @param {String} [offset] Offset when getting items.
     * @param {String} [ordering] Ordering when getting items.
     * @param {module:api/BillingApi~billingPlansListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Plan>}
     */
    billingPlansList(namespace, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling billingPlansList");
      }

      let pathParams = {
        'namespace': namespace
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset'],
        'ordering': opts['ordering']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = [Plan];
      return this.apiClient.callApi(
        '/v1/{namespace}/billing/plans/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the billingPlansRead operation.
     * @callback module:api/BillingApi~billingPlansReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Plan} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a billing plan
     * @param {String} namespace User or team name.
     * @param {String} id Plan unique identifier expressed as UUID.
     * @param {module:api/BillingApi~billingPlansReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Plan}
     */
    billingPlansRead(namespace, id, callback) {
      let postBody = null;
      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling billingPlansRead");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling billingPlansRead");
      }

      let pathParams = {
        'namespace': namespace,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = Plan;
      return this.apiClient.callApi(
        '/v1/{namespace}/billing/plans/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the billingSubscriptionsCreate operation.
     * @callback module:api/BillingApi~billingSubscriptionsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Subscription} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new subscription
     * @param {String} namespace User or team name.
     * @param {Object} opts Optional parameters
     * @param {module:model/SubscriptionData} [subscriptionData] 
     * @param {module:api/BillingApi~billingSubscriptionsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Subscription}
     */
    billingSubscriptionsCreate(namespace, opts, callback) {
      opts = opts || {};
      let postBody = opts['subscriptionData'];
      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling billingSubscriptionsCreate");
      }

      let pathParams = {
        'namespace': namespace
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'text/html'];
      let returnType = Subscription;
      return this.apiClient.callApi(
        '/v1/{namespace}/billing/subscriptions/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the billingSubscriptionsDelete operation.
     * @callback module:api/BillingApi~billingSubscriptionsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a subscription
     * @param {String} namespace User or team name.
     * @param {String} id Subscription unique identifier expressed as UUID.
     * @param {module:api/BillingApi~billingSubscriptionsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    billingSubscriptionsDelete(namespace, id, callback) {
      let postBody = null;
      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling billingSubscriptionsDelete");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling billingSubscriptionsDelete");
      }

      let pathParams = {
        'namespace': namespace,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/{namespace}/billing/subscriptions/{id}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the billingSubscriptionsList operation.
     * @callback module:api/BillingApi~billingSubscriptionsListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Subscription>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get active subscriptons
     * @param {String} namespace User or team name.
     * @param {Object} opts Optional parameters
     * @param {String} [limit] Limit when getting items.
     * @param {String} [offset] Offset when getting items.
     * @param {String} [ordering] Ordering when getting items.
     * @param {module:api/BillingApi~billingSubscriptionsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Subscription>}
     */
    billingSubscriptionsList(namespace, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling billingSubscriptionsList");
      }

      let pathParams = {
        'namespace': namespace
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset'],
        'ordering': opts['ordering']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = [Subscription];
      return this.apiClient.callApi(
        '/v1/{namespace}/billing/subscriptions/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the billingSubscriptionsRead operation.
     * @callback module:api/BillingApi~billingSubscriptionsReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Subscription} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a subscriptions
     * @param {String} namespace User or team name.
     * @param {String} id Unique identifier expressed as UUID.
     * @param {module:api/BillingApi~billingSubscriptionsReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Subscription}
     */
    billingSubscriptionsRead(namespace, id, callback) {
      let postBody = null;
      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling billingSubscriptionsRead");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling billingSubscriptionsRead");
      }

      let pathParams = {
        'namespace': namespace,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = Subscription;
      return this.apiClient.callApi(
        '/v1/{namespace}/billing/subscriptions/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsBillingInvoiceItemsList_0 operation.
     * @callback module:api/BillingApi~teamsBillingInvoiceItemsList_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/InvoiceItem>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get team invoice items for a given invoice.
     * @param {String} team Team unique identifier expressed as UUID or name.
     * @param {String} invoiceId Invoice id, expressed as UUID.
     * @param {Object} opts Optional parameters
     * @param {String} [limit] Limit when getting items.
     * @param {String} [offset] Offset when getting items.
     * @param {String} [ordering] Ordering when getting items.
     * @param {module:api/BillingApi~teamsBillingInvoiceItemsList_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/InvoiceItem>}
     */
    teamsBillingInvoiceItemsList_0(team, invoiceId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'team' is set
      if (team === undefined || team === null) {
        throw new Error("Missing the required parameter 'team' when calling teamsBillingInvoiceItemsList_0");
      }
      // verify the required parameter 'invoiceId' is set
      if (invoiceId === undefined || invoiceId === null) {
        throw new Error("Missing the required parameter 'invoiceId' when calling teamsBillingInvoiceItemsList_0");
      }

      let pathParams = {
        'team': team,
        'invoice_id': invoiceId
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset'],
        'ordering': opts['ordering']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = [InvoiceItem];
      return this.apiClient.callApi(
        '/v1/teams/{team}/billing/invoices/{invoice_id}/invoice-items/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsBillingInvoiceItemsRead_0 operation.
     * @callback module:api/BillingApi~teamsBillingInvoiceItemsRead_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/InvoiceItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a specific team InvoiceItem.
     * @param {String} team Team unique identifier expressed as UUID or name.
     * @param {String} invoiceId Invoice id, expressed as UUID.
     * @param {String} id InvoiceItem id, expressed as UUID.
     * @param {module:api/BillingApi~teamsBillingInvoiceItemsRead_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InvoiceItem}
     */
    teamsBillingInvoiceItemsRead_0(team, invoiceId, id, callback) {
      let postBody = null;
      // verify the required parameter 'team' is set
      if (team === undefined || team === null) {
        throw new Error("Missing the required parameter 'team' when calling teamsBillingInvoiceItemsRead_0");
      }
      // verify the required parameter 'invoiceId' is set
      if (invoiceId === undefined || invoiceId === null) {
        throw new Error("Missing the required parameter 'invoiceId' when calling teamsBillingInvoiceItemsRead_0");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling teamsBillingInvoiceItemsRead_0");
      }

      let pathParams = {
        'team': team,
        'invoice_id': invoiceId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = InvoiceItem;
      return this.apiClient.callApi(
        '/v1/teams/{team}/billing/invoices/{invoice_id}/invoice-items/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsBillingInvoicesList_0 operation.
     * @callback module:api/BillingApi~teamsBillingInvoicesList_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Invoice>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get team invoices
     * @param {String} team Team unique identifier expressed as UUID or name.
     * @param {Object} opts Optional parameters
     * @param {String} [limit] Limit when getting items.
     * @param {String} [offset] Offset when getting items.
     * @param {module:api/BillingApi~teamsBillingInvoicesList_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Invoice>}
     */
    teamsBillingInvoicesList_0(team, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'team' is set
      if (team === undefined || team === null) {
        throw new Error("Missing the required parameter 'team' when calling teamsBillingInvoicesList_0");
      }

      let pathParams = {
        'team': team
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = [Invoice];
      return this.apiClient.callApi(
        '/v1/teams/{team}/billing/invoices/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsBillingInvoicesRead_0 operation.
     * @callback module:api/BillingApi~teamsBillingInvoicesRead_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Invoice} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get an invoice
     * @param {String} team Team unique identifier expressed as UUID or name.
     * @param {String} id Invoice unique identifier expressed as UUID.
     * @param {module:api/BillingApi~teamsBillingInvoicesRead_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Invoice}
     */
    teamsBillingInvoicesRead_0(team, id, callback) {
      let postBody = null;
      // verify the required parameter 'team' is set
      if (team === undefined || team === null) {
        throw new Error("Missing the required parameter 'team' when calling teamsBillingInvoicesRead_0");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling teamsBillingInvoicesRead_0");
      }

      let pathParams = {
        'team': team,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = Invoice;
      return this.apiClient.callApi(
        '/v1/teams/{team}/billing/invoices/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsBillingSubscriptionsCreate_0 operation.
     * @callback module:api/BillingApi~teamsBillingSubscriptionsCreate_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Subscription} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new team subscription
     * @param {String} team Team unique identifier expressed as UUID or name.
     * @param {Object} opts Optional parameters
     * @param {module:model/SubscriptionData} [subscriptionData] 
     * @param {module:api/BillingApi~teamsBillingSubscriptionsCreate_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Subscription}
     */
    teamsBillingSubscriptionsCreate_0(team, opts, callback) {
      opts = opts || {};
      let postBody = opts['subscriptionData'];
      // verify the required parameter 'team' is set
      if (team === undefined || team === null) {
        throw new Error("Missing the required parameter 'team' when calling teamsBillingSubscriptionsCreate_0");
      }

      let pathParams = {
        'team': team
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'text/html'];
      let returnType = Subscription;
      return this.apiClient.callApi(
        '/v1/teams/{team}/billing/subscriptions/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsBillingSubscriptionsDelete_0 operation.
     * @callback module:api/BillingApi~teamsBillingSubscriptionsDelete_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a subscription
     * @param {String} team Team unique identifier expressed as UUID or name.
     * @param {String} id Subscription unique identifier expressed as UUID.
     * @param {module:api/BillingApi~teamsBillingSubscriptionsDelete_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    teamsBillingSubscriptionsDelete_0(team, id, callback) {
      let postBody = null;
      // verify the required parameter 'team' is set
      if (team === undefined || team === null) {
        throw new Error("Missing the required parameter 'team' when calling teamsBillingSubscriptionsDelete_0");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling teamsBillingSubscriptionsDelete_0");
      }

      let pathParams = {
        'team': team,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/teams/{team}/billing/subscriptions/{id}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsBillingSubscriptionsList_0 operation.
     * @callback module:api/BillingApi~teamsBillingSubscriptionsList_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Subscription>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get active team subscriptons
     * @param {String} team Team unique identifier expressed as UUID or name.
     * @param {Object} opts Optional parameters
     * @param {String} [limit] Limit when getting items.
     * @param {String} [offset] Offset when getting items.
     * @param {String} [ordering] Ordering when getting items.
     * @param {module:api/BillingApi~teamsBillingSubscriptionsList_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Subscription>}
     */
    teamsBillingSubscriptionsList_0(team, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'team' is set
      if (team === undefined || team === null) {
        throw new Error("Missing the required parameter 'team' when calling teamsBillingSubscriptionsList_0");
      }

      let pathParams = {
        'team': team
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset'],
        'ordering': opts['ordering']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = [Subscription];
      return this.apiClient.callApi(
        '/v1/teams/{team}/billing/subscriptions/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsBillingSubscriptionsRead_0 operation.
     * @callback module:api/BillingApi~teamsBillingSubscriptionsRead_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Subscription} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get team subscriptions
     * @param {String} team Team unique identifier expressed as UUID or name.
     * @param {String} id Unique identifier expressed as UUID.
     * @param {module:api/BillingApi~teamsBillingSubscriptionsRead_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Subscription}
     */
    teamsBillingSubscriptionsRead_0(team, id, callback) {
      let postBody = null;
      // verify the required parameter 'team' is set
      if (team === undefined || team === null) {
        throw new Error("Missing the required parameter 'team' when calling teamsBillingSubscriptionsRead_0");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling teamsBillingSubscriptionsRead_0");
      }

      let pathParams = {
        'team': team,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = Subscription;
      return this.apiClient.callApi(
        '/v1/teams/{team}/billing/subscriptions/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
