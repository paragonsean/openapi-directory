/**
 * IllumiDesk
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Collaborator from '../model/Collaborator';
import CollaboratorData from '../model/CollaboratorData';
import CollaboratorError from '../model/CollaboratorError';
import Deployment from '../model/Deployment';
import DeploymentData from '../model/DeploymentData';
import DeploymentError from '../model/DeploymentError';
import JWT from '../model/JWT';
import NotFound from '../model/NotFound';
import Project from '../model/Project';
import ProjectCopyCheckRequest from '../model/ProjectCopyCheckRequest';
import ProjectCopyRequest from '../model/ProjectCopyRequest';
import ProjectData from '../model/ProjectData';
import ProjectError from '../model/ProjectError';
import ProjectFile from '../model/ProjectFile';
import ProjectFileError from '../model/ProjectFileError';
import Server from '../model/Server';
import ServerAction from '../model/ServerAction';
import ServerActionData from '../model/ServerActionData';
import ServerActionError from '../model/ServerActionError';
import ServerData from '../model/ServerData';
import ServerError from '../model/ServerError';
import ServerRunStatistics from '../model/ServerRunStatistics';
import ServerRunStatisticsData from '../model/ServerRunStatisticsData';
import ServerRunStatisticsError from '../model/ServerRunStatisticsError';
import ServerStatistics from '../model/ServerStatistics';
import ServerStatisticsData from '../model/ServerStatisticsData';
import ServerStatisticsError from '../model/ServerStatisticsError';
import ServerStatus from '../model/ServerStatus';
import SshTunnel from '../model/SshTunnel';
import SshTunnelData from '../model/SshTunnelData';
import SshTunnelError from '../model/SshTunnelError';

/**
* Projects service.
* @module api/ProjectsApi
* @version 1.0
*/
export default class ProjectsApi {

    /**
    * Constructs a new ProjectsApi. 
    * @alias module:api/ProjectsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the projectCopy operation.
     * @callback module:api/ProjectsApi~projectCopyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Project} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Copy a project to your own account.
     * @param {String} namespace User or team name.
     * @param {module:model/ProjectCopyRequest} projectCopyData 
     * @param {module:api/ProjectsApi~projectCopyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Project}
     */
    projectCopy(namespace, projectCopyData, callback) {
      let postBody = projectCopyData;
      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling projectCopy");
      }
      // verify the required parameter 'projectCopyData' is set
      if (projectCopyData === undefined || projectCopyData === null) {
        throw new Error("Missing the required parameter 'projectCopyData' when calling projectCopy");
      }

      let pathParams = {
        'namespace': namespace
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'text/html'];
      let returnType = Project;
      return this.apiClient.callApi(
        '/v1/{namespace}/projects/project-copy/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectCopyCheck operation.
     * @callback module:api/ProjectsApi~projectCopyCheckCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check if you are able to copy a project to your account.
     * @param {String} namespace User or team name.
     * @param {module:model/ProjectCopyCheckRequest} projectCopyData 
     * @param {module:api/ProjectsApi~projectCopyCheckCallback} callback The callback function, accepting three arguments: error, data, response
     */
    projectCopyCheck(namespace, projectCopyData, callback) {
      let postBody = projectCopyData;
      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling projectCopyCheck");
      }
      // verify the required parameter 'projectCopyData' is set
      if (projectCopyData === undefined || projectCopyData === null) {
        throw new Error("Missing the required parameter 'projectCopyData' when calling projectCopyCheck");
      }

      let pathParams = {
        'namespace': namespace
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/{namespace}/projects/project-copy-check/', 'HEAD',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectsCollaboratorsCreate operation.
     * @callback module:api/ProjectsApi~projectsCollaboratorsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Collaborator} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create project collaborators
     * @param {String} project Project unique identifier expressed as UUID or name.
     * @param {String} namespace User or team name.
     * @param {Object} opts Optional parameters
     * @param {module:model/CollaboratorData} [collaboratorData] 
     * @param {module:api/ProjectsApi~projectsCollaboratorsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Collaborator}
     */
    projectsCollaboratorsCreate(project, namespace, opts, callback) {
      opts = opts || {};
      let postBody = opts['collaboratorData'];
      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling projectsCollaboratorsCreate");
      }
      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling projectsCollaboratorsCreate");
      }

      let pathParams = {
        'project': project,
        'namespace': namespace
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'text/html'];
      let returnType = Collaborator;
      return this.apiClient.callApi(
        '/v1/{namespace}/projects/{project}/collaborators/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectsCollaboratorsDelete operation.
     * @callback module:api/ProjectsApi~projectsCollaboratorsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a project collaborator
     * @param {String} project Project unique identifier.
     * @param {String} namespace User or team name.
     * @param {String} collaborator Collaborator unique identifier.
     * @param {module:api/ProjectsApi~projectsCollaboratorsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    projectsCollaboratorsDelete(project, namespace, collaborator, callback) {
      let postBody = null;
      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling projectsCollaboratorsDelete");
      }
      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling projectsCollaboratorsDelete");
      }
      // verify the required parameter 'collaborator' is set
      if (collaborator === undefined || collaborator === null) {
        throw new Error("Missing the required parameter 'collaborator' when calling projectsCollaboratorsDelete");
      }

      let pathParams = {
        'project': project,
        'namespace': namespace,
        'collaborator': collaborator
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/{namespace}/projects/{project}/collaborators/{collaborator}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectsCollaboratorsList operation.
     * @callback module:api/ProjectsApi~projectsCollaboratorsListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Collaborator>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get project collaborators
     * @param {String} project Project unique identifier expressed as UUID or name.
     * @param {String} namespace User or team name.
     * @param {Object} opts Optional parameters
     * @param {String} [limit] Limit when retrieving items.
     * @param {String} [offset] Offset when retrieving items.
     * @param {String} [ordering] Ordering when retrieving items.
     * @param {module:api/ProjectsApi~projectsCollaboratorsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Collaborator>}
     */
    projectsCollaboratorsList(project, namespace, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling projectsCollaboratorsList");
      }
      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling projectsCollaboratorsList");
      }

      let pathParams = {
        'project': project,
        'namespace': namespace
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset'],
        'ordering': opts['ordering']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = [Collaborator];
      return this.apiClient.callApi(
        '/v1/{namespace}/projects/{project}/collaborators/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectsCollaboratorsRead operation.
     * @callback module:api/ProjectsApi~projectsCollaboratorsReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Collaborator} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a project collaborator
     * @param {String} project Project unique identifier.
     * @param {String} namespace User or team name.
     * @param {String} collaborator Collaborator unique identifier expressed as UUID or name.
     * @param {module:api/ProjectsApi~projectsCollaboratorsReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Collaborator}
     */
    projectsCollaboratorsRead(project, namespace, collaborator, callback) {
      let postBody = null;
      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling projectsCollaboratorsRead");
      }
      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling projectsCollaboratorsRead");
      }
      // verify the required parameter 'collaborator' is set
      if (collaborator === undefined || collaborator === null) {
        throw new Error("Missing the required parameter 'collaborator' when calling projectsCollaboratorsRead");
      }

      let pathParams = {
        'project': project,
        'namespace': namespace,
        'collaborator': collaborator
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = Collaborator;
      return this.apiClient.callApi(
        '/v1/{namespace}/projects/{project}/collaborators/{collaborator}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectsCollaboratorsUpdate operation.
     * @callback module:api/ProjectsApi~projectsCollaboratorsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Collaborator} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update project collaborator
     * @param {String} project 
     * @param {String} namespace User or team name.
     * @param {String} collaborator 
     * @param {Object} opts Optional parameters
     * @param {module:model/CollaboratorData} [collaboratorData] 
     * @param {module:api/ProjectsApi~projectsCollaboratorsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Collaborator}
     */
    projectsCollaboratorsUpdate(project, namespace, collaborator, opts, callback) {
      opts = opts || {};
      let postBody = opts['collaboratorData'];
      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling projectsCollaboratorsUpdate");
      }
      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling projectsCollaboratorsUpdate");
      }
      // verify the required parameter 'collaborator' is set
      if (collaborator === undefined || collaborator === null) {
        throw new Error("Missing the required parameter 'collaborator' when calling projectsCollaboratorsUpdate");
      }

      let pathParams = {
        'project': project,
        'namespace': namespace,
        'collaborator': collaborator
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'text/html'];
      let returnType = Collaborator;
      return this.apiClient.callApi(
        '/v1/{namespace}/projects/{project}/collaborators/{collaborator}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectsCreate operation.
     * @callback module:api/ProjectsApi~projectsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Project} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new project
     * @param {String} namespace User or team name.
     * @param {Object} opts Optional parameters
     * @param {module:model/ProjectData} [projectData] 
     * @param {module:api/ProjectsApi~projectsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Project}
     */
    projectsCreate(namespace, opts, callback) {
      opts = opts || {};
      let postBody = opts['projectData'];
      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling projectsCreate");
      }

      let pathParams = {
        'namespace': namespace
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'text/html'];
      let returnType = Project;
      return this.apiClient.callApi(
        '/v1/{namespace}/projects/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectsDelete operation.
     * @callback module:api/ProjectsApi~projectsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a project
     * @param {String} namespace User or team name.
     * @param {String} project Project unique identifier expressed as UUID or name.
     * @param {module:api/ProjectsApi~projectsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    projectsDelete(namespace, project, callback) {
      let postBody = null;
      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling projectsDelete");
      }
      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling projectsDelete");
      }

      let pathParams = {
        'namespace': namespace,
        'project': project
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/{namespace}/projects/{project}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectsDeploymentDelete operation.
     * @callback module:api/ProjectsApi~projectsDeploymentDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a deployment
     * @param {String} project Project unique identifier.
     * @param {String} namespace User or team name.
     * @param {String} deployment User unique identifier.
     * @param {module:api/ProjectsApi~projectsDeploymentDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    projectsDeploymentDelete(project, namespace, deployment, callback) {
      let postBody = null;
      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling projectsDeploymentDelete");
      }
      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling projectsDeploymentDelete");
      }
      // verify the required parameter 'deployment' is set
      if (deployment === undefined || deployment === null) {
        throw new Error("Missing the required parameter 'deployment' when calling projectsDeploymentDelete");
      }

      let pathParams = {
        'project': project,
        'namespace': namespace,
        'deployment': deployment
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/{namespace}/projects/{project}/deployments/{deployment}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectsDeploymentsCreate operation.
     * @callback module:api/ProjectsApi~projectsDeploymentsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Deployment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new deployment
     * @param {String} project Project unique identifer expressed as UUID or name.
     * @param {String} namespace User or team name.
     * @param {Object} opts Optional parameters
     * @param {module:model/DeploymentData} [deploymentData] 
     * @param {module:api/ProjectsApi~projectsDeploymentsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Deployment}
     */
    projectsDeploymentsCreate(project, namespace, opts, callback) {
      opts = opts || {};
      let postBody = opts['deploymentData'];
      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling projectsDeploymentsCreate");
      }
      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling projectsDeploymentsCreate");
      }

      let pathParams = {
        'project': project,
        'namespace': namespace
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'text/html'];
      let returnType = Deployment;
      return this.apiClient.callApi(
        '/v1/{namespace}/projects/{project}/deployments/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectsDeploymentsDeploy operation.
     * @callback module:api/ProjectsApi~projectsDeploymentsDeployCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deploy an existing model
     * @param {String} project Project unique identifier expressed as UUID or name.
     * @param {String} namespace User or team name.
     * @param {String} deployment Deployment unique identifier expressed as UUID or name.
     * @param {module:api/ProjectsApi~projectsDeploymentsDeployCallback} callback The callback function, accepting three arguments: error, data, response
     */
    projectsDeploymentsDeploy(project, namespace, deployment, callback) {
      let postBody = null;
      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling projectsDeploymentsDeploy");
      }
      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling projectsDeploymentsDeploy");
      }
      // verify the required parameter 'deployment' is set
      if (deployment === undefined || deployment === null) {
        throw new Error("Missing the required parameter 'deployment' when calling projectsDeploymentsDeploy");
      }

      let pathParams = {
        'project': project,
        'namespace': namespace,
        'deployment': deployment
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/{namespace}/projects/{project}/deployments/{deployment}/deploy/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectsDeploymentsList operation.
     * @callback module:api/ProjectsApi~projectsDeploymentsListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Deployment>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve deployments
     * @param {String} project Project unique identifier expressed as UUID or name.
     * @param {String} namespace User or team name.
     * @param {Object} opts Optional parameters
     * @param {String} [limit] Limit results when getting deployment list.
     * @param {String} [offset] Offset results when getting deployment list.
     * @param {String} [name] Server name.
     * @param {String} [ordering] Ordering option when getting deployment list.
     * @param {module:api/ProjectsApi~projectsDeploymentsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Deployment>}
     */
    projectsDeploymentsList(project, namespace, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling projectsDeploymentsList");
      }
      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling projectsDeploymentsList");
      }

      let pathParams = {
        'project': project,
        'namespace': namespace
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset'],
        'name': opts['name'],
        'ordering': opts['ordering']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = [Deployment];
      return this.apiClient.callApi(
        '/v1/{namespace}/projects/{project}/deployments/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectsDeploymentsRead operation.
     * @callback module:api/ProjectsApi~projectsDeploymentsReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Deployment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a deployment
     * @param {String} project Project unique identifier expressed as UUID or name.
     * @param {String} namespace User or team name.
     * @param {String} deployment Deployment unique identifier expressed as UUID or name.
     * @param {module:api/ProjectsApi~projectsDeploymentsReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Deployment}
     */
    projectsDeploymentsRead(project, namespace, deployment, callback) {
      let postBody = null;
      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling projectsDeploymentsRead");
      }
      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling projectsDeploymentsRead");
      }
      // verify the required parameter 'deployment' is set
      if (deployment === undefined || deployment === null) {
        throw new Error("Missing the required parameter 'deployment' when calling projectsDeploymentsRead");
      }

      let pathParams = {
        'project': project,
        'namespace': namespace,
        'deployment': deployment
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = Deployment;
      return this.apiClient.callApi(
        '/v1/{namespace}/projects/{project}/deployments/{deployment}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectsDeploymentsReplace operation.
     * @callback module:api/ProjectsApi~projectsDeploymentsReplaceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Deployment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Replace a deployment
     * @param {String} project Project unique identifier expressed as UUID or name.
     * @param {String} namespace User or team name.
     * @param {String} deployment Deployment unique identifier expressed as UUID or name.
     * @param {Object} opts Optional parameters
     * @param {module:model/DeploymentData} [deploymentData] 
     * @param {module:api/ProjectsApi~projectsDeploymentsReplaceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Deployment}
     */
    projectsDeploymentsReplace(project, namespace, deployment, opts, callback) {
      opts = opts || {};
      let postBody = opts['deploymentData'];
      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling projectsDeploymentsReplace");
      }
      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling projectsDeploymentsReplace");
      }
      // verify the required parameter 'deployment' is set
      if (deployment === undefined || deployment === null) {
        throw new Error("Missing the required parameter 'deployment' when calling projectsDeploymentsReplace");
      }

      let pathParams = {
        'project': project,
        'namespace': namespace,
        'deployment': deployment
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'text/html'];
      let returnType = Deployment;
      return this.apiClient.callApi(
        '/v1/{namespace}/projects/{project}/deployments/{deployment}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectsDeploymentsUpdate operation.
     * @callback module:api/ProjectsApi~projectsDeploymentsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Deployment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a deployment
     * @param {String} project Project unique identifier expressed as UUID or name.
     * @param {String} namespace User or team name.
     * @param {String} deployment Deployment unique identifier expressed as UUID or name.
     * @param {Object} opts Optional parameters
     * @param {module:model/DeploymentData} [deploymentData] 
     * @param {module:api/ProjectsApi~projectsDeploymentsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Deployment}
     */
    projectsDeploymentsUpdate(project, namespace, deployment, opts, callback) {
      opts = opts || {};
      let postBody = opts['deploymentData'];
      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling projectsDeploymentsUpdate");
      }
      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling projectsDeploymentsUpdate");
      }
      // verify the required parameter 'deployment' is set
      if (deployment === undefined || deployment === null) {
        throw new Error("Missing the required parameter 'deployment' when calling projectsDeploymentsUpdate");
      }

      let pathParams = {
        'project': project,
        'namespace': namespace,
        'deployment': deployment
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'text/html'];
      let returnType = Deployment;
      return this.apiClient.callApi(
        '/v1/{namespace}/projects/{project}/deployments/{deployment}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectsList operation.
     * @callback module:api/ProjectsApi~projectsListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Project>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get available projects
     * @param {String} namespace User or team name.
     * @param {Object} opts Optional parameters
     * @param {String} [limit] Limit when getting data.
     * @param {String} [offset] Offset when getting data.
     * @param {String} [_private] Private project or public project.
     * @param {String} [name] Project name.
     * @param {String} [ordering] Ordering when getting projects.
     * @param {module:api/ProjectsApi~projectsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Project>}
     */
    projectsList(namespace, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling projectsList");
      }

      let pathParams = {
        'namespace': namespace
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset'],
        'private': opts['_private'],
        'name': opts['name'],
        'ordering': opts['ordering']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = [Project];
      return this.apiClient.callApi(
        '/v1/{namespace}/projects/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectsProjectFilesCreate operation.
     * @callback module:api/ProjectsApi~projectsProjectFilesCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProjectFile} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create project files
     * @param {String} project Project unique identifier.
     * @param {String} namespace User or team name.
     * @param {Object} opts Optional parameters
     * @param {File} [file] File to send, to create new file. This parameter is only used with form data and may include multiple files.
     * @param {String} [base64Data] Fila data, represented as base64.
     * @param {String} [name] File name. May include path when creating file with base64 field.
     * @param {String} [path] File path. Defaults to (/).
     * @param {module:api/ProjectsApi~projectsProjectFilesCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProjectFile}
     */
    projectsProjectFilesCreate(project, namespace, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling projectsProjectFilesCreate");
      }
      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling projectsProjectFilesCreate");
      }

      let pathParams = {
        'project': project,
        'namespace': namespace
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'file': opts['file'],
        'base64_data': opts['base64Data'],
        'name': opts['name'],
        'path': opts['path']
      };

      let authNames = ['jwt'];
      let contentTypes = ['multipart/form-data', 'application/json'];
      let accepts = ['application/json', 'text/html'];
      let returnType = ProjectFile;
      return this.apiClient.callApi(
        '/v1/{namespace}/projects/{project}/project_files/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectsProjectFilesDelete operation.
     * @callback module:api/ProjectsApi~projectsProjectFilesDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a project file
     * @param {String} project Project unique identifer.
     * @param {String} namespace User or team name.
     * @param {String} id File unique identifier.
     * @param {module:api/ProjectsApi~projectsProjectFilesDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    projectsProjectFilesDelete(project, namespace, id, callback) {
      let postBody = null;
      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling projectsProjectFilesDelete");
      }
      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling projectsProjectFilesDelete");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling projectsProjectFilesDelete");
      }

      let pathParams = {
        'project': project,
        'namespace': namespace,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/{namespace}/projects/{project}/project_files/{id}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectsProjectFilesList operation.
     * @callback module:api/ProjectsApi~projectsProjectFilesListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ProjectFile>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get project files
     * @param {String} project Unique identifier for project file expressed as UUID or name.
     * @param {String} namespace User or team name.
     * @param {Object} opts Optional parameters
     * @param {String} [limit] Limit when getting project file list.
     * @param {String} [offset] Offset when getting project file list.
     * @param {String} [ordering] Ordering of list values when getting project file list.
     * @param {String} [filename] Exact file name, relative to the project root. If no such file is found, an empty list will be returned.
     * @param {String} [content] Determines whether or not content is returned as base64. Defaults to false.
     * @param {module:api/ProjectsApi~projectsProjectFilesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ProjectFile>}
     */
    projectsProjectFilesList(project, namespace, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling projectsProjectFilesList");
      }
      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling projectsProjectFilesList");
      }

      let pathParams = {
        'project': project,
        'namespace': namespace
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset'],
        'ordering': opts['ordering'],
        'filename': opts['filename'],
        'content': opts['content']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = [ProjectFile];
      return this.apiClient.callApi(
        '/v1/{namespace}/projects/{project}/project_files/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectsProjectFilesRead operation.
     * @callback module:api/ProjectsApi~projectsProjectFilesReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProjectFile} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a project file
     * @param {String} project Project unique identifer.
     * @param {String} namespace User or team name.
     * @param {String} id File unique identifier.
     * @param {Object} opts Optional parameters
     * @param {String} [content] Determines whether or not content is returned as base64. Defaults to false.
     * @param {module:api/ProjectsApi~projectsProjectFilesReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProjectFile}
     */
    projectsProjectFilesRead(project, namespace, id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling projectsProjectFilesRead");
      }
      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling projectsProjectFilesRead");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling projectsProjectFilesRead");
      }

      let pathParams = {
        'project': project,
        'namespace': namespace,
        'id': id
      };
      let queryParams = {
        'content': opts['content']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = ProjectFile;
      return this.apiClient.callApi(
        '/v1/{namespace}/projects/{project}/project_files/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectsProjectFilesReplace operation.
     * @callback module:api/ProjectsApi~projectsProjectFilesReplaceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProjectFile} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Replace a project file
     * @param {String} project Project unique identifer.
     * @param {String} namespace User or team name.
     * @param {String} id File unique identifier.
     * @param {Object} opts Optional parameters
     * @param {File} [file] File to send, to create new file. This parameter is only used with form data and may include multiple files.
     * @param {String} [base64Data] Fila data, represented as base64.
     * @param {String} [name] File name. May include path when creating file with base64 field.
     * @param {String} [path] File path. Defaults to (/).
     * @param {module:api/ProjectsApi~projectsProjectFilesReplaceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProjectFile}
     */
    projectsProjectFilesReplace(project, namespace, id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling projectsProjectFilesReplace");
      }
      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling projectsProjectFilesReplace");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling projectsProjectFilesReplace");
      }

      let pathParams = {
        'project': project,
        'namespace': namespace,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'file': opts['file'],
        'base64_data': opts['base64Data'],
        'name': opts['name'],
        'path': opts['path']
      };

      let authNames = ['jwt'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json', 'text/html'];
      let returnType = ProjectFile;
      return this.apiClient.callApi(
        '/v1/{namespace}/projects/{project}/project_files/{id}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectsProjectFilesUpdate operation.
     * @callback module:api/ProjectsApi~projectsProjectFilesUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProjectFile} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a project file
     * @param {String} project Project unique identifer.
     * @param {String} namespace User or team name.
     * @param {String} id File unique identifier.
     * @param {Object} opts Optional parameters
     * @param {File} [file] File to send, to create new file. This parameter is only used with form data and may include multiple files.
     * @param {String} [base64Data] Fila data, represented as base64.
     * @param {String} [name] File name. May include path when creating file with base64 field.
     * @param {String} [path] File path. Defaults to (/).
     * @param {module:api/ProjectsApi~projectsProjectFilesUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProjectFile}
     */
    projectsProjectFilesUpdate(project, namespace, id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling projectsProjectFilesUpdate");
      }
      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling projectsProjectFilesUpdate");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling projectsProjectFilesUpdate");
      }

      let pathParams = {
        'project': project,
        'namespace': namespace,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'file': opts['file'],
        'base64_data': opts['base64Data'],
        'name': opts['name'],
        'path': opts['path']
      };

      let authNames = ['jwt'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json', 'text/html'];
      let returnType = ProjectFile;
      return this.apiClient.callApi(
        '/v1/{namespace}/projects/{project}/project_files/{id}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectsRead operation.
     * @callback module:api/ProjectsApi~projectsReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Project} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a project
     * @param {String} namespace User or team name.
     * @param {String} project Project unique identifier expressed as UUID or name.
     * @param {module:api/ProjectsApi~projectsReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Project}
     */
    projectsRead(namespace, project, callback) {
      let postBody = null;
      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling projectsRead");
      }
      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling projectsRead");
      }

      let pathParams = {
        'namespace': namespace,
        'project': project
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = Project;
      return this.apiClient.callApi(
        '/v1/{namespace}/projects/{project}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectsReplace operation.
     * @callback module:api/ProjectsApi~projectsReplaceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Project} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Replace a project
     * @param {String} namespace User or team namespace.
     * @param {String} project Project unique identifier expressed as UUID or name.
     * @param {Object} opts Optional parameters
     * @param {module:model/ProjectData} [projectData] 
     * @param {module:api/ProjectsApi~projectsReplaceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Project}
     */
    projectsReplace(namespace, project, opts, callback) {
      opts = opts || {};
      let postBody = opts['projectData'];
      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling projectsReplace");
      }
      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling projectsReplace");
      }

      let pathParams = {
        'namespace': namespace,
        'project': project
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'text/html'];
      let returnType = Project;
      return this.apiClient.callApi(
        '/v1/{namespace}/projects/{project}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectsServersApiKey operation.
     * @callback module:api/ProjectsApi~projectsServersApiKeyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/JWT} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get server API key
     * @param {String} project Project unique identifier expressed as UUID or name.
     * @param {String} namespace User or team name.
     * @param {String} server Server unique identifier expressed as UUID or name.
     * @param {module:api/ProjectsApi~projectsServersApiKeyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/JWT}
     */
    projectsServersApiKey(project, namespace, server, callback) {
      let postBody = null;
      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling projectsServersApiKey");
      }
      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling projectsServersApiKey");
      }
      // verify the required parameter 'server' is set
      if (server === undefined || server === null) {
        throw new Error("Missing the required parameter 'server' when calling projectsServersApiKey");
      }

      let pathParams = {
        'project': project,
        'namespace': namespace,
        'server': server
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = JWT;
      return this.apiClient.callApi(
        '/v1/{namespace}/projects/{project}/servers/{server}/api-key/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectsServersAuth operation.
     * @callback module:api/ProjectsApi~projectsServersAuthCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Server api key validation
     * @param {String} project Project unique identifier expressed as UUID or name.
     * @param {String} namespace User or team name.
     * @param {String} server Server unique identifier expressed as UUID or name.
     * @param {module:api/ProjectsApi~projectsServersAuthCallback} callback The callback function, accepting three arguments: error, data, response
     */
    projectsServersAuth(project, namespace, server, callback) {
      let postBody = null;
      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling projectsServersAuth");
      }
      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling projectsServersAuth");
      }
      // verify the required parameter 'server' is set
      if (server === undefined || server === null) {
        throw new Error("Missing the required parameter 'server' when calling projectsServersAuth");
      }

      let pathParams = {
        'project': project,
        'namespace': namespace,
        'server': server
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/{namespace}/projects/{project}/servers/{server}/auth/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectsServersCreate operation.
     * @callback module:api/ProjectsApi~projectsServersCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Server} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new server
     * @param {String} project Project unique identifer expressed as UUID or name.
     * @param {String} namespace User or team name.
     * @param {Object} opts Optional parameters
     * @param {module:model/ServerData} [serverData] 
     * @param {module:api/ProjectsApi~projectsServersCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Server}
     */
    projectsServersCreate(project, namespace, opts, callback) {
      opts = opts || {};
      let postBody = opts['serverData'];
      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling projectsServersCreate");
      }
      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling projectsServersCreate");
      }

      let pathParams = {
        'project': project,
        'namespace': namespace
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'text/html'];
      let returnType = Server;
      return this.apiClient.callApi(
        '/v1/{namespace}/projects/{project}/servers/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectsServersDelete operation.
     * @callback module:api/ProjectsApi~projectsServersDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a server
     * @param {String} project Project unique identifier.
     * @param {String} namespace User or team name.
     * @param {String} server User unique identifier.
     * @param {module:api/ProjectsApi~projectsServersDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    projectsServersDelete(project, namespace, server, callback) {
      let postBody = null;
      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling projectsServersDelete");
      }
      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling projectsServersDelete");
      }
      // verify the required parameter 'server' is set
      if (server === undefined || server === null) {
        throw new Error("Missing the required parameter 'server' when calling projectsServersDelete");
      }

      let pathParams = {
        'project': project,
        'namespace': namespace,
        'server': server
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/{namespace}/projects/{project}/servers/{server}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectsServersList operation.
     * @callback module:api/ProjectsApi~projectsServersListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Server>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve servers
     * @param {String} project Project unique identifier expressed as UUID or name.
     * @param {String} namespace User or team name.
     * @param {Object} opts Optional parameters
     * @param {String} [limit] Limit results when getting server list.
     * @param {String} [offset] Offset results when getting server list.
     * @param {String} [name] Server name.
     * @param {String} [ordering] Ordering option when getting server list.
     * @param {module:api/ProjectsApi~projectsServersListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Server>}
     */
    projectsServersList(project, namespace, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling projectsServersList");
      }
      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling projectsServersList");
      }

      let pathParams = {
        'project': project,
        'namespace': namespace
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset'],
        'name': opts['name'],
        'ordering': opts['ordering']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = [Server];
      return this.apiClient.callApi(
        '/v1/{namespace}/projects/{project}/servers/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectsServersRead operation.
     * @callback module:api/ProjectsApi~projectsServersReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Server} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a server
     * @param {String} project Project unique identifier expressed as UUID or name.
     * @param {String} namespace User or team name.
     * @param {String} server Server unique identifier expressed as UUID or name.
     * @param {module:api/ProjectsApi~projectsServersReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Server}
     */
    projectsServersRead(project, namespace, server, callback) {
      let postBody = null;
      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling projectsServersRead");
      }
      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling projectsServersRead");
      }
      // verify the required parameter 'server' is set
      if (server === undefined || server === null) {
        throw new Error("Missing the required parameter 'server' when calling projectsServersRead");
      }

      let pathParams = {
        'project': project,
        'namespace': namespace,
        'server': server
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = Server;
      return this.apiClient.callApi(
        '/v1/{namespace}/projects/{project}/servers/{server}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectsServersReplace operation.
     * @callback module:api/ProjectsApi~projectsServersReplaceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Server} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Replace a server
     * @param {String} project Project unique identifier expressed as UUID or name.
     * @param {String} namespace User or team name.
     * @param {String} server Server unique identifier expressed as UUID or name.
     * @param {Object} opts Optional parameters
     * @param {module:model/ServerData} [serverData] 
     * @param {module:api/ProjectsApi~projectsServersReplaceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Server}
     */
    projectsServersReplace(project, namespace, server, opts, callback) {
      opts = opts || {};
      let postBody = opts['serverData'];
      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling projectsServersReplace");
      }
      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling projectsServersReplace");
      }
      // verify the required parameter 'server' is set
      if (server === undefined || server === null) {
        throw new Error("Missing the required parameter 'server' when calling projectsServersReplace");
      }

      let pathParams = {
        'project': project,
        'namespace': namespace,
        'server': server
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'text/html'];
      let returnType = Server;
      return this.apiClient.callApi(
        '/v1/{namespace}/projects/{project}/servers/{server}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectsServersRunStatsCreate operation.
     * @callback module:api/ProjectsApi~projectsServersRunStatsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ServerRunStatistics} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new server's run statistics
     * @param {String} server Server unique identifier expressed as UUID or name.
     * @param {String} project Project unique identifier expressed as UUID or name.
     * @param {String} namespace User or team name.
     * @param {Object} opts Optional parameters
     * @param {module:model/ServerRunStatisticsData} [serverrunstatsData] 
     * @param {module:api/ProjectsApi~projectsServersRunStatsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ServerRunStatistics}
     */
    projectsServersRunStatsCreate(server, project, namespace, opts, callback) {
      opts = opts || {};
      let postBody = opts['serverrunstatsData'];
      // verify the required parameter 'server' is set
      if (server === undefined || server === null) {
        throw new Error("Missing the required parameter 'server' when calling projectsServersRunStatsCreate");
      }
      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling projectsServersRunStatsCreate");
      }
      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling projectsServersRunStatsCreate");
      }

      let pathParams = {
        'server': server,
        'project': project,
        'namespace': namespace
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'text/html'];
      let returnType = ServerRunStatistics;
      return this.apiClient.callApi(
        '/v1/{namespace}/projects/{project}/servers/{server}/run-stats/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectsServersRunStatsDelete operation.
     * @callback module:api/ProjectsApi~projectsServersRunStatsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a server's statistics
     * @param {String} server Server unique identifier expressed as UUID or name.
     * @param {String} project Project unique identifier expressed as UUID or name.
     * @param {String} namespace User or team name.
     * @param {String} id Server run statistics unique identifier expressed as UUID.
     * @param {module:api/ProjectsApi~projectsServersRunStatsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    projectsServersRunStatsDelete(server, project, namespace, id, callback) {
      let postBody = null;
      // verify the required parameter 'server' is set
      if (server === undefined || server === null) {
        throw new Error("Missing the required parameter 'server' when calling projectsServersRunStatsDelete");
      }
      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling projectsServersRunStatsDelete");
      }
      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling projectsServersRunStatsDelete");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling projectsServersRunStatsDelete");
      }

      let pathParams = {
        'server': server,
        'project': project,
        'namespace': namespace,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/{namespace}/projects/{project}/servers/{server}/run-stats/{id}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectsServersRunStatsRead operation.
     * @callback module:api/ProjectsApi~projectsServersRunStatsReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ServerRunStatistics} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve statistics for a server
     * @param {String} server Server unique identifier expressed as UUID or name.
     * @param {String} project Project unique identifier expressed as UUID or name.
     * @param {String} namespace User or team name.
     * @param {String} id Run statistics unique identifier expressed as UUID.
     * @param {module:api/ProjectsApi~projectsServersRunStatsReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ServerRunStatistics}
     */
    projectsServersRunStatsRead(server, project, namespace, id, callback) {
      let postBody = null;
      // verify the required parameter 'server' is set
      if (server === undefined || server === null) {
        throw new Error("Missing the required parameter 'server' when calling projectsServersRunStatsRead");
      }
      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling projectsServersRunStatsRead");
      }
      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling projectsServersRunStatsRead");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling projectsServersRunStatsRead");
      }

      let pathParams = {
        'server': server,
        'project': project,
        'namespace': namespace,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = ServerRunStatistics;
      return this.apiClient.callApi(
        '/v1/{namespace}/projects/{project}/servers/{server}/run-stats/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectsServersRunStatsReplace operation.
     * @callback module:api/ProjectsApi~projectsServersRunStatsReplaceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ServerRunStatistics} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Replace a server's statistics
     * @param {String} server Server unique identifier expressed as UUID or name.
     * @param {String} project Project unique identifier expressed as UUID or name.
     * @param {String} namespace User or team name.
     * @param {String} id Server run statistics expressed as UUID.
     * @param {Object} opts Optional parameters
     * @param {module:model/ServerRunStatisticsData} [serverrunstatsData] 
     * @param {module:api/ProjectsApi~projectsServersRunStatsReplaceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ServerRunStatistics}
     */
    projectsServersRunStatsReplace(server, project, namespace, id, opts, callback) {
      opts = opts || {};
      let postBody = opts['serverrunstatsData'];
      // verify the required parameter 'server' is set
      if (server === undefined || server === null) {
        throw new Error("Missing the required parameter 'server' when calling projectsServersRunStatsReplace");
      }
      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling projectsServersRunStatsReplace");
      }
      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling projectsServersRunStatsReplace");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling projectsServersRunStatsReplace");
      }

      let pathParams = {
        'server': server,
        'project': project,
        'namespace': namespace,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'text/html'];
      let returnType = ServerRunStatistics;
      return this.apiClient.callApi(
        '/v1/{namespace}/projects/{project}/servers/{server}/run-stats/{id}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectsServersRunStatsUpdate operation.
     * @callback module:api/ProjectsApi~projectsServersRunStatsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ServerRunStatistics} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a server's statistics
     * @param {String} server Server unique identifier expressed as UUID or name.
     * @param {String} project Project unique identifier expressed as UUID or name.
     * @param {String} namespace User or team name.
     * @param {String} id Server run statistics unique identifier expressed as UUID.
     * @param {Object} opts Optional parameters
     * @param {module:model/ServerRunStatisticsData} [serverrunstatsData] 
     * @param {module:api/ProjectsApi~projectsServersRunStatsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ServerRunStatistics}
     */
    projectsServersRunStatsUpdate(server, project, namespace, id, opts, callback) {
      opts = opts || {};
      let postBody = opts['serverrunstatsData'];
      // verify the required parameter 'server' is set
      if (server === undefined || server === null) {
        throw new Error("Missing the required parameter 'server' when calling projectsServersRunStatsUpdate");
      }
      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling projectsServersRunStatsUpdate");
      }
      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling projectsServersRunStatsUpdate");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling projectsServersRunStatsUpdate");
      }

      let pathParams = {
        'server': server,
        'project': project,
        'namespace': namespace,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'text/html'];
      let returnType = ServerRunStatistics;
      return this.apiClient.callApi(
        '/v1/{namespace}/projects/{project}/servers/{server}/run-stats/{id}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectsServersSshTunnelsCreate operation.
     * @callback module:api/ProjectsApi~projectsServersSshTunnelsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SshTunnel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create SSH Tunnel associated to a server
     * @param {String} server Server unique identifier expressed as UUID or name.
     * @param {String} project Project unique identifier expressed as UUID or name.
     * @param {String} namespace User or team name.
     * @param {Object} opts Optional parameters
     * @param {module:model/SshTunnelData} [sshtunnelData] 
     * @param {module:api/ProjectsApi~projectsServersSshTunnelsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SshTunnel}
     */
    projectsServersSshTunnelsCreate(server, project, namespace, opts, callback) {
      opts = opts || {};
      let postBody = opts['sshtunnelData'];
      // verify the required parameter 'server' is set
      if (server === undefined || server === null) {
        throw new Error("Missing the required parameter 'server' when calling projectsServersSshTunnelsCreate");
      }
      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling projectsServersSshTunnelsCreate");
      }
      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling projectsServersSshTunnelsCreate");
      }

      let pathParams = {
        'server': server,
        'project': project,
        'namespace': namespace
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'text/html'];
      let returnType = SshTunnel;
      return this.apiClient.callApi(
        '/v1/{namespace}/projects/{project}/servers/{server}/ssh-tunnels/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectsServersSshTunnelsDelete operation.
     * @callback module:api/ProjectsApi~projectsServersSshTunnelsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an SSH Tunnel associated to a server
     * @param {String} server Server unique identifier expressed as UUID or name.
     * @param {String} project Project unique identifier expressed as UUID or name.
     * @param {String} namespace User or team name.
     * @param {String} tunnel SSH tunnel unique identifier expressed as UUID or name.
     * @param {module:api/ProjectsApi~projectsServersSshTunnelsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    projectsServersSshTunnelsDelete(server, project, namespace, tunnel, callback) {
      let postBody = null;
      // verify the required parameter 'server' is set
      if (server === undefined || server === null) {
        throw new Error("Missing the required parameter 'server' when calling projectsServersSshTunnelsDelete");
      }
      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling projectsServersSshTunnelsDelete");
      }
      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling projectsServersSshTunnelsDelete");
      }
      // verify the required parameter 'tunnel' is set
      if (tunnel === undefined || tunnel === null) {
        throw new Error("Missing the required parameter 'tunnel' when calling projectsServersSshTunnelsDelete");
      }

      let pathParams = {
        'server': server,
        'project': project,
        'namespace': namespace,
        'tunnel': tunnel
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/{namespace}/projects/{project}/servers/{server}/ssh-tunnels/{tunnel}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectsServersSshTunnelsList operation.
     * @callback module:api/ProjectsApi~projectsServersSshTunnelsListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SshTunnel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get SSH Tunnels associated to a server
     * @param {String} server Server unique identifier expressed as UUID or name.
     * @param {String} project Project unique identifier expressed as UUID or name.
     * @param {String} namespace User or team name.
     * @param {Object} opts Optional parameters
     * @param {String} [limit] Limit retrieved items.
     * @param {String} [offset] Offset retrieved items.
     * @param {String} [ordering] Order retrieved items.
     * @param {module:api/ProjectsApi~projectsServersSshTunnelsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SshTunnel>}
     */
    projectsServersSshTunnelsList(server, project, namespace, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'server' is set
      if (server === undefined || server === null) {
        throw new Error("Missing the required parameter 'server' when calling projectsServersSshTunnelsList");
      }
      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling projectsServersSshTunnelsList");
      }
      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling projectsServersSshTunnelsList");
      }

      let pathParams = {
        'server': server,
        'project': project,
        'namespace': namespace
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset'],
        'ordering': opts['ordering']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = [SshTunnel];
      return this.apiClient.callApi(
        '/v1/{namespace}/projects/{project}/servers/{server}/ssh-tunnels/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectsServersSshTunnelsRead operation.
     * @callback module:api/ProjectsApi~projectsServersSshTunnelsReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SshTunnel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get an SSH Tunnel associated to a server
     * @param {String} server Server unique identifier expressed as UUID or name.
     * @param {String} project Project unique identifier expressed as UUID or name.
     * @param {String} namespace User or team name.
     * @param {String} tunnel SSH tunnel unique identifier expressed as UUID or name.
     * @param {module:api/ProjectsApi~projectsServersSshTunnelsReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SshTunnel}
     */
    projectsServersSshTunnelsRead(server, project, namespace, tunnel, callback) {
      let postBody = null;
      // verify the required parameter 'server' is set
      if (server === undefined || server === null) {
        throw new Error("Missing the required parameter 'server' when calling projectsServersSshTunnelsRead");
      }
      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling projectsServersSshTunnelsRead");
      }
      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling projectsServersSshTunnelsRead");
      }
      // verify the required parameter 'tunnel' is set
      if (tunnel === undefined || tunnel === null) {
        throw new Error("Missing the required parameter 'tunnel' when calling projectsServersSshTunnelsRead");
      }

      let pathParams = {
        'server': server,
        'project': project,
        'namespace': namespace,
        'tunnel': tunnel
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = SshTunnel;
      return this.apiClient.callApi(
        '/v1/{namespace}/projects/{project}/servers/{server}/ssh-tunnels/{tunnel}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectsServersSshTunnelsReplace operation.
     * @callback module:api/ProjectsApi~projectsServersSshTunnelsReplaceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SshTunnel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Replace SSH Tunnel associated to a server
     * @param {String} server Server unique identifier expressed as UUID or name.
     * @param {String} project Project unique identifier expressed as UUID or name.
     * @param {String} namespace User or team name.
     * @param {String} tunnel SSH tunnel unique identifier expressed as UUID or name.
     * @param {Object} opts Optional parameters
     * @param {module:model/SshTunnelData} [sshtunnelData] 
     * @param {module:api/ProjectsApi~projectsServersSshTunnelsReplaceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SshTunnel}
     */
    projectsServersSshTunnelsReplace(server, project, namespace, tunnel, opts, callback) {
      opts = opts || {};
      let postBody = opts['sshtunnelData'];
      // verify the required parameter 'server' is set
      if (server === undefined || server === null) {
        throw new Error("Missing the required parameter 'server' when calling projectsServersSshTunnelsReplace");
      }
      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling projectsServersSshTunnelsReplace");
      }
      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling projectsServersSshTunnelsReplace");
      }
      // verify the required parameter 'tunnel' is set
      if (tunnel === undefined || tunnel === null) {
        throw new Error("Missing the required parameter 'tunnel' when calling projectsServersSshTunnelsReplace");
      }

      let pathParams = {
        'server': server,
        'project': project,
        'namespace': namespace,
        'tunnel': tunnel
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'text/html'];
      let returnType = SshTunnel;
      return this.apiClient.callApi(
        '/v1/{namespace}/projects/{project}/servers/{server}/ssh-tunnels/{tunnel}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectsServersSshTunnelsUpdate operation.
     * @callback module:api/ProjectsApi~projectsServersSshTunnelsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SshTunnel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an SSH Tunnel associated to a server
     * @param {String} server 
     * @param {String} project 
     * @param {String} namespace User or team name.
     * @param {String} tunnel 
     * @param {Object} opts Optional parameters
     * @param {module:model/SshTunnelData} [sshtunnelData] 
     * @param {module:api/ProjectsApi~projectsServersSshTunnelsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SshTunnel}
     */
    projectsServersSshTunnelsUpdate(server, project, namespace, tunnel, opts, callback) {
      opts = opts || {};
      let postBody = opts['sshtunnelData'];
      // verify the required parameter 'server' is set
      if (server === undefined || server === null) {
        throw new Error("Missing the required parameter 'server' when calling projectsServersSshTunnelsUpdate");
      }
      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling projectsServersSshTunnelsUpdate");
      }
      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling projectsServersSshTunnelsUpdate");
      }
      // verify the required parameter 'tunnel' is set
      if (tunnel === undefined || tunnel === null) {
        throw new Error("Missing the required parameter 'tunnel' when calling projectsServersSshTunnelsUpdate");
      }

      let pathParams = {
        'server': server,
        'project': project,
        'namespace': namespace,
        'tunnel': tunnel
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'text/html'];
      let returnType = SshTunnel;
      return this.apiClient.callApi(
        '/v1/{namespace}/projects/{project}/servers/{server}/ssh-tunnels/{tunnel}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectsServersStart operation.
     * @callback module:api/ProjectsApi~projectsServersStartCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Start a server
     * @param {String} project Project unique identifier expressed as UUID or name.
     * @param {String} namespace User or team name.
     * @param {String} server Server unique identifier expressed as UUID or name.
     * @param {module:api/ProjectsApi~projectsServersStartCallback} callback The callback function, accepting three arguments: error, data, response
     */
    projectsServersStart(project, namespace, server, callback) {
      let postBody = null;
      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling projectsServersStart");
      }
      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling projectsServersStart");
      }
      // verify the required parameter 'server' is set
      if (server === undefined || server === null) {
        throw new Error("Missing the required parameter 'server' when calling projectsServersStart");
      }

      let pathParams = {
        'project': project,
        'namespace': namespace,
        'server': server
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/{namespace}/projects/{project}/servers/{server}/start/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectsServersStatsDelete operation.
     * @callback module:api/ProjectsApi~projectsServersStatsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a server's statistics
     * @param {String} server Server unique identifier expressed as UUID or name.
     * @param {String} project Project unique identifier expressed as UUID or name.
     * @param {String} namespace User or team name.
     * @param {String} id Stats unique identifier expressed as UUID.
     * @param {module:api/ProjectsApi~projectsServersStatsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    projectsServersStatsDelete(server, project, namespace, id, callback) {
      let postBody = null;
      // verify the required parameter 'server' is set
      if (server === undefined || server === null) {
        throw new Error("Missing the required parameter 'server' when calling projectsServersStatsDelete");
      }
      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling projectsServersStatsDelete");
      }
      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling projectsServersStatsDelete");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling projectsServersStatsDelete");
      }

      let pathParams = {
        'server': server,
        'project': project,
        'namespace': namespace,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/{namespace}/projects/{project}/servers/{server}/stats/{id}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectsServersStatsRead operation.
     * @callback module:api/ProjectsApi~projectsServersStatsReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ServerStatistics} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a server's statistics
     * @param {String} server Server unique identifier expressed as UUID or name.
     * @param {String} project Project unique identifier expressed as UUID or name.
     * @param {String} namespace User or team name.
     * @param {String} id Server statistics unique identifier expressed as UUID.
     * @param {module:api/ProjectsApi~projectsServersStatsReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ServerStatistics}
     */
    projectsServersStatsRead(server, project, namespace, id, callback) {
      let postBody = null;
      // verify the required parameter 'server' is set
      if (server === undefined || server === null) {
        throw new Error("Missing the required parameter 'server' when calling projectsServersStatsRead");
      }
      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling projectsServersStatsRead");
      }
      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling projectsServersStatsRead");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling projectsServersStatsRead");
      }

      let pathParams = {
        'server': server,
        'project': project,
        'namespace': namespace,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = ServerStatistics;
      return this.apiClient.callApi(
        '/v1/{namespace}/projects/{project}/servers/{server}/stats/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectsServersStatsReplace operation.
     * @callback module:api/ProjectsApi~projectsServersStatsReplaceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ServerStatistics} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Replace a server's statistics
     * @param {String} server Server unique identifier expressed as UUID or name.
     * @param {String} project Project unique identifier expressed as UUID or name.
     * @param {String} namespace User or team name.
     * @param {String} id Server statistics unique identifier expressed as UUID.
     * @param {Object} opts Optional parameters
     * @param {module:model/ServerStatisticsData} [serverstatsData] 
     * @param {module:api/ProjectsApi~projectsServersStatsReplaceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ServerStatistics}
     */
    projectsServersStatsReplace(server, project, namespace, id, opts, callback) {
      opts = opts || {};
      let postBody = opts['serverstatsData'];
      // verify the required parameter 'server' is set
      if (server === undefined || server === null) {
        throw new Error("Missing the required parameter 'server' when calling projectsServersStatsReplace");
      }
      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling projectsServersStatsReplace");
      }
      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling projectsServersStatsReplace");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling projectsServersStatsReplace");
      }

      let pathParams = {
        'server': server,
        'project': project,
        'namespace': namespace,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'text/html'];
      let returnType = ServerStatistics;
      return this.apiClient.callApi(
        '/v1/{namespace}/projects/{project}/servers/{server}/stats/{id}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectsServersStatsUpdate operation.
     * @callback module:api/ProjectsApi~projectsServersStatsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ServerStatistics} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a server's statistics
     * @param {String} server Server unique identifier expressed as UUID or name.
     * @param {String} project Project unique identifier expressed as UUID or name.
     * @param {String} namespace User or team name.
     * @param {String} id Server statistics unique identifier expressed as UUID.
     * @param {Object} opts Optional parameters
     * @param {module:model/ServerStatisticsData} [serverstatsData] 
     * @param {module:api/ProjectsApi~projectsServersStatsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ServerStatistics}
     */
    projectsServersStatsUpdate(server, project, namespace, id, opts, callback) {
      opts = opts || {};
      let postBody = opts['serverstatsData'];
      // verify the required parameter 'server' is set
      if (server === undefined || server === null) {
        throw new Error("Missing the required parameter 'server' when calling projectsServersStatsUpdate");
      }
      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling projectsServersStatsUpdate");
      }
      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling projectsServersStatsUpdate");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling projectsServersStatsUpdate");
      }

      let pathParams = {
        'server': server,
        'project': project,
        'namespace': namespace,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'text/html'];
      let returnType = ServerStatistics;
      return this.apiClient.callApi(
        '/v1/{namespace}/projects/{project}/servers/{server}/stats/{id}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectsServersStatuses operation.
     * @callback module:api/ProjectsApi~projectsServersStatusesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ServerStatus>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve server statuses
     * @param {String} project Project unique identifier expressed as UUID or name.
     * @param {String} namespace User or team name.
     * @param {module:api/ProjectsApi~projectsServersStatusesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ServerStatus>}
     */
    projectsServersStatuses(project, namespace, callback) {
      let postBody = null;
      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling projectsServersStatuses");
      }
      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling projectsServersStatuses");
      }

      let pathParams = {
        'project': project,
        'namespace': namespace
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = [ServerStatus];
      return this.apiClient.callApi(
        '/v1/{namespace}/projects/{project}/servers/statuses/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectsServersStop operation.
     * @callback module:api/ProjectsApi~projectsServersStopCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Stop a server
     * @param {String} project Project unique identifier expressed as UUID or name.
     * @param {String} namespace User or team name.
     * @param {String} server Server unique identifier expressed as UUID or name.
     * @param {module:api/ProjectsApi~projectsServersStopCallback} callback The callback function, accepting three arguments: error, data, response
     */
    projectsServersStop(project, namespace, server, callback) {
      let postBody = null;
      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling projectsServersStop");
      }
      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling projectsServersStop");
      }
      // verify the required parameter 'server' is set
      if (server === undefined || server === null) {
        throw new Error("Missing the required parameter 'server' when calling projectsServersStop");
      }

      let pathParams = {
        'project': project,
        'namespace': namespace,
        'server': server
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/{namespace}/projects/{project}/servers/{server}/stop/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectsServersUpdate operation.
     * @callback module:api/ProjectsApi~projectsServersUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Server} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a server
     * @param {String} project Project unique identifier expressed as UUID or name.
     * @param {String} namespace User or team name.
     * @param {String} server Server unique identifier expressed as UUID or name.
     * @param {Object} opts Optional parameters
     * @param {module:model/ServerData} [serverData] 
     * @param {module:api/ProjectsApi~projectsServersUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Server}
     */
    projectsServersUpdate(project, namespace, server, opts, callback) {
      opts = opts || {};
      let postBody = opts['serverData'];
      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling projectsServersUpdate");
      }
      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling projectsServersUpdate");
      }
      // verify the required parameter 'server' is set
      if (server === undefined || server === null) {
        throw new Error("Missing the required parameter 'server' when calling projectsServersUpdate");
      }

      let pathParams = {
        'project': project,
        'namespace': namespace,
        'server': server
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'text/html'];
      let returnType = Server;
      return this.apiClient.callApi(
        '/v1/{namespace}/projects/{project}/servers/{server}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectsUpdate operation.
     * @callback module:api/ProjectsApi~projectsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Project} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a project
     * @param {String} namespace User or team name.
     * @param {String} project Project unique identifier expressed as UUID or name.
     * @param {Object} opts Optional parameters
     * @param {module:model/ProjectData} [projectData] 
     * @param {module:api/ProjectsApi~projectsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Project}
     */
    projectsUpdate(namespace, project, opts, callback) {
      opts = opts || {};
      let postBody = opts['projectData'];
      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling projectsUpdate");
      }
      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling projectsUpdate");
      }

      let pathParams = {
        'namespace': namespace,
        'project': project
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'text/html'];
      let returnType = Project;
      return this.apiClient.callApi(
        '/v1/{namespace}/projects/{project}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the serviceTriggerCreate operation.
     * @callback module:api/ProjectsApi~serviceTriggerCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ServerAction} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new server trigger
     * @param {String} server Server unique identifier expressed as UUID or name.
     * @param {String} project Project unique identifier expressed as UUID or name.
     * @param {String} namespace User or team name.
     * @param {Object} opts Optional parameters
     * @param {module:model/ServerActionData} [serverAction] Server action.
     * @param {module:api/ProjectsApi~serviceTriggerCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ServerAction}
     */
    serviceTriggerCreate(server, project, namespace, opts, callback) {
      opts = opts || {};
      let postBody = opts['serverAction'];
      // verify the required parameter 'server' is set
      if (server === undefined || server === null) {
        throw new Error("Missing the required parameter 'server' when calling serviceTriggerCreate");
      }
      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling serviceTriggerCreate");
      }
      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling serviceTriggerCreate");
      }

      let pathParams = {
        'server': server,
        'project': project,
        'namespace': namespace
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'text/html'];
      let returnType = ServerAction;
      return this.apiClient.callApi(
        '/v1/{namespace}/projects/{project}/servers/{server}/triggers/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the serviceTriggerDelete operation.
     * @callback module:api/ProjectsApi~serviceTriggerDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a server trigger
     * @param {String} server Server unique identifier expressed as UUID or name.
     * @param {String} project Project unique identifier expressed as UUID or name.
     * @param {String} namespace User or team name.
     * @param {String} trigger Trigger identifier expressed as UUID or name.
     * @param {module:api/ProjectsApi~serviceTriggerDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    serviceTriggerDelete(server, project, namespace, trigger, callback) {
      let postBody = null;
      // verify the required parameter 'server' is set
      if (server === undefined || server === null) {
        throw new Error("Missing the required parameter 'server' when calling serviceTriggerDelete");
      }
      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling serviceTriggerDelete");
      }
      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling serviceTriggerDelete");
      }
      // verify the required parameter 'trigger' is set
      if (trigger === undefined || trigger === null) {
        throw new Error("Missing the required parameter 'trigger' when calling serviceTriggerDelete");
      }

      let pathParams = {
        'server': server,
        'project': project,
        'namespace': namespace,
        'trigger': trigger
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/{namespace}/projects/{project}/servers/{server}/triggers/{trigger}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the serviceTriggerList operation.
     * @callback module:api/ProjectsApi~serviceTriggerListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ServerAction>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve server triggers
     * @param {String} server Server unique identifier expressed as UUID or name.
     * @param {String} project Project unique identifier expressed as UUID or name.
     * @param {String} namespace User or team name.
     * @param {Object} opts Optional parameters
     * @param {String} [name] Trigger name.
     * @param {String} [limit] Limit when getting triggers.
     * @param {String} [offset] Offset when getting triggers.
     * @param {String} [ordering] Ordering when getting triggers.
     * @param {module:api/ProjectsApi~serviceTriggerListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ServerAction>}
     */
    serviceTriggerList(server, project, namespace, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'server' is set
      if (server === undefined || server === null) {
        throw new Error("Missing the required parameter 'server' when calling serviceTriggerList");
      }
      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling serviceTriggerList");
      }
      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling serviceTriggerList");
      }

      let pathParams = {
        'server': server,
        'project': project,
        'namespace': namespace
      };
      let queryParams = {
        'name': opts['name'],
        'limit': opts['limit'],
        'offset': opts['offset'],
        'ordering': opts['ordering']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = [ServerAction];
      return this.apiClient.callApi(
        '/v1/{namespace}/projects/{project}/servers/{server}/triggers/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the serviceTriggerRead operation.
     * @callback module:api/ProjectsApi~serviceTriggerReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ServerAction} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a server trigger
     * @param {String} server Server unique identifier expressed as UUID or name.
     * @param {String} project Project unique identifier expressed as UUID or name.
     * @param {String} namespace User or team name.
     * @param {String} trigger Trigger unique identifier.
     * @param {module:api/ProjectsApi~serviceTriggerReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ServerAction}
     */
    serviceTriggerRead(server, project, namespace, trigger, callback) {
      let postBody = null;
      // verify the required parameter 'server' is set
      if (server === undefined || server === null) {
        throw new Error("Missing the required parameter 'server' when calling serviceTriggerRead");
      }
      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling serviceTriggerRead");
      }
      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling serviceTriggerRead");
      }
      // verify the required parameter 'trigger' is set
      if (trigger === undefined || trigger === null) {
        throw new Error("Missing the required parameter 'trigger' when calling serviceTriggerRead");
      }

      let pathParams = {
        'server': server,
        'project': project,
        'namespace': namespace,
        'trigger': trigger
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = ServerAction;
      return this.apiClient.callApi(
        '/v1/{namespace}/projects/{project}/servers/{server}/triggers/{trigger}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the serviceTriggerReplace operation.
     * @callback module:api/ProjectsApi~serviceTriggerReplaceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ServerAction} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Replace a server trigger
     * @param {String} server Server unique identifier expressed as UUID or name.
     * @param {String} project Project unique identifier expressed as UUID or name.
     * @param {String} namespace User or team name.
     * @param {String} trigger Trigger unique identifier.
     * @param {Object} opts Optional parameters
     * @param {module:model/ServerActionData} [serverAction] 
     * @param {module:api/ProjectsApi~serviceTriggerReplaceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ServerAction}
     */
    serviceTriggerReplace(server, project, namespace, trigger, opts, callback) {
      opts = opts || {};
      let postBody = opts['serverAction'];
      // verify the required parameter 'server' is set
      if (server === undefined || server === null) {
        throw new Error("Missing the required parameter 'server' when calling serviceTriggerReplace");
      }
      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling serviceTriggerReplace");
      }
      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling serviceTriggerReplace");
      }
      // verify the required parameter 'trigger' is set
      if (trigger === undefined || trigger === null) {
        throw new Error("Missing the required parameter 'trigger' when calling serviceTriggerReplace");
      }

      let pathParams = {
        'server': server,
        'project': project,
        'namespace': namespace,
        'trigger': trigger
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'text/html'];
      let returnType = ServerAction;
      return this.apiClient.callApi(
        '/v1/{namespace}/projects/{project}/servers/{server}/triggers/{trigger}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the serviceTriggerUpdate operation.
     * @callback module:api/ProjectsApi~serviceTriggerUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ServerAction} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a server trigger
     * @param {String} server Server unique identifier expressed as UUID or name.
     * @param {String} project Project unique identifier expressed as UUID or name.
     * @param {String} namespace User or team name.
     * @param {String} trigger Trigger identifier expressed as UUID or name.
     * @param {Object} opts Optional parameters
     * @param {module:model/ServerActionData} [serverAction] 
     * @param {module:api/ProjectsApi~serviceTriggerUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ServerAction}
     */
    serviceTriggerUpdate(server, project, namespace, trigger, opts, callback) {
      opts = opts || {};
      let postBody = opts['serverAction'];
      // verify the required parameter 'server' is set
      if (server === undefined || server === null) {
        throw new Error("Missing the required parameter 'server' when calling serviceTriggerUpdate");
      }
      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling serviceTriggerUpdate");
      }
      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling serviceTriggerUpdate");
      }
      // verify the required parameter 'trigger' is set
      if (trigger === undefined || trigger === null) {
        throw new Error("Missing the required parameter 'trigger' when calling serviceTriggerUpdate");
      }

      let pathParams = {
        'server': server,
        'project': project,
        'namespace': namespace,
        'trigger': trigger
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'text/html'];
      let returnType = ServerAction;
      return this.apiClient.callApi(
        '/v1/{namespace}/projects/{project}/servers/{server}/triggers/{trigger}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
