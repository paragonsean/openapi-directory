/**
 * IllumiDesk
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Email from '../model/Email';
import EmailData from '../model/EmailData';
import EmailError from '../model/EmailError';
import NotFound from '../model/NotFound';
import User from '../model/User';
import UserData from '../model/UserData';
import UserError from '../model/UserError';

/**
* Users service.
* @module api/UsersApi
* @version 1.0
*/
export default class UsersApi {

    /**
    * Constructs a new UsersApi. 
    * @alias module:api/UsersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the me operation.
     * @callback module:api/UsersApi~meCallback
     * @param {String} error Error message, if any.
     * @param {module:model/User} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * A convenience endpoint that is equivalent to GET /v1/users/profiles/<my user id>/
     * @param {module:api/UsersApi~meCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/User}
     */
    me(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = User;
      return this.apiClient.callApi(
        '/v1/me', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userAvatarDelete operation.
     * @callback module:api/UsersApi~userAvatarDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete avatar
     * @param {String} user User unique identifier expressed as UUID or username.
     * @param {module:api/UsersApi~userAvatarDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    userAvatarDelete(user, callback) {
      let postBody = null;
      // verify the required parameter 'user' is set
      if (user === undefined || user === null) {
        throw new Error("Missing the required parameter 'user' when calling userAvatarDelete");
      }

      let pathParams = {
        'user': user
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/users/{user}/avatar/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userAvatarGet operation.
     * @callback module:api/UsersApi~userAvatarGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve user's avatar
     * @param {String} user User unique identifier expressed as UUIDor username.
     * @param {module:api/UsersApi~userAvatarGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    userAvatarGet(user, callback) {
      let postBody = null;
      // verify the required parameter 'user' is set
      if (user === undefined || user === null) {
        throw new Error("Missing the required parameter 'user' when calling userAvatarGet");
      }

      let pathParams = {
        'user': user
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/users/{user}/avatar/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userAvatarSet operation.
     * @callback module:api/UsersApi~userAvatarSetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/User} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add user avatar
     * @param {String} user User unique identifier expressed as UUID or username.
     * @param {module:api/UsersApi~userAvatarSetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/User}
     */
    userAvatarSet(user, callback) {
      let postBody = null;
      // verify the required parameter 'user' is set
      if (user === undefined || user === null) {
        throw new Error("Missing the required parameter 'user' when calling userAvatarSet");
      }

      let pathParams = {
        'user': user
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = User;
      return this.apiClient.callApi(
        '/v1/users/{user}/avatar/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userAvatarUpdate operation.
     * @callback module:api/UsersApi~userAvatarUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/User} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a project file
     * @param {String} user User unique identifier expressed as UUID or username.
     * @param {module:api/UsersApi~userAvatarUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/User}
     */
    userAvatarUpdate(user, callback) {
      let postBody = null;
      // verify the required parameter 'user' is set
      if (user === undefined || user === null) {
        throw new Error("Missing the required parameter 'user' when calling userAvatarUpdate");
      }

      let pathParams = {
        'user': user
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = User;
      return this.apiClient.callApi(
        '/v1/users/{user}/avatar/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersApiKeyList operation.
     * @callback module:api/UsersApi~usersApiKeyListCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve account's API key
     * @param {String} user User unique identifier expressed as UUID or username.
     * @param {module:api/UsersApi~usersApiKeyListCallback} callback The callback function, accepting three arguments: error, data, response
     */
    usersApiKeyList(user, callback) {
      let postBody = null;
      // verify the required parameter 'user' is set
      if (user === undefined || user === null) {
        throw new Error("Missing the required parameter 'user' when calling usersApiKeyList");
      }

      let pathParams = {
        'user': user
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/users/{user}/api-key/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersCreate operation.
     * @callback module:api/UsersApi~usersCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/User} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create new user
     * Only admin users can create new users. New users have active status by default.
     * @param {Object} opts Optional parameters
     * @param {module:model/UserData} [userData] 
     * @param {module:api/UsersApi~usersCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/User}
     */
    usersCreate(opts, callback) {
      opts = opts || {};
      let postBody = opts['userData'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'text/html'];
      let returnType = User;
      return this.apiClient.callApi(
        '/v1/users/profiles/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersDelete operation.
     * @callback module:api/UsersApi~usersDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a user
     * @param {String} user User identifier expressed as UUID or username.
     * @param {module:api/UsersApi~usersDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    usersDelete(user, callback) {
      let postBody = null;
      // verify the required parameter 'user' is set
      if (user === undefined || user === null) {
        throw new Error("Missing the required parameter 'user' when calling usersDelete");
      }

      let pathParams = {
        'user': user
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/users/profiles/{user}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersEmailsCreate operation.
     * @callback module:api/UsersApi~usersEmailsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Email} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an email address
     * @param {String} user User unique identifier expressed as UUID or username.
     * @param {Object} opts Optional parameters
     * @param {module:model/EmailData} [emailData] 
     * @param {module:api/UsersApi~usersEmailsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Email}
     */
    usersEmailsCreate(user, opts, callback) {
      opts = opts || {};
      let postBody = opts['emailData'];
      // verify the required parameter 'user' is set
      if (user === undefined || user === null) {
        throw new Error("Missing the required parameter 'user' when calling usersEmailsCreate");
      }

      let pathParams = {
        'user': user
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'text/html'];
      let returnType = Email;
      return this.apiClient.callApi(
        '/v1/users/{user}/emails/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersEmailsDelete operation.
     * @callback module:api/UsersApi~usersEmailsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an email address
     * @param {String} emailId Email unique identifier expressed as UUID.
     * @param {String} user User unique identifier expressed as UUID or username.
     * @param {module:api/UsersApi~usersEmailsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    usersEmailsDelete(emailId, user, callback) {
      let postBody = null;
      // verify the required parameter 'emailId' is set
      if (emailId === undefined || emailId === null) {
        throw new Error("Missing the required parameter 'emailId' when calling usersEmailsDelete");
      }
      // verify the required parameter 'user' is set
      if (user === undefined || user === null) {
        throw new Error("Missing the required parameter 'user' when calling usersEmailsDelete");
      }

      let pathParams = {
        'email_id': emailId,
        'user': user
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/users/{user}/emails/{email_id}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersEmailsList operation.
     * @callback module:api/UsersApi~usersEmailsListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Email>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve account email addresses
     * @param {String} user User unique identifier as expressed as UUID or username.
     * @param {Object} opts Optional parameters
     * @param {String} [limit] Limite when getting email list.
     * @param {String} [offset] Offset when getting email list.
     * @param {String} [ordering] Ordering when getting email list.
     * @param {module:api/UsersApi~usersEmailsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Email>}
     */
    usersEmailsList(user, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'user' is set
      if (user === undefined || user === null) {
        throw new Error("Missing the required parameter 'user' when calling usersEmailsList");
      }

      let pathParams = {
        'user': user
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset'],
        'ordering': opts['ordering']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = [Email];
      return this.apiClient.callApi(
        '/v1/users/{user}/emails/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersEmailsRead operation.
     * @callback module:api/UsersApi~usersEmailsReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Email} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a user's email addresses
     * @param {String} emailId Email unique identifier expressed as UUID.
     * @param {String} user User unique identifier expressed as UUID or username.
     * @param {module:api/UsersApi~usersEmailsReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Email}
     */
    usersEmailsRead(emailId, user, callback) {
      let postBody = null;
      // verify the required parameter 'emailId' is set
      if (emailId === undefined || emailId === null) {
        throw new Error("Missing the required parameter 'emailId' when calling usersEmailsRead");
      }
      // verify the required parameter 'user' is set
      if (user === undefined || user === null) {
        throw new Error("Missing the required parameter 'user' when calling usersEmailsRead");
      }

      let pathParams = {
        'email_id': emailId,
        'user': user
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = Email;
      return this.apiClient.callApi(
        '/v1/users/{user}/emails/{email_id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersEmailsReplace operation.
     * @callback module:api/UsersApi~usersEmailsReplaceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Email} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Replace an email address
     * @param {String} emailId Email unique identifier expressed as UUID.
     * @param {String} user User unique identifier expressed as UUID or username.
     * @param {Object} opts Optional parameters
     * @param {module:model/EmailData} [emailData] 
     * @param {module:api/UsersApi~usersEmailsReplaceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Email}
     */
    usersEmailsReplace(emailId, user, opts, callback) {
      opts = opts || {};
      let postBody = opts['emailData'];
      // verify the required parameter 'emailId' is set
      if (emailId === undefined || emailId === null) {
        throw new Error("Missing the required parameter 'emailId' when calling usersEmailsReplace");
      }
      // verify the required parameter 'user' is set
      if (user === undefined || user === null) {
        throw new Error("Missing the required parameter 'user' when calling usersEmailsReplace");
      }

      let pathParams = {
        'email_id': emailId,
        'user': user
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'text/html'];
      let returnType = Email;
      return this.apiClient.callApi(
        '/v1/users/{user}/emails/{email_id}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersEmailsUpdate operation.
     * @callback module:api/UsersApi~usersEmailsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Email} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an email address
     * @param {String} emailId Email unique identifier expressed as UUID.
     * @param {String} user User unique identifier expressed as UUID or username.
     * @param {Object} opts Optional parameters
     * @param {module:model/EmailData} [emailData] 
     * @param {module:api/UsersApi~usersEmailsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Email}
     */
    usersEmailsUpdate(emailId, user, opts, callback) {
      opts = opts || {};
      let postBody = opts['emailData'];
      // verify the required parameter 'emailId' is set
      if (emailId === undefined || emailId === null) {
        throw new Error("Missing the required parameter 'emailId' when calling usersEmailsUpdate");
      }
      // verify the required parameter 'user' is set
      if (user === undefined || user === null) {
        throw new Error("Missing the required parameter 'user' when calling usersEmailsUpdate");
      }

      let pathParams = {
        'email_id': emailId,
        'user': user
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'text/html'];
      let returnType = Email;
      return this.apiClient.callApi(
        '/v1/users/{user}/emails/{email_id}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersList operation.
     * @callback module:api/UsersApi~usersListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/User>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get user list
     * @param {Object} opts Optional parameters
     * @param {String} [limit] Limit user list.
     * @param {String} [offset] Offset when getting users.
     * @param {String} [username] User username.
     * @param {String} [email] User email.
     * @param {String} [ordering] Ordering when getting users.
     * @param {module:api/UsersApi~usersListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/User>}
     */
    usersList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset'],
        'username': opts['username'],
        'email': opts['email'],
        'ordering': opts['ordering']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = [User];
      return this.apiClient.callApi(
        '/v1/users/profiles/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersRead operation.
     * @callback module:api/UsersApi~usersReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/User} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a user
     * @param {String} user Unique identifier expressed as UUID or username.
     * @param {module:api/UsersApi~usersReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/User}
     */
    usersRead(user, callback) {
      let postBody = null;
      // verify the required parameter 'user' is set
      if (user === undefined || user === null) {
        throw new Error("Missing the required parameter 'user' when calling usersRead");
      }

      let pathParams = {
        'user': user
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = User;
      return this.apiClient.callApi(
        '/v1/users/profiles/{user}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersSshKeyList operation.
     * @callback module:api/UsersApi~usersSshKeyListCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve an SSH key
     * @param {String} user User unique identifier expressed as UUID or username.
     * @param {module:api/UsersApi~usersSshKeyListCallback} callback The callback function, accepting three arguments: error, data, response
     */
    usersSshKeyList(user, callback) {
      let postBody = null;
      // verify the required parameter 'user' is set
      if (user === undefined || user === null) {
        throw new Error("Missing the required parameter 'user' when calling usersSshKeyList");
      }

      let pathParams = {
        'user': user
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/users/{user}/ssh-key/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersSshKeyReset operation.
     * @callback module:api/UsersApi~usersSshKeyResetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Recreate an SSH key
     * @param {String} user User unique identifier expressed as UUID or username.
     * @param {module:api/UsersApi~usersSshKeyResetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    usersSshKeyReset(user, callback) {
      let postBody = null;
      // verify the required parameter 'user' is set
      if (user === undefined || user === null) {
        throw new Error("Missing the required parameter 'user' when calling usersSshKeyReset");
      }

      let pathParams = {
        'user': user
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/users/{user}/ssh-key/reset/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersUpdate operation.
     * @callback module:api/UsersApi~usersUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/User} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a user
     * @param {String} user User unique identifier expressed as UUID or username.
     * @param {Object} opts Optional parameters
     * @param {module:model/UserData} [userData] 
     * @param {module:api/UsersApi~usersUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/User}
     */
    usersUpdate(user, opts, callback) {
      opts = opts || {};
      let postBody = opts['userData'];
      // verify the required parameter 'user' is set
      if (user === undefined || user === null) {
        throw new Error("Missing the required parameter 'user' when calling usersUpdate");
      }

      let pathParams = {
        'user': user
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'text/html'];
      let returnType = User;
      return this.apiClient.callApi(
        '/v1/users/profiles/{user}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
