/**
 * IllumiDesk
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import JWT from '../model/JWT';
import JWTData from '../model/JWTData';
import JWTError from '../model/JWTError';
import RefreshJSONWebToken from '../model/RefreshJSONWebToken';
import RefreshJSONWebTokenData from '../model/RefreshJSONWebTokenData';
import RefreshJSONWebTokenError from '../model/RefreshJSONWebTokenError';
import User from '../model/User';
import UserData from '../model/UserData';
import UserError from '../model/UserError';
import VerifyJSONWebToken from '../model/VerifyJSONWebToken';
import VerifyJSONWebTokenData from '../model/VerifyJSONWebTokenData';
import VerifyJSONWebTokenError from '../model/VerifyJSONWebTokenError';

/**
* Auth service.
* @module api/AuthApi
* @version 1.0
*/
export default class AuthApi {

    /**
    * Constructs a new AuthApi. 
    * @alias module:api/AuthApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the authJwtTokenAuth operation.
     * @callback module:api/AuthApi~authJwtTokenAuthCallback
     * @param {String} error Error message, if any.
     * @param {module:model/JWT} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create JSON Web Token (JWT)
     * @param {Object} opts Optional parameters
     * @param {module:model/JWTData} [jwtData] 
     * @param {module:api/AuthApi~authJwtTokenAuthCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/JWT}
     */
    authJwtTokenAuth(opts, callback) {
      opts = opts || {};
      let postBody = opts['jwtData'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'text/html'];
      let returnType = JWT;
      return this.apiClient.callApi(
        '/auth/jwt-token-auth/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the authJwtTokenRefresh operation.
     * @callback module:api/AuthApi~authJwtTokenRefreshCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RefreshJSONWebToken} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Refresh a JSON Web Token (JWT)
     * Obtains a new JSON Web Token using existing user credentials.
     * @param {Object} opts Optional parameters
     * @param {module:model/RefreshJSONWebTokenData} [refreshjwtData] 
     * @param {module:api/AuthApi~authJwtTokenRefreshCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RefreshJSONWebToken}
     */
    authJwtTokenRefresh(opts, callback) {
      opts = opts || {};
      let postBody = opts['refreshjwtData'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'text/html'];
      let returnType = RefreshJSONWebToken;
      return this.apiClient.callApi(
        '/auth/jwt-token-refresh/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the authJwtTokenVerify operation.
     * @callback module:api/AuthApi~authJwtTokenVerifyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VerifyJSONWebToken} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Validate JSON Web Token (JWT)
     * Checks veraciy of token.
     * @param {Object} opts Optional parameters
     * @param {module:model/VerifyJSONWebTokenData} [verifyjwtData] 
     * @param {module:api/AuthApi~authJwtTokenVerifyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VerifyJSONWebToken}
     */
    authJwtTokenVerify(opts, callback) {
      opts = opts || {};
      let postBody = opts['verifyjwtData'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'text/html'];
      let returnType = VerifyJSONWebToken;
      return this.apiClient.callApi(
        '/auth/jwt-token-verify/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the authRegister operation.
     * @callback module:api/AuthApi~authRegisterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/User} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Register a user
     * User registration requires confirming email address to activate user.
     * @param {Object} opts Optional parameters
     * @param {module:model/UserData} [userData] 
     * @param {module:api/AuthApi~authRegisterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/User}
     */
    authRegister(opts, callback) {
      opts = opts || {};
      let postBody = opts['userData'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'text/html'];
      let returnType = User;
      return this.apiClient.callApi(
        '/auth/register/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the oauthLogin operation.
     * @callback module:api/AuthApi~oauthLoginCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/String} provider OAuth2 provider
     * @param {module:api/AuthApi~oauthLoginCallback} callback The callback function, accepting three arguments: error, data, response
     */
    oauthLogin(provider, callback) {
      let postBody = null;
      // verify the required parameter 'provider' is set
      if (provider === undefined || provider === null) {
        throw new Error("Missing the required parameter 'provider' when calling oauthLogin");
      }

      let pathParams = {
        'provider': provider
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/auth/login/{provider}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
