/**
 * IllumiDesk
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import NotFound from '../model/NotFound';
import Notification from '../model/Notification';
import NotificationError from '../model/NotificationError';
import NotificationListUpdateData from '../model/NotificationListUpdateData';
import NotificationSettings from '../model/NotificationSettings';
import NotificationSettingsData from '../model/NotificationSettingsData';
import NotificationSettingsError from '../model/NotificationSettingsError';
import NotificationUpdateData from '../model/NotificationUpdateData';

/**
* Notifications service.
* @module api/NotificationsApi
* @version 1.0
*/
export default class NotificationsApi {

    /**
    * Constructs a new NotificationsApi. 
    * @alias module:api/NotificationsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the notificationRead operation.
     * @callback module:api/NotificationsApi~notificationReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Notification} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a specific notification.
     * @param {String} namespace User or team data.
     * @param {String} notificationId Notification UUID.
     * @param {module:api/NotificationsApi~notificationReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Notification}
     */
    notificationRead(namespace, notificationId, callback) {
      let postBody = null;
      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling notificationRead");
      }
      // verify the required parameter 'notificationId' is set
      if (notificationId === undefined || notificationId === null) {
        throw new Error("Missing the required parameter 'notificationId' when calling notificationRead");
      }

      let pathParams = {
        'namespace': namespace,
        'notification_id': notificationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = Notification;
      return this.apiClient.callApi(
        '/v1/{namespace}/notifications/{notification_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the notificationSettingsCreate operation.
     * @callback module:api/NotificationsApi~notificationSettingsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NotificationSettings} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create global notification settings
     * @param {String} namespace User or team name.
     * @param {module:model/NotificationSettingsData} notificationSettingsData 
     * @param {module:api/NotificationsApi~notificationSettingsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NotificationSettings}
     */
    notificationSettingsCreate(namespace, notificationSettingsData, callback) {
      let postBody = notificationSettingsData;
      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling notificationSettingsCreate");
      }
      // verify the required parameter 'notificationSettingsData' is set
      if (notificationSettingsData === undefined || notificationSettingsData === null) {
        throw new Error("Missing the required parameter 'notificationSettingsData' when calling notificationSettingsCreate");
      }

      let pathParams = {
        'namespace': namespace
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'text/html'];
      let returnType = NotificationSettings;
      return this.apiClient.callApi(
        '/v1/{namespace}/notifications/settings/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the notificationSettingsEntityCreate operation.
     * @callback module:api/NotificationsApi~notificationSettingsEntityCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NotificationSettings} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create global notification settings
     * @param {String} namespace User or team name.
     * @param {module:model/String} entity Entity whose settings should be retrieved.
     * @param {Object} opts Optional parameters
     * @param {module:model/NotificationSettingsData} [notificationSettingsData] 
     * @param {module:api/NotificationsApi~notificationSettingsEntityCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NotificationSettings}
     */
    notificationSettingsEntityCreate(namespace, entity, opts, callback) {
      opts = opts || {};
      let postBody = opts['notificationSettingsData'];
      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling notificationSettingsEntityCreate");
      }
      // verify the required parameter 'entity' is set
      if (entity === undefined || entity === null) {
        throw new Error("Missing the required parameter 'entity' when calling notificationSettingsEntityCreate");
      }

      let pathParams = {
        'namespace': namespace,
        'entity': entity
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'text/html'];
      let returnType = NotificationSettings;
      return this.apiClient.callApi(
        '/v1/{namespace}/notifications/settings/entity/{entity}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the notificationSettingsEntityRead operation.
     * @callback module:api/NotificationsApi~notificationSettingsEntityReadCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/NotificationSettings>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve global notification settings for the authenticated user
     * @param {String} namespace User or team data.
     * @param {module:model/String} entity Entity whose settings should be retrieved.
     * @param {module:api/NotificationsApi~notificationSettingsEntityReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/NotificationSettings>}
     */
    notificationSettingsEntityRead(namespace, entity, callback) {
      let postBody = null;
      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling notificationSettingsEntityRead");
      }
      // verify the required parameter 'entity' is set
      if (entity === undefined || entity === null) {
        throw new Error("Missing the required parameter 'entity' when calling notificationSettingsEntityRead");
      }

      let pathParams = {
        'namespace': namespace,
        'entity': entity
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = [NotificationSettings];
      return this.apiClient.callApi(
        '/v1/{namespace}/notifications/settings/entity/{entity}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the notificationSettingsEntityUpdate operation.
     * @callback module:api/NotificationsApi~notificationSettingsEntityUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NotificationSettings} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modify global notification settings.
     * @param {String} namespace User or team name.
     * @param {module:model/String} entity Entity whose settings should be retrieved.
     * @param {Object} opts Optional parameters
     * @param {module:model/NotificationSettingsData} [notificationSettingsData] 
     * @param {module:api/NotificationsApi~notificationSettingsEntityUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NotificationSettings}
     */
    notificationSettingsEntityUpdate(namespace, entity, opts, callback) {
      opts = opts || {};
      let postBody = opts['notificationSettingsData'];
      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling notificationSettingsEntityUpdate");
      }
      // verify the required parameter 'entity' is set
      if (entity === undefined || entity === null) {
        throw new Error("Missing the required parameter 'entity' when calling notificationSettingsEntityUpdate");
      }

      let pathParams = {
        'namespace': namespace,
        'entity': entity
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'text/html'];
      let returnType = NotificationSettings;
      return this.apiClient.callApi(
        '/v1/{namespace}/notifications/settings/entity/{entity}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the notificationSettingsRead operation.
     * @callback module:api/NotificationsApi~notificationSettingsReadCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/NotificationSettings>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve global notification settings for the authenticated user
     * @param {String} namespace User or team data.
     * @param {module:api/NotificationsApi~notificationSettingsReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/NotificationSettings>}
     */
    notificationSettingsRead(namespace, callback) {
      let postBody = null;
      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling notificationSettingsRead");
      }

      let pathParams = {
        'namespace': namespace
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = [NotificationSettings];
      return this.apiClient.callApi(
        '/v1/{namespace}/notifications/settings/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the notificationSettingsUpdate operation.
     * @callback module:api/NotificationsApi~notificationSettingsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NotificationSettings} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modify global notification settings.
     * @param {String} namespace User or team name.
     * @param {Object} opts Optional parameters
     * @param {module:model/NotificationSettingsData} [notificationSettingsData] 
     * @param {module:api/NotificationsApi~notificationSettingsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NotificationSettings}
     */
    notificationSettingsUpdate(namespace, opts, callback) {
      opts = opts || {};
      let postBody = opts['notificationSettingsData'];
      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling notificationSettingsUpdate");
      }

      let pathParams = {
        'namespace': namespace
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'text/html'];
      let returnType = NotificationSettings;
      return this.apiClient.callApi(
        '/v1/{namespace}/notifications/settings/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the notificationUpdate operation.
     * @callback module:api/NotificationsApi~notificationUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Notification} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Mark a specific notification as either read or unread.
     * @param {String} namespace User or team data.
     * @param {String} notificationId Notification UUID.
     * @param {Object} opts Optional parameters
     * @param {module:model/NotificationUpdateData} [notificationData] 
     * @param {module:api/NotificationsApi~notificationUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Notification}
     */
    notificationUpdate(namespace, notificationId, opts, callback) {
      opts = opts || {};
      let postBody = opts['notificationData'];
      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling notificationUpdate");
      }
      // verify the required parameter 'notificationId' is set
      if (notificationId === undefined || notificationId === null) {
        throw new Error("Missing the required parameter 'notificationId' when calling notificationUpdate");
      }

      let pathParams = {
        'namespace': namespace,
        'notification_id': notificationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'text/html'];
      let returnType = Notification;
      return this.apiClient.callApi(
        '/v1/{namespace}/notifications/{notification_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the notificationsList operation.
     * @callback module:api/NotificationsApi~notificationsListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Notification>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get notifications of all types and entities for the authenticated user.
     * @param {String} namespace User or team data.
     * @param {Object} opts Optional parameters
     * @param {String} [limit] Limit when getting items.
     * @param {String} [offset] Offset when getting items.
     * @param {String} [ordering] Ordering when getting items.
     * @param {Boolean} [read] When true, get only read notifications. When false, get only unread notifications. Default behavior is to return both read and unread.
     * @param {module:api/NotificationsApi~notificationsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Notification>}
     */
    notificationsList(namespace, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling notificationsList");
      }

      let pathParams = {
        'namespace': namespace
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset'],
        'ordering': opts['ordering'],
        'read': opts['read']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = [Notification];
      return this.apiClient.callApi(
        '/v1/{namespace}/notifications/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the notificationsListEntity operation.
     * @callback module:api/NotificationsApi~notificationsListEntityCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Notification>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get notifications of all types and entities for the authenticated user.
     * @param {String} namespace User or team data.
     * @param {module:model/String} entity Entity to filter notifications by.
     * @param {Object} opts Optional parameters
     * @param {String} [limit] Limit when getting items.
     * @param {String} [offset] Offset when getting items.
     * @param {String} [ordering] Ordering when getting items.
     * @param {Boolean} [read] When true, get only read notifications. When false, get only unread notifications. Default behavior is to return both read and unread.
     * @param {module:api/NotificationsApi~notificationsListEntityCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Notification>}
     */
    notificationsListEntity(namespace, entity, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling notificationsListEntity");
      }
      // verify the required parameter 'entity' is set
      if (entity === undefined || entity === null) {
        throw new Error("Missing the required parameter 'entity' when calling notificationsListEntity");
      }

      let pathParams = {
        'namespace': namespace,
        'entity': entity
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset'],
        'ordering': opts['ordering'],
        'read': opts['read']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = [Notification];
      return this.apiClient.callApi(
        '/v1/{namespace}/notifications/entity/{entity}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the notificationsUpdateEntityList operation.
     * @callback module:api/NotificationsApi~notificationsUpdateEntityListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Notification} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Mark a list of notifications as either read or unread.
     * @param {String} namespace User or team name.
     * @param {module:model/String} entity Entity to filter notifications by.
     * @param {module:model/NotificationListUpdateData} notificationData 
     * @param {module:api/NotificationsApi~notificationsUpdateEntityListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Notification}
     */
    notificationsUpdateEntityList(namespace, entity, notificationData, callback) {
      let postBody = notificationData;
      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling notificationsUpdateEntityList");
      }
      // verify the required parameter 'entity' is set
      if (entity === undefined || entity === null) {
        throw new Error("Missing the required parameter 'entity' when calling notificationsUpdateEntityList");
      }
      // verify the required parameter 'notificationData' is set
      if (notificationData === undefined || notificationData === null) {
        throw new Error("Missing the required parameter 'notificationData' when calling notificationsUpdateEntityList");
      }

      let pathParams = {
        'namespace': namespace,
        'entity': entity
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'text/html'];
      let returnType = Notification;
      return this.apiClient.callApi(
        '/v1/{namespace}/notifications/entity/{entity}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the notificationsUpdateList operation.
     * @callback module:api/NotificationsApi~notificationsUpdateListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Notification} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Mark a list of notifications as either read or unread.
     * @param {String} namespace User or team name.
     * @param {module:model/NotificationListUpdateData} notificationData 
     * @param {module:api/NotificationsApi~notificationsUpdateListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Notification}
     */
    notificationsUpdateList(namespace, notificationData, callback) {
      let postBody = notificationData;
      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling notificationsUpdateList");
      }
      // verify the required parameter 'notificationData' is set
      if (notificationData === undefined || notificationData === null) {
        throw new Error("Missing the required parameter 'notificationData' when calling notificationsUpdateList");
      }

      let pathParams = {
        'namespace': namespace
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'text/html'];
      let returnType = Notification;
      return this.apiClient.callApi(
        '/v1/{namespace}/notifications/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
