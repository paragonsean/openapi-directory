/**
 * IllumiDesk
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Group from '../model/Group';
import GroupData from '../model/GroupData';
import GroupError from '../model/GroupError';
import GroupUser from '../model/GroupUser';
import GroupUserError from '../model/GroupUserError';
import Invoice from '../model/Invoice';
import InvoiceItem from '../model/InvoiceItem';
import NotFound from '../model/NotFound';
import Subscription from '../model/Subscription';
import SubscriptionData from '../model/SubscriptionData';
import SubscriptionError from '../model/SubscriptionError';
import Team from '../model/Team';
import TeamData from '../model/TeamData';
import TeamError from '../model/TeamError';

/**
* Teams service.
* @module api/TeamsApi
* @version 1.0
*/
export default class TeamsApi {

    /**
    * Constructs a new TeamsApi. 
    * @alias module:api/TeamsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the teamsBillingInvoiceItemsList operation.
     * @callback module:api/TeamsApi~teamsBillingInvoiceItemsListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/InvoiceItem>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get team invoice items for a given invoice.
     * @param {String} team Team unique identifier expressed as UUID or name.
     * @param {String} invoiceId Invoice id, expressed as UUID.
     * @param {Object} opts Optional parameters
     * @param {String} [limit] Limit when getting items.
     * @param {String} [offset] Offset when getting items.
     * @param {String} [ordering] Ordering when getting items.
     * @param {module:api/TeamsApi~teamsBillingInvoiceItemsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/InvoiceItem>}
     */
    teamsBillingInvoiceItemsList(team, invoiceId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'team' is set
      if (team === undefined || team === null) {
        throw new Error("Missing the required parameter 'team' when calling teamsBillingInvoiceItemsList");
      }
      // verify the required parameter 'invoiceId' is set
      if (invoiceId === undefined || invoiceId === null) {
        throw new Error("Missing the required parameter 'invoiceId' when calling teamsBillingInvoiceItemsList");
      }

      let pathParams = {
        'team': team,
        'invoice_id': invoiceId
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset'],
        'ordering': opts['ordering']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = [InvoiceItem];
      return this.apiClient.callApi(
        '/v1/teams/{team}/billing/invoices/{invoice_id}/invoice-items/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsBillingInvoiceItemsRead operation.
     * @callback module:api/TeamsApi~teamsBillingInvoiceItemsReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InvoiceItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a specific team InvoiceItem.
     * @param {String} team Team unique identifier expressed as UUID or name.
     * @param {String} invoiceId Invoice id, expressed as UUID.
     * @param {String} id InvoiceItem id, expressed as UUID.
     * @param {module:api/TeamsApi~teamsBillingInvoiceItemsReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InvoiceItem}
     */
    teamsBillingInvoiceItemsRead(team, invoiceId, id, callback) {
      let postBody = null;
      // verify the required parameter 'team' is set
      if (team === undefined || team === null) {
        throw new Error("Missing the required parameter 'team' when calling teamsBillingInvoiceItemsRead");
      }
      // verify the required parameter 'invoiceId' is set
      if (invoiceId === undefined || invoiceId === null) {
        throw new Error("Missing the required parameter 'invoiceId' when calling teamsBillingInvoiceItemsRead");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling teamsBillingInvoiceItemsRead");
      }

      let pathParams = {
        'team': team,
        'invoice_id': invoiceId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = InvoiceItem;
      return this.apiClient.callApi(
        '/v1/teams/{team}/billing/invoices/{invoice_id}/invoice-items/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsBillingInvoicesList operation.
     * @callback module:api/TeamsApi~teamsBillingInvoicesListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Invoice>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get team invoices
     * @param {String} team Team unique identifier expressed as UUID or name.
     * @param {Object} opts Optional parameters
     * @param {String} [limit] Limit when getting items.
     * @param {String} [offset] Offset when getting items.
     * @param {module:api/TeamsApi~teamsBillingInvoicesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Invoice>}
     */
    teamsBillingInvoicesList(team, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'team' is set
      if (team === undefined || team === null) {
        throw new Error("Missing the required parameter 'team' when calling teamsBillingInvoicesList");
      }

      let pathParams = {
        'team': team
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = [Invoice];
      return this.apiClient.callApi(
        '/v1/teams/{team}/billing/invoices/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsBillingInvoicesRead operation.
     * @callback module:api/TeamsApi~teamsBillingInvoicesReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Invoice} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get an invoice
     * @param {String} team Team unique identifier expressed as UUID or name.
     * @param {String} id Invoice unique identifier expressed as UUID.
     * @param {module:api/TeamsApi~teamsBillingInvoicesReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Invoice}
     */
    teamsBillingInvoicesRead(team, id, callback) {
      let postBody = null;
      // verify the required parameter 'team' is set
      if (team === undefined || team === null) {
        throw new Error("Missing the required parameter 'team' when calling teamsBillingInvoicesRead");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling teamsBillingInvoicesRead");
      }

      let pathParams = {
        'team': team,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = Invoice;
      return this.apiClient.callApi(
        '/v1/teams/{team}/billing/invoices/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsBillingSubscriptionsCreate operation.
     * @callback module:api/TeamsApi~teamsBillingSubscriptionsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Subscription} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new team subscription
     * @param {String} team Team unique identifier expressed as UUID or name.
     * @param {Object} opts Optional parameters
     * @param {module:model/SubscriptionData} [subscriptionData] 
     * @param {module:api/TeamsApi~teamsBillingSubscriptionsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Subscription}
     */
    teamsBillingSubscriptionsCreate(team, opts, callback) {
      opts = opts || {};
      let postBody = opts['subscriptionData'];
      // verify the required parameter 'team' is set
      if (team === undefined || team === null) {
        throw new Error("Missing the required parameter 'team' when calling teamsBillingSubscriptionsCreate");
      }

      let pathParams = {
        'team': team
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'text/html'];
      let returnType = Subscription;
      return this.apiClient.callApi(
        '/v1/teams/{team}/billing/subscriptions/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsBillingSubscriptionsDelete operation.
     * @callback module:api/TeamsApi~teamsBillingSubscriptionsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a subscription
     * @param {String} team Team unique identifier expressed as UUID or name.
     * @param {String} id Subscription unique identifier expressed as UUID.
     * @param {module:api/TeamsApi~teamsBillingSubscriptionsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    teamsBillingSubscriptionsDelete(team, id, callback) {
      let postBody = null;
      // verify the required parameter 'team' is set
      if (team === undefined || team === null) {
        throw new Error("Missing the required parameter 'team' when calling teamsBillingSubscriptionsDelete");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling teamsBillingSubscriptionsDelete");
      }

      let pathParams = {
        'team': team,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/teams/{team}/billing/subscriptions/{id}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsBillingSubscriptionsList operation.
     * @callback module:api/TeamsApi~teamsBillingSubscriptionsListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Subscription>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get active team subscriptons
     * @param {String} team Team unique identifier expressed as UUID or name.
     * @param {Object} opts Optional parameters
     * @param {String} [limit] Limit when getting items.
     * @param {String} [offset] Offset when getting items.
     * @param {String} [ordering] Ordering when getting items.
     * @param {module:api/TeamsApi~teamsBillingSubscriptionsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Subscription>}
     */
    teamsBillingSubscriptionsList(team, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'team' is set
      if (team === undefined || team === null) {
        throw new Error("Missing the required parameter 'team' when calling teamsBillingSubscriptionsList");
      }

      let pathParams = {
        'team': team
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset'],
        'ordering': opts['ordering']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = [Subscription];
      return this.apiClient.callApi(
        '/v1/teams/{team}/billing/subscriptions/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsBillingSubscriptionsRead operation.
     * @callback module:api/TeamsApi~teamsBillingSubscriptionsReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Subscription} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get team subscriptions
     * @param {String} team Team unique identifier expressed as UUID or name.
     * @param {String} id Unique identifier expressed as UUID.
     * @param {module:api/TeamsApi~teamsBillingSubscriptionsReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Subscription}
     */
    teamsBillingSubscriptionsRead(team, id, callback) {
      let postBody = null;
      // verify the required parameter 'team' is set
      if (team === undefined || team === null) {
        throw new Error("Missing the required parameter 'team' when calling teamsBillingSubscriptionsRead");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling teamsBillingSubscriptionsRead");
      }

      let pathParams = {
        'team': team,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = Subscription;
      return this.apiClient.callApi(
        '/v1/teams/{team}/billing/subscriptions/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsCreate operation.
     * @callback module:api/TeamsApi~teamsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Team} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new team
     * @param {Object} opts Optional parameters
     * @param {module:model/TeamData} [teamData] 
     * @param {module:api/TeamsApi~teamsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Team}
     */
    teamsCreate(opts, callback) {
      opts = opts || {};
      let postBody = opts['teamData'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'text/html'];
      let returnType = Team;
      return this.apiClient.callApi(
        '/v1/teams/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsDelete operation.
     * @callback module:api/TeamsApi~teamsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a team
     * @param {String} team Team unique identifier expressed as UUID or name.
     * @param {module:api/TeamsApi~teamsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    teamsDelete(team, callback) {
      let postBody = null;
      // verify the required parameter 'team' is set
      if (team === undefined || team === null) {
        throw new Error("Missing the required parameter 'team' when calling teamsDelete");
      }

      let pathParams = {
        'team': team
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/teams/{team}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsGroupsAddToGroup operation.
     * @callback module:api/TeamsApi~teamsGroupsAddToGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GroupUser} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add user to group
     * @param {String} team Team unique identifier expressed as UUID or name.
     * @param {String} group Group unique identifier expressed as UUID or name.
     * @param {module:api/TeamsApi~teamsGroupsAddToGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GroupUser}
     */
    teamsGroupsAddToGroup(team, group, callback) {
      let postBody = null;
      // verify the required parameter 'team' is set
      if (team === undefined || team === null) {
        throw new Error("Missing the required parameter 'team' when calling teamsGroupsAddToGroup");
      }
      // verify the required parameter 'group' is set
      if (group === undefined || group === null) {
        throw new Error("Missing the required parameter 'group' when calling teamsGroupsAddToGroup");
      }

      let pathParams = {
        'team': team,
        'group': group
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = GroupUser;
      return this.apiClient.callApi(
        '/v1/teams/{team}/groups/{group}/add/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsGroupsDelete operation.
     * @callback module:api/TeamsApi~teamsGroupsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete team group
     * @param {String} team Team unique identifier expressed as UUID or name.
     * @param {String} group Group unique identifier expressed as UUID or name.
     * @param {module:api/TeamsApi~teamsGroupsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    teamsGroupsDelete(team, group, callback) {
      let postBody = null;
      // verify the required parameter 'team' is set
      if (team === undefined || team === null) {
        throw new Error("Missing the required parameter 'team' when calling teamsGroupsDelete");
      }
      // verify the required parameter 'group' is set
      if (group === undefined || group === null) {
        throw new Error("Missing the required parameter 'group' when calling teamsGroupsDelete");
      }

      let pathParams = {
        'team': team,
        'group': group
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/teams/{team}/groups/{group}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsGroupsList operation.
     * @callback module:api/TeamsApi~teamsGroupsListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Group>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get team groups
     * @param {String} team Team unique identifier expressed as UUID or name.
     * @param {Object} opts Optional parameters
     * @param {String} [limit] Limit when getting data.
     * @param {String} [offset] Offset when getting data.
     * @param {module:api/TeamsApi~teamsGroupsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Group>}
     */
    teamsGroupsList(team, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'team' is set
      if (team === undefined || team === null) {
        throw new Error("Missing the required parameter 'team' when calling teamsGroupsList");
      }

      let pathParams = {
        'team': team
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = [Group];
      return this.apiClient.callApi(
        '/v1/teams/{team}/groups/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsGroupsRead operation.
     * @callback module:api/TeamsApi~teamsGroupsReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Group} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get team group
     * @param {String} team Team unique identifier expressed as UUID or name.
     * @param {String} group Group unique identifier expressed as UUID or name.
     * @param {module:api/TeamsApi~teamsGroupsReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Group}
     */
    teamsGroupsRead(team, group, callback) {
      let postBody = null;
      // verify the required parameter 'team' is set
      if (team === undefined || team === null) {
        throw new Error("Missing the required parameter 'team' when calling teamsGroupsRead");
      }
      // verify the required parameter 'group' is set
      if (group === undefined || group === null) {
        throw new Error("Missing the required parameter 'group' when calling teamsGroupsRead");
      }

      let pathParams = {
        'team': team,
        'group': group
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = Group;
      return this.apiClient.callApi(
        '/v1/teams/{team}/groups/{group}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsGroupsRemoveFromGroup operation.
     * @callback module:api/TeamsApi~teamsGroupsRemoveFromGroupCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * User removed from group
     * @param {String} team Team unique identifier expressed as UUID or name.
     * @param {String} group Group unique identifier expressed as UUID or name.
     * @param {module:api/TeamsApi~teamsGroupsRemoveFromGroupCallback} callback The callback function, accepting three arguments: error, data, response
     */
    teamsGroupsRemoveFromGroup(team, group, callback) {
      let postBody = null;
      // verify the required parameter 'team' is set
      if (team === undefined || team === null) {
        throw new Error("Missing the required parameter 'team' when calling teamsGroupsRemoveFromGroup");
      }
      // verify the required parameter 'group' is set
      if (group === undefined || group === null) {
        throw new Error("Missing the required parameter 'group' when calling teamsGroupsRemoveFromGroup");
      }

      let pathParams = {
        'team': team,
        'group': group
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/teams/{team}/groups/{group}/remove/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsGroupsReplace operation.
     * @callback module:api/TeamsApi~teamsGroupsReplaceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Group} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Patch team group
     * @param {String} team Team unique identifier expressed as UUID or name.
     * @param {String} group Group unique identifier expressed as UUID or name.
     * @param {Object} opts Optional parameters
     * @param {module:model/GroupData} [groupData] 
     * @param {module:api/TeamsApi~teamsGroupsReplaceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Group}
     */
    teamsGroupsReplace(team, group, opts, callback) {
      opts = opts || {};
      let postBody = opts['groupData'];
      // verify the required parameter 'team' is set
      if (team === undefined || team === null) {
        throw new Error("Missing the required parameter 'team' when calling teamsGroupsReplace");
      }
      // verify the required parameter 'group' is set
      if (group === undefined || group === null) {
        throw new Error("Missing the required parameter 'group' when calling teamsGroupsReplace");
      }

      let pathParams = {
        'team': team,
        'group': group
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'text/html'];
      let returnType = Group;
      return this.apiClient.callApi(
        '/v1/teams/{team}/groups/{group}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsGroupsUpdate operation.
     * @callback module:api/TeamsApi~teamsGroupsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Group} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Patch team group
     * @param {String} team Team unique identifier expressed as UUID or name.
     * @param {String} group Group unique identifier expressed as UUID or name.
     * @param {Object} opts Optional parameters
     * @param {module:model/GroupData} [groupData] 
     * @param {module:api/TeamsApi~teamsGroupsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Group}
     */
    teamsGroupsUpdate(team, group, opts, callback) {
      opts = opts || {};
      let postBody = opts['groupData'];
      // verify the required parameter 'team' is set
      if (team === undefined || team === null) {
        throw new Error("Missing the required parameter 'team' when calling teamsGroupsUpdate");
      }
      // verify the required parameter 'group' is set
      if (group === undefined || group === null) {
        throw new Error("Missing the required parameter 'group' when calling teamsGroupsUpdate");
      }

      let pathParams = {
        'team': team,
        'group': group
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'text/html'];
      let returnType = Group;
      return this.apiClient.callApi(
        '/v1/teams/{team}/groups/{group}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsList operation.
     * @callback module:api/TeamsApi~teamsListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Team>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get teams
     * @param {Object} opts Optional parameters
     * @param {String} [limit] Limit when getting data.
     * @param {String} [offset] Offset when getting data.
     * @param {module:api/TeamsApi~teamsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Team>}
     */
    teamsList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = [Team];
      return this.apiClient.callApi(
        '/v1/teams/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsRead operation.
     * @callback module:api/TeamsApi~teamsReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Team} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a team
     * @param {String} team Team unique identifier expressed as UUID or name.
     * @param {module:api/TeamsApi~teamsReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Team}
     */
    teamsRead(team, callback) {
      let postBody = null;
      // verify the required parameter 'team' is set
      if (team === undefined || team === null) {
        throw new Error("Missing the required parameter 'team' when calling teamsRead");
      }

      let pathParams = {
        'team': team
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = Team;
      return this.apiClient.callApi(
        '/v1/teams/{team}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsReplace operation.
     * @callback module:api/TeamsApi~teamsReplaceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Team} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Replace a team
     * @param {String} team Team unique identifier expressed as UUID or name.
     * @param {Object} opts Optional parameters
     * @param {module:model/TeamData} [teamData] 
     * @param {module:api/TeamsApi~teamsReplaceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Team}
     */
    teamsReplace(team, opts, callback) {
      opts = opts || {};
      let postBody = opts['teamData'];
      // verify the required parameter 'team' is set
      if (team === undefined || team === null) {
        throw new Error("Missing the required parameter 'team' when calling teamsReplace");
      }

      let pathParams = {
        'team': team
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'text/html'];
      let returnType = Team;
      return this.apiClient.callApi(
        '/v1/teams/{team}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsUpdate operation.
     * @callback module:api/TeamsApi~teamsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Team} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a team
     * @param {String} team Team unique identifier expressed as UUID or name.
     * @param {Object} opts Optional parameters
     * @param {module:model/TeamData} [teamData] 
     * @param {module:api/TeamsApi~teamsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Team}
     */
    teamsUpdate(team, opts, callback) {
      opts = opts || {};
      let postBody = opts['teamData'];
      // verify the required parameter 'team' is set
      if (team === undefined || team === null) {
        throw new Error("Missing the required parameter 'team' when calling teamsUpdate");
      }

      let pathParams = {
        'team': team
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'text/html'];
      let returnType = Team;
      return this.apiClient.callApi(
        '/v1/teams/{team}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
