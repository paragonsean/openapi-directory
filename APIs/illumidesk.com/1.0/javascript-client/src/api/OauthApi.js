/**
 * IllumiDesk
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Application from '../model/Application';
import ApplicationData from '../model/ApplicationData';
import ApplicationError from '../model/ApplicationError';
import NotFound from '../model/NotFound';

/**
* Oauth service.
* @module api/OauthApi
* @version 1.0
*/
export default class OauthApi {

    /**
    * Constructs a new OauthApi. 
    * @alias module:api/OauthApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the oauthApplicationCreate operation.
     * @callback module:api/OauthApi~oauthApplicationCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Application} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new OAuth2 application
     * @param {String} namespace User or team name.
     * @param {Object} opts Optional parameters
     * @param {module:model/ApplicationData} [applicationData] 
     * @param {module:api/OauthApi~oauthApplicationCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Application}
     */
    oauthApplicationCreate(namespace, opts, callback) {
      opts = opts || {};
      let postBody = opts['applicationData'];
      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling oauthApplicationCreate");
      }

      let pathParams = {
        'namespace': namespace
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'text/html'];
      let returnType = Application;
      return this.apiClient.callApi(
        '/v1/{namespace}/oauth/applications/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the oauthApplicationDelete operation.
     * @callback module:api/OauthApi~oauthApplicationDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an application by id
     * @param {String} namespace User or team name.
     * @param {String} application Application unique identifier expressed as UUID or name.
     * @param {module:api/OauthApi~oauthApplicationDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    oauthApplicationDelete(namespace, application, callback) {
      let postBody = null;
      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling oauthApplicationDelete");
      }
      // verify the required parameter 'application' is set
      if (application === undefined || application === null) {
        throw new Error("Missing the required parameter 'application' when calling oauthApplicationDelete");
      }

      let pathParams = {
        'namespace': namespace,
        'application': application
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/{namespace}/oauth/applications/{application}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the oauthApplicationRead operation.
     * @callback module:api/OauthApi~oauthApplicationReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Application} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get an application by id
     * @param {String} namespace User or team name.
     * @param {String} application Application unique identifier expressed as UUID or name.
     * @param {module:api/OauthApi~oauthApplicationReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Application}
     */
    oauthApplicationRead(namespace, application, callback) {
      let postBody = null;
      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling oauthApplicationRead");
      }
      // verify the required parameter 'application' is set
      if (application === undefined || application === null) {
        throw new Error("Missing the required parameter 'application' when calling oauthApplicationRead");
      }

      let pathParams = {
        'namespace': namespace,
        'application': application
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = Application;
      return this.apiClient.callApi(
        '/v1/{namespace}/oauth/applications/{application}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the oauthApplicationReplace operation.
     * @callback module:api/OauthApi~oauthApplicationReplaceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Application} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Replace an application by id
     * @param {String} namespace User or team name.
     * @param {String} application Application unique identifier expressed as UUID or name.
     * @param {Object} opts Optional parameters
     * @param {module:model/ApplicationData} [oauthApplicationData] 
     * @param {module:api/OauthApi~oauthApplicationReplaceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Application}
     */
    oauthApplicationReplace(namespace, application, opts, callback) {
      opts = opts || {};
      let postBody = opts['oauthApplicationData'];
      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling oauthApplicationReplace");
      }
      // verify the required parameter 'application' is set
      if (application === undefined || application === null) {
        throw new Error("Missing the required parameter 'application' when calling oauthApplicationReplace");
      }

      let pathParams = {
        'namespace': namespace,
        'application': application
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'text/html'];
      let returnType = Application;
      return this.apiClient.callApi(
        '/v1/{namespace}/oauth/applications/{application}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the oauthApplicationUpdate operation.
     * @callback module:api/OauthApi~oauthApplicationUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Application} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an application by id
     * @param {String} namespace User or team name.
     * @param {String} application Application unique identifier expressed as UUID or name.
     * @param {Object} opts Optional parameters
     * @param {module:model/ApplicationData} [applicationData] 
     * @param {module:api/OauthApi~oauthApplicationUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Application}
     */
    oauthApplicationUpdate(namespace, application, opts, callback) {
      opts = opts || {};
      let postBody = opts['applicationData'];
      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling oauthApplicationUpdate");
      }
      // verify the required parameter 'application' is set
      if (application === undefined || application === null) {
        throw new Error("Missing the required parameter 'application' when calling oauthApplicationUpdate");
      }

      let pathParams = {
        'namespace': namespace,
        'application': application
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'text/html'];
      let returnType = Application;
      return this.apiClient.callApi(
        '/v1/{namespace}/oauth/applications/{application}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the oauthApplicationsList operation.
     * @callback module:api/OauthApi~oauthApplicationsListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Application>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve oauth applications
     * @param {String} namespace User or team name.
     * @param {Object} opts Optional parameters
     * @param {String} [limit] Set limit when retrieving items.
     * @param {String} [offset] Offset when retrieving items.
     * @param {String} [ordering] Set order when retrieving items.
     * @param {module:api/OauthApi~oauthApplicationsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Application>}
     */
    oauthApplicationsList(namespace, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling oauthApplicationsList");
      }

      let pathParams = {
        'namespace': namespace
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset'],
        'ordering': opts['ordering']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = [Application];
      return this.apiClient.callApi(
        '/v1/{namespace}/oauth/applications/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
