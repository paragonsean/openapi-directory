/**
 * IllumiDesk
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The NotificationListUpdateData model module.
 * @module model/NotificationListUpdateData
 * @version 1.0
 */
class NotificationListUpdateData {
    /**
     * Constructs a new <code>NotificationListUpdateData</code>.
     * @alias module:model/NotificationListUpdateData
     * @param notifications {Array.<String>} An array of notification IDs to update.
     * @param read {Boolean} Mark the notification as either read or unread
     */
    constructor(notifications, read) { 
        
        NotificationListUpdateData.initialize(this, notifications, read);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, notifications, read) { 
        obj['notifications'] = notifications;
        obj['read'] = read;
    }

    /**
     * Constructs a <code>NotificationListUpdateData</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/NotificationListUpdateData} obj Optional instance to populate.
     * @return {module:model/NotificationListUpdateData} The populated <code>NotificationListUpdateData</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new NotificationListUpdateData();

            if (data.hasOwnProperty('notifications')) {
                obj['notifications'] = ApiClient.convertToType(data['notifications'], ['String']);
            }
            if (data.hasOwnProperty('read')) {
                obj['read'] = ApiClient.convertToType(data['read'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>NotificationListUpdateData</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>NotificationListUpdateData</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of NotificationListUpdateData.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['notifications'])) {
            throw new Error("Expected the field `notifications` to be an array in the JSON data but got " + data['notifications']);
        }

        return true;
    }


}

NotificationListUpdateData.RequiredProperties = ["notifications", "read"];

/**
 * An array of notification IDs to update.
 * @member {Array.<String>} notifications
 */
NotificationListUpdateData.prototype['notifications'] = undefined;

/**
 * Mark the notification as either read or unread
 * @member {Boolean} read
 */
NotificationListUpdateData.prototype['read'] = undefined;






export default NotificationListUpdateData;

