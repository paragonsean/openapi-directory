/**
 * IllumiDesk
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Card model module.
 * @module model/Card
 * @version 1.0
 */
class Card {
    /**
     * Constructs a new <code>Card</code>.
     * @alias module:model/Card
     */
    constructor() { 
        
        Card.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Card</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Card} obj Optional instance to populate.
     * @return {module:model/Card} The populated <code>Card</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Card();

            if (data.hasOwnProperty('address_city')) {
                obj['address_city'] = ApiClient.convertToType(data['address_city'], 'String');
            }
            if (data.hasOwnProperty('address_country')) {
                obj['address_country'] = ApiClient.convertToType(data['address_country'], 'String');
            }
            if (data.hasOwnProperty('address_line1')) {
                obj['address_line1'] = ApiClient.convertToType(data['address_line1'], 'String');
            }
            if (data.hasOwnProperty('address_line1_check')) {
                obj['address_line1_check'] = ApiClient.convertToType(data['address_line1_check'], 'String');
            }
            if (data.hasOwnProperty('address_line2')) {
                obj['address_line2'] = ApiClient.convertToType(data['address_line2'], 'String');
            }
            if (data.hasOwnProperty('address_state')) {
                obj['address_state'] = ApiClient.convertToType(data['address_state'], 'String');
            }
            if (data.hasOwnProperty('address_zip')) {
                obj['address_zip'] = ApiClient.convertToType(data['address_zip'], 'String');
            }
            if (data.hasOwnProperty('address_zip_check')) {
                obj['address_zip_check'] = ApiClient.convertToType(data['address_zip_check'], 'String');
            }
            if (data.hasOwnProperty('brand')) {
                obj['brand'] = ApiClient.convertToType(data['brand'], 'String');
            }
            if (data.hasOwnProperty('created')) {
                obj['created'] = ApiClient.convertToType(data['created'], 'String');
            }
            if (data.hasOwnProperty('customer')) {
                obj['customer'] = ApiClient.convertToType(data['customer'], 'String');
            }
            if (data.hasOwnProperty('cvc_check')) {
                obj['cvc_check'] = ApiClient.convertToType(data['cvc_check'], 'String');
            }
            if (data.hasOwnProperty('exp_month')) {
                obj['exp_month'] = ApiClient.convertToType(data['exp_month'], 'Number');
            }
            if (data.hasOwnProperty('exp_year')) {
                obj['exp_year'] = ApiClient.convertToType(data['exp_year'], 'Number');
            }
            if (data.hasOwnProperty('fingerprint')) {
                obj['fingerprint'] = ApiClient.convertToType(data['fingerprint'], 'String');
            }
            if (data.hasOwnProperty('funding')) {
                obj['funding'] = ApiClient.convertToType(data['funding'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('last4')) {
                obj['last4'] = ApiClient.convertToType(data['last4'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('stripe_id')) {
                obj['stripe_id'] = ApiClient.convertToType(data['stripe_id'], 'String');
            }
            if (data.hasOwnProperty('token')) {
                obj['token'] = ApiClient.convertToType(data['token'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Card</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Card</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['address_city'] && !(typeof data['address_city'] === 'string' || data['address_city'] instanceof String)) {
            throw new Error("Expected the field `address_city` to be a primitive type in the JSON string but got " + data['address_city']);
        }
        // ensure the json data is a string
        if (data['address_country'] && !(typeof data['address_country'] === 'string' || data['address_country'] instanceof String)) {
            throw new Error("Expected the field `address_country` to be a primitive type in the JSON string but got " + data['address_country']);
        }
        // ensure the json data is a string
        if (data['address_line1'] && !(typeof data['address_line1'] === 'string' || data['address_line1'] instanceof String)) {
            throw new Error("Expected the field `address_line1` to be a primitive type in the JSON string but got " + data['address_line1']);
        }
        // ensure the json data is a string
        if (data['address_line1_check'] && !(typeof data['address_line1_check'] === 'string' || data['address_line1_check'] instanceof String)) {
            throw new Error("Expected the field `address_line1_check` to be a primitive type in the JSON string but got " + data['address_line1_check']);
        }
        // ensure the json data is a string
        if (data['address_line2'] && !(typeof data['address_line2'] === 'string' || data['address_line2'] instanceof String)) {
            throw new Error("Expected the field `address_line2` to be a primitive type in the JSON string but got " + data['address_line2']);
        }
        // ensure the json data is a string
        if (data['address_state'] && !(typeof data['address_state'] === 'string' || data['address_state'] instanceof String)) {
            throw new Error("Expected the field `address_state` to be a primitive type in the JSON string but got " + data['address_state']);
        }
        // ensure the json data is a string
        if (data['address_zip'] && !(typeof data['address_zip'] === 'string' || data['address_zip'] instanceof String)) {
            throw new Error("Expected the field `address_zip` to be a primitive type in the JSON string but got " + data['address_zip']);
        }
        // ensure the json data is a string
        if (data['address_zip_check'] && !(typeof data['address_zip_check'] === 'string' || data['address_zip_check'] instanceof String)) {
            throw new Error("Expected the field `address_zip_check` to be a primitive type in the JSON string but got " + data['address_zip_check']);
        }
        // ensure the json data is a string
        if (data['brand'] && !(typeof data['brand'] === 'string' || data['brand'] instanceof String)) {
            throw new Error("Expected the field `brand` to be a primitive type in the JSON string but got " + data['brand']);
        }
        // ensure the json data is a string
        if (data['created'] && !(typeof data['created'] === 'string' || data['created'] instanceof String)) {
            throw new Error("Expected the field `created` to be a primitive type in the JSON string but got " + data['created']);
        }
        // ensure the json data is a string
        if (data['customer'] && !(typeof data['customer'] === 'string' || data['customer'] instanceof String)) {
            throw new Error("Expected the field `customer` to be a primitive type in the JSON string but got " + data['customer']);
        }
        // ensure the json data is a string
        if (data['cvc_check'] && !(typeof data['cvc_check'] === 'string' || data['cvc_check'] instanceof String)) {
            throw new Error("Expected the field `cvc_check` to be a primitive type in the JSON string but got " + data['cvc_check']);
        }
        // ensure the json data is a string
        if (data['fingerprint'] && !(typeof data['fingerprint'] === 'string' || data['fingerprint'] instanceof String)) {
            throw new Error("Expected the field `fingerprint` to be a primitive type in the JSON string but got " + data['fingerprint']);
        }
        // ensure the json data is a string
        if (data['funding'] && !(typeof data['funding'] === 'string' || data['funding'] instanceof String)) {
            throw new Error("Expected the field `funding` to be a primitive type in the JSON string but got " + data['funding']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['last4'] && !(typeof data['last4'] === 'string' || data['last4'] instanceof String)) {
            throw new Error("Expected the field `last4` to be a primitive type in the JSON string but got " + data['last4']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['stripe_id'] && !(typeof data['stripe_id'] === 'string' || data['stripe_id'] instanceof String)) {
            throw new Error("Expected the field `stripe_id` to be a primitive type in the JSON string but got " + data['stripe_id']);
        }
        // ensure the json data is a string
        if (data['token'] && !(typeof data['token'] === 'string' || data['token'] instanceof String)) {
            throw new Error("Expected the field `token` to be a primitive type in the JSON string but got " + data['token']);
        }

        return true;
    }


}



/**
 * Address city.
 * @member {String} address_city
 */
Card.prototype['address_city'] = undefined;

/**
 * Address country.
 * @member {String} address_country
 */
Card.prototype['address_country'] = undefined;

/**
 * Address line 1.
 * @member {String} address_line1
 */
Card.prototype['address_line1'] = undefined;

/**
 * Address line 1 check, when processing card.
 * @member {String} address_line1_check
 */
Card.prototype['address_line1_check'] = undefined;

/**
 * Address line 2.
 * @member {String} address_line2
 */
Card.prototype['address_line2'] = undefined;

/**
 * Address state.
 * @member {String} address_state
 */
Card.prototype['address_state'] = undefined;

/**
 * Address zip code.
 * @member {String} address_zip
 */
Card.prototype['address_zip'] = undefined;

/**
 * Address check, when processing card.
 * @member {String} address_zip_check
 */
Card.prototype['address_zip_check'] = undefined;

/**
 * Credit or debit card brand.
 * @member {String} brand
 */
Card.prototype['brand'] = undefined;

/**
 * Card date and time creation.
 * @member {String} created
 */
Card.prototype['created'] = undefined;

/**
 * Card customer.
 * @member {String} customer
 */
Card.prototype['customer'] = undefined;

/**
 * Security code check.
 * @member {String} cvc_check
 */
Card.prototype['cvc_check'] = undefined;

/**
 * Card expiration month.
 * @member {Number} exp_month
 */
Card.prototype['exp_month'] = undefined;

/**
 * Card expiration year.
 * @member {Number} exp_year
 */
Card.prototype['exp_year'] = undefined;

/**
 * Card fingerprint.
 * @member {String} fingerprint
 */
Card.prototype['fingerprint'] = undefined;

/**
 * Funding.
 * @member {String} funding
 */
Card.prototype['funding'] = undefined;

/**
 * Card unique identifier, expressed as UUID.
 * @member {String} id
 */
Card.prototype['id'] = undefined;

/**
 * Last four digits of credit or debit card.
 * @member {String} last4
 */
Card.prototype['last4'] = undefined;

/**
 * Card name.
 * @member {String} name
 */
Card.prototype['name'] = undefined;

/**
 * Unique stripe identifier.
 * @member {String} stripe_id
 */
Card.prototype['stripe_id'] = undefined;

/**
 * Card unique token.
 * @member {String} token
 */
Card.prototype['token'] = undefined;






export default Card;

