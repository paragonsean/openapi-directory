/**
 * IllumiDesk
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ServerError model module.
 * @module model/ServerError
 * @version 1.0
 */
class ServerError {
    /**
     * Constructs a new <code>ServerError</code>.
     * @alias module:model/ServerError
     */
    constructor() { 
        
        ServerError.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ServerError</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ServerError} obj Optional instance to populate.
     * @return {module:model/ServerError} The populated <code>ServerError</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ServerError();

            if (data.hasOwnProperty('config')) {
                obj['config'] = ApiClient.convertToType(data['config'], ['String']);
            }
            if (data.hasOwnProperty('connected')) {
                obj['connected'] = ApiClient.convertToType(data['connected'], ['String']);
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], ['String']);
            }
            if (data.hasOwnProperty('endpoint')) {
                obj['endpoint'] = ApiClient.convertToType(data['endpoint'], ['String']);
            }
            if (data.hasOwnProperty('host')) {
                obj['host'] = ApiClient.convertToType(data['host'], ['String']);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], ['String']);
            }
            if (data.hasOwnProperty('image_name')) {
                obj['image_name'] = ApiClient.convertToType(data['image_name'], ['String']);
            }
            if (data.hasOwnProperty('logs_url')) {
                obj['logs_url'] = ApiClient.convertToType(data['logs_url'], ['String']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], ['String']);
            }
            if (data.hasOwnProperty('non_field_errors')) {
                obj['non_field_errors'] = ApiClient.convertToType(data['non_field_errors'], ['String']);
            }
            if (data.hasOwnProperty('server_size')) {
                obj['server_size'] = ApiClient.convertToType(data['server_size'], ['String']);
            }
            if (data.hasOwnProperty('startup_script')) {
                obj['startup_script'] = ApiClient.convertToType(data['startup_script'], ['String']);
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], ['String']);
            }
            if (data.hasOwnProperty('status_url')) {
                obj['status_url'] = ApiClient.convertToType(data['status_url'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ServerError</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ServerError</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['config'])) {
            throw new Error("Expected the field `config` to be an array in the JSON data but got " + data['config']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['connected'])) {
            throw new Error("Expected the field `connected` to be an array in the JSON data but got " + data['connected']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['created_at'])) {
            throw new Error("Expected the field `created_at` to be an array in the JSON data but got " + data['created_at']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['endpoint'])) {
            throw new Error("Expected the field `endpoint` to be an array in the JSON data but got " + data['endpoint']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['host'])) {
            throw new Error("Expected the field `host` to be an array in the JSON data but got " + data['host']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['id'])) {
            throw new Error("Expected the field `id` to be an array in the JSON data but got " + data['id']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['image_name'])) {
            throw new Error("Expected the field `image_name` to be an array in the JSON data but got " + data['image_name']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['logs_url'])) {
            throw new Error("Expected the field `logs_url` to be an array in the JSON data but got " + data['logs_url']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['name'])) {
            throw new Error("Expected the field `name` to be an array in the JSON data but got " + data['name']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['non_field_errors'])) {
            throw new Error("Expected the field `non_field_errors` to be an array in the JSON data but got " + data['non_field_errors']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['server_size'])) {
            throw new Error("Expected the field `server_size` to be an array in the JSON data but got " + data['server_size']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['startup_script'])) {
            throw new Error("Expected the field `startup_script` to be an array in the JSON data but got " + data['startup_script']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['status'])) {
            throw new Error("Expected the field `status` to be an array in the JSON data but got " + data['status']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['status_url'])) {
            throw new Error("Expected the field `status_url` to be an array in the JSON data but got " + data['status_url']);
        }

        return true;
    }


}



/**
 * config field errors.
 * @member {Array.<String>} config
 */
ServerError.prototype['config'] = undefined;

/**
 * connected field errors.
 * @member {Array.<String>} connected
 */
ServerError.prototype['connected'] = undefined;

/**
 * created_at field errors.
 * @member {Array.<String>} created_at
 */
ServerError.prototype['created_at'] = undefined;

/**
 * endpoint field errors.
 * @member {Array.<String>} endpoint
 */
ServerError.prototype['endpoint'] = undefined;

/**
 * host field errors.
 * @member {Array.<String>} host
 */
ServerError.prototype['host'] = undefined;

/**
 * id field errors.
 * @member {Array.<String>} id
 */
ServerError.prototype['id'] = undefined;

/**
 * image_name field errors.
 * @member {Array.<String>} image_name
 */
ServerError.prototype['image_name'] = undefined;

/**
 * logs_url field errors.
 * @member {Array.<String>} logs_url
 */
ServerError.prototype['logs_url'] = undefined;

/**
 * name field errors.
 * @member {Array.<String>} name
 */
ServerError.prototype['name'] = undefined;

/**
 * Errors not connected to any field.
 * @member {Array.<String>} non_field_errors
 */
ServerError.prototype['non_field_errors'] = undefined;

/**
 * server_size field errors.
 * @member {Array.<String>} server_size
 */
ServerError.prototype['server_size'] = undefined;

/**
 * startup_script field errors.
 * @member {Array.<String>} startup_script
 */
ServerError.prototype['startup_script'] = undefined;

/**
 * status field errors.
 * @member {Array.<String>} status
 */
ServerError.prototype['status'] = undefined;

/**
 * status_url field errors.
 * @member {Array.<String>} status_url
 */
ServerError.prototype['status_url'] = undefined;






export default ServerError;

