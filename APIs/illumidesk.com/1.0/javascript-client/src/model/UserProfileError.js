/**
 * IllumiDesk
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The UserProfileError model module.
 * @module model/UserProfileError
 * @version 1.0
 */
class UserProfileError {
    /**
     * Constructs a new <code>UserProfileError</code>.
     * @alias module:model/UserProfileError
     */
    constructor() { 
        
        UserProfileError.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>UserProfileError</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UserProfileError} obj Optional instance to populate.
     * @return {module:model/UserProfileError} The populated <code>UserProfileError</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UserProfileError();

            if (data.hasOwnProperty('bio')) {
                obj['bio'] = ApiClient.convertToType(data['bio'], ['String']);
            }
            if (data.hasOwnProperty('company')) {
                obj['company'] = ApiClient.convertToType(data['company'], ['String']);
            }
            if (data.hasOwnProperty('location')) {
                obj['location'] = ApiClient.convertToType(data['location'], ['String']);
            }
            if (data.hasOwnProperty('non_field_errors')) {
                obj['non_field_errors'] = ApiClient.convertToType(data['non_field_errors'], ['String']);
            }
            if (data.hasOwnProperty('timezone')) {
                obj['timezone'] = ApiClient.convertToType(data['timezone'], ['String']);
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UserProfileError</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UserProfileError</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['bio'])) {
            throw new Error("Expected the field `bio` to be an array in the JSON data but got " + data['bio']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['company'])) {
            throw new Error("Expected the field `company` to be an array in the JSON data but got " + data['company']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['location'])) {
            throw new Error("Expected the field `location` to be an array in the JSON data but got " + data['location']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['non_field_errors'])) {
            throw new Error("Expected the field `non_field_errors` to be an array in the JSON data but got " + data['non_field_errors']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['timezone'])) {
            throw new Error("Expected the field `timezone` to be an array in the JSON data but got " + data['timezone']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['url'])) {
            throw new Error("Expected the field `url` to be an array in the JSON data but got " + data['url']);
        }

        return true;
    }


}



/**
 * Bio field errors.
 * @member {Array.<String>} bio
 */
UserProfileError.prototype['bio'] = undefined;

/**
 * Company field errors.
 * @member {Array.<String>} company
 */
UserProfileError.prototype['company'] = undefined;

/**
 * Location field errors.
 * @member {Array.<String>} location
 */
UserProfileError.prototype['location'] = undefined;

/**
 * Errors not connected to any field.
 * @member {Array.<String>} non_field_errors
 */
UserProfileError.prototype['non_field_errors'] = undefined;

/**
 * Timezone field errors.
 * @member {Array.<String>} timezone
 */
UserProfileError.prototype['timezone'] = undefined;

/**
 * URL field errors.
 * @member {Array.<String>} url
 */
UserProfileError.prototype['url'] = undefined;






export default UserProfileError;

