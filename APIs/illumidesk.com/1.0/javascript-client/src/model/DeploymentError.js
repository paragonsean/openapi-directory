/**
 * IllumiDesk
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The DeploymentError model module.
 * @module model/DeploymentError
 * @version 1.0
 */
class DeploymentError {
    /**
     * Constructs a new <code>DeploymentError</code>.
     * @alias module:model/DeploymentError
     */
    constructor() { 
        
        DeploymentError.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DeploymentError</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DeploymentError} obj Optional instance to populate.
     * @return {module:model/DeploymentError} The populated <code>DeploymentError</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DeploymentError();

            if (data.hasOwnProperty('config')) {
                obj['config'] = ApiClient.convertToType(data['config'], ['String']);
            }
            if (data.hasOwnProperty('framework')) {
                obj['framework'] = ApiClient.convertToType(data['framework'], ['String']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], ['String']);
            }
            if (data.hasOwnProperty('non_field_errors')) {
                obj['non_field_errors'] = ApiClient.convertToType(data['non_field_errors'], ['String']);
            }
            if (data.hasOwnProperty('runtime')) {
                obj['runtime'] = ApiClient.convertToType(data['runtime'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DeploymentError</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DeploymentError</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['config'])) {
            throw new Error("Expected the field `config` to be an array in the JSON data but got " + data['config']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['framework'])) {
            throw new Error("Expected the field `framework` to be an array in the JSON data but got " + data['framework']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['name'])) {
            throw new Error("Expected the field `name` to be an array in the JSON data but got " + data['name']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['non_field_errors'])) {
            throw new Error("Expected the field `non_field_errors` to be an array in the JSON data but got " + data['non_field_errors']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['runtime'])) {
            throw new Error("Expected the field `runtime` to be an array in the JSON data but got " + data['runtime']);
        }

        return true;
    }


}



/**
 * Invalid deployment configuration.
 * @member {Array.<String>} config
 */
DeploymentError.prototype['config'] = undefined;

/**
 * Invalid framework.
 * @member {Array.<String>} framework
 */
DeploymentError.prototype['framework'] = undefined;

/**
 * Invalid deployment name.
 * @member {Array.<String>} name
 */
DeploymentError.prototype['name'] = undefined;

/**
 * Errors not connected to any field.
 * @member {Array.<String>} non_field_errors
 */
DeploymentError.prototype['non_field_errors'] = undefined;

/**
 * Invalid runtime.
 * @member {Array.<String>} runtime
 */
DeploymentError.prototype['runtime'] = undefined;






export default DeploymentError;

