/**
 * IllumiDesk
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Plan model module.
 * @module model/Plan
 * @version 1.0
 */
class Plan {
    /**
     * Constructs a new <code>Plan</code>.
     * @alias module:model/Plan
     * @param amount {Number} Amount (cost/price) of plan.
     * @param interval {String} Interval for plan, such as montly or yearly.
     * @param intervalCount {Number} 
     * @param name {String} Plan name.
     */
    constructor(amount, interval, intervalCount, name) { 
        
        Plan.initialize(this, amount, interval, intervalCount, name);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, amount, interval, intervalCount, name) { 
        obj['amount'] = amount;
        obj['interval'] = interval;
        obj['interval_count'] = intervalCount;
        obj['name'] = name;
    }

    /**
     * Constructs a <code>Plan</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Plan} obj Optional instance to populate.
     * @return {module:model/Plan} The populated <code>Plan</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Plan();

            if (data.hasOwnProperty('amount')) {
                obj['amount'] = ApiClient.convertToType(data['amount'], 'Number');
            }
            if (data.hasOwnProperty('created')) {
                obj['created'] = ApiClient.convertToType(data['created'], 'String');
            }
            if (data.hasOwnProperty('currency')) {
                obj['currency'] = ApiClient.convertToType(data['currency'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('interval')) {
                obj['interval'] = ApiClient.convertToType(data['interval'], 'String');
            }
            if (data.hasOwnProperty('interval_count')) {
                obj['interval_count'] = ApiClient.convertToType(data['interval_count'], 'Number');
            }
            if (data.hasOwnProperty('livemode')) {
                obj['livemode'] = ApiClient.convertToType(data['livemode'], 'Boolean');
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = ApiClient.convertToType(data['metadata'], Object);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('statement_descriptor')) {
                obj['statement_descriptor'] = ApiClient.convertToType(data['statement_descriptor'], 'String');
            }
            if (data.hasOwnProperty('stripe_id')) {
                obj['stripe_id'] = ApiClient.convertToType(data['stripe_id'], 'String');
            }
            if (data.hasOwnProperty('trial_period_days')) {
                obj['trial_period_days'] = ApiClient.convertToType(data['trial_period_days'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Plan</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Plan</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Plan.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['created'] && !(typeof data['created'] === 'string' || data['created'] instanceof String)) {
            throw new Error("Expected the field `created` to be a primitive type in the JSON string but got " + data['created']);
        }
        // ensure the json data is a string
        if (data['currency'] && !(typeof data['currency'] === 'string' || data['currency'] instanceof String)) {
            throw new Error("Expected the field `currency` to be a primitive type in the JSON string but got " + data['currency']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['interval'] && !(typeof data['interval'] === 'string' || data['interval'] instanceof String)) {
            throw new Error("Expected the field `interval` to be a primitive type in the JSON string but got " + data['interval']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['statement_descriptor'] && !(typeof data['statement_descriptor'] === 'string' || data['statement_descriptor'] instanceof String)) {
            throw new Error("Expected the field `statement_descriptor` to be a primitive type in the JSON string but got " + data['statement_descriptor']);
        }
        // ensure the json data is a string
        if (data['stripe_id'] && !(typeof data['stripe_id'] === 'string' || data['stripe_id'] instanceof String)) {
            throw new Error("Expected the field `stripe_id` to be a primitive type in the JSON string but got " + data['stripe_id']);
        }

        return true;
    }


}

Plan.RequiredProperties = ["amount", "interval", "interval_count", "name"];

/**
 * Amount (cost/price) of plan.
 * @member {Number} amount
 */
Plan.prototype['amount'] = undefined;

/**
 * Date and time when plan was created.
 * @member {String} created
 */
Plan.prototype['created'] = undefined;

/**
 * Currency used to specify amount.
 * @member {String} currency
 */
Plan.prototype['currency'] = undefined;

/**
 * Plan unique identifier as UUID.
 * @member {String} id
 */
Plan.prototype['id'] = undefined;

/**
 * Interval for plan, such as montly or yearly.
 * @member {String} interval
 */
Plan.prototype['interval'] = undefined;

/**
 * 
 * @member {Number} interval_count
 */
Plan.prototype['interval_count'] = undefined;

/**
 * Boolean to determine whether plan is live, or not.
 * @member {Boolean} livemode
 */
Plan.prototype['livemode'] = undefined;

/**
 * Optional meta data object.
 * @member {Object} metadata
 */
Plan.prototype['metadata'] = undefined;

/**
 * Plan name.
 * @member {String} name
 */
Plan.prototype['name'] = undefined;

/**
 * Statement that describes plan to users.
 * @member {String} statement_descriptor
 */
Plan.prototype['statement_descriptor'] = undefined;

/**
 * Stripe identifier to identify entity charging for plans.
 * @member {String} stripe_id
 */
Plan.prototype['stripe_id'] = undefined;

/**
 * Number of days for plan trial, used for try and buy campaigns.
 * @member {Number} trial_period_days
 */
Plan.prototype['trial_period_days'] = undefined;






export default Plan;

