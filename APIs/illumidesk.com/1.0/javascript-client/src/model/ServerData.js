/**
 * IllumiDesk
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ServerConfig from './ServerConfig';

/**
 * The ServerData model module.
 * @module model/ServerData
 * @version 1.0
 */
class ServerData {
    /**
     * Constructs a new <code>ServerData</code>.
     * @alias module:model/ServerData
     * @param name {String} Server name.
     */
    constructor(name) { 
        
        ServerData.initialize(this, name);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name) { 
        obj['name'] = name;
    }

    /**
     * Constructs a <code>ServerData</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ServerData} obj Optional instance to populate.
     * @return {module:model/ServerData} The populated <code>ServerData</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ServerData();

            if (data.hasOwnProperty('config')) {
                obj['config'] = ServerConfig.constructFromObject(data['config']);
            }
            if (data.hasOwnProperty('connected')) {
                obj['connected'] = ApiClient.convertToType(data['connected'], ['String']);
            }
            if (data.hasOwnProperty('host')) {
                obj['host'] = ApiClient.convertToType(data['host'], 'String');
            }
            if (data.hasOwnProperty('image_name')) {
                obj['image_name'] = ApiClient.convertToType(data['image_name'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('server_size')) {
                obj['server_size'] = ApiClient.convertToType(data['server_size'], 'String');
            }
            if (data.hasOwnProperty('startup_script')) {
                obj['startup_script'] = ApiClient.convertToType(data['startup_script'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ServerData</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ServerData</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ServerData.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `config`
        if (data['config']) { // data not null
          ServerConfig.validateJSON(data['config']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['connected'])) {
            throw new Error("Expected the field `connected` to be an array in the JSON data but got " + data['connected']);
        }
        // ensure the json data is a string
        if (data['host'] && !(typeof data['host'] === 'string' || data['host'] instanceof String)) {
            throw new Error("Expected the field `host` to be a primitive type in the JSON string but got " + data['host']);
        }
        // ensure the json data is a string
        if (data['image_name'] && !(typeof data['image_name'] === 'string' || data['image_name'] instanceof String)) {
            throw new Error("Expected the field `image_name` to be a primitive type in the JSON string but got " + data['image_name']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['server_size'] && !(typeof data['server_size'] === 'string' || data['server_size'] instanceof String)) {
            throw new Error("Expected the field `server_size` to be a primitive type in the JSON string but got " + data['server_size']);
        }
        // ensure the json data is a string
        if (data['startup_script'] && !(typeof data['startup_script'] === 'string' || data['startup_script'] instanceof String)) {
            throw new Error("Expected the field `startup_script` to be a primitive type in the JSON string but got " + data['startup_script']);
        }

        return true;
    }


}

ServerData.RequiredProperties = ["name"];

/**
 * @member {module:model/ServerConfig} config
 */
ServerData.prototype['config'] = undefined;

/**
 * Array of other servers the server is connected to.
 * @member {Array.<String>} connected
 */
ServerData.prototype['connected'] = undefined;

/**
 * External host IPv4 address or hostname.
 * @member {String} host
 */
ServerData.prototype['host'] = undefined;

/**
 * Image name.
 * @member {String} image_name
 */
ServerData.prototype['image_name'] = undefined;

/**
 * Server name.
 * @member {String} name
 */
ServerData.prototype['name'] = undefined;

/**
 * Server size unique identifier.
 * @member {String} server_size
 */
ServerData.prototype['server_size'] = undefined;

/**
 * Startup script to run when launching server.
 * @member {String} startup_script
 */
ServerData.prototype['startup_script'] = undefined;






export default ServerData;

