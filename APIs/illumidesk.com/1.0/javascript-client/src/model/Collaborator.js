/**
 * IllumiDesk
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Collaborator model module.
 * @module model/Collaborator
 * @version 1.0
 */
class Collaborator {
    /**
     * Constructs a new <code>Collaborator</code>.
     * @alias module:model/Collaborator
     */
    constructor() { 
        
        Collaborator.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Collaborator</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Collaborator} obj Optional instance to populate.
     * @return {module:model/Collaborator} The populated <code>Collaborator</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Collaborator();

            if (data.hasOwnProperty('email')) {
                obj['email'] = ApiClient.convertToType(data['email'], 'String');
            }
            if (data.hasOwnProperty('first_name')) {
                obj['first_name'] = ApiClient.convertToType(data['first_name'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('joined')) {
                obj['joined'] = ApiClient.convertToType(data['joined'], 'String');
            }
            if (data.hasOwnProperty('last_name')) {
                obj['last_name'] = ApiClient.convertToType(data['last_name'], 'String');
            }
            if (data.hasOwnProperty('owner')) {
                obj['owner'] = ApiClient.convertToType(data['owner'], 'Boolean');
            }
            if (data.hasOwnProperty('permissions')) {
                obj['permissions'] = ApiClient.convertToType(data['permissions'], ['String']);
            }
            if (data.hasOwnProperty('project')) {
                obj['project'] = ApiClient.convertToType(data['project'], 'String');
            }
            if (data.hasOwnProperty('user')) {
                obj['user'] = ApiClient.convertToType(data['user'], 'String');
            }
            if (data.hasOwnProperty('username')) {
                obj['username'] = ApiClient.convertToType(data['username'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Collaborator</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Collaborator</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['email'] && !(typeof data['email'] === 'string' || data['email'] instanceof String)) {
            throw new Error("Expected the field `email` to be a primitive type in the JSON string but got " + data['email']);
        }
        // ensure the json data is a string
        if (data['first_name'] && !(typeof data['first_name'] === 'string' || data['first_name'] instanceof String)) {
            throw new Error("Expected the field `first_name` to be a primitive type in the JSON string but got " + data['first_name']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['joined'] && !(typeof data['joined'] === 'string' || data['joined'] instanceof String)) {
            throw new Error("Expected the field `joined` to be a primitive type in the JSON string but got " + data['joined']);
        }
        // ensure the json data is a string
        if (data['last_name'] && !(typeof data['last_name'] === 'string' || data['last_name'] instanceof String)) {
            throw new Error("Expected the field `last_name` to be a primitive type in the JSON string but got " + data['last_name']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['permissions'])) {
            throw new Error("Expected the field `permissions` to be an array in the JSON data but got " + data['permissions']);
        }
        // ensure the json data is a string
        if (data['project'] && !(typeof data['project'] === 'string' || data['project'] instanceof String)) {
            throw new Error("Expected the field `project` to be a primitive type in the JSON string but got " + data['project']);
        }
        // ensure the json data is a string
        if (data['user'] && !(typeof data['user'] === 'string' || data['user'] instanceof String)) {
            throw new Error("Expected the field `user` to be a primitive type in the JSON string but got " + data['user']);
        }
        // ensure the json data is a string
        if (data['username'] && !(typeof data['username'] === 'string' || data['username'] instanceof String)) {
            throw new Error("Expected the field `username` to be a primitive type in the JSON string but got " + data['username']);
        }

        return true;
    }


}



/**
 * Collaborator's valid email address.
 * @member {String} email
 */
Collaborator.prototype['email'] = undefined;

/**
 * Collaborator's first name.
 * @member {String} first_name
 */
Collaborator.prototype['first_name'] = undefined;

/**
 * Collaborator unique identifier in UUID format.
 * @member {String} id
 */
Collaborator.prototype['id'] = undefined;

/**
 * Date time of when collaborator joined.
 * @member {String} joined
 */
Collaborator.prototype['joined'] = undefined;

/**
 * Collaborator's last name.
 * @member {String} last_name
 */
Collaborator.prototype['last_name'] = undefined;

/**
 * Boolean that states whether collaborator is project owner, or not. 
 * @member {Boolean} owner
 */
Collaborator.prototype['owner'] = undefined;

/**
 * Collaborator permissions. Project creators are assigned owner priviledges by default. Permissions are write and read. 
 * @member {Array.<module:model/Collaborator.PermissionsEnum>} permissions
 */
Collaborator.prototype['permissions'] = undefined;

/**
 * Collaborator project name.
 * @member {String} project
 */
Collaborator.prototype['project'] = undefined;

/**
 * Collaborator user name.
 * @member {String} user
 */
Collaborator.prototype['user'] = undefined;

/**
 * Collaborator's user name. This must be a valid user name within the system. 
 * @member {String} username
 */
Collaborator.prototype['username'] = undefined;





/**
 * Allowed values for the <code>permissions</code> property.
 * @enum {String}
 * @readonly
 */
Collaborator['PermissionsEnum'] = {

    /**
     * value: "write_project"
     * @const
     */
    "write_project": "write_project",

    /**
     * value: "read_project"
     * @const
     */
    "read_project": "read_project"
};



export default Collaborator;

