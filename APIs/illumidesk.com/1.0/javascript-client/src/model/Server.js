/**
 * IllumiDesk
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Server model module.
 * @module model/Server
 * @version 1.0
 */
class Server {
    /**
     * Constructs a new <code>Server</code>.
     * @alias module:model/Server
     * @param name {String} Server name.
     */
    constructor(name) { 
        
        Server.initialize(this, name);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name) { 
        obj['name'] = name;
    }

    /**
     * Constructs a <code>Server</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Server} obj Optional instance to populate.
     * @return {module:model/Server} The populated <code>Server</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Server();

            if (data.hasOwnProperty('config')) {
                obj['config'] = ApiClient.convertToType(data['config'], Object);
            }
            if (data.hasOwnProperty('connected')) {
                obj['connected'] = ApiClient.convertToType(data['connected'], ['String']);
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'String');
            }
            if (data.hasOwnProperty('created_by')) {
                obj['created_by'] = ApiClient.convertToType(data['created_by'], 'String');
            }
            if (data.hasOwnProperty('endpoint')) {
                obj['endpoint'] = ApiClient.convertToType(data['endpoint'], 'String');
            }
            if (data.hasOwnProperty('host')) {
                obj['host'] = ApiClient.convertToType(data['host'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('image_name')) {
                obj['image_name'] = ApiClient.convertToType(data['image_name'], 'String');
            }
            if (data.hasOwnProperty('logs_url')) {
                obj['logs_url'] = ApiClient.convertToType(data['logs_url'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('project')) {
                obj['project'] = ApiClient.convertToType(data['project'], 'String');
            }
            if (data.hasOwnProperty('server_size')) {
                obj['server_size'] = ApiClient.convertToType(data['server_size'], 'String');
            }
            if (data.hasOwnProperty('startup_script')) {
                obj['startup_script'] = ApiClient.convertToType(data['startup_script'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('status_url')) {
                obj['status_url'] = ApiClient.convertToType(data['status_url'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Server</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Server</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Server.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['connected'])) {
            throw new Error("Expected the field `connected` to be an array in the JSON data but got " + data['connected']);
        }
        // ensure the json data is a string
        if (data['created_at'] && !(typeof data['created_at'] === 'string' || data['created_at'] instanceof String)) {
            throw new Error("Expected the field `created_at` to be a primitive type in the JSON string but got " + data['created_at']);
        }
        // ensure the json data is a string
        if (data['created_by'] && !(typeof data['created_by'] === 'string' || data['created_by'] instanceof String)) {
            throw new Error("Expected the field `created_by` to be a primitive type in the JSON string but got " + data['created_by']);
        }
        // ensure the json data is a string
        if (data['endpoint'] && !(typeof data['endpoint'] === 'string' || data['endpoint'] instanceof String)) {
            throw new Error("Expected the field `endpoint` to be a primitive type in the JSON string but got " + data['endpoint']);
        }
        // ensure the json data is a string
        if (data['host'] && !(typeof data['host'] === 'string' || data['host'] instanceof String)) {
            throw new Error("Expected the field `host` to be a primitive type in the JSON string but got " + data['host']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['image_name'] && !(typeof data['image_name'] === 'string' || data['image_name'] instanceof String)) {
            throw new Error("Expected the field `image_name` to be a primitive type in the JSON string but got " + data['image_name']);
        }
        // ensure the json data is a string
        if (data['logs_url'] && !(typeof data['logs_url'] === 'string' || data['logs_url'] instanceof String)) {
            throw new Error("Expected the field `logs_url` to be a primitive type in the JSON string but got " + data['logs_url']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['project'] && !(typeof data['project'] === 'string' || data['project'] instanceof String)) {
            throw new Error("Expected the field `project` to be a primitive type in the JSON string but got " + data['project']);
        }
        // ensure the json data is a string
        if (data['server_size'] && !(typeof data['server_size'] === 'string' || data['server_size'] instanceof String)) {
            throw new Error("Expected the field `server_size` to be a primitive type in the JSON string but got " + data['server_size']);
        }
        // ensure the json data is a string
        if (data['startup_script'] && !(typeof data['startup_script'] === 'string' || data['startup_script'] instanceof String)) {
            throw new Error("Expected the field `startup_script` to be a primitive type in the JSON string but got " + data['startup_script']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['status_url'] && !(typeof data['status_url'] === 'string' || data['status_url'] instanceof String)) {
            throw new Error("Expected the field `status_url` to be a primitive type in the JSON string but got " + data['status_url']);
        }

        return true;
    }


}

Server.RequiredProperties = ["name"];

/**
 * Server configuration option. Values are jupyter, restful and cron.
 * @member {Object} config
 */
Server.prototype['config'] = undefined;

/**
 * Array that represents what other servers the server is connected to.
 * @member {Array.<String>} connected
 */
Server.prototype['connected'] = undefined;

/**
 * Date and time when server was created.
 * @member {String} created_at
 */
Server.prototype['created_at'] = undefined;

/**
 * User that created server.
 * @member {String} created_by
 */
Server.prototype['created_by'] = undefined;

/**
 * Server endpoint path.
 * @member {String} endpoint
 */
Server.prototype['endpoint'] = undefined;

/**
 * Value that represents user defined host, otherwise known as BYON (Bring Your Own Node). 
 * @member {String} host
 */
Server.prototype['host'] = undefined;

/**
 * Server unique identifier in UUID format.
 * @member {String} id
 */
Server.prototype['id'] = undefined;

/**
 * Server image source, such as 3blades/tensorflow-notebook. 
 * @member {String} image_name
 */
Server.prototype['image_name'] = undefined;

/**
 * A WebSocket URL for streaming stdout and stderr logs from the server. 
 * @member {String} logs_url
 */
Server.prototype['logs_url'] = undefined;

/**
 * Server name.
 * @member {String} name
 */
Server.prototype['name'] = undefined;

/**
 * Project name.
 * @member {String} project
 */
Server.prototype['project'] = undefined;

/**
 * Server size unique identifier.
 * @member {String} server_size
 */
Server.prototype['server_size'] = undefined;

/**
 * Optional startup script to use when launching server.
 * @member {String} startup_script
 */
Server.prototype['startup_script'] = undefined;

/**
 * Server status, such as Running or Error.
 * @member {module:model/Server.StatusEnum} status
 */
Server.prototype['status'] = undefined;

/**
 * A WebSocket URL for listening to server status changes. 
 * @member {String} status_url
 */
Server.prototype['status_url'] = undefined;





/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
Server['StatusEnum'] = {

    /**
     * value: "Stopped"
     * @const
     */
    "Stopped": "Stopped",

    /**
     * value: "Running"
     * @const
     */
    "Running": "Running",

    /**
     * value: "Error"
     * @const
     */
    "Error": "Error"
};



export default Server;

