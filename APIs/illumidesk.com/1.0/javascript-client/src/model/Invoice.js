/**
 * IllumiDesk
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Invoice model module.
 * @module model/Invoice
 * @version 1.0
 */
class Invoice {
    /**
     * Constructs a new <code>Invoice</code>.
     * @alias module:model/Invoice
     * @param amountDue {Number} Amount due set in invoice.
     * @param created {String} Date and time when invoice was created.
     * @param currency {String} Currency used in invoice.
     * @param customer {String} Customer name.
     * @param invoiceDate {String} Invoice issue date.
     * @param periodEnd {String} Invoice end period.
     * @param periodStart {String} Invoice start period.
     * @param recieptNumber {String} Invoice receipt number.
     * @param startingBalance {Number} Invoice starting balance.
     * @param stripeId {String} Stripe account identifier.
     * @param subtotal {Number} Invoice sub total.
     * @param total {Number} Invoice total.
     */
    constructor(amountDue, created, currency, customer, invoiceDate, periodEnd, periodStart, recieptNumber, startingBalance, stripeId, subtotal, total) { 
        
        Invoice.initialize(this, amountDue, created, currency, customer, invoiceDate, periodEnd, periodStart, recieptNumber, startingBalance, stripeId, subtotal, total);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, amountDue, created, currency, customer, invoiceDate, periodEnd, periodStart, recieptNumber, startingBalance, stripeId, subtotal, total) { 
        obj['amount_due'] = amountDue;
        obj['created'] = created;
        obj['currency'] = currency;
        obj['customer'] = customer;
        obj['invoice_date'] = invoiceDate;
        obj['period_end'] = periodEnd;
        obj['period_start'] = periodStart;
        obj['reciept_number'] = recieptNumber;
        obj['starting_balance'] = startingBalance;
        obj['stripe_id'] = stripeId;
        obj['subtotal'] = subtotal;
        obj['total'] = total;
    }

    /**
     * Constructs a <code>Invoice</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Invoice} obj Optional instance to populate.
     * @return {module:model/Invoice} The populated <code>Invoice</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Invoice();

            if (data.hasOwnProperty('amount_due')) {
                obj['amount_due'] = ApiClient.convertToType(data['amount_due'], 'Number');
            }
            if (data.hasOwnProperty('application_fee')) {
                obj['application_fee'] = ApiClient.convertToType(data['application_fee'], 'Number');
            }
            if (data.hasOwnProperty('attempt_count')) {
                obj['attempt_count'] = ApiClient.convertToType(data['attempt_count'], 'Number');
            }
            if (data.hasOwnProperty('attempted')) {
                obj['attempted'] = ApiClient.convertToType(data['attempted'], 'Boolean');
            }
            if (data.hasOwnProperty('closed')) {
                obj['closed'] = ApiClient.convertToType(data['closed'], 'Boolean');
            }
            if (data.hasOwnProperty('created')) {
                obj['created'] = ApiClient.convertToType(data['created'], 'String');
            }
            if (data.hasOwnProperty('currency')) {
                obj['currency'] = ApiClient.convertToType(data['currency'], 'String');
            }
            if (data.hasOwnProperty('customer')) {
                obj['customer'] = ApiClient.convertToType(data['customer'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('invoice_date')) {
                obj['invoice_date'] = ApiClient.convertToType(data['invoice_date'], 'String');
            }
            if (data.hasOwnProperty('livemode')) {
                obj['livemode'] = ApiClient.convertToType(data['livemode'], 'Boolean');
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = ApiClient.convertToType(data['metadata'], Object);
            }
            if (data.hasOwnProperty('next_payment_attempt')) {
                obj['next_payment_attempt'] = ApiClient.convertToType(data['next_payment_attempt'], 'String');
            }
            if (data.hasOwnProperty('paid')) {
                obj['paid'] = ApiClient.convertToType(data['paid'], 'Boolean');
            }
            if (data.hasOwnProperty('period_end')) {
                obj['period_end'] = ApiClient.convertToType(data['period_end'], 'String');
            }
            if (data.hasOwnProperty('period_start')) {
                obj['period_start'] = ApiClient.convertToType(data['period_start'], 'String');
            }
            if (data.hasOwnProperty('reciept_number')) {
                obj['reciept_number'] = ApiClient.convertToType(data['reciept_number'], 'String');
            }
            if (data.hasOwnProperty('starting_balance')) {
                obj['starting_balance'] = ApiClient.convertToType(data['starting_balance'], 'Number');
            }
            if (data.hasOwnProperty('statement_descriptor')) {
                obj['statement_descriptor'] = ApiClient.convertToType(data['statement_descriptor'], 'String');
            }
            if (data.hasOwnProperty('stripe_id')) {
                obj['stripe_id'] = ApiClient.convertToType(data['stripe_id'], 'String');
            }
            if (data.hasOwnProperty('subscription')) {
                obj['subscription'] = ApiClient.convertToType(data['subscription'], 'String');
            }
            if (data.hasOwnProperty('subtotal')) {
                obj['subtotal'] = ApiClient.convertToType(data['subtotal'], 'Number');
            }
            if (data.hasOwnProperty('tax')) {
                obj['tax'] = ApiClient.convertToType(data['tax'], 'Number');
            }
            if (data.hasOwnProperty('total')) {
                obj['total'] = ApiClient.convertToType(data['total'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Invoice</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Invoice</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Invoice.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['created'] && !(typeof data['created'] === 'string' || data['created'] instanceof String)) {
            throw new Error("Expected the field `created` to be a primitive type in the JSON string but got " + data['created']);
        }
        // ensure the json data is a string
        if (data['currency'] && !(typeof data['currency'] === 'string' || data['currency'] instanceof String)) {
            throw new Error("Expected the field `currency` to be a primitive type in the JSON string but got " + data['currency']);
        }
        // ensure the json data is a string
        if (data['customer'] && !(typeof data['customer'] === 'string' || data['customer'] instanceof String)) {
            throw new Error("Expected the field `customer` to be a primitive type in the JSON string but got " + data['customer']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['invoice_date'] && !(typeof data['invoice_date'] === 'string' || data['invoice_date'] instanceof String)) {
            throw new Error("Expected the field `invoice_date` to be a primitive type in the JSON string but got " + data['invoice_date']);
        }
        // ensure the json data is a string
        if (data['next_payment_attempt'] && !(typeof data['next_payment_attempt'] === 'string' || data['next_payment_attempt'] instanceof String)) {
            throw new Error("Expected the field `next_payment_attempt` to be a primitive type in the JSON string but got " + data['next_payment_attempt']);
        }
        // ensure the json data is a string
        if (data['period_end'] && !(typeof data['period_end'] === 'string' || data['period_end'] instanceof String)) {
            throw new Error("Expected the field `period_end` to be a primitive type in the JSON string but got " + data['period_end']);
        }
        // ensure the json data is a string
        if (data['period_start'] && !(typeof data['period_start'] === 'string' || data['period_start'] instanceof String)) {
            throw new Error("Expected the field `period_start` to be a primitive type in the JSON string but got " + data['period_start']);
        }
        // ensure the json data is a string
        if (data['reciept_number'] && !(typeof data['reciept_number'] === 'string' || data['reciept_number'] instanceof String)) {
            throw new Error("Expected the field `reciept_number` to be a primitive type in the JSON string but got " + data['reciept_number']);
        }
        // ensure the json data is a string
        if (data['statement_descriptor'] && !(typeof data['statement_descriptor'] === 'string' || data['statement_descriptor'] instanceof String)) {
            throw new Error("Expected the field `statement_descriptor` to be a primitive type in the JSON string but got " + data['statement_descriptor']);
        }
        // ensure the json data is a string
        if (data['stripe_id'] && !(typeof data['stripe_id'] === 'string' || data['stripe_id'] instanceof String)) {
            throw new Error("Expected the field `stripe_id` to be a primitive type in the JSON string but got " + data['stripe_id']);
        }
        // ensure the json data is a string
        if (data['subscription'] && !(typeof data['subscription'] === 'string' || data['subscription'] instanceof String)) {
            throw new Error("Expected the field `subscription` to be a primitive type in the JSON string but got " + data['subscription']);
        }

        return true;
    }


}

Invoice.RequiredProperties = ["amount_due", "created", "currency", "customer", "invoice_date", "period_end", "period_start", "reciept_number", "starting_balance", "stripe_id", "subtotal", "total"];

/**
 * Amount due set in invoice.
 * @member {Number} amount_due
 */
Invoice.prototype['amount_due'] = undefined;

/**
 * Application fee set in invoice.
 * @member {Number} application_fee
 */
Invoice.prototype['application_fee'] = undefined;

/**
 * Number of attempts to deliver invoice.
 * @member {Number} attempt_count
 */
Invoice.prototype['attempt_count'] = undefined;

/**
 * Boolean to determine whether delivery attempt executed, or not.
 * @member {Boolean} attempted
 */
Invoice.prototype['attempted'] = undefined;

/**
 * Invoice closed, or pending.
 * @member {Boolean} closed
 */
Invoice.prototype['closed'] = undefined;

/**
 * Date and time when invoice was created.
 * @member {String} created
 */
Invoice.prototype['created'] = undefined;

/**
 * Currency used in invoice.
 * @member {String} currency
 */
Invoice.prototype['currency'] = undefined;

/**
 * Customer name.
 * @member {String} customer
 */
Invoice.prototype['customer'] = undefined;

/**
 * Invoice description.
 * @member {String} description
 */
Invoice.prototype['description'] = undefined;

/**
 * Invoice unique identifier expressed as UUID.
 * @member {String} id
 */
Invoice.prototype['id'] = undefined;

/**
 * Invoice issue date.
 * @member {String} invoice_date
 */
Invoice.prototype['invoice_date'] = undefined;

/**
 * Boolean that determines whether invoice is live, or not.
 * @member {Boolean} livemode
 */
Invoice.prototype['livemode'] = undefined;

/**
 * Optional metadata object of invoice.
 * @member {Object} metadata
 */
Invoice.prototype['metadata'] = undefined;

/**
 * Next payment attempt.
 * @member {String} next_payment_attempt
 */
Invoice.prototype['next_payment_attempt'] = undefined;

/**
 * Determines whether invoice has been paid, or not.
 * @member {Boolean} paid
 */
Invoice.prototype['paid'] = undefined;

/**
 * Invoice end period.
 * @member {String} period_end
 */
Invoice.prototype['period_end'] = undefined;

/**
 * Invoice start period.
 * @member {String} period_start
 */
Invoice.prototype['period_start'] = undefined;

/**
 * Invoice receipt number.
 * @member {String} reciept_number
 */
Invoice.prototype['reciept_number'] = undefined;

/**
 * Invoice starting balance.
 * @member {Number} starting_balance
 */
Invoice.prototype['starting_balance'] = undefined;

/**
 * Invoice statement descriptor.
 * @member {String} statement_descriptor
 */
Invoice.prototype['statement_descriptor'] = undefined;

/**
 * Stripe account identifier.
 * @member {String} stripe_id
 */
Invoice.prototype['stripe_id'] = undefined;

/**
 * Suscription name.
 * @member {String} subscription
 */
Invoice.prototype['subscription'] = undefined;

/**
 * Invoice sub total.
 * @member {Number} subtotal
 */
Invoice.prototype['subtotal'] = undefined;

/**
 * Tax, if applicable.
 * @member {Number} tax
 */
Invoice.prototype['tax'] = undefined;

/**
 * Invoice total.
 * @member {Number} total
 */
Invoice.prototype['total'] = undefined;






export default Invoice;

