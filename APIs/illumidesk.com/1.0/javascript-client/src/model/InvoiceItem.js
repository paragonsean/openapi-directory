/**
 * IllumiDesk
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The InvoiceItem model module.
 * @module model/InvoiceItem
 * @version 1.0
 */
class InvoiceItem {
    /**
     * Constructs a new <code>InvoiceItem</code>.
     * @alias module:model/InvoiceItem
     * @param amount {Number} Amount the the invoice item will be billed for.
     * @param created {String} Date and time when invoice was created.
     * @param currency {String} Currency used in invoice.
     * @param invoice {String} Invoice unique identifier expressed as UUID.
     * @param invoiceDate {String} Date the item was added to the invoice.
     * @param quantity {Number} Number of units for this item.
     * @param stripeId {String} Stripe account identifier.
     */
    constructor(amount, created, currency, invoice, invoiceDate, quantity, stripeId) { 
        
        InvoiceItem.initialize(this, amount, created, currency, invoice, invoiceDate, quantity, stripeId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, amount, created, currency, invoice, invoiceDate, quantity, stripeId) { 
        obj['amount'] = amount;
        obj['created'] = created;
        obj['currency'] = currency;
        obj['invoice'] = invoice;
        obj['invoice_date'] = invoiceDate;
        obj['quantity'] = quantity;
        obj['stripe_id'] = stripeId;
    }

    /**
     * Constructs a <code>InvoiceItem</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/InvoiceItem} obj Optional instance to populate.
     * @return {module:model/InvoiceItem} The populated <code>InvoiceItem</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new InvoiceItem();

            if (data.hasOwnProperty('amount')) {
                obj['amount'] = ApiClient.convertToType(data['amount'], 'Number');
            }
            if (data.hasOwnProperty('created')) {
                obj['created'] = ApiClient.convertToType(data['created'], 'String');
            }
            if (data.hasOwnProperty('currency')) {
                obj['currency'] = ApiClient.convertToType(data['currency'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('invoice')) {
                obj['invoice'] = ApiClient.convertToType(data['invoice'], 'String');
            }
            if (data.hasOwnProperty('invoice_date')) {
                obj['invoice_date'] = ApiClient.convertToType(data['invoice_date'], 'String');
            }
            if (data.hasOwnProperty('livemode')) {
                obj['livemode'] = ApiClient.convertToType(data['livemode'], 'Boolean');
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = ApiClient.convertToType(data['metadata'], Object);
            }
            if (data.hasOwnProperty('proration')) {
                obj['proration'] = ApiClient.convertToType(data['proration'], 'Boolean');
            }
            if (data.hasOwnProperty('quantity')) {
                obj['quantity'] = ApiClient.convertToType(data['quantity'], 'Number');
            }
            if (data.hasOwnProperty('stripe_id')) {
                obj['stripe_id'] = ApiClient.convertToType(data['stripe_id'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>InvoiceItem</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>InvoiceItem</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of InvoiceItem.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['created'] && !(typeof data['created'] === 'string' || data['created'] instanceof String)) {
            throw new Error("Expected the field `created` to be a primitive type in the JSON string but got " + data['created']);
        }
        // ensure the json data is a string
        if (data['currency'] && !(typeof data['currency'] === 'string' || data['currency'] instanceof String)) {
            throw new Error("Expected the field `currency` to be a primitive type in the JSON string but got " + data['currency']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['invoice'] && !(typeof data['invoice'] === 'string' || data['invoice'] instanceof String)) {
            throw new Error("Expected the field `invoice` to be a primitive type in the JSON string but got " + data['invoice']);
        }
        // ensure the json data is a string
        if (data['invoice_date'] && !(typeof data['invoice_date'] === 'string' || data['invoice_date'] instanceof String)) {
            throw new Error("Expected the field `invoice_date` to be a primitive type in the JSON string but got " + data['invoice_date']);
        }
        // ensure the json data is a string
        if (data['stripe_id'] && !(typeof data['stripe_id'] === 'string' || data['stripe_id'] instanceof String)) {
            throw new Error("Expected the field `stripe_id` to be a primitive type in the JSON string but got " + data['stripe_id']);
        }

        return true;
    }


}

InvoiceItem.RequiredProperties = ["amount", "created", "currency", "invoice", "invoice_date", "quantity", "stripe_id"];

/**
 * Amount the the invoice item will be billed for.
 * @member {Number} amount
 */
InvoiceItem.prototype['amount'] = undefined;

/**
 * Date and time when invoice was created.
 * @member {String} created
 */
InvoiceItem.prototype['created'] = undefined;

/**
 * Currency used in invoice.
 * @member {String} currency
 */
InvoiceItem.prototype['currency'] = undefined;

/**
 * Item description.
 * @member {String} description
 */
InvoiceItem.prototype['description'] = undefined;

/**
 * InvoiceItem unique identifier expressed as UUID.
 * @member {String} id
 */
InvoiceItem.prototype['id'] = undefined;

/**
 * Invoice unique identifier expressed as UUID.
 * @member {String} invoice
 */
InvoiceItem.prototype['invoice'] = undefined;

/**
 * Date the item was added to the invoice.
 * @member {String} invoice_date
 */
InvoiceItem.prototype['invoice_date'] = undefined;

/**
 * Boolean that determines whether invoice is live, or not.
 * @member {Boolean} livemode
 */
InvoiceItem.prototype['livemode'] = undefined;

/**
 * Optional metadata object of invoice.
 * @member {Object} metadata
 */
InvoiceItem.prototype['metadata'] = undefined;

/**
 * Whether or not the items cost will be prorated for the billing period.
 * @member {Boolean} proration
 */
InvoiceItem.prototype['proration'] = undefined;

/**
 * Number of units for this item.
 * @member {Number} quantity
 */
InvoiceItem.prototype['quantity'] = undefined;

/**
 * Stripe account identifier.
 * @member {String} stripe_id
 */
InvoiceItem.prototype['stripe_id'] = undefined;






export default InvoiceItem;

