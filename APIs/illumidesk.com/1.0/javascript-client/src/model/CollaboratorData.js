/**
 * IllumiDesk
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CollaboratorData model module.
 * @module model/CollaboratorData
 * @version 1.0
 */
class CollaboratorData {
    /**
     * Constructs a new <code>CollaboratorData</code>.
     * @alias module:model/CollaboratorData
     * @param member {String} Project member username.
     * @param permissions {module:model/CollaboratorData.PermissionsEnum} Permissions assigned to collaborator.
     */
    constructor(member, permissions) { 
        
        CollaboratorData.initialize(this, member, permissions);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, member, permissions) { 
        obj['member'] = member;
        obj['permissions'] = permissions;
    }

    /**
     * Constructs a <code>CollaboratorData</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CollaboratorData} obj Optional instance to populate.
     * @return {module:model/CollaboratorData} The populated <code>CollaboratorData</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CollaboratorData();

            if (data.hasOwnProperty('member')) {
                obj['member'] = ApiClient.convertToType(data['member'], 'String');
            }
            if (data.hasOwnProperty('owner')) {
                obj['owner'] = ApiClient.convertToType(data['owner'], 'Boolean');
            }
            if (data.hasOwnProperty('permissions')) {
                obj['permissions'] = ApiClient.convertToType(data['permissions'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CollaboratorData</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CollaboratorData</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CollaboratorData.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['member'] && !(typeof data['member'] === 'string' || data['member'] instanceof String)) {
            throw new Error("Expected the field `member` to be a primitive type in the JSON string but got " + data['member']);
        }
        // ensure the json data is a string
        if (data['permissions'] && !(typeof data['permissions'] === 'string' || data['permissions'] instanceof String)) {
            throw new Error("Expected the field `permissions` to be a primitive type in the JSON string but got " + data['permissions']);
        }

        return true;
    }


}

CollaboratorData.RequiredProperties = ["member", "permissions"];

/**
 * Project member username.
 * @member {String} member
 */
CollaboratorData.prototype['member'] = undefined;

/**
 * Project owner. Defaults to false.
 * @member {Boolean} owner
 */
CollaboratorData.prototype['owner'] = undefined;

/**
 * Permissions assigned to collaborator.
 * @member {module:model/CollaboratorData.PermissionsEnum} permissions
 */
CollaboratorData.prototype['permissions'] = undefined;





/**
 * Allowed values for the <code>permissions</code> property.
 * @enum {String}
 * @readonly
 */
CollaboratorData['PermissionsEnum'] = {

    /**
     * value: "read_project"
     * @const
     */
    "read_project": "read_project",

    /**
     * value: "write_project"
     * @const
     */
    "write_project": "write_project"
};



export default CollaboratorData;

