/**
 * IllumiDesk
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The NotificationSettings model module.
 * @module model/NotificationSettings
 * @version 1.0
 */
class NotificationSettings {
    /**
     * Constructs a new <code>NotificationSettings</code>.
     * @alias module:model/NotificationSettings
     * @param emailsEnabled {Boolean} Turn emails on or off.
     * @param enabled {Boolean} Turn notifications on or off entirely.
     */
    constructor(emailsEnabled, enabled) { 
        
        NotificationSettings.initialize(this, emailsEnabled, enabled);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, emailsEnabled, enabled) { 
        obj['emails_enabled'] = emailsEnabled;
        obj['enabled'] = enabled;
    }

    /**
     * Constructs a <code>NotificationSettings</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/NotificationSettings} obj Optional instance to populate.
     * @return {module:model/NotificationSettings} The populated <code>NotificationSettings</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new NotificationSettings();

            if (data.hasOwnProperty('email_address')) {
                obj['email_address'] = ApiClient.convertToType(data['email_address'], 'String');
            }
            if (data.hasOwnProperty('emails_enabled')) {
                obj['emails_enabled'] = ApiClient.convertToType(data['emails_enabled'], 'Boolean');
            }
            if (data.hasOwnProperty('enabled')) {
                obj['enabled'] = ApiClient.convertToType(data['enabled'], 'Boolean');
            }
            if (data.hasOwnProperty('entity')) {
                obj['entity'] = ApiClient.convertToType(data['entity'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('user')) {
                obj['user'] = ApiClient.convertToType(data['user'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>NotificationSettings</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>NotificationSettings</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of NotificationSettings.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['email_address'] && !(typeof data['email_address'] === 'string' || data['email_address'] instanceof String)) {
            throw new Error("Expected the field `email_address` to be a primitive type in the JSON string but got " + data['email_address']);
        }
        // ensure the json data is a string
        if (data['entity'] && !(typeof data['entity'] === 'string' || data['entity'] instanceof String)) {
            throw new Error("Expected the field `entity` to be a primitive type in the JSON string but got " + data['entity']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['user'] && !(typeof data['user'] === 'string' || data['user'] instanceof String)) {
            throw new Error("Expected the field `user` to be a primitive type in the JSON string but got " + data['user']);
        }

        return true;
    }


}

NotificationSettings.RequiredProperties = ["emails_enabled", "enabled"];

/**
 * Email address to send notifications.
 * @member {String} email_address
 */
NotificationSettings.prototype['email_address'] = undefined;

/**
 * Turn emails on or off.
 * @member {Boolean} emails_enabled
 */
NotificationSettings.prototype['emails_enabled'] = undefined;

/**
 * Turn notifications on or off entirely.
 * @member {Boolean} enabled
 */
NotificationSettings.prototype['enabled'] = undefined;

/**
 * The entity type that the settings pertain to.
 * @member {module:model/NotificationSettings.EntityEnum} entity
 */
NotificationSettings.prototype['entity'] = undefined;

/**
 * Notification unique identifier expressed as a UUID
 * @member {String} id
 */
NotificationSettings.prototype['id'] = undefined;

/**
 * User the notification settings is for.
 * @member {String} user
 */
NotificationSettings.prototype['user'] = undefined;





/**
 * Allowed values for the <code>entity</code> property.
 * @enum {String}
 * @readonly
 */
NotificationSettings['EntityEnum'] = {

    /**
     * value: "global"
     * @const
     */
    "global": "global",

    /**
     * value: "billing"
     * @const
     */
    "billing": "billing"
};



export default NotificationSettings;

