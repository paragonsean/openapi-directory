/**
 * IllumiDesk
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CardError model module.
 * @module model/CardError
 * @version 1.0
 */
class CardError {
    /**
     * Constructs a new <code>CardError</code>.
     * @alias module:model/CardError
     */
    constructor() { 
        
        CardError.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CardError</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CardError} obj Optional instance to populate.
     * @return {module:model/CardError} The populated <code>CardError</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CardError();

            if (data.hasOwnProperty('address_city')) {
                obj['address_city'] = ApiClient.convertToType(data['address_city'], ['String']);
            }
            if (data.hasOwnProperty('address_country')) {
                obj['address_country'] = ApiClient.convertToType(data['address_country'], ['String']);
            }
            if (data.hasOwnProperty('address_line1')) {
                obj['address_line1'] = ApiClient.convertToType(data['address_line1'], ['String']);
            }
            if (data.hasOwnProperty('address_line1_check')) {
                obj['address_line1_check'] = ApiClient.convertToType(data['address_line1_check'], ['String']);
            }
            if (data.hasOwnProperty('address_line2')) {
                obj['address_line2'] = ApiClient.convertToType(data['address_line2'], ['String']);
            }
            if (data.hasOwnProperty('address_state')) {
                obj['address_state'] = ApiClient.convertToType(data['address_state'], ['String']);
            }
            if (data.hasOwnProperty('address_zip')) {
                obj['address_zip'] = ApiClient.convertToType(data['address_zip'], ['String']);
            }
            if (data.hasOwnProperty('address_zip_check')) {
                obj['address_zip_check'] = ApiClient.convertToType(data['address_zip_check'], ['String']);
            }
            if (data.hasOwnProperty('brand')) {
                obj['brand'] = ApiClient.convertToType(data['brand'], ['String']);
            }
            if (data.hasOwnProperty('created')) {
                obj['created'] = ApiClient.convertToType(data['created'], ['String']);
            }
            if (data.hasOwnProperty('customer')) {
                obj['customer'] = ApiClient.convertToType(data['customer'], ['String']);
            }
            if (data.hasOwnProperty('cvc_check')) {
                obj['cvc_check'] = ApiClient.convertToType(data['cvc_check'], ['String']);
            }
            if (data.hasOwnProperty('exp_month')) {
                obj['exp_month'] = ApiClient.convertToType(data['exp_month'], ['String']);
            }
            if (data.hasOwnProperty('exp_year')) {
                obj['exp_year'] = ApiClient.convertToType(data['exp_year'], ['String']);
            }
            if (data.hasOwnProperty('fingerprint')) {
                obj['fingerprint'] = ApiClient.convertToType(data['fingerprint'], ['String']);
            }
            if (data.hasOwnProperty('funding')) {
                obj['funding'] = ApiClient.convertToType(data['funding'], ['String']);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], ['String']);
            }
            if (data.hasOwnProperty('last4')) {
                obj['last4'] = ApiClient.convertToType(data['last4'], ['String']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], ['String']);
            }
            if (data.hasOwnProperty('non_field_errors')) {
                obj['non_field_errors'] = ApiClient.convertToType(data['non_field_errors'], ['String']);
            }
            if (data.hasOwnProperty('stripe_id')) {
                obj['stripe_id'] = ApiClient.convertToType(data['stripe_id'], ['String']);
            }
            if (data.hasOwnProperty('token')) {
                obj['token'] = ApiClient.convertToType(data['token'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CardError</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CardError</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['address_city'])) {
            throw new Error("Expected the field `address_city` to be an array in the JSON data but got " + data['address_city']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['address_country'])) {
            throw new Error("Expected the field `address_country` to be an array in the JSON data but got " + data['address_country']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['address_line1'])) {
            throw new Error("Expected the field `address_line1` to be an array in the JSON data but got " + data['address_line1']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['address_line1_check'])) {
            throw new Error("Expected the field `address_line1_check` to be an array in the JSON data but got " + data['address_line1_check']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['address_line2'])) {
            throw new Error("Expected the field `address_line2` to be an array in the JSON data but got " + data['address_line2']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['address_state'])) {
            throw new Error("Expected the field `address_state` to be an array in the JSON data but got " + data['address_state']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['address_zip'])) {
            throw new Error("Expected the field `address_zip` to be an array in the JSON data but got " + data['address_zip']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['address_zip_check'])) {
            throw new Error("Expected the field `address_zip_check` to be an array in the JSON data but got " + data['address_zip_check']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['brand'])) {
            throw new Error("Expected the field `brand` to be an array in the JSON data but got " + data['brand']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['created'])) {
            throw new Error("Expected the field `created` to be an array in the JSON data but got " + data['created']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['customer'])) {
            throw new Error("Expected the field `customer` to be an array in the JSON data but got " + data['customer']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['cvc_check'])) {
            throw new Error("Expected the field `cvc_check` to be an array in the JSON data but got " + data['cvc_check']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['exp_month'])) {
            throw new Error("Expected the field `exp_month` to be an array in the JSON data but got " + data['exp_month']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['exp_year'])) {
            throw new Error("Expected the field `exp_year` to be an array in the JSON data but got " + data['exp_year']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['fingerprint'])) {
            throw new Error("Expected the field `fingerprint` to be an array in the JSON data but got " + data['fingerprint']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['funding'])) {
            throw new Error("Expected the field `funding` to be an array in the JSON data but got " + data['funding']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['id'])) {
            throw new Error("Expected the field `id` to be an array in the JSON data but got " + data['id']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['last4'])) {
            throw new Error("Expected the field `last4` to be an array in the JSON data but got " + data['last4']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['name'])) {
            throw new Error("Expected the field `name` to be an array in the JSON data but got " + data['name']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['non_field_errors'])) {
            throw new Error("Expected the field `non_field_errors` to be an array in the JSON data but got " + data['non_field_errors']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['stripe_id'])) {
            throw new Error("Expected the field `stripe_id` to be an array in the JSON data but got " + data['stripe_id']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['token'])) {
            throw new Error("Expected the field `token` to be an array in the JSON data but got " + data['token']);
        }

        return true;
    }


}



/**
 * address_city field errors
 * @member {Array.<String>} address_city
 */
CardError.prototype['address_city'] = undefined;

/**
 * address_country field errors
 * @member {Array.<String>} address_country
 */
CardError.prototype['address_country'] = undefined;

/**
 * address_line1 field errors
 * @member {Array.<String>} address_line1
 */
CardError.prototype['address_line1'] = undefined;

/**
 * address_line1_check field errors
 * @member {Array.<String>} address_line1_check
 */
CardError.prototype['address_line1_check'] = undefined;

/**
 * address_line2 field errors
 * @member {Array.<String>} address_line2
 */
CardError.prototype['address_line2'] = undefined;

/**
 * address_state field errors
 * @member {Array.<String>} address_state
 */
CardError.prototype['address_state'] = undefined;

/**
 * address_zip field errors
 * @member {Array.<String>} address_zip
 */
CardError.prototype['address_zip'] = undefined;

/**
 * address_zip_check field errors
 * @member {Array.<String>} address_zip_check
 */
CardError.prototype['address_zip_check'] = undefined;

/**
 * brand field errors
 * @member {Array.<String>} brand
 */
CardError.prototype['brand'] = undefined;

/**
 * created field errors
 * @member {Array.<String>} created
 */
CardError.prototype['created'] = undefined;

/**
 * customer field errors
 * @member {Array.<String>} customer
 */
CardError.prototype['customer'] = undefined;

/**
 * cvc_check field errors
 * @member {Array.<String>} cvc_check
 */
CardError.prototype['cvc_check'] = undefined;

/**
 * exp_month field errors
 * @member {Array.<String>} exp_month
 */
CardError.prototype['exp_month'] = undefined;

/**
 * exp_year field errors
 * @member {Array.<String>} exp_year
 */
CardError.prototype['exp_year'] = undefined;

/**
 * fingerprint field errors
 * @member {Array.<String>} fingerprint
 */
CardError.prototype['fingerprint'] = undefined;

/**
 * funding field errors
 * @member {Array.<String>} funding
 */
CardError.prototype['funding'] = undefined;

/**
 * id field errors
 * @member {Array.<String>} id
 */
CardError.prototype['id'] = undefined;

/**
 * last4 field errors
 * @member {Array.<String>} last4
 */
CardError.prototype['last4'] = undefined;

/**
 * name field errors
 * @member {Array.<String>} name
 */
CardError.prototype['name'] = undefined;

/**
 * Errors not connected to any field
 * @member {Array.<String>} non_field_errors
 */
CardError.prototype['non_field_errors'] = undefined;

/**
 * stripe_id field errors
 * @member {Array.<String>} stripe_id
 */
CardError.prototype['stripe_id'] = undefined;

/**
 * token field errors
 * @member {Array.<String>} token
 */
CardError.prototype['token'] = undefined;






export default CardError;

