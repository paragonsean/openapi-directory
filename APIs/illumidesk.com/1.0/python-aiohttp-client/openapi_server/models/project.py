# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Project(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, collaborators: List[str]=None, description: str=None, id: str=None, last_updated: str=None, name: str=None, owner: str=None, private: bool=None, team: str=None):
        """Project - a model defined in OpenAPI

        :param collaborators: The collaborators of this Project.
        :param description: The description of this Project.
        :param id: The id of this Project.
        :param last_updated: The last_updated of this Project.
        :param name: The name of this Project.
        :param owner: The owner of this Project.
        :param private: The private of this Project.
        :param team: The team of this Project.
        """
        self.openapi_types = {
            'collaborators': List[str],
            'description': str,
            'id': str,
            'last_updated': str,
            'name': str,
            'owner': str,
            'private': bool,
            'team': str
        }

        self.attribute_map = {
            'collaborators': 'collaborators',
            'description': 'description',
            'id': 'id',
            'last_updated': 'last_updated',
            'name': 'name',
            'owner': 'owner',
            'private': 'private',
            'team': 'team'
        }

        self._collaborators = collaborators
        self._description = description
        self._id = id
        self._last_updated = last_updated
        self._name = name
        self._owner = owner
        self._private = private
        self._team = team

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Project':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Project of this Project.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def collaborators(self):
        """Gets the collaborators of this Project.

        Array of project collaborators.

        :return: The collaborators of this Project.
        :rtype: List[str]
        """
        return self._collaborators

    @collaborators.setter
    def collaborators(self, collaborators):
        """Sets the collaborators of this Project.

        Array of project collaborators.

        :param collaborators: The collaborators of this Project.
        :type collaborators: List[str]
        """

        self._collaborators = collaborators

    @property
    def description(self):
        """Gets the description of this Project.

        Project description.

        :return: The description of this Project.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Project.

        Project description.

        :param description: The description of this Project.
        :type description: str
        """

        self._description = description

    @property
    def id(self):
        """Gets the id of this Project.

        Unique identifier for project as UUID.

        :return: The id of this Project.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Project.

        Unique identifier for project as UUID.

        :param id: The id of this Project.
        :type id: str
        """

        self._id = id

    @property
    def last_updated(self):
        """Gets the last_updated of this Project.

        Date and time when project was last updated.

        :return: The last_updated of this Project.
        :rtype: str
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated):
        """Sets the last_updated of this Project.

        Date and time when project was last updated.

        :param last_updated: The last_updated of this Project.
        :type last_updated: str
        """

        self._last_updated = last_updated

    @property
    def name(self):
        """Gets the name of this Project.

        Project name.

        :return: The name of this Project.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Project.

        Project name.

        :param name: The name of this Project.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def owner(self):
        """Gets the owner of this Project.

        Username of project owner.

        :return: The owner of this Project.
        :rtype: str
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this Project.

        Username of project owner.

        :param owner: The owner of this Project.
        :type owner: str
        """

        self._owner = owner

    @property
    def private(self):
        """Gets the private of this Project.

        Value that states whether project is private or public.

        :return: The private of this Project.
        :rtype: bool
        """
        return self._private

    @private.setter
    def private(self, private):
        """Sets the private of this Project.

        Value that states whether project is private or public.

        :param private: The private of this Project.
        :type private: bool
        """

        self._private = private

    @property
    def team(self):
        """Gets the team of this Project.

        Project team name.

        :return: The team of this Project.
        :rtype: str
        """
        return self._team

    @team.setter
    def team(self, team):
        """Sets the team of this Project.

        Project team name.

        :param team: The team of this Project.
        :type team: str
        """

        self._team = team
