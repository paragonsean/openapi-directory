# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class NotificationSettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, email_address: str=None, emails_enabled: bool=None, enabled: bool=None, entity: str=None, id: str=None, user: str=None):
        """NotificationSettings - a model defined in OpenAPI

        :param email_address: The email_address of this NotificationSettings.
        :param emails_enabled: The emails_enabled of this NotificationSettings.
        :param enabled: The enabled of this NotificationSettings.
        :param entity: The entity of this NotificationSettings.
        :param id: The id of this NotificationSettings.
        :param user: The user of this NotificationSettings.
        """
        self.openapi_types = {
            'email_address': str,
            'emails_enabled': bool,
            'enabled': bool,
            'entity': str,
            'id': str,
            'user': str
        }

        self.attribute_map = {
            'email_address': 'email_address',
            'emails_enabled': 'emails_enabled',
            'enabled': 'enabled',
            'entity': 'entity',
            'id': 'id',
            'user': 'user'
        }

        self._email_address = email_address
        self._emails_enabled = emails_enabled
        self._enabled = enabled
        self._entity = entity
        self._id = id
        self._user = user

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NotificationSettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NotificationSettings of this NotificationSettings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def email_address(self):
        """Gets the email_address of this NotificationSettings.

        Email address to send notifications.

        :return: The email_address of this NotificationSettings.
        :rtype: str
        """
        return self._email_address

    @email_address.setter
    def email_address(self, email_address):
        """Sets the email_address of this NotificationSettings.

        Email address to send notifications.

        :param email_address: The email_address of this NotificationSettings.
        :type email_address: str
        """

        self._email_address = email_address

    @property
    def emails_enabled(self):
        """Gets the emails_enabled of this NotificationSettings.

        Turn emails on or off.

        :return: The emails_enabled of this NotificationSettings.
        :rtype: bool
        """
        return self._emails_enabled

    @emails_enabled.setter
    def emails_enabled(self, emails_enabled):
        """Sets the emails_enabled of this NotificationSettings.

        Turn emails on or off.

        :param emails_enabled: The emails_enabled of this NotificationSettings.
        :type emails_enabled: bool
        """
        if emails_enabled is None:
            raise ValueError("Invalid value for `emails_enabled`, must not be `None`")

        self._emails_enabled = emails_enabled

    @property
    def enabled(self):
        """Gets the enabled of this NotificationSettings.

        Turn notifications on or off entirely.

        :return: The enabled of this NotificationSettings.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this NotificationSettings.

        Turn notifications on or off entirely.

        :param enabled: The enabled of this NotificationSettings.
        :type enabled: bool
        """
        if enabled is None:
            raise ValueError("Invalid value for `enabled`, must not be `None`")

        self._enabled = enabled

    @property
    def entity(self):
        """Gets the entity of this NotificationSettings.

        The entity type that the settings pertain to.

        :return: The entity of this NotificationSettings.
        :rtype: str
        """
        return self._entity

    @entity.setter
    def entity(self, entity):
        """Sets the entity of this NotificationSettings.

        The entity type that the settings pertain to.

        :param entity: The entity of this NotificationSettings.
        :type entity: str
        """
        allowed_values = ["global", "billing"]  # noqa: E501
        if entity not in allowed_values:
            raise ValueError(
                "Invalid value for `entity` ({0}), must be one of {1}"
                .format(entity, allowed_values)
            )

        self._entity = entity

    @property
    def id(self):
        """Gets the id of this NotificationSettings.

        Notification unique identifier expressed as a UUID

        :return: The id of this NotificationSettings.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this NotificationSettings.

        Notification unique identifier expressed as a UUID

        :param id: The id of this NotificationSettings.
        :type id: str
        """

        self._id = id

    @property
    def user(self):
        """Gets the user of this NotificationSettings.

        User the notification settings is for.

        :return: The user of this NotificationSettings.
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this NotificationSettings.

        User the notification settings is for.

        :param user: The user of this NotificationSettings.
        :type user: str
        """

        self._user = user
