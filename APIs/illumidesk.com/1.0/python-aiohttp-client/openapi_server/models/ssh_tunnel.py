# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SshTunnel(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, endpoint: str=None, host: str=None, id: str=None, local_port: int=None, name: str=None, remote_port: int=None, server: str=None, username: str=None):
        """SshTunnel - a model defined in OpenAPI

        :param endpoint: The endpoint of this SshTunnel.
        :param host: The host of this SshTunnel.
        :param id: The id of this SshTunnel.
        :param local_port: The local_port of this SshTunnel.
        :param name: The name of this SshTunnel.
        :param remote_port: The remote_port of this SshTunnel.
        :param server: The server of this SshTunnel.
        :param username: The username of this SshTunnel.
        """
        self.openapi_types = {
            'endpoint': str,
            'host': str,
            'id': str,
            'local_port': int,
            'name': str,
            'remote_port': int,
            'server': str,
            'username': str
        }

        self.attribute_map = {
            'endpoint': 'endpoint',
            'host': 'host',
            'id': 'id',
            'local_port': 'local_port',
            'name': 'name',
            'remote_port': 'remote_port',
            'server': 'server',
            'username': 'username'
        }

        self._endpoint = endpoint
        self._host = host
        self._id = id
        self._local_port = local_port
        self._name = name
        self._remote_port = remote_port
        self._server = server
        self._username = username

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SshTunnel':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SshTunnel of this SshTunnel.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def endpoint(self):
        """Gets the endpoint of this SshTunnel.

        SSH tunnel destination endpoint.

        :return: The endpoint of this SshTunnel.
        :rtype: str
        """
        return self._endpoint

    @endpoint.setter
    def endpoint(self, endpoint):
        """Sets the endpoint of this SshTunnel.

        SSH tunnel destination endpoint.

        :param endpoint: The endpoint of this SshTunnel.
        :type endpoint: str
        """
        if endpoint is None:
            raise ValueError("Invalid value for `endpoint`, must not be `None`")

        self._endpoint = endpoint

    @property
    def host(self):
        """Gets the host of this SshTunnel.

        Host, usually IPv4, for SSH tunnel.

        :return: The host of this SshTunnel.
        :rtype: str
        """
        return self._host

    @host.setter
    def host(self, host):
        """Sets the host of this SshTunnel.

        Host, usually IPv4, for SSH tunnel.

        :param host: The host of this SshTunnel.
        :type host: str
        """
        if host is None:
            raise ValueError("Invalid value for `host`, must not be `None`")

        self._host = host

    @property
    def id(self):
        """Gets the id of this SshTunnel.

        SSH tunnel unique identifier in UUID format.

        :return: The id of this SshTunnel.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SshTunnel.

        SSH tunnel unique identifier in UUID format.

        :param id: The id of this SshTunnel.
        :type id: str
        """

        self._id = id

    @property
    def local_port(self):
        """Gets the local_port of this SshTunnel.

        Local source port for SSH tunnel.

        :return: The local_port of this SshTunnel.
        :rtype: int
        """
        return self._local_port

    @local_port.setter
    def local_port(self, local_port):
        """Sets the local_port of this SshTunnel.

        Local source port for SSH tunnel.

        :param local_port: The local_port of this SshTunnel.
        :type local_port: int
        """
        if local_port is None:
            raise ValueError("Invalid value for `local_port`, must not be `None`")

        self._local_port = local_port

    @property
    def name(self):
        """Gets the name of this SshTunnel.

        SSH tunnel name.

        :return: The name of this SshTunnel.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SshTunnel.

        SSH tunnel name.

        :param name: The name of this SshTunnel.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def remote_port(self):
        """Gets the remote_port of this SshTunnel.

        Remote port to establish SSH tunnel.

        :return: The remote_port of this SshTunnel.
        :rtype: int
        """
        return self._remote_port

    @remote_port.setter
    def remote_port(self, remote_port):
        """Sets the remote_port of this SshTunnel.

        Remote port to establish SSH tunnel.

        :param remote_port: The remote_port of this SshTunnel.
        :type remote_port: int
        """
        if remote_port is None:
            raise ValueError("Invalid value for `remote_port`, must not be `None`")

        self._remote_port = remote_port

    @property
    def server(self):
        """Gets the server of this SshTunnel.

        Server name.

        :return: The server of this SshTunnel.
        :rtype: str
        """
        return self._server

    @server.setter
    def server(self, server):
        """Sets the server of this SshTunnel.

        Server name.

        :param server: The server of this SshTunnel.
        :type server: str
        """

        self._server = server

    @property
    def username(self):
        """Gets the username of this SshTunnel.

        SSH tunnel user name.

        :return: The username of this SshTunnel.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this SshTunnel.

        SSH tunnel user name.

        :param username: The username of this SshTunnel.
        :type username: str
        """
        if username is None:
            raise ValueError("Invalid value for `username`, must not be `None`")

        self._username = username
