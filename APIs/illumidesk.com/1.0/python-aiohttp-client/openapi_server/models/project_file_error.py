# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ProjectFileError(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, content: List[str]=None, file: List[str]=None, id: List[str]=None, name: List[str]=None, non_field_errors: List[str]=None, path: List[str]=None, project: List[str]=None):
        """ProjectFileError - a model defined in OpenAPI

        :param content: The content of this ProjectFileError.
        :param file: The file of this ProjectFileError.
        :param id: The id of this ProjectFileError.
        :param name: The name of this ProjectFileError.
        :param non_field_errors: The non_field_errors of this ProjectFileError.
        :param path: The path of this ProjectFileError.
        :param project: The project of this ProjectFileError.
        """
        self.openapi_types = {
            'content': List[str],
            'file': List[str],
            'id': List[str],
            'name': List[str],
            'non_field_errors': List[str],
            'path': List[str],
            'project': List[str]
        }

        self.attribute_map = {
            'content': 'content',
            'file': 'file',
            'id': 'id',
            'name': 'name',
            'non_field_errors': 'non_field_errors',
            'path': 'path',
            'project': 'project'
        }

        self._content = content
        self._file = file
        self._id = id
        self._name = name
        self._non_field_errors = non_field_errors
        self._path = path
        self._project = project

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProjectFileError':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ProjectFileError of this ProjectFileError.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def content(self):
        """Gets the content of this ProjectFileError.

        base64_data field errors

        :return: The content of this ProjectFileError.
        :rtype: List[str]
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this ProjectFileError.

        base64_data field errors

        :param content: The content of this ProjectFileError.
        :type content: List[str]
        """

        self._content = content

    @property
    def file(self):
        """Gets the file of this ProjectFileError.

        file field errors

        :return: The file of this ProjectFileError.
        :rtype: List[str]
        """
        return self._file

    @file.setter
    def file(self, file):
        """Sets the file of this ProjectFileError.

        file field errors

        :param file: The file of this ProjectFileError.
        :type file: List[str]
        """

        self._file = file

    @property
    def id(self):
        """Gets the id of this ProjectFileError.

        id field errors

        :return: The id of this ProjectFileError.
        :rtype: List[str]
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ProjectFileError.

        id field errors

        :param id: The id of this ProjectFileError.
        :type id: List[str]
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this ProjectFileError.

        name field errors

        :return: The name of this ProjectFileError.
        :rtype: List[str]
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ProjectFileError.

        name field errors

        :param name: The name of this ProjectFileError.
        :type name: List[str]
        """

        self._name = name

    @property
    def non_field_errors(self):
        """Gets the non_field_errors of this ProjectFileError.

        Errors not connected to any field

        :return: The non_field_errors of this ProjectFileError.
        :rtype: List[str]
        """
        return self._non_field_errors

    @non_field_errors.setter
    def non_field_errors(self, non_field_errors):
        """Sets the non_field_errors of this ProjectFileError.

        Errors not connected to any field

        :param non_field_errors: The non_field_errors of this ProjectFileError.
        :type non_field_errors: List[str]
        """

        self._non_field_errors = non_field_errors

    @property
    def path(self):
        """Gets the path of this ProjectFileError.

        path field errors

        :return: The path of this ProjectFileError.
        :rtype: List[str]
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this ProjectFileError.

        path field errors

        :param path: The path of this ProjectFileError.
        :type path: List[str]
        """

        self._path = path

    @property
    def project(self):
        """Gets the project of this ProjectFileError.

        project field errors

        :return: The project of this ProjectFileError.
        :rtype: List[str]
        """
        return self._project

    @project.setter
    def project(self, project):
        """Sets the project of this ProjectFileError.

        project field errors

        :param project: The project of this ProjectFileError.
        :type project: List[str]
        """

        self._project = project
