# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Group(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created_by: str=None, description: str=None, id: str=None, members: List[str]=None, name: str=None, parent: str=None, permissions: List[str]=None, private: bool=None):
        """Group - a model defined in OpenAPI

        :param created_by: The created_by of this Group.
        :param description: The description of this Group.
        :param id: The id of this Group.
        :param members: The members of this Group.
        :param name: The name of this Group.
        :param parent: The parent of this Group.
        :param permissions: The permissions of this Group.
        :param private: The private of this Group.
        """
        self.openapi_types = {
            'created_by': str,
            'description': str,
            'id': str,
            'members': List[str],
            'name': str,
            'parent': str,
            'permissions': List[str],
            'private': bool
        }

        self.attribute_map = {
            'created_by': 'created_by',
            'description': 'description',
            'id': 'id',
            'members': 'members',
            'name': 'name',
            'parent': 'parent',
            'permissions': 'permissions',
            'private': 'private'
        }

        self._created_by = created_by
        self._description = description
        self._id = id
        self._members = members
        self._name = name
        self._parent = parent
        self._permissions = permissions
        self._private = private

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Group':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Group of this Group.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created_by(self):
        """Gets the created_by of this Group.

        UUID of a user that created this group.

        :return: The created_by of this Group.
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this Group.

        UUID of a user that created this group.

        :param created_by: The created_by of this Group.
        :type created_by: str
        """

        self._created_by = created_by

    @property
    def description(self):
        """Gets the description of this Group.

        Group description

        :return: The description of this Group.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Group.

        Group description

        :param description: The description of this Group.
        :type description: str
        """

        self._description = description

    @property
    def id(self):
        """Gets the id of this Group.

        Group unique identifier expressed as UUID.

        :return: The id of this Group.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Group.

        Group unique identifier expressed as UUID.

        :param id: The id of this Group.
        :type id: str
        """

        self._id = id

    @property
    def members(self):
        """Gets the members of this Group.

        List of group members usernames.

        :return: The members of this Group.
        :rtype: List[str]
        """
        return self._members

    @members.setter
    def members(self, members):
        """Sets the members of this Group.

        List of group members usernames.

        :param members: The members of this Group.
        :type members: List[str]
        """

        self._members = members

    @property
    def name(self):
        """Gets the name of this Group.

        Group name

        :return: The name of this Group.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Group.

        Group name

        :param name: The name of this Group.
        :type name: str
        """

        self._name = name

    @property
    def parent(self):
        """Gets the parent of this Group.

        Parent group

        :return: The parent of this Group.
        :rtype: str
        """
        return self._parent

    @parent.setter
    def parent(self, parent):
        """Sets the parent of this Group.

        Parent group

        :param parent: The parent of this Group.
        :type parent: str
        """

        self._parent = parent

    @property
    def permissions(self):
        """Gets the permissions of this Group.

        List of group permissions.

        :return: The permissions of this Group.
        :rtype: List[str]
        """
        return self._permissions

    @permissions.setter
    def permissions(self, permissions):
        """Sets the permissions of this Group.

        List of group permissions.

        :param permissions: The permissions of this Group.
        :type permissions: List[str]
        """

        self._permissions = permissions

    @property
    def private(self):
        """Gets the private of this Group.

        States whether group is visible to all users.

        :return: The private of this Group.
        :rtype: bool
        """
        return self._private

    @private.setter
    def private(self, private):
        """Sets the private of this Group.

        States whether group is visible to all users.

        :param private: The private of this Group.
        :type private: bool
        """

        self._private = private
