# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CollaboratorData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, member: str=None, owner: bool=None, permissions: str=None):
        """CollaboratorData - a model defined in OpenAPI

        :param member: The member of this CollaboratorData.
        :param owner: The owner of this CollaboratorData.
        :param permissions: The permissions of this CollaboratorData.
        """
        self.openapi_types = {
            'member': str,
            'owner': bool,
            'permissions': str
        }

        self.attribute_map = {
            'member': 'member',
            'owner': 'owner',
            'permissions': 'permissions'
        }

        self._member = member
        self._owner = owner
        self._permissions = permissions

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CollaboratorData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CollaboratorData of this CollaboratorData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def member(self):
        """Gets the member of this CollaboratorData.

        Project member username.

        :return: The member of this CollaboratorData.
        :rtype: str
        """
        return self._member

    @member.setter
    def member(self, member):
        """Sets the member of this CollaboratorData.

        Project member username.

        :param member: The member of this CollaboratorData.
        :type member: str
        """
        if member is None:
            raise ValueError("Invalid value for `member`, must not be `None`")

        self._member = member

    @property
    def owner(self):
        """Gets the owner of this CollaboratorData.

        Project owner. Defaults to false.

        :return: The owner of this CollaboratorData.
        :rtype: bool
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this CollaboratorData.

        Project owner. Defaults to false.

        :param owner: The owner of this CollaboratorData.
        :type owner: bool
        """

        self._owner = owner

    @property
    def permissions(self):
        """Gets the permissions of this CollaboratorData.

        Permissions assigned to collaborator.

        :return: The permissions of this CollaboratorData.
        :rtype: str
        """
        return self._permissions

    @permissions.setter
    def permissions(self, permissions):
        """Sets the permissions of this CollaboratorData.

        Permissions assigned to collaborator.

        :param permissions: The permissions of this CollaboratorData.
        :type permissions: str
        """
        allowed_values = ["read_project", "write_project"]  # noqa: E501
        if permissions not in allowed_values:
            raise ValueError(
                "Invalid value for `permissions` ({0}), must be one of {1}"
                .format(permissions, allowed_values)
            )

        self._permissions = permissions
