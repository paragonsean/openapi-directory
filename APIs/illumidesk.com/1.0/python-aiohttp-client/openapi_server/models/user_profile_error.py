# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UserProfileError(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bio: List[str]=None, company: List[str]=None, location: List[str]=None, non_field_errors: List[str]=None, timezone: List[str]=None, url: List[str]=None):
        """UserProfileError - a model defined in OpenAPI

        :param bio: The bio of this UserProfileError.
        :param company: The company of this UserProfileError.
        :param location: The location of this UserProfileError.
        :param non_field_errors: The non_field_errors of this UserProfileError.
        :param timezone: The timezone of this UserProfileError.
        :param url: The url of this UserProfileError.
        """
        self.openapi_types = {
            'bio': List[str],
            'company': List[str],
            'location': List[str],
            'non_field_errors': List[str],
            'timezone': List[str],
            'url': List[str]
        }

        self.attribute_map = {
            'bio': 'bio',
            'company': 'company',
            'location': 'location',
            'non_field_errors': 'non_field_errors',
            'timezone': 'timezone',
            'url': 'url'
        }

        self._bio = bio
        self._company = company
        self._location = location
        self._non_field_errors = non_field_errors
        self._timezone = timezone
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UserProfileError':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UserProfileError of this UserProfileError.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bio(self):
        """Gets the bio of this UserProfileError.

        Bio field errors.

        :return: The bio of this UserProfileError.
        :rtype: List[str]
        """
        return self._bio

    @bio.setter
    def bio(self, bio):
        """Sets the bio of this UserProfileError.

        Bio field errors.

        :param bio: The bio of this UserProfileError.
        :type bio: List[str]
        """

        self._bio = bio

    @property
    def company(self):
        """Gets the company of this UserProfileError.

        Company field errors.

        :return: The company of this UserProfileError.
        :rtype: List[str]
        """
        return self._company

    @company.setter
    def company(self, company):
        """Sets the company of this UserProfileError.

        Company field errors.

        :param company: The company of this UserProfileError.
        :type company: List[str]
        """

        self._company = company

    @property
    def location(self):
        """Gets the location of this UserProfileError.

        Location field errors.

        :return: The location of this UserProfileError.
        :rtype: List[str]
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this UserProfileError.

        Location field errors.

        :param location: The location of this UserProfileError.
        :type location: List[str]
        """

        self._location = location

    @property
    def non_field_errors(self):
        """Gets the non_field_errors of this UserProfileError.

        Errors not connected to any field.

        :return: The non_field_errors of this UserProfileError.
        :rtype: List[str]
        """
        return self._non_field_errors

    @non_field_errors.setter
    def non_field_errors(self, non_field_errors):
        """Sets the non_field_errors of this UserProfileError.

        Errors not connected to any field.

        :param non_field_errors: The non_field_errors of this UserProfileError.
        :type non_field_errors: List[str]
        """

        self._non_field_errors = non_field_errors

    @property
    def timezone(self):
        """Gets the timezone of this UserProfileError.

        Timezone field errors.

        :return: The timezone of this UserProfileError.
        :rtype: List[str]
        """
        return self._timezone

    @timezone.setter
    def timezone(self, timezone):
        """Sets the timezone of this UserProfileError.

        Timezone field errors.

        :param timezone: The timezone of this UserProfileError.
        :type timezone: List[str]
        """

        self._timezone = timezone

    @property
    def url(self):
        """Gets the url of this UserProfileError.

        URL field errors.

        :return: The url of this UserProfileError.
        :rtype: List[str]
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this UserProfileError.

        URL field errors.

        :param url: The url of this UserProfileError.
        :type url: List[str]
        """

        self._url = url
