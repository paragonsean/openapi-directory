# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class TeamData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, avatar: str=None, avatar_url: str=None, description: str=None, location: str=None, name: str=None, website: str=None):
        """TeamData - a model defined in OpenAPI

        :param avatar: The avatar of this TeamData.
        :param avatar_url: The avatar_url of this TeamData.
        :param description: The description of this TeamData.
        :param location: The location of this TeamData.
        :param name: The name of this TeamData.
        :param website: The website of this TeamData.
        """
        self.openapi_types = {
            'avatar': str,
            'avatar_url': str,
            'description': str,
            'location': str,
            'name': str,
            'website': str
        }

        self.attribute_map = {
            'avatar': 'avatar',
            'avatar_url': 'avatar_url',
            'description': 'description',
            'location': 'location',
            'name': 'name',
            'website': 'website'
        }

        self._avatar = avatar
        self._avatar_url = avatar_url
        self._description = description
        self._location = location
        self._name = name
        self._website = website

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TeamData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TeamData of this TeamData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def avatar(self):
        """Gets the avatar of this TeamData.

        Team avatar image.

        :return: The avatar of this TeamData.
        :rtype: str
        """
        return self._avatar

    @avatar.setter
    def avatar(self, avatar):
        """Sets the avatar of this TeamData.

        Team avatar image.

        :param avatar: The avatar of this TeamData.
        :type avatar: str
        """
        if avatar is not None and not re.search(r'^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$', avatar):
            raise ValueError("Invalid value for `avatar`, must be a follow pattern or equal to `/^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/`")

        self._avatar = avatar

    @property
    def avatar_url(self):
        """Gets the avatar_url of this TeamData.

        Team avatar url.

        :return: The avatar_url of this TeamData.
        :rtype: str
        """
        return self._avatar_url

    @avatar_url.setter
    def avatar_url(self, avatar_url):
        """Sets the avatar_url of this TeamData.

        Team avatar url.

        :param avatar_url: The avatar_url of this TeamData.
        :type avatar_url: str
        """

        self._avatar_url = avatar_url

    @property
    def description(self):
        """Gets the description of this TeamData.

        Team description

        :return: The description of this TeamData.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this TeamData.

        Team description

        :param description: The description of this TeamData.
        :type description: str
        """

        self._description = description

    @property
    def location(self):
        """Gets the location of this TeamData.

        Team location.

        :return: The location of this TeamData.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this TeamData.

        Team location.

        :param location: The location of this TeamData.
        :type location: str
        """

        self._location = location

    @property
    def name(self):
        """Gets the name of this TeamData.

        Team name

        :return: The name of this TeamData.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TeamData.

        Team name

        :param name: The name of this TeamData.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def website(self):
        """Gets the website of this TeamData.

        Teams website.

        :return: The website of this TeamData.
        :rtype: str
        """
        return self._website

    @website.setter
    def website(self, website):
        """Sets the website of this TeamData.

        Teams website.

        :param website: The website of this TeamData.
        :type website: str
        """

        self._website = website
