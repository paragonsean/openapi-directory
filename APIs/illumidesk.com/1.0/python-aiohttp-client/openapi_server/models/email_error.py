# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class EmailError(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address: List[str]=None, non_field_errors: List[str]=None, public: List[str]=None, unsubscribed: List[str]=None):
        """EmailError - a model defined in OpenAPI

        :param address: The address of this EmailError.
        :param non_field_errors: The non_field_errors of this EmailError.
        :param public: The public of this EmailError.
        :param unsubscribed: The unsubscribed of this EmailError.
        """
        self.openapi_types = {
            'address': List[str],
            'non_field_errors': List[str],
            'public': List[str],
            'unsubscribed': List[str]
        }

        self.attribute_map = {
            'address': 'address',
            'non_field_errors': 'non_field_errors',
            'public': 'public',
            'unsubscribed': 'unsubscribed'
        }

        self._address = address
        self._non_field_errors = non_field_errors
        self._public = public
        self._unsubscribed = unsubscribed

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EmailError':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EmailError of this EmailError.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address(self):
        """Gets the address of this EmailError.

        Address field errors.

        :return: The address of this EmailError.
        :rtype: List[str]
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this EmailError.

        Address field errors.

        :param address: The address of this EmailError.
        :type address: List[str]
        """

        self._address = address

    @property
    def non_field_errors(self):
        """Gets the non_field_errors of this EmailError.

        Errors not connected to any field.

        :return: The non_field_errors of this EmailError.
        :rtype: List[str]
        """
        return self._non_field_errors

    @non_field_errors.setter
    def non_field_errors(self, non_field_errors):
        """Sets the non_field_errors of this EmailError.

        Errors not connected to any field.

        :param non_field_errors: The non_field_errors of this EmailError.
        :type non_field_errors: List[str]
        """

        self._non_field_errors = non_field_errors

    @property
    def public(self):
        """Gets the public of this EmailError.

        Public field errors.

        :return: The public of this EmailError.
        :rtype: List[str]
        """
        return self._public

    @public.setter
    def public(self, public):
        """Sets the public of this EmailError.

        Public field errors.

        :param public: The public of this EmailError.
        :type public: List[str]
        """

        self._public = public

    @property
    def unsubscribed(self):
        """Gets the unsubscribed of this EmailError.

        Unsubscribed field errors.

        :return: The unsubscribed of this EmailError.
        :rtype: List[str]
        """
        return self._unsubscribed

    @unsubscribed.setter
    def unsubscribed(self, unsubscribed):
        """Sets the unsubscribed of this EmailError.

        Unsubscribed field errors.

        :param unsubscribed: The unsubscribed of this EmailError.
        :type unsubscribed: List[str]
        """

        self._unsubscribed = unsubscribed
