# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.server_config import ServerConfig
from openapi_server import util


class ServerData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, config: ServerConfig=None, connected: List[str]=None, host: str=None, image_name: str=None, name: str=None, server_size: str=None, startup_script: str=None):
        """ServerData - a model defined in OpenAPI

        :param config: The config of this ServerData.
        :param connected: The connected of this ServerData.
        :param host: The host of this ServerData.
        :param image_name: The image_name of this ServerData.
        :param name: The name of this ServerData.
        :param server_size: The server_size of this ServerData.
        :param startup_script: The startup_script of this ServerData.
        """
        self.openapi_types = {
            'config': ServerConfig,
            'connected': List[str],
            'host': str,
            'image_name': str,
            'name': str,
            'server_size': str,
            'startup_script': str
        }

        self.attribute_map = {
            'config': 'config',
            'connected': 'connected',
            'host': 'host',
            'image_name': 'image_name',
            'name': 'name',
            'server_size': 'server_size',
            'startup_script': 'startup_script'
        }

        self._config = config
        self._connected = connected
        self._host = host
        self._image_name = image_name
        self._name = name
        self._server_size = server_size
        self._startup_script = startup_script

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ServerData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ServerData of this ServerData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def config(self):
        """Gets the config of this ServerData.


        :return: The config of this ServerData.
        :rtype: ServerConfig
        """
        return self._config

    @config.setter
    def config(self, config):
        """Sets the config of this ServerData.


        :param config: The config of this ServerData.
        :type config: ServerConfig
        """

        self._config = config

    @property
    def connected(self):
        """Gets the connected of this ServerData.

        Array of other servers the server is connected to.

        :return: The connected of this ServerData.
        :rtype: List[str]
        """
        return self._connected

    @connected.setter
    def connected(self, connected):
        """Sets the connected of this ServerData.

        Array of other servers the server is connected to.

        :param connected: The connected of this ServerData.
        :type connected: List[str]
        """

        self._connected = connected

    @property
    def host(self):
        """Gets the host of this ServerData.

        External host IPv4 address or hostname.

        :return: The host of this ServerData.
        :rtype: str
        """
        return self._host

    @host.setter
    def host(self, host):
        """Sets the host of this ServerData.

        External host IPv4 address or hostname.

        :param host: The host of this ServerData.
        :type host: str
        """

        self._host = host

    @property
    def image_name(self):
        """Gets the image_name of this ServerData.

        Image name.

        :return: The image_name of this ServerData.
        :rtype: str
        """
        return self._image_name

    @image_name.setter
    def image_name(self, image_name):
        """Sets the image_name of this ServerData.

        Image name.

        :param image_name: The image_name of this ServerData.
        :type image_name: str
        """

        self._image_name = image_name

    @property
    def name(self):
        """Gets the name of this ServerData.

        Server name.

        :return: The name of this ServerData.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ServerData.

        Server name.

        :param name: The name of this ServerData.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def server_size(self):
        """Gets the server_size of this ServerData.

        Server size unique identifier.

        :return: The server_size of this ServerData.
        :rtype: str
        """
        return self._server_size

    @server_size.setter
    def server_size(self, server_size):
        """Sets the server_size of this ServerData.

        Server size unique identifier.

        :param server_size: The server_size of this ServerData.
        :type server_size: str
        """

        self._server_size = server_size

    @property
    def startup_script(self):
        """Gets the startup_script of this ServerData.

        Startup script to run when launching server.

        :return: The startup_script of this ServerData.
        :rtype: str
        """
        return self._startup_script

    @startup_script.setter
    def startup_script(self, startup_script):
        """Sets the startup_script of this ServerData.

        Startup script to run when launching server.

        :param startup_script: The startup_script of this ServerData.
        :type startup_script: str
        """

        self._startup_script = startup_script
