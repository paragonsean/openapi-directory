# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class UserProfile(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, avatar: str=None, bio: str=None, company: str=None, location: str=None, timezone: str=None, url: str=None):
        """UserProfile - a model defined in OpenAPI

        :param avatar: The avatar of this UserProfile.
        :param bio: The bio of this UserProfile.
        :param company: The company of this UserProfile.
        :param location: The location of this UserProfile.
        :param timezone: The timezone of this UserProfile.
        :param url: The url of this UserProfile.
        """
        self.openapi_types = {
            'avatar': str,
            'bio': str,
            'company': str,
            'location': str,
            'timezone': str,
            'url': str
        }

        self.attribute_map = {
            'avatar': 'avatar',
            'bio': 'bio',
            'company': 'company',
            'location': 'location',
            'timezone': 'timezone',
            'url': 'url'
        }

        self._avatar = avatar
        self._bio = bio
        self._company = company
        self._location = location
        self._timezone = timezone
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UserProfile':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UserProfile of this UserProfile.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def avatar(self):
        """Gets the avatar of this UserProfile.

        Avatar image

        :return: The avatar of this UserProfile.
        :rtype: str
        """
        return self._avatar

    @avatar.setter
    def avatar(self, avatar):
        """Sets the avatar of this UserProfile.

        Avatar image

        :param avatar: The avatar of this UserProfile.
        :type avatar: str
        """
        if avatar is not None and not re.search(r'^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$', avatar):
            raise ValueError("Invalid value for `avatar`, must be a follow pattern or equal to `/^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/`")

        self._avatar = avatar

    @property
    def bio(self):
        """Gets the bio of this UserProfile.

        Description of user's biography.

        :return: The bio of this UserProfile.
        :rtype: str
        """
        return self._bio

    @bio.setter
    def bio(self, bio):
        """Sets the bio of this UserProfile.

        Description of user's biography.

        :param bio: The bio of this UserProfile.
        :type bio: str
        """

        self._bio = bio

    @property
    def company(self):
        """Gets the company of this UserProfile.

        User's company.

        :return: The company of this UserProfile.
        :rtype: str
        """
        return self._company

    @company.setter
    def company(self, company):
        """Sets the company of this UserProfile.

        User's company.

        :param company: The company of this UserProfile.
        :type company: str
        """

        self._company = company

    @property
    def location(self):
        """Gets the location of this UserProfile.

        User location.

        :return: The location of this UserProfile.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this UserProfile.

        User location.

        :param location: The location of this UserProfile.
        :type location: str
        """

        self._location = location

    @property
    def timezone(self):
        """Gets the timezone of this UserProfile.

        User's time zone.

        :return: The timezone of this UserProfile.
        :rtype: str
        """
        return self._timezone

    @timezone.setter
    def timezone(self, timezone):
        """Sets the timezone of this UserProfile.

        User's time zone.

        :param timezone: The timezone of this UserProfile.
        :type timezone: str
        """

        self._timezone = timezone

    @property
    def url(self):
        """Gets the url of this UserProfile.

        Users's personal website.

        :return: The url of this UserProfile.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this UserProfile.

        Users's personal website.

        :param url: The url of this UserProfile.
        :type url: str
        """

        self._url = url
