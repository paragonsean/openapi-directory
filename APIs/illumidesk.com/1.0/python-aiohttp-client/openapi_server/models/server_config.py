# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ServerConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, command: str=None, function: str=None, script: str=None, type: str=None):
        """ServerConfig - a model defined in OpenAPI

        :param command: The command of this ServerConfig.
        :param function: The function of this ServerConfig.
        :param script: The script of this ServerConfig.
        :param type: The type of this ServerConfig.
        """
        self.openapi_types = {
            'command': str,
            'function': str,
            'script': str,
            'type': str
        }

        self.attribute_map = {
            'command': 'command',
            'function': 'function',
            'script': 'script',
            'type': 'type'
        }

        self._command = command
        self._function = function
        self._script = script
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ServerConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ServerConfig of this ServerConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def command(self):
        """Gets the command of this ServerConfig.

        Command to run

        :return: The command of this ServerConfig.
        :rtype: str
        """
        return self._command

    @command.setter
    def command(self, command):
        """Sets the command of this ServerConfig.

        Command to run

        :param command: The command of this ServerConfig.
        :type command: str
        """

        self._command = command

    @property
    def function(self):
        """Gets the function of this ServerConfig.

        Server function.

        :return: The function of this ServerConfig.
        :rtype: str
        """
        return self._function

    @function.setter
    def function(self, function):
        """Sets the function of this ServerConfig.

        Server function.

        :param function: The function of this ServerConfig.
        :type function: str
        """

        self._function = function

    @property
    def script(self):
        """Gets the script of this ServerConfig.

        Server script file.

        :return: The script of this ServerConfig.
        :rtype: str
        """
        return self._script

    @script.setter
    def script(self, script):
        """Sets the script of this ServerConfig.

        Server script file.

        :param script: The script of this ServerConfig.
        :type script: str
        """

        self._script = script

    @property
    def type(self):
        """Gets the type of this ServerConfig.

        Server type.

        :return: The type of this ServerConfig.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ServerConfig.

        Server type.

        :param type: The type of this ServerConfig.
        :type type: str
        """
        allowed_values = ["jupyter", "restful", "cron"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
