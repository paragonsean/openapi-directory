# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Email(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address: str=None, id: str=None, public: bool=None, unsubscribed: bool=None, user: str=None):
        """Email - a model defined in OpenAPI

        :param address: The address of this Email.
        :param id: The id of this Email.
        :param public: The public of this Email.
        :param unsubscribed: The unsubscribed of this Email.
        :param user: The user of this Email.
        """
        self.openapi_types = {
            'address': str,
            'id': str,
            'public': bool,
            'unsubscribed': bool,
            'user': str
        }

        self.attribute_map = {
            'address': 'address',
            'id': 'id',
            'public': 'public',
            'unsubscribed': 'unsubscribed',
            'user': 'user'
        }

        self._address = address
        self._id = id
        self._public = public
        self._unsubscribed = unsubscribed
        self._user = user

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Email':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Email of this Email.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address(self):
        """Gets the address of this Email.

        Email address.

        :return: The address of this Email.
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this Email.

        Email address.

        :param address: The address of this Email.
        :type address: str
        """
        if address is None:
            raise ValueError("Invalid value for `address`, must not be `None`")

        self._address = address

    @property
    def id(self):
        """Gets the id of this Email.

        Email unique identifier expressed as UUID.

        :return: The id of this Email.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Email.

        Email unique identifier expressed as UUID.

        :param id: The id of this Email.
        :type id: str
        """

        self._id = id

    @property
    def public(self):
        """Gets the public of this Email.

        Boolean to determine if email is public or private.

        :return: The public of this Email.
        :rtype: bool
        """
        return self._public

    @public.setter
    def public(self, public):
        """Sets the public of this Email.

        Boolean to determine if email is public or private.

        :param public: The public of this Email.
        :type public: bool
        """

        self._public = public

    @property
    def unsubscribed(self):
        """Gets the unsubscribed of this Email.

        Boolean to determine whether user is suscribed or unsubscribed to out going email campaigns.

        :return: The unsubscribed of this Email.
        :rtype: bool
        """
        return self._unsubscribed

    @unsubscribed.setter
    def unsubscribed(self, unsubscribed):
        """Sets the unsubscribed of this Email.

        Boolean to determine whether user is suscribed or unsubscribed to out going email campaigns.

        :param unsubscribed: The unsubscribed of this Email.
        :type unsubscribed: bool
        """

        self._unsubscribed = unsubscribed

    @property
    def user(self):
        """Gets the user of this Email.

        User name for email.

        :return: The user of this Email.
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this Email.

        User name for email.

        :param user: The user of this Email.
        :type user: str
        """

        self._user = user
