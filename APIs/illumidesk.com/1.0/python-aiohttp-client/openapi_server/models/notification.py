# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Notification(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, actor: str=None, id: str=None, read: bool=None, target: str=None, timestamp: str=None, type: str=None, user: str=None):
        """Notification - a model defined in OpenAPI

        :param actor: The actor of this Notification.
        :param id: The id of this Notification.
        :param read: The read of this Notification.
        :param target: The target of this Notification.
        :param timestamp: The timestamp of this Notification.
        :param type: The type of this Notification.
        :param user: The user of this Notification.
        """
        self.openapi_types = {
            'actor': str,
            'id': str,
            'read': bool,
            'target': str,
            'timestamp': str,
            'type': str,
            'user': str
        }

        self.attribute_map = {
            'actor': 'actor',
            'id': 'id',
            'read': 'read',
            'target': 'target',
            'timestamp': 'timestamp',
            'type': 'type',
            'user': 'user'
        }

        self._actor = actor
        self._id = id
        self._read = read
        self._target = target
        self._timestamp = timestamp
        self._type = type
        self._user = user

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Notification':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Notification of this Notification.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def actor(self):
        """Gets the actor of this Notification.

        Unique identifier of the object that triggered the notification.

        :return: The actor of this Notification.
        :rtype: str
        """
        return self._actor

    @actor.setter
    def actor(self, actor):
        """Sets the actor of this Notification.

        Unique identifier of the object that triggered the notification.

        :param actor: The actor of this Notification.
        :type actor: str
        """

        self._actor = actor

    @property
    def id(self):
        """Gets the id of this Notification.

        Notification unique identifier expressed as a UUID

        :return: The id of this Notification.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Notification.

        Notification unique identifier expressed as a UUID

        :param id: The id of this Notification.
        :type id: str
        """

        self._id = id

    @property
    def read(self):
        """Gets the read of this Notification.

        Whether or not the notification has been marked as read by the user.

        :return: The read of this Notification.
        :rtype: bool
        """
        return self._read

    @read.setter
    def read(self, read):
        """Sets the read of this Notification.

        Whether or not the notification has been marked as read by the user.

        :param read: The read of this Notification.
        :type read: bool
        """
        if read is None:
            raise ValueError("Invalid value for `read`, must not be `None`")

        self._read = read

    @property
    def target(self):
        """Gets the target of this Notification.

        Unique identifier of the object that was acted upon by the object referred to in actor.

        :return: The target of this Notification.
        :rtype: str
        """
        return self._target

    @target.setter
    def target(self, target):
        """Sets the target of this Notification.

        Unique identifier of the object that was acted upon by the object referred to in actor.

        :param target: The target of this Notification.
        :type target: str
        """

        self._target = target

    @property
    def timestamp(self):
        """Gets the timestamp of this Notification.

        Timestamp that the notification was created at.

        :return: The timestamp of this Notification.
        :rtype: str
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this Notification.

        Timestamp that the notification was created at.

        :param timestamp: The timestamp of this Notification.
        :type timestamp: str
        """

        self._timestamp = timestamp

    @property
    def type(self):
        """Gets the type of this Notification.

        Type of the notification, e.g. invoice.created, subscription.created, etc.

        :return: The type of this Notification.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Notification.

        Type of the notification, e.g. invoice.created, subscription.created, etc.

        :param type: The type of this Notification.
        :type type: str
        """

        self._type = type

    @property
    def user(self):
        """Gets the user of this Notification.

        User the notification is for.

        :return: The user of this Notification.
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this Notification.

        User the notification is for.

        :param user: The user of this Notification.
        :type user: str
        """

        self._user = user
