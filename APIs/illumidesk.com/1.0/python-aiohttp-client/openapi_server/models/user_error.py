# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.user_profile_error import UserProfileError
from openapi_server import util


class UserError(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, email: List[str]=None, first_name: List[str]=None, id: List[str]=None, last_name: List[str]=None, non_field_errors: List[str]=None, password: List[str]=None, profile: UserProfileError=None, username: List[str]=None):
        """UserError - a model defined in OpenAPI

        :param email: The email of this UserError.
        :param first_name: The first_name of this UserError.
        :param id: The id of this UserError.
        :param last_name: The last_name of this UserError.
        :param non_field_errors: The non_field_errors of this UserError.
        :param password: The password of this UserError.
        :param profile: The profile of this UserError.
        :param username: The username of this UserError.
        """
        self.openapi_types = {
            'email': List[str],
            'first_name': List[str],
            'id': List[str],
            'last_name': List[str],
            'non_field_errors': List[str],
            'password': List[str],
            'profile': UserProfileError,
            'username': List[str]
        }

        self.attribute_map = {
            'email': 'email',
            'first_name': 'first_name',
            'id': 'id',
            'last_name': 'last_name',
            'non_field_errors': 'non_field_errors',
            'password': 'password',
            'profile': 'profile',
            'username': 'username'
        }

        self._email = email
        self._first_name = first_name
        self._id = id
        self._last_name = last_name
        self._non_field_errors = non_field_errors
        self._password = password
        self._profile = profile
        self._username = username

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UserError':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UserError of this UserError.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def email(self):
        """Gets the email of this UserError.

        Email field errors.

        :return: The email of this UserError.
        :rtype: List[str]
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this UserError.

        Email field errors.

        :param email: The email of this UserError.
        :type email: List[str]
        """

        self._email = email

    @property
    def first_name(self):
        """Gets the first_name of this UserError.

        First name field errors.

        :return: The first_name of this UserError.
        :rtype: List[str]
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this UserError.

        First name field errors.

        :param first_name: The first_name of this UserError.
        :type first_name: List[str]
        """

        self._first_name = first_name

    @property
    def id(self):
        """Gets the id of this UserError.

        id field errors.

        :return: The id of this UserError.
        :rtype: List[str]
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this UserError.

        id field errors.

        :param id: The id of this UserError.
        :type id: List[str]
        """

        self._id = id

    @property
    def last_name(self):
        """Gets the last_name of this UserError.

        Last name field errors.

        :return: The last_name of this UserError.
        :rtype: List[str]
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this UserError.

        Last name field errors.

        :param last_name: The last_name of this UserError.
        :type last_name: List[str]
        """

        self._last_name = last_name

    @property
    def non_field_errors(self):
        """Gets the non_field_errors of this UserError.

        Errors not connected to any field.

        :return: The non_field_errors of this UserError.
        :rtype: List[str]
        """
        return self._non_field_errors

    @non_field_errors.setter
    def non_field_errors(self, non_field_errors):
        """Sets the non_field_errors of this UserError.

        Errors not connected to any field.

        :param non_field_errors: The non_field_errors of this UserError.
        :type non_field_errors: List[str]
        """

        self._non_field_errors = non_field_errors

    @property
    def password(self):
        """Gets the password of this UserError.

        Password field errors.

        :return: The password of this UserError.
        :rtype: List[str]
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this UserError.

        Password field errors.

        :param password: The password of this UserError.
        :type password: List[str]
        """

        self._password = password

    @property
    def profile(self):
        """Gets the profile of this UserError.


        :return: The profile of this UserError.
        :rtype: UserProfileError
        """
        return self._profile

    @profile.setter
    def profile(self, profile):
        """Sets the profile of this UserError.


        :param profile: The profile of this UserError.
        :type profile: UserProfileError
        """

        self._profile = profile

    @property
    def username(self):
        """Gets the username of this UserError.

        Username field errors.

        :return: The username of this UserError.
        :rtype: List[str]
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this UserError.

        Username field errors.

        :param username: The username of this UserError.
        :type username: List[str]
        """

        self._username = username
