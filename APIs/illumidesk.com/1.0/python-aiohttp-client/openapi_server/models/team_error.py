# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TeamError(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, avatar: List[str]=None, avatar_url: List[str]=None, description: List[str]=None, id: List[str]=None, location: List[str]=None, name: List[str]=None, non_field_errors: List[str]=None, website: List[str]=None):
        """TeamError - a model defined in OpenAPI

        :param avatar: The avatar of this TeamError.
        :param avatar_url: The avatar_url of this TeamError.
        :param description: The description of this TeamError.
        :param id: The id of this TeamError.
        :param location: The location of this TeamError.
        :param name: The name of this TeamError.
        :param non_field_errors: The non_field_errors of this TeamError.
        :param website: The website of this TeamError.
        """
        self.openapi_types = {
            'avatar': List[str],
            'avatar_url': List[str],
            'description': List[str],
            'id': List[str],
            'location': List[str],
            'name': List[str],
            'non_field_errors': List[str],
            'website': List[str]
        }

        self.attribute_map = {
            'avatar': 'avatar',
            'avatar_url': 'avatar_url',
            'description': 'description',
            'id': 'id',
            'location': 'location',
            'name': 'name',
            'non_field_errors': 'non_field_errors',
            'website': 'website'
        }

        self._avatar = avatar
        self._avatar_url = avatar_url
        self._description = description
        self._id = id
        self._location = location
        self._name = name
        self._non_field_errors = non_field_errors
        self._website = website

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TeamError':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TeamError of this TeamError.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def avatar(self):
        """Gets the avatar of this TeamError.

        Avatar field errors.

        :return: The avatar of this TeamError.
        :rtype: List[str]
        """
        return self._avatar

    @avatar.setter
    def avatar(self, avatar):
        """Sets the avatar of this TeamError.

        Avatar field errors.

        :param avatar: The avatar of this TeamError.
        :type avatar: List[str]
        """

        self._avatar = avatar

    @property
    def avatar_url(self):
        """Gets the avatar_url of this TeamError.

        Avatar url field errors.

        :return: The avatar_url of this TeamError.
        :rtype: List[str]
        """
        return self._avatar_url

    @avatar_url.setter
    def avatar_url(self, avatar_url):
        """Sets the avatar_url of this TeamError.

        Avatar url field errors.

        :param avatar_url: The avatar_url of this TeamError.
        :type avatar_url: List[str]
        """

        self._avatar_url = avatar_url

    @property
    def description(self):
        """Gets the description of this TeamError.

        Description field errors.

        :return: The description of this TeamError.
        :rtype: List[str]
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this TeamError.

        Description field errors.

        :param description: The description of this TeamError.
        :type description: List[str]
        """

        self._description = description

    @property
    def id(self):
        """Gets the id of this TeamError.

        Id field errors.

        :return: The id of this TeamError.
        :rtype: List[str]
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TeamError.

        Id field errors.

        :param id: The id of this TeamError.
        :type id: List[str]
        """

        self._id = id

    @property
    def location(self):
        """Gets the location of this TeamError.

        Location field errors.

        :return: The location of this TeamError.
        :rtype: List[str]
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this TeamError.

        Location field errors.

        :param location: The location of this TeamError.
        :type location: List[str]
        """

        self._location = location

    @property
    def name(self):
        """Gets the name of this TeamError.

        Name field errors.

        :return: The name of this TeamError.
        :rtype: List[str]
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TeamError.

        Name field errors.

        :param name: The name of this TeamError.
        :type name: List[str]
        """

        self._name = name

    @property
    def non_field_errors(self):
        """Gets the non_field_errors of this TeamError.

        Errors not connected to any field.

        :return: The non_field_errors of this TeamError.
        :rtype: List[str]
        """
        return self._non_field_errors

    @non_field_errors.setter
    def non_field_errors(self, non_field_errors):
        """Sets the non_field_errors of this TeamError.

        Errors not connected to any field.

        :param non_field_errors: The non_field_errors of this TeamError.
        :type non_field_errors: List[str]
        """

        self._non_field_errors = non_field_errors

    @property
    def website(self):
        """Gets the website of this TeamError.

        Website field errors.

        :return: The website of this TeamError.
        :rtype: List[str]
        """
        return self._website

    @website.setter
    def website(self, website):
        """Sets the website of this TeamError.

        Website field errors.

        :param website: The website of this TeamError.
        :type website: List[str]
        """

        self._website = website
