# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CardDataPutandPatch(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address_city: str=None, address_country: str=None, address_line1: str=None, address_line2: str=None, address_state: str=None, address_zip: str=None, exp_month: int=None, exp_year: int=None, name: str=None):
        """CardDataPutandPatch - a model defined in OpenAPI

        :param address_city: The address_city of this CardDataPutandPatch.
        :param address_country: The address_country of this CardDataPutandPatch.
        :param address_line1: The address_line1 of this CardDataPutandPatch.
        :param address_line2: The address_line2 of this CardDataPutandPatch.
        :param address_state: The address_state of this CardDataPutandPatch.
        :param address_zip: The address_zip of this CardDataPutandPatch.
        :param exp_month: The exp_month of this CardDataPutandPatch.
        :param exp_year: The exp_year of this CardDataPutandPatch.
        :param name: The name of this CardDataPutandPatch.
        """
        self.openapi_types = {
            'address_city': str,
            'address_country': str,
            'address_line1': str,
            'address_line2': str,
            'address_state': str,
            'address_zip': str,
            'exp_month': int,
            'exp_year': int,
            'name': str
        }

        self.attribute_map = {
            'address_city': 'address_city',
            'address_country': 'address_country',
            'address_line1': 'address_line1',
            'address_line2': 'address_line2',
            'address_state': 'address_state',
            'address_zip': 'address_zip',
            'exp_month': 'exp_month',
            'exp_year': 'exp_year',
            'name': 'name'
        }

        self._address_city = address_city
        self._address_country = address_country
        self._address_line1 = address_line1
        self._address_line2 = address_line2
        self._address_state = address_state
        self._address_zip = address_zip
        self._exp_month = exp_month
        self._exp_year = exp_year
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CardDataPutandPatch':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CardDataPutandPatch of this CardDataPutandPatch.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address_city(self):
        """Gets the address_city of this CardDataPutandPatch.

        Address city.

        :return: The address_city of this CardDataPutandPatch.
        :rtype: str
        """
        return self._address_city

    @address_city.setter
    def address_city(self, address_city):
        """Sets the address_city of this CardDataPutandPatch.

        Address city.

        :param address_city: The address_city of this CardDataPutandPatch.
        :type address_city: str
        """

        self._address_city = address_city

    @property
    def address_country(self):
        """Gets the address_country of this CardDataPutandPatch.

        Address country.

        :return: The address_country of this CardDataPutandPatch.
        :rtype: str
        """
        return self._address_country

    @address_country.setter
    def address_country(self, address_country):
        """Sets the address_country of this CardDataPutandPatch.

        Address country.

        :param address_country: The address_country of this CardDataPutandPatch.
        :type address_country: str
        """

        self._address_country = address_country

    @property
    def address_line1(self):
        """Gets the address_line1 of this CardDataPutandPatch.

        Address line 1.

        :return: The address_line1 of this CardDataPutandPatch.
        :rtype: str
        """
        return self._address_line1

    @address_line1.setter
    def address_line1(self, address_line1):
        """Sets the address_line1 of this CardDataPutandPatch.

        Address line 1.

        :param address_line1: The address_line1 of this CardDataPutandPatch.
        :type address_line1: str
        """

        self._address_line1 = address_line1

    @property
    def address_line2(self):
        """Gets the address_line2 of this CardDataPutandPatch.

        Address line 2.

        :return: The address_line2 of this CardDataPutandPatch.
        :rtype: str
        """
        return self._address_line2

    @address_line2.setter
    def address_line2(self, address_line2):
        """Sets the address_line2 of this CardDataPutandPatch.

        Address line 2.

        :param address_line2: The address_line2 of this CardDataPutandPatch.
        :type address_line2: str
        """

        self._address_line2 = address_line2

    @property
    def address_state(self):
        """Gets the address_state of this CardDataPutandPatch.

        Address state.

        :return: The address_state of this CardDataPutandPatch.
        :rtype: str
        """
        return self._address_state

    @address_state.setter
    def address_state(self, address_state):
        """Sets the address_state of this CardDataPutandPatch.

        Address state.

        :param address_state: The address_state of this CardDataPutandPatch.
        :type address_state: str
        """

        self._address_state = address_state

    @property
    def address_zip(self):
        """Gets the address_zip of this CardDataPutandPatch.

        Address zip code.

        :return: The address_zip of this CardDataPutandPatch.
        :rtype: str
        """
        return self._address_zip

    @address_zip.setter
    def address_zip(self, address_zip):
        """Sets the address_zip of this CardDataPutandPatch.

        Address zip code.

        :param address_zip: The address_zip of this CardDataPutandPatch.
        :type address_zip: str
        """

        self._address_zip = address_zip

    @property
    def exp_month(self):
        """Gets the exp_month of this CardDataPutandPatch.

        Card expiration month.

        :return: The exp_month of this CardDataPutandPatch.
        :rtype: int
        """
        return self._exp_month

    @exp_month.setter
    def exp_month(self, exp_month):
        """Sets the exp_month of this CardDataPutandPatch.

        Card expiration month.

        :param exp_month: The exp_month of this CardDataPutandPatch.
        :type exp_month: int
        """

        self._exp_month = exp_month

    @property
    def exp_year(self):
        """Gets the exp_year of this CardDataPutandPatch.

        Card expiration year.

        :return: The exp_year of this CardDataPutandPatch.
        :rtype: int
        """
        return self._exp_year

    @exp_year.setter
    def exp_year(self, exp_year):
        """Sets the exp_year of this CardDataPutandPatch.

        Card expiration year.

        :param exp_year: The exp_year of this CardDataPutandPatch.
        :type exp_year: int
        """

        self._exp_year = exp_year

    @property
    def name(self):
        """Gets the name of this CardDataPutandPatch.

        Card name.

        :return: The name of this CardDataPutandPatch.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CardDataPutandPatch.

        Card name.

        :param name: The name of this CardDataPutandPatch.
        :type name: str
        """

        self._name = name
