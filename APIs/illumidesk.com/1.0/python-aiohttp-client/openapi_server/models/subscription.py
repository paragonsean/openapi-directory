# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Subscription(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, application_fee_percent: float=None, cancel_at_period_end: bool=None, canceled_at: str=None, created: str=None, current_period_end: str=None, current_period_start: str=None, ended_at: str=None, id: str=None, livemode: bool=None, plan: str=None, quantity: int=None, start: str=None, status: str=None, stripe_id: str=None, trial_end: str=None, trial_start: str=None):
        """Subscription - a model defined in OpenAPI

        :param application_fee_percent: The application_fee_percent of this Subscription.
        :param cancel_at_period_end: The cancel_at_period_end of this Subscription.
        :param canceled_at: The canceled_at of this Subscription.
        :param created: The created of this Subscription.
        :param current_period_end: The current_period_end of this Subscription.
        :param current_period_start: The current_period_start of this Subscription.
        :param ended_at: The ended_at of this Subscription.
        :param id: The id of this Subscription.
        :param livemode: The livemode of this Subscription.
        :param plan: The plan of this Subscription.
        :param quantity: The quantity of this Subscription.
        :param start: The start of this Subscription.
        :param status: The status of this Subscription.
        :param stripe_id: The stripe_id of this Subscription.
        :param trial_end: The trial_end of this Subscription.
        :param trial_start: The trial_start of this Subscription.
        """
        self.openapi_types = {
            'application_fee_percent': float,
            'cancel_at_period_end': bool,
            'canceled_at': str,
            'created': str,
            'current_period_end': str,
            'current_period_start': str,
            'ended_at': str,
            'id': str,
            'livemode': bool,
            'plan': str,
            'quantity': int,
            'start': str,
            'status': str,
            'stripe_id': str,
            'trial_end': str,
            'trial_start': str
        }

        self.attribute_map = {
            'application_fee_percent': 'application_fee_percent',
            'cancel_at_period_end': 'cancel_at_period_end',
            'canceled_at': 'canceled_at',
            'created': 'created',
            'current_period_end': 'current_period_end',
            'current_period_start': 'current_period_start',
            'ended_at': 'ended_at',
            'id': 'id',
            'livemode': 'livemode',
            'plan': 'plan',
            'quantity': 'quantity',
            'start': 'start',
            'status': 'status',
            'stripe_id': 'stripe_id',
            'trial_end': 'trial_end',
            'trial_start': 'trial_start'
        }

        self._application_fee_percent = application_fee_percent
        self._cancel_at_period_end = cancel_at_period_end
        self._canceled_at = canceled_at
        self._created = created
        self._current_period_end = current_period_end
        self._current_period_start = current_period_start
        self._ended_at = ended_at
        self._id = id
        self._livemode = livemode
        self._plan = plan
        self._quantity = quantity
        self._start = start
        self._status = status
        self._stripe_id = stripe_id
        self._trial_end = trial_end
        self._trial_start = trial_start

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Subscription':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Subscription of this Subscription.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def application_fee_percent(self):
        """Gets the application_fee_percent of this Subscription.

        Application fee percent.

        :return: The application_fee_percent of this Subscription.
        :rtype: float
        """
        return self._application_fee_percent

    @application_fee_percent.setter
    def application_fee_percent(self, application_fee_percent):
        """Sets the application_fee_percent of this Subscription.

        Application fee percent.

        :param application_fee_percent: The application_fee_percent of this Subscription.
        :type application_fee_percent: float
        """

        self._application_fee_percent = application_fee_percent

    @property
    def cancel_at_period_end(self):
        """Gets the cancel_at_period_end of this Subscription.

        Boolean value to determine whether plan cancels at the end of the period, or not.

        :return: The cancel_at_period_end of this Subscription.
        :rtype: bool
        """
        return self._cancel_at_period_end

    @cancel_at_period_end.setter
    def cancel_at_period_end(self, cancel_at_period_end):
        """Sets the cancel_at_period_end of this Subscription.

        Boolean value to determine whether plan cancels at the end of the period, or not.

        :param cancel_at_period_end: The cancel_at_period_end of this Subscription.
        :type cancel_at_period_end: bool
        """

        self._cancel_at_period_end = cancel_at_period_end

    @property
    def canceled_at(self):
        """Gets the canceled_at of this Subscription.

        Date and time when plan was cancelled.

        :return: The canceled_at of this Subscription.
        :rtype: str
        """
        return self._canceled_at

    @canceled_at.setter
    def canceled_at(self, canceled_at):
        """Sets the canceled_at of this Subscription.

        Date and time when plan was cancelled.

        :param canceled_at: The canceled_at of this Subscription.
        :type canceled_at: str
        """

        self._canceled_at = canceled_at

    @property
    def created(self):
        """Gets the created of this Subscription.

        Date and time suscription was created.

        :return: The created of this Subscription.
        :rtype: str
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this Subscription.

        Date and time suscription was created.

        :param created: The created of this Subscription.
        :type created: str
        """

        self._created = created

    @property
    def current_period_end(self):
        """Gets the current_period_end of this Subscription.

        Current suscription plan end date.

        :return: The current_period_end of this Subscription.
        :rtype: str
        """
        return self._current_period_end

    @current_period_end.setter
    def current_period_end(self, current_period_end):
        """Sets the current_period_end of this Subscription.

        Current suscription plan end date.

        :param current_period_end: The current_period_end of this Subscription.
        :type current_period_end: str
        """

        self._current_period_end = current_period_end

    @property
    def current_period_start(self):
        """Gets the current_period_start of this Subscription.

        Current suscription plan start date.

        :return: The current_period_start of this Subscription.
        :rtype: str
        """
        return self._current_period_start

    @current_period_start.setter
    def current_period_start(self, current_period_start):
        """Sets the current_period_start of this Subscription.

        Current suscription plan start date.

        :param current_period_start: The current_period_start of this Subscription.
        :type current_period_start: str
        """

        self._current_period_start = current_period_start

    @property
    def ended_at(self):
        """Gets the ended_at of this Subscription.

        Date and time for when plan ended.

        :return: The ended_at of this Subscription.
        :rtype: str
        """
        return self._ended_at

    @ended_at.setter
    def ended_at(self, ended_at):
        """Sets the ended_at of this Subscription.

        Date and time for when plan ended.

        :param ended_at: The ended_at of this Subscription.
        :type ended_at: str
        """

        self._ended_at = ended_at

    @property
    def id(self):
        """Gets the id of this Subscription.

        Unique identifier for suscription as UUID.

        :return: The id of this Subscription.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Subscription.

        Unique identifier for suscription as UUID.

        :param id: The id of this Subscription.
        :type id: str
        """

        self._id = id

    @property
    def livemode(self):
        """Gets the livemode of this Subscription.

        Suscription live, or not.

        :return: The livemode of this Subscription.
        :rtype: bool
        """
        return self._livemode

    @livemode.setter
    def livemode(self, livemode):
        """Sets the livemode of this Subscription.

        Suscription live, or not.

        :param livemode: The livemode of this Subscription.
        :type livemode: bool
        """

        self._livemode = livemode

    @property
    def plan(self):
        """Gets the plan of this Subscription.

        Plan name.

        :return: The plan of this Subscription.
        :rtype: str
        """
        return self._plan

    @plan.setter
    def plan(self, plan):
        """Sets the plan of this Subscription.

        Plan name.

        :param plan: The plan of this Subscription.
        :type plan: str
        """
        if plan is None:
            raise ValueError("Invalid value for `plan`, must not be `None`")

        self._plan = plan

    @property
    def quantity(self):
        """Gets the quantity of this Subscription.

        Quantity purchased as integer.

        :return: The quantity of this Subscription.
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this Subscription.

        Quantity purchased as integer.

        :param quantity: The quantity of this Subscription.
        :type quantity: int
        """

        self._quantity = quantity

    @property
    def start(self):
        """Gets the start of this Subscription.

        Date and time for when plan started.

        :return: The start of this Subscription.
        :rtype: str
        """
        return self._start

    @start.setter
    def start(self, start):
        """Sets the start of this Subscription.

        Date and time for when plan started.

        :param start: The start of this Subscription.
        :type start: str
        """

        self._start = start

    @property
    def status(self):
        """Gets the status of this Subscription.

        Suscription status.

        :return: The status of this Subscription.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Subscription.

        Suscription status.

        :param status: The status of this Subscription.
        :type status: str
        """

        self._status = status

    @property
    def stripe_id(self):
        """Gets the stripe_id of this Subscription.

        Stripe (payment processor) identifier.

        :return: The stripe_id of this Subscription.
        :rtype: str
        """
        return self._stripe_id

    @stripe_id.setter
    def stripe_id(self, stripe_id):
        """Sets the stripe_id of this Subscription.

        Stripe (payment processor) identifier.

        :param stripe_id: The stripe_id of this Subscription.
        :type stripe_id: str
        """

        self._stripe_id = stripe_id

    @property
    def trial_end(self):
        """Gets the trial_end of this Subscription.

        Date and time for trial end.

        :return: The trial_end of this Subscription.
        :rtype: str
        """
        return self._trial_end

    @trial_end.setter
    def trial_end(self, trial_end):
        """Sets the trial_end of this Subscription.

        Date and time for trial end.

        :param trial_end: The trial_end of this Subscription.
        :type trial_end: str
        """

        self._trial_end = trial_end

    @property
    def trial_start(self):
        """Gets the trial_start of this Subscription.

        Date and time for trial start.

        :return: The trial_start of this Subscription.
        :rtype: str
        """
        return self._trial_start

    @trial_start.setter
    def trial_start(self, trial_start):
        """Sets the trial_start of this Subscription.

        Date and time for trial start.

        :param trial_start: The trial_start of this Subscription.
        :type trial_start: str
        """

        self._trial_start = trial_start
