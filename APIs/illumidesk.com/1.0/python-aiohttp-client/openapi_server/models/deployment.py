# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.deployment_config import DeploymentConfig
from openapi_server import util


class Deployment(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, config: DeploymentConfig=None, created_at: str=None, created_by: str=None, framework: str=None, id: str=None, name: str=None, project: str=None, runtime: str=None):
        """Deployment - a model defined in OpenAPI

        :param config: The config of this Deployment.
        :param created_at: The created_at of this Deployment.
        :param created_by: The created_by of this Deployment.
        :param framework: The framework of this Deployment.
        :param id: The id of this Deployment.
        :param name: The name of this Deployment.
        :param project: The project of this Deployment.
        :param runtime: The runtime of this Deployment.
        """
        self.openapi_types = {
            'config': DeploymentConfig,
            'created_at': str,
            'created_by': str,
            'framework': str,
            'id': str,
            'name': str,
            'project': str,
            'runtime': str
        }

        self.attribute_map = {
            'config': 'config',
            'created_at': 'created_at',
            'created_by': 'created_by',
            'framework': 'framework',
            'id': 'id',
            'name': 'name',
            'project': 'project',
            'runtime': 'runtime'
        }

        self._config = config
        self._created_at = created_at
        self._created_by = created_by
        self._framework = framework
        self._id = id
        self._name = name
        self._project = project
        self._runtime = runtime

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Deployment':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Deployment of this Deployment.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def config(self):
        """Gets the config of this Deployment.


        :return: The config of this Deployment.
        :rtype: DeploymentConfig
        """
        return self._config

    @config.setter
    def config(self, config):
        """Sets the config of this Deployment.


        :param config: The config of this Deployment.
        :type config: DeploymentConfig
        """

        self._config = config

    @property
    def created_at(self):
        """Gets the created_at of this Deployment.

        Date and time when server was created.

        :return: The created_at of this Deployment.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Deployment.

        Date and time when server was created.

        :param created_at: The created_at of this Deployment.
        :type created_at: str
        """

        self._created_at = created_at

    @property
    def created_by(self):
        """Gets the created_by of this Deployment.

        User that created server.

        :return: The created_by of this Deployment.
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this Deployment.

        User that created server.

        :param created_by: The created_by of this Deployment.
        :type created_by: str
        """

        self._created_by = created_by

    @property
    def framework(self):
        """Gets the framework of this Deployment.

        Framework that the deployment will have access to.

        :return: The framework of this Deployment.
        :rtype: str
        """
        return self._framework

    @framework.setter
    def framework(self, framework):
        """Sets the framework of this Deployment.

        Framework that the deployment will have access to.

        :param framework: The framework of this Deployment.
        :type framework: str
        """
        allowed_values = ["tensorflow"]  # noqa: E501
        if framework not in allowed_values:
            raise ValueError(
                "Invalid value for `framework` ({0}), must be one of {1}"
                .format(framework, allowed_values)
            )

        self._framework = framework

    @property
    def id(self):
        """Gets the id of this Deployment.

        Deploymeny unique identifier

        :return: The id of this Deployment.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Deployment.

        Deploymeny unique identifier

        :param id: The id of this Deployment.
        :type id: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Deployment.

        Deployment name.

        :return: The name of this Deployment.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Deployment.

        Deployment name.

        :param name: The name of this Deployment.
        :type name: str
        """

        self._name = name

    @property
    def project(self):
        """Gets the project of this Deployment.

        Project name.

        :return: The project of this Deployment.
        :rtype: str
        """
        return self._project

    @project.setter
    def project(self, project):
        """Sets the project of this Deployment.

        Project name.

        :param project: The project of this Deployment.
        :type project: str
        """

        self._project = project

    @property
    def runtime(self):
        """Gets the runtime of this Deployment.

        Language runtime the deployment will use.

        :return: The runtime of this Deployment.
        :rtype: str
        """
        return self._runtime

    @runtime.setter
    def runtime(self, runtime):
        """Sets the runtime of this Deployment.

        Language runtime the deployment will use.

        :param runtime: The runtime of this Deployment.
        :type runtime: str
        """
        allowed_values = ["python2.7"]  # noqa: E501
        if runtime not in allowed_values:
            raise ValueError(
                "Invalid value for `runtime` ({0}), must be one of {1}"
                .format(runtime, allowed_values)
            )

        self._runtime = runtime
