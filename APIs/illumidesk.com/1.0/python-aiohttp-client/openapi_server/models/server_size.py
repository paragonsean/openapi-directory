# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ServerSize(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, active: bool=None, cpu: int=None, id: str=None, memory: int=None, name: str=None):
        """ServerSize - a model defined in OpenAPI

        :param active: The active of this ServerSize.
        :param cpu: The cpu of this ServerSize.
        :param id: The id of this ServerSize.
        :param memory: The memory of this ServerSize.
        :param name: The name of this ServerSize.
        """
        self.openapi_types = {
            'active': bool,
            'cpu': int,
            'id': str,
            'memory': int,
            'name': str
        }

        self.attribute_map = {
            'active': 'active',
            'cpu': 'cpu',
            'id': 'id',
            'memory': 'memory',
            'name': 'name'
        }

        self._active = active
        self._cpu = cpu
        self._id = id
        self._memory = memory
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ServerSize':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ServerSize of this ServerSize.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def active(self):
        """Gets the active of this ServerSize.

        States whether the Server size is active, or not.

        :return: The active of this ServerSize.
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this ServerSize.

        States whether the Server size is active, or not.

        :param active: The active of this ServerSize.
        :type active: bool
        """

        self._active = active

    @property
    def cpu(self):
        """Gets the cpu of this ServerSize.

        CPU availability, equivalent to --cpus=<value>. For example if a host has 2 CPU's, then a value of 1.5 would be limit the container to using all of the first CPU and half of the second CPU. 

        :return: The cpu of this ServerSize.
        :rtype: int
        """
        return self._cpu

    @cpu.setter
    def cpu(self, cpu):
        """Sets the cpu of this ServerSize.

        CPU availability, equivalent to --cpus=<value>. For example if a host has 2 CPU's, then a value of 1.5 would be limit the container to using all of the first CPU and half of the second CPU. 

        :param cpu: The cpu of this ServerSize.
        :type cpu: int
        """
        if cpu is None:
            raise ValueError("Invalid value for `cpu`, must not be `None`")

        self._cpu = cpu

    @property
    def id(self):
        """Gets the id of this ServerSize.

        Server size unique identifier.

        :return: The id of this ServerSize.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ServerSize.

        Server size unique identifier.

        :param id: The id of this ServerSize.
        :type id: str
        """

        self._id = id

    @property
    def memory(self):
        """Gets the memory of this ServerSize.

        Memory restriction for container.

        :return: The memory of this ServerSize.
        :rtype: int
        """
        return self._memory

    @memory.setter
    def memory(self, memory):
        """Sets the memory of this ServerSize.

        Memory restriction for container.

        :param memory: The memory of this ServerSize.
        :type memory: int
        """
        if memory is None:
            raise ValueError("Invalid value for `memory`, must not be `None`")

        self._memory = memory

    @property
    def name(self):
        """Gets the name of this ServerSize.

        Server size name.

        :return: The name of this ServerSize.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ServerSize.

        Server size name.

        :param name: The name of this ServerSize.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name
