# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ServerError(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, config: List[str]=None, connected: List[str]=None, created_at: List[str]=None, endpoint: List[str]=None, host: List[str]=None, id: List[str]=None, image_name: List[str]=None, logs_url: List[str]=None, name: List[str]=None, non_field_errors: List[str]=None, server_size: List[str]=None, startup_script: List[str]=None, status: List[str]=None, status_url: List[str]=None):
        """ServerError - a model defined in OpenAPI

        :param config: The config of this ServerError.
        :param connected: The connected of this ServerError.
        :param created_at: The created_at of this ServerError.
        :param endpoint: The endpoint of this ServerError.
        :param host: The host of this ServerError.
        :param id: The id of this ServerError.
        :param image_name: The image_name of this ServerError.
        :param logs_url: The logs_url of this ServerError.
        :param name: The name of this ServerError.
        :param non_field_errors: The non_field_errors of this ServerError.
        :param server_size: The server_size of this ServerError.
        :param startup_script: The startup_script of this ServerError.
        :param status: The status of this ServerError.
        :param status_url: The status_url of this ServerError.
        """
        self.openapi_types = {
            'config': List[str],
            'connected': List[str],
            'created_at': List[str],
            'endpoint': List[str],
            'host': List[str],
            'id': List[str],
            'image_name': List[str],
            'logs_url': List[str],
            'name': List[str],
            'non_field_errors': List[str],
            'server_size': List[str],
            'startup_script': List[str],
            'status': List[str],
            'status_url': List[str]
        }

        self.attribute_map = {
            'config': 'config',
            'connected': 'connected',
            'created_at': 'created_at',
            'endpoint': 'endpoint',
            'host': 'host',
            'id': 'id',
            'image_name': 'image_name',
            'logs_url': 'logs_url',
            'name': 'name',
            'non_field_errors': 'non_field_errors',
            'server_size': 'server_size',
            'startup_script': 'startup_script',
            'status': 'status',
            'status_url': 'status_url'
        }

        self._config = config
        self._connected = connected
        self._created_at = created_at
        self._endpoint = endpoint
        self._host = host
        self._id = id
        self._image_name = image_name
        self._logs_url = logs_url
        self._name = name
        self._non_field_errors = non_field_errors
        self._server_size = server_size
        self._startup_script = startup_script
        self._status = status
        self._status_url = status_url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ServerError':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ServerError of this ServerError.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def config(self):
        """Gets the config of this ServerError.

        config field errors.

        :return: The config of this ServerError.
        :rtype: List[str]
        """
        return self._config

    @config.setter
    def config(self, config):
        """Sets the config of this ServerError.

        config field errors.

        :param config: The config of this ServerError.
        :type config: List[str]
        """

        self._config = config

    @property
    def connected(self):
        """Gets the connected of this ServerError.

        connected field errors.

        :return: The connected of this ServerError.
        :rtype: List[str]
        """
        return self._connected

    @connected.setter
    def connected(self, connected):
        """Sets the connected of this ServerError.

        connected field errors.

        :param connected: The connected of this ServerError.
        :type connected: List[str]
        """

        self._connected = connected

    @property
    def created_at(self):
        """Gets the created_at of this ServerError.

        created_at field errors.

        :return: The created_at of this ServerError.
        :rtype: List[str]
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this ServerError.

        created_at field errors.

        :param created_at: The created_at of this ServerError.
        :type created_at: List[str]
        """

        self._created_at = created_at

    @property
    def endpoint(self):
        """Gets the endpoint of this ServerError.

        endpoint field errors.

        :return: The endpoint of this ServerError.
        :rtype: List[str]
        """
        return self._endpoint

    @endpoint.setter
    def endpoint(self, endpoint):
        """Sets the endpoint of this ServerError.

        endpoint field errors.

        :param endpoint: The endpoint of this ServerError.
        :type endpoint: List[str]
        """

        self._endpoint = endpoint

    @property
    def host(self):
        """Gets the host of this ServerError.

        host field errors.

        :return: The host of this ServerError.
        :rtype: List[str]
        """
        return self._host

    @host.setter
    def host(self, host):
        """Sets the host of this ServerError.

        host field errors.

        :param host: The host of this ServerError.
        :type host: List[str]
        """

        self._host = host

    @property
    def id(self):
        """Gets the id of this ServerError.

        id field errors.

        :return: The id of this ServerError.
        :rtype: List[str]
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ServerError.

        id field errors.

        :param id: The id of this ServerError.
        :type id: List[str]
        """

        self._id = id

    @property
    def image_name(self):
        """Gets the image_name of this ServerError.

        image_name field errors.

        :return: The image_name of this ServerError.
        :rtype: List[str]
        """
        return self._image_name

    @image_name.setter
    def image_name(self, image_name):
        """Sets the image_name of this ServerError.

        image_name field errors.

        :param image_name: The image_name of this ServerError.
        :type image_name: List[str]
        """

        self._image_name = image_name

    @property
    def logs_url(self):
        """Gets the logs_url of this ServerError.

        logs_url field errors.

        :return: The logs_url of this ServerError.
        :rtype: List[str]
        """
        return self._logs_url

    @logs_url.setter
    def logs_url(self, logs_url):
        """Sets the logs_url of this ServerError.

        logs_url field errors.

        :param logs_url: The logs_url of this ServerError.
        :type logs_url: List[str]
        """

        self._logs_url = logs_url

    @property
    def name(self):
        """Gets the name of this ServerError.

        name field errors.

        :return: The name of this ServerError.
        :rtype: List[str]
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ServerError.

        name field errors.

        :param name: The name of this ServerError.
        :type name: List[str]
        """

        self._name = name

    @property
    def non_field_errors(self):
        """Gets the non_field_errors of this ServerError.

        Errors not connected to any field.

        :return: The non_field_errors of this ServerError.
        :rtype: List[str]
        """
        return self._non_field_errors

    @non_field_errors.setter
    def non_field_errors(self, non_field_errors):
        """Sets the non_field_errors of this ServerError.

        Errors not connected to any field.

        :param non_field_errors: The non_field_errors of this ServerError.
        :type non_field_errors: List[str]
        """

        self._non_field_errors = non_field_errors

    @property
    def server_size(self):
        """Gets the server_size of this ServerError.

        server_size field errors.

        :return: The server_size of this ServerError.
        :rtype: List[str]
        """
        return self._server_size

    @server_size.setter
    def server_size(self, server_size):
        """Sets the server_size of this ServerError.

        server_size field errors.

        :param server_size: The server_size of this ServerError.
        :type server_size: List[str]
        """

        self._server_size = server_size

    @property
    def startup_script(self):
        """Gets the startup_script of this ServerError.

        startup_script field errors.

        :return: The startup_script of this ServerError.
        :rtype: List[str]
        """
        return self._startup_script

    @startup_script.setter
    def startup_script(self, startup_script):
        """Sets the startup_script of this ServerError.

        startup_script field errors.

        :param startup_script: The startup_script of this ServerError.
        :type startup_script: List[str]
        """

        self._startup_script = startup_script

    @property
    def status(self):
        """Gets the status of this ServerError.

        status field errors.

        :return: The status of this ServerError.
        :rtype: List[str]
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ServerError.

        status field errors.

        :param status: The status of this ServerError.
        :type status: List[str]
        """

        self._status = status

    @property
    def status_url(self):
        """Gets the status_url of this ServerError.

        status_url field errors.

        :return: The status_url of this ServerError.
        :rtype: List[str]
        """
        return self._status_url

    @status_url.setter
    def status_url(self, status_url):
        """Sets the status_url of this ServerError.

        status_url field errors.

        :param status_url: The status_url of this ServerError.
        :type status_url: List[str]
        """

        self._status_url = status_url
