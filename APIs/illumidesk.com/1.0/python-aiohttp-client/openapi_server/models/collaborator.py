# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Collaborator(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, email: str=None, first_name: str=None, id: str=None, joined: str=None, last_name: str=None, owner: bool=None, permissions: List[str]=None, project: str=None, user: str=None, username: str=None):
        """Collaborator - a model defined in OpenAPI

        :param email: The email of this Collaborator.
        :param first_name: The first_name of this Collaborator.
        :param id: The id of this Collaborator.
        :param joined: The joined of this Collaborator.
        :param last_name: The last_name of this Collaborator.
        :param owner: The owner of this Collaborator.
        :param permissions: The permissions of this Collaborator.
        :param project: The project of this Collaborator.
        :param user: The user of this Collaborator.
        :param username: The username of this Collaborator.
        """
        self.openapi_types = {
            'email': str,
            'first_name': str,
            'id': str,
            'joined': str,
            'last_name': str,
            'owner': bool,
            'permissions': List[str],
            'project': str,
            'user': str,
            'username': str
        }

        self.attribute_map = {
            'email': 'email',
            'first_name': 'first_name',
            'id': 'id',
            'joined': 'joined',
            'last_name': 'last_name',
            'owner': 'owner',
            'permissions': 'permissions',
            'project': 'project',
            'user': 'user',
            'username': 'username'
        }

        self._email = email
        self._first_name = first_name
        self._id = id
        self._joined = joined
        self._last_name = last_name
        self._owner = owner
        self._permissions = permissions
        self._project = project
        self._user = user
        self._username = username

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Collaborator':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Collaborator of this Collaborator.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def email(self):
        """Gets the email of this Collaborator.

        Collaborator's valid email address.

        :return: The email of this Collaborator.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this Collaborator.

        Collaborator's valid email address.

        :param email: The email of this Collaborator.
        :type email: str
        """

        self._email = email

    @property
    def first_name(self):
        """Gets the first_name of this Collaborator.

        Collaborator's first name.

        :return: The first_name of this Collaborator.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this Collaborator.

        Collaborator's first name.

        :param first_name: The first_name of this Collaborator.
        :type first_name: str
        """

        self._first_name = first_name

    @property
    def id(self):
        """Gets the id of this Collaborator.

        Collaborator unique identifier in UUID format.

        :return: The id of this Collaborator.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Collaborator.

        Collaborator unique identifier in UUID format.

        :param id: The id of this Collaborator.
        :type id: str
        """

        self._id = id

    @property
    def joined(self):
        """Gets the joined of this Collaborator.

        Date time of when collaborator joined.

        :return: The joined of this Collaborator.
        :rtype: str
        """
        return self._joined

    @joined.setter
    def joined(self, joined):
        """Sets the joined of this Collaborator.

        Date time of when collaborator joined.

        :param joined: The joined of this Collaborator.
        :type joined: str
        """

        self._joined = joined

    @property
    def last_name(self):
        """Gets the last_name of this Collaborator.

        Collaborator's last name.

        :return: The last_name of this Collaborator.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this Collaborator.

        Collaborator's last name.

        :param last_name: The last_name of this Collaborator.
        :type last_name: str
        """

        self._last_name = last_name

    @property
    def owner(self):
        """Gets the owner of this Collaborator.

        Boolean that states whether collaborator is project owner, or not. 

        :return: The owner of this Collaborator.
        :rtype: bool
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this Collaborator.

        Boolean that states whether collaborator is project owner, or not. 

        :param owner: The owner of this Collaborator.
        :type owner: bool
        """

        self._owner = owner

    @property
    def permissions(self):
        """Gets the permissions of this Collaborator.

        Collaborator permissions. Project creators are assigned owner priviledges by default. Permissions are write and read. 

        :return: The permissions of this Collaborator.
        :rtype: List[str]
        """
        return self._permissions

    @permissions.setter
    def permissions(self, permissions):
        """Sets the permissions of this Collaborator.

        Collaborator permissions. Project creators are assigned owner priviledges by default. Permissions are write and read. 

        :param permissions: The permissions of this Collaborator.
        :type permissions: List[str]
        """
        allowed_values = ["write_project", "read_project"]  # noqa: E501
        if not set(permissions).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `permissions` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(permissions) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._permissions = permissions

    @property
    def project(self):
        """Gets the project of this Collaborator.

        Collaborator project name.

        :return: The project of this Collaborator.
        :rtype: str
        """
        return self._project

    @project.setter
    def project(self, project):
        """Sets the project of this Collaborator.

        Collaborator project name.

        :param project: The project of this Collaborator.
        :type project: str
        """

        self._project = project

    @property
    def user(self):
        """Gets the user of this Collaborator.

        Collaborator user name.

        :return: The user of this Collaborator.
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this Collaborator.

        Collaborator user name.

        :param user: The user of this Collaborator.
        :type user: str
        """

        self._user = user

    @property
    def username(self):
        """Gets the username of this Collaborator.

        Collaborator's user name. This must be a valid user name within the system. 

        :return: The username of this Collaborator.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this Collaborator.

        Collaborator's user name. This must be a valid user name within the system. 

        :param username: The username of this Collaborator.
        :type username: str
        """

        self._username = username
