# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Action(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, action: str=None, action_name: str=None, can_be_cancelled: bool=None, can_be_retried: bool=None, end_date: str=None, id: str=None, ip: str=None, is_user_action: bool=None, method: str=None, object: str=None, path: str=None, payload: object=None, resource_uri: str=None, start_date: str=None, state: str=None, user: str=None, user_agent: str=None):
        """Action - a model defined in OpenAPI

        :param action: The action of this Action.
        :param action_name: The action_name of this Action.
        :param can_be_cancelled: The can_be_cancelled of this Action.
        :param can_be_retried: The can_be_retried of this Action.
        :param end_date: The end_date of this Action.
        :param id: The id of this Action.
        :param ip: The ip of this Action.
        :param is_user_action: The is_user_action of this Action.
        :param method: The method of this Action.
        :param object: The object of this Action.
        :param path: The path of this Action.
        :param payload: The payload of this Action.
        :param resource_uri: The resource_uri of this Action.
        :param start_date: The start_date of this Action.
        :param state: The state of this Action.
        :param user: The user of this Action.
        :param user_agent: The user_agent of this Action.
        """
        self.openapi_types = {
            'action': str,
            'action_name': str,
            'can_be_cancelled': bool,
            'can_be_retried': bool,
            'end_date': str,
            'id': str,
            'ip': str,
            'is_user_action': bool,
            'method': str,
            'object': str,
            'path': str,
            'payload': object,
            'resource_uri': str,
            'start_date': str,
            'state': str,
            'user': str,
            'user_agent': str
        }

        self.attribute_map = {
            'action': 'action',
            'action_name': 'action_name',
            'can_be_cancelled': 'can_be_cancelled',
            'can_be_retried': 'can_be_retried',
            'end_date': 'end_date',
            'id': 'id',
            'ip': 'ip',
            'is_user_action': 'is_user_action',
            'method': 'method',
            'object': 'object',
            'path': 'path',
            'payload': 'payload',
            'resource_uri': 'resource_uri',
            'start_date': 'start_date',
            'state': 'state',
            'user': 'user',
            'user_agent': 'user_agent'
        }

        self._action = action
        self._action_name = action_name
        self._can_be_cancelled = can_be_cancelled
        self._can_be_retried = can_be_retried
        self._end_date = end_date
        self._id = id
        self._ip = ip
        self._is_user_action = is_user_action
        self._method = method
        self._object = object
        self._path = path
        self._payload = payload
        self._resource_uri = resource_uri
        self._start_date = start_date
        self._state = state
        self._user = user
        self._user_agent = user_agent

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Action':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Action of this Action.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def action(self):
        """Gets the action of this Action.

        Action name.

        :return: The action of this Action.
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this Action.

        Action name.

        :param action: The action of this Action.
        :type action: str
        """
        if action is None:
            raise ValueError("Invalid value for `action`, must not be `None`")

        self._action = action

    @property
    def action_name(self):
        """Gets the action_name of this Action.

        Action name.

        :return: The action_name of this Action.
        :rtype: str
        """
        return self._action_name

    @action_name.setter
    def action_name(self, action_name):
        """Sets the action_name of this Action.

        Action name.

        :param action_name: The action_name of this Action.
        :type action_name: str
        """

        self._action_name = action_name

    @property
    def can_be_cancelled(self):
        """Gets the can_be_cancelled of this Action.

        Can action be cancelled, or not.

        :return: The can_be_cancelled of this Action.
        :rtype: bool
        """
        return self._can_be_cancelled

    @can_be_cancelled.setter
    def can_be_cancelled(self, can_be_cancelled):
        """Sets the can_be_cancelled of this Action.

        Can action be cancelled, or not.

        :param can_be_cancelled: The can_be_cancelled of this Action.
        :type can_be_cancelled: bool
        """

        self._can_be_cancelled = can_be_cancelled

    @property
    def can_be_retried(self):
        """Gets the can_be_retried of this Action.

        May action be retried, or not.

        :return: The can_be_retried of this Action.
        :rtype: bool
        """
        return self._can_be_retried

    @can_be_retried.setter
    def can_be_retried(self, can_be_retried):
        """Sets the can_be_retried of this Action.

        May action be retried, or not.

        :param can_be_retried: The can_be_retried of this Action.
        :type can_be_retried: bool
        """

        self._can_be_retried = can_be_retried

    @property
    def end_date(self):
        """Gets the end_date of this Action.

        Action needs to end before a certain date and time.

        :return: The end_date of this Action.
        :rtype: str
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this Action.

        Action needs to end before a certain date and time.

        :param end_date: The end_date of this Action.
        :type end_date: str
        """

        self._end_date = end_date

    @property
    def id(self):
        """Gets the id of this Action.

        Action unique identifier, expressed as UUID.

        :return: The id of this Action.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Action.

        Action unique identifier, expressed as UUID.

        :param id: The id of this Action.
        :type id: str
        """

        self._id = id

    @property
    def ip(self):
        """Gets the ip of this Action.

        IP address that action is related to.

        :return: The ip of this Action.
        :rtype: str
        """
        return self._ip

    @ip.setter
    def ip(self, ip):
        """Sets the ip of this Action.

        IP address that action is related to.

        :param ip: The ip of this Action.
        :type ip: str
        """

        self._ip = ip

    @property
    def is_user_action(self):
        """Gets the is_user_action of this Action.

        Is the action related to a user, or not.

        :return: The is_user_action of this Action.
        :rtype: bool
        """
        return self._is_user_action

    @is_user_action.setter
    def is_user_action(self, is_user_action):
        """Sets the is_user_action of this Action.

        Is the action related to a user, or not.

        :param is_user_action: The is_user_action of this Action.
        :type is_user_action: bool
        """

        self._is_user_action = is_user_action

    @property
    def method(self):
        """Gets the method of this Action.

        Action method.

        :return: The method of this Action.
        :rtype: str
        """
        return self._method

    @method.setter
    def method(self, method):
        """Sets the method of this Action.

        Action method.

        :param method: The method of this Action.
        :type method: str
        """
        if method is None:
            raise ValueError("Invalid value for `method`, must not be `None`")

        self._method = method

    @property
    def object(self):
        """Gets the object of this Action.

        Action object.

        :return: The object of this Action.
        :rtype: str
        """
        return self._object

    @object.setter
    def object(self, object):
        """Sets the object of this Action.

        Action object.

        :param object: The object of this Action.
        :type object: str
        """

        self._object = object

    @property
    def path(self):
        """Gets the path of this Action.

        Action path.

        :return: The path of this Action.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this Action.

        Action path.

        :param path: The path of this Action.
        :type path: str
        """

        self._path = path

    @property
    def payload(self):
        """Gets the payload of this Action.

        Object action payload.

        :return: The payload of this Action.
        :rtype: object
        """
        return self._payload

    @payload.setter
    def payload(self, payload):
        """Sets the payload of this Action.

        Object action payload.

        :param payload: The payload of this Action.
        :type payload: object
        """

        self._payload = payload

    @property
    def resource_uri(self):
        """Gets the resource_uri of this Action.

        Resource URI.

        :return: The resource_uri of this Action.
        :rtype: str
        """
        return self._resource_uri

    @resource_uri.setter
    def resource_uri(self, resource_uri):
        """Sets the resource_uri of this Action.

        Resource URI.

        :param resource_uri: The resource_uri of this Action.
        :type resource_uri: str
        """

        self._resource_uri = resource_uri

    @property
    def start_date(self):
        """Gets the start_date of this Action.

        Action date and time start.

        :return: The start_date of this Action.
        :rtype: str
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this Action.

        Action date and time start.

        :param start_date: The start_date of this Action.
        :type start_date: str
        """

        self._start_date = start_date

    @property
    def state(self):
        """Gets the state of this Action.

        Action state.

        :return: The state of this Action.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Action.

        Action state.

        :param state: The state of this Action.
        :type state: str
        """
        if state is None:
            raise ValueError("Invalid value for `state`, must not be `None`")

        self._state = state

    @property
    def user(self):
        """Gets the user of this Action.

        User that action is assigned to.

        :return: The user of this Action.
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this Action.

        User that action is assigned to.

        :param user: The user of this Action.
        :type user: str
        """

        self._user = user

    @property
    def user_agent(self):
        """Gets the user_agent of this Action.

        User agent that action is related to.

        :return: The user_agent of this Action.
        :rtype: str
        """
        return self._user_agent

    @user_agent.setter
    def user_agent(self, user_agent):
        """Sets the user_agent of this Action.

        User agent that action is related to.

        :param user_agent: The user_agent of this Action.
        :type user_agent: str
        """
        if user_agent is None:
            raise ValueError("Invalid value for `user_agent`, must not be `None`")

        self._user_agent = user_agent
