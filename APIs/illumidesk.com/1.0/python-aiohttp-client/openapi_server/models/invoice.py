# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Invoice(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amount_due: int=None, application_fee: int=None, attempt_count: int=None, attempted: bool=None, closed: bool=None, created: str=None, currency: str=None, customer: str=None, description: str=None, id: str=None, invoice_date: str=None, livemode: bool=None, metadata: object=None, next_payment_attempt: str=None, paid: bool=None, period_end: str=None, period_start: str=None, reciept_number: str=None, starting_balance: int=None, statement_descriptor: str=None, stripe_id: str=None, subscription: str=None, subtotal: int=None, tax: int=None, total: int=None):
        """Invoice - a model defined in OpenAPI

        :param amount_due: The amount_due of this Invoice.
        :param application_fee: The application_fee of this Invoice.
        :param attempt_count: The attempt_count of this Invoice.
        :param attempted: The attempted of this Invoice.
        :param closed: The closed of this Invoice.
        :param created: The created of this Invoice.
        :param currency: The currency of this Invoice.
        :param customer: The customer of this Invoice.
        :param description: The description of this Invoice.
        :param id: The id of this Invoice.
        :param invoice_date: The invoice_date of this Invoice.
        :param livemode: The livemode of this Invoice.
        :param metadata: The metadata of this Invoice.
        :param next_payment_attempt: The next_payment_attempt of this Invoice.
        :param paid: The paid of this Invoice.
        :param period_end: The period_end of this Invoice.
        :param period_start: The period_start of this Invoice.
        :param reciept_number: The reciept_number of this Invoice.
        :param starting_balance: The starting_balance of this Invoice.
        :param statement_descriptor: The statement_descriptor of this Invoice.
        :param stripe_id: The stripe_id of this Invoice.
        :param subscription: The subscription of this Invoice.
        :param subtotal: The subtotal of this Invoice.
        :param tax: The tax of this Invoice.
        :param total: The total of this Invoice.
        """
        self.openapi_types = {
            'amount_due': int,
            'application_fee': int,
            'attempt_count': int,
            'attempted': bool,
            'closed': bool,
            'created': str,
            'currency': str,
            'customer': str,
            'description': str,
            'id': str,
            'invoice_date': str,
            'livemode': bool,
            'metadata': object,
            'next_payment_attempt': str,
            'paid': bool,
            'period_end': str,
            'period_start': str,
            'reciept_number': str,
            'starting_balance': int,
            'statement_descriptor': str,
            'stripe_id': str,
            'subscription': str,
            'subtotal': int,
            'tax': int,
            'total': int
        }

        self.attribute_map = {
            'amount_due': 'amount_due',
            'application_fee': 'application_fee',
            'attempt_count': 'attempt_count',
            'attempted': 'attempted',
            'closed': 'closed',
            'created': 'created',
            'currency': 'currency',
            'customer': 'customer',
            'description': 'description',
            'id': 'id',
            'invoice_date': 'invoice_date',
            'livemode': 'livemode',
            'metadata': 'metadata',
            'next_payment_attempt': 'next_payment_attempt',
            'paid': 'paid',
            'period_end': 'period_end',
            'period_start': 'period_start',
            'reciept_number': 'reciept_number',
            'starting_balance': 'starting_balance',
            'statement_descriptor': 'statement_descriptor',
            'stripe_id': 'stripe_id',
            'subscription': 'subscription',
            'subtotal': 'subtotal',
            'tax': 'tax',
            'total': 'total'
        }

        self._amount_due = amount_due
        self._application_fee = application_fee
        self._attempt_count = attempt_count
        self._attempted = attempted
        self._closed = closed
        self._created = created
        self._currency = currency
        self._customer = customer
        self._description = description
        self._id = id
        self._invoice_date = invoice_date
        self._livemode = livemode
        self._metadata = metadata
        self._next_payment_attempt = next_payment_attempt
        self._paid = paid
        self._period_end = period_end
        self._period_start = period_start
        self._reciept_number = reciept_number
        self._starting_balance = starting_balance
        self._statement_descriptor = statement_descriptor
        self._stripe_id = stripe_id
        self._subscription = subscription
        self._subtotal = subtotal
        self._tax = tax
        self._total = total

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Invoice':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Invoice of this Invoice.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amount_due(self):
        """Gets the amount_due of this Invoice.

        Amount due set in invoice.

        :return: The amount_due of this Invoice.
        :rtype: int
        """
        return self._amount_due

    @amount_due.setter
    def amount_due(self, amount_due):
        """Sets the amount_due of this Invoice.

        Amount due set in invoice.

        :param amount_due: The amount_due of this Invoice.
        :type amount_due: int
        """
        if amount_due is None:
            raise ValueError("Invalid value for `amount_due`, must not be `None`")

        self._amount_due = amount_due

    @property
    def application_fee(self):
        """Gets the application_fee of this Invoice.

        Application fee set in invoice.

        :return: The application_fee of this Invoice.
        :rtype: int
        """
        return self._application_fee

    @application_fee.setter
    def application_fee(self, application_fee):
        """Sets the application_fee of this Invoice.

        Application fee set in invoice.

        :param application_fee: The application_fee of this Invoice.
        :type application_fee: int
        """

        self._application_fee = application_fee

    @property
    def attempt_count(self):
        """Gets the attempt_count of this Invoice.

        Number of attempts to deliver invoice.

        :return: The attempt_count of this Invoice.
        :rtype: int
        """
        return self._attempt_count

    @attempt_count.setter
    def attempt_count(self, attempt_count):
        """Sets the attempt_count of this Invoice.

        Number of attempts to deliver invoice.

        :param attempt_count: The attempt_count of this Invoice.
        :type attempt_count: int
        """

        self._attempt_count = attempt_count

    @property
    def attempted(self):
        """Gets the attempted of this Invoice.

        Boolean to determine whether delivery attempt executed, or not.

        :return: The attempted of this Invoice.
        :rtype: bool
        """
        return self._attempted

    @attempted.setter
    def attempted(self, attempted):
        """Sets the attempted of this Invoice.

        Boolean to determine whether delivery attempt executed, or not.

        :param attempted: The attempted of this Invoice.
        :type attempted: bool
        """

        self._attempted = attempted

    @property
    def closed(self):
        """Gets the closed of this Invoice.

        Invoice closed, or pending.

        :return: The closed of this Invoice.
        :rtype: bool
        """
        return self._closed

    @closed.setter
    def closed(self, closed):
        """Sets the closed of this Invoice.

        Invoice closed, or pending.

        :param closed: The closed of this Invoice.
        :type closed: bool
        """

        self._closed = closed

    @property
    def created(self):
        """Gets the created of this Invoice.

        Date and time when invoice was created.

        :return: The created of this Invoice.
        :rtype: str
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this Invoice.

        Date and time when invoice was created.

        :param created: The created of this Invoice.
        :type created: str
        """
        if created is None:
            raise ValueError("Invalid value for `created`, must not be `None`")

        self._created = created

    @property
    def currency(self):
        """Gets the currency of this Invoice.

        Currency used in invoice.

        :return: The currency of this Invoice.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this Invoice.

        Currency used in invoice.

        :param currency: The currency of this Invoice.
        :type currency: str
        """
        if currency is None:
            raise ValueError("Invalid value for `currency`, must not be `None`")

        self._currency = currency

    @property
    def customer(self):
        """Gets the customer of this Invoice.

        Customer name.

        :return: The customer of this Invoice.
        :rtype: str
        """
        return self._customer

    @customer.setter
    def customer(self, customer):
        """Sets the customer of this Invoice.

        Customer name.

        :param customer: The customer of this Invoice.
        :type customer: str
        """
        if customer is None:
            raise ValueError("Invalid value for `customer`, must not be `None`")

        self._customer = customer

    @property
    def description(self):
        """Gets the description of this Invoice.

        Invoice description.

        :return: The description of this Invoice.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Invoice.

        Invoice description.

        :param description: The description of this Invoice.
        :type description: str
        """

        self._description = description

    @property
    def id(self):
        """Gets the id of this Invoice.

        Invoice unique identifier expressed as UUID.

        :return: The id of this Invoice.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Invoice.

        Invoice unique identifier expressed as UUID.

        :param id: The id of this Invoice.
        :type id: str
        """

        self._id = id

    @property
    def invoice_date(self):
        """Gets the invoice_date of this Invoice.

        Invoice issue date.

        :return: The invoice_date of this Invoice.
        :rtype: str
        """
        return self._invoice_date

    @invoice_date.setter
    def invoice_date(self, invoice_date):
        """Sets the invoice_date of this Invoice.

        Invoice issue date.

        :param invoice_date: The invoice_date of this Invoice.
        :type invoice_date: str
        """
        if invoice_date is None:
            raise ValueError("Invalid value for `invoice_date`, must not be `None`")

        self._invoice_date = invoice_date

    @property
    def livemode(self):
        """Gets the livemode of this Invoice.

        Boolean that determines whether invoice is live, or not.

        :return: The livemode of this Invoice.
        :rtype: bool
        """
        return self._livemode

    @livemode.setter
    def livemode(self, livemode):
        """Sets the livemode of this Invoice.

        Boolean that determines whether invoice is live, or not.

        :param livemode: The livemode of this Invoice.
        :type livemode: bool
        """

        self._livemode = livemode

    @property
    def metadata(self):
        """Gets the metadata of this Invoice.

        Optional metadata object of invoice.

        :return: The metadata of this Invoice.
        :rtype: object
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this Invoice.

        Optional metadata object of invoice.

        :param metadata: The metadata of this Invoice.
        :type metadata: object
        """

        self._metadata = metadata

    @property
    def next_payment_attempt(self):
        """Gets the next_payment_attempt of this Invoice.

        Next payment attempt.

        :return: The next_payment_attempt of this Invoice.
        :rtype: str
        """
        return self._next_payment_attempt

    @next_payment_attempt.setter
    def next_payment_attempt(self, next_payment_attempt):
        """Sets the next_payment_attempt of this Invoice.

        Next payment attempt.

        :param next_payment_attempt: The next_payment_attempt of this Invoice.
        :type next_payment_attempt: str
        """

        self._next_payment_attempt = next_payment_attempt

    @property
    def paid(self):
        """Gets the paid of this Invoice.

        Determines whether invoice has been paid, or not.

        :return: The paid of this Invoice.
        :rtype: bool
        """
        return self._paid

    @paid.setter
    def paid(self, paid):
        """Sets the paid of this Invoice.

        Determines whether invoice has been paid, or not.

        :param paid: The paid of this Invoice.
        :type paid: bool
        """

        self._paid = paid

    @property
    def period_end(self):
        """Gets the period_end of this Invoice.

        Invoice end period.

        :return: The period_end of this Invoice.
        :rtype: str
        """
        return self._period_end

    @period_end.setter
    def period_end(self, period_end):
        """Sets the period_end of this Invoice.

        Invoice end period.

        :param period_end: The period_end of this Invoice.
        :type period_end: str
        """
        if period_end is None:
            raise ValueError("Invalid value for `period_end`, must not be `None`")

        self._period_end = period_end

    @property
    def period_start(self):
        """Gets the period_start of this Invoice.

        Invoice start period.

        :return: The period_start of this Invoice.
        :rtype: str
        """
        return self._period_start

    @period_start.setter
    def period_start(self, period_start):
        """Sets the period_start of this Invoice.

        Invoice start period.

        :param period_start: The period_start of this Invoice.
        :type period_start: str
        """
        if period_start is None:
            raise ValueError("Invalid value for `period_start`, must not be `None`")

        self._period_start = period_start

    @property
    def reciept_number(self):
        """Gets the reciept_number of this Invoice.

        Invoice receipt number.

        :return: The reciept_number of this Invoice.
        :rtype: str
        """
        return self._reciept_number

    @reciept_number.setter
    def reciept_number(self, reciept_number):
        """Sets the reciept_number of this Invoice.

        Invoice receipt number.

        :param reciept_number: The reciept_number of this Invoice.
        :type reciept_number: str
        """
        if reciept_number is None:
            raise ValueError("Invalid value for `reciept_number`, must not be `None`")

        self._reciept_number = reciept_number

    @property
    def starting_balance(self):
        """Gets the starting_balance of this Invoice.

        Invoice starting balance.

        :return: The starting_balance of this Invoice.
        :rtype: int
        """
        return self._starting_balance

    @starting_balance.setter
    def starting_balance(self, starting_balance):
        """Sets the starting_balance of this Invoice.

        Invoice starting balance.

        :param starting_balance: The starting_balance of this Invoice.
        :type starting_balance: int
        """
        if starting_balance is None:
            raise ValueError("Invalid value for `starting_balance`, must not be `None`")

        self._starting_balance = starting_balance

    @property
    def statement_descriptor(self):
        """Gets the statement_descriptor of this Invoice.

        Invoice statement descriptor.

        :return: The statement_descriptor of this Invoice.
        :rtype: str
        """
        return self._statement_descriptor

    @statement_descriptor.setter
    def statement_descriptor(self, statement_descriptor):
        """Sets the statement_descriptor of this Invoice.

        Invoice statement descriptor.

        :param statement_descriptor: The statement_descriptor of this Invoice.
        :type statement_descriptor: str
        """

        self._statement_descriptor = statement_descriptor

    @property
    def stripe_id(self):
        """Gets the stripe_id of this Invoice.

        Stripe account identifier.

        :return: The stripe_id of this Invoice.
        :rtype: str
        """
        return self._stripe_id

    @stripe_id.setter
    def stripe_id(self, stripe_id):
        """Sets the stripe_id of this Invoice.

        Stripe account identifier.

        :param stripe_id: The stripe_id of this Invoice.
        :type stripe_id: str
        """
        if stripe_id is None:
            raise ValueError("Invalid value for `stripe_id`, must not be `None`")

        self._stripe_id = stripe_id

    @property
    def subscription(self):
        """Gets the subscription of this Invoice.

        Suscription name.

        :return: The subscription of this Invoice.
        :rtype: str
        """
        return self._subscription

    @subscription.setter
    def subscription(self, subscription):
        """Sets the subscription of this Invoice.

        Suscription name.

        :param subscription: The subscription of this Invoice.
        :type subscription: str
        """

        self._subscription = subscription

    @property
    def subtotal(self):
        """Gets the subtotal of this Invoice.

        Invoice sub total.

        :return: The subtotal of this Invoice.
        :rtype: int
        """
        return self._subtotal

    @subtotal.setter
    def subtotal(self, subtotal):
        """Sets the subtotal of this Invoice.

        Invoice sub total.

        :param subtotal: The subtotal of this Invoice.
        :type subtotal: int
        """
        if subtotal is None:
            raise ValueError("Invalid value for `subtotal`, must not be `None`")

        self._subtotal = subtotal

    @property
    def tax(self):
        """Gets the tax of this Invoice.

        Tax, if applicable.

        :return: The tax of this Invoice.
        :rtype: int
        """
        return self._tax

    @tax.setter
    def tax(self, tax):
        """Sets the tax of this Invoice.

        Tax, if applicable.

        :param tax: The tax of this Invoice.
        :type tax: int
        """

        self._tax = tax

    @property
    def total(self):
        """Gets the total of this Invoice.

        Invoice total.

        :return: The total of this Invoice.
        :rtype: int
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this Invoice.

        Invoice total.

        :param total: The total of this Invoice.
        :type total: int
        """
        if total is None:
            raise ValueError("Invalid value for `total`, must not be `None`")

        self._total = total
