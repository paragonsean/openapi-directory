# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class NotificationSettingsError(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, emails_enabled: bool=None, enabled: bool=None, non_field_errors: List[str]=None):
        """NotificationSettingsError - a model defined in OpenAPI

        :param emails_enabled: The emails_enabled of this NotificationSettingsError.
        :param enabled: The enabled of this NotificationSettingsError.
        :param non_field_errors: The non_field_errors of this NotificationSettingsError.
        """
        self.openapi_types = {
            'emails_enabled': bool,
            'enabled': bool,
            'non_field_errors': List[str]
        }

        self.attribute_map = {
            'emails_enabled': 'emails_enabled',
            'enabled': 'enabled',
            'non_field_errors': 'non_field_errors'
        }

        self._emails_enabled = emails_enabled
        self._enabled = enabled
        self._non_field_errors = non_field_errors

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NotificationSettingsError':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NotificationSettingsError of this NotificationSettingsError.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def emails_enabled(self):
        """Gets the emails_enabled of this NotificationSettingsError.

        emails_enabled field errors

        :return: The emails_enabled of this NotificationSettingsError.
        :rtype: bool
        """
        return self._emails_enabled

    @emails_enabled.setter
    def emails_enabled(self, emails_enabled):
        """Sets the emails_enabled of this NotificationSettingsError.

        emails_enabled field errors

        :param emails_enabled: The emails_enabled of this NotificationSettingsError.
        :type emails_enabled: bool
        """

        self._emails_enabled = emails_enabled

    @property
    def enabled(self):
        """Gets the enabled of this NotificationSettingsError.

        enabled field errors

        :return: The enabled of this NotificationSettingsError.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this NotificationSettingsError.

        enabled field errors

        :param enabled: The enabled of this NotificationSettingsError.
        :type enabled: bool
        """

        self._enabled = enabled

    @property
    def non_field_errors(self):
        """Gets the non_field_errors of this NotificationSettingsError.

        Errors not connected to any field

        :return: The non_field_errors of this NotificationSettingsError.
        :rtype: List[str]
        """
        return self._non_field_errors

    @non_field_errors.setter
    def non_field_errors(self, non_field_errors):
        """Sets the non_field_errors of this NotificationSettingsError.

        Errors not connected to any field

        :param non_field_errors: The non_field_errors of this NotificationSettingsError.
        :type non_field_errors: List[str]
        """

        self._non_field_errors = non_field_errors
