# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Server(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, config: object=None, connected: List[str]=None, created_at: str=None, created_by: str=None, endpoint: str=None, host: str=None, id: str=None, image_name: str=None, logs_url: str=None, name: str=None, project: str=None, server_size: str=None, startup_script: str=None, status: str=None, status_url: str=None):
        """Server - a model defined in OpenAPI

        :param config: The config of this Server.
        :param connected: The connected of this Server.
        :param created_at: The created_at of this Server.
        :param created_by: The created_by of this Server.
        :param endpoint: The endpoint of this Server.
        :param host: The host of this Server.
        :param id: The id of this Server.
        :param image_name: The image_name of this Server.
        :param logs_url: The logs_url of this Server.
        :param name: The name of this Server.
        :param project: The project of this Server.
        :param server_size: The server_size of this Server.
        :param startup_script: The startup_script of this Server.
        :param status: The status of this Server.
        :param status_url: The status_url of this Server.
        """
        self.openapi_types = {
            'config': object,
            'connected': List[str],
            'created_at': str,
            'created_by': str,
            'endpoint': str,
            'host': str,
            'id': str,
            'image_name': str,
            'logs_url': str,
            'name': str,
            'project': str,
            'server_size': str,
            'startup_script': str,
            'status': str,
            'status_url': str
        }

        self.attribute_map = {
            'config': 'config',
            'connected': 'connected',
            'created_at': 'created_at',
            'created_by': 'created_by',
            'endpoint': 'endpoint',
            'host': 'host',
            'id': 'id',
            'image_name': 'image_name',
            'logs_url': 'logs_url',
            'name': 'name',
            'project': 'project',
            'server_size': 'server_size',
            'startup_script': 'startup_script',
            'status': 'status',
            'status_url': 'status_url'
        }

        self._config = config
        self._connected = connected
        self._created_at = created_at
        self._created_by = created_by
        self._endpoint = endpoint
        self._host = host
        self._id = id
        self._image_name = image_name
        self._logs_url = logs_url
        self._name = name
        self._project = project
        self._server_size = server_size
        self._startup_script = startup_script
        self._status = status
        self._status_url = status_url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Server':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Server of this Server.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def config(self):
        """Gets the config of this Server.

        Server configuration option. Values are jupyter, restful and cron.

        :return: The config of this Server.
        :rtype: object
        """
        return self._config

    @config.setter
    def config(self, config):
        """Sets the config of this Server.

        Server configuration option. Values are jupyter, restful and cron.

        :param config: The config of this Server.
        :type config: object
        """

        self._config = config

    @property
    def connected(self):
        """Gets the connected of this Server.

        Array that represents what other servers the server is connected to.

        :return: The connected of this Server.
        :rtype: List[str]
        """
        return self._connected

    @connected.setter
    def connected(self, connected):
        """Sets the connected of this Server.

        Array that represents what other servers the server is connected to.

        :param connected: The connected of this Server.
        :type connected: List[str]
        """

        self._connected = connected

    @property
    def created_at(self):
        """Gets the created_at of this Server.

        Date and time when server was created.

        :return: The created_at of this Server.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Server.

        Date and time when server was created.

        :param created_at: The created_at of this Server.
        :type created_at: str
        """

        self._created_at = created_at

    @property
    def created_by(self):
        """Gets the created_by of this Server.

        User that created server.

        :return: The created_by of this Server.
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this Server.

        User that created server.

        :param created_by: The created_by of this Server.
        :type created_by: str
        """

        self._created_by = created_by

    @property
    def endpoint(self):
        """Gets the endpoint of this Server.

        Server endpoint path.

        :return: The endpoint of this Server.
        :rtype: str
        """
        return self._endpoint

    @endpoint.setter
    def endpoint(self, endpoint):
        """Sets the endpoint of this Server.

        Server endpoint path.

        :param endpoint: The endpoint of this Server.
        :type endpoint: str
        """

        self._endpoint = endpoint

    @property
    def host(self):
        """Gets the host of this Server.

        Value that represents user defined host, otherwise known as BYON (Bring Your Own Node). 

        :return: The host of this Server.
        :rtype: str
        """
        return self._host

    @host.setter
    def host(self, host):
        """Sets the host of this Server.

        Value that represents user defined host, otherwise known as BYON (Bring Your Own Node). 

        :param host: The host of this Server.
        :type host: str
        """

        self._host = host

    @property
    def id(self):
        """Gets the id of this Server.

        Server unique identifier in UUID format.

        :return: The id of this Server.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Server.

        Server unique identifier in UUID format.

        :param id: The id of this Server.
        :type id: str
        """

        self._id = id

    @property
    def image_name(self):
        """Gets the image_name of this Server.

        Server image source, such as 3blades/tensorflow-notebook. 

        :return: The image_name of this Server.
        :rtype: str
        """
        return self._image_name

    @image_name.setter
    def image_name(self, image_name):
        """Sets the image_name of this Server.

        Server image source, such as 3blades/tensorflow-notebook. 

        :param image_name: The image_name of this Server.
        :type image_name: str
        """

        self._image_name = image_name

    @property
    def logs_url(self):
        """Gets the logs_url of this Server.

        A WebSocket URL for streaming stdout and stderr logs from the server. 

        :return: The logs_url of this Server.
        :rtype: str
        """
        return self._logs_url

    @logs_url.setter
    def logs_url(self, logs_url):
        """Sets the logs_url of this Server.

        A WebSocket URL for streaming stdout and stderr logs from the server. 

        :param logs_url: The logs_url of this Server.
        :type logs_url: str
        """

        self._logs_url = logs_url

    @property
    def name(self):
        """Gets the name of this Server.

        Server name.

        :return: The name of this Server.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Server.

        Server name.

        :param name: The name of this Server.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def project(self):
        """Gets the project of this Server.

        Project name.

        :return: The project of this Server.
        :rtype: str
        """
        return self._project

    @project.setter
    def project(self, project):
        """Sets the project of this Server.

        Project name.

        :param project: The project of this Server.
        :type project: str
        """

        self._project = project

    @property
    def server_size(self):
        """Gets the server_size of this Server.

        Server size unique identifier.

        :return: The server_size of this Server.
        :rtype: str
        """
        return self._server_size

    @server_size.setter
    def server_size(self, server_size):
        """Sets the server_size of this Server.

        Server size unique identifier.

        :param server_size: The server_size of this Server.
        :type server_size: str
        """

        self._server_size = server_size

    @property
    def startup_script(self):
        """Gets the startup_script of this Server.

        Optional startup script to use when launching server.

        :return: The startup_script of this Server.
        :rtype: str
        """
        return self._startup_script

    @startup_script.setter
    def startup_script(self, startup_script):
        """Sets the startup_script of this Server.

        Optional startup script to use when launching server.

        :param startup_script: The startup_script of this Server.
        :type startup_script: str
        """

        self._startup_script = startup_script

    @property
    def status(self):
        """Gets the status of this Server.

        Server status, such as Running or Error.

        :return: The status of this Server.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Server.

        Server status, such as Running or Error.

        :param status: The status of this Server.
        :type status: str
        """
        allowed_values = ["Stopped", "Running", "Error"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def status_url(self):
        """Gets the status_url of this Server.

        A WebSocket URL for listening to server status changes. 

        :return: The status_url of this Server.
        :rtype: str
        """
        return self._status_url

    @status_url.setter
    def status_url(self, status_url):
        """Sets the status_url of this Server.

        A WebSocket URL for listening to server status changes. 

        :param status_url: The status_url of this Server.
        :type status_url: str
        """

        self._status_url = status_url
