# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ProjectFile(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, content: str=None, id: str=None, name: str=None, path: str=None, project: str=None):
        """ProjectFile - a model defined in OpenAPI

        :param content: The content of this ProjectFile.
        :param id: The id of this ProjectFile.
        :param name: The name of this ProjectFile.
        :param path: The path of this ProjectFile.
        :param project: The project of this ProjectFile.
        """
        self.openapi_types = {
            'content': str,
            'id': str,
            'name': str,
            'path': str,
            'project': str
        }

        self.attribute_map = {
            'content': 'content',
            'id': 'id',
            'name': 'name',
            'path': 'path',
            'project': 'project'
        }

        self._content = content
        self._id = id
        self._name = name
        self._path = path
        self._project = project

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProjectFile':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ProjectFile of this ProjectFile.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def content(self):
        """Gets the content of this ProjectFile.

        Data sent as string, in base64 format.

        :return: The content of this ProjectFile.
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this ProjectFile.

        Data sent as string, in base64 format.

        :param content: The content of this ProjectFile.
        :type content: str
        """

        self._content = content

    @property
    def id(self):
        """Gets the id of this ProjectFile.

        File unique identifier in UUID format.

        :return: The id of this ProjectFile.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ProjectFile.

        File unique identifier in UUID format.

        :param id: The id of this ProjectFile.
        :type id: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this ProjectFile.

        File name and extension.

        :return: The name of this ProjectFile.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ProjectFile.

        File name and extension.

        :param name: The name of this ProjectFile.
        :type name: str
        """

        self._name = name

    @property
    def path(self):
        """Gets the path of this ProjectFile.

        File path. Defaults to root (/).

        :return: The path of this ProjectFile.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this ProjectFile.

        File path. Defaults to root (/).

        :param path: The path of this ProjectFile.
        :type path: str
        """

        self._path = path

    @property
    def project(self):
        """Gets the project of this ProjectFile.

        Project name where file is located.

        :return: The project of this ProjectFile.
        :rtype: str
        """
        return self._project

    @project.setter
    def project(self, project):
        """Sets the project of this ProjectFile.

        Project name where file is located.

        :param project: The project of this ProjectFile.
        :type project: str
        """
        if project is None:
            raise ValueError("Invalid value for `project`, must not be `None`")

        self._project = project
