# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ServerStatistics(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, server: str=None, size: int=None, start: str=None, stop: str=None):
        """ServerStatistics - a model defined in OpenAPI

        :param id: The id of this ServerStatistics.
        :param server: The server of this ServerStatistics.
        :param size: The size of this ServerStatistics.
        :param start: The start of this ServerStatistics.
        :param stop: The stop of this ServerStatistics.
        """
        self.openapi_types = {
            'id': str,
            'server': str,
            'size': int,
            'start': str,
            'stop': str
        }

        self.attribute_map = {
            'id': 'id',
            'server': 'server',
            'size': 'size',
            'start': 'start',
            'stop': 'stop'
        }

        self._id = id
        self._server = server
        self._size = size
        self._start = start
        self._stop = stop

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ServerStatistics':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ServerStatistics of this ServerStatistics.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this ServerStatistics.

        Server statistics unique identifier in UUID format.

        :return: The id of this ServerStatistics.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ServerStatistics.

        Server statistics unique identifier in UUID format.

        :param id: The id of this ServerStatistics.
        :type id: str
        """

        self._id = id

    @property
    def server(self):
        """Gets the server of this ServerStatistics.

        Server name.

        :return: The server of this ServerStatistics.
        :rtype: str
        """
        return self._server

    @server.setter
    def server(self, server):
        """Sets the server of this ServerStatistics.

        Server name.

        :param server: The server of this ServerStatistics.
        :type server: str
        """

        self._server = server

    @property
    def size(self):
        """Gets the size of this ServerStatistics.

        Size of statistics.

        :return: The size of this ServerStatistics.
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this ServerStatistics.

        Size of statistics.

        :param size: The size of this ServerStatistics.
        :type size: int
        """

        self._size = size

    @property
    def start(self):
        """Gets the start of this ServerStatistics.

        Start statistics, such as start time and date.

        :return: The start of this ServerStatistics.
        :rtype: str
        """
        return self._start

    @start.setter
    def start(self, start):
        """Sets the start of this ServerStatistics.

        Start statistics, such as start time and date.

        :param start: The start of this ServerStatistics.
        :type start: str
        """

        self._start = start

    @property
    def stop(self):
        """Gets the stop of this ServerStatistics.

        Stop statistics, such as stop time and date.

        :return: The stop of this ServerStatistics.
        :rtype: str
        """
        return self._stop

    @stop.setter
    def stop(self, stop):
        """Sets the stop of this ServerStatistics.

        Stop statistics, such as stop time and date.

        :param stop: The stop of this ServerStatistics.
        :type stop: str
        """

        self._stop = stop
