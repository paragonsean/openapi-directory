# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Application(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, authorization_grant_type: str=None, client_id: str=None, client_secret: str=None, client_type: str=None, id: str=None, name: str=None, redirect_uris: str=None):
        """Application - a model defined in OpenAPI

        :param authorization_grant_type: The authorization_grant_type of this Application.
        :param client_id: The client_id of this Application.
        :param client_secret: The client_secret of this Application.
        :param client_type: The client_type of this Application.
        :param id: The id of this Application.
        :param name: The name of this Application.
        :param redirect_uris: The redirect_uris of this Application.
        """
        self.openapi_types = {
            'authorization_grant_type': str,
            'client_id': str,
            'client_secret': str,
            'client_type': str,
            'id': str,
            'name': str,
            'redirect_uris': str
        }

        self.attribute_map = {
            'authorization_grant_type': 'authorization_grant_type',
            'client_id': 'client_id',
            'client_secret': 'client_secret',
            'client_type': 'client_type',
            'id': 'id',
            'name': 'name',
            'redirect_uris': 'redirect_uris'
        }

        self._authorization_grant_type = authorization_grant_type
        self._client_id = client_id
        self._client_secret = client_secret
        self._client_type = client_type
        self._id = id
        self._name = name
        self._redirect_uris = redirect_uris

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Application':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Application of this Application.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def authorization_grant_type(self):
        """Gets the authorization_grant_type of this Application.

        OAuth2 authorization grant type

        :return: The authorization_grant_type of this Application.
        :rtype: str
        """
        return self._authorization_grant_type

    @authorization_grant_type.setter
    def authorization_grant_type(self, authorization_grant_type):
        """Sets the authorization_grant_type of this Application.

        OAuth2 authorization grant type

        :param authorization_grant_type: The authorization_grant_type of this Application.
        :type authorization_grant_type: str
        """
        allowed_values = ["authorization-code", "implicit", "password", "client-credentials"]  # noqa: E501
        if authorization_grant_type not in allowed_values:
            raise ValueError(
                "Invalid value for `authorization_grant_type` ({0}), must be one of {1}"
                .format(authorization_grant_type, allowed_values)
            )

        self._authorization_grant_type = authorization_grant_type

    @property
    def client_id(self):
        """Gets the client_id of this Application.

        OAuth2 client id

        :return: The client_id of this Application.
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this Application.

        OAuth2 client id

        :param client_id: The client_id of this Application.
        :type client_id: str
        """

        self._client_id = client_id

    @property
    def client_secret(self):
        """Gets the client_secret of this Application.

        OAuth2 client secret

        :return: The client_secret of this Application.
        :rtype: str
        """
        return self._client_secret

    @client_secret.setter
    def client_secret(self, client_secret):
        """Sets the client_secret of this Application.

        OAuth2 client secret

        :param client_secret: The client_secret of this Application.
        :type client_secret: str
        """

        self._client_secret = client_secret

    @property
    def client_type(self):
        """Gets the client_type of this Application.

        OAuth2 client type

        :return: The client_type of this Application.
        :rtype: str
        """
        return self._client_type

    @client_type.setter
    def client_type(self, client_type):
        """Sets the client_type of this Application.

        OAuth2 client type

        :param client_type: The client_type of this Application.
        :type client_type: str
        """
        allowed_values = ["confidential", "public"]  # noqa: E501
        if client_type not in allowed_values:
            raise ValueError(
                "Invalid value for `client_type` ({0}), must be one of {1}"
                .format(client_type, allowed_values)
            )

        self._client_type = client_type

    @property
    def id(self):
        """Gets the id of this Application.

        Application unique identifier, expressed as UUID.

        :return: The id of this Application.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Application.

        Application unique identifier, expressed as UUID.

        :param id: The id of this Application.
        :type id: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Application.

        Application name

        :return: The name of this Application.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Application.

        Application name

        :param name: The name of this Application.
        :type name: str
        """

        self._name = name

    @property
    def redirect_uris(self):
        """Gets the redirect_uris of this Application.

        Uris to redirect auth request

        :return: The redirect_uris of this Application.
        :rtype: str
        """
        return self._redirect_uris

    @redirect_uris.setter
    def redirect_uris(self, redirect_uris):
        """Sets the redirect_uris of this Application.

        Uris to redirect auth request

        :param redirect_uris: The redirect_uris of this Application.
        :type redirect_uris: str
        """

        self._redirect_uris = redirect_uris
