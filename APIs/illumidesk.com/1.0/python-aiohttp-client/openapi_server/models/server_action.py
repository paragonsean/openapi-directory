# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.webhook import Webhook
from openapi_server import util


class ServerAction(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, name: str=None, operation: str=None, webhook: Webhook=None):
        """ServerAction - a model defined in OpenAPI

        :param id: The id of this ServerAction.
        :param name: The name of this ServerAction.
        :param operation: The operation of this ServerAction.
        :param webhook: The webhook of this ServerAction.
        """
        self.openapi_types = {
            'id': str,
            'name': str,
            'operation': str,
            'webhook': Webhook
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'operation': 'operation',
            'webhook': 'webhook'
        }

        self._id = id
        self._name = name
        self._operation = operation
        self._webhook = webhook

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ServerAction':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ServerAction of this ServerAction.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this ServerAction.

        Server trigger unique identifier.

        :return: The id of this ServerAction.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ServerAction.

        Server trigger unique identifier.

        :param id: The id of this ServerAction.
        :type id: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this ServerAction.

        Name for server action.

        :return: The name of this ServerAction.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ServerAction.

        Name for server action.

        :param name: The name of this ServerAction.
        :type name: str
        """

        self._name = name

    @property
    def operation(self):
        """Gets the operation of this ServerAction.

        Manage server state. Starting a server changes state from Pending to Running. Terminating a server changes state from Running to Terminated. If the action results in Error, status will change to Error. 

        :return: The operation of this ServerAction.
        :rtype: str
        """
        return self._operation

    @operation.setter
    def operation(self, operation):
        """Sets the operation of this ServerAction.

        Manage server state. Starting a server changes state from Pending to Running. Terminating a server changes state from Running to Terminated. If the action results in Error, status will change to Error. 

        :param operation: The operation of this ServerAction.
        :type operation: str
        """
        allowed_values = ["start", "stop", "terminate"]  # noqa: E501
        if operation not in allowed_values:
            raise ValueError(
                "Invalid value for `operation` ({0}), must be one of {1}"
                .format(operation, allowed_values)
            )

        self._operation = operation

    @property
    def webhook(self):
        """Gets the webhook of this ServerAction.


        :return: The webhook of this ServerAction.
        :rtype: Webhook
        """
        return self._webhook

    @webhook.setter
    def webhook(self, webhook):
        """Sets the webhook of this ServerAction.


        :param webhook: The webhook of this ServerAction.
        :type webhook: Webhook
        """

        self._webhook = webhook
