# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Plan(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amount: int=None, created: str=None, currency: str=None, id: str=None, interval: str=None, interval_count: int=None, livemode: bool=None, metadata: object=None, name: str=None, statement_descriptor: str=None, stripe_id: str=None, trial_period_days: int=None):
        """Plan - a model defined in OpenAPI

        :param amount: The amount of this Plan.
        :param created: The created of this Plan.
        :param currency: The currency of this Plan.
        :param id: The id of this Plan.
        :param interval: The interval of this Plan.
        :param interval_count: The interval_count of this Plan.
        :param livemode: The livemode of this Plan.
        :param metadata: The metadata of this Plan.
        :param name: The name of this Plan.
        :param statement_descriptor: The statement_descriptor of this Plan.
        :param stripe_id: The stripe_id of this Plan.
        :param trial_period_days: The trial_period_days of this Plan.
        """
        self.openapi_types = {
            'amount': int,
            'created': str,
            'currency': str,
            'id': str,
            'interval': str,
            'interval_count': int,
            'livemode': bool,
            'metadata': object,
            'name': str,
            'statement_descriptor': str,
            'stripe_id': str,
            'trial_period_days': int
        }

        self.attribute_map = {
            'amount': 'amount',
            'created': 'created',
            'currency': 'currency',
            'id': 'id',
            'interval': 'interval',
            'interval_count': 'interval_count',
            'livemode': 'livemode',
            'metadata': 'metadata',
            'name': 'name',
            'statement_descriptor': 'statement_descriptor',
            'stripe_id': 'stripe_id',
            'trial_period_days': 'trial_period_days'
        }

        self._amount = amount
        self._created = created
        self._currency = currency
        self._id = id
        self._interval = interval
        self._interval_count = interval_count
        self._livemode = livemode
        self._metadata = metadata
        self._name = name
        self._statement_descriptor = statement_descriptor
        self._stripe_id = stripe_id
        self._trial_period_days = trial_period_days

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Plan':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Plan of this Plan.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amount(self):
        """Gets the amount of this Plan.

        Amount (cost/price) of plan.

        :return: The amount of this Plan.
        :rtype: int
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this Plan.

        Amount (cost/price) of plan.

        :param amount: The amount of this Plan.
        :type amount: int
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")

        self._amount = amount

    @property
    def created(self):
        """Gets the created of this Plan.

        Date and time when plan was created.

        :return: The created of this Plan.
        :rtype: str
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this Plan.

        Date and time when plan was created.

        :param created: The created of this Plan.
        :type created: str
        """

        self._created = created

    @property
    def currency(self):
        """Gets the currency of this Plan.

        Currency used to specify amount.

        :return: The currency of this Plan.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this Plan.

        Currency used to specify amount.

        :param currency: The currency of this Plan.
        :type currency: str
        """

        self._currency = currency

    @property
    def id(self):
        """Gets the id of this Plan.

        Plan unique identifier as UUID.

        :return: The id of this Plan.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Plan.

        Plan unique identifier as UUID.

        :param id: The id of this Plan.
        :type id: str
        """

        self._id = id

    @property
    def interval(self):
        """Gets the interval of this Plan.

        Interval for plan, such as montly or yearly.

        :return: The interval of this Plan.
        :rtype: str
        """
        return self._interval

    @interval.setter
    def interval(self, interval):
        """Sets the interval of this Plan.

        Interval for plan, such as montly or yearly.

        :param interval: The interval of this Plan.
        :type interval: str
        """
        if interval is None:
            raise ValueError("Invalid value for `interval`, must not be `None`")

        self._interval = interval

    @property
    def interval_count(self):
        """Gets the interval_count of this Plan.

        

        :return: The interval_count of this Plan.
        :rtype: int
        """
        return self._interval_count

    @interval_count.setter
    def interval_count(self, interval_count):
        """Sets the interval_count of this Plan.

        

        :param interval_count: The interval_count of this Plan.
        :type interval_count: int
        """
        if interval_count is None:
            raise ValueError("Invalid value for `interval_count`, must not be `None`")

        self._interval_count = interval_count

    @property
    def livemode(self):
        """Gets the livemode of this Plan.

        Boolean to determine whether plan is live, or not.

        :return: The livemode of this Plan.
        :rtype: bool
        """
        return self._livemode

    @livemode.setter
    def livemode(self, livemode):
        """Sets the livemode of this Plan.

        Boolean to determine whether plan is live, or not.

        :param livemode: The livemode of this Plan.
        :type livemode: bool
        """

        self._livemode = livemode

    @property
    def metadata(self):
        """Gets the metadata of this Plan.

        Optional meta data object.

        :return: The metadata of this Plan.
        :rtype: object
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this Plan.

        Optional meta data object.

        :param metadata: The metadata of this Plan.
        :type metadata: object
        """

        self._metadata = metadata

    @property
    def name(self):
        """Gets the name of this Plan.

        Plan name.

        :return: The name of this Plan.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Plan.

        Plan name.

        :param name: The name of this Plan.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def statement_descriptor(self):
        """Gets the statement_descriptor of this Plan.

        Statement that describes plan to users.

        :return: The statement_descriptor of this Plan.
        :rtype: str
        """
        return self._statement_descriptor

    @statement_descriptor.setter
    def statement_descriptor(self, statement_descriptor):
        """Sets the statement_descriptor of this Plan.

        Statement that describes plan to users.

        :param statement_descriptor: The statement_descriptor of this Plan.
        :type statement_descriptor: str
        """

        self._statement_descriptor = statement_descriptor

    @property
    def stripe_id(self):
        """Gets the stripe_id of this Plan.

        Stripe identifier to identify entity charging for plans.

        :return: The stripe_id of this Plan.
        :rtype: str
        """
        return self._stripe_id

    @stripe_id.setter
    def stripe_id(self, stripe_id):
        """Sets the stripe_id of this Plan.

        Stripe identifier to identify entity charging for plans.

        :param stripe_id: The stripe_id of this Plan.
        :type stripe_id: str
        """

        self._stripe_id = stripe_id

    @property
    def trial_period_days(self):
        """Gets the trial_period_days of this Plan.

        Number of days for plan trial, used for try and buy campaigns.

        :return: The trial_period_days of this Plan.
        :rtype: int
        """
        return self._trial_period_days

    @trial_period_days.setter
    def trial_period_days(self, trial_period_days):
        """Sets the trial_period_days of this Plan.

        Number of days for plan trial, used for try and buy campaigns.

        :param trial_period_days: The trial_period_days of this Plan.
        :type trial_period_days: int
        """

        self._trial_period_days = trial_period_days
