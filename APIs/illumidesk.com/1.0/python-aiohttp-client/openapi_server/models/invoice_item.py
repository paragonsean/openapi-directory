# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class InvoiceItem(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amount: int=None, created: str=None, currency: str=None, description: str=None, id: str=None, invoice: str=None, invoice_date: str=None, livemode: bool=None, metadata: object=None, proration: bool=None, quantity: int=None, stripe_id: str=None):
        """InvoiceItem - a model defined in OpenAPI

        :param amount: The amount of this InvoiceItem.
        :param created: The created of this InvoiceItem.
        :param currency: The currency of this InvoiceItem.
        :param description: The description of this InvoiceItem.
        :param id: The id of this InvoiceItem.
        :param invoice: The invoice of this InvoiceItem.
        :param invoice_date: The invoice_date of this InvoiceItem.
        :param livemode: The livemode of this InvoiceItem.
        :param metadata: The metadata of this InvoiceItem.
        :param proration: The proration of this InvoiceItem.
        :param quantity: The quantity of this InvoiceItem.
        :param stripe_id: The stripe_id of this InvoiceItem.
        """
        self.openapi_types = {
            'amount': int,
            'created': str,
            'currency': str,
            'description': str,
            'id': str,
            'invoice': str,
            'invoice_date': str,
            'livemode': bool,
            'metadata': object,
            'proration': bool,
            'quantity': int,
            'stripe_id': str
        }

        self.attribute_map = {
            'amount': 'amount',
            'created': 'created',
            'currency': 'currency',
            'description': 'description',
            'id': 'id',
            'invoice': 'invoice',
            'invoice_date': 'invoice_date',
            'livemode': 'livemode',
            'metadata': 'metadata',
            'proration': 'proration',
            'quantity': 'quantity',
            'stripe_id': 'stripe_id'
        }

        self._amount = amount
        self._created = created
        self._currency = currency
        self._description = description
        self._id = id
        self._invoice = invoice
        self._invoice_date = invoice_date
        self._livemode = livemode
        self._metadata = metadata
        self._proration = proration
        self._quantity = quantity
        self._stripe_id = stripe_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InvoiceItem':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The InvoiceItem of this InvoiceItem.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amount(self):
        """Gets the amount of this InvoiceItem.

        Amount the the invoice item will be billed for.

        :return: The amount of this InvoiceItem.
        :rtype: int
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this InvoiceItem.

        Amount the the invoice item will be billed for.

        :param amount: The amount of this InvoiceItem.
        :type amount: int
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")

        self._amount = amount

    @property
    def created(self):
        """Gets the created of this InvoiceItem.

        Date and time when invoice was created.

        :return: The created of this InvoiceItem.
        :rtype: str
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this InvoiceItem.

        Date and time when invoice was created.

        :param created: The created of this InvoiceItem.
        :type created: str
        """
        if created is None:
            raise ValueError("Invalid value for `created`, must not be `None`")

        self._created = created

    @property
    def currency(self):
        """Gets the currency of this InvoiceItem.

        Currency used in invoice.

        :return: The currency of this InvoiceItem.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this InvoiceItem.

        Currency used in invoice.

        :param currency: The currency of this InvoiceItem.
        :type currency: str
        """
        if currency is None:
            raise ValueError("Invalid value for `currency`, must not be `None`")

        self._currency = currency

    @property
    def description(self):
        """Gets the description of this InvoiceItem.

        Item description.

        :return: The description of this InvoiceItem.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this InvoiceItem.

        Item description.

        :param description: The description of this InvoiceItem.
        :type description: str
        """

        self._description = description

    @property
    def id(self):
        """Gets the id of this InvoiceItem.

        InvoiceItem unique identifier expressed as UUID.

        :return: The id of this InvoiceItem.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InvoiceItem.

        InvoiceItem unique identifier expressed as UUID.

        :param id: The id of this InvoiceItem.
        :type id: str
        """

        self._id = id

    @property
    def invoice(self):
        """Gets the invoice of this InvoiceItem.

        Invoice unique identifier expressed as UUID.

        :return: The invoice of this InvoiceItem.
        :rtype: str
        """
        return self._invoice

    @invoice.setter
    def invoice(self, invoice):
        """Sets the invoice of this InvoiceItem.

        Invoice unique identifier expressed as UUID.

        :param invoice: The invoice of this InvoiceItem.
        :type invoice: str
        """
        if invoice is None:
            raise ValueError("Invalid value for `invoice`, must not be `None`")

        self._invoice = invoice

    @property
    def invoice_date(self):
        """Gets the invoice_date of this InvoiceItem.

        Date the item was added to the invoice.

        :return: The invoice_date of this InvoiceItem.
        :rtype: str
        """
        return self._invoice_date

    @invoice_date.setter
    def invoice_date(self, invoice_date):
        """Sets the invoice_date of this InvoiceItem.

        Date the item was added to the invoice.

        :param invoice_date: The invoice_date of this InvoiceItem.
        :type invoice_date: str
        """
        if invoice_date is None:
            raise ValueError("Invalid value for `invoice_date`, must not be `None`")

        self._invoice_date = invoice_date

    @property
    def livemode(self):
        """Gets the livemode of this InvoiceItem.

        Boolean that determines whether invoice is live, or not.

        :return: The livemode of this InvoiceItem.
        :rtype: bool
        """
        return self._livemode

    @livemode.setter
    def livemode(self, livemode):
        """Sets the livemode of this InvoiceItem.

        Boolean that determines whether invoice is live, or not.

        :param livemode: The livemode of this InvoiceItem.
        :type livemode: bool
        """

        self._livemode = livemode

    @property
    def metadata(self):
        """Gets the metadata of this InvoiceItem.

        Optional metadata object of invoice.

        :return: The metadata of this InvoiceItem.
        :rtype: object
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this InvoiceItem.

        Optional metadata object of invoice.

        :param metadata: The metadata of this InvoiceItem.
        :type metadata: object
        """

        self._metadata = metadata

    @property
    def proration(self):
        """Gets the proration of this InvoiceItem.

        Whether or not the items cost will be prorated for the billing period.

        :return: The proration of this InvoiceItem.
        :rtype: bool
        """
        return self._proration

    @proration.setter
    def proration(self, proration):
        """Sets the proration of this InvoiceItem.

        Whether or not the items cost will be prorated for the billing period.

        :param proration: The proration of this InvoiceItem.
        :type proration: bool
        """

        self._proration = proration

    @property
    def quantity(self):
        """Gets the quantity of this InvoiceItem.

        Number of units for this item.

        :return: The quantity of this InvoiceItem.
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this InvoiceItem.

        Number of units for this item.

        :param quantity: The quantity of this InvoiceItem.
        :type quantity: int
        """
        if quantity is None:
            raise ValueError("Invalid value for `quantity`, must not be `None`")

        self._quantity = quantity

    @property
    def stripe_id(self):
        """Gets the stripe_id of this InvoiceItem.

        Stripe account identifier.

        :return: The stripe_id of this InvoiceItem.
        :rtype: str
        """
        return self._stripe_id

    @stripe_id.setter
    def stripe_id(self, stripe_id):
        """Sets the stripe_id of this InvoiceItem.

        Stripe account identifier.

        :param stripe_id: The stripe_id of this InvoiceItem.
        :type stripe_id: str
        """
        if stripe_id is None:
            raise ValueError("Invalid value for `stripe_id`, must not be `None`")

        self._stripe_id = stripe_id
