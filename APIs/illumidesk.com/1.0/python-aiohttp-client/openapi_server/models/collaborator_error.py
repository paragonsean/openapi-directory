# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CollaboratorError(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, email: List[str]=None, first_name: List[str]=None, id: List[str]=None, joined: List[str]=None, last_name: List[str]=None, member: List[str]=None, non_field_errors: List[str]=None, owner: List[str]=None, permissions: List[str]=None, username: List[str]=None):
        """CollaboratorError - a model defined in OpenAPI

        :param email: The email of this CollaboratorError.
        :param first_name: The first_name of this CollaboratorError.
        :param id: The id of this CollaboratorError.
        :param joined: The joined of this CollaboratorError.
        :param last_name: The last_name of this CollaboratorError.
        :param member: The member of this CollaboratorError.
        :param non_field_errors: The non_field_errors of this CollaboratorError.
        :param owner: The owner of this CollaboratorError.
        :param permissions: The permissions of this CollaboratorError.
        :param username: The username of this CollaboratorError.
        """
        self.openapi_types = {
            'email': List[str],
            'first_name': List[str],
            'id': List[str],
            'joined': List[str],
            'last_name': List[str],
            'member': List[str],
            'non_field_errors': List[str],
            'owner': List[str],
            'permissions': List[str],
            'username': List[str]
        }

        self.attribute_map = {
            'email': 'email',
            'first_name': 'first_name',
            'id': 'id',
            'joined': 'joined',
            'last_name': 'last_name',
            'member': 'member',
            'non_field_errors': 'non_field_errors',
            'owner': 'owner',
            'permissions': 'permissions',
            'username': 'username'
        }

        self._email = email
        self._first_name = first_name
        self._id = id
        self._joined = joined
        self._last_name = last_name
        self._member = member
        self._non_field_errors = non_field_errors
        self._owner = owner
        self._permissions = permissions
        self._username = username

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CollaboratorError':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CollaboratorError of this CollaboratorError.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def email(self):
        """Gets the email of this CollaboratorError.

        Email field errors.

        :return: The email of this CollaboratorError.
        :rtype: List[str]
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this CollaboratorError.

        Email field errors.

        :param email: The email of this CollaboratorError.
        :type email: List[str]
        """

        self._email = email

    @property
    def first_name(self):
        """Gets the first_name of this CollaboratorError.

        First name field errors.

        :return: The first_name of this CollaboratorError.
        :rtype: List[str]
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this CollaboratorError.

        First name field errors.

        :param first_name: The first_name of this CollaboratorError.
        :type first_name: List[str]
        """

        self._first_name = first_name

    @property
    def id(self):
        """Gets the id of this CollaboratorError.

        Id field errors this

        :return: The id of this CollaboratorError.
        :rtype: List[str]
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CollaboratorError.

        Id field errors this

        :param id: The id of this CollaboratorError.
        :type id: List[str]
        """

        self._id = id

    @property
    def joined(self):
        """Gets the joined of this CollaboratorError.

        Joined field errors.

        :return: The joined of this CollaboratorError.
        :rtype: List[str]
        """
        return self._joined

    @joined.setter
    def joined(self, joined):
        """Sets the joined of this CollaboratorError.

        Joined field errors.

        :param joined: The joined of this CollaboratorError.
        :type joined: List[str]
        """

        self._joined = joined

    @property
    def last_name(self):
        """Gets the last_name of this CollaboratorError.

        Last name field errors.

        :return: The last_name of this CollaboratorError.
        :rtype: List[str]
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this CollaboratorError.

        Last name field errors.

        :param last_name: The last_name of this CollaboratorError.
        :type last_name: List[str]
        """

        self._last_name = last_name

    @property
    def member(self):
        """Gets the member of this CollaboratorError.

        Member field errors.

        :return: The member of this CollaboratorError.
        :rtype: List[str]
        """
        return self._member

    @member.setter
    def member(self, member):
        """Sets the member of this CollaboratorError.

        Member field errors.

        :param member: The member of this CollaboratorError.
        :type member: List[str]
        """
        if member is None:
            raise ValueError("Invalid value for `member`, must not be `None`")

        self._member = member

    @property
    def non_field_errors(self):
        """Gets the non_field_errors of this CollaboratorError.

        Errors not connected to any field.

        :return: The non_field_errors of this CollaboratorError.
        :rtype: List[str]
        """
        return self._non_field_errors

    @non_field_errors.setter
    def non_field_errors(self, non_field_errors):
        """Sets the non_field_errors of this CollaboratorError.

        Errors not connected to any field.

        :param non_field_errors: The non_field_errors of this CollaboratorError.
        :type non_field_errors: List[str]
        """

        self._non_field_errors = non_field_errors

    @property
    def owner(self):
        """Gets the owner of this CollaboratorError.

        Owner field errors.

        :return: The owner of this CollaboratorError.
        :rtype: List[str]
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this CollaboratorError.

        Owner field errors.

        :param owner: The owner of this CollaboratorError.
        :type owner: List[str]
        """

        self._owner = owner

    @property
    def permissions(self):
        """Gets the permissions of this CollaboratorError.

        Permissions field errors.

        :return: The permissions of this CollaboratorError.
        :rtype: List[str]
        """
        return self._permissions

    @permissions.setter
    def permissions(self, permissions):
        """Sets the permissions of this CollaboratorError.

        Permissions field errors.

        :param permissions: The permissions of this CollaboratorError.
        :type permissions: List[str]
        """
        if permissions is None:
            raise ValueError("Invalid value for `permissions`, must not be `None`")

        self._permissions = permissions

    @property
    def username(self):
        """Gets the username of this CollaboratorError.

        Username field errors.

        :return: The username of this CollaboratorError.
        :rtype: List[str]
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this CollaboratorError.

        Username field errors.

        :param username: The username of this CollaboratorError.
        :type username: List[str]
        """

        self._username = username
