/*
 * Gisgraphy webservices
 * Since 2006, [Gisgraphy](http://www.gisgraphy.com) is a free, open source framework that offers the possibility to do geolocalisation and geocoding via Java APIs or REST webservices. Because geocoding is nothing without data, it provides an easy to use importer that will automatically download and import the necessary (free) data to your local database ([OpenStreetMap](http://www.openstreetmap.org/), [Geonames](http://www.geonames.org/) and [Quattroshapes](http://www.quattroshapes.com/): more than 100 million entries). You can also add your own data with the Web interface or the importer connectors provided. Gisgraphy is production ready, and has been designed to be scalable(load balanced), performant and used in other languages than just java : results can be output in XML, JSON, PHP, Python, Ruby, YAML, GeoRSS, and Atom. One of the most popular GPS tracking System (OpenGTS) also includes a Gisgraphy client...Gisgraphy is a framework. As a result it's flexible and powerful enough to be used in a lot of different use cases. [read more](http://www.gisgraphy.com)   if you use the premium servers, you can use the api key to test the webservices 
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.FulltextResultsDto;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for FulltextAutocompleteApi
 */
@Disabled
public class FulltextAutocompleteApiTest {

    private final FulltextAutocompleteApi api = new FulltextAutocompleteApi();

    /**
     * search for places by text around a GPS point
     *
     * The full text service allows you to search for features / places / street and do autocompletion . you can : Specify one or more words search on part of the name (auto completion / suggestion) Search for text or zip code Specify a GPS restriction (promote nearest, not sorted but has an impact on the score), Limit the results to a specific Language, Country, place type, Paginate the results, Specify the output verbosity, Tells if you want the output to be indented, Tells that all words are required or not, The search is case insensitive, use synonyms (Saint/st, ..), separator characters stripping, ...
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void fulltxtsearchTest() throws ApiException {
        String q = null;
        Boolean allwordsrequired = null;
        String spellchecking = null;
        Double lat = null;
        Double lng = null;
        Double radius = null;
        Boolean suggest = null;
        String style = null;
        String country = null;
        String lang = null;
        String format = null;
        Integer from = null;
        Integer to = null;
        String paramCallback = null;
        Boolean indent = null;
        FulltextResultsDto response = api.fulltxtsearch(q, allwordsrequired, spellchecking, lat, lng, radius, suggest, style, country, lang, format, from, to, paramCallback, indent);
        // TODO: test validations
    }

}
