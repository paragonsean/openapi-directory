/*
 * Gisgraphy webservices
 * Since 2006, [Gisgraphy](http://www.gisgraphy.com) is a free, open source framework that offers the possibility to do geolocalisation and geocoding via Java APIs or REST webservices. Because geocoding is nothing without data, it provides an easy to use importer that will automatically download and import the necessary (free) data to your local database ([OpenStreetMap](http://www.openstreetmap.org/), [Geonames](http://www.geonames.org/) and [Quattroshapes](http://www.quattroshapes.com/): more than 100 million entries). You can also add your own data with the Web interface or the importer connectors provided. Gisgraphy is production ready, and has been designed to be scalable(load balanced), performant and used in other languages than just java : results can be output in XML, JSON, PHP, Python, Ruby, YAML, GeoRSS, and Atom. One of the most popular GPS tracking System (OpenGTS) also includes a Gisgraphy client...Gisgraphy is a framework. As a result it's flexible and powerful enough to be used in a lot of different use cases. [read more](http://www.gisgraphy.com)   if you use the premium servers, you can use the api key to test the webservices 
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.HouseNumberDto;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SolrResponseDto
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:27:52.231698-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SolrResponseDto {
  public static final String SERIALIZED_NAME_ADM1_CODE = "adm1_code";
  @SerializedName(SERIALIZED_NAME_ADM1_CODE)
  private String adm1Code;

  public static final String SERIALIZED_NAME_ADM1_NAME = "adm1_name";
  @SerializedName(SERIALIZED_NAME_ADM1_NAME)
  private String adm1Name;

  public static final String SERIALIZED_NAME_ADM1_NAMES_ALTERNATE = "adm1_names_alternate";
  @SerializedName(SERIALIZED_NAME_ADM1_NAMES_ALTERNATE)
  private List<String> adm1NamesAlternate = new ArrayList<>();

  public static final String SERIALIZED_NAME_ADM2_CODE = "adm2_code";
  @SerializedName(SERIALIZED_NAME_ADM2_CODE)
  private String adm2Code;

  public static final String SERIALIZED_NAME_ADM2_NAME = "adm2_name";
  @SerializedName(SERIALIZED_NAME_ADM2_NAME)
  private String adm2Name;

  public static final String SERIALIZED_NAME_ADM2_NAMES_ALTERNATE = "adm2_names_alternate";
  @SerializedName(SERIALIZED_NAME_ADM2_NAMES_ALTERNATE)
  private List<String> adm2NamesAlternate = new ArrayList<>();

  public static final String SERIALIZED_NAME_ADM3_CODE = "adm3_code";
  @SerializedName(SERIALIZED_NAME_ADM3_CODE)
  private String adm3Code;

  public static final String SERIALIZED_NAME_ADM3_NAME = "adm3_name";
  @SerializedName(SERIALIZED_NAME_ADM3_NAME)
  private String adm3Name;

  public static final String SERIALIZED_NAME_ADM4_CODE = "adm4_code";
  @SerializedName(SERIALIZED_NAME_ADM4_CODE)
  private String adm4Code;

  public static final String SERIALIZED_NAME_ADM4_NAME = "adm4_name";
  @SerializedName(SERIALIZED_NAME_ADM4_NAME)
  private String adm4Name;

  public static final String SERIALIZED_NAME_AMENITY = "amenity";
  @SerializedName(SERIALIZED_NAME_AMENITY)
  private String amenity;

  public static final String SERIALIZED_NAME_AREA = "area";
  @SerializedName(SERIALIZED_NAME_AREA)
  private Double area;

  public static final String SERIALIZED_NAME_CAPITAL_NAME = "capital_name";
  @SerializedName(SERIALIZED_NAME_CAPITAL_NAME)
  private String capitalName;

  public static final String SERIALIZED_NAME_CONTINENT = "continent";
  @SerializedName(SERIALIZED_NAME_CONTINENT)
  private String continent;

  public static final String SERIALIZED_NAME_COUNTRY_CODE = "country_code";
  @SerializedName(SERIALIZED_NAME_COUNTRY_CODE)
  private String countryCode;

  public static final String SERIALIZED_NAME_COUNTRY_FLAG_URL = "country_flag_url";
  @SerializedName(SERIALIZED_NAME_COUNTRY_FLAG_URL)
  private String countryFlagUrl;

  public static final String SERIALIZED_NAME_COUNTRY_NAME = "country_name";
  @SerializedName(SERIALIZED_NAME_COUNTRY_NAME)
  private String countryName;

  public static final String SERIALIZED_NAME_COUNTRY_NAMES_ALTERNATE = "country_names_alternate";
  @SerializedName(SERIALIZED_NAME_COUNTRY_NAMES_ALTERNATE)
  private List<String> countryNamesAlternate = new ArrayList<>();

  public static final String SERIALIZED_NAME_CURRENCY_CODE = "currency_code";
  @SerializedName(SERIALIZED_NAME_CURRENCY_CODE)
  private String currencyCode;

  public static final String SERIALIZED_NAME_CURRENCY_NAME = "currency_name";
  @SerializedName(SERIALIZED_NAME_CURRENCY_NAME)
  private String currencyName;

  public static final String SERIALIZED_NAME_ELEVATION = "elevation";
  @SerializedName(SERIALIZED_NAME_ELEVATION)
  private Integer elevation;

  public static final String SERIALIZED_NAME_FEATURE_CLASS = "feature_class";
  @SerializedName(SERIALIZED_NAME_FEATURE_CLASS)
  private String featureClass;

  public static final String SERIALIZED_NAME_FEATURE_CODE = "feature_code";
  @SerializedName(SERIALIZED_NAME_FEATURE_CODE)
  private String featureCode;

  public static final String SERIALIZED_NAME_FEATURE_ID = "feature_id";
  @SerializedName(SERIALIZED_NAME_FEATURE_ID)
  private Long featureId;

  public static final String SERIALIZED_NAME_FIPS_CODE = "fips_code";
  @SerializedName(SERIALIZED_NAME_FIPS_CODE)
  private String fipsCode;

  public static final String SERIALIZED_NAME_FULLY_QUALIFIED_ADDRESS = "fully_qualified_address";
  @SerializedName(SERIALIZED_NAME_FULLY_QUALIFIED_ADDRESS)
  private String fullyQualifiedAddress;

  public static final String SERIALIZED_NAME_FULLY_QUALIFIED_NAME = "fully_qualified_name";
  @SerializedName(SERIALIZED_NAME_FULLY_QUALIFIED_NAME)
  private String fullyQualifiedName;

  public static final String SERIALIZED_NAME_GOOGLE_MAP_URL = "google_map_url";
  @SerializedName(SERIALIZED_NAME_GOOGLE_MAP_URL)
  private String googleMapUrl;

  public static final String SERIALIZED_NAME_GTOPO30 = "gtopo30";
  @SerializedName(SERIALIZED_NAME_GTOPO30)
  private Integer gtopo30;

  public static final String SERIALIZED_NAME_HOUSE_NUMBERS = "house_numbers";
  @SerializedName(SERIALIZED_NAME_HOUSE_NUMBERS)
  private List<HouseNumberDto> houseNumbers = new ArrayList<>();

  public static final String SERIALIZED_NAME_IS_IN = "is_in";
  @SerializedName(SERIALIZED_NAME_IS_IN)
  private String isIn;

  public static final String SERIALIZED_NAME_IS_IN_ADM = "is_in_adm";
  @SerializedName(SERIALIZED_NAME_IS_IN_ADM)
  private String isInAdm;

  public static final String SERIALIZED_NAME_IS_IN_PLACE = "is_in_place";
  @SerializedName(SERIALIZED_NAME_IS_IN_PLACE)
  private String isInPlace;

  public static final String SERIALIZED_NAME_IS_IN_ZIP = "is_in_zip";
  @SerializedName(SERIALIZED_NAME_IS_IN_ZIP)
  private List<String> isInZip = new ArrayList<>();

  public static final String SERIALIZED_NAME_ISOALPHA2_COUNTRY_CODE = "isoalpha2_country_code";
  @SerializedName(SERIALIZED_NAME_ISOALPHA2_COUNTRY_CODE)
  private String isoalpha2CountryCode;

  public static final String SERIALIZED_NAME_ISOALPHA3_COUNTRY_CODE = "isoalpha3_country_code";
  @SerializedName(SERIALIZED_NAME_ISOALPHA3_COUNTRY_CODE)
  private String isoalpha3CountryCode;

  public static final String SERIALIZED_NAME_LAT = "lat";
  @SerializedName(SERIALIZED_NAME_LAT)
  private Double lat;

  public static final String SERIALIZED_NAME_LENGTH = "length";
  @SerializedName(SERIALIZED_NAME_LENGTH)
  private Double length;

  public static final String SERIALIZED_NAME_LEVEL = "level";
  @SerializedName(SERIALIZED_NAME_LEVEL)
  private Integer level;

  public static final String SERIALIZED_NAME_LNG = "lng";
  @SerializedName(SERIALIZED_NAME_LNG)
  private Double lng;

  public static final String SERIALIZED_NAME_MUNICIPALITY = "municipality";
  @SerializedName(SERIALIZED_NAME_MUNICIPALITY)
  private Boolean municipality;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NAME_ALTERNATES = "name_alternates";
  @SerializedName(SERIALIZED_NAME_NAME_ALTERNATES)
  private List<String> nameAlternates = new ArrayList<>();

  public static final String SERIALIZED_NAME_NAME_ASCII = "name_ascii";
  @SerializedName(SERIALIZED_NAME_NAME_ASCII)
  private String nameAscii;

  public static final String SERIALIZED_NAME_ONE_WAY = "one_way";
  @SerializedName(SERIALIZED_NAME_ONE_WAY)
  private Boolean oneWay;

  public static final String SERIALIZED_NAME_OPENSTREETMAP_ID = "openstreetmap_id";
  @SerializedName(SERIALIZED_NAME_OPENSTREETMAP_ID)
  private Long openstreetmapId;

  public static final String SERIALIZED_NAME_OPENSTREETMAP_MAP_URL = "openstreetmap_map_url";
  @SerializedName(SERIALIZED_NAME_OPENSTREETMAP_MAP_URL)
  private String openstreetmapMapUrl;

  public static final String SERIALIZED_NAME_PHONE_PREFIX = "phone_prefix";
  @SerializedName(SERIALIZED_NAME_PHONE_PREFIX)
  private String phonePrefix;

  public static final String SERIALIZED_NAME_PLACETYPE = "placetype";
  @SerializedName(SERIALIZED_NAME_PLACETYPE)
  private String placetype;

  public static final String SERIALIZED_NAME_POPULATION = "population";
  @SerializedName(SERIALIZED_NAME_POPULATION)
  private Integer population;

  public static final String SERIALIZED_NAME_POSTAL_CODE_MASK = "postal_code_mask";
  @SerializedName(SERIALIZED_NAME_POSTAL_CODE_MASK)
  private String postalCodeMask;

  public static final String SERIALIZED_NAME_POSTAL_CODE_REGEX = "postal_code_regex";
  @SerializedName(SERIALIZED_NAME_POSTAL_CODE_REGEX)
  private String postalCodeRegex;

  public static final String SERIALIZED_NAME_SCORE = "score";
  @SerializedName(SERIALIZED_NAME_SCORE)
  private Float score;

  public static final String SERIALIZED_NAME_SPOKEN_LANGUAGES = "spoken_languages";
  @SerializedName(SERIALIZED_NAME_SPOKEN_LANGUAGES)
  private List<String> spokenLanguages = new ArrayList<>();

  public static final String SERIALIZED_NAME_STREET_TYPE = "street_type";
  @SerializedName(SERIALIZED_NAME_STREET_TYPE)
  private String streetType;

  public static final String SERIALIZED_NAME_TIMEZONE = "timezone";
  @SerializedName(SERIALIZED_NAME_TIMEZONE)
  private String timezone;

  public static final String SERIALIZED_NAME_TLD = "tld";
  @SerializedName(SERIALIZED_NAME_TLD)
  private String tld;

  public static final String SERIALIZED_NAME_YAHOO_MAP_URL = "yahoo_map_url";
  @SerializedName(SERIALIZED_NAME_YAHOO_MAP_URL)
  private String yahooMapUrl;

  public static final String SERIALIZED_NAME_ZIPCODES = "zipcodes";
  @SerializedName(SERIALIZED_NAME_ZIPCODES)
  private List<String> zipcodes = new ArrayList<>();

  public SolrResponseDto() {
  }

  public SolrResponseDto adm1Code(String adm1Code) {
    this.adm1Code = adm1Code;
    return this;
  }

  /**
   * The internal code for the administrative division of level 1
   * @return adm1Code
   */
  @javax.annotation.Nullable
  public String getAdm1Code() {
    return adm1Code;
  }

  public void setAdm1Code(String adm1Code) {
    this.adm1Code = adm1Code;
  }


  public SolrResponseDto adm1Name(String adm1Name) {
    this.adm1Name = adm1Name;
    return this;
  }

  /**
   * The name of the administrative division of level 1
   * @return adm1Name
   */
  @javax.annotation.Nullable
  public String getAdm1Name() {
    return adm1Name;
  }

  public void setAdm1Name(String adm1Name) {
    this.adm1Name = adm1Name;
  }


  public SolrResponseDto adm1NamesAlternate(List<String> adm1NamesAlternate) {
    this.adm1NamesAlternate = adm1NamesAlternate;
    return this;
  }

  public SolrResponseDto addAdm1NamesAlternateItem(String adm1NamesAlternateItem) {
    if (this.adm1NamesAlternate == null) {
      this.adm1NamesAlternate = new ArrayList<>();
    }
    this.adm1NamesAlternate.add(adm1NamesAlternateItem);
    return this;
  }

  /**
   * The alternate names of the administrative division of level 1 without specific language code
   * @return adm1NamesAlternate
   */
  @javax.annotation.Nullable
  public List<String> getAdm1NamesAlternate() {
    return adm1NamesAlternate;
  }

  public void setAdm1NamesAlternate(List<String> adm1NamesAlternate) {
    this.adm1NamesAlternate = adm1NamesAlternate;
  }


  public SolrResponseDto adm2Code(String adm2Code) {
    this.adm2Code = adm2Code;
    return this;
  }

  /**
   * The internal code for the administrative division of level 2
   * @return adm2Code
   */
  @javax.annotation.Nullable
  public String getAdm2Code() {
    return adm2Code;
  }

  public void setAdm2Code(String adm2Code) {
    this.adm2Code = adm2Code;
  }


  public SolrResponseDto adm2Name(String adm2Name) {
    this.adm2Name = adm2Name;
    return this;
  }

  /**
   * The name of the administrative division of level 2
   * @return adm2Name
   */
  @javax.annotation.Nullable
  public String getAdm2Name() {
    return adm2Name;
  }

  public void setAdm2Name(String adm2Name) {
    this.adm2Name = adm2Name;
  }


  public SolrResponseDto adm2NamesAlternate(List<String> adm2NamesAlternate) {
    this.adm2NamesAlternate = adm2NamesAlternate;
    return this;
  }

  public SolrResponseDto addAdm2NamesAlternateItem(String adm2NamesAlternateItem) {
    if (this.adm2NamesAlternate == null) {
      this.adm2NamesAlternate = new ArrayList<>();
    }
    this.adm2NamesAlternate.add(adm2NamesAlternateItem);
    return this;
  }

  /**
   * The alternate names of the administrative division of level 2 without specific language code
   * @return adm2NamesAlternate
   */
  @javax.annotation.Nullable
  public List<String> getAdm2NamesAlternate() {
    return adm2NamesAlternate;
  }

  public void setAdm2NamesAlternate(List<String> adm2NamesAlternate) {
    this.adm2NamesAlternate = adm2NamesAlternate;
  }


  public SolrResponseDto adm3Code(String adm3Code) {
    this.adm3Code = adm3Code;
    return this;
  }

  /**
   * The internal code for the administrative division of level 3
   * @return adm3Code
   */
  @javax.annotation.Nullable
  public String getAdm3Code() {
    return adm3Code;
  }

  public void setAdm3Code(String adm3Code) {
    this.adm3Code = adm3Code;
  }


  public SolrResponseDto adm3Name(String adm3Name) {
    this.adm3Name = adm3Name;
    return this;
  }

  /**
   * The name of the administrative division of level 3
   * @return adm3Name
   */
  @javax.annotation.Nullable
  public String getAdm3Name() {
    return adm3Name;
  }

  public void setAdm3Name(String adm3Name) {
    this.adm3Name = adm3Name;
  }


  public SolrResponseDto adm4Code(String adm4Code) {
    this.adm4Code = adm4Code;
    return this;
  }

  /**
   * The internal code for the administrative division of level 4
   * @return adm4Code
   */
  @javax.annotation.Nullable
  public String getAdm4Code() {
    return adm4Code;
  }

  public void setAdm4Code(String adm4Code) {
    this.adm4Code = adm4Code;
  }


  public SolrResponseDto adm4Name(String adm4Name) {
    this.adm4Name = adm4Name;
    return this;
  }

  /**
   * The name of the administrative division of level 4
   * @return adm4Name
   */
  @javax.annotation.Nullable
  public String getAdm4Name() {
    return adm4Name;
  }

  public void setAdm4Name(String adm4Name) {
    this.adm4Name = adm4Name;
  }


  public SolrResponseDto amenity(String amenity) {
    this.amenity = amenity;
    return this;
  }

  /**
   * Informations on category of OpenStreetMap POIs
   * @return amenity
   */
  @javax.annotation.Nullable
  public String getAmenity() {
    return amenity;
  }

  public void setAmenity(String amenity) {
    this.amenity = amenity;
  }


  public SolrResponseDto area(Double area) {
    this.area = area;
    return this;
  }

  /**
   * Area of the country in m² (only for country placetype)
   * @return area
   */
  @javax.annotation.Nullable
  public Double getArea() {
    return area;
  }

  public void setArea(Double area) {
    this.area = area;
  }


  public SolrResponseDto capitalName(String capitalName) {
    this.capitalName = capitalName;
    return this;
  }

  /**
   * Name of the capital of the country(only for country placetype)
   * @return capitalName
   */
  @javax.annotation.Nullable
  public String getCapitalName() {
    return capitalName;
  }

  public void setCapitalName(String capitalName) {
    this.capitalName = capitalName;
  }


  public SolrResponseDto continent(String continent) {
    this.continent = continent;
    return this;
  }

  /**
   * The continent the country belongs (only for country placetype)
   * @return continent
   */
  @javax.annotation.Nullable
  public String getContinent() {
    return continent;
  }

  public void setContinent(String continent) {
    this.continent = continent;
  }


  public SolrResponseDto countryCode(String countryCode) {
    this.countryCode = countryCode;
    return this;
  }

  /**
   * The ISO 3166 country code
   * @return countryCode
   */
  @javax.annotation.Nullable
  public String getCountryCode() {
    return countryCode;
  }

  public void setCountryCode(String countryCode) {
    this.countryCode = countryCode;
  }


  public SolrResponseDto countryFlagUrl(String countryFlagUrl) {
    this.countryFlagUrl = countryFlagUrl;
    return this;
  }

  /**
   * The relative URL to get the country flag image
   * @return countryFlagUrl
   */
  @javax.annotation.Nullable
  public String getCountryFlagUrl() {
    return countryFlagUrl;
  }

  public void setCountryFlagUrl(String countryFlagUrl) {
    this.countryFlagUrl = countryFlagUrl;
  }


  public SolrResponseDto countryName(String countryName) {
    this.countryName = countryName;
    return this;
  }

  /**
   * The name of the country the features belongs to
   * @return countryName
   */
  @javax.annotation.Nullable
  public String getCountryName() {
    return countryName;
  }

  public void setCountryName(String countryName) {
    this.countryName = countryName;
  }


  public SolrResponseDto countryNamesAlternate(List<String> countryNamesAlternate) {
    this.countryNamesAlternate = countryNamesAlternate;
    return this;
  }

  public SolrResponseDto addCountryNamesAlternateItem(String countryNamesAlternateItem) {
    if (this.countryNamesAlternate == null) {
      this.countryNamesAlternate = new ArrayList<>();
    }
    this.countryNamesAlternate.add(countryNamesAlternateItem);
    return this;
  }

  /**
   * The alternate names of the country without specific language code
   * @return countryNamesAlternate
   */
  @javax.annotation.Nullable
  public List<String> getCountryNamesAlternate() {
    return countryNamesAlternate;
  }

  public void setCountryNamesAlternate(List<String> countryNamesAlternate) {
    this.countryNamesAlternate = countryNamesAlternate;
  }


  public SolrResponseDto currencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
    return this;
  }

  /**
   * The ISO 4217 Currency from the curencycode (only for country placetype)
   * @return currencyCode
   */
  @javax.annotation.Nullable
  public String getCurrencyCode() {
    return currencyCode;
  }

  public void setCurrencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
  }


  public SolrResponseDto currencyName(String currencyName) {
    this.currencyName = currencyName;
    return this;
  }

  /**
   * The name of the currency of the country (only for country placetype)
   * @return currencyName
   */
  @javax.annotation.Nullable
  public String getCurrencyName() {
    return currencyName;
  }

  public void setCurrencyName(String currencyName) {
    this.currencyName = currencyName;
  }


  public SolrResponseDto elevation(Integer elevation) {
    this.elevation = elevation;
    return this;
  }

  /**
   * Elevation in meters
   * @return elevation
   */
  @javax.annotation.Nullable
  public Integer getElevation() {
    return elevation;
  }

  public void setElevation(Integer elevation) {
    this.elevation = elevation;
  }


  public SolrResponseDto featureClass(String featureClass) {
    this.featureClass = featureClass;
    return this;
  }

  /**
   * The feature Class.
   * @return featureClass
   */
  @javax.annotation.Nullable
  public String getFeatureClass() {
    return featureClass;
  }

  public void setFeatureClass(String featureClass) {
    this.featureClass = featureClass;
  }


  public SolrResponseDto featureCode(String featureCode) {
    this.featureCode = featureCode;
    return this;
  }

  /**
   * The feature Code.
   * @return featureCode
   */
  @javax.annotation.Nullable
  public String getFeatureCode() {
    return featureCode;
  }

  public void setFeatureCode(String featureCode) {
    this.featureCode = featureCode;
  }


  public SolrResponseDto featureId(Long featureId) {
    this.featureId = featureId;
    return this;
  }

  /**
   * A unique id that identify the feature
   * @return featureId
   */
  @javax.annotation.Nullable
  public Long getFeatureId() {
    return featureId;
  }

  public void setFeatureId(Long featureId) {
    this.featureId = featureId;
  }


  public SolrResponseDto fipsCode(String fipsCode) {
    this.fipsCode = fipsCode;
    return this;
  }

  /**
   * The FIPS Code of the country (only for country placetype)
   * @return fipsCode
   */
  @javax.annotation.Nullable
  public String getFipsCode() {
    return fipsCode;
  }

  public void setFipsCode(String fipsCode) {
    this.fipsCode = fipsCode;
  }


  public SolrResponseDto fullyQualifiedAddress(String fullyQualifiedAddress) {
    this.fullyQualifiedAddress = fullyQualifiedAddress;
    return this;
  }

  /**
   * NOT USED YET
   * @return fullyQualifiedAddress
   */
  @javax.annotation.Nullable
  public String getFullyQualifiedAddress() {
    return fullyQualifiedAddress;
  }

  public void setFullyQualifiedAddress(String fullyQualifiedAddress) {
    this.fullyQualifiedAddress = fullyQualifiedAddress;
  }


  public SolrResponseDto fullyQualifiedName(String fullyQualifiedName) {
    this.fullyQualifiedName = fullyQualifiedName;
    return this;
  }

  /**
   * A name of the form : (adm1Name et adm2Name are printed) Paris, Département de Ville-De-Paris, Ile-De-France, (FR)
   * @return fullyQualifiedName
   */
  @javax.annotation.Nullable
  public String getFullyQualifiedName() {
    return fullyQualifiedName;
  }

  public void setFullyQualifiedName(String fullyQualifiedName) {
    this.fullyQualifiedName = fullyQualifiedName;
  }


  public SolrResponseDto googleMapUrl(String googleMapUrl) {
    this.googleMapUrl = googleMapUrl;
    return this;
  }

  /**
   * The URL to get the location on Google Map
   * @return googleMapUrl
   */
  @javax.annotation.Nullable
  public String getGoogleMapUrl() {
    return googleMapUrl;
  }

  public void setGoogleMapUrl(String googleMapUrl) {
    this.googleMapUrl = googleMapUrl;
  }


  public SolrResponseDto gtopo30(Integer gtopo30) {
    this.gtopo30 = gtopo30;
    return this;
  }

  /**
   * Average elevation of 30&#39;x30&#39; (ca 900mx900m) area in meters
   * @return gtopo30
   */
  @javax.annotation.Nullable
  public Integer getGtopo30() {
    return gtopo30;
  }

  public void setGtopo30(Integer gtopo30) {
    this.gtopo30 = gtopo30;
  }


  public SolrResponseDto houseNumbers(List<HouseNumberDto> houseNumbers) {
    this.houseNumbers = houseNumbers;
    return this;
  }

  public SolrResponseDto addHouseNumbersItem(HouseNumberDto houseNumbersItem) {
    if (this.houseNumbers == null) {
      this.houseNumbers = new ArrayList<>();
    }
    this.houseNumbers.add(houseNumbersItem);
    return this;
  }

  /**
   * a list of all the house numbers sorted and their coordinates (only for placetype street)
   * @return houseNumbers
   */
  @javax.annotation.Nullable
  public List<HouseNumberDto> getHouseNumbers() {
    return houseNumbers;
  }

  public void setHouseNumbers(List<HouseNumberDto> houseNumbers) {
    this.houseNumbers = houseNumbers;
  }


  public SolrResponseDto isIn(String isIn) {
    this.isIn = isIn;
    return this;
  }

  /**
   * Information on the city where the street / POI is (depends on OpenStreetMap &#39;is_in&#39; field), the city in general (only for placetype street)
   * @return isIn
   */
  @javax.annotation.Nullable
  public String getIsIn() {
    return isIn;
  }

  public void setIsIn(String isIn) {
    this.isIn = isIn;
  }


  public SolrResponseDto isInAdm(String isInAdm) {
    this.isInAdm = isInAdm;
    return this;
  }

  /**
   * Information of the administration division where the street / POI is.
   * @return isInAdm
   */
  @javax.annotation.Nullable
  public String getIsInAdm() {
    return isInAdm;
  }

  public void setIsInAdm(String isInAdm) {
    this.isInAdm = isInAdm;
  }


  public SolrResponseDto isInPlace(String isInPlace) {
    this.isInPlace = isInPlace;
    return this;
  }

  /**
   * Information on the place where the street / POI is (quater, common place). Generally a place at a lower level than city
   * @return isInPlace
   */
  @javax.annotation.Nullable
  public String getIsInPlace() {
    return isInPlace;
  }

  public void setIsInPlace(String isInPlace) {
    this.isInPlace = isInPlace;
  }


  public SolrResponseDto isInZip(List<String> isInZip) {
    this.isInZip = isInZip;
    return this;
  }

  public SolrResponseDto addIsInZipItem(String isInZipItem) {
    if (this.isInZip == null) {
      this.isInZip = new ArrayList<>();
    }
    this.isInZip.add(isInZipItem);
    return this;
  }

  /**
   * Information of the zipcode where the street / POI is (often fill for placetype street)
   * @return isInZip
   */
  @javax.annotation.Nullable
  public List<String> getIsInZip() {
    return isInZip;
  }

  public void setIsInZip(List<String> isInZip) {
    this.isInZip = isInZip;
  }


  public SolrResponseDto isoalpha2CountryCode(String isoalpha2CountryCode) {
    this.isoalpha2CountryCode = isoalpha2CountryCode;
    return this;
  }

  /**
   * The ISO 3166 alpha 2 code of the country (only for country placetype)
   * @return isoalpha2CountryCode
   */
  @javax.annotation.Nullable
  public String getIsoalpha2CountryCode() {
    return isoalpha2CountryCode;
  }

  public void setIsoalpha2CountryCode(String isoalpha2CountryCode) {
    this.isoalpha2CountryCode = isoalpha2CountryCode;
  }


  public SolrResponseDto isoalpha3CountryCode(String isoalpha3CountryCode) {
    this.isoalpha3CountryCode = isoalpha3CountryCode;
    return this;
  }

  /**
   * The ISO 3166 alpha 3 code of the country (only for country placetype)
   * @return isoalpha3CountryCode
   */
  @javax.annotation.Nullable
  public String getIsoalpha3CountryCode() {
    return isoalpha3CountryCode;
  }

  public void setIsoalpha3CountryCode(String isoalpha3CountryCode) {
    this.isoalpha3CountryCode = isoalpha3CountryCode;
  }


  public SolrResponseDto lat(Double lat) {
    this.lat = lat;
    return this;
  }

  /**
   * The latitude (north-south)
   * @return lat
   */
  @javax.annotation.Nullable
  public Double getLat() {
    return lat;
  }

  public void setLat(Double lat) {
    this.lat = lat;
  }


  public SolrResponseDto length(Double length) {
    this.length = length;
    return this;
  }

  /**
   * The length of the street (only for placetype street)
   * @return length
   */
  @javax.annotation.Nullable
  public Double getLength() {
    return length;
  }

  public void setLength(Double length) {
    this.length = length;
  }


  public SolrResponseDto level(Integer level) {
    this.level = level;
    return this;
  }

  /**
   * Level of the Adm 1 , 2, 3, or 4(only for Adm placetype)
   * @return level
   */
  @javax.annotation.Nullable
  public Integer getLevel() {
    return level;
  }

  public void setLevel(Integer level) {
    this.level = level;
  }


  public SolrResponseDto lng(Double lng) {
    this.lng = lng;
    return this;
  }

  /**
   * The longitude (east-West)
   * @return lng
   */
  @javax.annotation.Nullable
  public Double getLng() {
    return lng;
  }

  public void setLng(Double lng) {
    this.lng = lng;
  }


  public SolrResponseDto municipality(Boolean municipality) {
    this.municipality = municipality;
    return this;
  }

  /**
   * if the place is a municipality. it is usefull for geonames feature that don&#39;t have concept of &#39;city&#39; but a populated place (that can be a quarter)
   * @return municipality
   */
  @javax.annotation.Nullable
  public Boolean getMunicipality() {
    return municipality;
  }

  public void setMunicipality(Boolean municipality) {
    this.municipality = municipality;
  }


  public SolrResponseDto name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the feature
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public SolrResponseDto nameAlternates(List<String> nameAlternates) {
    this.nameAlternates = nameAlternates;
    return this;
  }

  public SolrResponseDto addNameAlternatesItem(String nameAlternatesItem) {
    if (this.nameAlternates == null) {
      this.nameAlternates = new ArrayList<>();
    }
    this.nameAlternates.add(nameAlternatesItem);
    return this;
  }

  /**
   * The alternate names of the feature that without specific language code
   * @return nameAlternates
   */
  @javax.annotation.Nullable
  public List<String> getNameAlternates() {
    return nameAlternates;
  }

  public void setNameAlternates(List<String> nameAlternates) {
    this.nameAlternates = nameAlternates;
  }


  public SolrResponseDto nameAscii(String nameAscii) {
    this.nameAscii = nameAscii;
    return this;
  }

  /**
   * The ASCII name
   * @return nameAscii
   */
  @javax.annotation.Nullable
  public String getNameAscii() {
    return nameAscii;
  }

  public void setNameAscii(String nameAscii) {
    this.nameAscii = nameAscii;
  }


  public SolrResponseDto oneWay(Boolean oneWay) {
    this.oneWay = oneWay;
    return this;
  }

  /**
   * whether the street is one way or not (only for placetype street)
   * @return oneWay
   */
  @javax.annotation.Nullable
  public Boolean getOneWay() {
    return oneWay;
  }

  public void setOneWay(Boolean oneWay) {
    this.oneWay = oneWay;
  }


  public SolrResponseDto openstreetmapId(Long openstreetmapId) {
    this.openstreetmapId = openstreetmapId;
    return this;
  }

  /**
   * The OpenStreetMap unique id of the street (only for placetype street)
   * @return openstreetmapId
   */
  @javax.annotation.Nullable
  public Long getOpenstreetmapId() {
    return openstreetmapId;
  }

  public void setOpenstreetmapId(Long openstreetmapId) {
    this.openstreetmapId = openstreetmapId;
  }


  public SolrResponseDto openstreetmapMapUrl(String openstreetmapMapUrl) {
    this.openstreetmapMapUrl = openstreetmapMapUrl;
    return this;
  }

  /**
   * The URL to get the location on OpenStreetMap.org
   * @return openstreetmapMapUrl
   */
  @javax.annotation.Nullable
  public String getOpenstreetmapMapUrl() {
    return openstreetmapMapUrl;
  }

  public void setOpenstreetmapMapUrl(String openstreetmapMapUrl) {
    this.openstreetmapMapUrl = openstreetmapMapUrl;
  }


  public SolrResponseDto phonePrefix(String phonePrefix) {
    this.phonePrefix = phonePrefix;
    return this;
  }

  /**
   * The phone prefix of the country. e.g : +33 .(only for country placetype)
   * @return phonePrefix
   */
  @javax.annotation.Nullable
  public String getPhonePrefix() {
    return phonePrefix;
  }

  public void setPhonePrefix(String phonePrefix) {
    this.phonePrefix = phonePrefix;
  }


  public SolrResponseDto placetype(String placetype) {
    this.placetype = placetype;
    return this;
  }

  /**
   * The place Type of the Feature
   * @return placetype
   */
  @javax.annotation.Nullable
  public String getPlacetype() {
    return placetype;
  }

  public void setPlacetype(String placetype) {
    this.placetype = placetype;
  }


  public SolrResponseDto population(Integer population) {
    this.population = population;
    return this;
  }

  /**
   * How many people live in this feature
   * @return population
   */
  @javax.annotation.Nullable
  public Integer getPopulation() {
    return population;
  }

  public void setPopulation(Integer population) {
    this.population = population;
  }


  public SolrResponseDto postalCodeMask(String postalCodeMask) {
    this.postalCodeMask = postalCodeMask;
    return this;
  }

  /**
   * The mask that postal codes should verify. e.g : ##### (only for country placetype)
   * @return postalCodeMask
   */
  @javax.annotation.Nullable
  public String getPostalCodeMask() {
    return postalCodeMask;
  }

  public void setPostalCodeMask(String postalCodeMask) {
    this.postalCodeMask = postalCodeMask;
  }


  public SolrResponseDto postalCodeRegex(String postalCodeRegex) {
    this.postalCodeRegex = postalCodeRegex;
    return this;
  }

  /**
   * The regular expression that postal codes should verify (only for country placetype)
   * @return postalCodeRegex
   */
  @javax.annotation.Nullable
  public String getPostalCodeRegex() {
    return postalCodeRegex;
  }

  public void setPostalCodeRegex(String postalCodeRegex) {
    this.postalCodeRegex = postalCodeRegex;
  }


  public SolrResponseDto score(Float score) {
    this.score = score;
    return this;
  }

  /**
   * a number that indicates the relevance of the result
   * @return score
   */
  @javax.annotation.Nullable
  public Float getScore() {
    return score;
  }

  public void setScore(Float score) {
    this.score = score;
  }


  public SolrResponseDto spokenLanguages(List<String> spokenLanguages) {
    this.spokenLanguages = spokenLanguages;
    return this;
  }

  public SolrResponseDto addSpokenLanguagesItem(String spokenLanguagesItem) {
    if (this.spokenLanguages == null) {
      this.spokenLanguages = new ArrayList<>();
    }
    this.spokenLanguages.add(spokenLanguagesItem);
    return this;
  }

  /**
   * List of languages spoken in the country (only for country placetype)
   * @return spokenLanguages
   */
  @javax.annotation.Nullable
  public List<String> getSpokenLanguages() {
    return spokenLanguages;
  }

  public void setSpokenLanguages(List<String> spokenLanguages) {
    this.spokenLanguages = spokenLanguages;
  }


  public SolrResponseDto streetType(String streetType) {
    this.streetType = streetType;
    return this;
  }

  /**
   * The type of the street (only for placetype street)
   * @return streetType
   */
  @javax.annotation.Nullable
  public String getStreetType() {
    return streetType;
  }

  public void setStreetType(String streetType) {
    this.streetType = streetType;
  }


  public SolrResponseDto timezone(String timezone) {
    this.timezone = timezone;
    return this;
  }

  /**
   * The timezone (e.g :Europe/Paris).
   * @return timezone
   */
  @javax.annotation.Nullable
  public String getTimezone() {
    return timezone;
  }

  public void setTimezone(String timezone) {
    this.timezone = timezone;
  }


  public SolrResponseDto tld(String tld) {
    this.tld = tld;
    return this;
  }

  /**
   * Top level domain of the country (only for country placetype)
   * @return tld
   */
  @javax.annotation.Nullable
  public String getTld() {
    return tld;
  }

  public void setTld(String tld) {
    this.tld = tld;
  }


  public SolrResponseDto yahooMapUrl(String yahooMapUrl) {
    this.yahooMapUrl = yahooMapUrl;
    return this;
  }

  /**
   * The URL to get the location on Yahoo Map
   * @return yahooMapUrl
   */
  @javax.annotation.Nullable
  public String getYahooMapUrl() {
    return yahooMapUrl;
  }

  public void setYahooMapUrl(String yahooMapUrl) {
    this.yahooMapUrl = yahooMapUrl;
  }


  public SolrResponseDto zipcodes(List<String> zipcodes) {
    this.zipcodes = zipcodes;
    return this;
  }

  public SolrResponseDto addZipcodesItem(String zipcodesItem) {
    if (this.zipcodes == null) {
      this.zipcodes = new ArrayList<>();
    }
    this.zipcodes.add(zipcodesItem);
    return this;
  }

  /**
   * The zipcodes
   * @return zipcodes
   */
  @javax.annotation.Nullable
  public List<String> getZipcodes() {
    return zipcodes;
  }

  public void setZipcodes(List<String> zipcodes) {
    this.zipcodes = zipcodes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SolrResponseDto solrResponseDto = (SolrResponseDto) o;
    return Objects.equals(this.adm1Code, solrResponseDto.adm1Code) &&
        Objects.equals(this.adm1Name, solrResponseDto.adm1Name) &&
        Objects.equals(this.adm1NamesAlternate, solrResponseDto.adm1NamesAlternate) &&
        Objects.equals(this.adm2Code, solrResponseDto.adm2Code) &&
        Objects.equals(this.adm2Name, solrResponseDto.adm2Name) &&
        Objects.equals(this.adm2NamesAlternate, solrResponseDto.adm2NamesAlternate) &&
        Objects.equals(this.adm3Code, solrResponseDto.adm3Code) &&
        Objects.equals(this.adm3Name, solrResponseDto.adm3Name) &&
        Objects.equals(this.adm4Code, solrResponseDto.adm4Code) &&
        Objects.equals(this.adm4Name, solrResponseDto.adm4Name) &&
        Objects.equals(this.amenity, solrResponseDto.amenity) &&
        Objects.equals(this.area, solrResponseDto.area) &&
        Objects.equals(this.capitalName, solrResponseDto.capitalName) &&
        Objects.equals(this.continent, solrResponseDto.continent) &&
        Objects.equals(this.countryCode, solrResponseDto.countryCode) &&
        Objects.equals(this.countryFlagUrl, solrResponseDto.countryFlagUrl) &&
        Objects.equals(this.countryName, solrResponseDto.countryName) &&
        Objects.equals(this.countryNamesAlternate, solrResponseDto.countryNamesAlternate) &&
        Objects.equals(this.currencyCode, solrResponseDto.currencyCode) &&
        Objects.equals(this.currencyName, solrResponseDto.currencyName) &&
        Objects.equals(this.elevation, solrResponseDto.elevation) &&
        Objects.equals(this.featureClass, solrResponseDto.featureClass) &&
        Objects.equals(this.featureCode, solrResponseDto.featureCode) &&
        Objects.equals(this.featureId, solrResponseDto.featureId) &&
        Objects.equals(this.fipsCode, solrResponseDto.fipsCode) &&
        Objects.equals(this.fullyQualifiedAddress, solrResponseDto.fullyQualifiedAddress) &&
        Objects.equals(this.fullyQualifiedName, solrResponseDto.fullyQualifiedName) &&
        Objects.equals(this.googleMapUrl, solrResponseDto.googleMapUrl) &&
        Objects.equals(this.gtopo30, solrResponseDto.gtopo30) &&
        Objects.equals(this.houseNumbers, solrResponseDto.houseNumbers) &&
        Objects.equals(this.isIn, solrResponseDto.isIn) &&
        Objects.equals(this.isInAdm, solrResponseDto.isInAdm) &&
        Objects.equals(this.isInPlace, solrResponseDto.isInPlace) &&
        Objects.equals(this.isInZip, solrResponseDto.isInZip) &&
        Objects.equals(this.isoalpha2CountryCode, solrResponseDto.isoalpha2CountryCode) &&
        Objects.equals(this.isoalpha3CountryCode, solrResponseDto.isoalpha3CountryCode) &&
        Objects.equals(this.lat, solrResponseDto.lat) &&
        Objects.equals(this.length, solrResponseDto.length) &&
        Objects.equals(this.level, solrResponseDto.level) &&
        Objects.equals(this.lng, solrResponseDto.lng) &&
        Objects.equals(this.municipality, solrResponseDto.municipality) &&
        Objects.equals(this.name, solrResponseDto.name) &&
        Objects.equals(this.nameAlternates, solrResponseDto.nameAlternates) &&
        Objects.equals(this.nameAscii, solrResponseDto.nameAscii) &&
        Objects.equals(this.oneWay, solrResponseDto.oneWay) &&
        Objects.equals(this.openstreetmapId, solrResponseDto.openstreetmapId) &&
        Objects.equals(this.openstreetmapMapUrl, solrResponseDto.openstreetmapMapUrl) &&
        Objects.equals(this.phonePrefix, solrResponseDto.phonePrefix) &&
        Objects.equals(this.placetype, solrResponseDto.placetype) &&
        Objects.equals(this.population, solrResponseDto.population) &&
        Objects.equals(this.postalCodeMask, solrResponseDto.postalCodeMask) &&
        Objects.equals(this.postalCodeRegex, solrResponseDto.postalCodeRegex) &&
        Objects.equals(this.score, solrResponseDto.score) &&
        Objects.equals(this.spokenLanguages, solrResponseDto.spokenLanguages) &&
        Objects.equals(this.streetType, solrResponseDto.streetType) &&
        Objects.equals(this.timezone, solrResponseDto.timezone) &&
        Objects.equals(this.tld, solrResponseDto.tld) &&
        Objects.equals(this.yahooMapUrl, solrResponseDto.yahooMapUrl) &&
        Objects.equals(this.zipcodes, solrResponseDto.zipcodes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(adm1Code, adm1Name, adm1NamesAlternate, adm2Code, adm2Name, adm2NamesAlternate, adm3Code, adm3Name, adm4Code, adm4Name, amenity, area, capitalName, continent, countryCode, countryFlagUrl, countryName, countryNamesAlternate, currencyCode, currencyName, elevation, featureClass, featureCode, featureId, fipsCode, fullyQualifiedAddress, fullyQualifiedName, googleMapUrl, gtopo30, houseNumbers, isIn, isInAdm, isInPlace, isInZip, isoalpha2CountryCode, isoalpha3CountryCode, lat, length, level, lng, municipality, name, nameAlternates, nameAscii, oneWay, openstreetmapId, openstreetmapMapUrl, phonePrefix, placetype, population, postalCodeMask, postalCodeRegex, score, spokenLanguages, streetType, timezone, tld, yahooMapUrl, zipcodes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SolrResponseDto {\n");
    sb.append("    adm1Code: ").append(toIndentedString(adm1Code)).append("\n");
    sb.append("    adm1Name: ").append(toIndentedString(adm1Name)).append("\n");
    sb.append("    adm1NamesAlternate: ").append(toIndentedString(adm1NamesAlternate)).append("\n");
    sb.append("    adm2Code: ").append(toIndentedString(adm2Code)).append("\n");
    sb.append("    adm2Name: ").append(toIndentedString(adm2Name)).append("\n");
    sb.append("    adm2NamesAlternate: ").append(toIndentedString(adm2NamesAlternate)).append("\n");
    sb.append("    adm3Code: ").append(toIndentedString(adm3Code)).append("\n");
    sb.append("    adm3Name: ").append(toIndentedString(adm3Name)).append("\n");
    sb.append("    adm4Code: ").append(toIndentedString(adm4Code)).append("\n");
    sb.append("    adm4Name: ").append(toIndentedString(adm4Name)).append("\n");
    sb.append("    amenity: ").append(toIndentedString(amenity)).append("\n");
    sb.append("    area: ").append(toIndentedString(area)).append("\n");
    sb.append("    capitalName: ").append(toIndentedString(capitalName)).append("\n");
    sb.append("    continent: ").append(toIndentedString(continent)).append("\n");
    sb.append("    countryCode: ").append(toIndentedString(countryCode)).append("\n");
    sb.append("    countryFlagUrl: ").append(toIndentedString(countryFlagUrl)).append("\n");
    sb.append("    countryName: ").append(toIndentedString(countryName)).append("\n");
    sb.append("    countryNamesAlternate: ").append(toIndentedString(countryNamesAlternate)).append("\n");
    sb.append("    currencyCode: ").append(toIndentedString(currencyCode)).append("\n");
    sb.append("    currencyName: ").append(toIndentedString(currencyName)).append("\n");
    sb.append("    elevation: ").append(toIndentedString(elevation)).append("\n");
    sb.append("    featureClass: ").append(toIndentedString(featureClass)).append("\n");
    sb.append("    featureCode: ").append(toIndentedString(featureCode)).append("\n");
    sb.append("    featureId: ").append(toIndentedString(featureId)).append("\n");
    sb.append("    fipsCode: ").append(toIndentedString(fipsCode)).append("\n");
    sb.append("    fullyQualifiedAddress: ").append(toIndentedString(fullyQualifiedAddress)).append("\n");
    sb.append("    fullyQualifiedName: ").append(toIndentedString(fullyQualifiedName)).append("\n");
    sb.append("    googleMapUrl: ").append(toIndentedString(googleMapUrl)).append("\n");
    sb.append("    gtopo30: ").append(toIndentedString(gtopo30)).append("\n");
    sb.append("    houseNumbers: ").append(toIndentedString(houseNumbers)).append("\n");
    sb.append("    isIn: ").append(toIndentedString(isIn)).append("\n");
    sb.append("    isInAdm: ").append(toIndentedString(isInAdm)).append("\n");
    sb.append("    isInPlace: ").append(toIndentedString(isInPlace)).append("\n");
    sb.append("    isInZip: ").append(toIndentedString(isInZip)).append("\n");
    sb.append("    isoalpha2CountryCode: ").append(toIndentedString(isoalpha2CountryCode)).append("\n");
    sb.append("    isoalpha3CountryCode: ").append(toIndentedString(isoalpha3CountryCode)).append("\n");
    sb.append("    lat: ").append(toIndentedString(lat)).append("\n");
    sb.append("    length: ").append(toIndentedString(length)).append("\n");
    sb.append("    level: ").append(toIndentedString(level)).append("\n");
    sb.append("    lng: ").append(toIndentedString(lng)).append("\n");
    sb.append("    municipality: ").append(toIndentedString(municipality)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    nameAlternates: ").append(toIndentedString(nameAlternates)).append("\n");
    sb.append("    nameAscii: ").append(toIndentedString(nameAscii)).append("\n");
    sb.append("    oneWay: ").append(toIndentedString(oneWay)).append("\n");
    sb.append("    openstreetmapId: ").append(toIndentedString(openstreetmapId)).append("\n");
    sb.append("    openstreetmapMapUrl: ").append(toIndentedString(openstreetmapMapUrl)).append("\n");
    sb.append("    phonePrefix: ").append(toIndentedString(phonePrefix)).append("\n");
    sb.append("    placetype: ").append(toIndentedString(placetype)).append("\n");
    sb.append("    population: ").append(toIndentedString(population)).append("\n");
    sb.append("    postalCodeMask: ").append(toIndentedString(postalCodeMask)).append("\n");
    sb.append("    postalCodeRegex: ").append(toIndentedString(postalCodeRegex)).append("\n");
    sb.append("    score: ").append(toIndentedString(score)).append("\n");
    sb.append("    spokenLanguages: ").append(toIndentedString(spokenLanguages)).append("\n");
    sb.append("    streetType: ").append(toIndentedString(streetType)).append("\n");
    sb.append("    timezone: ").append(toIndentedString(timezone)).append("\n");
    sb.append("    tld: ").append(toIndentedString(tld)).append("\n");
    sb.append("    yahooMapUrl: ").append(toIndentedString(yahooMapUrl)).append("\n");
    sb.append("    zipcodes: ").append(toIndentedString(zipcodes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("adm1_code");
    openapiFields.add("adm1_name");
    openapiFields.add("adm1_names_alternate");
    openapiFields.add("adm2_code");
    openapiFields.add("adm2_name");
    openapiFields.add("adm2_names_alternate");
    openapiFields.add("adm3_code");
    openapiFields.add("adm3_name");
    openapiFields.add("adm4_code");
    openapiFields.add("adm4_name");
    openapiFields.add("amenity");
    openapiFields.add("area");
    openapiFields.add("capital_name");
    openapiFields.add("continent");
    openapiFields.add("country_code");
    openapiFields.add("country_flag_url");
    openapiFields.add("country_name");
    openapiFields.add("country_names_alternate");
    openapiFields.add("currency_code");
    openapiFields.add("currency_name");
    openapiFields.add("elevation");
    openapiFields.add("feature_class");
    openapiFields.add("feature_code");
    openapiFields.add("feature_id");
    openapiFields.add("fips_code");
    openapiFields.add("fully_qualified_address");
    openapiFields.add("fully_qualified_name");
    openapiFields.add("google_map_url");
    openapiFields.add("gtopo30");
    openapiFields.add("house_numbers");
    openapiFields.add("is_in");
    openapiFields.add("is_in_adm");
    openapiFields.add("is_in_place");
    openapiFields.add("is_in_zip");
    openapiFields.add("isoalpha2_country_code");
    openapiFields.add("isoalpha3_country_code");
    openapiFields.add("lat");
    openapiFields.add("length");
    openapiFields.add("level");
    openapiFields.add("lng");
    openapiFields.add("municipality");
    openapiFields.add("name");
    openapiFields.add("name_alternates");
    openapiFields.add("name_ascii");
    openapiFields.add("one_way");
    openapiFields.add("openstreetmap_id");
    openapiFields.add("openstreetmap_map_url");
    openapiFields.add("phone_prefix");
    openapiFields.add("placetype");
    openapiFields.add("population");
    openapiFields.add("postal_code_mask");
    openapiFields.add("postal_code_regex");
    openapiFields.add("score");
    openapiFields.add("spoken_languages");
    openapiFields.add("street_type");
    openapiFields.add("timezone");
    openapiFields.add("tld");
    openapiFields.add("yahoo_map_url");
    openapiFields.add("zipcodes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SolrResponseDto
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SolrResponseDto.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SolrResponseDto is not found in the empty JSON string", SolrResponseDto.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SolrResponseDto.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SolrResponseDto` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("adm1_code") != null && !jsonObj.get("adm1_code").isJsonNull()) && !jsonObj.get("adm1_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `adm1_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("adm1_code").toString()));
      }
      if ((jsonObj.get("adm1_name") != null && !jsonObj.get("adm1_name").isJsonNull()) && !jsonObj.get("adm1_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `adm1_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("adm1_name").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("adm1_names_alternate") != null && !jsonObj.get("adm1_names_alternate").isJsonNull() && !jsonObj.get("adm1_names_alternate").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `adm1_names_alternate` to be an array in the JSON string but got `%s`", jsonObj.get("adm1_names_alternate").toString()));
      }
      if ((jsonObj.get("adm2_code") != null && !jsonObj.get("adm2_code").isJsonNull()) && !jsonObj.get("adm2_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `adm2_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("adm2_code").toString()));
      }
      if ((jsonObj.get("adm2_name") != null && !jsonObj.get("adm2_name").isJsonNull()) && !jsonObj.get("adm2_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `adm2_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("adm2_name").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("adm2_names_alternate") != null && !jsonObj.get("adm2_names_alternate").isJsonNull() && !jsonObj.get("adm2_names_alternate").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `adm2_names_alternate` to be an array in the JSON string but got `%s`", jsonObj.get("adm2_names_alternate").toString()));
      }
      if ((jsonObj.get("adm3_code") != null && !jsonObj.get("adm3_code").isJsonNull()) && !jsonObj.get("adm3_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `adm3_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("adm3_code").toString()));
      }
      if ((jsonObj.get("adm3_name") != null && !jsonObj.get("adm3_name").isJsonNull()) && !jsonObj.get("adm3_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `adm3_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("adm3_name").toString()));
      }
      if ((jsonObj.get("adm4_code") != null && !jsonObj.get("adm4_code").isJsonNull()) && !jsonObj.get("adm4_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `adm4_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("adm4_code").toString()));
      }
      if ((jsonObj.get("adm4_name") != null && !jsonObj.get("adm4_name").isJsonNull()) && !jsonObj.get("adm4_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `adm4_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("adm4_name").toString()));
      }
      if ((jsonObj.get("amenity") != null && !jsonObj.get("amenity").isJsonNull()) && !jsonObj.get("amenity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `amenity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("amenity").toString()));
      }
      if ((jsonObj.get("capital_name") != null && !jsonObj.get("capital_name").isJsonNull()) && !jsonObj.get("capital_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `capital_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("capital_name").toString()));
      }
      if ((jsonObj.get("continent") != null && !jsonObj.get("continent").isJsonNull()) && !jsonObj.get("continent").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `continent` to be a primitive type in the JSON string but got `%s`", jsonObj.get("continent").toString()));
      }
      if ((jsonObj.get("country_code") != null && !jsonObj.get("country_code").isJsonNull()) && !jsonObj.get("country_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `country_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("country_code").toString()));
      }
      if ((jsonObj.get("country_flag_url") != null && !jsonObj.get("country_flag_url").isJsonNull()) && !jsonObj.get("country_flag_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `country_flag_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("country_flag_url").toString()));
      }
      if ((jsonObj.get("country_name") != null && !jsonObj.get("country_name").isJsonNull()) && !jsonObj.get("country_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `country_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("country_name").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("country_names_alternate") != null && !jsonObj.get("country_names_alternate").isJsonNull() && !jsonObj.get("country_names_alternate").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `country_names_alternate` to be an array in the JSON string but got `%s`", jsonObj.get("country_names_alternate").toString()));
      }
      if ((jsonObj.get("currency_code") != null && !jsonObj.get("currency_code").isJsonNull()) && !jsonObj.get("currency_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currency_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currency_code").toString()));
      }
      if ((jsonObj.get("currency_name") != null && !jsonObj.get("currency_name").isJsonNull()) && !jsonObj.get("currency_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currency_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currency_name").toString()));
      }
      if ((jsonObj.get("feature_class") != null && !jsonObj.get("feature_class").isJsonNull()) && !jsonObj.get("feature_class").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `feature_class` to be a primitive type in the JSON string but got `%s`", jsonObj.get("feature_class").toString()));
      }
      if ((jsonObj.get("feature_code") != null && !jsonObj.get("feature_code").isJsonNull()) && !jsonObj.get("feature_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `feature_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("feature_code").toString()));
      }
      if ((jsonObj.get("fips_code") != null && !jsonObj.get("fips_code").isJsonNull()) && !jsonObj.get("fips_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fips_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fips_code").toString()));
      }
      if ((jsonObj.get("fully_qualified_address") != null && !jsonObj.get("fully_qualified_address").isJsonNull()) && !jsonObj.get("fully_qualified_address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fully_qualified_address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fully_qualified_address").toString()));
      }
      if ((jsonObj.get("fully_qualified_name") != null && !jsonObj.get("fully_qualified_name").isJsonNull()) && !jsonObj.get("fully_qualified_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fully_qualified_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fully_qualified_name").toString()));
      }
      if ((jsonObj.get("google_map_url") != null && !jsonObj.get("google_map_url").isJsonNull()) && !jsonObj.get("google_map_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `google_map_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("google_map_url").toString()));
      }
      if (jsonObj.get("house_numbers") != null && !jsonObj.get("house_numbers").isJsonNull()) {
        JsonArray jsonArrayhouseNumbers = jsonObj.getAsJsonArray("house_numbers");
        if (jsonArrayhouseNumbers != null) {
          // ensure the json data is an array
          if (!jsonObj.get("house_numbers").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `house_numbers` to be an array in the JSON string but got `%s`", jsonObj.get("house_numbers").toString()));
          }

          // validate the optional field `house_numbers` (array)
          for (int i = 0; i < jsonArrayhouseNumbers.size(); i++) {
            HouseNumberDto.validateJsonElement(jsonArrayhouseNumbers.get(i));
          };
        }
      }
      if ((jsonObj.get("is_in") != null && !jsonObj.get("is_in").isJsonNull()) && !jsonObj.get("is_in").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `is_in` to be a primitive type in the JSON string but got `%s`", jsonObj.get("is_in").toString()));
      }
      if ((jsonObj.get("is_in_adm") != null && !jsonObj.get("is_in_adm").isJsonNull()) && !jsonObj.get("is_in_adm").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `is_in_adm` to be a primitive type in the JSON string but got `%s`", jsonObj.get("is_in_adm").toString()));
      }
      if ((jsonObj.get("is_in_place") != null && !jsonObj.get("is_in_place").isJsonNull()) && !jsonObj.get("is_in_place").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `is_in_place` to be a primitive type in the JSON string but got `%s`", jsonObj.get("is_in_place").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("is_in_zip") != null && !jsonObj.get("is_in_zip").isJsonNull() && !jsonObj.get("is_in_zip").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `is_in_zip` to be an array in the JSON string but got `%s`", jsonObj.get("is_in_zip").toString()));
      }
      if ((jsonObj.get("isoalpha2_country_code") != null && !jsonObj.get("isoalpha2_country_code").isJsonNull()) && !jsonObj.get("isoalpha2_country_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `isoalpha2_country_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("isoalpha2_country_code").toString()));
      }
      if ((jsonObj.get("isoalpha3_country_code") != null && !jsonObj.get("isoalpha3_country_code").isJsonNull()) && !jsonObj.get("isoalpha3_country_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `isoalpha3_country_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("isoalpha3_country_code").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("name_alternates") != null && !jsonObj.get("name_alternates").isJsonNull() && !jsonObj.get("name_alternates").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `name_alternates` to be an array in the JSON string but got `%s`", jsonObj.get("name_alternates").toString()));
      }
      if ((jsonObj.get("name_ascii") != null && !jsonObj.get("name_ascii").isJsonNull()) && !jsonObj.get("name_ascii").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name_ascii` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name_ascii").toString()));
      }
      if ((jsonObj.get("openstreetmap_map_url") != null && !jsonObj.get("openstreetmap_map_url").isJsonNull()) && !jsonObj.get("openstreetmap_map_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `openstreetmap_map_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("openstreetmap_map_url").toString()));
      }
      if ((jsonObj.get("phone_prefix") != null && !jsonObj.get("phone_prefix").isJsonNull()) && !jsonObj.get("phone_prefix").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `phone_prefix` to be a primitive type in the JSON string but got `%s`", jsonObj.get("phone_prefix").toString()));
      }
      if ((jsonObj.get("placetype") != null && !jsonObj.get("placetype").isJsonNull()) && !jsonObj.get("placetype").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `placetype` to be a primitive type in the JSON string but got `%s`", jsonObj.get("placetype").toString()));
      }
      if ((jsonObj.get("postal_code_mask") != null && !jsonObj.get("postal_code_mask").isJsonNull()) && !jsonObj.get("postal_code_mask").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `postal_code_mask` to be a primitive type in the JSON string but got `%s`", jsonObj.get("postal_code_mask").toString()));
      }
      if ((jsonObj.get("postal_code_regex") != null && !jsonObj.get("postal_code_regex").isJsonNull()) && !jsonObj.get("postal_code_regex").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `postal_code_regex` to be a primitive type in the JSON string but got `%s`", jsonObj.get("postal_code_regex").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("spoken_languages") != null && !jsonObj.get("spoken_languages").isJsonNull() && !jsonObj.get("spoken_languages").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `spoken_languages` to be an array in the JSON string but got `%s`", jsonObj.get("spoken_languages").toString()));
      }
      if ((jsonObj.get("street_type") != null && !jsonObj.get("street_type").isJsonNull()) && !jsonObj.get("street_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `street_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("street_type").toString()));
      }
      if ((jsonObj.get("timezone") != null && !jsonObj.get("timezone").isJsonNull()) && !jsonObj.get("timezone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timezone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timezone").toString()));
      }
      if ((jsonObj.get("tld") != null && !jsonObj.get("tld").isJsonNull()) && !jsonObj.get("tld").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tld` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tld").toString()));
      }
      if ((jsonObj.get("yahoo_map_url") != null && !jsonObj.get("yahoo_map_url").isJsonNull()) && !jsonObj.get("yahoo_map_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `yahoo_map_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("yahoo_map_url").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("zipcodes") != null && !jsonObj.get("zipcodes").isJsonNull() && !jsonObj.get("zipcodes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `zipcodes` to be an array in the JSON string but got `%s`", jsonObj.get("zipcodes").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SolrResponseDto.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SolrResponseDto' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SolrResponseDto> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SolrResponseDto.class));

       return (TypeAdapter<T>) new TypeAdapter<SolrResponseDto>() {
           @Override
           public void write(JsonWriter out, SolrResponseDto value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SolrResponseDto read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SolrResponseDto given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SolrResponseDto
   * @throws IOException if the JSON string is invalid with respect to SolrResponseDto
   */
  public static SolrResponseDto fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SolrResponseDto.class);
  }

  /**
   * Convert an instance of SolrResponseDto to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

