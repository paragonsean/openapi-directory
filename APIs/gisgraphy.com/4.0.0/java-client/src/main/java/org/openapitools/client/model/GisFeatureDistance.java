/*
 * Gisgraphy webservices
 * Since 2006, [Gisgraphy](http://www.gisgraphy.com) is a free, open source framework that offers the possibility to do geolocalisation and geocoding via Java APIs or REST webservices. Because geocoding is nothing without data, it provides an easy to use importer that will automatically download and import the necessary (free) data to your local database ([OpenStreetMap](http://www.openstreetmap.org/), [Geonames](http://www.geonames.org/) and [Quattroshapes](http://www.quattroshapes.com/): more than 100 million entries). You can also add your own data with the Web interface or the importer connectors provided. Gisgraphy is production ready, and has been designed to be scalable(load balanced), performant and used in other languages than just java : results can be output in XML, JSON, PHP, Python, Ruby, YAML, GeoRSS, and Atom. One of the most popular GPS tracking System (OpenGTS) also includes a Gisgraphy client...Gisgraphy is a framework. As a result it's flexible and powerful enough to be used in a lot of different use cases. [read more](http://www.gisgraphy.com)   if you use the premium servers, you can use the api key to test the webservices 
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GisFeatureDistance
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:27:52.231698-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GisFeatureDistance {
  public static final String SERIALIZED_NAME_ADM1_CODE = "adm1Code";
  @SerializedName(SERIALIZED_NAME_ADM1_CODE)
  private String adm1Code;

  public static final String SERIALIZED_NAME_ADM1_NAME = "adm1Name";
  @SerializedName(SERIALIZED_NAME_ADM1_NAME)
  private String adm1Name;

  public static final String SERIALIZED_NAME_ADM2_CODE = "adm2Code";
  @SerializedName(SERIALIZED_NAME_ADM2_CODE)
  private String adm2Code;

  public static final String SERIALIZED_NAME_ADM2_NAME = "adm2Name";
  @SerializedName(SERIALIZED_NAME_ADM2_NAME)
  private String adm2Name;

  public static final String SERIALIZED_NAME_ADM3_CODE = "adm3Code";
  @SerializedName(SERIALIZED_NAME_ADM3_CODE)
  private String adm3Code;

  public static final String SERIALIZED_NAME_ADM3_NAME = "adm3Name";
  @SerializedName(SERIALIZED_NAME_ADM3_NAME)
  private String adm3Name;

  public static final String SERIALIZED_NAME_ADM4_CODE = "adm4Code";
  @SerializedName(SERIALIZED_NAME_ADM4_CODE)
  private String adm4Code;

  public static final String SERIALIZED_NAME_ADM4_NAME = "adm4Name";
  @SerializedName(SERIALIZED_NAME_ADM4_NAME)
  private String adm4Name;

  public static final String SERIALIZED_NAME_ADM5_CODE = "adm5Code";
  @SerializedName(SERIALIZED_NAME_ADM5_CODE)
  private String adm5Code;

  public static final String SERIALIZED_NAME_ADM5_NAME = "adm5Name";
  @SerializedName(SERIALIZED_NAME_ADM5_NAME)
  private String adm5Name;

  public static final String SERIALIZED_NAME_AMENITY = "amenity";
  @SerializedName(SERIALIZED_NAME_AMENITY)
  private String amenity;

  public static final String SERIALIZED_NAME_AREA = "area";
  @SerializedName(SERIALIZED_NAME_AREA)
  private Double area;

  public static final String SERIALIZED_NAME_ASCII_NAME = "asciiName";
  @SerializedName(SERIALIZED_NAME_ASCII_NAME)
  private String asciiName;

  public static final String SERIALIZED_NAME_CAPITAL_NAME = "capitalName";
  @SerializedName(SERIALIZED_NAME_CAPITAL_NAME)
  private String capitalName;

  public static final String SERIALIZED_NAME_CONTINENT = "continent";
  @SerializedName(SERIALIZED_NAME_CONTINENT)
  private String continent;

  public static final String SERIALIZED_NAME_COUNTRY_CODE = "countryCode";
  @SerializedName(SERIALIZED_NAME_COUNTRY_CODE)
  private String countryCode;

  public static final String SERIALIZED_NAME_COUNTRY_FLAG_URL = "country_flag_url";
  @SerializedName(SERIALIZED_NAME_COUNTRY_FLAG_URL)
  private String countryFlagUrl;

  public static final String SERIALIZED_NAME_CURRENCY_CODE = "currencyCode";
  @SerializedName(SERIALIZED_NAME_CURRENCY_CODE)
  private String currencyCode;

  public static final String SERIALIZED_NAME_CURRENCY_NAME = "currencyName";
  @SerializedName(SERIALIZED_NAME_CURRENCY_NAME)
  private String currencyName;

  public static final String SERIALIZED_NAME_DISTANCE = "distance";
  @SerializedName(SERIALIZED_NAME_DISTANCE)
  private Double distance;

  public static final String SERIALIZED_NAME_ELEVATION = "elevation";
  @SerializedName(SERIALIZED_NAME_ELEVATION)
  private Integer elevation;

  public static final String SERIALIZED_NAME_EQUIVALENT_FIPS_CODE = "equivalentFipsCode";
  @SerializedName(SERIALIZED_NAME_EQUIVALENT_FIPS_CODE)
  private String equivalentFipsCode;

  public static final String SERIALIZED_NAME_FEATURE_CLASS = "featureClass";
  @SerializedName(SERIALIZED_NAME_FEATURE_CLASS)
  private String featureClass;

  public static final String SERIALIZED_NAME_FEATURE_CODE = "featureCode";
  @SerializedName(SERIALIZED_NAME_FEATURE_CODE)
  private String featureCode;

  public static final String SERIALIZED_NAME_FEATURE_ID = "featureId";
  @SerializedName(SERIALIZED_NAME_FEATURE_ID)
  private Long featureId;

  public static final String SERIALIZED_NAME_FIPS_CODE = "fipsCode";
  @SerializedName(SERIALIZED_NAME_FIPS_CODE)
  private String fipsCode;

  public static final String SERIALIZED_NAME_FULLY_QUALIFIED_ADDRESS = "fullyQualifiedAddress";
  @SerializedName(SERIALIZED_NAME_FULLY_QUALIFIED_ADDRESS)
  private String fullyQualifiedAddress;

  public static final String SERIALIZED_NAME_GOOGLE_MAP_URL = "google_map_url";
  @SerializedName(SERIALIZED_NAME_GOOGLE_MAP_URL)
  private String googleMapUrl;

  public static final String SERIALIZED_NAME_GTOPO30 = "gtopo30";
  @SerializedName(SERIALIZED_NAME_GTOPO30)
  private Integer gtopo30;

  public static final String SERIALIZED_NAME_IS_IN = "isIn";
  @SerializedName(SERIALIZED_NAME_IS_IN)
  private String isIn;

  public static final String SERIALIZED_NAME_IS_IN_ADM = "isInAdm";
  @SerializedName(SERIALIZED_NAME_IS_IN_ADM)
  private String isInAdm;

  public static final String SERIALIZED_NAME_IS_IN_PLACE = "isInPlace";
  @SerializedName(SERIALIZED_NAME_IS_IN_PLACE)
  private String isInPlace;

  public static final String SERIALIZED_NAME_IS_IN_ZIP = "isInZip";
  @SerializedName(SERIALIZED_NAME_IS_IN_ZIP)
  private String isInZip;

  public static final String SERIALIZED_NAME_ISO3166_ALPHA2_CODE = "iso3166Alpha2Code";
  @SerializedName(SERIALIZED_NAME_ISO3166_ALPHA2_CODE)
  private String iso3166Alpha2Code;

  public static final String SERIALIZED_NAME_ISO3166_ALPHA3_CODE = "iso3166Alpha3Code";
  @SerializedName(SERIALIZED_NAME_ISO3166_ALPHA3_CODE)
  private String iso3166Alpha3Code;

  public static final String SERIALIZED_NAME_ISO3166_NUMERIC_CODE = "iso3166NumericCode";
  @SerializedName(SERIALIZED_NAME_ISO3166_NUMERIC_CODE)
  private String iso3166NumericCode;

  public static final String SERIALIZED_NAME_LAT = "lat";
  @SerializedName(SERIALIZED_NAME_LAT)
  private Double lat;

  public static final String SERIALIZED_NAME_LENGTH = "length";
  @SerializedName(SERIALIZED_NAME_LENGTH)
  private Double length;

  public static final String SERIALIZED_NAME_LEVEL = "level";
  @SerializedName(SERIALIZED_NAME_LEVEL)
  private Integer level;

  public static final String SERIALIZED_NAME_LNG = "lng";
  @SerializedName(SERIALIZED_NAME_LNG)
  private Double lng;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_ONE_WAY = "oneWay";
  @SerializedName(SERIALIZED_NAME_ONE_WAY)
  private Boolean oneWay;

  public static final String SERIALIZED_NAME_OPENSTREETMAP_ID = "openstreetmapId";
  @SerializedName(SERIALIZED_NAME_OPENSTREETMAP_ID)
  private Long openstreetmapId;

  public static final String SERIALIZED_NAME_OPENSTREETMAP_MAP_URL = "openstreetmap_map_url";
  @SerializedName(SERIALIZED_NAME_OPENSTREETMAP_MAP_URL)
  private String openstreetmapMapUrl;

  public static final String SERIALIZED_NAME_PHONE_PREFIX = "phonePrefix";
  @SerializedName(SERIALIZED_NAME_PHONE_PREFIX)
  private String phonePrefix;

  public static final String SERIALIZED_NAME_PLACE_TYPE = "placeType";
  @SerializedName(SERIALIZED_NAME_PLACE_TYPE)
  private String placeType;

  public static final String SERIALIZED_NAME_POPULATION = "population";
  @SerializedName(SERIALIZED_NAME_POPULATION)
  private Integer population;

  public static final String SERIALIZED_NAME_POSTAL_CODE_MASK = "postalCodeMask";
  @SerializedName(SERIALIZED_NAME_POSTAL_CODE_MASK)
  private String postalCodeMask;

  public static final String SERIALIZED_NAME_POSTAL_CODE_REGEX = "postalCodeRegex";
  @SerializedName(SERIALIZED_NAME_POSTAL_CODE_REGEX)
  private String postalCodeRegex;

  public static final String SERIALIZED_NAME_STREET_TYPE = "streetType";
  @SerializedName(SERIALIZED_NAME_STREET_TYPE)
  private String streetType;

  public static final String SERIALIZED_NAME_TIMEZONE = "timezone";
  @SerializedName(SERIALIZED_NAME_TIMEZONE)
  private String timezone;

  public static final String SERIALIZED_NAME_TLD = "tld";
  @SerializedName(SERIALIZED_NAME_TLD)
  private String tld;

  public static final String SERIALIZED_NAME_YAHOO_MAP_URL = "yahoo_map_url";
  @SerializedName(SERIALIZED_NAME_YAHOO_MAP_URL)
  private String yahooMapUrl;

  public static final String SERIALIZED_NAME_ZIP_CODES = "zipCodes";
  @SerializedName(SERIALIZED_NAME_ZIP_CODES)
  private List<String> zipCodes = new ArrayList<>();

  public GisFeatureDistance() {
  }

  public GisFeatureDistance adm1Code(String adm1Code) {
    this.adm1Code = adm1Code;
    return this;
  }

  /**
   * The internal code for the administrative division of level 1
   * @return adm1Code
   */
  @javax.annotation.Nullable
  public String getAdm1Code() {
    return adm1Code;
  }

  public void setAdm1Code(String adm1Code) {
    this.adm1Code = adm1Code;
  }


  public GisFeatureDistance adm1Name(String adm1Name) {
    this.adm1Name = adm1Name;
    return this;
  }

  /**
   * The name of the administrative division of level 1
   * @return adm1Name
   */
  @javax.annotation.Nullable
  public String getAdm1Name() {
    return adm1Name;
  }

  public void setAdm1Name(String adm1Name) {
    this.adm1Name = adm1Name;
  }


  public GisFeatureDistance adm2Code(String adm2Code) {
    this.adm2Code = adm2Code;
    return this;
  }

  /**
   * The internal code for the administrative division of level 2
   * @return adm2Code
   */
  @javax.annotation.Nullable
  public String getAdm2Code() {
    return adm2Code;
  }

  public void setAdm2Code(String adm2Code) {
    this.adm2Code = adm2Code;
  }


  public GisFeatureDistance adm2Name(String adm2Name) {
    this.adm2Name = adm2Name;
    return this;
  }

  /**
   * The name of the administrative division of level 2
   * @return adm2Name
   */
  @javax.annotation.Nullable
  public String getAdm2Name() {
    return adm2Name;
  }

  public void setAdm2Name(String adm2Name) {
    this.adm2Name = adm2Name;
  }


  public GisFeatureDistance adm3Code(String adm3Code) {
    this.adm3Code = adm3Code;
    return this;
  }

  /**
   * The internal code for the administrative division of level 3
   * @return adm3Code
   */
  @javax.annotation.Nullable
  public String getAdm3Code() {
    return adm3Code;
  }

  public void setAdm3Code(String adm3Code) {
    this.adm3Code = adm3Code;
  }


  public GisFeatureDistance adm3Name(String adm3Name) {
    this.adm3Name = adm3Name;
    return this;
  }

  /**
   * The name of the administrative division of level 3
   * @return adm3Name
   */
  @javax.annotation.Nullable
  public String getAdm3Name() {
    return adm3Name;
  }

  public void setAdm3Name(String adm3Name) {
    this.adm3Name = adm3Name;
  }


  public GisFeatureDistance adm4Code(String adm4Code) {
    this.adm4Code = adm4Code;
    return this;
  }

  /**
   * The internal code for the administrative division of level 4
   * @return adm4Code
   */
  @javax.annotation.Nullable
  public String getAdm4Code() {
    return adm4Code;
  }

  public void setAdm4Code(String adm4Code) {
    this.adm4Code = adm4Code;
  }


  public GisFeatureDistance adm4Name(String adm4Name) {
    this.adm4Name = adm4Name;
    return this;
  }

  /**
   * The name of the administrative division of level 4
   * @return adm4Name
   */
  @javax.annotation.Nullable
  public String getAdm4Name() {
    return adm4Name;
  }

  public void setAdm4Name(String adm4Name) {
    this.adm4Name = adm4Name;
  }


  public GisFeatureDistance adm5Code(String adm5Code) {
    this.adm5Code = adm5Code;
    return this;
  }

  /**
   * The internal code for the administrative division of level 5
   * @return adm5Code
   */
  @javax.annotation.Nullable
  public String getAdm5Code() {
    return adm5Code;
  }

  public void setAdm5Code(String adm5Code) {
    this.adm5Code = adm5Code;
  }


  public GisFeatureDistance adm5Name(String adm5Name) {
    this.adm5Name = adm5Name;
    return this;
  }

  /**
   * The name of the administrative division of level 5
   * @return adm5Name
   */
  @javax.annotation.Nullable
  public String getAdm5Name() {
    return adm5Name;
  }

  public void setAdm5Name(String adm5Name) {
    this.adm5Name = adm5Name;
  }


  public GisFeatureDistance amenity(String amenity) {
    this.amenity = amenity;
    return this;
  }

  /**
   * Informations on category of OpenStreetMap POIs
   * @return amenity
   */
  @javax.annotation.Nullable
  public String getAmenity() {
    return amenity;
  }

  public void setAmenity(String amenity) {
    this.amenity = amenity;
  }


  public GisFeatureDistance area(Double area) {
    this.area = area;
    return this;
  }

  /**
   * The area of the feature
   * @return area
   */
  @javax.annotation.Nullable
  public Double getArea() {
    return area;
  }

  public void setArea(Double area) {
    this.area = area;
  }


  public GisFeatureDistance asciiName(String asciiName) {
    this.asciiName = asciiName;
    return this;
  }

  /**
   * The ASCII name of the feature
   * @return asciiName
   */
  @javax.annotation.Nullable
  public String getAsciiName() {
    return asciiName;
  }

  public void setAsciiName(String asciiName) {
    this.asciiName = asciiName;
  }


  public GisFeatureDistance capitalName(String capitalName) {
    this.capitalName = capitalName;
    return this;
  }

  /**
   * The Capital of the country
   * @return capitalName
   */
  @javax.annotation.Nullable
  public String getCapitalName() {
    return capitalName;
  }

  public void setCapitalName(String capitalName) {
    this.capitalName = capitalName;
  }


  public GisFeatureDistance continent(String continent) {
    this.continent = continent;
    return this;
  }

  /**
   * The continent the country belongs
   * @return continent
   */
  @javax.annotation.Nullable
  public String getContinent() {
    return continent;
  }

  public void setContinent(String continent) {
    this.continent = continent;
  }


  public GisFeatureDistance countryCode(String countryCode) {
    this.countryCode = countryCode;
    return this;
  }

  /**
   * The ISO 3166 country code
   * @return countryCode
   */
  @javax.annotation.Nullable
  public String getCountryCode() {
    return countryCode;
  }

  public void setCountryCode(String countryCode) {
    this.countryCode = countryCode;
  }


  public GisFeatureDistance countryFlagUrl(String countryFlagUrl) {
    this.countryFlagUrl = countryFlagUrl;
    return this;
  }

  /**
   * The relative URL to get the country flag image
   * @return countryFlagUrl
   */
  @javax.annotation.Nullable
  public String getCountryFlagUrl() {
    return countryFlagUrl;
  }

  public void setCountryFlagUrl(String countryFlagUrl) {
    this.countryFlagUrl = countryFlagUrl;
  }


  public GisFeatureDistance currencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
    return this;
  }

  /**
   * The Currency code (ISO_4217) of the country
   * @return currencyCode
   */
  @javax.annotation.Nullable
  public String getCurrencyCode() {
    return currencyCode;
  }

  public void setCurrencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
  }


  public GisFeatureDistance currencyName(String currencyName) {
    this.currencyName = currencyName;
    return this;
  }

  /**
   * The Currency name of the country
   * @return currencyName
   */
  @javax.annotation.Nullable
  public String getCurrencyName() {
    return currencyName;
  }

  public void setCurrencyName(String currencyName) {
    this.currencyName = currencyName;
  }


  public GisFeatureDistance distance(Double distance) {
    this.distance = distance;
    return this;
  }

  /**
   * The distance beetween the point and the gisFeature in meters
   * @return distance
   */
  @javax.annotation.Nullable
  public Double getDistance() {
    return distance;
  }

  public void setDistance(Double distance) {
    this.distance = distance;
  }


  public GisFeatureDistance elevation(Integer elevation) {
    this.elevation = elevation;
    return this;
  }

  /**
   * The elevation in meters
   * @return elevation
   */
  @javax.annotation.Nullable
  public Integer getElevation() {
    return elevation;
  }

  public void setElevation(Integer elevation) {
    this.elevation = elevation;
  }


  public GisFeatureDistance equivalentFipsCode(String equivalentFipsCode) {
    this.equivalentFipsCode = equivalentFipsCode;
    return this;
  }

  /**
   * The fips Code of the country when no code are available
   * @return equivalentFipsCode
   */
  @javax.annotation.Nullable
  public String getEquivalentFipsCode() {
    return equivalentFipsCode;
  }

  public void setEquivalentFipsCode(String equivalentFipsCode) {
    this.equivalentFipsCode = equivalentFipsCode;
  }


  public GisFeatureDistance featureClass(String featureClass) {
    this.featureClass = featureClass;
    return this;
  }

  /**
   * The feature Class.
   * @return featureClass
   */
  @javax.annotation.Nullable
  public String getFeatureClass() {
    return featureClass;
  }

  public void setFeatureClass(String featureClass) {
    this.featureClass = featureClass;
  }


  public GisFeatureDistance featureCode(String featureCode) {
    this.featureCode = featureCode;
    return this;
  }

  /**
   * The feature Code.
   * @return featureCode
   */
  @javax.annotation.Nullable
  public String getFeatureCode() {
    return featureCode;
  }

  public void setFeatureCode(String featureCode) {
    this.featureCode = featureCode;
  }


  public GisFeatureDistance featureId(Long featureId) {
    this.featureId = featureId;
    return this;
  }

  /**
   * A unique id that identify the feature
   * @return featureId
   */
  @javax.annotation.Nullable
  public Long getFeatureId() {
    return featureId;
  }

  public void setFeatureId(Long featureId) {
    this.featureId = featureId;
  }


  public GisFeatureDistance fipsCode(String fipsCode) {
    this.fipsCode = fipsCode;
    return this;
  }

  /**
   * The fips Code of the country
   * @return fipsCode
   */
  @javax.annotation.Nullable
  public String getFipsCode() {
    return fipsCode;
  }

  public void setFipsCode(String fipsCode) {
    this.fipsCode = fipsCode;
  }


  public GisFeatureDistance fullyQualifiedAddress(String fullyQualifiedAddress) {
    this.fullyQualifiedAddress = fullyQualifiedAddress;
    return this;
  }

  /**
   * NOT USED YET
   * @return fullyQualifiedAddress
   */
  @javax.annotation.Nullable
  public String getFullyQualifiedAddress() {
    return fullyQualifiedAddress;
  }

  public void setFullyQualifiedAddress(String fullyQualifiedAddress) {
    this.fullyQualifiedAddress = fullyQualifiedAddress;
  }


  public GisFeatureDistance googleMapUrl(String googleMapUrl) {
    this.googleMapUrl = googleMapUrl;
    return this;
  }

  /**
   * The URL to get the location on Google Map
   * @return googleMapUrl
   */
  @javax.annotation.Nullable
  public String getGoogleMapUrl() {
    return googleMapUrl;
  }

  public void setGoogleMapUrl(String googleMapUrl) {
    this.googleMapUrl = googleMapUrl;
  }


  public GisFeatureDistance gtopo30(Integer gtopo30) {
    this.gtopo30 = gtopo30;
    return this;
  }

  /**
   * Average elevation of 30&#39;x30&#39; (ca 900mx900m) area in meters
   * @return gtopo30
   */
  @javax.annotation.Nullable
  public Integer getGtopo30() {
    return gtopo30;
  }

  public void setGtopo30(Integer gtopo30) {
    this.gtopo30 = gtopo30;
  }


  public GisFeatureDistance isIn(String isIn) {
    this.isIn = isIn;
    return this;
  }

  /**
   * Information of the city where the street / POI is (depends on openstreetmap &#39;is_in&#39; field), the city in general (only for placetype street)
   * @return isIn
   */
  @javax.annotation.Nullable
  public String getIsIn() {
    return isIn;
  }

  public void setIsIn(String isIn) {
    this.isIn = isIn;
  }


  public GisFeatureDistance isInAdm(String isInAdm) {
    this.isInAdm = isInAdm;
    return this;
  }

  /**
   * Information of the administration division where the street / POI is. 
   * @return isInAdm
   */
  @javax.annotation.Nullable
  public String getIsInAdm() {
    return isInAdm;
  }

  public void setIsInAdm(String isInAdm) {
    this.isInAdm = isInAdm;
  }


  public GisFeatureDistance isInPlace(String isInPlace) {
    this.isInPlace = isInPlace;
    return this;
  }

  /**
   * Information of the place where the street / POI is (quarter, common place). Generally a place at a lower level than city
   * @return isInPlace
   */
  @javax.annotation.Nullable
  public String getIsInPlace() {
    return isInPlace;
  }

  public void setIsInPlace(String isInPlace) {
    this.isInPlace = isInPlace;
  }


  public GisFeatureDistance isInZip(String isInZip) {
    this.isInZip = isInZip;
    return this;
  }

  /**
   * Information of the zipcode where the street / POI is\&quot;
   * @return isInZip
   */
  @javax.annotation.Nullable
  public String getIsInZip() {
    return isInZip;
  }

  public void setIsInZip(String isInZip) {
    this.isInZip = isInZip;
  }


  public GisFeatureDistance iso3166Alpha2Code(String iso3166Alpha2Code) {
    this.iso3166Alpha2Code = iso3166Alpha2Code;
    return this;
  }

  /**
   * The iso 3166 Alpha 2 code of the country
   * @return iso3166Alpha2Code
   */
  @javax.annotation.Nullable
  public String getIso3166Alpha2Code() {
    return iso3166Alpha2Code;
  }

  public void setIso3166Alpha2Code(String iso3166Alpha2Code) {
    this.iso3166Alpha2Code = iso3166Alpha2Code;
  }


  public GisFeatureDistance iso3166Alpha3Code(String iso3166Alpha3Code) {
    this.iso3166Alpha3Code = iso3166Alpha3Code;
    return this;
  }

  /**
   * The iso 3166 Alpha 3 code of the country
   * @return iso3166Alpha3Code
   */
  @javax.annotation.Nullable
  public String getIso3166Alpha3Code() {
    return iso3166Alpha3Code;
  }

  public void setIso3166Alpha3Code(String iso3166Alpha3Code) {
    this.iso3166Alpha3Code = iso3166Alpha3Code;
  }


  public GisFeatureDistance iso3166NumericCode(String iso3166NumericCode) {
    this.iso3166NumericCode = iso3166NumericCode;
    return this;
  }

  /**
   * The iso 3166 numeric code of the country
   * @return iso3166NumericCode
   */
  @javax.annotation.Nullable
  public String getIso3166NumericCode() {
    return iso3166NumericCode;
  }

  public void setIso3166NumericCode(String iso3166NumericCode) {
    this.iso3166NumericCode = iso3166NumericCode;
  }


  public GisFeatureDistance lat(Double lat) {
    this.lat = lat;
    return this;
  }

  /**
   * The latitude (north-south)
   * @return lat
   */
  @javax.annotation.Nullable
  public Double getLat() {
    return lat;
  }

  public void setLat(Double lat) {
    this.lat = lat;
  }


  public GisFeatureDistance length(Double length) {
    this.length = length;
    return this;
  }

  /**
   * length of the street
   * @return length
   */
  @javax.annotation.Nullable
  public Double getLength() {
    return length;
  }

  public void setLength(Double length) {
    this.length = length;
  }


  public GisFeatureDistance level(Integer level) {
    this.level = level;
    return this;
  }

  /**
   * The level of the Administrative division (1-5)
   * @return level
   */
  @javax.annotation.Nullable
  public Integer getLevel() {
    return level;
  }

  public void setLevel(Integer level) {
    this.level = level;
  }


  public GisFeatureDistance lng(Double lng) {
    this.lng = lng;
    return this;
  }

  /**
   * The longitude (east-West)
   * @return lng
   */
  @javax.annotation.Nullable
  public Double getLng() {
    return lng;
  }

  public void setLng(Double lng) {
    this.lng = lng;
  }


  public GisFeatureDistance name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the feature
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public GisFeatureDistance oneWay(Boolean oneWay) {
    this.oneWay = oneWay;
    return this;
  }

  /**
   * Wether the street is oneway or not
   * @return oneWay
   */
  @javax.annotation.Nullable
  public Boolean getOneWay() {
    return oneWay;
  }

  public void setOneWay(Boolean oneWay) {
    this.oneWay = oneWay;
  }


  public GisFeatureDistance openstreetmapId(Long openstreetmapId) {
    this.openstreetmapId = openstreetmapId;
    return this;
  }

  /**
   * the id of the openstreetmap element
   * @return openstreetmapId
   */
  @javax.annotation.Nullable
  public Long getOpenstreetmapId() {
    return openstreetmapId;
  }

  public void setOpenstreetmapId(Long openstreetmapId) {
    this.openstreetmapId = openstreetmapId;
  }


  public GisFeatureDistance openstreetmapMapUrl(String openstreetmapMapUrl) {
    this.openstreetmapMapUrl = openstreetmapMapUrl;
    return this;
  }

  /**
   * The URL to get the location on Openstreetmap Map
   * @return openstreetmapMapUrl
   */
  @javax.annotation.Nullable
  public String getOpenstreetmapMapUrl() {
    return openstreetmapMapUrl;
  }

  public void setOpenstreetmapMapUrl(String openstreetmapMapUrl) {
    this.openstreetmapMapUrl = openstreetmapMapUrl;
  }


  public GisFeatureDistance phonePrefix(String phonePrefix) {
    this.phonePrefix = phonePrefix;
    return this;
  }

  /**
   * The phone prefix of the country
   * @return phonePrefix
   */
  @javax.annotation.Nullable
  public String getPhonePrefix() {
    return phonePrefix;
  }

  public void setPhonePrefix(String phonePrefix) {
    this.phonePrefix = phonePrefix;
  }


  public GisFeatureDistance placeType(String placeType) {
    this.placeType = placeType;
    return this;
  }

  /**
   * The Type of Feature see faq
   * @return placeType
   */
  @javax.annotation.Nullable
  public String getPlaceType() {
    return placeType;
  }

  public void setPlaceType(String placeType) {
    this.placeType = placeType;
  }


  public GisFeatureDistance population(Integer population) {
    this.population = population;
    return this;
  }

  /**
   * How many people lives in this feature
   * @return population
   */
  @javax.annotation.Nullable
  public Integer getPopulation() {
    return population;
  }

  public void setPopulation(Integer population) {
    this.population = population;
  }


  public GisFeatureDistance postalCodeMask(String postalCodeMask) {
    this.postalCodeMask = postalCodeMask;
    return this;
  }

  /**
   * The mask that all postal code of the country matches
   * @return postalCodeMask
   */
  @javax.annotation.Nullable
  public String getPostalCodeMask() {
    return postalCodeMask;
  }

  public void setPostalCodeMask(String postalCodeMask) {
    this.postalCodeMask = postalCodeMask;
  }


  public GisFeatureDistance postalCodeRegex(String postalCodeRegex) {
    this.postalCodeRegex = postalCodeRegex;
    return this;
  }

  /**
   * The regexp that all zipcode/postalcode of the country matches
   * @return postalCodeRegex
   */
  @javax.annotation.Nullable
  public String getPostalCodeRegex() {
    return postalCodeRegex;
  }

  public void setPostalCodeRegex(String postalCodeRegex) {
    this.postalCodeRegex = postalCodeRegex;
  }


  public GisFeatureDistance streetType(String streetType) {
    this.streetType = streetType;
    return this;
  }

  /**
   * the type of the street
   * @return streetType
   */
  @javax.annotation.Nullable
  public String getStreetType() {
    return streetType;
  }

  public void setStreetType(String streetType) {
    this.streetType = streetType;
  }


  public GisFeatureDistance timezone(String timezone) {
    this.timezone = timezone;
    return this;
  }

  /**
   * The time zone (e.g : Europe/Paris)
   * @return timezone
   */
  @javax.annotation.Nullable
  public String getTimezone() {
    return timezone;
  }

  public void setTimezone(String timezone) {
    this.timezone = timezone;
  }


  public GisFeatureDistance tld(String tld) {
    this.tld = tld;
    return this;
  }

  /**
   * top-level domain name, (last part of an Internet domain name) of the country
   * @return tld
   */
  @javax.annotation.Nullable
  public String getTld() {
    return tld;
  }

  public void setTld(String tld) {
    this.tld = tld;
  }


  public GisFeatureDistance yahooMapUrl(String yahooMapUrl) {
    this.yahooMapUrl = yahooMapUrl;
    return this;
  }

  /**
   * The URL to get the location on Yahoo Map
   * @return yahooMapUrl
   */
  @javax.annotation.Nullable
  public String getYahooMapUrl() {
    return yahooMapUrl;
  }

  public void setYahooMapUrl(String yahooMapUrl) {
    this.yahooMapUrl = yahooMapUrl;
  }


  public GisFeatureDistance zipCodes(List<String> zipCodes) {
    this.zipCodes = zipCodes;
    return this;
  }

  public GisFeatureDistance addZipCodesItem(String zipCodesItem) {
    if (this.zipCodes == null) {
      this.zipCodes = new ArrayList<>();
    }
    this.zipCodes.add(zipCodesItem);
    return this;
  }

  /**
   * The zipcodes (only for city and city subdivision), one node by zipcode
   * @return zipCodes
   */
  @javax.annotation.Nullable
  public List<String> getZipCodes() {
    return zipCodes;
  }

  public void setZipCodes(List<String> zipCodes) {
    this.zipCodes = zipCodes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GisFeatureDistance gisFeatureDistance = (GisFeatureDistance) o;
    return Objects.equals(this.adm1Code, gisFeatureDistance.adm1Code) &&
        Objects.equals(this.adm1Name, gisFeatureDistance.adm1Name) &&
        Objects.equals(this.adm2Code, gisFeatureDistance.adm2Code) &&
        Objects.equals(this.adm2Name, gisFeatureDistance.adm2Name) &&
        Objects.equals(this.adm3Code, gisFeatureDistance.adm3Code) &&
        Objects.equals(this.adm3Name, gisFeatureDistance.adm3Name) &&
        Objects.equals(this.adm4Code, gisFeatureDistance.adm4Code) &&
        Objects.equals(this.adm4Name, gisFeatureDistance.adm4Name) &&
        Objects.equals(this.adm5Code, gisFeatureDistance.adm5Code) &&
        Objects.equals(this.adm5Name, gisFeatureDistance.adm5Name) &&
        Objects.equals(this.amenity, gisFeatureDistance.amenity) &&
        Objects.equals(this.area, gisFeatureDistance.area) &&
        Objects.equals(this.asciiName, gisFeatureDistance.asciiName) &&
        Objects.equals(this.capitalName, gisFeatureDistance.capitalName) &&
        Objects.equals(this.continent, gisFeatureDistance.continent) &&
        Objects.equals(this.countryCode, gisFeatureDistance.countryCode) &&
        Objects.equals(this.countryFlagUrl, gisFeatureDistance.countryFlagUrl) &&
        Objects.equals(this.currencyCode, gisFeatureDistance.currencyCode) &&
        Objects.equals(this.currencyName, gisFeatureDistance.currencyName) &&
        Objects.equals(this.distance, gisFeatureDistance.distance) &&
        Objects.equals(this.elevation, gisFeatureDistance.elevation) &&
        Objects.equals(this.equivalentFipsCode, gisFeatureDistance.equivalentFipsCode) &&
        Objects.equals(this.featureClass, gisFeatureDistance.featureClass) &&
        Objects.equals(this.featureCode, gisFeatureDistance.featureCode) &&
        Objects.equals(this.featureId, gisFeatureDistance.featureId) &&
        Objects.equals(this.fipsCode, gisFeatureDistance.fipsCode) &&
        Objects.equals(this.fullyQualifiedAddress, gisFeatureDistance.fullyQualifiedAddress) &&
        Objects.equals(this.googleMapUrl, gisFeatureDistance.googleMapUrl) &&
        Objects.equals(this.gtopo30, gisFeatureDistance.gtopo30) &&
        Objects.equals(this.isIn, gisFeatureDistance.isIn) &&
        Objects.equals(this.isInAdm, gisFeatureDistance.isInAdm) &&
        Objects.equals(this.isInPlace, gisFeatureDistance.isInPlace) &&
        Objects.equals(this.isInZip, gisFeatureDistance.isInZip) &&
        Objects.equals(this.iso3166Alpha2Code, gisFeatureDistance.iso3166Alpha2Code) &&
        Objects.equals(this.iso3166Alpha3Code, gisFeatureDistance.iso3166Alpha3Code) &&
        Objects.equals(this.iso3166NumericCode, gisFeatureDistance.iso3166NumericCode) &&
        Objects.equals(this.lat, gisFeatureDistance.lat) &&
        Objects.equals(this.length, gisFeatureDistance.length) &&
        Objects.equals(this.level, gisFeatureDistance.level) &&
        Objects.equals(this.lng, gisFeatureDistance.lng) &&
        Objects.equals(this.name, gisFeatureDistance.name) &&
        Objects.equals(this.oneWay, gisFeatureDistance.oneWay) &&
        Objects.equals(this.openstreetmapId, gisFeatureDistance.openstreetmapId) &&
        Objects.equals(this.openstreetmapMapUrl, gisFeatureDistance.openstreetmapMapUrl) &&
        Objects.equals(this.phonePrefix, gisFeatureDistance.phonePrefix) &&
        Objects.equals(this.placeType, gisFeatureDistance.placeType) &&
        Objects.equals(this.population, gisFeatureDistance.population) &&
        Objects.equals(this.postalCodeMask, gisFeatureDistance.postalCodeMask) &&
        Objects.equals(this.postalCodeRegex, gisFeatureDistance.postalCodeRegex) &&
        Objects.equals(this.streetType, gisFeatureDistance.streetType) &&
        Objects.equals(this.timezone, gisFeatureDistance.timezone) &&
        Objects.equals(this.tld, gisFeatureDistance.tld) &&
        Objects.equals(this.yahooMapUrl, gisFeatureDistance.yahooMapUrl) &&
        Objects.equals(this.zipCodes, gisFeatureDistance.zipCodes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(adm1Code, adm1Name, adm2Code, adm2Name, adm3Code, adm3Name, adm4Code, adm4Name, adm5Code, adm5Name, amenity, area, asciiName, capitalName, continent, countryCode, countryFlagUrl, currencyCode, currencyName, distance, elevation, equivalentFipsCode, featureClass, featureCode, featureId, fipsCode, fullyQualifiedAddress, googleMapUrl, gtopo30, isIn, isInAdm, isInPlace, isInZip, iso3166Alpha2Code, iso3166Alpha3Code, iso3166NumericCode, lat, length, level, lng, name, oneWay, openstreetmapId, openstreetmapMapUrl, phonePrefix, placeType, population, postalCodeMask, postalCodeRegex, streetType, timezone, tld, yahooMapUrl, zipCodes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GisFeatureDistance {\n");
    sb.append("    adm1Code: ").append(toIndentedString(adm1Code)).append("\n");
    sb.append("    adm1Name: ").append(toIndentedString(adm1Name)).append("\n");
    sb.append("    adm2Code: ").append(toIndentedString(adm2Code)).append("\n");
    sb.append("    adm2Name: ").append(toIndentedString(adm2Name)).append("\n");
    sb.append("    adm3Code: ").append(toIndentedString(adm3Code)).append("\n");
    sb.append("    adm3Name: ").append(toIndentedString(adm3Name)).append("\n");
    sb.append("    adm4Code: ").append(toIndentedString(adm4Code)).append("\n");
    sb.append("    adm4Name: ").append(toIndentedString(adm4Name)).append("\n");
    sb.append("    adm5Code: ").append(toIndentedString(adm5Code)).append("\n");
    sb.append("    adm5Name: ").append(toIndentedString(adm5Name)).append("\n");
    sb.append("    amenity: ").append(toIndentedString(amenity)).append("\n");
    sb.append("    area: ").append(toIndentedString(area)).append("\n");
    sb.append("    asciiName: ").append(toIndentedString(asciiName)).append("\n");
    sb.append("    capitalName: ").append(toIndentedString(capitalName)).append("\n");
    sb.append("    continent: ").append(toIndentedString(continent)).append("\n");
    sb.append("    countryCode: ").append(toIndentedString(countryCode)).append("\n");
    sb.append("    countryFlagUrl: ").append(toIndentedString(countryFlagUrl)).append("\n");
    sb.append("    currencyCode: ").append(toIndentedString(currencyCode)).append("\n");
    sb.append("    currencyName: ").append(toIndentedString(currencyName)).append("\n");
    sb.append("    distance: ").append(toIndentedString(distance)).append("\n");
    sb.append("    elevation: ").append(toIndentedString(elevation)).append("\n");
    sb.append("    equivalentFipsCode: ").append(toIndentedString(equivalentFipsCode)).append("\n");
    sb.append("    featureClass: ").append(toIndentedString(featureClass)).append("\n");
    sb.append("    featureCode: ").append(toIndentedString(featureCode)).append("\n");
    sb.append("    featureId: ").append(toIndentedString(featureId)).append("\n");
    sb.append("    fipsCode: ").append(toIndentedString(fipsCode)).append("\n");
    sb.append("    fullyQualifiedAddress: ").append(toIndentedString(fullyQualifiedAddress)).append("\n");
    sb.append("    googleMapUrl: ").append(toIndentedString(googleMapUrl)).append("\n");
    sb.append("    gtopo30: ").append(toIndentedString(gtopo30)).append("\n");
    sb.append("    isIn: ").append(toIndentedString(isIn)).append("\n");
    sb.append("    isInAdm: ").append(toIndentedString(isInAdm)).append("\n");
    sb.append("    isInPlace: ").append(toIndentedString(isInPlace)).append("\n");
    sb.append("    isInZip: ").append(toIndentedString(isInZip)).append("\n");
    sb.append("    iso3166Alpha2Code: ").append(toIndentedString(iso3166Alpha2Code)).append("\n");
    sb.append("    iso3166Alpha3Code: ").append(toIndentedString(iso3166Alpha3Code)).append("\n");
    sb.append("    iso3166NumericCode: ").append(toIndentedString(iso3166NumericCode)).append("\n");
    sb.append("    lat: ").append(toIndentedString(lat)).append("\n");
    sb.append("    length: ").append(toIndentedString(length)).append("\n");
    sb.append("    level: ").append(toIndentedString(level)).append("\n");
    sb.append("    lng: ").append(toIndentedString(lng)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    oneWay: ").append(toIndentedString(oneWay)).append("\n");
    sb.append("    openstreetmapId: ").append(toIndentedString(openstreetmapId)).append("\n");
    sb.append("    openstreetmapMapUrl: ").append(toIndentedString(openstreetmapMapUrl)).append("\n");
    sb.append("    phonePrefix: ").append(toIndentedString(phonePrefix)).append("\n");
    sb.append("    placeType: ").append(toIndentedString(placeType)).append("\n");
    sb.append("    population: ").append(toIndentedString(population)).append("\n");
    sb.append("    postalCodeMask: ").append(toIndentedString(postalCodeMask)).append("\n");
    sb.append("    postalCodeRegex: ").append(toIndentedString(postalCodeRegex)).append("\n");
    sb.append("    streetType: ").append(toIndentedString(streetType)).append("\n");
    sb.append("    timezone: ").append(toIndentedString(timezone)).append("\n");
    sb.append("    tld: ").append(toIndentedString(tld)).append("\n");
    sb.append("    yahooMapUrl: ").append(toIndentedString(yahooMapUrl)).append("\n");
    sb.append("    zipCodes: ").append(toIndentedString(zipCodes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("adm1Code");
    openapiFields.add("adm1Name");
    openapiFields.add("adm2Code");
    openapiFields.add("adm2Name");
    openapiFields.add("adm3Code");
    openapiFields.add("adm3Name");
    openapiFields.add("adm4Code");
    openapiFields.add("adm4Name");
    openapiFields.add("adm5Code");
    openapiFields.add("adm5Name");
    openapiFields.add("amenity");
    openapiFields.add("area");
    openapiFields.add("asciiName");
    openapiFields.add("capitalName");
    openapiFields.add("continent");
    openapiFields.add("countryCode");
    openapiFields.add("country_flag_url");
    openapiFields.add("currencyCode");
    openapiFields.add("currencyName");
    openapiFields.add("distance");
    openapiFields.add("elevation");
    openapiFields.add("equivalentFipsCode");
    openapiFields.add("featureClass");
    openapiFields.add("featureCode");
    openapiFields.add("featureId");
    openapiFields.add("fipsCode");
    openapiFields.add("fullyQualifiedAddress");
    openapiFields.add("google_map_url");
    openapiFields.add("gtopo30");
    openapiFields.add("isIn");
    openapiFields.add("isInAdm");
    openapiFields.add("isInPlace");
    openapiFields.add("isInZip");
    openapiFields.add("iso3166Alpha2Code");
    openapiFields.add("iso3166Alpha3Code");
    openapiFields.add("iso3166NumericCode");
    openapiFields.add("lat");
    openapiFields.add("length");
    openapiFields.add("level");
    openapiFields.add("lng");
    openapiFields.add("name");
    openapiFields.add("oneWay");
    openapiFields.add("openstreetmapId");
    openapiFields.add("openstreetmap_map_url");
    openapiFields.add("phonePrefix");
    openapiFields.add("placeType");
    openapiFields.add("population");
    openapiFields.add("postalCodeMask");
    openapiFields.add("postalCodeRegex");
    openapiFields.add("streetType");
    openapiFields.add("timezone");
    openapiFields.add("tld");
    openapiFields.add("yahoo_map_url");
    openapiFields.add("zipCodes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GisFeatureDistance
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GisFeatureDistance.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GisFeatureDistance is not found in the empty JSON string", GisFeatureDistance.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GisFeatureDistance.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GisFeatureDistance` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("adm1Code") != null && !jsonObj.get("adm1Code").isJsonNull()) && !jsonObj.get("adm1Code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `adm1Code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("adm1Code").toString()));
      }
      if ((jsonObj.get("adm1Name") != null && !jsonObj.get("adm1Name").isJsonNull()) && !jsonObj.get("adm1Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `adm1Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("adm1Name").toString()));
      }
      if ((jsonObj.get("adm2Code") != null && !jsonObj.get("adm2Code").isJsonNull()) && !jsonObj.get("adm2Code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `adm2Code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("adm2Code").toString()));
      }
      if ((jsonObj.get("adm2Name") != null && !jsonObj.get("adm2Name").isJsonNull()) && !jsonObj.get("adm2Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `adm2Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("adm2Name").toString()));
      }
      if ((jsonObj.get("adm3Code") != null && !jsonObj.get("adm3Code").isJsonNull()) && !jsonObj.get("adm3Code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `adm3Code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("adm3Code").toString()));
      }
      if ((jsonObj.get("adm3Name") != null && !jsonObj.get("adm3Name").isJsonNull()) && !jsonObj.get("adm3Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `adm3Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("adm3Name").toString()));
      }
      if ((jsonObj.get("adm4Code") != null && !jsonObj.get("adm4Code").isJsonNull()) && !jsonObj.get("adm4Code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `adm4Code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("adm4Code").toString()));
      }
      if ((jsonObj.get("adm4Name") != null && !jsonObj.get("adm4Name").isJsonNull()) && !jsonObj.get("adm4Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `adm4Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("adm4Name").toString()));
      }
      if ((jsonObj.get("adm5Code") != null && !jsonObj.get("adm5Code").isJsonNull()) && !jsonObj.get("adm5Code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `adm5Code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("adm5Code").toString()));
      }
      if ((jsonObj.get("adm5Name") != null && !jsonObj.get("adm5Name").isJsonNull()) && !jsonObj.get("adm5Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `adm5Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("adm5Name").toString()));
      }
      if ((jsonObj.get("amenity") != null && !jsonObj.get("amenity").isJsonNull()) && !jsonObj.get("amenity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `amenity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("amenity").toString()));
      }
      if ((jsonObj.get("asciiName") != null && !jsonObj.get("asciiName").isJsonNull()) && !jsonObj.get("asciiName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `asciiName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("asciiName").toString()));
      }
      if ((jsonObj.get("capitalName") != null && !jsonObj.get("capitalName").isJsonNull()) && !jsonObj.get("capitalName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `capitalName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("capitalName").toString()));
      }
      if ((jsonObj.get("continent") != null && !jsonObj.get("continent").isJsonNull()) && !jsonObj.get("continent").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `continent` to be a primitive type in the JSON string but got `%s`", jsonObj.get("continent").toString()));
      }
      if ((jsonObj.get("countryCode") != null && !jsonObj.get("countryCode").isJsonNull()) && !jsonObj.get("countryCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `countryCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("countryCode").toString()));
      }
      if ((jsonObj.get("country_flag_url") != null && !jsonObj.get("country_flag_url").isJsonNull()) && !jsonObj.get("country_flag_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `country_flag_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("country_flag_url").toString()));
      }
      if ((jsonObj.get("currencyCode") != null && !jsonObj.get("currencyCode").isJsonNull()) && !jsonObj.get("currencyCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currencyCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currencyCode").toString()));
      }
      if ((jsonObj.get("currencyName") != null && !jsonObj.get("currencyName").isJsonNull()) && !jsonObj.get("currencyName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currencyName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currencyName").toString()));
      }
      if ((jsonObj.get("equivalentFipsCode") != null && !jsonObj.get("equivalentFipsCode").isJsonNull()) && !jsonObj.get("equivalentFipsCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `equivalentFipsCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("equivalentFipsCode").toString()));
      }
      if ((jsonObj.get("featureClass") != null && !jsonObj.get("featureClass").isJsonNull()) && !jsonObj.get("featureClass").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `featureClass` to be a primitive type in the JSON string but got `%s`", jsonObj.get("featureClass").toString()));
      }
      if ((jsonObj.get("featureCode") != null && !jsonObj.get("featureCode").isJsonNull()) && !jsonObj.get("featureCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `featureCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("featureCode").toString()));
      }
      if ((jsonObj.get("fipsCode") != null && !jsonObj.get("fipsCode").isJsonNull()) && !jsonObj.get("fipsCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fipsCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fipsCode").toString()));
      }
      if ((jsonObj.get("fullyQualifiedAddress") != null && !jsonObj.get("fullyQualifiedAddress").isJsonNull()) && !jsonObj.get("fullyQualifiedAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fullyQualifiedAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fullyQualifiedAddress").toString()));
      }
      if ((jsonObj.get("google_map_url") != null && !jsonObj.get("google_map_url").isJsonNull()) && !jsonObj.get("google_map_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `google_map_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("google_map_url").toString()));
      }
      if ((jsonObj.get("isIn") != null && !jsonObj.get("isIn").isJsonNull()) && !jsonObj.get("isIn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `isIn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("isIn").toString()));
      }
      if ((jsonObj.get("isInAdm") != null && !jsonObj.get("isInAdm").isJsonNull()) && !jsonObj.get("isInAdm").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `isInAdm` to be a primitive type in the JSON string but got `%s`", jsonObj.get("isInAdm").toString()));
      }
      if ((jsonObj.get("isInPlace") != null && !jsonObj.get("isInPlace").isJsonNull()) && !jsonObj.get("isInPlace").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `isInPlace` to be a primitive type in the JSON string but got `%s`", jsonObj.get("isInPlace").toString()));
      }
      if ((jsonObj.get("isInZip") != null && !jsonObj.get("isInZip").isJsonNull()) && !jsonObj.get("isInZip").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `isInZip` to be a primitive type in the JSON string but got `%s`", jsonObj.get("isInZip").toString()));
      }
      if ((jsonObj.get("iso3166Alpha2Code") != null && !jsonObj.get("iso3166Alpha2Code").isJsonNull()) && !jsonObj.get("iso3166Alpha2Code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `iso3166Alpha2Code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("iso3166Alpha2Code").toString()));
      }
      if ((jsonObj.get("iso3166Alpha3Code") != null && !jsonObj.get("iso3166Alpha3Code").isJsonNull()) && !jsonObj.get("iso3166Alpha3Code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `iso3166Alpha3Code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("iso3166Alpha3Code").toString()));
      }
      if ((jsonObj.get("iso3166NumericCode") != null && !jsonObj.get("iso3166NumericCode").isJsonNull()) && !jsonObj.get("iso3166NumericCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `iso3166NumericCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("iso3166NumericCode").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("openstreetmap_map_url") != null && !jsonObj.get("openstreetmap_map_url").isJsonNull()) && !jsonObj.get("openstreetmap_map_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `openstreetmap_map_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("openstreetmap_map_url").toString()));
      }
      if ((jsonObj.get("phonePrefix") != null && !jsonObj.get("phonePrefix").isJsonNull()) && !jsonObj.get("phonePrefix").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `phonePrefix` to be a primitive type in the JSON string but got `%s`", jsonObj.get("phonePrefix").toString()));
      }
      if ((jsonObj.get("placeType") != null && !jsonObj.get("placeType").isJsonNull()) && !jsonObj.get("placeType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `placeType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("placeType").toString()));
      }
      if ((jsonObj.get("postalCodeMask") != null && !jsonObj.get("postalCodeMask").isJsonNull()) && !jsonObj.get("postalCodeMask").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `postalCodeMask` to be a primitive type in the JSON string but got `%s`", jsonObj.get("postalCodeMask").toString()));
      }
      if ((jsonObj.get("postalCodeRegex") != null && !jsonObj.get("postalCodeRegex").isJsonNull()) && !jsonObj.get("postalCodeRegex").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `postalCodeRegex` to be a primitive type in the JSON string but got `%s`", jsonObj.get("postalCodeRegex").toString()));
      }
      if ((jsonObj.get("streetType") != null && !jsonObj.get("streetType").isJsonNull()) && !jsonObj.get("streetType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `streetType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("streetType").toString()));
      }
      if ((jsonObj.get("timezone") != null && !jsonObj.get("timezone").isJsonNull()) && !jsonObj.get("timezone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timezone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timezone").toString()));
      }
      if ((jsonObj.get("tld") != null && !jsonObj.get("tld").isJsonNull()) && !jsonObj.get("tld").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tld` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tld").toString()));
      }
      if ((jsonObj.get("yahoo_map_url") != null && !jsonObj.get("yahoo_map_url").isJsonNull()) && !jsonObj.get("yahoo_map_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `yahoo_map_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("yahoo_map_url").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("zipCodes") != null && !jsonObj.get("zipCodes").isJsonNull() && !jsonObj.get("zipCodes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `zipCodes` to be an array in the JSON string but got `%s`", jsonObj.get("zipCodes").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GisFeatureDistance.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GisFeatureDistance' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GisFeatureDistance> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GisFeatureDistance.class));

       return (TypeAdapter<T>) new TypeAdapter<GisFeatureDistance>() {
           @Override
           public void write(JsonWriter out, GisFeatureDistance value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GisFeatureDistance read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GisFeatureDistance given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GisFeatureDistance
   * @throws IOException if the JSON string is invalid with respect to GisFeatureDistance
   */
  public static GisFeatureDistance fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GisFeatureDistance.class);
  }

  /**
   * Convert an instance of GisFeatureDistance to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

