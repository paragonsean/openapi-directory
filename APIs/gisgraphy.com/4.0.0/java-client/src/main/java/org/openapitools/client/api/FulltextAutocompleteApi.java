/*
 * Gisgraphy webservices
 * Since 2006, [Gisgraphy](http://www.gisgraphy.com) is a free, open source framework that offers the possibility to do geolocalisation and geocoding via Java APIs or REST webservices. Because geocoding is nothing without data, it provides an easy to use importer that will automatically download and import the necessary (free) data to your local database ([OpenStreetMap](http://www.openstreetmap.org/), [Geonames](http://www.geonames.org/) and [Quattroshapes](http://www.quattroshapes.com/): more than 100 million entries). You can also add your own data with the Web interface or the importer connectors provided. Gisgraphy is production ready, and has been designed to be scalable(load balanced), performant and used in other languages than just java : results can be output in XML, JSON, PHP, Python, Ruby, YAML, GeoRSS, and Atom. One of the most popular GPS tracking System (OpenGTS) also includes a Gisgraphy client...Gisgraphy is a framework. As a result it's flexible and powerful enough to be used in a lot of different use cases. [read more](http://www.gisgraphy.com)   if you use the premium servers, you can use the api key to test the webservices 
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.FulltextResultsDto;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class FulltextAutocompleteApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public FulltextAutocompleteApi() {
        this(Configuration.getDefaultApiClient());
    }

    public FulltextAutocompleteApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for fulltxtsearch
     * @param q The searched text : The text for the query can be a zip code, a string or one or more strings (required)
     * @param allwordsrequired Whether the fulltext engine should considers all the words specified as required. Defaults to false (since v 4.0). possible values are true|false (or &#39;on&#39; when used with the rest service) (required)
     * @param spellchecking The spellchecking (optional) : whether some suggestions should be provided if no results are found (optional)
     * @param lat The latitude (north-south) for the location point to search around. The value is a floating number, between -90 and +90. It uses GPS coordinates (optional)
     * @param lng TThe longitude (east-West) for the location point to search around. The value is a floating number between -180 and +180. It uses GPS coordinates. (optional)
     * @param radius distance from the location point in meters we&#39;d like to search around. The value is a number &gt; 0 if it is not specify or incorrect. (optional, default to 10000.0)
     * @param suggest If this parameter is set then it will search in part of the names of the street, place,.... It allow you to do auto completion auto suggestion. See the Gisgraphy leaflet plugin for more details. The JSON format will be forced if this parameter is true. See auto completion / suggestions engine for more details (optional, default to false)
     * @param style The output style verbosity (optional) : Determines the output verbosity. 4 styles are available (optional, default to MEDIUM)
     * @param country limit the search to the specified ISO 3166 country code. Default : search in all countries (optional)
     * @param lang The language code (optional) : The iso 639 Alpha2 or alpha3 Language Code. Some properties such as the AlternateName AdmNames and countryname belong to a certain language code. The language parameter can limit the output of those fields to a certain language (it only apply when style parameter&#x3D;&#39;style&#39;) : If the language code does not exists or is not specified, properties with all the languages are retrieved If it exists, the properties with the specified language code, are retrieved (optional)
     * @param format The output format. (optional, default to XML)
     * @param from The first pagination index. Numbered from 1. If the number is &lt; 1 or not specified, it will be set to the default value : 1 (optional, default to 1)
     * @param to The last pagination index. if &lt; 1 or not specified, it will be set to startindex + 10. Max &#x3D; 10 (can be changed) (optional, default to 10)
     * @param paramCallback The callback method name (optional), use to wrap the content into a (alphanumeric) Javascript method. Works only for script output formats (JSON, PHP, Ruby, Python) (optional)
     * @param indent indents the results.Default to false. Possible values are true or false (or on when used with the rest service. If you use a checkbox in a web form, to indent the results, the value will be &#39;on&#39; or &#39;off&#39;, so for a simple use : the value of indent can be &#39;true&#39; or &#39;on&#39; (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Sucessfully processed </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Need auth. The API key parameter is missing or wrong, or doesn&#39;t correspond to any subscriptions </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unhauthorize (auth will change nothing).Your IP is not allowed. </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Missing parameter. Some parameters required for the webservices ar missing, please consult documentation </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests. You exceed the authorized rate </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fulltxtsearchCall(String q, Boolean allwordsrequired, String spellchecking, Double lat, Double lng, Double radius, Boolean suggest, String style, String country, String lang, String format, Integer from, Integer to, String paramCallback, Boolean indent, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/fulltext/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (allwordsrequired != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("allwordsrequired", allwordsrequired));
        }

        if (spellchecking != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("spellchecking", spellchecking));
        }

        if (lat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lat", lat));
        }

        if (lng != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lng", lng));
        }

        if (radius != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("radius", radius));
        }

        if (suggest != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("suggest", suggest));
        }

        if (style != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("style", style));
        }

        if (country != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("country", country));
        }

        if (lang != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lang", lang));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (to != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("to", to));
        }

        if (paramCallback != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("callback", paramCallback));
        }

        if (indent != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("indent", indent));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "application/php",
            "application/ruby",
            "application/yaml",
            "application/python",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fulltxtsearchValidateBeforeCall(String q, Boolean allwordsrequired, String spellchecking, Double lat, Double lng, Double radius, Boolean suggest, String style, String country, String lang, String format, Integer from, Integer to, String paramCallback, Boolean indent, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'q' is set
        if (q == null) {
            throw new ApiException("Missing the required parameter 'q' when calling fulltxtsearch(Async)");
        }

        // verify the required parameter 'allwordsrequired' is set
        if (allwordsrequired == null) {
            throw new ApiException("Missing the required parameter 'allwordsrequired' when calling fulltxtsearch(Async)");
        }

        return fulltxtsearchCall(q, allwordsrequired, spellchecking, lat, lng, radius, suggest, style, country, lang, format, from, to, paramCallback, indent, _callback);

    }

    /**
     * search for places by text around a GPS point
     * The full text service allows you to search for features / places / street and do autocompletion . you can : Specify one or more words search on part of the name (auto completion / suggestion) Search for text or zip code Specify a GPS restriction (promote nearest, not sorted but has an impact on the score), Limit the results to a specific Language, Country, place type, Paginate the results, Specify the output verbosity, Tells if you want the output to be indented, Tells that all words are required or not, The search is case insensitive, use synonyms (Saint/st, ..), separator characters stripping, ...
     * @param q The searched text : The text for the query can be a zip code, a string or one or more strings (required)
     * @param allwordsrequired Whether the fulltext engine should considers all the words specified as required. Defaults to false (since v 4.0). possible values are true|false (or &#39;on&#39; when used with the rest service) (required)
     * @param spellchecking The spellchecking (optional) : whether some suggestions should be provided if no results are found (optional)
     * @param lat The latitude (north-south) for the location point to search around. The value is a floating number, between -90 and +90. It uses GPS coordinates (optional)
     * @param lng TThe longitude (east-West) for the location point to search around. The value is a floating number between -180 and +180. It uses GPS coordinates. (optional)
     * @param radius distance from the location point in meters we&#39;d like to search around. The value is a number &gt; 0 if it is not specify or incorrect. (optional, default to 10000.0)
     * @param suggest If this parameter is set then it will search in part of the names of the street, place,.... It allow you to do auto completion auto suggestion. See the Gisgraphy leaflet plugin for more details. The JSON format will be forced if this parameter is true. See auto completion / suggestions engine for more details (optional, default to false)
     * @param style The output style verbosity (optional) : Determines the output verbosity. 4 styles are available (optional, default to MEDIUM)
     * @param country limit the search to the specified ISO 3166 country code. Default : search in all countries (optional)
     * @param lang The language code (optional) : The iso 639 Alpha2 or alpha3 Language Code. Some properties such as the AlternateName AdmNames and countryname belong to a certain language code. The language parameter can limit the output of those fields to a certain language (it only apply when style parameter&#x3D;&#39;style&#39;) : If the language code does not exists or is not specified, properties with all the languages are retrieved If it exists, the properties with the specified language code, are retrieved (optional)
     * @param format The output format. (optional, default to XML)
     * @param from The first pagination index. Numbered from 1. If the number is &lt; 1 or not specified, it will be set to the default value : 1 (optional, default to 1)
     * @param to The last pagination index. if &lt; 1 or not specified, it will be set to startindex + 10. Max &#x3D; 10 (can be changed) (optional, default to 10)
     * @param paramCallback The callback method name (optional), use to wrap the content into a (alphanumeric) Javascript method. Works only for script output formats (JSON, PHP, Ruby, Python) (optional)
     * @param indent indents the results.Default to false. Possible values are true or false (or on when used with the rest service. If you use a checkbox in a web form, to indent the results, the value will be &#39;on&#39; or &#39;off&#39;, so for a simple use : the value of indent can be &#39;true&#39; or &#39;on&#39; (optional, default to false)
     * @return FulltextResultsDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Sucessfully processed </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Need auth. The API key parameter is missing or wrong, or doesn&#39;t correspond to any subscriptions </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unhauthorize (auth will change nothing).Your IP is not allowed. </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Missing parameter. Some parameters required for the webservices ar missing, please consult documentation </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests. You exceed the authorized rate </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error </td><td>  -  </td></tr>
     </table>
     */
    public FulltextResultsDto fulltxtsearch(String q, Boolean allwordsrequired, String spellchecking, Double lat, Double lng, Double radius, Boolean suggest, String style, String country, String lang, String format, Integer from, Integer to, String paramCallback, Boolean indent) throws ApiException {
        ApiResponse<FulltextResultsDto> localVarResp = fulltxtsearchWithHttpInfo(q, allwordsrequired, spellchecking, lat, lng, radius, suggest, style, country, lang, format, from, to, paramCallback, indent);
        return localVarResp.getData();
    }

    /**
     * search for places by text around a GPS point
     * The full text service allows you to search for features / places / street and do autocompletion . you can : Specify one or more words search on part of the name (auto completion / suggestion) Search for text or zip code Specify a GPS restriction (promote nearest, not sorted but has an impact on the score), Limit the results to a specific Language, Country, place type, Paginate the results, Specify the output verbosity, Tells if you want the output to be indented, Tells that all words are required or not, The search is case insensitive, use synonyms (Saint/st, ..), separator characters stripping, ...
     * @param q The searched text : The text for the query can be a zip code, a string or one or more strings (required)
     * @param allwordsrequired Whether the fulltext engine should considers all the words specified as required. Defaults to false (since v 4.0). possible values are true|false (or &#39;on&#39; when used with the rest service) (required)
     * @param spellchecking The spellchecking (optional) : whether some suggestions should be provided if no results are found (optional)
     * @param lat The latitude (north-south) for the location point to search around. The value is a floating number, between -90 and +90. It uses GPS coordinates (optional)
     * @param lng TThe longitude (east-West) for the location point to search around. The value is a floating number between -180 and +180. It uses GPS coordinates. (optional)
     * @param radius distance from the location point in meters we&#39;d like to search around. The value is a number &gt; 0 if it is not specify or incorrect. (optional, default to 10000.0)
     * @param suggest If this parameter is set then it will search in part of the names of the street, place,.... It allow you to do auto completion auto suggestion. See the Gisgraphy leaflet plugin for more details. The JSON format will be forced if this parameter is true. See auto completion / suggestions engine for more details (optional, default to false)
     * @param style The output style verbosity (optional) : Determines the output verbosity. 4 styles are available (optional, default to MEDIUM)
     * @param country limit the search to the specified ISO 3166 country code. Default : search in all countries (optional)
     * @param lang The language code (optional) : The iso 639 Alpha2 or alpha3 Language Code. Some properties such as the AlternateName AdmNames and countryname belong to a certain language code. The language parameter can limit the output of those fields to a certain language (it only apply when style parameter&#x3D;&#39;style&#39;) : If the language code does not exists or is not specified, properties with all the languages are retrieved If it exists, the properties with the specified language code, are retrieved (optional)
     * @param format The output format. (optional, default to XML)
     * @param from The first pagination index. Numbered from 1. If the number is &lt; 1 or not specified, it will be set to the default value : 1 (optional, default to 1)
     * @param to The last pagination index. if &lt; 1 or not specified, it will be set to startindex + 10. Max &#x3D; 10 (can be changed) (optional, default to 10)
     * @param paramCallback The callback method name (optional), use to wrap the content into a (alphanumeric) Javascript method. Works only for script output formats (JSON, PHP, Ruby, Python) (optional)
     * @param indent indents the results.Default to false. Possible values are true or false (or on when used with the rest service. If you use a checkbox in a web form, to indent the results, the value will be &#39;on&#39; or &#39;off&#39;, so for a simple use : the value of indent can be &#39;true&#39; or &#39;on&#39; (optional, default to false)
     * @return ApiResponse&lt;FulltextResultsDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Sucessfully processed </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Need auth. The API key parameter is missing or wrong, or doesn&#39;t correspond to any subscriptions </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unhauthorize (auth will change nothing).Your IP is not allowed. </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Missing parameter. Some parameters required for the webservices ar missing, please consult documentation </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests. You exceed the authorized rate </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FulltextResultsDto> fulltxtsearchWithHttpInfo(String q, Boolean allwordsrequired, String spellchecking, Double lat, Double lng, Double radius, Boolean suggest, String style, String country, String lang, String format, Integer from, Integer to, String paramCallback, Boolean indent) throws ApiException {
        okhttp3.Call localVarCall = fulltxtsearchValidateBeforeCall(q, allwordsrequired, spellchecking, lat, lng, radius, suggest, style, country, lang, format, from, to, paramCallback, indent, null);
        Type localVarReturnType = new TypeToken<FulltextResultsDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * search for places by text around a GPS point (asynchronously)
     * The full text service allows you to search for features / places / street and do autocompletion . you can : Specify one or more words search on part of the name (auto completion / suggestion) Search for text or zip code Specify a GPS restriction (promote nearest, not sorted but has an impact on the score), Limit the results to a specific Language, Country, place type, Paginate the results, Specify the output verbosity, Tells if you want the output to be indented, Tells that all words are required or not, The search is case insensitive, use synonyms (Saint/st, ..), separator characters stripping, ...
     * @param q The searched text : The text for the query can be a zip code, a string or one or more strings (required)
     * @param allwordsrequired Whether the fulltext engine should considers all the words specified as required. Defaults to false (since v 4.0). possible values are true|false (or &#39;on&#39; when used with the rest service) (required)
     * @param spellchecking The spellchecking (optional) : whether some suggestions should be provided if no results are found (optional)
     * @param lat The latitude (north-south) for the location point to search around. The value is a floating number, between -90 and +90. It uses GPS coordinates (optional)
     * @param lng TThe longitude (east-West) for the location point to search around. The value is a floating number between -180 and +180. It uses GPS coordinates. (optional)
     * @param radius distance from the location point in meters we&#39;d like to search around. The value is a number &gt; 0 if it is not specify or incorrect. (optional, default to 10000.0)
     * @param suggest If this parameter is set then it will search in part of the names of the street, place,.... It allow you to do auto completion auto suggestion. See the Gisgraphy leaflet plugin for more details. The JSON format will be forced if this parameter is true. See auto completion / suggestions engine for more details (optional, default to false)
     * @param style The output style verbosity (optional) : Determines the output verbosity. 4 styles are available (optional, default to MEDIUM)
     * @param country limit the search to the specified ISO 3166 country code. Default : search in all countries (optional)
     * @param lang The language code (optional) : The iso 639 Alpha2 or alpha3 Language Code. Some properties such as the AlternateName AdmNames and countryname belong to a certain language code. The language parameter can limit the output of those fields to a certain language (it only apply when style parameter&#x3D;&#39;style&#39;) : If the language code does not exists or is not specified, properties with all the languages are retrieved If it exists, the properties with the specified language code, are retrieved (optional)
     * @param format The output format. (optional, default to XML)
     * @param from The first pagination index. Numbered from 1. If the number is &lt; 1 or not specified, it will be set to the default value : 1 (optional, default to 1)
     * @param to The last pagination index. if &lt; 1 or not specified, it will be set to startindex + 10. Max &#x3D; 10 (can be changed) (optional, default to 10)
     * @param paramCallback The callback method name (optional), use to wrap the content into a (alphanumeric) Javascript method. Works only for script output formats (JSON, PHP, Ruby, Python) (optional)
     * @param indent indents the results.Default to false. Possible values are true or false (or on when used with the rest service. If you use a checkbox in a web form, to indent the results, the value will be &#39;on&#39; or &#39;off&#39;, so for a simple use : the value of indent can be &#39;true&#39; or &#39;on&#39; (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Sucessfully processed </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Need auth. The API key parameter is missing or wrong, or doesn&#39;t correspond to any subscriptions </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unhauthorize (auth will change nothing).Your IP is not allowed. </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Missing parameter. Some parameters required for the webservices ar missing, please consult documentation </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests. You exceed the authorized rate </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fulltxtsearchAsync(String q, Boolean allwordsrequired, String spellchecking, Double lat, Double lng, Double radius, Boolean suggest, String style, String country, String lang, String format, Integer from, Integer to, String paramCallback, Boolean indent, final ApiCallback<FulltextResultsDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = fulltxtsearchValidateBeforeCall(q, allwordsrequired, spellchecking, lat, lng, radius, suggest, style, country, lang, format, from, to, paramCallback, indent, _callback);
        Type localVarReturnType = new TypeToken<FulltextResultsDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
