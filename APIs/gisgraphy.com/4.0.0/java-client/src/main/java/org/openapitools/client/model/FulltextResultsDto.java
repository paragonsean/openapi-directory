/*
 * Gisgraphy webservices
 * Since 2006, [Gisgraphy](http://www.gisgraphy.com) is a free, open source framework that offers the possibility to do geolocalisation and geocoding via Java APIs or REST webservices. Because geocoding is nothing without data, it provides an easy to use importer that will automatically download and import the necessary (free) data to your local database ([OpenStreetMap](http://www.openstreetmap.org/), [Geonames](http://www.geonames.org/) and [Quattroshapes](http://www.quattroshapes.com/): more than 100 million entries). You can also add your own data with the Web interface or the importer connectors provided. Gisgraphy is production ready, and has been designed to be scalable(load balanced), performant and used in other languages than just java : results can be output in XML, JSON, PHP, Python, Ruby, YAML, GeoRSS, and Atom. One of the most popular GPS tracking System (OpenGTS) also includes a Gisgraphy client...Gisgraphy is a framework. As a result it's flexible and powerful enough to be used in a lot of different use cases. [read more](http://www.gisgraphy.com)   if you use the premium servers, you can use the api key to test the webservices 
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.SolrResponseDto;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * FulltextResultsDto
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:27:52.231698-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class FulltextResultsDto {
  public static final String SERIALIZED_NAME_QTIME = "QTime";
  @SerializedName(SERIALIZED_NAME_QTIME)
  private Long qtime;

  public static final String SERIALIZED_NAME_MAX_SCORE = "maxScore";
  @SerializedName(SERIALIZED_NAME_MAX_SCORE)
  private Float maxScore;

  public static final String SERIALIZED_NAME_MESSAGE = "message";
  @SerializedName(SERIALIZED_NAME_MESSAGE)
  private String message;

  public static final String SERIALIZED_NAME_NUM_FOUND = "numFound";
  @SerializedName(SERIALIZED_NAME_NUM_FOUND)
  private Integer numFound;

  public static final String SERIALIZED_NAME_RESULT = "result";
  @SerializedName(SERIALIZED_NAME_RESULT)
  private List<SolrResponseDto> result = new ArrayList<>();

  public static final String SERIALIZED_NAME_RESULTS_SIZE = "resultsSize";
  @SerializedName(SERIALIZED_NAME_RESULTS_SIZE)
  private Integer resultsSize;

  public FulltextResultsDto() {
  }

  public FulltextResultsDto qtime(Long qtime) {
    this.qtime = qtime;
    return this;
  }

  /**
   * how long the query took
   * @return qtime
   */
  @javax.annotation.Nullable
  public Long getQtime() {
    return qtime;
  }

  public void setQtime(Long qtime) {
    this.qtime = qtime;
  }


  public FulltextResultsDto maxScore(Float maxScore) {
    this.maxScore = maxScore;
    return this;
  }

  /**
   * the max score value accross all the results found
   * @return maxScore
   */
  @javax.annotation.Nullable
  public Float getMaxScore() {
    return maxScore;
  }

  public void setMaxScore(Float maxScore) {
    this.maxScore = maxScore;
  }


  public FulltextResultsDto message(String message) {
    this.message = message;
    return this;
  }

  /**
   * a message
   * @return message
   */
  @javax.annotation.Nullable
  public String getMessage() {
    return message;
  }

  public void setMessage(String message) {
    this.message = message;
  }


  public FulltextResultsDto numFound(Integer numFound) {
    this.numFound = numFound;
    return this;
  }

  /**
   * how many results were found whatever the pagination
   * @return numFound
   */
  @javax.annotation.Nullable
  public Integer getNumFound() {
    return numFound;
  }

  public void setNumFound(Integer numFound) {
    this.numFound = numFound;
  }


  public FulltextResultsDto result(List<SolrResponseDto> result) {
    this.result = result;
    return this;
  }

  public FulltextResultsDto addResultItem(SolrResponseDto resultItem) {
    if (this.result == null) {
      this.result = new ArrayList<>();
    }
    this.result.add(resultItem);
    return this;
  }

  /**
   * Get result
   * @return result
   */
  @javax.annotation.Nullable
  public List<SolrResponseDto> getResult() {
    return result;
  }

  public void setResult(List<SolrResponseDto> result) {
    this.result = result;
  }


  public FulltextResultsDto resultsSize(Integer resultsSize) {
    this.resultsSize = resultsSize;
    return this;
  }

  /**
   * how many results are return
   * @return resultsSize
   */
  @javax.annotation.Nullable
  public Integer getResultsSize() {
    return resultsSize;
  }

  public void setResultsSize(Integer resultsSize) {
    this.resultsSize = resultsSize;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FulltextResultsDto fulltextResultsDto = (FulltextResultsDto) o;
    return Objects.equals(this.qtime, fulltextResultsDto.qtime) &&
        Objects.equals(this.maxScore, fulltextResultsDto.maxScore) &&
        Objects.equals(this.message, fulltextResultsDto.message) &&
        Objects.equals(this.numFound, fulltextResultsDto.numFound) &&
        Objects.equals(this.result, fulltextResultsDto.result) &&
        Objects.equals(this.resultsSize, fulltextResultsDto.resultsSize);
  }

  @Override
  public int hashCode() {
    return Objects.hash(qtime, maxScore, message, numFound, result, resultsSize);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FulltextResultsDto {\n");
    sb.append("    qtime: ").append(toIndentedString(qtime)).append("\n");
    sb.append("    maxScore: ").append(toIndentedString(maxScore)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    numFound: ").append(toIndentedString(numFound)).append("\n");
    sb.append("    result: ").append(toIndentedString(result)).append("\n");
    sb.append("    resultsSize: ").append(toIndentedString(resultsSize)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("QTime");
    openapiFields.add("maxScore");
    openapiFields.add("message");
    openapiFields.add("numFound");
    openapiFields.add("result");
    openapiFields.add("resultsSize");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to FulltextResultsDto
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FulltextResultsDto.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FulltextResultsDto is not found in the empty JSON string", FulltextResultsDto.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FulltextResultsDto.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FulltextResultsDto` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("message") != null && !jsonObj.get("message").isJsonNull()) && !jsonObj.get("message").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `message` to be a primitive type in the JSON string but got `%s`", jsonObj.get("message").toString()));
      }
      if (jsonObj.get("result") != null && !jsonObj.get("result").isJsonNull()) {
        JsonArray jsonArrayresult = jsonObj.getAsJsonArray("result");
        if (jsonArrayresult != null) {
          // ensure the json data is an array
          if (!jsonObj.get("result").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `result` to be an array in the JSON string but got `%s`", jsonObj.get("result").toString()));
          }

          // validate the optional field `result` (array)
          for (int i = 0; i < jsonArrayresult.size(); i++) {
            SolrResponseDto.validateJsonElement(jsonArrayresult.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FulltextResultsDto.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FulltextResultsDto' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FulltextResultsDto> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FulltextResultsDto.class));

       return (TypeAdapter<T>) new TypeAdapter<FulltextResultsDto>() {
           @Override
           public void write(JsonWriter out, FulltextResultsDto value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FulltextResultsDto read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of FulltextResultsDto given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FulltextResultsDto
   * @throws IOException if the JSON string is invalid with respect to FulltextResultsDto
   */
  public static FulltextResultsDto fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FulltextResultsDto.class);
  }

  /**
   * Convert an instance of FulltextResultsDto to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

