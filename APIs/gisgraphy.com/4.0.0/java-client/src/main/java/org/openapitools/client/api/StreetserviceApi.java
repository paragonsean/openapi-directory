/*
 * Gisgraphy webservices
 * Since 2006, [Gisgraphy](http://www.gisgraphy.com) is a free, open source framework that offers the possibility to do geolocalisation and geocoding via Java APIs or REST webservices. Because geocoding is nothing without data, it provides an easy to use importer that will automatically download and import the necessary (free) data to your local database ([OpenStreetMap](http://www.openstreetmap.org/), [Geonames](http://www.geonames.org/) and [Quattroshapes](http://www.quattroshapes.com/): more than 100 million entries). You can also add your own data with the Web interface or the importer connectors provided. Gisgraphy is production ready, and has been designed to be scalable(load balanced), performant and used in other languages than just java : results can be output in XML, JSON, PHP, Python, Ruby, YAML, GeoRSS, and Atom. One of the most popular GPS tracking System (OpenGTS) also includes a Gisgraphy client...Gisgraphy is a framework. As a result it's flexible and powerful enough to be used in a lot of different use cases. [read more](http://www.gisgraphy.com)   if you use the premium servers, you can use the api key to test the webservices 
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.StreetSearchResultsDto;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class StreetserviceApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public StreetserviceApi() {
        this(Configuration.getDefaultApiClient());
    }

    public StreetserviceApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for streetsearch
     * @param lat The latitude (north-south) for the location point to search around. The value is a floating number, between -90 and +90. It uses GPS coordinates (required)
     * @param lng TThe longitude (east-West) for the location point to search around. The value is a floating number between -180 and +180. It uses GPS coordinates. (required)
     * @param radius distance from the location point in meters we&#39;d like to search around. The value is a number &gt; 0 if it is not specify or incorrect. (optional, default to 10000.0)
     * @param oneway whether the street should be a oneWay street (optional) : limit the search to the street that are one way street. If you use a checkbox in a form to indent the results, the value will be &#39;on&#39; or &#39;off&#39;, so to simplify the use : the value for the web service can be &#39;true&#39; or &#39;on&#39; (optional, default to false)
     * @param distance Whether (or not) we want the distance field to be output. This option is useful to improve the performance if we don&#39;t care about the distance (e.g : we search for name). Of course, the results won&#39;t be sorted by distance. If you use a checkbox in a form to indent the results, the value will be &#39;on&#39; or &#39;off&#39;, so to simplify the use : the value for the web service can be &#39;true&#39; or &#39;on&#39; (optional, default to true)
     * @param streettype filter search with a stret type (optional)
     * @param format The output format. (optional, default to XML)
     * @param from The first pagination index. Numbered from 1. If the number is &lt; 1 or not specified, it will be set to the default value : 1 (optional, default to 1)
     * @param to The last pagination index. if &lt; 1 or not specified, it will be set to startindex + 10. Max &#x3D; 10 (can be changed) (optional, default to 10)
     * @param paramCallback The callback method name (optional), use to wrap the content into a (alphanumeric) Javascript method. Works only for script output formats (JSON, PHP, Ruby, Python) (optional)
     * @param indent indents the results. Possible values are true or false (or on when used with the rest service. If you use a checkbox in a web form, to indent the results, the value will be &#39;on&#39; or &#39;off&#39;, so for a simple use : the value of indent can be &#39;true&#39; or &#39;on&#39; (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Sucessfully processed </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Need auth. The API key parameter is missing or wrong, or doesn&#39;t correspond to any subscriptions </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unhauthorize (auth will change nothing).Your IP is not allowed. </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Missing parameter. Some parameters required for the webservices ar missing, please consult documentation </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests. You exceed the authorized rate </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call streetsearchCall(Double lat, Double lng, Double radius, Boolean oneway, Boolean distance, String streettype, String format, Integer from, Integer to, String paramCallback, Boolean indent, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/street/find";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (lat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lat", lat));
        }

        if (lng != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lng", lng));
        }

        if (radius != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("radius", radius));
        }

        if (oneway != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oneway", oneway));
        }

        if (distance != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("distance", distance));
        }

        if (streettype != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("streettype", streettype));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (to != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("to", to));
        }

        if (paramCallback != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("callback", paramCallback));
        }

        if (indent != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("indent", indent));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "application/php",
            "application/ruby",
            "application/yaml",
            "application/python",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call streetsearchValidateBeforeCall(Double lat, Double lng, Double radius, Boolean oneway, Boolean distance, String streettype, String format, Integer from, Integer to, String paramCallback, Boolean indent, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'lat' is set
        if (lat == null) {
            throw new ApiException("Missing the required parameter 'lat' when calling streetsearch(Async)");
        }

        // verify the required parameter 'lng' is set
        if (lng == null) {
            throw new ApiException("Missing the required parameter 'lng' when calling streetsearch(Async)");
        }

        return streetsearchCall(lat, lng, radius, oneway, distance, streettype, format, from, to, paramCallback, indent, _callback);

    }

    /**
     * Geocode an address
     * The street service allows you to search for street by GPS position. You can : Specify GPS position, Give the beginning or a part of the name of the street (useful for autocompletion), Limit search to a specific type (e.g : Pedestrian, highway, residential, ... 25 types available), Limit search to a specified radius, Limit search to one way streets,
     * @param lat The latitude (north-south) for the location point to search around. The value is a floating number, between -90 and +90. It uses GPS coordinates (required)
     * @param lng TThe longitude (east-West) for the location point to search around. The value is a floating number between -180 and +180. It uses GPS coordinates. (required)
     * @param radius distance from the location point in meters we&#39;d like to search around. The value is a number &gt; 0 if it is not specify or incorrect. (optional, default to 10000.0)
     * @param oneway whether the street should be a oneWay street (optional) : limit the search to the street that are one way street. If you use a checkbox in a form to indent the results, the value will be &#39;on&#39; or &#39;off&#39;, so to simplify the use : the value for the web service can be &#39;true&#39; or &#39;on&#39; (optional, default to false)
     * @param distance Whether (or not) we want the distance field to be output. This option is useful to improve the performance if we don&#39;t care about the distance (e.g : we search for name). Of course, the results won&#39;t be sorted by distance. If you use a checkbox in a form to indent the results, the value will be &#39;on&#39; or &#39;off&#39;, so to simplify the use : the value for the web service can be &#39;true&#39; or &#39;on&#39; (optional, default to true)
     * @param streettype filter search with a stret type (optional)
     * @param format The output format. (optional, default to XML)
     * @param from The first pagination index. Numbered from 1. If the number is &lt; 1 or not specified, it will be set to the default value : 1 (optional, default to 1)
     * @param to The last pagination index. if &lt; 1 or not specified, it will be set to startindex + 10. Max &#x3D; 10 (can be changed) (optional, default to 10)
     * @param paramCallback The callback method name (optional), use to wrap the content into a (alphanumeric) Javascript method. Works only for script output formats (JSON, PHP, Ruby, Python) (optional)
     * @param indent indents the results. Possible values are true or false (or on when used with the rest service. If you use a checkbox in a web form, to indent the results, the value will be &#39;on&#39; or &#39;off&#39;, so for a simple use : the value of indent can be &#39;true&#39; or &#39;on&#39; (optional, default to false)
     * @return StreetSearchResultsDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Sucessfully processed </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Need auth. The API key parameter is missing or wrong, or doesn&#39;t correspond to any subscriptions </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unhauthorize (auth will change nothing).Your IP is not allowed. </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Missing parameter. Some parameters required for the webservices ar missing, please consult documentation </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests. You exceed the authorized rate </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error </td><td>  -  </td></tr>
     </table>
     */
    public StreetSearchResultsDto streetsearch(Double lat, Double lng, Double radius, Boolean oneway, Boolean distance, String streettype, String format, Integer from, Integer to, String paramCallback, Boolean indent) throws ApiException {
        ApiResponse<StreetSearchResultsDto> localVarResp = streetsearchWithHttpInfo(lat, lng, radius, oneway, distance, streettype, format, from, to, paramCallback, indent);
        return localVarResp.getData();
    }

    /**
     * Geocode an address
     * The street service allows you to search for street by GPS position. You can : Specify GPS position, Give the beginning or a part of the name of the street (useful for autocompletion), Limit search to a specific type (e.g : Pedestrian, highway, residential, ... 25 types available), Limit search to a specified radius, Limit search to one way streets,
     * @param lat The latitude (north-south) for the location point to search around. The value is a floating number, between -90 and +90. It uses GPS coordinates (required)
     * @param lng TThe longitude (east-West) for the location point to search around. The value is a floating number between -180 and +180. It uses GPS coordinates. (required)
     * @param radius distance from the location point in meters we&#39;d like to search around. The value is a number &gt; 0 if it is not specify or incorrect. (optional, default to 10000.0)
     * @param oneway whether the street should be a oneWay street (optional) : limit the search to the street that are one way street. If you use a checkbox in a form to indent the results, the value will be &#39;on&#39; or &#39;off&#39;, so to simplify the use : the value for the web service can be &#39;true&#39; or &#39;on&#39; (optional, default to false)
     * @param distance Whether (or not) we want the distance field to be output. This option is useful to improve the performance if we don&#39;t care about the distance (e.g : we search for name). Of course, the results won&#39;t be sorted by distance. If you use a checkbox in a form to indent the results, the value will be &#39;on&#39; or &#39;off&#39;, so to simplify the use : the value for the web service can be &#39;true&#39; or &#39;on&#39; (optional, default to true)
     * @param streettype filter search with a stret type (optional)
     * @param format The output format. (optional, default to XML)
     * @param from The first pagination index. Numbered from 1. If the number is &lt; 1 or not specified, it will be set to the default value : 1 (optional, default to 1)
     * @param to The last pagination index. if &lt; 1 or not specified, it will be set to startindex + 10. Max &#x3D; 10 (can be changed) (optional, default to 10)
     * @param paramCallback The callback method name (optional), use to wrap the content into a (alphanumeric) Javascript method. Works only for script output formats (JSON, PHP, Ruby, Python) (optional)
     * @param indent indents the results. Possible values are true or false (or on when used with the rest service. If you use a checkbox in a web form, to indent the results, the value will be &#39;on&#39; or &#39;off&#39;, so for a simple use : the value of indent can be &#39;true&#39; or &#39;on&#39; (optional, default to false)
     * @return ApiResponse&lt;StreetSearchResultsDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Sucessfully processed </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Need auth. The API key parameter is missing or wrong, or doesn&#39;t correspond to any subscriptions </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unhauthorize (auth will change nothing).Your IP is not allowed. </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Missing parameter. Some parameters required for the webservices ar missing, please consult documentation </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests. You exceed the authorized rate </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StreetSearchResultsDto> streetsearchWithHttpInfo(Double lat, Double lng, Double radius, Boolean oneway, Boolean distance, String streettype, String format, Integer from, Integer to, String paramCallback, Boolean indent) throws ApiException {
        okhttp3.Call localVarCall = streetsearchValidateBeforeCall(lat, lng, radius, oneway, distance, streettype, format, from, to, paramCallback, indent, null);
        Type localVarReturnType = new TypeToken<StreetSearchResultsDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Geocode an address (asynchronously)
     * The street service allows you to search for street by GPS position. You can : Specify GPS position, Give the beginning or a part of the name of the street (useful for autocompletion), Limit search to a specific type (e.g : Pedestrian, highway, residential, ... 25 types available), Limit search to a specified radius, Limit search to one way streets,
     * @param lat The latitude (north-south) for the location point to search around. The value is a floating number, between -90 and +90. It uses GPS coordinates (required)
     * @param lng TThe longitude (east-West) for the location point to search around. The value is a floating number between -180 and +180. It uses GPS coordinates. (required)
     * @param radius distance from the location point in meters we&#39;d like to search around. The value is a number &gt; 0 if it is not specify or incorrect. (optional, default to 10000.0)
     * @param oneway whether the street should be a oneWay street (optional) : limit the search to the street that are one way street. If you use a checkbox in a form to indent the results, the value will be &#39;on&#39; or &#39;off&#39;, so to simplify the use : the value for the web service can be &#39;true&#39; or &#39;on&#39; (optional, default to false)
     * @param distance Whether (or not) we want the distance field to be output. This option is useful to improve the performance if we don&#39;t care about the distance (e.g : we search for name). Of course, the results won&#39;t be sorted by distance. If you use a checkbox in a form to indent the results, the value will be &#39;on&#39; or &#39;off&#39;, so to simplify the use : the value for the web service can be &#39;true&#39; or &#39;on&#39; (optional, default to true)
     * @param streettype filter search with a stret type (optional)
     * @param format The output format. (optional, default to XML)
     * @param from The first pagination index. Numbered from 1. If the number is &lt; 1 or not specified, it will be set to the default value : 1 (optional, default to 1)
     * @param to The last pagination index. if &lt; 1 or not specified, it will be set to startindex + 10. Max &#x3D; 10 (can be changed) (optional, default to 10)
     * @param paramCallback The callback method name (optional), use to wrap the content into a (alphanumeric) Javascript method. Works only for script output formats (JSON, PHP, Ruby, Python) (optional)
     * @param indent indents the results. Possible values are true or false (or on when used with the rest service. If you use a checkbox in a web form, to indent the results, the value will be &#39;on&#39; or &#39;off&#39;, so for a simple use : the value of indent can be &#39;true&#39; or &#39;on&#39; (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Sucessfully processed </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Need auth. The API key parameter is missing or wrong, or doesn&#39;t correspond to any subscriptions </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unhauthorize (auth will change nothing).Your IP is not allowed. </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Missing parameter. Some parameters required for the webservices ar missing, please consult documentation </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests. You exceed the authorized rate </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call streetsearchAsync(Double lat, Double lng, Double radius, Boolean oneway, Boolean distance, String streettype, String format, Integer from, Integer to, String paramCallback, Boolean indent, final ApiCallback<StreetSearchResultsDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = streetsearchValidateBeforeCall(lat, lng, radius, oneway, distance, streettype, format, from, to, paramCallback, indent, _callback);
        Type localVarReturnType = new TypeToken<StreetSearchResultsDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
