/*
 * Gisgraphy webservices
 * Since 2006, [Gisgraphy](http://www.gisgraphy.com) is a free, open source framework that offers the possibility to do geolocalisation and geocoding via Java APIs or REST webservices. Because geocoding is nothing without data, it provides an easy to use importer that will automatically download and import the necessary (free) data to your local database ([OpenStreetMap](http://www.openstreetmap.org/), [Geonames](http://www.geonames.org/) and [Quattroshapes](http://www.quattroshapes.com/): more than 100 million entries). You can also add your own data with the Web interface or the importer connectors provided. Gisgraphy is production ready, and has been designed to be scalable(load balanced), performant and used in other languages than just java : results can be output in XML, JSON, PHP, Python, Ruby, YAML, GeoRSS, and Atom. One of the most popular GPS tracking System (OpenGTS) also includes a Gisgraphy client...Gisgraphy is a framework. As a result it's flexible and powerful enough to be used in a lot of different use cases. [read more](http://www.gisgraphy.com)   if you use the premium servers, you can use the api key to test the webservices 
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * StreetDistance
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:27:52.231698-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class StreetDistance {
  public static final String SERIALIZED_NAME_COUNTRY_CODE = "countryCode";
  @SerializedName(SERIALIZED_NAME_COUNTRY_CODE)
  private String countryCode;

  public static final String SERIALIZED_NAME_DISTANCE = "distance";
  @SerializedName(SERIALIZED_NAME_DISTANCE)
  private BigDecimal distance;

  public static final String SERIALIZED_NAME_FULLY_QUALIFIED_ADDRESS = "fullyQualifiedAddress";
  @SerializedName(SERIALIZED_NAME_FULLY_QUALIFIED_ADDRESS)
  private String fullyQualifiedAddress;

  public static final String SERIALIZED_NAME_GID = "gid";
  @SerializedName(SERIALIZED_NAME_GID)
  private Long gid;

  public static final String SERIALIZED_NAME_IS_IN = "isIn";
  @SerializedName(SERIALIZED_NAME_IS_IN)
  private String isIn;

  public static final String SERIALIZED_NAME_IS_IN_ADM = "isInAdm";
  @SerializedName(SERIALIZED_NAME_IS_IN_ADM)
  private String isInAdm;

  public static final String SERIALIZED_NAME_IS_IN_PLACE = "isInPlace";
  @SerializedName(SERIALIZED_NAME_IS_IN_PLACE)
  private String isInPlace;

  public static final String SERIALIZED_NAME_IS_IN_ZIP = "isInZip";
  @SerializedName(SERIALIZED_NAME_IS_IN_ZIP)
  private String isInZip;

  public static final String SERIALIZED_NAME_LAT = "lat";
  @SerializedName(SERIALIZED_NAME_LAT)
  private Double lat;

  public static final String SERIALIZED_NAME_LENGTH = "length";
  @SerializedName(SERIALIZED_NAME_LENGTH)
  private Double length;

  public static final String SERIALIZED_NAME_LNG = "lng";
  @SerializedName(SERIALIZED_NAME_LNG)
  private Double lng;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_ONE_WAY = "oneWay";
  @SerializedName(SERIALIZED_NAME_ONE_WAY)
  private Boolean oneWay;

  public static final String SERIALIZED_NAME_OPENSTREETMAP_ID = "openstreetmapId";
  @SerializedName(SERIALIZED_NAME_OPENSTREETMAP_ID)
  private Long openstreetmapId;

  public static final String SERIALIZED_NAME_STREET_TYPE = "streetType";
  @SerializedName(SERIALIZED_NAME_STREET_TYPE)
  private String streetType;

  public StreetDistance() {
  }

  public StreetDistance countryCode(String countryCode) {
    this.countryCode = countryCode;
    return this;
  }

  /**
   * The ISO 3166 country code
   * @return countryCode
   */
  @javax.annotation.Nullable
  public String getCountryCode() {
    return countryCode;
  }

  public void setCountryCode(String countryCode) {
    this.countryCode = countryCode;
  }


  public StreetDistance distance(BigDecimal distance) {
    this.distance = distance;
    return this;
  }

  /**
   * The distance between the point and the nearest point to the street in meters
   * @return distance
   */
  @javax.annotation.Nullable
  public BigDecimal getDistance() {
    return distance;
  }

  public void setDistance(BigDecimal distance) {
    this.distance = distance;
  }


  public StreetDistance fullyQualifiedAddress(String fullyQualifiedAddress) {
    this.fullyQualifiedAddress = fullyQualifiedAddress;
    return this;
  }

  /**
   * NOT USED YET
   * @return fullyQualifiedAddress
   */
  @javax.annotation.Nullable
  public String getFullyQualifiedAddress() {
    return fullyQualifiedAddress;
  }

  public void setFullyQualifiedAddress(String fullyQualifiedAddress) {
    this.fullyQualifiedAddress = fullyQualifiedAddress;
  }


  public StreetDistance gid(Long gid) {
    this.gid = gid;
    return this;
  }

  /**
   * Unique id of the street, it is unique between GeoNames and OpenStreetMap
   * @return gid
   */
  @javax.annotation.Nullable
  public Long getGid() {
    return gid;
  }

  public void setGid(Long gid) {
    this.gid = gid;
  }


  public StreetDistance isIn(String isIn) {
    this.isIn = isIn;
    return this;
  }

  /**
   * Information on the city where the street is (depends on OpenStreetMap &#39;is_in&#39; field), the city in general
   * @return isIn
   */
  @javax.annotation.Nullable
  public String getIsIn() {
    return isIn;
  }

  public void setIsIn(String isIn) {
    this.isIn = isIn;
  }


  public StreetDistance isInAdm(String isInAdm) {
    this.isInAdm = isInAdm;
    return this;
  }

  /**
   * Information of the administration division where the street is.
   * @return isInAdm
   */
  @javax.annotation.Nullable
  public String getIsInAdm() {
    return isInAdm;
  }

  public void setIsInAdm(String isInAdm) {
    this.isInAdm = isInAdm;
  }


  public StreetDistance isInPlace(String isInPlace) {
    this.isInPlace = isInPlace;
    return this;
  }

  /**
   * Information on the place where the street is (quater, common place). Generally a place at a lower level than city
   * @return isInPlace
   */
  @javax.annotation.Nullable
  public String getIsInPlace() {
    return isInPlace;
  }

  public void setIsInPlace(String isInPlace) {
    this.isInPlace = isInPlace;
  }


  public StreetDistance isInZip(String isInZip) {
    this.isInZip = isInZip;
    return this;
  }

  /**
   * Information of the zipcode where the street / POI is (often fill for placetype street)
   * @return isInZip
   */
  @javax.annotation.Nullable
  public String getIsInZip() {
    return isInZip;
  }

  public void setIsInZip(String isInZip) {
    this.isInZip = isInZip;
  }


  public StreetDistance lat(Double lat) {
    this.lat = lat;
    return this;
  }

  /**
   * The latitude of the middle of the street(north-south)
   * @return lat
   */
  @javax.annotation.Nullable
  public Double getLat() {
    return lat;
  }

  public void setLat(Double lat) {
    this.lat = lat;
  }


  public StreetDistance length(Double length) {
    this.length = length;
    return this;
  }

  /**
   * length of the street in meters
   * @return length
   */
  @javax.annotation.Nullable
  public Double getLength() {
    return length;
  }

  public void setLength(Double length) {
    this.length = length;
  }


  public StreetDistance lng(Double lng) {
    this.lng = lng;
    return this;
  }

  /**
   * The longitude of the middle of the street(east-west)
   * @return lng
   */
  @javax.annotation.Nullable
  public Double getLng() {
    return lng;
  }

  public void setLng(Double lng) {
    this.lng = lng;
  }


  public StreetDistance name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the street
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public StreetDistance oneWay(Boolean oneWay) {
    this.oneWay = oneWay;
    return this;
  }

  /**
   * Whether the street is a one way street or not
   * @return oneWay
   */
  @javax.annotation.Nullable
  public Boolean getOneWay() {
    return oneWay;
  }

  public void setOneWay(Boolean oneWay) {
    this.oneWay = oneWay;
  }


  public StreetDistance openstreetmapId(Long openstreetmapId) {
    this.openstreetmapId = openstreetmapId;
    return this;
  }

  /**
   * OpenStreetMap unique id of the street
   * @return openstreetmapId
   */
  @javax.annotation.Nullable
  public Long getOpenstreetmapId() {
    return openstreetmapId;
  }

  public void setOpenstreetmapId(Long openstreetmapId) {
    this.openstreetmapId = openstreetmapId;
  }


  public StreetDistance streetType(String streetType) {
    this.streetType = streetType;
    return this;
  }

  /**
   * The type of the street (see street type list)
   * @return streetType
   */
  @javax.annotation.Nullable
  public String getStreetType() {
    return streetType;
  }

  public void setStreetType(String streetType) {
    this.streetType = streetType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StreetDistance streetDistance = (StreetDistance) o;
    return Objects.equals(this.countryCode, streetDistance.countryCode) &&
        Objects.equals(this.distance, streetDistance.distance) &&
        Objects.equals(this.fullyQualifiedAddress, streetDistance.fullyQualifiedAddress) &&
        Objects.equals(this.gid, streetDistance.gid) &&
        Objects.equals(this.isIn, streetDistance.isIn) &&
        Objects.equals(this.isInAdm, streetDistance.isInAdm) &&
        Objects.equals(this.isInPlace, streetDistance.isInPlace) &&
        Objects.equals(this.isInZip, streetDistance.isInZip) &&
        Objects.equals(this.lat, streetDistance.lat) &&
        Objects.equals(this.length, streetDistance.length) &&
        Objects.equals(this.lng, streetDistance.lng) &&
        Objects.equals(this.name, streetDistance.name) &&
        Objects.equals(this.oneWay, streetDistance.oneWay) &&
        Objects.equals(this.openstreetmapId, streetDistance.openstreetmapId) &&
        Objects.equals(this.streetType, streetDistance.streetType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(countryCode, distance, fullyQualifiedAddress, gid, isIn, isInAdm, isInPlace, isInZip, lat, length, lng, name, oneWay, openstreetmapId, streetType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StreetDistance {\n");
    sb.append("    countryCode: ").append(toIndentedString(countryCode)).append("\n");
    sb.append("    distance: ").append(toIndentedString(distance)).append("\n");
    sb.append("    fullyQualifiedAddress: ").append(toIndentedString(fullyQualifiedAddress)).append("\n");
    sb.append("    gid: ").append(toIndentedString(gid)).append("\n");
    sb.append("    isIn: ").append(toIndentedString(isIn)).append("\n");
    sb.append("    isInAdm: ").append(toIndentedString(isInAdm)).append("\n");
    sb.append("    isInPlace: ").append(toIndentedString(isInPlace)).append("\n");
    sb.append("    isInZip: ").append(toIndentedString(isInZip)).append("\n");
    sb.append("    lat: ").append(toIndentedString(lat)).append("\n");
    sb.append("    length: ").append(toIndentedString(length)).append("\n");
    sb.append("    lng: ").append(toIndentedString(lng)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    oneWay: ").append(toIndentedString(oneWay)).append("\n");
    sb.append("    openstreetmapId: ").append(toIndentedString(openstreetmapId)).append("\n");
    sb.append("    streetType: ").append(toIndentedString(streetType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("countryCode");
    openapiFields.add("distance");
    openapiFields.add("fullyQualifiedAddress");
    openapiFields.add("gid");
    openapiFields.add("isIn");
    openapiFields.add("isInAdm");
    openapiFields.add("isInPlace");
    openapiFields.add("isInZip");
    openapiFields.add("lat");
    openapiFields.add("length");
    openapiFields.add("lng");
    openapiFields.add("name");
    openapiFields.add("oneWay");
    openapiFields.add("openstreetmapId");
    openapiFields.add("streetType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to StreetDistance
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!StreetDistance.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StreetDistance is not found in the empty JSON string", StreetDistance.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!StreetDistance.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `StreetDistance` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("countryCode") != null && !jsonObj.get("countryCode").isJsonNull()) && !jsonObj.get("countryCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `countryCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("countryCode").toString()));
      }
      if ((jsonObj.get("fullyQualifiedAddress") != null && !jsonObj.get("fullyQualifiedAddress").isJsonNull()) && !jsonObj.get("fullyQualifiedAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fullyQualifiedAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fullyQualifiedAddress").toString()));
      }
      if ((jsonObj.get("isIn") != null && !jsonObj.get("isIn").isJsonNull()) && !jsonObj.get("isIn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `isIn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("isIn").toString()));
      }
      if ((jsonObj.get("isInAdm") != null && !jsonObj.get("isInAdm").isJsonNull()) && !jsonObj.get("isInAdm").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `isInAdm` to be a primitive type in the JSON string but got `%s`", jsonObj.get("isInAdm").toString()));
      }
      if ((jsonObj.get("isInPlace") != null && !jsonObj.get("isInPlace").isJsonNull()) && !jsonObj.get("isInPlace").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `isInPlace` to be a primitive type in the JSON string but got `%s`", jsonObj.get("isInPlace").toString()));
      }
      if ((jsonObj.get("isInZip") != null && !jsonObj.get("isInZip").isJsonNull()) && !jsonObj.get("isInZip").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `isInZip` to be a primitive type in the JSON string but got `%s`", jsonObj.get("isInZip").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("streetType") != null && !jsonObj.get("streetType").isJsonNull()) && !jsonObj.get("streetType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `streetType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("streetType").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StreetDistance.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StreetDistance' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StreetDistance> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StreetDistance.class));

       return (TypeAdapter<T>) new TypeAdapter<StreetDistance>() {
           @Override
           public void write(JsonWriter out, StreetDistance value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public StreetDistance read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of StreetDistance given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of StreetDistance
   * @throws IOException if the JSON string is invalid with respect to StreetDistance
   */
  public static StreetDistance fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StreetDistance.class);
  }

  /**
   * Convert an instance of StreetDistance to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

