/**
 * Gisgraphy webservices
 * Since 2006, [Gisgraphy](http://www.gisgraphy.com) is a free, open source framework that offers the possibility to do geolocalisation and geocoding via Java APIs or REST webservices. Because geocoding is nothing without data, it provides an easy to use importer that will automatically download and import the necessary (free) data to your local database ([OpenStreetMap](http://www.openstreetmap.org/), [Geonames](http://www.geonames.org/) and [Quattroshapes](http://www.quattroshapes.com/): more than 100 million entries). You can also add your own data with the Web interface or the importer connectors provided. Gisgraphy is production ready, and has been designed to be scalable(load balanced), performant and used in other languages than just java : results can be output in XML, JSON, PHP, Python, Ruby, YAML, GeoRSS, and Atom. One of the most popular GPS tracking System (OpenGTS) also includes a Gisgraphy client...Gisgraphy is a framework. As a result it's flexible and powerful enough to be used in a lot of different use cases. [read more](http://www.gisgraphy.com)   if you use the premium servers, you can use the api key to test the webservices 
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.GisgraphyWebservices);
  }
}(this, function(expect, GisgraphyWebservices) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new GisgraphyWebservices.SolrResponseDto();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('SolrResponseDto', function() {
    it('should create an instance of SolrResponseDto', function() {
      // uncomment below and update the code to test SolrResponseDto
      //var instance = new GisgraphyWebservices.SolrResponseDto();
      //expect(instance).to.be.a(GisgraphyWebservices.SolrResponseDto);
    });

    it('should have the property adm1Code (base name: "adm1_code")', function() {
      // uncomment below and update the code to test the property adm1Code
      //var instance = new GisgraphyWebservices.SolrResponseDto();
      //expect(instance).to.be();
    });

    it('should have the property adm1Name (base name: "adm1_name")', function() {
      // uncomment below and update the code to test the property adm1Name
      //var instance = new GisgraphyWebservices.SolrResponseDto();
      //expect(instance).to.be();
    });

    it('should have the property adm1NamesAlternate (base name: "adm1_names_alternate")', function() {
      // uncomment below and update the code to test the property adm1NamesAlternate
      //var instance = new GisgraphyWebservices.SolrResponseDto();
      //expect(instance).to.be();
    });

    it('should have the property adm2Code (base name: "adm2_code")', function() {
      // uncomment below and update the code to test the property adm2Code
      //var instance = new GisgraphyWebservices.SolrResponseDto();
      //expect(instance).to.be();
    });

    it('should have the property adm2Name (base name: "adm2_name")', function() {
      // uncomment below and update the code to test the property adm2Name
      //var instance = new GisgraphyWebservices.SolrResponseDto();
      //expect(instance).to.be();
    });

    it('should have the property adm2NamesAlternate (base name: "adm2_names_alternate")', function() {
      // uncomment below and update the code to test the property adm2NamesAlternate
      //var instance = new GisgraphyWebservices.SolrResponseDto();
      //expect(instance).to.be();
    });

    it('should have the property adm3Code (base name: "adm3_code")', function() {
      // uncomment below and update the code to test the property adm3Code
      //var instance = new GisgraphyWebservices.SolrResponseDto();
      //expect(instance).to.be();
    });

    it('should have the property adm3Name (base name: "adm3_name")', function() {
      // uncomment below and update the code to test the property adm3Name
      //var instance = new GisgraphyWebservices.SolrResponseDto();
      //expect(instance).to.be();
    });

    it('should have the property adm4Code (base name: "adm4_code")', function() {
      // uncomment below and update the code to test the property adm4Code
      //var instance = new GisgraphyWebservices.SolrResponseDto();
      //expect(instance).to.be();
    });

    it('should have the property adm4Name (base name: "adm4_name")', function() {
      // uncomment below and update the code to test the property adm4Name
      //var instance = new GisgraphyWebservices.SolrResponseDto();
      //expect(instance).to.be();
    });

    it('should have the property amenity (base name: "amenity")', function() {
      // uncomment below and update the code to test the property amenity
      //var instance = new GisgraphyWebservices.SolrResponseDto();
      //expect(instance).to.be();
    });

    it('should have the property area (base name: "area")', function() {
      // uncomment below and update the code to test the property area
      //var instance = new GisgraphyWebservices.SolrResponseDto();
      //expect(instance).to.be();
    });

    it('should have the property capitalName (base name: "capital_name")', function() {
      // uncomment below and update the code to test the property capitalName
      //var instance = new GisgraphyWebservices.SolrResponseDto();
      //expect(instance).to.be();
    });

    it('should have the property continent (base name: "continent")', function() {
      // uncomment below and update the code to test the property continent
      //var instance = new GisgraphyWebservices.SolrResponseDto();
      //expect(instance).to.be();
    });

    it('should have the property countryCode (base name: "country_code")', function() {
      // uncomment below and update the code to test the property countryCode
      //var instance = new GisgraphyWebservices.SolrResponseDto();
      //expect(instance).to.be();
    });

    it('should have the property countryFlagUrl (base name: "country_flag_url")', function() {
      // uncomment below and update the code to test the property countryFlagUrl
      //var instance = new GisgraphyWebservices.SolrResponseDto();
      //expect(instance).to.be();
    });

    it('should have the property countryName (base name: "country_name")', function() {
      // uncomment below and update the code to test the property countryName
      //var instance = new GisgraphyWebservices.SolrResponseDto();
      //expect(instance).to.be();
    });

    it('should have the property countryNamesAlternate (base name: "country_names_alternate")', function() {
      // uncomment below and update the code to test the property countryNamesAlternate
      //var instance = new GisgraphyWebservices.SolrResponseDto();
      //expect(instance).to.be();
    });

    it('should have the property currencyCode (base name: "currency_code")', function() {
      // uncomment below and update the code to test the property currencyCode
      //var instance = new GisgraphyWebservices.SolrResponseDto();
      //expect(instance).to.be();
    });

    it('should have the property currencyName (base name: "currency_name")', function() {
      // uncomment below and update the code to test the property currencyName
      //var instance = new GisgraphyWebservices.SolrResponseDto();
      //expect(instance).to.be();
    });

    it('should have the property elevation (base name: "elevation")', function() {
      // uncomment below and update the code to test the property elevation
      //var instance = new GisgraphyWebservices.SolrResponseDto();
      //expect(instance).to.be();
    });

    it('should have the property featureClass (base name: "feature_class")', function() {
      // uncomment below and update the code to test the property featureClass
      //var instance = new GisgraphyWebservices.SolrResponseDto();
      //expect(instance).to.be();
    });

    it('should have the property featureCode (base name: "feature_code")', function() {
      // uncomment below and update the code to test the property featureCode
      //var instance = new GisgraphyWebservices.SolrResponseDto();
      //expect(instance).to.be();
    });

    it('should have the property featureId (base name: "feature_id")', function() {
      // uncomment below and update the code to test the property featureId
      //var instance = new GisgraphyWebservices.SolrResponseDto();
      //expect(instance).to.be();
    });

    it('should have the property fipsCode (base name: "fips_code")', function() {
      // uncomment below and update the code to test the property fipsCode
      //var instance = new GisgraphyWebservices.SolrResponseDto();
      //expect(instance).to.be();
    });

    it('should have the property fullyQualifiedAddress (base name: "fully_qualified_address")', function() {
      // uncomment below and update the code to test the property fullyQualifiedAddress
      //var instance = new GisgraphyWebservices.SolrResponseDto();
      //expect(instance).to.be();
    });

    it('should have the property fullyQualifiedName (base name: "fully_qualified_name")', function() {
      // uncomment below and update the code to test the property fullyQualifiedName
      //var instance = new GisgraphyWebservices.SolrResponseDto();
      //expect(instance).to.be();
    });

    it('should have the property googleMapUrl (base name: "google_map_url")', function() {
      // uncomment below and update the code to test the property googleMapUrl
      //var instance = new GisgraphyWebservices.SolrResponseDto();
      //expect(instance).to.be();
    });

    it('should have the property gtopo30 (base name: "gtopo30")', function() {
      // uncomment below and update the code to test the property gtopo30
      //var instance = new GisgraphyWebservices.SolrResponseDto();
      //expect(instance).to.be();
    });

    it('should have the property houseNumbers (base name: "house_numbers")', function() {
      // uncomment below and update the code to test the property houseNumbers
      //var instance = new GisgraphyWebservices.SolrResponseDto();
      //expect(instance).to.be();
    });

    it('should have the property isIn (base name: "is_in")', function() {
      // uncomment below and update the code to test the property isIn
      //var instance = new GisgraphyWebservices.SolrResponseDto();
      //expect(instance).to.be();
    });

    it('should have the property isInAdm (base name: "is_in_adm")', function() {
      // uncomment below and update the code to test the property isInAdm
      //var instance = new GisgraphyWebservices.SolrResponseDto();
      //expect(instance).to.be();
    });

    it('should have the property isInPlace (base name: "is_in_place")', function() {
      // uncomment below and update the code to test the property isInPlace
      //var instance = new GisgraphyWebservices.SolrResponseDto();
      //expect(instance).to.be();
    });

    it('should have the property isInZip (base name: "is_in_zip")', function() {
      // uncomment below and update the code to test the property isInZip
      //var instance = new GisgraphyWebservices.SolrResponseDto();
      //expect(instance).to.be();
    });

    it('should have the property isoalpha2CountryCode (base name: "isoalpha2_country_code")', function() {
      // uncomment below and update the code to test the property isoalpha2CountryCode
      //var instance = new GisgraphyWebservices.SolrResponseDto();
      //expect(instance).to.be();
    });

    it('should have the property isoalpha3CountryCode (base name: "isoalpha3_country_code")', function() {
      // uncomment below and update the code to test the property isoalpha3CountryCode
      //var instance = new GisgraphyWebservices.SolrResponseDto();
      //expect(instance).to.be();
    });

    it('should have the property lat (base name: "lat")', function() {
      // uncomment below and update the code to test the property lat
      //var instance = new GisgraphyWebservices.SolrResponseDto();
      //expect(instance).to.be();
    });

    it('should have the property length (base name: "length")', function() {
      // uncomment below and update the code to test the property length
      //var instance = new GisgraphyWebservices.SolrResponseDto();
      //expect(instance).to.be();
    });

    it('should have the property level (base name: "level")', function() {
      // uncomment below and update the code to test the property level
      //var instance = new GisgraphyWebservices.SolrResponseDto();
      //expect(instance).to.be();
    });

    it('should have the property lng (base name: "lng")', function() {
      // uncomment below and update the code to test the property lng
      //var instance = new GisgraphyWebservices.SolrResponseDto();
      //expect(instance).to.be();
    });

    it('should have the property municipality (base name: "municipality")', function() {
      // uncomment below and update the code to test the property municipality
      //var instance = new GisgraphyWebservices.SolrResponseDto();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new GisgraphyWebservices.SolrResponseDto();
      //expect(instance).to.be();
    });

    it('should have the property nameAlternates (base name: "name_alternates")', function() {
      // uncomment below and update the code to test the property nameAlternates
      //var instance = new GisgraphyWebservices.SolrResponseDto();
      //expect(instance).to.be();
    });

    it('should have the property nameAscii (base name: "name_ascii")', function() {
      // uncomment below and update the code to test the property nameAscii
      //var instance = new GisgraphyWebservices.SolrResponseDto();
      //expect(instance).to.be();
    });

    it('should have the property oneWay (base name: "one_way")', function() {
      // uncomment below and update the code to test the property oneWay
      //var instance = new GisgraphyWebservices.SolrResponseDto();
      //expect(instance).to.be();
    });

    it('should have the property openstreetmapId (base name: "openstreetmap_id")', function() {
      // uncomment below and update the code to test the property openstreetmapId
      //var instance = new GisgraphyWebservices.SolrResponseDto();
      //expect(instance).to.be();
    });

    it('should have the property openstreetmapMapUrl (base name: "openstreetmap_map_url")', function() {
      // uncomment below and update the code to test the property openstreetmapMapUrl
      //var instance = new GisgraphyWebservices.SolrResponseDto();
      //expect(instance).to.be();
    });

    it('should have the property phonePrefix (base name: "phone_prefix")', function() {
      // uncomment below and update the code to test the property phonePrefix
      //var instance = new GisgraphyWebservices.SolrResponseDto();
      //expect(instance).to.be();
    });

    it('should have the property placetype (base name: "placetype")', function() {
      // uncomment below and update the code to test the property placetype
      //var instance = new GisgraphyWebservices.SolrResponseDto();
      //expect(instance).to.be();
    });

    it('should have the property population (base name: "population")', function() {
      // uncomment below and update the code to test the property population
      //var instance = new GisgraphyWebservices.SolrResponseDto();
      //expect(instance).to.be();
    });

    it('should have the property postalCodeMask (base name: "postal_code_mask")', function() {
      // uncomment below and update the code to test the property postalCodeMask
      //var instance = new GisgraphyWebservices.SolrResponseDto();
      //expect(instance).to.be();
    });

    it('should have the property postalCodeRegex (base name: "postal_code_regex")', function() {
      // uncomment below and update the code to test the property postalCodeRegex
      //var instance = new GisgraphyWebservices.SolrResponseDto();
      //expect(instance).to.be();
    });

    it('should have the property score (base name: "score")', function() {
      // uncomment below and update the code to test the property score
      //var instance = new GisgraphyWebservices.SolrResponseDto();
      //expect(instance).to.be();
    });

    it('should have the property spokenLanguages (base name: "spoken_languages")', function() {
      // uncomment below and update the code to test the property spokenLanguages
      //var instance = new GisgraphyWebservices.SolrResponseDto();
      //expect(instance).to.be();
    });

    it('should have the property streetType (base name: "street_type")', function() {
      // uncomment below and update the code to test the property streetType
      //var instance = new GisgraphyWebservices.SolrResponseDto();
      //expect(instance).to.be();
    });

    it('should have the property timezone (base name: "timezone")', function() {
      // uncomment below and update the code to test the property timezone
      //var instance = new GisgraphyWebservices.SolrResponseDto();
      //expect(instance).to.be();
    });

    it('should have the property tld (base name: "tld")', function() {
      // uncomment below and update the code to test the property tld
      //var instance = new GisgraphyWebservices.SolrResponseDto();
      //expect(instance).to.be();
    });

    it('should have the property yahooMapUrl (base name: "yahoo_map_url")', function() {
      // uncomment below and update the code to test the property yahooMapUrl
      //var instance = new GisgraphyWebservices.SolrResponseDto();
      //expect(instance).to.be();
    });

    it('should have the property zipcodes (base name: "zipcodes")', function() {
      // uncomment below and update the code to test the property zipcodes
      //var instance = new GisgraphyWebservices.SolrResponseDto();
      //expect(instance).to.be();
    });

  });

}));
