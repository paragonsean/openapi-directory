/**
 * Gisgraphy webservices
 * Since 2006, [Gisgraphy](http://www.gisgraphy.com) is a free, open source framework that offers the possibility to do geolocalisation and geocoding via Java APIs or REST webservices. Because geocoding is nothing without data, it provides an easy to use importer that will automatically download and import the necessary (free) data to your local database ([OpenStreetMap](http://www.openstreetmap.org/), [Geonames](http://www.geonames.org/) and [Quattroshapes](http://www.quattroshapes.com/): more than 100 million entries). You can also add your own data with the Web interface or the importer connectors provided. Gisgraphy is production ready, and has been designed to be scalable(load balanced), performant and used in other languages than just java : results can be output in XML, JSON, PHP, Python, Ruby, YAML, GeoRSS, and Atom. One of the most popular GPS tracking System (OpenGTS) also includes a Gisgraphy client...Gisgraphy is a framework. As a result it's flexible and powerful enough to be used in a lot of different use cases. [read more](http://www.gisgraphy.com)   if you use the premium servers, you can use the api key to test the webservices 
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.GisgraphyWebservices);
  }
}(this, function(expect, GisgraphyWebservices) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new GisgraphyWebservices.StreetDistance();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('StreetDistance', function() {
    it('should create an instance of StreetDistance', function() {
      // uncomment below and update the code to test StreetDistance
      //var instance = new GisgraphyWebservices.StreetDistance();
      //expect(instance).to.be.a(GisgraphyWebservices.StreetDistance);
    });

    it('should have the property countryCode (base name: "countryCode")', function() {
      // uncomment below and update the code to test the property countryCode
      //var instance = new GisgraphyWebservices.StreetDistance();
      //expect(instance).to.be();
    });

    it('should have the property distance (base name: "distance")', function() {
      // uncomment below and update the code to test the property distance
      //var instance = new GisgraphyWebservices.StreetDistance();
      //expect(instance).to.be();
    });

    it('should have the property fullyQualifiedAddress (base name: "fullyQualifiedAddress")', function() {
      // uncomment below and update the code to test the property fullyQualifiedAddress
      //var instance = new GisgraphyWebservices.StreetDistance();
      //expect(instance).to.be();
    });

    it('should have the property gid (base name: "gid")', function() {
      // uncomment below and update the code to test the property gid
      //var instance = new GisgraphyWebservices.StreetDistance();
      //expect(instance).to.be();
    });

    it('should have the property isIn (base name: "isIn")', function() {
      // uncomment below and update the code to test the property isIn
      //var instance = new GisgraphyWebservices.StreetDistance();
      //expect(instance).to.be();
    });

    it('should have the property isInAdm (base name: "isInAdm")', function() {
      // uncomment below and update the code to test the property isInAdm
      //var instance = new GisgraphyWebservices.StreetDistance();
      //expect(instance).to.be();
    });

    it('should have the property isInPlace (base name: "isInPlace")', function() {
      // uncomment below and update the code to test the property isInPlace
      //var instance = new GisgraphyWebservices.StreetDistance();
      //expect(instance).to.be();
    });

    it('should have the property isInZip (base name: "isInZip")', function() {
      // uncomment below and update the code to test the property isInZip
      //var instance = new GisgraphyWebservices.StreetDistance();
      //expect(instance).to.be();
    });

    it('should have the property lat (base name: "lat")', function() {
      // uncomment below and update the code to test the property lat
      //var instance = new GisgraphyWebservices.StreetDistance();
      //expect(instance).to.be();
    });

    it('should have the property length (base name: "length")', function() {
      // uncomment below and update the code to test the property length
      //var instance = new GisgraphyWebservices.StreetDistance();
      //expect(instance).to.be();
    });

    it('should have the property lng (base name: "lng")', function() {
      // uncomment below and update the code to test the property lng
      //var instance = new GisgraphyWebservices.StreetDistance();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new GisgraphyWebservices.StreetDistance();
      //expect(instance).to.be();
    });

    it('should have the property oneWay (base name: "oneWay")', function() {
      // uncomment below and update the code to test the property oneWay
      //var instance = new GisgraphyWebservices.StreetDistance();
      //expect(instance).to.be();
    });

    it('should have the property openstreetmapId (base name: "openstreetmapId")', function() {
      // uncomment below and update the code to test the property openstreetmapId
      //var instance = new GisgraphyWebservices.StreetDistance();
      //expect(instance).to.be();
    });

    it('should have the property streetType (base name: "streetType")', function() {
      // uncomment below and update the code to test the property streetType
      //var instance = new GisgraphyWebservices.StreetDistance();
      //expect(instance).to.be();
    });

  });

}));
