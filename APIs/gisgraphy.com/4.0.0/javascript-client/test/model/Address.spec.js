/**
 * Gisgraphy webservices
 * Since 2006, [Gisgraphy](http://www.gisgraphy.com) is a free, open source framework that offers the possibility to do geolocalisation and geocoding via Java APIs or REST webservices. Because geocoding is nothing without data, it provides an easy to use importer that will automatically download and import the necessary (free) data to your local database ([OpenStreetMap](http://www.openstreetmap.org/), [Geonames](http://www.geonames.org/) and [Quattroshapes](http://www.quattroshapes.com/): more than 100 million entries). You can also add your own data with the Web interface or the importer connectors provided. Gisgraphy is production ready, and has been designed to be scalable(load balanced), performant and used in other languages than just java : results can be output in XML, JSON, PHP, Python, Ruby, YAML, GeoRSS, and Atom. One of the most popular GPS tracking System (OpenGTS) also includes a Gisgraphy client...Gisgraphy is a framework. As a result it's flexible and powerful enough to be used in a lot of different use cases. [read more](http://www.gisgraphy.com)   if you use the premium servers, you can use the api key to test the webservices 
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.GisgraphyWebservices);
  }
}(this, function(expect, GisgraphyWebservices) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new GisgraphyWebservices.Address();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Address', function() {
    it('should create an instance of Address', function() {
      // uncomment below and update the code to test Address
      //var instance = new GisgraphyWebservices.Address();
      //expect(instance).to.be.a(GisgraphyWebservices.Address);
    });

    it('should have the property pOBox (base name: "POBox")', function() {
      // uncomment below and update the code to test the property pOBox
      //var instance = new GisgraphyWebservices.Address();
      //expect(instance).to.be();
    });

    it('should have the property pOBoxAgency (base name: "POBoxAgency")', function() {
      // uncomment below and update the code to test the property pOBoxAgency
      //var instance = new GisgraphyWebservices.Address();
      //expect(instance).to.be();
    });

    it('should have the property pOBoxInfo (base name: "POBoxInfo")', function() {
      // uncomment below and update the code to test the property pOBoxInfo
      //var instance = new GisgraphyWebservices.Address();
      //expect(instance).to.be();
    });

    it('should have the property adm1NameAlternatesLocalized (base name: "adm1NameAlternatesLocalized")', function() {
      // uncomment below and update the code to test the property adm1NameAlternatesLocalized
      //var instance = new GisgraphyWebservices.Address();
      //expect(instance).to.be();
    });

    it('should have the property adm2NameAlternatesLocalized (base name: "adm2NameAlternatesLocalized")', function() {
      // uncomment below and update the code to test the property adm2NameAlternatesLocalized
      //var instance = new GisgraphyWebservices.Address();
      //expect(instance).to.be();
    });

    it('should have the property block (base name: "block")', function() {
      // uncomment below and update the code to test the property block
      //var instance = new GisgraphyWebservices.Address();
      //expect(instance).to.be();
    });

    it('should have the property city (base name: "city")', function() {
      // uncomment below and update the code to test the property city
      //var instance = new GisgraphyWebservices.Address();
      //expect(instance).to.be();
    });

    it('should have the property citySubdivision (base name: "citySubdivision")', function() {
      // uncomment below and update the code to test the property citySubdivision
      //var instance = new GisgraphyWebservices.Address();
      //expect(instance).to.be();
    });

    it('should have the property civicNumberSuffix (base name: "civicNumberSuffix")', function() {
      // uncomment below and update the code to test the property civicNumberSuffix
      //var instance = new GisgraphyWebservices.Address();
      //expect(instance).to.be();
    });

    it('should have the property confidence (base name: "confidence")', function() {
      // uncomment below and update the code to test the property confidence
      //var instance = new GisgraphyWebservices.Address();
      //expect(instance).to.be();
    });

    it('should have the property country (base name: "country")', function() {
      // uncomment below and update the code to test the property country
      //var instance = new GisgraphyWebservices.Address();
      //expect(instance).to.be();
    });

    it('should have the property countryNameAlternatesLocalized (base name: "countryNameAlternatesLocalized")', function() {
      // uncomment below and update the code to test the property countryNameAlternatesLocalized
      //var instance = new GisgraphyWebservices.Address();
      //expect(instance).to.be();
    });

    it('should have the property countrycode (base name: "countrycode")', function() {
      // uncomment below and update the code to test the property countrycode
      //var instance = new GisgraphyWebservices.Address();
      //expect(instance).to.be();
    });

    it('should have the property dependentLocality (base name: "dependentLocality")', function() {
      // uncomment below and update the code to test the property dependentLocality
      //var instance = new GisgraphyWebservices.Address();
      //expect(instance).to.be();
    });

    it('should have the property distance (base name: "distance")', function() {
      // uncomment below and update the code to test the property distance
      //var instance = new GisgraphyWebservices.Address();
      //expect(instance).to.be();
    });

    it('should have the property district (base name: "district")', function() {
      // uncomment below and update the code to test the property district
      //var instance = new GisgraphyWebservices.Address();
      //expect(instance).to.be();
    });

    it('should have the property extraInfo (base name: "extraInfo")', function() {
      // uncomment below and update the code to test the property extraInfo
      //var instance = new GisgraphyWebservices.Address();
      //expect(instance).to.be();
    });

    it('should have the property floor (base name: "floor")', function() {
      // uncomment below and update the code to test the property floor
      //var instance = new GisgraphyWebservices.Address();
      //expect(instance).to.be();
    });

    it('should have the property geocodinglevel (base name: "geocodinglevel")', function() {
      // uncomment below and update the code to test the property geocodinglevel
      //var instance = new GisgraphyWebservices.Address();
      //expect(instance).to.be();
    });

    it('should have the property houseNumber (base name: "houseNumber")', function() {
      // uncomment below and update the code to test the property houseNumber
      //var instance = new GisgraphyWebservices.Address();
      //expect(instance).to.be();
    });

    it('should have the property houseNumberInfo (base name: "houseNumberInfo")', function() {
      // uncomment below and update the code to test the property houseNumberInfo
      //var instance = new GisgraphyWebservices.Address();
      //expect(instance).to.be();
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instance = new GisgraphyWebservices.Address();
      //expect(instance).to.be();
    });

    it('should have the property lat (base name: "lat")', function() {
      // uncomment below and update the code to test the property lat
      //var instance = new GisgraphyWebservices.Address();
      //expect(instance).to.be();
    });

    it('should have the property lng (base name: "lng")', function() {
      // uncomment below and update the code to test the property lng
      //var instance = new GisgraphyWebservices.Address();
      //expect(instance).to.be();
    });

    it('should have the property lote (base name: "lote")', function() {
      // uncomment below and update the code to test the property lote
      //var instance = new GisgraphyWebservices.Address();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new GisgraphyWebservices.Address();
      //expect(instance).to.be();
    });

    it('should have the property nameAlternatesLocalized (base name: "nameAlternatesLocalized")', function() {
      // uncomment below and update the code to test the property nameAlternatesLocalized
      //var instance = new GisgraphyWebservices.Address();
      //expect(instance).to.be();
    });

    it('should have the property postDirection (base name: "postDirection")', function() {
      // uncomment below and update the code to test the property postDirection
      //var instance = new GisgraphyWebservices.Address();
      //expect(instance).to.be();
    });

    it('should have the property postDirectionIntersection (base name: "postDirectionIntersection")', function() {
      // uncomment below and update the code to test the property postDirectionIntersection
      //var instance = new GisgraphyWebservices.Address();
      //expect(instance).to.be();
    });

    it('should have the property postTown (base name: "postTown")', function() {
      // uncomment below and update the code to test the property postTown
      //var instance = new GisgraphyWebservices.Address();
      //expect(instance).to.be();
    });

    it('should have the property preDirection (base name: "preDirection")', function() {
      // uncomment below and update the code to test the property preDirection
      //var instance = new GisgraphyWebservices.Address();
      //expect(instance).to.be();
    });

    it('should have the property preDirectionIntersection (base name: "preDirectionIntersection")', function() {
      // uncomment below and update the code to test the property preDirectionIntersection
      //var instance = new GisgraphyWebservices.Address();
      //expect(instance).to.be();
    });

    it('should have the property prefecture (base name: "prefecture")', function() {
      // uncomment below and update the code to test the property prefecture
      //var instance = new GisgraphyWebservices.Address();
      //expect(instance).to.be();
    });

    it('should have the property quadrant (base name: "quadrant")', function() {
      // uncomment below and update the code to test the property quadrant
      //var instance = new GisgraphyWebservices.Address();
      //expect(instance).to.be();
    });

    it('should have the property quarter (base name: "quarter")', function() {
      // uncomment below and update the code to test the property quarter
      //var instance = new GisgraphyWebservices.Address();
      //expect(instance).to.be();
    });

    it('should have the property recipientName (base name: "recipientName")', function() {
      // uncomment below and update the code to test the property recipientName
      //var instance = new GisgraphyWebservices.Address();
      //expect(instance).to.be();
    });

    it('should have the property sector (base name: "sector")', function() {
      // uncomment below and update the code to test the property sector
      //var instance = new GisgraphyWebservices.Address();
      //expect(instance).to.be();
    });

    it('should have the property state (base name: "state")', function() {
      // uncomment below and update the code to test the property state
      //var instance = new GisgraphyWebservices.Address();
      //expect(instance).to.be();
    });

    it('should have the property streetName (base name: "streetName")', function() {
      // uncomment below and update the code to test the property streetName
      //var instance = new GisgraphyWebservices.Address();
      //expect(instance).to.be();
    });

    it('should have the property streetNameIntersection (base name: "streetNameIntersection")', function() {
      // uncomment below and update the code to test the property streetNameIntersection
      //var instance = new GisgraphyWebservices.Address();
      //expect(instance).to.be();
    });

    it('should have the property streetType (base name: "streetType")', function() {
      // uncomment below and update the code to test the property streetType
      //var instance = new GisgraphyWebservices.Address();
      //expect(instance).to.be();
    });

    it('should have the property streetTypeIntersection (base name: "streetTypeIntersection")', function() {
      // uncomment below and update the code to test the property streetTypeIntersection
      //var instance = new GisgraphyWebservices.Address();
      //expect(instance).to.be();
    });

    it('should have the property suiteNumber (base name: "suiteNumber")', function() {
      // uncomment below and update the code to test the property suiteNumber
      //var instance = new GisgraphyWebservices.Address();
      //expect(instance).to.be();
    });

    it('should have the property suiteType (base name: "suiteType")', function() {
      // uncomment below and update the code to test the property suiteType
      //var instance = new GisgraphyWebservices.Address();
      //expect(instance).to.be();
    });

    it('should have the property ward (base name: "ward")', function() {
      // uncomment below and update the code to test the property ward
      //var instance = new GisgraphyWebservices.Address();
      //expect(instance).to.be();
    });

    it('should have the property zipCode (base name: "zipCode")', function() {
      // uncomment below and update the code to test the property zipCode
      //var instance = new GisgraphyWebservices.Address();
      //expect(instance).to.be();
    });

  });

}));
