/**
 * Gisgraphy webservices
 * Since 2006, [Gisgraphy](http://www.gisgraphy.com) is a free, open source framework that offers the possibility to do geolocalisation and geocoding via Java APIs or REST webservices. Because geocoding is nothing without data, it provides an easy to use importer that will automatically download and import the necessary (free) data to your local database ([OpenStreetMap](http://www.openstreetmap.org/), [Geonames](http://www.geonames.org/) and [Quattroshapes](http://www.quattroshapes.com/): more than 100 million entries). You can also add your own data with the Web interface or the importer connectors provided. Gisgraphy is production ready, and has been designed to be scalable(load balanced), performant and used in other languages than just java : results can be output in XML, JSON, PHP, Python, Ruby, YAML, GeoRSS, and Atom. One of the most popular GPS tracking System (OpenGTS) also includes a Gisgraphy client...Gisgraphy is a framework. As a result it's flexible and powerful enough to be used in a lot of different use cases. [read more](http://www.gisgraphy.com)   if you use the premium servers, you can use the api key to test the webservices 
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from './ApiClient';
import Address from './model/Address';
import AddressResultsDto from './model/AddressResultsDto';
import FulltextResultsDto from './model/FulltextResultsDto';
import GeolocResultsDto from './model/GeolocResultsDto';
import GisFeatureDistance from './model/GisFeatureDistance';
import HouseNumberDto from './model/HouseNumberDto';
import SolrResponseDto from './model/SolrResponseDto';
import StreetDistance from './model/StreetDistance';
import StreetSearchResultsDto from './model/StreetSearchResultsDto';
import AddressparserStandardizerApi from './api/AddressparserStandardizerApi';
import FulltextAutocompleteApi from './api/FulltextAutocompleteApi';
import GeocodingApi from './api/GeocodingApi';
import GeolocalisationApi from './api/GeolocalisationApi';
import ReversegeocodingApi from './api/ReversegeocodingApi';
import StreetserviceApi from './api/StreetserviceApi';


/**
* Since 2006, [Gisgraphy](http://www.gisgraphy.com) is a free, open source framework that offers the possibility to do geolocalisation and geocoding via Java APIs or REST webservices. Because geocoding is nothing without data, it provides an easy to use importer that will automatically download and import the necessary (free) data to your local database ([OpenStreetMap](http://www.openstreetmap.org/), [Geonames](http://www.geonames.org/) and [Quattroshapes](http://www.quattroshapes.com/): more than 100 million entries). You can also add your own data with the Web interface or the importer connectors provided. Gisgraphy is production ready, and has been designed to be scalable(load balanced), performant and used in other languages than just java : results can be output in XML, JSON, PHP, Python, Ruby, YAML, GeoRSS, and Atom. One of the most popular GPS tracking System (OpenGTS) also includes a Gisgraphy client...Gisgraphy is a framework. As a result it&#39;s flexible and powerful enough to be used in a lot of different use cases. [read more](http://www.gisgraphy.com)   if you use the premium servers, you can use the api key to test the webservices .<br>
* The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
* <p>
* An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
* <pre>
* var GisgraphyWebservices = require('index'); // See note below*.
* var xxxSvc = new GisgraphyWebservices.XxxApi(); // Allocate the API class we're going to use.
* var yyyModel = new GisgraphyWebservices.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
* and put the application logic within the callback function.</em>
* </p>
* <p>
* A non-AMD browser application (discouraged) might do something like this:
* <pre>
* var xxxSvc = new GisgraphyWebservices.XxxApi(); // Allocate the API class we're going to use.
* var yyy = new GisgraphyWebservices.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* </p>
* @module index
* @version 4.0.0
*/
export {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient,

    /**
     * The Address model constructor.
     * @property {module:model/Address}
     */
    Address,

    /**
     * The AddressResultsDto model constructor.
     * @property {module:model/AddressResultsDto}
     */
    AddressResultsDto,

    /**
     * The FulltextResultsDto model constructor.
     * @property {module:model/FulltextResultsDto}
     */
    FulltextResultsDto,

    /**
     * The GeolocResultsDto model constructor.
     * @property {module:model/GeolocResultsDto}
     */
    GeolocResultsDto,

    /**
     * The GisFeatureDistance model constructor.
     * @property {module:model/GisFeatureDistance}
     */
    GisFeatureDistance,

    /**
     * The HouseNumberDto model constructor.
     * @property {module:model/HouseNumberDto}
     */
    HouseNumberDto,

    /**
     * The SolrResponseDto model constructor.
     * @property {module:model/SolrResponseDto}
     */
    SolrResponseDto,

    /**
     * The StreetDistance model constructor.
     * @property {module:model/StreetDistance}
     */
    StreetDistance,

    /**
     * The StreetSearchResultsDto model constructor.
     * @property {module:model/StreetSearchResultsDto}
     */
    StreetSearchResultsDto,

    /**
    * The AddressparserStandardizerApi service constructor.
    * @property {module:api/AddressparserStandardizerApi}
    */
    AddressparserStandardizerApi,

    /**
    * The FulltextAutocompleteApi service constructor.
    * @property {module:api/FulltextAutocompleteApi}
    */
    FulltextAutocompleteApi,

    /**
    * The GeocodingApi service constructor.
    * @property {module:api/GeocodingApi}
    */
    GeocodingApi,

    /**
    * The GeolocalisationApi service constructor.
    * @property {module:api/GeolocalisationApi}
    */
    GeolocalisationApi,

    /**
    * The ReversegeocodingApi service constructor.
    * @property {module:api/ReversegeocodingApi}
    */
    ReversegeocodingApi,

    /**
    * The StreetserviceApi service constructor.
    * @property {module:api/StreetserviceApi}
    */
    StreetserviceApi
};
