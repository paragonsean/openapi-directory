/**
 * Gisgraphy webservices
 * Since 2006, [Gisgraphy](http://www.gisgraphy.com) is a free, open source framework that offers the possibility to do geolocalisation and geocoding via Java APIs or REST webservices. Because geocoding is nothing without data, it provides an easy to use importer that will automatically download and import the necessary (free) data to your local database ([OpenStreetMap](http://www.openstreetmap.org/), [Geonames](http://www.geonames.org/) and [Quattroshapes](http://www.quattroshapes.com/): more than 100 million entries). You can also add your own data with the Web interface or the importer connectors provided. Gisgraphy is production ready, and has been designed to be scalable(load balanced), performant and used in other languages than just java : results can be output in XML, JSON, PHP, Python, Ruby, YAML, GeoRSS, and Atom. One of the most popular GPS tracking System (OpenGTS) also includes a Gisgraphy client...Gisgraphy is a framework. As a result it's flexible and powerful enough to be used in a lot of different use cases. [read more](http://www.gisgraphy.com)   if you use the premium servers, you can use the api key to test the webservices 
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import FulltextResultsDto from '../model/FulltextResultsDto';

/**
* FulltextAutocomplete service.
* @module api/FulltextAutocompleteApi
* @version 4.0.0
*/
export default class FulltextAutocompleteApi {

    /**
    * Constructs a new FulltextAutocompleteApi. 
    * @alias module:api/FulltextAutocompleteApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the fulltxtsearch operation.
     * @callback module:api/FulltextAutocompleteApi~fulltxtsearchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FulltextResultsDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * search for places by text around a GPS point
     * The full text service allows you to search for features / places / street and do autocompletion . you can : Specify one or more words search on part of the name (auto completion / suggestion) Search for text or zip code Specify a GPS restriction (promote nearest, not sorted but has an impact on the score), Limit the results to a specific Language, Country, place type, Paginate the results, Specify the output verbosity, Tells if you want the output to be indented, Tells that all words are required or not, The search is case insensitive, use synonyms (Saint/st, ..), separator characters stripping, ...
     * @param {String} q The searched text : The text for the query can be a zip code, a string or one or more strings
     * @param {Boolean} allwordsrequired Whether the fulltext engine should considers all the words specified as required. Defaults to false (since v 4.0). possible values are true|false (or 'on' when used with the rest service)
     * @param {Object} opts Optional parameters
     * @param {String} [spellchecking] The spellchecking (optional) : whether some suggestions should be provided if no results are found
     * @param {Number} [lat] The latitude (north-south) for the location point to search around. The value is a floating number, between -90 and +90. It uses GPS coordinates
     * @param {Number} [lng] TThe longitude (east-West) for the location point to search around. The value is a floating number between -180 and +180. It uses GPS coordinates.
     * @param {Number} [radius = 10000.0)] distance from the location point in meters we'd like to search around. The value is a number > 0 if it is not specify or incorrect.
     * @param {Boolean} [suggest = false)] If this parameter is set then it will search in part of the names of the street, place,.... It allow you to do auto completion auto suggestion. See the Gisgraphy leaflet plugin for more details. The JSON format will be forced if this parameter is true. See auto completion / suggestions engine for more details
     * @param {module:model/String} [style = 'MEDIUM')] The output style verbosity (optional) : Determines the output verbosity. 4 styles are available
     * @param {String} [country] limit the search to the specified ISO 3166 country code. Default : search in all countries
     * @param {String} [lang] The language code (optional) : The iso 639 Alpha2 or alpha3 Language Code. Some properties such as the AlternateName AdmNames and countryname belong to a certain language code. The language parameter can limit the output of those fields to a certain language (it only apply when style parameter='style') : If the language code does not exists or is not specified, properties with all the languages are retrieved If it exists, the properties with the specified language code, are retrieved
     * @param {module:model/String} [format = 'XML')] The output format.
     * @param {Number} [from = 1)] The first pagination index. Numbered from 1. If the number is < 1 or not specified, it will be set to the default value : 1
     * @param {Number} [to = 10)] The last pagination index. if < 1 or not specified, it will be set to startindex + 10. Max = 10 (can be changed)
     * @param {String} [callback] The callback method name (optional), use to wrap the content into a (alphanumeric) Javascript method. Works only for script output formats (JSON, PHP, Ruby, Python)
     * @param {Boolean} [indent = false)] indents the results.Default to false. Possible values are true or false (or on when used with the rest service. If you use a checkbox in a web form, to indent the results, the value will be 'on' or 'off', so for a simple use : the value of indent can be 'true' or 'on'
     * @param {module:api/FulltextAutocompleteApi~fulltxtsearchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FulltextResultsDto}
     */
    fulltxtsearch(q, allwordsrequired, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'q' is set
      if (q === undefined || q === null) {
        throw new Error("Missing the required parameter 'q' when calling fulltxtsearch");
      }
      // verify the required parameter 'allwordsrequired' is set
      if (allwordsrequired === undefined || allwordsrequired === null) {
        throw new Error("Missing the required parameter 'allwordsrequired' when calling fulltxtsearch");
      }

      let pathParams = {
      };
      let queryParams = {
        'q': q,
        'allwordsrequired': allwordsrequired,
        'spellchecking': opts['spellchecking'],
        'lat': opts['lat'],
        'lng': opts['lng'],
        'radius': opts['radius'],
        'suggest': opts['suggest'],
        'style': opts['style'],
        'country': opts['country'],
        'lang': opts['lang'],
        'format': opts['format'],
        'from': opts['from'],
        'to': opts['to'],
        'callback': opts['callback'],
        'indent': opts['indent']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'application/php', 'application/ruby', 'application/yaml', 'application/python', 'text/plain'];
      let returnType = FulltextResultsDto;
      return this.apiClient.callApi(
        '/fulltext/search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
