/**
 * Gisgraphy webservices
 * Since 2006, [Gisgraphy](http://www.gisgraphy.com) is a free, open source framework that offers the possibility to do geolocalisation and geocoding via Java APIs or REST webservices. Because geocoding is nothing without data, it provides an easy to use importer that will automatically download and import the necessary (free) data to your local database ([OpenStreetMap](http://www.openstreetmap.org/), [Geonames](http://www.geonames.org/) and [Quattroshapes](http://www.quattroshapes.com/): more than 100 million entries). You can also add your own data with the Web interface or the importer connectors provided. Gisgraphy is production ready, and has been designed to be scalable(load balanced), performant and used in other languages than just java : results can be output in XML, JSON, PHP, Python, Ruby, YAML, GeoRSS, and Atom. One of the most popular GPS tracking System (OpenGTS) also includes a Gisgraphy client...Gisgraphy is a framework. As a result it's flexible and powerful enough to be used in a lot of different use cases. [read more](http://www.gisgraphy.com)   if you use the premium servers, you can use the api key to test the webservices 
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AddressResultsDto from '../model/AddressResultsDto';

/**
* Geocoding service.
* @module api/GeocodingApi
* @version 4.0.0
*/
export default class GeocodingApi {

    /**
    * Constructs a new GeocodingApi. 
    * @alias module:api/GeocodingApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the geocode operation.
     * @callback module:api/GeocodingApi~geocodeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AddressResultsDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Geocode an address
     * The Gisgraphy geocoding service allows you to transform postal addresses or other descriptions (a street, a city, a postal code, a country, or a combination) of a location into a (latitude, longitude) coordinate.
     * @param {String} address A postal address, structured or not, a street, a city, a postal code, a country, or a combination.
     * @param {Object} opts Optional parameters
     * @param {String} [country] The country where the place/address is. It is used to determine the postal address format and to improve performance. It will probably be optional in next version to ease the usability. The value must be the ISO 3166 Alpha 2 code of the country.
     * @param {String} [postal] Whether the given address is a postal address. default to false. In other words, if the address follow the specification or if it is a well-formed address as it was written on an envelope. This parameter will enable the parsing of the address by the address parser before geocoding, this way, the relevance will be better because because if parsing is successful, we will know the meaning of each word. Note that you can also specify each field if you already know them.
     * @param {module:model/String} [format = 'XML')] The output format.
     * @param {Number} [from = 1)] The first pagination index. Numbered from 1. If the number is < 1 or not specified, it will be set to the default value : 1
     * @param {Number} [to = 10)] The last pagination index. if < 1 or not specified, it will be set to startindex + 10. Max = 10 (can be changed)
     * @param {String} [callback] The callback method name (optional), use to wrap the content into a (alphanumeric) Javascript method. Works only for script output formats (JSON, PHP, Ruby, Python)
     * @param {Boolean} [indent = false)] indents the results. Possible values are true or false (or on when used with the rest service. If you use a checkbox in a web form, to indent the results, the value will be 'on' or 'off', so for a simple use : the value of indent can be 'true' or 'on'
     * @param {module:api/GeocodingApi~geocodeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AddressResultsDto}
     */
    geocode(address, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'address' is set
      if (address === undefined || address === null) {
        throw new Error("Missing the required parameter 'address' when calling geocode");
      }

      let pathParams = {
      };
      let queryParams = {
        'address': address,
        'country': opts['country'],
        'postal': opts['postal'],
        'format': opts['format'],
        'from': opts['from'],
        'to': opts['to'],
        'callback': opts['callback'],
        'indent': opts['indent']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'application/php', 'application/ruby', 'application/yaml', 'application/python'];
      let returnType = AddressResultsDto;
      return this.apiClient.callApi(
        '/geocoding/geocode', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
