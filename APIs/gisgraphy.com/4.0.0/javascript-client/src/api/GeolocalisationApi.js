/**
 * Gisgraphy webservices
 * Since 2006, [Gisgraphy](http://www.gisgraphy.com) is a free, open source framework that offers the possibility to do geolocalisation and geocoding via Java APIs or REST webservices. Because geocoding is nothing without data, it provides an easy to use importer that will automatically download and import the necessary (free) data to your local database ([OpenStreetMap](http://www.openstreetmap.org/), [Geonames](http://www.geonames.org/) and [Quattroshapes](http://www.quattroshapes.com/): more than 100 million entries). You can also add your own data with the Web interface or the importer connectors provided. Gisgraphy is production ready, and has been designed to be scalable(load balanced), performant and used in other languages than just java : results can be output in XML, JSON, PHP, Python, Ruby, YAML, GeoRSS, and Atom. One of the most popular GPS tracking System (OpenGTS) also includes a Gisgraphy client...Gisgraphy is a framework. As a result it's flexible and powerful enough to be used in a lot of different use cases. [read more](http://www.gisgraphy.com)   if you use the premium servers, you can use the api key to test the webservices 
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import GeolocResultsDto from '../model/GeolocResultsDto';

/**
* Geolocalisation service.
* @module api/GeolocalisationApi
* @version 4.0.0
*/
export default class GeolocalisationApi {

    /**
    * Constructs a new GeolocalisationApi. 
    * @alias module:api/GeolocalisationApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the geoloc operation.
     * @callback module:api/GeolocalisationApi~geolocCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GeolocResultsDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Geocode an address
     * The geolocalisation service allows to search for features around a earth location. you can Specify GPS position, Limit the results to a specific place type (e.g : search all monuments around a point), Limit the results to a specified radius, Paginate the results, Tells if you want the output to be indented (currently, applies only for XML, not JSON for performance reasons. May change in next version)
     * @param {Number} lat The latitude (north-south) for the location point to search around. The value is a floating number, between -90 and +90. It uses GPS coordinates
     * @param {Number} lng TThe longitude (east-West) for the location point to search around. The value is a floating number between -180 and +180. It uses GPS coordinates.
     * @param {Object} opts Optional parameters
     * @param {Number} [radius = 10000.0)] distance from the location point in meters we'd like to search around. The value is a number > 0 if it is not specify or incorrect.
     * @param {Boolean} [distance = true)] Whether (or not) we want the distance field to be output. This option is useful to improve the performance if we don't care about the distance (e.g : we search for name). Of course, the results won't be sorted by distance. If you use a checkbox in a form to indent the results, the value will be 'on' or 'off', so to simplify the use : the value for the web service can be 'true' or 'on'
     * @param {String} [placetype] filter search for a given placetype
     * @param {module:model/String} [format = 'XML')] The output format.
     * @param {Number} [from = 1)] The first pagination index. Numbered from 1. If the number is < 1 or not specified, it will be set to the default value : 1
     * @param {Number} [to = 10)] The last pagination index. if < 1 or not specified, it will be set to startindex + 10. Max = 10 (can be changed)
     * @param {String} [callback] The callback method name (optional), use to wrap the content into a (alphanumeric) Javascript method. Works only for script output formats (JSON, PHP, Ruby, Python)
     * @param {Boolean} [indent = false)] indents the results.Default to false. Possible values are true or false (or on when used with the rest service. If you use a checkbox in a web form, to indent the results, the value will be 'on' or 'off', so for a simple use : the value of indent can be 'true' or 'on'
     * @param {module:api/GeolocalisationApi~geolocCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GeolocResultsDto}
     */
    geoloc(lat, lng, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'lat' is set
      if (lat === undefined || lat === null) {
        throw new Error("Missing the required parameter 'lat' when calling geoloc");
      }
      // verify the required parameter 'lng' is set
      if (lng === undefined || lng === null) {
        throw new Error("Missing the required parameter 'lng' when calling geoloc");
      }

      let pathParams = {
      };
      let queryParams = {
        'lat': lat,
        'lng': lng,
        'radius': opts['radius'],
        'distance': opts['distance'],
        'placetype': opts['placetype'],
        'format': opts['format'],
        'from': opts['from'],
        'to': opts['to'],
        'callback': opts['callback'],
        'indent': opts['indent']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'application/php', 'application/ruby', 'application/yaml', 'application/python', 'text/plain'];
      let returnType = GeolocResultsDto;
      return this.apiClient.callApi(
        '/geoloc/search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
