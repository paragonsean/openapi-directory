/**
 * Gisgraphy webservices
 * Since 2006, [Gisgraphy](http://www.gisgraphy.com) is a free, open source framework that offers the possibility to do geolocalisation and geocoding via Java APIs or REST webservices. Because geocoding is nothing without data, it provides an easy to use importer that will automatically download and import the necessary (free) data to your local database ([OpenStreetMap](http://www.openstreetmap.org/), [Geonames](http://www.geonames.org/) and [Quattroshapes](http://www.quattroshapes.com/): more than 100 million entries). You can also add your own data with the Web interface or the importer connectors provided. Gisgraphy is production ready, and has been designed to be scalable(load balanced), performant and used in other languages than just java : results can be output in XML, JSON, PHP, Python, Ruby, YAML, GeoRSS, and Atom. One of the most popular GPS tracking System (OpenGTS) also includes a Gisgraphy client...Gisgraphy is a framework. As a result it's flexible and powerful enough to be used in a lot of different use cases. [read more](http://www.gisgraphy.com)   if you use the premium servers, you can use the api key to test the webservices 
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AddressResultsDto from '../model/AddressResultsDto';

/**
* AddressparserStandardizer service.
* @module api/AddressparserStandardizerApi
* @version 4.0.0
*/
export default class AddressparserStandardizerApi {

    /**
    * Constructs a new AddressparserStandardizerApi. 
    * @alias module:api/AddressparserStandardizerApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addressparsing operation.
     * @callback module:api/AddressparserStandardizerApi~addressparsingCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AddressResultsDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * split a raw address into several parts
     * The address parser and address standardizer, are part of the Gisgraphy project (free open source worldwide geocoder). Address parsing is the process of dividing a single address string into its individual component parts. Please visit [http://www.address-parser.net](http://www.address-parser.net) for more details 
     * @param {String} address A postal address.
     * @param {Object} opts Optional parameters
     * @param {String} [country] The ISO 3166 Alpha 2 code of the country.
     * @param {module:model/String} [format = 'XML')] The output format.
     * @param {String} [callback] The callback method name (optional), use to wrap the content into a (alphanumeric) Javascript method. Works only for script output formats (JSON, PHP, Ruby, Python)
     * @param {Boolean} [indent = false)] indents the results.Default to false. Possible values are true or false (or on when used with the rest service. If you use a checkbox in a web form, to indent the results, the value will be 'on' or 'off', so for a simple use : the value of indent can be 'true' or 'on'
     * @param {Boolean} [standardize = false)] Whether the address should be standardized after parsing, the value will be 'on' or 'off', so for a simple use : the value of indent can be 'true' or 'on'
     * @param {Boolean} [geocode = false)] UNUSED YET. Whether the address should be geocoded after parsing, the value will be 'on' or 'off', so for a simple use : the value of indent can be 'true' or 'on'
     * @param {module:api/AddressparserStandardizerApi~addressparsingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AddressResultsDto}
     */
    addressparsing(address, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'address' is set
      if (address === undefined || address === null) {
        throw new Error("Missing the required parameter 'address' when calling addressparsing");
      }

      let pathParams = {
      };
      let queryParams = {
        'address': address,
        'country': opts['country'],
        'format': opts['format'],
        'callback': opts['callback'],
        'indent': opts['indent'],
        'standardize': opts['standardize'],
        'geocode': opts['geocode']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'application/php', 'application/ruby', 'application/yaml', 'application/python'];
      let returnType = AddressResultsDto;
      return this.apiClient.callApi(
        '/addressparser/parse', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
