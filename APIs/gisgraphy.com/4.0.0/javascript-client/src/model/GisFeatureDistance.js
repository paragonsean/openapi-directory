/**
 * Gisgraphy webservices
 * Since 2006, [Gisgraphy](http://www.gisgraphy.com) is a free, open source framework that offers the possibility to do geolocalisation and geocoding via Java APIs or REST webservices. Because geocoding is nothing without data, it provides an easy to use importer that will automatically download and import the necessary (free) data to your local database ([OpenStreetMap](http://www.openstreetmap.org/), [Geonames](http://www.geonames.org/) and [Quattroshapes](http://www.quattroshapes.com/): more than 100 million entries). You can also add your own data with the Web interface or the importer connectors provided. Gisgraphy is production ready, and has been designed to be scalable(load balanced), performant and used in other languages than just java : results can be output in XML, JSON, PHP, Python, Ruby, YAML, GeoRSS, and Atom. One of the most popular GPS tracking System (OpenGTS) also includes a Gisgraphy client...Gisgraphy is a framework. As a result it's flexible and powerful enough to be used in a lot of different use cases. [read more](http://www.gisgraphy.com)   if you use the premium servers, you can use the api key to test the webservices 
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The GisFeatureDistance model module.
 * @module model/GisFeatureDistance
 * @version 4.0.0
 */
class GisFeatureDistance {
    /**
     * Constructs a new <code>GisFeatureDistance</code>.
     * @alias module:model/GisFeatureDistance
     */
    constructor() { 
        
        GisFeatureDistance.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GisFeatureDistance</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GisFeatureDistance} obj Optional instance to populate.
     * @return {module:model/GisFeatureDistance} The populated <code>GisFeatureDistance</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GisFeatureDistance();

            if (data.hasOwnProperty('adm1Code')) {
                obj['adm1Code'] = ApiClient.convertToType(data['adm1Code'], 'String');
            }
            if (data.hasOwnProperty('adm1Name')) {
                obj['adm1Name'] = ApiClient.convertToType(data['adm1Name'], 'String');
            }
            if (data.hasOwnProperty('adm2Code')) {
                obj['adm2Code'] = ApiClient.convertToType(data['adm2Code'], 'String');
            }
            if (data.hasOwnProperty('adm2Name')) {
                obj['adm2Name'] = ApiClient.convertToType(data['adm2Name'], 'String');
            }
            if (data.hasOwnProperty('adm3Code')) {
                obj['adm3Code'] = ApiClient.convertToType(data['adm3Code'], 'String');
            }
            if (data.hasOwnProperty('adm3Name')) {
                obj['adm3Name'] = ApiClient.convertToType(data['adm3Name'], 'String');
            }
            if (data.hasOwnProperty('adm4Code')) {
                obj['adm4Code'] = ApiClient.convertToType(data['adm4Code'], 'String');
            }
            if (data.hasOwnProperty('adm4Name')) {
                obj['adm4Name'] = ApiClient.convertToType(data['adm4Name'], 'String');
            }
            if (data.hasOwnProperty('adm5Code')) {
                obj['adm5Code'] = ApiClient.convertToType(data['adm5Code'], 'String');
            }
            if (data.hasOwnProperty('adm5Name')) {
                obj['adm5Name'] = ApiClient.convertToType(data['adm5Name'], 'String');
            }
            if (data.hasOwnProperty('amenity')) {
                obj['amenity'] = ApiClient.convertToType(data['amenity'], 'String');
            }
            if (data.hasOwnProperty('area')) {
                obj['area'] = ApiClient.convertToType(data['area'], 'Number');
            }
            if (data.hasOwnProperty('asciiName')) {
                obj['asciiName'] = ApiClient.convertToType(data['asciiName'], 'String');
            }
            if (data.hasOwnProperty('capitalName')) {
                obj['capitalName'] = ApiClient.convertToType(data['capitalName'], 'String');
            }
            if (data.hasOwnProperty('continent')) {
                obj['continent'] = ApiClient.convertToType(data['continent'], 'String');
            }
            if (data.hasOwnProperty('countryCode')) {
                obj['countryCode'] = ApiClient.convertToType(data['countryCode'], 'String');
            }
            if (data.hasOwnProperty('country_flag_url')) {
                obj['country_flag_url'] = ApiClient.convertToType(data['country_flag_url'], 'String');
            }
            if (data.hasOwnProperty('currencyCode')) {
                obj['currencyCode'] = ApiClient.convertToType(data['currencyCode'], 'String');
            }
            if (data.hasOwnProperty('currencyName')) {
                obj['currencyName'] = ApiClient.convertToType(data['currencyName'], 'String');
            }
            if (data.hasOwnProperty('distance')) {
                obj['distance'] = ApiClient.convertToType(data['distance'], 'Number');
            }
            if (data.hasOwnProperty('elevation')) {
                obj['elevation'] = ApiClient.convertToType(data['elevation'], 'Number');
            }
            if (data.hasOwnProperty('equivalentFipsCode')) {
                obj['equivalentFipsCode'] = ApiClient.convertToType(data['equivalentFipsCode'], 'String');
            }
            if (data.hasOwnProperty('featureClass')) {
                obj['featureClass'] = ApiClient.convertToType(data['featureClass'], 'String');
            }
            if (data.hasOwnProperty('featureCode')) {
                obj['featureCode'] = ApiClient.convertToType(data['featureCode'], 'String');
            }
            if (data.hasOwnProperty('featureId')) {
                obj['featureId'] = ApiClient.convertToType(data['featureId'], 'Number');
            }
            if (data.hasOwnProperty('fipsCode')) {
                obj['fipsCode'] = ApiClient.convertToType(data['fipsCode'], 'String');
            }
            if (data.hasOwnProperty('fullyQualifiedAddress')) {
                obj['fullyQualifiedAddress'] = ApiClient.convertToType(data['fullyQualifiedAddress'], 'String');
            }
            if (data.hasOwnProperty('google_map_url')) {
                obj['google_map_url'] = ApiClient.convertToType(data['google_map_url'], 'String');
            }
            if (data.hasOwnProperty('gtopo30')) {
                obj['gtopo30'] = ApiClient.convertToType(data['gtopo30'], 'Number');
            }
            if (data.hasOwnProperty('isIn')) {
                obj['isIn'] = ApiClient.convertToType(data['isIn'], 'String');
            }
            if (data.hasOwnProperty('isInAdm')) {
                obj['isInAdm'] = ApiClient.convertToType(data['isInAdm'], 'String');
            }
            if (data.hasOwnProperty('isInPlace')) {
                obj['isInPlace'] = ApiClient.convertToType(data['isInPlace'], 'String');
            }
            if (data.hasOwnProperty('isInZip')) {
                obj['isInZip'] = ApiClient.convertToType(data['isInZip'], 'String');
            }
            if (data.hasOwnProperty('iso3166Alpha2Code')) {
                obj['iso3166Alpha2Code'] = ApiClient.convertToType(data['iso3166Alpha2Code'], 'String');
            }
            if (data.hasOwnProperty('iso3166Alpha3Code')) {
                obj['iso3166Alpha3Code'] = ApiClient.convertToType(data['iso3166Alpha3Code'], 'String');
            }
            if (data.hasOwnProperty('iso3166NumericCode')) {
                obj['iso3166NumericCode'] = ApiClient.convertToType(data['iso3166NumericCode'], 'String');
            }
            if (data.hasOwnProperty('lat')) {
                obj['lat'] = ApiClient.convertToType(data['lat'], 'Number');
            }
            if (data.hasOwnProperty('length')) {
                obj['length'] = ApiClient.convertToType(data['length'], 'Number');
            }
            if (data.hasOwnProperty('level')) {
                obj['level'] = ApiClient.convertToType(data['level'], 'Number');
            }
            if (data.hasOwnProperty('lng')) {
                obj['lng'] = ApiClient.convertToType(data['lng'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('oneWay')) {
                obj['oneWay'] = ApiClient.convertToType(data['oneWay'], 'Boolean');
            }
            if (data.hasOwnProperty('openstreetmapId')) {
                obj['openstreetmapId'] = ApiClient.convertToType(data['openstreetmapId'], 'Number');
            }
            if (data.hasOwnProperty('openstreetmap_map_url')) {
                obj['openstreetmap_map_url'] = ApiClient.convertToType(data['openstreetmap_map_url'], 'String');
            }
            if (data.hasOwnProperty('phonePrefix')) {
                obj['phonePrefix'] = ApiClient.convertToType(data['phonePrefix'], 'String');
            }
            if (data.hasOwnProperty('placeType')) {
                obj['placeType'] = ApiClient.convertToType(data['placeType'], 'String');
            }
            if (data.hasOwnProperty('population')) {
                obj['population'] = ApiClient.convertToType(data['population'], 'Number');
            }
            if (data.hasOwnProperty('postalCodeMask')) {
                obj['postalCodeMask'] = ApiClient.convertToType(data['postalCodeMask'], 'String');
            }
            if (data.hasOwnProperty('postalCodeRegex')) {
                obj['postalCodeRegex'] = ApiClient.convertToType(data['postalCodeRegex'], 'String');
            }
            if (data.hasOwnProperty('streetType')) {
                obj['streetType'] = ApiClient.convertToType(data['streetType'], 'String');
            }
            if (data.hasOwnProperty('timezone')) {
                obj['timezone'] = ApiClient.convertToType(data['timezone'], 'String');
            }
            if (data.hasOwnProperty('tld')) {
                obj['tld'] = ApiClient.convertToType(data['tld'], 'String');
            }
            if (data.hasOwnProperty('yahoo_map_url')) {
                obj['yahoo_map_url'] = ApiClient.convertToType(data['yahoo_map_url'], 'String');
            }
            if (data.hasOwnProperty('zipCodes')) {
                obj['zipCodes'] = ApiClient.convertToType(data['zipCodes'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GisFeatureDistance</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GisFeatureDistance</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['adm1Code'] && !(typeof data['adm1Code'] === 'string' || data['adm1Code'] instanceof String)) {
            throw new Error("Expected the field `adm1Code` to be a primitive type in the JSON string but got " + data['adm1Code']);
        }
        // ensure the json data is a string
        if (data['adm1Name'] && !(typeof data['adm1Name'] === 'string' || data['adm1Name'] instanceof String)) {
            throw new Error("Expected the field `adm1Name` to be a primitive type in the JSON string but got " + data['adm1Name']);
        }
        // ensure the json data is a string
        if (data['adm2Code'] && !(typeof data['adm2Code'] === 'string' || data['adm2Code'] instanceof String)) {
            throw new Error("Expected the field `adm2Code` to be a primitive type in the JSON string but got " + data['adm2Code']);
        }
        // ensure the json data is a string
        if (data['adm2Name'] && !(typeof data['adm2Name'] === 'string' || data['adm2Name'] instanceof String)) {
            throw new Error("Expected the field `adm2Name` to be a primitive type in the JSON string but got " + data['adm2Name']);
        }
        // ensure the json data is a string
        if (data['adm3Code'] && !(typeof data['adm3Code'] === 'string' || data['adm3Code'] instanceof String)) {
            throw new Error("Expected the field `adm3Code` to be a primitive type in the JSON string but got " + data['adm3Code']);
        }
        // ensure the json data is a string
        if (data['adm3Name'] && !(typeof data['adm3Name'] === 'string' || data['adm3Name'] instanceof String)) {
            throw new Error("Expected the field `adm3Name` to be a primitive type in the JSON string but got " + data['adm3Name']);
        }
        // ensure the json data is a string
        if (data['adm4Code'] && !(typeof data['adm4Code'] === 'string' || data['adm4Code'] instanceof String)) {
            throw new Error("Expected the field `adm4Code` to be a primitive type in the JSON string but got " + data['adm4Code']);
        }
        // ensure the json data is a string
        if (data['adm4Name'] && !(typeof data['adm4Name'] === 'string' || data['adm4Name'] instanceof String)) {
            throw new Error("Expected the field `adm4Name` to be a primitive type in the JSON string but got " + data['adm4Name']);
        }
        // ensure the json data is a string
        if (data['adm5Code'] && !(typeof data['adm5Code'] === 'string' || data['adm5Code'] instanceof String)) {
            throw new Error("Expected the field `adm5Code` to be a primitive type in the JSON string but got " + data['adm5Code']);
        }
        // ensure the json data is a string
        if (data['adm5Name'] && !(typeof data['adm5Name'] === 'string' || data['adm5Name'] instanceof String)) {
            throw new Error("Expected the field `adm5Name` to be a primitive type in the JSON string but got " + data['adm5Name']);
        }
        // ensure the json data is a string
        if (data['amenity'] && !(typeof data['amenity'] === 'string' || data['amenity'] instanceof String)) {
            throw new Error("Expected the field `amenity` to be a primitive type in the JSON string but got " + data['amenity']);
        }
        // ensure the json data is a string
        if (data['asciiName'] && !(typeof data['asciiName'] === 'string' || data['asciiName'] instanceof String)) {
            throw new Error("Expected the field `asciiName` to be a primitive type in the JSON string but got " + data['asciiName']);
        }
        // ensure the json data is a string
        if (data['capitalName'] && !(typeof data['capitalName'] === 'string' || data['capitalName'] instanceof String)) {
            throw new Error("Expected the field `capitalName` to be a primitive type in the JSON string but got " + data['capitalName']);
        }
        // ensure the json data is a string
        if (data['continent'] && !(typeof data['continent'] === 'string' || data['continent'] instanceof String)) {
            throw new Error("Expected the field `continent` to be a primitive type in the JSON string but got " + data['continent']);
        }
        // ensure the json data is a string
        if (data['countryCode'] && !(typeof data['countryCode'] === 'string' || data['countryCode'] instanceof String)) {
            throw new Error("Expected the field `countryCode` to be a primitive type in the JSON string but got " + data['countryCode']);
        }
        // ensure the json data is a string
        if (data['country_flag_url'] && !(typeof data['country_flag_url'] === 'string' || data['country_flag_url'] instanceof String)) {
            throw new Error("Expected the field `country_flag_url` to be a primitive type in the JSON string but got " + data['country_flag_url']);
        }
        // ensure the json data is a string
        if (data['currencyCode'] && !(typeof data['currencyCode'] === 'string' || data['currencyCode'] instanceof String)) {
            throw new Error("Expected the field `currencyCode` to be a primitive type in the JSON string but got " + data['currencyCode']);
        }
        // ensure the json data is a string
        if (data['currencyName'] && !(typeof data['currencyName'] === 'string' || data['currencyName'] instanceof String)) {
            throw new Error("Expected the field `currencyName` to be a primitive type in the JSON string but got " + data['currencyName']);
        }
        // ensure the json data is a string
        if (data['equivalentFipsCode'] && !(typeof data['equivalentFipsCode'] === 'string' || data['equivalentFipsCode'] instanceof String)) {
            throw new Error("Expected the field `equivalentFipsCode` to be a primitive type in the JSON string but got " + data['equivalentFipsCode']);
        }
        // ensure the json data is a string
        if (data['featureClass'] && !(typeof data['featureClass'] === 'string' || data['featureClass'] instanceof String)) {
            throw new Error("Expected the field `featureClass` to be a primitive type in the JSON string but got " + data['featureClass']);
        }
        // ensure the json data is a string
        if (data['featureCode'] && !(typeof data['featureCode'] === 'string' || data['featureCode'] instanceof String)) {
            throw new Error("Expected the field `featureCode` to be a primitive type in the JSON string but got " + data['featureCode']);
        }
        // ensure the json data is a string
        if (data['fipsCode'] && !(typeof data['fipsCode'] === 'string' || data['fipsCode'] instanceof String)) {
            throw new Error("Expected the field `fipsCode` to be a primitive type in the JSON string but got " + data['fipsCode']);
        }
        // ensure the json data is a string
        if (data['fullyQualifiedAddress'] && !(typeof data['fullyQualifiedAddress'] === 'string' || data['fullyQualifiedAddress'] instanceof String)) {
            throw new Error("Expected the field `fullyQualifiedAddress` to be a primitive type in the JSON string but got " + data['fullyQualifiedAddress']);
        }
        // ensure the json data is a string
        if (data['google_map_url'] && !(typeof data['google_map_url'] === 'string' || data['google_map_url'] instanceof String)) {
            throw new Error("Expected the field `google_map_url` to be a primitive type in the JSON string but got " + data['google_map_url']);
        }
        // ensure the json data is a string
        if (data['isIn'] && !(typeof data['isIn'] === 'string' || data['isIn'] instanceof String)) {
            throw new Error("Expected the field `isIn` to be a primitive type in the JSON string but got " + data['isIn']);
        }
        // ensure the json data is a string
        if (data['isInAdm'] && !(typeof data['isInAdm'] === 'string' || data['isInAdm'] instanceof String)) {
            throw new Error("Expected the field `isInAdm` to be a primitive type in the JSON string but got " + data['isInAdm']);
        }
        // ensure the json data is a string
        if (data['isInPlace'] && !(typeof data['isInPlace'] === 'string' || data['isInPlace'] instanceof String)) {
            throw new Error("Expected the field `isInPlace` to be a primitive type in the JSON string but got " + data['isInPlace']);
        }
        // ensure the json data is a string
        if (data['isInZip'] && !(typeof data['isInZip'] === 'string' || data['isInZip'] instanceof String)) {
            throw new Error("Expected the field `isInZip` to be a primitive type in the JSON string but got " + data['isInZip']);
        }
        // ensure the json data is a string
        if (data['iso3166Alpha2Code'] && !(typeof data['iso3166Alpha2Code'] === 'string' || data['iso3166Alpha2Code'] instanceof String)) {
            throw new Error("Expected the field `iso3166Alpha2Code` to be a primitive type in the JSON string but got " + data['iso3166Alpha2Code']);
        }
        // ensure the json data is a string
        if (data['iso3166Alpha3Code'] && !(typeof data['iso3166Alpha3Code'] === 'string' || data['iso3166Alpha3Code'] instanceof String)) {
            throw new Error("Expected the field `iso3166Alpha3Code` to be a primitive type in the JSON string but got " + data['iso3166Alpha3Code']);
        }
        // ensure the json data is a string
        if (data['iso3166NumericCode'] && !(typeof data['iso3166NumericCode'] === 'string' || data['iso3166NumericCode'] instanceof String)) {
            throw new Error("Expected the field `iso3166NumericCode` to be a primitive type in the JSON string but got " + data['iso3166NumericCode']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['openstreetmap_map_url'] && !(typeof data['openstreetmap_map_url'] === 'string' || data['openstreetmap_map_url'] instanceof String)) {
            throw new Error("Expected the field `openstreetmap_map_url` to be a primitive type in the JSON string but got " + data['openstreetmap_map_url']);
        }
        // ensure the json data is a string
        if (data['phonePrefix'] && !(typeof data['phonePrefix'] === 'string' || data['phonePrefix'] instanceof String)) {
            throw new Error("Expected the field `phonePrefix` to be a primitive type in the JSON string but got " + data['phonePrefix']);
        }
        // ensure the json data is a string
        if (data['placeType'] && !(typeof data['placeType'] === 'string' || data['placeType'] instanceof String)) {
            throw new Error("Expected the field `placeType` to be a primitive type in the JSON string but got " + data['placeType']);
        }
        // ensure the json data is a string
        if (data['postalCodeMask'] && !(typeof data['postalCodeMask'] === 'string' || data['postalCodeMask'] instanceof String)) {
            throw new Error("Expected the field `postalCodeMask` to be a primitive type in the JSON string but got " + data['postalCodeMask']);
        }
        // ensure the json data is a string
        if (data['postalCodeRegex'] && !(typeof data['postalCodeRegex'] === 'string' || data['postalCodeRegex'] instanceof String)) {
            throw new Error("Expected the field `postalCodeRegex` to be a primitive type in the JSON string but got " + data['postalCodeRegex']);
        }
        // ensure the json data is a string
        if (data['streetType'] && !(typeof data['streetType'] === 'string' || data['streetType'] instanceof String)) {
            throw new Error("Expected the field `streetType` to be a primitive type in the JSON string but got " + data['streetType']);
        }
        // ensure the json data is a string
        if (data['timezone'] && !(typeof data['timezone'] === 'string' || data['timezone'] instanceof String)) {
            throw new Error("Expected the field `timezone` to be a primitive type in the JSON string but got " + data['timezone']);
        }
        // ensure the json data is a string
        if (data['tld'] && !(typeof data['tld'] === 'string' || data['tld'] instanceof String)) {
            throw new Error("Expected the field `tld` to be a primitive type in the JSON string but got " + data['tld']);
        }
        // ensure the json data is a string
        if (data['yahoo_map_url'] && !(typeof data['yahoo_map_url'] === 'string' || data['yahoo_map_url'] instanceof String)) {
            throw new Error("Expected the field `yahoo_map_url` to be a primitive type in the JSON string but got " + data['yahoo_map_url']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['zipCodes'])) {
            throw new Error("Expected the field `zipCodes` to be an array in the JSON data but got " + data['zipCodes']);
        }

        return true;
    }


}



/**
 * The internal code for the administrative division of level 1
 * @member {String} adm1Code
 */
GisFeatureDistance.prototype['adm1Code'] = undefined;

/**
 * The name of the administrative division of level 1
 * @member {String} adm1Name
 */
GisFeatureDistance.prototype['adm1Name'] = undefined;

/**
 * The internal code for the administrative division of level 2
 * @member {String} adm2Code
 */
GisFeatureDistance.prototype['adm2Code'] = undefined;

/**
 * The name of the administrative division of level 2
 * @member {String} adm2Name
 */
GisFeatureDistance.prototype['adm2Name'] = undefined;

/**
 * The internal code for the administrative division of level 3
 * @member {String} adm3Code
 */
GisFeatureDistance.prototype['adm3Code'] = undefined;

/**
 * The name of the administrative division of level 3
 * @member {String} adm3Name
 */
GisFeatureDistance.prototype['adm3Name'] = undefined;

/**
 * The internal code for the administrative division of level 4
 * @member {String} adm4Code
 */
GisFeatureDistance.prototype['adm4Code'] = undefined;

/**
 * The name of the administrative division of level 4
 * @member {String} adm4Name
 */
GisFeatureDistance.prototype['adm4Name'] = undefined;

/**
 * The internal code for the administrative division of level 5
 * @member {String} adm5Code
 */
GisFeatureDistance.prototype['adm5Code'] = undefined;

/**
 * The name of the administrative division of level 5
 * @member {String} adm5Name
 */
GisFeatureDistance.prototype['adm5Name'] = undefined;

/**
 * Informations on category of OpenStreetMap POIs
 * @member {String} amenity
 */
GisFeatureDistance.prototype['amenity'] = undefined;

/**
 * The area of the feature
 * @member {Number} area
 */
GisFeatureDistance.prototype['area'] = undefined;

/**
 * The ASCII name of the feature
 * @member {String} asciiName
 */
GisFeatureDistance.prototype['asciiName'] = undefined;

/**
 * The Capital of the country
 * @member {String} capitalName
 */
GisFeatureDistance.prototype['capitalName'] = undefined;

/**
 * The continent the country belongs
 * @member {String} continent
 */
GisFeatureDistance.prototype['continent'] = undefined;

/**
 * The ISO 3166 country code
 * @member {String} countryCode
 */
GisFeatureDistance.prototype['countryCode'] = undefined;

/**
 * The relative URL to get the country flag image
 * @member {String} country_flag_url
 */
GisFeatureDistance.prototype['country_flag_url'] = undefined;

/**
 * The Currency code (ISO_4217) of the country
 * @member {String} currencyCode
 */
GisFeatureDistance.prototype['currencyCode'] = undefined;

/**
 * The Currency name of the country
 * @member {String} currencyName
 */
GisFeatureDistance.prototype['currencyName'] = undefined;

/**
 * The distance beetween the point and the gisFeature in meters
 * @member {Number} distance
 */
GisFeatureDistance.prototype['distance'] = undefined;

/**
 * The elevation in meters
 * @member {Number} elevation
 */
GisFeatureDistance.prototype['elevation'] = undefined;

/**
 * The fips Code of the country when no code are available
 * @member {String} equivalentFipsCode
 */
GisFeatureDistance.prototype['equivalentFipsCode'] = undefined;

/**
 * The feature Class.
 * @member {String} featureClass
 */
GisFeatureDistance.prototype['featureClass'] = undefined;

/**
 * The feature Code.
 * @member {String} featureCode
 */
GisFeatureDistance.prototype['featureCode'] = undefined;

/**
 * A unique id that identify the feature
 * @member {Number} featureId
 */
GisFeatureDistance.prototype['featureId'] = undefined;

/**
 * The fips Code of the country
 * @member {String} fipsCode
 */
GisFeatureDistance.prototype['fipsCode'] = undefined;

/**
 * NOT USED YET
 * @member {String} fullyQualifiedAddress
 */
GisFeatureDistance.prototype['fullyQualifiedAddress'] = undefined;

/**
 * The URL to get the location on Google Map
 * @member {String} google_map_url
 */
GisFeatureDistance.prototype['google_map_url'] = undefined;

/**
 * Average elevation of 30'x30' (ca 900mx900m) area in meters
 * @member {Number} gtopo30
 */
GisFeatureDistance.prototype['gtopo30'] = undefined;

/**
 * Information of the city where the street / POI is (depends on openstreetmap 'is_in' field), the city in general (only for placetype street)
 * @member {String} isIn
 */
GisFeatureDistance.prototype['isIn'] = undefined;

/**
 * Information of the administration division where the street / POI is. 
 * @member {String} isInAdm
 */
GisFeatureDistance.prototype['isInAdm'] = undefined;

/**
 * Information of the place where the street / POI is (quarter, common place). Generally a place at a lower level than city
 * @member {String} isInPlace
 */
GisFeatureDistance.prototype['isInPlace'] = undefined;

/**
 * Information of the zipcode where the street / POI is\"
 * @member {String} isInZip
 */
GisFeatureDistance.prototype['isInZip'] = undefined;

/**
 * The iso 3166 Alpha 2 code of the country
 * @member {String} iso3166Alpha2Code
 */
GisFeatureDistance.prototype['iso3166Alpha2Code'] = undefined;

/**
 * The iso 3166 Alpha 3 code of the country
 * @member {String} iso3166Alpha3Code
 */
GisFeatureDistance.prototype['iso3166Alpha3Code'] = undefined;

/**
 * The iso 3166 numeric code of the country
 * @member {String} iso3166NumericCode
 */
GisFeatureDistance.prototype['iso3166NumericCode'] = undefined;

/**
 * The latitude (north-south)
 * @member {Number} lat
 */
GisFeatureDistance.prototype['lat'] = undefined;

/**
 * length of the street
 * @member {Number} length
 */
GisFeatureDistance.prototype['length'] = undefined;

/**
 * The level of the Administrative division (1-5)
 * @member {Number} level
 */
GisFeatureDistance.prototype['level'] = undefined;

/**
 * The longitude (east-West)
 * @member {Number} lng
 */
GisFeatureDistance.prototype['lng'] = undefined;

/**
 * The name of the feature
 * @member {String} name
 */
GisFeatureDistance.prototype['name'] = undefined;

/**
 * Wether the street is oneway or not
 * @member {Boolean} oneWay
 */
GisFeatureDistance.prototype['oneWay'] = undefined;

/**
 * the id of the openstreetmap element
 * @member {Number} openstreetmapId
 */
GisFeatureDistance.prototype['openstreetmapId'] = undefined;

/**
 * The URL to get the location on Openstreetmap Map
 * @member {String} openstreetmap_map_url
 */
GisFeatureDistance.prototype['openstreetmap_map_url'] = undefined;

/**
 * The phone prefix of the country
 * @member {String} phonePrefix
 */
GisFeatureDistance.prototype['phonePrefix'] = undefined;

/**
 * The Type of Feature see faq
 * @member {String} placeType
 */
GisFeatureDistance.prototype['placeType'] = undefined;

/**
 * How many people lives in this feature
 * @member {Number} population
 */
GisFeatureDistance.prototype['population'] = undefined;

/**
 * The mask that all postal code of the country matches
 * @member {String} postalCodeMask
 */
GisFeatureDistance.prototype['postalCodeMask'] = undefined;

/**
 * The regexp that all zipcode/postalcode of the country matches
 * @member {String} postalCodeRegex
 */
GisFeatureDistance.prototype['postalCodeRegex'] = undefined;

/**
 * the type of the street
 * @member {String} streetType
 */
GisFeatureDistance.prototype['streetType'] = undefined;

/**
 * The time zone (e.g : Europe/Paris)
 * @member {String} timezone
 */
GisFeatureDistance.prototype['timezone'] = undefined;

/**
 * top-level domain name, (last part of an Internet domain name) of the country
 * @member {String} tld
 */
GisFeatureDistance.prototype['tld'] = undefined;

/**
 * The URL to get the location on Yahoo Map
 * @member {String} yahoo_map_url
 */
GisFeatureDistance.prototype['yahoo_map_url'] = undefined;

/**
 * The zipcodes (only for city and city subdivision), one node by zipcode
 * @member {Array.<String>} zipCodes
 */
GisFeatureDistance.prototype['zipCodes'] = undefined;






export default GisFeatureDistance;

