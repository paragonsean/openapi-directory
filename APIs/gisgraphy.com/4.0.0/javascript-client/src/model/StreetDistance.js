/**
 * Gisgraphy webservices
 * Since 2006, [Gisgraphy](http://www.gisgraphy.com) is a free, open source framework that offers the possibility to do geolocalisation and geocoding via Java APIs or REST webservices. Because geocoding is nothing without data, it provides an easy to use importer that will automatically download and import the necessary (free) data to your local database ([OpenStreetMap](http://www.openstreetmap.org/), [Geonames](http://www.geonames.org/) and [Quattroshapes](http://www.quattroshapes.com/): more than 100 million entries). You can also add your own data with the Web interface or the importer connectors provided. Gisgraphy is production ready, and has been designed to be scalable(load balanced), performant and used in other languages than just java : results can be output in XML, JSON, PHP, Python, Ruby, YAML, GeoRSS, and Atom. One of the most popular GPS tracking System (OpenGTS) also includes a Gisgraphy client...Gisgraphy is a framework. As a result it's flexible and powerful enough to be used in a lot of different use cases. [read more](http://www.gisgraphy.com)   if you use the premium servers, you can use the api key to test the webservices 
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The StreetDistance model module.
 * @module model/StreetDistance
 * @version 4.0.0
 */
class StreetDistance {
    /**
     * Constructs a new <code>StreetDistance</code>.
     * @alias module:model/StreetDistance
     */
    constructor() { 
        
        StreetDistance.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>StreetDistance</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/StreetDistance} obj Optional instance to populate.
     * @return {module:model/StreetDistance} The populated <code>StreetDistance</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new StreetDistance();

            if (data.hasOwnProperty('countryCode')) {
                obj['countryCode'] = ApiClient.convertToType(data['countryCode'], 'String');
            }
            if (data.hasOwnProperty('distance')) {
                obj['distance'] = ApiClient.convertToType(data['distance'], 'Number');
            }
            if (data.hasOwnProperty('fullyQualifiedAddress')) {
                obj['fullyQualifiedAddress'] = ApiClient.convertToType(data['fullyQualifiedAddress'], 'String');
            }
            if (data.hasOwnProperty('gid')) {
                obj['gid'] = ApiClient.convertToType(data['gid'], 'Number');
            }
            if (data.hasOwnProperty('isIn')) {
                obj['isIn'] = ApiClient.convertToType(data['isIn'], 'String');
            }
            if (data.hasOwnProperty('isInAdm')) {
                obj['isInAdm'] = ApiClient.convertToType(data['isInAdm'], 'String');
            }
            if (data.hasOwnProperty('isInPlace')) {
                obj['isInPlace'] = ApiClient.convertToType(data['isInPlace'], 'String');
            }
            if (data.hasOwnProperty('isInZip')) {
                obj['isInZip'] = ApiClient.convertToType(data['isInZip'], 'String');
            }
            if (data.hasOwnProperty('lat')) {
                obj['lat'] = ApiClient.convertToType(data['lat'], 'Number');
            }
            if (data.hasOwnProperty('length')) {
                obj['length'] = ApiClient.convertToType(data['length'], 'Number');
            }
            if (data.hasOwnProperty('lng')) {
                obj['lng'] = ApiClient.convertToType(data['lng'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('oneWay')) {
                obj['oneWay'] = ApiClient.convertToType(data['oneWay'], 'Boolean');
            }
            if (data.hasOwnProperty('openstreetmapId')) {
                obj['openstreetmapId'] = ApiClient.convertToType(data['openstreetmapId'], 'Number');
            }
            if (data.hasOwnProperty('streetType')) {
                obj['streetType'] = ApiClient.convertToType(data['streetType'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>StreetDistance</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>StreetDistance</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['countryCode'] && !(typeof data['countryCode'] === 'string' || data['countryCode'] instanceof String)) {
            throw new Error("Expected the field `countryCode` to be a primitive type in the JSON string but got " + data['countryCode']);
        }
        // ensure the json data is a string
        if (data['fullyQualifiedAddress'] && !(typeof data['fullyQualifiedAddress'] === 'string' || data['fullyQualifiedAddress'] instanceof String)) {
            throw new Error("Expected the field `fullyQualifiedAddress` to be a primitive type in the JSON string but got " + data['fullyQualifiedAddress']);
        }
        // ensure the json data is a string
        if (data['isIn'] && !(typeof data['isIn'] === 'string' || data['isIn'] instanceof String)) {
            throw new Error("Expected the field `isIn` to be a primitive type in the JSON string but got " + data['isIn']);
        }
        // ensure the json data is a string
        if (data['isInAdm'] && !(typeof data['isInAdm'] === 'string' || data['isInAdm'] instanceof String)) {
            throw new Error("Expected the field `isInAdm` to be a primitive type in the JSON string but got " + data['isInAdm']);
        }
        // ensure the json data is a string
        if (data['isInPlace'] && !(typeof data['isInPlace'] === 'string' || data['isInPlace'] instanceof String)) {
            throw new Error("Expected the field `isInPlace` to be a primitive type in the JSON string but got " + data['isInPlace']);
        }
        // ensure the json data is a string
        if (data['isInZip'] && !(typeof data['isInZip'] === 'string' || data['isInZip'] instanceof String)) {
            throw new Error("Expected the field `isInZip` to be a primitive type in the JSON string but got " + data['isInZip']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['streetType'] && !(typeof data['streetType'] === 'string' || data['streetType'] instanceof String)) {
            throw new Error("Expected the field `streetType` to be a primitive type in the JSON string but got " + data['streetType']);
        }

        return true;
    }


}



/**
 * The ISO 3166 country code
 * @member {String} countryCode
 */
StreetDistance.prototype['countryCode'] = undefined;

/**
 * The distance between the point and the nearest point to the street in meters
 * @member {Number} distance
 */
StreetDistance.prototype['distance'] = undefined;

/**
 * NOT USED YET
 * @member {String} fullyQualifiedAddress
 */
StreetDistance.prototype['fullyQualifiedAddress'] = undefined;

/**
 * Unique id of the street, it is unique between GeoNames and OpenStreetMap
 * @member {Number} gid
 */
StreetDistance.prototype['gid'] = undefined;

/**
 * Information on the city where the street is (depends on OpenStreetMap 'is_in' field), the city in general
 * @member {String} isIn
 */
StreetDistance.prototype['isIn'] = undefined;

/**
 * Information of the administration division where the street is.
 * @member {String} isInAdm
 */
StreetDistance.prototype['isInAdm'] = undefined;

/**
 * Information on the place where the street is (quater, common place). Generally a place at a lower level than city
 * @member {String} isInPlace
 */
StreetDistance.prototype['isInPlace'] = undefined;

/**
 * Information of the zipcode where the street / POI is (often fill for placetype street)
 * @member {String} isInZip
 */
StreetDistance.prototype['isInZip'] = undefined;

/**
 * The latitude of the middle of the street(north-south)
 * @member {Number} lat
 */
StreetDistance.prototype['lat'] = undefined;

/**
 * length of the street in meters
 * @member {Number} length
 */
StreetDistance.prototype['length'] = undefined;

/**
 * The longitude of the middle of the street(east-west)
 * @member {Number} lng
 */
StreetDistance.prototype['lng'] = undefined;

/**
 * The name of the street
 * @member {String} name
 */
StreetDistance.prototype['name'] = undefined;

/**
 * Whether the street is a one way street or not
 * @member {Boolean} oneWay
 */
StreetDistance.prototype['oneWay'] = undefined;

/**
 * OpenStreetMap unique id of the street
 * @member {Number} openstreetmapId
 */
StreetDistance.prototype['openstreetmapId'] = undefined;

/**
 * The type of the street (see street type list)
 * @member {String} streetType
 */
StreetDistance.prototype['streetType'] = undefined;






export default StreetDistance;

