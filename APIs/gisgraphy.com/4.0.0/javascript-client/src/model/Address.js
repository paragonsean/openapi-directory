/**
 * Gisgraphy webservices
 * Since 2006, [Gisgraphy](http://www.gisgraphy.com) is a free, open source framework that offers the possibility to do geolocalisation and geocoding via Java APIs or REST webservices. Because geocoding is nothing without data, it provides an easy to use importer that will automatically download and import the necessary (free) data to your local database ([OpenStreetMap](http://www.openstreetmap.org/), [Geonames](http://www.geonames.org/) and [Quattroshapes](http://www.quattroshapes.com/): more than 100 million entries). You can also add your own data with the Web interface or the importer connectors provided. Gisgraphy is production ready, and has been designed to be scalable(load balanced), performant and used in other languages than just java : results can be output in XML, JSON, PHP, Python, Ruby, YAML, GeoRSS, and Atom. One of the most popular GPS tracking System (OpenGTS) also includes a Gisgraphy client...Gisgraphy is a framework. As a result it's flexible and powerful enough to be used in a lot of different use cases. [read more](http://www.gisgraphy.com)   if you use the premium servers, you can use the api key to test the webservices 
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Address model module.
 * @module model/Address
 * @version 4.0.0
 */
class Address {
    /**
     * Constructs a new <code>Address</code>.
     * @alias module:model/Address
     */
    constructor() { 
        
        Address.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Address</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Address} obj Optional instance to populate.
     * @return {module:model/Address} The populated <code>Address</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Address();

            if (data.hasOwnProperty('POBox')) {
                obj['POBox'] = ApiClient.convertToType(data['POBox'], 'String');
            }
            if (data.hasOwnProperty('POBoxAgency')) {
                obj['POBoxAgency'] = ApiClient.convertToType(data['POBoxAgency'], 'String');
            }
            if (data.hasOwnProperty('POBoxInfo')) {
                obj['POBoxInfo'] = ApiClient.convertToType(data['POBoxInfo'], 'String');
            }
            if (data.hasOwnProperty('adm1NameAlternatesLocalized')) {
                obj['adm1NameAlternatesLocalized'] = ApiClient.convertToType(data['adm1NameAlternatesLocalized'], {'String': ['String']});
            }
            if (data.hasOwnProperty('adm2NameAlternatesLocalized')) {
                obj['adm2NameAlternatesLocalized'] = ApiClient.convertToType(data['adm2NameAlternatesLocalized'], {'String': ['String']});
            }
            if (data.hasOwnProperty('block')) {
                obj['block'] = ApiClient.convertToType(data['block'], 'String');
            }
            if (data.hasOwnProperty('city')) {
                obj['city'] = ApiClient.convertToType(data['city'], 'String');
            }
            if (data.hasOwnProperty('citySubdivision')) {
                obj['citySubdivision'] = ApiClient.convertToType(data['citySubdivision'], 'String');
            }
            if (data.hasOwnProperty('civicNumberSuffix')) {
                obj['civicNumberSuffix'] = ApiClient.convertToType(data['civicNumberSuffix'], 'String');
            }
            if (data.hasOwnProperty('confidence')) {
                obj['confidence'] = ApiClient.convertToType(data['confidence'], 'String');
            }
            if (data.hasOwnProperty('country')) {
                obj['country'] = ApiClient.convertToType(data['country'], 'String');
            }
            if (data.hasOwnProperty('countryNameAlternatesLocalized')) {
                obj['countryNameAlternatesLocalized'] = ApiClient.convertToType(data['countryNameAlternatesLocalized'], {'String': ['String']});
            }
            if (data.hasOwnProperty('countrycode')) {
                obj['countrycode'] = ApiClient.convertToType(data['countrycode'], 'String');
            }
            if (data.hasOwnProperty('dependentLocality')) {
                obj['dependentLocality'] = ApiClient.convertToType(data['dependentLocality'], 'String');
            }
            if (data.hasOwnProperty('distance')) {
                obj['distance'] = ApiClient.convertToType(data['distance'], 'Number');
            }
            if (data.hasOwnProperty('district')) {
                obj['district'] = ApiClient.convertToType(data['district'], 'String');
            }
            if (data.hasOwnProperty('extraInfo')) {
                obj['extraInfo'] = ApiClient.convertToType(data['extraInfo'], 'String');
            }
            if (data.hasOwnProperty('floor')) {
                obj['floor'] = ApiClient.convertToType(data['floor'], 'String');
            }
            if (data.hasOwnProperty('geocodinglevel')) {
                obj['geocodinglevel'] = ApiClient.convertToType(data['geocodinglevel'], 'String');
            }
            if (data.hasOwnProperty('houseNumber')) {
                obj['houseNumber'] = ApiClient.convertToType(data['houseNumber'], 'String');
            }
            if (data.hasOwnProperty('houseNumberInfo')) {
                obj['houseNumberInfo'] = ApiClient.convertToType(data['houseNumberInfo'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('lat')) {
                obj['lat'] = ApiClient.convertToType(data['lat'], 'Number');
            }
            if (data.hasOwnProperty('lng')) {
                obj['lng'] = ApiClient.convertToType(data['lng'], 'Number');
            }
            if (data.hasOwnProperty('lote')) {
                obj['lote'] = ApiClient.convertToType(data['lote'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('nameAlternatesLocalized')) {
                obj['nameAlternatesLocalized'] = ApiClient.convertToType(data['nameAlternatesLocalized'], {'String': ['String']});
            }
            if (data.hasOwnProperty('postDirection')) {
                obj['postDirection'] = ApiClient.convertToType(data['postDirection'], 'String');
            }
            if (data.hasOwnProperty('postDirectionIntersection')) {
                obj['postDirectionIntersection'] = ApiClient.convertToType(data['postDirectionIntersection'], 'String');
            }
            if (data.hasOwnProperty('postTown')) {
                obj['postTown'] = ApiClient.convertToType(data['postTown'], 'String');
            }
            if (data.hasOwnProperty('preDirection')) {
                obj['preDirection'] = ApiClient.convertToType(data['preDirection'], 'String');
            }
            if (data.hasOwnProperty('preDirectionIntersection')) {
                obj['preDirectionIntersection'] = ApiClient.convertToType(data['preDirectionIntersection'], 'String');
            }
            if (data.hasOwnProperty('prefecture')) {
                obj['prefecture'] = ApiClient.convertToType(data['prefecture'], 'String');
            }
            if (data.hasOwnProperty('quadrant')) {
                obj['quadrant'] = ApiClient.convertToType(data['quadrant'], 'String');
            }
            if (data.hasOwnProperty('quarter')) {
                obj['quarter'] = ApiClient.convertToType(data['quarter'], 'String');
            }
            if (data.hasOwnProperty('recipientName')) {
                obj['recipientName'] = ApiClient.convertToType(data['recipientName'], 'String');
            }
            if (data.hasOwnProperty('sector')) {
                obj['sector'] = ApiClient.convertToType(data['sector'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('streetName')) {
                obj['streetName'] = ApiClient.convertToType(data['streetName'], 'String');
            }
            if (data.hasOwnProperty('streetNameIntersection')) {
                obj['streetNameIntersection'] = ApiClient.convertToType(data['streetNameIntersection'], 'String');
            }
            if (data.hasOwnProperty('streetType')) {
                obj['streetType'] = ApiClient.convertToType(data['streetType'], 'String');
            }
            if (data.hasOwnProperty('streetTypeIntersection')) {
                obj['streetTypeIntersection'] = ApiClient.convertToType(data['streetTypeIntersection'], 'String');
            }
            if (data.hasOwnProperty('suiteNumber')) {
                obj['suiteNumber'] = ApiClient.convertToType(data['suiteNumber'], 'String');
            }
            if (data.hasOwnProperty('suiteType')) {
                obj['suiteType'] = ApiClient.convertToType(data['suiteType'], 'String');
            }
            if (data.hasOwnProperty('ward')) {
                obj['ward'] = ApiClient.convertToType(data['ward'], 'String');
            }
            if (data.hasOwnProperty('zipCode')) {
                obj['zipCode'] = ApiClient.convertToType(data['zipCode'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Address</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Address</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['POBox'] && !(typeof data['POBox'] === 'string' || data['POBox'] instanceof String)) {
            throw new Error("Expected the field `POBox` to be a primitive type in the JSON string but got " + data['POBox']);
        }
        // ensure the json data is a string
        if (data['POBoxAgency'] && !(typeof data['POBoxAgency'] === 'string' || data['POBoxAgency'] instanceof String)) {
            throw new Error("Expected the field `POBoxAgency` to be a primitive type in the JSON string but got " + data['POBoxAgency']);
        }
        // ensure the json data is a string
        if (data['POBoxInfo'] && !(typeof data['POBoxInfo'] === 'string' || data['POBoxInfo'] instanceof String)) {
            throw new Error("Expected the field `POBoxInfo` to be a primitive type in the JSON string but got " + data['POBoxInfo']);
        }
        // ensure the json data is a string
        if (data['block'] && !(typeof data['block'] === 'string' || data['block'] instanceof String)) {
            throw new Error("Expected the field `block` to be a primitive type in the JSON string but got " + data['block']);
        }
        // ensure the json data is a string
        if (data['city'] && !(typeof data['city'] === 'string' || data['city'] instanceof String)) {
            throw new Error("Expected the field `city` to be a primitive type in the JSON string but got " + data['city']);
        }
        // ensure the json data is a string
        if (data['citySubdivision'] && !(typeof data['citySubdivision'] === 'string' || data['citySubdivision'] instanceof String)) {
            throw new Error("Expected the field `citySubdivision` to be a primitive type in the JSON string but got " + data['citySubdivision']);
        }
        // ensure the json data is a string
        if (data['civicNumberSuffix'] && !(typeof data['civicNumberSuffix'] === 'string' || data['civicNumberSuffix'] instanceof String)) {
            throw new Error("Expected the field `civicNumberSuffix` to be a primitive type in the JSON string but got " + data['civicNumberSuffix']);
        }
        // ensure the json data is a string
        if (data['confidence'] && !(typeof data['confidence'] === 'string' || data['confidence'] instanceof String)) {
            throw new Error("Expected the field `confidence` to be a primitive type in the JSON string but got " + data['confidence']);
        }
        // ensure the json data is a string
        if (data['country'] && !(typeof data['country'] === 'string' || data['country'] instanceof String)) {
            throw new Error("Expected the field `country` to be a primitive type in the JSON string but got " + data['country']);
        }
        // ensure the json data is a string
        if (data['countrycode'] && !(typeof data['countrycode'] === 'string' || data['countrycode'] instanceof String)) {
            throw new Error("Expected the field `countrycode` to be a primitive type in the JSON string but got " + data['countrycode']);
        }
        // ensure the json data is a string
        if (data['dependentLocality'] && !(typeof data['dependentLocality'] === 'string' || data['dependentLocality'] instanceof String)) {
            throw new Error("Expected the field `dependentLocality` to be a primitive type in the JSON string but got " + data['dependentLocality']);
        }
        // ensure the json data is a string
        if (data['district'] && !(typeof data['district'] === 'string' || data['district'] instanceof String)) {
            throw new Error("Expected the field `district` to be a primitive type in the JSON string but got " + data['district']);
        }
        // ensure the json data is a string
        if (data['extraInfo'] && !(typeof data['extraInfo'] === 'string' || data['extraInfo'] instanceof String)) {
            throw new Error("Expected the field `extraInfo` to be a primitive type in the JSON string but got " + data['extraInfo']);
        }
        // ensure the json data is a string
        if (data['floor'] && !(typeof data['floor'] === 'string' || data['floor'] instanceof String)) {
            throw new Error("Expected the field `floor` to be a primitive type in the JSON string but got " + data['floor']);
        }
        // ensure the json data is a string
        if (data['geocodinglevel'] && !(typeof data['geocodinglevel'] === 'string' || data['geocodinglevel'] instanceof String)) {
            throw new Error("Expected the field `geocodinglevel` to be a primitive type in the JSON string but got " + data['geocodinglevel']);
        }
        // ensure the json data is a string
        if (data['houseNumber'] && !(typeof data['houseNumber'] === 'string' || data['houseNumber'] instanceof String)) {
            throw new Error("Expected the field `houseNumber` to be a primitive type in the JSON string but got " + data['houseNumber']);
        }
        // ensure the json data is a string
        if (data['houseNumberInfo'] && !(typeof data['houseNumberInfo'] === 'string' || data['houseNumberInfo'] instanceof String)) {
            throw new Error("Expected the field `houseNumberInfo` to be a primitive type in the JSON string but got " + data['houseNumberInfo']);
        }
        // ensure the json data is a string
        if (data['lote'] && !(typeof data['lote'] === 'string' || data['lote'] instanceof String)) {
            throw new Error("Expected the field `lote` to be a primitive type in the JSON string but got " + data['lote']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['postDirection'] && !(typeof data['postDirection'] === 'string' || data['postDirection'] instanceof String)) {
            throw new Error("Expected the field `postDirection` to be a primitive type in the JSON string but got " + data['postDirection']);
        }
        // ensure the json data is a string
        if (data['postDirectionIntersection'] && !(typeof data['postDirectionIntersection'] === 'string' || data['postDirectionIntersection'] instanceof String)) {
            throw new Error("Expected the field `postDirectionIntersection` to be a primitive type in the JSON string but got " + data['postDirectionIntersection']);
        }
        // ensure the json data is a string
        if (data['postTown'] && !(typeof data['postTown'] === 'string' || data['postTown'] instanceof String)) {
            throw new Error("Expected the field `postTown` to be a primitive type in the JSON string but got " + data['postTown']);
        }
        // ensure the json data is a string
        if (data['preDirection'] && !(typeof data['preDirection'] === 'string' || data['preDirection'] instanceof String)) {
            throw new Error("Expected the field `preDirection` to be a primitive type in the JSON string but got " + data['preDirection']);
        }
        // ensure the json data is a string
        if (data['preDirectionIntersection'] && !(typeof data['preDirectionIntersection'] === 'string' || data['preDirectionIntersection'] instanceof String)) {
            throw new Error("Expected the field `preDirectionIntersection` to be a primitive type in the JSON string but got " + data['preDirectionIntersection']);
        }
        // ensure the json data is a string
        if (data['prefecture'] && !(typeof data['prefecture'] === 'string' || data['prefecture'] instanceof String)) {
            throw new Error("Expected the field `prefecture` to be a primitive type in the JSON string but got " + data['prefecture']);
        }
        // ensure the json data is a string
        if (data['quadrant'] && !(typeof data['quadrant'] === 'string' || data['quadrant'] instanceof String)) {
            throw new Error("Expected the field `quadrant` to be a primitive type in the JSON string but got " + data['quadrant']);
        }
        // ensure the json data is a string
        if (data['quarter'] && !(typeof data['quarter'] === 'string' || data['quarter'] instanceof String)) {
            throw new Error("Expected the field `quarter` to be a primitive type in the JSON string but got " + data['quarter']);
        }
        // ensure the json data is a string
        if (data['recipientName'] && !(typeof data['recipientName'] === 'string' || data['recipientName'] instanceof String)) {
            throw new Error("Expected the field `recipientName` to be a primitive type in the JSON string but got " + data['recipientName']);
        }
        // ensure the json data is a string
        if (data['sector'] && !(typeof data['sector'] === 'string' || data['sector'] instanceof String)) {
            throw new Error("Expected the field `sector` to be a primitive type in the JSON string but got " + data['sector']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // ensure the json data is a string
        if (data['streetName'] && !(typeof data['streetName'] === 'string' || data['streetName'] instanceof String)) {
            throw new Error("Expected the field `streetName` to be a primitive type in the JSON string but got " + data['streetName']);
        }
        // ensure the json data is a string
        if (data['streetNameIntersection'] && !(typeof data['streetNameIntersection'] === 'string' || data['streetNameIntersection'] instanceof String)) {
            throw new Error("Expected the field `streetNameIntersection` to be a primitive type in the JSON string but got " + data['streetNameIntersection']);
        }
        // ensure the json data is a string
        if (data['streetType'] && !(typeof data['streetType'] === 'string' || data['streetType'] instanceof String)) {
            throw new Error("Expected the field `streetType` to be a primitive type in the JSON string but got " + data['streetType']);
        }
        // ensure the json data is a string
        if (data['streetTypeIntersection'] && !(typeof data['streetTypeIntersection'] === 'string' || data['streetTypeIntersection'] instanceof String)) {
            throw new Error("Expected the field `streetTypeIntersection` to be a primitive type in the JSON string but got " + data['streetTypeIntersection']);
        }
        // ensure the json data is a string
        if (data['suiteNumber'] && !(typeof data['suiteNumber'] === 'string' || data['suiteNumber'] instanceof String)) {
            throw new Error("Expected the field `suiteNumber` to be a primitive type in the JSON string but got " + data['suiteNumber']);
        }
        // ensure the json data is a string
        if (data['suiteType'] && !(typeof data['suiteType'] === 'string' || data['suiteType'] instanceof String)) {
            throw new Error("Expected the field `suiteType` to be a primitive type in the JSON string but got " + data['suiteType']);
        }
        // ensure the json data is a string
        if (data['ward'] && !(typeof data['ward'] === 'string' || data['ward'] instanceof String)) {
            throw new Error("Expected the field `ward` to be a primitive type in the JSON string but got " + data['ward']);
        }
        // ensure the json data is a string
        if (data['zipCode'] && !(typeof data['zipCode'] === 'string' || data['zipCode'] instanceof String)) {
            throw new Error("Expected the field `zipCode` to be a primitive type in the JSON string but got " + data['zipCode']);
        }

        return true;
    }


}



/**
 * Post office box, Boite postale, Casilla de Correo,...
 * @member {String} POBox
 */
Address.prototype['POBox'] = undefined;

/**
 * Agency where the office box, Boite postale, Casilla de Correo is
 * @member {String} POBoxAgency
 */
Address.prototype['POBoxAgency'] = undefined;

/**
 * extra info on post office box, Boite postale, Casilla de Correo,..
 * @member {String} POBoxInfo
 */
Address.prototype['POBoxInfo'] = undefined;

/**
 * @member {Object.<String, Array.<String>>} adm1NameAlternatesLocalized
 */
Address.prototype['adm1NameAlternatesLocalized'] = undefined;

/**
 * @member {Object.<String, Array.<String>>} adm2NameAlternatesLocalized
 */
Address.prototype['adm2NameAlternatesLocalized'] = undefined;

/**
 * The block in an address (Brasilia only) the block in austria, singapore,... address
 * @member {String} block
 */
Address.prototype['block'] = undefined;

/**
 * The city or locality, a small town or village name sometimes is included in an address when the Delivery Point is outside the boundary of the main Post Town that serves it.
 * @member {String} city
 */
Address.prototype['city'] = undefined;

/**
 * A sub division of a city
 * @member {String} citySubdivision
 */
Address.prototype['citySubdivision'] = undefined;

/**
 * The number that follows the house number (Canada only)
 * @member {String} civicNumberSuffix
 */
Address.prototype['civicNumberSuffix'] = undefined;

/**
 * An indicator that mesure how the parser is confident for the result
 * @member {String} confidence
 */
Address.prototype['confidence'] = undefined;

/**
 * The country name
 * @member {String} country
 */
Address.prototype['country'] = undefined;

/**
 * @member {Object.<String, Array.<String>>} countryNameAlternatesLocalized
 */
Address.prototype['countryNameAlternatesLocalized'] = undefined;

/**
 * The countrycode given in the request
 * @member {String} countrycode
 */
Address.prototype['countrycode'] = undefined;

/**
 * 'Sub' city atached to a big city
 * @member {String} dependentLocality
 */
Address.prototype['dependentLocality'] = undefined;

/**
 * The distance of the address for the given parameter location in the query
 * @member {Number} distance
 */
Address.prototype['distance'] = undefined;

/**
 * The district, mainly use for Russia
 * @member {String} district
 */
Address.prototype['district'] = undefined;

/**
 * Informations on floor, unit, and sometimes POBOX,...
 * @member {String} extraInfo
 */
Address.prototype['extraInfo'] = undefined;

/**
 * The floor in an address, not a floor number in a unit (Brasilia only)
 * @member {String} floor
 */
Address.prototype['floor'] = undefined;

/**
 * @member {module:model/Address.GeocodinglevelEnum} geocodinglevel
 */
Address.prototype['geocodinglevel'] = undefined;

/**
 * Official number assigned to an address by the municipality, several languages supported
 * @member {String} houseNumber
 */
Address.prototype['houseNumber'] = undefined;

/**
 * All information that give extra information on the house number
 * @member {String} houseNumberInfo
 */
Address.prototype['houseNumberInfo'] = undefined;

/**
 * An internal ID to identify the address
 * @member {Number} id
 */
Address.prototype['id'] = undefined;

/**
 * The latitude of the address
 * @member {Number} lat
 */
Address.prototype['lat'] = undefined;

/**
 * The longitude of the address
 * @member {Number} lng
 */
Address.prototype['lng'] = undefined;

/**
 * Lote in Brazilian address
 * @member {String} lote
 */
Address.prototype['lote'] = undefined;

/**
 * Name of the place, it is null in case of address but filled if common place. Name is different than recipient name
 * @member {String} name
 */
Address.prototype['name'] = undefined;

/**
 * @member {Object.<String, Array.<String>>} nameAlternatesLocalized
 */
Address.prototype['nameAlternatesLocalized'] = undefined;

/**
 * The cardinal direction after the name of the street
 * @member {String} postDirection
 */
Address.prototype['postDirection'] = undefined;

/**
 * The cardinal direction after the name of the intersection street
 * @member {String} postDirectionIntersection
 */
Address.prototype['postDirectionIntersection'] = undefined;

/**
 * a city is a required part of all postal addresses in the United Kingdom
 * @member {String} postTown
 */
Address.prototype['postTown'] = undefined;

/**
 * The cardinal direction before the name of the street
 * @member {String} preDirection
 */
Address.prototype['preDirection'] = undefined;

/**
 * The cardinal direction before the name of the intersection street
 * @member {String} preDirectionIntersection
 */
Address.prototype['preDirectionIntersection'] = undefined;

/**
 * prefecture of China
 * @member {String} prefecture
 */
Address.prototype['prefecture'] = undefined;

/**
 * The quadrant in an address (Brasilia only)
 * @member {String} quadrant
 */
Address.prototype['quadrant'] = undefined;

/**
 * A section of an urban settlement
 * @member {String} quarter
 */
Address.prototype['quarter'] = undefined;

/**
 * Name of the organisation or person at the given address
 * @member {String} recipientName
 */
Address.prototype['recipientName'] = undefined;

/**
 * The sector in an address (Brasilia only)
 * @member {String} sector
 */
Address.prototype['sector'] = undefined;

/**
 * The state or county when applicable, can be fullname or abbreviation
 * @member {String} state
 */
Address.prototype['state'] = undefined;

/**
 * The official name of the street or the ordinal number
 * @member {String} streetName
 */
Address.prototype['streetName'] = undefined;

/**
 * The official name of the intersection street
 * @member {String} streetNameIntersection
 */
Address.prototype['streetNameIntersection'] = undefined;

/**
 * The type of the street
 * @member {String} streetType
 */
Address.prototype['streetType'] = undefined;

/**
 * The type of the intersection street
 * @member {String} streetTypeIntersection
 */
Address.prototype['streetTypeIntersection'] = undefined;

/**
 * Informations on the unit, mainly used and filled by standardizer
 * @member {String} suiteNumber
 */
Address.prototype['suiteNumber'] = undefined;

/**
 * Informations on the unit, mainly used and filled by standardizer
 * @member {String} suiteType
 */
Address.prototype['suiteType'] = undefined;

/**
 * Ward in japanese address
 * @member {String} ward
 */
Address.prototype['ward'] = undefined;

/**
 * The zip or post code
 * @member {String} zipCode
 */
Address.prototype['zipCode'] = undefined;





/**
 * Allowed values for the <code>geocodinglevel</code> property.
 * @enum {String}
 * @readonly
 */
Address['GeocodinglevelEnum'] = {

    /**
     * value: "NONE"
     * @const
     */
    "NONE": "NONE",

    /**
     * value: "HOUSE_NUMBER"
     * @const
     */
    "HOUSE_NUMBER": "HOUSE_NUMBER",

    /**
     * value: "STREET"
     * @const
     */
    "STREET": "STREET",

    /**
     * value: "CITY"
     * @const
     */
    "CITY": "CITY",

    /**
     * value: "STATE"
     * @const
     */
    "STATE": "STATE",

    /**
     * value: "COUNTRY"
     * @const
     */
    "COUNTRY": "COUNTRY"
};



export default Address;

