/**
 * Gisgraphy webservices
 * Since 2006, [Gisgraphy](http://www.gisgraphy.com) is a free, open source framework that offers the possibility to do geolocalisation and geocoding via Java APIs or REST webservices. Because geocoding is nothing without data, it provides an easy to use importer that will automatically download and import the necessary (free) data to your local database ([OpenStreetMap](http://www.openstreetmap.org/), [Geonames](http://www.geonames.org/) and [Quattroshapes](http://www.quattroshapes.com/): more than 100 million entries). You can also add your own data with the Web interface or the importer connectors provided. Gisgraphy is production ready, and has been designed to be scalable(load balanced), performant and used in other languages than just java : results can be output in XML, JSON, PHP, Python, Ruby, YAML, GeoRSS, and Atom. One of the most popular GPS tracking System (OpenGTS) also includes a Gisgraphy client...Gisgraphy is a framework. As a result it's flexible and powerful enough to be used in a lot of different use cases. [read more](http://www.gisgraphy.com)   if you use the premium servers, you can use the api key to test the webservices 
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import HouseNumberDto from './HouseNumberDto';

/**
 * The SolrResponseDto model module.
 * @module model/SolrResponseDto
 * @version 4.0.0
 */
class SolrResponseDto {
    /**
     * Constructs a new <code>SolrResponseDto</code>.
     * @alias module:model/SolrResponseDto
     */
    constructor() { 
        
        SolrResponseDto.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SolrResponseDto</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SolrResponseDto} obj Optional instance to populate.
     * @return {module:model/SolrResponseDto} The populated <code>SolrResponseDto</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SolrResponseDto();

            if (data.hasOwnProperty('adm1_code')) {
                obj['adm1_code'] = ApiClient.convertToType(data['adm1_code'], 'String');
            }
            if (data.hasOwnProperty('adm1_name')) {
                obj['adm1_name'] = ApiClient.convertToType(data['adm1_name'], 'String');
            }
            if (data.hasOwnProperty('adm1_names_alternate')) {
                obj['adm1_names_alternate'] = ApiClient.convertToType(data['adm1_names_alternate'], ['String']);
            }
            if (data.hasOwnProperty('adm2_code')) {
                obj['adm2_code'] = ApiClient.convertToType(data['adm2_code'], 'String');
            }
            if (data.hasOwnProperty('adm2_name')) {
                obj['adm2_name'] = ApiClient.convertToType(data['adm2_name'], 'String');
            }
            if (data.hasOwnProperty('adm2_names_alternate')) {
                obj['adm2_names_alternate'] = ApiClient.convertToType(data['adm2_names_alternate'], ['String']);
            }
            if (data.hasOwnProperty('adm3_code')) {
                obj['adm3_code'] = ApiClient.convertToType(data['adm3_code'], 'String');
            }
            if (data.hasOwnProperty('adm3_name')) {
                obj['adm3_name'] = ApiClient.convertToType(data['adm3_name'], 'String');
            }
            if (data.hasOwnProperty('adm4_code')) {
                obj['adm4_code'] = ApiClient.convertToType(data['adm4_code'], 'String');
            }
            if (data.hasOwnProperty('adm4_name')) {
                obj['adm4_name'] = ApiClient.convertToType(data['adm4_name'], 'String');
            }
            if (data.hasOwnProperty('amenity')) {
                obj['amenity'] = ApiClient.convertToType(data['amenity'], 'String');
            }
            if (data.hasOwnProperty('area')) {
                obj['area'] = ApiClient.convertToType(data['area'], 'Number');
            }
            if (data.hasOwnProperty('capital_name')) {
                obj['capital_name'] = ApiClient.convertToType(data['capital_name'], 'String');
            }
            if (data.hasOwnProperty('continent')) {
                obj['continent'] = ApiClient.convertToType(data['continent'], 'String');
            }
            if (data.hasOwnProperty('country_code')) {
                obj['country_code'] = ApiClient.convertToType(data['country_code'], 'String');
            }
            if (data.hasOwnProperty('country_flag_url')) {
                obj['country_flag_url'] = ApiClient.convertToType(data['country_flag_url'], 'String');
            }
            if (data.hasOwnProperty('country_name')) {
                obj['country_name'] = ApiClient.convertToType(data['country_name'], 'String');
            }
            if (data.hasOwnProperty('country_names_alternate')) {
                obj['country_names_alternate'] = ApiClient.convertToType(data['country_names_alternate'], ['String']);
            }
            if (data.hasOwnProperty('currency_code')) {
                obj['currency_code'] = ApiClient.convertToType(data['currency_code'], 'String');
            }
            if (data.hasOwnProperty('currency_name')) {
                obj['currency_name'] = ApiClient.convertToType(data['currency_name'], 'String');
            }
            if (data.hasOwnProperty('elevation')) {
                obj['elevation'] = ApiClient.convertToType(data['elevation'], 'Number');
            }
            if (data.hasOwnProperty('feature_class')) {
                obj['feature_class'] = ApiClient.convertToType(data['feature_class'], 'String');
            }
            if (data.hasOwnProperty('feature_code')) {
                obj['feature_code'] = ApiClient.convertToType(data['feature_code'], 'String');
            }
            if (data.hasOwnProperty('feature_id')) {
                obj['feature_id'] = ApiClient.convertToType(data['feature_id'], 'Number');
            }
            if (data.hasOwnProperty('fips_code')) {
                obj['fips_code'] = ApiClient.convertToType(data['fips_code'], 'String');
            }
            if (data.hasOwnProperty('fully_qualified_address')) {
                obj['fully_qualified_address'] = ApiClient.convertToType(data['fully_qualified_address'], 'String');
            }
            if (data.hasOwnProperty('fully_qualified_name')) {
                obj['fully_qualified_name'] = ApiClient.convertToType(data['fully_qualified_name'], 'String');
            }
            if (data.hasOwnProperty('google_map_url')) {
                obj['google_map_url'] = ApiClient.convertToType(data['google_map_url'], 'String');
            }
            if (data.hasOwnProperty('gtopo30')) {
                obj['gtopo30'] = ApiClient.convertToType(data['gtopo30'], 'Number');
            }
            if (data.hasOwnProperty('house_numbers')) {
                obj['house_numbers'] = ApiClient.convertToType(data['house_numbers'], [HouseNumberDto]);
            }
            if (data.hasOwnProperty('is_in')) {
                obj['is_in'] = ApiClient.convertToType(data['is_in'], 'String');
            }
            if (data.hasOwnProperty('is_in_adm')) {
                obj['is_in_adm'] = ApiClient.convertToType(data['is_in_adm'], 'String');
            }
            if (data.hasOwnProperty('is_in_place')) {
                obj['is_in_place'] = ApiClient.convertToType(data['is_in_place'], 'String');
            }
            if (data.hasOwnProperty('is_in_zip')) {
                obj['is_in_zip'] = ApiClient.convertToType(data['is_in_zip'], ['String']);
            }
            if (data.hasOwnProperty('isoalpha2_country_code')) {
                obj['isoalpha2_country_code'] = ApiClient.convertToType(data['isoalpha2_country_code'], 'String');
            }
            if (data.hasOwnProperty('isoalpha3_country_code')) {
                obj['isoalpha3_country_code'] = ApiClient.convertToType(data['isoalpha3_country_code'], 'String');
            }
            if (data.hasOwnProperty('lat')) {
                obj['lat'] = ApiClient.convertToType(data['lat'], 'Number');
            }
            if (data.hasOwnProperty('length')) {
                obj['length'] = ApiClient.convertToType(data['length'], 'Number');
            }
            if (data.hasOwnProperty('level')) {
                obj['level'] = ApiClient.convertToType(data['level'], 'Number');
            }
            if (data.hasOwnProperty('lng')) {
                obj['lng'] = ApiClient.convertToType(data['lng'], 'Number');
            }
            if (data.hasOwnProperty('municipality')) {
                obj['municipality'] = ApiClient.convertToType(data['municipality'], 'Boolean');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('name_alternates')) {
                obj['name_alternates'] = ApiClient.convertToType(data['name_alternates'], ['String']);
            }
            if (data.hasOwnProperty('name_ascii')) {
                obj['name_ascii'] = ApiClient.convertToType(data['name_ascii'], 'String');
            }
            if (data.hasOwnProperty('one_way')) {
                obj['one_way'] = ApiClient.convertToType(data['one_way'], 'Boolean');
            }
            if (data.hasOwnProperty('openstreetmap_id')) {
                obj['openstreetmap_id'] = ApiClient.convertToType(data['openstreetmap_id'], 'Number');
            }
            if (data.hasOwnProperty('openstreetmap_map_url')) {
                obj['openstreetmap_map_url'] = ApiClient.convertToType(data['openstreetmap_map_url'], 'String');
            }
            if (data.hasOwnProperty('phone_prefix')) {
                obj['phone_prefix'] = ApiClient.convertToType(data['phone_prefix'], 'String');
            }
            if (data.hasOwnProperty('placetype')) {
                obj['placetype'] = ApiClient.convertToType(data['placetype'], 'String');
            }
            if (data.hasOwnProperty('population')) {
                obj['population'] = ApiClient.convertToType(data['population'], 'Number');
            }
            if (data.hasOwnProperty('postal_code_mask')) {
                obj['postal_code_mask'] = ApiClient.convertToType(data['postal_code_mask'], 'String');
            }
            if (data.hasOwnProperty('postal_code_regex')) {
                obj['postal_code_regex'] = ApiClient.convertToType(data['postal_code_regex'], 'String');
            }
            if (data.hasOwnProperty('score')) {
                obj['score'] = ApiClient.convertToType(data['score'], 'Number');
            }
            if (data.hasOwnProperty('spoken_languages')) {
                obj['spoken_languages'] = ApiClient.convertToType(data['spoken_languages'], ['String']);
            }
            if (data.hasOwnProperty('street_type')) {
                obj['street_type'] = ApiClient.convertToType(data['street_type'], 'String');
            }
            if (data.hasOwnProperty('timezone')) {
                obj['timezone'] = ApiClient.convertToType(data['timezone'], 'String');
            }
            if (data.hasOwnProperty('tld')) {
                obj['tld'] = ApiClient.convertToType(data['tld'], 'String');
            }
            if (data.hasOwnProperty('yahoo_map_url')) {
                obj['yahoo_map_url'] = ApiClient.convertToType(data['yahoo_map_url'], 'String');
            }
            if (data.hasOwnProperty('zipcodes')) {
                obj['zipcodes'] = ApiClient.convertToType(data['zipcodes'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SolrResponseDto</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SolrResponseDto</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['adm1_code'] && !(typeof data['adm1_code'] === 'string' || data['adm1_code'] instanceof String)) {
            throw new Error("Expected the field `adm1_code` to be a primitive type in the JSON string but got " + data['adm1_code']);
        }
        // ensure the json data is a string
        if (data['adm1_name'] && !(typeof data['adm1_name'] === 'string' || data['adm1_name'] instanceof String)) {
            throw new Error("Expected the field `adm1_name` to be a primitive type in the JSON string but got " + data['adm1_name']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['adm1_names_alternate'])) {
            throw new Error("Expected the field `adm1_names_alternate` to be an array in the JSON data but got " + data['adm1_names_alternate']);
        }
        // ensure the json data is a string
        if (data['adm2_code'] && !(typeof data['adm2_code'] === 'string' || data['adm2_code'] instanceof String)) {
            throw new Error("Expected the field `adm2_code` to be a primitive type in the JSON string but got " + data['adm2_code']);
        }
        // ensure the json data is a string
        if (data['adm2_name'] && !(typeof data['adm2_name'] === 'string' || data['adm2_name'] instanceof String)) {
            throw new Error("Expected the field `adm2_name` to be a primitive type in the JSON string but got " + data['adm2_name']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['adm2_names_alternate'])) {
            throw new Error("Expected the field `adm2_names_alternate` to be an array in the JSON data but got " + data['adm2_names_alternate']);
        }
        // ensure the json data is a string
        if (data['adm3_code'] && !(typeof data['adm3_code'] === 'string' || data['adm3_code'] instanceof String)) {
            throw new Error("Expected the field `adm3_code` to be a primitive type in the JSON string but got " + data['adm3_code']);
        }
        // ensure the json data is a string
        if (data['adm3_name'] && !(typeof data['adm3_name'] === 'string' || data['adm3_name'] instanceof String)) {
            throw new Error("Expected the field `adm3_name` to be a primitive type in the JSON string but got " + data['adm3_name']);
        }
        // ensure the json data is a string
        if (data['adm4_code'] && !(typeof data['adm4_code'] === 'string' || data['adm4_code'] instanceof String)) {
            throw new Error("Expected the field `adm4_code` to be a primitive type in the JSON string but got " + data['adm4_code']);
        }
        // ensure the json data is a string
        if (data['adm4_name'] && !(typeof data['adm4_name'] === 'string' || data['adm4_name'] instanceof String)) {
            throw new Error("Expected the field `adm4_name` to be a primitive type in the JSON string but got " + data['adm4_name']);
        }
        // ensure the json data is a string
        if (data['amenity'] && !(typeof data['amenity'] === 'string' || data['amenity'] instanceof String)) {
            throw new Error("Expected the field `amenity` to be a primitive type in the JSON string but got " + data['amenity']);
        }
        // ensure the json data is a string
        if (data['capital_name'] && !(typeof data['capital_name'] === 'string' || data['capital_name'] instanceof String)) {
            throw new Error("Expected the field `capital_name` to be a primitive type in the JSON string but got " + data['capital_name']);
        }
        // ensure the json data is a string
        if (data['continent'] && !(typeof data['continent'] === 'string' || data['continent'] instanceof String)) {
            throw new Error("Expected the field `continent` to be a primitive type in the JSON string but got " + data['continent']);
        }
        // ensure the json data is a string
        if (data['country_code'] && !(typeof data['country_code'] === 'string' || data['country_code'] instanceof String)) {
            throw new Error("Expected the field `country_code` to be a primitive type in the JSON string but got " + data['country_code']);
        }
        // ensure the json data is a string
        if (data['country_flag_url'] && !(typeof data['country_flag_url'] === 'string' || data['country_flag_url'] instanceof String)) {
            throw new Error("Expected the field `country_flag_url` to be a primitive type in the JSON string but got " + data['country_flag_url']);
        }
        // ensure the json data is a string
        if (data['country_name'] && !(typeof data['country_name'] === 'string' || data['country_name'] instanceof String)) {
            throw new Error("Expected the field `country_name` to be a primitive type in the JSON string but got " + data['country_name']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['country_names_alternate'])) {
            throw new Error("Expected the field `country_names_alternate` to be an array in the JSON data but got " + data['country_names_alternate']);
        }
        // ensure the json data is a string
        if (data['currency_code'] && !(typeof data['currency_code'] === 'string' || data['currency_code'] instanceof String)) {
            throw new Error("Expected the field `currency_code` to be a primitive type in the JSON string but got " + data['currency_code']);
        }
        // ensure the json data is a string
        if (data['currency_name'] && !(typeof data['currency_name'] === 'string' || data['currency_name'] instanceof String)) {
            throw new Error("Expected the field `currency_name` to be a primitive type in the JSON string but got " + data['currency_name']);
        }
        // ensure the json data is a string
        if (data['feature_class'] && !(typeof data['feature_class'] === 'string' || data['feature_class'] instanceof String)) {
            throw new Error("Expected the field `feature_class` to be a primitive type in the JSON string but got " + data['feature_class']);
        }
        // ensure the json data is a string
        if (data['feature_code'] && !(typeof data['feature_code'] === 'string' || data['feature_code'] instanceof String)) {
            throw new Error("Expected the field `feature_code` to be a primitive type in the JSON string but got " + data['feature_code']);
        }
        // ensure the json data is a string
        if (data['fips_code'] && !(typeof data['fips_code'] === 'string' || data['fips_code'] instanceof String)) {
            throw new Error("Expected the field `fips_code` to be a primitive type in the JSON string but got " + data['fips_code']);
        }
        // ensure the json data is a string
        if (data['fully_qualified_address'] && !(typeof data['fully_qualified_address'] === 'string' || data['fully_qualified_address'] instanceof String)) {
            throw new Error("Expected the field `fully_qualified_address` to be a primitive type in the JSON string but got " + data['fully_qualified_address']);
        }
        // ensure the json data is a string
        if (data['fully_qualified_name'] && !(typeof data['fully_qualified_name'] === 'string' || data['fully_qualified_name'] instanceof String)) {
            throw new Error("Expected the field `fully_qualified_name` to be a primitive type in the JSON string but got " + data['fully_qualified_name']);
        }
        // ensure the json data is a string
        if (data['google_map_url'] && !(typeof data['google_map_url'] === 'string' || data['google_map_url'] instanceof String)) {
            throw new Error("Expected the field `google_map_url` to be a primitive type in the JSON string but got " + data['google_map_url']);
        }
        if (data['house_numbers']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['house_numbers'])) {
                throw new Error("Expected the field `house_numbers` to be an array in the JSON data but got " + data['house_numbers']);
            }
            // validate the optional field `house_numbers` (array)
            for (const item of data['house_numbers']) {
                HouseNumberDto.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['is_in'] && !(typeof data['is_in'] === 'string' || data['is_in'] instanceof String)) {
            throw new Error("Expected the field `is_in` to be a primitive type in the JSON string but got " + data['is_in']);
        }
        // ensure the json data is a string
        if (data['is_in_adm'] && !(typeof data['is_in_adm'] === 'string' || data['is_in_adm'] instanceof String)) {
            throw new Error("Expected the field `is_in_adm` to be a primitive type in the JSON string but got " + data['is_in_adm']);
        }
        // ensure the json data is a string
        if (data['is_in_place'] && !(typeof data['is_in_place'] === 'string' || data['is_in_place'] instanceof String)) {
            throw new Error("Expected the field `is_in_place` to be a primitive type in the JSON string but got " + data['is_in_place']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['is_in_zip'])) {
            throw new Error("Expected the field `is_in_zip` to be an array in the JSON data but got " + data['is_in_zip']);
        }
        // ensure the json data is a string
        if (data['isoalpha2_country_code'] && !(typeof data['isoalpha2_country_code'] === 'string' || data['isoalpha2_country_code'] instanceof String)) {
            throw new Error("Expected the field `isoalpha2_country_code` to be a primitive type in the JSON string but got " + data['isoalpha2_country_code']);
        }
        // ensure the json data is a string
        if (data['isoalpha3_country_code'] && !(typeof data['isoalpha3_country_code'] === 'string' || data['isoalpha3_country_code'] instanceof String)) {
            throw new Error("Expected the field `isoalpha3_country_code` to be a primitive type in the JSON string but got " + data['isoalpha3_country_code']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['name_alternates'])) {
            throw new Error("Expected the field `name_alternates` to be an array in the JSON data but got " + data['name_alternates']);
        }
        // ensure the json data is a string
        if (data['name_ascii'] && !(typeof data['name_ascii'] === 'string' || data['name_ascii'] instanceof String)) {
            throw new Error("Expected the field `name_ascii` to be a primitive type in the JSON string but got " + data['name_ascii']);
        }
        // ensure the json data is a string
        if (data['openstreetmap_map_url'] && !(typeof data['openstreetmap_map_url'] === 'string' || data['openstreetmap_map_url'] instanceof String)) {
            throw new Error("Expected the field `openstreetmap_map_url` to be a primitive type in the JSON string but got " + data['openstreetmap_map_url']);
        }
        // ensure the json data is a string
        if (data['phone_prefix'] && !(typeof data['phone_prefix'] === 'string' || data['phone_prefix'] instanceof String)) {
            throw new Error("Expected the field `phone_prefix` to be a primitive type in the JSON string but got " + data['phone_prefix']);
        }
        // ensure the json data is a string
        if (data['placetype'] && !(typeof data['placetype'] === 'string' || data['placetype'] instanceof String)) {
            throw new Error("Expected the field `placetype` to be a primitive type in the JSON string but got " + data['placetype']);
        }
        // ensure the json data is a string
        if (data['postal_code_mask'] && !(typeof data['postal_code_mask'] === 'string' || data['postal_code_mask'] instanceof String)) {
            throw new Error("Expected the field `postal_code_mask` to be a primitive type in the JSON string but got " + data['postal_code_mask']);
        }
        // ensure the json data is a string
        if (data['postal_code_regex'] && !(typeof data['postal_code_regex'] === 'string' || data['postal_code_regex'] instanceof String)) {
            throw new Error("Expected the field `postal_code_regex` to be a primitive type in the JSON string but got " + data['postal_code_regex']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['spoken_languages'])) {
            throw new Error("Expected the field `spoken_languages` to be an array in the JSON data but got " + data['spoken_languages']);
        }
        // ensure the json data is a string
        if (data['street_type'] && !(typeof data['street_type'] === 'string' || data['street_type'] instanceof String)) {
            throw new Error("Expected the field `street_type` to be a primitive type in the JSON string but got " + data['street_type']);
        }
        // ensure the json data is a string
        if (data['timezone'] && !(typeof data['timezone'] === 'string' || data['timezone'] instanceof String)) {
            throw new Error("Expected the field `timezone` to be a primitive type in the JSON string but got " + data['timezone']);
        }
        // ensure the json data is a string
        if (data['tld'] && !(typeof data['tld'] === 'string' || data['tld'] instanceof String)) {
            throw new Error("Expected the field `tld` to be a primitive type in the JSON string but got " + data['tld']);
        }
        // ensure the json data is a string
        if (data['yahoo_map_url'] && !(typeof data['yahoo_map_url'] === 'string' || data['yahoo_map_url'] instanceof String)) {
            throw new Error("Expected the field `yahoo_map_url` to be a primitive type in the JSON string but got " + data['yahoo_map_url']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['zipcodes'])) {
            throw new Error("Expected the field `zipcodes` to be an array in the JSON data but got " + data['zipcodes']);
        }

        return true;
    }


}



/**
 * The internal code for the administrative division of level 1
 * @member {String} adm1_code
 */
SolrResponseDto.prototype['adm1_code'] = undefined;

/**
 * The name of the administrative division of level 1
 * @member {String} adm1_name
 */
SolrResponseDto.prototype['adm1_name'] = undefined;

/**
 * The alternate names of the administrative division of level 1 without specific language code
 * @member {Array.<String>} adm1_names_alternate
 */
SolrResponseDto.prototype['adm1_names_alternate'] = undefined;

/**
 * The internal code for the administrative division of level 2
 * @member {String} adm2_code
 */
SolrResponseDto.prototype['adm2_code'] = undefined;

/**
 * The name of the administrative division of level 2
 * @member {String} adm2_name
 */
SolrResponseDto.prototype['adm2_name'] = undefined;

/**
 * The alternate names of the administrative division of level 2 without specific language code
 * @member {Array.<String>} adm2_names_alternate
 */
SolrResponseDto.prototype['adm2_names_alternate'] = undefined;

/**
 * The internal code for the administrative division of level 3
 * @member {String} adm3_code
 */
SolrResponseDto.prototype['adm3_code'] = undefined;

/**
 * The name of the administrative division of level 3
 * @member {String} adm3_name
 */
SolrResponseDto.prototype['adm3_name'] = undefined;

/**
 * The internal code for the administrative division of level 4
 * @member {String} adm4_code
 */
SolrResponseDto.prototype['adm4_code'] = undefined;

/**
 * The name of the administrative division of level 4
 * @member {String} adm4_name
 */
SolrResponseDto.prototype['adm4_name'] = undefined;

/**
 * Informations on category of OpenStreetMap POIs
 * @member {String} amenity
 */
SolrResponseDto.prototype['amenity'] = undefined;

/**
 * Area of the country in m² (only for country placetype)
 * @member {Number} area
 */
SolrResponseDto.prototype['area'] = undefined;

/**
 * Name of the capital of the country(only for country placetype)
 * @member {String} capital_name
 */
SolrResponseDto.prototype['capital_name'] = undefined;

/**
 * The continent the country belongs (only for country placetype)
 * @member {String} continent
 */
SolrResponseDto.prototype['continent'] = undefined;

/**
 * The ISO 3166 country code
 * @member {String} country_code
 */
SolrResponseDto.prototype['country_code'] = undefined;

/**
 * The relative URL to get the country flag image
 * @member {String} country_flag_url
 */
SolrResponseDto.prototype['country_flag_url'] = undefined;

/**
 * The name of the country the features belongs to
 * @member {String} country_name
 */
SolrResponseDto.prototype['country_name'] = undefined;

/**
 * The alternate names of the country without specific language code
 * @member {Array.<String>} country_names_alternate
 */
SolrResponseDto.prototype['country_names_alternate'] = undefined;

/**
 * The ISO 4217 Currency from the curencycode (only for country placetype)
 * @member {String} currency_code
 */
SolrResponseDto.prototype['currency_code'] = undefined;

/**
 * The name of the currency of the country (only for country placetype)
 * @member {String} currency_name
 */
SolrResponseDto.prototype['currency_name'] = undefined;

/**
 * Elevation in meters
 * @member {Number} elevation
 */
SolrResponseDto.prototype['elevation'] = undefined;

/**
 * The feature Class.
 * @member {String} feature_class
 */
SolrResponseDto.prototype['feature_class'] = undefined;

/**
 * The feature Code.
 * @member {String} feature_code
 */
SolrResponseDto.prototype['feature_code'] = undefined;

/**
 * A unique id that identify the feature
 * @member {Number} feature_id
 */
SolrResponseDto.prototype['feature_id'] = undefined;

/**
 * The FIPS Code of the country (only for country placetype)
 * @member {String} fips_code
 */
SolrResponseDto.prototype['fips_code'] = undefined;

/**
 * NOT USED YET
 * @member {String} fully_qualified_address
 */
SolrResponseDto.prototype['fully_qualified_address'] = undefined;

/**
 * A name of the form : (adm1Name et adm2Name are printed) Paris, Département de Ville-De-Paris, Ile-De-France, (FR)
 * @member {String} fully_qualified_name
 */
SolrResponseDto.prototype['fully_qualified_name'] = undefined;

/**
 * The URL to get the location on Google Map
 * @member {String} google_map_url
 */
SolrResponseDto.prototype['google_map_url'] = undefined;

/**
 * Average elevation of 30'x30' (ca 900mx900m) area in meters
 * @member {Number} gtopo30
 */
SolrResponseDto.prototype['gtopo30'] = undefined;

/**
 * a list of all the house numbers sorted and their coordinates (only for placetype street)
 * @member {Array.<module:model/HouseNumberDto>} house_numbers
 */
SolrResponseDto.prototype['house_numbers'] = undefined;

/**
 * Information on the city where the street / POI is (depends on OpenStreetMap 'is_in' field), the city in general (only for placetype street)
 * @member {String} is_in
 */
SolrResponseDto.prototype['is_in'] = undefined;

/**
 * Information of the administration division where the street / POI is.
 * @member {String} is_in_adm
 */
SolrResponseDto.prototype['is_in_adm'] = undefined;

/**
 * Information on the place where the street / POI is (quater, common place). Generally a place at a lower level than city
 * @member {String} is_in_place
 */
SolrResponseDto.prototype['is_in_place'] = undefined;

/**
 * Information of the zipcode where the street / POI is (often fill for placetype street)
 * @member {Array.<String>} is_in_zip
 */
SolrResponseDto.prototype['is_in_zip'] = undefined;

/**
 * The ISO 3166 alpha 2 code of the country (only for country placetype)
 * @member {String} isoalpha2_country_code
 */
SolrResponseDto.prototype['isoalpha2_country_code'] = undefined;

/**
 * The ISO 3166 alpha 3 code of the country (only for country placetype)
 * @member {String} isoalpha3_country_code
 */
SolrResponseDto.prototype['isoalpha3_country_code'] = undefined;

/**
 * The latitude (north-south)
 * @member {Number} lat
 */
SolrResponseDto.prototype['lat'] = undefined;

/**
 * The length of the street (only for placetype street)
 * @member {Number} length
 */
SolrResponseDto.prototype['length'] = undefined;

/**
 * Level of the Adm 1 , 2, 3, or 4(only for Adm placetype)
 * @member {Number} level
 */
SolrResponseDto.prototype['level'] = undefined;

/**
 * The longitude (east-West)
 * @member {Number} lng
 */
SolrResponseDto.prototype['lng'] = undefined;

/**
 * if the place is a municipality. it is usefull for geonames feature that don't have concept of 'city' but a populated place (that can be a quarter)
 * @member {Boolean} municipality
 */
SolrResponseDto.prototype['municipality'] = undefined;

/**
 * The name of the feature
 * @member {String} name
 */
SolrResponseDto.prototype['name'] = undefined;

/**
 * The alternate names of the feature that without specific language code
 * @member {Array.<String>} name_alternates
 */
SolrResponseDto.prototype['name_alternates'] = undefined;

/**
 * The ASCII name
 * @member {String} name_ascii
 */
SolrResponseDto.prototype['name_ascii'] = undefined;

/**
 * whether the street is one way or not (only for placetype street)
 * @member {Boolean} one_way
 */
SolrResponseDto.prototype['one_way'] = undefined;

/**
 * The OpenStreetMap unique id of the street (only for placetype street)
 * @member {Number} openstreetmap_id
 */
SolrResponseDto.prototype['openstreetmap_id'] = undefined;

/**
 * The URL to get the location on OpenStreetMap.org
 * @member {String} openstreetmap_map_url
 */
SolrResponseDto.prototype['openstreetmap_map_url'] = undefined;

/**
 * The phone prefix of the country. e.g : +33 .(only for country placetype)
 * @member {String} phone_prefix
 */
SolrResponseDto.prototype['phone_prefix'] = undefined;

/**
 * The place Type of the Feature
 * @member {String} placetype
 */
SolrResponseDto.prototype['placetype'] = undefined;

/**
 * How many people live in this feature
 * @member {Number} population
 */
SolrResponseDto.prototype['population'] = undefined;

/**
 * The mask that postal codes should verify. e.g : ##### (only for country placetype)
 * @member {String} postal_code_mask
 */
SolrResponseDto.prototype['postal_code_mask'] = undefined;

/**
 * The regular expression that postal codes should verify (only for country placetype)
 * @member {String} postal_code_regex
 */
SolrResponseDto.prototype['postal_code_regex'] = undefined;

/**
 * a number that indicates the relevance of the result
 * @member {Number} score
 */
SolrResponseDto.prototype['score'] = undefined;

/**
 * List of languages spoken in the country (only for country placetype)
 * @member {Array.<String>} spoken_languages
 */
SolrResponseDto.prototype['spoken_languages'] = undefined;

/**
 * The type of the street (only for placetype street)
 * @member {String} street_type
 */
SolrResponseDto.prototype['street_type'] = undefined;

/**
 * The timezone (e.g :Europe/Paris).
 * @member {String} timezone
 */
SolrResponseDto.prototype['timezone'] = undefined;

/**
 * Top level domain of the country (only for country placetype)
 * @member {String} tld
 */
SolrResponseDto.prototype['tld'] = undefined;

/**
 * The URL to get the location on Yahoo Map
 * @member {String} yahoo_map_url
 */
SolrResponseDto.prototype['yahoo_map_url'] = undefined;

/**
 * The zipcodes
 * @member {Array.<String>} zipcodes
 */
SolrResponseDto.prototype['zipcodes'] = undefined;






export default SolrResponseDto;

