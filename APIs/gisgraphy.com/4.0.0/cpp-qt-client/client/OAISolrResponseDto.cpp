/**
 * Gisgraphy webservices
 * Since 2006, [Gisgraphy](http://www.gisgraphy.com) is a free, open source framework that offers the possibility to do geolocalisation and geocoding via Java APIs or REST webservices. Because geocoding is nothing without data, it provides an easy to use importer that will automatically download and import the necessary (free) data to your local database ([OpenStreetMap](http://www.openstreetmap.org/), [Geonames](http://www.geonames.org/) and [Quattroshapes](http://www.quattroshapes.com/): more than 100 million entries). You can also add your own data with the Web interface or the importer connectors provided. Gisgraphy is production ready, and has been designed to be scalable(load balanced), performant and used in other languages than just java : results can be output in XML, JSON, PHP, Python, Ruby, YAML, GeoRSS, and Atom. One of the most popular GPS tracking System (OpenGTS) also includes a Gisgraphy client...Gisgraphy is a framework. As a result it's flexible and powerful enough to be used in a lot of different use cases. [read more](http://www.gisgraphy.com)   if you use the premium servers, you can use the api key to test the webservices 
 *
 * The version of the OpenAPI document: 4.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISolrResponseDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISolrResponseDto::OAISolrResponseDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISolrResponseDto::OAISolrResponseDto() {
    this->initializeModel();
}

OAISolrResponseDto::~OAISolrResponseDto() {}

void OAISolrResponseDto::initializeModel() {

    m_adm1_code_isSet = false;
    m_adm1_code_isValid = false;

    m_adm1_name_isSet = false;
    m_adm1_name_isValid = false;

    m_adm1_names_alternate_isSet = false;
    m_adm1_names_alternate_isValid = false;

    m_adm2_code_isSet = false;
    m_adm2_code_isValid = false;

    m_adm2_name_isSet = false;
    m_adm2_name_isValid = false;

    m_adm2_names_alternate_isSet = false;
    m_adm2_names_alternate_isValid = false;

    m_adm3_code_isSet = false;
    m_adm3_code_isValid = false;

    m_adm3_name_isSet = false;
    m_adm3_name_isValid = false;

    m_adm4_code_isSet = false;
    m_adm4_code_isValid = false;

    m_adm4_name_isSet = false;
    m_adm4_name_isValid = false;

    m_amenity_isSet = false;
    m_amenity_isValid = false;

    m_area_isSet = false;
    m_area_isValid = false;

    m_capital_name_isSet = false;
    m_capital_name_isValid = false;

    m_continent_isSet = false;
    m_continent_isValid = false;

    m_country_code_isSet = false;
    m_country_code_isValid = false;

    m_country_flag_url_isSet = false;
    m_country_flag_url_isValid = false;

    m_country_name_isSet = false;
    m_country_name_isValid = false;

    m_country_names_alternate_isSet = false;
    m_country_names_alternate_isValid = false;

    m_currency_code_isSet = false;
    m_currency_code_isValid = false;

    m_currency_name_isSet = false;
    m_currency_name_isValid = false;

    m_elevation_isSet = false;
    m_elevation_isValid = false;

    m_feature_class_isSet = false;
    m_feature_class_isValid = false;

    m_feature_code_isSet = false;
    m_feature_code_isValid = false;

    m_feature_id_isSet = false;
    m_feature_id_isValid = false;

    m_fips_code_isSet = false;
    m_fips_code_isValid = false;

    m_fully_qualified_address_isSet = false;
    m_fully_qualified_address_isValid = false;

    m_fully_qualified_name_isSet = false;
    m_fully_qualified_name_isValid = false;

    m_google_map_url_isSet = false;
    m_google_map_url_isValid = false;

    m_gtopo30_isSet = false;
    m_gtopo30_isValid = false;

    m_house_numbers_isSet = false;
    m_house_numbers_isValid = false;

    m_is_in_isSet = false;
    m_is_in_isValid = false;

    m_is_in_adm_isSet = false;
    m_is_in_adm_isValid = false;

    m_is_in_place_isSet = false;
    m_is_in_place_isValid = false;

    m_is_in_zip_isSet = false;
    m_is_in_zip_isValid = false;

    m_isoalpha2_country_code_isSet = false;
    m_isoalpha2_country_code_isValid = false;

    m_isoalpha3_country_code_isSet = false;
    m_isoalpha3_country_code_isValid = false;

    m_lat_isSet = false;
    m_lat_isValid = false;

    m_length_isSet = false;
    m_length_isValid = false;

    m_level_isSet = false;
    m_level_isValid = false;

    m_lng_isSet = false;
    m_lng_isValid = false;

    m_municipality_isSet = false;
    m_municipality_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_name_alternates_isSet = false;
    m_name_alternates_isValid = false;

    m_name_ascii_isSet = false;
    m_name_ascii_isValid = false;

    m_one_way_isSet = false;
    m_one_way_isValid = false;

    m_openstreetmap_id_isSet = false;
    m_openstreetmap_id_isValid = false;

    m_openstreetmap_map_url_isSet = false;
    m_openstreetmap_map_url_isValid = false;

    m_phone_prefix_isSet = false;
    m_phone_prefix_isValid = false;

    m_placetype_isSet = false;
    m_placetype_isValid = false;

    m_population_isSet = false;
    m_population_isValid = false;

    m_postal_code_mask_isSet = false;
    m_postal_code_mask_isValid = false;

    m_postal_code_regex_isSet = false;
    m_postal_code_regex_isValid = false;

    m_score_isSet = false;
    m_score_isValid = false;

    m_spoken_languages_isSet = false;
    m_spoken_languages_isValid = false;

    m_street_type_isSet = false;
    m_street_type_isValid = false;

    m_timezone_isSet = false;
    m_timezone_isValid = false;

    m_tld_isSet = false;
    m_tld_isValid = false;

    m_yahoo_map_url_isSet = false;
    m_yahoo_map_url_isValid = false;

    m_zipcodes_isSet = false;
    m_zipcodes_isValid = false;
}

void OAISolrResponseDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISolrResponseDto::fromJsonObject(QJsonObject json) {

    m_adm1_code_isValid = ::OpenAPI::fromJsonValue(m_adm1_code, json[QString("adm1_code")]);
    m_adm1_code_isSet = !json[QString("adm1_code")].isNull() && m_adm1_code_isValid;

    m_adm1_name_isValid = ::OpenAPI::fromJsonValue(m_adm1_name, json[QString("adm1_name")]);
    m_adm1_name_isSet = !json[QString("adm1_name")].isNull() && m_adm1_name_isValid;

    m_adm1_names_alternate_isValid = ::OpenAPI::fromJsonValue(m_adm1_names_alternate, json[QString("adm1_names_alternate")]);
    m_adm1_names_alternate_isSet = !json[QString("adm1_names_alternate")].isNull() && m_adm1_names_alternate_isValid;

    m_adm2_code_isValid = ::OpenAPI::fromJsonValue(m_adm2_code, json[QString("adm2_code")]);
    m_adm2_code_isSet = !json[QString("adm2_code")].isNull() && m_adm2_code_isValid;

    m_adm2_name_isValid = ::OpenAPI::fromJsonValue(m_adm2_name, json[QString("adm2_name")]);
    m_adm2_name_isSet = !json[QString("adm2_name")].isNull() && m_adm2_name_isValid;

    m_adm2_names_alternate_isValid = ::OpenAPI::fromJsonValue(m_adm2_names_alternate, json[QString("adm2_names_alternate")]);
    m_adm2_names_alternate_isSet = !json[QString("adm2_names_alternate")].isNull() && m_adm2_names_alternate_isValid;

    m_adm3_code_isValid = ::OpenAPI::fromJsonValue(m_adm3_code, json[QString("adm3_code")]);
    m_adm3_code_isSet = !json[QString("adm3_code")].isNull() && m_adm3_code_isValid;

    m_adm3_name_isValid = ::OpenAPI::fromJsonValue(m_adm3_name, json[QString("adm3_name")]);
    m_adm3_name_isSet = !json[QString("adm3_name")].isNull() && m_adm3_name_isValid;

    m_adm4_code_isValid = ::OpenAPI::fromJsonValue(m_adm4_code, json[QString("adm4_code")]);
    m_adm4_code_isSet = !json[QString("adm4_code")].isNull() && m_adm4_code_isValid;

    m_adm4_name_isValid = ::OpenAPI::fromJsonValue(m_adm4_name, json[QString("adm4_name")]);
    m_adm4_name_isSet = !json[QString("adm4_name")].isNull() && m_adm4_name_isValid;

    m_amenity_isValid = ::OpenAPI::fromJsonValue(m_amenity, json[QString("amenity")]);
    m_amenity_isSet = !json[QString("amenity")].isNull() && m_amenity_isValid;

    m_area_isValid = ::OpenAPI::fromJsonValue(m_area, json[QString("area")]);
    m_area_isSet = !json[QString("area")].isNull() && m_area_isValid;

    m_capital_name_isValid = ::OpenAPI::fromJsonValue(m_capital_name, json[QString("capital_name")]);
    m_capital_name_isSet = !json[QString("capital_name")].isNull() && m_capital_name_isValid;

    m_continent_isValid = ::OpenAPI::fromJsonValue(m_continent, json[QString("continent")]);
    m_continent_isSet = !json[QString("continent")].isNull() && m_continent_isValid;

    m_country_code_isValid = ::OpenAPI::fromJsonValue(m_country_code, json[QString("country_code")]);
    m_country_code_isSet = !json[QString("country_code")].isNull() && m_country_code_isValid;

    m_country_flag_url_isValid = ::OpenAPI::fromJsonValue(m_country_flag_url, json[QString("country_flag_url")]);
    m_country_flag_url_isSet = !json[QString("country_flag_url")].isNull() && m_country_flag_url_isValid;

    m_country_name_isValid = ::OpenAPI::fromJsonValue(m_country_name, json[QString("country_name")]);
    m_country_name_isSet = !json[QString("country_name")].isNull() && m_country_name_isValid;

    m_country_names_alternate_isValid = ::OpenAPI::fromJsonValue(m_country_names_alternate, json[QString("country_names_alternate")]);
    m_country_names_alternate_isSet = !json[QString("country_names_alternate")].isNull() && m_country_names_alternate_isValid;

    m_currency_code_isValid = ::OpenAPI::fromJsonValue(m_currency_code, json[QString("currency_code")]);
    m_currency_code_isSet = !json[QString("currency_code")].isNull() && m_currency_code_isValid;

    m_currency_name_isValid = ::OpenAPI::fromJsonValue(m_currency_name, json[QString("currency_name")]);
    m_currency_name_isSet = !json[QString("currency_name")].isNull() && m_currency_name_isValid;

    m_elevation_isValid = ::OpenAPI::fromJsonValue(m_elevation, json[QString("elevation")]);
    m_elevation_isSet = !json[QString("elevation")].isNull() && m_elevation_isValid;

    m_feature_class_isValid = ::OpenAPI::fromJsonValue(m_feature_class, json[QString("feature_class")]);
    m_feature_class_isSet = !json[QString("feature_class")].isNull() && m_feature_class_isValid;

    m_feature_code_isValid = ::OpenAPI::fromJsonValue(m_feature_code, json[QString("feature_code")]);
    m_feature_code_isSet = !json[QString("feature_code")].isNull() && m_feature_code_isValid;

    m_feature_id_isValid = ::OpenAPI::fromJsonValue(m_feature_id, json[QString("feature_id")]);
    m_feature_id_isSet = !json[QString("feature_id")].isNull() && m_feature_id_isValid;

    m_fips_code_isValid = ::OpenAPI::fromJsonValue(m_fips_code, json[QString("fips_code")]);
    m_fips_code_isSet = !json[QString("fips_code")].isNull() && m_fips_code_isValid;

    m_fully_qualified_address_isValid = ::OpenAPI::fromJsonValue(m_fully_qualified_address, json[QString("fully_qualified_address")]);
    m_fully_qualified_address_isSet = !json[QString("fully_qualified_address")].isNull() && m_fully_qualified_address_isValid;

    m_fully_qualified_name_isValid = ::OpenAPI::fromJsonValue(m_fully_qualified_name, json[QString("fully_qualified_name")]);
    m_fully_qualified_name_isSet = !json[QString("fully_qualified_name")].isNull() && m_fully_qualified_name_isValid;

    m_google_map_url_isValid = ::OpenAPI::fromJsonValue(m_google_map_url, json[QString("google_map_url")]);
    m_google_map_url_isSet = !json[QString("google_map_url")].isNull() && m_google_map_url_isValid;

    m_gtopo30_isValid = ::OpenAPI::fromJsonValue(m_gtopo30, json[QString("gtopo30")]);
    m_gtopo30_isSet = !json[QString("gtopo30")].isNull() && m_gtopo30_isValid;

    m_house_numbers_isValid = ::OpenAPI::fromJsonValue(m_house_numbers, json[QString("house_numbers")]);
    m_house_numbers_isSet = !json[QString("house_numbers")].isNull() && m_house_numbers_isValid;

    m_is_in_isValid = ::OpenAPI::fromJsonValue(m_is_in, json[QString("is_in")]);
    m_is_in_isSet = !json[QString("is_in")].isNull() && m_is_in_isValid;

    m_is_in_adm_isValid = ::OpenAPI::fromJsonValue(m_is_in_adm, json[QString("is_in_adm")]);
    m_is_in_adm_isSet = !json[QString("is_in_adm")].isNull() && m_is_in_adm_isValid;

    m_is_in_place_isValid = ::OpenAPI::fromJsonValue(m_is_in_place, json[QString("is_in_place")]);
    m_is_in_place_isSet = !json[QString("is_in_place")].isNull() && m_is_in_place_isValid;

    m_is_in_zip_isValid = ::OpenAPI::fromJsonValue(m_is_in_zip, json[QString("is_in_zip")]);
    m_is_in_zip_isSet = !json[QString("is_in_zip")].isNull() && m_is_in_zip_isValid;

    m_isoalpha2_country_code_isValid = ::OpenAPI::fromJsonValue(m_isoalpha2_country_code, json[QString("isoalpha2_country_code")]);
    m_isoalpha2_country_code_isSet = !json[QString("isoalpha2_country_code")].isNull() && m_isoalpha2_country_code_isValid;

    m_isoalpha3_country_code_isValid = ::OpenAPI::fromJsonValue(m_isoalpha3_country_code, json[QString("isoalpha3_country_code")]);
    m_isoalpha3_country_code_isSet = !json[QString("isoalpha3_country_code")].isNull() && m_isoalpha3_country_code_isValid;

    m_lat_isValid = ::OpenAPI::fromJsonValue(m_lat, json[QString("lat")]);
    m_lat_isSet = !json[QString("lat")].isNull() && m_lat_isValid;

    m_length_isValid = ::OpenAPI::fromJsonValue(m_length, json[QString("length")]);
    m_length_isSet = !json[QString("length")].isNull() && m_length_isValid;

    m_level_isValid = ::OpenAPI::fromJsonValue(m_level, json[QString("level")]);
    m_level_isSet = !json[QString("level")].isNull() && m_level_isValid;

    m_lng_isValid = ::OpenAPI::fromJsonValue(m_lng, json[QString("lng")]);
    m_lng_isSet = !json[QString("lng")].isNull() && m_lng_isValid;

    m_municipality_isValid = ::OpenAPI::fromJsonValue(m_municipality, json[QString("municipality")]);
    m_municipality_isSet = !json[QString("municipality")].isNull() && m_municipality_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_name_alternates_isValid = ::OpenAPI::fromJsonValue(m_name_alternates, json[QString("name_alternates")]);
    m_name_alternates_isSet = !json[QString("name_alternates")].isNull() && m_name_alternates_isValid;

    m_name_ascii_isValid = ::OpenAPI::fromJsonValue(m_name_ascii, json[QString("name_ascii")]);
    m_name_ascii_isSet = !json[QString("name_ascii")].isNull() && m_name_ascii_isValid;

    m_one_way_isValid = ::OpenAPI::fromJsonValue(m_one_way, json[QString("one_way")]);
    m_one_way_isSet = !json[QString("one_way")].isNull() && m_one_way_isValid;

    m_openstreetmap_id_isValid = ::OpenAPI::fromJsonValue(m_openstreetmap_id, json[QString("openstreetmap_id")]);
    m_openstreetmap_id_isSet = !json[QString("openstreetmap_id")].isNull() && m_openstreetmap_id_isValid;

    m_openstreetmap_map_url_isValid = ::OpenAPI::fromJsonValue(m_openstreetmap_map_url, json[QString("openstreetmap_map_url")]);
    m_openstreetmap_map_url_isSet = !json[QString("openstreetmap_map_url")].isNull() && m_openstreetmap_map_url_isValid;

    m_phone_prefix_isValid = ::OpenAPI::fromJsonValue(m_phone_prefix, json[QString("phone_prefix")]);
    m_phone_prefix_isSet = !json[QString("phone_prefix")].isNull() && m_phone_prefix_isValid;

    m_placetype_isValid = ::OpenAPI::fromJsonValue(m_placetype, json[QString("placetype")]);
    m_placetype_isSet = !json[QString("placetype")].isNull() && m_placetype_isValid;

    m_population_isValid = ::OpenAPI::fromJsonValue(m_population, json[QString("population")]);
    m_population_isSet = !json[QString("population")].isNull() && m_population_isValid;

    m_postal_code_mask_isValid = ::OpenAPI::fromJsonValue(m_postal_code_mask, json[QString("postal_code_mask")]);
    m_postal_code_mask_isSet = !json[QString("postal_code_mask")].isNull() && m_postal_code_mask_isValid;

    m_postal_code_regex_isValid = ::OpenAPI::fromJsonValue(m_postal_code_regex, json[QString("postal_code_regex")]);
    m_postal_code_regex_isSet = !json[QString("postal_code_regex")].isNull() && m_postal_code_regex_isValid;

    m_score_isValid = ::OpenAPI::fromJsonValue(m_score, json[QString("score")]);
    m_score_isSet = !json[QString("score")].isNull() && m_score_isValid;

    m_spoken_languages_isValid = ::OpenAPI::fromJsonValue(m_spoken_languages, json[QString("spoken_languages")]);
    m_spoken_languages_isSet = !json[QString("spoken_languages")].isNull() && m_spoken_languages_isValid;

    m_street_type_isValid = ::OpenAPI::fromJsonValue(m_street_type, json[QString("street_type")]);
    m_street_type_isSet = !json[QString("street_type")].isNull() && m_street_type_isValid;

    m_timezone_isValid = ::OpenAPI::fromJsonValue(m_timezone, json[QString("timezone")]);
    m_timezone_isSet = !json[QString("timezone")].isNull() && m_timezone_isValid;

    m_tld_isValid = ::OpenAPI::fromJsonValue(m_tld, json[QString("tld")]);
    m_tld_isSet = !json[QString("tld")].isNull() && m_tld_isValid;

    m_yahoo_map_url_isValid = ::OpenAPI::fromJsonValue(m_yahoo_map_url, json[QString("yahoo_map_url")]);
    m_yahoo_map_url_isSet = !json[QString("yahoo_map_url")].isNull() && m_yahoo_map_url_isValid;

    m_zipcodes_isValid = ::OpenAPI::fromJsonValue(m_zipcodes, json[QString("zipcodes")]);
    m_zipcodes_isSet = !json[QString("zipcodes")].isNull() && m_zipcodes_isValid;
}

QString OAISolrResponseDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISolrResponseDto::asJsonObject() const {
    QJsonObject obj;
    if (m_adm1_code_isSet) {
        obj.insert(QString("adm1_code"), ::OpenAPI::toJsonValue(m_adm1_code));
    }
    if (m_adm1_name_isSet) {
        obj.insert(QString("adm1_name"), ::OpenAPI::toJsonValue(m_adm1_name));
    }
    if (m_adm1_names_alternate.size() > 0) {
        obj.insert(QString("adm1_names_alternate"), ::OpenAPI::toJsonValue(m_adm1_names_alternate));
    }
    if (m_adm2_code_isSet) {
        obj.insert(QString("adm2_code"), ::OpenAPI::toJsonValue(m_adm2_code));
    }
    if (m_adm2_name_isSet) {
        obj.insert(QString("adm2_name"), ::OpenAPI::toJsonValue(m_adm2_name));
    }
    if (m_adm2_names_alternate.size() > 0) {
        obj.insert(QString("adm2_names_alternate"), ::OpenAPI::toJsonValue(m_adm2_names_alternate));
    }
    if (m_adm3_code_isSet) {
        obj.insert(QString("adm3_code"), ::OpenAPI::toJsonValue(m_adm3_code));
    }
    if (m_adm3_name_isSet) {
        obj.insert(QString("adm3_name"), ::OpenAPI::toJsonValue(m_adm3_name));
    }
    if (m_adm4_code_isSet) {
        obj.insert(QString("adm4_code"), ::OpenAPI::toJsonValue(m_adm4_code));
    }
    if (m_adm4_name_isSet) {
        obj.insert(QString("adm4_name"), ::OpenAPI::toJsonValue(m_adm4_name));
    }
    if (m_amenity_isSet) {
        obj.insert(QString("amenity"), ::OpenAPI::toJsonValue(m_amenity));
    }
    if (m_area_isSet) {
        obj.insert(QString("area"), ::OpenAPI::toJsonValue(m_area));
    }
    if (m_capital_name_isSet) {
        obj.insert(QString("capital_name"), ::OpenAPI::toJsonValue(m_capital_name));
    }
    if (m_continent_isSet) {
        obj.insert(QString("continent"), ::OpenAPI::toJsonValue(m_continent));
    }
    if (m_country_code_isSet) {
        obj.insert(QString("country_code"), ::OpenAPI::toJsonValue(m_country_code));
    }
    if (m_country_flag_url_isSet) {
        obj.insert(QString("country_flag_url"), ::OpenAPI::toJsonValue(m_country_flag_url));
    }
    if (m_country_name_isSet) {
        obj.insert(QString("country_name"), ::OpenAPI::toJsonValue(m_country_name));
    }
    if (m_country_names_alternate.size() > 0) {
        obj.insert(QString("country_names_alternate"), ::OpenAPI::toJsonValue(m_country_names_alternate));
    }
    if (m_currency_code_isSet) {
        obj.insert(QString("currency_code"), ::OpenAPI::toJsonValue(m_currency_code));
    }
    if (m_currency_name_isSet) {
        obj.insert(QString("currency_name"), ::OpenAPI::toJsonValue(m_currency_name));
    }
    if (m_elevation_isSet) {
        obj.insert(QString("elevation"), ::OpenAPI::toJsonValue(m_elevation));
    }
    if (m_feature_class_isSet) {
        obj.insert(QString("feature_class"), ::OpenAPI::toJsonValue(m_feature_class));
    }
    if (m_feature_code_isSet) {
        obj.insert(QString("feature_code"), ::OpenAPI::toJsonValue(m_feature_code));
    }
    if (m_feature_id_isSet) {
        obj.insert(QString("feature_id"), ::OpenAPI::toJsonValue(m_feature_id));
    }
    if (m_fips_code_isSet) {
        obj.insert(QString("fips_code"), ::OpenAPI::toJsonValue(m_fips_code));
    }
    if (m_fully_qualified_address_isSet) {
        obj.insert(QString("fully_qualified_address"), ::OpenAPI::toJsonValue(m_fully_qualified_address));
    }
    if (m_fully_qualified_name_isSet) {
        obj.insert(QString("fully_qualified_name"), ::OpenAPI::toJsonValue(m_fully_qualified_name));
    }
    if (m_google_map_url_isSet) {
        obj.insert(QString("google_map_url"), ::OpenAPI::toJsonValue(m_google_map_url));
    }
    if (m_gtopo30_isSet) {
        obj.insert(QString("gtopo30"), ::OpenAPI::toJsonValue(m_gtopo30));
    }
    if (m_house_numbers.size() > 0) {
        obj.insert(QString("house_numbers"), ::OpenAPI::toJsonValue(m_house_numbers));
    }
    if (m_is_in_isSet) {
        obj.insert(QString("is_in"), ::OpenAPI::toJsonValue(m_is_in));
    }
    if (m_is_in_adm_isSet) {
        obj.insert(QString("is_in_adm"), ::OpenAPI::toJsonValue(m_is_in_adm));
    }
    if (m_is_in_place_isSet) {
        obj.insert(QString("is_in_place"), ::OpenAPI::toJsonValue(m_is_in_place));
    }
    if (m_is_in_zip.size() > 0) {
        obj.insert(QString("is_in_zip"), ::OpenAPI::toJsonValue(m_is_in_zip));
    }
    if (m_isoalpha2_country_code_isSet) {
        obj.insert(QString("isoalpha2_country_code"), ::OpenAPI::toJsonValue(m_isoalpha2_country_code));
    }
    if (m_isoalpha3_country_code_isSet) {
        obj.insert(QString("isoalpha3_country_code"), ::OpenAPI::toJsonValue(m_isoalpha3_country_code));
    }
    if (m_lat_isSet) {
        obj.insert(QString("lat"), ::OpenAPI::toJsonValue(m_lat));
    }
    if (m_length_isSet) {
        obj.insert(QString("length"), ::OpenAPI::toJsonValue(m_length));
    }
    if (m_level_isSet) {
        obj.insert(QString("level"), ::OpenAPI::toJsonValue(m_level));
    }
    if (m_lng_isSet) {
        obj.insert(QString("lng"), ::OpenAPI::toJsonValue(m_lng));
    }
    if (m_municipality_isSet) {
        obj.insert(QString("municipality"), ::OpenAPI::toJsonValue(m_municipality));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_name_alternates.size() > 0) {
        obj.insert(QString("name_alternates"), ::OpenAPI::toJsonValue(m_name_alternates));
    }
    if (m_name_ascii_isSet) {
        obj.insert(QString("name_ascii"), ::OpenAPI::toJsonValue(m_name_ascii));
    }
    if (m_one_way_isSet) {
        obj.insert(QString("one_way"), ::OpenAPI::toJsonValue(m_one_way));
    }
    if (m_openstreetmap_id_isSet) {
        obj.insert(QString("openstreetmap_id"), ::OpenAPI::toJsonValue(m_openstreetmap_id));
    }
    if (m_openstreetmap_map_url_isSet) {
        obj.insert(QString("openstreetmap_map_url"), ::OpenAPI::toJsonValue(m_openstreetmap_map_url));
    }
    if (m_phone_prefix_isSet) {
        obj.insert(QString("phone_prefix"), ::OpenAPI::toJsonValue(m_phone_prefix));
    }
    if (m_placetype_isSet) {
        obj.insert(QString("placetype"), ::OpenAPI::toJsonValue(m_placetype));
    }
    if (m_population_isSet) {
        obj.insert(QString("population"), ::OpenAPI::toJsonValue(m_population));
    }
    if (m_postal_code_mask_isSet) {
        obj.insert(QString("postal_code_mask"), ::OpenAPI::toJsonValue(m_postal_code_mask));
    }
    if (m_postal_code_regex_isSet) {
        obj.insert(QString("postal_code_regex"), ::OpenAPI::toJsonValue(m_postal_code_regex));
    }
    if (m_score_isSet) {
        obj.insert(QString("score"), ::OpenAPI::toJsonValue(m_score));
    }
    if (m_spoken_languages.size() > 0) {
        obj.insert(QString("spoken_languages"), ::OpenAPI::toJsonValue(m_spoken_languages));
    }
    if (m_street_type_isSet) {
        obj.insert(QString("street_type"), ::OpenAPI::toJsonValue(m_street_type));
    }
    if (m_timezone_isSet) {
        obj.insert(QString("timezone"), ::OpenAPI::toJsonValue(m_timezone));
    }
    if (m_tld_isSet) {
        obj.insert(QString("tld"), ::OpenAPI::toJsonValue(m_tld));
    }
    if (m_yahoo_map_url_isSet) {
        obj.insert(QString("yahoo_map_url"), ::OpenAPI::toJsonValue(m_yahoo_map_url));
    }
    if (m_zipcodes.size() > 0) {
        obj.insert(QString("zipcodes"), ::OpenAPI::toJsonValue(m_zipcodes));
    }
    return obj;
}

QString OAISolrResponseDto::getAdm1Code() const {
    return m_adm1_code;
}
void OAISolrResponseDto::setAdm1Code(const QString &adm1_code) {
    m_adm1_code = adm1_code;
    m_adm1_code_isSet = true;
}

bool OAISolrResponseDto::is_adm1_code_Set() const{
    return m_adm1_code_isSet;
}

bool OAISolrResponseDto::is_adm1_code_Valid() const{
    return m_adm1_code_isValid;
}

QString OAISolrResponseDto::getAdm1Name() const {
    return m_adm1_name;
}
void OAISolrResponseDto::setAdm1Name(const QString &adm1_name) {
    m_adm1_name = adm1_name;
    m_adm1_name_isSet = true;
}

bool OAISolrResponseDto::is_adm1_name_Set() const{
    return m_adm1_name_isSet;
}

bool OAISolrResponseDto::is_adm1_name_Valid() const{
    return m_adm1_name_isValid;
}

QList<QString> OAISolrResponseDto::getAdm1NamesAlternate() const {
    return m_adm1_names_alternate;
}
void OAISolrResponseDto::setAdm1NamesAlternate(const QList<QString> &adm1_names_alternate) {
    m_adm1_names_alternate = adm1_names_alternate;
    m_adm1_names_alternate_isSet = true;
}

bool OAISolrResponseDto::is_adm1_names_alternate_Set() const{
    return m_adm1_names_alternate_isSet;
}

bool OAISolrResponseDto::is_adm1_names_alternate_Valid() const{
    return m_adm1_names_alternate_isValid;
}

QString OAISolrResponseDto::getAdm2Code() const {
    return m_adm2_code;
}
void OAISolrResponseDto::setAdm2Code(const QString &adm2_code) {
    m_adm2_code = adm2_code;
    m_adm2_code_isSet = true;
}

bool OAISolrResponseDto::is_adm2_code_Set() const{
    return m_adm2_code_isSet;
}

bool OAISolrResponseDto::is_adm2_code_Valid() const{
    return m_adm2_code_isValid;
}

QString OAISolrResponseDto::getAdm2Name() const {
    return m_adm2_name;
}
void OAISolrResponseDto::setAdm2Name(const QString &adm2_name) {
    m_adm2_name = adm2_name;
    m_adm2_name_isSet = true;
}

bool OAISolrResponseDto::is_adm2_name_Set() const{
    return m_adm2_name_isSet;
}

bool OAISolrResponseDto::is_adm2_name_Valid() const{
    return m_adm2_name_isValid;
}

QList<QString> OAISolrResponseDto::getAdm2NamesAlternate() const {
    return m_adm2_names_alternate;
}
void OAISolrResponseDto::setAdm2NamesAlternate(const QList<QString> &adm2_names_alternate) {
    m_adm2_names_alternate = adm2_names_alternate;
    m_adm2_names_alternate_isSet = true;
}

bool OAISolrResponseDto::is_adm2_names_alternate_Set() const{
    return m_adm2_names_alternate_isSet;
}

bool OAISolrResponseDto::is_adm2_names_alternate_Valid() const{
    return m_adm2_names_alternate_isValid;
}

QString OAISolrResponseDto::getAdm3Code() const {
    return m_adm3_code;
}
void OAISolrResponseDto::setAdm3Code(const QString &adm3_code) {
    m_adm3_code = adm3_code;
    m_adm3_code_isSet = true;
}

bool OAISolrResponseDto::is_adm3_code_Set() const{
    return m_adm3_code_isSet;
}

bool OAISolrResponseDto::is_adm3_code_Valid() const{
    return m_adm3_code_isValid;
}

QString OAISolrResponseDto::getAdm3Name() const {
    return m_adm3_name;
}
void OAISolrResponseDto::setAdm3Name(const QString &adm3_name) {
    m_adm3_name = adm3_name;
    m_adm3_name_isSet = true;
}

bool OAISolrResponseDto::is_adm3_name_Set() const{
    return m_adm3_name_isSet;
}

bool OAISolrResponseDto::is_adm3_name_Valid() const{
    return m_adm3_name_isValid;
}

QString OAISolrResponseDto::getAdm4Code() const {
    return m_adm4_code;
}
void OAISolrResponseDto::setAdm4Code(const QString &adm4_code) {
    m_adm4_code = adm4_code;
    m_adm4_code_isSet = true;
}

bool OAISolrResponseDto::is_adm4_code_Set() const{
    return m_adm4_code_isSet;
}

bool OAISolrResponseDto::is_adm4_code_Valid() const{
    return m_adm4_code_isValid;
}

QString OAISolrResponseDto::getAdm4Name() const {
    return m_adm4_name;
}
void OAISolrResponseDto::setAdm4Name(const QString &adm4_name) {
    m_adm4_name = adm4_name;
    m_adm4_name_isSet = true;
}

bool OAISolrResponseDto::is_adm4_name_Set() const{
    return m_adm4_name_isSet;
}

bool OAISolrResponseDto::is_adm4_name_Valid() const{
    return m_adm4_name_isValid;
}

QString OAISolrResponseDto::getAmenity() const {
    return m_amenity;
}
void OAISolrResponseDto::setAmenity(const QString &amenity) {
    m_amenity = amenity;
    m_amenity_isSet = true;
}

bool OAISolrResponseDto::is_amenity_Set() const{
    return m_amenity_isSet;
}

bool OAISolrResponseDto::is_amenity_Valid() const{
    return m_amenity_isValid;
}

double OAISolrResponseDto::getArea() const {
    return m_area;
}
void OAISolrResponseDto::setArea(const double &area) {
    m_area = area;
    m_area_isSet = true;
}

bool OAISolrResponseDto::is_area_Set() const{
    return m_area_isSet;
}

bool OAISolrResponseDto::is_area_Valid() const{
    return m_area_isValid;
}

QString OAISolrResponseDto::getCapitalName() const {
    return m_capital_name;
}
void OAISolrResponseDto::setCapitalName(const QString &capital_name) {
    m_capital_name = capital_name;
    m_capital_name_isSet = true;
}

bool OAISolrResponseDto::is_capital_name_Set() const{
    return m_capital_name_isSet;
}

bool OAISolrResponseDto::is_capital_name_Valid() const{
    return m_capital_name_isValid;
}

QString OAISolrResponseDto::getContinent() const {
    return m_continent;
}
void OAISolrResponseDto::setContinent(const QString &continent) {
    m_continent = continent;
    m_continent_isSet = true;
}

bool OAISolrResponseDto::is_continent_Set() const{
    return m_continent_isSet;
}

bool OAISolrResponseDto::is_continent_Valid() const{
    return m_continent_isValid;
}

QString OAISolrResponseDto::getCountryCode() const {
    return m_country_code;
}
void OAISolrResponseDto::setCountryCode(const QString &country_code) {
    m_country_code = country_code;
    m_country_code_isSet = true;
}

bool OAISolrResponseDto::is_country_code_Set() const{
    return m_country_code_isSet;
}

bool OAISolrResponseDto::is_country_code_Valid() const{
    return m_country_code_isValid;
}

QString OAISolrResponseDto::getCountryFlagUrl() const {
    return m_country_flag_url;
}
void OAISolrResponseDto::setCountryFlagUrl(const QString &country_flag_url) {
    m_country_flag_url = country_flag_url;
    m_country_flag_url_isSet = true;
}

bool OAISolrResponseDto::is_country_flag_url_Set() const{
    return m_country_flag_url_isSet;
}

bool OAISolrResponseDto::is_country_flag_url_Valid() const{
    return m_country_flag_url_isValid;
}

QString OAISolrResponseDto::getCountryName() const {
    return m_country_name;
}
void OAISolrResponseDto::setCountryName(const QString &country_name) {
    m_country_name = country_name;
    m_country_name_isSet = true;
}

bool OAISolrResponseDto::is_country_name_Set() const{
    return m_country_name_isSet;
}

bool OAISolrResponseDto::is_country_name_Valid() const{
    return m_country_name_isValid;
}

QList<QString> OAISolrResponseDto::getCountryNamesAlternate() const {
    return m_country_names_alternate;
}
void OAISolrResponseDto::setCountryNamesAlternate(const QList<QString> &country_names_alternate) {
    m_country_names_alternate = country_names_alternate;
    m_country_names_alternate_isSet = true;
}

bool OAISolrResponseDto::is_country_names_alternate_Set() const{
    return m_country_names_alternate_isSet;
}

bool OAISolrResponseDto::is_country_names_alternate_Valid() const{
    return m_country_names_alternate_isValid;
}

QString OAISolrResponseDto::getCurrencyCode() const {
    return m_currency_code;
}
void OAISolrResponseDto::setCurrencyCode(const QString &currency_code) {
    m_currency_code = currency_code;
    m_currency_code_isSet = true;
}

bool OAISolrResponseDto::is_currency_code_Set() const{
    return m_currency_code_isSet;
}

bool OAISolrResponseDto::is_currency_code_Valid() const{
    return m_currency_code_isValid;
}

QString OAISolrResponseDto::getCurrencyName() const {
    return m_currency_name;
}
void OAISolrResponseDto::setCurrencyName(const QString &currency_name) {
    m_currency_name = currency_name;
    m_currency_name_isSet = true;
}

bool OAISolrResponseDto::is_currency_name_Set() const{
    return m_currency_name_isSet;
}

bool OAISolrResponseDto::is_currency_name_Valid() const{
    return m_currency_name_isValid;
}

qint32 OAISolrResponseDto::getElevation() const {
    return m_elevation;
}
void OAISolrResponseDto::setElevation(const qint32 &elevation) {
    m_elevation = elevation;
    m_elevation_isSet = true;
}

bool OAISolrResponseDto::is_elevation_Set() const{
    return m_elevation_isSet;
}

bool OAISolrResponseDto::is_elevation_Valid() const{
    return m_elevation_isValid;
}

QString OAISolrResponseDto::getFeatureClass() const {
    return m_feature_class;
}
void OAISolrResponseDto::setFeatureClass(const QString &feature_class) {
    m_feature_class = feature_class;
    m_feature_class_isSet = true;
}

bool OAISolrResponseDto::is_feature_class_Set() const{
    return m_feature_class_isSet;
}

bool OAISolrResponseDto::is_feature_class_Valid() const{
    return m_feature_class_isValid;
}

QString OAISolrResponseDto::getFeatureCode() const {
    return m_feature_code;
}
void OAISolrResponseDto::setFeatureCode(const QString &feature_code) {
    m_feature_code = feature_code;
    m_feature_code_isSet = true;
}

bool OAISolrResponseDto::is_feature_code_Set() const{
    return m_feature_code_isSet;
}

bool OAISolrResponseDto::is_feature_code_Valid() const{
    return m_feature_code_isValid;
}

qint64 OAISolrResponseDto::getFeatureId() const {
    return m_feature_id;
}
void OAISolrResponseDto::setFeatureId(const qint64 &feature_id) {
    m_feature_id = feature_id;
    m_feature_id_isSet = true;
}

bool OAISolrResponseDto::is_feature_id_Set() const{
    return m_feature_id_isSet;
}

bool OAISolrResponseDto::is_feature_id_Valid() const{
    return m_feature_id_isValid;
}

QString OAISolrResponseDto::getFipsCode() const {
    return m_fips_code;
}
void OAISolrResponseDto::setFipsCode(const QString &fips_code) {
    m_fips_code = fips_code;
    m_fips_code_isSet = true;
}

bool OAISolrResponseDto::is_fips_code_Set() const{
    return m_fips_code_isSet;
}

bool OAISolrResponseDto::is_fips_code_Valid() const{
    return m_fips_code_isValid;
}

QString OAISolrResponseDto::getFullyQualifiedAddress() const {
    return m_fully_qualified_address;
}
void OAISolrResponseDto::setFullyQualifiedAddress(const QString &fully_qualified_address) {
    m_fully_qualified_address = fully_qualified_address;
    m_fully_qualified_address_isSet = true;
}

bool OAISolrResponseDto::is_fully_qualified_address_Set() const{
    return m_fully_qualified_address_isSet;
}

bool OAISolrResponseDto::is_fully_qualified_address_Valid() const{
    return m_fully_qualified_address_isValid;
}

QString OAISolrResponseDto::getFullyQualifiedName() const {
    return m_fully_qualified_name;
}
void OAISolrResponseDto::setFullyQualifiedName(const QString &fully_qualified_name) {
    m_fully_qualified_name = fully_qualified_name;
    m_fully_qualified_name_isSet = true;
}

bool OAISolrResponseDto::is_fully_qualified_name_Set() const{
    return m_fully_qualified_name_isSet;
}

bool OAISolrResponseDto::is_fully_qualified_name_Valid() const{
    return m_fully_qualified_name_isValid;
}

QString OAISolrResponseDto::getGoogleMapUrl() const {
    return m_google_map_url;
}
void OAISolrResponseDto::setGoogleMapUrl(const QString &google_map_url) {
    m_google_map_url = google_map_url;
    m_google_map_url_isSet = true;
}

bool OAISolrResponseDto::is_google_map_url_Set() const{
    return m_google_map_url_isSet;
}

bool OAISolrResponseDto::is_google_map_url_Valid() const{
    return m_google_map_url_isValid;
}

qint32 OAISolrResponseDto::getGtopo30() const {
    return m_gtopo30;
}
void OAISolrResponseDto::setGtopo30(const qint32 &gtopo30) {
    m_gtopo30 = gtopo30;
    m_gtopo30_isSet = true;
}

bool OAISolrResponseDto::is_gtopo30_Set() const{
    return m_gtopo30_isSet;
}

bool OAISolrResponseDto::is_gtopo30_Valid() const{
    return m_gtopo30_isValid;
}

QList<OAIHouseNumberDto> OAISolrResponseDto::getHouseNumbers() const {
    return m_house_numbers;
}
void OAISolrResponseDto::setHouseNumbers(const QList<OAIHouseNumberDto> &house_numbers) {
    m_house_numbers = house_numbers;
    m_house_numbers_isSet = true;
}

bool OAISolrResponseDto::is_house_numbers_Set() const{
    return m_house_numbers_isSet;
}

bool OAISolrResponseDto::is_house_numbers_Valid() const{
    return m_house_numbers_isValid;
}

QString OAISolrResponseDto::getIsIn() const {
    return m_is_in;
}
void OAISolrResponseDto::setIsIn(const QString &is_in) {
    m_is_in = is_in;
    m_is_in_isSet = true;
}

bool OAISolrResponseDto::is_is_in_Set() const{
    return m_is_in_isSet;
}

bool OAISolrResponseDto::is_is_in_Valid() const{
    return m_is_in_isValid;
}

QString OAISolrResponseDto::getIsInAdm() const {
    return m_is_in_adm;
}
void OAISolrResponseDto::setIsInAdm(const QString &is_in_adm) {
    m_is_in_adm = is_in_adm;
    m_is_in_adm_isSet = true;
}

bool OAISolrResponseDto::is_is_in_adm_Set() const{
    return m_is_in_adm_isSet;
}

bool OAISolrResponseDto::is_is_in_adm_Valid() const{
    return m_is_in_adm_isValid;
}

QString OAISolrResponseDto::getIsInPlace() const {
    return m_is_in_place;
}
void OAISolrResponseDto::setIsInPlace(const QString &is_in_place) {
    m_is_in_place = is_in_place;
    m_is_in_place_isSet = true;
}

bool OAISolrResponseDto::is_is_in_place_Set() const{
    return m_is_in_place_isSet;
}

bool OAISolrResponseDto::is_is_in_place_Valid() const{
    return m_is_in_place_isValid;
}

QList<QString> OAISolrResponseDto::getIsInZip() const {
    return m_is_in_zip;
}
void OAISolrResponseDto::setIsInZip(const QList<QString> &is_in_zip) {
    m_is_in_zip = is_in_zip;
    m_is_in_zip_isSet = true;
}

bool OAISolrResponseDto::is_is_in_zip_Set() const{
    return m_is_in_zip_isSet;
}

bool OAISolrResponseDto::is_is_in_zip_Valid() const{
    return m_is_in_zip_isValid;
}

QString OAISolrResponseDto::getIsoalpha2CountryCode() const {
    return m_isoalpha2_country_code;
}
void OAISolrResponseDto::setIsoalpha2CountryCode(const QString &isoalpha2_country_code) {
    m_isoalpha2_country_code = isoalpha2_country_code;
    m_isoalpha2_country_code_isSet = true;
}

bool OAISolrResponseDto::is_isoalpha2_country_code_Set() const{
    return m_isoalpha2_country_code_isSet;
}

bool OAISolrResponseDto::is_isoalpha2_country_code_Valid() const{
    return m_isoalpha2_country_code_isValid;
}

QString OAISolrResponseDto::getIsoalpha3CountryCode() const {
    return m_isoalpha3_country_code;
}
void OAISolrResponseDto::setIsoalpha3CountryCode(const QString &isoalpha3_country_code) {
    m_isoalpha3_country_code = isoalpha3_country_code;
    m_isoalpha3_country_code_isSet = true;
}

bool OAISolrResponseDto::is_isoalpha3_country_code_Set() const{
    return m_isoalpha3_country_code_isSet;
}

bool OAISolrResponseDto::is_isoalpha3_country_code_Valid() const{
    return m_isoalpha3_country_code_isValid;
}

double OAISolrResponseDto::getLat() const {
    return m_lat;
}
void OAISolrResponseDto::setLat(const double &lat) {
    m_lat = lat;
    m_lat_isSet = true;
}

bool OAISolrResponseDto::is_lat_Set() const{
    return m_lat_isSet;
}

bool OAISolrResponseDto::is_lat_Valid() const{
    return m_lat_isValid;
}

double OAISolrResponseDto::getLength() const {
    return m_length;
}
void OAISolrResponseDto::setLength(const double &length) {
    m_length = length;
    m_length_isSet = true;
}

bool OAISolrResponseDto::is_length_Set() const{
    return m_length_isSet;
}

bool OAISolrResponseDto::is_length_Valid() const{
    return m_length_isValid;
}

qint32 OAISolrResponseDto::getLevel() const {
    return m_level;
}
void OAISolrResponseDto::setLevel(const qint32 &level) {
    m_level = level;
    m_level_isSet = true;
}

bool OAISolrResponseDto::is_level_Set() const{
    return m_level_isSet;
}

bool OAISolrResponseDto::is_level_Valid() const{
    return m_level_isValid;
}

double OAISolrResponseDto::getLng() const {
    return m_lng;
}
void OAISolrResponseDto::setLng(const double &lng) {
    m_lng = lng;
    m_lng_isSet = true;
}

bool OAISolrResponseDto::is_lng_Set() const{
    return m_lng_isSet;
}

bool OAISolrResponseDto::is_lng_Valid() const{
    return m_lng_isValid;
}

bool OAISolrResponseDto::isMunicipality() const {
    return m_municipality;
}
void OAISolrResponseDto::setMunicipality(const bool &municipality) {
    m_municipality = municipality;
    m_municipality_isSet = true;
}

bool OAISolrResponseDto::is_municipality_Set() const{
    return m_municipality_isSet;
}

bool OAISolrResponseDto::is_municipality_Valid() const{
    return m_municipality_isValid;
}

QString OAISolrResponseDto::getName() const {
    return m_name;
}
void OAISolrResponseDto::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAISolrResponseDto::is_name_Set() const{
    return m_name_isSet;
}

bool OAISolrResponseDto::is_name_Valid() const{
    return m_name_isValid;
}

QList<QString> OAISolrResponseDto::getNameAlternates() const {
    return m_name_alternates;
}
void OAISolrResponseDto::setNameAlternates(const QList<QString> &name_alternates) {
    m_name_alternates = name_alternates;
    m_name_alternates_isSet = true;
}

bool OAISolrResponseDto::is_name_alternates_Set() const{
    return m_name_alternates_isSet;
}

bool OAISolrResponseDto::is_name_alternates_Valid() const{
    return m_name_alternates_isValid;
}

QString OAISolrResponseDto::getNameAscii() const {
    return m_name_ascii;
}
void OAISolrResponseDto::setNameAscii(const QString &name_ascii) {
    m_name_ascii = name_ascii;
    m_name_ascii_isSet = true;
}

bool OAISolrResponseDto::is_name_ascii_Set() const{
    return m_name_ascii_isSet;
}

bool OAISolrResponseDto::is_name_ascii_Valid() const{
    return m_name_ascii_isValid;
}

bool OAISolrResponseDto::isOneWay() const {
    return m_one_way;
}
void OAISolrResponseDto::setOneWay(const bool &one_way) {
    m_one_way = one_way;
    m_one_way_isSet = true;
}

bool OAISolrResponseDto::is_one_way_Set() const{
    return m_one_way_isSet;
}

bool OAISolrResponseDto::is_one_way_Valid() const{
    return m_one_way_isValid;
}

qint64 OAISolrResponseDto::getOpenstreetmapId() const {
    return m_openstreetmap_id;
}
void OAISolrResponseDto::setOpenstreetmapId(const qint64 &openstreetmap_id) {
    m_openstreetmap_id = openstreetmap_id;
    m_openstreetmap_id_isSet = true;
}

bool OAISolrResponseDto::is_openstreetmap_id_Set() const{
    return m_openstreetmap_id_isSet;
}

bool OAISolrResponseDto::is_openstreetmap_id_Valid() const{
    return m_openstreetmap_id_isValid;
}

QString OAISolrResponseDto::getOpenstreetmapMapUrl() const {
    return m_openstreetmap_map_url;
}
void OAISolrResponseDto::setOpenstreetmapMapUrl(const QString &openstreetmap_map_url) {
    m_openstreetmap_map_url = openstreetmap_map_url;
    m_openstreetmap_map_url_isSet = true;
}

bool OAISolrResponseDto::is_openstreetmap_map_url_Set() const{
    return m_openstreetmap_map_url_isSet;
}

bool OAISolrResponseDto::is_openstreetmap_map_url_Valid() const{
    return m_openstreetmap_map_url_isValid;
}

QString OAISolrResponseDto::getPhonePrefix() const {
    return m_phone_prefix;
}
void OAISolrResponseDto::setPhonePrefix(const QString &phone_prefix) {
    m_phone_prefix = phone_prefix;
    m_phone_prefix_isSet = true;
}

bool OAISolrResponseDto::is_phone_prefix_Set() const{
    return m_phone_prefix_isSet;
}

bool OAISolrResponseDto::is_phone_prefix_Valid() const{
    return m_phone_prefix_isValid;
}

QString OAISolrResponseDto::getPlacetype() const {
    return m_placetype;
}
void OAISolrResponseDto::setPlacetype(const QString &placetype) {
    m_placetype = placetype;
    m_placetype_isSet = true;
}

bool OAISolrResponseDto::is_placetype_Set() const{
    return m_placetype_isSet;
}

bool OAISolrResponseDto::is_placetype_Valid() const{
    return m_placetype_isValid;
}

qint32 OAISolrResponseDto::getPopulation() const {
    return m_population;
}
void OAISolrResponseDto::setPopulation(const qint32 &population) {
    m_population = population;
    m_population_isSet = true;
}

bool OAISolrResponseDto::is_population_Set() const{
    return m_population_isSet;
}

bool OAISolrResponseDto::is_population_Valid() const{
    return m_population_isValid;
}

QString OAISolrResponseDto::getPostalCodeMask() const {
    return m_postal_code_mask;
}
void OAISolrResponseDto::setPostalCodeMask(const QString &postal_code_mask) {
    m_postal_code_mask = postal_code_mask;
    m_postal_code_mask_isSet = true;
}

bool OAISolrResponseDto::is_postal_code_mask_Set() const{
    return m_postal_code_mask_isSet;
}

bool OAISolrResponseDto::is_postal_code_mask_Valid() const{
    return m_postal_code_mask_isValid;
}

QString OAISolrResponseDto::getPostalCodeRegex() const {
    return m_postal_code_regex;
}
void OAISolrResponseDto::setPostalCodeRegex(const QString &postal_code_regex) {
    m_postal_code_regex = postal_code_regex;
    m_postal_code_regex_isSet = true;
}

bool OAISolrResponseDto::is_postal_code_regex_Set() const{
    return m_postal_code_regex_isSet;
}

bool OAISolrResponseDto::is_postal_code_regex_Valid() const{
    return m_postal_code_regex_isValid;
}

float OAISolrResponseDto::getScore() const {
    return m_score;
}
void OAISolrResponseDto::setScore(const float &score) {
    m_score = score;
    m_score_isSet = true;
}

bool OAISolrResponseDto::is_score_Set() const{
    return m_score_isSet;
}

bool OAISolrResponseDto::is_score_Valid() const{
    return m_score_isValid;
}

QList<QString> OAISolrResponseDto::getSpokenLanguages() const {
    return m_spoken_languages;
}
void OAISolrResponseDto::setSpokenLanguages(const QList<QString> &spoken_languages) {
    m_spoken_languages = spoken_languages;
    m_spoken_languages_isSet = true;
}

bool OAISolrResponseDto::is_spoken_languages_Set() const{
    return m_spoken_languages_isSet;
}

bool OAISolrResponseDto::is_spoken_languages_Valid() const{
    return m_spoken_languages_isValid;
}

QString OAISolrResponseDto::getStreetType() const {
    return m_street_type;
}
void OAISolrResponseDto::setStreetType(const QString &street_type) {
    m_street_type = street_type;
    m_street_type_isSet = true;
}

bool OAISolrResponseDto::is_street_type_Set() const{
    return m_street_type_isSet;
}

bool OAISolrResponseDto::is_street_type_Valid() const{
    return m_street_type_isValid;
}

QString OAISolrResponseDto::getTimezone() const {
    return m_timezone;
}
void OAISolrResponseDto::setTimezone(const QString &timezone) {
    m_timezone = timezone;
    m_timezone_isSet = true;
}

bool OAISolrResponseDto::is_timezone_Set() const{
    return m_timezone_isSet;
}

bool OAISolrResponseDto::is_timezone_Valid() const{
    return m_timezone_isValid;
}

QString OAISolrResponseDto::getTld() const {
    return m_tld;
}
void OAISolrResponseDto::setTld(const QString &tld) {
    m_tld = tld;
    m_tld_isSet = true;
}

bool OAISolrResponseDto::is_tld_Set() const{
    return m_tld_isSet;
}

bool OAISolrResponseDto::is_tld_Valid() const{
    return m_tld_isValid;
}

QString OAISolrResponseDto::getYahooMapUrl() const {
    return m_yahoo_map_url;
}
void OAISolrResponseDto::setYahooMapUrl(const QString &yahoo_map_url) {
    m_yahoo_map_url = yahoo_map_url;
    m_yahoo_map_url_isSet = true;
}

bool OAISolrResponseDto::is_yahoo_map_url_Set() const{
    return m_yahoo_map_url_isSet;
}

bool OAISolrResponseDto::is_yahoo_map_url_Valid() const{
    return m_yahoo_map_url_isValid;
}

QList<QString> OAISolrResponseDto::getZipcodes() const {
    return m_zipcodes;
}
void OAISolrResponseDto::setZipcodes(const QList<QString> &zipcodes) {
    m_zipcodes = zipcodes;
    m_zipcodes_isSet = true;
}

bool OAISolrResponseDto::is_zipcodes_Set() const{
    return m_zipcodes_isSet;
}

bool OAISolrResponseDto::is_zipcodes_Valid() const{
    return m_zipcodes_isValid;
}

bool OAISolrResponseDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_adm1_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_adm1_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_adm1_names_alternate.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_adm2_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_adm2_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_adm2_names_alternate.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_adm3_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_adm3_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_adm4_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_adm4_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_amenity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_area_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_capital_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_continent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_flag_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_names_alternate.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_elevation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_feature_class_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_feature_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_feature_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fips_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fully_qualified_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fully_qualified_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_google_map_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gtopo30_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_house_numbers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_in_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_in_adm_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_in_place_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_in_zip.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_isoalpha2_country_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_isoalpha3_country_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lat_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_length_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_level_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lng_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_municipality_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_alternates.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_ascii_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_one_way_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_openstreetmap_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_openstreetmap_map_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phone_prefix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_placetype_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_population_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_postal_code_mask_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_postal_code_regex_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_spoken_languages.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_street_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timezone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tld_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_yahoo_map_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_zipcodes.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISolrResponseDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
