/**
 * Gisgraphy webservices
 * Since 2006, [Gisgraphy](http://www.gisgraphy.com) is a free, open source framework that offers the possibility to do geolocalisation and geocoding via Java APIs or REST webservices. Because geocoding is nothing without data, it provides an easy to use importer that will automatically download and import the necessary (free) data to your local database ([OpenStreetMap](http://www.openstreetmap.org/), [Geonames](http://www.geonames.org/) and [Quattroshapes](http://www.quattroshapes.com/): more than 100 million entries). You can also add your own data with the Web interface or the importer connectors provided. Gisgraphy is production ready, and has been designed to be scalable(load balanced), performant and used in other languages than just java : results can be output in XML, JSON, PHP, Python, Ruby, YAML, GeoRSS, and Atom. One of the most popular GPS tracking System (OpenGTS) also includes a Gisgraphy client...Gisgraphy is a framework. As a result it's flexible and powerful enough to be used in a lot of different use cases. [read more](http://www.gisgraphy.com)   if you use the premium servers, you can use the api key to test the webservices 
 *
 * The version of the OpenAPI document: 4.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHouseNumberDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHouseNumberDto::OAIHouseNumberDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHouseNumberDto::OAIHouseNumberDto() {
    this->initializeModel();
}

OAIHouseNumberDto::~OAIHouseNumberDto() {}

void OAIHouseNumberDto::initializeModel() {

    m_location_isSet = false;
    m_location_isValid = false;

    m_number_isSet = false;
    m_number_isValid = false;
}

void OAIHouseNumberDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHouseNumberDto::fromJsonObject(QJsonObject json) {

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_number_isValid = ::OpenAPI::fromJsonValue(m_number, json[QString("number")]);
    m_number_isSet = !json[QString("number")].isNull() && m_number_isValid;
}

QString OAIHouseNumberDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHouseNumberDto::asJsonObject() const {
    QJsonObject obj;
    if (m_location_isSet) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_number_isSet) {
        obj.insert(QString("number"), ::OpenAPI::toJsonValue(m_number));
    }
    return obj;
}

QString OAIHouseNumberDto::getLocation() const {
    return m_location;
}
void OAIHouseNumberDto::setLocation(const QString &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIHouseNumberDto::is_location_Set() const{
    return m_location_isSet;
}

bool OAIHouseNumberDto::is_location_Valid() const{
    return m_location_isValid;
}

QString OAIHouseNumberDto::getNumber() const {
    return m_number;
}
void OAIHouseNumberDto::setNumber(const QString &number) {
    m_number = number;
    m_number_isSet = true;
}

bool OAIHouseNumberDto::is_number_Set() const{
    return m_number_isSet;
}

bool OAIHouseNumberDto::is_number_Valid() const{
    return m_number_isValid;
}

bool OAIHouseNumberDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHouseNumberDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
