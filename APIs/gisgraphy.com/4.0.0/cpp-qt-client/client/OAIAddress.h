/**
 * Gisgraphy webservices
 * Since 2006, [Gisgraphy](http://www.gisgraphy.com) is a free, open source framework that offers the possibility to do geolocalisation and geocoding via Java APIs or REST webservices. Because geocoding is nothing without data, it provides an easy to use importer that will automatically download and import the necessary (free) data to your local database ([OpenStreetMap](http://www.openstreetmap.org/), [Geonames](http://www.geonames.org/) and [Quattroshapes](http://www.quattroshapes.com/): more than 100 million entries). You can also add your own data with the Web interface or the importer connectors provided. Gisgraphy is production ready, and has been designed to be scalable(load balanced), performant and used in other languages than just java : results can be output in XML, JSON, PHP, Python, Ruby, YAML, GeoRSS, and Atom. One of the most popular GPS tracking System (OpenGTS) also includes a Gisgraphy client...Gisgraphy is a framework. As a result it's flexible and powerful enough to be used in a lot of different use cases. [read more](http://www.gisgraphy.com)   if you use the premium servers, you can use the api key to test the webservices 
 *
 * The version of the OpenAPI document: 4.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIAddress.h
 *
 * 
 */

#ifndef OAIAddress_H
#define OAIAddress_H

#include <QJsonObject>

#include <QList>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIAddress : public OAIObject {
public:
    OAIAddress();
    OAIAddress(QString json);
    ~OAIAddress() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getPoBox() const;
    void setPoBox(const QString &po_box);
    bool is_po_box_Set() const;
    bool is_po_box_Valid() const;

    QString getPoBoxAgency() const;
    void setPoBoxAgency(const QString &po_box_agency);
    bool is_po_box_agency_Set() const;
    bool is_po_box_agency_Valid() const;

    QString getPoBoxInfo() const;
    void setPoBoxInfo(const QString &po_box_info);
    bool is_po_box_info_Set() const;
    bool is_po_box_info_Valid() const;

    QMap<QString, QList<QString>> getAdm1NameAlternatesLocalized() const;
    void setAdm1NameAlternatesLocalized(const QMap<QString, QList<QString>> &adm1_name_alternates_localized);
    bool is_adm1_name_alternates_localized_Set() const;
    bool is_adm1_name_alternates_localized_Valid() const;

    QMap<QString, QList<QString>> getAdm2NameAlternatesLocalized() const;
    void setAdm2NameAlternatesLocalized(const QMap<QString, QList<QString>> &adm2_name_alternates_localized);
    bool is_adm2_name_alternates_localized_Set() const;
    bool is_adm2_name_alternates_localized_Valid() const;

    QString getBlock() const;
    void setBlock(const QString &block);
    bool is_block_Set() const;
    bool is_block_Valid() const;

    QString getCity() const;
    void setCity(const QString &city);
    bool is_city_Set() const;
    bool is_city_Valid() const;

    QString getCitySubdivision() const;
    void setCitySubdivision(const QString &city_subdivision);
    bool is_city_subdivision_Set() const;
    bool is_city_subdivision_Valid() const;

    QString getCivicNumberSuffix() const;
    void setCivicNumberSuffix(const QString &civic_number_suffix);
    bool is_civic_number_suffix_Set() const;
    bool is_civic_number_suffix_Valid() const;

    QString getConfidence() const;
    void setConfidence(const QString &confidence);
    bool is_confidence_Set() const;
    bool is_confidence_Valid() const;

    QString getCountry() const;
    void setCountry(const QString &country);
    bool is_country_Set() const;
    bool is_country_Valid() const;

    QMap<QString, QList<QString>> getCountryNameAlternatesLocalized() const;
    void setCountryNameAlternatesLocalized(const QMap<QString, QList<QString>> &country_name_alternates_localized);
    bool is_country_name_alternates_localized_Set() const;
    bool is_country_name_alternates_localized_Valid() const;

    QString getCountrycode() const;
    void setCountrycode(const QString &countrycode);
    bool is_countrycode_Set() const;
    bool is_countrycode_Valid() const;

    QString getDependentLocality() const;
    void setDependentLocality(const QString &dependent_locality);
    bool is_dependent_locality_Set() const;
    bool is_dependent_locality_Valid() const;

    double getDistance() const;
    void setDistance(const double &distance);
    bool is_distance_Set() const;
    bool is_distance_Valid() const;

    QString getDistrict() const;
    void setDistrict(const QString &district);
    bool is_district_Set() const;
    bool is_district_Valid() const;

    QString getExtraInfo() const;
    void setExtraInfo(const QString &extra_info);
    bool is_extra_info_Set() const;
    bool is_extra_info_Valid() const;

    QString getFloor() const;
    void setFloor(const QString &floor);
    bool is_floor_Set() const;
    bool is_floor_Valid() const;

    QString getGeocodinglevel() const;
    void setGeocodinglevel(const QString &geocodinglevel);
    bool is_geocodinglevel_Set() const;
    bool is_geocodinglevel_Valid() const;

    QString getHouseNumber() const;
    void setHouseNumber(const QString &house_number);
    bool is_house_number_Set() const;
    bool is_house_number_Valid() const;

    QString getHouseNumberInfo() const;
    void setHouseNumberInfo(const QString &house_number_info);
    bool is_house_number_info_Set() const;
    bool is_house_number_info_Valid() const;

    qint64 getId() const;
    void setId(const qint64 &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    double getLat() const;
    void setLat(const double &lat);
    bool is_lat_Set() const;
    bool is_lat_Valid() const;

    double getLng() const;
    void setLng(const double &lng);
    bool is_lng_Set() const;
    bool is_lng_Valid() const;

    QString getLote() const;
    void setLote(const QString &lote);
    bool is_lote_Set() const;
    bool is_lote_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QMap<QString, QList<QString>> getNameAlternatesLocalized() const;
    void setNameAlternatesLocalized(const QMap<QString, QList<QString>> &name_alternates_localized);
    bool is_name_alternates_localized_Set() const;
    bool is_name_alternates_localized_Valid() const;

    QString getPostDirection() const;
    void setPostDirection(const QString &post_direction);
    bool is_post_direction_Set() const;
    bool is_post_direction_Valid() const;

    QString getPostDirectionIntersection() const;
    void setPostDirectionIntersection(const QString &post_direction_intersection);
    bool is_post_direction_intersection_Set() const;
    bool is_post_direction_intersection_Valid() const;

    QString getPostTown() const;
    void setPostTown(const QString &post_town);
    bool is_post_town_Set() const;
    bool is_post_town_Valid() const;

    QString getPreDirection() const;
    void setPreDirection(const QString &pre_direction);
    bool is_pre_direction_Set() const;
    bool is_pre_direction_Valid() const;

    QString getPreDirectionIntersection() const;
    void setPreDirectionIntersection(const QString &pre_direction_intersection);
    bool is_pre_direction_intersection_Set() const;
    bool is_pre_direction_intersection_Valid() const;

    QString getPrefecture() const;
    void setPrefecture(const QString &prefecture);
    bool is_prefecture_Set() const;
    bool is_prefecture_Valid() const;

    QString getQuadrant() const;
    void setQuadrant(const QString &quadrant);
    bool is_quadrant_Set() const;
    bool is_quadrant_Valid() const;

    QString getQuarter() const;
    void setQuarter(const QString &quarter);
    bool is_quarter_Set() const;
    bool is_quarter_Valid() const;

    QString getRecipientName() const;
    void setRecipientName(const QString &recipient_name);
    bool is_recipient_name_Set() const;
    bool is_recipient_name_Valid() const;

    QString getSector() const;
    void setSector(const QString &sector);
    bool is_sector_Set() const;
    bool is_sector_Valid() const;

    QString getState() const;
    void setState(const QString &state);
    bool is_state_Set() const;
    bool is_state_Valid() const;

    QString getStreetName() const;
    void setStreetName(const QString &street_name);
    bool is_street_name_Set() const;
    bool is_street_name_Valid() const;

    QString getStreetNameIntersection() const;
    void setStreetNameIntersection(const QString &street_name_intersection);
    bool is_street_name_intersection_Set() const;
    bool is_street_name_intersection_Valid() const;

    QString getStreetType() const;
    void setStreetType(const QString &street_type);
    bool is_street_type_Set() const;
    bool is_street_type_Valid() const;

    QString getStreetTypeIntersection() const;
    void setStreetTypeIntersection(const QString &street_type_intersection);
    bool is_street_type_intersection_Set() const;
    bool is_street_type_intersection_Valid() const;

    QString getSuiteNumber() const;
    void setSuiteNumber(const QString &suite_number);
    bool is_suite_number_Set() const;
    bool is_suite_number_Valid() const;

    QString getSuiteType() const;
    void setSuiteType(const QString &suite_type);
    bool is_suite_type_Set() const;
    bool is_suite_type_Valid() const;

    QString getWard() const;
    void setWard(const QString &ward);
    bool is_ward_Set() const;
    bool is_ward_Valid() const;

    QString getZipCode() const;
    void setZipCode(const QString &zip_code);
    bool is_zip_code_Set() const;
    bool is_zip_code_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_po_box;
    bool m_po_box_isSet;
    bool m_po_box_isValid;

    QString m_po_box_agency;
    bool m_po_box_agency_isSet;
    bool m_po_box_agency_isValid;

    QString m_po_box_info;
    bool m_po_box_info_isSet;
    bool m_po_box_info_isValid;

    QMap<QString, QList<QString>> m_adm1_name_alternates_localized;
    bool m_adm1_name_alternates_localized_isSet;
    bool m_adm1_name_alternates_localized_isValid;

    QMap<QString, QList<QString>> m_adm2_name_alternates_localized;
    bool m_adm2_name_alternates_localized_isSet;
    bool m_adm2_name_alternates_localized_isValid;

    QString m_block;
    bool m_block_isSet;
    bool m_block_isValid;

    QString m_city;
    bool m_city_isSet;
    bool m_city_isValid;

    QString m_city_subdivision;
    bool m_city_subdivision_isSet;
    bool m_city_subdivision_isValid;

    QString m_civic_number_suffix;
    bool m_civic_number_suffix_isSet;
    bool m_civic_number_suffix_isValid;

    QString m_confidence;
    bool m_confidence_isSet;
    bool m_confidence_isValid;

    QString m_country;
    bool m_country_isSet;
    bool m_country_isValid;

    QMap<QString, QList<QString>> m_country_name_alternates_localized;
    bool m_country_name_alternates_localized_isSet;
    bool m_country_name_alternates_localized_isValid;

    QString m_countrycode;
    bool m_countrycode_isSet;
    bool m_countrycode_isValid;

    QString m_dependent_locality;
    bool m_dependent_locality_isSet;
    bool m_dependent_locality_isValid;

    double m_distance;
    bool m_distance_isSet;
    bool m_distance_isValid;

    QString m_district;
    bool m_district_isSet;
    bool m_district_isValid;

    QString m_extra_info;
    bool m_extra_info_isSet;
    bool m_extra_info_isValid;

    QString m_floor;
    bool m_floor_isSet;
    bool m_floor_isValid;

    QString m_geocodinglevel;
    bool m_geocodinglevel_isSet;
    bool m_geocodinglevel_isValid;

    QString m_house_number;
    bool m_house_number_isSet;
    bool m_house_number_isValid;

    QString m_house_number_info;
    bool m_house_number_info_isSet;
    bool m_house_number_info_isValid;

    qint64 m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    double m_lat;
    bool m_lat_isSet;
    bool m_lat_isValid;

    double m_lng;
    bool m_lng_isSet;
    bool m_lng_isValid;

    QString m_lote;
    bool m_lote_isSet;
    bool m_lote_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QMap<QString, QList<QString>> m_name_alternates_localized;
    bool m_name_alternates_localized_isSet;
    bool m_name_alternates_localized_isValid;

    QString m_post_direction;
    bool m_post_direction_isSet;
    bool m_post_direction_isValid;

    QString m_post_direction_intersection;
    bool m_post_direction_intersection_isSet;
    bool m_post_direction_intersection_isValid;

    QString m_post_town;
    bool m_post_town_isSet;
    bool m_post_town_isValid;

    QString m_pre_direction;
    bool m_pre_direction_isSet;
    bool m_pre_direction_isValid;

    QString m_pre_direction_intersection;
    bool m_pre_direction_intersection_isSet;
    bool m_pre_direction_intersection_isValid;

    QString m_prefecture;
    bool m_prefecture_isSet;
    bool m_prefecture_isValid;

    QString m_quadrant;
    bool m_quadrant_isSet;
    bool m_quadrant_isValid;

    QString m_quarter;
    bool m_quarter_isSet;
    bool m_quarter_isValid;

    QString m_recipient_name;
    bool m_recipient_name_isSet;
    bool m_recipient_name_isValid;

    QString m_sector;
    bool m_sector_isSet;
    bool m_sector_isValid;

    QString m_state;
    bool m_state_isSet;
    bool m_state_isValid;

    QString m_street_name;
    bool m_street_name_isSet;
    bool m_street_name_isValid;

    QString m_street_name_intersection;
    bool m_street_name_intersection_isSet;
    bool m_street_name_intersection_isValid;

    QString m_street_type;
    bool m_street_type_isSet;
    bool m_street_type_isValid;

    QString m_street_type_intersection;
    bool m_street_type_intersection_isSet;
    bool m_street_type_intersection_isValid;

    QString m_suite_number;
    bool m_suite_number_isSet;
    bool m_suite_number_isValid;

    QString m_suite_type;
    bool m_suite_type_isSet;
    bool m_suite_type_isValid;

    QString m_ward;
    bool m_ward_isSet;
    bool m_ward_isValid;

    QString m_zip_code;
    bool m_zip_code_isSet;
    bool m_zip_code_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIAddress)

#endif // OAIAddress_H
