/**
 * Gisgraphy webservices
 * Since 2006, [Gisgraphy](http://www.gisgraphy.com) is a free, open source framework that offers the possibility to do geolocalisation and geocoding via Java APIs or REST webservices. Because geocoding is nothing without data, it provides an easy to use importer that will automatically download and import the necessary (free) data to your local database ([OpenStreetMap](http://www.openstreetmap.org/), [Geonames](http://www.geonames.org/) and [Quattroshapes](http://www.quattroshapes.com/): more than 100 million entries). You can also add your own data with the Web interface or the importer connectors provided. Gisgraphy is production ready, and has been designed to be scalable(load balanced), performant and used in other languages than just java : results can be output in XML, JSON, PHP, Python, Ruby, YAML, GeoRSS, and Atom. One of the most popular GPS tracking System (OpenGTS) also includes a Gisgraphy client...Gisgraphy is a framework. As a result it's flexible and powerful enough to be used in a lot of different use cases. [read more](http://www.gisgraphy.com)   if you use the premium servers, you can use the api key to test the webservices 
 *
 * The version of the OpenAPI document: 4.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStreetDistance.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStreetDistance::OAIStreetDistance(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStreetDistance::OAIStreetDistance() {
    this->initializeModel();
}

OAIStreetDistance::~OAIStreetDistance() {}

void OAIStreetDistance::initializeModel() {

    m_country_code_isSet = false;
    m_country_code_isValid = false;

    m_distance_isSet = false;
    m_distance_isValid = false;

    m_fully_qualified_address_isSet = false;
    m_fully_qualified_address_isValid = false;

    m_gid_isSet = false;
    m_gid_isValid = false;

    m_is_in_isSet = false;
    m_is_in_isValid = false;

    m_is_in_adm_isSet = false;
    m_is_in_adm_isValid = false;

    m_is_in_place_isSet = false;
    m_is_in_place_isValid = false;

    m_is_in_zip_isSet = false;
    m_is_in_zip_isValid = false;

    m_lat_isSet = false;
    m_lat_isValid = false;

    m_length_isSet = false;
    m_length_isValid = false;

    m_lng_isSet = false;
    m_lng_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_one_way_isSet = false;
    m_one_way_isValid = false;

    m_openstreetmap_id_isSet = false;
    m_openstreetmap_id_isValid = false;

    m_street_type_isSet = false;
    m_street_type_isValid = false;
}

void OAIStreetDistance::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStreetDistance::fromJsonObject(QJsonObject json) {

    m_country_code_isValid = ::OpenAPI::fromJsonValue(m_country_code, json[QString("countryCode")]);
    m_country_code_isSet = !json[QString("countryCode")].isNull() && m_country_code_isValid;

    m_distance_isValid = ::OpenAPI::fromJsonValue(m_distance, json[QString("distance")]);
    m_distance_isSet = !json[QString("distance")].isNull() && m_distance_isValid;

    m_fully_qualified_address_isValid = ::OpenAPI::fromJsonValue(m_fully_qualified_address, json[QString("fullyQualifiedAddress")]);
    m_fully_qualified_address_isSet = !json[QString("fullyQualifiedAddress")].isNull() && m_fully_qualified_address_isValid;

    m_gid_isValid = ::OpenAPI::fromJsonValue(m_gid, json[QString("gid")]);
    m_gid_isSet = !json[QString("gid")].isNull() && m_gid_isValid;

    m_is_in_isValid = ::OpenAPI::fromJsonValue(m_is_in, json[QString("isIn")]);
    m_is_in_isSet = !json[QString("isIn")].isNull() && m_is_in_isValid;

    m_is_in_adm_isValid = ::OpenAPI::fromJsonValue(m_is_in_adm, json[QString("isInAdm")]);
    m_is_in_adm_isSet = !json[QString("isInAdm")].isNull() && m_is_in_adm_isValid;

    m_is_in_place_isValid = ::OpenAPI::fromJsonValue(m_is_in_place, json[QString("isInPlace")]);
    m_is_in_place_isSet = !json[QString("isInPlace")].isNull() && m_is_in_place_isValid;

    m_is_in_zip_isValid = ::OpenAPI::fromJsonValue(m_is_in_zip, json[QString("isInZip")]);
    m_is_in_zip_isSet = !json[QString("isInZip")].isNull() && m_is_in_zip_isValid;

    m_lat_isValid = ::OpenAPI::fromJsonValue(m_lat, json[QString("lat")]);
    m_lat_isSet = !json[QString("lat")].isNull() && m_lat_isValid;

    m_length_isValid = ::OpenAPI::fromJsonValue(m_length, json[QString("length")]);
    m_length_isSet = !json[QString("length")].isNull() && m_length_isValid;

    m_lng_isValid = ::OpenAPI::fromJsonValue(m_lng, json[QString("lng")]);
    m_lng_isSet = !json[QString("lng")].isNull() && m_lng_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_one_way_isValid = ::OpenAPI::fromJsonValue(m_one_way, json[QString("oneWay")]);
    m_one_way_isSet = !json[QString("oneWay")].isNull() && m_one_way_isValid;

    m_openstreetmap_id_isValid = ::OpenAPI::fromJsonValue(m_openstreetmap_id, json[QString("openstreetmapId")]);
    m_openstreetmap_id_isSet = !json[QString("openstreetmapId")].isNull() && m_openstreetmap_id_isValid;

    m_street_type_isValid = ::OpenAPI::fromJsonValue(m_street_type, json[QString("streetType")]);
    m_street_type_isSet = !json[QString("streetType")].isNull() && m_street_type_isValid;
}

QString OAIStreetDistance::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStreetDistance::asJsonObject() const {
    QJsonObject obj;
    if (m_country_code_isSet) {
        obj.insert(QString("countryCode"), ::OpenAPI::toJsonValue(m_country_code));
    }
    if (m_distance_isSet) {
        obj.insert(QString("distance"), ::OpenAPI::toJsonValue(m_distance));
    }
    if (m_fully_qualified_address_isSet) {
        obj.insert(QString("fullyQualifiedAddress"), ::OpenAPI::toJsonValue(m_fully_qualified_address));
    }
    if (m_gid_isSet) {
        obj.insert(QString("gid"), ::OpenAPI::toJsonValue(m_gid));
    }
    if (m_is_in_isSet) {
        obj.insert(QString("isIn"), ::OpenAPI::toJsonValue(m_is_in));
    }
    if (m_is_in_adm_isSet) {
        obj.insert(QString("isInAdm"), ::OpenAPI::toJsonValue(m_is_in_adm));
    }
    if (m_is_in_place_isSet) {
        obj.insert(QString("isInPlace"), ::OpenAPI::toJsonValue(m_is_in_place));
    }
    if (m_is_in_zip_isSet) {
        obj.insert(QString("isInZip"), ::OpenAPI::toJsonValue(m_is_in_zip));
    }
    if (m_lat_isSet) {
        obj.insert(QString("lat"), ::OpenAPI::toJsonValue(m_lat));
    }
    if (m_length_isSet) {
        obj.insert(QString("length"), ::OpenAPI::toJsonValue(m_length));
    }
    if (m_lng_isSet) {
        obj.insert(QString("lng"), ::OpenAPI::toJsonValue(m_lng));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_one_way_isSet) {
        obj.insert(QString("oneWay"), ::OpenAPI::toJsonValue(m_one_way));
    }
    if (m_openstreetmap_id_isSet) {
        obj.insert(QString("openstreetmapId"), ::OpenAPI::toJsonValue(m_openstreetmap_id));
    }
    if (m_street_type_isSet) {
        obj.insert(QString("streetType"), ::OpenAPI::toJsonValue(m_street_type));
    }
    return obj;
}

QString OAIStreetDistance::getCountryCode() const {
    return m_country_code;
}
void OAIStreetDistance::setCountryCode(const QString &country_code) {
    m_country_code = country_code;
    m_country_code_isSet = true;
}

bool OAIStreetDistance::is_country_code_Set() const{
    return m_country_code_isSet;
}

bool OAIStreetDistance::is_country_code_Valid() const{
    return m_country_code_isValid;
}

double OAIStreetDistance::getDistance() const {
    return m_distance;
}
void OAIStreetDistance::setDistance(const double &distance) {
    m_distance = distance;
    m_distance_isSet = true;
}

bool OAIStreetDistance::is_distance_Set() const{
    return m_distance_isSet;
}

bool OAIStreetDistance::is_distance_Valid() const{
    return m_distance_isValid;
}

QString OAIStreetDistance::getFullyQualifiedAddress() const {
    return m_fully_qualified_address;
}
void OAIStreetDistance::setFullyQualifiedAddress(const QString &fully_qualified_address) {
    m_fully_qualified_address = fully_qualified_address;
    m_fully_qualified_address_isSet = true;
}

bool OAIStreetDistance::is_fully_qualified_address_Set() const{
    return m_fully_qualified_address_isSet;
}

bool OAIStreetDistance::is_fully_qualified_address_Valid() const{
    return m_fully_qualified_address_isValid;
}

qint64 OAIStreetDistance::getGid() const {
    return m_gid;
}
void OAIStreetDistance::setGid(const qint64 &gid) {
    m_gid = gid;
    m_gid_isSet = true;
}

bool OAIStreetDistance::is_gid_Set() const{
    return m_gid_isSet;
}

bool OAIStreetDistance::is_gid_Valid() const{
    return m_gid_isValid;
}

QString OAIStreetDistance::getIsIn() const {
    return m_is_in;
}
void OAIStreetDistance::setIsIn(const QString &is_in) {
    m_is_in = is_in;
    m_is_in_isSet = true;
}

bool OAIStreetDistance::is_is_in_Set() const{
    return m_is_in_isSet;
}

bool OAIStreetDistance::is_is_in_Valid() const{
    return m_is_in_isValid;
}

QString OAIStreetDistance::getIsInAdm() const {
    return m_is_in_adm;
}
void OAIStreetDistance::setIsInAdm(const QString &is_in_adm) {
    m_is_in_adm = is_in_adm;
    m_is_in_adm_isSet = true;
}

bool OAIStreetDistance::is_is_in_adm_Set() const{
    return m_is_in_adm_isSet;
}

bool OAIStreetDistance::is_is_in_adm_Valid() const{
    return m_is_in_adm_isValid;
}

QString OAIStreetDistance::getIsInPlace() const {
    return m_is_in_place;
}
void OAIStreetDistance::setIsInPlace(const QString &is_in_place) {
    m_is_in_place = is_in_place;
    m_is_in_place_isSet = true;
}

bool OAIStreetDistance::is_is_in_place_Set() const{
    return m_is_in_place_isSet;
}

bool OAIStreetDistance::is_is_in_place_Valid() const{
    return m_is_in_place_isValid;
}

QString OAIStreetDistance::getIsInZip() const {
    return m_is_in_zip;
}
void OAIStreetDistance::setIsInZip(const QString &is_in_zip) {
    m_is_in_zip = is_in_zip;
    m_is_in_zip_isSet = true;
}

bool OAIStreetDistance::is_is_in_zip_Set() const{
    return m_is_in_zip_isSet;
}

bool OAIStreetDistance::is_is_in_zip_Valid() const{
    return m_is_in_zip_isValid;
}

double OAIStreetDistance::getLat() const {
    return m_lat;
}
void OAIStreetDistance::setLat(const double &lat) {
    m_lat = lat;
    m_lat_isSet = true;
}

bool OAIStreetDistance::is_lat_Set() const{
    return m_lat_isSet;
}

bool OAIStreetDistance::is_lat_Valid() const{
    return m_lat_isValid;
}

double OAIStreetDistance::getLength() const {
    return m_length;
}
void OAIStreetDistance::setLength(const double &length) {
    m_length = length;
    m_length_isSet = true;
}

bool OAIStreetDistance::is_length_Set() const{
    return m_length_isSet;
}

bool OAIStreetDistance::is_length_Valid() const{
    return m_length_isValid;
}

double OAIStreetDistance::getLng() const {
    return m_lng;
}
void OAIStreetDistance::setLng(const double &lng) {
    m_lng = lng;
    m_lng_isSet = true;
}

bool OAIStreetDistance::is_lng_Set() const{
    return m_lng_isSet;
}

bool OAIStreetDistance::is_lng_Valid() const{
    return m_lng_isValid;
}

QString OAIStreetDistance::getName() const {
    return m_name;
}
void OAIStreetDistance::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIStreetDistance::is_name_Set() const{
    return m_name_isSet;
}

bool OAIStreetDistance::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIStreetDistance::isOneWay() const {
    return m_one_way;
}
void OAIStreetDistance::setOneWay(const bool &one_way) {
    m_one_way = one_way;
    m_one_way_isSet = true;
}

bool OAIStreetDistance::is_one_way_Set() const{
    return m_one_way_isSet;
}

bool OAIStreetDistance::is_one_way_Valid() const{
    return m_one_way_isValid;
}

qint64 OAIStreetDistance::getOpenstreetmapId() const {
    return m_openstreetmap_id;
}
void OAIStreetDistance::setOpenstreetmapId(const qint64 &openstreetmap_id) {
    m_openstreetmap_id = openstreetmap_id;
    m_openstreetmap_id_isSet = true;
}

bool OAIStreetDistance::is_openstreetmap_id_Set() const{
    return m_openstreetmap_id_isSet;
}

bool OAIStreetDistance::is_openstreetmap_id_Valid() const{
    return m_openstreetmap_id_isValid;
}

QString OAIStreetDistance::getStreetType() const {
    return m_street_type;
}
void OAIStreetDistance::setStreetType(const QString &street_type) {
    m_street_type = street_type;
    m_street_type_isSet = true;
}

bool OAIStreetDistance::is_street_type_Set() const{
    return m_street_type_isSet;
}

bool OAIStreetDistance::is_street_type_Valid() const{
    return m_street_type_isValid;
}

bool OAIStreetDistance::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_country_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_distance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fully_qualified_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_in_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_in_adm_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_in_place_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_in_zip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lat_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_length_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lng_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_one_way_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_openstreetmap_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_street_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStreetDistance::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
