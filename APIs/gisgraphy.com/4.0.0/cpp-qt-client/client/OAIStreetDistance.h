/**
 * Gisgraphy webservices
 * Since 2006, [Gisgraphy](http://www.gisgraphy.com) is a free, open source framework that offers the possibility to do geolocalisation and geocoding via Java APIs or REST webservices. Because geocoding is nothing without data, it provides an easy to use importer that will automatically download and import the necessary (free) data to your local database ([OpenStreetMap](http://www.openstreetmap.org/), [Geonames](http://www.geonames.org/) and [Quattroshapes](http://www.quattroshapes.com/): more than 100 million entries). You can also add your own data with the Web interface or the importer connectors provided. Gisgraphy is production ready, and has been designed to be scalable(load balanced), performant and used in other languages than just java : results can be output in XML, JSON, PHP, Python, Ruby, YAML, GeoRSS, and Atom. One of the most popular GPS tracking System (OpenGTS) also includes a Gisgraphy client...Gisgraphy is a framework. As a result it's flexible and powerful enough to be used in a lot of different use cases. [read more](http://www.gisgraphy.com)   if you use the premium servers, you can use the api key to test the webservices 
 *
 * The version of the OpenAPI document: 4.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIStreetDistance.h
 *
 * 
 */

#ifndef OAIStreetDistance_H
#define OAIStreetDistance_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIStreetDistance : public OAIObject {
public:
    OAIStreetDistance();
    OAIStreetDistance(QString json);
    ~OAIStreetDistance() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getCountryCode() const;
    void setCountryCode(const QString &country_code);
    bool is_country_code_Set() const;
    bool is_country_code_Valid() const;

    double getDistance() const;
    void setDistance(const double &distance);
    bool is_distance_Set() const;
    bool is_distance_Valid() const;

    QString getFullyQualifiedAddress() const;
    void setFullyQualifiedAddress(const QString &fully_qualified_address);
    bool is_fully_qualified_address_Set() const;
    bool is_fully_qualified_address_Valid() const;

    qint64 getGid() const;
    void setGid(const qint64 &gid);
    bool is_gid_Set() const;
    bool is_gid_Valid() const;

    QString getIsIn() const;
    void setIsIn(const QString &is_in);
    bool is_is_in_Set() const;
    bool is_is_in_Valid() const;

    QString getIsInAdm() const;
    void setIsInAdm(const QString &is_in_adm);
    bool is_is_in_adm_Set() const;
    bool is_is_in_adm_Valid() const;

    QString getIsInPlace() const;
    void setIsInPlace(const QString &is_in_place);
    bool is_is_in_place_Set() const;
    bool is_is_in_place_Valid() const;

    QString getIsInZip() const;
    void setIsInZip(const QString &is_in_zip);
    bool is_is_in_zip_Set() const;
    bool is_is_in_zip_Valid() const;

    double getLat() const;
    void setLat(const double &lat);
    bool is_lat_Set() const;
    bool is_lat_Valid() const;

    double getLength() const;
    void setLength(const double &length);
    bool is_length_Set() const;
    bool is_length_Valid() const;

    double getLng() const;
    void setLng(const double &lng);
    bool is_lng_Set() const;
    bool is_lng_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    bool isOneWay() const;
    void setOneWay(const bool &one_way);
    bool is_one_way_Set() const;
    bool is_one_way_Valid() const;

    qint64 getOpenstreetmapId() const;
    void setOpenstreetmapId(const qint64 &openstreetmap_id);
    bool is_openstreetmap_id_Set() const;
    bool is_openstreetmap_id_Valid() const;

    QString getStreetType() const;
    void setStreetType(const QString &street_type);
    bool is_street_type_Set() const;
    bool is_street_type_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_country_code;
    bool m_country_code_isSet;
    bool m_country_code_isValid;

    double m_distance;
    bool m_distance_isSet;
    bool m_distance_isValid;

    QString m_fully_qualified_address;
    bool m_fully_qualified_address_isSet;
    bool m_fully_qualified_address_isValid;

    qint64 m_gid;
    bool m_gid_isSet;
    bool m_gid_isValid;

    QString m_is_in;
    bool m_is_in_isSet;
    bool m_is_in_isValid;

    QString m_is_in_adm;
    bool m_is_in_adm_isSet;
    bool m_is_in_adm_isValid;

    QString m_is_in_place;
    bool m_is_in_place_isSet;
    bool m_is_in_place_isValid;

    QString m_is_in_zip;
    bool m_is_in_zip_isSet;
    bool m_is_in_zip_isValid;

    double m_lat;
    bool m_lat_isSet;
    bool m_lat_isValid;

    double m_length;
    bool m_length_isSet;
    bool m_length_isValid;

    double m_lng;
    bool m_lng_isSet;
    bool m_lng_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    bool m_one_way;
    bool m_one_way_isSet;
    bool m_one_way_isValid;

    qint64 m_openstreetmap_id;
    bool m_openstreetmap_id_isSet;
    bool m_openstreetmap_id_isValid;

    QString m_street_type;
    bool m_street_type_isSet;
    bool m_street_type_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIStreetDistance)

#endif // OAIStreetDistance_H
