/**
 * Gisgraphy webservices
 * Since 2006, [Gisgraphy](http://www.gisgraphy.com) is a free, open source framework that offers the possibility to do geolocalisation and geocoding via Java APIs or REST webservices. Because geocoding is nothing without data, it provides an easy to use importer that will automatically download and import the necessary (free) data to your local database ([OpenStreetMap](http://www.openstreetmap.org/), [Geonames](http://www.geonames.org/) and [Quattroshapes](http://www.quattroshapes.com/): more than 100 million entries). You can also add your own data with the Web interface or the importer connectors provided. Gisgraphy is production ready, and has been designed to be scalable(load balanced), performant and used in other languages than just java : results can be output in XML, JSON, PHP, Python, Ruby, YAML, GeoRSS, and Atom. One of the most popular GPS tracking System (OpenGTS) also includes a Gisgraphy client...Gisgraphy is a framework. As a result it's flexible and powerful enough to be used in a lot of different use cases. [read more](http://www.gisgraphy.com)   if you use the premium servers, you can use the api key to test the webservices 
 *
 * The version of the OpenAPI document: 4.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIFulltextResultsDto.h
 *
 * 
 */

#ifndef OAIFulltextResultsDto_H
#define OAIFulltextResultsDto_H

#include <QJsonObject>

#include "OAISolrResponseDto.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAISolrResponseDto;

class OAIFulltextResultsDto : public OAIObject {
public:
    OAIFulltextResultsDto();
    OAIFulltextResultsDto(QString json);
    ~OAIFulltextResultsDto() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint64 getQTime() const;
    void setQTime(const qint64 &q_time);
    bool is_q_time_Set() const;
    bool is_q_time_Valid() const;

    float getMaxScore() const;
    void setMaxScore(const float &max_score);
    bool is_max_score_Set() const;
    bool is_max_score_Valid() const;

    QString getMessage() const;
    void setMessage(const QString &message);
    bool is_message_Set() const;
    bool is_message_Valid() const;

    qint32 getNumFound() const;
    void setNumFound(const qint32 &num_found);
    bool is_num_found_Set() const;
    bool is_num_found_Valid() const;

    QList<OAISolrResponseDto> getResult() const;
    void setResult(const QList<OAISolrResponseDto> &result);
    bool is_result_Set() const;
    bool is_result_Valid() const;

    qint32 getResultsSize() const;
    void setResultsSize(const qint32 &results_size);
    bool is_results_size_Set() const;
    bool is_results_size_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint64 m_q_time;
    bool m_q_time_isSet;
    bool m_q_time_isValid;

    float m_max_score;
    bool m_max_score_isSet;
    bool m_max_score_isValid;

    QString m_message;
    bool m_message_isSet;
    bool m_message_isValid;

    qint32 m_num_found;
    bool m_num_found_isSet;
    bool m_num_found_isValid;

    QList<OAISolrResponseDto> m_result;
    bool m_result_isSet;
    bool m_result_isValid;

    qint32 m_results_size;
    bool m_results_size_isSet;
    bool m_results_size_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIFulltextResultsDto)

#endif // OAIFulltextResultsDto_H
