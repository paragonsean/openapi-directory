/**
 * Gisgraphy webservices
 * Since 2006, [Gisgraphy](http://www.gisgraphy.com) is a free, open source framework that offers the possibility to do geolocalisation and geocoding via Java APIs or REST webservices. Because geocoding is nothing without data, it provides an easy to use importer that will automatically download and import the necessary (free) data to your local database ([OpenStreetMap](http://www.openstreetmap.org/), [Geonames](http://www.geonames.org/) and [Quattroshapes](http://www.quattroshapes.com/): more than 100 million entries). You can also add your own data with the Web interface or the importer connectors provided. Gisgraphy is production ready, and has been designed to be scalable(load balanced), performant and used in other languages than just java : results can be output in XML, JSON, PHP, Python, Ruby, YAML, GeoRSS, and Atom. One of the most popular GPS tracking System (OpenGTS) also includes a Gisgraphy client...Gisgraphy is a framework. As a result it's flexible and powerful enough to be used in a lot of different use cases. [read more](http://www.gisgraphy.com)   if you use the premium servers, you can use the api key to test the webservices 
 *
 * The version of the OpenAPI document: 4.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGisFeatureDistance.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGisFeatureDistance::OAIGisFeatureDistance(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGisFeatureDistance::OAIGisFeatureDistance() {
    this->initializeModel();
}

OAIGisFeatureDistance::~OAIGisFeatureDistance() {}

void OAIGisFeatureDistance::initializeModel() {

    m_adm1_code_isSet = false;
    m_adm1_code_isValid = false;

    m_adm1_name_isSet = false;
    m_adm1_name_isValid = false;

    m_adm2_code_isSet = false;
    m_adm2_code_isValid = false;

    m_adm2_name_isSet = false;
    m_adm2_name_isValid = false;

    m_adm3_code_isSet = false;
    m_adm3_code_isValid = false;

    m_adm3_name_isSet = false;
    m_adm3_name_isValid = false;

    m_adm4_code_isSet = false;
    m_adm4_code_isValid = false;

    m_adm4_name_isSet = false;
    m_adm4_name_isValid = false;

    m_adm5_code_isSet = false;
    m_adm5_code_isValid = false;

    m_adm5_name_isSet = false;
    m_adm5_name_isValid = false;

    m_amenity_isSet = false;
    m_amenity_isValid = false;

    m_area_isSet = false;
    m_area_isValid = false;

    m_ascii_name_isSet = false;
    m_ascii_name_isValid = false;

    m_capital_name_isSet = false;
    m_capital_name_isValid = false;

    m_continent_isSet = false;
    m_continent_isValid = false;

    m_country_code_isSet = false;
    m_country_code_isValid = false;

    m_country_flag_url_isSet = false;
    m_country_flag_url_isValid = false;

    m_currency_code_isSet = false;
    m_currency_code_isValid = false;

    m_currency_name_isSet = false;
    m_currency_name_isValid = false;

    m_distance_isSet = false;
    m_distance_isValid = false;

    m_elevation_isSet = false;
    m_elevation_isValid = false;

    m_equivalent_fips_code_isSet = false;
    m_equivalent_fips_code_isValid = false;

    m_feature_class_isSet = false;
    m_feature_class_isValid = false;

    m_feature_code_isSet = false;
    m_feature_code_isValid = false;

    m_feature_id_isSet = false;
    m_feature_id_isValid = false;

    m_fips_code_isSet = false;
    m_fips_code_isValid = false;

    m_fully_qualified_address_isSet = false;
    m_fully_qualified_address_isValid = false;

    m_google_map_url_isSet = false;
    m_google_map_url_isValid = false;

    m_gtopo30_isSet = false;
    m_gtopo30_isValid = false;

    m_is_in_isSet = false;
    m_is_in_isValid = false;

    m_is_in_adm_isSet = false;
    m_is_in_adm_isValid = false;

    m_is_in_place_isSet = false;
    m_is_in_place_isValid = false;

    m_is_in_zip_isSet = false;
    m_is_in_zip_isValid = false;

    m_iso3166_alpha2_code_isSet = false;
    m_iso3166_alpha2_code_isValid = false;

    m_iso3166_alpha3_code_isSet = false;
    m_iso3166_alpha3_code_isValid = false;

    m_iso3166_numeric_code_isSet = false;
    m_iso3166_numeric_code_isValid = false;

    m_lat_isSet = false;
    m_lat_isValid = false;

    m_length_isSet = false;
    m_length_isValid = false;

    m_level_isSet = false;
    m_level_isValid = false;

    m_lng_isSet = false;
    m_lng_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_one_way_isSet = false;
    m_one_way_isValid = false;

    m_openstreetmap_id_isSet = false;
    m_openstreetmap_id_isValid = false;

    m_openstreetmap_map_url_isSet = false;
    m_openstreetmap_map_url_isValid = false;

    m_phone_prefix_isSet = false;
    m_phone_prefix_isValid = false;

    m_place_type_isSet = false;
    m_place_type_isValid = false;

    m_population_isSet = false;
    m_population_isValid = false;

    m_postal_code_mask_isSet = false;
    m_postal_code_mask_isValid = false;

    m_postal_code_regex_isSet = false;
    m_postal_code_regex_isValid = false;

    m_street_type_isSet = false;
    m_street_type_isValid = false;

    m_timezone_isSet = false;
    m_timezone_isValid = false;

    m_tld_isSet = false;
    m_tld_isValid = false;

    m_yahoo_map_url_isSet = false;
    m_yahoo_map_url_isValid = false;

    m_zip_codes_isSet = false;
    m_zip_codes_isValid = false;
}

void OAIGisFeatureDistance::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGisFeatureDistance::fromJsonObject(QJsonObject json) {

    m_adm1_code_isValid = ::OpenAPI::fromJsonValue(m_adm1_code, json[QString("adm1Code")]);
    m_adm1_code_isSet = !json[QString("adm1Code")].isNull() && m_adm1_code_isValid;

    m_adm1_name_isValid = ::OpenAPI::fromJsonValue(m_adm1_name, json[QString("adm1Name")]);
    m_adm1_name_isSet = !json[QString("adm1Name")].isNull() && m_adm1_name_isValid;

    m_adm2_code_isValid = ::OpenAPI::fromJsonValue(m_adm2_code, json[QString("adm2Code")]);
    m_adm2_code_isSet = !json[QString("adm2Code")].isNull() && m_adm2_code_isValid;

    m_adm2_name_isValid = ::OpenAPI::fromJsonValue(m_adm2_name, json[QString("adm2Name")]);
    m_adm2_name_isSet = !json[QString("adm2Name")].isNull() && m_adm2_name_isValid;

    m_adm3_code_isValid = ::OpenAPI::fromJsonValue(m_adm3_code, json[QString("adm3Code")]);
    m_adm3_code_isSet = !json[QString("adm3Code")].isNull() && m_adm3_code_isValid;

    m_adm3_name_isValid = ::OpenAPI::fromJsonValue(m_adm3_name, json[QString("adm3Name")]);
    m_adm3_name_isSet = !json[QString("adm3Name")].isNull() && m_adm3_name_isValid;

    m_adm4_code_isValid = ::OpenAPI::fromJsonValue(m_adm4_code, json[QString("adm4Code")]);
    m_adm4_code_isSet = !json[QString("adm4Code")].isNull() && m_adm4_code_isValid;

    m_adm4_name_isValid = ::OpenAPI::fromJsonValue(m_adm4_name, json[QString("adm4Name")]);
    m_adm4_name_isSet = !json[QString("adm4Name")].isNull() && m_adm4_name_isValid;

    m_adm5_code_isValid = ::OpenAPI::fromJsonValue(m_adm5_code, json[QString("adm5Code")]);
    m_adm5_code_isSet = !json[QString("adm5Code")].isNull() && m_adm5_code_isValid;

    m_adm5_name_isValid = ::OpenAPI::fromJsonValue(m_adm5_name, json[QString("adm5Name")]);
    m_adm5_name_isSet = !json[QString("adm5Name")].isNull() && m_adm5_name_isValid;

    m_amenity_isValid = ::OpenAPI::fromJsonValue(m_amenity, json[QString("amenity")]);
    m_amenity_isSet = !json[QString("amenity")].isNull() && m_amenity_isValid;

    m_area_isValid = ::OpenAPI::fromJsonValue(m_area, json[QString("area")]);
    m_area_isSet = !json[QString("area")].isNull() && m_area_isValid;

    m_ascii_name_isValid = ::OpenAPI::fromJsonValue(m_ascii_name, json[QString("asciiName")]);
    m_ascii_name_isSet = !json[QString("asciiName")].isNull() && m_ascii_name_isValid;

    m_capital_name_isValid = ::OpenAPI::fromJsonValue(m_capital_name, json[QString("capitalName")]);
    m_capital_name_isSet = !json[QString("capitalName")].isNull() && m_capital_name_isValid;

    m_continent_isValid = ::OpenAPI::fromJsonValue(m_continent, json[QString("continent")]);
    m_continent_isSet = !json[QString("continent")].isNull() && m_continent_isValid;

    m_country_code_isValid = ::OpenAPI::fromJsonValue(m_country_code, json[QString("countryCode")]);
    m_country_code_isSet = !json[QString("countryCode")].isNull() && m_country_code_isValid;

    m_country_flag_url_isValid = ::OpenAPI::fromJsonValue(m_country_flag_url, json[QString("country_flag_url")]);
    m_country_flag_url_isSet = !json[QString("country_flag_url")].isNull() && m_country_flag_url_isValid;

    m_currency_code_isValid = ::OpenAPI::fromJsonValue(m_currency_code, json[QString("currencyCode")]);
    m_currency_code_isSet = !json[QString("currencyCode")].isNull() && m_currency_code_isValid;

    m_currency_name_isValid = ::OpenAPI::fromJsonValue(m_currency_name, json[QString("currencyName")]);
    m_currency_name_isSet = !json[QString("currencyName")].isNull() && m_currency_name_isValid;

    m_distance_isValid = ::OpenAPI::fromJsonValue(m_distance, json[QString("distance")]);
    m_distance_isSet = !json[QString("distance")].isNull() && m_distance_isValid;

    m_elevation_isValid = ::OpenAPI::fromJsonValue(m_elevation, json[QString("elevation")]);
    m_elevation_isSet = !json[QString("elevation")].isNull() && m_elevation_isValid;

    m_equivalent_fips_code_isValid = ::OpenAPI::fromJsonValue(m_equivalent_fips_code, json[QString("equivalentFipsCode")]);
    m_equivalent_fips_code_isSet = !json[QString("equivalentFipsCode")].isNull() && m_equivalent_fips_code_isValid;

    m_feature_class_isValid = ::OpenAPI::fromJsonValue(m_feature_class, json[QString("featureClass")]);
    m_feature_class_isSet = !json[QString("featureClass")].isNull() && m_feature_class_isValid;

    m_feature_code_isValid = ::OpenAPI::fromJsonValue(m_feature_code, json[QString("featureCode")]);
    m_feature_code_isSet = !json[QString("featureCode")].isNull() && m_feature_code_isValid;

    m_feature_id_isValid = ::OpenAPI::fromJsonValue(m_feature_id, json[QString("featureId")]);
    m_feature_id_isSet = !json[QString("featureId")].isNull() && m_feature_id_isValid;

    m_fips_code_isValid = ::OpenAPI::fromJsonValue(m_fips_code, json[QString("fipsCode")]);
    m_fips_code_isSet = !json[QString("fipsCode")].isNull() && m_fips_code_isValid;

    m_fully_qualified_address_isValid = ::OpenAPI::fromJsonValue(m_fully_qualified_address, json[QString("fullyQualifiedAddress")]);
    m_fully_qualified_address_isSet = !json[QString("fullyQualifiedAddress")].isNull() && m_fully_qualified_address_isValid;

    m_google_map_url_isValid = ::OpenAPI::fromJsonValue(m_google_map_url, json[QString("google_map_url")]);
    m_google_map_url_isSet = !json[QString("google_map_url")].isNull() && m_google_map_url_isValid;

    m_gtopo30_isValid = ::OpenAPI::fromJsonValue(m_gtopo30, json[QString("gtopo30")]);
    m_gtopo30_isSet = !json[QString("gtopo30")].isNull() && m_gtopo30_isValid;

    m_is_in_isValid = ::OpenAPI::fromJsonValue(m_is_in, json[QString("isIn")]);
    m_is_in_isSet = !json[QString("isIn")].isNull() && m_is_in_isValid;

    m_is_in_adm_isValid = ::OpenAPI::fromJsonValue(m_is_in_adm, json[QString("isInAdm")]);
    m_is_in_adm_isSet = !json[QString("isInAdm")].isNull() && m_is_in_adm_isValid;

    m_is_in_place_isValid = ::OpenAPI::fromJsonValue(m_is_in_place, json[QString("isInPlace")]);
    m_is_in_place_isSet = !json[QString("isInPlace")].isNull() && m_is_in_place_isValid;

    m_is_in_zip_isValid = ::OpenAPI::fromJsonValue(m_is_in_zip, json[QString("isInZip")]);
    m_is_in_zip_isSet = !json[QString("isInZip")].isNull() && m_is_in_zip_isValid;

    m_iso3166_alpha2_code_isValid = ::OpenAPI::fromJsonValue(m_iso3166_alpha2_code, json[QString("iso3166Alpha2Code")]);
    m_iso3166_alpha2_code_isSet = !json[QString("iso3166Alpha2Code")].isNull() && m_iso3166_alpha2_code_isValid;

    m_iso3166_alpha3_code_isValid = ::OpenAPI::fromJsonValue(m_iso3166_alpha3_code, json[QString("iso3166Alpha3Code")]);
    m_iso3166_alpha3_code_isSet = !json[QString("iso3166Alpha3Code")].isNull() && m_iso3166_alpha3_code_isValid;

    m_iso3166_numeric_code_isValid = ::OpenAPI::fromJsonValue(m_iso3166_numeric_code, json[QString("iso3166NumericCode")]);
    m_iso3166_numeric_code_isSet = !json[QString("iso3166NumericCode")].isNull() && m_iso3166_numeric_code_isValid;

    m_lat_isValid = ::OpenAPI::fromJsonValue(m_lat, json[QString("lat")]);
    m_lat_isSet = !json[QString("lat")].isNull() && m_lat_isValid;

    m_length_isValid = ::OpenAPI::fromJsonValue(m_length, json[QString("length")]);
    m_length_isSet = !json[QString("length")].isNull() && m_length_isValid;

    m_level_isValid = ::OpenAPI::fromJsonValue(m_level, json[QString("level")]);
    m_level_isSet = !json[QString("level")].isNull() && m_level_isValid;

    m_lng_isValid = ::OpenAPI::fromJsonValue(m_lng, json[QString("lng")]);
    m_lng_isSet = !json[QString("lng")].isNull() && m_lng_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_one_way_isValid = ::OpenAPI::fromJsonValue(m_one_way, json[QString("oneWay")]);
    m_one_way_isSet = !json[QString("oneWay")].isNull() && m_one_way_isValid;

    m_openstreetmap_id_isValid = ::OpenAPI::fromJsonValue(m_openstreetmap_id, json[QString("openstreetmapId")]);
    m_openstreetmap_id_isSet = !json[QString("openstreetmapId")].isNull() && m_openstreetmap_id_isValid;

    m_openstreetmap_map_url_isValid = ::OpenAPI::fromJsonValue(m_openstreetmap_map_url, json[QString("openstreetmap_map_url")]);
    m_openstreetmap_map_url_isSet = !json[QString("openstreetmap_map_url")].isNull() && m_openstreetmap_map_url_isValid;

    m_phone_prefix_isValid = ::OpenAPI::fromJsonValue(m_phone_prefix, json[QString("phonePrefix")]);
    m_phone_prefix_isSet = !json[QString("phonePrefix")].isNull() && m_phone_prefix_isValid;

    m_place_type_isValid = ::OpenAPI::fromJsonValue(m_place_type, json[QString("placeType")]);
    m_place_type_isSet = !json[QString("placeType")].isNull() && m_place_type_isValid;

    m_population_isValid = ::OpenAPI::fromJsonValue(m_population, json[QString("population")]);
    m_population_isSet = !json[QString("population")].isNull() && m_population_isValid;

    m_postal_code_mask_isValid = ::OpenAPI::fromJsonValue(m_postal_code_mask, json[QString("postalCodeMask")]);
    m_postal_code_mask_isSet = !json[QString("postalCodeMask")].isNull() && m_postal_code_mask_isValid;

    m_postal_code_regex_isValid = ::OpenAPI::fromJsonValue(m_postal_code_regex, json[QString("postalCodeRegex")]);
    m_postal_code_regex_isSet = !json[QString("postalCodeRegex")].isNull() && m_postal_code_regex_isValid;

    m_street_type_isValid = ::OpenAPI::fromJsonValue(m_street_type, json[QString("streetType")]);
    m_street_type_isSet = !json[QString("streetType")].isNull() && m_street_type_isValid;

    m_timezone_isValid = ::OpenAPI::fromJsonValue(m_timezone, json[QString("timezone")]);
    m_timezone_isSet = !json[QString("timezone")].isNull() && m_timezone_isValid;

    m_tld_isValid = ::OpenAPI::fromJsonValue(m_tld, json[QString("tld")]);
    m_tld_isSet = !json[QString("tld")].isNull() && m_tld_isValid;

    m_yahoo_map_url_isValid = ::OpenAPI::fromJsonValue(m_yahoo_map_url, json[QString("yahoo_map_url")]);
    m_yahoo_map_url_isSet = !json[QString("yahoo_map_url")].isNull() && m_yahoo_map_url_isValid;

    m_zip_codes_isValid = ::OpenAPI::fromJsonValue(m_zip_codes, json[QString("zipCodes")]);
    m_zip_codes_isSet = !json[QString("zipCodes")].isNull() && m_zip_codes_isValid;
}

QString OAIGisFeatureDistance::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGisFeatureDistance::asJsonObject() const {
    QJsonObject obj;
    if (m_adm1_code_isSet) {
        obj.insert(QString("adm1Code"), ::OpenAPI::toJsonValue(m_adm1_code));
    }
    if (m_adm1_name_isSet) {
        obj.insert(QString("adm1Name"), ::OpenAPI::toJsonValue(m_adm1_name));
    }
    if (m_adm2_code_isSet) {
        obj.insert(QString("adm2Code"), ::OpenAPI::toJsonValue(m_adm2_code));
    }
    if (m_adm2_name_isSet) {
        obj.insert(QString("adm2Name"), ::OpenAPI::toJsonValue(m_adm2_name));
    }
    if (m_adm3_code_isSet) {
        obj.insert(QString("adm3Code"), ::OpenAPI::toJsonValue(m_adm3_code));
    }
    if (m_adm3_name_isSet) {
        obj.insert(QString("adm3Name"), ::OpenAPI::toJsonValue(m_adm3_name));
    }
    if (m_adm4_code_isSet) {
        obj.insert(QString("adm4Code"), ::OpenAPI::toJsonValue(m_adm4_code));
    }
    if (m_adm4_name_isSet) {
        obj.insert(QString("adm4Name"), ::OpenAPI::toJsonValue(m_adm4_name));
    }
    if (m_adm5_code_isSet) {
        obj.insert(QString("adm5Code"), ::OpenAPI::toJsonValue(m_adm5_code));
    }
    if (m_adm5_name_isSet) {
        obj.insert(QString("adm5Name"), ::OpenAPI::toJsonValue(m_adm5_name));
    }
    if (m_amenity_isSet) {
        obj.insert(QString("amenity"), ::OpenAPI::toJsonValue(m_amenity));
    }
    if (m_area_isSet) {
        obj.insert(QString("area"), ::OpenAPI::toJsonValue(m_area));
    }
    if (m_ascii_name_isSet) {
        obj.insert(QString("asciiName"), ::OpenAPI::toJsonValue(m_ascii_name));
    }
    if (m_capital_name_isSet) {
        obj.insert(QString("capitalName"), ::OpenAPI::toJsonValue(m_capital_name));
    }
    if (m_continent_isSet) {
        obj.insert(QString("continent"), ::OpenAPI::toJsonValue(m_continent));
    }
    if (m_country_code_isSet) {
        obj.insert(QString("countryCode"), ::OpenAPI::toJsonValue(m_country_code));
    }
    if (m_country_flag_url_isSet) {
        obj.insert(QString("country_flag_url"), ::OpenAPI::toJsonValue(m_country_flag_url));
    }
    if (m_currency_code_isSet) {
        obj.insert(QString("currencyCode"), ::OpenAPI::toJsonValue(m_currency_code));
    }
    if (m_currency_name_isSet) {
        obj.insert(QString("currencyName"), ::OpenAPI::toJsonValue(m_currency_name));
    }
    if (m_distance_isSet) {
        obj.insert(QString("distance"), ::OpenAPI::toJsonValue(m_distance));
    }
    if (m_elevation_isSet) {
        obj.insert(QString("elevation"), ::OpenAPI::toJsonValue(m_elevation));
    }
    if (m_equivalent_fips_code_isSet) {
        obj.insert(QString("equivalentFipsCode"), ::OpenAPI::toJsonValue(m_equivalent_fips_code));
    }
    if (m_feature_class_isSet) {
        obj.insert(QString("featureClass"), ::OpenAPI::toJsonValue(m_feature_class));
    }
    if (m_feature_code_isSet) {
        obj.insert(QString("featureCode"), ::OpenAPI::toJsonValue(m_feature_code));
    }
    if (m_feature_id_isSet) {
        obj.insert(QString("featureId"), ::OpenAPI::toJsonValue(m_feature_id));
    }
    if (m_fips_code_isSet) {
        obj.insert(QString("fipsCode"), ::OpenAPI::toJsonValue(m_fips_code));
    }
    if (m_fully_qualified_address_isSet) {
        obj.insert(QString("fullyQualifiedAddress"), ::OpenAPI::toJsonValue(m_fully_qualified_address));
    }
    if (m_google_map_url_isSet) {
        obj.insert(QString("google_map_url"), ::OpenAPI::toJsonValue(m_google_map_url));
    }
    if (m_gtopo30_isSet) {
        obj.insert(QString("gtopo30"), ::OpenAPI::toJsonValue(m_gtopo30));
    }
    if (m_is_in_isSet) {
        obj.insert(QString("isIn"), ::OpenAPI::toJsonValue(m_is_in));
    }
    if (m_is_in_adm_isSet) {
        obj.insert(QString("isInAdm"), ::OpenAPI::toJsonValue(m_is_in_adm));
    }
    if (m_is_in_place_isSet) {
        obj.insert(QString("isInPlace"), ::OpenAPI::toJsonValue(m_is_in_place));
    }
    if (m_is_in_zip_isSet) {
        obj.insert(QString("isInZip"), ::OpenAPI::toJsonValue(m_is_in_zip));
    }
    if (m_iso3166_alpha2_code_isSet) {
        obj.insert(QString("iso3166Alpha2Code"), ::OpenAPI::toJsonValue(m_iso3166_alpha2_code));
    }
    if (m_iso3166_alpha3_code_isSet) {
        obj.insert(QString("iso3166Alpha3Code"), ::OpenAPI::toJsonValue(m_iso3166_alpha3_code));
    }
    if (m_iso3166_numeric_code_isSet) {
        obj.insert(QString("iso3166NumericCode"), ::OpenAPI::toJsonValue(m_iso3166_numeric_code));
    }
    if (m_lat_isSet) {
        obj.insert(QString("lat"), ::OpenAPI::toJsonValue(m_lat));
    }
    if (m_length_isSet) {
        obj.insert(QString("length"), ::OpenAPI::toJsonValue(m_length));
    }
    if (m_level_isSet) {
        obj.insert(QString("level"), ::OpenAPI::toJsonValue(m_level));
    }
    if (m_lng_isSet) {
        obj.insert(QString("lng"), ::OpenAPI::toJsonValue(m_lng));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_one_way_isSet) {
        obj.insert(QString("oneWay"), ::OpenAPI::toJsonValue(m_one_way));
    }
    if (m_openstreetmap_id_isSet) {
        obj.insert(QString("openstreetmapId"), ::OpenAPI::toJsonValue(m_openstreetmap_id));
    }
    if (m_openstreetmap_map_url_isSet) {
        obj.insert(QString("openstreetmap_map_url"), ::OpenAPI::toJsonValue(m_openstreetmap_map_url));
    }
    if (m_phone_prefix_isSet) {
        obj.insert(QString("phonePrefix"), ::OpenAPI::toJsonValue(m_phone_prefix));
    }
    if (m_place_type_isSet) {
        obj.insert(QString("placeType"), ::OpenAPI::toJsonValue(m_place_type));
    }
    if (m_population_isSet) {
        obj.insert(QString("population"), ::OpenAPI::toJsonValue(m_population));
    }
    if (m_postal_code_mask_isSet) {
        obj.insert(QString("postalCodeMask"), ::OpenAPI::toJsonValue(m_postal_code_mask));
    }
    if (m_postal_code_regex_isSet) {
        obj.insert(QString("postalCodeRegex"), ::OpenAPI::toJsonValue(m_postal_code_regex));
    }
    if (m_street_type_isSet) {
        obj.insert(QString("streetType"), ::OpenAPI::toJsonValue(m_street_type));
    }
    if (m_timezone_isSet) {
        obj.insert(QString("timezone"), ::OpenAPI::toJsonValue(m_timezone));
    }
    if (m_tld_isSet) {
        obj.insert(QString("tld"), ::OpenAPI::toJsonValue(m_tld));
    }
    if (m_yahoo_map_url_isSet) {
        obj.insert(QString("yahoo_map_url"), ::OpenAPI::toJsonValue(m_yahoo_map_url));
    }
    if (m_zip_codes.size() > 0) {
        obj.insert(QString("zipCodes"), ::OpenAPI::toJsonValue(m_zip_codes));
    }
    return obj;
}

QString OAIGisFeatureDistance::getAdm1Code() const {
    return m_adm1_code;
}
void OAIGisFeatureDistance::setAdm1Code(const QString &adm1_code) {
    m_adm1_code = adm1_code;
    m_adm1_code_isSet = true;
}

bool OAIGisFeatureDistance::is_adm1_code_Set() const{
    return m_adm1_code_isSet;
}

bool OAIGisFeatureDistance::is_adm1_code_Valid() const{
    return m_adm1_code_isValid;
}

QString OAIGisFeatureDistance::getAdm1Name() const {
    return m_adm1_name;
}
void OAIGisFeatureDistance::setAdm1Name(const QString &adm1_name) {
    m_adm1_name = adm1_name;
    m_adm1_name_isSet = true;
}

bool OAIGisFeatureDistance::is_adm1_name_Set() const{
    return m_adm1_name_isSet;
}

bool OAIGisFeatureDistance::is_adm1_name_Valid() const{
    return m_adm1_name_isValid;
}

QString OAIGisFeatureDistance::getAdm2Code() const {
    return m_adm2_code;
}
void OAIGisFeatureDistance::setAdm2Code(const QString &adm2_code) {
    m_adm2_code = adm2_code;
    m_adm2_code_isSet = true;
}

bool OAIGisFeatureDistance::is_adm2_code_Set() const{
    return m_adm2_code_isSet;
}

bool OAIGisFeatureDistance::is_adm2_code_Valid() const{
    return m_adm2_code_isValid;
}

QString OAIGisFeatureDistance::getAdm2Name() const {
    return m_adm2_name;
}
void OAIGisFeatureDistance::setAdm2Name(const QString &adm2_name) {
    m_adm2_name = adm2_name;
    m_adm2_name_isSet = true;
}

bool OAIGisFeatureDistance::is_adm2_name_Set() const{
    return m_adm2_name_isSet;
}

bool OAIGisFeatureDistance::is_adm2_name_Valid() const{
    return m_adm2_name_isValid;
}

QString OAIGisFeatureDistance::getAdm3Code() const {
    return m_adm3_code;
}
void OAIGisFeatureDistance::setAdm3Code(const QString &adm3_code) {
    m_adm3_code = adm3_code;
    m_adm3_code_isSet = true;
}

bool OAIGisFeatureDistance::is_adm3_code_Set() const{
    return m_adm3_code_isSet;
}

bool OAIGisFeatureDistance::is_adm3_code_Valid() const{
    return m_adm3_code_isValid;
}

QString OAIGisFeatureDistance::getAdm3Name() const {
    return m_adm3_name;
}
void OAIGisFeatureDistance::setAdm3Name(const QString &adm3_name) {
    m_adm3_name = adm3_name;
    m_adm3_name_isSet = true;
}

bool OAIGisFeatureDistance::is_adm3_name_Set() const{
    return m_adm3_name_isSet;
}

bool OAIGisFeatureDistance::is_adm3_name_Valid() const{
    return m_adm3_name_isValid;
}

QString OAIGisFeatureDistance::getAdm4Code() const {
    return m_adm4_code;
}
void OAIGisFeatureDistance::setAdm4Code(const QString &adm4_code) {
    m_adm4_code = adm4_code;
    m_adm4_code_isSet = true;
}

bool OAIGisFeatureDistance::is_adm4_code_Set() const{
    return m_adm4_code_isSet;
}

bool OAIGisFeatureDistance::is_adm4_code_Valid() const{
    return m_adm4_code_isValid;
}

QString OAIGisFeatureDistance::getAdm4Name() const {
    return m_adm4_name;
}
void OAIGisFeatureDistance::setAdm4Name(const QString &adm4_name) {
    m_adm4_name = adm4_name;
    m_adm4_name_isSet = true;
}

bool OAIGisFeatureDistance::is_adm4_name_Set() const{
    return m_adm4_name_isSet;
}

bool OAIGisFeatureDistance::is_adm4_name_Valid() const{
    return m_adm4_name_isValid;
}

QString OAIGisFeatureDistance::getAdm5Code() const {
    return m_adm5_code;
}
void OAIGisFeatureDistance::setAdm5Code(const QString &adm5_code) {
    m_adm5_code = adm5_code;
    m_adm5_code_isSet = true;
}

bool OAIGisFeatureDistance::is_adm5_code_Set() const{
    return m_adm5_code_isSet;
}

bool OAIGisFeatureDistance::is_adm5_code_Valid() const{
    return m_adm5_code_isValid;
}

QString OAIGisFeatureDistance::getAdm5Name() const {
    return m_adm5_name;
}
void OAIGisFeatureDistance::setAdm5Name(const QString &adm5_name) {
    m_adm5_name = adm5_name;
    m_adm5_name_isSet = true;
}

bool OAIGisFeatureDistance::is_adm5_name_Set() const{
    return m_adm5_name_isSet;
}

bool OAIGisFeatureDistance::is_adm5_name_Valid() const{
    return m_adm5_name_isValid;
}

QString OAIGisFeatureDistance::getAmenity() const {
    return m_amenity;
}
void OAIGisFeatureDistance::setAmenity(const QString &amenity) {
    m_amenity = amenity;
    m_amenity_isSet = true;
}

bool OAIGisFeatureDistance::is_amenity_Set() const{
    return m_amenity_isSet;
}

bool OAIGisFeatureDistance::is_amenity_Valid() const{
    return m_amenity_isValid;
}

double OAIGisFeatureDistance::getArea() const {
    return m_area;
}
void OAIGisFeatureDistance::setArea(const double &area) {
    m_area = area;
    m_area_isSet = true;
}

bool OAIGisFeatureDistance::is_area_Set() const{
    return m_area_isSet;
}

bool OAIGisFeatureDistance::is_area_Valid() const{
    return m_area_isValid;
}

QString OAIGisFeatureDistance::getAsciiName() const {
    return m_ascii_name;
}
void OAIGisFeatureDistance::setAsciiName(const QString &ascii_name) {
    m_ascii_name = ascii_name;
    m_ascii_name_isSet = true;
}

bool OAIGisFeatureDistance::is_ascii_name_Set() const{
    return m_ascii_name_isSet;
}

bool OAIGisFeatureDistance::is_ascii_name_Valid() const{
    return m_ascii_name_isValid;
}

QString OAIGisFeatureDistance::getCapitalName() const {
    return m_capital_name;
}
void OAIGisFeatureDistance::setCapitalName(const QString &capital_name) {
    m_capital_name = capital_name;
    m_capital_name_isSet = true;
}

bool OAIGisFeatureDistance::is_capital_name_Set() const{
    return m_capital_name_isSet;
}

bool OAIGisFeatureDistance::is_capital_name_Valid() const{
    return m_capital_name_isValid;
}

QString OAIGisFeatureDistance::getContinent() const {
    return m_continent;
}
void OAIGisFeatureDistance::setContinent(const QString &continent) {
    m_continent = continent;
    m_continent_isSet = true;
}

bool OAIGisFeatureDistance::is_continent_Set() const{
    return m_continent_isSet;
}

bool OAIGisFeatureDistance::is_continent_Valid() const{
    return m_continent_isValid;
}

QString OAIGisFeatureDistance::getCountryCode() const {
    return m_country_code;
}
void OAIGisFeatureDistance::setCountryCode(const QString &country_code) {
    m_country_code = country_code;
    m_country_code_isSet = true;
}

bool OAIGisFeatureDistance::is_country_code_Set() const{
    return m_country_code_isSet;
}

bool OAIGisFeatureDistance::is_country_code_Valid() const{
    return m_country_code_isValid;
}

QString OAIGisFeatureDistance::getCountryFlagUrl() const {
    return m_country_flag_url;
}
void OAIGisFeatureDistance::setCountryFlagUrl(const QString &country_flag_url) {
    m_country_flag_url = country_flag_url;
    m_country_flag_url_isSet = true;
}

bool OAIGisFeatureDistance::is_country_flag_url_Set() const{
    return m_country_flag_url_isSet;
}

bool OAIGisFeatureDistance::is_country_flag_url_Valid() const{
    return m_country_flag_url_isValid;
}

QString OAIGisFeatureDistance::getCurrencyCode() const {
    return m_currency_code;
}
void OAIGisFeatureDistance::setCurrencyCode(const QString &currency_code) {
    m_currency_code = currency_code;
    m_currency_code_isSet = true;
}

bool OAIGisFeatureDistance::is_currency_code_Set() const{
    return m_currency_code_isSet;
}

bool OAIGisFeatureDistance::is_currency_code_Valid() const{
    return m_currency_code_isValid;
}

QString OAIGisFeatureDistance::getCurrencyName() const {
    return m_currency_name;
}
void OAIGisFeatureDistance::setCurrencyName(const QString &currency_name) {
    m_currency_name = currency_name;
    m_currency_name_isSet = true;
}

bool OAIGisFeatureDistance::is_currency_name_Set() const{
    return m_currency_name_isSet;
}

bool OAIGisFeatureDistance::is_currency_name_Valid() const{
    return m_currency_name_isValid;
}

double OAIGisFeatureDistance::getDistance() const {
    return m_distance;
}
void OAIGisFeatureDistance::setDistance(const double &distance) {
    m_distance = distance;
    m_distance_isSet = true;
}

bool OAIGisFeatureDistance::is_distance_Set() const{
    return m_distance_isSet;
}

bool OAIGisFeatureDistance::is_distance_Valid() const{
    return m_distance_isValid;
}

qint32 OAIGisFeatureDistance::getElevation() const {
    return m_elevation;
}
void OAIGisFeatureDistance::setElevation(const qint32 &elevation) {
    m_elevation = elevation;
    m_elevation_isSet = true;
}

bool OAIGisFeatureDistance::is_elevation_Set() const{
    return m_elevation_isSet;
}

bool OAIGisFeatureDistance::is_elevation_Valid() const{
    return m_elevation_isValid;
}

QString OAIGisFeatureDistance::getEquivalentFipsCode() const {
    return m_equivalent_fips_code;
}
void OAIGisFeatureDistance::setEquivalentFipsCode(const QString &equivalent_fips_code) {
    m_equivalent_fips_code = equivalent_fips_code;
    m_equivalent_fips_code_isSet = true;
}

bool OAIGisFeatureDistance::is_equivalent_fips_code_Set() const{
    return m_equivalent_fips_code_isSet;
}

bool OAIGisFeatureDistance::is_equivalent_fips_code_Valid() const{
    return m_equivalent_fips_code_isValid;
}

QString OAIGisFeatureDistance::getFeatureClass() const {
    return m_feature_class;
}
void OAIGisFeatureDistance::setFeatureClass(const QString &feature_class) {
    m_feature_class = feature_class;
    m_feature_class_isSet = true;
}

bool OAIGisFeatureDistance::is_feature_class_Set() const{
    return m_feature_class_isSet;
}

bool OAIGisFeatureDistance::is_feature_class_Valid() const{
    return m_feature_class_isValid;
}

QString OAIGisFeatureDistance::getFeatureCode() const {
    return m_feature_code;
}
void OAIGisFeatureDistance::setFeatureCode(const QString &feature_code) {
    m_feature_code = feature_code;
    m_feature_code_isSet = true;
}

bool OAIGisFeatureDistance::is_feature_code_Set() const{
    return m_feature_code_isSet;
}

bool OAIGisFeatureDistance::is_feature_code_Valid() const{
    return m_feature_code_isValid;
}

qint64 OAIGisFeatureDistance::getFeatureId() const {
    return m_feature_id;
}
void OAIGisFeatureDistance::setFeatureId(const qint64 &feature_id) {
    m_feature_id = feature_id;
    m_feature_id_isSet = true;
}

bool OAIGisFeatureDistance::is_feature_id_Set() const{
    return m_feature_id_isSet;
}

bool OAIGisFeatureDistance::is_feature_id_Valid() const{
    return m_feature_id_isValid;
}

QString OAIGisFeatureDistance::getFipsCode() const {
    return m_fips_code;
}
void OAIGisFeatureDistance::setFipsCode(const QString &fips_code) {
    m_fips_code = fips_code;
    m_fips_code_isSet = true;
}

bool OAIGisFeatureDistance::is_fips_code_Set() const{
    return m_fips_code_isSet;
}

bool OAIGisFeatureDistance::is_fips_code_Valid() const{
    return m_fips_code_isValid;
}

QString OAIGisFeatureDistance::getFullyQualifiedAddress() const {
    return m_fully_qualified_address;
}
void OAIGisFeatureDistance::setFullyQualifiedAddress(const QString &fully_qualified_address) {
    m_fully_qualified_address = fully_qualified_address;
    m_fully_qualified_address_isSet = true;
}

bool OAIGisFeatureDistance::is_fully_qualified_address_Set() const{
    return m_fully_qualified_address_isSet;
}

bool OAIGisFeatureDistance::is_fully_qualified_address_Valid() const{
    return m_fully_qualified_address_isValid;
}

QString OAIGisFeatureDistance::getGoogleMapUrl() const {
    return m_google_map_url;
}
void OAIGisFeatureDistance::setGoogleMapUrl(const QString &google_map_url) {
    m_google_map_url = google_map_url;
    m_google_map_url_isSet = true;
}

bool OAIGisFeatureDistance::is_google_map_url_Set() const{
    return m_google_map_url_isSet;
}

bool OAIGisFeatureDistance::is_google_map_url_Valid() const{
    return m_google_map_url_isValid;
}

qint32 OAIGisFeatureDistance::getGtopo30() const {
    return m_gtopo30;
}
void OAIGisFeatureDistance::setGtopo30(const qint32 &gtopo30) {
    m_gtopo30 = gtopo30;
    m_gtopo30_isSet = true;
}

bool OAIGisFeatureDistance::is_gtopo30_Set() const{
    return m_gtopo30_isSet;
}

bool OAIGisFeatureDistance::is_gtopo30_Valid() const{
    return m_gtopo30_isValid;
}

QString OAIGisFeatureDistance::getIsIn() const {
    return m_is_in;
}
void OAIGisFeatureDistance::setIsIn(const QString &is_in) {
    m_is_in = is_in;
    m_is_in_isSet = true;
}

bool OAIGisFeatureDistance::is_is_in_Set() const{
    return m_is_in_isSet;
}

bool OAIGisFeatureDistance::is_is_in_Valid() const{
    return m_is_in_isValid;
}

QString OAIGisFeatureDistance::getIsInAdm() const {
    return m_is_in_adm;
}
void OAIGisFeatureDistance::setIsInAdm(const QString &is_in_adm) {
    m_is_in_adm = is_in_adm;
    m_is_in_adm_isSet = true;
}

bool OAIGisFeatureDistance::is_is_in_adm_Set() const{
    return m_is_in_adm_isSet;
}

bool OAIGisFeatureDistance::is_is_in_adm_Valid() const{
    return m_is_in_adm_isValid;
}

QString OAIGisFeatureDistance::getIsInPlace() const {
    return m_is_in_place;
}
void OAIGisFeatureDistance::setIsInPlace(const QString &is_in_place) {
    m_is_in_place = is_in_place;
    m_is_in_place_isSet = true;
}

bool OAIGisFeatureDistance::is_is_in_place_Set() const{
    return m_is_in_place_isSet;
}

bool OAIGisFeatureDistance::is_is_in_place_Valid() const{
    return m_is_in_place_isValid;
}

QString OAIGisFeatureDistance::getIsInZip() const {
    return m_is_in_zip;
}
void OAIGisFeatureDistance::setIsInZip(const QString &is_in_zip) {
    m_is_in_zip = is_in_zip;
    m_is_in_zip_isSet = true;
}

bool OAIGisFeatureDistance::is_is_in_zip_Set() const{
    return m_is_in_zip_isSet;
}

bool OAIGisFeatureDistance::is_is_in_zip_Valid() const{
    return m_is_in_zip_isValid;
}

QString OAIGisFeatureDistance::getIso3166Alpha2Code() const {
    return m_iso3166_alpha2_code;
}
void OAIGisFeatureDistance::setIso3166Alpha2Code(const QString &iso3166_alpha2_code) {
    m_iso3166_alpha2_code = iso3166_alpha2_code;
    m_iso3166_alpha2_code_isSet = true;
}

bool OAIGisFeatureDistance::is_iso3166_alpha2_code_Set() const{
    return m_iso3166_alpha2_code_isSet;
}

bool OAIGisFeatureDistance::is_iso3166_alpha2_code_Valid() const{
    return m_iso3166_alpha2_code_isValid;
}

QString OAIGisFeatureDistance::getIso3166Alpha3Code() const {
    return m_iso3166_alpha3_code;
}
void OAIGisFeatureDistance::setIso3166Alpha3Code(const QString &iso3166_alpha3_code) {
    m_iso3166_alpha3_code = iso3166_alpha3_code;
    m_iso3166_alpha3_code_isSet = true;
}

bool OAIGisFeatureDistance::is_iso3166_alpha3_code_Set() const{
    return m_iso3166_alpha3_code_isSet;
}

bool OAIGisFeatureDistance::is_iso3166_alpha3_code_Valid() const{
    return m_iso3166_alpha3_code_isValid;
}

QString OAIGisFeatureDistance::getIso3166NumericCode() const {
    return m_iso3166_numeric_code;
}
void OAIGisFeatureDistance::setIso3166NumericCode(const QString &iso3166_numeric_code) {
    m_iso3166_numeric_code = iso3166_numeric_code;
    m_iso3166_numeric_code_isSet = true;
}

bool OAIGisFeatureDistance::is_iso3166_numeric_code_Set() const{
    return m_iso3166_numeric_code_isSet;
}

bool OAIGisFeatureDistance::is_iso3166_numeric_code_Valid() const{
    return m_iso3166_numeric_code_isValid;
}

double OAIGisFeatureDistance::getLat() const {
    return m_lat;
}
void OAIGisFeatureDistance::setLat(const double &lat) {
    m_lat = lat;
    m_lat_isSet = true;
}

bool OAIGisFeatureDistance::is_lat_Set() const{
    return m_lat_isSet;
}

bool OAIGisFeatureDistance::is_lat_Valid() const{
    return m_lat_isValid;
}

double OAIGisFeatureDistance::getLength() const {
    return m_length;
}
void OAIGisFeatureDistance::setLength(const double &length) {
    m_length = length;
    m_length_isSet = true;
}

bool OAIGisFeatureDistance::is_length_Set() const{
    return m_length_isSet;
}

bool OAIGisFeatureDistance::is_length_Valid() const{
    return m_length_isValid;
}

qint32 OAIGisFeatureDistance::getLevel() const {
    return m_level;
}
void OAIGisFeatureDistance::setLevel(const qint32 &level) {
    m_level = level;
    m_level_isSet = true;
}

bool OAIGisFeatureDistance::is_level_Set() const{
    return m_level_isSet;
}

bool OAIGisFeatureDistance::is_level_Valid() const{
    return m_level_isValid;
}

double OAIGisFeatureDistance::getLng() const {
    return m_lng;
}
void OAIGisFeatureDistance::setLng(const double &lng) {
    m_lng = lng;
    m_lng_isSet = true;
}

bool OAIGisFeatureDistance::is_lng_Set() const{
    return m_lng_isSet;
}

bool OAIGisFeatureDistance::is_lng_Valid() const{
    return m_lng_isValid;
}

QString OAIGisFeatureDistance::getName() const {
    return m_name;
}
void OAIGisFeatureDistance::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGisFeatureDistance::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGisFeatureDistance::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIGisFeatureDistance::isOneWay() const {
    return m_one_way;
}
void OAIGisFeatureDistance::setOneWay(const bool &one_way) {
    m_one_way = one_way;
    m_one_way_isSet = true;
}

bool OAIGisFeatureDistance::is_one_way_Set() const{
    return m_one_way_isSet;
}

bool OAIGisFeatureDistance::is_one_way_Valid() const{
    return m_one_way_isValid;
}

qint64 OAIGisFeatureDistance::getOpenstreetmapId() const {
    return m_openstreetmap_id;
}
void OAIGisFeatureDistance::setOpenstreetmapId(const qint64 &openstreetmap_id) {
    m_openstreetmap_id = openstreetmap_id;
    m_openstreetmap_id_isSet = true;
}

bool OAIGisFeatureDistance::is_openstreetmap_id_Set() const{
    return m_openstreetmap_id_isSet;
}

bool OAIGisFeatureDistance::is_openstreetmap_id_Valid() const{
    return m_openstreetmap_id_isValid;
}

QString OAIGisFeatureDistance::getOpenstreetmapMapUrl() const {
    return m_openstreetmap_map_url;
}
void OAIGisFeatureDistance::setOpenstreetmapMapUrl(const QString &openstreetmap_map_url) {
    m_openstreetmap_map_url = openstreetmap_map_url;
    m_openstreetmap_map_url_isSet = true;
}

bool OAIGisFeatureDistance::is_openstreetmap_map_url_Set() const{
    return m_openstreetmap_map_url_isSet;
}

bool OAIGisFeatureDistance::is_openstreetmap_map_url_Valid() const{
    return m_openstreetmap_map_url_isValid;
}

QString OAIGisFeatureDistance::getPhonePrefix() const {
    return m_phone_prefix;
}
void OAIGisFeatureDistance::setPhonePrefix(const QString &phone_prefix) {
    m_phone_prefix = phone_prefix;
    m_phone_prefix_isSet = true;
}

bool OAIGisFeatureDistance::is_phone_prefix_Set() const{
    return m_phone_prefix_isSet;
}

bool OAIGisFeatureDistance::is_phone_prefix_Valid() const{
    return m_phone_prefix_isValid;
}

QString OAIGisFeatureDistance::getPlaceType() const {
    return m_place_type;
}
void OAIGisFeatureDistance::setPlaceType(const QString &place_type) {
    m_place_type = place_type;
    m_place_type_isSet = true;
}

bool OAIGisFeatureDistance::is_place_type_Set() const{
    return m_place_type_isSet;
}

bool OAIGisFeatureDistance::is_place_type_Valid() const{
    return m_place_type_isValid;
}

qint32 OAIGisFeatureDistance::getPopulation() const {
    return m_population;
}
void OAIGisFeatureDistance::setPopulation(const qint32 &population) {
    m_population = population;
    m_population_isSet = true;
}

bool OAIGisFeatureDistance::is_population_Set() const{
    return m_population_isSet;
}

bool OAIGisFeatureDistance::is_population_Valid() const{
    return m_population_isValid;
}

QString OAIGisFeatureDistance::getPostalCodeMask() const {
    return m_postal_code_mask;
}
void OAIGisFeatureDistance::setPostalCodeMask(const QString &postal_code_mask) {
    m_postal_code_mask = postal_code_mask;
    m_postal_code_mask_isSet = true;
}

bool OAIGisFeatureDistance::is_postal_code_mask_Set() const{
    return m_postal_code_mask_isSet;
}

bool OAIGisFeatureDistance::is_postal_code_mask_Valid() const{
    return m_postal_code_mask_isValid;
}

QString OAIGisFeatureDistance::getPostalCodeRegex() const {
    return m_postal_code_regex;
}
void OAIGisFeatureDistance::setPostalCodeRegex(const QString &postal_code_regex) {
    m_postal_code_regex = postal_code_regex;
    m_postal_code_regex_isSet = true;
}

bool OAIGisFeatureDistance::is_postal_code_regex_Set() const{
    return m_postal_code_regex_isSet;
}

bool OAIGisFeatureDistance::is_postal_code_regex_Valid() const{
    return m_postal_code_regex_isValid;
}

QString OAIGisFeatureDistance::getStreetType() const {
    return m_street_type;
}
void OAIGisFeatureDistance::setStreetType(const QString &street_type) {
    m_street_type = street_type;
    m_street_type_isSet = true;
}

bool OAIGisFeatureDistance::is_street_type_Set() const{
    return m_street_type_isSet;
}

bool OAIGisFeatureDistance::is_street_type_Valid() const{
    return m_street_type_isValid;
}

QString OAIGisFeatureDistance::getTimezone() const {
    return m_timezone;
}
void OAIGisFeatureDistance::setTimezone(const QString &timezone) {
    m_timezone = timezone;
    m_timezone_isSet = true;
}

bool OAIGisFeatureDistance::is_timezone_Set() const{
    return m_timezone_isSet;
}

bool OAIGisFeatureDistance::is_timezone_Valid() const{
    return m_timezone_isValid;
}

QString OAIGisFeatureDistance::getTld() const {
    return m_tld;
}
void OAIGisFeatureDistance::setTld(const QString &tld) {
    m_tld = tld;
    m_tld_isSet = true;
}

bool OAIGisFeatureDistance::is_tld_Set() const{
    return m_tld_isSet;
}

bool OAIGisFeatureDistance::is_tld_Valid() const{
    return m_tld_isValid;
}

QString OAIGisFeatureDistance::getYahooMapUrl() const {
    return m_yahoo_map_url;
}
void OAIGisFeatureDistance::setYahooMapUrl(const QString &yahoo_map_url) {
    m_yahoo_map_url = yahoo_map_url;
    m_yahoo_map_url_isSet = true;
}

bool OAIGisFeatureDistance::is_yahoo_map_url_Set() const{
    return m_yahoo_map_url_isSet;
}

bool OAIGisFeatureDistance::is_yahoo_map_url_Valid() const{
    return m_yahoo_map_url_isValid;
}

QList<QString> OAIGisFeatureDistance::getZipCodes() const {
    return m_zip_codes;
}
void OAIGisFeatureDistance::setZipCodes(const QList<QString> &zip_codes) {
    m_zip_codes = zip_codes;
    m_zip_codes_isSet = true;
}

bool OAIGisFeatureDistance::is_zip_codes_Set() const{
    return m_zip_codes_isSet;
}

bool OAIGisFeatureDistance::is_zip_codes_Valid() const{
    return m_zip_codes_isValid;
}

bool OAIGisFeatureDistance::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_adm1_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_adm1_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_adm2_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_adm2_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_adm3_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_adm3_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_adm4_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_adm4_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_adm5_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_adm5_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_amenity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_area_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ascii_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_capital_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_continent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_flag_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_distance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_elevation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_equivalent_fips_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_feature_class_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_feature_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_feature_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fips_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fully_qualified_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_google_map_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gtopo30_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_in_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_in_adm_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_in_place_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_in_zip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_iso3166_alpha2_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_iso3166_alpha3_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_iso3166_numeric_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lat_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_length_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_level_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lng_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_one_way_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_openstreetmap_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_openstreetmap_map_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phone_prefix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_place_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_population_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_postal_code_mask_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_postal_code_regex_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_street_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timezone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tld_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_yahoo_map_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_zip_codes.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGisFeatureDistance::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
