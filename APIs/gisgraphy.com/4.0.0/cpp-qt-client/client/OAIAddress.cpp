/**
 * Gisgraphy webservices
 * Since 2006, [Gisgraphy](http://www.gisgraphy.com) is a free, open source framework that offers the possibility to do geolocalisation and geocoding via Java APIs or REST webservices. Because geocoding is nothing without data, it provides an easy to use importer that will automatically download and import the necessary (free) data to your local database ([OpenStreetMap](http://www.openstreetmap.org/), [Geonames](http://www.geonames.org/) and [Quattroshapes](http://www.quattroshapes.com/): more than 100 million entries). You can also add your own data with the Web interface or the importer connectors provided. Gisgraphy is production ready, and has been designed to be scalable(load balanced), performant and used in other languages than just java : results can be output in XML, JSON, PHP, Python, Ruby, YAML, GeoRSS, and Atom. One of the most popular GPS tracking System (OpenGTS) also includes a Gisgraphy client...Gisgraphy is a framework. As a result it's flexible and powerful enough to be used in a lot of different use cases. [read more](http://www.gisgraphy.com)   if you use the premium servers, you can use the api key to test the webservices 
 *
 * The version of the OpenAPI document: 4.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAddress.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAddress::OAIAddress(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAddress::OAIAddress() {
    this->initializeModel();
}

OAIAddress::~OAIAddress() {}

void OAIAddress::initializeModel() {

    m_po_box_isSet = false;
    m_po_box_isValid = false;

    m_po_box_agency_isSet = false;
    m_po_box_agency_isValid = false;

    m_po_box_info_isSet = false;
    m_po_box_info_isValid = false;

    m_adm1_name_alternates_localized_isSet = false;
    m_adm1_name_alternates_localized_isValid = false;

    m_adm2_name_alternates_localized_isSet = false;
    m_adm2_name_alternates_localized_isValid = false;

    m_block_isSet = false;
    m_block_isValid = false;

    m_city_isSet = false;
    m_city_isValid = false;

    m_city_subdivision_isSet = false;
    m_city_subdivision_isValid = false;

    m_civic_number_suffix_isSet = false;
    m_civic_number_suffix_isValid = false;

    m_confidence_isSet = false;
    m_confidence_isValid = false;

    m_country_isSet = false;
    m_country_isValid = false;

    m_country_name_alternates_localized_isSet = false;
    m_country_name_alternates_localized_isValid = false;

    m_countrycode_isSet = false;
    m_countrycode_isValid = false;

    m_dependent_locality_isSet = false;
    m_dependent_locality_isValid = false;

    m_distance_isSet = false;
    m_distance_isValid = false;

    m_district_isSet = false;
    m_district_isValid = false;

    m_extra_info_isSet = false;
    m_extra_info_isValid = false;

    m_floor_isSet = false;
    m_floor_isValid = false;

    m_geocodinglevel_isSet = false;
    m_geocodinglevel_isValid = false;

    m_house_number_isSet = false;
    m_house_number_isValid = false;

    m_house_number_info_isSet = false;
    m_house_number_info_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_lat_isSet = false;
    m_lat_isValid = false;

    m_lng_isSet = false;
    m_lng_isValid = false;

    m_lote_isSet = false;
    m_lote_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_name_alternates_localized_isSet = false;
    m_name_alternates_localized_isValid = false;

    m_post_direction_isSet = false;
    m_post_direction_isValid = false;

    m_post_direction_intersection_isSet = false;
    m_post_direction_intersection_isValid = false;

    m_post_town_isSet = false;
    m_post_town_isValid = false;

    m_pre_direction_isSet = false;
    m_pre_direction_isValid = false;

    m_pre_direction_intersection_isSet = false;
    m_pre_direction_intersection_isValid = false;

    m_prefecture_isSet = false;
    m_prefecture_isValid = false;

    m_quadrant_isSet = false;
    m_quadrant_isValid = false;

    m_quarter_isSet = false;
    m_quarter_isValid = false;

    m_recipient_name_isSet = false;
    m_recipient_name_isValid = false;

    m_sector_isSet = false;
    m_sector_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_street_name_isSet = false;
    m_street_name_isValid = false;

    m_street_name_intersection_isSet = false;
    m_street_name_intersection_isValid = false;

    m_street_type_isSet = false;
    m_street_type_isValid = false;

    m_street_type_intersection_isSet = false;
    m_street_type_intersection_isValid = false;

    m_suite_number_isSet = false;
    m_suite_number_isValid = false;

    m_suite_type_isSet = false;
    m_suite_type_isValid = false;

    m_ward_isSet = false;
    m_ward_isValid = false;

    m_zip_code_isSet = false;
    m_zip_code_isValid = false;
}

void OAIAddress::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAddress::fromJsonObject(QJsonObject json) {

    m_po_box_isValid = ::OpenAPI::fromJsonValue(m_po_box, json[QString("POBox")]);
    m_po_box_isSet = !json[QString("POBox")].isNull() && m_po_box_isValid;

    m_po_box_agency_isValid = ::OpenAPI::fromJsonValue(m_po_box_agency, json[QString("POBoxAgency")]);
    m_po_box_agency_isSet = !json[QString("POBoxAgency")].isNull() && m_po_box_agency_isValid;

    m_po_box_info_isValid = ::OpenAPI::fromJsonValue(m_po_box_info, json[QString("POBoxInfo")]);
    m_po_box_info_isSet = !json[QString("POBoxInfo")].isNull() && m_po_box_info_isValid;

    if(json["adm1NameAlternatesLocalized"].isObject()){
        auto varmap = json["adm1NameAlternatesLocalized"].toObject().toVariantMap();
        m_adm1_name_alternates_localized_isValid = true;
        if(varmap.count() > 0){
            for(auto val : varmap.keys()){
                QList<QString> item;
                auto jval = QJsonValue::fromVariant(varmap.value(val));
                m_adm1_name_alternates_localized_isValid &= ::OpenAPI::fromJsonValue(item, jval);
                m_adm1_name_alternates_localized_isSet &= !jval.isNull() && m_adm1_name_alternates_localized_isValid;
                m_adm1_name_alternates_localized.insert(m_adm1_name_alternates_localized.end(), val, item);
            }
        }
    }

    if(json["adm2NameAlternatesLocalized"].isObject()){
        auto varmap = json["adm2NameAlternatesLocalized"].toObject().toVariantMap();
        m_adm2_name_alternates_localized_isValid = true;
        if(varmap.count() > 0){
            for(auto val : varmap.keys()){
                QList<QString> item;
                auto jval = QJsonValue::fromVariant(varmap.value(val));
                m_adm2_name_alternates_localized_isValid &= ::OpenAPI::fromJsonValue(item, jval);
                m_adm2_name_alternates_localized_isSet &= !jval.isNull() && m_adm2_name_alternates_localized_isValid;
                m_adm2_name_alternates_localized.insert(m_adm2_name_alternates_localized.end(), val, item);
            }
        }
    }

    m_block_isValid = ::OpenAPI::fromJsonValue(m_block, json[QString("block")]);
    m_block_isSet = !json[QString("block")].isNull() && m_block_isValid;

    m_city_isValid = ::OpenAPI::fromJsonValue(m_city, json[QString("city")]);
    m_city_isSet = !json[QString("city")].isNull() && m_city_isValid;

    m_city_subdivision_isValid = ::OpenAPI::fromJsonValue(m_city_subdivision, json[QString("citySubdivision")]);
    m_city_subdivision_isSet = !json[QString("citySubdivision")].isNull() && m_city_subdivision_isValid;

    m_civic_number_suffix_isValid = ::OpenAPI::fromJsonValue(m_civic_number_suffix, json[QString("civicNumberSuffix")]);
    m_civic_number_suffix_isSet = !json[QString("civicNumberSuffix")].isNull() && m_civic_number_suffix_isValid;

    m_confidence_isValid = ::OpenAPI::fromJsonValue(m_confidence, json[QString("confidence")]);
    m_confidence_isSet = !json[QString("confidence")].isNull() && m_confidence_isValid;

    m_country_isValid = ::OpenAPI::fromJsonValue(m_country, json[QString("country")]);
    m_country_isSet = !json[QString("country")].isNull() && m_country_isValid;

    if(json["countryNameAlternatesLocalized"].isObject()){
        auto varmap = json["countryNameAlternatesLocalized"].toObject().toVariantMap();
        m_country_name_alternates_localized_isValid = true;
        if(varmap.count() > 0){
            for(auto val : varmap.keys()){
                QList<QString> item;
                auto jval = QJsonValue::fromVariant(varmap.value(val));
                m_country_name_alternates_localized_isValid &= ::OpenAPI::fromJsonValue(item, jval);
                m_country_name_alternates_localized_isSet &= !jval.isNull() && m_country_name_alternates_localized_isValid;
                m_country_name_alternates_localized.insert(m_country_name_alternates_localized.end(), val, item);
            }
        }
    }

    m_countrycode_isValid = ::OpenAPI::fromJsonValue(m_countrycode, json[QString("countrycode")]);
    m_countrycode_isSet = !json[QString("countrycode")].isNull() && m_countrycode_isValid;

    m_dependent_locality_isValid = ::OpenAPI::fromJsonValue(m_dependent_locality, json[QString("dependentLocality")]);
    m_dependent_locality_isSet = !json[QString("dependentLocality")].isNull() && m_dependent_locality_isValid;

    m_distance_isValid = ::OpenAPI::fromJsonValue(m_distance, json[QString("distance")]);
    m_distance_isSet = !json[QString("distance")].isNull() && m_distance_isValid;

    m_district_isValid = ::OpenAPI::fromJsonValue(m_district, json[QString("district")]);
    m_district_isSet = !json[QString("district")].isNull() && m_district_isValid;

    m_extra_info_isValid = ::OpenAPI::fromJsonValue(m_extra_info, json[QString("extraInfo")]);
    m_extra_info_isSet = !json[QString("extraInfo")].isNull() && m_extra_info_isValid;

    m_floor_isValid = ::OpenAPI::fromJsonValue(m_floor, json[QString("floor")]);
    m_floor_isSet = !json[QString("floor")].isNull() && m_floor_isValid;

    m_geocodinglevel_isValid = ::OpenAPI::fromJsonValue(m_geocodinglevel, json[QString("geocodinglevel")]);
    m_geocodinglevel_isSet = !json[QString("geocodinglevel")].isNull() && m_geocodinglevel_isValid;

    m_house_number_isValid = ::OpenAPI::fromJsonValue(m_house_number, json[QString("houseNumber")]);
    m_house_number_isSet = !json[QString("houseNumber")].isNull() && m_house_number_isValid;

    m_house_number_info_isValid = ::OpenAPI::fromJsonValue(m_house_number_info, json[QString("houseNumberInfo")]);
    m_house_number_info_isSet = !json[QString("houseNumberInfo")].isNull() && m_house_number_info_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_lat_isValid = ::OpenAPI::fromJsonValue(m_lat, json[QString("lat")]);
    m_lat_isSet = !json[QString("lat")].isNull() && m_lat_isValid;

    m_lng_isValid = ::OpenAPI::fromJsonValue(m_lng, json[QString("lng")]);
    m_lng_isSet = !json[QString("lng")].isNull() && m_lng_isValid;

    m_lote_isValid = ::OpenAPI::fromJsonValue(m_lote, json[QString("lote")]);
    m_lote_isSet = !json[QString("lote")].isNull() && m_lote_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    if(json["nameAlternatesLocalized"].isObject()){
        auto varmap = json["nameAlternatesLocalized"].toObject().toVariantMap();
        m_name_alternates_localized_isValid = true;
        if(varmap.count() > 0){
            for(auto val : varmap.keys()){
                QList<QString> item;
                auto jval = QJsonValue::fromVariant(varmap.value(val));
                m_name_alternates_localized_isValid &= ::OpenAPI::fromJsonValue(item, jval);
                m_name_alternates_localized_isSet &= !jval.isNull() && m_name_alternates_localized_isValid;
                m_name_alternates_localized.insert(m_name_alternates_localized.end(), val, item);
            }
        }
    }

    m_post_direction_isValid = ::OpenAPI::fromJsonValue(m_post_direction, json[QString("postDirection")]);
    m_post_direction_isSet = !json[QString("postDirection")].isNull() && m_post_direction_isValid;

    m_post_direction_intersection_isValid = ::OpenAPI::fromJsonValue(m_post_direction_intersection, json[QString("postDirectionIntersection")]);
    m_post_direction_intersection_isSet = !json[QString("postDirectionIntersection")].isNull() && m_post_direction_intersection_isValid;

    m_post_town_isValid = ::OpenAPI::fromJsonValue(m_post_town, json[QString("postTown")]);
    m_post_town_isSet = !json[QString("postTown")].isNull() && m_post_town_isValid;

    m_pre_direction_isValid = ::OpenAPI::fromJsonValue(m_pre_direction, json[QString("preDirection")]);
    m_pre_direction_isSet = !json[QString("preDirection")].isNull() && m_pre_direction_isValid;

    m_pre_direction_intersection_isValid = ::OpenAPI::fromJsonValue(m_pre_direction_intersection, json[QString("preDirectionIntersection")]);
    m_pre_direction_intersection_isSet = !json[QString("preDirectionIntersection")].isNull() && m_pre_direction_intersection_isValid;

    m_prefecture_isValid = ::OpenAPI::fromJsonValue(m_prefecture, json[QString("prefecture")]);
    m_prefecture_isSet = !json[QString("prefecture")].isNull() && m_prefecture_isValid;

    m_quadrant_isValid = ::OpenAPI::fromJsonValue(m_quadrant, json[QString("quadrant")]);
    m_quadrant_isSet = !json[QString("quadrant")].isNull() && m_quadrant_isValid;

    m_quarter_isValid = ::OpenAPI::fromJsonValue(m_quarter, json[QString("quarter")]);
    m_quarter_isSet = !json[QString("quarter")].isNull() && m_quarter_isValid;

    m_recipient_name_isValid = ::OpenAPI::fromJsonValue(m_recipient_name, json[QString("recipientName")]);
    m_recipient_name_isSet = !json[QString("recipientName")].isNull() && m_recipient_name_isValid;

    m_sector_isValid = ::OpenAPI::fromJsonValue(m_sector, json[QString("sector")]);
    m_sector_isSet = !json[QString("sector")].isNull() && m_sector_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_street_name_isValid = ::OpenAPI::fromJsonValue(m_street_name, json[QString("streetName")]);
    m_street_name_isSet = !json[QString("streetName")].isNull() && m_street_name_isValid;

    m_street_name_intersection_isValid = ::OpenAPI::fromJsonValue(m_street_name_intersection, json[QString("streetNameIntersection")]);
    m_street_name_intersection_isSet = !json[QString("streetNameIntersection")].isNull() && m_street_name_intersection_isValid;

    m_street_type_isValid = ::OpenAPI::fromJsonValue(m_street_type, json[QString("streetType")]);
    m_street_type_isSet = !json[QString("streetType")].isNull() && m_street_type_isValid;

    m_street_type_intersection_isValid = ::OpenAPI::fromJsonValue(m_street_type_intersection, json[QString("streetTypeIntersection")]);
    m_street_type_intersection_isSet = !json[QString("streetTypeIntersection")].isNull() && m_street_type_intersection_isValid;

    m_suite_number_isValid = ::OpenAPI::fromJsonValue(m_suite_number, json[QString("suiteNumber")]);
    m_suite_number_isSet = !json[QString("suiteNumber")].isNull() && m_suite_number_isValid;

    m_suite_type_isValid = ::OpenAPI::fromJsonValue(m_suite_type, json[QString("suiteType")]);
    m_suite_type_isSet = !json[QString("suiteType")].isNull() && m_suite_type_isValid;

    m_ward_isValid = ::OpenAPI::fromJsonValue(m_ward, json[QString("ward")]);
    m_ward_isSet = !json[QString("ward")].isNull() && m_ward_isValid;

    m_zip_code_isValid = ::OpenAPI::fromJsonValue(m_zip_code, json[QString("zipCode")]);
    m_zip_code_isSet = !json[QString("zipCode")].isNull() && m_zip_code_isValid;
}

QString OAIAddress::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAddress::asJsonObject() const {
    QJsonObject obj;
    if (m_po_box_isSet) {
        obj.insert(QString("POBox"), ::OpenAPI::toJsonValue(m_po_box));
    }
    if (m_po_box_agency_isSet) {
        obj.insert(QString("POBoxAgency"), ::OpenAPI::toJsonValue(m_po_box_agency));
    }
    if (m_po_box_info_isSet) {
        obj.insert(QString("POBoxInfo"), ::OpenAPI::toJsonValue(m_po_box_info));
    }
    if (m_adm1_name_alternates_localized.size() > 0) {
        
        obj.insert(QString("adm1NameAlternatesLocalized"), toJsonValue(m_adm1_name_alternates_localized));
    }
    if (m_adm2_name_alternates_localized.size() > 0) {
        
        obj.insert(QString("adm2NameAlternatesLocalized"), toJsonValue(m_adm2_name_alternates_localized));
    }
    if (m_block_isSet) {
        obj.insert(QString("block"), ::OpenAPI::toJsonValue(m_block));
    }
    if (m_city_isSet) {
        obj.insert(QString("city"), ::OpenAPI::toJsonValue(m_city));
    }
    if (m_city_subdivision_isSet) {
        obj.insert(QString("citySubdivision"), ::OpenAPI::toJsonValue(m_city_subdivision));
    }
    if (m_civic_number_suffix_isSet) {
        obj.insert(QString("civicNumberSuffix"), ::OpenAPI::toJsonValue(m_civic_number_suffix));
    }
    if (m_confidence_isSet) {
        obj.insert(QString("confidence"), ::OpenAPI::toJsonValue(m_confidence));
    }
    if (m_country_isSet) {
        obj.insert(QString("country"), ::OpenAPI::toJsonValue(m_country));
    }
    if (m_country_name_alternates_localized.size() > 0) {
        
        obj.insert(QString("countryNameAlternatesLocalized"), toJsonValue(m_country_name_alternates_localized));
    }
    if (m_countrycode_isSet) {
        obj.insert(QString("countrycode"), ::OpenAPI::toJsonValue(m_countrycode));
    }
    if (m_dependent_locality_isSet) {
        obj.insert(QString("dependentLocality"), ::OpenAPI::toJsonValue(m_dependent_locality));
    }
    if (m_distance_isSet) {
        obj.insert(QString("distance"), ::OpenAPI::toJsonValue(m_distance));
    }
    if (m_district_isSet) {
        obj.insert(QString("district"), ::OpenAPI::toJsonValue(m_district));
    }
    if (m_extra_info_isSet) {
        obj.insert(QString("extraInfo"), ::OpenAPI::toJsonValue(m_extra_info));
    }
    if (m_floor_isSet) {
        obj.insert(QString("floor"), ::OpenAPI::toJsonValue(m_floor));
    }
    if (m_geocodinglevel_isSet) {
        obj.insert(QString("geocodinglevel"), ::OpenAPI::toJsonValue(m_geocodinglevel));
    }
    if (m_house_number_isSet) {
        obj.insert(QString("houseNumber"), ::OpenAPI::toJsonValue(m_house_number));
    }
    if (m_house_number_info_isSet) {
        obj.insert(QString("houseNumberInfo"), ::OpenAPI::toJsonValue(m_house_number_info));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_lat_isSet) {
        obj.insert(QString("lat"), ::OpenAPI::toJsonValue(m_lat));
    }
    if (m_lng_isSet) {
        obj.insert(QString("lng"), ::OpenAPI::toJsonValue(m_lng));
    }
    if (m_lote_isSet) {
        obj.insert(QString("lote"), ::OpenAPI::toJsonValue(m_lote));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_name_alternates_localized.size() > 0) {
        
        obj.insert(QString("nameAlternatesLocalized"), toJsonValue(m_name_alternates_localized));
    }
    if (m_post_direction_isSet) {
        obj.insert(QString("postDirection"), ::OpenAPI::toJsonValue(m_post_direction));
    }
    if (m_post_direction_intersection_isSet) {
        obj.insert(QString("postDirectionIntersection"), ::OpenAPI::toJsonValue(m_post_direction_intersection));
    }
    if (m_post_town_isSet) {
        obj.insert(QString("postTown"), ::OpenAPI::toJsonValue(m_post_town));
    }
    if (m_pre_direction_isSet) {
        obj.insert(QString("preDirection"), ::OpenAPI::toJsonValue(m_pre_direction));
    }
    if (m_pre_direction_intersection_isSet) {
        obj.insert(QString("preDirectionIntersection"), ::OpenAPI::toJsonValue(m_pre_direction_intersection));
    }
    if (m_prefecture_isSet) {
        obj.insert(QString("prefecture"), ::OpenAPI::toJsonValue(m_prefecture));
    }
    if (m_quadrant_isSet) {
        obj.insert(QString("quadrant"), ::OpenAPI::toJsonValue(m_quadrant));
    }
    if (m_quarter_isSet) {
        obj.insert(QString("quarter"), ::OpenAPI::toJsonValue(m_quarter));
    }
    if (m_recipient_name_isSet) {
        obj.insert(QString("recipientName"), ::OpenAPI::toJsonValue(m_recipient_name));
    }
    if (m_sector_isSet) {
        obj.insert(QString("sector"), ::OpenAPI::toJsonValue(m_sector));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_street_name_isSet) {
        obj.insert(QString("streetName"), ::OpenAPI::toJsonValue(m_street_name));
    }
    if (m_street_name_intersection_isSet) {
        obj.insert(QString("streetNameIntersection"), ::OpenAPI::toJsonValue(m_street_name_intersection));
    }
    if (m_street_type_isSet) {
        obj.insert(QString("streetType"), ::OpenAPI::toJsonValue(m_street_type));
    }
    if (m_street_type_intersection_isSet) {
        obj.insert(QString("streetTypeIntersection"), ::OpenAPI::toJsonValue(m_street_type_intersection));
    }
    if (m_suite_number_isSet) {
        obj.insert(QString("suiteNumber"), ::OpenAPI::toJsonValue(m_suite_number));
    }
    if (m_suite_type_isSet) {
        obj.insert(QString("suiteType"), ::OpenAPI::toJsonValue(m_suite_type));
    }
    if (m_ward_isSet) {
        obj.insert(QString("ward"), ::OpenAPI::toJsonValue(m_ward));
    }
    if (m_zip_code_isSet) {
        obj.insert(QString("zipCode"), ::OpenAPI::toJsonValue(m_zip_code));
    }
    return obj;
}

QString OAIAddress::getPoBox() const {
    return m_po_box;
}
void OAIAddress::setPoBox(const QString &po_box) {
    m_po_box = po_box;
    m_po_box_isSet = true;
}

bool OAIAddress::is_po_box_Set() const{
    return m_po_box_isSet;
}

bool OAIAddress::is_po_box_Valid() const{
    return m_po_box_isValid;
}

QString OAIAddress::getPoBoxAgency() const {
    return m_po_box_agency;
}
void OAIAddress::setPoBoxAgency(const QString &po_box_agency) {
    m_po_box_agency = po_box_agency;
    m_po_box_agency_isSet = true;
}

bool OAIAddress::is_po_box_agency_Set() const{
    return m_po_box_agency_isSet;
}

bool OAIAddress::is_po_box_agency_Valid() const{
    return m_po_box_agency_isValid;
}

QString OAIAddress::getPoBoxInfo() const {
    return m_po_box_info;
}
void OAIAddress::setPoBoxInfo(const QString &po_box_info) {
    m_po_box_info = po_box_info;
    m_po_box_info_isSet = true;
}

bool OAIAddress::is_po_box_info_Set() const{
    return m_po_box_info_isSet;
}

bool OAIAddress::is_po_box_info_Valid() const{
    return m_po_box_info_isValid;
}

QMap<QString, QList<QString>> OAIAddress::getAdm1NameAlternatesLocalized() const {
    return m_adm1_name_alternates_localized;
}
void OAIAddress::setAdm1NameAlternatesLocalized(const QMap<QString, QList<QString>> &adm1_name_alternates_localized) {
    m_adm1_name_alternates_localized = adm1_name_alternates_localized;
    m_adm1_name_alternates_localized_isSet = true;
}

bool OAIAddress::is_adm1_name_alternates_localized_Set() const{
    return m_adm1_name_alternates_localized_isSet;
}

bool OAIAddress::is_adm1_name_alternates_localized_Valid() const{
    return m_adm1_name_alternates_localized_isValid;
}

QMap<QString, QList<QString>> OAIAddress::getAdm2NameAlternatesLocalized() const {
    return m_adm2_name_alternates_localized;
}
void OAIAddress::setAdm2NameAlternatesLocalized(const QMap<QString, QList<QString>> &adm2_name_alternates_localized) {
    m_adm2_name_alternates_localized = adm2_name_alternates_localized;
    m_adm2_name_alternates_localized_isSet = true;
}

bool OAIAddress::is_adm2_name_alternates_localized_Set() const{
    return m_adm2_name_alternates_localized_isSet;
}

bool OAIAddress::is_adm2_name_alternates_localized_Valid() const{
    return m_adm2_name_alternates_localized_isValid;
}

QString OAIAddress::getBlock() const {
    return m_block;
}
void OAIAddress::setBlock(const QString &block) {
    m_block = block;
    m_block_isSet = true;
}

bool OAIAddress::is_block_Set() const{
    return m_block_isSet;
}

bool OAIAddress::is_block_Valid() const{
    return m_block_isValid;
}

QString OAIAddress::getCity() const {
    return m_city;
}
void OAIAddress::setCity(const QString &city) {
    m_city = city;
    m_city_isSet = true;
}

bool OAIAddress::is_city_Set() const{
    return m_city_isSet;
}

bool OAIAddress::is_city_Valid() const{
    return m_city_isValid;
}

QString OAIAddress::getCitySubdivision() const {
    return m_city_subdivision;
}
void OAIAddress::setCitySubdivision(const QString &city_subdivision) {
    m_city_subdivision = city_subdivision;
    m_city_subdivision_isSet = true;
}

bool OAIAddress::is_city_subdivision_Set() const{
    return m_city_subdivision_isSet;
}

bool OAIAddress::is_city_subdivision_Valid() const{
    return m_city_subdivision_isValid;
}

QString OAIAddress::getCivicNumberSuffix() const {
    return m_civic_number_suffix;
}
void OAIAddress::setCivicNumberSuffix(const QString &civic_number_suffix) {
    m_civic_number_suffix = civic_number_suffix;
    m_civic_number_suffix_isSet = true;
}

bool OAIAddress::is_civic_number_suffix_Set() const{
    return m_civic_number_suffix_isSet;
}

bool OAIAddress::is_civic_number_suffix_Valid() const{
    return m_civic_number_suffix_isValid;
}

QString OAIAddress::getConfidence() const {
    return m_confidence;
}
void OAIAddress::setConfidence(const QString &confidence) {
    m_confidence = confidence;
    m_confidence_isSet = true;
}

bool OAIAddress::is_confidence_Set() const{
    return m_confidence_isSet;
}

bool OAIAddress::is_confidence_Valid() const{
    return m_confidence_isValid;
}

QString OAIAddress::getCountry() const {
    return m_country;
}
void OAIAddress::setCountry(const QString &country) {
    m_country = country;
    m_country_isSet = true;
}

bool OAIAddress::is_country_Set() const{
    return m_country_isSet;
}

bool OAIAddress::is_country_Valid() const{
    return m_country_isValid;
}

QMap<QString, QList<QString>> OAIAddress::getCountryNameAlternatesLocalized() const {
    return m_country_name_alternates_localized;
}
void OAIAddress::setCountryNameAlternatesLocalized(const QMap<QString, QList<QString>> &country_name_alternates_localized) {
    m_country_name_alternates_localized = country_name_alternates_localized;
    m_country_name_alternates_localized_isSet = true;
}

bool OAIAddress::is_country_name_alternates_localized_Set() const{
    return m_country_name_alternates_localized_isSet;
}

bool OAIAddress::is_country_name_alternates_localized_Valid() const{
    return m_country_name_alternates_localized_isValid;
}

QString OAIAddress::getCountrycode() const {
    return m_countrycode;
}
void OAIAddress::setCountrycode(const QString &countrycode) {
    m_countrycode = countrycode;
    m_countrycode_isSet = true;
}

bool OAIAddress::is_countrycode_Set() const{
    return m_countrycode_isSet;
}

bool OAIAddress::is_countrycode_Valid() const{
    return m_countrycode_isValid;
}

QString OAIAddress::getDependentLocality() const {
    return m_dependent_locality;
}
void OAIAddress::setDependentLocality(const QString &dependent_locality) {
    m_dependent_locality = dependent_locality;
    m_dependent_locality_isSet = true;
}

bool OAIAddress::is_dependent_locality_Set() const{
    return m_dependent_locality_isSet;
}

bool OAIAddress::is_dependent_locality_Valid() const{
    return m_dependent_locality_isValid;
}

double OAIAddress::getDistance() const {
    return m_distance;
}
void OAIAddress::setDistance(const double &distance) {
    m_distance = distance;
    m_distance_isSet = true;
}

bool OAIAddress::is_distance_Set() const{
    return m_distance_isSet;
}

bool OAIAddress::is_distance_Valid() const{
    return m_distance_isValid;
}

QString OAIAddress::getDistrict() const {
    return m_district;
}
void OAIAddress::setDistrict(const QString &district) {
    m_district = district;
    m_district_isSet = true;
}

bool OAIAddress::is_district_Set() const{
    return m_district_isSet;
}

bool OAIAddress::is_district_Valid() const{
    return m_district_isValid;
}

QString OAIAddress::getExtraInfo() const {
    return m_extra_info;
}
void OAIAddress::setExtraInfo(const QString &extra_info) {
    m_extra_info = extra_info;
    m_extra_info_isSet = true;
}

bool OAIAddress::is_extra_info_Set() const{
    return m_extra_info_isSet;
}

bool OAIAddress::is_extra_info_Valid() const{
    return m_extra_info_isValid;
}

QString OAIAddress::getFloor() const {
    return m_floor;
}
void OAIAddress::setFloor(const QString &floor) {
    m_floor = floor;
    m_floor_isSet = true;
}

bool OAIAddress::is_floor_Set() const{
    return m_floor_isSet;
}

bool OAIAddress::is_floor_Valid() const{
    return m_floor_isValid;
}

QString OAIAddress::getGeocodinglevel() const {
    return m_geocodinglevel;
}
void OAIAddress::setGeocodinglevel(const QString &geocodinglevel) {
    m_geocodinglevel = geocodinglevel;
    m_geocodinglevel_isSet = true;
}

bool OAIAddress::is_geocodinglevel_Set() const{
    return m_geocodinglevel_isSet;
}

bool OAIAddress::is_geocodinglevel_Valid() const{
    return m_geocodinglevel_isValid;
}

QString OAIAddress::getHouseNumber() const {
    return m_house_number;
}
void OAIAddress::setHouseNumber(const QString &house_number) {
    m_house_number = house_number;
    m_house_number_isSet = true;
}

bool OAIAddress::is_house_number_Set() const{
    return m_house_number_isSet;
}

bool OAIAddress::is_house_number_Valid() const{
    return m_house_number_isValid;
}

QString OAIAddress::getHouseNumberInfo() const {
    return m_house_number_info;
}
void OAIAddress::setHouseNumberInfo(const QString &house_number_info) {
    m_house_number_info = house_number_info;
    m_house_number_info_isSet = true;
}

bool OAIAddress::is_house_number_info_Set() const{
    return m_house_number_info_isSet;
}

bool OAIAddress::is_house_number_info_Valid() const{
    return m_house_number_info_isValid;
}

qint64 OAIAddress::getId() const {
    return m_id;
}
void OAIAddress::setId(const qint64 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIAddress::is_id_Set() const{
    return m_id_isSet;
}

bool OAIAddress::is_id_Valid() const{
    return m_id_isValid;
}

double OAIAddress::getLat() const {
    return m_lat;
}
void OAIAddress::setLat(const double &lat) {
    m_lat = lat;
    m_lat_isSet = true;
}

bool OAIAddress::is_lat_Set() const{
    return m_lat_isSet;
}

bool OAIAddress::is_lat_Valid() const{
    return m_lat_isValid;
}

double OAIAddress::getLng() const {
    return m_lng;
}
void OAIAddress::setLng(const double &lng) {
    m_lng = lng;
    m_lng_isSet = true;
}

bool OAIAddress::is_lng_Set() const{
    return m_lng_isSet;
}

bool OAIAddress::is_lng_Valid() const{
    return m_lng_isValid;
}

QString OAIAddress::getLote() const {
    return m_lote;
}
void OAIAddress::setLote(const QString &lote) {
    m_lote = lote;
    m_lote_isSet = true;
}

bool OAIAddress::is_lote_Set() const{
    return m_lote_isSet;
}

bool OAIAddress::is_lote_Valid() const{
    return m_lote_isValid;
}

QString OAIAddress::getName() const {
    return m_name;
}
void OAIAddress::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIAddress::is_name_Set() const{
    return m_name_isSet;
}

bool OAIAddress::is_name_Valid() const{
    return m_name_isValid;
}

QMap<QString, QList<QString>> OAIAddress::getNameAlternatesLocalized() const {
    return m_name_alternates_localized;
}
void OAIAddress::setNameAlternatesLocalized(const QMap<QString, QList<QString>> &name_alternates_localized) {
    m_name_alternates_localized = name_alternates_localized;
    m_name_alternates_localized_isSet = true;
}

bool OAIAddress::is_name_alternates_localized_Set() const{
    return m_name_alternates_localized_isSet;
}

bool OAIAddress::is_name_alternates_localized_Valid() const{
    return m_name_alternates_localized_isValid;
}

QString OAIAddress::getPostDirection() const {
    return m_post_direction;
}
void OAIAddress::setPostDirection(const QString &post_direction) {
    m_post_direction = post_direction;
    m_post_direction_isSet = true;
}

bool OAIAddress::is_post_direction_Set() const{
    return m_post_direction_isSet;
}

bool OAIAddress::is_post_direction_Valid() const{
    return m_post_direction_isValid;
}

QString OAIAddress::getPostDirectionIntersection() const {
    return m_post_direction_intersection;
}
void OAIAddress::setPostDirectionIntersection(const QString &post_direction_intersection) {
    m_post_direction_intersection = post_direction_intersection;
    m_post_direction_intersection_isSet = true;
}

bool OAIAddress::is_post_direction_intersection_Set() const{
    return m_post_direction_intersection_isSet;
}

bool OAIAddress::is_post_direction_intersection_Valid() const{
    return m_post_direction_intersection_isValid;
}

QString OAIAddress::getPostTown() const {
    return m_post_town;
}
void OAIAddress::setPostTown(const QString &post_town) {
    m_post_town = post_town;
    m_post_town_isSet = true;
}

bool OAIAddress::is_post_town_Set() const{
    return m_post_town_isSet;
}

bool OAIAddress::is_post_town_Valid() const{
    return m_post_town_isValid;
}

QString OAIAddress::getPreDirection() const {
    return m_pre_direction;
}
void OAIAddress::setPreDirection(const QString &pre_direction) {
    m_pre_direction = pre_direction;
    m_pre_direction_isSet = true;
}

bool OAIAddress::is_pre_direction_Set() const{
    return m_pre_direction_isSet;
}

bool OAIAddress::is_pre_direction_Valid() const{
    return m_pre_direction_isValid;
}

QString OAIAddress::getPreDirectionIntersection() const {
    return m_pre_direction_intersection;
}
void OAIAddress::setPreDirectionIntersection(const QString &pre_direction_intersection) {
    m_pre_direction_intersection = pre_direction_intersection;
    m_pre_direction_intersection_isSet = true;
}

bool OAIAddress::is_pre_direction_intersection_Set() const{
    return m_pre_direction_intersection_isSet;
}

bool OAIAddress::is_pre_direction_intersection_Valid() const{
    return m_pre_direction_intersection_isValid;
}

QString OAIAddress::getPrefecture() const {
    return m_prefecture;
}
void OAIAddress::setPrefecture(const QString &prefecture) {
    m_prefecture = prefecture;
    m_prefecture_isSet = true;
}

bool OAIAddress::is_prefecture_Set() const{
    return m_prefecture_isSet;
}

bool OAIAddress::is_prefecture_Valid() const{
    return m_prefecture_isValid;
}

QString OAIAddress::getQuadrant() const {
    return m_quadrant;
}
void OAIAddress::setQuadrant(const QString &quadrant) {
    m_quadrant = quadrant;
    m_quadrant_isSet = true;
}

bool OAIAddress::is_quadrant_Set() const{
    return m_quadrant_isSet;
}

bool OAIAddress::is_quadrant_Valid() const{
    return m_quadrant_isValid;
}

QString OAIAddress::getQuarter() const {
    return m_quarter;
}
void OAIAddress::setQuarter(const QString &quarter) {
    m_quarter = quarter;
    m_quarter_isSet = true;
}

bool OAIAddress::is_quarter_Set() const{
    return m_quarter_isSet;
}

bool OAIAddress::is_quarter_Valid() const{
    return m_quarter_isValid;
}

QString OAIAddress::getRecipientName() const {
    return m_recipient_name;
}
void OAIAddress::setRecipientName(const QString &recipient_name) {
    m_recipient_name = recipient_name;
    m_recipient_name_isSet = true;
}

bool OAIAddress::is_recipient_name_Set() const{
    return m_recipient_name_isSet;
}

bool OAIAddress::is_recipient_name_Valid() const{
    return m_recipient_name_isValid;
}

QString OAIAddress::getSector() const {
    return m_sector;
}
void OAIAddress::setSector(const QString &sector) {
    m_sector = sector;
    m_sector_isSet = true;
}

bool OAIAddress::is_sector_Set() const{
    return m_sector_isSet;
}

bool OAIAddress::is_sector_Valid() const{
    return m_sector_isValid;
}

QString OAIAddress::getState() const {
    return m_state;
}
void OAIAddress::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIAddress::is_state_Set() const{
    return m_state_isSet;
}

bool OAIAddress::is_state_Valid() const{
    return m_state_isValid;
}

QString OAIAddress::getStreetName() const {
    return m_street_name;
}
void OAIAddress::setStreetName(const QString &street_name) {
    m_street_name = street_name;
    m_street_name_isSet = true;
}

bool OAIAddress::is_street_name_Set() const{
    return m_street_name_isSet;
}

bool OAIAddress::is_street_name_Valid() const{
    return m_street_name_isValid;
}

QString OAIAddress::getStreetNameIntersection() const {
    return m_street_name_intersection;
}
void OAIAddress::setStreetNameIntersection(const QString &street_name_intersection) {
    m_street_name_intersection = street_name_intersection;
    m_street_name_intersection_isSet = true;
}

bool OAIAddress::is_street_name_intersection_Set() const{
    return m_street_name_intersection_isSet;
}

bool OAIAddress::is_street_name_intersection_Valid() const{
    return m_street_name_intersection_isValid;
}

QString OAIAddress::getStreetType() const {
    return m_street_type;
}
void OAIAddress::setStreetType(const QString &street_type) {
    m_street_type = street_type;
    m_street_type_isSet = true;
}

bool OAIAddress::is_street_type_Set() const{
    return m_street_type_isSet;
}

bool OAIAddress::is_street_type_Valid() const{
    return m_street_type_isValid;
}

QString OAIAddress::getStreetTypeIntersection() const {
    return m_street_type_intersection;
}
void OAIAddress::setStreetTypeIntersection(const QString &street_type_intersection) {
    m_street_type_intersection = street_type_intersection;
    m_street_type_intersection_isSet = true;
}

bool OAIAddress::is_street_type_intersection_Set() const{
    return m_street_type_intersection_isSet;
}

bool OAIAddress::is_street_type_intersection_Valid() const{
    return m_street_type_intersection_isValid;
}

QString OAIAddress::getSuiteNumber() const {
    return m_suite_number;
}
void OAIAddress::setSuiteNumber(const QString &suite_number) {
    m_suite_number = suite_number;
    m_suite_number_isSet = true;
}

bool OAIAddress::is_suite_number_Set() const{
    return m_suite_number_isSet;
}

bool OAIAddress::is_suite_number_Valid() const{
    return m_suite_number_isValid;
}

QString OAIAddress::getSuiteType() const {
    return m_suite_type;
}
void OAIAddress::setSuiteType(const QString &suite_type) {
    m_suite_type = suite_type;
    m_suite_type_isSet = true;
}

bool OAIAddress::is_suite_type_Set() const{
    return m_suite_type_isSet;
}

bool OAIAddress::is_suite_type_Valid() const{
    return m_suite_type_isValid;
}

QString OAIAddress::getWard() const {
    return m_ward;
}
void OAIAddress::setWard(const QString &ward) {
    m_ward = ward;
    m_ward_isSet = true;
}

bool OAIAddress::is_ward_Set() const{
    return m_ward_isSet;
}

bool OAIAddress::is_ward_Valid() const{
    return m_ward_isValid;
}

QString OAIAddress::getZipCode() const {
    return m_zip_code;
}
void OAIAddress::setZipCode(const QString &zip_code) {
    m_zip_code = zip_code;
    m_zip_code_isSet = true;
}

bool OAIAddress::is_zip_code_Set() const{
    return m_zip_code_isSet;
}

bool OAIAddress::is_zip_code_Valid() const{
    return m_zip_code_isValid;
}

bool OAIAddress::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_po_box_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_po_box_agency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_po_box_info_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_adm1_name_alternates_localized.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_adm2_name_alternates_localized.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_block_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_city_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_city_subdivision_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_civic_number_suffix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_confidence_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_name_alternates_localized.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_countrycode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dependent_locality_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_distance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_district_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_extra_info_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_floor_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_geocodinglevel_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_house_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_house_number_info_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lat_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lng_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lote_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_alternates_localized.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_post_direction_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_post_direction_intersection_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_post_town_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pre_direction_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pre_direction_intersection_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_prefecture_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quadrant_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quarter_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recipient_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sector_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_street_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_street_name_intersection_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_street_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_street_type_intersection_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_suite_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_suite_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ward_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_zip_code_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAddress::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
