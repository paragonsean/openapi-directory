# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Address(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, po_box: str=None, po_box_agency: str=None, po_box_info: str=None, adm1_name_alternates_localized: Dict[str, List[str]]=None, adm2_name_alternates_localized: Dict[str, List[str]]=None, block: str=None, city: str=None, city_subdivision: str=None, civic_number_suffix: str=None, confidence: str=None, country: str=None, country_name_alternates_localized: Dict[str, List[str]]=None, countrycode: str=None, dependent_locality: str=None, distance: float=None, district: str=None, extra_info: str=None, floor: str=None, geocodinglevel: str=None, house_number: str=None, house_number_info: str=None, id: int=None, lat: float=None, lng: float=None, lote: str=None, name: str=None, name_alternates_localized: Dict[str, List[str]]=None, post_direction: str=None, post_direction_intersection: str=None, post_town: str=None, pre_direction: str=None, pre_direction_intersection: str=None, prefecture: str=None, quadrant: str=None, quarter: str=None, recipient_name: str=None, sector: str=None, state: str=None, street_name: str=None, street_name_intersection: str=None, street_type: str=None, street_type_intersection: str=None, suite_number: str=None, suite_type: str=None, ward: str=None, zip_code: str=None):
        """Address - a model defined in OpenAPI

        :param po_box: The po_box of this Address.
        :param po_box_agency: The po_box_agency of this Address.
        :param po_box_info: The po_box_info of this Address.
        :param adm1_name_alternates_localized: The adm1_name_alternates_localized of this Address.
        :param adm2_name_alternates_localized: The adm2_name_alternates_localized of this Address.
        :param block: The block of this Address.
        :param city: The city of this Address.
        :param city_subdivision: The city_subdivision of this Address.
        :param civic_number_suffix: The civic_number_suffix of this Address.
        :param confidence: The confidence of this Address.
        :param country: The country of this Address.
        :param country_name_alternates_localized: The country_name_alternates_localized of this Address.
        :param countrycode: The countrycode of this Address.
        :param dependent_locality: The dependent_locality of this Address.
        :param distance: The distance of this Address.
        :param district: The district of this Address.
        :param extra_info: The extra_info of this Address.
        :param floor: The floor of this Address.
        :param geocodinglevel: The geocodinglevel of this Address.
        :param house_number: The house_number of this Address.
        :param house_number_info: The house_number_info of this Address.
        :param id: The id of this Address.
        :param lat: The lat of this Address.
        :param lng: The lng of this Address.
        :param lote: The lote of this Address.
        :param name: The name of this Address.
        :param name_alternates_localized: The name_alternates_localized of this Address.
        :param post_direction: The post_direction of this Address.
        :param post_direction_intersection: The post_direction_intersection of this Address.
        :param post_town: The post_town of this Address.
        :param pre_direction: The pre_direction of this Address.
        :param pre_direction_intersection: The pre_direction_intersection of this Address.
        :param prefecture: The prefecture of this Address.
        :param quadrant: The quadrant of this Address.
        :param quarter: The quarter of this Address.
        :param recipient_name: The recipient_name of this Address.
        :param sector: The sector of this Address.
        :param state: The state of this Address.
        :param street_name: The street_name of this Address.
        :param street_name_intersection: The street_name_intersection of this Address.
        :param street_type: The street_type of this Address.
        :param street_type_intersection: The street_type_intersection of this Address.
        :param suite_number: The suite_number of this Address.
        :param suite_type: The suite_type of this Address.
        :param ward: The ward of this Address.
        :param zip_code: The zip_code of this Address.
        """
        self.openapi_types = {
            'po_box': str,
            'po_box_agency': str,
            'po_box_info': str,
            'adm1_name_alternates_localized': Dict[str, List[str]],
            'adm2_name_alternates_localized': Dict[str, List[str]],
            'block': str,
            'city': str,
            'city_subdivision': str,
            'civic_number_suffix': str,
            'confidence': str,
            'country': str,
            'country_name_alternates_localized': Dict[str, List[str]],
            'countrycode': str,
            'dependent_locality': str,
            'distance': float,
            'district': str,
            'extra_info': str,
            'floor': str,
            'geocodinglevel': str,
            'house_number': str,
            'house_number_info': str,
            'id': int,
            'lat': float,
            'lng': float,
            'lote': str,
            'name': str,
            'name_alternates_localized': Dict[str, List[str]],
            'post_direction': str,
            'post_direction_intersection': str,
            'post_town': str,
            'pre_direction': str,
            'pre_direction_intersection': str,
            'prefecture': str,
            'quadrant': str,
            'quarter': str,
            'recipient_name': str,
            'sector': str,
            'state': str,
            'street_name': str,
            'street_name_intersection': str,
            'street_type': str,
            'street_type_intersection': str,
            'suite_number': str,
            'suite_type': str,
            'ward': str,
            'zip_code': str
        }

        self.attribute_map = {
            'po_box': 'POBox',
            'po_box_agency': 'POBoxAgency',
            'po_box_info': 'POBoxInfo',
            'adm1_name_alternates_localized': 'adm1NameAlternatesLocalized',
            'adm2_name_alternates_localized': 'adm2NameAlternatesLocalized',
            'block': 'block',
            'city': 'city',
            'city_subdivision': 'citySubdivision',
            'civic_number_suffix': 'civicNumberSuffix',
            'confidence': 'confidence',
            'country': 'country',
            'country_name_alternates_localized': 'countryNameAlternatesLocalized',
            'countrycode': 'countrycode',
            'dependent_locality': 'dependentLocality',
            'distance': 'distance',
            'district': 'district',
            'extra_info': 'extraInfo',
            'floor': 'floor',
            'geocodinglevel': 'geocodinglevel',
            'house_number': 'houseNumber',
            'house_number_info': 'houseNumberInfo',
            'id': 'id',
            'lat': 'lat',
            'lng': 'lng',
            'lote': 'lote',
            'name': 'name',
            'name_alternates_localized': 'nameAlternatesLocalized',
            'post_direction': 'postDirection',
            'post_direction_intersection': 'postDirectionIntersection',
            'post_town': 'postTown',
            'pre_direction': 'preDirection',
            'pre_direction_intersection': 'preDirectionIntersection',
            'prefecture': 'prefecture',
            'quadrant': 'quadrant',
            'quarter': 'quarter',
            'recipient_name': 'recipientName',
            'sector': 'sector',
            'state': 'state',
            'street_name': 'streetName',
            'street_name_intersection': 'streetNameIntersection',
            'street_type': 'streetType',
            'street_type_intersection': 'streetTypeIntersection',
            'suite_number': 'suiteNumber',
            'suite_type': 'suiteType',
            'ward': 'ward',
            'zip_code': 'zipCode'
        }

        self._po_box = po_box
        self._po_box_agency = po_box_agency
        self._po_box_info = po_box_info
        self._adm1_name_alternates_localized = adm1_name_alternates_localized
        self._adm2_name_alternates_localized = adm2_name_alternates_localized
        self._block = block
        self._city = city
        self._city_subdivision = city_subdivision
        self._civic_number_suffix = civic_number_suffix
        self._confidence = confidence
        self._country = country
        self._country_name_alternates_localized = country_name_alternates_localized
        self._countrycode = countrycode
        self._dependent_locality = dependent_locality
        self._distance = distance
        self._district = district
        self._extra_info = extra_info
        self._floor = floor
        self._geocodinglevel = geocodinglevel
        self._house_number = house_number
        self._house_number_info = house_number_info
        self._id = id
        self._lat = lat
        self._lng = lng
        self._lote = lote
        self._name = name
        self._name_alternates_localized = name_alternates_localized
        self._post_direction = post_direction
        self._post_direction_intersection = post_direction_intersection
        self._post_town = post_town
        self._pre_direction = pre_direction
        self._pre_direction_intersection = pre_direction_intersection
        self._prefecture = prefecture
        self._quadrant = quadrant
        self._quarter = quarter
        self._recipient_name = recipient_name
        self._sector = sector
        self._state = state
        self._street_name = street_name
        self._street_name_intersection = street_name_intersection
        self._street_type = street_type
        self._street_type_intersection = street_type_intersection
        self._suite_number = suite_number
        self._suite_type = suite_type
        self._ward = ward
        self._zip_code = zip_code

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Address':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Address of this Address.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def po_box(self):
        """Gets the po_box of this Address.

        Post office box, Boite postale, Casilla de Correo,...

        :return: The po_box of this Address.
        :rtype: str
        """
        return self._po_box

    @po_box.setter
    def po_box(self, po_box):
        """Sets the po_box of this Address.

        Post office box, Boite postale, Casilla de Correo,...

        :param po_box: The po_box of this Address.
        :type po_box: str
        """

        self._po_box = po_box

    @property
    def po_box_agency(self):
        """Gets the po_box_agency of this Address.

        Agency where the office box, Boite postale, Casilla de Correo is

        :return: The po_box_agency of this Address.
        :rtype: str
        """
        return self._po_box_agency

    @po_box_agency.setter
    def po_box_agency(self, po_box_agency):
        """Sets the po_box_agency of this Address.

        Agency where the office box, Boite postale, Casilla de Correo is

        :param po_box_agency: The po_box_agency of this Address.
        :type po_box_agency: str
        """

        self._po_box_agency = po_box_agency

    @property
    def po_box_info(self):
        """Gets the po_box_info of this Address.

        extra info on post office box, Boite postale, Casilla de Correo,..

        :return: The po_box_info of this Address.
        :rtype: str
        """
        return self._po_box_info

    @po_box_info.setter
    def po_box_info(self, po_box_info):
        """Sets the po_box_info of this Address.

        extra info on post office box, Boite postale, Casilla de Correo,..

        :param po_box_info: The po_box_info of this Address.
        :type po_box_info: str
        """

        self._po_box_info = po_box_info

    @property
    def adm1_name_alternates_localized(self):
        """Gets the adm1_name_alternates_localized of this Address.


        :return: The adm1_name_alternates_localized of this Address.
        :rtype: Dict[str, List[str]]
        """
        return self._adm1_name_alternates_localized

    @adm1_name_alternates_localized.setter
    def adm1_name_alternates_localized(self, adm1_name_alternates_localized):
        """Sets the adm1_name_alternates_localized of this Address.


        :param adm1_name_alternates_localized: The adm1_name_alternates_localized of this Address.
        :type adm1_name_alternates_localized: Dict[str, List[str]]
        """

        self._adm1_name_alternates_localized = adm1_name_alternates_localized

    @property
    def adm2_name_alternates_localized(self):
        """Gets the adm2_name_alternates_localized of this Address.


        :return: The adm2_name_alternates_localized of this Address.
        :rtype: Dict[str, List[str]]
        """
        return self._adm2_name_alternates_localized

    @adm2_name_alternates_localized.setter
    def adm2_name_alternates_localized(self, adm2_name_alternates_localized):
        """Sets the adm2_name_alternates_localized of this Address.


        :param adm2_name_alternates_localized: The adm2_name_alternates_localized of this Address.
        :type adm2_name_alternates_localized: Dict[str, List[str]]
        """

        self._adm2_name_alternates_localized = adm2_name_alternates_localized

    @property
    def block(self):
        """Gets the block of this Address.

        The block in an address (Brasilia only) the block in austria, singapore,... address

        :return: The block of this Address.
        :rtype: str
        """
        return self._block

    @block.setter
    def block(self, block):
        """Sets the block of this Address.

        The block in an address (Brasilia only) the block in austria, singapore,... address

        :param block: The block of this Address.
        :type block: str
        """

        self._block = block

    @property
    def city(self):
        """Gets the city of this Address.

        The city or locality, a small town or village name sometimes is included in an address when the Delivery Point is outside the boundary of the main Post Town that serves it.

        :return: The city of this Address.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this Address.

        The city or locality, a small town or village name sometimes is included in an address when the Delivery Point is outside the boundary of the main Post Town that serves it.

        :param city: The city of this Address.
        :type city: str
        """

        self._city = city

    @property
    def city_subdivision(self):
        """Gets the city_subdivision of this Address.

        A sub division of a city

        :return: The city_subdivision of this Address.
        :rtype: str
        """
        return self._city_subdivision

    @city_subdivision.setter
    def city_subdivision(self, city_subdivision):
        """Sets the city_subdivision of this Address.

        A sub division of a city

        :param city_subdivision: The city_subdivision of this Address.
        :type city_subdivision: str
        """

        self._city_subdivision = city_subdivision

    @property
    def civic_number_suffix(self):
        """Gets the civic_number_suffix of this Address.

        The number that follows the house number (Canada only)

        :return: The civic_number_suffix of this Address.
        :rtype: str
        """
        return self._civic_number_suffix

    @civic_number_suffix.setter
    def civic_number_suffix(self, civic_number_suffix):
        """Sets the civic_number_suffix of this Address.

        The number that follows the house number (Canada only)

        :param civic_number_suffix: The civic_number_suffix of this Address.
        :type civic_number_suffix: str
        """

        self._civic_number_suffix = civic_number_suffix

    @property
    def confidence(self):
        """Gets the confidence of this Address.

        An indicator that mesure how the parser is confident for the result

        :return: The confidence of this Address.
        :rtype: str
        """
        return self._confidence

    @confidence.setter
    def confidence(self, confidence):
        """Sets the confidence of this Address.

        An indicator that mesure how the parser is confident for the result

        :param confidence: The confidence of this Address.
        :type confidence: str
        """

        self._confidence = confidence

    @property
    def country(self):
        """Gets the country of this Address.

        The country name

        :return: The country of this Address.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this Address.

        The country name

        :param country: The country of this Address.
        :type country: str
        """

        self._country = country

    @property
    def country_name_alternates_localized(self):
        """Gets the country_name_alternates_localized of this Address.


        :return: The country_name_alternates_localized of this Address.
        :rtype: Dict[str, List[str]]
        """
        return self._country_name_alternates_localized

    @country_name_alternates_localized.setter
    def country_name_alternates_localized(self, country_name_alternates_localized):
        """Sets the country_name_alternates_localized of this Address.


        :param country_name_alternates_localized: The country_name_alternates_localized of this Address.
        :type country_name_alternates_localized: Dict[str, List[str]]
        """

        self._country_name_alternates_localized = country_name_alternates_localized

    @property
    def countrycode(self):
        """Gets the countrycode of this Address.

        The countrycode given in the request

        :return: The countrycode of this Address.
        :rtype: str
        """
        return self._countrycode

    @countrycode.setter
    def countrycode(self, countrycode):
        """Sets the countrycode of this Address.

        The countrycode given in the request

        :param countrycode: The countrycode of this Address.
        :type countrycode: str
        """

        self._countrycode = countrycode

    @property
    def dependent_locality(self):
        """Gets the dependent_locality of this Address.

        'Sub' city atached to a big city

        :return: The dependent_locality of this Address.
        :rtype: str
        """
        return self._dependent_locality

    @dependent_locality.setter
    def dependent_locality(self, dependent_locality):
        """Sets the dependent_locality of this Address.

        'Sub' city atached to a big city

        :param dependent_locality: The dependent_locality of this Address.
        :type dependent_locality: str
        """

        self._dependent_locality = dependent_locality

    @property
    def distance(self):
        """Gets the distance of this Address.

        The distance of the address for the given parameter location in the query

        :return: The distance of this Address.
        :rtype: float
        """
        return self._distance

    @distance.setter
    def distance(self, distance):
        """Sets the distance of this Address.

        The distance of the address for the given parameter location in the query

        :param distance: The distance of this Address.
        :type distance: float
        """

        self._distance = distance

    @property
    def district(self):
        """Gets the district of this Address.

        The district, mainly use for Russia

        :return: The district of this Address.
        :rtype: str
        """
        return self._district

    @district.setter
    def district(self, district):
        """Sets the district of this Address.

        The district, mainly use for Russia

        :param district: The district of this Address.
        :type district: str
        """

        self._district = district

    @property
    def extra_info(self):
        """Gets the extra_info of this Address.

        Informations on floor, unit, and sometimes POBOX,...

        :return: The extra_info of this Address.
        :rtype: str
        """
        return self._extra_info

    @extra_info.setter
    def extra_info(self, extra_info):
        """Sets the extra_info of this Address.

        Informations on floor, unit, and sometimes POBOX,...

        :param extra_info: The extra_info of this Address.
        :type extra_info: str
        """

        self._extra_info = extra_info

    @property
    def floor(self):
        """Gets the floor of this Address.

        The floor in an address, not a floor number in a unit (Brasilia only)

        :return: The floor of this Address.
        :rtype: str
        """
        return self._floor

    @floor.setter
    def floor(self, floor):
        """Sets the floor of this Address.

        The floor in an address, not a floor number in a unit (Brasilia only)

        :param floor: The floor of this Address.
        :type floor: str
        """

        self._floor = floor

    @property
    def geocodinglevel(self):
        """Gets the geocodinglevel of this Address.


        :return: The geocodinglevel of this Address.
        :rtype: str
        """
        return self._geocodinglevel

    @geocodinglevel.setter
    def geocodinglevel(self, geocodinglevel):
        """Sets the geocodinglevel of this Address.


        :param geocodinglevel: The geocodinglevel of this Address.
        :type geocodinglevel: str
        """
        allowed_values = ["NONE", "HOUSE_NUMBER", "STREET", "CITY", "STATE", "COUNTRY"]  # noqa: E501
        if geocodinglevel not in allowed_values:
            raise ValueError(
                "Invalid value for `geocodinglevel` ({0}), must be one of {1}"
                .format(geocodinglevel, allowed_values)
            )

        self._geocodinglevel = geocodinglevel

    @property
    def house_number(self):
        """Gets the house_number of this Address.

        Official number assigned to an address by the municipality, several languages supported

        :return: The house_number of this Address.
        :rtype: str
        """
        return self._house_number

    @house_number.setter
    def house_number(self, house_number):
        """Sets the house_number of this Address.

        Official number assigned to an address by the municipality, several languages supported

        :param house_number: The house_number of this Address.
        :type house_number: str
        """

        self._house_number = house_number

    @property
    def house_number_info(self):
        """Gets the house_number_info of this Address.

        All information that give extra information on the house number

        :return: The house_number_info of this Address.
        :rtype: str
        """
        return self._house_number_info

    @house_number_info.setter
    def house_number_info(self, house_number_info):
        """Sets the house_number_info of this Address.

        All information that give extra information on the house number

        :param house_number_info: The house_number_info of this Address.
        :type house_number_info: str
        """

        self._house_number_info = house_number_info

    @property
    def id(self):
        """Gets the id of this Address.

        An internal ID to identify the address

        :return: The id of this Address.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Address.

        An internal ID to identify the address

        :param id: The id of this Address.
        :type id: int
        """

        self._id = id

    @property
    def lat(self):
        """Gets the lat of this Address.

        The latitude of the address

        :return: The lat of this Address.
        :rtype: float
        """
        return self._lat

    @lat.setter
    def lat(self, lat):
        """Sets the lat of this Address.

        The latitude of the address

        :param lat: The lat of this Address.
        :type lat: float
        """

        self._lat = lat

    @property
    def lng(self):
        """Gets the lng of this Address.

        The longitude of the address

        :return: The lng of this Address.
        :rtype: float
        """
        return self._lng

    @lng.setter
    def lng(self, lng):
        """Sets the lng of this Address.

        The longitude of the address

        :param lng: The lng of this Address.
        :type lng: float
        """

        self._lng = lng

    @property
    def lote(self):
        """Gets the lote of this Address.

        Lote in Brazilian address

        :return: The lote of this Address.
        :rtype: str
        """
        return self._lote

    @lote.setter
    def lote(self, lote):
        """Sets the lote of this Address.

        Lote in Brazilian address

        :param lote: The lote of this Address.
        :type lote: str
        """

        self._lote = lote

    @property
    def name(self):
        """Gets the name of this Address.

        Name of the place, it is null in case of address but filled if common place. Name is different than recipient name

        :return: The name of this Address.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Address.

        Name of the place, it is null in case of address but filled if common place. Name is different than recipient name

        :param name: The name of this Address.
        :type name: str
        """

        self._name = name

    @property
    def name_alternates_localized(self):
        """Gets the name_alternates_localized of this Address.


        :return: The name_alternates_localized of this Address.
        :rtype: Dict[str, List[str]]
        """
        return self._name_alternates_localized

    @name_alternates_localized.setter
    def name_alternates_localized(self, name_alternates_localized):
        """Sets the name_alternates_localized of this Address.


        :param name_alternates_localized: The name_alternates_localized of this Address.
        :type name_alternates_localized: Dict[str, List[str]]
        """

        self._name_alternates_localized = name_alternates_localized

    @property
    def post_direction(self):
        """Gets the post_direction of this Address.

        The cardinal direction after the name of the street

        :return: The post_direction of this Address.
        :rtype: str
        """
        return self._post_direction

    @post_direction.setter
    def post_direction(self, post_direction):
        """Sets the post_direction of this Address.

        The cardinal direction after the name of the street

        :param post_direction: The post_direction of this Address.
        :type post_direction: str
        """

        self._post_direction = post_direction

    @property
    def post_direction_intersection(self):
        """Gets the post_direction_intersection of this Address.

        The cardinal direction after the name of the intersection street

        :return: The post_direction_intersection of this Address.
        :rtype: str
        """
        return self._post_direction_intersection

    @post_direction_intersection.setter
    def post_direction_intersection(self, post_direction_intersection):
        """Sets the post_direction_intersection of this Address.

        The cardinal direction after the name of the intersection street

        :param post_direction_intersection: The post_direction_intersection of this Address.
        :type post_direction_intersection: str
        """

        self._post_direction_intersection = post_direction_intersection

    @property
    def post_town(self):
        """Gets the post_town of this Address.

        a city is a required part of all postal addresses in the United Kingdom

        :return: The post_town of this Address.
        :rtype: str
        """
        return self._post_town

    @post_town.setter
    def post_town(self, post_town):
        """Sets the post_town of this Address.

        a city is a required part of all postal addresses in the United Kingdom

        :param post_town: The post_town of this Address.
        :type post_town: str
        """

        self._post_town = post_town

    @property
    def pre_direction(self):
        """Gets the pre_direction of this Address.

        The cardinal direction before the name of the street

        :return: The pre_direction of this Address.
        :rtype: str
        """
        return self._pre_direction

    @pre_direction.setter
    def pre_direction(self, pre_direction):
        """Sets the pre_direction of this Address.

        The cardinal direction before the name of the street

        :param pre_direction: The pre_direction of this Address.
        :type pre_direction: str
        """

        self._pre_direction = pre_direction

    @property
    def pre_direction_intersection(self):
        """Gets the pre_direction_intersection of this Address.

        The cardinal direction before the name of the intersection street

        :return: The pre_direction_intersection of this Address.
        :rtype: str
        """
        return self._pre_direction_intersection

    @pre_direction_intersection.setter
    def pre_direction_intersection(self, pre_direction_intersection):
        """Sets the pre_direction_intersection of this Address.

        The cardinal direction before the name of the intersection street

        :param pre_direction_intersection: The pre_direction_intersection of this Address.
        :type pre_direction_intersection: str
        """

        self._pre_direction_intersection = pre_direction_intersection

    @property
    def prefecture(self):
        """Gets the prefecture of this Address.

        prefecture of China

        :return: The prefecture of this Address.
        :rtype: str
        """
        return self._prefecture

    @prefecture.setter
    def prefecture(self, prefecture):
        """Sets the prefecture of this Address.

        prefecture of China

        :param prefecture: The prefecture of this Address.
        :type prefecture: str
        """

        self._prefecture = prefecture

    @property
    def quadrant(self):
        """Gets the quadrant of this Address.

        The quadrant in an address (Brasilia only)

        :return: The quadrant of this Address.
        :rtype: str
        """
        return self._quadrant

    @quadrant.setter
    def quadrant(self, quadrant):
        """Sets the quadrant of this Address.

        The quadrant in an address (Brasilia only)

        :param quadrant: The quadrant of this Address.
        :type quadrant: str
        """

        self._quadrant = quadrant

    @property
    def quarter(self):
        """Gets the quarter of this Address.

        A section of an urban settlement

        :return: The quarter of this Address.
        :rtype: str
        """
        return self._quarter

    @quarter.setter
    def quarter(self, quarter):
        """Sets the quarter of this Address.

        A section of an urban settlement

        :param quarter: The quarter of this Address.
        :type quarter: str
        """

        self._quarter = quarter

    @property
    def recipient_name(self):
        """Gets the recipient_name of this Address.

        Name of the organisation or person at the given address

        :return: The recipient_name of this Address.
        :rtype: str
        """
        return self._recipient_name

    @recipient_name.setter
    def recipient_name(self, recipient_name):
        """Sets the recipient_name of this Address.

        Name of the organisation or person at the given address

        :param recipient_name: The recipient_name of this Address.
        :type recipient_name: str
        """

        self._recipient_name = recipient_name

    @property
    def sector(self):
        """Gets the sector of this Address.

        The sector in an address (Brasilia only)

        :return: The sector of this Address.
        :rtype: str
        """
        return self._sector

    @sector.setter
    def sector(self, sector):
        """Sets the sector of this Address.

        The sector in an address (Brasilia only)

        :param sector: The sector of this Address.
        :type sector: str
        """

        self._sector = sector

    @property
    def state(self):
        """Gets the state of this Address.

        The state or county when applicable, can be fullname or abbreviation

        :return: The state of this Address.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Address.

        The state or county when applicable, can be fullname or abbreviation

        :param state: The state of this Address.
        :type state: str
        """

        self._state = state

    @property
    def street_name(self):
        """Gets the street_name of this Address.

        The official name of the street or the ordinal number

        :return: The street_name of this Address.
        :rtype: str
        """
        return self._street_name

    @street_name.setter
    def street_name(self, street_name):
        """Sets the street_name of this Address.

        The official name of the street or the ordinal number

        :param street_name: The street_name of this Address.
        :type street_name: str
        """

        self._street_name = street_name

    @property
    def street_name_intersection(self):
        """Gets the street_name_intersection of this Address.

        The official name of the intersection street

        :return: The street_name_intersection of this Address.
        :rtype: str
        """
        return self._street_name_intersection

    @street_name_intersection.setter
    def street_name_intersection(self, street_name_intersection):
        """Sets the street_name_intersection of this Address.

        The official name of the intersection street

        :param street_name_intersection: The street_name_intersection of this Address.
        :type street_name_intersection: str
        """

        self._street_name_intersection = street_name_intersection

    @property
    def street_type(self):
        """Gets the street_type of this Address.

        The type of the street

        :return: The street_type of this Address.
        :rtype: str
        """
        return self._street_type

    @street_type.setter
    def street_type(self, street_type):
        """Sets the street_type of this Address.

        The type of the street

        :param street_type: The street_type of this Address.
        :type street_type: str
        """

        self._street_type = street_type

    @property
    def street_type_intersection(self):
        """Gets the street_type_intersection of this Address.

        The type of the intersection street

        :return: The street_type_intersection of this Address.
        :rtype: str
        """
        return self._street_type_intersection

    @street_type_intersection.setter
    def street_type_intersection(self, street_type_intersection):
        """Sets the street_type_intersection of this Address.

        The type of the intersection street

        :param street_type_intersection: The street_type_intersection of this Address.
        :type street_type_intersection: str
        """

        self._street_type_intersection = street_type_intersection

    @property
    def suite_number(self):
        """Gets the suite_number of this Address.

        Informations on the unit, mainly used and filled by standardizer

        :return: The suite_number of this Address.
        :rtype: str
        """
        return self._suite_number

    @suite_number.setter
    def suite_number(self, suite_number):
        """Sets the suite_number of this Address.

        Informations on the unit, mainly used and filled by standardizer

        :param suite_number: The suite_number of this Address.
        :type suite_number: str
        """

        self._suite_number = suite_number

    @property
    def suite_type(self):
        """Gets the suite_type of this Address.

        Informations on the unit, mainly used and filled by standardizer

        :return: The suite_type of this Address.
        :rtype: str
        """
        return self._suite_type

    @suite_type.setter
    def suite_type(self, suite_type):
        """Sets the suite_type of this Address.

        Informations on the unit, mainly used and filled by standardizer

        :param suite_type: The suite_type of this Address.
        :type suite_type: str
        """

        self._suite_type = suite_type

    @property
    def ward(self):
        """Gets the ward of this Address.

        Ward in japanese address

        :return: The ward of this Address.
        :rtype: str
        """
        return self._ward

    @ward.setter
    def ward(self, ward):
        """Sets the ward of this Address.

        Ward in japanese address

        :param ward: The ward of this Address.
        :type ward: str
        """

        self._ward = ward

    @property
    def zip_code(self):
        """Gets the zip_code of this Address.

        The zip or post code

        :return: The zip_code of this Address.
        :rtype: str
        """
        return self._zip_code

    @zip_code.setter
    def zip_code(self, zip_code):
        """Sets the zip_code of this Address.

        The zip or post code

        :param zip_code: The zip_code of this Address.
        :type zip_code: str
        """

        self._zip_code = zip_code
