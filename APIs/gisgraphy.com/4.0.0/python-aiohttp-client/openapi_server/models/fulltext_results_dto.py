# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.solr_response_dto import SolrResponseDto
from openapi_server import util


class FulltextResultsDto(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, q_time: int=None, max_score: float=None, message: str=None, num_found: int=None, result: List[SolrResponseDto]=None, results_size: int=None):
        """FulltextResultsDto - a model defined in OpenAPI

        :param q_time: The q_time of this FulltextResultsDto.
        :param max_score: The max_score of this FulltextResultsDto.
        :param message: The message of this FulltextResultsDto.
        :param num_found: The num_found of this FulltextResultsDto.
        :param result: The result of this FulltextResultsDto.
        :param results_size: The results_size of this FulltextResultsDto.
        """
        self.openapi_types = {
            'q_time': int,
            'max_score': float,
            'message': str,
            'num_found': int,
            'result': List[SolrResponseDto],
            'results_size': int
        }

        self.attribute_map = {
            'q_time': 'QTime',
            'max_score': 'maxScore',
            'message': 'message',
            'num_found': 'numFound',
            'result': 'result',
            'results_size': 'resultsSize'
        }

        self._q_time = q_time
        self._max_score = max_score
        self._message = message
        self._num_found = num_found
        self._result = result
        self._results_size = results_size

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FulltextResultsDto':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FulltextResultsDto of this FulltextResultsDto.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def q_time(self):
        """Gets the q_time of this FulltextResultsDto.

        how long the query took

        :return: The q_time of this FulltextResultsDto.
        :rtype: int
        """
        return self._q_time

    @q_time.setter
    def q_time(self, q_time):
        """Sets the q_time of this FulltextResultsDto.

        how long the query took

        :param q_time: The q_time of this FulltextResultsDto.
        :type q_time: int
        """

        self._q_time = q_time

    @property
    def max_score(self):
        """Gets the max_score of this FulltextResultsDto.

        the max score value accross all the results found

        :return: The max_score of this FulltextResultsDto.
        :rtype: float
        """
        return self._max_score

    @max_score.setter
    def max_score(self, max_score):
        """Sets the max_score of this FulltextResultsDto.

        the max score value accross all the results found

        :param max_score: The max_score of this FulltextResultsDto.
        :type max_score: float
        """

        self._max_score = max_score

    @property
    def message(self):
        """Gets the message of this FulltextResultsDto.

        a message

        :return: The message of this FulltextResultsDto.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this FulltextResultsDto.

        a message

        :param message: The message of this FulltextResultsDto.
        :type message: str
        """

        self._message = message

    @property
    def num_found(self):
        """Gets the num_found of this FulltextResultsDto.

        how many results were found whatever the pagination

        :return: The num_found of this FulltextResultsDto.
        :rtype: int
        """
        return self._num_found

    @num_found.setter
    def num_found(self, num_found):
        """Sets the num_found of this FulltextResultsDto.

        how many results were found whatever the pagination

        :param num_found: The num_found of this FulltextResultsDto.
        :type num_found: int
        """

        self._num_found = num_found

    @property
    def result(self):
        """Gets the result of this FulltextResultsDto.


        :return: The result of this FulltextResultsDto.
        :rtype: List[SolrResponseDto]
        """
        return self._result

    @result.setter
    def result(self, result):
        """Sets the result of this FulltextResultsDto.


        :param result: The result of this FulltextResultsDto.
        :type result: List[SolrResponseDto]
        """

        self._result = result

    @property
    def results_size(self):
        """Gets the results_size of this FulltextResultsDto.

        how many results are return

        :return: The results_size of this FulltextResultsDto.
        :rtype: int
        """
        return self._results_size

    @results_size.setter
    def results_size(self, results_size):
        """Sets the results_size of this FulltextResultsDto.

        how many results are return

        :param results_size: The results_size of this FulltextResultsDto.
        :type results_size: int
        """

        self._results_size = results_size
