# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.house_number_dto import HouseNumberDto
from openapi_server import util


class SolrResponseDto(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, adm1_code: str=None, adm1_name: str=None, adm1_names_alternate: List[str]=None, adm2_code: str=None, adm2_name: str=None, adm2_names_alternate: List[str]=None, adm3_code: str=None, adm3_name: str=None, adm4_code: str=None, adm4_name: str=None, amenity: str=None, area: float=None, capital_name: str=None, continent: str=None, country_code: str=None, country_flag_url: str=None, country_name: str=None, country_names_alternate: List[str]=None, currency_code: str=None, currency_name: str=None, elevation: int=None, feature_class: str=None, feature_code: str=None, feature_id: int=None, fips_code: str=None, fully_qualified_address: str=None, fully_qualified_name: str=None, google_map_url: str=None, gtopo30: int=None, house_numbers: List[HouseNumberDto]=None, is_in: str=None, is_in_adm: str=None, is_in_place: str=None, is_in_zip: List[str]=None, isoalpha2_country_code: str=None, isoalpha3_country_code: str=None, lat: float=None, length: float=None, level: int=None, lng: float=None, municipality: bool=None, name: str=None, name_alternates: List[str]=None, name_ascii: str=None, one_way: bool=None, openstreetmap_id: int=None, openstreetmap_map_url: str=None, phone_prefix: str=None, placetype: str=None, population: int=None, postal_code_mask: str=None, postal_code_regex: str=None, score: float=None, spoken_languages: List[str]=None, street_type: str=None, timezone: str=None, tld: str=None, yahoo_map_url: str=None, zipcodes: List[str]=None):
        """SolrResponseDto - a model defined in OpenAPI

        :param adm1_code: The adm1_code of this SolrResponseDto.
        :param adm1_name: The adm1_name of this SolrResponseDto.
        :param adm1_names_alternate: The adm1_names_alternate of this SolrResponseDto.
        :param adm2_code: The adm2_code of this SolrResponseDto.
        :param adm2_name: The adm2_name of this SolrResponseDto.
        :param adm2_names_alternate: The adm2_names_alternate of this SolrResponseDto.
        :param adm3_code: The adm3_code of this SolrResponseDto.
        :param adm3_name: The adm3_name of this SolrResponseDto.
        :param adm4_code: The adm4_code of this SolrResponseDto.
        :param adm4_name: The adm4_name of this SolrResponseDto.
        :param amenity: The amenity of this SolrResponseDto.
        :param area: The area of this SolrResponseDto.
        :param capital_name: The capital_name of this SolrResponseDto.
        :param continent: The continent of this SolrResponseDto.
        :param country_code: The country_code of this SolrResponseDto.
        :param country_flag_url: The country_flag_url of this SolrResponseDto.
        :param country_name: The country_name of this SolrResponseDto.
        :param country_names_alternate: The country_names_alternate of this SolrResponseDto.
        :param currency_code: The currency_code of this SolrResponseDto.
        :param currency_name: The currency_name of this SolrResponseDto.
        :param elevation: The elevation of this SolrResponseDto.
        :param feature_class: The feature_class of this SolrResponseDto.
        :param feature_code: The feature_code of this SolrResponseDto.
        :param feature_id: The feature_id of this SolrResponseDto.
        :param fips_code: The fips_code of this SolrResponseDto.
        :param fully_qualified_address: The fully_qualified_address of this SolrResponseDto.
        :param fully_qualified_name: The fully_qualified_name of this SolrResponseDto.
        :param google_map_url: The google_map_url of this SolrResponseDto.
        :param gtopo30: The gtopo30 of this SolrResponseDto.
        :param house_numbers: The house_numbers of this SolrResponseDto.
        :param is_in: The is_in of this SolrResponseDto.
        :param is_in_adm: The is_in_adm of this SolrResponseDto.
        :param is_in_place: The is_in_place of this SolrResponseDto.
        :param is_in_zip: The is_in_zip of this SolrResponseDto.
        :param isoalpha2_country_code: The isoalpha2_country_code of this SolrResponseDto.
        :param isoalpha3_country_code: The isoalpha3_country_code of this SolrResponseDto.
        :param lat: The lat of this SolrResponseDto.
        :param length: The length of this SolrResponseDto.
        :param level: The level of this SolrResponseDto.
        :param lng: The lng of this SolrResponseDto.
        :param municipality: The municipality of this SolrResponseDto.
        :param name: The name of this SolrResponseDto.
        :param name_alternates: The name_alternates of this SolrResponseDto.
        :param name_ascii: The name_ascii of this SolrResponseDto.
        :param one_way: The one_way of this SolrResponseDto.
        :param openstreetmap_id: The openstreetmap_id of this SolrResponseDto.
        :param openstreetmap_map_url: The openstreetmap_map_url of this SolrResponseDto.
        :param phone_prefix: The phone_prefix of this SolrResponseDto.
        :param placetype: The placetype of this SolrResponseDto.
        :param population: The population of this SolrResponseDto.
        :param postal_code_mask: The postal_code_mask of this SolrResponseDto.
        :param postal_code_regex: The postal_code_regex of this SolrResponseDto.
        :param score: The score of this SolrResponseDto.
        :param spoken_languages: The spoken_languages of this SolrResponseDto.
        :param street_type: The street_type of this SolrResponseDto.
        :param timezone: The timezone of this SolrResponseDto.
        :param tld: The tld of this SolrResponseDto.
        :param yahoo_map_url: The yahoo_map_url of this SolrResponseDto.
        :param zipcodes: The zipcodes of this SolrResponseDto.
        """
        self.openapi_types = {
            'adm1_code': str,
            'adm1_name': str,
            'adm1_names_alternate': List[str],
            'adm2_code': str,
            'adm2_name': str,
            'adm2_names_alternate': List[str],
            'adm3_code': str,
            'adm3_name': str,
            'adm4_code': str,
            'adm4_name': str,
            'amenity': str,
            'area': float,
            'capital_name': str,
            'continent': str,
            'country_code': str,
            'country_flag_url': str,
            'country_name': str,
            'country_names_alternate': List[str],
            'currency_code': str,
            'currency_name': str,
            'elevation': int,
            'feature_class': str,
            'feature_code': str,
            'feature_id': int,
            'fips_code': str,
            'fully_qualified_address': str,
            'fully_qualified_name': str,
            'google_map_url': str,
            'gtopo30': int,
            'house_numbers': List[HouseNumberDto],
            'is_in': str,
            'is_in_adm': str,
            'is_in_place': str,
            'is_in_zip': List[str],
            'isoalpha2_country_code': str,
            'isoalpha3_country_code': str,
            'lat': float,
            'length': float,
            'level': int,
            'lng': float,
            'municipality': bool,
            'name': str,
            'name_alternates': List[str],
            'name_ascii': str,
            'one_way': bool,
            'openstreetmap_id': int,
            'openstreetmap_map_url': str,
            'phone_prefix': str,
            'placetype': str,
            'population': int,
            'postal_code_mask': str,
            'postal_code_regex': str,
            'score': float,
            'spoken_languages': List[str],
            'street_type': str,
            'timezone': str,
            'tld': str,
            'yahoo_map_url': str,
            'zipcodes': List[str]
        }

        self.attribute_map = {
            'adm1_code': 'adm1_code',
            'adm1_name': 'adm1_name',
            'adm1_names_alternate': 'adm1_names_alternate',
            'adm2_code': 'adm2_code',
            'adm2_name': 'adm2_name',
            'adm2_names_alternate': 'adm2_names_alternate',
            'adm3_code': 'adm3_code',
            'adm3_name': 'adm3_name',
            'adm4_code': 'adm4_code',
            'adm4_name': 'adm4_name',
            'amenity': 'amenity',
            'area': 'area',
            'capital_name': 'capital_name',
            'continent': 'continent',
            'country_code': 'country_code',
            'country_flag_url': 'country_flag_url',
            'country_name': 'country_name',
            'country_names_alternate': 'country_names_alternate',
            'currency_code': 'currency_code',
            'currency_name': 'currency_name',
            'elevation': 'elevation',
            'feature_class': 'feature_class',
            'feature_code': 'feature_code',
            'feature_id': 'feature_id',
            'fips_code': 'fips_code',
            'fully_qualified_address': 'fully_qualified_address',
            'fully_qualified_name': 'fully_qualified_name',
            'google_map_url': 'google_map_url',
            'gtopo30': 'gtopo30',
            'house_numbers': 'house_numbers',
            'is_in': 'is_in',
            'is_in_adm': 'is_in_adm',
            'is_in_place': 'is_in_place',
            'is_in_zip': 'is_in_zip',
            'isoalpha2_country_code': 'isoalpha2_country_code',
            'isoalpha3_country_code': 'isoalpha3_country_code',
            'lat': 'lat',
            'length': 'length',
            'level': 'level',
            'lng': 'lng',
            'municipality': 'municipality',
            'name': 'name',
            'name_alternates': 'name_alternates',
            'name_ascii': 'name_ascii',
            'one_way': 'one_way',
            'openstreetmap_id': 'openstreetmap_id',
            'openstreetmap_map_url': 'openstreetmap_map_url',
            'phone_prefix': 'phone_prefix',
            'placetype': 'placetype',
            'population': 'population',
            'postal_code_mask': 'postal_code_mask',
            'postal_code_regex': 'postal_code_regex',
            'score': 'score',
            'spoken_languages': 'spoken_languages',
            'street_type': 'street_type',
            'timezone': 'timezone',
            'tld': 'tld',
            'yahoo_map_url': 'yahoo_map_url',
            'zipcodes': 'zipcodes'
        }

        self._adm1_code = adm1_code
        self._adm1_name = adm1_name
        self._adm1_names_alternate = adm1_names_alternate
        self._adm2_code = adm2_code
        self._adm2_name = adm2_name
        self._adm2_names_alternate = adm2_names_alternate
        self._adm3_code = adm3_code
        self._adm3_name = adm3_name
        self._adm4_code = adm4_code
        self._adm4_name = adm4_name
        self._amenity = amenity
        self._area = area
        self._capital_name = capital_name
        self._continent = continent
        self._country_code = country_code
        self._country_flag_url = country_flag_url
        self._country_name = country_name
        self._country_names_alternate = country_names_alternate
        self._currency_code = currency_code
        self._currency_name = currency_name
        self._elevation = elevation
        self._feature_class = feature_class
        self._feature_code = feature_code
        self._feature_id = feature_id
        self._fips_code = fips_code
        self._fully_qualified_address = fully_qualified_address
        self._fully_qualified_name = fully_qualified_name
        self._google_map_url = google_map_url
        self._gtopo30 = gtopo30
        self._house_numbers = house_numbers
        self._is_in = is_in
        self._is_in_adm = is_in_adm
        self._is_in_place = is_in_place
        self._is_in_zip = is_in_zip
        self._isoalpha2_country_code = isoalpha2_country_code
        self._isoalpha3_country_code = isoalpha3_country_code
        self._lat = lat
        self._length = length
        self._level = level
        self._lng = lng
        self._municipality = municipality
        self._name = name
        self._name_alternates = name_alternates
        self._name_ascii = name_ascii
        self._one_way = one_way
        self._openstreetmap_id = openstreetmap_id
        self._openstreetmap_map_url = openstreetmap_map_url
        self._phone_prefix = phone_prefix
        self._placetype = placetype
        self._population = population
        self._postal_code_mask = postal_code_mask
        self._postal_code_regex = postal_code_regex
        self._score = score
        self._spoken_languages = spoken_languages
        self._street_type = street_type
        self._timezone = timezone
        self._tld = tld
        self._yahoo_map_url = yahoo_map_url
        self._zipcodes = zipcodes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SolrResponseDto':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SolrResponseDto of this SolrResponseDto.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def adm1_code(self):
        """Gets the adm1_code of this SolrResponseDto.

        The internal code for the administrative division of level 1

        :return: The adm1_code of this SolrResponseDto.
        :rtype: str
        """
        return self._adm1_code

    @adm1_code.setter
    def adm1_code(self, adm1_code):
        """Sets the adm1_code of this SolrResponseDto.

        The internal code for the administrative division of level 1

        :param adm1_code: The adm1_code of this SolrResponseDto.
        :type adm1_code: str
        """

        self._adm1_code = adm1_code

    @property
    def adm1_name(self):
        """Gets the adm1_name of this SolrResponseDto.

        The name of the administrative division of level 1

        :return: The adm1_name of this SolrResponseDto.
        :rtype: str
        """
        return self._adm1_name

    @adm1_name.setter
    def adm1_name(self, adm1_name):
        """Sets the adm1_name of this SolrResponseDto.

        The name of the administrative division of level 1

        :param adm1_name: The adm1_name of this SolrResponseDto.
        :type adm1_name: str
        """

        self._adm1_name = adm1_name

    @property
    def adm1_names_alternate(self):
        """Gets the adm1_names_alternate of this SolrResponseDto.

        The alternate names of the administrative division of level 1 without specific language code

        :return: The adm1_names_alternate of this SolrResponseDto.
        :rtype: List[str]
        """
        return self._adm1_names_alternate

    @adm1_names_alternate.setter
    def adm1_names_alternate(self, adm1_names_alternate):
        """Sets the adm1_names_alternate of this SolrResponseDto.

        The alternate names of the administrative division of level 1 without specific language code

        :param adm1_names_alternate: The adm1_names_alternate of this SolrResponseDto.
        :type adm1_names_alternate: List[str]
        """

        self._adm1_names_alternate = adm1_names_alternate

    @property
    def adm2_code(self):
        """Gets the adm2_code of this SolrResponseDto.

        The internal code for the administrative division of level 2

        :return: The adm2_code of this SolrResponseDto.
        :rtype: str
        """
        return self._adm2_code

    @adm2_code.setter
    def adm2_code(self, adm2_code):
        """Sets the adm2_code of this SolrResponseDto.

        The internal code for the administrative division of level 2

        :param adm2_code: The adm2_code of this SolrResponseDto.
        :type adm2_code: str
        """

        self._adm2_code = adm2_code

    @property
    def adm2_name(self):
        """Gets the adm2_name of this SolrResponseDto.

        The name of the administrative division of level 2

        :return: The adm2_name of this SolrResponseDto.
        :rtype: str
        """
        return self._adm2_name

    @adm2_name.setter
    def adm2_name(self, adm2_name):
        """Sets the adm2_name of this SolrResponseDto.

        The name of the administrative division of level 2

        :param adm2_name: The adm2_name of this SolrResponseDto.
        :type adm2_name: str
        """

        self._adm2_name = adm2_name

    @property
    def adm2_names_alternate(self):
        """Gets the adm2_names_alternate of this SolrResponseDto.

        The alternate names of the administrative division of level 2 without specific language code

        :return: The adm2_names_alternate of this SolrResponseDto.
        :rtype: List[str]
        """
        return self._adm2_names_alternate

    @adm2_names_alternate.setter
    def adm2_names_alternate(self, adm2_names_alternate):
        """Sets the adm2_names_alternate of this SolrResponseDto.

        The alternate names of the administrative division of level 2 without specific language code

        :param adm2_names_alternate: The adm2_names_alternate of this SolrResponseDto.
        :type adm2_names_alternate: List[str]
        """

        self._adm2_names_alternate = adm2_names_alternate

    @property
    def adm3_code(self):
        """Gets the adm3_code of this SolrResponseDto.

        The internal code for the administrative division of level 3

        :return: The adm3_code of this SolrResponseDto.
        :rtype: str
        """
        return self._adm3_code

    @adm3_code.setter
    def adm3_code(self, adm3_code):
        """Sets the adm3_code of this SolrResponseDto.

        The internal code for the administrative division of level 3

        :param adm3_code: The adm3_code of this SolrResponseDto.
        :type adm3_code: str
        """

        self._adm3_code = adm3_code

    @property
    def adm3_name(self):
        """Gets the adm3_name of this SolrResponseDto.

        The name of the administrative division of level 3

        :return: The adm3_name of this SolrResponseDto.
        :rtype: str
        """
        return self._adm3_name

    @adm3_name.setter
    def adm3_name(self, adm3_name):
        """Sets the adm3_name of this SolrResponseDto.

        The name of the administrative division of level 3

        :param adm3_name: The adm3_name of this SolrResponseDto.
        :type adm3_name: str
        """

        self._adm3_name = adm3_name

    @property
    def adm4_code(self):
        """Gets the adm4_code of this SolrResponseDto.

        The internal code for the administrative division of level 4

        :return: The adm4_code of this SolrResponseDto.
        :rtype: str
        """
        return self._adm4_code

    @adm4_code.setter
    def adm4_code(self, adm4_code):
        """Sets the adm4_code of this SolrResponseDto.

        The internal code for the administrative division of level 4

        :param adm4_code: The adm4_code of this SolrResponseDto.
        :type adm4_code: str
        """

        self._adm4_code = adm4_code

    @property
    def adm4_name(self):
        """Gets the adm4_name of this SolrResponseDto.

        The name of the administrative division of level 4

        :return: The adm4_name of this SolrResponseDto.
        :rtype: str
        """
        return self._adm4_name

    @adm4_name.setter
    def adm4_name(self, adm4_name):
        """Sets the adm4_name of this SolrResponseDto.

        The name of the administrative division of level 4

        :param adm4_name: The adm4_name of this SolrResponseDto.
        :type adm4_name: str
        """

        self._adm4_name = adm4_name

    @property
    def amenity(self):
        """Gets the amenity of this SolrResponseDto.

        Informations on category of OpenStreetMap POIs

        :return: The amenity of this SolrResponseDto.
        :rtype: str
        """
        return self._amenity

    @amenity.setter
    def amenity(self, amenity):
        """Sets the amenity of this SolrResponseDto.

        Informations on category of OpenStreetMap POIs

        :param amenity: The amenity of this SolrResponseDto.
        :type amenity: str
        """

        self._amenity = amenity

    @property
    def area(self):
        """Gets the area of this SolrResponseDto.

        Area of the country in m² (only for country placetype)

        :return: The area of this SolrResponseDto.
        :rtype: float
        """
        return self._area

    @area.setter
    def area(self, area):
        """Sets the area of this SolrResponseDto.

        Area of the country in m² (only for country placetype)

        :param area: The area of this SolrResponseDto.
        :type area: float
        """

        self._area = area

    @property
    def capital_name(self):
        """Gets the capital_name of this SolrResponseDto.

        Name of the capital of the country(only for country placetype)

        :return: The capital_name of this SolrResponseDto.
        :rtype: str
        """
        return self._capital_name

    @capital_name.setter
    def capital_name(self, capital_name):
        """Sets the capital_name of this SolrResponseDto.

        Name of the capital of the country(only for country placetype)

        :param capital_name: The capital_name of this SolrResponseDto.
        :type capital_name: str
        """

        self._capital_name = capital_name

    @property
    def continent(self):
        """Gets the continent of this SolrResponseDto.

        The continent the country belongs (only for country placetype)

        :return: The continent of this SolrResponseDto.
        :rtype: str
        """
        return self._continent

    @continent.setter
    def continent(self, continent):
        """Sets the continent of this SolrResponseDto.

        The continent the country belongs (only for country placetype)

        :param continent: The continent of this SolrResponseDto.
        :type continent: str
        """

        self._continent = continent

    @property
    def country_code(self):
        """Gets the country_code of this SolrResponseDto.

        The ISO 3166 country code

        :return: The country_code of this SolrResponseDto.
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """Sets the country_code of this SolrResponseDto.

        The ISO 3166 country code

        :param country_code: The country_code of this SolrResponseDto.
        :type country_code: str
        """

        self._country_code = country_code

    @property
    def country_flag_url(self):
        """Gets the country_flag_url of this SolrResponseDto.

        The relative URL to get the country flag image

        :return: The country_flag_url of this SolrResponseDto.
        :rtype: str
        """
        return self._country_flag_url

    @country_flag_url.setter
    def country_flag_url(self, country_flag_url):
        """Sets the country_flag_url of this SolrResponseDto.

        The relative URL to get the country flag image

        :param country_flag_url: The country_flag_url of this SolrResponseDto.
        :type country_flag_url: str
        """

        self._country_flag_url = country_flag_url

    @property
    def country_name(self):
        """Gets the country_name of this SolrResponseDto.

        The name of the country the features belongs to

        :return: The country_name of this SolrResponseDto.
        :rtype: str
        """
        return self._country_name

    @country_name.setter
    def country_name(self, country_name):
        """Sets the country_name of this SolrResponseDto.

        The name of the country the features belongs to

        :param country_name: The country_name of this SolrResponseDto.
        :type country_name: str
        """

        self._country_name = country_name

    @property
    def country_names_alternate(self):
        """Gets the country_names_alternate of this SolrResponseDto.

        The alternate names of the country without specific language code

        :return: The country_names_alternate of this SolrResponseDto.
        :rtype: List[str]
        """
        return self._country_names_alternate

    @country_names_alternate.setter
    def country_names_alternate(self, country_names_alternate):
        """Sets the country_names_alternate of this SolrResponseDto.

        The alternate names of the country without specific language code

        :param country_names_alternate: The country_names_alternate of this SolrResponseDto.
        :type country_names_alternate: List[str]
        """

        self._country_names_alternate = country_names_alternate

    @property
    def currency_code(self):
        """Gets the currency_code of this SolrResponseDto.

        The ISO 4217 Currency from the curencycode (only for country placetype)

        :return: The currency_code of this SolrResponseDto.
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """Sets the currency_code of this SolrResponseDto.

        The ISO 4217 Currency from the curencycode (only for country placetype)

        :param currency_code: The currency_code of this SolrResponseDto.
        :type currency_code: str
        """

        self._currency_code = currency_code

    @property
    def currency_name(self):
        """Gets the currency_name of this SolrResponseDto.

        The name of the currency of the country (only for country placetype)

        :return: The currency_name of this SolrResponseDto.
        :rtype: str
        """
        return self._currency_name

    @currency_name.setter
    def currency_name(self, currency_name):
        """Sets the currency_name of this SolrResponseDto.

        The name of the currency of the country (only for country placetype)

        :param currency_name: The currency_name of this SolrResponseDto.
        :type currency_name: str
        """

        self._currency_name = currency_name

    @property
    def elevation(self):
        """Gets the elevation of this SolrResponseDto.

        Elevation in meters

        :return: The elevation of this SolrResponseDto.
        :rtype: int
        """
        return self._elevation

    @elevation.setter
    def elevation(self, elevation):
        """Sets the elevation of this SolrResponseDto.

        Elevation in meters

        :param elevation: The elevation of this SolrResponseDto.
        :type elevation: int
        """

        self._elevation = elevation

    @property
    def feature_class(self):
        """Gets the feature_class of this SolrResponseDto.

        The feature Class.

        :return: The feature_class of this SolrResponseDto.
        :rtype: str
        """
        return self._feature_class

    @feature_class.setter
    def feature_class(self, feature_class):
        """Sets the feature_class of this SolrResponseDto.

        The feature Class.

        :param feature_class: The feature_class of this SolrResponseDto.
        :type feature_class: str
        """

        self._feature_class = feature_class

    @property
    def feature_code(self):
        """Gets the feature_code of this SolrResponseDto.

        The feature Code.

        :return: The feature_code of this SolrResponseDto.
        :rtype: str
        """
        return self._feature_code

    @feature_code.setter
    def feature_code(self, feature_code):
        """Sets the feature_code of this SolrResponseDto.

        The feature Code.

        :param feature_code: The feature_code of this SolrResponseDto.
        :type feature_code: str
        """

        self._feature_code = feature_code

    @property
    def feature_id(self):
        """Gets the feature_id of this SolrResponseDto.

        A unique id that identify the feature

        :return: The feature_id of this SolrResponseDto.
        :rtype: int
        """
        return self._feature_id

    @feature_id.setter
    def feature_id(self, feature_id):
        """Sets the feature_id of this SolrResponseDto.

        A unique id that identify the feature

        :param feature_id: The feature_id of this SolrResponseDto.
        :type feature_id: int
        """

        self._feature_id = feature_id

    @property
    def fips_code(self):
        """Gets the fips_code of this SolrResponseDto.

        The FIPS Code of the country (only for country placetype)

        :return: The fips_code of this SolrResponseDto.
        :rtype: str
        """
        return self._fips_code

    @fips_code.setter
    def fips_code(self, fips_code):
        """Sets the fips_code of this SolrResponseDto.

        The FIPS Code of the country (only for country placetype)

        :param fips_code: The fips_code of this SolrResponseDto.
        :type fips_code: str
        """

        self._fips_code = fips_code

    @property
    def fully_qualified_address(self):
        """Gets the fully_qualified_address of this SolrResponseDto.

        NOT USED YET

        :return: The fully_qualified_address of this SolrResponseDto.
        :rtype: str
        """
        return self._fully_qualified_address

    @fully_qualified_address.setter
    def fully_qualified_address(self, fully_qualified_address):
        """Sets the fully_qualified_address of this SolrResponseDto.

        NOT USED YET

        :param fully_qualified_address: The fully_qualified_address of this SolrResponseDto.
        :type fully_qualified_address: str
        """

        self._fully_qualified_address = fully_qualified_address

    @property
    def fully_qualified_name(self):
        """Gets the fully_qualified_name of this SolrResponseDto.

        A name of the form : (adm1Name et adm2Name are printed) Paris, Département de Ville-De-Paris, Ile-De-France, (FR)

        :return: The fully_qualified_name of this SolrResponseDto.
        :rtype: str
        """
        return self._fully_qualified_name

    @fully_qualified_name.setter
    def fully_qualified_name(self, fully_qualified_name):
        """Sets the fully_qualified_name of this SolrResponseDto.

        A name of the form : (adm1Name et adm2Name are printed) Paris, Département de Ville-De-Paris, Ile-De-France, (FR)

        :param fully_qualified_name: The fully_qualified_name of this SolrResponseDto.
        :type fully_qualified_name: str
        """

        self._fully_qualified_name = fully_qualified_name

    @property
    def google_map_url(self):
        """Gets the google_map_url of this SolrResponseDto.

        The URL to get the location on Google Map

        :return: The google_map_url of this SolrResponseDto.
        :rtype: str
        """
        return self._google_map_url

    @google_map_url.setter
    def google_map_url(self, google_map_url):
        """Sets the google_map_url of this SolrResponseDto.

        The URL to get the location on Google Map

        :param google_map_url: The google_map_url of this SolrResponseDto.
        :type google_map_url: str
        """

        self._google_map_url = google_map_url

    @property
    def gtopo30(self):
        """Gets the gtopo30 of this SolrResponseDto.

        Average elevation of 30'x30' (ca 900mx900m) area in meters

        :return: The gtopo30 of this SolrResponseDto.
        :rtype: int
        """
        return self._gtopo30

    @gtopo30.setter
    def gtopo30(self, gtopo30):
        """Sets the gtopo30 of this SolrResponseDto.

        Average elevation of 30'x30' (ca 900mx900m) area in meters

        :param gtopo30: The gtopo30 of this SolrResponseDto.
        :type gtopo30: int
        """

        self._gtopo30 = gtopo30

    @property
    def house_numbers(self):
        """Gets the house_numbers of this SolrResponseDto.

        a list of all the house numbers sorted and their coordinates (only for placetype street)

        :return: The house_numbers of this SolrResponseDto.
        :rtype: List[HouseNumberDto]
        """
        return self._house_numbers

    @house_numbers.setter
    def house_numbers(self, house_numbers):
        """Sets the house_numbers of this SolrResponseDto.

        a list of all the house numbers sorted and their coordinates (only for placetype street)

        :param house_numbers: The house_numbers of this SolrResponseDto.
        :type house_numbers: List[HouseNumberDto]
        """

        self._house_numbers = house_numbers

    @property
    def is_in(self):
        """Gets the is_in of this SolrResponseDto.

        Information on the city where the street / POI is (depends on OpenStreetMap 'is_in' field), the city in general (only for placetype street)

        :return: The is_in of this SolrResponseDto.
        :rtype: str
        """
        return self._is_in

    @is_in.setter
    def is_in(self, is_in):
        """Sets the is_in of this SolrResponseDto.

        Information on the city where the street / POI is (depends on OpenStreetMap 'is_in' field), the city in general (only for placetype street)

        :param is_in: The is_in of this SolrResponseDto.
        :type is_in: str
        """

        self._is_in = is_in

    @property
    def is_in_adm(self):
        """Gets the is_in_adm of this SolrResponseDto.

        Information of the administration division where the street / POI is.

        :return: The is_in_adm of this SolrResponseDto.
        :rtype: str
        """
        return self._is_in_adm

    @is_in_adm.setter
    def is_in_adm(self, is_in_adm):
        """Sets the is_in_adm of this SolrResponseDto.

        Information of the administration division where the street / POI is.

        :param is_in_adm: The is_in_adm of this SolrResponseDto.
        :type is_in_adm: str
        """

        self._is_in_adm = is_in_adm

    @property
    def is_in_place(self):
        """Gets the is_in_place of this SolrResponseDto.

        Information on the place where the street / POI is (quater, common place). Generally a place at a lower level than city

        :return: The is_in_place of this SolrResponseDto.
        :rtype: str
        """
        return self._is_in_place

    @is_in_place.setter
    def is_in_place(self, is_in_place):
        """Sets the is_in_place of this SolrResponseDto.

        Information on the place where the street / POI is (quater, common place). Generally a place at a lower level than city

        :param is_in_place: The is_in_place of this SolrResponseDto.
        :type is_in_place: str
        """

        self._is_in_place = is_in_place

    @property
    def is_in_zip(self):
        """Gets the is_in_zip of this SolrResponseDto.

        Information of the zipcode where the street / POI is (often fill for placetype street)

        :return: The is_in_zip of this SolrResponseDto.
        :rtype: List[str]
        """
        return self._is_in_zip

    @is_in_zip.setter
    def is_in_zip(self, is_in_zip):
        """Sets the is_in_zip of this SolrResponseDto.

        Information of the zipcode where the street / POI is (often fill for placetype street)

        :param is_in_zip: The is_in_zip of this SolrResponseDto.
        :type is_in_zip: List[str]
        """

        self._is_in_zip = is_in_zip

    @property
    def isoalpha2_country_code(self):
        """Gets the isoalpha2_country_code of this SolrResponseDto.

        The ISO 3166 alpha 2 code of the country (only for country placetype)

        :return: The isoalpha2_country_code of this SolrResponseDto.
        :rtype: str
        """
        return self._isoalpha2_country_code

    @isoalpha2_country_code.setter
    def isoalpha2_country_code(self, isoalpha2_country_code):
        """Sets the isoalpha2_country_code of this SolrResponseDto.

        The ISO 3166 alpha 2 code of the country (only for country placetype)

        :param isoalpha2_country_code: The isoalpha2_country_code of this SolrResponseDto.
        :type isoalpha2_country_code: str
        """

        self._isoalpha2_country_code = isoalpha2_country_code

    @property
    def isoalpha3_country_code(self):
        """Gets the isoalpha3_country_code of this SolrResponseDto.

        The ISO 3166 alpha 3 code of the country (only for country placetype)

        :return: The isoalpha3_country_code of this SolrResponseDto.
        :rtype: str
        """
        return self._isoalpha3_country_code

    @isoalpha3_country_code.setter
    def isoalpha3_country_code(self, isoalpha3_country_code):
        """Sets the isoalpha3_country_code of this SolrResponseDto.

        The ISO 3166 alpha 3 code of the country (only for country placetype)

        :param isoalpha3_country_code: The isoalpha3_country_code of this SolrResponseDto.
        :type isoalpha3_country_code: str
        """

        self._isoalpha3_country_code = isoalpha3_country_code

    @property
    def lat(self):
        """Gets the lat of this SolrResponseDto.

        The latitude (north-south)

        :return: The lat of this SolrResponseDto.
        :rtype: float
        """
        return self._lat

    @lat.setter
    def lat(self, lat):
        """Sets the lat of this SolrResponseDto.

        The latitude (north-south)

        :param lat: The lat of this SolrResponseDto.
        :type lat: float
        """

        self._lat = lat

    @property
    def length(self):
        """Gets the length of this SolrResponseDto.

        The length of the street (only for placetype street)

        :return: The length of this SolrResponseDto.
        :rtype: float
        """
        return self._length

    @length.setter
    def length(self, length):
        """Sets the length of this SolrResponseDto.

        The length of the street (only for placetype street)

        :param length: The length of this SolrResponseDto.
        :type length: float
        """

        self._length = length

    @property
    def level(self):
        """Gets the level of this SolrResponseDto.

        Level of the Adm 1 , 2, 3, or 4(only for Adm placetype)

        :return: The level of this SolrResponseDto.
        :rtype: int
        """
        return self._level

    @level.setter
    def level(self, level):
        """Sets the level of this SolrResponseDto.

        Level of the Adm 1 , 2, 3, or 4(only for Adm placetype)

        :param level: The level of this SolrResponseDto.
        :type level: int
        """

        self._level = level

    @property
    def lng(self):
        """Gets the lng of this SolrResponseDto.

        The longitude (east-West)

        :return: The lng of this SolrResponseDto.
        :rtype: float
        """
        return self._lng

    @lng.setter
    def lng(self, lng):
        """Sets the lng of this SolrResponseDto.

        The longitude (east-West)

        :param lng: The lng of this SolrResponseDto.
        :type lng: float
        """

        self._lng = lng

    @property
    def municipality(self):
        """Gets the municipality of this SolrResponseDto.

        if the place is a municipality. it is usefull for geonames feature that don't have concept of 'city' but a populated place (that can be a quarter)

        :return: The municipality of this SolrResponseDto.
        :rtype: bool
        """
        return self._municipality

    @municipality.setter
    def municipality(self, municipality):
        """Sets the municipality of this SolrResponseDto.

        if the place is a municipality. it is usefull for geonames feature that don't have concept of 'city' but a populated place (that can be a quarter)

        :param municipality: The municipality of this SolrResponseDto.
        :type municipality: bool
        """

        self._municipality = municipality

    @property
    def name(self):
        """Gets the name of this SolrResponseDto.

        The name of the feature

        :return: The name of this SolrResponseDto.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SolrResponseDto.

        The name of the feature

        :param name: The name of this SolrResponseDto.
        :type name: str
        """

        self._name = name

    @property
    def name_alternates(self):
        """Gets the name_alternates of this SolrResponseDto.

        The alternate names of the feature that without specific language code

        :return: The name_alternates of this SolrResponseDto.
        :rtype: List[str]
        """
        return self._name_alternates

    @name_alternates.setter
    def name_alternates(self, name_alternates):
        """Sets the name_alternates of this SolrResponseDto.

        The alternate names of the feature that without specific language code

        :param name_alternates: The name_alternates of this SolrResponseDto.
        :type name_alternates: List[str]
        """

        self._name_alternates = name_alternates

    @property
    def name_ascii(self):
        """Gets the name_ascii of this SolrResponseDto.

        The ASCII name

        :return: The name_ascii of this SolrResponseDto.
        :rtype: str
        """
        return self._name_ascii

    @name_ascii.setter
    def name_ascii(self, name_ascii):
        """Sets the name_ascii of this SolrResponseDto.

        The ASCII name

        :param name_ascii: The name_ascii of this SolrResponseDto.
        :type name_ascii: str
        """

        self._name_ascii = name_ascii

    @property
    def one_way(self):
        """Gets the one_way of this SolrResponseDto.

        whether the street is one way or not (only for placetype street)

        :return: The one_way of this SolrResponseDto.
        :rtype: bool
        """
        return self._one_way

    @one_way.setter
    def one_way(self, one_way):
        """Sets the one_way of this SolrResponseDto.

        whether the street is one way or not (only for placetype street)

        :param one_way: The one_way of this SolrResponseDto.
        :type one_way: bool
        """

        self._one_way = one_way

    @property
    def openstreetmap_id(self):
        """Gets the openstreetmap_id of this SolrResponseDto.

        The OpenStreetMap unique id of the street (only for placetype street)

        :return: The openstreetmap_id of this SolrResponseDto.
        :rtype: int
        """
        return self._openstreetmap_id

    @openstreetmap_id.setter
    def openstreetmap_id(self, openstreetmap_id):
        """Sets the openstreetmap_id of this SolrResponseDto.

        The OpenStreetMap unique id of the street (only for placetype street)

        :param openstreetmap_id: The openstreetmap_id of this SolrResponseDto.
        :type openstreetmap_id: int
        """

        self._openstreetmap_id = openstreetmap_id

    @property
    def openstreetmap_map_url(self):
        """Gets the openstreetmap_map_url of this SolrResponseDto.

        The URL to get the location on OpenStreetMap.org

        :return: The openstreetmap_map_url of this SolrResponseDto.
        :rtype: str
        """
        return self._openstreetmap_map_url

    @openstreetmap_map_url.setter
    def openstreetmap_map_url(self, openstreetmap_map_url):
        """Sets the openstreetmap_map_url of this SolrResponseDto.

        The URL to get the location on OpenStreetMap.org

        :param openstreetmap_map_url: The openstreetmap_map_url of this SolrResponseDto.
        :type openstreetmap_map_url: str
        """

        self._openstreetmap_map_url = openstreetmap_map_url

    @property
    def phone_prefix(self):
        """Gets the phone_prefix of this SolrResponseDto.

        The phone prefix of the country. e.g : +33 .(only for country placetype)

        :return: The phone_prefix of this SolrResponseDto.
        :rtype: str
        """
        return self._phone_prefix

    @phone_prefix.setter
    def phone_prefix(self, phone_prefix):
        """Sets the phone_prefix of this SolrResponseDto.

        The phone prefix of the country. e.g : +33 .(only for country placetype)

        :param phone_prefix: The phone_prefix of this SolrResponseDto.
        :type phone_prefix: str
        """

        self._phone_prefix = phone_prefix

    @property
    def placetype(self):
        """Gets the placetype of this SolrResponseDto.

        The place Type of the Feature

        :return: The placetype of this SolrResponseDto.
        :rtype: str
        """
        return self._placetype

    @placetype.setter
    def placetype(self, placetype):
        """Sets the placetype of this SolrResponseDto.

        The place Type of the Feature

        :param placetype: The placetype of this SolrResponseDto.
        :type placetype: str
        """

        self._placetype = placetype

    @property
    def population(self):
        """Gets the population of this SolrResponseDto.

        How many people live in this feature

        :return: The population of this SolrResponseDto.
        :rtype: int
        """
        return self._population

    @population.setter
    def population(self, population):
        """Sets the population of this SolrResponseDto.

        How many people live in this feature

        :param population: The population of this SolrResponseDto.
        :type population: int
        """

        self._population = population

    @property
    def postal_code_mask(self):
        """Gets the postal_code_mask of this SolrResponseDto.

        The mask that postal codes should verify. e.g : ##### (only for country placetype)

        :return: The postal_code_mask of this SolrResponseDto.
        :rtype: str
        """
        return self._postal_code_mask

    @postal_code_mask.setter
    def postal_code_mask(self, postal_code_mask):
        """Sets the postal_code_mask of this SolrResponseDto.

        The mask that postal codes should verify. e.g : ##### (only for country placetype)

        :param postal_code_mask: The postal_code_mask of this SolrResponseDto.
        :type postal_code_mask: str
        """

        self._postal_code_mask = postal_code_mask

    @property
    def postal_code_regex(self):
        """Gets the postal_code_regex of this SolrResponseDto.

        The regular expression that postal codes should verify (only for country placetype)

        :return: The postal_code_regex of this SolrResponseDto.
        :rtype: str
        """
        return self._postal_code_regex

    @postal_code_regex.setter
    def postal_code_regex(self, postal_code_regex):
        """Sets the postal_code_regex of this SolrResponseDto.

        The regular expression that postal codes should verify (only for country placetype)

        :param postal_code_regex: The postal_code_regex of this SolrResponseDto.
        :type postal_code_regex: str
        """

        self._postal_code_regex = postal_code_regex

    @property
    def score(self):
        """Gets the score of this SolrResponseDto.

        a number that indicates the relevance of the result

        :return: The score of this SolrResponseDto.
        :rtype: float
        """
        return self._score

    @score.setter
    def score(self, score):
        """Sets the score of this SolrResponseDto.

        a number that indicates the relevance of the result

        :param score: The score of this SolrResponseDto.
        :type score: float
        """

        self._score = score

    @property
    def spoken_languages(self):
        """Gets the spoken_languages of this SolrResponseDto.

        List of languages spoken in the country (only for country placetype)

        :return: The spoken_languages of this SolrResponseDto.
        :rtype: List[str]
        """
        return self._spoken_languages

    @spoken_languages.setter
    def spoken_languages(self, spoken_languages):
        """Sets the spoken_languages of this SolrResponseDto.

        List of languages spoken in the country (only for country placetype)

        :param spoken_languages: The spoken_languages of this SolrResponseDto.
        :type spoken_languages: List[str]
        """

        self._spoken_languages = spoken_languages

    @property
    def street_type(self):
        """Gets the street_type of this SolrResponseDto.

        The type of the street (only for placetype street)

        :return: The street_type of this SolrResponseDto.
        :rtype: str
        """
        return self._street_type

    @street_type.setter
    def street_type(self, street_type):
        """Sets the street_type of this SolrResponseDto.

        The type of the street (only for placetype street)

        :param street_type: The street_type of this SolrResponseDto.
        :type street_type: str
        """

        self._street_type = street_type

    @property
    def timezone(self):
        """Gets the timezone of this SolrResponseDto.

        The timezone (e.g :Europe/Paris).

        :return: The timezone of this SolrResponseDto.
        :rtype: str
        """
        return self._timezone

    @timezone.setter
    def timezone(self, timezone):
        """Sets the timezone of this SolrResponseDto.

        The timezone (e.g :Europe/Paris).

        :param timezone: The timezone of this SolrResponseDto.
        :type timezone: str
        """

        self._timezone = timezone

    @property
    def tld(self):
        """Gets the tld of this SolrResponseDto.

        Top level domain of the country (only for country placetype)

        :return: The tld of this SolrResponseDto.
        :rtype: str
        """
        return self._tld

    @tld.setter
    def tld(self, tld):
        """Sets the tld of this SolrResponseDto.

        Top level domain of the country (only for country placetype)

        :param tld: The tld of this SolrResponseDto.
        :type tld: str
        """

        self._tld = tld

    @property
    def yahoo_map_url(self):
        """Gets the yahoo_map_url of this SolrResponseDto.

        The URL to get the location on Yahoo Map

        :return: The yahoo_map_url of this SolrResponseDto.
        :rtype: str
        """
        return self._yahoo_map_url

    @yahoo_map_url.setter
    def yahoo_map_url(self, yahoo_map_url):
        """Sets the yahoo_map_url of this SolrResponseDto.

        The URL to get the location on Yahoo Map

        :param yahoo_map_url: The yahoo_map_url of this SolrResponseDto.
        :type yahoo_map_url: str
        """

        self._yahoo_map_url = yahoo_map_url

    @property
    def zipcodes(self):
        """Gets the zipcodes of this SolrResponseDto.

        The zipcodes

        :return: The zipcodes of this SolrResponseDto.
        :rtype: List[str]
        """
        return self._zipcodes

    @zipcodes.setter
    def zipcodes(self, zipcodes):
        """Sets the zipcodes of this SolrResponseDto.

        The zipcodes

        :param zipcodes: The zipcodes of this SolrResponseDto.
        :type zipcodes: List[str]
        """

        self._zipcodes = zipcodes
