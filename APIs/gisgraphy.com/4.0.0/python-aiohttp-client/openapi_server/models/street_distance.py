# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class StreetDistance(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, country_code: str=None, distance: float=None, fully_qualified_address: str=None, gid: int=None, is_in: str=None, is_in_adm: str=None, is_in_place: str=None, is_in_zip: str=None, lat: float=None, length: float=None, lng: float=None, name: str=None, one_way: bool=None, openstreetmap_id: int=None, street_type: str=None):
        """StreetDistance - a model defined in OpenAPI

        :param country_code: The country_code of this StreetDistance.
        :param distance: The distance of this StreetDistance.
        :param fully_qualified_address: The fully_qualified_address of this StreetDistance.
        :param gid: The gid of this StreetDistance.
        :param is_in: The is_in of this StreetDistance.
        :param is_in_adm: The is_in_adm of this StreetDistance.
        :param is_in_place: The is_in_place of this StreetDistance.
        :param is_in_zip: The is_in_zip of this StreetDistance.
        :param lat: The lat of this StreetDistance.
        :param length: The length of this StreetDistance.
        :param lng: The lng of this StreetDistance.
        :param name: The name of this StreetDistance.
        :param one_way: The one_way of this StreetDistance.
        :param openstreetmap_id: The openstreetmap_id of this StreetDistance.
        :param street_type: The street_type of this StreetDistance.
        """
        self.openapi_types = {
            'country_code': str,
            'distance': float,
            'fully_qualified_address': str,
            'gid': int,
            'is_in': str,
            'is_in_adm': str,
            'is_in_place': str,
            'is_in_zip': str,
            'lat': float,
            'length': float,
            'lng': float,
            'name': str,
            'one_way': bool,
            'openstreetmap_id': int,
            'street_type': str
        }

        self.attribute_map = {
            'country_code': 'countryCode',
            'distance': 'distance',
            'fully_qualified_address': 'fullyQualifiedAddress',
            'gid': 'gid',
            'is_in': 'isIn',
            'is_in_adm': 'isInAdm',
            'is_in_place': 'isInPlace',
            'is_in_zip': 'isInZip',
            'lat': 'lat',
            'length': 'length',
            'lng': 'lng',
            'name': 'name',
            'one_way': 'oneWay',
            'openstreetmap_id': 'openstreetmapId',
            'street_type': 'streetType'
        }

        self._country_code = country_code
        self._distance = distance
        self._fully_qualified_address = fully_qualified_address
        self._gid = gid
        self._is_in = is_in
        self._is_in_adm = is_in_adm
        self._is_in_place = is_in_place
        self._is_in_zip = is_in_zip
        self._lat = lat
        self._length = length
        self._lng = lng
        self._name = name
        self._one_way = one_way
        self._openstreetmap_id = openstreetmap_id
        self._street_type = street_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StreetDistance':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StreetDistance of this StreetDistance.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def country_code(self):
        """Gets the country_code of this StreetDistance.

        The ISO 3166 country code

        :return: The country_code of this StreetDistance.
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """Sets the country_code of this StreetDistance.

        The ISO 3166 country code

        :param country_code: The country_code of this StreetDistance.
        :type country_code: str
        """

        self._country_code = country_code

    @property
    def distance(self):
        """Gets the distance of this StreetDistance.

        The distance between the point and the nearest point to the street in meters

        :return: The distance of this StreetDistance.
        :rtype: float
        """
        return self._distance

    @distance.setter
    def distance(self, distance):
        """Sets the distance of this StreetDistance.

        The distance between the point and the nearest point to the street in meters

        :param distance: The distance of this StreetDistance.
        :type distance: float
        """

        self._distance = distance

    @property
    def fully_qualified_address(self):
        """Gets the fully_qualified_address of this StreetDistance.

        NOT USED YET

        :return: The fully_qualified_address of this StreetDistance.
        :rtype: str
        """
        return self._fully_qualified_address

    @fully_qualified_address.setter
    def fully_qualified_address(self, fully_qualified_address):
        """Sets the fully_qualified_address of this StreetDistance.

        NOT USED YET

        :param fully_qualified_address: The fully_qualified_address of this StreetDistance.
        :type fully_qualified_address: str
        """

        self._fully_qualified_address = fully_qualified_address

    @property
    def gid(self):
        """Gets the gid of this StreetDistance.

        Unique id of the street, it is unique between GeoNames and OpenStreetMap

        :return: The gid of this StreetDistance.
        :rtype: int
        """
        return self._gid

    @gid.setter
    def gid(self, gid):
        """Sets the gid of this StreetDistance.

        Unique id of the street, it is unique between GeoNames and OpenStreetMap

        :param gid: The gid of this StreetDistance.
        :type gid: int
        """

        self._gid = gid

    @property
    def is_in(self):
        """Gets the is_in of this StreetDistance.

        Information on the city where the street is (depends on OpenStreetMap 'is_in' field), the city in general

        :return: The is_in of this StreetDistance.
        :rtype: str
        """
        return self._is_in

    @is_in.setter
    def is_in(self, is_in):
        """Sets the is_in of this StreetDistance.

        Information on the city where the street is (depends on OpenStreetMap 'is_in' field), the city in general

        :param is_in: The is_in of this StreetDistance.
        :type is_in: str
        """

        self._is_in = is_in

    @property
    def is_in_adm(self):
        """Gets the is_in_adm of this StreetDistance.

        Information of the administration division where the street is.

        :return: The is_in_adm of this StreetDistance.
        :rtype: str
        """
        return self._is_in_adm

    @is_in_adm.setter
    def is_in_adm(self, is_in_adm):
        """Sets the is_in_adm of this StreetDistance.

        Information of the administration division where the street is.

        :param is_in_adm: The is_in_adm of this StreetDistance.
        :type is_in_adm: str
        """

        self._is_in_adm = is_in_adm

    @property
    def is_in_place(self):
        """Gets the is_in_place of this StreetDistance.

        Information on the place where the street is (quater, common place). Generally a place at a lower level than city

        :return: The is_in_place of this StreetDistance.
        :rtype: str
        """
        return self._is_in_place

    @is_in_place.setter
    def is_in_place(self, is_in_place):
        """Sets the is_in_place of this StreetDistance.

        Information on the place where the street is (quater, common place). Generally a place at a lower level than city

        :param is_in_place: The is_in_place of this StreetDistance.
        :type is_in_place: str
        """

        self._is_in_place = is_in_place

    @property
    def is_in_zip(self):
        """Gets the is_in_zip of this StreetDistance.

        Information of the zipcode where the street / POI is (often fill for placetype street)

        :return: The is_in_zip of this StreetDistance.
        :rtype: str
        """
        return self._is_in_zip

    @is_in_zip.setter
    def is_in_zip(self, is_in_zip):
        """Sets the is_in_zip of this StreetDistance.

        Information of the zipcode where the street / POI is (often fill for placetype street)

        :param is_in_zip: The is_in_zip of this StreetDistance.
        :type is_in_zip: str
        """

        self._is_in_zip = is_in_zip

    @property
    def lat(self):
        """Gets the lat of this StreetDistance.

        The latitude of the middle of the street(north-south)

        :return: The lat of this StreetDistance.
        :rtype: float
        """
        return self._lat

    @lat.setter
    def lat(self, lat):
        """Sets the lat of this StreetDistance.

        The latitude of the middle of the street(north-south)

        :param lat: The lat of this StreetDistance.
        :type lat: float
        """

        self._lat = lat

    @property
    def length(self):
        """Gets the length of this StreetDistance.

        length of the street in meters

        :return: The length of this StreetDistance.
        :rtype: float
        """
        return self._length

    @length.setter
    def length(self, length):
        """Sets the length of this StreetDistance.

        length of the street in meters

        :param length: The length of this StreetDistance.
        :type length: float
        """

        self._length = length

    @property
    def lng(self):
        """Gets the lng of this StreetDistance.

        The longitude of the middle of the street(east-west)

        :return: The lng of this StreetDistance.
        :rtype: float
        """
        return self._lng

    @lng.setter
    def lng(self, lng):
        """Sets the lng of this StreetDistance.

        The longitude of the middle of the street(east-west)

        :param lng: The lng of this StreetDistance.
        :type lng: float
        """

        self._lng = lng

    @property
    def name(self):
        """Gets the name of this StreetDistance.

        The name of the street

        :return: The name of this StreetDistance.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this StreetDistance.

        The name of the street

        :param name: The name of this StreetDistance.
        :type name: str
        """

        self._name = name

    @property
    def one_way(self):
        """Gets the one_way of this StreetDistance.

        Whether the street is a one way street or not

        :return: The one_way of this StreetDistance.
        :rtype: bool
        """
        return self._one_way

    @one_way.setter
    def one_way(self, one_way):
        """Sets the one_way of this StreetDistance.

        Whether the street is a one way street or not

        :param one_way: The one_way of this StreetDistance.
        :type one_way: bool
        """

        self._one_way = one_way

    @property
    def openstreetmap_id(self):
        """Gets the openstreetmap_id of this StreetDistance.

        OpenStreetMap unique id of the street

        :return: The openstreetmap_id of this StreetDistance.
        :rtype: int
        """
        return self._openstreetmap_id

    @openstreetmap_id.setter
    def openstreetmap_id(self, openstreetmap_id):
        """Sets the openstreetmap_id of this StreetDistance.

        OpenStreetMap unique id of the street

        :param openstreetmap_id: The openstreetmap_id of this StreetDistance.
        :type openstreetmap_id: int
        """

        self._openstreetmap_id = openstreetmap_id

    @property
    def street_type(self):
        """Gets the street_type of this StreetDistance.

        The type of the street (see street type list)

        :return: The street_type of this StreetDistance.
        :rtype: str
        """
        return self._street_type

    @street_type.setter
    def street_type(self, street_type):
        """Sets the street_type of this StreetDistance.

        The type of the street (see street type list)

        :param street_type: The street_type of this StreetDistance.
        :type street_type: str
        """

        self._street_type = street_type
