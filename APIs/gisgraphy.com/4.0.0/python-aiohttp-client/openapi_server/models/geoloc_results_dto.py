# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.gis_feature_distance import GisFeatureDistance
from openapi_server import util


class GeolocResultsDto(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, q_time: int=None, error: str=None, num_found: int=None, result: List[GisFeatureDistance]=None):
        """GeolocResultsDto - a model defined in OpenAPI

        :param q_time: The q_time of this GeolocResultsDto.
        :param error: The error of this GeolocResultsDto.
        :param num_found: The num_found of this GeolocResultsDto.
        :param result: The result of this GeolocResultsDto.
        """
        self.openapi_types = {
            'q_time': int,
            'error': str,
            'num_found': int,
            'result': List[GisFeatureDistance]
        }

        self.attribute_map = {
            'q_time': 'QTime',
            'error': 'error',
            'num_found': 'numFound',
            'result': 'result'
        }

        self._q_time = q_time
        self._error = error
        self._num_found = num_found
        self._result = result

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GeolocResultsDto':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GeolocResultsDto of this GeolocResultsDto.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def q_time(self):
        """Gets the q_time of this GeolocResultsDto.

        The execution time of the query in ms

        :return: The q_time of this GeolocResultsDto.
        :rtype: int
        """
        return self._q_time

    @q_time.setter
    def q_time(self, q_time):
        """Sets the q_time of this GeolocResultsDto.

        The execution time of the query in ms

        :param q_time: The q_time of this GeolocResultsDto.
        :type q_time: int
        """

        self._q_time = q_time

    @property
    def error(self):
        """Gets the error of this GeolocResultsDto.

        A String only present if an error occured (e.g : empty Latitude or longitude)

        :return: The error of this GeolocResultsDto.
        :rtype: str
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this GeolocResultsDto.

        A String only present if an error occured (e.g : empty Latitude or longitude)

        :param error: The error of this GeolocResultsDto.
        :type error: str
        """

        self._error = error

    @property
    def num_found(self):
        """Gets the num_found of this GeolocResultsDto.

        The number of results display with this query (it takes the pagination into account)

        :return: The num_found of this GeolocResultsDto.
        :rtype: int
        """
        return self._num_found

    @num_found.setter
    def num_found(self, num_found):
        """Sets the num_found of this GeolocResultsDto.

        The number of results display with this query (it takes the pagination into account)

        :param num_found: The num_found of this GeolocResultsDto.
        :type num_found: int
        """

        self._num_found = num_found

    @property
    def result(self):
        """Gets the result of this GeolocResultsDto.


        :return: The result of this GeolocResultsDto.
        :rtype: List[GisFeatureDistance]
        """
        return self._result

    @result.setter
    def result(self, result):
        """Sets the result of this GeolocResultsDto.


        :param result: The result of this GeolocResultsDto.
        :type result: List[GisFeatureDistance]
        """

        self._result = result
