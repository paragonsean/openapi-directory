# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GisFeatureDistance(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, adm1_code: str=None, adm1_name: str=None, adm2_code: str=None, adm2_name: str=None, adm3_code: str=None, adm3_name: str=None, adm4_code: str=None, adm4_name: str=None, adm5_code: str=None, adm5_name: str=None, amenity: str=None, area: float=None, ascii_name: str=None, capital_name: str=None, continent: str=None, country_code: str=None, country_flag_url: str=None, currency_code: str=None, currency_name: str=None, distance: float=None, elevation: int=None, equivalent_fips_code: str=None, feature_class: str=None, feature_code: str=None, feature_id: int=None, fips_code: str=None, fully_qualified_address: str=None, google_map_url: str=None, gtopo30: int=None, is_in: str=None, is_in_adm: str=None, is_in_place: str=None, is_in_zip: str=None, iso3166_alpha2_code: str=None, iso3166_alpha3_code: str=None, iso3166_numeric_code: str=None, lat: float=None, length: float=None, level: int=None, lng: float=None, name: str=None, one_way: bool=None, openstreetmap_id: int=None, openstreetmap_map_url: str=None, phone_prefix: str=None, place_type: str=None, population: int=None, postal_code_mask: str=None, postal_code_regex: str=None, street_type: str=None, timezone: str=None, tld: str=None, yahoo_map_url: str=None, zip_codes: List[str]=None):
        """GisFeatureDistance - a model defined in OpenAPI

        :param adm1_code: The adm1_code of this GisFeatureDistance.
        :param adm1_name: The adm1_name of this GisFeatureDistance.
        :param adm2_code: The adm2_code of this GisFeatureDistance.
        :param adm2_name: The adm2_name of this GisFeatureDistance.
        :param adm3_code: The adm3_code of this GisFeatureDistance.
        :param adm3_name: The adm3_name of this GisFeatureDistance.
        :param adm4_code: The adm4_code of this GisFeatureDistance.
        :param adm4_name: The adm4_name of this GisFeatureDistance.
        :param adm5_code: The adm5_code of this GisFeatureDistance.
        :param adm5_name: The adm5_name of this GisFeatureDistance.
        :param amenity: The amenity of this GisFeatureDistance.
        :param area: The area of this GisFeatureDistance.
        :param ascii_name: The ascii_name of this GisFeatureDistance.
        :param capital_name: The capital_name of this GisFeatureDistance.
        :param continent: The continent of this GisFeatureDistance.
        :param country_code: The country_code of this GisFeatureDistance.
        :param country_flag_url: The country_flag_url of this GisFeatureDistance.
        :param currency_code: The currency_code of this GisFeatureDistance.
        :param currency_name: The currency_name of this GisFeatureDistance.
        :param distance: The distance of this GisFeatureDistance.
        :param elevation: The elevation of this GisFeatureDistance.
        :param equivalent_fips_code: The equivalent_fips_code of this GisFeatureDistance.
        :param feature_class: The feature_class of this GisFeatureDistance.
        :param feature_code: The feature_code of this GisFeatureDistance.
        :param feature_id: The feature_id of this GisFeatureDistance.
        :param fips_code: The fips_code of this GisFeatureDistance.
        :param fully_qualified_address: The fully_qualified_address of this GisFeatureDistance.
        :param google_map_url: The google_map_url of this GisFeatureDistance.
        :param gtopo30: The gtopo30 of this GisFeatureDistance.
        :param is_in: The is_in of this GisFeatureDistance.
        :param is_in_adm: The is_in_adm of this GisFeatureDistance.
        :param is_in_place: The is_in_place of this GisFeatureDistance.
        :param is_in_zip: The is_in_zip of this GisFeatureDistance.
        :param iso3166_alpha2_code: The iso3166_alpha2_code of this GisFeatureDistance.
        :param iso3166_alpha3_code: The iso3166_alpha3_code of this GisFeatureDistance.
        :param iso3166_numeric_code: The iso3166_numeric_code of this GisFeatureDistance.
        :param lat: The lat of this GisFeatureDistance.
        :param length: The length of this GisFeatureDistance.
        :param level: The level of this GisFeatureDistance.
        :param lng: The lng of this GisFeatureDistance.
        :param name: The name of this GisFeatureDistance.
        :param one_way: The one_way of this GisFeatureDistance.
        :param openstreetmap_id: The openstreetmap_id of this GisFeatureDistance.
        :param openstreetmap_map_url: The openstreetmap_map_url of this GisFeatureDistance.
        :param phone_prefix: The phone_prefix of this GisFeatureDistance.
        :param place_type: The place_type of this GisFeatureDistance.
        :param population: The population of this GisFeatureDistance.
        :param postal_code_mask: The postal_code_mask of this GisFeatureDistance.
        :param postal_code_regex: The postal_code_regex of this GisFeatureDistance.
        :param street_type: The street_type of this GisFeatureDistance.
        :param timezone: The timezone of this GisFeatureDistance.
        :param tld: The tld of this GisFeatureDistance.
        :param yahoo_map_url: The yahoo_map_url of this GisFeatureDistance.
        :param zip_codes: The zip_codes of this GisFeatureDistance.
        """
        self.openapi_types = {
            'adm1_code': str,
            'adm1_name': str,
            'adm2_code': str,
            'adm2_name': str,
            'adm3_code': str,
            'adm3_name': str,
            'adm4_code': str,
            'adm4_name': str,
            'adm5_code': str,
            'adm5_name': str,
            'amenity': str,
            'area': float,
            'ascii_name': str,
            'capital_name': str,
            'continent': str,
            'country_code': str,
            'country_flag_url': str,
            'currency_code': str,
            'currency_name': str,
            'distance': float,
            'elevation': int,
            'equivalent_fips_code': str,
            'feature_class': str,
            'feature_code': str,
            'feature_id': int,
            'fips_code': str,
            'fully_qualified_address': str,
            'google_map_url': str,
            'gtopo30': int,
            'is_in': str,
            'is_in_adm': str,
            'is_in_place': str,
            'is_in_zip': str,
            'iso3166_alpha2_code': str,
            'iso3166_alpha3_code': str,
            'iso3166_numeric_code': str,
            'lat': float,
            'length': float,
            'level': int,
            'lng': float,
            'name': str,
            'one_way': bool,
            'openstreetmap_id': int,
            'openstreetmap_map_url': str,
            'phone_prefix': str,
            'place_type': str,
            'population': int,
            'postal_code_mask': str,
            'postal_code_regex': str,
            'street_type': str,
            'timezone': str,
            'tld': str,
            'yahoo_map_url': str,
            'zip_codes': List[str]
        }

        self.attribute_map = {
            'adm1_code': 'adm1Code',
            'adm1_name': 'adm1Name',
            'adm2_code': 'adm2Code',
            'adm2_name': 'adm2Name',
            'adm3_code': 'adm3Code',
            'adm3_name': 'adm3Name',
            'adm4_code': 'adm4Code',
            'adm4_name': 'adm4Name',
            'adm5_code': 'adm5Code',
            'adm5_name': 'adm5Name',
            'amenity': 'amenity',
            'area': 'area',
            'ascii_name': 'asciiName',
            'capital_name': 'capitalName',
            'continent': 'continent',
            'country_code': 'countryCode',
            'country_flag_url': 'country_flag_url',
            'currency_code': 'currencyCode',
            'currency_name': 'currencyName',
            'distance': 'distance',
            'elevation': 'elevation',
            'equivalent_fips_code': 'equivalentFipsCode',
            'feature_class': 'featureClass',
            'feature_code': 'featureCode',
            'feature_id': 'featureId',
            'fips_code': 'fipsCode',
            'fully_qualified_address': 'fullyQualifiedAddress',
            'google_map_url': 'google_map_url',
            'gtopo30': 'gtopo30',
            'is_in': 'isIn',
            'is_in_adm': 'isInAdm',
            'is_in_place': 'isInPlace',
            'is_in_zip': 'isInZip',
            'iso3166_alpha2_code': 'iso3166Alpha2Code',
            'iso3166_alpha3_code': 'iso3166Alpha3Code',
            'iso3166_numeric_code': 'iso3166NumericCode',
            'lat': 'lat',
            'length': 'length',
            'level': 'level',
            'lng': 'lng',
            'name': 'name',
            'one_way': 'oneWay',
            'openstreetmap_id': 'openstreetmapId',
            'openstreetmap_map_url': 'openstreetmap_map_url',
            'phone_prefix': 'phonePrefix',
            'place_type': 'placeType',
            'population': 'population',
            'postal_code_mask': 'postalCodeMask',
            'postal_code_regex': 'postalCodeRegex',
            'street_type': 'streetType',
            'timezone': 'timezone',
            'tld': 'tld',
            'yahoo_map_url': 'yahoo_map_url',
            'zip_codes': 'zipCodes'
        }

        self._adm1_code = adm1_code
        self._adm1_name = adm1_name
        self._adm2_code = adm2_code
        self._adm2_name = adm2_name
        self._adm3_code = adm3_code
        self._adm3_name = adm3_name
        self._adm4_code = adm4_code
        self._adm4_name = adm4_name
        self._adm5_code = adm5_code
        self._adm5_name = adm5_name
        self._amenity = amenity
        self._area = area
        self._ascii_name = ascii_name
        self._capital_name = capital_name
        self._continent = continent
        self._country_code = country_code
        self._country_flag_url = country_flag_url
        self._currency_code = currency_code
        self._currency_name = currency_name
        self._distance = distance
        self._elevation = elevation
        self._equivalent_fips_code = equivalent_fips_code
        self._feature_class = feature_class
        self._feature_code = feature_code
        self._feature_id = feature_id
        self._fips_code = fips_code
        self._fully_qualified_address = fully_qualified_address
        self._google_map_url = google_map_url
        self._gtopo30 = gtopo30
        self._is_in = is_in
        self._is_in_adm = is_in_adm
        self._is_in_place = is_in_place
        self._is_in_zip = is_in_zip
        self._iso3166_alpha2_code = iso3166_alpha2_code
        self._iso3166_alpha3_code = iso3166_alpha3_code
        self._iso3166_numeric_code = iso3166_numeric_code
        self._lat = lat
        self._length = length
        self._level = level
        self._lng = lng
        self._name = name
        self._one_way = one_way
        self._openstreetmap_id = openstreetmap_id
        self._openstreetmap_map_url = openstreetmap_map_url
        self._phone_prefix = phone_prefix
        self._place_type = place_type
        self._population = population
        self._postal_code_mask = postal_code_mask
        self._postal_code_regex = postal_code_regex
        self._street_type = street_type
        self._timezone = timezone
        self._tld = tld
        self._yahoo_map_url = yahoo_map_url
        self._zip_codes = zip_codes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GisFeatureDistance':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GisFeatureDistance of this GisFeatureDistance.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def adm1_code(self):
        """Gets the adm1_code of this GisFeatureDistance.

        The internal code for the administrative division of level 1

        :return: The adm1_code of this GisFeatureDistance.
        :rtype: str
        """
        return self._adm1_code

    @adm1_code.setter
    def adm1_code(self, adm1_code):
        """Sets the adm1_code of this GisFeatureDistance.

        The internal code for the administrative division of level 1

        :param adm1_code: The adm1_code of this GisFeatureDistance.
        :type adm1_code: str
        """

        self._adm1_code = adm1_code

    @property
    def adm1_name(self):
        """Gets the adm1_name of this GisFeatureDistance.

        The name of the administrative division of level 1

        :return: The adm1_name of this GisFeatureDistance.
        :rtype: str
        """
        return self._adm1_name

    @adm1_name.setter
    def adm1_name(self, adm1_name):
        """Sets the adm1_name of this GisFeatureDistance.

        The name of the administrative division of level 1

        :param adm1_name: The adm1_name of this GisFeatureDistance.
        :type adm1_name: str
        """

        self._adm1_name = adm1_name

    @property
    def adm2_code(self):
        """Gets the adm2_code of this GisFeatureDistance.

        The internal code for the administrative division of level 2

        :return: The adm2_code of this GisFeatureDistance.
        :rtype: str
        """
        return self._adm2_code

    @adm2_code.setter
    def adm2_code(self, adm2_code):
        """Sets the adm2_code of this GisFeatureDistance.

        The internal code for the administrative division of level 2

        :param adm2_code: The adm2_code of this GisFeatureDistance.
        :type adm2_code: str
        """

        self._adm2_code = adm2_code

    @property
    def adm2_name(self):
        """Gets the adm2_name of this GisFeatureDistance.

        The name of the administrative division of level 2

        :return: The adm2_name of this GisFeatureDistance.
        :rtype: str
        """
        return self._adm2_name

    @adm2_name.setter
    def adm2_name(self, adm2_name):
        """Sets the adm2_name of this GisFeatureDistance.

        The name of the administrative division of level 2

        :param adm2_name: The adm2_name of this GisFeatureDistance.
        :type adm2_name: str
        """

        self._adm2_name = adm2_name

    @property
    def adm3_code(self):
        """Gets the adm3_code of this GisFeatureDistance.

        The internal code for the administrative division of level 3

        :return: The adm3_code of this GisFeatureDistance.
        :rtype: str
        """
        return self._adm3_code

    @adm3_code.setter
    def adm3_code(self, adm3_code):
        """Sets the adm3_code of this GisFeatureDistance.

        The internal code for the administrative division of level 3

        :param adm3_code: The adm3_code of this GisFeatureDistance.
        :type adm3_code: str
        """

        self._adm3_code = adm3_code

    @property
    def adm3_name(self):
        """Gets the adm3_name of this GisFeatureDistance.

        The name of the administrative division of level 3

        :return: The adm3_name of this GisFeatureDistance.
        :rtype: str
        """
        return self._adm3_name

    @adm3_name.setter
    def adm3_name(self, adm3_name):
        """Sets the adm3_name of this GisFeatureDistance.

        The name of the administrative division of level 3

        :param adm3_name: The adm3_name of this GisFeatureDistance.
        :type adm3_name: str
        """

        self._adm3_name = adm3_name

    @property
    def adm4_code(self):
        """Gets the adm4_code of this GisFeatureDistance.

        The internal code for the administrative division of level 4

        :return: The adm4_code of this GisFeatureDistance.
        :rtype: str
        """
        return self._adm4_code

    @adm4_code.setter
    def adm4_code(self, adm4_code):
        """Sets the adm4_code of this GisFeatureDistance.

        The internal code for the administrative division of level 4

        :param adm4_code: The adm4_code of this GisFeatureDistance.
        :type adm4_code: str
        """

        self._adm4_code = adm4_code

    @property
    def adm4_name(self):
        """Gets the adm4_name of this GisFeatureDistance.

        The name of the administrative division of level 4

        :return: The adm4_name of this GisFeatureDistance.
        :rtype: str
        """
        return self._adm4_name

    @adm4_name.setter
    def adm4_name(self, adm4_name):
        """Sets the adm4_name of this GisFeatureDistance.

        The name of the administrative division of level 4

        :param adm4_name: The adm4_name of this GisFeatureDistance.
        :type adm4_name: str
        """

        self._adm4_name = adm4_name

    @property
    def adm5_code(self):
        """Gets the adm5_code of this GisFeatureDistance.

        The internal code for the administrative division of level 5

        :return: The adm5_code of this GisFeatureDistance.
        :rtype: str
        """
        return self._adm5_code

    @adm5_code.setter
    def adm5_code(self, adm5_code):
        """Sets the adm5_code of this GisFeatureDistance.

        The internal code for the administrative division of level 5

        :param adm5_code: The adm5_code of this GisFeatureDistance.
        :type adm5_code: str
        """

        self._adm5_code = adm5_code

    @property
    def adm5_name(self):
        """Gets the adm5_name of this GisFeatureDistance.

        The name of the administrative division of level 5

        :return: The adm5_name of this GisFeatureDistance.
        :rtype: str
        """
        return self._adm5_name

    @adm5_name.setter
    def adm5_name(self, adm5_name):
        """Sets the adm5_name of this GisFeatureDistance.

        The name of the administrative division of level 5

        :param adm5_name: The adm5_name of this GisFeatureDistance.
        :type adm5_name: str
        """

        self._adm5_name = adm5_name

    @property
    def amenity(self):
        """Gets the amenity of this GisFeatureDistance.

        Informations on category of OpenStreetMap POIs

        :return: The amenity of this GisFeatureDistance.
        :rtype: str
        """
        return self._amenity

    @amenity.setter
    def amenity(self, amenity):
        """Sets the amenity of this GisFeatureDistance.

        Informations on category of OpenStreetMap POIs

        :param amenity: The amenity of this GisFeatureDistance.
        :type amenity: str
        """

        self._amenity = amenity

    @property
    def area(self):
        """Gets the area of this GisFeatureDistance.

        The area of the feature

        :return: The area of this GisFeatureDistance.
        :rtype: float
        """
        return self._area

    @area.setter
    def area(self, area):
        """Sets the area of this GisFeatureDistance.

        The area of the feature

        :param area: The area of this GisFeatureDistance.
        :type area: float
        """

        self._area = area

    @property
    def ascii_name(self):
        """Gets the ascii_name of this GisFeatureDistance.

        The ASCII name of the feature

        :return: The ascii_name of this GisFeatureDistance.
        :rtype: str
        """
        return self._ascii_name

    @ascii_name.setter
    def ascii_name(self, ascii_name):
        """Sets the ascii_name of this GisFeatureDistance.

        The ASCII name of the feature

        :param ascii_name: The ascii_name of this GisFeatureDistance.
        :type ascii_name: str
        """

        self._ascii_name = ascii_name

    @property
    def capital_name(self):
        """Gets the capital_name of this GisFeatureDistance.

        The Capital of the country

        :return: The capital_name of this GisFeatureDistance.
        :rtype: str
        """
        return self._capital_name

    @capital_name.setter
    def capital_name(self, capital_name):
        """Sets the capital_name of this GisFeatureDistance.

        The Capital of the country

        :param capital_name: The capital_name of this GisFeatureDistance.
        :type capital_name: str
        """

        self._capital_name = capital_name

    @property
    def continent(self):
        """Gets the continent of this GisFeatureDistance.

        The continent the country belongs

        :return: The continent of this GisFeatureDistance.
        :rtype: str
        """
        return self._continent

    @continent.setter
    def continent(self, continent):
        """Sets the continent of this GisFeatureDistance.

        The continent the country belongs

        :param continent: The continent of this GisFeatureDistance.
        :type continent: str
        """

        self._continent = continent

    @property
    def country_code(self):
        """Gets the country_code of this GisFeatureDistance.

        The ISO 3166 country code

        :return: The country_code of this GisFeatureDistance.
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """Sets the country_code of this GisFeatureDistance.

        The ISO 3166 country code

        :param country_code: The country_code of this GisFeatureDistance.
        :type country_code: str
        """

        self._country_code = country_code

    @property
    def country_flag_url(self):
        """Gets the country_flag_url of this GisFeatureDistance.

        The relative URL to get the country flag image

        :return: The country_flag_url of this GisFeatureDistance.
        :rtype: str
        """
        return self._country_flag_url

    @country_flag_url.setter
    def country_flag_url(self, country_flag_url):
        """Sets the country_flag_url of this GisFeatureDistance.

        The relative URL to get the country flag image

        :param country_flag_url: The country_flag_url of this GisFeatureDistance.
        :type country_flag_url: str
        """

        self._country_flag_url = country_flag_url

    @property
    def currency_code(self):
        """Gets the currency_code of this GisFeatureDistance.

        The Currency code (ISO_4217) of the country

        :return: The currency_code of this GisFeatureDistance.
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """Sets the currency_code of this GisFeatureDistance.

        The Currency code (ISO_4217) of the country

        :param currency_code: The currency_code of this GisFeatureDistance.
        :type currency_code: str
        """

        self._currency_code = currency_code

    @property
    def currency_name(self):
        """Gets the currency_name of this GisFeatureDistance.

        The Currency name of the country

        :return: The currency_name of this GisFeatureDistance.
        :rtype: str
        """
        return self._currency_name

    @currency_name.setter
    def currency_name(self, currency_name):
        """Sets the currency_name of this GisFeatureDistance.

        The Currency name of the country

        :param currency_name: The currency_name of this GisFeatureDistance.
        :type currency_name: str
        """

        self._currency_name = currency_name

    @property
    def distance(self):
        """Gets the distance of this GisFeatureDistance.

        The distance beetween the point and the gisFeature in meters

        :return: The distance of this GisFeatureDistance.
        :rtype: float
        """
        return self._distance

    @distance.setter
    def distance(self, distance):
        """Sets the distance of this GisFeatureDistance.

        The distance beetween the point and the gisFeature in meters

        :param distance: The distance of this GisFeatureDistance.
        :type distance: float
        """

        self._distance = distance

    @property
    def elevation(self):
        """Gets the elevation of this GisFeatureDistance.

        The elevation in meters

        :return: The elevation of this GisFeatureDistance.
        :rtype: int
        """
        return self._elevation

    @elevation.setter
    def elevation(self, elevation):
        """Sets the elevation of this GisFeatureDistance.

        The elevation in meters

        :param elevation: The elevation of this GisFeatureDistance.
        :type elevation: int
        """

        self._elevation = elevation

    @property
    def equivalent_fips_code(self):
        """Gets the equivalent_fips_code of this GisFeatureDistance.

        The fips Code of the country when no code are available

        :return: The equivalent_fips_code of this GisFeatureDistance.
        :rtype: str
        """
        return self._equivalent_fips_code

    @equivalent_fips_code.setter
    def equivalent_fips_code(self, equivalent_fips_code):
        """Sets the equivalent_fips_code of this GisFeatureDistance.

        The fips Code of the country when no code are available

        :param equivalent_fips_code: The equivalent_fips_code of this GisFeatureDistance.
        :type equivalent_fips_code: str
        """

        self._equivalent_fips_code = equivalent_fips_code

    @property
    def feature_class(self):
        """Gets the feature_class of this GisFeatureDistance.

        The feature Class.

        :return: The feature_class of this GisFeatureDistance.
        :rtype: str
        """
        return self._feature_class

    @feature_class.setter
    def feature_class(self, feature_class):
        """Sets the feature_class of this GisFeatureDistance.

        The feature Class.

        :param feature_class: The feature_class of this GisFeatureDistance.
        :type feature_class: str
        """

        self._feature_class = feature_class

    @property
    def feature_code(self):
        """Gets the feature_code of this GisFeatureDistance.

        The feature Code.

        :return: The feature_code of this GisFeatureDistance.
        :rtype: str
        """
        return self._feature_code

    @feature_code.setter
    def feature_code(self, feature_code):
        """Sets the feature_code of this GisFeatureDistance.

        The feature Code.

        :param feature_code: The feature_code of this GisFeatureDistance.
        :type feature_code: str
        """

        self._feature_code = feature_code

    @property
    def feature_id(self):
        """Gets the feature_id of this GisFeatureDistance.

        A unique id that identify the feature

        :return: The feature_id of this GisFeatureDistance.
        :rtype: int
        """
        return self._feature_id

    @feature_id.setter
    def feature_id(self, feature_id):
        """Sets the feature_id of this GisFeatureDistance.

        A unique id that identify the feature

        :param feature_id: The feature_id of this GisFeatureDistance.
        :type feature_id: int
        """

        self._feature_id = feature_id

    @property
    def fips_code(self):
        """Gets the fips_code of this GisFeatureDistance.

        The fips Code of the country

        :return: The fips_code of this GisFeatureDistance.
        :rtype: str
        """
        return self._fips_code

    @fips_code.setter
    def fips_code(self, fips_code):
        """Sets the fips_code of this GisFeatureDistance.

        The fips Code of the country

        :param fips_code: The fips_code of this GisFeatureDistance.
        :type fips_code: str
        """

        self._fips_code = fips_code

    @property
    def fully_qualified_address(self):
        """Gets the fully_qualified_address of this GisFeatureDistance.

        NOT USED YET

        :return: The fully_qualified_address of this GisFeatureDistance.
        :rtype: str
        """
        return self._fully_qualified_address

    @fully_qualified_address.setter
    def fully_qualified_address(self, fully_qualified_address):
        """Sets the fully_qualified_address of this GisFeatureDistance.

        NOT USED YET

        :param fully_qualified_address: The fully_qualified_address of this GisFeatureDistance.
        :type fully_qualified_address: str
        """

        self._fully_qualified_address = fully_qualified_address

    @property
    def google_map_url(self):
        """Gets the google_map_url of this GisFeatureDistance.

        The URL to get the location on Google Map

        :return: The google_map_url of this GisFeatureDistance.
        :rtype: str
        """
        return self._google_map_url

    @google_map_url.setter
    def google_map_url(self, google_map_url):
        """Sets the google_map_url of this GisFeatureDistance.

        The URL to get the location on Google Map

        :param google_map_url: The google_map_url of this GisFeatureDistance.
        :type google_map_url: str
        """

        self._google_map_url = google_map_url

    @property
    def gtopo30(self):
        """Gets the gtopo30 of this GisFeatureDistance.

        Average elevation of 30'x30' (ca 900mx900m) area in meters

        :return: The gtopo30 of this GisFeatureDistance.
        :rtype: int
        """
        return self._gtopo30

    @gtopo30.setter
    def gtopo30(self, gtopo30):
        """Sets the gtopo30 of this GisFeatureDistance.

        Average elevation of 30'x30' (ca 900mx900m) area in meters

        :param gtopo30: The gtopo30 of this GisFeatureDistance.
        :type gtopo30: int
        """

        self._gtopo30 = gtopo30

    @property
    def is_in(self):
        """Gets the is_in of this GisFeatureDistance.

        Information of the city where the street / POI is (depends on openstreetmap 'is_in' field), the city in general (only for placetype street)

        :return: The is_in of this GisFeatureDistance.
        :rtype: str
        """
        return self._is_in

    @is_in.setter
    def is_in(self, is_in):
        """Sets the is_in of this GisFeatureDistance.

        Information of the city where the street / POI is (depends on openstreetmap 'is_in' field), the city in general (only for placetype street)

        :param is_in: The is_in of this GisFeatureDistance.
        :type is_in: str
        """

        self._is_in = is_in

    @property
    def is_in_adm(self):
        """Gets the is_in_adm of this GisFeatureDistance.

        Information of the administration division where the street / POI is. 

        :return: The is_in_adm of this GisFeatureDistance.
        :rtype: str
        """
        return self._is_in_adm

    @is_in_adm.setter
    def is_in_adm(self, is_in_adm):
        """Sets the is_in_adm of this GisFeatureDistance.

        Information of the administration division where the street / POI is. 

        :param is_in_adm: The is_in_adm of this GisFeatureDistance.
        :type is_in_adm: str
        """

        self._is_in_adm = is_in_adm

    @property
    def is_in_place(self):
        """Gets the is_in_place of this GisFeatureDistance.

        Information of the place where the street / POI is (quarter, common place). Generally a place at a lower level than city

        :return: The is_in_place of this GisFeatureDistance.
        :rtype: str
        """
        return self._is_in_place

    @is_in_place.setter
    def is_in_place(self, is_in_place):
        """Sets the is_in_place of this GisFeatureDistance.

        Information of the place where the street / POI is (quarter, common place). Generally a place at a lower level than city

        :param is_in_place: The is_in_place of this GisFeatureDistance.
        :type is_in_place: str
        """

        self._is_in_place = is_in_place

    @property
    def is_in_zip(self):
        """Gets the is_in_zip of this GisFeatureDistance.

        Information of the zipcode where the street / POI is\"

        :return: The is_in_zip of this GisFeatureDistance.
        :rtype: str
        """
        return self._is_in_zip

    @is_in_zip.setter
    def is_in_zip(self, is_in_zip):
        """Sets the is_in_zip of this GisFeatureDistance.

        Information of the zipcode where the street / POI is\"

        :param is_in_zip: The is_in_zip of this GisFeatureDistance.
        :type is_in_zip: str
        """

        self._is_in_zip = is_in_zip

    @property
    def iso3166_alpha2_code(self):
        """Gets the iso3166_alpha2_code of this GisFeatureDistance.

        The iso 3166 Alpha 2 code of the country

        :return: The iso3166_alpha2_code of this GisFeatureDistance.
        :rtype: str
        """
        return self._iso3166_alpha2_code

    @iso3166_alpha2_code.setter
    def iso3166_alpha2_code(self, iso3166_alpha2_code):
        """Sets the iso3166_alpha2_code of this GisFeatureDistance.

        The iso 3166 Alpha 2 code of the country

        :param iso3166_alpha2_code: The iso3166_alpha2_code of this GisFeatureDistance.
        :type iso3166_alpha2_code: str
        """

        self._iso3166_alpha2_code = iso3166_alpha2_code

    @property
    def iso3166_alpha3_code(self):
        """Gets the iso3166_alpha3_code of this GisFeatureDistance.

        The iso 3166 Alpha 3 code of the country

        :return: The iso3166_alpha3_code of this GisFeatureDistance.
        :rtype: str
        """
        return self._iso3166_alpha3_code

    @iso3166_alpha3_code.setter
    def iso3166_alpha3_code(self, iso3166_alpha3_code):
        """Sets the iso3166_alpha3_code of this GisFeatureDistance.

        The iso 3166 Alpha 3 code of the country

        :param iso3166_alpha3_code: The iso3166_alpha3_code of this GisFeatureDistance.
        :type iso3166_alpha3_code: str
        """

        self._iso3166_alpha3_code = iso3166_alpha3_code

    @property
    def iso3166_numeric_code(self):
        """Gets the iso3166_numeric_code of this GisFeatureDistance.

        The iso 3166 numeric code of the country

        :return: The iso3166_numeric_code of this GisFeatureDistance.
        :rtype: str
        """
        return self._iso3166_numeric_code

    @iso3166_numeric_code.setter
    def iso3166_numeric_code(self, iso3166_numeric_code):
        """Sets the iso3166_numeric_code of this GisFeatureDistance.

        The iso 3166 numeric code of the country

        :param iso3166_numeric_code: The iso3166_numeric_code of this GisFeatureDistance.
        :type iso3166_numeric_code: str
        """

        self._iso3166_numeric_code = iso3166_numeric_code

    @property
    def lat(self):
        """Gets the lat of this GisFeatureDistance.

        The latitude (north-south)

        :return: The lat of this GisFeatureDistance.
        :rtype: float
        """
        return self._lat

    @lat.setter
    def lat(self, lat):
        """Sets the lat of this GisFeatureDistance.

        The latitude (north-south)

        :param lat: The lat of this GisFeatureDistance.
        :type lat: float
        """

        self._lat = lat

    @property
    def length(self):
        """Gets the length of this GisFeatureDistance.

        length of the street

        :return: The length of this GisFeatureDistance.
        :rtype: float
        """
        return self._length

    @length.setter
    def length(self, length):
        """Sets the length of this GisFeatureDistance.

        length of the street

        :param length: The length of this GisFeatureDistance.
        :type length: float
        """

        self._length = length

    @property
    def level(self):
        """Gets the level of this GisFeatureDistance.

        The level of the Administrative division (1-5)

        :return: The level of this GisFeatureDistance.
        :rtype: int
        """
        return self._level

    @level.setter
    def level(self, level):
        """Sets the level of this GisFeatureDistance.

        The level of the Administrative division (1-5)

        :param level: The level of this GisFeatureDistance.
        :type level: int
        """

        self._level = level

    @property
    def lng(self):
        """Gets the lng of this GisFeatureDistance.

        The longitude (east-West)

        :return: The lng of this GisFeatureDistance.
        :rtype: float
        """
        return self._lng

    @lng.setter
    def lng(self, lng):
        """Sets the lng of this GisFeatureDistance.

        The longitude (east-West)

        :param lng: The lng of this GisFeatureDistance.
        :type lng: float
        """

        self._lng = lng

    @property
    def name(self):
        """Gets the name of this GisFeatureDistance.

        The name of the feature

        :return: The name of this GisFeatureDistance.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GisFeatureDistance.

        The name of the feature

        :param name: The name of this GisFeatureDistance.
        :type name: str
        """

        self._name = name

    @property
    def one_way(self):
        """Gets the one_way of this GisFeatureDistance.

        Wether the street is oneway or not

        :return: The one_way of this GisFeatureDistance.
        :rtype: bool
        """
        return self._one_way

    @one_way.setter
    def one_way(self, one_way):
        """Sets the one_way of this GisFeatureDistance.

        Wether the street is oneway or not

        :param one_way: The one_way of this GisFeatureDistance.
        :type one_way: bool
        """

        self._one_way = one_way

    @property
    def openstreetmap_id(self):
        """Gets the openstreetmap_id of this GisFeatureDistance.

        the id of the openstreetmap element

        :return: The openstreetmap_id of this GisFeatureDistance.
        :rtype: int
        """
        return self._openstreetmap_id

    @openstreetmap_id.setter
    def openstreetmap_id(self, openstreetmap_id):
        """Sets the openstreetmap_id of this GisFeatureDistance.

        the id of the openstreetmap element

        :param openstreetmap_id: The openstreetmap_id of this GisFeatureDistance.
        :type openstreetmap_id: int
        """

        self._openstreetmap_id = openstreetmap_id

    @property
    def openstreetmap_map_url(self):
        """Gets the openstreetmap_map_url of this GisFeatureDistance.

        The URL to get the location on Openstreetmap Map

        :return: The openstreetmap_map_url of this GisFeatureDistance.
        :rtype: str
        """
        return self._openstreetmap_map_url

    @openstreetmap_map_url.setter
    def openstreetmap_map_url(self, openstreetmap_map_url):
        """Sets the openstreetmap_map_url of this GisFeatureDistance.

        The URL to get the location on Openstreetmap Map

        :param openstreetmap_map_url: The openstreetmap_map_url of this GisFeatureDistance.
        :type openstreetmap_map_url: str
        """

        self._openstreetmap_map_url = openstreetmap_map_url

    @property
    def phone_prefix(self):
        """Gets the phone_prefix of this GisFeatureDistance.

        The phone prefix of the country

        :return: The phone_prefix of this GisFeatureDistance.
        :rtype: str
        """
        return self._phone_prefix

    @phone_prefix.setter
    def phone_prefix(self, phone_prefix):
        """Sets the phone_prefix of this GisFeatureDistance.

        The phone prefix of the country

        :param phone_prefix: The phone_prefix of this GisFeatureDistance.
        :type phone_prefix: str
        """

        self._phone_prefix = phone_prefix

    @property
    def place_type(self):
        """Gets the place_type of this GisFeatureDistance.

        The Type of Feature see faq

        :return: The place_type of this GisFeatureDistance.
        :rtype: str
        """
        return self._place_type

    @place_type.setter
    def place_type(self, place_type):
        """Sets the place_type of this GisFeatureDistance.

        The Type of Feature see faq

        :param place_type: The place_type of this GisFeatureDistance.
        :type place_type: str
        """

        self._place_type = place_type

    @property
    def population(self):
        """Gets the population of this GisFeatureDistance.

        How many people lives in this feature

        :return: The population of this GisFeatureDistance.
        :rtype: int
        """
        return self._population

    @population.setter
    def population(self, population):
        """Sets the population of this GisFeatureDistance.

        How many people lives in this feature

        :param population: The population of this GisFeatureDistance.
        :type population: int
        """

        self._population = population

    @property
    def postal_code_mask(self):
        """Gets the postal_code_mask of this GisFeatureDistance.

        The mask that all postal code of the country matches

        :return: The postal_code_mask of this GisFeatureDistance.
        :rtype: str
        """
        return self._postal_code_mask

    @postal_code_mask.setter
    def postal_code_mask(self, postal_code_mask):
        """Sets the postal_code_mask of this GisFeatureDistance.

        The mask that all postal code of the country matches

        :param postal_code_mask: The postal_code_mask of this GisFeatureDistance.
        :type postal_code_mask: str
        """

        self._postal_code_mask = postal_code_mask

    @property
    def postal_code_regex(self):
        """Gets the postal_code_regex of this GisFeatureDistance.

        The regexp that all zipcode/postalcode of the country matches

        :return: The postal_code_regex of this GisFeatureDistance.
        :rtype: str
        """
        return self._postal_code_regex

    @postal_code_regex.setter
    def postal_code_regex(self, postal_code_regex):
        """Sets the postal_code_regex of this GisFeatureDistance.

        The regexp that all zipcode/postalcode of the country matches

        :param postal_code_regex: The postal_code_regex of this GisFeatureDistance.
        :type postal_code_regex: str
        """

        self._postal_code_regex = postal_code_regex

    @property
    def street_type(self):
        """Gets the street_type of this GisFeatureDistance.

        the type of the street

        :return: The street_type of this GisFeatureDistance.
        :rtype: str
        """
        return self._street_type

    @street_type.setter
    def street_type(self, street_type):
        """Sets the street_type of this GisFeatureDistance.

        the type of the street

        :param street_type: The street_type of this GisFeatureDistance.
        :type street_type: str
        """

        self._street_type = street_type

    @property
    def timezone(self):
        """Gets the timezone of this GisFeatureDistance.

        The time zone (e.g : Europe/Paris)

        :return: The timezone of this GisFeatureDistance.
        :rtype: str
        """
        return self._timezone

    @timezone.setter
    def timezone(self, timezone):
        """Sets the timezone of this GisFeatureDistance.

        The time zone (e.g : Europe/Paris)

        :param timezone: The timezone of this GisFeatureDistance.
        :type timezone: str
        """

        self._timezone = timezone

    @property
    def tld(self):
        """Gets the tld of this GisFeatureDistance.

        top-level domain name, (last part of an Internet domain name) of the country

        :return: The tld of this GisFeatureDistance.
        :rtype: str
        """
        return self._tld

    @tld.setter
    def tld(self, tld):
        """Sets the tld of this GisFeatureDistance.

        top-level domain name, (last part of an Internet domain name) of the country

        :param tld: The tld of this GisFeatureDistance.
        :type tld: str
        """

        self._tld = tld

    @property
    def yahoo_map_url(self):
        """Gets the yahoo_map_url of this GisFeatureDistance.

        The URL to get the location on Yahoo Map

        :return: The yahoo_map_url of this GisFeatureDistance.
        :rtype: str
        """
        return self._yahoo_map_url

    @yahoo_map_url.setter
    def yahoo_map_url(self, yahoo_map_url):
        """Sets the yahoo_map_url of this GisFeatureDistance.

        The URL to get the location on Yahoo Map

        :param yahoo_map_url: The yahoo_map_url of this GisFeatureDistance.
        :type yahoo_map_url: str
        """

        self._yahoo_map_url = yahoo_map_url

    @property
    def zip_codes(self):
        """Gets the zip_codes of this GisFeatureDistance.

        The zipcodes (only for city and city subdivision), one node by zipcode

        :return: The zip_codes of this GisFeatureDistance.
        :rtype: List[str]
        """
        return self._zip_codes

    @zip_codes.setter
    def zip_codes(self, zip_codes):
        """Sets the zip_codes of this GisFeatureDistance.

        The zipcodes (only for city and city subdivision), one node by zipcode

        :param zip_codes: The zip_codes of this GisFeatureDistance.
        :type zip_codes: List[str]
        """

        self._zip_codes = zip_codes
