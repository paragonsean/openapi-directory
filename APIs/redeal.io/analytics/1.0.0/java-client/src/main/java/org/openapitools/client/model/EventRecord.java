/*
 * Redeal Analytics API
 * Access analytics for Redeal
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: hello@redeal.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * EventRecord
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:59:34.338987-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class EventRecord {
  public static final String SERIALIZED_NAME_AGENT = "agent";
  @SerializedName(SERIALIZED_NAME_AGENT)
  private String agent;

  public static final String SERIALIZED_NAME_BROWSERTYPE = "browsertype";
  @SerializedName(SERIALIZED_NAME_BROWSERTYPE)
  private String browsertype;

  public static final String SERIALIZED_NAME_CHANNEL = "channel";
  @SerializedName(SERIALIZED_NAME_CHANNEL)
  private String channel;

  public static final String SERIALIZED_NAME_CLICK = "click";
  @SerializedName(SERIALIZED_NAME_CLICK)
  private String click;

  public static final String SERIALIZED_NAME_CLICKS = "clicks";
  @SerializedName(SERIALIZED_NAME_CLICKS)
  private Integer clicks;

  public static final String SERIALIZED_NAME_CODE = "code";
  @SerializedName(SERIALIZED_NAME_CODE)
  private String code;

  public static final String SERIALIZED_NAME_COMPANY = "company";
  @SerializedName(SERIALIZED_NAME_COMPANY)
  private String company;

  public static final String SERIALIZED_NAME_CONTACT = "contact";
  @SerializedName(SERIALIZED_NAME_CONTACT)
  private String contact;

  public static final String SERIALIZED_NAME_COST = "cost";
  @SerializedName(SERIALIZED_NAME_COST)
  private BigDecimal cost;

  public static final String SERIALIZED_NAME_COSTCURRENCY = "costcurrency";
  @SerializedName(SERIALIZED_NAME_COSTCURRENCY)
  private String costcurrency;

  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  private String currency;

  public static final String SERIALIZED_NAME_DEAL = "deal";
  @SerializedName(SERIALIZED_NAME_DEAL)
  private String deal;

  public static final String SERIALIZED_NAME_DEAL_NAME = "deal name";
  @SerializedName(SERIALIZED_NAME_DEAL_NAME)
  private String dealName;

  public static final String SERIALIZED_NAME_DELAY = "delay";
  @SerializedName(SERIALIZED_NAME_DELAY)
  private Integer delay;

  public static final String SERIALIZED_NAME_DENYREASON = "denyreason";
  @SerializedName(SERIALIZED_NAME_DENYREASON)
  private String denyreason;

  public static final String SERIALIZED_NAME_DEVICE = "device";
  @SerializedName(SERIALIZED_NAME_DEVICE)
  private String device;

  public static final String SERIALIZED_NAME_DEVICETYPE = "devicetype";
  @SerializedName(SERIALIZED_NAME_DEVICETYPE)
  private String devicetype;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_EMAILADDRSHA256 = "emailaddrsha256";
  @SerializedName(SERIALIZED_NAME_EMAILADDRSHA256)
  private String emailaddrsha256;

  public static final String SERIALIZED_NAME_FLOW = "flow";
  @SerializedName(SERIALIZED_NAME_FLOW)
  private String flow;

  public static final String SERIALIZED_NAME_FLOWSTEP = "flowstep";
  @SerializedName(SERIALIZED_NAME_FLOWSTEP)
  private String flowstep;

  public static final String SERIALIZED_NAME_FLOWTYPE = "flowtype";
  @SerializedName(SERIALIZED_NAME_FLOWTYPE)
  private String flowtype;

  public static final String SERIALIZED_NAME_IMPRESSION = "impression";
  @SerializedName(SERIALIZED_NAME_IMPRESSION)
  private String impression;

  public static final String SERIALIZED_NAME_IP = "ip";
  @SerializedName(SERIALIZED_NAME_IP)
  private String ip;

  public static final String SERIALIZED_NAME_LATITUDE = "latitude";
  @SerializedName(SERIALIZED_NAME_LATITUDE)
  private String latitude;

  public static final String SERIALIZED_NAME_LONGITUDE = "longitude";
  @SerializedName(SERIALIZED_NAME_LONGITUDE)
  private String longitude;

  public static final String SERIALIZED_NAME_OPTIN = "optin";
  @SerializedName(SERIALIZED_NAME_OPTIN)
  private String optin;

  public static final String SERIALIZED_NAME_OS = "os";
  @SerializedName(SERIALIZED_NAME_OS)
  private String os;

  public static final String SERIALIZED_NAME_RESOLUTION = "resolution";
  @SerializedName(SERIALIZED_NAME_RESOLUTION)
  private String resolution;

  public static final String SERIALIZED_NAME_REVENUE = "revenue";
  @SerializedName(SERIALIZED_NAME_REVENUE)
  private BigDecimal revenue;

  public static final String SERIALIZED_NAME_ROLE = "role";
  @SerializedName(SERIALIZED_NAME_ROLE)
  private String role;

  public static final String SERIALIZED_NAME_SESSION = "session";
  @SerializedName(SERIALIZED_NAME_SESSION)
  private String session;

  public static final String SERIALIZED_NAME_SITE = "site";
  @SerializedName(SERIALIZED_NAME_SITE)
  private String site;

  public static final String SERIALIZED_NAME_SITE_NAME = "site name";
  @SerializedName(SERIALIZED_NAME_SITE_NAME)
  private String siteName;

  public static final String SERIALIZED_NAME_TIMESTAMP = "timestamp";
  @SerializedName(SERIALIZED_NAME_TIMESTAMP)
  private OffsetDateTime timestamp;

  public static final String SERIALIZED_NAME_TOTAL = "total";
  @SerializedName(SERIALIZED_NAME_TOTAL)
  private BigDecimal total;

  public static final String SERIALIZED_NAME_USER = "user";
  @SerializedName(SERIALIZED_NAME_USER)
  private String user;

  public static final String SERIALIZED_NAME_USERLANGUAGE = "userlanguage";
  @SerializedName(SERIALIZED_NAME_USERLANGUAGE)
  private String userlanguage;

  public EventRecord() {
  }

  public EventRecord agent(String agent) {
    this.agent = agent;
    return this;
  }

  /**
   * Get agent
   * @return agent
   */
  @javax.annotation.Nonnull
  public String getAgent() {
    return agent;
  }

  public void setAgent(String agent) {
    this.agent = agent;
  }


  public EventRecord browsertype(String browsertype) {
    this.browsertype = browsertype;
    return this;
  }

  /**
   * Get browsertype
   * @return browsertype
   */
  @javax.annotation.Nonnull
  public String getBrowsertype() {
    return browsertype;
  }

  public void setBrowsertype(String browsertype) {
    this.browsertype = browsertype;
  }


  public EventRecord channel(String channel) {
    this.channel = channel;
    return this;
  }

  /**
   * Get channel
   * @return channel
   */
  @javax.annotation.Nonnull
  public String getChannel() {
    return channel;
  }

  public void setChannel(String channel) {
    this.channel = channel;
  }


  public EventRecord click(String click) {
    this.click = click;
    return this;
  }

  /**
   * Get click
   * @return click
   */
  @javax.annotation.Nonnull
  public String getClick() {
    return click;
  }

  public void setClick(String click) {
    this.click = click;
  }


  public EventRecord clicks(Integer clicks) {
    this.clicks = clicks;
    return this;
  }

  /**
   * Get clicks
   * @return clicks
   */
  @javax.annotation.Nonnull
  public Integer getClicks() {
    return clicks;
  }

  public void setClicks(Integer clicks) {
    this.clicks = clicks;
  }


  public EventRecord code(String code) {
    this.code = code;
    return this;
  }

  /**
   * Get code
   * @return code
   */
  @javax.annotation.Nonnull
  public String getCode() {
    return code;
  }

  public void setCode(String code) {
    this.code = code;
  }


  public EventRecord company(String company) {
    this.company = company;
    return this;
  }

  /**
   * Get company
   * @return company
   */
  @javax.annotation.Nonnull
  public String getCompany() {
    return company;
  }

  public void setCompany(String company) {
    this.company = company;
  }


  public EventRecord contact(String contact) {
    this.contact = contact;
    return this;
  }

  /**
   * Get contact
   * @return contact
   */
  @javax.annotation.Nonnull
  public String getContact() {
    return contact;
  }

  public void setContact(String contact) {
    this.contact = contact;
  }


  public EventRecord cost(BigDecimal cost) {
    this.cost = cost;
    return this;
  }

  /**
   * Get cost
   * @return cost
   */
  @javax.annotation.Nonnull
  public BigDecimal getCost() {
    return cost;
  }

  public void setCost(BigDecimal cost) {
    this.cost = cost;
  }


  public EventRecord costcurrency(String costcurrency) {
    this.costcurrency = costcurrency;
    return this;
  }

  /**
   * Get costcurrency
   * @return costcurrency
   */
  @javax.annotation.Nonnull
  public String getCostcurrency() {
    return costcurrency;
  }

  public void setCostcurrency(String costcurrency) {
    this.costcurrency = costcurrency;
  }


  public EventRecord currency(String currency) {
    this.currency = currency;
    return this;
  }

  /**
   * Get currency
   * @return currency
   */
  @javax.annotation.Nonnull
  public String getCurrency() {
    return currency;
  }

  public void setCurrency(String currency) {
    this.currency = currency;
  }


  public EventRecord deal(String deal) {
    this.deal = deal;
    return this;
  }

  /**
   * Get deal
   * @return deal
   */
  @javax.annotation.Nonnull
  public String getDeal() {
    return deal;
  }

  public void setDeal(String deal) {
    this.deal = deal;
  }


  public EventRecord dealName(String dealName) {
    this.dealName = dealName;
    return this;
  }

  /**
   * Get dealName
   * @return dealName
   */
  @javax.annotation.Nonnull
  public String getDealName() {
    return dealName;
  }

  public void setDealName(String dealName) {
    this.dealName = dealName;
  }


  public EventRecord delay(Integer delay) {
    this.delay = delay;
    return this;
  }

  /**
   * Get delay
   * @return delay
   */
  @javax.annotation.Nonnull
  public Integer getDelay() {
    return delay;
  }

  public void setDelay(Integer delay) {
    this.delay = delay;
  }


  public EventRecord denyreason(String denyreason) {
    this.denyreason = denyreason;
    return this;
  }

  /**
   * Get denyreason
   * @return denyreason
   */
  @javax.annotation.Nonnull
  public String getDenyreason() {
    return denyreason;
  }

  public void setDenyreason(String denyreason) {
    this.denyreason = denyreason;
  }


  public EventRecord device(String device) {
    this.device = device;
    return this;
  }

  /**
   * Get device
   * @return device
   */
  @javax.annotation.Nonnull
  public String getDevice() {
    return device;
  }

  public void setDevice(String device) {
    this.device = device;
  }


  public EventRecord devicetype(String devicetype) {
    this.devicetype = devicetype;
    return this;
  }

  /**
   * Get devicetype
   * @return devicetype
   */
  @javax.annotation.Nonnull
  public String getDevicetype() {
    return devicetype;
  }

  public void setDevicetype(String devicetype) {
    this.devicetype = devicetype;
  }


  public EventRecord email(String email) {
    this.email = email;
    return this;
  }

  /**
   * Get email
   * @return email
   */
  @javax.annotation.Nonnull
  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }


  public EventRecord emailaddrsha256(String emailaddrsha256) {
    this.emailaddrsha256 = emailaddrsha256;
    return this;
  }

  /**
   * Get emailaddrsha256
   * @return emailaddrsha256
   */
  @javax.annotation.Nonnull
  public String getEmailaddrsha256() {
    return emailaddrsha256;
  }

  public void setEmailaddrsha256(String emailaddrsha256) {
    this.emailaddrsha256 = emailaddrsha256;
  }


  public EventRecord flow(String flow) {
    this.flow = flow;
    return this;
  }

  /**
   * Get flow
   * @return flow
   */
  @javax.annotation.Nonnull
  public String getFlow() {
    return flow;
  }

  public void setFlow(String flow) {
    this.flow = flow;
  }


  public EventRecord flowstep(String flowstep) {
    this.flowstep = flowstep;
    return this;
  }

  /**
   * Get flowstep
   * @return flowstep
   */
  @javax.annotation.Nonnull
  public String getFlowstep() {
    return flowstep;
  }

  public void setFlowstep(String flowstep) {
    this.flowstep = flowstep;
  }


  public EventRecord flowtype(String flowtype) {
    this.flowtype = flowtype;
    return this;
  }

  /**
   * Get flowtype
   * @return flowtype
   */
  @javax.annotation.Nonnull
  public String getFlowtype() {
    return flowtype;
  }

  public void setFlowtype(String flowtype) {
    this.flowtype = flowtype;
  }


  public EventRecord impression(String impression) {
    this.impression = impression;
    return this;
  }

  /**
   * Get impression
   * @return impression
   */
  @javax.annotation.Nonnull
  public String getImpression() {
    return impression;
  }

  public void setImpression(String impression) {
    this.impression = impression;
  }


  public EventRecord ip(String ip) {
    this.ip = ip;
    return this;
  }

  /**
   * Get ip
   * @return ip
   */
  @javax.annotation.Nonnull
  public String getIp() {
    return ip;
  }

  public void setIp(String ip) {
    this.ip = ip;
  }


  public EventRecord latitude(String latitude) {
    this.latitude = latitude;
    return this;
  }

  /**
   * Get latitude
   * @return latitude
   */
  @javax.annotation.Nonnull
  public String getLatitude() {
    return latitude;
  }

  public void setLatitude(String latitude) {
    this.latitude = latitude;
  }


  public EventRecord longitude(String longitude) {
    this.longitude = longitude;
    return this;
  }

  /**
   * Get longitude
   * @return longitude
   */
  @javax.annotation.Nonnull
  public String getLongitude() {
    return longitude;
  }

  public void setLongitude(String longitude) {
    this.longitude = longitude;
  }


  public EventRecord optin(String optin) {
    this.optin = optin;
    return this;
  }

  /**
   * Get optin
   * @return optin
   */
  @javax.annotation.Nonnull
  public String getOptin() {
    return optin;
  }

  public void setOptin(String optin) {
    this.optin = optin;
  }


  public EventRecord os(String os) {
    this.os = os;
    return this;
  }

  /**
   * Get os
   * @return os
   */
  @javax.annotation.Nonnull
  public String getOs() {
    return os;
  }

  public void setOs(String os) {
    this.os = os;
  }


  public EventRecord resolution(String resolution) {
    this.resolution = resolution;
    return this;
  }

  /**
   * Get resolution
   * @return resolution
   */
  @javax.annotation.Nonnull
  public String getResolution() {
    return resolution;
  }

  public void setResolution(String resolution) {
    this.resolution = resolution;
  }


  public EventRecord revenue(BigDecimal revenue) {
    this.revenue = revenue;
    return this;
  }

  /**
   * Get revenue
   * @return revenue
   */
  @javax.annotation.Nonnull
  public BigDecimal getRevenue() {
    return revenue;
  }

  public void setRevenue(BigDecimal revenue) {
    this.revenue = revenue;
  }


  public EventRecord role(String role) {
    this.role = role;
    return this;
  }

  /**
   * Get role
   * @return role
   */
  @javax.annotation.Nonnull
  public String getRole() {
    return role;
  }

  public void setRole(String role) {
    this.role = role;
  }


  public EventRecord session(String session) {
    this.session = session;
    return this;
  }

  /**
   * Get session
   * @return session
   */
  @javax.annotation.Nonnull
  public String getSession() {
    return session;
  }

  public void setSession(String session) {
    this.session = session;
  }


  public EventRecord site(String site) {
    this.site = site;
    return this;
  }

  /**
   * Get site
   * @return site
   */
  @javax.annotation.Nonnull
  public String getSite() {
    return site;
  }

  public void setSite(String site) {
    this.site = site;
  }


  public EventRecord siteName(String siteName) {
    this.siteName = siteName;
    return this;
  }

  /**
   * Get siteName
   * @return siteName
   */
  @javax.annotation.Nonnull
  public String getSiteName() {
    return siteName;
  }

  public void setSiteName(String siteName) {
    this.siteName = siteName;
  }


  public EventRecord timestamp(OffsetDateTime timestamp) {
    this.timestamp = timestamp;
    return this;
  }

  /**
   * Get timestamp
   * @return timestamp
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getTimestamp() {
    return timestamp;
  }

  public void setTimestamp(OffsetDateTime timestamp) {
    this.timestamp = timestamp;
  }


  public EventRecord total(BigDecimal total) {
    this.total = total;
    return this;
  }

  /**
   * Get total
   * @return total
   */
  @javax.annotation.Nonnull
  public BigDecimal getTotal() {
    return total;
  }

  public void setTotal(BigDecimal total) {
    this.total = total;
  }


  public EventRecord user(String user) {
    this.user = user;
    return this;
  }

  /**
   * Get user
   * @return user
   */
  @javax.annotation.Nonnull
  public String getUser() {
    return user;
  }

  public void setUser(String user) {
    this.user = user;
  }


  public EventRecord userlanguage(String userlanguage) {
    this.userlanguage = userlanguage;
    return this;
  }

  /**
   * Get userlanguage
   * @return userlanguage
   */
  @javax.annotation.Nonnull
  public String getUserlanguage() {
    return userlanguage;
  }

  public void setUserlanguage(String userlanguage) {
    this.userlanguage = userlanguage;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EventRecord eventRecord = (EventRecord) o;
    return Objects.equals(this.agent, eventRecord.agent) &&
        Objects.equals(this.browsertype, eventRecord.browsertype) &&
        Objects.equals(this.channel, eventRecord.channel) &&
        Objects.equals(this.click, eventRecord.click) &&
        Objects.equals(this.clicks, eventRecord.clicks) &&
        Objects.equals(this.code, eventRecord.code) &&
        Objects.equals(this.company, eventRecord.company) &&
        Objects.equals(this.contact, eventRecord.contact) &&
        Objects.equals(this.cost, eventRecord.cost) &&
        Objects.equals(this.costcurrency, eventRecord.costcurrency) &&
        Objects.equals(this.currency, eventRecord.currency) &&
        Objects.equals(this.deal, eventRecord.deal) &&
        Objects.equals(this.dealName, eventRecord.dealName) &&
        Objects.equals(this.delay, eventRecord.delay) &&
        Objects.equals(this.denyreason, eventRecord.denyreason) &&
        Objects.equals(this.device, eventRecord.device) &&
        Objects.equals(this.devicetype, eventRecord.devicetype) &&
        Objects.equals(this.email, eventRecord.email) &&
        Objects.equals(this.emailaddrsha256, eventRecord.emailaddrsha256) &&
        Objects.equals(this.flow, eventRecord.flow) &&
        Objects.equals(this.flowstep, eventRecord.flowstep) &&
        Objects.equals(this.flowtype, eventRecord.flowtype) &&
        Objects.equals(this.impression, eventRecord.impression) &&
        Objects.equals(this.ip, eventRecord.ip) &&
        Objects.equals(this.latitude, eventRecord.latitude) &&
        Objects.equals(this.longitude, eventRecord.longitude) &&
        Objects.equals(this.optin, eventRecord.optin) &&
        Objects.equals(this.os, eventRecord.os) &&
        Objects.equals(this.resolution, eventRecord.resolution) &&
        Objects.equals(this.revenue, eventRecord.revenue) &&
        Objects.equals(this.role, eventRecord.role) &&
        Objects.equals(this.session, eventRecord.session) &&
        Objects.equals(this.site, eventRecord.site) &&
        Objects.equals(this.siteName, eventRecord.siteName) &&
        Objects.equals(this.timestamp, eventRecord.timestamp) &&
        Objects.equals(this.total, eventRecord.total) &&
        Objects.equals(this.user, eventRecord.user) &&
        Objects.equals(this.userlanguage, eventRecord.userlanguage);
  }

  @Override
  public int hashCode() {
    return Objects.hash(agent, browsertype, channel, click, clicks, code, company, contact, cost, costcurrency, currency, deal, dealName, delay, denyreason, device, devicetype, email, emailaddrsha256, flow, flowstep, flowtype, impression, ip, latitude, longitude, optin, os, resolution, revenue, role, session, site, siteName, timestamp, total, user, userlanguage);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EventRecord {\n");
    sb.append("    agent: ").append(toIndentedString(agent)).append("\n");
    sb.append("    browsertype: ").append(toIndentedString(browsertype)).append("\n");
    sb.append("    channel: ").append(toIndentedString(channel)).append("\n");
    sb.append("    click: ").append(toIndentedString(click)).append("\n");
    sb.append("    clicks: ").append(toIndentedString(clicks)).append("\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    company: ").append(toIndentedString(company)).append("\n");
    sb.append("    contact: ").append(toIndentedString(contact)).append("\n");
    sb.append("    cost: ").append(toIndentedString(cost)).append("\n");
    sb.append("    costcurrency: ").append(toIndentedString(costcurrency)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    deal: ").append(toIndentedString(deal)).append("\n");
    sb.append("    dealName: ").append(toIndentedString(dealName)).append("\n");
    sb.append("    delay: ").append(toIndentedString(delay)).append("\n");
    sb.append("    denyreason: ").append(toIndentedString(denyreason)).append("\n");
    sb.append("    device: ").append(toIndentedString(device)).append("\n");
    sb.append("    devicetype: ").append(toIndentedString(devicetype)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    emailaddrsha256: ").append(toIndentedString(emailaddrsha256)).append("\n");
    sb.append("    flow: ").append(toIndentedString(flow)).append("\n");
    sb.append("    flowstep: ").append(toIndentedString(flowstep)).append("\n");
    sb.append("    flowtype: ").append(toIndentedString(flowtype)).append("\n");
    sb.append("    impression: ").append(toIndentedString(impression)).append("\n");
    sb.append("    ip: ").append(toIndentedString(ip)).append("\n");
    sb.append("    latitude: ").append(toIndentedString(latitude)).append("\n");
    sb.append("    longitude: ").append(toIndentedString(longitude)).append("\n");
    sb.append("    optin: ").append(toIndentedString(optin)).append("\n");
    sb.append("    os: ").append(toIndentedString(os)).append("\n");
    sb.append("    resolution: ").append(toIndentedString(resolution)).append("\n");
    sb.append("    revenue: ").append(toIndentedString(revenue)).append("\n");
    sb.append("    role: ").append(toIndentedString(role)).append("\n");
    sb.append("    session: ").append(toIndentedString(session)).append("\n");
    sb.append("    site: ").append(toIndentedString(site)).append("\n");
    sb.append("    siteName: ").append(toIndentedString(siteName)).append("\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("    total: ").append(toIndentedString(total)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("    userlanguage: ").append(toIndentedString(userlanguage)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("agent");
    openapiFields.add("browsertype");
    openapiFields.add("channel");
    openapiFields.add("click");
    openapiFields.add("clicks");
    openapiFields.add("code");
    openapiFields.add("company");
    openapiFields.add("contact");
    openapiFields.add("cost");
    openapiFields.add("costcurrency");
    openapiFields.add("currency");
    openapiFields.add("deal");
    openapiFields.add("deal name");
    openapiFields.add("delay");
    openapiFields.add("denyreason");
    openapiFields.add("device");
    openapiFields.add("devicetype");
    openapiFields.add("email");
    openapiFields.add("emailaddrsha256");
    openapiFields.add("flow");
    openapiFields.add("flowstep");
    openapiFields.add("flowtype");
    openapiFields.add("impression");
    openapiFields.add("ip");
    openapiFields.add("latitude");
    openapiFields.add("longitude");
    openapiFields.add("optin");
    openapiFields.add("os");
    openapiFields.add("resolution");
    openapiFields.add("revenue");
    openapiFields.add("role");
    openapiFields.add("session");
    openapiFields.add("site");
    openapiFields.add("site name");
    openapiFields.add("timestamp");
    openapiFields.add("total");
    openapiFields.add("user");
    openapiFields.add("userlanguage");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("agent");
    openapiRequiredFields.add("browsertype");
    openapiRequiredFields.add("channel");
    openapiRequiredFields.add("click");
    openapiRequiredFields.add("clicks");
    openapiRequiredFields.add("code");
    openapiRequiredFields.add("company");
    openapiRequiredFields.add("contact");
    openapiRequiredFields.add("cost");
    openapiRequiredFields.add("costcurrency");
    openapiRequiredFields.add("currency");
    openapiRequiredFields.add("deal");
    openapiRequiredFields.add("deal name");
    openapiRequiredFields.add("delay");
    openapiRequiredFields.add("denyreason");
    openapiRequiredFields.add("device");
    openapiRequiredFields.add("devicetype");
    openapiRequiredFields.add("email");
    openapiRequiredFields.add("emailaddrsha256");
    openapiRequiredFields.add("flow");
    openapiRequiredFields.add("flowstep");
    openapiRequiredFields.add("flowtype");
    openapiRequiredFields.add("impression");
    openapiRequiredFields.add("ip");
    openapiRequiredFields.add("latitude");
    openapiRequiredFields.add("longitude");
    openapiRequiredFields.add("optin");
    openapiRequiredFields.add("os");
    openapiRequiredFields.add("resolution");
    openapiRequiredFields.add("revenue");
    openapiRequiredFields.add("role");
    openapiRequiredFields.add("session");
    openapiRequiredFields.add("site");
    openapiRequiredFields.add("site name");
    openapiRequiredFields.add("timestamp");
    openapiRequiredFields.add("total");
    openapiRequiredFields.add("user");
    openapiRequiredFields.add("userlanguage");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EventRecord
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EventRecord.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EventRecord is not found in the empty JSON string", EventRecord.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EventRecord.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EventRecord` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : EventRecord.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("agent").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `agent` to be a primitive type in the JSON string but got `%s`", jsonObj.get("agent").toString()));
      }
      if (!jsonObj.get("browsertype").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `browsertype` to be a primitive type in the JSON string but got `%s`", jsonObj.get("browsertype").toString()));
      }
      if (!jsonObj.get("channel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `channel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("channel").toString()));
      }
      if (!jsonObj.get("click").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `click` to be a primitive type in the JSON string but got `%s`", jsonObj.get("click").toString()));
      }
      if (!jsonObj.get("code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("code").toString()));
      }
      if (!jsonObj.get("company").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `company` to be a primitive type in the JSON string but got `%s`", jsonObj.get("company").toString()));
      }
      if (!jsonObj.get("contact").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contact` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contact").toString()));
      }
      if (!jsonObj.get("costcurrency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `costcurrency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("costcurrency").toString()));
      }
      if (!jsonObj.get("currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currency").toString()));
      }
      if (!jsonObj.get("deal").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deal` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deal").toString()));
      }
      if (!jsonObj.get("deal name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deal name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deal name").toString()));
      }
      if (!jsonObj.get("denyreason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `denyreason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("denyreason").toString()));
      }
      if (!jsonObj.get("device").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `device` to be a primitive type in the JSON string but got `%s`", jsonObj.get("device").toString()));
      }
      if (!jsonObj.get("devicetype").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `devicetype` to be a primitive type in the JSON string but got `%s`", jsonObj.get("devicetype").toString()));
      }
      if (!jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if (!jsonObj.get("emailaddrsha256").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `emailaddrsha256` to be a primitive type in the JSON string but got `%s`", jsonObj.get("emailaddrsha256").toString()));
      }
      if (!jsonObj.get("flow").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `flow` to be a primitive type in the JSON string but got `%s`", jsonObj.get("flow").toString()));
      }
      if (!jsonObj.get("flowstep").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `flowstep` to be a primitive type in the JSON string but got `%s`", jsonObj.get("flowstep").toString()));
      }
      if (!jsonObj.get("flowtype").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `flowtype` to be a primitive type in the JSON string but got `%s`", jsonObj.get("flowtype").toString()));
      }
      if (!jsonObj.get("impression").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `impression` to be a primitive type in the JSON string but got `%s`", jsonObj.get("impression").toString()));
      }
      if (!jsonObj.get("ip").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ip` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ip").toString()));
      }
      if (!jsonObj.get("latitude").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `latitude` to be a primitive type in the JSON string but got `%s`", jsonObj.get("latitude").toString()));
      }
      if (!jsonObj.get("longitude").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `longitude` to be a primitive type in the JSON string but got `%s`", jsonObj.get("longitude").toString()));
      }
      if (!jsonObj.get("optin").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `optin` to be a primitive type in the JSON string but got `%s`", jsonObj.get("optin").toString()));
      }
      if (!jsonObj.get("os").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `os` to be a primitive type in the JSON string but got `%s`", jsonObj.get("os").toString()));
      }
      if (!jsonObj.get("resolution").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resolution` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resolution").toString()));
      }
      if (!jsonObj.get("role").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `role` to be a primitive type in the JSON string but got `%s`", jsonObj.get("role").toString()));
      }
      if (!jsonObj.get("session").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `session` to be a primitive type in the JSON string but got `%s`", jsonObj.get("session").toString()));
      }
      if (!jsonObj.get("site").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `site` to be a primitive type in the JSON string but got `%s`", jsonObj.get("site").toString()));
      }
      if (!jsonObj.get("site name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `site name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("site name").toString()));
      }
      if (!jsonObj.get("user").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `user` to be a primitive type in the JSON string but got `%s`", jsonObj.get("user").toString()));
      }
      if (!jsonObj.get("userlanguage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userlanguage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userlanguage").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EventRecord.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EventRecord' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EventRecord> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EventRecord.class));

       return (TypeAdapter<T>) new TypeAdapter<EventRecord>() {
           @Override
           public void write(JsonWriter out, EventRecord value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EventRecord read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EventRecord given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EventRecord
   * @throws IOException if the JSON string is invalid with respect to EventRecord
   */
  public static EventRecord fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EventRecord.class);
  }

  /**
   * Convert an instance of EventRecord to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

