/**
 * Redeal Analytics API
 * Access analytics for Redeal
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: hello@redeal.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The EventRecord model module.
 * @module model/EventRecord
 * @version 1.0.0
 */
class EventRecord {
    /**
     * Constructs a new <code>EventRecord</code>.
     * @alias module:model/EventRecord
     * @param agent {String} 
     * @param browsertype {String} 
     * @param channel {String} 
     * @param click {String} 
     * @param clicks {Number} 
     * @param code {String} 
     * @param company {String} 
     * @param contact {String} 
     * @param cost {Number} 
     * @param costcurrency {String} 
     * @param currency {String} 
     * @param deal {String} 
     * @param dealName {String} 
     * @param delay {Number} 
     * @param denyreason {String} 
     * @param device {String} 
     * @param devicetype {String} 
     * @param email {String} 
     * @param emailaddrsha256 {String} 
     * @param flow {String} 
     * @param flowstep {String} 
     * @param flowtype {String} 
     * @param impression {String} 
     * @param ip {String} 
     * @param latitude {String} 
     * @param longitude {String} 
     * @param optin {String} 
     * @param os {String} 
     * @param resolution {String} 
     * @param revenue {Number} 
     * @param role {String} 
     * @param session {String} 
     * @param site {String} 
     * @param siteName {String} 
     * @param timestamp {Date} 
     * @param total {Number} 
     * @param user {String} 
     * @param userlanguage {String} 
     */
    constructor(agent, browsertype, channel, click, clicks, code, company, contact, cost, costcurrency, currency, deal, dealName, delay, denyreason, device, devicetype, email, emailaddrsha256, flow, flowstep, flowtype, impression, ip, latitude, longitude, optin, os, resolution, revenue, role, session, site, siteName, timestamp, total, user, userlanguage) { 
        
        EventRecord.initialize(this, agent, browsertype, channel, click, clicks, code, company, contact, cost, costcurrency, currency, deal, dealName, delay, denyreason, device, devicetype, email, emailaddrsha256, flow, flowstep, flowtype, impression, ip, latitude, longitude, optin, os, resolution, revenue, role, session, site, siteName, timestamp, total, user, userlanguage);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, agent, browsertype, channel, click, clicks, code, company, contact, cost, costcurrency, currency, deal, dealName, delay, denyreason, device, devicetype, email, emailaddrsha256, flow, flowstep, flowtype, impression, ip, latitude, longitude, optin, os, resolution, revenue, role, session, site, siteName, timestamp, total, user, userlanguage) { 
        obj['agent'] = agent;
        obj['browsertype'] = browsertype;
        obj['channel'] = channel;
        obj['click'] = click;
        obj['clicks'] = clicks;
        obj['code'] = code;
        obj['company'] = company;
        obj['contact'] = contact;
        obj['cost'] = cost;
        obj['costcurrency'] = costcurrency;
        obj['currency'] = currency;
        obj['deal'] = deal;
        obj['deal name'] = dealName;
        obj['delay'] = delay;
        obj['denyreason'] = denyreason;
        obj['device'] = device;
        obj['devicetype'] = devicetype;
        obj['email'] = email;
        obj['emailaddrsha256'] = emailaddrsha256;
        obj['flow'] = flow;
        obj['flowstep'] = flowstep;
        obj['flowtype'] = flowtype;
        obj['impression'] = impression;
        obj['ip'] = ip;
        obj['latitude'] = latitude;
        obj['longitude'] = longitude;
        obj['optin'] = optin;
        obj['os'] = os;
        obj['resolution'] = resolution;
        obj['revenue'] = revenue;
        obj['role'] = role;
        obj['session'] = session;
        obj['site'] = site;
        obj['site name'] = siteName;
        obj['timestamp'] = timestamp;
        obj['total'] = total;
        obj['user'] = user;
        obj['userlanguage'] = userlanguage;
    }

    /**
     * Constructs a <code>EventRecord</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/EventRecord} obj Optional instance to populate.
     * @return {module:model/EventRecord} The populated <code>EventRecord</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EventRecord();

            if (data.hasOwnProperty('agent')) {
                obj['agent'] = ApiClient.convertToType(data['agent'], 'String');
            }
            if (data.hasOwnProperty('browsertype')) {
                obj['browsertype'] = ApiClient.convertToType(data['browsertype'], 'String');
            }
            if (data.hasOwnProperty('channel')) {
                obj['channel'] = ApiClient.convertToType(data['channel'], 'String');
            }
            if (data.hasOwnProperty('click')) {
                obj['click'] = ApiClient.convertToType(data['click'], 'String');
            }
            if (data.hasOwnProperty('clicks')) {
                obj['clicks'] = ApiClient.convertToType(data['clicks'], 'Number');
            }
            if (data.hasOwnProperty('code')) {
                obj['code'] = ApiClient.convertToType(data['code'], 'String');
            }
            if (data.hasOwnProperty('company')) {
                obj['company'] = ApiClient.convertToType(data['company'], 'String');
            }
            if (data.hasOwnProperty('contact')) {
                obj['contact'] = ApiClient.convertToType(data['contact'], 'String');
            }
            if (data.hasOwnProperty('cost')) {
                obj['cost'] = ApiClient.convertToType(data['cost'], 'Number');
            }
            if (data.hasOwnProperty('costcurrency')) {
                obj['costcurrency'] = ApiClient.convertToType(data['costcurrency'], 'String');
            }
            if (data.hasOwnProperty('currency')) {
                obj['currency'] = ApiClient.convertToType(data['currency'], 'String');
            }
            if (data.hasOwnProperty('deal')) {
                obj['deal'] = ApiClient.convertToType(data['deal'], 'String');
            }
            if (data.hasOwnProperty('deal name')) {
                obj['deal name'] = ApiClient.convertToType(data['deal name'], 'String');
            }
            if (data.hasOwnProperty('delay')) {
                obj['delay'] = ApiClient.convertToType(data['delay'], 'Number');
            }
            if (data.hasOwnProperty('denyreason')) {
                obj['denyreason'] = ApiClient.convertToType(data['denyreason'], 'String');
            }
            if (data.hasOwnProperty('device')) {
                obj['device'] = ApiClient.convertToType(data['device'], 'String');
            }
            if (data.hasOwnProperty('devicetype')) {
                obj['devicetype'] = ApiClient.convertToType(data['devicetype'], 'String');
            }
            if (data.hasOwnProperty('email')) {
                obj['email'] = ApiClient.convertToType(data['email'], 'String');
            }
            if (data.hasOwnProperty('emailaddrsha256')) {
                obj['emailaddrsha256'] = ApiClient.convertToType(data['emailaddrsha256'], 'String');
            }
            if (data.hasOwnProperty('flow')) {
                obj['flow'] = ApiClient.convertToType(data['flow'], 'String');
            }
            if (data.hasOwnProperty('flowstep')) {
                obj['flowstep'] = ApiClient.convertToType(data['flowstep'], 'String');
            }
            if (data.hasOwnProperty('flowtype')) {
                obj['flowtype'] = ApiClient.convertToType(data['flowtype'], 'String');
            }
            if (data.hasOwnProperty('impression')) {
                obj['impression'] = ApiClient.convertToType(data['impression'], 'String');
            }
            if (data.hasOwnProperty('ip')) {
                obj['ip'] = ApiClient.convertToType(data['ip'], 'String');
            }
            if (data.hasOwnProperty('latitude')) {
                obj['latitude'] = ApiClient.convertToType(data['latitude'], 'String');
            }
            if (data.hasOwnProperty('longitude')) {
                obj['longitude'] = ApiClient.convertToType(data['longitude'], 'String');
            }
            if (data.hasOwnProperty('optin')) {
                obj['optin'] = ApiClient.convertToType(data['optin'], 'String');
            }
            if (data.hasOwnProperty('os')) {
                obj['os'] = ApiClient.convertToType(data['os'], 'String');
            }
            if (data.hasOwnProperty('resolution')) {
                obj['resolution'] = ApiClient.convertToType(data['resolution'], 'String');
            }
            if (data.hasOwnProperty('revenue')) {
                obj['revenue'] = ApiClient.convertToType(data['revenue'], 'Number');
            }
            if (data.hasOwnProperty('role')) {
                obj['role'] = ApiClient.convertToType(data['role'], 'String');
            }
            if (data.hasOwnProperty('session')) {
                obj['session'] = ApiClient.convertToType(data['session'], 'String');
            }
            if (data.hasOwnProperty('site')) {
                obj['site'] = ApiClient.convertToType(data['site'], 'String');
            }
            if (data.hasOwnProperty('site name')) {
                obj['site name'] = ApiClient.convertToType(data['site name'], 'String');
            }
            if (data.hasOwnProperty('timestamp')) {
                obj['timestamp'] = ApiClient.convertToType(data['timestamp'], 'Date');
            }
            if (data.hasOwnProperty('total')) {
                obj['total'] = ApiClient.convertToType(data['total'], 'Number');
            }
            if (data.hasOwnProperty('user')) {
                obj['user'] = ApiClient.convertToType(data['user'], 'String');
            }
            if (data.hasOwnProperty('userlanguage')) {
                obj['userlanguage'] = ApiClient.convertToType(data['userlanguage'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>EventRecord</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>EventRecord</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of EventRecord.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['agent'] && !(typeof data['agent'] === 'string' || data['agent'] instanceof String)) {
            throw new Error("Expected the field `agent` to be a primitive type in the JSON string but got " + data['agent']);
        }
        // ensure the json data is a string
        if (data['browsertype'] && !(typeof data['browsertype'] === 'string' || data['browsertype'] instanceof String)) {
            throw new Error("Expected the field `browsertype` to be a primitive type in the JSON string but got " + data['browsertype']);
        }
        // ensure the json data is a string
        if (data['channel'] && !(typeof data['channel'] === 'string' || data['channel'] instanceof String)) {
            throw new Error("Expected the field `channel` to be a primitive type in the JSON string but got " + data['channel']);
        }
        // ensure the json data is a string
        if (data['click'] && !(typeof data['click'] === 'string' || data['click'] instanceof String)) {
            throw new Error("Expected the field `click` to be a primitive type in the JSON string but got " + data['click']);
        }
        // ensure the json data is a string
        if (data['code'] && !(typeof data['code'] === 'string' || data['code'] instanceof String)) {
            throw new Error("Expected the field `code` to be a primitive type in the JSON string but got " + data['code']);
        }
        // ensure the json data is a string
        if (data['company'] && !(typeof data['company'] === 'string' || data['company'] instanceof String)) {
            throw new Error("Expected the field `company` to be a primitive type in the JSON string but got " + data['company']);
        }
        // ensure the json data is a string
        if (data['contact'] && !(typeof data['contact'] === 'string' || data['contact'] instanceof String)) {
            throw new Error("Expected the field `contact` to be a primitive type in the JSON string but got " + data['contact']);
        }
        // ensure the json data is a string
        if (data['costcurrency'] && !(typeof data['costcurrency'] === 'string' || data['costcurrency'] instanceof String)) {
            throw new Error("Expected the field `costcurrency` to be a primitive type in the JSON string but got " + data['costcurrency']);
        }
        // ensure the json data is a string
        if (data['currency'] && !(typeof data['currency'] === 'string' || data['currency'] instanceof String)) {
            throw new Error("Expected the field `currency` to be a primitive type in the JSON string but got " + data['currency']);
        }
        // ensure the json data is a string
        if (data['deal'] && !(typeof data['deal'] === 'string' || data['deal'] instanceof String)) {
            throw new Error("Expected the field `deal` to be a primitive type in the JSON string but got " + data['deal']);
        }
        // ensure the json data is a string
        if (data['deal name'] && !(typeof data['deal name'] === 'string' || data['deal name'] instanceof String)) {
            throw new Error("Expected the field `deal name` to be a primitive type in the JSON string but got " + data['deal name']);
        }
        // ensure the json data is a string
        if (data['denyreason'] && !(typeof data['denyreason'] === 'string' || data['denyreason'] instanceof String)) {
            throw new Error("Expected the field `denyreason` to be a primitive type in the JSON string but got " + data['denyreason']);
        }
        // ensure the json data is a string
        if (data['device'] && !(typeof data['device'] === 'string' || data['device'] instanceof String)) {
            throw new Error("Expected the field `device` to be a primitive type in the JSON string but got " + data['device']);
        }
        // ensure the json data is a string
        if (data['devicetype'] && !(typeof data['devicetype'] === 'string' || data['devicetype'] instanceof String)) {
            throw new Error("Expected the field `devicetype` to be a primitive type in the JSON string but got " + data['devicetype']);
        }
        // ensure the json data is a string
        if (data['email'] && !(typeof data['email'] === 'string' || data['email'] instanceof String)) {
            throw new Error("Expected the field `email` to be a primitive type in the JSON string but got " + data['email']);
        }
        // ensure the json data is a string
        if (data['emailaddrsha256'] && !(typeof data['emailaddrsha256'] === 'string' || data['emailaddrsha256'] instanceof String)) {
            throw new Error("Expected the field `emailaddrsha256` to be a primitive type in the JSON string but got " + data['emailaddrsha256']);
        }
        // ensure the json data is a string
        if (data['flow'] && !(typeof data['flow'] === 'string' || data['flow'] instanceof String)) {
            throw new Error("Expected the field `flow` to be a primitive type in the JSON string but got " + data['flow']);
        }
        // ensure the json data is a string
        if (data['flowstep'] && !(typeof data['flowstep'] === 'string' || data['flowstep'] instanceof String)) {
            throw new Error("Expected the field `flowstep` to be a primitive type in the JSON string but got " + data['flowstep']);
        }
        // ensure the json data is a string
        if (data['flowtype'] && !(typeof data['flowtype'] === 'string' || data['flowtype'] instanceof String)) {
            throw new Error("Expected the field `flowtype` to be a primitive type in the JSON string but got " + data['flowtype']);
        }
        // ensure the json data is a string
        if (data['impression'] && !(typeof data['impression'] === 'string' || data['impression'] instanceof String)) {
            throw new Error("Expected the field `impression` to be a primitive type in the JSON string but got " + data['impression']);
        }
        // ensure the json data is a string
        if (data['ip'] && !(typeof data['ip'] === 'string' || data['ip'] instanceof String)) {
            throw new Error("Expected the field `ip` to be a primitive type in the JSON string but got " + data['ip']);
        }
        // ensure the json data is a string
        if (data['latitude'] && !(typeof data['latitude'] === 'string' || data['latitude'] instanceof String)) {
            throw new Error("Expected the field `latitude` to be a primitive type in the JSON string but got " + data['latitude']);
        }
        // ensure the json data is a string
        if (data['longitude'] && !(typeof data['longitude'] === 'string' || data['longitude'] instanceof String)) {
            throw new Error("Expected the field `longitude` to be a primitive type in the JSON string but got " + data['longitude']);
        }
        // ensure the json data is a string
        if (data['optin'] && !(typeof data['optin'] === 'string' || data['optin'] instanceof String)) {
            throw new Error("Expected the field `optin` to be a primitive type in the JSON string but got " + data['optin']);
        }
        // ensure the json data is a string
        if (data['os'] && !(typeof data['os'] === 'string' || data['os'] instanceof String)) {
            throw new Error("Expected the field `os` to be a primitive type in the JSON string but got " + data['os']);
        }
        // ensure the json data is a string
        if (data['resolution'] && !(typeof data['resolution'] === 'string' || data['resolution'] instanceof String)) {
            throw new Error("Expected the field `resolution` to be a primitive type in the JSON string but got " + data['resolution']);
        }
        // ensure the json data is a string
        if (data['role'] && !(typeof data['role'] === 'string' || data['role'] instanceof String)) {
            throw new Error("Expected the field `role` to be a primitive type in the JSON string but got " + data['role']);
        }
        // ensure the json data is a string
        if (data['session'] && !(typeof data['session'] === 'string' || data['session'] instanceof String)) {
            throw new Error("Expected the field `session` to be a primitive type in the JSON string but got " + data['session']);
        }
        // ensure the json data is a string
        if (data['site'] && !(typeof data['site'] === 'string' || data['site'] instanceof String)) {
            throw new Error("Expected the field `site` to be a primitive type in the JSON string but got " + data['site']);
        }
        // ensure the json data is a string
        if (data['site name'] && !(typeof data['site name'] === 'string' || data['site name'] instanceof String)) {
            throw new Error("Expected the field `site name` to be a primitive type in the JSON string but got " + data['site name']);
        }
        // ensure the json data is a string
        if (data['user'] && !(typeof data['user'] === 'string' || data['user'] instanceof String)) {
            throw new Error("Expected the field `user` to be a primitive type in the JSON string but got " + data['user']);
        }
        // ensure the json data is a string
        if (data['userlanguage'] && !(typeof data['userlanguage'] === 'string' || data['userlanguage'] instanceof String)) {
            throw new Error("Expected the field `userlanguage` to be a primitive type in the JSON string but got " + data['userlanguage']);
        }

        return true;
    }


}

EventRecord.RequiredProperties = ["agent", "browsertype", "channel", "click", "clicks", "code", "company", "contact", "cost", "costcurrency", "currency", "deal", "deal name", "delay", "denyreason", "device", "devicetype", "email", "emailaddrsha256", "flow", "flowstep", "flowtype", "impression", "ip", "latitude", "longitude", "optin", "os", "resolution", "revenue", "role", "session", "site", "site name", "timestamp", "total", "user", "userlanguage"];

/**
 * @member {String} agent
 */
EventRecord.prototype['agent'] = undefined;

/**
 * @member {String} browsertype
 */
EventRecord.prototype['browsertype'] = undefined;

/**
 * @member {String} channel
 */
EventRecord.prototype['channel'] = undefined;

/**
 * @member {String} click
 */
EventRecord.prototype['click'] = undefined;

/**
 * @member {Number} clicks
 */
EventRecord.prototype['clicks'] = undefined;

/**
 * @member {String} code
 */
EventRecord.prototype['code'] = undefined;

/**
 * @member {String} company
 */
EventRecord.prototype['company'] = undefined;

/**
 * @member {String} contact
 */
EventRecord.prototype['contact'] = undefined;

/**
 * @member {Number} cost
 */
EventRecord.prototype['cost'] = undefined;

/**
 * @member {String} costcurrency
 */
EventRecord.prototype['costcurrency'] = undefined;

/**
 * @member {String} currency
 */
EventRecord.prototype['currency'] = undefined;

/**
 * @member {String} deal
 */
EventRecord.prototype['deal'] = undefined;

/**
 * @member {String} deal name
 */
EventRecord.prototype['deal name'] = undefined;

/**
 * @member {Number} delay
 */
EventRecord.prototype['delay'] = undefined;

/**
 * @member {String} denyreason
 */
EventRecord.prototype['denyreason'] = undefined;

/**
 * @member {String} device
 */
EventRecord.prototype['device'] = undefined;

/**
 * @member {String} devicetype
 */
EventRecord.prototype['devicetype'] = undefined;

/**
 * @member {String} email
 */
EventRecord.prototype['email'] = undefined;

/**
 * @member {String} emailaddrsha256
 */
EventRecord.prototype['emailaddrsha256'] = undefined;

/**
 * @member {String} flow
 */
EventRecord.prototype['flow'] = undefined;

/**
 * @member {String} flowstep
 */
EventRecord.prototype['flowstep'] = undefined;

/**
 * @member {String} flowtype
 */
EventRecord.prototype['flowtype'] = undefined;

/**
 * @member {String} impression
 */
EventRecord.prototype['impression'] = undefined;

/**
 * @member {String} ip
 */
EventRecord.prototype['ip'] = undefined;

/**
 * @member {String} latitude
 */
EventRecord.prototype['latitude'] = undefined;

/**
 * @member {String} longitude
 */
EventRecord.prototype['longitude'] = undefined;

/**
 * @member {String} optin
 */
EventRecord.prototype['optin'] = undefined;

/**
 * @member {String} os
 */
EventRecord.prototype['os'] = undefined;

/**
 * @member {String} resolution
 */
EventRecord.prototype['resolution'] = undefined;

/**
 * @member {Number} revenue
 */
EventRecord.prototype['revenue'] = undefined;

/**
 * @member {String} role
 */
EventRecord.prototype['role'] = undefined;

/**
 * @member {String} session
 */
EventRecord.prototype['session'] = undefined;

/**
 * @member {String} site
 */
EventRecord.prototype['site'] = undefined;

/**
 * @member {String} site name
 */
EventRecord.prototype['site name'] = undefined;

/**
 * @member {Date} timestamp
 */
EventRecord.prototype['timestamp'] = undefined;

/**
 * @member {Number} total
 */
EventRecord.prototype['total'] = undefined;

/**
 * @member {String} user
 */
EventRecord.prototype['user'] = undefined;

/**
 * @member {String} userlanguage
 */
EventRecord.prototype['userlanguage'] = undefined;






export default EventRecord;

