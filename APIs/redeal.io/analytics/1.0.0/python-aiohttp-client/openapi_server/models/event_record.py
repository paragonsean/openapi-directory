# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class EventRecord(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, agent: str=None, browsertype: str=None, channel: str=None, click: str=None, clicks: int=None, code: str=None, company: str=None, contact: str=None, cost: float=None, costcurrency: str=None, currency: str=None, deal: str=None, deal_name: str=None, delay: int=None, denyreason: str=None, device: str=None, devicetype: str=None, email: str=None, emailaddrsha256: str=None, flow: str=None, flowstep: str=None, flowtype: str=None, impression: str=None, ip: str=None, latitude: str=None, longitude: str=None, optin: str=None, os: str=None, resolution: str=None, revenue: float=None, role: str=None, session: str=None, site: str=None, site_name: str=None, timestamp: datetime=None, total: float=None, user: str=None, userlanguage: str=None):
        """EventRecord - a model defined in OpenAPI

        :param agent: The agent of this EventRecord.
        :param browsertype: The browsertype of this EventRecord.
        :param channel: The channel of this EventRecord.
        :param click: The click of this EventRecord.
        :param clicks: The clicks of this EventRecord.
        :param code: The code of this EventRecord.
        :param company: The company of this EventRecord.
        :param contact: The contact of this EventRecord.
        :param cost: The cost of this EventRecord.
        :param costcurrency: The costcurrency of this EventRecord.
        :param currency: The currency of this EventRecord.
        :param deal: The deal of this EventRecord.
        :param deal_name: The deal_name of this EventRecord.
        :param delay: The delay of this EventRecord.
        :param denyreason: The denyreason of this EventRecord.
        :param device: The device of this EventRecord.
        :param devicetype: The devicetype of this EventRecord.
        :param email: The email of this EventRecord.
        :param emailaddrsha256: The emailaddrsha256 of this EventRecord.
        :param flow: The flow of this EventRecord.
        :param flowstep: The flowstep of this EventRecord.
        :param flowtype: The flowtype of this EventRecord.
        :param impression: The impression of this EventRecord.
        :param ip: The ip of this EventRecord.
        :param latitude: The latitude of this EventRecord.
        :param longitude: The longitude of this EventRecord.
        :param optin: The optin of this EventRecord.
        :param os: The os of this EventRecord.
        :param resolution: The resolution of this EventRecord.
        :param revenue: The revenue of this EventRecord.
        :param role: The role of this EventRecord.
        :param session: The session of this EventRecord.
        :param site: The site of this EventRecord.
        :param site_name: The site_name of this EventRecord.
        :param timestamp: The timestamp of this EventRecord.
        :param total: The total of this EventRecord.
        :param user: The user of this EventRecord.
        :param userlanguage: The userlanguage of this EventRecord.
        """
        self.openapi_types = {
            'agent': str,
            'browsertype': str,
            'channel': str,
            'click': str,
            'clicks': int,
            'code': str,
            'company': str,
            'contact': str,
            'cost': float,
            'costcurrency': str,
            'currency': str,
            'deal': str,
            'deal_name': str,
            'delay': int,
            'denyreason': str,
            'device': str,
            'devicetype': str,
            'email': str,
            'emailaddrsha256': str,
            'flow': str,
            'flowstep': str,
            'flowtype': str,
            'impression': str,
            'ip': str,
            'latitude': str,
            'longitude': str,
            'optin': str,
            'os': str,
            'resolution': str,
            'revenue': float,
            'role': str,
            'session': str,
            'site': str,
            'site_name': str,
            'timestamp': datetime,
            'total': float,
            'user': str,
            'userlanguage': str
        }

        self.attribute_map = {
            'agent': 'agent',
            'browsertype': 'browsertype',
            'channel': 'channel',
            'click': 'click',
            'clicks': 'clicks',
            'code': 'code',
            'company': 'company',
            'contact': 'contact',
            'cost': 'cost',
            'costcurrency': 'costcurrency',
            'currency': 'currency',
            'deal': 'deal',
            'deal_name': 'deal name',
            'delay': 'delay',
            'denyreason': 'denyreason',
            'device': 'device',
            'devicetype': 'devicetype',
            'email': 'email',
            'emailaddrsha256': 'emailaddrsha256',
            'flow': 'flow',
            'flowstep': 'flowstep',
            'flowtype': 'flowtype',
            'impression': 'impression',
            'ip': 'ip',
            'latitude': 'latitude',
            'longitude': 'longitude',
            'optin': 'optin',
            'os': 'os',
            'resolution': 'resolution',
            'revenue': 'revenue',
            'role': 'role',
            'session': 'session',
            'site': 'site',
            'site_name': 'site name',
            'timestamp': 'timestamp',
            'total': 'total',
            'user': 'user',
            'userlanguage': 'userlanguage'
        }

        self._agent = agent
        self._browsertype = browsertype
        self._channel = channel
        self._click = click
        self._clicks = clicks
        self._code = code
        self._company = company
        self._contact = contact
        self._cost = cost
        self._costcurrency = costcurrency
        self._currency = currency
        self._deal = deal
        self._deal_name = deal_name
        self._delay = delay
        self._denyreason = denyreason
        self._device = device
        self._devicetype = devicetype
        self._email = email
        self._emailaddrsha256 = emailaddrsha256
        self._flow = flow
        self._flowstep = flowstep
        self._flowtype = flowtype
        self._impression = impression
        self._ip = ip
        self._latitude = latitude
        self._longitude = longitude
        self._optin = optin
        self._os = os
        self._resolution = resolution
        self._revenue = revenue
        self._role = role
        self._session = session
        self._site = site
        self._site_name = site_name
        self._timestamp = timestamp
        self._total = total
        self._user = user
        self._userlanguage = userlanguage

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EventRecord':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EventRecord of this EventRecord.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def agent(self):
        """Gets the agent of this EventRecord.


        :return: The agent of this EventRecord.
        :rtype: str
        """
        return self._agent

    @agent.setter
    def agent(self, agent):
        """Sets the agent of this EventRecord.


        :param agent: The agent of this EventRecord.
        :type agent: str
        """
        if agent is None:
            raise ValueError("Invalid value for `agent`, must not be `None`")

        self._agent = agent

    @property
    def browsertype(self):
        """Gets the browsertype of this EventRecord.


        :return: The browsertype of this EventRecord.
        :rtype: str
        """
        return self._browsertype

    @browsertype.setter
    def browsertype(self, browsertype):
        """Sets the browsertype of this EventRecord.


        :param browsertype: The browsertype of this EventRecord.
        :type browsertype: str
        """
        if browsertype is None:
            raise ValueError("Invalid value for `browsertype`, must not be `None`")

        self._browsertype = browsertype

    @property
    def channel(self):
        """Gets the channel of this EventRecord.


        :return: The channel of this EventRecord.
        :rtype: str
        """
        return self._channel

    @channel.setter
    def channel(self, channel):
        """Sets the channel of this EventRecord.


        :param channel: The channel of this EventRecord.
        :type channel: str
        """
        if channel is None:
            raise ValueError("Invalid value for `channel`, must not be `None`")

        self._channel = channel

    @property
    def click(self):
        """Gets the click of this EventRecord.


        :return: The click of this EventRecord.
        :rtype: str
        """
        return self._click

    @click.setter
    def click(self, click):
        """Sets the click of this EventRecord.


        :param click: The click of this EventRecord.
        :type click: str
        """
        if click is None:
            raise ValueError("Invalid value for `click`, must not be `None`")

        self._click = click

    @property
    def clicks(self):
        """Gets the clicks of this EventRecord.


        :return: The clicks of this EventRecord.
        :rtype: int
        """
        return self._clicks

    @clicks.setter
    def clicks(self, clicks):
        """Sets the clicks of this EventRecord.


        :param clicks: The clicks of this EventRecord.
        :type clicks: int
        """
        if clicks is None:
            raise ValueError("Invalid value for `clicks`, must not be `None`")

        self._clicks = clicks

    @property
    def code(self):
        """Gets the code of this EventRecord.


        :return: The code of this EventRecord.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this EventRecord.


        :param code: The code of this EventRecord.
        :type code: str
        """
        if code is None:
            raise ValueError("Invalid value for `code`, must not be `None`")

        self._code = code

    @property
    def company(self):
        """Gets the company of this EventRecord.


        :return: The company of this EventRecord.
        :rtype: str
        """
        return self._company

    @company.setter
    def company(self, company):
        """Sets the company of this EventRecord.


        :param company: The company of this EventRecord.
        :type company: str
        """
        if company is None:
            raise ValueError("Invalid value for `company`, must not be `None`")

        self._company = company

    @property
    def contact(self):
        """Gets the contact of this EventRecord.


        :return: The contact of this EventRecord.
        :rtype: str
        """
        return self._contact

    @contact.setter
    def contact(self, contact):
        """Sets the contact of this EventRecord.


        :param contact: The contact of this EventRecord.
        :type contact: str
        """
        if contact is None:
            raise ValueError("Invalid value for `contact`, must not be `None`")

        self._contact = contact

    @property
    def cost(self):
        """Gets the cost of this EventRecord.


        :return: The cost of this EventRecord.
        :rtype: float
        """
        return self._cost

    @cost.setter
    def cost(self, cost):
        """Sets the cost of this EventRecord.


        :param cost: The cost of this EventRecord.
        :type cost: float
        """
        if cost is None:
            raise ValueError("Invalid value for `cost`, must not be `None`")

        self._cost = cost

    @property
    def costcurrency(self):
        """Gets the costcurrency of this EventRecord.


        :return: The costcurrency of this EventRecord.
        :rtype: str
        """
        return self._costcurrency

    @costcurrency.setter
    def costcurrency(self, costcurrency):
        """Sets the costcurrency of this EventRecord.


        :param costcurrency: The costcurrency of this EventRecord.
        :type costcurrency: str
        """
        if costcurrency is None:
            raise ValueError("Invalid value for `costcurrency`, must not be `None`")

        self._costcurrency = costcurrency

    @property
    def currency(self):
        """Gets the currency of this EventRecord.


        :return: The currency of this EventRecord.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this EventRecord.


        :param currency: The currency of this EventRecord.
        :type currency: str
        """
        if currency is None:
            raise ValueError("Invalid value for `currency`, must not be `None`")

        self._currency = currency

    @property
    def deal(self):
        """Gets the deal of this EventRecord.


        :return: The deal of this EventRecord.
        :rtype: str
        """
        return self._deal

    @deal.setter
    def deal(self, deal):
        """Sets the deal of this EventRecord.


        :param deal: The deal of this EventRecord.
        :type deal: str
        """
        if deal is None:
            raise ValueError("Invalid value for `deal`, must not be `None`")

        self._deal = deal

    @property
    def deal_name(self):
        """Gets the deal_name of this EventRecord.


        :return: The deal_name of this EventRecord.
        :rtype: str
        """
        return self._deal_name

    @deal_name.setter
    def deal_name(self, deal_name):
        """Sets the deal_name of this EventRecord.


        :param deal_name: The deal_name of this EventRecord.
        :type deal_name: str
        """
        if deal_name is None:
            raise ValueError("Invalid value for `deal_name`, must not be `None`")

        self._deal_name = deal_name

    @property
    def delay(self):
        """Gets the delay of this EventRecord.


        :return: The delay of this EventRecord.
        :rtype: int
        """
        return self._delay

    @delay.setter
    def delay(self, delay):
        """Sets the delay of this EventRecord.


        :param delay: The delay of this EventRecord.
        :type delay: int
        """
        if delay is None:
            raise ValueError("Invalid value for `delay`, must not be `None`")

        self._delay = delay

    @property
    def denyreason(self):
        """Gets the denyreason of this EventRecord.


        :return: The denyreason of this EventRecord.
        :rtype: str
        """
        return self._denyreason

    @denyreason.setter
    def denyreason(self, denyreason):
        """Sets the denyreason of this EventRecord.


        :param denyreason: The denyreason of this EventRecord.
        :type denyreason: str
        """
        if denyreason is None:
            raise ValueError("Invalid value for `denyreason`, must not be `None`")

        self._denyreason = denyreason

    @property
    def device(self):
        """Gets the device of this EventRecord.


        :return: The device of this EventRecord.
        :rtype: str
        """
        return self._device

    @device.setter
    def device(self, device):
        """Sets the device of this EventRecord.


        :param device: The device of this EventRecord.
        :type device: str
        """
        if device is None:
            raise ValueError("Invalid value for `device`, must not be `None`")

        self._device = device

    @property
    def devicetype(self):
        """Gets the devicetype of this EventRecord.


        :return: The devicetype of this EventRecord.
        :rtype: str
        """
        return self._devicetype

    @devicetype.setter
    def devicetype(self, devicetype):
        """Sets the devicetype of this EventRecord.


        :param devicetype: The devicetype of this EventRecord.
        :type devicetype: str
        """
        if devicetype is None:
            raise ValueError("Invalid value for `devicetype`, must not be `None`")

        self._devicetype = devicetype

    @property
    def email(self):
        """Gets the email of this EventRecord.


        :return: The email of this EventRecord.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this EventRecord.


        :param email: The email of this EventRecord.
        :type email: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")

        self._email = email

    @property
    def emailaddrsha256(self):
        """Gets the emailaddrsha256 of this EventRecord.


        :return: The emailaddrsha256 of this EventRecord.
        :rtype: str
        """
        return self._emailaddrsha256

    @emailaddrsha256.setter
    def emailaddrsha256(self, emailaddrsha256):
        """Sets the emailaddrsha256 of this EventRecord.


        :param emailaddrsha256: The emailaddrsha256 of this EventRecord.
        :type emailaddrsha256: str
        """
        if emailaddrsha256 is None:
            raise ValueError("Invalid value for `emailaddrsha256`, must not be `None`")

        self._emailaddrsha256 = emailaddrsha256

    @property
    def flow(self):
        """Gets the flow of this EventRecord.


        :return: The flow of this EventRecord.
        :rtype: str
        """
        return self._flow

    @flow.setter
    def flow(self, flow):
        """Sets the flow of this EventRecord.


        :param flow: The flow of this EventRecord.
        :type flow: str
        """
        if flow is None:
            raise ValueError("Invalid value for `flow`, must not be `None`")

        self._flow = flow

    @property
    def flowstep(self):
        """Gets the flowstep of this EventRecord.


        :return: The flowstep of this EventRecord.
        :rtype: str
        """
        return self._flowstep

    @flowstep.setter
    def flowstep(self, flowstep):
        """Sets the flowstep of this EventRecord.


        :param flowstep: The flowstep of this EventRecord.
        :type flowstep: str
        """
        if flowstep is None:
            raise ValueError("Invalid value for `flowstep`, must not be `None`")

        self._flowstep = flowstep

    @property
    def flowtype(self):
        """Gets the flowtype of this EventRecord.


        :return: The flowtype of this EventRecord.
        :rtype: str
        """
        return self._flowtype

    @flowtype.setter
    def flowtype(self, flowtype):
        """Sets the flowtype of this EventRecord.


        :param flowtype: The flowtype of this EventRecord.
        :type flowtype: str
        """
        if flowtype is None:
            raise ValueError("Invalid value for `flowtype`, must not be `None`")

        self._flowtype = flowtype

    @property
    def impression(self):
        """Gets the impression of this EventRecord.


        :return: The impression of this EventRecord.
        :rtype: str
        """
        return self._impression

    @impression.setter
    def impression(self, impression):
        """Sets the impression of this EventRecord.


        :param impression: The impression of this EventRecord.
        :type impression: str
        """
        if impression is None:
            raise ValueError("Invalid value for `impression`, must not be `None`")

        self._impression = impression

    @property
    def ip(self):
        """Gets the ip of this EventRecord.


        :return: The ip of this EventRecord.
        :rtype: str
        """
        return self._ip

    @ip.setter
    def ip(self, ip):
        """Sets the ip of this EventRecord.


        :param ip: The ip of this EventRecord.
        :type ip: str
        """
        if ip is None:
            raise ValueError("Invalid value for `ip`, must not be `None`")

        self._ip = ip

    @property
    def latitude(self):
        """Gets the latitude of this EventRecord.


        :return: The latitude of this EventRecord.
        :rtype: str
        """
        return self._latitude

    @latitude.setter
    def latitude(self, latitude):
        """Sets the latitude of this EventRecord.


        :param latitude: The latitude of this EventRecord.
        :type latitude: str
        """
        if latitude is None:
            raise ValueError("Invalid value for `latitude`, must not be `None`")

        self._latitude = latitude

    @property
    def longitude(self):
        """Gets the longitude of this EventRecord.


        :return: The longitude of this EventRecord.
        :rtype: str
        """
        return self._longitude

    @longitude.setter
    def longitude(self, longitude):
        """Sets the longitude of this EventRecord.


        :param longitude: The longitude of this EventRecord.
        :type longitude: str
        """
        if longitude is None:
            raise ValueError("Invalid value for `longitude`, must not be `None`")

        self._longitude = longitude

    @property
    def optin(self):
        """Gets the optin of this EventRecord.


        :return: The optin of this EventRecord.
        :rtype: str
        """
        return self._optin

    @optin.setter
    def optin(self, optin):
        """Sets the optin of this EventRecord.


        :param optin: The optin of this EventRecord.
        :type optin: str
        """
        if optin is None:
            raise ValueError("Invalid value for `optin`, must not be `None`")

        self._optin = optin

    @property
    def os(self):
        """Gets the os of this EventRecord.


        :return: The os of this EventRecord.
        :rtype: str
        """
        return self._os

    @os.setter
    def os(self, os):
        """Sets the os of this EventRecord.


        :param os: The os of this EventRecord.
        :type os: str
        """
        if os is None:
            raise ValueError("Invalid value for `os`, must not be `None`")

        self._os = os

    @property
    def resolution(self):
        """Gets the resolution of this EventRecord.


        :return: The resolution of this EventRecord.
        :rtype: str
        """
        return self._resolution

    @resolution.setter
    def resolution(self, resolution):
        """Sets the resolution of this EventRecord.


        :param resolution: The resolution of this EventRecord.
        :type resolution: str
        """
        if resolution is None:
            raise ValueError("Invalid value for `resolution`, must not be `None`")

        self._resolution = resolution

    @property
    def revenue(self):
        """Gets the revenue of this EventRecord.


        :return: The revenue of this EventRecord.
        :rtype: float
        """
        return self._revenue

    @revenue.setter
    def revenue(self, revenue):
        """Sets the revenue of this EventRecord.


        :param revenue: The revenue of this EventRecord.
        :type revenue: float
        """
        if revenue is None:
            raise ValueError("Invalid value for `revenue`, must not be `None`")

        self._revenue = revenue

    @property
    def role(self):
        """Gets the role of this EventRecord.


        :return: The role of this EventRecord.
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this EventRecord.


        :param role: The role of this EventRecord.
        :type role: str
        """
        if role is None:
            raise ValueError("Invalid value for `role`, must not be `None`")

        self._role = role

    @property
    def session(self):
        """Gets the session of this EventRecord.


        :return: The session of this EventRecord.
        :rtype: str
        """
        return self._session

    @session.setter
    def session(self, session):
        """Sets the session of this EventRecord.


        :param session: The session of this EventRecord.
        :type session: str
        """
        if session is None:
            raise ValueError("Invalid value for `session`, must not be `None`")

        self._session = session

    @property
    def site(self):
        """Gets the site of this EventRecord.


        :return: The site of this EventRecord.
        :rtype: str
        """
        return self._site

    @site.setter
    def site(self, site):
        """Sets the site of this EventRecord.


        :param site: The site of this EventRecord.
        :type site: str
        """
        if site is None:
            raise ValueError("Invalid value for `site`, must not be `None`")

        self._site = site

    @property
    def site_name(self):
        """Gets the site_name of this EventRecord.


        :return: The site_name of this EventRecord.
        :rtype: str
        """
        return self._site_name

    @site_name.setter
    def site_name(self, site_name):
        """Sets the site_name of this EventRecord.


        :param site_name: The site_name of this EventRecord.
        :type site_name: str
        """
        if site_name is None:
            raise ValueError("Invalid value for `site_name`, must not be `None`")

        self._site_name = site_name

    @property
    def timestamp(self):
        """Gets the timestamp of this EventRecord.


        :return: The timestamp of this EventRecord.
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this EventRecord.


        :param timestamp: The timestamp of this EventRecord.
        :type timestamp: datetime
        """
        if timestamp is None:
            raise ValueError("Invalid value for `timestamp`, must not be `None`")

        self._timestamp = timestamp

    @property
    def total(self):
        """Gets the total of this EventRecord.


        :return: The total of this EventRecord.
        :rtype: float
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this EventRecord.


        :param total: The total of this EventRecord.
        :type total: float
        """
        if total is None:
            raise ValueError("Invalid value for `total`, must not be `None`")

        self._total = total

    @property
    def user(self):
        """Gets the user of this EventRecord.


        :return: The user of this EventRecord.
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this EventRecord.


        :param user: The user of this EventRecord.
        :type user: str
        """
        if user is None:
            raise ValueError("Invalid value for `user`, must not be `None`")

        self._user = user

    @property
    def userlanguage(self):
        """Gets the userlanguage of this EventRecord.


        :return: The userlanguage of this EventRecord.
        :rtype: str
        """
        return self._userlanguage

    @userlanguage.setter
    def userlanguage(self, userlanguage):
        """Sets the userlanguage of this EventRecord.


        :param userlanguage: The userlanguage of this EventRecord.
        :type userlanguage: str
        """
        if userlanguage is None:
            raise ValueError("Invalid value for `userlanguage`, must not be `None`")

        self._userlanguage = userlanguage
