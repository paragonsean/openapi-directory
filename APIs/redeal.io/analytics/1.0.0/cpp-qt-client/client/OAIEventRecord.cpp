/**
 * Redeal Analytics API
 * Access analytics for Redeal
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: hello@redeal.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEventRecord.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEventRecord::OAIEventRecord(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEventRecord::OAIEventRecord() {
    this->initializeModel();
}

OAIEventRecord::~OAIEventRecord() {}

void OAIEventRecord::initializeModel() {

    m_agent_isSet = false;
    m_agent_isValid = false;

    m_browsertype_isSet = false;
    m_browsertype_isValid = false;

    m_channel_isSet = false;
    m_channel_isValid = false;

    m_click_isSet = false;
    m_click_isValid = false;

    m_clicks_isSet = false;
    m_clicks_isValid = false;

    m_code_isSet = false;
    m_code_isValid = false;

    m_company_isSet = false;
    m_company_isValid = false;

    m_contact_isSet = false;
    m_contact_isValid = false;

    m_cost_isSet = false;
    m_cost_isValid = false;

    m_costcurrency_isSet = false;
    m_costcurrency_isValid = false;

    m_currency_isSet = false;
    m_currency_isValid = false;

    m_deal_isSet = false;
    m_deal_isValid = false;

    m_deal_name_isSet = false;
    m_deal_name_isValid = false;

    m_delay_isSet = false;
    m_delay_isValid = false;

    m_denyreason_isSet = false;
    m_denyreason_isValid = false;

    m_device_isSet = false;
    m_device_isValid = false;

    m_devicetype_isSet = false;
    m_devicetype_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_emailaddrsha256_isSet = false;
    m_emailaddrsha256_isValid = false;

    m_flow_isSet = false;
    m_flow_isValid = false;

    m_flowstep_isSet = false;
    m_flowstep_isValid = false;

    m_flowtype_isSet = false;
    m_flowtype_isValid = false;

    m_impression_isSet = false;
    m_impression_isValid = false;

    m_ip_isSet = false;
    m_ip_isValid = false;

    m_latitude_isSet = false;
    m_latitude_isValid = false;

    m_longitude_isSet = false;
    m_longitude_isValid = false;

    m_optin_isSet = false;
    m_optin_isValid = false;

    m_os_isSet = false;
    m_os_isValid = false;

    m_resolution_isSet = false;
    m_resolution_isValid = false;

    m_revenue_isSet = false;
    m_revenue_isValid = false;

    m_role_isSet = false;
    m_role_isValid = false;

    m_session_isSet = false;
    m_session_isValid = false;

    m_site_isSet = false;
    m_site_isValid = false;

    m_site_name_isSet = false;
    m_site_name_isValid = false;

    m_timestamp_isSet = false;
    m_timestamp_isValid = false;

    m_total_isSet = false;
    m_total_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;

    m_userlanguage_isSet = false;
    m_userlanguage_isValid = false;
}

void OAIEventRecord::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEventRecord::fromJsonObject(QJsonObject json) {

    m_agent_isValid = ::OpenAPI::fromJsonValue(m_agent, json[QString("agent")]);
    m_agent_isSet = !json[QString("agent")].isNull() && m_agent_isValid;

    m_browsertype_isValid = ::OpenAPI::fromJsonValue(m_browsertype, json[QString("browsertype")]);
    m_browsertype_isSet = !json[QString("browsertype")].isNull() && m_browsertype_isValid;

    m_channel_isValid = ::OpenAPI::fromJsonValue(m_channel, json[QString("channel")]);
    m_channel_isSet = !json[QString("channel")].isNull() && m_channel_isValid;

    m_click_isValid = ::OpenAPI::fromJsonValue(m_click, json[QString("click")]);
    m_click_isSet = !json[QString("click")].isNull() && m_click_isValid;

    m_clicks_isValid = ::OpenAPI::fromJsonValue(m_clicks, json[QString("clicks")]);
    m_clicks_isSet = !json[QString("clicks")].isNull() && m_clicks_isValid;

    m_code_isValid = ::OpenAPI::fromJsonValue(m_code, json[QString("code")]);
    m_code_isSet = !json[QString("code")].isNull() && m_code_isValid;

    m_company_isValid = ::OpenAPI::fromJsonValue(m_company, json[QString("company")]);
    m_company_isSet = !json[QString("company")].isNull() && m_company_isValid;

    m_contact_isValid = ::OpenAPI::fromJsonValue(m_contact, json[QString("contact")]);
    m_contact_isSet = !json[QString("contact")].isNull() && m_contact_isValid;

    m_cost_isValid = ::OpenAPI::fromJsonValue(m_cost, json[QString("cost")]);
    m_cost_isSet = !json[QString("cost")].isNull() && m_cost_isValid;

    m_costcurrency_isValid = ::OpenAPI::fromJsonValue(m_costcurrency, json[QString("costcurrency")]);
    m_costcurrency_isSet = !json[QString("costcurrency")].isNull() && m_costcurrency_isValid;

    m_currency_isValid = ::OpenAPI::fromJsonValue(m_currency, json[QString("currency")]);
    m_currency_isSet = !json[QString("currency")].isNull() && m_currency_isValid;

    m_deal_isValid = ::OpenAPI::fromJsonValue(m_deal, json[QString("deal")]);
    m_deal_isSet = !json[QString("deal")].isNull() && m_deal_isValid;

    m_deal_name_isValid = ::OpenAPI::fromJsonValue(m_deal_name, json[QString("deal name")]);
    m_deal_name_isSet = !json[QString("deal name")].isNull() && m_deal_name_isValid;

    m_delay_isValid = ::OpenAPI::fromJsonValue(m_delay, json[QString("delay")]);
    m_delay_isSet = !json[QString("delay")].isNull() && m_delay_isValid;

    m_denyreason_isValid = ::OpenAPI::fromJsonValue(m_denyreason, json[QString("denyreason")]);
    m_denyreason_isSet = !json[QString("denyreason")].isNull() && m_denyreason_isValid;

    m_device_isValid = ::OpenAPI::fromJsonValue(m_device, json[QString("device")]);
    m_device_isSet = !json[QString("device")].isNull() && m_device_isValid;

    m_devicetype_isValid = ::OpenAPI::fromJsonValue(m_devicetype, json[QString("devicetype")]);
    m_devicetype_isSet = !json[QString("devicetype")].isNull() && m_devicetype_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_emailaddrsha256_isValid = ::OpenAPI::fromJsonValue(m_emailaddrsha256, json[QString("emailaddrsha256")]);
    m_emailaddrsha256_isSet = !json[QString("emailaddrsha256")].isNull() && m_emailaddrsha256_isValid;

    m_flow_isValid = ::OpenAPI::fromJsonValue(m_flow, json[QString("flow")]);
    m_flow_isSet = !json[QString("flow")].isNull() && m_flow_isValid;

    m_flowstep_isValid = ::OpenAPI::fromJsonValue(m_flowstep, json[QString("flowstep")]);
    m_flowstep_isSet = !json[QString("flowstep")].isNull() && m_flowstep_isValid;

    m_flowtype_isValid = ::OpenAPI::fromJsonValue(m_flowtype, json[QString("flowtype")]);
    m_flowtype_isSet = !json[QString("flowtype")].isNull() && m_flowtype_isValid;

    m_impression_isValid = ::OpenAPI::fromJsonValue(m_impression, json[QString("impression")]);
    m_impression_isSet = !json[QString("impression")].isNull() && m_impression_isValid;

    m_ip_isValid = ::OpenAPI::fromJsonValue(m_ip, json[QString("ip")]);
    m_ip_isSet = !json[QString("ip")].isNull() && m_ip_isValid;

    m_latitude_isValid = ::OpenAPI::fromJsonValue(m_latitude, json[QString("latitude")]);
    m_latitude_isSet = !json[QString("latitude")].isNull() && m_latitude_isValid;

    m_longitude_isValid = ::OpenAPI::fromJsonValue(m_longitude, json[QString("longitude")]);
    m_longitude_isSet = !json[QString("longitude")].isNull() && m_longitude_isValid;

    m_optin_isValid = ::OpenAPI::fromJsonValue(m_optin, json[QString("optin")]);
    m_optin_isSet = !json[QString("optin")].isNull() && m_optin_isValid;

    m_os_isValid = ::OpenAPI::fromJsonValue(m_os, json[QString("os")]);
    m_os_isSet = !json[QString("os")].isNull() && m_os_isValid;

    m_resolution_isValid = ::OpenAPI::fromJsonValue(m_resolution, json[QString("resolution")]);
    m_resolution_isSet = !json[QString("resolution")].isNull() && m_resolution_isValid;

    m_revenue_isValid = ::OpenAPI::fromJsonValue(m_revenue, json[QString("revenue")]);
    m_revenue_isSet = !json[QString("revenue")].isNull() && m_revenue_isValid;

    m_role_isValid = ::OpenAPI::fromJsonValue(m_role, json[QString("role")]);
    m_role_isSet = !json[QString("role")].isNull() && m_role_isValid;

    m_session_isValid = ::OpenAPI::fromJsonValue(m_session, json[QString("session")]);
    m_session_isSet = !json[QString("session")].isNull() && m_session_isValid;

    m_site_isValid = ::OpenAPI::fromJsonValue(m_site, json[QString("site")]);
    m_site_isSet = !json[QString("site")].isNull() && m_site_isValid;

    m_site_name_isValid = ::OpenAPI::fromJsonValue(m_site_name, json[QString("site name")]);
    m_site_name_isSet = !json[QString("site name")].isNull() && m_site_name_isValid;

    m_timestamp_isValid = ::OpenAPI::fromJsonValue(m_timestamp, json[QString("timestamp")]);
    m_timestamp_isSet = !json[QString("timestamp")].isNull() && m_timestamp_isValid;

    m_total_isValid = ::OpenAPI::fromJsonValue(m_total, json[QString("total")]);
    m_total_isSet = !json[QString("total")].isNull() && m_total_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;

    m_userlanguage_isValid = ::OpenAPI::fromJsonValue(m_userlanguage, json[QString("userlanguage")]);
    m_userlanguage_isSet = !json[QString("userlanguage")].isNull() && m_userlanguage_isValid;
}

QString OAIEventRecord::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEventRecord::asJsonObject() const {
    QJsonObject obj;
    if (m_agent_isSet) {
        obj.insert(QString("agent"), ::OpenAPI::toJsonValue(m_agent));
    }
    if (m_browsertype_isSet) {
        obj.insert(QString("browsertype"), ::OpenAPI::toJsonValue(m_browsertype));
    }
    if (m_channel_isSet) {
        obj.insert(QString("channel"), ::OpenAPI::toJsonValue(m_channel));
    }
    if (m_click_isSet) {
        obj.insert(QString("click"), ::OpenAPI::toJsonValue(m_click));
    }
    if (m_clicks_isSet) {
        obj.insert(QString("clicks"), ::OpenAPI::toJsonValue(m_clicks));
    }
    if (m_code_isSet) {
        obj.insert(QString("code"), ::OpenAPI::toJsonValue(m_code));
    }
    if (m_company_isSet) {
        obj.insert(QString("company"), ::OpenAPI::toJsonValue(m_company));
    }
    if (m_contact_isSet) {
        obj.insert(QString("contact"), ::OpenAPI::toJsonValue(m_contact));
    }
    if (m_cost_isSet) {
        obj.insert(QString("cost"), ::OpenAPI::toJsonValue(m_cost));
    }
    if (m_costcurrency_isSet) {
        obj.insert(QString("costcurrency"), ::OpenAPI::toJsonValue(m_costcurrency));
    }
    if (m_currency_isSet) {
        obj.insert(QString("currency"), ::OpenAPI::toJsonValue(m_currency));
    }
    if (m_deal_isSet) {
        obj.insert(QString("deal"), ::OpenAPI::toJsonValue(m_deal));
    }
    if (m_deal_name_isSet) {
        obj.insert(QString("deal name"), ::OpenAPI::toJsonValue(m_deal_name));
    }
    if (m_delay_isSet) {
        obj.insert(QString("delay"), ::OpenAPI::toJsonValue(m_delay));
    }
    if (m_denyreason_isSet) {
        obj.insert(QString("denyreason"), ::OpenAPI::toJsonValue(m_denyreason));
    }
    if (m_device_isSet) {
        obj.insert(QString("device"), ::OpenAPI::toJsonValue(m_device));
    }
    if (m_devicetype_isSet) {
        obj.insert(QString("devicetype"), ::OpenAPI::toJsonValue(m_devicetype));
    }
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_emailaddrsha256_isSet) {
        obj.insert(QString("emailaddrsha256"), ::OpenAPI::toJsonValue(m_emailaddrsha256));
    }
    if (m_flow_isSet) {
        obj.insert(QString("flow"), ::OpenAPI::toJsonValue(m_flow));
    }
    if (m_flowstep_isSet) {
        obj.insert(QString("flowstep"), ::OpenAPI::toJsonValue(m_flowstep));
    }
    if (m_flowtype_isSet) {
        obj.insert(QString("flowtype"), ::OpenAPI::toJsonValue(m_flowtype));
    }
    if (m_impression_isSet) {
        obj.insert(QString("impression"), ::OpenAPI::toJsonValue(m_impression));
    }
    if (m_ip_isSet) {
        obj.insert(QString("ip"), ::OpenAPI::toJsonValue(m_ip));
    }
    if (m_latitude_isSet) {
        obj.insert(QString("latitude"), ::OpenAPI::toJsonValue(m_latitude));
    }
    if (m_longitude_isSet) {
        obj.insert(QString("longitude"), ::OpenAPI::toJsonValue(m_longitude));
    }
    if (m_optin_isSet) {
        obj.insert(QString("optin"), ::OpenAPI::toJsonValue(m_optin));
    }
    if (m_os_isSet) {
        obj.insert(QString("os"), ::OpenAPI::toJsonValue(m_os));
    }
    if (m_resolution_isSet) {
        obj.insert(QString("resolution"), ::OpenAPI::toJsonValue(m_resolution));
    }
    if (m_revenue_isSet) {
        obj.insert(QString("revenue"), ::OpenAPI::toJsonValue(m_revenue));
    }
    if (m_role_isSet) {
        obj.insert(QString("role"), ::OpenAPI::toJsonValue(m_role));
    }
    if (m_session_isSet) {
        obj.insert(QString("session"), ::OpenAPI::toJsonValue(m_session));
    }
    if (m_site_isSet) {
        obj.insert(QString("site"), ::OpenAPI::toJsonValue(m_site));
    }
    if (m_site_name_isSet) {
        obj.insert(QString("site name"), ::OpenAPI::toJsonValue(m_site_name));
    }
    if (m_timestamp_isSet) {
        obj.insert(QString("timestamp"), ::OpenAPI::toJsonValue(m_timestamp));
    }
    if (m_total_isSet) {
        obj.insert(QString("total"), ::OpenAPI::toJsonValue(m_total));
    }
    if (m_user_isSet) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    if (m_userlanguage_isSet) {
        obj.insert(QString("userlanguage"), ::OpenAPI::toJsonValue(m_userlanguage));
    }
    return obj;
}

QString OAIEventRecord::getAgent() const {
    return m_agent;
}
void OAIEventRecord::setAgent(const QString &agent) {
    m_agent = agent;
    m_agent_isSet = true;
}

bool OAIEventRecord::is_agent_Set() const{
    return m_agent_isSet;
}

bool OAIEventRecord::is_agent_Valid() const{
    return m_agent_isValid;
}

QString OAIEventRecord::getBrowsertype() const {
    return m_browsertype;
}
void OAIEventRecord::setBrowsertype(const QString &browsertype) {
    m_browsertype = browsertype;
    m_browsertype_isSet = true;
}

bool OAIEventRecord::is_browsertype_Set() const{
    return m_browsertype_isSet;
}

bool OAIEventRecord::is_browsertype_Valid() const{
    return m_browsertype_isValid;
}

QString OAIEventRecord::getChannel() const {
    return m_channel;
}
void OAIEventRecord::setChannel(const QString &channel) {
    m_channel = channel;
    m_channel_isSet = true;
}

bool OAIEventRecord::is_channel_Set() const{
    return m_channel_isSet;
}

bool OAIEventRecord::is_channel_Valid() const{
    return m_channel_isValid;
}

QString OAIEventRecord::getClick() const {
    return m_click;
}
void OAIEventRecord::setClick(const QString &click) {
    m_click = click;
    m_click_isSet = true;
}

bool OAIEventRecord::is_click_Set() const{
    return m_click_isSet;
}

bool OAIEventRecord::is_click_Valid() const{
    return m_click_isValid;
}

qint32 OAIEventRecord::getClicks() const {
    return m_clicks;
}
void OAIEventRecord::setClicks(const qint32 &clicks) {
    m_clicks = clicks;
    m_clicks_isSet = true;
}

bool OAIEventRecord::is_clicks_Set() const{
    return m_clicks_isSet;
}

bool OAIEventRecord::is_clicks_Valid() const{
    return m_clicks_isValid;
}

QString OAIEventRecord::getCode() const {
    return m_code;
}
void OAIEventRecord::setCode(const QString &code) {
    m_code = code;
    m_code_isSet = true;
}

bool OAIEventRecord::is_code_Set() const{
    return m_code_isSet;
}

bool OAIEventRecord::is_code_Valid() const{
    return m_code_isValid;
}

QString OAIEventRecord::getCompany() const {
    return m_company;
}
void OAIEventRecord::setCompany(const QString &company) {
    m_company = company;
    m_company_isSet = true;
}

bool OAIEventRecord::is_company_Set() const{
    return m_company_isSet;
}

bool OAIEventRecord::is_company_Valid() const{
    return m_company_isValid;
}

QString OAIEventRecord::getContact() const {
    return m_contact;
}
void OAIEventRecord::setContact(const QString &contact) {
    m_contact = contact;
    m_contact_isSet = true;
}

bool OAIEventRecord::is_contact_Set() const{
    return m_contact_isSet;
}

bool OAIEventRecord::is_contact_Valid() const{
    return m_contact_isValid;
}

double OAIEventRecord::getCost() const {
    return m_cost;
}
void OAIEventRecord::setCost(const double &cost) {
    m_cost = cost;
    m_cost_isSet = true;
}

bool OAIEventRecord::is_cost_Set() const{
    return m_cost_isSet;
}

bool OAIEventRecord::is_cost_Valid() const{
    return m_cost_isValid;
}

QString OAIEventRecord::getCostcurrency() const {
    return m_costcurrency;
}
void OAIEventRecord::setCostcurrency(const QString &costcurrency) {
    m_costcurrency = costcurrency;
    m_costcurrency_isSet = true;
}

bool OAIEventRecord::is_costcurrency_Set() const{
    return m_costcurrency_isSet;
}

bool OAIEventRecord::is_costcurrency_Valid() const{
    return m_costcurrency_isValid;
}

QString OAIEventRecord::getCurrency() const {
    return m_currency;
}
void OAIEventRecord::setCurrency(const QString &currency) {
    m_currency = currency;
    m_currency_isSet = true;
}

bool OAIEventRecord::is_currency_Set() const{
    return m_currency_isSet;
}

bool OAIEventRecord::is_currency_Valid() const{
    return m_currency_isValid;
}

QString OAIEventRecord::getDeal() const {
    return m_deal;
}
void OAIEventRecord::setDeal(const QString &deal) {
    m_deal = deal;
    m_deal_isSet = true;
}

bool OAIEventRecord::is_deal_Set() const{
    return m_deal_isSet;
}

bool OAIEventRecord::is_deal_Valid() const{
    return m_deal_isValid;
}

QString OAIEventRecord::getDealName() const {
    return m_deal_name;
}
void OAIEventRecord::setDealName(const QString &deal_name) {
    m_deal_name = deal_name;
    m_deal_name_isSet = true;
}

bool OAIEventRecord::is_deal_name_Set() const{
    return m_deal_name_isSet;
}

bool OAIEventRecord::is_deal_name_Valid() const{
    return m_deal_name_isValid;
}

qint32 OAIEventRecord::getDelay() const {
    return m_delay;
}
void OAIEventRecord::setDelay(const qint32 &delay) {
    m_delay = delay;
    m_delay_isSet = true;
}

bool OAIEventRecord::is_delay_Set() const{
    return m_delay_isSet;
}

bool OAIEventRecord::is_delay_Valid() const{
    return m_delay_isValid;
}

QString OAIEventRecord::getDenyreason() const {
    return m_denyreason;
}
void OAIEventRecord::setDenyreason(const QString &denyreason) {
    m_denyreason = denyreason;
    m_denyreason_isSet = true;
}

bool OAIEventRecord::is_denyreason_Set() const{
    return m_denyreason_isSet;
}

bool OAIEventRecord::is_denyreason_Valid() const{
    return m_denyreason_isValid;
}

QString OAIEventRecord::getDevice() const {
    return m_device;
}
void OAIEventRecord::setDevice(const QString &device) {
    m_device = device;
    m_device_isSet = true;
}

bool OAIEventRecord::is_device_Set() const{
    return m_device_isSet;
}

bool OAIEventRecord::is_device_Valid() const{
    return m_device_isValid;
}

QString OAIEventRecord::getDevicetype() const {
    return m_devicetype;
}
void OAIEventRecord::setDevicetype(const QString &devicetype) {
    m_devicetype = devicetype;
    m_devicetype_isSet = true;
}

bool OAIEventRecord::is_devicetype_Set() const{
    return m_devicetype_isSet;
}

bool OAIEventRecord::is_devicetype_Valid() const{
    return m_devicetype_isValid;
}

QString OAIEventRecord::getEmail() const {
    return m_email;
}
void OAIEventRecord::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAIEventRecord::is_email_Set() const{
    return m_email_isSet;
}

bool OAIEventRecord::is_email_Valid() const{
    return m_email_isValid;
}

QString OAIEventRecord::getEmailaddrsha256() const {
    return m_emailaddrsha256;
}
void OAIEventRecord::setEmailaddrsha256(const QString &emailaddrsha256) {
    m_emailaddrsha256 = emailaddrsha256;
    m_emailaddrsha256_isSet = true;
}

bool OAIEventRecord::is_emailaddrsha256_Set() const{
    return m_emailaddrsha256_isSet;
}

bool OAIEventRecord::is_emailaddrsha256_Valid() const{
    return m_emailaddrsha256_isValid;
}

QString OAIEventRecord::getFlow() const {
    return m_flow;
}
void OAIEventRecord::setFlow(const QString &flow) {
    m_flow = flow;
    m_flow_isSet = true;
}

bool OAIEventRecord::is_flow_Set() const{
    return m_flow_isSet;
}

bool OAIEventRecord::is_flow_Valid() const{
    return m_flow_isValid;
}

QString OAIEventRecord::getFlowstep() const {
    return m_flowstep;
}
void OAIEventRecord::setFlowstep(const QString &flowstep) {
    m_flowstep = flowstep;
    m_flowstep_isSet = true;
}

bool OAIEventRecord::is_flowstep_Set() const{
    return m_flowstep_isSet;
}

bool OAIEventRecord::is_flowstep_Valid() const{
    return m_flowstep_isValid;
}

QString OAIEventRecord::getFlowtype() const {
    return m_flowtype;
}
void OAIEventRecord::setFlowtype(const QString &flowtype) {
    m_flowtype = flowtype;
    m_flowtype_isSet = true;
}

bool OAIEventRecord::is_flowtype_Set() const{
    return m_flowtype_isSet;
}

bool OAIEventRecord::is_flowtype_Valid() const{
    return m_flowtype_isValid;
}

QString OAIEventRecord::getImpression() const {
    return m_impression;
}
void OAIEventRecord::setImpression(const QString &impression) {
    m_impression = impression;
    m_impression_isSet = true;
}

bool OAIEventRecord::is_impression_Set() const{
    return m_impression_isSet;
}

bool OAIEventRecord::is_impression_Valid() const{
    return m_impression_isValid;
}

QString OAIEventRecord::getIp() const {
    return m_ip;
}
void OAIEventRecord::setIp(const QString &ip) {
    m_ip = ip;
    m_ip_isSet = true;
}

bool OAIEventRecord::is_ip_Set() const{
    return m_ip_isSet;
}

bool OAIEventRecord::is_ip_Valid() const{
    return m_ip_isValid;
}

QString OAIEventRecord::getLatitude() const {
    return m_latitude;
}
void OAIEventRecord::setLatitude(const QString &latitude) {
    m_latitude = latitude;
    m_latitude_isSet = true;
}

bool OAIEventRecord::is_latitude_Set() const{
    return m_latitude_isSet;
}

bool OAIEventRecord::is_latitude_Valid() const{
    return m_latitude_isValid;
}

QString OAIEventRecord::getLongitude() const {
    return m_longitude;
}
void OAIEventRecord::setLongitude(const QString &longitude) {
    m_longitude = longitude;
    m_longitude_isSet = true;
}

bool OAIEventRecord::is_longitude_Set() const{
    return m_longitude_isSet;
}

bool OAIEventRecord::is_longitude_Valid() const{
    return m_longitude_isValid;
}

QString OAIEventRecord::getOptin() const {
    return m_optin;
}
void OAIEventRecord::setOptin(const QString &optin) {
    m_optin = optin;
    m_optin_isSet = true;
}

bool OAIEventRecord::is_optin_Set() const{
    return m_optin_isSet;
}

bool OAIEventRecord::is_optin_Valid() const{
    return m_optin_isValid;
}

QString OAIEventRecord::getOs() const {
    return m_os;
}
void OAIEventRecord::setOs(const QString &os) {
    m_os = os;
    m_os_isSet = true;
}

bool OAIEventRecord::is_os_Set() const{
    return m_os_isSet;
}

bool OAIEventRecord::is_os_Valid() const{
    return m_os_isValid;
}

QString OAIEventRecord::getResolution() const {
    return m_resolution;
}
void OAIEventRecord::setResolution(const QString &resolution) {
    m_resolution = resolution;
    m_resolution_isSet = true;
}

bool OAIEventRecord::is_resolution_Set() const{
    return m_resolution_isSet;
}

bool OAIEventRecord::is_resolution_Valid() const{
    return m_resolution_isValid;
}

double OAIEventRecord::getRevenue() const {
    return m_revenue;
}
void OAIEventRecord::setRevenue(const double &revenue) {
    m_revenue = revenue;
    m_revenue_isSet = true;
}

bool OAIEventRecord::is_revenue_Set() const{
    return m_revenue_isSet;
}

bool OAIEventRecord::is_revenue_Valid() const{
    return m_revenue_isValid;
}

QString OAIEventRecord::getRole() const {
    return m_role;
}
void OAIEventRecord::setRole(const QString &role) {
    m_role = role;
    m_role_isSet = true;
}

bool OAIEventRecord::is_role_Set() const{
    return m_role_isSet;
}

bool OAIEventRecord::is_role_Valid() const{
    return m_role_isValid;
}

QString OAIEventRecord::getSession() const {
    return m_session;
}
void OAIEventRecord::setSession(const QString &session) {
    m_session = session;
    m_session_isSet = true;
}

bool OAIEventRecord::is_session_Set() const{
    return m_session_isSet;
}

bool OAIEventRecord::is_session_Valid() const{
    return m_session_isValid;
}

QString OAIEventRecord::getSite() const {
    return m_site;
}
void OAIEventRecord::setSite(const QString &site) {
    m_site = site;
    m_site_isSet = true;
}

bool OAIEventRecord::is_site_Set() const{
    return m_site_isSet;
}

bool OAIEventRecord::is_site_Valid() const{
    return m_site_isValid;
}

QString OAIEventRecord::getSiteName() const {
    return m_site_name;
}
void OAIEventRecord::setSiteName(const QString &site_name) {
    m_site_name = site_name;
    m_site_name_isSet = true;
}

bool OAIEventRecord::is_site_name_Set() const{
    return m_site_name_isSet;
}

bool OAIEventRecord::is_site_name_Valid() const{
    return m_site_name_isValid;
}

QDateTime OAIEventRecord::getTimestamp() const {
    return m_timestamp;
}
void OAIEventRecord::setTimestamp(const QDateTime &timestamp) {
    m_timestamp = timestamp;
    m_timestamp_isSet = true;
}

bool OAIEventRecord::is_timestamp_Set() const{
    return m_timestamp_isSet;
}

bool OAIEventRecord::is_timestamp_Valid() const{
    return m_timestamp_isValid;
}

double OAIEventRecord::getTotal() const {
    return m_total;
}
void OAIEventRecord::setTotal(const double &total) {
    m_total = total;
    m_total_isSet = true;
}

bool OAIEventRecord::is_total_Set() const{
    return m_total_isSet;
}

bool OAIEventRecord::is_total_Valid() const{
    return m_total_isValid;
}

QString OAIEventRecord::getUser() const {
    return m_user;
}
void OAIEventRecord::setUser(const QString &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAIEventRecord::is_user_Set() const{
    return m_user_isSet;
}

bool OAIEventRecord::is_user_Valid() const{
    return m_user_isValid;
}

QString OAIEventRecord::getUserlanguage() const {
    return m_userlanguage;
}
void OAIEventRecord::setUserlanguage(const QString &userlanguage) {
    m_userlanguage = userlanguage;
    m_userlanguage_isSet = true;
}

bool OAIEventRecord::is_userlanguage_Set() const{
    return m_userlanguage_isSet;
}

bool OAIEventRecord::is_userlanguage_Valid() const{
    return m_userlanguage_isValid;
}

bool OAIEventRecord::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_agent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_browsertype_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_channel_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_click_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_clicks_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_company_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_contact_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cost_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_costcurrency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deal_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deal_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_delay_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_denyreason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_devicetype_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_emailaddrsha256_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_flow_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_flowstep_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_flowtype_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_impression_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_latitude_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_longitude_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_optin_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_os_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resolution_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_revenue_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_session_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_site_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_site_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_userlanguage_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEventRecord::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_agent_isValid && m_browsertype_isValid && m_channel_isValid && m_click_isValid && m_clicks_isValid && m_code_isValid && m_company_isValid && m_contact_isValid && m_cost_isValid && m_costcurrency_isValid && m_currency_isValid && m_deal_isValid && m_deal_name_isValid && m_delay_isValid && m_denyreason_isValid && m_device_isValid && m_devicetype_isValid && m_email_isValid && m_emailaddrsha256_isValid && m_flow_isValid && m_flowstep_isValid && m_flowtype_isValid && m_impression_isValid && m_ip_isValid && m_latitude_isValid && m_longitude_isValid && m_optin_isValid && m_os_isValid && m_resolution_isValid && m_revenue_isValid && m_role_isValid && m_session_isValid && m_site_isValid && m_site_name_isValid && m_timestamp_isValid && m_total_isValid && m_user_isValid && m_userlanguage_isValid && true;
}

} // namespace OpenAPI
