/**
 * Google Pay Passes API
 * API for issuers to save and manage Google Wallet Objects.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICardRowTwoItems.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICardRowTwoItems::OAICardRowTwoItems(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICardRowTwoItems::OAICardRowTwoItems() {
    this->initializeModel();
}

OAICardRowTwoItems::~OAICardRowTwoItems() {}

void OAICardRowTwoItems::initializeModel() {

    m_end_item_isSet = false;
    m_end_item_isValid = false;

    m_start_item_isSet = false;
    m_start_item_isValid = false;
}

void OAICardRowTwoItems::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICardRowTwoItems::fromJsonObject(QJsonObject json) {

    m_end_item_isValid = ::OpenAPI::fromJsonValue(m_end_item, json[QString("endItem")]);
    m_end_item_isSet = !json[QString("endItem")].isNull() && m_end_item_isValid;

    m_start_item_isValid = ::OpenAPI::fromJsonValue(m_start_item, json[QString("startItem")]);
    m_start_item_isSet = !json[QString("startItem")].isNull() && m_start_item_isValid;
}

QString OAICardRowTwoItems::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICardRowTwoItems::asJsonObject() const {
    QJsonObject obj;
    if (m_end_item.isSet()) {
        obj.insert(QString("endItem"), ::OpenAPI::toJsonValue(m_end_item));
    }
    if (m_start_item.isSet()) {
        obj.insert(QString("startItem"), ::OpenAPI::toJsonValue(m_start_item));
    }
    return obj;
}

OAITemplateItem OAICardRowTwoItems::getEndItem() const {
    return m_end_item;
}
void OAICardRowTwoItems::setEndItem(const OAITemplateItem &end_item) {
    m_end_item = end_item;
    m_end_item_isSet = true;
}

bool OAICardRowTwoItems::is_end_item_Set() const{
    return m_end_item_isSet;
}

bool OAICardRowTwoItems::is_end_item_Valid() const{
    return m_end_item_isValid;
}

OAITemplateItem OAICardRowTwoItems::getStartItem() const {
    return m_start_item;
}
void OAICardRowTwoItems::setStartItem(const OAITemplateItem &start_item) {
    m_start_item = start_item;
    m_start_item_isSet = true;
}

bool OAICardRowTwoItems::is_start_item_Set() const{
    return m_start_item_isSet;
}

bool OAICardRowTwoItems::is_start_item_Valid() const{
    return m_start_item_isValid;
}

bool OAICardRowTwoItems::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_end_item.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_item.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICardRowTwoItems::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
