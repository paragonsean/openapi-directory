/**
 * Google Pay Passes API
 * API for issuers to save and manage Google Wallet Objects.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGenericObject.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGenericObject::OAIGenericObject(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGenericObject::OAIGenericObject() {
    this->initializeModel();
}

OAIGenericObject::~OAIGenericObject() {}

void OAIGenericObject::initializeModel() {

    m_app_link_data_isSet = false;
    m_app_link_data_isValid = false;

    m_barcode_isSet = false;
    m_barcode_isValid = false;

    m_card_title_isSet = false;
    m_card_title_isValid = false;

    m_class_id_isSet = false;
    m_class_id_isValid = false;

    m_generic_type_isSet = false;
    m_generic_type_isValid = false;

    m_grouping_info_isSet = false;
    m_grouping_info_isValid = false;

    m_has_users_isSet = false;
    m_has_users_isValid = false;

    m_header_isSet = false;
    m_header_isValid = false;

    m_hero_image_isSet = false;
    m_hero_image_isValid = false;

    m_hex_background_color_isSet = false;
    m_hex_background_color_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_image_modules_data_isSet = false;
    m_image_modules_data_isValid = false;

    m_links_module_data_isSet = false;
    m_links_module_data_isValid = false;

    m_logo_isSet = false;
    m_logo_isValid = false;

    m_notifications_isSet = false;
    m_notifications_isValid = false;

    m_pass_constraints_isSet = false;
    m_pass_constraints_isValid = false;

    m_rotating_barcode_isSet = false;
    m_rotating_barcode_isValid = false;

    m_smart_tap_redemption_value_isSet = false;
    m_smart_tap_redemption_value_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_subheader_isSet = false;
    m_subheader_isValid = false;

    m_text_modules_data_isSet = false;
    m_text_modules_data_isValid = false;

    m_valid_time_interval_isSet = false;
    m_valid_time_interval_isValid = false;
}

void OAIGenericObject::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGenericObject::fromJsonObject(QJsonObject json) {

    m_app_link_data_isValid = ::OpenAPI::fromJsonValue(m_app_link_data, json[QString("appLinkData")]);
    m_app_link_data_isSet = !json[QString("appLinkData")].isNull() && m_app_link_data_isValid;

    m_barcode_isValid = ::OpenAPI::fromJsonValue(m_barcode, json[QString("barcode")]);
    m_barcode_isSet = !json[QString("barcode")].isNull() && m_barcode_isValid;

    m_card_title_isValid = ::OpenAPI::fromJsonValue(m_card_title, json[QString("cardTitle")]);
    m_card_title_isSet = !json[QString("cardTitle")].isNull() && m_card_title_isValid;

    m_class_id_isValid = ::OpenAPI::fromJsonValue(m_class_id, json[QString("classId")]);
    m_class_id_isSet = !json[QString("classId")].isNull() && m_class_id_isValid;

    m_generic_type_isValid = ::OpenAPI::fromJsonValue(m_generic_type, json[QString("genericType")]);
    m_generic_type_isSet = !json[QString("genericType")].isNull() && m_generic_type_isValid;

    m_grouping_info_isValid = ::OpenAPI::fromJsonValue(m_grouping_info, json[QString("groupingInfo")]);
    m_grouping_info_isSet = !json[QString("groupingInfo")].isNull() && m_grouping_info_isValid;

    m_has_users_isValid = ::OpenAPI::fromJsonValue(m_has_users, json[QString("hasUsers")]);
    m_has_users_isSet = !json[QString("hasUsers")].isNull() && m_has_users_isValid;

    m_header_isValid = ::OpenAPI::fromJsonValue(m_header, json[QString("header")]);
    m_header_isSet = !json[QString("header")].isNull() && m_header_isValid;

    m_hero_image_isValid = ::OpenAPI::fromJsonValue(m_hero_image, json[QString("heroImage")]);
    m_hero_image_isSet = !json[QString("heroImage")].isNull() && m_hero_image_isValid;

    m_hex_background_color_isValid = ::OpenAPI::fromJsonValue(m_hex_background_color, json[QString("hexBackgroundColor")]);
    m_hex_background_color_isSet = !json[QString("hexBackgroundColor")].isNull() && m_hex_background_color_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_image_modules_data_isValid = ::OpenAPI::fromJsonValue(m_image_modules_data, json[QString("imageModulesData")]);
    m_image_modules_data_isSet = !json[QString("imageModulesData")].isNull() && m_image_modules_data_isValid;

    m_links_module_data_isValid = ::OpenAPI::fromJsonValue(m_links_module_data, json[QString("linksModuleData")]);
    m_links_module_data_isSet = !json[QString("linksModuleData")].isNull() && m_links_module_data_isValid;

    m_logo_isValid = ::OpenAPI::fromJsonValue(m_logo, json[QString("logo")]);
    m_logo_isSet = !json[QString("logo")].isNull() && m_logo_isValid;

    m_notifications_isValid = ::OpenAPI::fromJsonValue(m_notifications, json[QString("notifications")]);
    m_notifications_isSet = !json[QString("notifications")].isNull() && m_notifications_isValid;

    m_pass_constraints_isValid = ::OpenAPI::fromJsonValue(m_pass_constraints, json[QString("passConstraints")]);
    m_pass_constraints_isSet = !json[QString("passConstraints")].isNull() && m_pass_constraints_isValid;

    m_rotating_barcode_isValid = ::OpenAPI::fromJsonValue(m_rotating_barcode, json[QString("rotatingBarcode")]);
    m_rotating_barcode_isSet = !json[QString("rotatingBarcode")].isNull() && m_rotating_barcode_isValid;

    m_smart_tap_redemption_value_isValid = ::OpenAPI::fromJsonValue(m_smart_tap_redemption_value, json[QString("smartTapRedemptionValue")]);
    m_smart_tap_redemption_value_isSet = !json[QString("smartTapRedemptionValue")].isNull() && m_smart_tap_redemption_value_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_subheader_isValid = ::OpenAPI::fromJsonValue(m_subheader, json[QString("subheader")]);
    m_subheader_isSet = !json[QString("subheader")].isNull() && m_subheader_isValid;

    m_text_modules_data_isValid = ::OpenAPI::fromJsonValue(m_text_modules_data, json[QString("textModulesData")]);
    m_text_modules_data_isSet = !json[QString("textModulesData")].isNull() && m_text_modules_data_isValid;

    m_valid_time_interval_isValid = ::OpenAPI::fromJsonValue(m_valid_time_interval, json[QString("validTimeInterval")]);
    m_valid_time_interval_isSet = !json[QString("validTimeInterval")].isNull() && m_valid_time_interval_isValid;
}

QString OAIGenericObject::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGenericObject::asJsonObject() const {
    QJsonObject obj;
    if (m_app_link_data.isSet()) {
        obj.insert(QString("appLinkData"), ::OpenAPI::toJsonValue(m_app_link_data));
    }
    if (m_barcode.isSet()) {
        obj.insert(QString("barcode"), ::OpenAPI::toJsonValue(m_barcode));
    }
    if (m_card_title.isSet()) {
        obj.insert(QString("cardTitle"), ::OpenAPI::toJsonValue(m_card_title));
    }
    if (m_class_id_isSet) {
        obj.insert(QString("classId"), ::OpenAPI::toJsonValue(m_class_id));
    }
    if (m_generic_type_isSet) {
        obj.insert(QString("genericType"), ::OpenAPI::toJsonValue(m_generic_type));
    }
    if (m_grouping_info.isSet()) {
        obj.insert(QString("groupingInfo"), ::OpenAPI::toJsonValue(m_grouping_info));
    }
    if (m_has_users_isSet) {
        obj.insert(QString("hasUsers"), ::OpenAPI::toJsonValue(m_has_users));
    }
    if (m_header.isSet()) {
        obj.insert(QString("header"), ::OpenAPI::toJsonValue(m_header));
    }
    if (m_hero_image.isSet()) {
        obj.insert(QString("heroImage"), ::OpenAPI::toJsonValue(m_hero_image));
    }
    if (m_hex_background_color_isSet) {
        obj.insert(QString("hexBackgroundColor"), ::OpenAPI::toJsonValue(m_hex_background_color));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_image_modules_data.size() > 0) {
        obj.insert(QString("imageModulesData"), ::OpenAPI::toJsonValue(m_image_modules_data));
    }
    if (m_links_module_data.isSet()) {
        obj.insert(QString("linksModuleData"), ::OpenAPI::toJsonValue(m_links_module_data));
    }
    if (m_logo.isSet()) {
        obj.insert(QString("logo"), ::OpenAPI::toJsonValue(m_logo));
    }
    if (m_notifications.isSet()) {
        obj.insert(QString("notifications"), ::OpenAPI::toJsonValue(m_notifications));
    }
    if (m_pass_constraints.isSet()) {
        obj.insert(QString("passConstraints"), ::OpenAPI::toJsonValue(m_pass_constraints));
    }
    if (m_rotating_barcode.isSet()) {
        obj.insert(QString("rotatingBarcode"), ::OpenAPI::toJsonValue(m_rotating_barcode));
    }
    if (m_smart_tap_redemption_value_isSet) {
        obj.insert(QString("smartTapRedemptionValue"), ::OpenAPI::toJsonValue(m_smart_tap_redemption_value));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_subheader.isSet()) {
        obj.insert(QString("subheader"), ::OpenAPI::toJsonValue(m_subheader));
    }
    if (m_text_modules_data.size() > 0) {
        obj.insert(QString("textModulesData"), ::OpenAPI::toJsonValue(m_text_modules_data));
    }
    if (m_valid_time_interval.isSet()) {
        obj.insert(QString("validTimeInterval"), ::OpenAPI::toJsonValue(m_valid_time_interval));
    }
    return obj;
}

OAIAppLinkData OAIGenericObject::getAppLinkData() const {
    return m_app_link_data;
}
void OAIGenericObject::setAppLinkData(const OAIAppLinkData &app_link_data) {
    m_app_link_data = app_link_data;
    m_app_link_data_isSet = true;
}

bool OAIGenericObject::is_app_link_data_Set() const{
    return m_app_link_data_isSet;
}

bool OAIGenericObject::is_app_link_data_Valid() const{
    return m_app_link_data_isValid;
}

OAIBarcode OAIGenericObject::getBarcode() const {
    return m_barcode;
}
void OAIGenericObject::setBarcode(const OAIBarcode &barcode) {
    m_barcode = barcode;
    m_barcode_isSet = true;
}

bool OAIGenericObject::is_barcode_Set() const{
    return m_barcode_isSet;
}

bool OAIGenericObject::is_barcode_Valid() const{
    return m_barcode_isValid;
}

OAILocalizedString OAIGenericObject::getCardTitle() const {
    return m_card_title;
}
void OAIGenericObject::setCardTitle(const OAILocalizedString &card_title) {
    m_card_title = card_title;
    m_card_title_isSet = true;
}

bool OAIGenericObject::is_card_title_Set() const{
    return m_card_title_isSet;
}

bool OAIGenericObject::is_card_title_Valid() const{
    return m_card_title_isValid;
}

QString OAIGenericObject::getClassId() const {
    return m_class_id;
}
void OAIGenericObject::setClassId(const QString &class_id) {
    m_class_id = class_id;
    m_class_id_isSet = true;
}

bool OAIGenericObject::is_class_id_Set() const{
    return m_class_id_isSet;
}

bool OAIGenericObject::is_class_id_Valid() const{
    return m_class_id_isValid;
}

QString OAIGenericObject::getGenericType() const {
    return m_generic_type;
}
void OAIGenericObject::setGenericType(const QString &generic_type) {
    m_generic_type = generic_type;
    m_generic_type_isSet = true;
}

bool OAIGenericObject::is_generic_type_Set() const{
    return m_generic_type_isSet;
}

bool OAIGenericObject::is_generic_type_Valid() const{
    return m_generic_type_isValid;
}

OAIGroupingInfo OAIGenericObject::getGroupingInfo() const {
    return m_grouping_info;
}
void OAIGenericObject::setGroupingInfo(const OAIGroupingInfo &grouping_info) {
    m_grouping_info = grouping_info;
    m_grouping_info_isSet = true;
}

bool OAIGenericObject::is_grouping_info_Set() const{
    return m_grouping_info_isSet;
}

bool OAIGenericObject::is_grouping_info_Valid() const{
    return m_grouping_info_isValid;
}

bool OAIGenericObject::isHasUsers() const {
    return m_has_users;
}
void OAIGenericObject::setHasUsers(const bool &has_users) {
    m_has_users = has_users;
    m_has_users_isSet = true;
}

bool OAIGenericObject::is_has_users_Set() const{
    return m_has_users_isSet;
}

bool OAIGenericObject::is_has_users_Valid() const{
    return m_has_users_isValid;
}

OAILocalizedString OAIGenericObject::getHeader() const {
    return m_header;
}
void OAIGenericObject::setHeader(const OAILocalizedString &header) {
    m_header = header;
    m_header_isSet = true;
}

bool OAIGenericObject::is_header_Set() const{
    return m_header_isSet;
}

bool OAIGenericObject::is_header_Valid() const{
    return m_header_isValid;
}

OAIImage OAIGenericObject::getHeroImage() const {
    return m_hero_image;
}
void OAIGenericObject::setHeroImage(const OAIImage &hero_image) {
    m_hero_image = hero_image;
    m_hero_image_isSet = true;
}

bool OAIGenericObject::is_hero_image_Set() const{
    return m_hero_image_isSet;
}

bool OAIGenericObject::is_hero_image_Valid() const{
    return m_hero_image_isValid;
}

QString OAIGenericObject::getHexBackgroundColor() const {
    return m_hex_background_color;
}
void OAIGenericObject::setHexBackgroundColor(const QString &hex_background_color) {
    m_hex_background_color = hex_background_color;
    m_hex_background_color_isSet = true;
}

bool OAIGenericObject::is_hex_background_color_Set() const{
    return m_hex_background_color_isSet;
}

bool OAIGenericObject::is_hex_background_color_Valid() const{
    return m_hex_background_color_isValid;
}

QString OAIGenericObject::getId() const {
    return m_id;
}
void OAIGenericObject::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIGenericObject::is_id_Set() const{
    return m_id_isSet;
}

bool OAIGenericObject::is_id_Valid() const{
    return m_id_isValid;
}

QList<OAIImageModuleData> OAIGenericObject::getImageModulesData() const {
    return m_image_modules_data;
}
void OAIGenericObject::setImageModulesData(const QList<OAIImageModuleData> &image_modules_data) {
    m_image_modules_data = image_modules_data;
    m_image_modules_data_isSet = true;
}

bool OAIGenericObject::is_image_modules_data_Set() const{
    return m_image_modules_data_isSet;
}

bool OAIGenericObject::is_image_modules_data_Valid() const{
    return m_image_modules_data_isValid;
}

OAILinksModuleData OAIGenericObject::getLinksModuleData() const {
    return m_links_module_data;
}
void OAIGenericObject::setLinksModuleData(const OAILinksModuleData &links_module_data) {
    m_links_module_data = links_module_data;
    m_links_module_data_isSet = true;
}

bool OAIGenericObject::is_links_module_data_Set() const{
    return m_links_module_data_isSet;
}

bool OAIGenericObject::is_links_module_data_Valid() const{
    return m_links_module_data_isValid;
}

OAIImage OAIGenericObject::getLogo() const {
    return m_logo;
}
void OAIGenericObject::setLogo(const OAIImage &logo) {
    m_logo = logo;
    m_logo_isSet = true;
}

bool OAIGenericObject::is_logo_Set() const{
    return m_logo_isSet;
}

bool OAIGenericObject::is_logo_Valid() const{
    return m_logo_isValid;
}

OAINotifications OAIGenericObject::getNotifications() const {
    return m_notifications;
}
void OAIGenericObject::setNotifications(const OAINotifications &notifications) {
    m_notifications = notifications;
    m_notifications_isSet = true;
}

bool OAIGenericObject::is_notifications_Set() const{
    return m_notifications_isSet;
}

bool OAIGenericObject::is_notifications_Valid() const{
    return m_notifications_isValid;
}

OAIPassConstraints OAIGenericObject::getPassConstraints() const {
    return m_pass_constraints;
}
void OAIGenericObject::setPassConstraints(const OAIPassConstraints &pass_constraints) {
    m_pass_constraints = pass_constraints;
    m_pass_constraints_isSet = true;
}

bool OAIGenericObject::is_pass_constraints_Set() const{
    return m_pass_constraints_isSet;
}

bool OAIGenericObject::is_pass_constraints_Valid() const{
    return m_pass_constraints_isValid;
}

OAIRotatingBarcode OAIGenericObject::getRotatingBarcode() const {
    return m_rotating_barcode;
}
void OAIGenericObject::setRotatingBarcode(const OAIRotatingBarcode &rotating_barcode) {
    m_rotating_barcode = rotating_barcode;
    m_rotating_barcode_isSet = true;
}

bool OAIGenericObject::is_rotating_barcode_Set() const{
    return m_rotating_barcode_isSet;
}

bool OAIGenericObject::is_rotating_barcode_Valid() const{
    return m_rotating_barcode_isValid;
}

QString OAIGenericObject::getSmartTapRedemptionValue() const {
    return m_smart_tap_redemption_value;
}
void OAIGenericObject::setSmartTapRedemptionValue(const QString &smart_tap_redemption_value) {
    m_smart_tap_redemption_value = smart_tap_redemption_value;
    m_smart_tap_redemption_value_isSet = true;
}

bool OAIGenericObject::is_smart_tap_redemption_value_Set() const{
    return m_smart_tap_redemption_value_isSet;
}

bool OAIGenericObject::is_smart_tap_redemption_value_Valid() const{
    return m_smart_tap_redemption_value_isValid;
}

QString OAIGenericObject::getState() const {
    return m_state;
}
void OAIGenericObject::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIGenericObject::is_state_Set() const{
    return m_state_isSet;
}

bool OAIGenericObject::is_state_Valid() const{
    return m_state_isValid;
}

OAILocalizedString OAIGenericObject::getSubheader() const {
    return m_subheader;
}
void OAIGenericObject::setSubheader(const OAILocalizedString &subheader) {
    m_subheader = subheader;
    m_subheader_isSet = true;
}

bool OAIGenericObject::is_subheader_Set() const{
    return m_subheader_isSet;
}

bool OAIGenericObject::is_subheader_Valid() const{
    return m_subheader_isValid;
}

QList<OAITextModuleData> OAIGenericObject::getTextModulesData() const {
    return m_text_modules_data;
}
void OAIGenericObject::setTextModulesData(const QList<OAITextModuleData> &text_modules_data) {
    m_text_modules_data = text_modules_data;
    m_text_modules_data_isSet = true;
}

bool OAIGenericObject::is_text_modules_data_Set() const{
    return m_text_modules_data_isSet;
}

bool OAIGenericObject::is_text_modules_data_Valid() const{
    return m_text_modules_data_isValid;
}

OAITimeInterval OAIGenericObject::getValidTimeInterval() const {
    return m_valid_time_interval;
}
void OAIGenericObject::setValidTimeInterval(const OAITimeInterval &valid_time_interval) {
    m_valid_time_interval = valid_time_interval;
    m_valid_time_interval_isSet = true;
}

bool OAIGenericObject::is_valid_time_interval_Set() const{
    return m_valid_time_interval_isSet;
}

bool OAIGenericObject::is_valid_time_interval_Valid() const{
    return m_valid_time_interval_isValid;
}

bool OAIGenericObject::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_app_link_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_barcode.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_card_title.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_class_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_generic_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_grouping_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_users_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_header.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_hero_image.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_hex_background_color_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_modules_data.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_links_module_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_logo.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_notifications.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_pass_constraints.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_rotating_barcode.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_smart_tap_redemption_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subheader.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_modules_data.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_valid_time_interval.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGenericObject::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
