/**
 * Google Pay Passes API
 * API for issuers to save and manage Google Wallet Objects.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITicketSeat.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITicketSeat::OAITicketSeat(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITicketSeat::OAITicketSeat() {
    this->initializeModel();
}

OAITicketSeat::~OAITicketSeat() {}

void OAITicketSeat::initializeModel() {

    m_coach_isSet = false;
    m_coach_isValid = false;

    m_custom_fare_class_isSet = false;
    m_custom_fare_class_isValid = false;

    m_fare_class_isSet = false;
    m_fare_class_isValid = false;

    m_seat_isSet = false;
    m_seat_isValid = false;

    m_seat_assignment_isSet = false;
    m_seat_assignment_isValid = false;
}

void OAITicketSeat::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITicketSeat::fromJsonObject(QJsonObject json) {

    m_coach_isValid = ::OpenAPI::fromJsonValue(m_coach, json[QString("coach")]);
    m_coach_isSet = !json[QString("coach")].isNull() && m_coach_isValid;

    m_custom_fare_class_isValid = ::OpenAPI::fromJsonValue(m_custom_fare_class, json[QString("customFareClass")]);
    m_custom_fare_class_isSet = !json[QString("customFareClass")].isNull() && m_custom_fare_class_isValid;

    m_fare_class_isValid = ::OpenAPI::fromJsonValue(m_fare_class, json[QString("fareClass")]);
    m_fare_class_isSet = !json[QString("fareClass")].isNull() && m_fare_class_isValid;

    m_seat_isValid = ::OpenAPI::fromJsonValue(m_seat, json[QString("seat")]);
    m_seat_isSet = !json[QString("seat")].isNull() && m_seat_isValid;

    m_seat_assignment_isValid = ::OpenAPI::fromJsonValue(m_seat_assignment, json[QString("seatAssignment")]);
    m_seat_assignment_isSet = !json[QString("seatAssignment")].isNull() && m_seat_assignment_isValid;
}

QString OAITicketSeat::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITicketSeat::asJsonObject() const {
    QJsonObject obj;
    if (m_coach_isSet) {
        obj.insert(QString("coach"), ::OpenAPI::toJsonValue(m_coach));
    }
    if (m_custom_fare_class.isSet()) {
        obj.insert(QString("customFareClass"), ::OpenAPI::toJsonValue(m_custom_fare_class));
    }
    if (m_fare_class_isSet) {
        obj.insert(QString("fareClass"), ::OpenAPI::toJsonValue(m_fare_class));
    }
    if (m_seat_isSet) {
        obj.insert(QString("seat"), ::OpenAPI::toJsonValue(m_seat));
    }
    if (m_seat_assignment.isSet()) {
        obj.insert(QString("seatAssignment"), ::OpenAPI::toJsonValue(m_seat_assignment));
    }
    return obj;
}

QString OAITicketSeat::getCoach() const {
    return m_coach;
}
void OAITicketSeat::setCoach(const QString &coach) {
    m_coach = coach;
    m_coach_isSet = true;
}

bool OAITicketSeat::is_coach_Set() const{
    return m_coach_isSet;
}

bool OAITicketSeat::is_coach_Valid() const{
    return m_coach_isValid;
}

OAILocalizedString OAITicketSeat::getCustomFareClass() const {
    return m_custom_fare_class;
}
void OAITicketSeat::setCustomFareClass(const OAILocalizedString &custom_fare_class) {
    m_custom_fare_class = custom_fare_class;
    m_custom_fare_class_isSet = true;
}

bool OAITicketSeat::is_custom_fare_class_Set() const{
    return m_custom_fare_class_isSet;
}

bool OAITicketSeat::is_custom_fare_class_Valid() const{
    return m_custom_fare_class_isValid;
}

QString OAITicketSeat::getFareClass() const {
    return m_fare_class;
}
void OAITicketSeat::setFareClass(const QString &fare_class) {
    m_fare_class = fare_class;
    m_fare_class_isSet = true;
}

bool OAITicketSeat::is_fare_class_Set() const{
    return m_fare_class_isSet;
}

bool OAITicketSeat::is_fare_class_Valid() const{
    return m_fare_class_isValid;
}

QString OAITicketSeat::getSeat() const {
    return m_seat;
}
void OAITicketSeat::setSeat(const QString &seat) {
    m_seat = seat;
    m_seat_isSet = true;
}

bool OAITicketSeat::is_seat_Set() const{
    return m_seat_isSet;
}

bool OAITicketSeat::is_seat_Valid() const{
    return m_seat_isValid;
}

OAILocalizedString OAITicketSeat::getSeatAssignment() const {
    return m_seat_assignment;
}
void OAITicketSeat::setSeatAssignment(const OAILocalizedString &seat_assignment) {
    m_seat_assignment = seat_assignment;
    m_seat_assignment_isSet = true;
}

bool OAITicketSeat::is_seat_assignment_Set() const{
    return m_seat_assignment_isSet;
}

bool OAITicketSeat::is_seat_assignment_Valid() const{
    return m_seat_assignment_isValid;
}

bool OAITicketSeat::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_coach_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_fare_class.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_fare_class_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_seat_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_seat_assignment.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITicketSeat::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
