/**
 * Google Pay Passes API
 * API for issuers to save and manage Google Wallet Objects.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILoyaltyClass.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILoyaltyClass::OAILoyaltyClass(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILoyaltyClass::OAILoyaltyClass() {
    this->initializeModel();
}

OAILoyaltyClass::~OAILoyaltyClass() {}

void OAILoyaltyClass::initializeModel() {

    m_account_id_label_isSet = false;
    m_account_id_label_isValid = false;

    m_account_name_label_isSet = false;
    m_account_name_label_isValid = false;

    m_allow_multiple_users_per_object_isSet = false;
    m_allow_multiple_users_per_object_isValid = false;

    m_callback_options_isSet = false;
    m_callback_options_isValid = false;

    m_class_template_info_isSet = false;
    m_class_template_info_isValid = false;

    m_country_code_isSet = false;
    m_country_code_isValid = false;

    m_discoverable_program_isSet = false;
    m_discoverable_program_isValid = false;

    m_enable_smart_tap_isSet = false;
    m_enable_smart_tap_isValid = false;

    m_hero_image_isSet = false;
    m_hero_image_isValid = false;

    m_hex_background_color_isSet = false;
    m_hex_background_color_isValid = false;

    m_homepage_uri_isSet = false;
    m_homepage_uri_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_image_modules_data_isSet = false;
    m_image_modules_data_isValid = false;

    m_info_module_data_isSet = false;
    m_info_module_data_isValid = false;

    m_issuer_name_isSet = false;
    m_issuer_name_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_links_module_data_isSet = false;
    m_links_module_data_isValid = false;

    m_localized_account_id_label_isSet = false;
    m_localized_account_id_label_isValid = false;

    m_localized_account_name_label_isSet = false;
    m_localized_account_name_label_isValid = false;

    m_localized_issuer_name_isSet = false;
    m_localized_issuer_name_isValid = false;

    m_localized_program_name_isSet = false;
    m_localized_program_name_isValid = false;

    m_localized_rewards_tier_isSet = false;
    m_localized_rewards_tier_isValid = false;

    m_localized_rewards_tier_label_isSet = false;
    m_localized_rewards_tier_label_isValid = false;

    m_localized_secondary_rewards_tier_isSet = false;
    m_localized_secondary_rewards_tier_isValid = false;

    m_localized_secondary_rewards_tier_label_isSet = false;
    m_localized_secondary_rewards_tier_label_isValid = false;

    m_locations_isSet = false;
    m_locations_isValid = false;

    m_messages_isSet = false;
    m_messages_isValid = false;

    m_multiple_devices_and_holders_allowed_status_isSet = false;
    m_multiple_devices_and_holders_allowed_status_isValid = false;

    m_program_logo_isSet = false;
    m_program_logo_isValid = false;

    m_program_name_isSet = false;
    m_program_name_isValid = false;

    m_redemption_issuers_isSet = false;
    m_redemption_issuers_isValid = false;

    m_review_isSet = false;
    m_review_isValid = false;

    m_review_status_isSet = false;
    m_review_status_isValid = false;

    m_rewards_tier_isSet = false;
    m_rewards_tier_isValid = false;

    m_rewards_tier_label_isSet = false;
    m_rewards_tier_label_isValid = false;

    m_secondary_rewards_tier_isSet = false;
    m_secondary_rewards_tier_isValid = false;

    m_secondary_rewards_tier_label_isSet = false;
    m_secondary_rewards_tier_label_isValid = false;

    m_security_animation_isSet = false;
    m_security_animation_isValid = false;

    m_text_modules_data_isSet = false;
    m_text_modules_data_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;

    m_view_unlock_requirement_isSet = false;
    m_view_unlock_requirement_isValid = false;

    m_word_mark_isSet = false;
    m_word_mark_isValid = false;
}

void OAILoyaltyClass::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILoyaltyClass::fromJsonObject(QJsonObject json) {

    m_account_id_label_isValid = ::OpenAPI::fromJsonValue(m_account_id_label, json[QString("accountIdLabel")]);
    m_account_id_label_isSet = !json[QString("accountIdLabel")].isNull() && m_account_id_label_isValid;

    m_account_name_label_isValid = ::OpenAPI::fromJsonValue(m_account_name_label, json[QString("accountNameLabel")]);
    m_account_name_label_isSet = !json[QString("accountNameLabel")].isNull() && m_account_name_label_isValid;

    m_allow_multiple_users_per_object_isValid = ::OpenAPI::fromJsonValue(m_allow_multiple_users_per_object, json[QString("allowMultipleUsersPerObject")]);
    m_allow_multiple_users_per_object_isSet = !json[QString("allowMultipleUsersPerObject")].isNull() && m_allow_multiple_users_per_object_isValid;

    m_callback_options_isValid = ::OpenAPI::fromJsonValue(m_callback_options, json[QString("callbackOptions")]);
    m_callback_options_isSet = !json[QString("callbackOptions")].isNull() && m_callback_options_isValid;

    m_class_template_info_isValid = ::OpenAPI::fromJsonValue(m_class_template_info, json[QString("classTemplateInfo")]);
    m_class_template_info_isSet = !json[QString("classTemplateInfo")].isNull() && m_class_template_info_isValid;

    m_country_code_isValid = ::OpenAPI::fromJsonValue(m_country_code, json[QString("countryCode")]);
    m_country_code_isSet = !json[QString("countryCode")].isNull() && m_country_code_isValid;

    m_discoverable_program_isValid = ::OpenAPI::fromJsonValue(m_discoverable_program, json[QString("discoverableProgram")]);
    m_discoverable_program_isSet = !json[QString("discoverableProgram")].isNull() && m_discoverable_program_isValid;

    m_enable_smart_tap_isValid = ::OpenAPI::fromJsonValue(m_enable_smart_tap, json[QString("enableSmartTap")]);
    m_enable_smart_tap_isSet = !json[QString("enableSmartTap")].isNull() && m_enable_smart_tap_isValid;

    m_hero_image_isValid = ::OpenAPI::fromJsonValue(m_hero_image, json[QString("heroImage")]);
    m_hero_image_isSet = !json[QString("heroImage")].isNull() && m_hero_image_isValid;

    m_hex_background_color_isValid = ::OpenAPI::fromJsonValue(m_hex_background_color, json[QString("hexBackgroundColor")]);
    m_hex_background_color_isSet = !json[QString("hexBackgroundColor")].isNull() && m_hex_background_color_isValid;

    m_homepage_uri_isValid = ::OpenAPI::fromJsonValue(m_homepage_uri, json[QString("homepageUri")]);
    m_homepage_uri_isSet = !json[QString("homepageUri")].isNull() && m_homepage_uri_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_image_modules_data_isValid = ::OpenAPI::fromJsonValue(m_image_modules_data, json[QString("imageModulesData")]);
    m_image_modules_data_isSet = !json[QString("imageModulesData")].isNull() && m_image_modules_data_isValid;

    m_info_module_data_isValid = ::OpenAPI::fromJsonValue(m_info_module_data, json[QString("infoModuleData")]);
    m_info_module_data_isSet = !json[QString("infoModuleData")].isNull() && m_info_module_data_isValid;

    m_issuer_name_isValid = ::OpenAPI::fromJsonValue(m_issuer_name, json[QString("issuerName")]);
    m_issuer_name_isSet = !json[QString("issuerName")].isNull() && m_issuer_name_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_links_module_data_isValid = ::OpenAPI::fromJsonValue(m_links_module_data, json[QString("linksModuleData")]);
    m_links_module_data_isSet = !json[QString("linksModuleData")].isNull() && m_links_module_data_isValid;

    m_localized_account_id_label_isValid = ::OpenAPI::fromJsonValue(m_localized_account_id_label, json[QString("localizedAccountIdLabel")]);
    m_localized_account_id_label_isSet = !json[QString("localizedAccountIdLabel")].isNull() && m_localized_account_id_label_isValid;

    m_localized_account_name_label_isValid = ::OpenAPI::fromJsonValue(m_localized_account_name_label, json[QString("localizedAccountNameLabel")]);
    m_localized_account_name_label_isSet = !json[QString("localizedAccountNameLabel")].isNull() && m_localized_account_name_label_isValid;

    m_localized_issuer_name_isValid = ::OpenAPI::fromJsonValue(m_localized_issuer_name, json[QString("localizedIssuerName")]);
    m_localized_issuer_name_isSet = !json[QString("localizedIssuerName")].isNull() && m_localized_issuer_name_isValid;

    m_localized_program_name_isValid = ::OpenAPI::fromJsonValue(m_localized_program_name, json[QString("localizedProgramName")]);
    m_localized_program_name_isSet = !json[QString("localizedProgramName")].isNull() && m_localized_program_name_isValid;

    m_localized_rewards_tier_isValid = ::OpenAPI::fromJsonValue(m_localized_rewards_tier, json[QString("localizedRewardsTier")]);
    m_localized_rewards_tier_isSet = !json[QString("localizedRewardsTier")].isNull() && m_localized_rewards_tier_isValid;

    m_localized_rewards_tier_label_isValid = ::OpenAPI::fromJsonValue(m_localized_rewards_tier_label, json[QString("localizedRewardsTierLabel")]);
    m_localized_rewards_tier_label_isSet = !json[QString("localizedRewardsTierLabel")].isNull() && m_localized_rewards_tier_label_isValid;

    m_localized_secondary_rewards_tier_isValid = ::OpenAPI::fromJsonValue(m_localized_secondary_rewards_tier, json[QString("localizedSecondaryRewardsTier")]);
    m_localized_secondary_rewards_tier_isSet = !json[QString("localizedSecondaryRewardsTier")].isNull() && m_localized_secondary_rewards_tier_isValid;

    m_localized_secondary_rewards_tier_label_isValid = ::OpenAPI::fromJsonValue(m_localized_secondary_rewards_tier_label, json[QString("localizedSecondaryRewardsTierLabel")]);
    m_localized_secondary_rewards_tier_label_isSet = !json[QString("localizedSecondaryRewardsTierLabel")].isNull() && m_localized_secondary_rewards_tier_label_isValid;

    m_locations_isValid = ::OpenAPI::fromJsonValue(m_locations, json[QString("locations")]);
    m_locations_isSet = !json[QString("locations")].isNull() && m_locations_isValid;

    m_messages_isValid = ::OpenAPI::fromJsonValue(m_messages, json[QString("messages")]);
    m_messages_isSet = !json[QString("messages")].isNull() && m_messages_isValid;

    m_multiple_devices_and_holders_allowed_status_isValid = ::OpenAPI::fromJsonValue(m_multiple_devices_and_holders_allowed_status, json[QString("multipleDevicesAndHoldersAllowedStatus")]);
    m_multiple_devices_and_holders_allowed_status_isSet = !json[QString("multipleDevicesAndHoldersAllowedStatus")].isNull() && m_multiple_devices_and_holders_allowed_status_isValid;

    m_program_logo_isValid = ::OpenAPI::fromJsonValue(m_program_logo, json[QString("programLogo")]);
    m_program_logo_isSet = !json[QString("programLogo")].isNull() && m_program_logo_isValid;

    m_program_name_isValid = ::OpenAPI::fromJsonValue(m_program_name, json[QString("programName")]);
    m_program_name_isSet = !json[QString("programName")].isNull() && m_program_name_isValid;

    m_redemption_issuers_isValid = ::OpenAPI::fromJsonValue(m_redemption_issuers, json[QString("redemptionIssuers")]);
    m_redemption_issuers_isSet = !json[QString("redemptionIssuers")].isNull() && m_redemption_issuers_isValid;

    m_review_isValid = ::OpenAPI::fromJsonValue(m_review, json[QString("review")]);
    m_review_isSet = !json[QString("review")].isNull() && m_review_isValid;

    m_review_status_isValid = ::OpenAPI::fromJsonValue(m_review_status, json[QString("reviewStatus")]);
    m_review_status_isSet = !json[QString("reviewStatus")].isNull() && m_review_status_isValid;

    m_rewards_tier_isValid = ::OpenAPI::fromJsonValue(m_rewards_tier, json[QString("rewardsTier")]);
    m_rewards_tier_isSet = !json[QString("rewardsTier")].isNull() && m_rewards_tier_isValid;

    m_rewards_tier_label_isValid = ::OpenAPI::fromJsonValue(m_rewards_tier_label, json[QString("rewardsTierLabel")]);
    m_rewards_tier_label_isSet = !json[QString("rewardsTierLabel")].isNull() && m_rewards_tier_label_isValid;

    m_secondary_rewards_tier_isValid = ::OpenAPI::fromJsonValue(m_secondary_rewards_tier, json[QString("secondaryRewardsTier")]);
    m_secondary_rewards_tier_isSet = !json[QString("secondaryRewardsTier")].isNull() && m_secondary_rewards_tier_isValid;

    m_secondary_rewards_tier_label_isValid = ::OpenAPI::fromJsonValue(m_secondary_rewards_tier_label, json[QString("secondaryRewardsTierLabel")]);
    m_secondary_rewards_tier_label_isSet = !json[QString("secondaryRewardsTierLabel")].isNull() && m_secondary_rewards_tier_label_isValid;

    m_security_animation_isValid = ::OpenAPI::fromJsonValue(m_security_animation, json[QString("securityAnimation")]);
    m_security_animation_isSet = !json[QString("securityAnimation")].isNull() && m_security_animation_isValid;

    m_text_modules_data_isValid = ::OpenAPI::fromJsonValue(m_text_modules_data, json[QString("textModulesData")]);
    m_text_modules_data_isSet = !json[QString("textModulesData")].isNull() && m_text_modules_data_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;

    m_view_unlock_requirement_isValid = ::OpenAPI::fromJsonValue(m_view_unlock_requirement, json[QString("viewUnlockRequirement")]);
    m_view_unlock_requirement_isSet = !json[QString("viewUnlockRequirement")].isNull() && m_view_unlock_requirement_isValid;

    m_word_mark_isValid = ::OpenAPI::fromJsonValue(m_word_mark, json[QString("wordMark")]);
    m_word_mark_isSet = !json[QString("wordMark")].isNull() && m_word_mark_isValid;
}

QString OAILoyaltyClass::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILoyaltyClass::asJsonObject() const {
    QJsonObject obj;
    if (m_account_id_label_isSet) {
        obj.insert(QString("accountIdLabel"), ::OpenAPI::toJsonValue(m_account_id_label));
    }
    if (m_account_name_label_isSet) {
        obj.insert(QString("accountNameLabel"), ::OpenAPI::toJsonValue(m_account_name_label));
    }
    if (m_allow_multiple_users_per_object_isSet) {
        obj.insert(QString("allowMultipleUsersPerObject"), ::OpenAPI::toJsonValue(m_allow_multiple_users_per_object));
    }
    if (m_callback_options.isSet()) {
        obj.insert(QString("callbackOptions"), ::OpenAPI::toJsonValue(m_callback_options));
    }
    if (m_class_template_info.isSet()) {
        obj.insert(QString("classTemplateInfo"), ::OpenAPI::toJsonValue(m_class_template_info));
    }
    if (m_country_code_isSet) {
        obj.insert(QString("countryCode"), ::OpenAPI::toJsonValue(m_country_code));
    }
    if (m_discoverable_program.isSet()) {
        obj.insert(QString("discoverableProgram"), ::OpenAPI::toJsonValue(m_discoverable_program));
    }
    if (m_enable_smart_tap_isSet) {
        obj.insert(QString("enableSmartTap"), ::OpenAPI::toJsonValue(m_enable_smart_tap));
    }
    if (m_hero_image.isSet()) {
        obj.insert(QString("heroImage"), ::OpenAPI::toJsonValue(m_hero_image));
    }
    if (m_hex_background_color_isSet) {
        obj.insert(QString("hexBackgroundColor"), ::OpenAPI::toJsonValue(m_hex_background_color));
    }
    if (m_homepage_uri.isSet()) {
        obj.insert(QString("homepageUri"), ::OpenAPI::toJsonValue(m_homepage_uri));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_image_modules_data.size() > 0) {
        obj.insert(QString("imageModulesData"), ::OpenAPI::toJsonValue(m_image_modules_data));
    }
    if (m_info_module_data.isSet()) {
        obj.insert(QString("infoModuleData"), ::OpenAPI::toJsonValue(m_info_module_data));
    }
    if (m_issuer_name_isSet) {
        obj.insert(QString("issuerName"), ::OpenAPI::toJsonValue(m_issuer_name));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_links_module_data.isSet()) {
        obj.insert(QString("linksModuleData"), ::OpenAPI::toJsonValue(m_links_module_data));
    }
    if (m_localized_account_id_label.isSet()) {
        obj.insert(QString("localizedAccountIdLabel"), ::OpenAPI::toJsonValue(m_localized_account_id_label));
    }
    if (m_localized_account_name_label.isSet()) {
        obj.insert(QString("localizedAccountNameLabel"), ::OpenAPI::toJsonValue(m_localized_account_name_label));
    }
    if (m_localized_issuer_name.isSet()) {
        obj.insert(QString("localizedIssuerName"), ::OpenAPI::toJsonValue(m_localized_issuer_name));
    }
    if (m_localized_program_name.isSet()) {
        obj.insert(QString("localizedProgramName"), ::OpenAPI::toJsonValue(m_localized_program_name));
    }
    if (m_localized_rewards_tier.isSet()) {
        obj.insert(QString("localizedRewardsTier"), ::OpenAPI::toJsonValue(m_localized_rewards_tier));
    }
    if (m_localized_rewards_tier_label.isSet()) {
        obj.insert(QString("localizedRewardsTierLabel"), ::OpenAPI::toJsonValue(m_localized_rewards_tier_label));
    }
    if (m_localized_secondary_rewards_tier.isSet()) {
        obj.insert(QString("localizedSecondaryRewardsTier"), ::OpenAPI::toJsonValue(m_localized_secondary_rewards_tier));
    }
    if (m_localized_secondary_rewards_tier_label.isSet()) {
        obj.insert(QString("localizedSecondaryRewardsTierLabel"), ::OpenAPI::toJsonValue(m_localized_secondary_rewards_tier_label));
    }
    if (m_locations.size() > 0) {
        obj.insert(QString("locations"), ::OpenAPI::toJsonValue(m_locations));
    }
    if (m_messages.size() > 0) {
        obj.insert(QString("messages"), ::OpenAPI::toJsonValue(m_messages));
    }
    if (m_multiple_devices_and_holders_allowed_status_isSet) {
        obj.insert(QString("multipleDevicesAndHoldersAllowedStatus"), ::OpenAPI::toJsonValue(m_multiple_devices_and_holders_allowed_status));
    }
    if (m_program_logo.isSet()) {
        obj.insert(QString("programLogo"), ::OpenAPI::toJsonValue(m_program_logo));
    }
    if (m_program_name_isSet) {
        obj.insert(QString("programName"), ::OpenAPI::toJsonValue(m_program_name));
    }
    if (m_redemption_issuers.size() > 0) {
        obj.insert(QString("redemptionIssuers"), ::OpenAPI::toJsonValue(m_redemption_issuers));
    }
    if (m_review.isSet()) {
        obj.insert(QString("review"), ::OpenAPI::toJsonValue(m_review));
    }
    if (m_review_status_isSet) {
        obj.insert(QString("reviewStatus"), ::OpenAPI::toJsonValue(m_review_status));
    }
    if (m_rewards_tier_isSet) {
        obj.insert(QString("rewardsTier"), ::OpenAPI::toJsonValue(m_rewards_tier));
    }
    if (m_rewards_tier_label_isSet) {
        obj.insert(QString("rewardsTierLabel"), ::OpenAPI::toJsonValue(m_rewards_tier_label));
    }
    if (m_secondary_rewards_tier_isSet) {
        obj.insert(QString("secondaryRewardsTier"), ::OpenAPI::toJsonValue(m_secondary_rewards_tier));
    }
    if (m_secondary_rewards_tier_label_isSet) {
        obj.insert(QString("secondaryRewardsTierLabel"), ::OpenAPI::toJsonValue(m_secondary_rewards_tier_label));
    }
    if (m_security_animation.isSet()) {
        obj.insert(QString("securityAnimation"), ::OpenAPI::toJsonValue(m_security_animation));
    }
    if (m_text_modules_data.size() > 0) {
        obj.insert(QString("textModulesData"), ::OpenAPI::toJsonValue(m_text_modules_data));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    if (m_view_unlock_requirement_isSet) {
        obj.insert(QString("viewUnlockRequirement"), ::OpenAPI::toJsonValue(m_view_unlock_requirement));
    }
    if (m_word_mark.isSet()) {
        obj.insert(QString("wordMark"), ::OpenAPI::toJsonValue(m_word_mark));
    }
    return obj;
}

QString OAILoyaltyClass::getAccountIdLabel() const {
    return m_account_id_label;
}
void OAILoyaltyClass::setAccountIdLabel(const QString &account_id_label) {
    m_account_id_label = account_id_label;
    m_account_id_label_isSet = true;
}

bool OAILoyaltyClass::is_account_id_label_Set() const{
    return m_account_id_label_isSet;
}

bool OAILoyaltyClass::is_account_id_label_Valid() const{
    return m_account_id_label_isValid;
}

QString OAILoyaltyClass::getAccountNameLabel() const {
    return m_account_name_label;
}
void OAILoyaltyClass::setAccountNameLabel(const QString &account_name_label) {
    m_account_name_label = account_name_label;
    m_account_name_label_isSet = true;
}

bool OAILoyaltyClass::is_account_name_label_Set() const{
    return m_account_name_label_isSet;
}

bool OAILoyaltyClass::is_account_name_label_Valid() const{
    return m_account_name_label_isValid;
}

bool OAILoyaltyClass::isAllowMultipleUsersPerObject() const {
    return m_allow_multiple_users_per_object;
}
void OAILoyaltyClass::setAllowMultipleUsersPerObject(const bool &allow_multiple_users_per_object) {
    m_allow_multiple_users_per_object = allow_multiple_users_per_object;
    m_allow_multiple_users_per_object_isSet = true;
}

bool OAILoyaltyClass::is_allow_multiple_users_per_object_Set() const{
    return m_allow_multiple_users_per_object_isSet;
}

bool OAILoyaltyClass::is_allow_multiple_users_per_object_Valid() const{
    return m_allow_multiple_users_per_object_isValid;
}

OAICallbackOptions OAILoyaltyClass::getCallbackOptions() const {
    return m_callback_options;
}
void OAILoyaltyClass::setCallbackOptions(const OAICallbackOptions &callback_options) {
    m_callback_options = callback_options;
    m_callback_options_isSet = true;
}

bool OAILoyaltyClass::is_callback_options_Set() const{
    return m_callback_options_isSet;
}

bool OAILoyaltyClass::is_callback_options_Valid() const{
    return m_callback_options_isValid;
}

OAIClassTemplateInfo OAILoyaltyClass::getClassTemplateInfo() const {
    return m_class_template_info;
}
void OAILoyaltyClass::setClassTemplateInfo(const OAIClassTemplateInfo &class_template_info) {
    m_class_template_info = class_template_info;
    m_class_template_info_isSet = true;
}

bool OAILoyaltyClass::is_class_template_info_Set() const{
    return m_class_template_info_isSet;
}

bool OAILoyaltyClass::is_class_template_info_Valid() const{
    return m_class_template_info_isValid;
}

QString OAILoyaltyClass::getCountryCode() const {
    return m_country_code;
}
void OAILoyaltyClass::setCountryCode(const QString &country_code) {
    m_country_code = country_code;
    m_country_code_isSet = true;
}

bool OAILoyaltyClass::is_country_code_Set() const{
    return m_country_code_isSet;
}

bool OAILoyaltyClass::is_country_code_Valid() const{
    return m_country_code_isValid;
}

OAIDiscoverableProgram OAILoyaltyClass::getDiscoverableProgram() const {
    return m_discoverable_program;
}
void OAILoyaltyClass::setDiscoverableProgram(const OAIDiscoverableProgram &discoverable_program) {
    m_discoverable_program = discoverable_program;
    m_discoverable_program_isSet = true;
}

bool OAILoyaltyClass::is_discoverable_program_Set() const{
    return m_discoverable_program_isSet;
}

bool OAILoyaltyClass::is_discoverable_program_Valid() const{
    return m_discoverable_program_isValid;
}

bool OAILoyaltyClass::isEnableSmartTap() const {
    return m_enable_smart_tap;
}
void OAILoyaltyClass::setEnableSmartTap(const bool &enable_smart_tap) {
    m_enable_smart_tap = enable_smart_tap;
    m_enable_smart_tap_isSet = true;
}

bool OAILoyaltyClass::is_enable_smart_tap_Set() const{
    return m_enable_smart_tap_isSet;
}

bool OAILoyaltyClass::is_enable_smart_tap_Valid() const{
    return m_enable_smart_tap_isValid;
}

OAIImage OAILoyaltyClass::getHeroImage() const {
    return m_hero_image;
}
void OAILoyaltyClass::setHeroImage(const OAIImage &hero_image) {
    m_hero_image = hero_image;
    m_hero_image_isSet = true;
}

bool OAILoyaltyClass::is_hero_image_Set() const{
    return m_hero_image_isSet;
}

bool OAILoyaltyClass::is_hero_image_Valid() const{
    return m_hero_image_isValid;
}

QString OAILoyaltyClass::getHexBackgroundColor() const {
    return m_hex_background_color;
}
void OAILoyaltyClass::setHexBackgroundColor(const QString &hex_background_color) {
    m_hex_background_color = hex_background_color;
    m_hex_background_color_isSet = true;
}

bool OAILoyaltyClass::is_hex_background_color_Set() const{
    return m_hex_background_color_isSet;
}

bool OAILoyaltyClass::is_hex_background_color_Valid() const{
    return m_hex_background_color_isValid;
}

OAIUri OAILoyaltyClass::getHomepageUri() const {
    return m_homepage_uri;
}
void OAILoyaltyClass::setHomepageUri(const OAIUri &homepage_uri) {
    m_homepage_uri = homepage_uri;
    m_homepage_uri_isSet = true;
}

bool OAILoyaltyClass::is_homepage_uri_Set() const{
    return m_homepage_uri_isSet;
}

bool OAILoyaltyClass::is_homepage_uri_Valid() const{
    return m_homepage_uri_isValid;
}

QString OAILoyaltyClass::getId() const {
    return m_id;
}
void OAILoyaltyClass::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAILoyaltyClass::is_id_Set() const{
    return m_id_isSet;
}

bool OAILoyaltyClass::is_id_Valid() const{
    return m_id_isValid;
}

QList<OAIImageModuleData> OAILoyaltyClass::getImageModulesData() const {
    return m_image_modules_data;
}
void OAILoyaltyClass::setImageModulesData(const QList<OAIImageModuleData> &image_modules_data) {
    m_image_modules_data = image_modules_data;
    m_image_modules_data_isSet = true;
}

bool OAILoyaltyClass::is_image_modules_data_Set() const{
    return m_image_modules_data_isSet;
}

bool OAILoyaltyClass::is_image_modules_data_Valid() const{
    return m_image_modules_data_isValid;
}

OAIInfoModuleData OAILoyaltyClass::getInfoModuleData() const {
    return m_info_module_data;
}
void OAILoyaltyClass::setInfoModuleData(const OAIInfoModuleData &info_module_data) {
    m_info_module_data = info_module_data;
    m_info_module_data_isSet = true;
}

bool OAILoyaltyClass::is_info_module_data_Set() const{
    return m_info_module_data_isSet;
}

bool OAILoyaltyClass::is_info_module_data_Valid() const{
    return m_info_module_data_isValid;
}

QString OAILoyaltyClass::getIssuerName() const {
    return m_issuer_name;
}
void OAILoyaltyClass::setIssuerName(const QString &issuer_name) {
    m_issuer_name = issuer_name;
    m_issuer_name_isSet = true;
}

bool OAILoyaltyClass::is_issuer_name_Set() const{
    return m_issuer_name_isSet;
}

bool OAILoyaltyClass::is_issuer_name_Valid() const{
    return m_issuer_name_isValid;
}

QString OAILoyaltyClass::getKind() const {
    return m_kind;
}
void OAILoyaltyClass::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAILoyaltyClass::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAILoyaltyClass::is_kind_Valid() const{
    return m_kind_isValid;
}

OAILinksModuleData OAILoyaltyClass::getLinksModuleData() const {
    return m_links_module_data;
}
void OAILoyaltyClass::setLinksModuleData(const OAILinksModuleData &links_module_data) {
    m_links_module_data = links_module_data;
    m_links_module_data_isSet = true;
}

bool OAILoyaltyClass::is_links_module_data_Set() const{
    return m_links_module_data_isSet;
}

bool OAILoyaltyClass::is_links_module_data_Valid() const{
    return m_links_module_data_isValid;
}

OAILocalizedString OAILoyaltyClass::getLocalizedAccountIdLabel() const {
    return m_localized_account_id_label;
}
void OAILoyaltyClass::setLocalizedAccountIdLabel(const OAILocalizedString &localized_account_id_label) {
    m_localized_account_id_label = localized_account_id_label;
    m_localized_account_id_label_isSet = true;
}

bool OAILoyaltyClass::is_localized_account_id_label_Set() const{
    return m_localized_account_id_label_isSet;
}

bool OAILoyaltyClass::is_localized_account_id_label_Valid() const{
    return m_localized_account_id_label_isValid;
}

OAILocalizedString OAILoyaltyClass::getLocalizedAccountNameLabel() const {
    return m_localized_account_name_label;
}
void OAILoyaltyClass::setLocalizedAccountNameLabel(const OAILocalizedString &localized_account_name_label) {
    m_localized_account_name_label = localized_account_name_label;
    m_localized_account_name_label_isSet = true;
}

bool OAILoyaltyClass::is_localized_account_name_label_Set() const{
    return m_localized_account_name_label_isSet;
}

bool OAILoyaltyClass::is_localized_account_name_label_Valid() const{
    return m_localized_account_name_label_isValid;
}

OAILocalizedString OAILoyaltyClass::getLocalizedIssuerName() const {
    return m_localized_issuer_name;
}
void OAILoyaltyClass::setLocalizedIssuerName(const OAILocalizedString &localized_issuer_name) {
    m_localized_issuer_name = localized_issuer_name;
    m_localized_issuer_name_isSet = true;
}

bool OAILoyaltyClass::is_localized_issuer_name_Set() const{
    return m_localized_issuer_name_isSet;
}

bool OAILoyaltyClass::is_localized_issuer_name_Valid() const{
    return m_localized_issuer_name_isValid;
}

OAILocalizedString OAILoyaltyClass::getLocalizedProgramName() const {
    return m_localized_program_name;
}
void OAILoyaltyClass::setLocalizedProgramName(const OAILocalizedString &localized_program_name) {
    m_localized_program_name = localized_program_name;
    m_localized_program_name_isSet = true;
}

bool OAILoyaltyClass::is_localized_program_name_Set() const{
    return m_localized_program_name_isSet;
}

bool OAILoyaltyClass::is_localized_program_name_Valid() const{
    return m_localized_program_name_isValid;
}

OAILocalizedString OAILoyaltyClass::getLocalizedRewardsTier() const {
    return m_localized_rewards_tier;
}
void OAILoyaltyClass::setLocalizedRewardsTier(const OAILocalizedString &localized_rewards_tier) {
    m_localized_rewards_tier = localized_rewards_tier;
    m_localized_rewards_tier_isSet = true;
}

bool OAILoyaltyClass::is_localized_rewards_tier_Set() const{
    return m_localized_rewards_tier_isSet;
}

bool OAILoyaltyClass::is_localized_rewards_tier_Valid() const{
    return m_localized_rewards_tier_isValid;
}

OAILocalizedString OAILoyaltyClass::getLocalizedRewardsTierLabel() const {
    return m_localized_rewards_tier_label;
}
void OAILoyaltyClass::setLocalizedRewardsTierLabel(const OAILocalizedString &localized_rewards_tier_label) {
    m_localized_rewards_tier_label = localized_rewards_tier_label;
    m_localized_rewards_tier_label_isSet = true;
}

bool OAILoyaltyClass::is_localized_rewards_tier_label_Set() const{
    return m_localized_rewards_tier_label_isSet;
}

bool OAILoyaltyClass::is_localized_rewards_tier_label_Valid() const{
    return m_localized_rewards_tier_label_isValid;
}

OAILocalizedString OAILoyaltyClass::getLocalizedSecondaryRewardsTier() const {
    return m_localized_secondary_rewards_tier;
}
void OAILoyaltyClass::setLocalizedSecondaryRewardsTier(const OAILocalizedString &localized_secondary_rewards_tier) {
    m_localized_secondary_rewards_tier = localized_secondary_rewards_tier;
    m_localized_secondary_rewards_tier_isSet = true;
}

bool OAILoyaltyClass::is_localized_secondary_rewards_tier_Set() const{
    return m_localized_secondary_rewards_tier_isSet;
}

bool OAILoyaltyClass::is_localized_secondary_rewards_tier_Valid() const{
    return m_localized_secondary_rewards_tier_isValid;
}

OAILocalizedString OAILoyaltyClass::getLocalizedSecondaryRewardsTierLabel() const {
    return m_localized_secondary_rewards_tier_label;
}
void OAILoyaltyClass::setLocalizedSecondaryRewardsTierLabel(const OAILocalizedString &localized_secondary_rewards_tier_label) {
    m_localized_secondary_rewards_tier_label = localized_secondary_rewards_tier_label;
    m_localized_secondary_rewards_tier_label_isSet = true;
}

bool OAILoyaltyClass::is_localized_secondary_rewards_tier_label_Set() const{
    return m_localized_secondary_rewards_tier_label_isSet;
}

bool OAILoyaltyClass::is_localized_secondary_rewards_tier_label_Valid() const{
    return m_localized_secondary_rewards_tier_label_isValid;
}

QList<OAILatLongPoint> OAILoyaltyClass::getLocations() const {
    return m_locations;
}
void OAILoyaltyClass::setLocations(const QList<OAILatLongPoint> &locations) {
    m_locations = locations;
    m_locations_isSet = true;
}

bool OAILoyaltyClass::is_locations_Set() const{
    return m_locations_isSet;
}

bool OAILoyaltyClass::is_locations_Valid() const{
    return m_locations_isValid;
}

QList<OAIMessage> OAILoyaltyClass::getMessages() const {
    return m_messages;
}
void OAILoyaltyClass::setMessages(const QList<OAIMessage> &messages) {
    m_messages = messages;
    m_messages_isSet = true;
}

bool OAILoyaltyClass::is_messages_Set() const{
    return m_messages_isSet;
}

bool OAILoyaltyClass::is_messages_Valid() const{
    return m_messages_isValid;
}

QString OAILoyaltyClass::getMultipleDevicesAndHoldersAllowedStatus() const {
    return m_multiple_devices_and_holders_allowed_status;
}
void OAILoyaltyClass::setMultipleDevicesAndHoldersAllowedStatus(const QString &multiple_devices_and_holders_allowed_status) {
    m_multiple_devices_and_holders_allowed_status = multiple_devices_and_holders_allowed_status;
    m_multiple_devices_and_holders_allowed_status_isSet = true;
}

bool OAILoyaltyClass::is_multiple_devices_and_holders_allowed_status_Set() const{
    return m_multiple_devices_and_holders_allowed_status_isSet;
}

bool OAILoyaltyClass::is_multiple_devices_and_holders_allowed_status_Valid() const{
    return m_multiple_devices_and_holders_allowed_status_isValid;
}

OAIImage OAILoyaltyClass::getProgramLogo() const {
    return m_program_logo;
}
void OAILoyaltyClass::setProgramLogo(const OAIImage &program_logo) {
    m_program_logo = program_logo;
    m_program_logo_isSet = true;
}

bool OAILoyaltyClass::is_program_logo_Set() const{
    return m_program_logo_isSet;
}

bool OAILoyaltyClass::is_program_logo_Valid() const{
    return m_program_logo_isValid;
}

QString OAILoyaltyClass::getProgramName() const {
    return m_program_name;
}
void OAILoyaltyClass::setProgramName(const QString &program_name) {
    m_program_name = program_name;
    m_program_name_isSet = true;
}

bool OAILoyaltyClass::is_program_name_Set() const{
    return m_program_name_isSet;
}

bool OAILoyaltyClass::is_program_name_Valid() const{
    return m_program_name_isValid;
}

QList<QString> OAILoyaltyClass::getRedemptionIssuers() const {
    return m_redemption_issuers;
}
void OAILoyaltyClass::setRedemptionIssuers(const QList<QString> &redemption_issuers) {
    m_redemption_issuers = redemption_issuers;
    m_redemption_issuers_isSet = true;
}

bool OAILoyaltyClass::is_redemption_issuers_Set() const{
    return m_redemption_issuers_isSet;
}

bool OAILoyaltyClass::is_redemption_issuers_Valid() const{
    return m_redemption_issuers_isValid;
}

OAIReview OAILoyaltyClass::getReview() const {
    return m_review;
}
void OAILoyaltyClass::setReview(const OAIReview &review) {
    m_review = review;
    m_review_isSet = true;
}

bool OAILoyaltyClass::is_review_Set() const{
    return m_review_isSet;
}

bool OAILoyaltyClass::is_review_Valid() const{
    return m_review_isValid;
}

QString OAILoyaltyClass::getReviewStatus() const {
    return m_review_status;
}
void OAILoyaltyClass::setReviewStatus(const QString &review_status) {
    m_review_status = review_status;
    m_review_status_isSet = true;
}

bool OAILoyaltyClass::is_review_status_Set() const{
    return m_review_status_isSet;
}

bool OAILoyaltyClass::is_review_status_Valid() const{
    return m_review_status_isValid;
}

QString OAILoyaltyClass::getRewardsTier() const {
    return m_rewards_tier;
}
void OAILoyaltyClass::setRewardsTier(const QString &rewards_tier) {
    m_rewards_tier = rewards_tier;
    m_rewards_tier_isSet = true;
}

bool OAILoyaltyClass::is_rewards_tier_Set() const{
    return m_rewards_tier_isSet;
}

bool OAILoyaltyClass::is_rewards_tier_Valid() const{
    return m_rewards_tier_isValid;
}

QString OAILoyaltyClass::getRewardsTierLabel() const {
    return m_rewards_tier_label;
}
void OAILoyaltyClass::setRewardsTierLabel(const QString &rewards_tier_label) {
    m_rewards_tier_label = rewards_tier_label;
    m_rewards_tier_label_isSet = true;
}

bool OAILoyaltyClass::is_rewards_tier_label_Set() const{
    return m_rewards_tier_label_isSet;
}

bool OAILoyaltyClass::is_rewards_tier_label_Valid() const{
    return m_rewards_tier_label_isValid;
}

QString OAILoyaltyClass::getSecondaryRewardsTier() const {
    return m_secondary_rewards_tier;
}
void OAILoyaltyClass::setSecondaryRewardsTier(const QString &secondary_rewards_tier) {
    m_secondary_rewards_tier = secondary_rewards_tier;
    m_secondary_rewards_tier_isSet = true;
}

bool OAILoyaltyClass::is_secondary_rewards_tier_Set() const{
    return m_secondary_rewards_tier_isSet;
}

bool OAILoyaltyClass::is_secondary_rewards_tier_Valid() const{
    return m_secondary_rewards_tier_isValid;
}

QString OAILoyaltyClass::getSecondaryRewardsTierLabel() const {
    return m_secondary_rewards_tier_label;
}
void OAILoyaltyClass::setSecondaryRewardsTierLabel(const QString &secondary_rewards_tier_label) {
    m_secondary_rewards_tier_label = secondary_rewards_tier_label;
    m_secondary_rewards_tier_label_isSet = true;
}

bool OAILoyaltyClass::is_secondary_rewards_tier_label_Set() const{
    return m_secondary_rewards_tier_label_isSet;
}

bool OAILoyaltyClass::is_secondary_rewards_tier_label_Valid() const{
    return m_secondary_rewards_tier_label_isValid;
}

OAISecurityAnimation OAILoyaltyClass::getSecurityAnimation() const {
    return m_security_animation;
}
void OAILoyaltyClass::setSecurityAnimation(const OAISecurityAnimation &security_animation) {
    m_security_animation = security_animation;
    m_security_animation_isSet = true;
}

bool OAILoyaltyClass::is_security_animation_Set() const{
    return m_security_animation_isSet;
}

bool OAILoyaltyClass::is_security_animation_Valid() const{
    return m_security_animation_isValid;
}

QList<OAITextModuleData> OAILoyaltyClass::getTextModulesData() const {
    return m_text_modules_data;
}
void OAILoyaltyClass::setTextModulesData(const QList<OAITextModuleData> &text_modules_data) {
    m_text_modules_data = text_modules_data;
    m_text_modules_data_isSet = true;
}

bool OAILoyaltyClass::is_text_modules_data_Set() const{
    return m_text_modules_data_isSet;
}

bool OAILoyaltyClass::is_text_modules_data_Valid() const{
    return m_text_modules_data_isValid;
}

QString OAILoyaltyClass::getVersion() const {
    return m_version;
}
void OAILoyaltyClass::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAILoyaltyClass::is_version_Set() const{
    return m_version_isSet;
}

bool OAILoyaltyClass::is_version_Valid() const{
    return m_version_isValid;
}

QString OAILoyaltyClass::getViewUnlockRequirement() const {
    return m_view_unlock_requirement;
}
void OAILoyaltyClass::setViewUnlockRequirement(const QString &view_unlock_requirement) {
    m_view_unlock_requirement = view_unlock_requirement;
    m_view_unlock_requirement_isSet = true;
}

bool OAILoyaltyClass::is_view_unlock_requirement_Set() const{
    return m_view_unlock_requirement_isSet;
}

bool OAILoyaltyClass::is_view_unlock_requirement_Valid() const{
    return m_view_unlock_requirement_isValid;
}

OAIImage OAILoyaltyClass::getWordMark() const {
    return m_word_mark;
}
void OAILoyaltyClass::setWordMark(const OAIImage &word_mark) {
    m_word_mark = word_mark;
    m_word_mark_isSet = true;
}

bool OAILoyaltyClass::is_word_mark_Set() const{
    return m_word_mark_isSet;
}

bool OAILoyaltyClass::is_word_mark_Valid() const{
    return m_word_mark_isValid;
}

bool OAILoyaltyClass::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_id_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_account_name_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_allow_multiple_users_per_object_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_callback_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_class_template_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_discoverable_program.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_smart_tap_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hero_image.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_hex_background_color_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_homepage_uri.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_modules_data.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_info_module_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_issuer_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_links_module_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_localized_account_id_label.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_localized_account_name_label.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_localized_issuer_name.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_localized_program_name.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_localized_rewards_tier.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_localized_rewards_tier_label.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_localized_secondary_rewards_tier.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_localized_secondary_rewards_tier_label.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_locations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_messages.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_multiple_devices_and_holders_allowed_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_program_logo.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_program_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_redemption_issuers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_review.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_review_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rewards_tier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rewards_tier_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_secondary_rewards_tier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_secondary_rewards_tier_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_security_animation.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_modules_data.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_view_unlock_requirement_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_word_mark.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILoyaltyClass::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
