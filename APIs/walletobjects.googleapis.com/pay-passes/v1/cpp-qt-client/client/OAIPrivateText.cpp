/**
 * Google Pay Passes API
 * API for issuers to save and manage Google Wallet Objects.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPrivateText.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPrivateText::OAIPrivateText(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPrivateText::OAIPrivateText() {
    this->initializeModel();
}

OAIPrivateText::~OAIPrivateText() {}

void OAIPrivateText::initializeModel() {

    m_body_isSet = false;
    m_body_isValid = false;

    m_header_isSet = false;
    m_header_isValid = false;
}

void OAIPrivateText::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPrivateText::fromJsonObject(QJsonObject json) {

    m_body_isValid = ::OpenAPI::fromJsonValue(m_body, json[QString("body")]);
    m_body_isSet = !json[QString("body")].isNull() && m_body_isValid;

    m_header_isValid = ::OpenAPI::fromJsonValue(m_header, json[QString("header")]);
    m_header_isSet = !json[QString("header")].isNull() && m_header_isValid;
}

QString OAIPrivateText::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPrivateText::asJsonObject() const {
    QJsonObject obj;
    if (m_body.isSet()) {
        obj.insert(QString("body"), ::OpenAPI::toJsonValue(m_body));
    }
    if (m_header.isSet()) {
        obj.insert(QString("header"), ::OpenAPI::toJsonValue(m_header));
    }
    return obj;
}

OAILocalizedString OAIPrivateText::getBody() const {
    return m_body;
}
void OAIPrivateText::setBody(const OAILocalizedString &body) {
    m_body = body;
    m_body_isSet = true;
}

bool OAIPrivateText::is_body_Set() const{
    return m_body_isSet;
}

bool OAIPrivateText::is_body_Valid() const{
    return m_body_isValid;
}

OAILocalizedString OAIPrivateText::getHeader() const {
    return m_header;
}
void OAIPrivateText::setHeader(const OAILocalizedString &header) {
    m_header = header;
    m_header_isSet = true;
}

bool OAIPrivateText::is_header_Set() const{
    return m_header_isSet;
}

bool OAIPrivateText::is_header_Valid() const{
    return m_header_isValid;
}

bool OAIPrivateText::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_body.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_header.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPrivateText::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
