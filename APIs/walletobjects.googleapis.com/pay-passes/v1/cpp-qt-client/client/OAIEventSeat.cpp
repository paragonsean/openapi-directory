/**
 * Google Pay Passes API
 * API for issuers to save and manage Google Wallet Objects.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEventSeat.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEventSeat::OAIEventSeat(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEventSeat::OAIEventSeat() {
    this->initializeModel();
}

OAIEventSeat::~OAIEventSeat() {}

void OAIEventSeat::initializeModel() {

    m_gate_isSet = false;
    m_gate_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_row_isSet = false;
    m_row_isValid = false;

    m_seat_isSet = false;
    m_seat_isValid = false;

    m_section_isSet = false;
    m_section_isValid = false;
}

void OAIEventSeat::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEventSeat::fromJsonObject(QJsonObject json) {

    m_gate_isValid = ::OpenAPI::fromJsonValue(m_gate, json[QString("gate")]);
    m_gate_isSet = !json[QString("gate")].isNull() && m_gate_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_row_isValid = ::OpenAPI::fromJsonValue(m_row, json[QString("row")]);
    m_row_isSet = !json[QString("row")].isNull() && m_row_isValid;

    m_seat_isValid = ::OpenAPI::fromJsonValue(m_seat, json[QString("seat")]);
    m_seat_isSet = !json[QString("seat")].isNull() && m_seat_isValid;

    m_section_isValid = ::OpenAPI::fromJsonValue(m_section, json[QString("section")]);
    m_section_isSet = !json[QString("section")].isNull() && m_section_isValid;
}

QString OAIEventSeat::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEventSeat::asJsonObject() const {
    QJsonObject obj;
    if (m_gate.isSet()) {
        obj.insert(QString("gate"), ::OpenAPI::toJsonValue(m_gate));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_row.isSet()) {
        obj.insert(QString("row"), ::OpenAPI::toJsonValue(m_row));
    }
    if (m_seat.isSet()) {
        obj.insert(QString("seat"), ::OpenAPI::toJsonValue(m_seat));
    }
    if (m_section.isSet()) {
        obj.insert(QString("section"), ::OpenAPI::toJsonValue(m_section));
    }
    return obj;
}

OAILocalizedString OAIEventSeat::getGate() const {
    return m_gate;
}
void OAIEventSeat::setGate(const OAILocalizedString &gate) {
    m_gate = gate;
    m_gate_isSet = true;
}

bool OAIEventSeat::is_gate_Set() const{
    return m_gate_isSet;
}

bool OAIEventSeat::is_gate_Valid() const{
    return m_gate_isValid;
}

QString OAIEventSeat::getKind() const {
    return m_kind;
}
void OAIEventSeat::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIEventSeat::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIEventSeat::is_kind_Valid() const{
    return m_kind_isValid;
}

OAILocalizedString OAIEventSeat::getRow() const {
    return m_row;
}
void OAIEventSeat::setRow(const OAILocalizedString &row) {
    m_row = row;
    m_row_isSet = true;
}

bool OAIEventSeat::is_row_Set() const{
    return m_row_isSet;
}

bool OAIEventSeat::is_row_Valid() const{
    return m_row_isValid;
}

OAILocalizedString OAIEventSeat::getSeat() const {
    return m_seat;
}
void OAIEventSeat::setSeat(const OAILocalizedString &seat) {
    m_seat = seat;
    m_seat_isSet = true;
}

bool OAIEventSeat::is_seat_Set() const{
    return m_seat_isSet;
}

bool OAIEventSeat::is_seat_Valid() const{
    return m_seat_isValid;
}

OAILocalizedString OAIEventSeat::getSection() const {
    return m_section;
}
void OAIEventSeat::setSection(const OAILocalizedString &section) {
    m_section = section;
    m_section_isSet = true;
}

bool OAIEventSeat::is_section_Set() const{
    return m_section_isSet;
}

bool OAIEventSeat::is_section_Valid() const{
    return m_section_isValid;
}

bool OAIEventSeat::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_gate.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_row.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_seat.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_section.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEventSeat::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
