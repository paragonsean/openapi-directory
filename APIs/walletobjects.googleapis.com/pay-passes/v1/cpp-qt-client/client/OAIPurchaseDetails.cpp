/**
 * Google Pay Passes API
 * API for issuers to save and manage Google Wallet Objects.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPurchaseDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPurchaseDetails::OAIPurchaseDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPurchaseDetails::OAIPurchaseDetails() {
    this->initializeModel();
}

OAIPurchaseDetails::~OAIPurchaseDetails() {}

void OAIPurchaseDetails::initializeModel() {

    m_account_id_isSet = false;
    m_account_id_isValid = false;

    m_confirmation_code_isSet = false;
    m_confirmation_code_isValid = false;

    m_purchase_date_time_isSet = false;
    m_purchase_date_time_isValid = false;

    m_purchase_receipt_number_isSet = false;
    m_purchase_receipt_number_isValid = false;

    m_ticket_cost_isSet = false;
    m_ticket_cost_isValid = false;
}

void OAIPurchaseDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPurchaseDetails::fromJsonObject(QJsonObject json) {

    m_account_id_isValid = ::OpenAPI::fromJsonValue(m_account_id, json[QString("accountId")]);
    m_account_id_isSet = !json[QString("accountId")].isNull() && m_account_id_isValid;

    m_confirmation_code_isValid = ::OpenAPI::fromJsonValue(m_confirmation_code, json[QString("confirmationCode")]);
    m_confirmation_code_isSet = !json[QString("confirmationCode")].isNull() && m_confirmation_code_isValid;

    m_purchase_date_time_isValid = ::OpenAPI::fromJsonValue(m_purchase_date_time, json[QString("purchaseDateTime")]);
    m_purchase_date_time_isSet = !json[QString("purchaseDateTime")].isNull() && m_purchase_date_time_isValid;

    m_purchase_receipt_number_isValid = ::OpenAPI::fromJsonValue(m_purchase_receipt_number, json[QString("purchaseReceiptNumber")]);
    m_purchase_receipt_number_isSet = !json[QString("purchaseReceiptNumber")].isNull() && m_purchase_receipt_number_isValid;

    m_ticket_cost_isValid = ::OpenAPI::fromJsonValue(m_ticket_cost, json[QString("ticketCost")]);
    m_ticket_cost_isSet = !json[QString("ticketCost")].isNull() && m_ticket_cost_isValid;
}

QString OAIPurchaseDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPurchaseDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_account_id_isSet) {
        obj.insert(QString("accountId"), ::OpenAPI::toJsonValue(m_account_id));
    }
    if (m_confirmation_code_isSet) {
        obj.insert(QString("confirmationCode"), ::OpenAPI::toJsonValue(m_confirmation_code));
    }
    if (m_purchase_date_time_isSet) {
        obj.insert(QString("purchaseDateTime"), ::OpenAPI::toJsonValue(m_purchase_date_time));
    }
    if (m_purchase_receipt_number_isSet) {
        obj.insert(QString("purchaseReceiptNumber"), ::OpenAPI::toJsonValue(m_purchase_receipt_number));
    }
    if (m_ticket_cost.isSet()) {
        obj.insert(QString("ticketCost"), ::OpenAPI::toJsonValue(m_ticket_cost));
    }
    return obj;
}

QString OAIPurchaseDetails::getAccountId() const {
    return m_account_id;
}
void OAIPurchaseDetails::setAccountId(const QString &account_id) {
    m_account_id = account_id;
    m_account_id_isSet = true;
}

bool OAIPurchaseDetails::is_account_id_Set() const{
    return m_account_id_isSet;
}

bool OAIPurchaseDetails::is_account_id_Valid() const{
    return m_account_id_isValid;
}

QString OAIPurchaseDetails::getConfirmationCode() const {
    return m_confirmation_code;
}
void OAIPurchaseDetails::setConfirmationCode(const QString &confirmation_code) {
    m_confirmation_code = confirmation_code;
    m_confirmation_code_isSet = true;
}

bool OAIPurchaseDetails::is_confirmation_code_Set() const{
    return m_confirmation_code_isSet;
}

bool OAIPurchaseDetails::is_confirmation_code_Valid() const{
    return m_confirmation_code_isValid;
}

QString OAIPurchaseDetails::getPurchaseDateTime() const {
    return m_purchase_date_time;
}
void OAIPurchaseDetails::setPurchaseDateTime(const QString &purchase_date_time) {
    m_purchase_date_time = purchase_date_time;
    m_purchase_date_time_isSet = true;
}

bool OAIPurchaseDetails::is_purchase_date_time_Set() const{
    return m_purchase_date_time_isSet;
}

bool OAIPurchaseDetails::is_purchase_date_time_Valid() const{
    return m_purchase_date_time_isValid;
}

QString OAIPurchaseDetails::getPurchaseReceiptNumber() const {
    return m_purchase_receipt_number;
}
void OAIPurchaseDetails::setPurchaseReceiptNumber(const QString &purchase_receipt_number) {
    m_purchase_receipt_number = purchase_receipt_number;
    m_purchase_receipt_number_isSet = true;
}

bool OAIPurchaseDetails::is_purchase_receipt_number_Set() const{
    return m_purchase_receipt_number_isSet;
}

bool OAIPurchaseDetails::is_purchase_receipt_number_Valid() const{
    return m_purchase_receipt_number_isValid;
}

OAITicketCost OAIPurchaseDetails::getTicketCost() const {
    return m_ticket_cost;
}
void OAIPurchaseDetails::setTicketCost(const OAITicketCost &ticket_cost) {
    m_ticket_cost = ticket_cost;
    m_ticket_cost_isSet = true;
}

bool OAIPurchaseDetails::is_ticket_cost_Set() const{
    return m_ticket_cost_isSet;
}

bool OAIPurchaseDetails::is_ticket_cost_Valid() const{
    return m_ticket_cost_isValid;
}

bool OAIPurchaseDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_confirmation_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_purchase_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_purchase_receipt_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ticket_cost.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPurchaseDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
