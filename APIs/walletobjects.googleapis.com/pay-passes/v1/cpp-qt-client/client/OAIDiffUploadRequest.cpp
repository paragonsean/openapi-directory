/**
 * Google Pay Passes API
 * API for issuers to save and manage Google Wallet Objects.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDiffUploadRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDiffUploadRequest::OAIDiffUploadRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDiffUploadRequest::OAIDiffUploadRequest() {
    this->initializeModel();
}

OAIDiffUploadRequest::~OAIDiffUploadRequest() {}

void OAIDiffUploadRequest::initializeModel() {

    m_checksums_info_isSet = false;
    m_checksums_info_isValid = false;

    m_object_info_isSet = false;
    m_object_info_isValid = false;

    m_object_version_isSet = false;
    m_object_version_isValid = false;
}

void OAIDiffUploadRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDiffUploadRequest::fromJsonObject(QJsonObject json) {

    m_checksums_info_isValid = ::OpenAPI::fromJsonValue(m_checksums_info, json[QString("checksumsInfo")]);
    m_checksums_info_isSet = !json[QString("checksumsInfo")].isNull() && m_checksums_info_isValid;

    m_object_info_isValid = ::OpenAPI::fromJsonValue(m_object_info, json[QString("objectInfo")]);
    m_object_info_isSet = !json[QString("objectInfo")].isNull() && m_object_info_isValid;

    m_object_version_isValid = ::OpenAPI::fromJsonValue(m_object_version, json[QString("objectVersion")]);
    m_object_version_isSet = !json[QString("objectVersion")].isNull() && m_object_version_isValid;
}

QString OAIDiffUploadRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDiffUploadRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_checksums_info.isSet()) {
        obj.insert(QString("checksumsInfo"), ::OpenAPI::toJsonValue(m_checksums_info));
    }
    if (m_object_info.isSet()) {
        obj.insert(QString("objectInfo"), ::OpenAPI::toJsonValue(m_object_info));
    }
    if (m_object_version_isSet) {
        obj.insert(QString("objectVersion"), ::OpenAPI::toJsonValue(m_object_version));
    }
    return obj;
}

OAICompositeMedia OAIDiffUploadRequest::getChecksumsInfo() const {
    return m_checksums_info;
}
void OAIDiffUploadRequest::setChecksumsInfo(const OAICompositeMedia &checksums_info) {
    m_checksums_info = checksums_info;
    m_checksums_info_isSet = true;
}

bool OAIDiffUploadRequest::is_checksums_info_Set() const{
    return m_checksums_info_isSet;
}

bool OAIDiffUploadRequest::is_checksums_info_Valid() const{
    return m_checksums_info_isValid;
}

OAICompositeMedia OAIDiffUploadRequest::getObjectInfo() const {
    return m_object_info;
}
void OAIDiffUploadRequest::setObjectInfo(const OAICompositeMedia &object_info) {
    m_object_info = object_info;
    m_object_info_isSet = true;
}

bool OAIDiffUploadRequest::is_object_info_Set() const{
    return m_object_info_isSet;
}

bool OAIDiffUploadRequest::is_object_info_Valid() const{
    return m_object_info_isValid;
}

QString OAIDiffUploadRequest::getObjectVersion() const {
    return m_object_version;
}
void OAIDiffUploadRequest::setObjectVersion(const QString &object_version) {
    m_object_version = object_version;
    m_object_version_isSet = true;
}

bool OAIDiffUploadRequest::is_object_version_Set() const{
    return m_object_version_isSet;
}

bool OAIDiffUploadRequest::is_object_version_Valid() const{
    return m_object_version_isValid;
}

bool OAIDiffUploadRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_checksums_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_object_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_object_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDiffUploadRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
