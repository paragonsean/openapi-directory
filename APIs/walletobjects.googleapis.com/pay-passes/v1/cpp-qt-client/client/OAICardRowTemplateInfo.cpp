/**
 * Google Pay Passes API
 * API for issuers to save and manage Google Wallet Objects.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICardRowTemplateInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICardRowTemplateInfo::OAICardRowTemplateInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICardRowTemplateInfo::OAICardRowTemplateInfo() {
    this->initializeModel();
}

OAICardRowTemplateInfo::~OAICardRowTemplateInfo() {}

void OAICardRowTemplateInfo::initializeModel() {

    m_one_item_isSet = false;
    m_one_item_isValid = false;

    m_three_items_isSet = false;
    m_three_items_isValid = false;

    m_two_items_isSet = false;
    m_two_items_isValid = false;
}

void OAICardRowTemplateInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICardRowTemplateInfo::fromJsonObject(QJsonObject json) {

    m_one_item_isValid = ::OpenAPI::fromJsonValue(m_one_item, json[QString("oneItem")]);
    m_one_item_isSet = !json[QString("oneItem")].isNull() && m_one_item_isValid;

    m_three_items_isValid = ::OpenAPI::fromJsonValue(m_three_items, json[QString("threeItems")]);
    m_three_items_isSet = !json[QString("threeItems")].isNull() && m_three_items_isValid;

    m_two_items_isValid = ::OpenAPI::fromJsonValue(m_two_items, json[QString("twoItems")]);
    m_two_items_isSet = !json[QString("twoItems")].isNull() && m_two_items_isValid;
}

QString OAICardRowTemplateInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICardRowTemplateInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_one_item.isSet()) {
        obj.insert(QString("oneItem"), ::OpenAPI::toJsonValue(m_one_item));
    }
    if (m_three_items.isSet()) {
        obj.insert(QString("threeItems"), ::OpenAPI::toJsonValue(m_three_items));
    }
    if (m_two_items.isSet()) {
        obj.insert(QString("twoItems"), ::OpenAPI::toJsonValue(m_two_items));
    }
    return obj;
}

OAICardRowOneItem OAICardRowTemplateInfo::getOneItem() const {
    return m_one_item;
}
void OAICardRowTemplateInfo::setOneItem(const OAICardRowOneItem &one_item) {
    m_one_item = one_item;
    m_one_item_isSet = true;
}

bool OAICardRowTemplateInfo::is_one_item_Set() const{
    return m_one_item_isSet;
}

bool OAICardRowTemplateInfo::is_one_item_Valid() const{
    return m_one_item_isValid;
}

OAICardRowThreeItems OAICardRowTemplateInfo::getThreeItems() const {
    return m_three_items;
}
void OAICardRowTemplateInfo::setThreeItems(const OAICardRowThreeItems &three_items) {
    m_three_items = three_items;
    m_three_items_isSet = true;
}

bool OAICardRowTemplateInfo::is_three_items_Set() const{
    return m_three_items_isSet;
}

bool OAICardRowTemplateInfo::is_three_items_Valid() const{
    return m_three_items_isValid;
}

OAICardRowTwoItems OAICardRowTemplateInfo::getTwoItems() const {
    return m_two_items;
}
void OAICardRowTemplateInfo::setTwoItems(const OAICardRowTwoItems &two_items) {
    m_two_items = two_items;
    m_two_items_isSet = true;
}

bool OAICardRowTemplateInfo::is_two_items_Set() const{
    return m_two_items_isSet;
}

bool OAICardRowTemplateInfo::is_two_items_Valid() const{
    return m_two_items_isValid;
}

bool OAICardRowTemplateInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_one_item.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_three_items.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_two_items.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICardRowTemplateInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
