/**
 * Google Pay Passes API
 * API for issuers to save and manage Google Wallet Objects.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUploadPrivateImageRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUploadPrivateImageRequest::OAIUploadPrivateImageRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUploadPrivateImageRequest::OAIUploadPrivateImageRequest() {
    this->initializeModel();
}

OAIUploadPrivateImageRequest::~OAIUploadPrivateImageRequest() {}

void OAIUploadPrivateImageRequest::initializeModel() {

    m_blob_isSet = false;
    m_blob_isValid = false;

    m_media_request_info_isSet = false;
    m_media_request_info_isValid = false;
}

void OAIUploadPrivateImageRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUploadPrivateImageRequest::fromJsonObject(QJsonObject json) {

    m_blob_isValid = ::OpenAPI::fromJsonValue(m_blob, json[QString("blob")]);
    m_blob_isSet = !json[QString("blob")].isNull() && m_blob_isValid;

    m_media_request_info_isValid = ::OpenAPI::fromJsonValue(m_media_request_info, json[QString("mediaRequestInfo")]);
    m_media_request_info_isSet = !json[QString("mediaRequestInfo")].isNull() && m_media_request_info_isValid;
}

QString OAIUploadPrivateImageRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUploadPrivateImageRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_blob.isSet()) {
        obj.insert(QString("blob"), ::OpenAPI::toJsonValue(m_blob));
    }
    if (m_media_request_info.isSet()) {
        obj.insert(QString("mediaRequestInfo"), ::OpenAPI::toJsonValue(m_media_request_info));
    }
    return obj;
}

OAIMedia OAIUploadPrivateImageRequest::getBlob() const {
    return m_blob;
}
void OAIUploadPrivateImageRequest::setBlob(const OAIMedia &blob) {
    m_blob = blob;
    m_blob_isSet = true;
}

bool OAIUploadPrivateImageRequest::is_blob_Set() const{
    return m_blob_isSet;
}

bool OAIUploadPrivateImageRequest::is_blob_Valid() const{
    return m_blob_isValid;
}

OAIMediaRequestInfo OAIUploadPrivateImageRequest::getMediaRequestInfo() const {
    return m_media_request_info;
}
void OAIUploadPrivateImageRequest::setMediaRequestInfo(const OAIMediaRequestInfo &media_request_info) {
    m_media_request_info = media_request_info;
    m_media_request_info_isSet = true;
}

bool OAIUploadPrivateImageRequest::is_media_request_info_Set() const{
    return m_media_request_info_isSet;
}

bool OAIUploadPrivateImageRequest::is_media_request_info_Valid() const{
    return m_media_request_info_isValid;
}

bool OAIUploadPrivateImageRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_blob.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_media_request_info.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUploadPrivateImageRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
