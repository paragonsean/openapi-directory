/**
 * Google Pay Passes API
 * API for issuers to save and manage Google Wallet Objects.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIMedia.h
 *
 * A reference to data stored on the filesystem, on GFS or in blobstore.
 */

#ifndef OAIMedia_H
#define OAIMedia_H

#include <QJsonObject>

#include "OAIBlobstore2Info.h"
#include "OAICompositeMedia.h"
#include "OAIContentTypeInfo.h"
#include "OAIDiffChecksumsResponse.h"
#include "OAIDiffDownloadResponse.h"
#include "OAIDiffUploadRequest.h"
#include "OAIDiffUploadResponse.h"
#include "OAIDiffVersionResponse.h"
#include "OAIDownloadParameters.h"
#include "OAIObjectId.h"
#include <QByteArray>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIBlobstore2Info;
class OAICompositeMedia;
class OAIContentTypeInfo;
class OAIDiffChecksumsResponse;
class OAIDiffDownloadResponse;
class OAIDiffUploadRequest;
class OAIDiffUploadResponse;
class OAIDiffVersionResponse;
class OAIDownloadParameters;
class OAIObjectId;

class OAIMedia : public OAIObject {
public:
    OAIMedia();
    OAIMedia(QString json);
    ~OAIMedia() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAlgorithm() const;
    void setAlgorithm(const QString &algorithm);
    bool is_algorithm_Set() const;
    bool is_algorithm_Valid() const;

    QByteArray getBigstoreObjectRef() const;
    void setBigstoreObjectRef(const QByteArray &bigstore_object_ref);
    bool is_bigstore_object_ref_Set() const;
    bool is_bigstore_object_ref_Valid() const;

    QByteArray getBlobRef() const;
    void setBlobRef(const QByteArray &blob_ref);
    bool is_blob_ref_Set() const;
    bool is_blob_ref_Valid() const;

    OAIBlobstore2Info getBlobstore2Info() const;
    void setBlobstore2Info(const OAIBlobstore2Info &blobstore2_info);
    bool is_blobstore2_info_Set() const;
    bool is_blobstore2_info_Valid() const;

    QList<OAICompositeMedia> getCompositeMedia() const;
    void setCompositeMedia(const QList<OAICompositeMedia> &composite_media);
    bool is_composite_media_Set() const;
    bool is_composite_media_Valid() const;

    QString getContentType() const;
    void setContentType(const QString &content_type);
    bool is_content_type_Set() const;
    bool is_content_type_Valid() const;

    OAIContentTypeInfo getContentTypeInfo() const;
    void setContentTypeInfo(const OAIContentTypeInfo &content_type_info);
    bool is_content_type_info_Set() const;
    bool is_content_type_info_Valid() const;

    QByteArray getCosmoBinaryReference() const;
    void setCosmoBinaryReference(const QByteArray &cosmo_binary_reference);
    bool is_cosmo_binary_reference_Set() const;
    bool is_cosmo_binary_reference_Valid() const;

    qint32 getCrc32cHash() const;
    void setCrc32cHash(const qint32 &crc32c_hash);
    bool is_crc32c_hash_Set() const;
    bool is_crc32c_hash_Valid() const;

    OAIDiffChecksumsResponse getDiffChecksumsResponse() const;
    void setDiffChecksumsResponse(const OAIDiffChecksumsResponse &diff_checksums_response);
    bool is_diff_checksums_response_Set() const;
    bool is_diff_checksums_response_Valid() const;

    OAIDiffDownloadResponse getDiffDownloadResponse() const;
    void setDiffDownloadResponse(const OAIDiffDownloadResponse &diff_download_response);
    bool is_diff_download_response_Set() const;
    bool is_diff_download_response_Valid() const;

    OAIDiffUploadRequest getDiffUploadRequest() const;
    void setDiffUploadRequest(const OAIDiffUploadRequest &diff_upload_request);
    bool is_diff_upload_request_Set() const;
    bool is_diff_upload_request_Valid() const;

    OAIDiffUploadResponse getDiffUploadResponse() const;
    void setDiffUploadResponse(const OAIDiffUploadResponse &diff_upload_response);
    bool is_diff_upload_response_Set() const;
    bool is_diff_upload_response_Valid() const;

    OAIDiffVersionResponse getDiffVersionResponse() const;
    void setDiffVersionResponse(const OAIDiffVersionResponse &diff_version_response);
    bool is_diff_version_response_Set() const;
    bool is_diff_version_response_Valid() const;

    OAIDownloadParameters getDownloadParameters() const;
    void setDownloadParameters(const OAIDownloadParameters &download_parameters);
    bool is_download_parameters_Set() const;
    bool is_download_parameters_Valid() const;

    QString getFilename() const;
    void setFilename(const QString &filename);
    bool is_filename_Set() const;
    bool is_filename_Valid() const;

    QString getHash() const;
    void setHash(const QString &hash);
    bool is_hash_Set() const;
    bool is_hash_Valid() const;

    bool isHashVerified() const;
    void setHashVerified(const bool &hash_verified);
    bool is_hash_verified_Set() const;
    bool is_hash_verified_Valid() const;

    QByteArray getRInline() const;
    void setRInline(const QByteArray &r_inline);
    bool is_r_inline_Set() const;
    bool is_r_inline_Valid() const;

    bool isIsPotentialRetry() const;
    void setIsPotentialRetry(const bool &is_potential_retry);
    bool is_is_potential_retry_Set() const;
    bool is_is_potential_retry_Valid() const;

    QString getLength() const;
    void setLength(const QString &length);
    bool is_length_Set() const;
    bool is_length_Valid() const;

    QByteArray getMd5Hash() const;
    void setMd5Hash(const QByteArray &md5_hash);
    bool is_md5_hash_Set() const;
    bool is_md5_hash_Valid() const;

    QByteArray getMediaId() const;
    void setMediaId(const QByteArray &media_id);
    bool is_media_id_Set() const;
    bool is_media_id_Valid() const;

    OAIObjectId getObjectId() const;
    void setObjectId(const OAIObjectId &object_id);
    bool is_object_id_Set() const;
    bool is_object_id_Valid() const;

    QString getPath() const;
    void setPath(const QString &path);
    bool is_path_Set() const;
    bool is_path_Valid() const;

    QString getReferenceType() const;
    void setReferenceType(const QString &reference_type);
    bool is_reference_type_Set() const;
    bool is_reference_type_Valid() const;

    QByteArray getSha1Hash() const;
    void setSha1Hash(const QByteArray &sha1_hash);
    bool is_sha1_hash_Set() const;
    bool is_sha1_hash_Valid() const;

    QByteArray getSha256Hash() const;
    void setSha256Hash(const QByteArray &sha256_hash);
    bool is_sha256_hash_Set() const;
    bool is_sha256_hash_Valid() const;

    QString getTimestamp() const;
    void setTimestamp(const QString &timestamp);
    bool is_timestamp_Set() const;
    bool is_timestamp_Valid() const;

    QString getToken() const;
    void setToken(const QString &token);
    bool is_token_Set() const;
    bool is_token_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_algorithm;
    bool m_algorithm_isSet;
    bool m_algorithm_isValid;

    QByteArray m_bigstore_object_ref;
    bool m_bigstore_object_ref_isSet;
    bool m_bigstore_object_ref_isValid;

    QByteArray m_blob_ref;
    bool m_blob_ref_isSet;
    bool m_blob_ref_isValid;

    OAIBlobstore2Info m_blobstore2_info;
    bool m_blobstore2_info_isSet;
    bool m_blobstore2_info_isValid;

    QList<OAICompositeMedia> m_composite_media;
    bool m_composite_media_isSet;
    bool m_composite_media_isValid;

    QString m_content_type;
    bool m_content_type_isSet;
    bool m_content_type_isValid;

    OAIContentTypeInfo m_content_type_info;
    bool m_content_type_info_isSet;
    bool m_content_type_info_isValid;

    QByteArray m_cosmo_binary_reference;
    bool m_cosmo_binary_reference_isSet;
    bool m_cosmo_binary_reference_isValid;

    qint32 m_crc32c_hash;
    bool m_crc32c_hash_isSet;
    bool m_crc32c_hash_isValid;

    OAIDiffChecksumsResponse m_diff_checksums_response;
    bool m_diff_checksums_response_isSet;
    bool m_diff_checksums_response_isValid;

    OAIDiffDownloadResponse m_diff_download_response;
    bool m_diff_download_response_isSet;
    bool m_diff_download_response_isValid;

    OAIDiffUploadRequest m_diff_upload_request;
    bool m_diff_upload_request_isSet;
    bool m_diff_upload_request_isValid;

    OAIDiffUploadResponse m_diff_upload_response;
    bool m_diff_upload_response_isSet;
    bool m_diff_upload_response_isValid;

    OAIDiffVersionResponse m_diff_version_response;
    bool m_diff_version_response_isSet;
    bool m_diff_version_response_isValid;

    OAIDownloadParameters m_download_parameters;
    bool m_download_parameters_isSet;
    bool m_download_parameters_isValid;

    QString m_filename;
    bool m_filename_isSet;
    bool m_filename_isValid;

    QString m_hash;
    bool m_hash_isSet;
    bool m_hash_isValid;

    bool m_hash_verified;
    bool m_hash_verified_isSet;
    bool m_hash_verified_isValid;

    QByteArray m_r_inline;
    bool m_r_inline_isSet;
    bool m_r_inline_isValid;

    bool m_is_potential_retry;
    bool m_is_potential_retry_isSet;
    bool m_is_potential_retry_isValid;

    QString m_length;
    bool m_length_isSet;
    bool m_length_isValid;

    QByteArray m_md5_hash;
    bool m_md5_hash_isSet;
    bool m_md5_hash_isValid;

    QByteArray m_media_id;
    bool m_media_id_isSet;
    bool m_media_id_isValid;

    OAIObjectId m_object_id;
    bool m_object_id_isSet;
    bool m_object_id_isValid;

    QString m_path;
    bool m_path_isSet;
    bool m_path_isValid;

    QString m_reference_type;
    bool m_reference_type_isSet;
    bool m_reference_type_isValid;

    QByteArray m_sha1_hash;
    bool m_sha1_hash_isSet;
    bool m_sha1_hash_isValid;

    QByteArray m_sha256_hash;
    bool m_sha256_hash_isSet;
    bool m_sha256_hash_isValid;

    QString m_timestamp;
    bool m_timestamp_isSet;
    bool m_timestamp_isValid;

    QString m_token;
    bool m_token_isSet;
    bool m_token_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIMedia)

#endif // OAIMedia_H
