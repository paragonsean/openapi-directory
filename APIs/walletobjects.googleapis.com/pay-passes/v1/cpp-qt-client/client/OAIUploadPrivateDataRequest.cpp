/**
 * Google Pay Passes API
 * API for issuers to save and manage Google Wallet Objects.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUploadPrivateDataRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUploadPrivateDataRequest::OAIUploadPrivateDataRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUploadPrivateDataRequest::OAIUploadPrivateDataRequest() {
    this->initializeModel();
}

OAIUploadPrivateDataRequest::~OAIUploadPrivateDataRequest() {}

void OAIUploadPrivateDataRequest::initializeModel() {

    m_issuer_id_isSet = false;
    m_issuer_id_isValid = false;

    m_text_isSet = false;
    m_text_isValid = false;

    m_uri_isSet = false;
    m_uri_isValid = false;
}

void OAIUploadPrivateDataRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUploadPrivateDataRequest::fromJsonObject(QJsonObject json) {

    m_issuer_id_isValid = ::OpenAPI::fromJsonValue(m_issuer_id, json[QString("issuerId")]);
    m_issuer_id_isSet = !json[QString("issuerId")].isNull() && m_issuer_id_isValid;

    m_text_isValid = ::OpenAPI::fromJsonValue(m_text, json[QString("text")]);
    m_text_isSet = !json[QString("text")].isNull() && m_text_isValid;

    m_uri_isValid = ::OpenAPI::fromJsonValue(m_uri, json[QString("uri")]);
    m_uri_isSet = !json[QString("uri")].isNull() && m_uri_isValid;
}

QString OAIUploadPrivateDataRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUploadPrivateDataRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_issuer_id_isSet) {
        obj.insert(QString("issuerId"), ::OpenAPI::toJsonValue(m_issuer_id));
    }
    if (m_text.isSet()) {
        obj.insert(QString("text"), ::OpenAPI::toJsonValue(m_text));
    }
    if (m_uri.isSet()) {
        obj.insert(QString("uri"), ::OpenAPI::toJsonValue(m_uri));
    }
    return obj;
}

QString OAIUploadPrivateDataRequest::getIssuerId() const {
    return m_issuer_id;
}
void OAIUploadPrivateDataRequest::setIssuerId(const QString &issuer_id) {
    m_issuer_id = issuer_id;
    m_issuer_id_isSet = true;
}

bool OAIUploadPrivateDataRequest::is_issuer_id_Set() const{
    return m_issuer_id_isSet;
}

bool OAIUploadPrivateDataRequest::is_issuer_id_Valid() const{
    return m_issuer_id_isValid;
}

OAIPrivateText OAIUploadPrivateDataRequest::getText() const {
    return m_text;
}
void OAIUploadPrivateDataRequest::setText(const OAIPrivateText &text) {
    m_text = text;
    m_text_isSet = true;
}

bool OAIUploadPrivateDataRequest::is_text_Set() const{
    return m_text_isSet;
}

bool OAIUploadPrivateDataRequest::is_text_Valid() const{
    return m_text_isValid;
}

OAIPrivateUri OAIUploadPrivateDataRequest::getUri() const {
    return m_uri;
}
void OAIUploadPrivateDataRequest::setUri(const OAIPrivateUri &uri) {
    m_uri = uri;
    m_uri_isSet = true;
}

bool OAIUploadPrivateDataRequest::is_uri_Set() const{
    return m_uri_isSet;
}

bool OAIUploadPrivateDataRequest::is_uri_Valid() const{
    return m_uri_isValid;
}

bool OAIUploadPrivateDataRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_issuer_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_text.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_uri.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUploadPrivateDataRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
