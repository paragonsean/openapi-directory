/**
 * Google Pay Passes API
 * API for issuers to save and manage Google Wallet Objects.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBoardingAndSeatingInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBoardingAndSeatingInfo::OAIBoardingAndSeatingInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBoardingAndSeatingInfo::OAIBoardingAndSeatingInfo() {
    this->initializeModel();
}

OAIBoardingAndSeatingInfo::~OAIBoardingAndSeatingInfo() {}

void OAIBoardingAndSeatingInfo::initializeModel() {

    m_boarding_door_isSet = false;
    m_boarding_door_isValid = false;

    m_boarding_group_isSet = false;
    m_boarding_group_isValid = false;

    m_boarding_position_isSet = false;
    m_boarding_position_isValid = false;

    m_boarding_privilege_image_isSet = false;
    m_boarding_privilege_image_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_seat_assignment_isSet = false;
    m_seat_assignment_isValid = false;

    m_seat_class_isSet = false;
    m_seat_class_isValid = false;

    m_seat_number_isSet = false;
    m_seat_number_isValid = false;

    m_sequence_number_isSet = false;
    m_sequence_number_isValid = false;
}

void OAIBoardingAndSeatingInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBoardingAndSeatingInfo::fromJsonObject(QJsonObject json) {

    m_boarding_door_isValid = ::OpenAPI::fromJsonValue(m_boarding_door, json[QString("boardingDoor")]);
    m_boarding_door_isSet = !json[QString("boardingDoor")].isNull() && m_boarding_door_isValid;

    m_boarding_group_isValid = ::OpenAPI::fromJsonValue(m_boarding_group, json[QString("boardingGroup")]);
    m_boarding_group_isSet = !json[QString("boardingGroup")].isNull() && m_boarding_group_isValid;

    m_boarding_position_isValid = ::OpenAPI::fromJsonValue(m_boarding_position, json[QString("boardingPosition")]);
    m_boarding_position_isSet = !json[QString("boardingPosition")].isNull() && m_boarding_position_isValid;

    m_boarding_privilege_image_isValid = ::OpenAPI::fromJsonValue(m_boarding_privilege_image, json[QString("boardingPrivilegeImage")]);
    m_boarding_privilege_image_isSet = !json[QString("boardingPrivilegeImage")].isNull() && m_boarding_privilege_image_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_seat_assignment_isValid = ::OpenAPI::fromJsonValue(m_seat_assignment, json[QString("seatAssignment")]);
    m_seat_assignment_isSet = !json[QString("seatAssignment")].isNull() && m_seat_assignment_isValid;

    m_seat_class_isValid = ::OpenAPI::fromJsonValue(m_seat_class, json[QString("seatClass")]);
    m_seat_class_isSet = !json[QString("seatClass")].isNull() && m_seat_class_isValid;

    m_seat_number_isValid = ::OpenAPI::fromJsonValue(m_seat_number, json[QString("seatNumber")]);
    m_seat_number_isSet = !json[QString("seatNumber")].isNull() && m_seat_number_isValid;

    m_sequence_number_isValid = ::OpenAPI::fromJsonValue(m_sequence_number, json[QString("sequenceNumber")]);
    m_sequence_number_isSet = !json[QString("sequenceNumber")].isNull() && m_sequence_number_isValid;
}

QString OAIBoardingAndSeatingInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBoardingAndSeatingInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_boarding_door_isSet) {
        obj.insert(QString("boardingDoor"), ::OpenAPI::toJsonValue(m_boarding_door));
    }
    if (m_boarding_group_isSet) {
        obj.insert(QString("boardingGroup"), ::OpenAPI::toJsonValue(m_boarding_group));
    }
    if (m_boarding_position_isSet) {
        obj.insert(QString("boardingPosition"), ::OpenAPI::toJsonValue(m_boarding_position));
    }
    if (m_boarding_privilege_image.isSet()) {
        obj.insert(QString("boardingPrivilegeImage"), ::OpenAPI::toJsonValue(m_boarding_privilege_image));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_seat_assignment.isSet()) {
        obj.insert(QString("seatAssignment"), ::OpenAPI::toJsonValue(m_seat_assignment));
    }
    if (m_seat_class_isSet) {
        obj.insert(QString("seatClass"), ::OpenAPI::toJsonValue(m_seat_class));
    }
    if (m_seat_number_isSet) {
        obj.insert(QString("seatNumber"), ::OpenAPI::toJsonValue(m_seat_number));
    }
    if (m_sequence_number_isSet) {
        obj.insert(QString("sequenceNumber"), ::OpenAPI::toJsonValue(m_sequence_number));
    }
    return obj;
}

QString OAIBoardingAndSeatingInfo::getBoardingDoor() const {
    return m_boarding_door;
}
void OAIBoardingAndSeatingInfo::setBoardingDoor(const QString &boarding_door) {
    m_boarding_door = boarding_door;
    m_boarding_door_isSet = true;
}

bool OAIBoardingAndSeatingInfo::is_boarding_door_Set() const{
    return m_boarding_door_isSet;
}

bool OAIBoardingAndSeatingInfo::is_boarding_door_Valid() const{
    return m_boarding_door_isValid;
}

QString OAIBoardingAndSeatingInfo::getBoardingGroup() const {
    return m_boarding_group;
}
void OAIBoardingAndSeatingInfo::setBoardingGroup(const QString &boarding_group) {
    m_boarding_group = boarding_group;
    m_boarding_group_isSet = true;
}

bool OAIBoardingAndSeatingInfo::is_boarding_group_Set() const{
    return m_boarding_group_isSet;
}

bool OAIBoardingAndSeatingInfo::is_boarding_group_Valid() const{
    return m_boarding_group_isValid;
}

QString OAIBoardingAndSeatingInfo::getBoardingPosition() const {
    return m_boarding_position;
}
void OAIBoardingAndSeatingInfo::setBoardingPosition(const QString &boarding_position) {
    m_boarding_position = boarding_position;
    m_boarding_position_isSet = true;
}

bool OAIBoardingAndSeatingInfo::is_boarding_position_Set() const{
    return m_boarding_position_isSet;
}

bool OAIBoardingAndSeatingInfo::is_boarding_position_Valid() const{
    return m_boarding_position_isValid;
}

OAIImage OAIBoardingAndSeatingInfo::getBoardingPrivilegeImage() const {
    return m_boarding_privilege_image;
}
void OAIBoardingAndSeatingInfo::setBoardingPrivilegeImage(const OAIImage &boarding_privilege_image) {
    m_boarding_privilege_image = boarding_privilege_image;
    m_boarding_privilege_image_isSet = true;
}

bool OAIBoardingAndSeatingInfo::is_boarding_privilege_image_Set() const{
    return m_boarding_privilege_image_isSet;
}

bool OAIBoardingAndSeatingInfo::is_boarding_privilege_image_Valid() const{
    return m_boarding_privilege_image_isValid;
}

QString OAIBoardingAndSeatingInfo::getKind() const {
    return m_kind;
}
void OAIBoardingAndSeatingInfo::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIBoardingAndSeatingInfo::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIBoardingAndSeatingInfo::is_kind_Valid() const{
    return m_kind_isValid;
}

OAILocalizedString OAIBoardingAndSeatingInfo::getSeatAssignment() const {
    return m_seat_assignment;
}
void OAIBoardingAndSeatingInfo::setSeatAssignment(const OAILocalizedString &seat_assignment) {
    m_seat_assignment = seat_assignment;
    m_seat_assignment_isSet = true;
}

bool OAIBoardingAndSeatingInfo::is_seat_assignment_Set() const{
    return m_seat_assignment_isSet;
}

bool OAIBoardingAndSeatingInfo::is_seat_assignment_Valid() const{
    return m_seat_assignment_isValid;
}

QString OAIBoardingAndSeatingInfo::getSeatClass() const {
    return m_seat_class;
}
void OAIBoardingAndSeatingInfo::setSeatClass(const QString &seat_class) {
    m_seat_class = seat_class;
    m_seat_class_isSet = true;
}

bool OAIBoardingAndSeatingInfo::is_seat_class_Set() const{
    return m_seat_class_isSet;
}

bool OAIBoardingAndSeatingInfo::is_seat_class_Valid() const{
    return m_seat_class_isValid;
}

QString OAIBoardingAndSeatingInfo::getSeatNumber() const {
    return m_seat_number;
}
void OAIBoardingAndSeatingInfo::setSeatNumber(const QString &seat_number) {
    m_seat_number = seat_number;
    m_seat_number_isSet = true;
}

bool OAIBoardingAndSeatingInfo::is_seat_number_Set() const{
    return m_seat_number_isSet;
}

bool OAIBoardingAndSeatingInfo::is_seat_number_Valid() const{
    return m_seat_number_isValid;
}

QString OAIBoardingAndSeatingInfo::getSequenceNumber() const {
    return m_sequence_number;
}
void OAIBoardingAndSeatingInfo::setSequenceNumber(const QString &sequence_number) {
    m_sequence_number = sequence_number;
    m_sequence_number_isSet = true;
}

bool OAIBoardingAndSeatingInfo::is_sequence_number_Set() const{
    return m_sequence_number_isSet;
}

bool OAIBoardingAndSeatingInfo::is_sequence_number_Valid() const{
    return m_sequence_number_isValid;
}

bool OAIBoardingAndSeatingInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_boarding_door_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_boarding_group_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_boarding_position_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_boarding_privilege_image.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_seat_assignment.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_seat_class_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_seat_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sequence_number_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBoardingAndSeatingInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
