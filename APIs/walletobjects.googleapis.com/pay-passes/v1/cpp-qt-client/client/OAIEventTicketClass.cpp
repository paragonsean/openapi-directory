/**
 * Google Pay Passes API
 * API for issuers to save and manage Google Wallet Objects.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEventTicketClass.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEventTicketClass::OAIEventTicketClass(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEventTicketClass::OAIEventTicketClass() {
    this->initializeModel();
}

OAIEventTicketClass::~OAIEventTicketClass() {}

void OAIEventTicketClass::initializeModel() {

    m_allow_multiple_users_per_object_isSet = false;
    m_allow_multiple_users_per_object_isValid = false;

    m_callback_options_isSet = false;
    m_callback_options_isValid = false;

    m_class_template_info_isSet = false;
    m_class_template_info_isValid = false;

    m_confirmation_code_label_isSet = false;
    m_confirmation_code_label_isValid = false;

    m_country_code_isSet = false;
    m_country_code_isValid = false;

    m_custom_confirmation_code_label_isSet = false;
    m_custom_confirmation_code_label_isValid = false;

    m_custom_gate_label_isSet = false;
    m_custom_gate_label_isValid = false;

    m_custom_row_label_isSet = false;
    m_custom_row_label_isValid = false;

    m_custom_seat_label_isSet = false;
    m_custom_seat_label_isValid = false;

    m_custom_section_label_isSet = false;
    m_custom_section_label_isValid = false;

    m_date_time_isSet = false;
    m_date_time_isValid = false;

    m_enable_smart_tap_isSet = false;
    m_enable_smart_tap_isValid = false;

    m_event_id_isSet = false;
    m_event_id_isValid = false;

    m_event_name_isSet = false;
    m_event_name_isValid = false;

    m_fine_print_isSet = false;
    m_fine_print_isValid = false;

    m_gate_label_isSet = false;
    m_gate_label_isValid = false;

    m_hero_image_isSet = false;
    m_hero_image_isValid = false;

    m_hex_background_color_isSet = false;
    m_hex_background_color_isValid = false;

    m_homepage_uri_isSet = false;
    m_homepage_uri_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_image_modules_data_isSet = false;
    m_image_modules_data_isValid = false;

    m_info_module_data_isSet = false;
    m_info_module_data_isValid = false;

    m_issuer_name_isSet = false;
    m_issuer_name_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_links_module_data_isSet = false;
    m_links_module_data_isValid = false;

    m_localized_issuer_name_isSet = false;
    m_localized_issuer_name_isValid = false;

    m_locations_isSet = false;
    m_locations_isValid = false;

    m_logo_isSet = false;
    m_logo_isValid = false;

    m_messages_isSet = false;
    m_messages_isValid = false;

    m_multiple_devices_and_holders_allowed_status_isSet = false;
    m_multiple_devices_and_holders_allowed_status_isValid = false;

    m_redemption_issuers_isSet = false;
    m_redemption_issuers_isValid = false;

    m_review_isSet = false;
    m_review_isValid = false;

    m_review_status_isSet = false;
    m_review_status_isValid = false;

    m_row_label_isSet = false;
    m_row_label_isValid = false;

    m_seat_label_isSet = false;
    m_seat_label_isValid = false;

    m_section_label_isSet = false;
    m_section_label_isValid = false;

    m_security_animation_isSet = false;
    m_security_animation_isValid = false;

    m_text_modules_data_isSet = false;
    m_text_modules_data_isValid = false;

    m_venue_isSet = false;
    m_venue_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;

    m_view_unlock_requirement_isSet = false;
    m_view_unlock_requirement_isValid = false;

    m_word_mark_isSet = false;
    m_word_mark_isValid = false;
}

void OAIEventTicketClass::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEventTicketClass::fromJsonObject(QJsonObject json) {

    m_allow_multiple_users_per_object_isValid = ::OpenAPI::fromJsonValue(m_allow_multiple_users_per_object, json[QString("allowMultipleUsersPerObject")]);
    m_allow_multiple_users_per_object_isSet = !json[QString("allowMultipleUsersPerObject")].isNull() && m_allow_multiple_users_per_object_isValid;

    m_callback_options_isValid = ::OpenAPI::fromJsonValue(m_callback_options, json[QString("callbackOptions")]);
    m_callback_options_isSet = !json[QString("callbackOptions")].isNull() && m_callback_options_isValid;

    m_class_template_info_isValid = ::OpenAPI::fromJsonValue(m_class_template_info, json[QString("classTemplateInfo")]);
    m_class_template_info_isSet = !json[QString("classTemplateInfo")].isNull() && m_class_template_info_isValid;

    m_confirmation_code_label_isValid = ::OpenAPI::fromJsonValue(m_confirmation_code_label, json[QString("confirmationCodeLabel")]);
    m_confirmation_code_label_isSet = !json[QString("confirmationCodeLabel")].isNull() && m_confirmation_code_label_isValid;

    m_country_code_isValid = ::OpenAPI::fromJsonValue(m_country_code, json[QString("countryCode")]);
    m_country_code_isSet = !json[QString("countryCode")].isNull() && m_country_code_isValid;

    m_custom_confirmation_code_label_isValid = ::OpenAPI::fromJsonValue(m_custom_confirmation_code_label, json[QString("customConfirmationCodeLabel")]);
    m_custom_confirmation_code_label_isSet = !json[QString("customConfirmationCodeLabel")].isNull() && m_custom_confirmation_code_label_isValid;

    m_custom_gate_label_isValid = ::OpenAPI::fromJsonValue(m_custom_gate_label, json[QString("customGateLabel")]);
    m_custom_gate_label_isSet = !json[QString("customGateLabel")].isNull() && m_custom_gate_label_isValid;

    m_custom_row_label_isValid = ::OpenAPI::fromJsonValue(m_custom_row_label, json[QString("customRowLabel")]);
    m_custom_row_label_isSet = !json[QString("customRowLabel")].isNull() && m_custom_row_label_isValid;

    m_custom_seat_label_isValid = ::OpenAPI::fromJsonValue(m_custom_seat_label, json[QString("customSeatLabel")]);
    m_custom_seat_label_isSet = !json[QString("customSeatLabel")].isNull() && m_custom_seat_label_isValid;

    m_custom_section_label_isValid = ::OpenAPI::fromJsonValue(m_custom_section_label, json[QString("customSectionLabel")]);
    m_custom_section_label_isSet = !json[QString("customSectionLabel")].isNull() && m_custom_section_label_isValid;

    m_date_time_isValid = ::OpenAPI::fromJsonValue(m_date_time, json[QString("dateTime")]);
    m_date_time_isSet = !json[QString("dateTime")].isNull() && m_date_time_isValid;

    m_enable_smart_tap_isValid = ::OpenAPI::fromJsonValue(m_enable_smart_tap, json[QString("enableSmartTap")]);
    m_enable_smart_tap_isSet = !json[QString("enableSmartTap")].isNull() && m_enable_smart_tap_isValid;

    m_event_id_isValid = ::OpenAPI::fromJsonValue(m_event_id, json[QString("eventId")]);
    m_event_id_isSet = !json[QString("eventId")].isNull() && m_event_id_isValid;

    m_event_name_isValid = ::OpenAPI::fromJsonValue(m_event_name, json[QString("eventName")]);
    m_event_name_isSet = !json[QString("eventName")].isNull() && m_event_name_isValid;

    m_fine_print_isValid = ::OpenAPI::fromJsonValue(m_fine_print, json[QString("finePrint")]);
    m_fine_print_isSet = !json[QString("finePrint")].isNull() && m_fine_print_isValid;

    m_gate_label_isValid = ::OpenAPI::fromJsonValue(m_gate_label, json[QString("gateLabel")]);
    m_gate_label_isSet = !json[QString("gateLabel")].isNull() && m_gate_label_isValid;

    m_hero_image_isValid = ::OpenAPI::fromJsonValue(m_hero_image, json[QString("heroImage")]);
    m_hero_image_isSet = !json[QString("heroImage")].isNull() && m_hero_image_isValid;

    m_hex_background_color_isValid = ::OpenAPI::fromJsonValue(m_hex_background_color, json[QString("hexBackgroundColor")]);
    m_hex_background_color_isSet = !json[QString("hexBackgroundColor")].isNull() && m_hex_background_color_isValid;

    m_homepage_uri_isValid = ::OpenAPI::fromJsonValue(m_homepage_uri, json[QString("homepageUri")]);
    m_homepage_uri_isSet = !json[QString("homepageUri")].isNull() && m_homepage_uri_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_image_modules_data_isValid = ::OpenAPI::fromJsonValue(m_image_modules_data, json[QString("imageModulesData")]);
    m_image_modules_data_isSet = !json[QString("imageModulesData")].isNull() && m_image_modules_data_isValid;

    m_info_module_data_isValid = ::OpenAPI::fromJsonValue(m_info_module_data, json[QString("infoModuleData")]);
    m_info_module_data_isSet = !json[QString("infoModuleData")].isNull() && m_info_module_data_isValid;

    m_issuer_name_isValid = ::OpenAPI::fromJsonValue(m_issuer_name, json[QString("issuerName")]);
    m_issuer_name_isSet = !json[QString("issuerName")].isNull() && m_issuer_name_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_links_module_data_isValid = ::OpenAPI::fromJsonValue(m_links_module_data, json[QString("linksModuleData")]);
    m_links_module_data_isSet = !json[QString("linksModuleData")].isNull() && m_links_module_data_isValid;

    m_localized_issuer_name_isValid = ::OpenAPI::fromJsonValue(m_localized_issuer_name, json[QString("localizedIssuerName")]);
    m_localized_issuer_name_isSet = !json[QString("localizedIssuerName")].isNull() && m_localized_issuer_name_isValid;

    m_locations_isValid = ::OpenAPI::fromJsonValue(m_locations, json[QString("locations")]);
    m_locations_isSet = !json[QString("locations")].isNull() && m_locations_isValid;

    m_logo_isValid = ::OpenAPI::fromJsonValue(m_logo, json[QString("logo")]);
    m_logo_isSet = !json[QString("logo")].isNull() && m_logo_isValid;

    m_messages_isValid = ::OpenAPI::fromJsonValue(m_messages, json[QString("messages")]);
    m_messages_isSet = !json[QString("messages")].isNull() && m_messages_isValid;

    m_multiple_devices_and_holders_allowed_status_isValid = ::OpenAPI::fromJsonValue(m_multiple_devices_and_holders_allowed_status, json[QString("multipleDevicesAndHoldersAllowedStatus")]);
    m_multiple_devices_and_holders_allowed_status_isSet = !json[QString("multipleDevicesAndHoldersAllowedStatus")].isNull() && m_multiple_devices_and_holders_allowed_status_isValid;

    m_redemption_issuers_isValid = ::OpenAPI::fromJsonValue(m_redemption_issuers, json[QString("redemptionIssuers")]);
    m_redemption_issuers_isSet = !json[QString("redemptionIssuers")].isNull() && m_redemption_issuers_isValid;

    m_review_isValid = ::OpenAPI::fromJsonValue(m_review, json[QString("review")]);
    m_review_isSet = !json[QString("review")].isNull() && m_review_isValid;

    m_review_status_isValid = ::OpenAPI::fromJsonValue(m_review_status, json[QString("reviewStatus")]);
    m_review_status_isSet = !json[QString("reviewStatus")].isNull() && m_review_status_isValid;

    m_row_label_isValid = ::OpenAPI::fromJsonValue(m_row_label, json[QString("rowLabel")]);
    m_row_label_isSet = !json[QString("rowLabel")].isNull() && m_row_label_isValid;

    m_seat_label_isValid = ::OpenAPI::fromJsonValue(m_seat_label, json[QString("seatLabel")]);
    m_seat_label_isSet = !json[QString("seatLabel")].isNull() && m_seat_label_isValid;

    m_section_label_isValid = ::OpenAPI::fromJsonValue(m_section_label, json[QString("sectionLabel")]);
    m_section_label_isSet = !json[QString("sectionLabel")].isNull() && m_section_label_isValid;

    m_security_animation_isValid = ::OpenAPI::fromJsonValue(m_security_animation, json[QString("securityAnimation")]);
    m_security_animation_isSet = !json[QString("securityAnimation")].isNull() && m_security_animation_isValid;

    m_text_modules_data_isValid = ::OpenAPI::fromJsonValue(m_text_modules_data, json[QString("textModulesData")]);
    m_text_modules_data_isSet = !json[QString("textModulesData")].isNull() && m_text_modules_data_isValid;

    m_venue_isValid = ::OpenAPI::fromJsonValue(m_venue, json[QString("venue")]);
    m_venue_isSet = !json[QString("venue")].isNull() && m_venue_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;

    m_view_unlock_requirement_isValid = ::OpenAPI::fromJsonValue(m_view_unlock_requirement, json[QString("viewUnlockRequirement")]);
    m_view_unlock_requirement_isSet = !json[QString("viewUnlockRequirement")].isNull() && m_view_unlock_requirement_isValid;

    m_word_mark_isValid = ::OpenAPI::fromJsonValue(m_word_mark, json[QString("wordMark")]);
    m_word_mark_isSet = !json[QString("wordMark")].isNull() && m_word_mark_isValid;
}

QString OAIEventTicketClass::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEventTicketClass::asJsonObject() const {
    QJsonObject obj;
    if (m_allow_multiple_users_per_object_isSet) {
        obj.insert(QString("allowMultipleUsersPerObject"), ::OpenAPI::toJsonValue(m_allow_multiple_users_per_object));
    }
    if (m_callback_options.isSet()) {
        obj.insert(QString("callbackOptions"), ::OpenAPI::toJsonValue(m_callback_options));
    }
    if (m_class_template_info.isSet()) {
        obj.insert(QString("classTemplateInfo"), ::OpenAPI::toJsonValue(m_class_template_info));
    }
    if (m_confirmation_code_label_isSet) {
        obj.insert(QString("confirmationCodeLabel"), ::OpenAPI::toJsonValue(m_confirmation_code_label));
    }
    if (m_country_code_isSet) {
        obj.insert(QString("countryCode"), ::OpenAPI::toJsonValue(m_country_code));
    }
    if (m_custom_confirmation_code_label.isSet()) {
        obj.insert(QString("customConfirmationCodeLabel"), ::OpenAPI::toJsonValue(m_custom_confirmation_code_label));
    }
    if (m_custom_gate_label.isSet()) {
        obj.insert(QString("customGateLabel"), ::OpenAPI::toJsonValue(m_custom_gate_label));
    }
    if (m_custom_row_label.isSet()) {
        obj.insert(QString("customRowLabel"), ::OpenAPI::toJsonValue(m_custom_row_label));
    }
    if (m_custom_seat_label.isSet()) {
        obj.insert(QString("customSeatLabel"), ::OpenAPI::toJsonValue(m_custom_seat_label));
    }
    if (m_custom_section_label.isSet()) {
        obj.insert(QString("customSectionLabel"), ::OpenAPI::toJsonValue(m_custom_section_label));
    }
    if (m_date_time.isSet()) {
        obj.insert(QString("dateTime"), ::OpenAPI::toJsonValue(m_date_time));
    }
    if (m_enable_smart_tap_isSet) {
        obj.insert(QString("enableSmartTap"), ::OpenAPI::toJsonValue(m_enable_smart_tap));
    }
    if (m_event_id_isSet) {
        obj.insert(QString("eventId"), ::OpenAPI::toJsonValue(m_event_id));
    }
    if (m_event_name.isSet()) {
        obj.insert(QString("eventName"), ::OpenAPI::toJsonValue(m_event_name));
    }
    if (m_fine_print.isSet()) {
        obj.insert(QString("finePrint"), ::OpenAPI::toJsonValue(m_fine_print));
    }
    if (m_gate_label_isSet) {
        obj.insert(QString("gateLabel"), ::OpenAPI::toJsonValue(m_gate_label));
    }
    if (m_hero_image.isSet()) {
        obj.insert(QString("heroImage"), ::OpenAPI::toJsonValue(m_hero_image));
    }
    if (m_hex_background_color_isSet) {
        obj.insert(QString("hexBackgroundColor"), ::OpenAPI::toJsonValue(m_hex_background_color));
    }
    if (m_homepage_uri.isSet()) {
        obj.insert(QString("homepageUri"), ::OpenAPI::toJsonValue(m_homepage_uri));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_image_modules_data.size() > 0) {
        obj.insert(QString("imageModulesData"), ::OpenAPI::toJsonValue(m_image_modules_data));
    }
    if (m_info_module_data.isSet()) {
        obj.insert(QString("infoModuleData"), ::OpenAPI::toJsonValue(m_info_module_data));
    }
    if (m_issuer_name_isSet) {
        obj.insert(QString("issuerName"), ::OpenAPI::toJsonValue(m_issuer_name));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_links_module_data.isSet()) {
        obj.insert(QString("linksModuleData"), ::OpenAPI::toJsonValue(m_links_module_data));
    }
    if (m_localized_issuer_name.isSet()) {
        obj.insert(QString("localizedIssuerName"), ::OpenAPI::toJsonValue(m_localized_issuer_name));
    }
    if (m_locations.size() > 0) {
        obj.insert(QString("locations"), ::OpenAPI::toJsonValue(m_locations));
    }
    if (m_logo.isSet()) {
        obj.insert(QString("logo"), ::OpenAPI::toJsonValue(m_logo));
    }
    if (m_messages.size() > 0) {
        obj.insert(QString("messages"), ::OpenAPI::toJsonValue(m_messages));
    }
    if (m_multiple_devices_and_holders_allowed_status_isSet) {
        obj.insert(QString("multipleDevicesAndHoldersAllowedStatus"), ::OpenAPI::toJsonValue(m_multiple_devices_and_holders_allowed_status));
    }
    if (m_redemption_issuers.size() > 0) {
        obj.insert(QString("redemptionIssuers"), ::OpenAPI::toJsonValue(m_redemption_issuers));
    }
    if (m_review.isSet()) {
        obj.insert(QString("review"), ::OpenAPI::toJsonValue(m_review));
    }
    if (m_review_status_isSet) {
        obj.insert(QString("reviewStatus"), ::OpenAPI::toJsonValue(m_review_status));
    }
    if (m_row_label_isSet) {
        obj.insert(QString("rowLabel"), ::OpenAPI::toJsonValue(m_row_label));
    }
    if (m_seat_label_isSet) {
        obj.insert(QString("seatLabel"), ::OpenAPI::toJsonValue(m_seat_label));
    }
    if (m_section_label_isSet) {
        obj.insert(QString("sectionLabel"), ::OpenAPI::toJsonValue(m_section_label));
    }
    if (m_security_animation.isSet()) {
        obj.insert(QString("securityAnimation"), ::OpenAPI::toJsonValue(m_security_animation));
    }
    if (m_text_modules_data.size() > 0) {
        obj.insert(QString("textModulesData"), ::OpenAPI::toJsonValue(m_text_modules_data));
    }
    if (m_venue.isSet()) {
        obj.insert(QString("venue"), ::OpenAPI::toJsonValue(m_venue));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    if (m_view_unlock_requirement_isSet) {
        obj.insert(QString("viewUnlockRequirement"), ::OpenAPI::toJsonValue(m_view_unlock_requirement));
    }
    if (m_word_mark.isSet()) {
        obj.insert(QString("wordMark"), ::OpenAPI::toJsonValue(m_word_mark));
    }
    return obj;
}

bool OAIEventTicketClass::isAllowMultipleUsersPerObject() const {
    return m_allow_multiple_users_per_object;
}
void OAIEventTicketClass::setAllowMultipleUsersPerObject(const bool &allow_multiple_users_per_object) {
    m_allow_multiple_users_per_object = allow_multiple_users_per_object;
    m_allow_multiple_users_per_object_isSet = true;
}

bool OAIEventTicketClass::is_allow_multiple_users_per_object_Set() const{
    return m_allow_multiple_users_per_object_isSet;
}

bool OAIEventTicketClass::is_allow_multiple_users_per_object_Valid() const{
    return m_allow_multiple_users_per_object_isValid;
}

OAICallbackOptions OAIEventTicketClass::getCallbackOptions() const {
    return m_callback_options;
}
void OAIEventTicketClass::setCallbackOptions(const OAICallbackOptions &callback_options) {
    m_callback_options = callback_options;
    m_callback_options_isSet = true;
}

bool OAIEventTicketClass::is_callback_options_Set() const{
    return m_callback_options_isSet;
}

bool OAIEventTicketClass::is_callback_options_Valid() const{
    return m_callback_options_isValid;
}

OAIClassTemplateInfo OAIEventTicketClass::getClassTemplateInfo() const {
    return m_class_template_info;
}
void OAIEventTicketClass::setClassTemplateInfo(const OAIClassTemplateInfo &class_template_info) {
    m_class_template_info = class_template_info;
    m_class_template_info_isSet = true;
}

bool OAIEventTicketClass::is_class_template_info_Set() const{
    return m_class_template_info_isSet;
}

bool OAIEventTicketClass::is_class_template_info_Valid() const{
    return m_class_template_info_isValid;
}

QString OAIEventTicketClass::getConfirmationCodeLabel() const {
    return m_confirmation_code_label;
}
void OAIEventTicketClass::setConfirmationCodeLabel(const QString &confirmation_code_label) {
    m_confirmation_code_label = confirmation_code_label;
    m_confirmation_code_label_isSet = true;
}

bool OAIEventTicketClass::is_confirmation_code_label_Set() const{
    return m_confirmation_code_label_isSet;
}

bool OAIEventTicketClass::is_confirmation_code_label_Valid() const{
    return m_confirmation_code_label_isValid;
}

QString OAIEventTicketClass::getCountryCode() const {
    return m_country_code;
}
void OAIEventTicketClass::setCountryCode(const QString &country_code) {
    m_country_code = country_code;
    m_country_code_isSet = true;
}

bool OAIEventTicketClass::is_country_code_Set() const{
    return m_country_code_isSet;
}

bool OAIEventTicketClass::is_country_code_Valid() const{
    return m_country_code_isValid;
}

OAILocalizedString OAIEventTicketClass::getCustomConfirmationCodeLabel() const {
    return m_custom_confirmation_code_label;
}
void OAIEventTicketClass::setCustomConfirmationCodeLabel(const OAILocalizedString &custom_confirmation_code_label) {
    m_custom_confirmation_code_label = custom_confirmation_code_label;
    m_custom_confirmation_code_label_isSet = true;
}

bool OAIEventTicketClass::is_custom_confirmation_code_label_Set() const{
    return m_custom_confirmation_code_label_isSet;
}

bool OAIEventTicketClass::is_custom_confirmation_code_label_Valid() const{
    return m_custom_confirmation_code_label_isValid;
}

OAILocalizedString OAIEventTicketClass::getCustomGateLabel() const {
    return m_custom_gate_label;
}
void OAIEventTicketClass::setCustomGateLabel(const OAILocalizedString &custom_gate_label) {
    m_custom_gate_label = custom_gate_label;
    m_custom_gate_label_isSet = true;
}

bool OAIEventTicketClass::is_custom_gate_label_Set() const{
    return m_custom_gate_label_isSet;
}

bool OAIEventTicketClass::is_custom_gate_label_Valid() const{
    return m_custom_gate_label_isValid;
}

OAILocalizedString OAIEventTicketClass::getCustomRowLabel() const {
    return m_custom_row_label;
}
void OAIEventTicketClass::setCustomRowLabel(const OAILocalizedString &custom_row_label) {
    m_custom_row_label = custom_row_label;
    m_custom_row_label_isSet = true;
}

bool OAIEventTicketClass::is_custom_row_label_Set() const{
    return m_custom_row_label_isSet;
}

bool OAIEventTicketClass::is_custom_row_label_Valid() const{
    return m_custom_row_label_isValid;
}

OAILocalizedString OAIEventTicketClass::getCustomSeatLabel() const {
    return m_custom_seat_label;
}
void OAIEventTicketClass::setCustomSeatLabel(const OAILocalizedString &custom_seat_label) {
    m_custom_seat_label = custom_seat_label;
    m_custom_seat_label_isSet = true;
}

bool OAIEventTicketClass::is_custom_seat_label_Set() const{
    return m_custom_seat_label_isSet;
}

bool OAIEventTicketClass::is_custom_seat_label_Valid() const{
    return m_custom_seat_label_isValid;
}

OAILocalizedString OAIEventTicketClass::getCustomSectionLabel() const {
    return m_custom_section_label;
}
void OAIEventTicketClass::setCustomSectionLabel(const OAILocalizedString &custom_section_label) {
    m_custom_section_label = custom_section_label;
    m_custom_section_label_isSet = true;
}

bool OAIEventTicketClass::is_custom_section_label_Set() const{
    return m_custom_section_label_isSet;
}

bool OAIEventTicketClass::is_custom_section_label_Valid() const{
    return m_custom_section_label_isValid;
}

OAIEventDateTime OAIEventTicketClass::getDateTime() const {
    return m_date_time;
}
void OAIEventTicketClass::setDateTime(const OAIEventDateTime &date_time) {
    m_date_time = date_time;
    m_date_time_isSet = true;
}

bool OAIEventTicketClass::is_date_time_Set() const{
    return m_date_time_isSet;
}

bool OAIEventTicketClass::is_date_time_Valid() const{
    return m_date_time_isValid;
}

bool OAIEventTicketClass::isEnableSmartTap() const {
    return m_enable_smart_tap;
}
void OAIEventTicketClass::setEnableSmartTap(const bool &enable_smart_tap) {
    m_enable_smart_tap = enable_smart_tap;
    m_enable_smart_tap_isSet = true;
}

bool OAIEventTicketClass::is_enable_smart_tap_Set() const{
    return m_enable_smart_tap_isSet;
}

bool OAIEventTicketClass::is_enable_smart_tap_Valid() const{
    return m_enable_smart_tap_isValid;
}

QString OAIEventTicketClass::getEventId() const {
    return m_event_id;
}
void OAIEventTicketClass::setEventId(const QString &event_id) {
    m_event_id = event_id;
    m_event_id_isSet = true;
}

bool OAIEventTicketClass::is_event_id_Set() const{
    return m_event_id_isSet;
}

bool OAIEventTicketClass::is_event_id_Valid() const{
    return m_event_id_isValid;
}

OAILocalizedString OAIEventTicketClass::getEventName() const {
    return m_event_name;
}
void OAIEventTicketClass::setEventName(const OAILocalizedString &event_name) {
    m_event_name = event_name;
    m_event_name_isSet = true;
}

bool OAIEventTicketClass::is_event_name_Set() const{
    return m_event_name_isSet;
}

bool OAIEventTicketClass::is_event_name_Valid() const{
    return m_event_name_isValid;
}

OAILocalizedString OAIEventTicketClass::getFinePrint() const {
    return m_fine_print;
}
void OAIEventTicketClass::setFinePrint(const OAILocalizedString &fine_print) {
    m_fine_print = fine_print;
    m_fine_print_isSet = true;
}

bool OAIEventTicketClass::is_fine_print_Set() const{
    return m_fine_print_isSet;
}

bool OAIEventTicketClass::is_fine_print_Valid() const{
    return m_fine_print_isValid;
}

QString OAIEventTicketClass::getGateLabel() const {
    return m_gate_label;
}
void OAIEventTicketClass::setGateLabel(const QString &gate_label) {
    m_gate_label = gate_label;
    m_gate_label_isSet = true;
}

bool OAIEventTicketClass::is_gate_label_Set() const{
    return m_gate_label_isSet;
}

bool OAIEventTicketClass::is_gate_label_Valid() const{
    return m_gate_label_isValid;
}

OAIImage OAIEventTicketClass::getHeroImage() const {
    return m_hero_image;
}
void OAIEventTicketClass::setHeroImage(const OAIImage &hero_image) {
    m_hero_image = hero_image;
    m_hero_image_isSet = true;
}

bool OAIEventTicketClass::is_hero_image_Set() const{
    return m_hero_image_isSet;
}

bool OAIEventTicketClass::is_hero_image_Valid() const{
    return m_hero_image_isValid;
}

QString OAIEventTicketClass::getHexBackgroundColor() const {
    return m_hex_background_color;
}
void OAIEventTicketClass::setHexBackgroundColor(const QString &hex_background_color) {
    m_hex_background_color = hex_background_color;
    m_hex_background_color_isSet = true;
}

bool OAIEventTicketClass::is_hex_background_color_Set() const{
    return m_hex_background_color_isSet;
}

bool OAIEventTicketClass::is_hex_background_color_Valid() const{
    return m_hex_background_color_isValid;
}

OAIUri OAIEventTicketClass::getHomepageUri() const {
    return m_homepage_uri;
}
void OAIEventTicketClass::setHomepageUri(const OAIUri &homepage_uri) {
    m_homepage_uri = homepage_uri;
    m_homepage_uri_isSet = true;
}

bool OAIEventTicketClass::is_homepage_uri_Set() const{
    return m_homepage_uri_isSet;
}

bool OAIEventTicketClass::is_homepage_uri_Valid() const{
    return m_homepage_uri_isValid;
}

QString OAIEventTicketClass::getId() const {
    return m_id;
}
void OAIEventTicketClass::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIEventTicketClass::is_id_Set() const{
    return m_id_isSet;
}

bool OAIEventTicketClass::is_id_Valid() const{
    return m_id_isValid;
}

QList<OAIImageModuleData> OAIEventTicketClass::getImageModulesData() const {
    return m_image_modules_data;
}
void OAIEventTicketClass::setImageModulesData(const QList<OAIImageModuleData> &image_modules_data) {
    m_image_modules_data = image_modules_data;
    m_image_modules_data_isSet = true;
}

bool OAIEventTicketClass::is_image_modules_data_Set() const{
    return m_image_modules_data_isSet;
}

bool OAIEventTicketClass::is_image_modules_data_Valid() const{
    return m_image_modules_data_isValid;
}

OAIInfoModuleData OAIEventTicketClass::getInfoModuleData() const {
    return m_info_module_data;
}
void OAIEventTicketClass::setInfoModuleData(const OAIInfoModuleData &info_module_data) {
    m_info_module_data = info_module_data;
    m_info_module_data_isSet = true;
}

bool OAIEventTicketClass::is_info_module_data_Set() const{
    return m_info_module_data_isSet;
}

bool OAIEventTicketClass::is_info_module_data_Valid() const{
    return m_info_module_data_isValid;
}

QString OAIEventTicketClass::getIssuerName() const {
    return m_issuer_name;
}
void OAIEventTicketClass::setIssuerName(const QString &issuer_name) {
    m_issuer_name = issuer_name;
    m_issuer_name_isSet = true;
}

bool OAIEventTicketClass::is_issuer_name_Set() const{
    return m_issuer_name_isSet;
}

bool OAIEventTicketClass::is_issuer_name_Valid() const{
    return m_issuer_name_isValid;
}

QString OAIEventTicketClass::getKind() const {
    return m_kind;
}
void OAIEventTicketClass::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIEventTicketClass::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIEventTicketClass::is_kind_Valid() const{
    return m_kind_isValid;
}

OAILinksModuleData OAIEventTicketClass::getLinksModuleData() const {
    return m_links_module_data;
}
void OAIEventTicketClass::setLinksModuleData(const OAILinksModuleData &links_module_data) {
    m_links_module_data = links_module_data;
    m_links_module_data_isSet = true;
}

bool OAIEventTicketClass::is_links_module_data_Set() const{
    return m_links_module_data_isSet;
}

bool OAIEventTicketClass::is_links_module_data_Valid() const{
    return m_links_module_data_isValid;
}

OAILocalizedString OAIEventTicketClass::getLocalizedIssuerName() const {
    return m_localized_issuer_name;
}
void OAIEventTicketClass::setLocalizedIssuerName(const OAILocalizedString &localized_issuer_name) {
    m_localized_issuer_name = localized_issuer_name;
    m_localized_issuer_name_isSet = true;
}

bool OAIEventTicketClass::is_localized_issuer_name_Set() const{
    return m_localized_issuer_name_isSet;
}

bool OAIEventTicketClass::is_localized_issuer_name_Valid() const{
    return m_localized_issuer_name_isValid;
}

QList<OAILatLongPoint> OAIEventTicketClass::getLocations() const {
    return m_locations;
}
void OAIEventTicketClass::setLocations(const QList<OAILatLongPoint> &locations) {
    m_locations = locations;
    m_locations_isSet = true;
}

bool OAIEventTicketClass::is_locations_Set() const{
    return m_locations_isSet;
}

bool OAIEventTicketClass::is_locations_Valid() const{
    return m_locations_isValid;
}

OAIImage OAIEventTicketClass::getLogo() const {
    return m_logo;
}
void OAIEventTicketClass::setLogo(const OAIImage &logo) {
    m_logo = logo;
    m_logo_isSet = true;
}

bool OAIEventTicketClass::is_logo_Set() const{
    return m_logo_isSet;
}

bool OAIEventTicketClass::is_logo_Valid() const{
    return m_logo_isValid;
}

QList<OAIMessage> OAIEventTicketClass::getMessages() const {
    return m_messages;
}
void OAIEventTicketClass::setMessages(const QList<OAIMessage> &messages) {
    m_messages = messages;
    m_messages_isSet = true;
}

bool OAIEventTicketClass::is_messages_Set() const{
    return m_messages_isSet;
}

bool OAIEventTicketClass::is_messages_Valid() const{
    return m_messages_isValid;
}

QString OAIEventTicketClass::getMultipleDevicesAndHoldersAllowedStatus() const {
    return m_multiple_devices_and_holders_allowed_status;
}
void OAIEventTicketClass::setMultipleDevicesAndHoldersAllowedStatus(const QString &multiple_devices_and_holders_allowed_status) {
    m_multiple_devices_and_holders_allowed_status = multiple_devices_and_holders_allowed_status;
    m_multiple_devices_and_holders_allowed_status_isSet = true;
}

bool OAIEventTicketClass::is_multiple_devices_and_holders_allowed_status_Set() const{
    return m_multiple_devices_and_holders_allowed_status_isSet;
}

bool OAIEventTicketClass::is_multiple_devices_and_holders_allowed_status_Valid() const{
    return m_multiple_devices_and_holders_allowed_status_isValid;
}

QList<QString> OAIEventTicketClass::getRedemptionIssuers() const {
    return m_redemption_issuers;
}
void OAIEventTicketClass::setRedemptionIssuers(const QList<QString> &redemption_issuers) {
    m_redemption_issuers = redemption_issuers;
    m_redemption_issuers_isSet = true;
}

bool OAIEventTicketClass::is_redemption_issuers_Set() const{
    return m_redemption_issuers_isSet;
}

bool OAIEventTicketClass::is_redemption_issuers_Valid() const{
    return m_redemption_issuers_isValid;
}

OAIReview OAIEventTicketClass::getReview() const {
    return m_review;
}
void OAIEventTicketClass::setReview(const OAIReview &review) {
    m_review = review;
    m_review_isSet = true;
}

bool OAIEventTicketClass::is_review_Set() const{
    return m_review_isSet;
}

bool OAIEventTicketClass::is_review_Valid() const{
    return m_review_isValid;
}

QString OAIEventTicketClass::getReviewStatus() const {
    return m_review_status;
}
void OAIEventTicketClass::setReviewStatus(const QString &review_status) {
    m_review_status = review_status;
    m_review_status_isSet = true;
}

bool OAIEventTicketClass::is_review_status_Set() const{
    return m_review_status_isSet;
}

bool OAIEventTicketClass::is_review_status_Valid() const{
    return m_review_status_isValid;
}

QString OAIEventTicketClass::getRowLabel() const {
    return m_row_label;
}
void OAIEventTicketClass::setRowLabel(const QString &row_label) {
    m_row_label = row_label;
    m_row_label_isSet = true;
}

bool OAIEventTicketClass::is_row_label_Set() const{
    return m_row_label_isSet;
}

bool OAIEventTicketClass::is_row_label_Valid() const{
    return m_row_label_isValid;
}

QString OAIEventTicketClass::getSeatLabel() const {
    return m_seat_label;
}
void OAIEventTicketClass::setSeatLabel(const QString &seat_label) {
    m_seat_label = seat_label;
    m_seat_label_isSet = true;
}

bool OAIEventTicketClass::is_seat_label_Set() const{
    return m_seat_label_isSet;
}

bool OAIEventTicketClass::is_seat_label_Valid() const{
    return m_seat_label_isValid;
}

QString OAIEventTicketClass::getSectionLabel() const {
    return m_section_label;
}
void OAIEventTicketClass::setSectionLabel(const QString &section_label) {
    m_section_label = section_label;
    m_section_label_isSet = true;
}

bool OAIEventTicketClass::is_section_label_Set() const{
    return m_section_label_isSet;
}

bool OAIEventTicketClass::is_section_label_Valid() const{
    return m_section_label_isValid;
}

OAISecurityAnimation OAIEventTicketClass::getSecurityAnimation() const {
    return m_security_animation;
}
void OAIEventTicketClass::setSecurityAnimation(const OAISecurityAnimation &security_animation) {
    m_security_animation = security_animation;
    m_security_animation_isSet = true;
}

bool OAIEventTicketClass::is_security_animation_Set() const{
    return m_security_animation_isSet;
}

bool OAIEventTicketClass::is_security_animation_Valid() const{
    return m_security_animation_isValid;
}

QList<OAITextModuleData> OAIEventTicketClass::getTextModulesData() const {
    return m_text_modules_data;
}
void OAIEventTicketClass::setTextModulesData(const QList<OAITextModuleData> &text_modules_data) {
    m_text_modules_data = text_modules_data;
    m_text_modules_data_isSet = true;
}

bool OAIEventTicketClass::is_text_modules_data_Set() const{
    return m_text_modules_data_isSet;
}

bool OAIEventTicketClass::is_text_modules_data_Valid() const{
    return m_text_modules_data_isValid;
}

OAIEventVenue OAIEventTicketClass::getVenue() const {
    return m_venue;
}
void OAIEventTicketClass::setVenue(const OAIEventVenue &venue) {
    m_venue = venue;
    m_venue_isSet = true;
}

bool OAIEventTicketClass::is_venue_Set() const{
    return m_venue_isSet;
}

bool OAIEventTicketClass::is_venue_Valid() const{
    return m_venue_isValid;
}

QString OAIEventTicketClass::getVersion() const {
    return m_version;
}
void OAIEventTicketClass::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIEventTicketClass::is_version_Set() const{
    return m_version_isSet;
}

bool OAIEventTicketClass::is_version_Valid() const{
    return m_version_isValid;
}

QString OAIEventTicketClass::getViewUnlockRequirement() const {
    return m_view_unlock_requirement;
}
void OAIEventTicketClass::setViewUnlockRequirement(const QString &view_unlock_requirement) {
    m_view_unlock_requirement = view_unlock_requirement;
    m_view_unlock_requirement_isSet = true;
}

bool OAIEventTicketClass::is_view_unlock_requirement_Set() const{
    return m_view_unlock_requirement_isSet;
}

bool OAIEventTicketClass::is_view_unlock_requirement_Valid() const{
    return m_view_unlock_requirement_isValid;
}

OAIImage OAIEventTicketClass::getWordMark() const {
    return m_word_mark;
}
void OAIEventTicketClass::setWordMark(const OAIImage &word_mark) {
    m_word_mark = word_mark;
    m_word_mark_isSet = true;
}

bool OAIEventTicketClass::is_word_mark_Set() const{
    return m_word_mark_isSet;
}

bool OAIEventTicketClass::is_word_mark_Valid() const{
    return m_word_mark_isValid;
}

bool OAIEventTicketClass::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allow_multiple_users_per_object_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_callback_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_class_template_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_confirmation_code_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_confirmation_code_label.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_gate_label.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_row_label.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_seat_label.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_section_label.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_time.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_smart_tap_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_name.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_fine_print.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_gate_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hero_image.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_hex_background_color_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_homepage_uri.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_modules_data.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_info_module_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_issuer_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_links_module_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_localized_issuer_name.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_locations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_logo.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_messages.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_multiple_devices_and_holders_allowed_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_redemption_issuers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_review.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_review_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_row_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_seat_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_section_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_security_animation.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_modules_data.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_venue.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_view_unlock_requirement_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_word_mark.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEventTicketClass::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
