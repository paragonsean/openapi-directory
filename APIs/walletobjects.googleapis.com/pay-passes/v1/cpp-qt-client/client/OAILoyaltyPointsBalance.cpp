/**
 * Google Pay Passes API
 * API for issuers to save and manage Google Wallet Objects.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILoyaltyPointsBalance.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILoyaltyPointsBalance::OAILoyaltyPointsBalance(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILoyaltyPointsBalance::OAILoyaltyPointsBalance() {
    this->initializeModel();
}

OAILoyaltyPointsBalance::~OAILoyaltyPointsBalance() {}

void OAILoyaltyPointsBalance::initializeModel() {

    m_r_double_isSet = false;
    m_r_double_isValid = false;

    m_r_int_isSet = false;
    m_r_int_isValid = false;

    m_money_isSet = false;
    m_money_isValid = false;

    m_string_isSet = false;
    m_string_isValid = false;
}

void OAILoyaltyPointsBalance::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILoyaltyPointsBalance::fromJsonObject(QJsonObject json) {

    m_r_double_isValid = ::OpenAPI::fromJsonValue(m_r_double, json[QString("double")]);
    m_r_double_isSet = !json[QString("double")].isNull() && m_r_double_isValid;

    m_r_int_isValid = ::OpenAPI::fromJsonValue(m_r_int, json[QString("int")]);
    m_r_int_isSet = !json[QString("int")].isNull() && m_r_int_isValid;

    m_money_isValid = ::OpenAPI::fromJsonValue(m_money, json[QString("money")]);
    m_money_isSet = !json[QString("money")].isNull() && m_money_isValid;

    m_string_isValid = ::OpenAPI::fromJsonValue(m_string, json[QString("string")]);
    m_string_isSet = !json[QString("string")].isNull() && m_string_isValid;
}

QString OAILoyaltyPointsBalance::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILoyaltyPointsBalance::asJsonObject() const {
    QJsonObject obj;
    if (m_r_double_isSet) {
        obj.insert(QString("double"), ::OpenAPI::toJsonValue(m_r_double));
    }
    if (m_r_int_isSet) {
        obj.insert(QString("int"), ::OpenAPI::toJsonValue(m_r_int));
    }
    if (m_money.isSet()) {
        obj.insert(QString("money"), ::OpenAPI::toJsonValue(m_money));
    }
    if (m_string_isSet) {
        obj.insert(QString("string"), ::OpenAPI::toJsonValue(m_string));
    }
    return obj;
}

double OAILoyaltyPointsBalance::getRDouble() const {
    return m_r_double;
}
void OAILoyaltyPointsBalance::setRDouble(const double &r_double) {
    m_r_double = r_double;
    m_r_double_isSet = true;
}

bool OAILoyaltyPointsBalance::is_r_double_Set() const{
    return m_r_double_isSet;
}

bool OAILoyaltyPointsBalance::is_r_double_Valid() const{
    return m_r_double_isValid;
}

qint32 OAILoyaltyPointsBalance::getRInt() const {
    return m_r_int;
}
void OAILoyaltyPointsBalance::setRInt(const qint32 &r_int) {
    m_r_int = r_int;
    m_r_int_isSet = true;
}

bool OAILoyaltyPointsBalance::is_r_int_Set() const{
    return m_r_int_isSet;
}

bool OAILoyaltyPointsBalance::is_r_int_Valid() const{
    return m_r_int_isValid;
}

OAIMoney OAILoyaltyPointsBalance::getMoney() const {
    return m_money;
}
void OAILoyaltyPointsBalance::setMoney(const OAIMoney &money) {
    m_money = money;
    m_money_isSet = true;
}

bool OAILoyaltyPointsBalance::is_money_Set() const{
    return m_money_isSet;
}

bool OAILoyaltyPointsBalance::is_money_Valid() const{
    return m_money_isValid;
}

QString OAILoyaltyPointsBalance::getString() const {
    return m_string;
}
void OAILoyaltyPointsBalance::setString(const QString &string) {
    m_string = string;
    m_string_isSet = true;
}

bool OAILoyaltyPointsBalance::is_string_Set() const{
    return m_string_isSet;
}

bool OAILoyaltyPointsBalance::is_string_Valid() const{
    return m_string_isValid;
}

bool OAILoyaltyPointsBalance::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_r_double_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_int_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_money.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_string_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILoyaltyPointsBalance::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
