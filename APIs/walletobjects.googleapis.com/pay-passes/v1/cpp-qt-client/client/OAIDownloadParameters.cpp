/**
 * Google Pay Passes API
 * API for issuers to save and manage Google Wallet Objects.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDownloadParameters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDownloadParameters::OAIDownloadParameters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDownloadParameters::OAIDownloadParameters() {
    this->initializeModel();
}

OAIDownloadParameters::~OAIDownloadParameters() {}

void OAIDownloadParameters::initializeModel() {

    m_allow_gzip_compression_isSet = false;
    m_allow_gzip_compression_isValid = false;

    m_ignore_range_isSet = false;
    m_ignore_range_isValid = false;
}

void OAIDownloadParameters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDownloadParameters::fromJsonObject(QJsonObject json) {

    m_allow_gzip_compression_isValid = ::OpenAPI::fromJsonValue(m_allow_gzip_compression, json[QString("allowGzipCompression")]);
    m_allow_gzip_compression_isSet = !json[QString("allowGzipCompression")].isNull() && m_allow_gzip_compression_isValid;

    m_ignore_range_isValid = ::OpenAPI::fromJsonValue(m_ignore_range, json[QString("ignoreRange")]);
    m_ignore_range_isSet = !json[QString("ignoreRange")].isNull() && m_ignore_range_isValid;
}

QString OAIDownloadParameters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDownloadParameters::asJsonObject() const {
    QJsonObject obj;
    if (m_allow_gzip_compression_isSet) {
        obj.insert(QString("allowGzipCompression"), ::OpenAPI::toJsonValue(m_allow_gzip_compression));
    }
    if (m_ignore_range_isSet) {
        obj.insert(QString("ignoreRange"), ::OpenAPI::toJsonValue(m_ignore_range));
    }
    return obj;
}

bool OAIDownloadParameters::isAllowGzipCompression() const {
    return m_allow_gzip_compression;
}
void OAIDownloadParameters::setAllowGzipCompression(const bool &allow_gzip_compression) {
    m_allow_gzip_compression = allow_gzip_compression;
    m_allow_gzip_compression_isSet = true;
}

bool OAIDownloadParameters::is_allow_gzip_compression_Set() const{
    return m_allow_gzip_compression_isSet;
}

bool OAIDownloadParameters::is_allow_gzip_compression_Valid() const{
    return m_allow_gzip_compression_isValid;
}

bool OAIDownloadParameters::isIgnoreRange() const {
    return m_ignore_range;
}
void OAIDownloadParameters::setIgnoreRange(const bool &ignore_range) {
    m_ignore_range = ignore_range;
    m_ignore_range_isSet = true;
}

bool OAIDownloadParameters::is_ignore_range_Set() const{
    return m_ignore_range_isSet;
}

bool OAIDownloadParameters::is_ignore_range_Valid() const{
    return m_ignore_range_isValid;
}

bool OAIDownloadParameters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allow_gzip_compression_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ignore_range_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDownloadParameters::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
