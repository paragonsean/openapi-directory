/**
 * Google Pay Passes API
 * API for issuers to save and manage Google Wallet Objects.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISmartTapMerchantData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISmartTapMerchantData::OAISmartTapMerchantData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISmartTapMerchantData::OAISmartTapMerchantData() {
    this->initializeModel();
}

OAISmartTapMerchantData::~OAISmartTapMerchantData() {}

void OAISmartTapMerchantData::initializeModel() {

    m_authentication_keys_isSet = false;
    m_authentication_keys_isValid = false;

    m_smart_tap_merchant_id_isSet = false;
    m_smart_tap_merchant_id_isValid = false;
}

void OAISmartTapMerchantData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISmartTapMerchantData::fromJsonObject(QJsonObject json) {

    m_authentication_keys_isValid = ::OpenAPI::fromJsonValue(m_authentication_keys, json[QString("authenticationKeys")]);
    m_authentication_keys_isSet = !json[QString("authenticationKeys")].isNull() && m_authentication_keys_isValid;

    m_smart_tap_merchant_id_isValid = ::OpenAPI::fromJsonValue(m_smart_tap_merchant_id, json[QString("smartTapMerchantId")]);
    m_smart_tap_merchant_id_isSet = !json[QString("smartTapMerchantId")].isNull() && m_smart_tap_merchant_id_isValid;
}

QString OAISmartTapMerchantData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISmartTapMerchantData::asJsonObject() const {
    QJsonObject obj;
    if (m_authentication_keys.size() > 0) {
        obj.insert(QString("authenticationKeys"), ::OpenAPI::toJsonValue(m_authentication_keys));
    }
    if (m_smart_tap_merchant_id_isSet) {
        obj.insert(QString("smartTapMerchantId"), ::OpenAPI::toJsonValue(m_smart_tap_merchant_id));
    }
    return obj;
}

QList<OAIAuthenticationKey> OAISmartTapMerchantData::getAuthenticationKeys() const {
    return m_authentication_keys;
}
void OAISmartTapMerchantData::setAuthenticationKeys(const QList<OAIAuthenticationKey> &authentication_keys) {
    m_authentication_keys = authentication_keys;
    m_authentication_keys_isSet = true;
}

bool OAISmartTapMerchantData::is_authentication_keys_Set() const{
    return m_authentication_keys_isSet;
}

bool OAISmartTapMerchantData::is_authentication_keys_Valid() const{
    return m_authentication_keys_isValid;
}

QString OAISmartTapMerchantData::getSmartTapMerchantId() const {
    return m_smart_tap_merchant_id;
}
void OAISmartTapMerchantData::setSmartTapMerchantId(const QString &smart_tap_merchant_id) {
    m_smart_tap_merchant_id = smart_tap_merchant_id;
    m_smart_tap_merchant_id_isSet = true;
}

bool OAISmartTapMerchantData::is_smart_tap_merchant_id_Set() const{
    return m_smart_tap_merchant_id_isSet;
}

bool OAISmartTapMerchantData::is_smart_tap_merchant_id_Valid() const{
    return m_smart_tap_merchant_id_isValid;
}

bool OAISmartTapMerchantData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_authentication_keys.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_smart_tap_merchant_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISmartTapMerchantData::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
