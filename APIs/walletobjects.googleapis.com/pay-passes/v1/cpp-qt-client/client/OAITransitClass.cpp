/**
 * Google Pay Passes API
 * API for issuers to save and manage Google Wallet Objects.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITransitClass.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITransitClass::OAITransitClass(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITransitClass::OAITransitClass() {
    this->initializeModel();
}

OAITransitClass::~OAITransitClass() {}

void OAITransitClass::initializeModel() {

    m_activation_options_isSet = false;
    m_activation_options_isValid = false;

    m_allow_multiple_users_per_object_isSet = false;
    m_allow_multiple_users_per_object_isValid = false;

    m_callback_options_isSet = false;
    m_callback_options_isValid = false;

    m_class_template_info_isSet = false;
    m_class_template_info_isValid = false;

    m_country_code_isSet = false;
    m_country_code_isValid = false;

    m_custom_carriage_label_isSet = false;
    m_custom_carriage_label_isValid = false;

    m_custom_coach_label_isSet = false;
    m_custom_coach_label_isValid = false;

    m_custom_concession_category_label_isSet = false;
    m_custom_concession_category_label_isValid = false;

    m_custom_confirmation_code_label_isSet = false;
    m_custom_confirmation_code_label_isValid = false;

    m_custom_discount_message_label_isSet = false;
    m_custom_discount_message_label_isValid = false;

    m_custom_fare_class_label_isSet = false;
    m_custom_fare_class_label_isValid = false;

    m_custom_fare_name_label_isSet = false;
    m_custom_fare_name_label_isValid = false;

    m_custom_other_restrictions_label_isSet = false;
    m_custom_other_restrictions_label_isValid = false;

    m_custom_platform_label_isSet = false;
    m_custom_platform_label_isValid = false;

    m_custom_purchase_face_value_label_isSet = false;
    m_custom_purchase_face_value_label_isValid = false;

    m_custom_purchase_price_label_isSet = false;
    m_custom_purchase_price_label_isValid = false;

    m_custom_purchase_receipt_number_label_isSet = false;
    m_custom_purchase_receipt_number_label_isValid = false;

    m_custom_route_restrictions_details_label_isSet = false;
    m_custom_route_restrictions_details_label_isValid = false;

    m_custom_route_restrictions_label_isSet = false;
    m_custom_route_restrictions_label_isValid = false;

    m_custom_seat_label_isSet = false;
    m_custom_seat_label_isValid = false;

    m_custom_ticket_number_label_isSet = false;
    m_custom_ticket_number_label_isValid = false;

    m_custom_time_restrictions_label_isSet = false;
    m_custom_time_restrictions_label_isValid = false;

    m_custom_transit_terminus_name_label_isSet = false;
    m_custom_transit_terminus_name_label_isValid = false;

    m_custom_zone_label_isSet = false;
    m_custom_zone_label_isValid = false;

    m_enable_single_leg_itinerary_isSet = false;
    m_enable_single_leg_itinerary_isValid = false;

    m_enable_smart_tap_isSet = false;
    m_enable_smart_tap_isValid = false;

    m_hero_image_isSet = false;
    m_hero_image_isValid = false;

    m_hex_background_color_isSet = false;
    m_hex_background_color_isValid = false;

    m_homepage_uri_isSet = false;
    m_homepage_uri_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_image_modules_data_isSet = false;
    m_image_modules_data_isValid = false;

    m_info_module_data_isSet = false;
    m_info_module_data_isValid = false;

    m_issuer_name_isSet = false;
    m_issuer_name_isValid = false;

    m_language_override_isSet = false;
    m_language_override_isValid = false;

    m_links_module_data_isSet = false;
    m_links_module_data_isValid = false;

    m_localized_issuer_name_isSet = false;
    m_localized_issuer_name_isValid = false;

    m_locations_isSet = false;
    m_locations_isValid = false;

    m_logo_isSet = false;
    m_logo_isValid = false;

    m_messages_isSet = false;
    m_messages_isValid = false;

    m_multiple_devices_and_holders_allowed_status_isSet = false;
    m_multiple_devices_and_holders_allowed_status_isValid = false;

    m_redemption_issuers_isSet = false;
    m_redemption_issuers_isValid = false;

    m_review_isSet = false;
    m_review_isValid = false;

    m_review_status_isSet = false;
    m_review_status_isValid = false;

    m_security_animation_isSet = false;
    m_security_animation_isValid = false;

    m_text_modules_data_isSet = false;
    m_text_modules_data_isValid = false;

    m_transit_operator_name_isSet = false;
    m_transit_operator_name_isValid = false;

    m_transit_type_isSet = false;
    m_transit_type_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;

    m_view_unlock_requirement_isSet = false;
    m_view_unlock_requirement_isValid = false;

    m_watermark_isSet = false;
    m_watermark_isValid = false;

    m_word_mark_isSet = false;
    m_word_mark_isValid = false;
}

void OAITransitClass::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITransitClass::fromJsonObject(QJsonObject json) {

    m_activation_options_isValid = ::OpenAPI::fromJsonValue(m_activation_options, json[QString("activationOptions")]);
    m_activation_options_isSet = !json[QString("activationOptions")].isNull() && m_activation_options_isValid;

    m_allow_multiple_users_per_object_isValid = ::OpenAPI::fromJsonValue(m_allow_multiple_users_per_object, json[QString("allowMultipleUsersPerObject")]);
    m_allow_multiple_users_per_object_isSet = !json[QString("allowMultipleUsersPerObject")].isNull() && m_allow_multiple_users_per_object_isValid;

    m_callback_options_isValid = ::OpenAPI::fromJsonValue(m_callback_options, json[QString("callbackOptions")]);
    m_callback_options_isSet = !json[QString("callbackOptions")].isNull() && m_callback_options_isValid;

    m_class_template_info_isValid = ::OpenAPI::fromJsonValue(m_class_template_info, json[QString("classTemplateInfo")]);
    m_class_template_info_isSet = !json[QString("classTemplateInfo")].isNull() && m_class_template_info_isValid;

    m_country_code_isValid = ::OpenAPI::fromJsonValue(m_country_code, json[QString("countryCode")]);
    m_country_code_isSet = !json[QString("countryCode")].isNull() && m_country_code_isValid;

    m_custom_carriage_label_isValid = ::OpenAPI::fromJsonValue(m_custom_carriage_label, json[QString("customCarriageLabel")]);
    m_custom_carriage_label_isSet = !json[QString("customCarriageLabel")].isNull() && m_custom_carriage_label_isValid;

    m_custom_coach_label_isValid = ::OpenAPI::fromJsonValue(m_custom_coach_label, json[QString("customCoachLabel")]);
    m_custom_coach_label_isSet = !json[QString("customCoachLabel")].isNull() && m_custom_coach_label_isValid;

    m_custom_concession_category_label_isValid = ::OpenAPI::fromJsonValue(m_custom_concession_category_label, json[QString("customConcessionCategoryLabel")]);
    m_custom_concession_category_label_isSet = !json[QString("customConcessionCategoryLabel")].isNull() && m_custom_concession_category_label_isValid;

    m_custom_confirmation_code_label_isValid = ::OpenAPI::fromJsonValue(m_custom_confirmation_code_label, json[QString("customConfirmationCodeLabel")]);
    m_custom_confirmation_code_label_isSet = !json[QString("customConfirmationCodeLabel")].isNull() && m_custom_confirmation_code_label_isValid;

    m_custom_discount_message_label_isValid = ::OpenAPI::fromJsonValue(m_custom_discount_message_label, json[QString("customDiscountMessageLabel")]);
    m_custom_discount_message_label_isSet = !json[QString("customDiscountMessageLabel")].isNull() && m_custom_discount_message_label_isValid;

    m_custom_fare_class_label_isValid = ::OpenAPI::fromJsonValue(m_custom_fare_class_label, json[QString("customFareClassLabel")]);
    m_custom_fare_class_label_isSet = !json[QString("customFareClassLabel")].isNull() && m_custom_fare_class_label_isValid;

    m_custom_fare_name_label_isValid = ::OpenAPI::fromJsonValue(m_custom_fare_name_label, json[QString("customFareNameLabel")]);
    m_custom_fare_name_label_isSet = !json[QString("customFareNameLabel")].isNull() && m_custom_fare_name_label_isValid;

    m_custom_other_restrictions_label_isValid = ::OpenAPI::fromJsonValue(m_custom_other_restrictions_label, json[QString("customOtherRestrictionsLabel")]);
    m_custom_other_restrictions_label_isSet = !json[QString("customOtherRestrictionsLabel")].isNull() && m_custom_other_restrictions_label_isValid;

    m_custom_platform_label_isValid = ::OpenAPI::fromJsonValue(m_custom_platform_label, json[QString("customPlatformLabel")]);
    m_custom_platform_label_isSet = !json[QString("customPlatformLabel")].isNull() && m_custom_platform_label_isValid;

    m_custom_purchase_face_value_label_isValid = ::OpenAPI::fromJsonValue(m_custom_purchase_face_value_label, json[QString("customPurchaseFaceValueLabel")]);
    m_custom_purchase_face_value_label_isSet = !json[QString("customPurchaseFaceValueLabel")].isNull() && m_custom_purchase_face_value_label_isValid;

    m_custom_purchase_price_label_isValid = ::OpenAPI::fromJsonValue(m_custom_purchase_price_label, json[QString("customPurchasePriceLabel")]);
    m_custom_purchase_price_label_isSet = !json[QString("customPurchasePriceLabel")].isNull() && m_custom_purchase_price_label_isValid;

    m_custom_purchase_receipt_number_label_isValid = ::OpenAPI::fromJsonValue(m_custom_purchase_receipt_number_label, json[QString("customPurchaseReceiptNumberLabel")]);
    m_custom_purchase_receipt_number_label_isSet = !json[QString("customPurchaseReceiptNumberLabel")].isNull() && m_custom_purchase_receipt_number_label_isValid;

    m_custom_route_restrictions_details_label_isValid = ::OpenAPI::fromJsonValue(m_custom_route_restrictions_details_label, json[QString("customRouteRestrictionsDetailsLabel")]);
    m_custom_route_restrictions_details_label_isSet = !json[QString("customRouteRestrictionsDetailsLabel")].isNull() && m_custom_route_restrictions_details_label_isValid;

    m_custom_route_restrictions_label_isValid = ::OpenAPI::fromJsonValue(m_custom_route_restrictions_label, json[QString("customRouteRestrictionsLabel")]);
    m_custom_route_restrictions_label_isSet = !json[QString("customRouteRestrictionsLabel")].isNull() && m_custom_route_restrictions_label_isValid;

    m_custom_seat_label_isValid = ::OpenAPI::fromJsonValue(m_custom_seat_label, json[QString("customSeatLabel")]);
    m_custom_seat_label_isSet = !json[QString("customSeatLabel")].isNull() && m_custom_seat_label_isValid;

    m_custom_ticket_number_label_isValid = ::OpenAPI::fromJsonValue(m_custom_ticket_number_label, json[QString("customTicketNumberLabel")]);
    m_custom_ticket_number_label_isSet = !json[QString("customTicketNumberLabel")].isNull() && m_custom_ticket_number_label_isValid;

    m_custom_time_restrictions_label_isValid = ::OpenAPI::fromJsonValue(m_custom_time_restrictions_label, json[QString("customTimeRestrictionsLabel")]);
    m_custom_time_restrictions_label_isSet = !json[QString("customTimeRestrictionsLabel")].isNull() && m_custom_time_restrictions_label_isValid;

    m_custom_transit_terminus_name_label_isValid = ::OpenAPI::fromJsonValue(m_custom_transit_terminus_name_label, json[QString("customTransitTerminusNameLabel")]);
    m_custom_transit_terminus_name_label_isSet = !json[QString("customTransitTerminusNameLabel")].isNull() && m_custom_transit_terminus_name_label_isValid;

    m_custom_zone_label_isValid = ::OpenAPI::fromJsonValue(m_custom_zone_label, json[QString("customZoneLabel")]);
    m_custom_zone_label_isSet = !json[QString("customZoneLabel")].isNull() && m_custom_zone_label_isValid;

    m_enable_single_leg_itinerary_isValid = ::OpenAPI::fromJsonValue(m_enable_single_leg_itinerary, json[QString("enableSingleLegItinerary")]);
    m_enable_single_leg_itinerary_isSet = !json[QString("enableSingleLegItinerary")].isNull() && m_enable_single_leg_itinerary_isValid;

    m_enable_smart_tap_isValid = ::OpenAPI::fromJsonValue(m_enable_smart_tap, json[QString("enableSmartTap")]);
    m_enable_smart_tap_isSet = !json[QString("enableSmartTap")].isNull() && m_enable_smart_tap_isValid;

    m_hero_image_isValid = ::OpenAPI::fromJsonValue(m_hero_image, json[QString("heroImage")]);
    m_hero_image_isSet = !json[QString("heroImage")].isNull() && m_hero_image_isValid;

    m_hex_background_color_isValid = ::OpenAPI::fromJsonValue(m_hex_background_color, json[QString("hexBackgroundColor")]);
    m_hex_background_color_isSet = !json[QString("hexBackgroundColor")].isNull() && m_hex_background_color_isValid;

    m_homepage_uri_isValid = ::OpenAPI::fromJsonValue(m_homepage_uri, json[QString("homepageUri")]);
    m_homepage_uri_isSet = !json[QString("homepageUri")].isNull() && m_homepage_uri_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_image_modules_data_isValid = ::OpenAPI::fromJsonValue(m_image_modules_data, json[QString("imageModulesData")]);
    m_image_modules_data_isSet = !json[QString("imageModulesData")].isNull() && m_image_modules_data_isValid;

    m_info_module_data_isValid = ::OpenAPI::fromJsonValue(m_info_module_data, json[QString("infoModuleData")]);
    m_info_module_data_isSet = !json[QString("infoModuleData")].isNull() && m_info_module_data_isValid;

    m_issuer_name_isValid = ::OpenAPI::fromJsonValue(m_issuer_name, json[QString("issuerName")]);
    m_issuer_name_isSet = !json[QString("issuerName")].isNull() && m_issuer_name_isValid;

    m_language_override_isValid = ::OpenAPI::fromJsonValue(m_language_override, json[QString("languageOverride")]);
    m_language_override_isSet = !json[QString("languageOverride")].isNull() && m_language_override_isValid;

    m_links_module_data_isValid = ::OpenAPI::fromJsonValue(m_links_module_data, json[QString("linksModuleData")]);
    m_links_module_data_isSet = !json[QString("linksModuleData")].isNull() && m_links_module_data_isValid;

    m_localized_issuer_name_isValid = ::OpenAPI::fromJsonValue(m_localized_issuer_name, json[QString("localizedIssuerName")]);
    m_localized_issuer_name_isSet = !json[QString("localizedIssuerName")].isNull() && m_localized_issuer_name_isValid;

    m_locations_isValid = ::OpenAPI::fromJsonValue(m_locations, json[QString("locations")]);
    m_locations_isSet = !json[QString("locations")].isNull() && m_locations_isValid;

    m_logo_isValid = ::OpenAPI::fromJsonValue(m_logo, json[QString("logo")]);
    m_logo_isSet = !json[QString("logo")].isNull() && m_logo_isValid;

    m_messages_isValid = ::OpenAPI::fromJsonValue(m_messages, json[QString("messages")]);
    m_messages_isSet = !json[QString("messages")].isNull() && m_messages_isValid;

    m_multiple_devices_and_holders_allowed_status_isValid = ::OpenAPI::fromJsonValue(m_multiple_devices_and_holders_allowed_status, json[QString("multipleDevicesAndHoldersAllowedStatus")]);
    m_multiple_devices_and_holders_allowed_status_isSet = !json[QString("multipleDevicesAndHoldersAllowedStatus")].isNull() && m_multiple_devices_and_holders_allowed_status_isValid;

    m_redemption_issuers_isValid = ::OpenAPI::fromJsonValue(m_redemption_issuers, json[QString("redemptionIssuers")]);
    m_redemption_issuers_isSet = !json[QString("redemptionIssuers")].isNull() && m_redemption_issuers_isValid;

    m_review_isValid = ::OpenAPI::fromJsonValue(m_review, json[QString("review")]);
    m_review_isSet = !json[QString("review")].isNull() && m_review_isValid;

    m_review_status_isValid = ::OpenAPI::fromJsonValue(m_review_status, json[QString("reviewStatus")]);
    m_review_status_isSet = !json[QString("reviewStatus")].isNull() && m_review_status_isValid;

    m_security_animation_isValid = ::OpenAPI::fromJsonValue(m_security_animation, json[QString("securityAnimation")]);
    m_security_animation_isSet = !json[QString("securityAnimation")].isNull() && m_security_animation_isValid;

    m_text_modules_data_isValid = ::OpenAPI::fromJsonValue(m_text_modules_data, json[QString("textModulesData")]);
    m_text_modules_data_isSet = !json[QString("textModulesData")].isNull() && m_text_modules_data_isValid;

    m_transit_operator_name_isValid = ::OpenAPI::fromJsonValue(m_transit_operator_name, json[QString("transitOperatorName")]);
    m_transit_operator_name_isSet = !json[QString("transitOperatorName")].isNull() && m_transit_operator_name_isValid;

    m_transit_type_isValid = ::OpenAPI::fromJsonValue(m_transit_type, json[QString("transitType")]);
    m_transit_type_isSet = !json[QString("transitType")].isNull() && m_transit_type_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;

    m_view_unlock_requirement_isValid = ::OpenAPI::fromJsonValue(m_view_unlock_requirement, json[QString("viewUnlockRequirement")]);
    m_view_unlock_requirement_isSet = !json[QString("viewUnlockRequirement")].isNull() && m_view_unlock_requirement_isValid;

    m_watermark_isValid = ::OpenAPI::fromJsonValue(m_watermark, json[QString("watermark")]);
    m_watermark_isSet = !json[QString("watermark")].isNull() && m_watermark_isValid;

    m_word_mark_isValid = ::OpenAPI::fromJsonValue(m_word_mark, json[QString("wordMark")]);
    m_word_mark_isSet = !json[QString("wordMark")].isNull() && m_word_mark_isValid;
}

QString OAITransitClass::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITransitClass::asJsonObject() const {
    QJsonObject obj;
    if (m_activation_options.isSet()) {
        obj.insert(QString("activationOptions"), ::OpenAPI::toJsonValue(m_activation_options));
    }
    if (m_allow_multiple_users_per_object_isSet) {
        obj.insert(QString("allowMultipleUsersPerObject"), ::OpenAPI::toJsonValue(m_allow_multiple_users_per_object));
    }
    if (m_callback_options.isSet()) {
        obj.insert(QString("callbackOptions"), ::OpenAPI::toJsonValue(m_callback_options));
    }
    if (m_class_template_info.isSet()) {
        obj.insert(QString("classTemplateInfo"), ::OpenAPI::toJsonValue(m_class_template_info));
    }
    if (m_country_code_isSet) {
        obj.insert(QString("countryCode"), ::OpenAPI::toJsonValue(m_country_code));
    }
    if (m_custom_carriage_label.isSet()) {
        obj.insert(QString("customCarriageLabel"), ::OpenAPI::toJsonValue(m_custom_carriage_label));
    }
    if (m_custom_coach_label.isSet()) {
        obj.insert(QString("customCoachLabel"), ::OpenAPI::toJsonValue(m_custom_coach_label));
    }
    if (m_custom_concession_category_label.isSet()) {
        obj.insert(QString("customConcessionCategoryLabel"), ::OpenAPI::toJsonValue(m_custom_concession_category_label));
    }
    if (m_custom_confirmation_code_label.isSet()) {
        obj.insert(QString("customConfirmationCodeLabel"), ::OpenAPI::toJsonValue(m_custom_confirmation_code_label));
    }
    if (m_custom_discount_message_label.isSet()) {
        obj.insert(QString("customDiscountMessageLabel"), ::OpenAPI::toJsonValue(m_custom_discount_message_label));
    }
    if (m_custom_fare_class_label.isSet()) {
        obj.insert(QString("customFareClassLabel"), ::OpenAPI::toJsonValue(m_custom_fare_class_label));
    }
    if (m_custom_fare_name_label.isSet()) {
        obj.insert(QString("customFareNameLabel"), ::OpenAPI::toJsonValue(m_custom_fare_name_label));
    }
    if (m_custom_other_restrictions_label.isSet()) {
        obj.insert(QString("customOtherRestrictionsLabel"), ::OpenAPI::toJsonValue(m_custom_other_restrictions_label));
    }
    if (m_custom_platform_label.isSet()) {
        obj.insert(QString("customPlatformLabel"), ::OpenAPI::toJsonValue(m_custom_platform_label));
    }
    if (m_custom_purchase_face_value_label.isSet()) {
        obj.insert(QString("customPurchaseFaceValueLabel"), ::OpenAPI::toJsonValue(m_custom_purchase_face_value_label));
    }
    if (m_custom_purchase_price_label.isSet()) {
        obj.insert(QString("customPurchasePriceLabel"), ::OpenAPI::toJsonValue(m_custom_purchase_price_label));
    }
    if (m_custom_purchase_receipt_number_label.isSet()) {
        obj.insert(QString("customPurchaseReceiptNumberLabel"), ::OpenAPI::toJsonValue(m_custom_purchase_receipt_number_label));
    }
    if (m_custom_route_restrictions_details_label.isSet()) {
        obj.insert(QString("customRouteRestrictionsDetailsLabel"), ::OpenAPI::toJsonValue(m_custom_route_restrictions_details_label));
    }
    if (m_custom_route_restrictions_label.isSet()) {
        obj.insert(QString("customRouteRestrictionsLabel"), ::OpenAPI::toJsonValue(m_custom_route_restrictions_label));
    }
    if (m_custom_seat_label.isSet()) {
        obj.insert(QString("customSeatLabel"), ::OpenAPI::toJsonValue(m_custom_seat_label));
    }
    if (m_custom_ticket_number_label.isSet()) {
        obj.insert(QString("customTicketNumberLabel"), ::OpenAPI::toJsonValue(m_custom_ticket_number_label));
    }
    if (m_custom_time_restrictions_label.isSet()) {
        obj.insert(QString("customTimeRestrictionsLabel"), ::OpenAPI::toJsonValue(m_custom_time_restrictions_label));
    }
    if (m_custom_transit_terminus_name_label.isSet()) {
        obj.insert(QString("customTransitTerminusNameLabel"), ::OpenAPI::toJsonValue(m_custom_transit_terminus_name_label));
    }
    if (m_custom_zone_label.isSet()) {
        obj.insert(QString("customZoneLabel"), ::OpenAPI::toJsonValue(m_custom_zone_label));
    }
    if (m_enable_single_leg_itinerary_isSet) {
        obj.insert(QString("enableSingleLegItinerary"), ::OpenAPI::toJsonValue(m_enable_single_leg_itinerary));
    }
    if (m_enable_smart_tap_isSet) {
        obj.insert(QString("enableSmartTap"), ::OpenAPI::toJsonValue(m_enable_smart_tap));
    }
    if (m_hero_image.isSet()) {
        obj.insert(QString("heroImage"), ::OpenAPI::toJsonValue(m_hero_image));
    }
    if (m_hex_background_color_isSet) {
        obj.insert(QString("hexBackgroundColor"), ::OpenAPI::toJsonValue(m_hex_background_color));
    }
    if (m_homepage_uri.isSet()) {
        obj.insert(QString("homepageUri"), ::OpenAPI::toJsonValue(m_homepage_uri));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_image_modules_data.size() > 0) {
        obj.insert(QString("imageModulesData"), ::OpenAPI::toJsonValue(m_image_modules_data));
    }
    if (m_info_module_data.isSet()) {
        obj.insert(QString("infoModuleData"), ::OpenAPI::toJsonValue(m_info_module_data));
    }
    if (m_issuer_name_isSet) {
        obj.insert(QString("issuerName"), ::OpenAPI::toJsonValue(m_issuer_name));
    }
    if (m_language_override_isSet) {
        obj.insert(QString("languageOverride"), ::OpenAPI::toJsonValue(m_language_override));
    }
    if (m_links_module_data.isSet()) {
        obj.insert(QString("linksModuleData"), ::OpenAPI::toJsonValue(m_links_module_data));
    }
    if (m_localized_issuer_name.isSet()) {
        obj.insert(QString("localizedIssuerName"), ::OpenAPI::toJsonValue(m_localized_issuer_name));
    }
    if (m_locations.size() > 0) {
        obj.insert(QString("locations"), ::OpenAPI::toJsonValue(m_locations));
    }
    if (m_logo.isSet()) {
        obj.insert(QString("logo"), ::OpenAPI::toJsonValue(m_logo));
    }
    if (m_messages.size() > 0) {
        obj.insert(QString("messages"), ::OpenAPI::toJsonValue(m_messages));
    }
    if (m_multiple_devices_and_holders_allowed_status_isSet) {
        obj.insert(QString("multipleDevicesAndHoldersAllowedStatus"), ::OpenAPI::toJsonValue(m_multiple_devices_and_holders_allowed_status));
    }
    if (m_redemption_issuers.size() > 0) {
        obj.insert(QString("redemptionIssuers"), ::OpenAPI::toJsonValue(m_redemption_issuers));
    }
    if (m_review.isSet()) {
        obj.insert(QString("review"), ::OpenAPI::toJsonValue(m_review));
    }
    if (m_review_status_isSet) {
        obj.insert(QString("reviewStatus"), ::OpenAPI::toJsonValue(m_review_status));
    }
    if (m_security_animation.isSet()) {
        obj.insert(QString("securityAnimation"), ::OpenAPI::toJsonValue(m_security_animation));
    }
    if (m_text_modules_data.size() > 0) {
        obj.insert(QString("textModulesData"), ::OpenAPI::toJsonValue(m_text_modules_data));
    }
    if (m_transit_operator_name.isSet()) {
        obj.insert(QString("transitOperatorName"), ::OpenAPI::toJsonValue(m_transit_operator_name));
    }
    if (m_transit_type_isSet) {
        obj.insert(QString("transitType"), ::OpenAPI::toJsonValue(m_transit_type));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    if (m_view_unlock_requirement_isSet) {
        obj.insert(QString("viewUnlockRequirement"), ::OpenAPI::toJsonValue(m_view_unlock_requirement));
    }
    if (m_watermark.isSet()) {
        obj.insert(QString("watermark"), ::OpenAPI::toJsonValue(m_watermark));
    }
    if (m_word_mark.isSet()) {
        obj.insert(QString("wordMark"), ::OpenAPI::toJsonValue(m_word_mark));
    }
    return obj;
}

OAIActivationOptions OAITransitClass::getActivationOptions() const {
    return m_activation_options;
}
void OAITransitClass::setActivationOptions(const OAIActivationOptions &activation_options) {
    m_activation_options = activation_options;
    m_activation_options_isSet = true;
}

bool OAITransitClass::is_activation_options_Set() const{
    return m_activation_options_isSet;
}

bool OAITransitClass::is_activation_options_Valid() const{
    return m_activation_options_isValid;
}

bool OAITransitClass::isAllowMultipleUsersPerObject() const {
    return m_allow_multiple_users_per_object;
}
void OAITransitClass::setAllowMultipleUsersPerObject(const bool &allow_multiple_users_per_object) {
    m_allow_multiple_users_per_object = allow_multiple_users_per_object;
    m_allow_multiple_users_per_object_isSet = true;
}

bool OAITransitClass::is_allow_multiple_users_per_object_Set() const{
    return m_allow_multiple_users_per_object_isSet;
}

bool OAITransitClass::is_allow_multiple_users_per_object_Valid() const{
    return m_allow_multiple_users_per_object_isValid;
}

OAICallbackOptions OAITransitClass::getCallbackOptions() const {
    return m_callback_options;
}
void OAITransitClass::setCallbackOptions(const OAICallbackOptions &callback_options) {
    m_callback_options = callback_options;
    m_callback_options_isSet = true;
}

bool OAITransitClass::is_callback_options_Set() const{
    return m_callback_options_isSet;
}

bool OAITransitClass::is_callback_options_Valid() const{
    return m_callback_options_isValid;
}

OAIClassTemplateInfo OAITransitClass::getClassTemplateInfo() const {
    return m_class_template_info;
}
void OAITransitClass::setClassTemplateInfo(const OAIClassTemplateInfo &class_template_info) {
    m_class_template_info = class_template_info;
    m_class_template_info_isSet = true;
}

bool OAITransitClass::is_class_template_info_Set() const{
    return m_class_template_info_isSet;
}

bool OAITransitClass::is_class_template_info_Valid() const{
    return m_class_template_info_isValid;
}

QString OAITransitClass::getCountryCode() const {
    return m_country_code;
}
void OAITransitClass::setCountryCode(const QString &country_code) {
    m_country_code = country_code;
    m_country_code_isSet = true;
}

bool OAITransitClass::is_country_code_Set() const{
    return m_country_code_isSet;
}

bool OAITransitClass::is_country_code_Valid() const{
    return m_country_code_isValid;
}

OAILocalizedString OAITransitClass::getCustomCarriageLabel() const {
    return m_custom_carriage_label;
}
void OAITransitClass::setCustomCarriageLabel(const OAILocalizedString &custom_carriage_label) {
    m_custom_carriage_label = custom_carriage_label;
    m_custom_carriage_label_isSet = true;
}

bool OAITransitClass::is_custom_carriage_label_Set() const{
    return m_custom_carriage_label_isSet;
}

bool OAITransitClass::is_custom_carriage_label_Valid() const{
    return m_custom_carriage_label_isValid;
}

OAILocalizedString OAITransitClass::getCustomCoachLabel() const {
    return m_custom_coach_label;
}
void OAITransitClass::setCustomCoachLabel(const OAILocalizedString &custom_coach_label) {
    m_custom_coach_label = custom_coach_label;
    m_custom_coach_label_isSet = true;
}

bool OAITransitClass::is_custom_coach_label_Set() const{
    return m_custom_coach_label_isSet;
}

bool OAITransitClass::is_custom_coach_label_Valid() const{
    return m_custom_coach_label_isValid;
}

OAILocalizedString OAITransitClass::getCustomConcessionCategoryLabel() const {
    return m_custom_concession_category_label;
}
void OAITransitClass::setCustomConcessionCategoryLabel(const OAILocalizedString &custom_concession_category_label) {
    m_custom_concession_category_label = custom_concession_category_label;
    m_custom_concession_category_label_isSet = true;
}

bool OAITransitClass::is_custom_concession_category_label_Set() const{
    return m_custom_concession_category_label_isSet;
}

bool OAITransitClass::is_custom_concession_category_label_Valid() const{
    return m_custom_concession_category_label_isValid;
}

OAILocalizedString OAITransitClass::getCustomConfirmationCodeLabel() const {
    return m_custom_confirmation_code_label;
}
void OAITransitClass::setCustomConfirmationCodeLabel(const OAILocalizedString &custom_confirmation_code_label) {
    m_custom_confirmation_code_label = custom_confirmation_code_label;
    m_custom_confirmation_code_label_isSet = true;
}

bool OAITransitClass::is_custom_confirmation_code_label_Set() const{
    return m_custom_confirmation_code_label_isSet;
}

bool OAITransitClass::is_custom_confirmation_code_label_Valid() const{
    return m_custom_confirmation_code_label_isValid;
}

OAILocalizedString OAITransitClass::getCustomDiscountMessageLabel() const {
    return m_custom_discount_message_label;
}
void OAITransitClass::setCustomDiscountMessageLabel(const OAILocalizedString &custom_discount_message_label) {
    m_custom_discount_message_label = custom_discount_message_label;
    m_custom_discount_message_label_isSet = true;
}

bool OAITransitClass::is_custom_discount_message_label_Set() const{
    return m_custom_discount_message_label_isSet;
}

bool OAITransitClass::is_custom_discount_message_label_Valid() const{
    return m_custom_discount_message_label_isValid;
}

OAILocalizedString OAITransitClass::getCustomFareClassLabel() const {
    return m_custom_fare_class_label;
}
void OAITransitClass::setCustomFareClassLabel(const OAILocalizedString &custom_fare_class_label) {
    m_custom_fare_class_label = custom_fare_class_label;
    m_custom_fare_class_label_isSet = true;
}

bool OAITransitClass::is_custom_fare_class_label_Set() const{
    return m_custom_fare_class_label_isSet;
}

bool OAITransitClass::is_custom_fare_class_label_Valid() const{
    return m_custom_fare_class_label_isValid;
}

OAILocalizedString OAITransitClass::getCustomFareNameLabel() const {
    return m_custom_fare_name_label;
}
void OAITransitClass::setCustomFareNameLabel(const OAILocalizedString &custom_fare_name_label) {
    m_custom_fare_name_label = custom_fare_name_label;
    m_custom_fare_name_label_isSet = true;
}

bool OAITransitClass::is_custom_fare_name_label_Set() const{
    return m_custom_fare_name_label_isSet;
}

bool OAITransitClass::is_custom_fare_name_label_Valid() const{
    return m_custom_fare_name_label_isValid;
}

OAILocalizedString OAITransitClass::getCustomOtherRestrictionsLabel() const {
    return m_custom_other_restrictions_label;
}
void OAITransitClass::setCustomOtherRestrictionsLabel(const OAILocalizedString &custom_other_restrictions_label) {
    m_custom_other_restrictions_label = custom_other_restrictions_label;
    m_custom_other_restrictions_label_isSet = true;
}

bool OAITransitClass::is_custom_other_restrictions_label_Set() const{
    return m_custom_other_restrictions_label_isSet;
}

bool OAITransitClass::is_custom_other_restrictions_label_Valid() const{
    return m_custom_other_restrictions_label_isValid;
}

OAILocalizedString OAITransitClass::getCustomPlatformLabel() const {
    return m_custom_platform_label;
}
void OAITransitClass::setCustomPlatformLabel(const OAILocalizedString &custom_platform_label) {
    m_custom_platform_label = custom_platform_label;
    m_custom_platform_label_isSet = true;
}

bool OAITransitClass::is_custom_platform_label_Set() const{
    return m_custom_platform_label_isSet;
}

bool OAITransitClass::is_custom_platform_label_Valid() const{
    return m_custom_platform_label_isValid;
}

OAILocalizedString OAITransitClass::getCustomPurchaseFaceValueLabel() const {
    return m_custom_purchase_face_value_label;
}
void OAITransitClass::setCustomPurchaseFaceValueLabel(const OAILocalizedString &custom_purchase_face_value_label) {
    m_custom_purchase_face_value_label = custom_purchase_face_value_label;
    m_custom_purchase_face_value_label_isSet = true;
}

bool OAITransitClass::is_custom_purchase_face_value_label_Set() const{
    return m_custom_purchase_face_value_label_isSet;
}

bool OAITransitClass::is_custom_purchase_face_value_label_Valid() const{
    return m_custom_purchase_face_value_label_isValid;
}

OAILocalizedString OAITransitClass::getCustomPurchasePriceLabel() const {
    return m_custom_purchase_price_label;
}
void OAITransitClass::setCustomPurchasePriceLabel(const OAILocalizedString &custom_purchase_price_label) {
    m_custom_purchase_price_label = custom_purchase_price_label;
    m_custom_purchase_price_label_isSet = true;
}

bool OAITransitClass::is_custom_purchase_price_label_Set() const{
    return m_custom_purchase_price_label_isSet;
}

bool OAITransitClass::is_custom_purchase_price_label_Valid() const{
    return m_custom_purchase_price_label_isValid;
}

OAILocalizedString OAITransitClass::getCustomPurchaseReceiptNumberLabel() const {
    return m_custom_purchase_receipt_number_label;
}
void OAITransitClass::setCustomPurchaseReceiptNumberLabel(const OAILocalizedString &custom_purchase_receipt_number_label) {
    m_custom_purchase_receipt_number_label = custom_purchase_receipt_number_label;
    m_custom_purchase_receipt_number_label_isSet = true;
}

bool OAITransitClass::is_custom_purchase_receipt_number_label_Set() const{
    return m_custom_purchase_receipt_number_label_isSet;
}

bool OAITransitClass::is_custom_purchase_receipt_number_label_Valid() const{
    return m_custom_purchase_receipt_number_label_isValid;
}

OAILocalizedString OAITransitClass::getCustomRouteRestrictionsDetailsLabel() const {
    return m_custom_route_restrictions_details_label;
}
void OAITransitClass::setCustomRouteRestrictionsDetailsLabel(const OAILocalizedString &custom_route_restrictions_details_label) {
    m_custom_route_restrictions_details_label = custom_route_restrictions_details_label;
    m_custom_route_restrictions_details_label_isSet = true;
}

bool OAITransitClass::is_custom_route_restrictions_details_label_Set() const{
    return m_custom_route_restrictions_details_label_isSet;
}

bool OAITransitClass::is_custom_route_restrictions_details_label_Valid() const{
    return m_custom_route_restrictions_details_label_isValid;
}

OAILocalizedString OAITransitClass::getCustomRouteRestrictionsLabel() const {
    return m_custom_route_restrictions_label;
}
void OAITransitClass::setCustomRouteRestrictionsLabel(const OAILocalizedString &custom_route_restrictions_label) {
    m_custom_route_restrictions_label = custom_route_restrictions_label;
    m_custom_route_restrictions_label_isSet = true;
}

bool OAITransitClass::is_custom_route_restrictions_label_Set() const{
    return m_custom_route_restrictions_label_isSet;
}

bool OAITransitClass::is_custom_route_restrictions_label_Valid() const{
    return m_custom_route_restrictions_label_isValid;
}

OAILocalizedString OAITransitClass::getCustomSeatLabel() const {
    return m_custom_seat_label;
}
void OAITransitClass::setCustomSeatLabel(const OAILocalizedString &custom_seat_label) {
    m_custom_seat_label = custom_seat_label;
    m_custom_seat_label_isSet = true;
}

bool OAITransitClass::is_custom_seat_label_Set() const{
    return m_custom_seat_label_isSet;
}

bool OAITransitClass::is_custom_seat_label_Valid() const{
    return m_custom_seat_label_isValid;
}

OAILocalizedString OAITransitClass::getCustomTicketNumberLabel() const {
    return m_custom_ticket_number_label;
}
void OAITransitClass::setCustomTicketNumberLabel(const OAILocalizedString &custom_ticket_number_label) {
    m_custom_ticket_number_label = custom_ticket_number_label;
    m_custom_ticket_number_label_isSet = true;
}

bool OAITransitClass::is_custom_ticket_number_label_Set() const{
    return m_custom_ticket_number_label_isSet;
}

bool OAITransitClass::is_custom_ticket_number_label_Valid() const{
    return m_custom_ticket_number_label_isValid;
}

OAILocalizedString OAITransitClass::getCustomTimeRestrictionsLabel() const {
    return m_custom_time_restrictions_label;
}
void OAITransitClass::setCustomTimeRestrictionsLabel(const OAILocalizedString &custom_time_restrictions_label) {
    m_custom_time_restrictions_label = custom_time_restrictions_label;
    m_custom_time_restrictions_label_isSet = true;
}

bool OAITransitClass::is_custom_time_restrictions_label_Set() const{
    return m_custom_time_restrictions_label_isSet;
}

bool OAITransitClass::is_custom_time_restrictions_label_Valid() const{
    return m_custom_time_restrictions_label_isValid;
}

OAILocalizedString OAITransitClass::getCustomTransitTerminusNameLabel() const {
    return m_custom_transit_terminus_name_label;
}
void OAITransitClass::setCustomTransitTerminusNameLabel(const OAILocalizedString &custom_transit_terminus_name_label) {
    m_custom_transit_terminus_name_label = custom_transit_terminus_name_label;
    m_custom_transit_terminus_name_label_isSet = true;
}

bool OAITransitClass::is_custom_transit_terminus_name_label_Set() const{
    return m_custom_transit_terminus_name_label_isSet;
}

bool OAITransitClass::is_custom_transit_terminus_name_label_Valid() const{
    return m_custom_transit_terminus_name_label_isValid;
}

OAILocalizedString OAITransitClass::getCustomZoneLabel() const {
    return m_custom_zone_label;
}
void OAITransitClass::setCustomZoneLabel(const OAILocalizedString &custom_zone_label) {
    m_custom_zone_label = custom_zone_label;
    m_custom_zone_label_isSet = true;
}

bool OAITransitClass::is_custom_zone_label_Set() const{
    return m_custom_zone_label_isSet;
}

bool OAITransitClass::is_custom_zone_label_Valid() const{
    return m_custom_zone_label_isValid;
}

bool OAITransitClass::isEnableSingleLegItinerary() const {
    return m_enable_single_leg_itinerary;
}
void OAITransitClass::setEnableSingleLegItinerary(const bool &enable_single_leg_itinerary) {
    m_enable_single_leg_itinerary = enable_single_leg_itinerary;
    m_enable_single_leg_itinerary_isSet = true;
}

bool OAITransitClass::is_enable_single_leg_itinerary_Set() const{
    return m_enable_single_leg_itinerary_isSet;
}

bool OAITransitClass::is_enable_single_leg_itinerary_Valid() const{
    return m_enable_single_leg_itinerary_isValid;
}

bool OAITransitClass::isEnableSmartTap() const {
    return m_enable_smart_tap;
}
void OAITransitClass::setEnableSmartTap(const bool &enable_smart_tap) {
    m_enable_smart_tap = enable_smart_tap;
    m_enable_smart_tap_isSet = true;
}

bool OAITransitClass::is_enable_smart_tap_Set() const{
    return m_enable_smart_tap_isSet;
}

bool OAITransitClass::is_enable_smart_tap_Valid() const{
    return m_enable_smart_tap_isValid;
}

OAIImage OAITransitClass::getHeroImage() const {
    return m_hero_image;
}
void OAITransitClass::setHeroImage(const OAIImage &hero_image) {
    m_hero_image = hero_image;
    m_hero_image_isSet = true;
}

bool OAITransitClass::is_hero_image_Set() const{
    return m_hero_image_isSet;
}

bool OAITransitClass::is_hero_image_Valid() const{
    return m_hero_image_isValid;
}

QString OAITransitClass::getHexBackgroundColor() const {
    return m_hex_background_color;
}
void OAITransitClass::setHexBackgroundColor(const QString &hex_background_color) {
    m_hex_background_color = hex_background_color;
    m_hex_background_color_isSet = true;
}

bool OAITransitClass::is_hex_background_color_Set() const{
    return m_hex_background_color_isSet;
}

bool OAITransitClass::is_hex_background_color_Valid() const{
    return m_hex_background_color_isValid;
}

OAIUri OAITransitClass::getHomepageUri() const {
    return m_homepage_uri;
}
void OAITransitClass::setHomepageUri(const OAIUri &homepage_uri) {
    m_homepage_uri = homepage_uri;
    m_homepage_uri_isSet = true;
}

bool OAITransitClass::is_homepage_uri_Set() const{
    return m_homepage_uri_isSet;
}

bool OAITransitClass::is_homepage_uri_Valid() const{
    return m_homepage_uri_isValid;
}

QString OAITransitClass::getId() const {
    return m_id;
}
void OAITransitClass::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAITransitClass::is_id_Set() const{
    return m_id_isSet;
}

bool OAITransitClass::is_id_Valid() const{
    return m_id_isValid;
}

QList<OAIImageModuleData> OAITransitClass::getImageModulesData() const {
    return m_image_modules_data;
}
void OAITransitClass::setImageModulesData(const QList<OAIImageModuleData> &image_modules_data) {
    m_image_modules_data = image_modules_data;
    m_image_modules_data_isSet = true;
}

bool OAITransitClass::is_image_modules_data_Set() const{
    return m_image_modules_data_isSet;
}

bool OAITransitClass::is_image_modules_data_Valid() const{
    return m_image_modules_data_isValid;
}

OAIInfoModuleData OAITransitClass::getInfoModuleData() const {
    return m_info_module_data;
}
void OAITransitClass::setInfoModuleData(const OAIInfoModuleData &info_module_data) {
    m_info_module_data = info_module_data;
    m_info_module_data_isSet = true;
}

bool OAITransitClass::is_info_module_data_Set() const{
    return m_info_module_data_isSet;
}

bool OAITransitClass::is_info_module_data_Valid() const{
    return m_info_module_data_isValid;
}

QString OAITransitClass::getIssuerName() const {
    return m_issuer_name;
}
void OAITransitClass::setIssuerName(const QString &issuer_name) {
    m_issuer_name = issuer_name;
    m_issuer_name_isSet = true;
}

bool OAITransitClass::is_issuer_name_Set() const{
    return m_issuer_name_isSet;
}

bool OAITransitClass::is_issuer_name_Valid() const{
    return m_issuer_name_isValid;
}

QString OAITransitClass::getLanguageOverride() const {
    return m_language_override;
}
void OAITransitClass::setLanguageOverride(const QString &language_override) {
    m_language_override = language_override;
    m_language_override_isSet = true;
}

bool OAITransitClass::is_language_override_Set() const{
    return m_language_override_isSet;
}

bool OAITransitClass::is_language_override_Valid() const{
    return m_language_override_isValid;
}

OAILinksModuleData OAITransitClass::getLinksModuleData() const {
    return m_links_module_data;
}
void OAITransitClass::setLinksModuleData(const OAILinksModuleData &links_module_data) {
    m_links_module_data = links_module_data;
    m_links_module_data_isSet = true;
}

bool OAITransitClass::is_links_module_data_Set() const{
    return m_links_module_data_isSet;
}

bool OAITransitClass::is_links_module_data_Valid() const{
    return m_links_module_data_isValid;
}

OAILocalizedString OAITransitClass::getLocalizedIssuerName() const {
    return m_localized_issuer_name;
}
void OAITransitClass::setLocalizedIssuerName(const OAILocalizedString &localized_issuer_name) {
    m_localized_issuer_name = localized_issuer_name;
    m_localized_issuer_name_isSet = true;
}

bool OAITransitClass::is_localized_issuer_name_Set() const{
    return m_localized_issuer_name_isSet;
}

bool OAITransitClass::is_localized_issuer_name_Valid() const{
    return m_localized_issuer_name_isValid;
}

QList<OAILatLongPoint> OAITransitClass::getLocations() const {
    return m_locations;
}
void OAITransitClass::setLocations(const QList<OAILatLongPoint> &locations) {
    m_locations = locations;
    m_locations_isSet = true;
}

bool OAITransitClass::is_locations_Set() const{
    return m_locations_isSet;
}

bool OAITransitClass::is_locations_Valid() const{
    return m_locations_isValid;
}

OAIImage OAITransitClass::getLogo() const {
    return m_logo;
}
void OAITransitClass::setLogo(const OAIImage &logo) {
    m_logo = logo;
    m_logo_isSet = true;
}

bool OAITransitClass::is_logo_Set() const{
    return m_logo_isSet;
}

bool OAITransitClass::is_logo_Valid() const{
    return m_logo_isValid;
}

QList<OAIMessage> OAITransitClass::getMessages() const {
    return m_messages;
}
void OAITransitClass::setMessages(const QList<OAIMessage> &messages) {
    m_messages = messages;
    m_messages_isSet = true;
}

bool OAITransitClass::is_messages_Set() const{
    return m_messages_isSet;
}

bool OAITransitClass::is_messages_Valid() const{
    return m_messages_isValid;
}

QString OAITransitClass::getMultipleDevicesAndHoldersAllowedStatus() const {
    return m_multiple_devices_and_holders_allowed_status;
}
void OAITransitClass::setMultipleDevicesAndHoldersAllowedStatus(const QString &multiple_devices_and_holders_allowed_status) {
    m_multiple_devices_and_holders_allowed_status = multiple_devices_and_holders_allowed_status;
    m_multiple_devices_and_holders_allowed_status_isSet = true;
}

bool OAITransitClass::is_multiple_devices_and_holders_allowed_status_Set() const{
    return m_multiple_devices_and_holders_allowed_status_isSet;
}

bool OAITransitClass::is_multiple_devices_and_holders_allowed_status_Valid() const{
    return m_multiple_devices_and_holders_allowed_status_isValid;
}

QList<QString> OAITransitClass::getRedemptionIssuers() const {
    return m_redemption_issuers;
}
void OAITransitClass::setRedemptionIssuers(const QList<QString> &redemption_issuers) {
    m_redemption_issuers = redemption_issuers;
    m_redemption_issuers_isSet = true;
}

bool OAITransitClass::is_redemption_issuers_Set() const{
    return m_redemption_issuers_isSet;
}

bool OAITransitClass::is_redemption_issuers_Valid() const{
    return m_redemption_issuers_isValid;
}

OAIReview OAITransitClass::getReview() const {
    return m_review;
}
void OAITransitClass::setReview(const OAIReview &review) {
    m_review = review;
    m_review_isSet = true;
}

bool OAITransitClass::is_review_Set() const{
    return m_review_isSet;
}

bool OAITransitClass::is_review_Valid() const{
    return m_review_isValid;
}

QString OAITransitClass::getReviewStatus() const {
    return m_review_status;
}
void OAITransitClass::setReviewStatus(const QString &review_status) {
    m_review_status = review_status;
    m_review_status_isSet = true;
}

bool OAITransitClass::is_review_status_Set() const{
    return m_review_status_isSet;
}

bool OAITransitClass::is_review_status_Valid() const{
    return m_review_status_isValid;
}

OAISecurityAnimation OAITransitClass::getSecurityAnimation() const {
    return m_security_animation;
}
void OAITransitClass::setSecurityAnimation(const OAISecurityAnimation &security_animation) {
    m_security_animation = security_animation;
    m_security_animation_isSet = true;
}

bool OAITransitClass::is_security_animation_Set() const{
    return m_security_animation_isSet;
}

bool OAITransitClass::is_security_animation_Valid() const{
    return m_security_animation_isValid;
}

QList<OAITextModuleData> OAITransitClass::getTextModulesData() const {
    return m_text_modules_data;
}
void OAITransitClass::setTextModulesData(const QList<OAITextModuleData> &text_modules_data) {
    m_text_modules_data = text_modules_data;
    m_text_modules_data_isSet = true;
}

bool OAITransitClass::is_text_modules_data_Set() const{
    return m_text_modules_data_isSet;
}

bool OAITransitClass::is_text_modules_data_Valid() const{
    return m_text_modules_data_isValid;
}

OAILocalizedString OAITransitClass::getTransitOperatorName() const {
    return m_transit_operator_name;
}
void OAITransitClass::setTransitOperatorName(const OAILocalizedString &transit_operator_name) {
    m_transit_operator_name = transit_operator_name;
    m_transit_operator_name_isSet = true;
}

bool OAITransitClass::is_transit_operator_name_Set() const{
    return m_transit_operator_name_isSet;
}

bool OAITransitClass::is_transit_operator_name_Valid() const{
    return m_transit_operator_name_isValid;
}

QString OAITransitClass::getTransitType() const {
    return m_transit_type;
}
void OAITransitClass::setTransitType(const QString &transit_type) {
    m_transit_type = transit_type;
    m_transit_type_isSet = true;
}

bool OAITransitClass::is_transit_type_Set() const{
    return m_transit_type_isSet;
}

bool OAITransitClass::is_transit_type_Valid() const{
    return m_transit_type_isValid;
}

QString OAITransitClass::getVersion() const {
    return m_version;
}
void OAITransitClass::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAITransitClass::is_version_Set() const{
    return m_version_isSet;
}

bool OAITransitClass::is_version_Valid() const{
    return m_version_isValid;
}

QString OAITransitClass::getViewUnlockRequirement() const {
    return m_view_unlock_requirement;
}
void OAITransitClass::setViewUnlockRequirement(const QString &view_unlock_requirement) {
    m_view_unlock_requirement = view_unlock_requirement;
    m_view_unlock_requirement_isSet = true;
}

bool OAITransitClass::is_view_unlock_requirement_Set() const{
    return m_view_unlock_requirement_isSet;
}

bool OAITransitClass::is_view_unlock_requirement_Valid() const{
    return m_view_unlock_requirement_isValid;
}

OAIImage OAITransitClass::getWatermark() const {
    return m_watermark;
}
void OAITransitClass::setWatermark(const OAIImage &watermark) {
    m_watermark = watermark;
    m_watermark_isSet = true;
}

bool OAITransitClass::is_watermark_Set() const{
    return m_watermark_isSet;
}

bool OAITransitClass::is_watermark_Valid() const{
    return m_watermark_isValid;
}

OAIImage OAITransitClass::getWordMark() const {
    return m_word_mark;
}
void OAITransitClass::setWordMark(const OAIImage &word_mark) {
    m_word_mark = word_mark;
    m_word_mark_isSet = true;
}

bool OAITransitClass::is_word_mark_Set() const{
    return m_word_mark_isSet;
}

bool OAITransitClass::is_word_mark_Valid() const{
    return m_word_mark_isValid;
}

bool OAITransitClass::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_activation_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_allow_multiple_users_per_object_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_callback_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_class_template_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_carriage_label.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_coach_label.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_concession_category_label.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_confirmation_code_label.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_discount_message_label.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_fare_class_label.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_fare_name_label.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_other_restrictions_label.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_platform_label.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_purchase_face_value_label.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_purchase_price_label.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_purchase_receipt_number_label.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_route_restrictions_details_label.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_route_restrictions_label.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_seat_label.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_ticket_number_label.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_time_restrictions_label.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_transit_terminus_name_label.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_zone_label.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_single_leg_itinerary_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_smart_tap_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hero_image.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_hex_background_color_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_homepage_uri.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_modules_data.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_info_module_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_issuer_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_language_override_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_links_module_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_localized_issuer_name.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_locations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_logo.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_messages.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_multiple_devices_and_holders_allowed_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_redemption_issuers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_review.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_review_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_security_animation.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_modules_data.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_transit_operator_name.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_transit_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_view_unlock_requirement_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_watermark.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_word_mark.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITransitClass::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
