/**
 * Google Pay Passes API
 * API for issuers to save and manage Google Wallet Objects.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITicketCost.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITicketCost::OAITicketCost(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITicketCost::OAITicketCost() {
    this->initializeModel();
}

OAITicketCost::~OAITicketCost() {}

void OAITicketCost::initializeModel() {

    m_discount_message_isSet = false;
    m_discount_message_isValid = false;

    m_face_value_isSet = false;
    m_face_value_isValid = false;

    m_purchase_price_isSet = false;
    m_purchase_price_isValid = false;
}

void OAITicketCost::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITicketCost::fromJsonObject(QJsonObject json) {

    m_discount_message_isValid = ::OpenAPI::fromJsonValue(m_discount_message, json[QString("discountMessage")]);
    m_discount_message_isSet = !json[QString("discountMessage")].isNull() && m_discount_message_isValid;

    m_face_value_isValid = ::OpenAPI::fromJsonValue(m_face_value, json[QString("faceValue")]);
    m_face_value_isSet = !json[QString("faceValue")].isNull() && m_face_value_isValid;

    m_purchase_price_isValid = ::OpenAPI::fromJsonValue(m_purchase_price, json[QString("purchasePrice")]);
    m_purchase_price_isSet = !json[QString("purchasePrice")].isNull() && m_purchase_price_isValid;
}

QString OAITicketCost::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITicketCost::asJsonObject() const {
    QJsonObject obj;
    if (m_discount_message.isSet()) {
        obj.insert(QString("discountMessage"), ::OpenAPI::toJsonValue(m_discount_message));
    }
    if (m_face_value.isSet()) {
        obj.insert(QString("faceValue"), ::OpenAPI::toJsonValue(m_face_value));
    }
    if (m_purchase_price.isSet()) {
        obj.insert(QString("purchasePrice"), ::OpenAPI::toJsonValue(m_purchase_price));
    }
    return obj;
}

OAILocalizedString OAITicketCost::getDiscountMessage() const {
    return m_discount_message;
}
void OAITicketCost::setDiscountMessage(const OAILocalizedString &discount_message) {
    m_discount_message = discount_message;
    m_discount_message_isSet = true;
}

bool OAITicketCost::is_discount_message_Set() const{
    return m_discount_message_isSet;
}

bool OAITicketCost::is_discount_message_Valid() const{
    return m_discount_message_isValid;
}

OAIMoney OAITicketCost::getFaceValue() const {
    return m_face_value;
}
void OAITicketCost::setFaceValue(const OAIMoney &face_value) {
    m_face_value = face_value;
    m_face_value_isSet = true;
}

bool OAITicketCost::is_face_value_Set() const{
    return m_face_value_isSet;
}

bool OAITicketCost::is_face_value_Valid() const{
    return m_face_value_isValid;
}

OAIMoney OAITicketCost::getPurchasePrice() const {
    return m_purchase_price;
}
void OAITicketCost::setPurchasePrice(const OAIMoney &purchase_price) {
    m_purchase_price = purchase_price;
    m_purchase_price_isSet = true;
}

bool OAITicketCost::is_purchase_price_Set() const{
    return m_purchase_price_isSet;
}

bool OAITicketCost::is_purchase_price_Valid() const{
    return m_purchase_price_isValid;
}

bool OAITicketCost::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_discount_message.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_face_value.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_purchase_price.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITicketCost::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
