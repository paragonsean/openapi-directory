/**
 * Google Pay Passes API
 * API for issuers to save and manage Google Wallet Objects.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIImage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIImage::OAIImage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIImage::OAIImage() {
    this->initializeModel();
}

OAIImage::~OAIImage() {}

void OAIImage::initializeModel() {

    m_content_description_isSet = false;
    m_content_description_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_source_uri_isSet = false;
    m_source_uri_isValid = false;
}

void OAIImage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIImage::fromJsonObject(QJsonObject json) {

    m_content_description_isValid = ::OpenAPI::fromJsonValue(m_content_description, json[QString("contentDescription")]);
    m_content_description_isSet = !json[QString("contentDescription")].isNull() && m_content_description_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_source_uri_isValid = ::OpenAPI::fromJsonValue(m_source_uri, json[QString("sourceUri")]);
    m_source_uri_isSet = !json[QString("sourceUri")].isNull() && m_source_uri_isValid;
}

QString OAIImage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIImage::asJsonObject() const {
    QJsonObject obj;
    if (m_content_description.isSet()) {
        obj.insert(QString("contentDescription"), ::OpenAPI::toJsonValue(m_content_description));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_source_uri.isSet()) {
        obj.insert(QString("sourceUri"), ::OpenAPI::toJsonValue(m_source_uri));
    }
    return obj;
}

OAILocalizedString OAIImage::getContentDescription() const {
    return m_content_description;
}
void OAIImage::setContentDescription(const OAILocalizedString &content_description) {
    m_content_description = content_description;
    m_content_description_isSet = true;
}

bool OAIImage::is_content_description_Set() const{
    return m_content_description_isSet;
}

bool OAIImage::is_content_description_Valid() const{
    return m_content_description_isValid;
}

QString OAIImage::getKind() const {
    return m_kind;
}
void OAIImage::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIImage::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIImage::is_kind_Valid() const{
    return m_kind_isValid;
}

OAIImageUri OAIImage::getSourceUri() const {
    return m_source_uri;
}
void OAIImage::setSourceUri(const OAIImageUri &source_uri) {
    m_source_uri = source_uri;
    m_source_uri_isSet = true;
}

bool OAIImage::is_source_uri_Set() const{
    return m_source_uri_isSet;
}

bool OAIImage::is_source_uri_Valid() const{
    return m_source_uri_isValid;
}

bool OAIImage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_content_description.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_uri.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIImage::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
