/**
 * Google Pay Passes API
 * API for issuers to save and manage Google Wallet Objects.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIJwtResource.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIJwtResource::OAIJwtResource(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIJwtResource::OAIJwtResource() {
    this->initializeModel();
}

OAIJwtResource::~OAIJwtResource() {}

void OAIJwtResource::initializeModel() {

    m_jwt_isSet = false;
    m_jwt_isValid = false;
}

void OAIJwtResource::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIJwtResource::fromJsonObject(QJsonObject json) {

    m_jwt_isValid = ::OpenAPI::fromJsonValue(m_jwt, json[QString("jwt")]);
    m_jwt_isSet = !json[QString("jwt")].isNull() && m_jwt_isValid;
}

QString OAIJwtResource::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIJwtResource::asJsonObject() const {
    QJsonObject obj;
    if (m_jwt_isSet) {
        obj.insert(QString("jwt"), ::OpenAPI::toJsonValue(m_jwt));
    }
    return obj;
}

QString OAIJwtResource::getJwt() const {
    return m_jwt;
}
void OAIJwtResource::setJwt(const QString &jwt) {
    m_jwt = jwt;
    m_jwt_isSet = true;
}

bool OAIJwtResource::is_jwt_Set() const{
    return m_jwt_isSet;
}

bool OAIJwtResource::is_jwt_Valid() const{
    return m_jwt_isValid;
}

bool OAIJwtResource::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_jwt_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIJwtResource::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
