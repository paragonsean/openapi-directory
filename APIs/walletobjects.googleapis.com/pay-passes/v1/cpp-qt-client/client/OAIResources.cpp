/**
 * Google Pay Passes API
 * API for issuers to save and manage Google Wallet Objects.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIResources.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIResources::OAIResources(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIResources::OAIResources() {
    this->initializeModel();
}

OAIResources::~OAIResources() {}

void OAIResources::initializeModel() {

    m_event_ticket_classes_isSet = false;
    m_event_ticket_classes_isValid = false;

    m_event_ticket_objects_isSet = false;
    m_event_ticket_objects_isValid = false;

    m_flight_classes_isSet = false;
    m_flight_classes_isValid = false;

    m_flight_objects_isSet = false;
    m_flight_objects_isValid = false;

    m_gift_card_classes_isSet = false;
    m_gift_card_classes_isValid = false;

    m_gift_card_objects_isSet = false;
    m_gift_card_objects_isValid = false;

    m_loyalty_classes_isSet = false;
    m_loyalty_classes_isValid = false;

    m_loyalty_objects_isSet = false;
    m_loyalty_objects_isValid = false;

    m_offer_classes_isSet = false;
    m_offer_classes_isValid = false;

    m_offer_objects_isSet = false;
    m_offer_objects_isValid = false;

    m_transit_classes_isSet = false;
    m_transit_classes_isValid = false;

    m_transit_objects_isSet = false;
    m_transit_objects_isValid = false;
}

void OAIResources::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIResources::fromJsonObject(QJsonObject json) {

    m_event_ticket_classes_isValid = ::OpenAPI::fromJsonValue(m_event_ticket_classes, json[QString("eventTicketClasses")]);
    m_event_ticket_classes_isSet = !json[QString("eventTicketClasses")].isNull() && m_event_ticket_classes_isValid;

    m_event_ticket_objects_isValid = ::OpenAPI::fromJsonValue(m_event_ticket_objects, json[QString("eventTicketObjects")]);
    m_event_ticket_objects_isSet = !json[QString("eventTicketObjects")].isNull() && m_event_ticket_objects_isValid;

    m_flight_classes_isValid = ::OpenAPI::fromJsonValue(m_flight_classes, json[QString("flightClasses")]);
    m_flight_classes_isSet = !json[QString("flightClasses")].isNull() && m_flight_classes_isValid;

    m_flight_objects_isValid = ::OpenAPI::fromJsonValue(m_flight_objects, json[QString("flightObjects")]);
    m_flight_objects_isSet = !json[QString("flightObjects")].isNull() && m_flight_objects_isValid;

    m_gift_card_classes_isValid = ::OpenAPI::fromJsonValue(m_gift_card_classes, json[QString("giftCardClasses")]);
    m_gift_card_classes_isSet = !json[QString("giftCardClasses")].isNull() && m_gift_card_classes_isValid;

    m_gift_card_objects_isValid = ::OpenAPI::fromJsonValue(m_gift_card_objects, json[QString("giftCardObjects")]);
    m_gift_card_objects_isSet = !json[QString("giftCardObjects")].isNull() && m_gift_card_objects_isValid;

    m_loyalty_classes_isValid = ::OpenAPI::fromJsonValue(m_loyalty_classes, json[QString("loyaltyClasses")]);
    m_loyalty_classes_isSet = !json[QString("loyaltyClasses")].isNull() && m_loyalty_classes_isValid;

    m_loyalty_objects_isValid = ::OpenAPI::fromJsonValue(m_loyalty_objects, json[QString("loyaltyObjects")]);
    m_loyalty_objects_isSet = !json[QString("loyaltyObjects")].isNull() && m_loyalty_objects_isValid;

    m_offer_classes_isValid = ::OpenAPI::fromJsonValue(m_offer_classes, json[QString("offerClasses")]);
    m_offer_classes_isSet = !json[QString("offerClasses")].isNull() && m_offer_classes_isValid;

    m_offer_objects_isValid = ::OpenAPI::fromJsonValue(m_offer_objects, json[QString("offerObjects")]);
    m_offer_objects_isSet = !json[QString("offerObjects")].isNull() && m_offer_objects_isValid;

    m_transit_classes_isValid = ::OpenAPI::fromJsonValue(m_transit_classes, json[QString("transitClasses")]);
    m_transit_classes_isSet = !json[QString("transitClasses")].isNull() && m_transit_classes_isValid;

    m_transit_objects_isValid = ::OpenAPI::fromJsonValue(m_transit_objects, json[QString("transitObjects")]);
    m_transit_objects_isSet = !json[QString("transitObjects")].isNull() && m_transit_objects_isValid;
}

QString OAIResources::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIResources::asJsonObject() const {
    QJsonObject obj;
    if (m_event_ticket_classes.size() > 0) {
        obj.insert(QString("eventTicketClasses"), ::OpenAPI::toJsonValue(m_event_ticket_classes));
    }
    if (m_event_ticket_objects.size() > 0) {
        obj.insert(QString("eventTicketObjects"), ::OpenAPI::toJsonValue(m_event_ticket_objects));
    }
    if (m_flight_classes.size() > 0) {
        obj.insert(QString("flightClasses"), ::OpenAPI::toJsonValue(m_flight_classes));
    }
    if (m_flight_objects.size() > 0) {
        obj.insert(QString("flightObjects"), ::OpenAPI::toJsonValue(m_flight_objects));
    }
    if (m_gift_card_classes.size() > 0) {
        obj.insert(QString("giftCardClasses"), ::OpenAPI::toJsonValue(m_gift_card_classes));
    }
    if (m_gift_card_objects.size() > 0) {
        obj.insert(QString("giftCardObjects"), ::OpenAPI::toJsonValue(m_gift_card_objects));
    }
    if (m_loyalty_classes.size() > 0) {
        obj.insert(QString("loyaltyClasses"), ::OpenAPI::toJsonValue(m_loyalty_classes));
    }
    if (m_loyalty_objects.size() > 0) {
        obj.insert(QString("loyaltyObjects"), ::OpenAPI::toJsonValue(m_loyalty_objects));
    }
    if (m_offer_classes.size() > 0) {
        obj.insert(QString("offerClasses"), ::OpenAPI::toJsonValue(m_offer_classes));
    }
    if (m_offer_objects.size() > 0) {
        obj.insert(QString("offerObjects"), ::OpenAPI::toJsonValue(m_offer_objects));
    }
    if (m_transit_classes.size() > 0) {
        obj.insert(QString("transitClasses"), ::OpenAPI::toJsonValue(m_transit_classes));
    }
    if (m_transit_objects.size() > 0) {
        obj.insert(QString("transitObjects"), ::OpenAPI::toJsonValue(m_transit_objects));
    }
    return obj;
}

QList<OAIEventTicketClass> OAIResources::getEventTicketClasses() const {
    return m_event_ticket_classes;
}
void OAIResources::setEventTicketClasses(const QList<OAIEventTicketClass> &event_ticket_classes) {
    m_event_ticket_classes = event_ticket_classes;
    m_event_ticket_classes_isSet = true;
}

bool OAIResources::is_event_ticket_classes_Set() const{
    return m_event_ticket_classes_isSet;
}

bool OAIResources::is_event_ticket_classes_Valid() const{
    return m_event_ticket_classes_isValid;
}

QList<OAIEventTicketObject> OAIResources::getEventTicketObjects() const {
    return m_event_ticket_objects;
}
void OAIResources::setEventTicketObjects(const QList<OAIEventTicketObject> &event_ticket_objects) {
    m_event_ticket_objects = event_ticket_objects;
    m_event_ticket_objects_isSet = true;
}

bool OAIResources::is_event_ticket_objects_Set() const{
    return m_event_ticket_objects_isSet;
}

bool OAIResources::is_event_ticket_objects_Valid() const{
    return m_event_ticket_objects_isValid;
}

QList<OAIFlightClass> OAIResources::getFlightClasses() const {
    return m_flight_classes;
}
void OAIResources::setFlightClasses(const QList<OAIFlightClass> &flight_classes) {
    m_flight_classes = flight_classes;
    m_flight_classes_isSet = true;
}

bool OAIResources::is_flight_classes_Set() const{
    return m_flight_classes_isSet;
}

bool OAIResources::is_flight_classes_Valid() const{
    return m_flight_classes_isValid;
}

QList<OAIFlightObject> OAIResources::getFlightObjects() const {
    return m_flight_objects;
}
void OAIResources::setFlightObjects(const QList<OAIFlightObject> &flight_objects) {
    m_flight_objects = flight_objects;
    m_flight_objects_isSet = true;
}

bool OAIResources::is_flight_objects_Set() const{
    return m_flight_objects_isSet;
}

bool OAIResources::is_flight_objects_Valid() const{
    return m_flight_objects_isValid;
}

QList<OAIGiftCardClass> OAIResources::getGiftCardClasses() const {
    return m_gift_card_classes;
}
void OAIResources::setGiftCardClasses(const QList<OAIGiftCardClass> &gift_card_classes) {
    m_gift_card_classes = gift_card_classes;
    m_gift_card_classes_isSet = true;
}

bool OAIResources::is_gift_card_classes_Set() const{
    return m_gift_card_classes_isSet;
}

bool OAIResources::is_gift_card_classes_Valid() const{
    return m_gift_card_classes_isValid;
}

QList<OAIGiftCardObject> OAIResources::getGiftCardObjects() const {
    return m_gift_card_objects;
}
void OAIResources::setGiftCardObjects(const QList<OAIGiftCardObject> &gift_card_objects) {
    m_gift_card_objects = gift_card_objects;
    m_gift_card_objects_isSet = true;
}

bool OAIResources::is_gift_card_objects_Set() const{
    return m_gift_card_objects_isSet;
}

bool OAIResources::is_gift_card_objects_Valid() const{
    return m_gift_card_objects_isValid;
}

QList<OAILoyaltyClass> OAIResources::getLoyaltyClasses() const {
    return m_loyalty_classes;
}
void OAIResources::setLoyaltyClasses(const QList<OAILoyaltyClass> &loyalty_classes) {
    m_loyalty_classes = loyalty_classes;
    m_loyalty_classes_isSet = true;
}

bool OAIResources::is_loyalty_classes_Set() const{
    return m_loyalty_classes_isSet;
}

bool OAIResources::is_loyalty_classes_Valid() const{
    return m_loyalty_classes_isValid;
}

QList<OAILoyaltyObject> OAIResources::getLoyaltyObjects() const {
    return m_loyalty_objects;
}
void OAIResources::setLoyaltyObjects(const QList<OAILoyaltyObject> &loyalty_objects) {
    m_loyalty_objects = loyalty_objects;
    m_loyalty_objects_isSet = true;
}

bool OAIResources::is_loyalty_objects_Set() const{
    return m_loyalty_objects_isSet;
}

bool OAIResources::is_loyalty_objects_Valid() const{
    return m_loyalty_objects_isValid;
}

QList<OAIOfferClass> OAIResources::getOfferClasses() const {
    return m_offer_classes;
}
void OAIResources::setOfferClasses(const QList<OAIOfferClass> &offer_classes) {
    m_offer_classes = offer_classes;
    m_offer_classes_isSet = true;
}

bool OAIResources::is_offer_classes_Set() const{
    return m_offer_classes_isSet;
}

bool OAIResources::is_offer_classes_Valid() const{
    return m_offer_classes_isValid;
}

QList<OAIOfferObject> OAIResources::getOfferObjects() const {
    return m_offer_objects;
}
void OAIResources::setOfferObjects(const QList<OAIOfferObject> &offer_objects) {
    m_offer_objects = offer_objects;
    m_offer_objects_isSet = true;
}

bool OAIResources::is_offer_objects_Set() const{
    return m_offer_objects_isSet;
}

bool OAIResources::is_offer_objects_Valid() const{
    return m_offer_objects_isValid;
}

QList<OAITransitClass> OAIResources::getTransitClasses() const {
    return m_transit_classes;
}
void OAIResources::setTransitClasses(const QList<OAITransitClass> &transit_classes) {
    m_transit_classes = transit_classes;
    m_transit_classes_isSet = true;
}

bool OAIResources::is_transit_classes_Set() const{
    return m_transit_classes_isSet;
}

bool OAIResources::is_transit_classes_Valid() const{
    return m_transit_classes_isValid;
}

QList<OAITransitObject> OAIResources::getTransitObjects() const {
    return m_transit_objects;
}
void OAIResources::setTransitObjects(const QList<OAITransitObject> &transit_objects) {
    m_transit_objects = transit_objects;
    m_transit_objects_isSet = true;
}

bool OAIResources::is_transit_objects_Set() const{
    return m_transit_objects_isSet;
}

bool OAIResources::is_transit_objects_Valid() const{
    return m_transit_objects_isValid;
}

bool OAIResources::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_event_ticket_classes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_ticket_objects.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_flight_classes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_flight_objects.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_gift_card_classes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_gift_card_objects.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_loyalty_classes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_loyalty_objects.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_offer_classes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_offer_objects.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_transit_classes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_transit_objects.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIResources::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
