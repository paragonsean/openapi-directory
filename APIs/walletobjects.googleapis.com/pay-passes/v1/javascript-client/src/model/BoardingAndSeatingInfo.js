/**
 * Google Pay Passes API
 * API for issuers to save and manage Google Wallet Objects.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Image from './Image';
import LocalizedString from './LocalizedString';

/**
 * The BoardingAndSeatingInfo model module.
 * @module model/BoardingAndSeatingInfo
 * @version v1
 */
class BoardingAndSeatingInfo {
    /**
     * Constructs a new <code>BoardingAndSeatingInfo</code>.
     * @alias module:model/BoardingAndSeatingInfo
     */
    constructor() { 
        
        BoardingAndSeatingInfo.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>BoardingAndSeatingInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BoardingAndSeatingInfo} obj Optional instance to populate.
     * @return {module:model/BoardingAndSeatingInfo} The populated <code>BoardingAndSeatingInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BoardingAndSeatingInfo();

            if (data.hasOwnProperty('boardingDoor')) {
                obj['boardingDoor'] = ApiClient.convertToType(data['boardingDoor'], 'String');
            }
            if (data.hasOwnProperty('boardingGroup')) {
                obj['boardingGroup'] = ApiClient.convertToType(data['boardingGroup'], 'String');
            }
            if (data.hasOwnProperty('boardingPosition')) {
                obj['boardingPosition'] = ApiClient.convertToType(data['boardingPosition'], 'String');
            }
            if (data.hasOwnProperty('boardingPrivilegeImage')) {
                obj['boardingPrivilegeImage'] = Image.constructFromObject(data['boardingPrivilegeImage']);
            }
            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
            if (data.hasOwnProperty('seatAssignment')) {
                obj['seatAssignment'] = LocalizedString.constructFromObject(data['seatAssignment']);
            }
            if (data.hasOwnProperty('seatClass')) {
                obj['seatClass'] = ApiClient.convertToType(data['seatClass'], 'String');
            }
            if (data.hasOwnProperty('seatNumber')) {
                obj['seatNumber'] = ApiClient.convertToType(data['seatNumber'], 'String');
            }
            if (data.hasOwnProperty('sequenceNumber')) {
                obj['sequenceNumber'] = ApiClient.convertToType(data['sequenceNumber'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BoardingAndSeatingInfo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BoardingAndSeatingInfo</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['boardingDoor'] && !(typeof data['boardingDoor'] === 'string' || data['boardingDoor'] instanceof String)) {
            throw new Error("Expected the field `boardingDoor` to be a primitive type in the JSON string but got " + data['boardingDoor']);
        }
        // ensure the json data is a string
        if (data['boardingGroup'] && !(typeof data['boardingGroup'] === 'string' || data['boardingGroup'] instanceof String)) {
            throw new Error("Expected the field `boardingGroup` to be a primitive type in the JSON string but got " + data['boardingGroup']);
        }
        // ensure the json data is a string
        if (data['boardingPosition'] && !(typeof data['boardingPosition'] === 'string' || data['boardingPosition'] instanceof String)) {
            throw new Error("Expected the field `boardingPosition` to be a primitive type in the JSON string but got " + data['boardingPosition']);
        }
        // validate the optional field `boardingPrivilegeImage`
        if (data['boardingPrivilegeImage']) { // data not null
          Image.validateJSON(data['boardingPrivilegeImage']);
        }
        // ensure the json data is a string
        if (data['kind'] && !(typeof data['kind'] === 'string' || data['kind'] instanceof String)) {
            throw new Error("Expected the field `kind` to be a primitive type in the JSON string but got " + data['kind']);
        }
        // validate the optional field `seatAssignment`
        if (data['seatAssignment']) { // data not null
          LocalizedString.validateJSON(data['seatAssignment']);
        }
        // ensure the json data is a string
        if (data['seatClass'] && !(typeof data['seatClass'] === 'string' || data['seatClass'] instanceof String)) {
            throw new Error("Expected the field `seatClass` to be a primitive type in the JSON string but got " + data['seatClass']);
        }
        // ensure the json data is a string
        if (data['seatNumber'] && !(typeof data['seatNumber'] === 'string' || data['seatNumber'] instanceof String)) {
            throw new Error("Expected the field `seatNumber` to be a primitive type in the JSON string but got " + data['seatNumber']);
        }
        // ensure the json data is a string
        if (data['sequenceNumber'] && !(typeof data['sequenceNumber'] === 'string' || data['sequenceNumber'] instanceof String)) {
            throw new Error("Expected the field `sequenceNumber` to be a primitive type in the JSON string but got " + data['sequenceNumber']);
        }

        return true;
    }


}



/**
 * Set this field only if this flight boards through more than one door or bridge and you want to explicitly print the door location on the boarding pass. Most airlines route their passengers to the right door or bridge by refering to doors/bridges by the `seatClass`. In those cases `boardingDoor` should not be set.
 * @member {module:model/BoardingAndSeatingInfo.BoardingDoorEnum} boardingDoor
 */
BoardingAndSeatingInfo.prototype['boardingDoor'] = undefined;

/**
 * The value of boarding group (or zone) this passenger shall board with. eg: \"B\" The label for this value will be determined by the `boardingPolicy` field in the `flightClass` referenced by this object.
 * @member {String} boardingGroup
 */
BoardingAndSeatingInfo.prototype['boardingGroup'] = undefined;

/**
 * The value of boarding position. eg: \"76\"
 * @member {String} boardingPosition
 */
BoardingAndSeatingInfo.prototype['boardingPosition'] = undefined;

/**
 * @member {module:model/Image} boardingPrivilegeImage
 */
BoardingAndSeatingInfo.prototype['boardingPrivilegeImage'] = undefined;

/**
 * Identifies what kind of resource this is. Value: the fixed string `\"walletobjects#boardingAndSeatingInfo\"`.
 * @member {String} kind
 */
BoardingAndSeatingInfo.prototype['kind'] = undefined;

/**
 * @member {module:model/LocalizedString} seatAssignment
 */
BoardingAndSeatingInfo.prototype['seatAssignment'] = undefined;

/**
 * The value of the seat class. eg: \"Economy\" or \"Economy Plus\"
 * @member {String} seatClass
 */
BoardingAndSeatingInfo.prototype['seatClass'] = undefined;

/**
 * The value of passenger seat. If there is no specific identifier, use `seatAssignment` instead. eg: \"25A\"
 * @member {String} seatNumber
 */
BoardingAndSeatingInfo.prototype['seatNumber'] = undefined;

/**
 * The sequence number on the boarding pass. This usually matches the sequence in which the passengers checked in. Airline might use the number for manual boarding and bag tags. eg: \"49\"
 * @member {String} sequenceNumber
 */
BoardingAndSeatingInfo.prototype['sequenceNumber'] = undefined;





/**
 * Allowed values for the <code>boardingDoor</code> property.
 * @enum {String}
 * @readonly
 */
BoardingAndSeatingInfo['BoardingDoorEnum'] = {

    /**
     * value: "BOARDING_DOOR_UNSPECIFIED"
     * @const
     */
    "BOARDING_DOOR_UNSPECIFIED": "BOARDING_DOOR_UNSPECIFIED",

    /**
     * value: "FRONT"
     * @const
     */
    "FRONT": "FRONT",

    /**
     * value: "front"
     * @const
     */
    "front": "front",

    /**
     * value: "BACK"
     * @const
     */
    "BACK": "BACK",

    /**
     * value: "back"
     * @const
     */
    "back": "back"
};



export default BoardingAndSeatingInfo;

