/**
 * Google Pay Passes API
 * API for issuers to save and manage Google Wallet Objects.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AppLinkData from './AppLinkData';
import Barcode from './Barcode';
import GroupingInfo from './GroupingInfo';
import Image from './Image';
import ImageModuleData from './ImageModuleData';
import LinksModuleData from './LinksModuleData';
import LocalizedString from './LocalizedString';
import Notifications from './Notifications';
import PassConstraints from './PassConstraints';
import RotatingBarcode from './RotatingBarcode';
import TextModuleData from './TextModuleData';
import TimeInterval from './TimeInterval';

/**
 * The GenericObject model module.
 * @module model/GenericObject
 * @version v1
 */
class GenericObject {
    /**
     * Constructs a new <code>GenericObject</code>.
     * Generic Object Next ID: 121
     * @alias module:model/GenericObject
     */
    constructor() { 
        
        GenericObject.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GenericObject</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GenericObject} obj Optional instance to populate.
     * @return {module:model/GenericObject} The populated <code>GenericObject</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GenericObject();

            if (data.hasOwnProperty('appLinkData')) {
                obj['appLinkData'] = AppLinkData.constructFromObject(data['appLinkData']);
            }
            if (data.hasOwnProperty('barcode')) {
                obj['barcode'] = Barcode.constructFromObject(data['barcode']);
            }
            if (data.hasOwnProperty('cardTitle')) {
                obj['cardTitle'] = LocalizedString.constructFromObject(data['cardTitle']);
            }
            if (data.hasOwnProperty('classId')) {
                obj['classId'] = ApiClient.convertToType(data['classId'], 'String');
            }
            if (data.hasOwnProperty('genericType')) {
                obj['genericType'] = ApiClient.convertToType(data['genericType'], 'String');
            }
            if (data.hasOwnProperty('groupingInfo')) {
                obj['groupingInfo'] = GroupingInfo.constructFromObject(data['groupingInfo']);
            }
            if (data.hasOwnProperty('hasUsers')) {
                obj['hasUsers'] = ApiClient.convertToType(data['hasUsers'], 'Boolean');
            }
            if (data.hasOwnProperty('header')) {
                obj['header'] = LocalizedString.constructFromObject(data['header']);
            }
            if (data.hasOwnProperty('heroImage')) {
                obj['heroImage'] = Image.constructFromObject(data['heroImage']);
            }
            if (data.hasOwnProperty('hexBackgroundColor')) {
                obj['hexBackgroundColor'] = ApiClient.convertToType(data['hexBackgroundColor'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('imageModulesData')) {
                obj['imageModulesData'] = ApiClient.convertToType(data['imageModulesData'], [ImageModuleData]);
            }
            if (data.hasOwnProperty('linksModuleData')) {
                obj['linksModuleData'] = LinksModuleData.constructFromObject(data['linksModuleData']);
            }
            if (data.hasOwnProperty('logo')) {
                obj['logo'] = Image.constructFromObject(data['logo']);
            }
            if (data.hasOwnProperty('notifications')) {
                obj['notifications'] = Notifications.constructFromObject(data['notifications']);
            }
            if (data.hasOwnProperty('passConstraints')) {
                obj['passConstraints'] = PassConstraints.constructFromObject(data['passConstraints']);
            }
            if (data.hasOwnProperty('rotatingBarcode')) {
                obj['rotatingBarcode'] = RotatingBarcode.constructFromObject(data['rotatingBarcode']);
            }
            if (data.hasOwnProperty('smartTapRedemptionValue')) {
                obj['smartTapRedemptionValue'] = ApiClient.convertToType(data['smartTapRedemptionValue'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('subheader')) {
                obj['subheader'] = LocalizedString.constructFromObject(data['subheader']);
            }
            if (data.hasOwnProperty('textModulesData')) {
                obj['textModulesData'] = ApiClient.convertToType(data['textModulesData'], [TextModuleData]);
            }
            if (data.hasOwnProperty('validTimeInterval')) {
                obj['validTimeInterval'] = TimeInterval.constructFromObject(data['validTimeInterval']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GenericObject</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GenericObject</code>.
     */
    static validateJSON(data) {
        // validate the optional field `appLinkData`
        if (data['appLinkData']) { // data not null
          AppLinkData.validateJSON(data['appLinkData']);
        }
        // validate the optional field `barcode`
        if (data['barcode']) { // data not null
          Barcode.validateJSON(data['barcode']);
        }
        // validate the optional field `cardTitle`
        if (data['cardTitle']) { // data not null
          LocalizedString.validateJSON(data['cardTitle']);
        }
        // ensure the json data is a string
        if (data['classId'] && !(typeof data['classId'] === 'string' || data['classId'] instanceof String)) {
            throw new Error("Expected the field `classId` to be a primitive type in the JSON string but got " + data['classId']);
        }
        // ensure the json data is a string
        if (data['genericType'] && !(typeof data['genericType'] === 'string' || data['genericType'] instanceof String)) {
            throw new Error("Expected the field `genericType` to be a primitive type in the JSON string but got " + data['genericType']);
        }
        // validate the optional field `groupingInfo`
        if (data['groupingInfo']) { // data not null
          GroupingInfo.validateJSON(data['groupingInfo']);
        }
        // validate the optional field `header`
        if (data['header']) { // data not null
          LocalizedString.validateJSON(data['header']);
        }
        // validate the optional field `heroImage`
        if (data['heroImage']) { // data not null
          Image.validateJSON(data['heroImage']);
        }
        // ensure the json data is a string
        if (data['hexBackgroundColor'] && !(typeof data['hexBackgroundColor'] === 'string' || data['hexBackgroundColor'] instanceof String)) {
            throw new Error("Expected the field `hexBackgroundColor` to be a primitive type in the JSON string but got " + data['hexBackgroundColor']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        if (data['imageModulesData']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['imageModulesData'])) {
                throw new Error("Expected the field `imageModulesData` to be an array in the JSON data but got " + data['imageModulesData']);
            }
            // validate the optional field `imageModulesData` (array)
            for (const item of data['imageModulesData']) {
                ImageModuleData.validateJSON(item);
            };
        }
        // validate the optional field `linksModuleData`
        if (data['linksModuleData']) { // data not null
          LinksModuleData.validateJSON(data['linksModuleData']);
        }
        // validate the optional field `logo`
        if (data['logo']) { // data not null
          Image.validateJSON(data['logo']);
        }
        // validate the optional field `notifications`
        if (data['notifications']) { // data not null
          Notifications.validateJSON(data['notifications']);
        }
        // validate the optional field `passConstraints`
        if (data['passConstraints']) { // data not null
          PassConstraints.validateJSON(data['passConstraints']);
        }
        // validate the optional field `rotatingBarcode`
        if (data['rotatingBarcode']) { // data not null
          RotatingBarcode.validateJSON(data['rotatingBarcode']);
        }
        // ensure the json data is a string
        if (data['smartTapRedemptionValue'] && !(typeof data['smartTapRedemptionValue'] === 'string' || data['smartTapRedemptionValue'] instanceof String)) {
            throw new Error("Expected the field `smartTapRedemptionValue` to be a primitive type in the JSON string but got " + data['smartTapRedemptionValue']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // validate the optional field `subheader`
        if (data['subheader']) { // data not null
          LocalizedString.validateJSON(data['subheader']);
        }
        if (data['textModulesData']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['textModulesData'])) {
                throw new Error("Expected the field `textModulesData` to be an array in the JSON data but got " + data['textModulesData']);
            }
            // validate the optional field `textModulesData` (array)
            for (const item of data['textModulesData']) {
                TextModuleData.validateJSON(item);
            };
        }
        // validate the optional field `validTimeInterval`
        if (data['validTimeInterval']) { // data not null
          TimeInterval.validateJSON(data['validTimeInterval']);
        }

        return true;
    }


}



/**
 * @member {module:model/AppLinkData} appLinkData
 */
GenericObject.prototype['appLinkData'] = undefined;

/**
 * @member {module:model/Barcode} barcode
 */
GenericObject.prototype['barcode'] = undefined;

/**
 * @member {module:model/LocalizedString} cardTitle
 */
GenericObject.prototype['cardTitle'] = undefined;

/**
 * Required. The class associated with this object. The class must be of the same type as this object, must already exist, and must be approved. Class IDs should follow the format `issuerID.identifier` where `issuerID` is issued by Google and `identifier` is chosen by you.
 * @member {String} classId
 */
GenericObject.prototype['classId'] = undefined;

/**
 * Specify which `GenericType` the card belongs to.
 * @member {module:model/GenericObject.GenericTypeEnum} genericType
 */
GenericObject.prototype['genericType'] = undefined;

/**
 * @member {module:model/GroupingInfo} groupingInfo
 */
GenericObject.prototype['groupingInfo'] = undefined;

/**
 * Indicates if the object has users. This field is set by the platform.
 * @member {Boolean} hasUsers
 */
GenericObject.prototype['hasUsers'] = undefined;

/**
 * @member {module:model/LocalizedString} header
 */
GenericObject.prototype['header'] = undefined;

/**
 * @member {module:model/Image} heroImage
 */
GenericObject.prototype['heroImage'] = undefined;

/**
 * The background color for the card. If not set, the dominant color of the hero image is used, and if no hero image is set, the dominant color of the logo is used and if logo is not set, a color would be chosen by Google.
 * @member {String} hexBackgroundColor
 */
GenericObject.prototype['hexBackgroundColor'] = undefined;

/**
 * Required. The unique identifier for an object. This ID must be unique across all objects from an issuer. This value needs to follow the format `issuerID.identifier` where `issuerID` is issued by Google and `identifier` is chosen by you. The unique identifier can only include alphanumeric characters, `.`, `_`, or `-`.
 * @member {String} id
 */
GenericObject.prototype['id'] = undefined;

/**
 * Image module data. Only one of the image from class and one from object level will be rendered when both set.
 * @member {Array.<module:model/ImageModuleData>} imageModulesData
 */
GenericObject.prototype['imageModulesData'] = undefined;

/**
 * @member {module:model/LinksModuleData} linksModuleData
 */
GenericObject.prototype['linksModuleData'] = undefined;

/**
 * @member {module:model/Image} logo
 */
GenericObject.prototype['logo'] = undefined;

/**
 * @member {module:model/Notifications} notifications
 */
GenericObject.prototype['notifications'] = undefined;

/**
 * @member {module:model/PassConstraints} passConstraints
 */
GenericObject.prototype['passConstraints'] = undefined;

/**
 * @member {module:model/RotatingBarcode} rotatingBarcode
 */
GenericObject.prototype['rotatingBarcode'] = undefined;

/**
 * The value that will be transmitted to a Smart Tap certified terminal over NFC for this object. The class level fields `enableSmartTap` and `redemptionIssuers` must also be set up correctly in order for the pass to support Smart Tap. Only ASCII characters are supported.
 * @member {String} smartTapRedemptionValue
 */
GenericObject.prototype['smartTapRedemptionValue'] = undefined;

/**
 * The state of the object. This field is used to determine how an object is displayed in the app. For example, an `inactive` object is moved to the \"Expired passes\" section. If this is not provided, the object would be considered `ACTIVE`.
 * @member {module:model/GenericObject.StateEnum} state
 */
GenericObject.prototype['state'] = undefined;

/**
 * @member {module:model/LocalizedString} subheader
 */
GenericObject.prototype['subheader'] = undefined;

/**
 * Text module data. If `textModulesData` is also defined on the class, both will be displayed. The maximum number of these fields displayed is 10 from class and 10 from object.
 * @member {Array.<module:model/TextModuleData>} textModulesData
 */
GenericObject.prototype['textModulesData'] = undefined;

/**
 * @member {module:model/TimeInterval} validTimeInterval
 */
GenericObject.prototype['validTimeInterval'] = undefined;





/**
 * Allowed values for the <code>genericType</code> property.
 * @enum {String}
 * @readonly
 */
GenericObject['GenericTypeEnum'] = {

    /**
     * value: "GENERIC_TYPE_UNSPECIFIED"
     * @const
     */
    "TYPE_UNSPECIFIED": "GENERIC_TYPE_UNSPECIFIED",

    /**
     * value: "GENERIC_SEASON_PASS"
     * @const
     */
    "SEASON_PASS": "GENERIC_SEASON_PASS",

    /**
     * value: "GENERIC_UTILITY_BILLS"
     * @const
     */
    "UTILITY_BILLS": "GENERIC_UTILITY_BILLS",

    /**
     * value: "GENERIC_PARKING_PASS"
     * @const
     */
    "PARKING_PASS": "GENERIC_PARKING_PASS",

    /**
     * value: "GENERIC_VOUCHER"
     * @const
     */
    "VOUCHER": "GENERIC_VOUCHER",

    /**
     * value: "GENERIC_GYM_MEMBERSHIP"
     * @const
     */
    "GYM_MEMBERSHIP": "GENERIC_GYM_MEMBERSHIP",

    /**
     * value: "GENERIC_LIBRARY_MEMBERSHIP"
     * @const
     */
    "LIBRARY_MEMBERSHIP": "GENERIC_LIBRARY_MEMBERSHIP",

    /**
     * value: "GENERIC_RESERVATIONS"
     * @const
     */
    "RESERVATIONS": "GENERIC_RESERVATIONS",

    /**
     * value: "GENERIC_AUTO_INSURANCE"
     * @const
     */
    "AUTO_INSURANCE": "GENERIC_AUTO_INSURANCE",

    /**
     * value: "GENERIC_HOME_INSURANCE"
     * @const
     */
    "HOME_INSURANCE": "GENERIC_HOME_INSURANCE",

    /**
     * value: "GENERIC_ENTRY_TICKET"
     * @const
     */
    "ENTRY_TICKET": "GENERIC_ENTRY_TICKET",

    /**
     * value: "GENERIC_RECEIPT"
     * @const
     */
    "RECEIPT": "GENERIC_RECEIPT",

    /**
     * value: "GENERIC_OTHER"
     * @const
     */
    "OTHER": "GENERIC_OTHER"
};


/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
GenericObject['StateEnum'] = {

    /**
     * value: "STATE_UNSPECIFIED"
     * @const
     */
    "STATE_UNSPECIFIED": "STATE_UNSPECIFIED",

    /**
     * value: "ACTIVE"
     * @const
     */
    "ACTIVE": "ACTIVE",

    /**
     * value: "active"
     * @const
     */
    "active": "active",

    /**
     * value: "COMPLETED"
     * @const
     */
    "COMPLETED": "COMPLETED",

    /**
     * value: "completed"
     * @const
     */
    "completed": "completed",

    /**
     * value: "EXPIRED"
     * @const
     */
    "EXPIRED": "EXPIRED",

    /**
     * value: "expired"
     * @const
     */
    "expired": "expired",

    /**
     * value: "INACTIVE"
     * @const
     */
    "INACTIVE": "INACTIVE",

    /**
     * value: "inactive"
     * @const
     */
    "inactive": "inactive"
};



export default GenericObject;

