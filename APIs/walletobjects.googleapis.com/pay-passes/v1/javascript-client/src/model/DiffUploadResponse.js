/**
 * Google Pay Passes API
 * API for issuers to save and manage Google Wallet Objects.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CompositeMedia from './CompositeMedia';

/**
 * The DiffUploadResponse model module.
 * @module model/DiffUploadResponse
 * @version v1
 */
class DiffUploadResponse {
    /**
     * Constructs a new <code>DiffUploadResponse</code>.
     * Backend response for a Diff upload request. For details on the Scotty Diff protocol, visit http://go/scotty-diff-protocol.
     * @alias module:model/DiffUploadResponse
     */
    constructor() { 
        
        DiffUploadResponse.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DiffUploadResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DiffUploadResponse} obj Optional instance to populate.
     * @return {module:model/DiffUploadResponse} The populated <code>DiffUploadResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DiffUploadResponse();

            if (data.hasOwnProperty('objectVersion')) {
                obj['objectVersion'] = ApiClient.convertToType(data['objectVersion'], 'String');
            }
            if (data.hasOwnProperty('originalObject')) {
                obj['originalObject'] = CompositeMedia.constructFromObject(data['originalObject']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DiffUploadResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DiffUploadResponse</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['objectVersion'] && !(typeof data['objectVersion'] === 'string' || data['objectVersion'] instanceof String)) {
            throw new Error("Expected the field `objectVersion` to be a primitive type in the JSON string but got " + data['objectVersion']);
        }
        // validate the optional field `originalObject`
        if (data['originalObject']) { // data not null
          CompositeMedia.validateJSON(data['originalObject']);
        }

        return true;
    }


}



/**
 * The object version of the object at the server. Must be included in the end notification response. The version in the end notification response must correspond to the new version of the object that is now stored at the server, after the upload.
 * @member {String} objectVersion
 */
DiffUploadResponse.prototype['objectVersion'] = undefined;

/**
 * @member {module:model/CompositeMedia} originalObject
 */
DiffUploadResponse.prototype['originalObject'] = undefined;






export default DiffUploadResponse;

