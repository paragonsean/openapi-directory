/**
 * Google Pay Passes API
 * API for issuers to save and manage Google Wallet Objects.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AppLinkData from './AppLinkData';
import Barcode from './Barcode';
import GroupingInfo from './GroupingInfo';
import Image from './Image';
import ImageModuleData from './ImageModuleData';
import InfoModuleData from './InfoModuleData';
import LatLongPoint from './LatLongPoint';
import LinksModuleData from './LinksModuleData';
import LoyaltyClass from './LoyaltyClass';
import LoyaltyPoints from './LoyaltyPoints';
import Message from './Message';
import PassConstraints from './PassConstraints';
import RotatingBarcode from './RotatingBarcode';
import TextModuleData from './TextModuleData';
import TimeInterval from './TimeInterval';

/**
 * The LoyaltyObject model module.
 * @module model/LoyaltyObject
 * @version v1
 */
class LoyaltyObject {
    /**
     * Constructs a new <code>LoyaltyObject</code>.
     * @alias module:model/LoyaltyObject
     */
    constructor() { 
        
        LoyaltyObject.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>LoyaltyObject</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LoyaltyObject} obj Optional instance to populate.
     * @return {module:model/LoyaltyObject} The populated <code>LoyaltyObject</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LoyaltyObject();

            if (data.hasOwnProperty('accountId')) {
                obj['accountId'] = ApiClient.convertToType(data['accountId'], 'String');
            }
            if (data.hasOwnProperty('accountName')) {
                obj['accountName'] = ApiClient.convertToType(data['accountName'], 'String');
            }
            if (data.hasOwnProperty('appLinkData')) {
                obj['appLinkData'] = AppLinkData.constructFromObject(data['appLinkData']);
            }
            if (data.hasOwnProperty('barcode')) {
                obj['barcode'] = Barcode.constructFromObject(data['barcode']);
            }
            if (data.hasOwnProperty('classId')) {
                obj['classId'] = ApiClient.convertToType(data['classId'], 'String');
            }
            if (data.hasOwnProperty('classReference')) {
                obj['classReference'] = LoyaltyClass.constructFromObject(data['classReference']);
            }
            if (data.hasOwnProperty('disableExpirationNotification')) {
                obj['disableExpirationNotification'] = ApiClient.convertToType(data['disableExpirationNotification'], 'Boolean');
            }
            if (data.hasOwnProperty('groupingInfo')) {
                obj['groupingInfo'] = GroupingInfo.constructFromObject(data['groupingInfo']);
            }
            if (data.hasOwnProperty('hasLinkedDevice')) {
                obj['hasLinkedDevice'] = ApiClient.convertToType(data['hasLinkedDevice'], 'Boolean');
            }
            if (data.hasOwnProperty('hasUsers')) {
                obj['hasUsers'] = ApiClient.convertToType(data['hasUsers'], 'Boolean');
            }
            if (data.hasOwnProperty('heroImage')) {
                obj['heroImage'] = Image.constructFromObject(data['heroImage']);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('imageModulesData')) {
                obj['imageModulesData'] = ApiClient.convertToType(data['imageModulesData'], [ImageModuleData]);
            }
            if (data.hasOwnProperty('infoModuleData')) {
                obj['infoModuleData'] = InfoModuleData.constructFromObject(data['infoModuleData']);
            }
            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
            if (data.hasOwnProperty('linkedOfferIds')) {
                obj['linkedOfferIds'] = ApiClient.convertToType(data['linkedOfferIds'], ['String']);
            }
            if (data.hasOwnProperty('linksModuleData')) {
                obj['linksModuleData'] = LinksModuleData.constructFromObject(data['linksModuleData']);
            }
            if (data.hasOwnProperty('locations')) {
                obj['locations'] = ApiClient.convertToType(data['locations'], [LatLongPoint]);
            }
            if (data.hasOwnProperty('loyaltyPoints')) {
                obj['loyaltyPoints'] = LoyaltyPoints.constructFromObject(data['loyaltyPoints']);
            }
            if (data.hasOwnProperty('messages')) {
                obj['messages'] = ApiClient.convertToType(data['messages'], [Message]);
            }
            if (data.hasOwnProperty('passConstraints')) {
                obj['passConstraints'] = PassConstraints.constructFromObject(data['passConstraints']);
            }
            if (data.hasOwnProperty('rotatingBarcode')) {
                obj['rotatingBarcode'] = RotatingBarcode.constructFromObject(data['rotatingBarcode']);
            }
            if (data.hasOwnProperty('secondaryLoyaltyPoints')) {
                obj['secondaryLoyaltyPoints'] = LoyaltyPoints.constructFromObject(data['secondaryLoyaltyPoints']);
            }
            if (data.hasOwnProperty('smartTapRedemptionValue')) {
                obj['smartTapRedemptionValue'] = ApiClient.convertToType(data['smartTapRedemptionValue'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('textModulesData')) {
                obj['textModulesData'] = ApiClient.convertToType(data['textModulesData'], [TextModuleData]);
            }
            if (data.hasOwnProperty('validTimeInterval')) {
                obj['validTimeInterval'] = TimeInterval.constructFromObject(data['validTimeInterval']);
            }
            if (data.hasOwnProperty('version')) {
                obj['version'] = ApiClient.convertToType(data['version'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LoyaltyObject</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LoyaltyObject</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['accountId'] && !(typeof data['accountId'] === 'string' || data['accountId'] instanceof String)) {
            throw new Error("Expected the field `accountId` to be a primitive type in the JSON string but got " + data['accountId']);
        }
        // ensure the json data is a string
        if (data['accountName'] && !(typeof data['accountName'] === 'string' || data['accountName'] instanceof String)) {
            throw new Error("Expected the field `accountName` to be a primitive type in the JSON string but got " + data['accountName']);
        }
        // validate the optional field `appLinkData`
        if (data['appLinkData']) { // data not null
          AppLinkData.validateJSON(data['appLinkData']);
        }
        // validate the optional field `barcode`
        if (data['barcode']) { // data not null
          Barcode.validateJSON(data['barcode']);
        }
        // ensure the json data is a string
        if (data['classId'] && !(typeof data['classId'] === 'string' || data['classId'] instanceof String)) {
            throw new Error("Expected the field `classId` to be a primitive type in the JSON string but got " + data['classId']);
        }
        // validate the optional field `classReference`
        if (data['classReference']) { // data not null
          LoyaltyClass.validateJSON(data['classReference']);
        }
        // validate the optional field `groupingInfo`
        if (data['groupingInfo']) { // data not null
          GroupingInfo.validateJSON(data['groupingInfo']);
        }
        // validate the optional field `heroImage`
        if (data['heroImage']) { // data not null
          Image.validateJSON(data['heroImage']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        if (data['imageModulesData']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['imageModulesData'])) {
                throw new Error("Expected the field `imageModulesData` to be an array in the JSON data but got " + data['imageModulesData']);
            }
            // validate the optional field `imageModulesData` (array)
            for (const item of data['imageModulesData']) {
                ImageModuleData.validateJSON(item);
            };
        }
        // validate the optional field `infoModuleData`
        if (data['infoModuleData']) { // data not null
          InfoModuleData.validateJSON(data['infoModuleData']);
        }
        // ensure the json data is a string
        if (data['kind'] && !(typeof data['kind'] === 'string' || data['kind'] instanceof String)) {
            throw new Error("Expected the field `kind` to be a primitive type in the JSON string but got " + data['kind']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['linkedOfferIds'])) {
            throw new Error("Expected the field `linkedOfferIds` to be an array in the JSON data but got " + data['linkedOfferIds']);
        }
        // validate the optional field `linksModuleData`
        if (data['linksModuleData']) { // data not null
          LinksModuleData.validateJSON(data['linksModuleData']);
        }
        if (data['locations']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['locations'])) {
                throw new Error("Expected the field `locations` to be an array in the JSON data but got " + data['locations']);
            }
            // validate the optional field `locations` (array)
            for (const item of data['locations']) {
                LatLongPoint.validateJSON(item);
            };
        }
        // validate the optional field `loyaltyPoints`
        if (data['loyaltyPoints']) { // data not null
          LoyaltyPoints.validateJSON(data['loyaltyPoints']);
        }
        if (data['messages']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['messages'])) {
                throw new Error("Expected the field `messages` to be an array in the JSON data but got " + data['messages']);
            }
            // validate the optional field `messages` (array)
            for (const item of data['messages']) {
                Message.validateJSON(item);
            };
        }
        // validate the optional field `passConstraints`
        if (data['passConstraints']) { // data not null
          PassConstraints.validateJSON(data['passConstraints']);
        }
        // validate the optional field `rotatingBarcode`
        if (data['rotatingBarcode']) { // data not null
          RotatingBarcode.validateJSON(data['rotatingBarcode']);
        }
        // validate the optional field `secondaryLoyaltyPoints`
        if (data['secondaryLoyaltyPoints']) { // data not null
          LoyaltyPoints.validateJSON(data['secondaryLoyaltyPoints']);
        }
        // ensure the json data is a string
        if (data['smartTapRedemptionValue'] && !(typeof data['smartTapRedemptionValue'] === 'string' || data['smartTapRedemptionValue'] instanceof String)) {
            throw new Error("Expected the field `smartTapRedemptionValue` to be a primitive type in the JSON string but got " + data['smartTapRedemptionValue']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        if (data['textModulesData']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['textModulesData'])) {
                throw new Error("Expected the field `textModulesData` to be an array in the JSON data but got " + data['textModulesData']);
            }
            // validate the optional field `textModulesData` (array)
            for (const item of data['textModulesData']) {
                TextModuleData.validateJSON(item);
            };
        }
        // validate the optional field `validTimeInterval`
        if (data['validTimeInterval']) { // data not null
          TimeInterval.validateJSON(data['validTimeInterval']);
        }
        // ensure the json data is a string
        if (data['version'] && !(typeof data['version'] === 'string' || data['version'] instanceof String)) {
            throw new Error("Expected the field `version` to be a primitive type in the JSON string but got " + data['version']);
        }

        return true;
    }


}



/**
 * The loyalty account identifier. Recommended maximum length is 20 characters.
 * @member {String} accountId
 */
LoyaltyObject.prototype['accountId'] = undefined;

/**
 * The loyalty account holder name, such as \"John Smith.\" Recommended maximum length is 20 characters to ensure full string is displayed on smaller screens.
 * @member {String} accountName
 */
LoyaltyObject.prototype['accountName'] = undefined;

/**
 * @member {module:model/AppLinkData} appLinkData
 */
LoyaltyObject.prototype['appLinkData'] = undefined;

/**
 * @member {module:model/Barcode} barcode
 */
LoyaltyObject.prototype['barcode'] = undefined;

/**
 * Required. The class associated with this object. The class must be of the same type as this object, must already exist, and must be approved. Class IDs should follow the format issuer ID.identifier where the former is issued by Google and latter is chosen by you.
 * @member {String} classId
 */
LoyaltyObject.prototype['classId'] = undefined;

/**
 * @member {module:model/LoyaltyClass} classReference
 */
LoyaltyObject.prototype['classReference'] = undefined;

/**
 * Indicates if notifications should explicitly be suppressed. If this field is set to true, regardless of the `messages` field, expiration notifications to the user will be suppressed. By default, this field is set to false. Currently, this can only be set for offers.
 * @member {Boolean} disableExpirationNotification
 */
LoyaltyObject.prototype['disableExpirationNotification'] = undefined;

/**
 * @member {module:model/GroupingInfo} groupingInfo
 */
LoyaltyObject.prototype['groupingInfo'] = undefined;

/**
 * Whether this object is currently linked to a single device. This field is set by the platform when a user saves the object, linking it to their device. Intended for use by select partners. Contact support for additional information.
 * @member {Boolean} hasLinkedDevice
 */
LoyaltyObject.prototype['hasLinkedDevice'] = undefined;

/**
 * Indicates if the object has users. This field is set by the platform.
 * @member {Boolean} hasUsers
 */
LoyaltyObject.prototype['hasUsers'] = undefined;

/**
 * @member {module:model/Image} heroImage
 */
LoyaltyObject.prototype['heroImage'] = undefined;

/**
 * Required. The unique identifier for an object. This ID must be unique across all objects from an issuer. This value should follow the format issuer ID.identifier where the former is issued by Google and latter is chosen by you. The unique identifier should only include alphanumeric characters, '.', '_', or '-'.
 * @member {String} id
 */
LoyaltyObject.prototype['id'] = undefined;

/**
 * Image module data. The maximum number of these fields displayed is 1 from object level and 1 for class object level.
 * @member {Array.<module:model/ImageModuleData>} imageModulesData
 */
LoyaltyObject.prototype['imageModulesData'] = undefined;

/**
 * @member {module:model/InfoModuleData} infoModuleData
 */
LoyaltyObject.prototype['infoModuleData'] = undefined;

/**
 * Identifies what kind of resource this is. Value: the fixed string `\"walletobjects#loyaltyObject\"`.
 * @member {String} kind
 */
LoyaltyObject.prototype['kind'] = undefined;

/**
 * A list of offer objects linked to this loyalty card. The offer objects must already exist. Offer object IDs should follow the format issuer ID. identifier where the former is issued by Google and latter is chosen by you.
 * @member {Array.<String>} linkedOfferIds
 */
LoyaltyObject.prototype['linkedOfferIds'] = undefined;

/**
 * @member {module:model/LinksModuleData} linksModuleData
 */
LoyaltyObject.prototype['linksModuleData'] = undefined;

/**
 * Note: This field is currently not supported to trigger geo notifications.
 * @member {Array.<module:model/LatLongPoint>} locations
 */
LoyaltyObject.prototype['locations'] = undefined;

/**
 * @member {module:model/LoyaltyPoints} loyaltyPoints
 */
LoyaltyObject.prototype['loyaltyPoints'] = undefined;

/**
 * An array of messages displayed in the app. All users of this object will receive its associated messages. The maximum number of these fields is 10.
 * @member {Array.<module:model/Message>} messages
 */
LoyaltyObject.prototype['messages'] = undefined;

/**
 * @member {module:model/PassConstraints} passConstraints
 */
LoyaltyObject.prototype['passConstraints'] = undefined;

/**
 * @member {module:model/RotatingBarcode} rotatingBarcode
 */
LoyaltyObject.prototype['rotatingBarcode'] = undefined;

/**
 * @member {module:model/LoyaltyPoints} secondaryLoyaltyPoints
 */
LoyaltyObject.prototype['secondaryLoyaltyPoints'] = undefined;

/**
 * The value that will be transmitted to a Smart Tap certified terminal over NFC for this object. The class level fields `enableSmartTap` and `redemptionIssuers` must also be set up correctly in order for the pass to support Smart Tap. Only ASCII characters are supported. If this value is not set but the class level fields `enableSmartTap` and `redemptionIssuers` are set up correctly, the `barcode.value` or the `accountId` fields are used as fallback if present.
 * @member {String} smartTapRedemptionValue
 */
LoyaltyObject.prototype['smartTapRedemptionValue'] = undefined;

/**
 * Required. The state of the object. This field is used to determine how an object is displayed in the app. For example, an `inactive` object is moved to the \"Expired passes\" section.
 * @member {module:model/LoyaltyObject.StateEnum} state
 */
LoyaltyObject.prototype['state'] = undefined;

/**
 * Text module data. If text module data is also defined on the class, both will be displayed. The maximum number of these fields displayed is 10 from the object and 10 from the class.
 * @member {Array.<module:model/TextModuleData>} textModulesData
 */
LoyaltyObject.prototype['textModulesData'] = undefined;

/**
 * @member {module:model/TimeInterval} validTimeInterval
 */
LoyaltyObject.prototype['validTimeInterval'] = undefined;

/**
 * Deprecated
 * @member {String} version
 */
LoyaltyObject.prototype['version'] = undefined;





/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
LoyaltyObject['StateEnum'] = {

    /**
     * value: "STATE_UNSPECIFIED"
     * @const
     */
    "STATE_UNSPECIFIED": "STATE_UNSPECIFIED",

    /**
     * value: "ACTIVE"
     * @const
     */
    "ACTIVE": "ACTIVE",

    /**
     * value: "active"
     * @const
     */
    "active": "active",

    /**
     * value: "COMPLETED"
     * @const
     */
    "COMPLETED": "COMPLETED",

    /**
     * value: "completed"
     * @const
     */
    "completed": "completed",

    /**
     * value: "EXPIRED"
     * @const
     */
    "EXPIRED": "EXPIRED",

    /**
     * value: "expired"
     * @const
     */
    "expired": "expired",

    /**
     * value: "INACTIVE"
     * @const
     */
    "INACTIVE": "INACTIVE",

    /**
     * value: "inactive"
     * @const
     */
    "inactive": "inactive"
};



export default LoyaltyObject;

