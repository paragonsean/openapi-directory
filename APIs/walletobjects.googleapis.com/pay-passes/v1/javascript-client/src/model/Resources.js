/**
 * Google Pay Passes API
 * API for issuers to save and manage Google Wallet Objects.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import EventTicketClass from './EventTicketClass';
import EventTicketObject from './EventTicketObject';
import FlightClass from './FlightClass';
import FlightObject from './FlightObject';
import GiftCardClass from './GiftCardClass';
import GiftCardObject from './GiftCardObject';
import LoyaltyClass from './LoyaltyClass';
import LoyaltyObject from './LoyaltyObject';
import OfferClass from './OfferClass';
import OfferObject from './OfferObject';
import TransitClass from './TransitClass';
import TransitObject from './TransitObject';

/**
 * The Resources model module.
 * @module model/Resources
 * @version v1
 */
class Resources {
    /**
     * Constructs a new <code>Resources</code>.
     * @alias module:model/Resources
     */
    constructor() { 
        
        Resources.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Resources</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Resources} obj Optional instance to populate.
     * @return {module:model/Resources} The populated <code>Resources</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Resources();

            if (data.hasOwnProperty('eventTicketClasses')) {
                obj['eventTicketClasses'] = ApiClient.convertToType(data['eventTicketClasses'], [EventTicketClass]);
            }
            if (data.hasOwnProperty('eventTicketObjects')) {
                obj['eventTicketObjects'] = ApiClient.convertToType(data['eventTicketObjects'], [EventTicketObject]);
            }
            if (data.hasOwnProperty('flightClasses')) {
                obj['flightClasses'] = ApiClient.convertToType(data['flightClasses'], [FlightClass]);
            }
            if (data.hasOwnProperty('flightObjects')) {
                obj['flightObjects'] = ApiClient.convertToType(data['flightObjects'], [FlightObject]);
            }
            if (data.hasOwnProperty('giftCardClasses')) {
                obj['giftCardClasses'] = ApiClient.convertToType(data['giftCardClasses'], [GiftCardClass]);
            }
            if (data.hasOwnProperty('giftCardObjects')) {
                obj['giftCardObjects'] = ApiClient.convertToType(data['giftCardObjects'], [GiftCardObject]);
            }
            if (data.hasOwnProperty('loyaltyClasses')) {
                obj['loyaltyClasses'] = ApiClient.convertToType(data['loyaltyClasses'], [LoyaltyClass]);
            }
            if (data.hasOwnProperty('loyaltyObjects')) {
                obj['loyaltyObjects'] = ApiClient.convertToType(data['loyaltyObjects'], [LoyaltyObject]);
            }
            if (data.hasOwnProperty('offerClasses')) {
                obj['offerClasses'] = ApiClient.convertToType(data['offerClasses'], [OfferClass]);
            }
            if (data.hasOwnProperty('offerObjects')) {
                obj['offerObjects'] = ApiClient.convertToType(data['offerObjects'], [OfferObject]);
            }
            if (data.hasOwnProperty('transitClasses')) {
                obj['transitClasses'] = ApiClient.convertToType(data['transitClasses'], [TransitClass]);
            }
            if (data.hasOwnProperty('transitObjects')) {
                obj['transitObjects'] = ApiClient.convertToType(data['transitObjects'], [TransitObject]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Resources</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Resources</code>.
     */
    static validateJSON(data) {
        if (data['eventTicketClasses']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['eventTicketClasses'])) {
                throw new Error("Expected the field `eventTicketClasses` to be an array in the JSON data but got " + data['eventTicketClasses']);
            }
            // validate the optional field `eventTicketClasses` (array)
            for (const item of data['eventTicketClasses']) {
                EventTicketClass.validateJSON(item);
            };
        }
        if (data['eventTicketObjects']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['eventTicketObjects'])) {
                throw new Error("Expected the field `eventTicketObjects` to be an array in the JSON data but got " + data['eventTicketObjects']);
            }
            // validate the optional field `eventTicketObjects` (array)
            for (const item of data['eventTicketObjects']) {
                EventTicketObject.validateJSON(item);
            };
        }
        if (data['flightClasses']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['flightClasses'])) {
                throw new Error("Expected the field `flightClasses` to be an array in the JSON data but got " + data['flightClasses']);
            }
            // validate the optional field `flightClasses` (array)
            for (const item of data['flightClasses']) {
                FlightClass.validateJSON(item);
            };
        }
        if (data['flightObjects']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['flightObjects'])) {
                throw new Error("Expected the field `flightObjects` to be an array in the JSON data but got " + data['flightObjects']);
            }
            // validate the optional field `flightObjects` (array)
            for (const item of data['flightObjects']) {
                FlightObject.validateJSON(item);
            };
        }
        if (data['giftCardClasses']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['giftCardClasses'])) {
                throw new Error("Expected the field `giftCardClasses` to be an array in the JSON data but got " + data['giftCardClasses']);
            }
            // validate the optional field `giftCardClasses` (array)
            for (const item of data['giftCardClasses']) {
                GiftCardClass.validateJSON(item);
            };
        }
        if (data['giftCardObjects']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['giftCardObjects'])) {
                throw new Error("Expected the field `giftCardObjects` to be an array in the JSON data but got " + data['giftCardObjects']);
            }
            // validate the optional field `giftCardObjects` (array)
            for (const item of data['giftCardObjects']) {
                GiftCardObject.validateJSON(item);
            };
        }
        if (data['loyaltyClasses']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['loyaltyClasses'])) {
                throw new Error("Expected the field `loyaltyClasses` to be an array in the JSON data but got " + data['loyaltyClasses']);
            }
            // validate the optional field `loyaltyClasses` (array)
            for (const item of data['loyaltyClasses']) {
                LoyaltyClass.validateJSON(item);
            };
        }
        if (data['loyaltyObjects']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['loyaltyObjects'])) {
                throw new Error("Expected the field `loyaltyObjects` to be an array in the JSON data but got " + data['loyaltyObjects']);
            }
            // validate the optional field `loyaltyObjects` (array)
            for (const item of data['loyaltyObjects']) {
                LoyaltyObject.validateJSON(item);
            };
        }
        if (data['offerClasses']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['offerClasses'])) {
                throw new Error("Expected the field `offerClasses` to be an array in the JSON data but got " + data['offerClasses']);
            }
            // validate the optional field `offerClasses` (array)
            for (const item of data['offerClasses']) {
                OfferClass.validateJSON(item);
            };
        }
        if (data['offerObjects']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['offerObjects'])) {
                throw new Error("Expected the field `offerObjects` to be an array in the JSON data but got " + data['offerObjects']);
            }
            // validate the optional field `offerObjects` (array)
            for (const item of data['offerObjects']) {
                OfferObject.validateJSON(item);
            };
        }
        if (data['transitClasses']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['transitClasses'])) {
                throw new Error("Expected the field `transitClasses` to be an array in the JSON data but got " + data['transitClasses']);
            }
            // validate the optional field `transitClasses` (array)
            for (const item of data['transitClasses']) {
                TransitClass.validateJSON(item);
            };
        }
        if (data['transitObjects']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['transitObjects'])) {
                throw new Error("Expected the field `transitObjects` to be an array in the JSON data but got " + data['transitObjects']);
            }
            // validate the optional field `transitObjects` (array)
            for (const item of data['transitObjects']) {
                TransitObject.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * @member {Array.<module:model/EventTicketClass>} eventTicketClasses
 */
Resources.prototype['eventTicketClasses'] = undefined;

/**
 * @member {Array.<module:model/EventTicketObject>} eventTicketObjects
 */
Resources.prototype['eventTicketObjects'] = undefined;

/**
 * @member {Array.<module:model/FlightClass>} flightClasses
 */
Resources.prototype['flightClasses'] = undefined;

/**
 * @member {Array.<module:model/FlightObject>} flightObjects
 */
Resources.prototype['flightObjects'] = undefined;

/**
 * @member {Array.<module:model/GiftCardClass>} giftCardClasses
 */
Resources.prototype['giftCardClasses'] = undefined;

/**
 * @member {Array.<module:model/GiftCardObject>} giftCardObjects
 */
Resources.prototype['giftCardObjects'] = undefined;

/**
 * @member {Array.<module:model/LoyaltyClass>} loyaltyClasses
 */
Resources.prototype['loyaltyClasses'] = undefined;

/**
 * @member {Array.<module:model/LoyaltyObject>} loyaltyObjects
 */
Resources.prototype['loyaltyObjects'] = undefined;

/**
 * @member {Array.<module:model/OfferClass>} offerClasses
 */
Resources.prototype['offerClasses'] = undefined;

/**
 * @member {Array.<module:model/OfferObject>} offerObjects
 */
Resources.prototype['offerObjects'] = undefined;

/**
 * @member {Array.<module:model/TransitClass>} transitClasses
 */
Resources.prototype['transitClasses'] = undefined;

/**
 * @member {Array.<module:model/TransitObject>} transitObjects
 */
Resources.prototype['transitObjects'] = undefined;






export default Resources;

