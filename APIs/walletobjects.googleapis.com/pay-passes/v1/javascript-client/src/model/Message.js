/**
 * Google Pay Passes API
 * API for issuers to save and manage Google Wallet Objects.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import LocalizedString from './LocalizedString';
import TimeInterval from './TimeInterval';

/**
 * The Message model module.
 * @module model/Message
 * @version v1
 */
class Message {
    /**
     * Constructs a new <code>Message</code>.
     * A message that will be displayed with a Valuable
     * @alias module:model/Message
     */
    constructor() { 
        
        Message.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Message</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Message} obj Optional instance to populate.
     * @return {module:model/Message} The populated <code>Message</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Message();

            if (data.hasOwnProperty('body')) {
                obj['body'] = ApiClient.convertToType(data['body'], 'String');
            }
            if (data.hasOwnProperty('displayInterval')) {
                obj['displayInterval'] = TimeInterval.constructFromObject(data['displayInterval']);
            }
            if (data.hasOwnProperty('header')) {
                obj['header'] = ApiClient.convertToType(data['header'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
            if (data.hasOwnProperty('localizedBody')) {
                obj['localizedBody'] = LocalizedString.constructFromObject(data['localizedBody']);
            }
            if (data.hasOwnProperty('localizedHeader')) {
                obj['localizedHeader'] = LocalizedString.constructFromObject(data['localizedHeader']);
            }
            if (data.hasOwnProperty('messageType')) {
                obj['messageType'] = ApiClient.convertToType(data['messageType'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Message</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Message</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['body'] && !(typeof data['body'] === 'string' || data['body'] instanceof String)) {
            throw new Error("Expected the field `body` to be a primitive type in the JSON string but got " + data['body']);
        }
        // validate the optional field `displayInterval`
        if (data['displayInterval']) { // data not null
          TimeInterval.validateJSON(data['displayInterval']);
        }
        // ensure the json data is a string
        if (data['header'] && !(typeof data['header'] === 'string' || data['header'] instanceof String)) {
            throw new Error("Expected the field `header` to be a primitive type in the JSON string but got " + data['header']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['kind'] && !(typeof data['kind'] === 'string' || data['kind'] instanceof String)) {
            throw new Error("Expected the field `kind` to be a primitive type in the JSON string but got " + data['kind']);
        }
        // validate the optional field `localizedBody`
        if (data['localizedBody']) { // data not null
          LocalizedString.validateJSON(data['localizedBody']);
        }
        // validate the optional field `localizedHeader`
        if (data['localizedHeader']) { // data not null
          LocalizedString.validateJSON(data['localizedHeader']);
        }
        // ensure the json data is a string
        if (data['messageType'] && !(typeof data['messageType'] === 'string' || data['messageType'] instanceof String)) {
            throw new Error("Expected the field `messageType` to be a primitive type in the JSON string but got " + data['messageType']);
        }

        return true;
    }


}



/**
 * The message body.
 * @member {String} body
 */
Message.prototype['body'] = undefined;

/**
 * @member {module:model/TimeInterval} displayInterval
 */
Message.prototype['displayInterval'] = undefined;

/**
 * The message header.
 * @member {String} header
 */
Message.prototype['header'] = undefined;

/**
 * The ID associated with a message. This field is here to enable ease of management of messages. Notice ID values could possibly duplicate across multiple messages in the same class/instance, and care must be taken to select a reasonable ID for each message.
 * @member {String} id
 */
Message.prototype['id'] = undefined;

/**
 * Identifies what kind of resource this is. Value: the fixed string `\"walletobjects#walletObjectMessage\"`.
 * @member {String} kind
 */
Message.prototype['kind'] = undefined;

/**
 * @member {module:model/LocalizedString} localizedBody
 */
Message.prototype['localizedBody'] = undefined;

/**
 * @member {module:model/LocalizedString} localizedHeader
 */
Message.prototype['localizedHeader'] = undefined;

/**
 * The type of the message. Currently, this can only be set for offers.
 * @member {module:model/Message.MessageTypeEnum} messageType
 */
Message.prototype['messageType'] = undefined;





/**
 * Allowed values for the <code>messageType</code> property.
 * @enum {String}
 * @readonly
 */
Message['MessageTypeEnum'] = {

    /**
     * value: "MESSAGE_TYPE_UNSPECIFIED"
     * @const
     */
    "MESSAGE_TYPE_UNSPECIFIED": "MESSAGE_TYPE_UNSPECIFIED",

    /**
     * value: "TEXT"
     * @const
     */
    "TEXT": "TEXT",

    /**
     * value: "text"
     * @const
     */
    "text": "text",

    /**
     * value: "EXPIRATION_NOTIFICATION"
     * @const
     */
    "EXPIRATION_NOTIFICATION": "EXPIRATION_NOTIFICATION",

    /**
     * value: "expirationNotification"
     * @const
     */
    "expirationNotification": "expirationNotification"
};



export default Message;

