/**
 * Google Pay Passes API
 * API for issuers to save and manage Google Wallet Objects.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import LocalizedString from './LocalizedString';

/**
 * The AirportInfo model module.
 * @module model/AirportInfo
 * @version v1
 */
class AirportInfo {
    /**
     * Constructs a new <code>AirportInfo</code>.
     * @alias module:model/AirportInfo
     */
    constructor() { 
        
        AirportInfo.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AirportInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AirportInfo} obj Optional instance to populate.
     * @return {module:model/AirportInfo} The populated <code>AirportInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AirportInfo();

            if (data.hasOwnProperty('airportIataCode')) {
                obj['airportIataCode'] = ApiClient.convertToType(data['airportIataCode'], 'String');
            }
            if (data.hasOwnProperty('airportNameOverride')) {
                obj['airportNameOverride'] = LocalizedString.constructFromObject(data['airportNameOverride']);
            }
            if (data.hasOwnProperty('gate')) {
                obj['gate'] = ApiClient.convertToType(data['gate'], 'String');
            }
            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
            if (data.hasOwnProperty('terminal')) {
                obj['terminal'] = ApiClient.convertToType(data['terminal'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AirportInfo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AirportInfo</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['airportIataCode'] && !(typeof data['airportIataCode'] === 'string' || data['airportIataCode'] instanceof String)) {
            throw new Error("Expected the field `airportIataCode` to be a primitive type in the JSON string but got " + data['airportIataCode']);
        }
        // validate the optional field `airportNameOverride`
        if (data['airportNameOverride']) { // data not null
          LocalizedString.validateJSON(data['airportNameOverride']);
        }
        // ensure the json data is a string
        if (data['gate'] && !(typeof data['gate'] === 'string' || data['gate'] instanceof String)) {
            throw new Error("Expected the field `gate` to be a primitive type in the JSON string but got " + data['gate']);
        }
        // ensure the json data is a string
        if (data['kind'] && !(typeof data['kind'] === 'string' || data['kind'] instanceof String)) {
            throw new Error("Expected the field `kind` to be a primitive type in the JSON string but got " + data['kind']);
        }
        // ensure the json data is a string
        if (data['terminal'] && !(typeof data['terminal'] === 'string' || data['terminal'] instanceof String)) {
            throw new Error("Expected the field `terminal` to be a primitive type in the JSON string but got " + data['terminal']);
        }

        return true;
    }


}



/**
 * Three character IATA airport code. This is a required field for `origin` and `destination`. Eg: \"SFO\"
 * @member {String} airportIataCode
 */
AirportInfo.prototype['airportIataCode'] = undefined;

/**
 * @member {module:model/LocalizedString} airportNameOverride
 */
AirportInfo.prototype['airportNameOverride'] = undefined;

/**
 * A name of the gate. Eg: \"B59\" or \"59\"
 * @member {String} gate
 */
AirportInfo.prototype['gate'] = undefined;

/**
 * Identifies what kind of resource this is. Value: the fixed string `\"walletobjects#airportInfo\"`.
 * @member {String} kind
 */
AirportInfo.prototype['kind'] = undefined;

/**
 * Terminal name. Eg: \"INTL\" or \"I\"
 * @member {String} terminal
 */
AirportInfo.prototype['terminal'] = undefined;






export default AirportInfo;

