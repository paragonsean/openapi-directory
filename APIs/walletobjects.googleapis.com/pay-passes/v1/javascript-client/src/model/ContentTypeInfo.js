/**
 * Google Pay Passes API
 * API for issuers to save and manage Google Wallet Objects.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ContentTypeInfo model module.
 * @module model/ContentTypeInfo
 * @version v1
 */
class ContentTypeInfo {
    /**
     * Constructs a new <code>ContentTypeInfo</code>.
     * Detailed Content-Type information from Scotty. The Content-Type of the media will typically be filled in by the header or Scotty&#39;s best_guess, but this extended information provides the backend with more information so that it can make a better decision if needed. This is only used on media upload requests from Scotty.
     * @alias module:model/ContentTypeInfo
     */
    constructor() { 
        
        ContentTypeInfo.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ContentTypeInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ContentTypeInfo} obj Optional instance to populate.
     * @return {module:model/ContentTypeInfo} The populated <code>ContentTypeInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ContentTypeInfo();

            if (data.hasOwnProperty('bestGuess')) {
                obj['bestGuess'] = ApiClient.convertToType(data['bestGuess'], 'String');
            }
            if (data.hasOwnProperty('fromBytes')) {
                obj['fromBytes'] = ApiClient.convertToType(data['fromBytes'], 'String');
            }
            if (data.hasOwnProperty('fromFileName')) {
                obj['fromFileName'] = ApiClient.convertToType(data['fromFileName'], 'String');
            }
            if (data.hasOwnProperty('fromHeader')) {
                obj['fromHeader'] = ApiClient.convertToType(data['fromHeader'], 'String');
            }
            if (data.hasOwnProperty('fromUrlPath')) {
                obj['fromUrlPath'] = ApiClient.convertToType(data['fromUrlPath'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ContentTypeInfo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ContentTypeInfo</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['bestGuess'] && !(typeof data['bestGuess'] === 'string' || data['bestGuess'] instanceof String)) {
            throw new Error("Expected the field `bestGuess` to be a primitive type in the JSON string but got " + data['bestGuess']);
        }
        // ensure the json data is a string
        if (data['fromBytes'] && !(typeof data['fromBytes'] === 'string' || data['fromBytes'] instanceof String)) {
            throw new Error("Expected the field `fromBytes` to be a primitive type in the JSON string but got " + data['fromBytes']);
        }
        // ensure the json data is a string
        if (data['fromFileName'] && !(typeof data['fromFileName'] === 'string' || data['fromFileName'] instanceof String)) {
            throw new Error("Expected the field `fromFileName` to be a primitive type in the JSON string but got " + data['fromFileName']);
        }
        // ensure the json data is a string
        if (data['fromHeader'] && !(typeof data['fromHeader'] === 'string' || data['fromHeader'] instanceof String)) {
            throw new Error("Expected the field `fromHeader` to be a primitive type in the JSON string but got " + data['fromHeader']);
        }
        // ensure the json data is a string
        if (data['fromUrlPath'] && !(typeof data['fromUrlPath'] === 'string' || data['fromUrlPath'] instanceof String)) {
            throw new Error("Expected the field `fromUrlPath` to be a primitive type in the JSON string but got " + data['fromUrlPath']);
        }

        return true;
    }


}



/**
 * Scotty's best guess of what the content type of the file is.
 * @member {String} bestGuess
 */
ContentTypeInfo.prototype['bestGuess'] = undefined;

/**
 * The content type of the file derived by looking at specific bytes (i.e. \"magic bytes\") of the actual file.
 * @member {String} fromBytes
 */
ContentTypeInfo.prototype['fromBytes'] = undefined;

/**
 * The content type of the file derived from the file extension of the original file name used by the client.
 * @member {String} fromFileName
 */
ContentTypeInfo.prototype['fromFileName'] = undefined;

/**
 * The content type of the file as specified in the request headers, multipart headers, or RUPIO start request.
 * @member {String} fromHeader
 */
ContentTypeInfo.prototype['fromHeader'] = undefined;

/**
 * The content type of the file derived from the file extension of the URL path. The URL path is assumed to represent a file name (which is typically only true for agents that are providing a REST API).
 * @member {String} fromUrlPath
 */
ContentTypeInfo.prototype['fromUrlPath'] = undefined;






export default ContentTypeInfo;

