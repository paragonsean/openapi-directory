/**
 * Google Pay Passes API
 * API for issuers to save and manage Google Wallet Objects.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import FlightCarrier from './FlightCarrier';

/**
 * The FlightHeader model module.
 * @module model/FlightHeader
 * @version v1
 */
class FlightHeader {
    /**
     * Constructs a new <code>FlightHeader</code>.
     * @alias module:model/FlightHeader
     */
    constructor() { 
        
        FlightHeader.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>FlightHeader</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FlightHeader} obj Optional instance to populate.
     * @return {module:model/FlightHeader} The populated <code>FlightHeader</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FlightHeader();

            if (data.hasOwnProperty('carrier')) {
                obj['carrier'] = FlightCarrier.constructFromObject(data['carrier']);
            }
            if (data.hasOwnProperty('flightNumber')) {
                obj['flightNumber'] = ApiClient.convertToType(data['flightNumber'], 'String');
            }
            if (data.hasOwnProperty('flightNumberDisplayOverride')) {
                obj['flightNumberDisplayOverride'] = ApiClient.convertToType(data['flightNumberDisplayOverride'], 'String');
            }
            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
            if (data.hasOwnProperty('operatingCarrier')) {
                obj['operatingCarrier'] = FlightCarrier.constructFromObject(data['operatingCarrier']);
            }
            if (data.hasOwnProperty('operatingFlightNumber')) {
                obj['operatingFlightNumber'] = ApiClient.convertToType(data['operatingFlightNumber'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>FlightHeader</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FlightHeader</code>.
     */
    static validateJSON(data) {
        // validate the optional field `carrier`
        if (data['carrier']) { // data not null
          FlightCarrier.validateJSON(data['carrier']);
        }
        // ensure the json data is a string
        if (data['flightNumber'] && !(typeof data['flightNumber'] === 'string' || data['flightNumber'] instanceof String)) {
            throw new Error("Expected the field `flightNumber` to be a primitive type in the JSON string but got " + data['flightNumber']);
        }
        // ensure the json data is a string
        if (data['flightNumberDisplayOverride'] && !(typeof data['flightNumberDisplayOverride'] === 'string' || data['flightNumberDisplayOverride'] instanceof String)) {
            throw new Error("Expected the field `flightNumberDisplayOverride` to be a primitive type in the JSON string but got " + data['flightNumberDisplayOverride']);
        }
        // ensure the json data is a string
        if (data['kind'] && !(typeof data['kind'] === 'string' || data['kind'] instanceof String)) {
            throw new Error("Expected the field `kind` to be a primitive type in the JSON string but got " + data['kind']);
        }
        // validate the optional field `operatingCarrier`
        if (data['operatingCarrier']) { // data not null
          FlightCarrier.validateJSON(data['operatingCarrier']);
        }
        // ensure the json data is a string
        if (data['operatingFlightNumber'] && !(typeof data['operatingFlightNumber'] === 'string' || data['operatingFlightNumber'] instanceof String)) {
            throw new Error("Expected the field `operatingFlightNumber` to be a primitive type in the JSON string but got " + data['operatingFlightNumber']);
        }

        return true;
    }


}



/**
 * @member {module:model/FlightCarrier} carrier
 */
FlightHeader.prototype['carrier'] = undefined;

/**
 * The flight number without IATA carrier code. This field should contain only digits. This is a required property of `flightHeader`. eg: \"123\"
 * @member {String} flightNumber
 */
FlightHeader.prototype['flightNumber'] = undefined;

/**
 * Override value to use for flight number. The default value used for display purposes is carrier + flight_number. If a different value needs to be shown to passengers, use this field to override the default behavior. eg: \"XX1234 / YY576\"
 * @member {String} flightNumberDisplayOverride
 */
FlightHeader.prototype['flightNumberDisplayOverride'] = undefined;

/**
 * Identifies what kind of resource this is. Value: the fixed string `\"walletobjects#flightHeader\"`.
 * @member {String} kind
 */
FlightHeader.prototype['kind'] = undefined;

/**
 * @member {module:model/FlightCarrier} operatingCarrier
 */
FlightHeader.prototype['operatingCarrier'] = undefined;

/**
 * The flight number used by the operating carrier without IATA carrier code. This field should contain only digits. eg: \"234\"
 * @member {String} operatingFlightNumber
 */
FlightHeader.prototype['operatingFlightNumber'] = undefined;






export default FlightHeader;

