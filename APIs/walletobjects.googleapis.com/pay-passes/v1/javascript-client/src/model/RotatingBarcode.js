/**
 * Google Pay Passes API
 * API for issuers to save and manage Google Wallet Objects.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import LocalizedString from './LocalizedString';
import RotatingBarcodeTotpDetails from './RotatingBarcodeTotpDetails';

/**
 * The RotatingBarcode model module.
 * @module model/RotatingBarcode
 * @version v1
 */
class RotatingBarcode {
    /**
     * Constructs a new <code>RotatingBarcode</code>.
     * @alias module:model/RotatingBarcode
     */
    constructor() { 
        
        RotatingBarcode.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>RotatingBarcode</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RotatingBarcode} obj Optional instance to populate.
     * @return {module:model/RotatingBarcode} The populated <code>RotatingBarcode</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RotatingBarcode();

            if (data.hasOwnProperty('alternateText')) {
                obj['alternateText'] = ApiClient.convertToType(data['alternateText'], 'String');
            }
            if (data.hasOwnProperty('renderEncoding')) {
                obj['renderEncoding'] = ApiClient.convertToType(data['renderEncoding'], 'String');
            }
            if (data.hasOwnProperty('showCodeText')) {
                obj['showCodeText'] = LocalizedString.constructFromObject(data['showCodeText']);
            }
            if (data.hasOwnProperty('totpDetails')) {
                obj['totpDetails'] = RotatingBarcodeTotpDetails.constructFromObject(data['totpDetails']);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('valuePattern')) {
                obj['valuePattern'] = ApiClient.convertToType(data['valuePattern'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RotatingBarcode</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RotatingBarcode</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['alternateText'] && !(typeof data['alternateText'] === 'string' || data['alternateText'] instanceof String)) {
            throw new Error("Expected the field `alternateText` to be a primitive type in the JSON string but got " + data['alternateText']);
        }
        // ensure the json data is a string
        if (data['renderEncoding'] && !(typeof data['renderEncoding'] === 'string' || data['renderEncoding'] instanceof String)) {
            throw new Error("Expected the field `renderEncoding` to be a primitive type in the JSON string but got " + data['renderEncoding']);
        }
        // validate the optional field `showCodeText`
        if (data['showCodeText']) { // data not null
          LocalizedString.validateJSON(data['showCodeText']);
        }
        // validate the optional field `totpDetails`
        if (data['totpDetails']) { // data not null
          RotatingBarcodeTotpDetails.validateJSON(data['totpDetails']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['valuePattern'] && !(typeof data['valuePattern'] === 'string' || data['valuePattern'] instanceof String)) {
            throw new Error("Expected the field `valuePattern` to be a primitive type in the JSON string but got " + data['valuePattern']);
        }

        return true;
    }


}



/**
 * An optional text that will override the default text that shows under the barcode. This field is intended for a human readable equivalent of the barcode value, used when the barcode cannot be scanned.
 * @member {String} alternateText
 */
RotatingBarcode.prototype['alternateText'] = undefined;

/**
 * The render encoding for the barcode. When specified, barcode is rendered in the given encoding. Otherwise best known encoding is chosen by Google.
 * @member {module:model/RotatingBarcode.RenderEncodingEnum} renderEncoding
 */
RotatingBarcode.prototype['renderEncoding'] = undefined;

/**
 * @member {module:model/LocalizedString} showCodeText
 */
RotatingBarcode.prototype['showCodeText'] = undefined;

/**
 * @member {module:model/RotatingBarcodeTotpDetails} totpDetails
 */
RotatingBarcode.prototype['totpDetails'] = undefined;

/**
 * The type of this barcode.
 * @member {module:model/RotatingBarcode.TypeEnum} type
 */
RotatingBarcode.prototype['type'] = undefined;

/**
 * String encoded barcode value. This string supports the following substitutions: * {totp_value_n}: Replaced with the TOTP value (see TotpDetails.parameters). * {totp_timestamp_millis}: Replaced with the timestamp (millis since epoch) at which the barcode was generated. * {totp_timestamp_seconds}: Replaced with the timestamp (seconds since epoch) at which the barcode was generated.
 * @member {String} valuePattern
 */
RotatingBarcode.prototype['valuePattern'] = undefined;





/**
 * Allowed values for the <code>renderEncoding</code> property.
 * @enum {String}
 * @readonly
 */
RotatingBarcode['RenderEncodingEnum'] = {

    /**
     * value: "RENDER_ENCODING_UNSPECIFIED"
     * @const
     */
    "RENDER_ENCODING_UNSPECIFIED": "RENDER_ENCODING_UNSPECIFIED",

    /**
     * value: "UTF_8"
     * @const
     */
    "UTF_8": "UTF_8"
};


/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
RotatingBarcode['TypeEnum'] = {

    /**
     * value: "BARCODE_TYPE_UNSPECIFIED"
     * @const
     */
    "BARCODE_TYPE_UNSPECIFIED": "BARCODE_TYPE_UNSPECIFIED",

    /**
     * value: "AZTEC"
     * @const
     */
    "AZTEC": "AZTEC",

    /**
     * value: "aztec"
     * @const
     */
    "aztec": "aztec",

    /**
     * value: "CODE_39"
     * @const
     */
    "CODE_39": "CODE_39",

    /**
     * value: "code39"
     * @const
     */
    "code39": "code39",

    /**
     * value: "CODE_128"
     * @const
     */
    "CODE_128": "CODE_128",

    /**
     * value: "code128"
     * @const
     */
    "code128": "code128",

    /**
     * value: "CODABAR"
     * @const
     */
    "CODABAR": "CODABAR",

    /**
     * value: "codabar"
     * @const
     */
    "codabar": "codabar",

    /**
     * value: "DATA_MATRIX"
     * @const
     */
    "DATA_MATRIX": "DATA_MATRIX",

    /**
     * value: "dataMatrix"
     * @const
     */
    "dataMatrix": "dataMatrix",

    /**
     * value: "EAN_8"
     * @const
     */
    "EAN_8": "EAN_8",

    /**
     * value: "ean8"
     * @const
     */
    "ean8": "ean8",

    /**
     * value: "EAN_13"
     * @const
     */
    "EAN_13": "EAN_13",

    /**
     * value: "ean13"
     * @const
     */
    "ean13": "ean13",

    /**
     * value: "EAN13"
     * @const
     */
    "EAN13": "EAN13",

    /**
     * value: "ITF_14"
     * @const
     */
    "ITF_14": "ITF_14",

    /**
     * value: "itf14"
     * @const
     */
    "itf14": "itf14",

    /**
     * value: "PDF_417"
     * @const
     */
    "PDF_417": "PDF_417",

    /**
     * value: "pdf417"
     * @const
     */
    "pdf417": "pdf417",

    /**
     * value: "PDF417"
     * @const
     */
    "PDF417": "PDF417",

    /**
     * value: "QR_CODE"
     * @const
     */
    "QR_CODE": "QR_CODE",

    /**
     * value: "qrCode"
     * @const
     */
    "qrCode": "qrCode",

    /**
     * value: "qrcode"
     * @const
     */
    "qrcode": "qrcode",

    /**
     * value: "UPC_A"
     * @const
     */
    "UPC_A": "UPC_A",

    /**
     * value: "upcA"
     * @const
     */
    "upcA": "upcA",

    /**
     * value: "TEXT_ONLY"
     * @const
     */
    "TEXT_ONLY": "TEXT_ONLY",

    /**
     * value: "textOnly"
     * @const
     */
    "textOnly": "textOnly"
};



export default RotatingBarcode;

