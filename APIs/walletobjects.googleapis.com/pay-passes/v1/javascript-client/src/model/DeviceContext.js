/**
 * Google Pay Passes API
 * API for issuers to save and manage Google Wallet Objects.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The DeviceContext model module.
 * @module model/DeviceContext
 * @version v1
 */
class DeviceContext {
    /**
     * Constructs a new <code>DeviceContext</code>.
     * Device context associated with the object.
     * @alias module:model/DeviceContext
     */
    constructor() { 
        
        DeviceContext.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DeviceContext</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DeviceContext} obj Optional instance to populate.
     * @return {module:model/DeviceContext} The populated <code>DeviceContext</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DeviceContext();

            if (data.hasOwnProperty('deviceToken')) {
                obj['deviceToken'] = ApiClient.convertToType(data['deviceToken'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DeviceContext</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DeviceContext</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['deviceToken'] && !(typeof data['deviceToken'] === 'string' || data['deviceToken'] instanceof String)) {
            throw new Error("Expected the field `deviceToken` to be a primitive type in the JSON string but got " + data['deviceToken']);
        }

        return true;
    }


}



/**
 * If set, redemption information will only be returned to the given device upon activation of the object. This should not be used as a stable identifier to trace a user's device. It can change across different passes for the same device or even across different activations for the same device. When setting this, callers must also set has_linked_device on the object being activated.
 * @member {String} deviceToken
 */
DeviceContext.prototype['deviceToken'] = undefined;






export default DeviceContext;

