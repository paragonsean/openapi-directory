/*
 * Google Pay Passes API
 * API for issuers to save and manage Google Wallet Objects.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * BoardingAndSeatingPolicy
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:12:07.622305-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BoardingAndSeatingPolicy {
  /**
   * Indicates the policy the airline uses for boarding. If unset, Google will default to &#x60;zoneBased&#x60;.
   */
  @JsonAdapter(BoardingPolicyEnum.Adapter.class)
  public enum BoardingPolicyEnum {
    BOARDING_POLICY_UNSPECIFIED("BOARDING_POLICY_UNSPECIFIED"),
    
    ZONE_BASED("ZONE_BASED"),
    
    ZONE_BASED2("zoneBased"),
    
    GROUP_BASED("GROUP_BASED"),
    
    GROUP_BASED2("groupBased"),
    
    BOARDING_POLICY_OTHER("BOARDING_POLICY_OTHER"),
    
    BOARDING_POLICY_OTHER2("boardingPolicyOther");

    private String value;

    BoardingPolicyEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static BoardingPolicyEnum fromValue(String value) {
      for (BoardingPolicyEnum b : BoardingPolicyEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<BoardingPolicyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final BoardingPolicyEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public BoardingPolicyEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return BoardingPolicyEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      BoardingPolicyEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_BOARDING_POLICY = "boardingPolicy";
  @SerializedName(SERIALIZED_NAME_BOARDING_POLICY)
  private BoardingPolicyEnum boardingPolicy;

  public static final String SERIALIZED_NAME_KIND = "kind";
  @SerializedName(SERIALIZED_NAME_KIND)
  private String kind;

  /**
   * Seating policy which dictates how we display the seat class. If unset, Google will default to &#x60;cabinBased&#x60;.
   */
  @JsonAdapter(SeatClassPolicyEnum.Adapter.class)
  public enum SeatClassPolicyEnum {
    SEAT_CLASS_POLICY_UNSPECIFIED("SEAT_CLASS_POLICY_UNSPECIFIED"),
    
    CABIN_BASED("CABIN_BASED"),
    
    CABIN_BASED2("cabinBased"),
    
    CLASS_BASED("CLASS_BASED"),
    
    CLASS_BASED2("classBased"),
    
    TIER_BASED("TIER_BASED"),
    
    TIER_BASED2("tierBased"),
    
    SEAT_CLASS_POLICY_OTHER("SEAT_CLASS_POLICY_OTHER"),
    
    SEAT_CLASS_POLICY_OTHER2("seatClassPolicyOther");

    private String value;

    SeatClassPolicyEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SeatClassPolicyEnum fromValue(String value) {
      for (SeatClassPolicyEnum b : SeatClassPolicyEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SeatClassPolicyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SeatClassPolicyEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SeatClassPolicyEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SeatClassPolicyEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SeatClassPolicyEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SEAT_CLASS_POLICY = "seatClassPolicy";
  @SerializedName(SERIALIZED_NAME_SEAT_CLASS_POLICY)
  private SeatClassPolicyEnum seatClassPolicy;

  public BoardingAndSeatingPolicy() {
  }

  public BoardingAndSeatingPolicy boardingPolicy(BoardingPolicyEnum boardingPolicy) {
    this.boardingPolicy = boardingPolicy;
    return this;
  }

  /**
   * Indicates the policy the airline uses for boarding. If unset, Google will default to &#x60;zoneBased&#x60;.
   * @return boardingPolicy
   */
  @javax.annotation.Nullable
  public BoardingPolicyEnum getBoardingPolicy() {
    return boardingPolicy;
  }

  public void setBoardingPolicy(BoardingPolicyEnum boardingPolicy) {
    this.boardingPolicy = boardingPolicy;
  }


  public BoardingAndSeatingPolicy kind(String kind) {
    this.kind = kind;
    return this;
  }

  /**
   * Identifies what kind of resource this is. Value: the fixed string &#x60;\&quot;walletobjects#boardingAndSeatingPolicy\&quot;&#x60;.
   * @return kind
   */
  @javax.annotation.Nullable
  public String getKind() {
    return kind;
  }

  public void setKind(String kind) {
    this.kind = kind;
  }


  public BoardingAndSeatingPolicy seatClassPolicy(SeatClassPolicyEnum seatClassPolicy) {
    this.seatClassPolicy = seatClassPolicy;
    return this;
  }

  /**
   * Seating policy which dictates how we display the seat class. If unset, Google will default to &#x60;cabinBased&#x60;.
   * @return seatClassPolicy
   */
  @javax.annotation.Nullable
  public SeatClassPolicyEnum getSeatClassPolicy() {
    return seatClassPolicy;
  }

  public void setSeatClassPolicy(SeatClassPolicyEnum seatClassPolicy) {
    this.seatClassPolicy = seatClassPolicy;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BoardingAndSeatingPolicy boardingAndSeatingPolicy = (BoardingAndSeatingPolicy) o;
    return Objects.equals(this.boardingPolicy, boardingAndSeatingPolicy.boardingPolicy) &&
        Objects.equals(this.kind, boardingAndSeatingPolicy.kind) &&
        Objects.equals(this.seatClassPolicy, boardingAndSeatingPolicy.seatClassPolicy);
  }

  @Override
  public int hashCode() {
    return Objects.hash(boardingPolicy, kind, seatClassPolicy);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BoardingAndSeatingPolicy {\n");
    sb.append("    boardingPolicy: ").append(toIndentedString(boardingPolicy)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    seatClassPolicy: ").append(toIndentedString(seatClassPolicy)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("boardingPolicy");
    openapiFields.add("kind");
    openapiFields.add("seatClassPolicy");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BoardingAndSeatingPolicy
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BoardingAndSeatingPolicy.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BoardingAndSeatingPolicy is not found in the empty JSON string", BoardingAndSeatingPolicy.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BoardingAndSeatingPolicy.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BoardingAndSeatingPolicy` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("boardingPolicy") != null && !jsonObj.get("boardingPolicy").isJsonNull()) && !jsonObj.get("boardingPolicy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `boardingPolicy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("boardingPolicy").toString()));
      }
      // validate the optional field `boardingPolicy`
      if (jsonObj.get("boardingPolicy") != null && !jsonObj.get("boardingPolicy").isJsonNull()) {
        BoardingPolicyEnum.validateJsonElement(jsonObj.get("boardingPolicy"));
      }
      if ((jsonObj.get("kind") != null && !jsonObj.get("kind").isJsonNull()) && !jsonObj.get("kind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kind").toString()));
      }
      if ((jsonObj.get("seatClassPolicy") != null && !jsonObj.get("seatClassPolicy").isJsonNull()) && !jsonObj.get("seatClassPolicy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `seatClassPolicy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("seatClassPolicy").toString()));
      }
      // validate the optional field `seatClassPolicy`
      if (jsonObj.get("seatClassPolicy") != null && !jsonObj.get("seatClassPolicy").isJsonNull()) {
        SeatClassPolicyEnum.validateJsonElement(jsonObj.get("seatClassPolicy"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BoardingAndSeatingPolicy.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BoardingAndSeatingPolicy' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BoardingAndSeatingPolicy> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BoardingAndSeatingPolicy.class));

       return (TypeAdapter<T>) new TypeAdapter<BoardingAndSeatingPolicy>() {
           @Override
           public void write(JsonWriter out, BoardingAndSeatingPolicy value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BoardingAndSeatingPolicy read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BoardingAndSeatingPolicy given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BoardingAndSeatingPolicy
   * @throws IOException if the JSON string is invalid with respect to BoardingAndSeatingPolicy
   */
  public static BoardingAndSeatingPolicy fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BoardingAndSeatingPolicy.class);
  }

  /**
   * Convert an instance of BoardingAndSeatingPolicy to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

