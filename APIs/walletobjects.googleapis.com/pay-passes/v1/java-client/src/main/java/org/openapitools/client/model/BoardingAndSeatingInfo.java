/*
 * Google Pay Passes API
 * API for issuers to save and manage Google Wallet Objects.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Image;
import org.openapitools.client.model.LocalizedString;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * BoardingAndSeatingInfo
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:12:07.622305-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BoardingAndSeatingInfo {
  /**
   * Set this field only if this flight boards through more than one door or bridge and you want to explicitly print the door location on the boarding pass. Most airlines route their passengers to the right door or bridge by refering to doors/bridges by the &#x60;seatClass&#x60;. In those cases &#x60;boardingDoor&#x60; should not be set.
   */
  @JsonAdapter(BoardingDoorEnum.Adapter.class)
  public enum BoardingDoorEnum {
    BOARDING_DOOR_UNSPECIFIED("BOARDING_DOOR_UNSPECIFIED"),
    
    FRONT("FRONT"),
    
    FRONT2("front"),
    
    BACK("BACK"),
    
    BACK2("back");

    private String value;

    BoardingDoorEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static BoardingDoorEnum fromValue(String value) {
      for (BoardingDoorEnum b : BoardingDoorEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<BoardingDoorEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final BoardingDoorEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public BoardingDoorEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return BoardingDoorEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      BoardingDoorEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_BOARDING_DOOR = "boardingDoor";
  @SerializedName(SERIALIZED_NAME_BOARDING_DOOR)
  private BoardingDoorEnum boardingDoor;

  public static final String SERIALIZED_NAME_BOARDING_GROUP = "boardingGroup";
  @SerializedName(SERIALIZED_NAME_BOARDING_GROUP)
  private String boardingGroup;

  public static final String SERIALIZED_NAME_BOARDING_POSITION = "boardingPosition";
  @SerializedName(SERIALIZED_NAME_BOARDING_POSITION)
  private String boardingPosition;

  public static final String SERIALIZED_NAME_BOARDING_PRIVILEGE_IMAGE = "boardingPrivilegeImage";
  @SerializedName(SERIALIZED_NAME_BOARDING_PRIVILEGE_IMAGE)
  private Image boardingPrivilegeImage;

  public static final String SERIALIZED_NAME_KIND = "kind";
  @SerializedName(SERIALIZED_NAME_KIND)
  private String kind;

  public static final String SERIALIZED_NAME_SEAT_ASSIGNMENT = "seatAssignment";
  @SerializedName(SERIALIZED_NAME_SEAT_ASSIGNMENT)
  private LocalizedString seatAssignment;

  public static final String SERIALIZED_NAME_SEAT_CLASS = "seatClass";
  @SerializedName(SERIALIZED_NAME_SEAT_CLASS)
  private String seatClass;

  public static final String SERIALIZED_NAME_SEAT_NUMBER = "seatNumber";
  @SerializedName(SERIALIZED_NAME_SEAT_NUMBER)
  private String seatNumber;

  public static final String SERIALIZED_NAME_SEQUENCE_NUMBER = "sequenceNumber";
  @SerializedName(SERIALIZED_NAME_SEQUENCE_NUMBER)
  private String sequenceNumber;

  public BoardingAndSeatingInfo() {
  }

  public BoardingAndSeatingInfo boardingDoor(BoardingDoorEnum boardingDoor) {
    this.boardingDoor = boardingDoor;
    return this;
  }

  /**
   * Set this field only if this flight boards through more than one door or bridge and you want to explicitly print the door location on the boarding pass. Most airlines route their passengers to the right door or bridge by refering to doors/bridges by the &#x60;seatClass&#x60;. In those cases &#x60;boardingDoor&#x60; should not be set.
   * @return boardingDoor
   */
  @javax.annotation.Nullable
  public BoardingDoorEnum getBoardingDoor() {
    return boardingDoor;
  }

  public void setBoardingDoor(BoardingDoorEnum boardingDoor) {
    this.boardingDoor = boardingDoor;
  }


  public BoardingAndSeatingInfo boardingGroup(String boardingGroup) {
    this.boardingGroup = boardingGroup;
    return this;
  }

  /**
   * The value of boarding group (or zone) this passenger shall board with. eg: \&quot;B\&quot; The label for this value will be determined by the &#x60;boardingPolicy&#x60; field in the &#x60;flightClass&#x60; referenced by this object.
   * @return boardingGroup
   */
  @javax.annotation.Nullable
  public String getBoardingGroup() {
    return boardingGroup;
  }

  public void setBoardingGroup(String boardingGroup) {
    this.boardingGroup = boardingGroup;
  }


  public BoardingAndSeatingInfo boardingPosition(String boardingPosition) {
    this.boardingPosition = boardingPosition;
    return this;
  }

  /**
   * The value of boarding position. eg: \&quot;76\&quot;
   * @return boardingPosition
   */
  @javax.annotation.Nullable
  public String getBoardingPosition() {
    return boardingPosition;
  }

  public void setBoardingPosition(String boardingPosition) {
    this.boardingPosition = boardingPosition;
  }


  public BoardingAndSeatingInfo boardingPrivilegeImage(Image boardingPrivilegeImage) {
    this.boardingPrivilegeImage = boardingPrivilegeImage;
    return this;
  }

  /**
   * Get boardingPrivilegeImage
   * @return boardingPrivilegeImage
   */
  @javax.annotation.Nullable
  public Image getBoardingPrivilegeImage() {
    return boardingPrivilegeImage;
  }

  public void setBoardingPrivilegeImage(Image boardingPrivilegeImage) {
    this.boardingPrivilegeImage = boardingPrivilegeImage;
  }


  public BoardingAndSeatingInfo kind(String kind) {
    this.kind = kind;
    return this;
  }

  /**
   * Identifies what kind of resource this is. Value: the fixed string &#x60;\&quot;walletobjects#boardingAndSeatingInfo\&quot;&#x60;.
   * @return kind
   */
  @javax.annotation.Nullable
  public String getKind() {
    return kind;
  }

  public void setKind(String kind) {
    this.kind = kind;
  }


  public BoardingAndSeatingInfo seatAssignment(LocalizedString seatAssignment) {
    this.seatAssignment = seatAssignment;
    return this;
  }

  /**
   * Get seatAssignment
   * @return seatAssignment
   */
  @javax.annotation.Nullable
  public LocalizedString getSeatAssignment() {
    return seatAssignment;
  }

  public void setSeatAssignment(LocalizedString seatAssignment) {
    this.seatAssignment = seatAssignment;
  }


  public BoardingAndSeatingInfo seatClass(String seatClass) {
    this.seatClass = seatClass;
    return this;
  }

  /**
   * The value of the seat class. eg: \&quot;Economy\&quot; or \&quot;Economy Plus\&quot;
   * @return seatClass
   */
  @javax.annotation.Nullable
  public String getSeatClass() {
    return seatClass;
  }

  public void setSeatClass(String seatClass) {
    this.seatClass = seatClass;
  }


  public BoardingAndSeatingInfo seatNumber(String seatNumber) {
    this.seatNumber = seatNumber;
    return this;
  }

  /**
   * The value of passenger seat. If there is no specific identifier, use &#x60;seatAssignment&#x60; instead. eg: \&quot;25A\&quot;
   * @return seatNumber
   */
  @javax.annotation.Nullable
  public String getSeatNumber() {
    return seatNumber;
  }

  public void setSeatNumber(String seatNumber) {
    this.seatNumber = seatNumber;
  }


  public BoardingAndSeatingInfo sequenceNumber(String sequenceNumber) {
    this.sequenceNumber = sequenceNumber;
    return this;
  }

  /**
   * The sequence number on the boarding pass. This usually matches the sequence in which the passengers checked in. Airline might use the number for manual boarding and bag tags. eg: \&quot;49\&quot;
   * @return sequenceNumber
   */
  @javax.annotation.Nullable
  public String getSequenceNumber() {
    return sequenceNumber;
  }

  public void setSequenceNumber(String sequenceNumber) {
    this.sequenceNumber = sequenceNumber;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BoardingAndSeatingInfo boardingAndSeatingInfo = (BoardingAndSeatingInfo) o;
    return Objects.equals(this.boardingDoor, boardingAndSeatingInfo.boardingDoor) &&
        Objects.equals(this.boardingGroup, boardingAndSeatingInfo.boardingGroup) &&
        Objects.equals(this.boardingPosition, boardingAndSeatingInfo.boardingPosition) &&
        Objects.equals(this.boardingPrivilegeImage, boardingAndSeatingInfo.boardingPrivilegeImage) &&
        Objects.equals(this.kind, boardingAndSeatingInfo.kind) &&
        Objects.equals(this.seatAssignment, boardingAndSeatingInfo.seatAssignment) &&
        Objects.equals(this.seatClass, boardingAndSeatingInfo.seatClass) &&
        Objects.equals(this.seatNumber, boardingAndSeatingInfo.seatNumber) &&
        Objects.equals(this.sequenceNumber, boardingAndSeatingInfo.sequenceNumber);
  }

  @Override
  public int hashCode() {
    return Objects.hash(boardingDoor, boardingGroup, boardingPosition, boardingPrivilegeImage, kind, seatAssignment, seatClass, seatNumber, sequenceNumber);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BoardingAndSeatingInfo {\n");
    sb.append("    boardingDoor: ").append(toIndentedString(boardingDoor)).append("\n");
    sb.append("    boardingGroup: ").append(toIndentedString(boardingGroup)).append("\n");
    sb.append("    boardingPosition: ").append(toIndentedString(boardingPosition)).append("\n");
    sb.append("    boardingPrivilegeImage: ").append(toIndentedString(boardingPrivilegeImage)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    seatAssignment: ").append(toIndentedString(seatAssignment)).append("\n");
    sb.append("    seatClass: ").append(toIndentedString(seatClass)).append("\n");
    sb.append("    seatNumber: ").append(toIndentedString(seatNumber)).append("\n");
    sb.append("    sequenceNumber: ").append(toIndentedString(sequenceNumber)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("boardingDoor");
    openapiFields.add("boardingGroup");
    openapiFields.add("boardingPosition");
    openapiFields.add("boardingPrivilegeImage");
    openapiFields.add("kind");
    openapiFields.add("seatAssignment");
    openapiFields.add("seatClass");
    openapiFields.add("seatNumber");
    openapiFields.add("sequenceNumber");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BoardingAndSeatingInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BoardingAndSeatingInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BoardingAndSeatingInfo is not found in the empty JSON string", BoardingAndSeatingInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BoardingAndSeatingInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BoardingAndSeatingInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("boardingDoor") != null && !jsonObj.get("boardingDoor").isJsonNull()) && !jsonObj.get("boardingDoor").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `boardingDoor` to be a primitive type in the JSON string but got `%s`", jsonObj.get("boardingDoor").toString()));
      }
      // validate the optional field `boardingDoor`
      if (jsonObj.get("boardingDoor") != null && !jsonObj.get("boardingDoor").isJsonNull()) {
        BoardingDoorEnum.validateJsonElement(jsonObj.get("boardingDoor"));
      }
      if ((jsonObj.get("boardingGroup") != null && !jsonObj.get("boardingGroup").isJsonNull()) && !jsonObj.get("boardingGroup").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `boardingGroup` to be a primitive type in the JSON string but got `%s`", jsonObj.get("boardingGroup").toString()));
      }
      if ((jsonObj.get("boardingPosition") != null && !jsonObj.get("boardingPosition").isJsonNull()) && !jsonObj.get("boardingPosition").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `boardingPosition` to be a primitive type in the JSON string but got `%s`", jsonObj.get("boardingPosition").toString()));
      }
      // validate the optional field `boardingPrivilegeImage`
      if (jsonObj.get("boardingPrivilegeImage") != null && !jsonObj.get("boardingPrivilegeImage").isJsonNull()) {
        Image.validateJsonElement(jsonObj.get("boardingPrivilegeImage"));
      }
      if ((jsonObj.get("kind") != null && !jsonObj.get("kind").isJsonNull()) && !jsonObj.get("kind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kind").toString()));
      }
      // validate the optional field `seatAssignment`
      if (jsonObj.get("seatAssignment") != null && !jsonObj.get("seatAssignment").isJsonNull()) {
        LocalizedString.validateJsonElement(jsonObj.get("seatAssignment"));
      }
      if ((jsonObj.get("seatClass") != null && !jsonObj.get("seatClass").isJsonNull()) && !jsonObj.get("seatClass").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `seatClass` to be a primitive type in the JSON string but got `%s`", jsonObj.get("seatClass").toString()));
      }
      if ((jsonObj.get("seatNumber") != null && !jsonObj.get("seatNumber").isJsonNull()) && !jsonObj.get("seatNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `seatNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("seatNumber").toString()));
      }
      if ((jsonObj.get("sequenceNumber") != null && !jsonObj.get("sequenceNumber").isJsonNull()) && !jsonObj.get("sequenceNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sequenceNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sequenceNumber").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BoardingAndSeatingInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BoardingAndSeatingInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BoardingAndSeatingInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BoardingAndSeatingInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<BoardingAndSeatingInfo>() {
           @Override
           public void write(JsonWriter out, BoardingAndSeatingInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BoardingAndSeatingInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BoardingAndSeatingInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BoardingAndSeatingInfo
   * @throws IOException if the JSON string is invalid with respect to BoardingAndSeatingInfo
   */
  public static BoardingAndSeatingInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BoardingAndSeatingInfo.class);
  }

  /**
   * Convert an instance of BoardingAndSeatingInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

