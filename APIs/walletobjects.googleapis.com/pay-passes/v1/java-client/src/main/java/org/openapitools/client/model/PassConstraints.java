/*
 * Google Pay Passes API
 * API for issuers to save and manage Google Wallet Objects.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Container for any constraints that may be placed on passes.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:12:07.622305-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PassConstraints {
  /**
   * Gets or Sets nfcConstraint
   */
  @JsonAdapter(NfcConstraintEnum.Adapter.class)
  public enum NfcConstraintEnum {
    NFC_CONSTRAINT_UNSPECIFIED("NFC_CONSTRAINT_UNSPECIFIED"),
    
    BLOCK_PAYMENT("BLOCK_PAYMENT"),
    
    BLOCK_CLOSED_LOOP_TRANSIT("BLOCK_CLOSED_LOOP_TRANSIT");

    private String value;

    NfcConstraintEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static NfcConstraintEnum fromValue(String value) {
      for (NfcConstraintEnum b : NfcConstraintEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<NfcConstraintEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final NfcConstraintEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public NfcConstraintEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return NfcConstraintEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      NfcConstraintEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_NFC_CONSTRAINT = "nfcConstraint";
  @SerializedName(SERIALIZED_NAME_NFC_CONSTRAINT)
  private List<NfcConstraintEnum> nfcConstraint = new ArrayList<>();

  /**
   * The screenshot eligibility for the pass.
   */
  @JsonAdapter(ScreenshotEligibilityEnum.Adapter.class)
  public enum ScreenshotEligibilityEnum {
    SCREENSHOT_ELIGIBILITY_UNSPECIFIED("SCREENSHOT_ELIGIBILITY_UNSPECIFIED"),
    
    ELIGIBLE("ELIGIBLE"),
    
    INELIGIBLE("INELIGIBLE");

    private String value;

    ScreenshotEligibilityEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ScreenshotEligibilityEnum fromValue(String value) {
      for (ScreenshotEligibilityEnum b : ScreenshotEligibilityEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ScreenshotEligibilityEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ScreenshotEligibilityEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ScreenshotEligibilityEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ScreenshotEligibilityEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ScreenshotEligibilityEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SCREENSHOT_ELIGIBILITY = "screenshotEligibility";
  @SerializedName(SERIALIZED_NAME_SCREENSHOT_ELIGIBILITY)
  private ScreenshotEligibilityEnum screenshotEligibility;

  public PassConstraints() {
  }

  public PassConstraints nfcConstraint(List<NfcConstraintEnum> nfcConstraint) {
    this.nfcConstraint = nfcConstraint;
    return this;
  }

  public PassConstraints addNfcConstraintItem(NfcConstraintEnum nfcConstraintItem) {
    if (this.nfcConstraint == null) {
      this.nfcConstraint = new ArrayList<>();
    }
    this.nfcConstraint.add(nfcConstraintItem);
    return this;
  }

  /**
   * The NFC constraints for the pass.
   * @return nfcConstraint
   */
  @javax.annotation.Nullable
  public List<NfcConstraintEnum> getNfcConstraint() {
    return nfcConstraint;
  }

  public void setNfcConstraint(List<NfcConstraintEnum> nfcConstraint) {
    this.nfcConstraint = nfcConstraint;
  }


  public PassConstraints screenshotEligibility(ScreenshotEligibilityEnum screenshotEligibility) {
    this.screenshotEligibility = screenshotEligibility;
    return this;
  }

  /**
   * The screenshot eligibility for the pass.
   * @return screenshotEligibility
   */
  @javax.annotation.Nullable
  public ScreenshotEligibilityEnum getScreenshotEligibility() {
    return screenshotEligibility;
  }

  public void setScreenshotEligibility(ScreenshotEligibilityEnum screenshotEligibility) {
    this.screenshotEligibility = screenshotEligibility;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PassConstraints passConstraints = (PassConstraints) o;
    return Objects.equals(this.nfcConstraint, passConstraints.nfcConstraint) &&
        Objects.equals(this.screenshotEligibility, passConstraints.screenshotEligibility);
  }

  @Override
  public int hashCode() {
    return Objects.hash(nfcConstraint, screenshotEligibility);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PassConstraints {\n");
    sb.append("    nfcConstraint: ").append(toIndentedString(nfcConstraint)).append("\n");
    sb.append("    screenshotEligibility: ").append(toIndentedString(screenshotEligibility)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("nfcConstraint");
    openapiFields.add("screenshotEligibility");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PassConstraints
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PassConstraints.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PassConstraints is not found in the empty JSON string", PassConstraints.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PassConstraints.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PassConstraints` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("nfcConstraint") != null && !jsonObj.get("nfcConstraint").isJsonNull() && !jsonObj.get("nfcConstraint").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `nfcConstraint` to be an array in the JSON string but got `%s`", jsonObj.get("nfcConstraint").toString()));
      }
      if ((jsonObj.get("screenshotEligibility") != null && !jsonObj.get("screenshotEligibility").isJsonNull()) && !jsonObj.get("screenshotEligibility").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `screenshotEligibility` to be a primitive type in the JSON string but got `%s`", jsonObj.get("screenshotEligibility").toString()));
      }
      // validate the optional field `screenshotEligibility`
      if (jsonObj.get("screenshotEligibility") != null && !jsonObj.get("screenshotEligibility").isJsonNull()) {
        ScreenshotEligibilityEnum.validateJsonElement(jsonObj.get("screenshotEligibility"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PassConstraints.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PassConstraints' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PassConstraints> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PassConstraints.class));

       return (TypeAdapter<T>) new TypeAdapter<PassConstraints>() {
           @Override
           public void write(JsonWriter out, PassConstraints value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PassConstraints read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PassConstraints given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PassConstraints
   * @throws IOException if the JSON string is invalid with respect to PassConstraints
   */
  public static PassConstraints fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PassConstraints.class);
  }

  /**
   * Convert an instance of PassConstraints to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

