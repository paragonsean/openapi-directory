/*
 * Google Pay Passes API
 * API for issuers to save and manage Google Wallet Objects.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.FieldSelector;
import org.openapitools.client.model.FirstRowOption;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ListTemplateOverride
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:12:07.622305-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ListTemplateOverride {
  public static final String SERIALIZED_NAME_FIRST_ROW_OPTION = "firstRowOption";
  @SerializedName(SERIALIZED_NAME_FIRST_ROW_OPTION)
  private FirstRowOption firstRowOption;

  public static final String SERIALIZED_NAME_SECOND_ROW_OPTION = "secondRowOption";
  @SerializedName(SERIALIZED_NAME_SECOND_ROW_OPTION)
  private FieldSelector secondRowOption;

  public static final String SERIALIZED_NAME_THIRD_ROW_OPTION = "thirdRowOption";
  @SerializedName(SERIALIZED_NAME_THIRD_ROW_OPTION)
  private FieldSelector thirdRowOption;

  public ListTemplateOverride() {
  }

  public ListTemplateOverride firstRowOption(FirstRowOption firstRowOption) {
    this.firstRowOption = firstRowOption;
    return this;
  }

  /**
   * Get firstRowOption
   * @return firstRowOption
   */
  @javax.annotation.Nullable
  public FirstRowOption getFirstRowOption() {
    return firstRowOption;
  }

  public void setFirstRowOption(FirstRowOption firstRowOption) {
    this.firstRowOption = firstRowOption;
  }


  public ListTemplateOverride secondRowOption(FieldSelector secondRowOption) {
    this.secondRowOption = secondRowOption;
    return this;
  }

  /**
   * Get secondRowOption
   * @return secondRowOption
   */
  @javax.annotation.Nullable
  public FieldSelector getSecondRowOption() {
    return secondRowOption;
  }

  public void setSecondRowOption(FieldSelector secondRowOption) {
    this.secondRowOption = secondRowOption;
  }


  public ListTemplateOverride thirdRowOption(FieldSelector thirdRowOption) {
    this.thirdRowOption = thirdRowOption;
    return this;
  }

  /**
   * Get thirdRowOption
   * @return thirdRowOption
   */
  @javax.annotation.Nullable
  public FieldSelector getThirdRowOption() {
    return thirdRowOption;
  }

  public void setThirdRowOption(FieldSelector thirdRowOption) {
    this.thirdRowOption = thirdRowOption;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ListTemplateOverride listTemplateOverride = (ListTemplateOverride) o;
    return Objects.equals(this.firstRowOption, listTemplateOverride.firstRowOption) &&
        Objects.equals(this.secondRowOption, listTemplateOverride.secondRowOption) &&
        Objects.equals(this.thirdRowOption, listTemplateOverride.thirdRowOption);
  }

  @Override
  public int hashCode() {
    return Objects.hash(firstRowOption, secondRowOption, thirdRowOption);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ListTemplateOverride {\n");
    sb.append("    firstRowOption: ").append(toIndentedString(firstRowOption)).append("\n");
    sb.append("    secondRowOption: ").append(toIndentedString(secondRowOption)).append("\n");
    sb.append("    thirdRowOption: ").append(toIndentedString(thirdRowOption)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("firstRowOption");
    openapiFields.add("secondRowOption");
    openapiFields.add("thirdRowOption");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ListTemplateOverride
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ListTemplateOverride.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ListTemplateOverride is not found in the empty JSON string", ListTemplateOverride.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ListTemplateOverride.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ListTemplateOverride` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `firstRowOption`
      if (jsonObj.get("firstRowOption") != null && !jsonObj.get("firstRowOption").isJsonNull()) {
        FirstRowOption.validateJsonElement(jsonObj.get("firstRowOption"));
      }
      // validate the optional field `secondRowOption`
      if (jsonObj.get("secondRowOption") != null && !jsonObj.get("secondRowOption").isJsonNull()) {
        FieldSelector.validateJsonElement(jsonObj.get("secondRowOption"));
      }
      // validate the optional field `thirdRowOption`
      if (jsonObj.get("thirdRowOption") != null && !jsonObj.get("thirdRowOption").isJsonNull()) {
        FieldSelector.validateJsonElement(jsonObj.get("thirdRowOption"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ListTemplateOverride.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ListTemplateOverride' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ListTemplateOverride> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ListTemplateOverride.class));

       return (TypeAdapter<T>) new TypeAdapter<ListTemplateOverride>() {
           @Override
           public void write(JsonWriter out, ListTemplateOverride value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ListTemplateOverride read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ListTemplateOverride given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ListTemplateOverride
   * @throws IOException if the JSON string is invalid with respect to ListTemplateOverride
   */
  public static ListTemplateOverride fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ListTemplateOverride.class);
  }

  /**
   * Convert an instance of ListTemplateOverride to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

