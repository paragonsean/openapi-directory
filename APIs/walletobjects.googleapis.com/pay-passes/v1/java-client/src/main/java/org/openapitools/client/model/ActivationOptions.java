/*
 * Google Pay Passes API
 * API for issuers to save and manage Google Wallet Objects.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ActivationOptions for the class
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:12:07.622305-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ActivationOptions {
  public static final String SERIALIZED_NAME_ACTIVATION_URL = "activationUrl";
  @SerializedName(SERIALIZED_NAME_ACTIVATION_URL)
  private String activationUrl;

  public static final String SERIALIZED_NAME_ALLOW_REACTIVATION = "allowReactivation";
  @SerializedName(SERIALIZED_NAME_ALLOW_REACTIVATION)
  private Boolean allowReactivation;

  public ActivationOptions() {
  }

  public ActivationOptions activationUrl(String activationUrl) {
    this.activationUrl = activationUrl;
    return this;
  }

  /**
   * HTTPS URL that supports REST semantics. Would be used for requesting activation from partners for given valuable, triggered by the users.
   * @return activationUrl
   */
  @javax.annotation.Nullable
  public String getActivationUrl() {
    return activationUrl;
  }

  public void setActivationUrl(String activationUrl) {
    this.activationUrl = activationUrl;
  }


  public ActivationOptions allowReactivation(Boolean allowReactivation) {
    this.allowReactivation = allowReactivation;
    return this;
  }

  /**
   * Flag to allow users to make activation call from different device. This allows client to render the activation button enabled even if the activationStatus is ACTIVATED but the requested device is different than the current device.
   * @return allowReactivation
   */
  @javax.annotation.Nullable
  public Boolean getAllowReactivation() {
    return allowReactivation;
  }

  public void setAllowReactivation(Boolean allowReactivation) {
    this.allowReactivation = allowReactivation;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ActivationOptions activationOptions = (ActivationOptions) o;
    return Objects.equals(this.activationUrl, activationOptions.activationUrl) &&
        Objects.equals(this.allowReactivation, activationOptions.allowReactivation);
  }

  @Override
  public int hashCode() {
    return Objects.hash(activationUrl, allowReactivation);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ActivationOptions {\n");
    sb.append("    activationUrl: ").append(toIndentedString(activationUrl)).append("\n");
    sb.append("    allowReactivation: ").append(toIndentedString(allowReactivation)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("activationUrl");
    openapiFields.add("allowReactivation");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ActivationOptions
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ActivationOptions.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ActivationOptions is not found in the empty JSON string", ActivationOptions.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ActivationOptions.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ActivationOptions` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("activationUrl") != null && !jsonObj.get("activationUrl").isJsonNull()) && !jsonObj.get("activationUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `activationUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("activationUrl").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ActivationOptions.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ActivationOptions' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ActivationOptions> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ActivationOptions.class));

       return (TypeAdapter<T>) new TypeAdapter<ActivationOptions>() {
           @Override
           public void write(JsonWriter out, ActivationOptions value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ActivationOptions read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ActivationOptions given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ActivationOptions
   * @throws IOException if the JSON string is invalid with respect to ActivationOptions
   */
  public static ActivationOptions fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ActivationOptions.class);
  }

  /**
   * Convert an instance of ActivationOptions to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

