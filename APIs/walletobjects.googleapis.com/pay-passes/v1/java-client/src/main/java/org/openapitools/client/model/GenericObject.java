/*
 * Google Pay Passes API
 * API for issuers to save and manage Google Wallet Objects.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AppLinkData;
import org.openapitools.client.model.Barcode;
import org.openapitools.client.model.GroupingInfo;
import org.openapitools.client.model.Image;
import org.openapitools.client.model.ImageModuleData;
import org.openapitools.client.model.LinksModuleData;
import org.openapitools.client.model.LocalizedString;
import org.openapitools.client.model.Notifications;
import org.openapitools.client.model.PassConstraints;
import org.openapitools.client.model.RotatingBarcode;
import org.openapitools.client.model.TextModuleData;
import org.openapitools.client.model.TimeInterval;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Generic Object Next ID: 121
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:12:07.622305-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GenericObject {
  public static final String SERIALIZED_NAME_APP_LINK_DATA = "appLinkData";
  @SerializedName(SERIALIZED_NAME_APP_LINK_DATA)
  private AppLinkData appLinkData;

  public static final String SERIALIZED_NAME_BARCODE = "barcode";
  @SerializedName(SERIALIZED_NAME_BARCODE)
  private Barcode barcode;

  public static final String SERIALIZED_NAME_CARD_TITLE = "cardTitle";
  @SerializedName(SERIALIZED_NAME_CARD_TITLE)
  private LocalizedString cardTitle;

  public static final String SERIALIZED_NAME_CLASS_ID = "classId";
  @SerializedName(SERIALIZED_NAME_CLASS_ID)
  private String classId;

  /**
   * Specify which &#x60;GenericType&#x60; the card belongs to.
   */
  @JsonAdapter(GenericTypeEnum.Adapter.class)
  public enum GenericTypeEnum {
    TYPE_UNSPECIFIED("GENERIC_TYPE_UNSPECIFIED"),
    
    SEASON_PASS("GENERIC_SEASON_PASS"),
    
    UTILITY_BILLS("GENERIC_UTILITY_BILLS"),
    
    PARKING_PASS("GENERIC_PARKING_PASS"),
    
    VOUCHER("GENERIC_VOUCHER"),
    
    GYM_MEMBERSHIP("GENERIC_GYM_MEMBERSHIP"),
    
    LIBRARY_MEMBERSHIP("GENERIC_LIBRARY_MEMBERSHIP"),
    
    RESERVATIONS("GENERIC_RESERVATIONS"),
    
    AUTO_INSURANCE("GENERIC_AUTO_INSURANCE"),
    
    HOME_INSURANCE("GENERIC_HOME_INSURANCE"),
    
    ENTRY_TICKET("GENERIC_ENTRY_TICKET"),
    
    RECEIPT("GENERIC_RECEIPT"),
    
    OTHER("GENERIC_OTHER");

    private String value;

    GenericTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static GenericTypeEnum fromValue(String value) {
      for (GenericTypeEnum b : GenericTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<GenericTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final GenericTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public GenericTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return GenericTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      GenericTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_GENERIC_TYPE = "genericType";
  @SerializedName(SERIALIZED_NAME_GENERIC_TYPE)
  private GenericTypeEnum genericType;

  public static final String SERIALIZED_NAME_GROUPING_INFO = "groupingInfo";
  @SerializedName(SERIALIZED_NAME_GROUPING_INFO)
  private GroupingInfo groupingInfo;

  public static final String SERIALIZED_NAME_HAS_USERS = "hasUsers";
  @SerializedName(SERIALIZED_NAME_HAS_USERS)
  private Boolean hasUsers;

  public static final String SERIALIZED_NAME_HEADER = "header";
  @SerializedName(SERIALIZED_NAME_HEADER)
  private LocalizedString header;

  public static final String SERIALIZED_NAME_HERO_IMAGE = "heroImage";
  @SerializedName(SERIALIZED_NAME_HERO_IMAGE)
  private Image heroImage;

  public static final String SERIALIZED_NAME_HEX_BACKGROUND_COLOR = "hexBackgroundColor";
  @SerializedName(SERIALIZED_NAME_HEX_BACKGROUND_COLOR)
  private String hexBackgroundColor;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_IMAGE_MODULES_DATA = "imageModulesData";
  @SerializedName(SERIALIZED_NAME_IMAGE_MODULES_DATA)
  private List<ImageModuleData> imageModulesData = new ArrayList<>();

  public static final String SERIALIZED_NAME_LINKS_MODULE_DATA = "linksModuleData";
  @SerializedName(SERIALIZED_NAME_LINKS_MODULE_DATA)
  private LinksModuleData linksModuleData;

  public static final String SERIALIZED_NAME_LOGO = "logo";
  @SerializedName(SERIALIZED_NAME_LOGO)
  private Image logo;

  public static final String SERIALIZED_NAME_NOTIFICATIONS = "notifications";
  @SerializedName(SERIALIZED_NAME_NOTIFICATIONS)
  private Notifications notifications;

  public static final String SERIALIZED_NAME_PASS_CONSTRAINTS = "passConstraints";
  @SerializedName(SERIALIZED_NAME_PASS_CONSTRAINTS)
  private PassConstraints passConstraints;

  public static final String SERIALIZED_NAME_ROTATING_BARCODE = "rotatingBarcode";
  @SerializedName(SERIALIZED_NAME_ROTATING_BARCODE)
  private RotatingBarcode rotatingBarcode;

  public static final String SERIALIZED_NAME_SMART_TAP_REDEMPTION_VALUE = "smartTapRedemptionValue";
  @SerializedName(SERIALIZED_NAME_SMART_TAP_REDEMPTION_VALUE)
  private String smartTapRedemptionValue;

  /**
   * The state of the object. This field is used to determine how an object is displayed in the app. For example, an &#x60;inactive&#x60; object is moved to the \&quot;Expired passes\&quot; section. If this is not provided, the object would be considered &#x60;ACTIVE&#x60;.
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    STATE_UNSPECIFIED("STATE_UNSPECIFIED"),
    
    ACTIVE("ACTIVE"),
    
    ACTIVE2("active"),
    
    COMPLETED("COMPLETED"),
    
    COMPLETED2("completed"),
    
    EXPIRED("EXPIRED"),
    
    EXPIRED2("expired"),
    
    INACTIVE("INACTIVE"),
    
    INACTIVE2("inactive");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  public static final String SERIALIZED_NAME_SUBHEADER = "subheader";
  @SerializedName(SERIALIZED_NAME_SUBHEADER)
  private LocalizedString subheader;

  public static final String SERIALIZED_NAME_TEXT_MODULES_DATA = "textModulesData";
  @SerializedName(SERIALIZED_NAME_TEXT_MODULES_DATA)
  private List<TextModuleData> textModulesData = new ArrayList<>();

  public static final String SERIALIZED_NAME_VALID_TIME_INTERVAL = "validTimeInterval";
  @SerializedName(SERIALIZED_NAME_VALID_TIME_INTERVAL)
  private TimeInterval validTimeInterval;

  public GenericObject() {
  }

  public GenericObject appLinkData(AppLinkData appLinkData) {
    this.appLinkData = appLinkData;
    return this;
  }

  /**
   * Get appLinkData
   * @return appLinkData
   */
  @javax.annotation.Nullable
  public AppLinkData getAppLinkData() {
    return appLinkData;
  }

  public void setAppLinkData(AppLinkData appLinkData) {
    this.appLinkData = appLinkData;
  }


  public GenericObject barcode(Barcode barcode) {
    this.barcode = barcode;
    return this;
  }

  /**
   * Get barcode
   * @return barcode
   */
  @javax.annotation.Nullable
  public Barcode getBarcode() {
    return barcode;
  }

  public void setBarcode(Barcode barcode) {
    this.barcode = barcode;
  }


  public GenericObject cardTitle(LocalizedString cardTitle) {
    this.cardTitle = cardTitle;
    return this;
  }

  /**
   * Get cardTitle
   * @return cardTitle
   */
  @javax.annotation.Nullable
  public LocalizedString getCardTitle() {
    return cardTitle;
  }

  public void setCardTitle(LocalizedString cardTitle) {
    this.cardTitle = cardTitle;
  }


  public GenericObject classId(String classId) {
    this.classId = classId;
    return this;
  }

  /**
   * Required. The class associated with this object. The class must be of the same type as this object, must already exist, and must be approved. Class IDs should follow the format &#x60;issuerID.identifier&#x60; where &#x60;issuerID&#x60; is issued by Google and &#x60;identifier&#x60; is chosen by you.
   * @return classId
   */
  @javax.annotation.Nullable
  public String getClassId() {
    return classId;
  }

  public void setClassId(String classId) {
    this.classId = classId;
  }


  public GenericObject genericType(GenericTypeEnum genericType) {
    this.genericType = genericType;
    return this;
  }

  /**
   * Specify which &#x60;GenericType&#x60; the card belongs to.
   * @return genericType
   */
  @javax.annotation.Nullable
  public GenericTypeEnum getGenericType() {
    return genericType;
  }

  public void setGenericType(GenericTypeEnum genericType) {
    this.genericType = genericType;
  }


  public GenericObject groupingInfo(GroupingInfo groupingInfo) {
    this.groupingInfo = groupingInfo;
    return this;
  }

  /**
   * Get groupingInfo
   * @return groupingInfo
   */
  @javax.annotation.Nullable
  public GroupingInfo getGroupingInfo() {
    return groupingInfo;
  }

  public void setGroupingInfo(GroupingInfo groupingInfo) {
    this.groupingInfo = groupingInfo;
  }


  public GenericObject hasUsers(Boolean hasUsers) {
    this.hasUsers = hasUsers;
    return this;
  }

  /**
   * Indicates if the object has users. This field is set by the platform.
   * @return hasUsers
   */
  @javax.annotation.Nullable
  public Boolean getHasUsers() {
    return hasUsers;
  }

  public void setHasUsers(Boolean hasUsers) {
    this.hasUsers = hasUsers;
  }


  public GenericObject header(LocalizedString header) {
    this.header = header;
    return this;
  }

  /**
   * Get header
   * @return header
   */
  @javax.annotation.Nullable
  public LocalizedString getHeader() {
    return header;
  }

  public void setHeader(LocalizedString header) {
    this.header = header;
  }


  public GenericObject heroImage(Image heroImage) {
    this.heroImage = heroImage;
    return this;
  }

  /**
   * Get heroImage
   * @return heroImage
   */
  @javax.annotation.Nullable
  public Image getHeroImage() {
    return heroImage;
  }

  public void setHeroImage(Image heroImage) {
    this.heroImage = heroImage;
  }


  public GenericObject hexBackgroundColor(String hexBackgroundColor) {
    this.hexBackgroundColor = hexBackgroundColor;
    return this;
  }

  /**
   * The background color for the card. If not set, the dominant color of the hero image is used, and if no hero image is set, the dominant color of the logo is used and if logo is not set, a color would be chosen by Google.
   * @return hexBackgroundColor
   */
  @javax.annotation.Nullable
  public String getHexBackgroundColor() {
    return hexBackgroundColor;
  }

  public void setHexBackgroundColor(String hexBackgroundColor) {
    this.hexBackgroundColor = hexBackgroundColor;
  }


  public GenericObject id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Required. The unique identifier for an object. This ID must be unique across all objects from an issuer. This value needs to follow the format &#x60;issuerID.identifier&#x60; where &#x60;issuerID&#x60; is issued by Google and &#x60;identifier&#x60; is chosen by you. The unique identifier can only include alphanumeric characters, &#x60;.&#x60;, &#x60;_&#x60;, or &#x60;-&#x60;.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public GenericObject imageModulesData(List<ImageModuleData> imageModulesData) {
    this.imageModulesData = imageModulesData;
    return this;
  }

  public GenericObject addImageModulesDataItem(ImageModuleData imageModulesDataItem) {
    if (this.imageModulesData == null) {
      this.imageModulesData = new ArrayList<>();
    }
    this.imageModulesData.add(imageModulesDataItem);
    return this;
  }

  /**
   * Image module data. Only one of the image from class and one from object level will be rendered when both set.
   * @return imageModulesData
   */
  @javax.annotation.Nullable
  public List<ImageModuleData> getImageModulesData() {
    return imageModulesData;
  }

  public void setImageModulesData(List<ImageModuleData> imageModulesData) {
    this.imageModulesData = imageModulesData;
  }


  public GenericObject linksModuleData(LinksModuleData linksModuleData) {
    this.linksModuleData = linksModuleData;
    return this;
  }

  /**
   * Get linksModuleData
   * @return linksModuleData
   */
  @javax.annotation.Nullable
  public LinksModuleData getLinksModuleData() {
    return linksModuleData;
  }

  public void setLinksModuleData(LinksModuleData linksModuleData) {
    this.linksModuleData = linksModuleData;
  }


  public GenericObject logo(Image logo) {
    this.logo = logo;
    return this;
  }

  /**
   * Get logo
   * @return logo
   */
  @javax.annotation.Nullable
  public Image getLogo() {
    return logo;
  }

  public void setLogo(Image logo) {
    this.logo = logo;
  }


  public GenericObject notifications(Notifications notifications) {
    this.notifications = notifications;
    return this;
  }

  /**
   * Get notifications
   * @return notifications
   */
  @javax.annotation.Nullable
  public Notifications getNotifications() {
    return notifications;
  }

  public void setNotifications(Notifications notifications) {
    this.notifications = notifications;
  }


  public GenericObject passConstraints(PassConstraints passConstraints) {
    this.passConstraints = passConstraints;
    return this;
  }

  /**
   * Get passConstraints
   * @return passConstraints
   */
  @javax.annotation.Nullable
  public PassConstraints getPassConstraints() {
    return passConstraints;
  }

  public void setPassConstraints(PassConstraints passConstraints) {
    this.passConstraints = passConstraints;
  }


  public GenericObject rotatingBarcode(RotatingBarcode rotatingBarcode) {
    this.rotatingBarcode = rotatingBarcode;
    return this;
  }

  /**
   * Get rotatingBarcode
   * @return rotatingBarcode
   */
  @javax.annotation.Nullable
  public RotatingBarcode getRotatingBarcode() {
    return rotatingBarcode;
  }

  public void setRotatingBarcode(RotatingBarcode rotatingBarcode) {
    this.rotatingBarcode = rotatingBarcode;
  }


  public GenericObject smartTapRedemptionValue(String smartTapRedemptionValue) {
    this.smartTapRedemptionValue = smartTapRedemptionValue;
    return this;
  }

  /**
   * The value that will be transmitted to a Smart Tap certified terminal over NFC for this object. The class level fields &#x60;enableSmartTap&#x60; and &#x60;redemptionIssuers&#x60; must also be set up correctly in order for the pass to support Smart Tap. Only ASCII characters are supported.
   * @return smartTapRedemptionValue
   */
  @javax.annotation.Nullable
  public String getSmartTapRedemptionValue() {
    return smartTapRedemptionValue;
  }

  public void setSmartTapRedemptionValue(String smartTapRedemptionValue) {
    this.smartTapRedemptionValue = smartTapRedemptionValue;
  }


  public GenericObject state(StateEnum state) {
    this.state = state;
    return this;
  }

  /**
   * The state of the object. This field is used to determine how an object is displayed in the app. For example, an &#x60;inactive&#x60; object is moved to the \&quot;Expired passes\&quot; section. If this is not provided, the object would be considered &#x60;ACTIVE&#x60;.
   * @return state
   */
  @javax.annotation.Nullable
  public StateEnum getState() {
    return state;
  }

  public void setState(StateEnum state) {
    this.state = state;
  }


  public GenericObject subheader(LocalizedString subheader) {
    this.subheader = subheader;
    return this;
  }

  /**
   * Get subheader
   * @return subheader
   */
  @javax.annotation.Nullable
  public LocalizedString getSubheader() {
    return subheader;
  }

  public void setSubheader(LocalizedString subheader) {
    this.subheader = subheader;
  }


  public GenericObject textModulesData(List<TextModuleData> textModulesData) {
    this.textModulesData = textModulesData;
    return this;
  }

  public GenericObject addTextModulesDataItem(TextModuleData textModulesDataItem) {
    if (this.textModulesData == null) {
      this.textModulesData = new ArrayList<>();
    }
    this.textModulesData.add(textModulesDataItem);
    return this;
  }

  /**
   * Text module data. If &#x60;textModulesData&#x60; is also defined on the class, both will be displayed. The maximum number of these fields displayed is 10 from class and 10 from object.
   * @return textModulesData
   */
  @javax.annotation.Nullable
  public List<TextModuleData> getTextModulesData() {
    return textModulesData;
  }

  public void setTextModulesData(List<TextModuleData> textModulesData) {
    this.textModulesData = textModulesData;
  }


  public GenericObject validTimeInterval(TimeInterval validTimeInterval) {
    this.validTimeInterval = validTimeInterval;
    return this;
  }

  /**
   * Get validTimeInterval
   * @return validTimeInterval
   */
  @javax.annotation.Nullable
  public TimeInterval getValidTimeInterval() {
    return validTimeInterval;
  }

  public void setValidTimeInterval(TimeInterval validTimeInterval) {
    this.validTimeInterval = validTimeInterval;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GenericObject genericObject = (GenericObject) o;
    return Objects.equals(this.appLinkData, genericObject.appLinkData) &&
        Objects.equals(this.barcode, genericObject.barcode) &&
        Objects.equals(this.cardTitle, genericObject.cardTitle) &&
        Objects.equals(this.classId, genericObject.classId) &&
        Objects.equals(this.genericType, genericObject.genericType) &&
        Objects.equals(this.groupingInfo, genericObject.groupingInfo) &&
        Objects.equals(this.hasUsers, genericObject.hasUsers) &&
        Objects.equals(this.header, genericObject.header) &&
        Objects.equals(this.heroImage, genericObject.heroImage) &&
        Objects.equals(this.hexBackgroundColor, genericObject.hexBackgroundColor) &&
        Objects.equals(this.id, genericObject.id) &&
        Objects.equals(this.imageModulesData, genericObject.imageModulesData) &&
        Objects.equals(this.linksModuleData, genericObject.linksModuleData) &&
        Objects.equals(this.logo, genericObject.logo) &&
        Objects.equals(this.notifications, genericObject.notifications) &&
        Objects.equals(this.passConstraints, genericObject.passConstraints) &&
        Objects.equals(this.rotatingBarcode, genericObject.rotatingBarcode) &&
        Objects.equals(this.smartTapRedemptionValue, genericObject.smartTapRedemptionValue) &&
        Objects.equals(this.state, genericObject.state) &&
        Objects.equals(this.subheader, genericObject.subheader) &&
        Objects.equals(this.textModulesData, genericObject.textModulesData) &&
        Objects.equals(this.validTimeInterval, genericObject.validTimeInterval);
  }

  @Override
  public int hashCode() {
    return Objects.hash(appLinkData, barcode, cardTitle, classId, genericType, groupingInfo, hasUsers, header, heroImage, hexBackgroundColor, id, imageModulesData, linksModuleData, logo, notifications, passConstraints, rotatingBarcode, smartTapRedemptionValue, state, subheader, textModulesData, validTimeInterval);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GenericObject {\n");
    sb.append("    appLinkData: ").append(toIndentedString(appLinkData)).append("\n");
    sb.append("    barcode: ").append(toIndentedString(barcode)).append("\n");
    sb.append("    cardTitle: ").append(toIndentedString(cardTitle)).append("\n");
    sb.append("    classId: ").append(toIndentedString(classId)).append("\n");
    sb.append("    genericType: ").append(toIndentedString(genericType)).append("\n");
    sb.append("    groupingInfo: ").append(toIndentedString(groupingInfo)).append("\n");
    sb.append("    hasUsers: ").append(toIndentedString(hasUsers)).append("\n");
    sb.append("    header: ").append(toIndentedString(header)).append("\n");
    sb.append("    heroImage: ").append(toIndentedString(heroImage)).append("\n");
    sb.append("    hexBackgroundColor: ").append(toIndentedString(hexBackgroundColor)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    imageModulesData: ").append(toIndentedString(imageModulesData)).append("\n");
    sb.append("    linksModuleData: ").append(toIndentedString(linksModuleData)).append("\n");
    sb.append("    logo: ").append(toIndentedString(logo)).append("\n");
    sb.append("    notifications: ").append(toIndentedString(notifications)).append("\n");
    sb.append("    passConstraints: ").append(toIndentedString(passConstraints)).append("\n");
    sb.append("    rotatingBarcode: ").append(toIndentedString(rotatingBarcode)).append("\n");
    sb.append("    smartTapRedemptionValue: ").append(toIndentedString(smartTapRedemptionValue)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    subheader: ").append(toIndentedString(subheader)).append("\n");
    sb.append("    textModulesData: ").append(toIndentedString(textModulesData)).append("\n");
    sb.append("    validTimeInterval: ").append(toIndentedString(validTimeInterval)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("appLinkData");
    openapiFields.add("barcode");
    openapiFields.add("cardTitle");
    openapiFields.add("classId");
    openapiFields.add("genericType");
    openapiFields.add("groupingInfo");
    openapiFields.add("hasUsers");
    openapiFields.add("header");
    openapiFields.add("heroImage");
    openapiFields.add("hexBackgroundColor");
    openapiFields.add("id");
    openapiFields.add("imageModulesData");
    openapiFields.add("linksModuleData");
    openapiFields.add("logo");
    openapiFields.add("notifications");
    openapiFields.add("passConstraints");
    openapiFields.add("rotatingBarcode");
    openapiFields.add("smartTapRedemptionValue");
    openapiFields.add("state");
    openapiFields.add("subheader");
    openapiFields.add("textModulesData");
    openapiFields.add("validTimeInterval");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GenericObject
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GenericObject.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GenericObject is not found in the empty JSON string", GenericObject.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GenericObject.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GenericObject` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `appLinkData`
      if (jsonObj.get("appLinkData") != null && !jsonObj.get("appLinkData").isJsonNull()) {
        AppLinkData.validateJsonElement(jsonObj.get("appLinkData"));
      }
      // validate the optional field `barcode`
      if (jsonObj.get("barcode") != null && !jsonObj.get("barcode").isJsonNull()) {
        Barcode.validateJsonElement(jsonObj.get("barcode"));
      }
      // validate the optional field `cardTitle`
      if (jsonObj.get("cardTitle") != null && !jsonObj.get("cardTitle").isJsonNull()) {
        LocalizedString.validateJsonElement(jsonObj.get("cardTitle"));
      }
      if ((jsonObj.get("classId") != null && !jsonObj.get("classId").isJsonNull()) && !jsonObj.get("classId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `classId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("classId").toString()));
      }
      if ((jsonObj.get("genericType") != null && !jsonObj.get("genericType").isJsonNull()) && !jsonObj.get("genericType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `genericType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("genericType").toString()));
      }
      // validate the optional field `genericType`
      if (jsonObj.get("genericType") != null && !jsonObj.get("genericType").isJsonNull()) {
        GenericTypeEnum.validateJsonElement(jsonObj.get("genericType"));
      }
      // validate the optional field `groupingInfo`
      if (jsonObj.get("groupingInfo") != null && !jsonObj.get("groupingInfo").isJsonNull()) {
        GroupingInfo.validateJsonElement(jsonObj.get("groupingInfo"));
      }
      // validate the optional field `header`
      if (jsonObj.get("header") != null && !jsonObj.get("header").isJsonNull()) {
        LocalizedString.validateJsonElement(jsonObj.get("header"));
      }
      // validate the optional field `heroImage`
      if (jsonObj.get("heroImage") != null && !jsonObj.get("heroImage").isJsonNull()) {
        Image.validateJsonElement(jsonObj.get("heroImage"));
      }
      if ((jsonObj.get("hexBackgroundColor") != null && !jsonObj.get("hexBackgroundColor").isJsonNull()) && !jsonObj.get("hexBackgroundColor").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hexBackgroundColor` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hexBackgroundColor").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (jsonObj.get("imageModulesData") != null && !jsonObj.get("imageModulesData").isJsonNull()) {
        JsonArray jsonArrayimageModulesData = jsonObj.getAsJsonArray("imageModulesData");
        if (jsonArrayimageModulesData != null) {
          // ensure the json data is an array
          if (!jsonObj.get("imageModulesData").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `imageModulesData` to be an array in the JSON string but got `%s`", jsonObj.get("imageModulesData").toString()));
          }

          // validate the optional field `imageModulesData` (array)
          for (int i = 0; i < jsonArrayimageModulesData.size(); i++) {
            ImageModuleData.validateJsonElement(jsonArrayimageModulesData.get(i));
          };
        }
      }
      // validate the optional field `linksModuleData`
      if (jsonObj.get("linksModuleData") != null && !jsonObj.get("linksModuleData").isJsonNull()) {
        LinksModuleData.validateJsonElement(jsonObj.get("linksModuleData"));
      }
      // validate the optional field `logo`
      if (jsonObj.get("logo") != null && !jsonObj.get("logo").isJsonNull()) {
        Image.validateJsonElement(jsonObj.get("logo"));
      }
      // validate the optional field `notifications`
      if (jsonObj.get("notifications") != null && !jsonObj.get("notifications").isJsonNull()) {
        Notifications.validateJsonElement(jsonObj.get("notifications"));
      }
      // validate the optional field `passConstraints`
      if (jsonObj.get("passConstraints") != null && !jsonObj.get("passConstraints").isJsonNull()) {
        PassConstraints.validateJsonElement(jsonObj.get("passConstraints"));
      }
      // validate the optional field `rotatingBarcode`
      if (jsonObj.get("rotatingBarcode") != null && !jsonObj.get("rotatingBarcode").isJsonNull()) {
        RotatingBarcode.validateJsonElement(jsonObj.get("rotatingBarcode"));
      }
      if ((jsonObj.get("smartTapRedemptionValue") != null && !jsonObj.get("smartTapRedemptionValue").isJsonNull()) && !jsonObj.get("smartTapRedemptionValue").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `smartTapRedemptionValue` to be a primitive type in the JSON string but got `%s`", jsonObj.get("smartTapRedemptionValue").toString()));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        StateEnum.validateJsonElement(jsonObj.get("state"));
      }
      // validate the optional field `subheader`
      if (jsonObj.get("subheader") != null && !jsonObj.get("subheader").isJsonNull()) {
        LocalizedString.validateJsonElement(jsonObj.get("subheader"));
      }
      if (jsonObj.get("textModulesData") != null && !jsonObj.get("textModulesData").isJsonNull()) {
        JsonArray jsonArraytextModulesData = jsonObj.getAsJsonArray("textModulesData");
        if (jsonArraytextModulesData != null) {
          // ensure the json data is an array
          if (!jsonObj.get("textModulesData").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `textModulesData` to be an array in the JSON string but got `%s`", jsonObj.get("textModulesData").toString()));
          }

          // validate the optional field `textModulesData` (array)
          for (int i = 0; i < jsonArraytextModulesData.size(); i++) {
            TextModuleData.validateJsonElement(jsonArraytextModulesData.get(i));
          };
        }
      }
      // validate the optional field `validTimeInterval`
      if (jsonObj.get("validTimeInterval") != null && !jsonObj.get("validTimeInterval").isJsonNull()) {
        TimeInterval.validateJsonElement(jsonObj.get("validTimeInterval"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GenericObject.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GenericObject' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GenericObject> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GenericObject.class));

       return (TypeAdapter<T>) new TypeAdapter<GenericObject>() {
           @Override
           public void write(JsonWriter out, GenericObject value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GenericObject read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GenericObject given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GenericObject
   * @throws IOException if the JSON string is invalid with respect to GenericObject
   */
  public static GenericObject fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GenericObject.class);
  }

  /**
   * Convert an instance of GenericObject to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

