/*
 * Google Pay Passes API
 * API for issuers to save and manage Google Wallet Objects.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.TicketCost;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PurchaseDetails
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:12:07.622305-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PurchaseDetails {
  public static final String SERIALIZED_NAME_ACCOUNT_ID = "accountId";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_ID)
  private String accountId;

  public static final String SERIALIZED_NAME_CONFIRMATION_CODE = "confirmationCode";
  @SerializedName(SERIALIZED_NAME_CONFIRMATION_CODE)
  private String confirmationCode;

  public static final String SERIALIZED_NAME_PURCHASE_DATE_TIME = "purchaseDateTime";
  @SerializedName(SERIALIZED_NAME_PURCHASE_DATE_TIME)
  private String purchaseDateTime;

  public static final String SERIALIZED_NAME_PURCHASE_RECEIPT_NUMBER = "purchaseReceiptNumber";
  @SerializedName(SERIALIZED_NAME_PURCHASE_RECEIPT_NUMBER)
  private String purchaseReceiptNumber;

  public static final String SERIALIZED_NAME_TICKET_COST = "ticketCost";
  @SerializedName(SERIALIZED_NAME_TICKET_COST)
  private TicketCost ticketCost;

  public PurchaseDetails() {
  }

  public PurchaseDetails accountId(String accountId) {
    this.accountId = accountId;
    return this;
  }

  /**
   * ID of the account used to purchase the ticket.
   * @return accountId
   */
  @javax.annotation.Nullable
  public String getAccountId() {
    return accountId;
  }

  public void setAccountId(String accountId) {
    this.accountId = accountId;
  }


  public PurchaseDetails confirmationCode(String confirmationCode) {
    this.confirmationCode = confirmationCode;
    return this;
  }

  /**
   * The confirmation code for the purchase. This may be the same for multiple different tickets and is used to group tickets together.
   * @return confirmationCode
   */
  @javax.annotation.Nullable
  public String getConfirmationCode() {
    return confirmationCode;
  }

  public void setConfirmationCode(String confirmationCode) {
    this.confirmationCode = confirmationCode;
  }


  public PurchaseDetails purchaseDateTime(String purchaseDateTime) {
    this.purchaseDateTime = purchaseDateTime;
    return this;
  }

  /**
   * The purchase date/time of the ticket. This is an ISO 8601 extended format date/time, with or without an offset. Time may be specified up to nanosecond precision. Offsets may be specified with seconds precision (even though offset seconds is not part of ISO 8601). For example: &#x60;1985-04-12T23:20:50.52Z&#x60; would be 20 minutes and 50.52 seconds after the 23rd hour of April 12th, 1985 in UTC. &#x60;1985-04-12T19:20:50.52-04:00&#x60; would be 20 minutes and 50.52 seconds after the 19th hour of April 12th, 1985, 4 hours before UTC (same instant in time as the above example). If the event were in New York, this would be the equivalent of Eastern Daylight Time (EDT). Remember that offset varies in regions that observe Daylight Saving Time (or Summer Time), depending on the time of the year. &#x60;1985-04-12T19:20:50.52&#x60; would be 20 minutes and 50.52 seconds after the 19th hour of April 12th, 1985 with no offset information. Without offset information, some rich features may not be available.
   * @return purchaseDateTime
   */
  @javax.annotation.Nullable
  public String getPurchaseDateTime() {
    return purchaseDateTime;
  }

  public void setPurchaseDateTime(String purchaseDateTime) {
    this.purchaseDateTime = purchaseDateTime;
  }


  public PurchaseDetails purchaseReceiptNumber(String purchaseReceiptNumber) {
    this.purchaseReceiptNumber = purchaseReceiptNumber;
    return this;
  }

  /**
   * Receipt number/identifier for tracking the ticket purchase via the body that sold the ticket.
   * @return purchaseReceiptNumber
   */
  @javax.annotation.Nullable
  public String getPurchaseReceiptNumber() {
    return purchaseReceiptNumber;
  }

  public void setPurchaseReceiptNumber(String purchaseReceiptNumber) {
    this.purchaseReceiptNumber = purchaseReceiptNumber;
  }


  public PurchaseDetails ticketCost(TicketCost ticketCost) {
    this.ticketCost = ticketCost;
    return this;
  }

  /**
   * Get ticketCost
   * @return ticketCost
   */
  @javax.annotation.Nullable
  public TicketCost getTicketCost() {
    return ticketCost;
  }

  public void setTicketCost(TicketCost ticketCost) {
    this.ticketCost = ticketCost;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PurchaseDetails purchaseDetails = (PurchaseDetails) o;
    return Objects.equals(this.accountId, purchaseDetails.accountId) &&
        Objects.equals(this.confirmationCode, purchaseDetails.confirmationCode) &&
        Objects.equals(this.purchaseDateTime, purchaseDetails.purchaseDateTime) &&
        Objects.equals(this.purchaseReceiptNumber, purchaseDetails.purchaseReceiptNumber) &&
        Objects.equals(this.ticketCost, purchaseDetails.ticketCost);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountId, confirmationCode, purchaseDateTime, purchaseReceiptNumber, ticketCost);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PurchaseDetails {\n");
    sb.append("    accountId: ").append(toIndentedString(accountId)).append("\n");
    sb.append("    confirmationCode: ").append(toIndentedString(confirmationCode)).append("\n");
    sb.append("    purchaseDateTime: ").append(toIndentedString(purchaseDateTime)).append("\n");
    sb.append("    purchaseReceiptNumber: ").append(toIndentedString(purchaseReceiptNumber)).append("\n");
    sb.append("    ticketCost: ").append(toIndentedString(ticketCost)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accountId");
    openapiFields.add("confirmationCode");
    openapiFields.add("purchaseDateTime");
    openapiFields.add("purchaseReceiptNumber");
    openapiFields.add("ticketCost");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PurchaseDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PurchaseDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PurchaseDetails is not found in the empty JSON string", PurchaseDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PurchaseDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PurchaseDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("accountId") != null && !jsonObj.get("accountId").isJsonNull()) && !jsonObj.get("accountId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountId").toString()));
      }
      if ((jsonObj.get("confirmationCode") != null && !jsonObj.get("confirmationCode").isJsonNull()) && !jsonObj.get("confirmationCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `confirmationCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("confirmationCode").toString()));
      }
      if ((jsonObj.get("purchaseDateTime") != null && !jsonObj.get("purchaseDateTime").isJsonNull()) && !jsonObj.get("purchaseDateTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `purchaseDateTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("purchaseDateTime").toString()));
      }
      if ((jsonObj.get("purchaseReceiptNumber") != null && !jsonObj.get("purchaseReceiptNumber").isJsonNull()) && !jsonObj.get("purchaseReceiptNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `purchaseReceiptNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("purchaseReceiptNumber").toString()));
      }
      // validate the optional field `ticketCost`
      if (jsonObj.get("ticketCost") != null && !jsonObj.get("ticketCost").isJsonNull()) {
        TicketCost.validateJsonElement(jsonObj.get("ticketCost"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PurchaseDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PurchaseDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PurchaseDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PurchaseDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<PurchaseDetails>() {
           @Override
           public void write(JsonWriter out, PurchaseDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PurchaseDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PurchaseDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PurchaseDetails
   * @throws IOException if the JSON string is invalid with respect to PurchaseDetails
   */
  public static PurchaseDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PurchaseDetails.class);
  }

  /**
   * Convert an instance of PurchaseDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

