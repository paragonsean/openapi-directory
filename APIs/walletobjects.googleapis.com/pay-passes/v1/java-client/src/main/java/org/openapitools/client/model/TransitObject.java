/*
 * Google Pay Passes API
 * API for issuers to save and manage Google Wallet Objects.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ActivationStatus;
import org.openapitools.client.model.AppLinkData;
import org.openapitools.client.model.Barcode;
import org.openapitools.client.model.DeviceContext;
import org.openapitools.client.model.GroupingInfo;
import org.openapitools.client.model.Image;
import org.openapitools.client.model.ImageModuleData;
import org.openapitools.client.model.InfoModuleData;
import org.openapitools.client.model.LatLongPoint;
import org.openapitools.client.model.LinksModuleData;
import org.openapitools.client.model.LocalizedString;
import org.openapitools.client.model.Message;
import org.openapitools.client.model.PassConstraints;
import org.openapitools.client.model.PurchaseDetails;
import org.openapitools.client.model.RotatingBarcode;
import org.openapitools.client.model.TextModuleData;
import org.openapitools.client.model.TicketLeg;
import org.openapitools.client.model.TicketRestrictions;
import org.openapitools.client.model.TimeInterval;
import org.openapitools.client.model.TransitClass;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * TransitObject
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:12:07.622305-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TransitObject {
  public static final String SERIALIZED_NAME_ACTIVATION_STATUS = "activationStatus";
  @SerializedName(SERIALIZED_NAME_ACTIVATION_STATUS)
  private ActivationStatus activationStatus;

  public static final String SERIALIZED_NAME_APP_LINK_DATA = "appLinkData";
  @SerializedName(SERIALIZED_NAME_APP_LINK_DATA)
  private AppLinkData appLinkData;

  public static final String SERIALIZED_NAME_BARCODE = "barcode";
  @SerializedName(SERIALIZED_NAME_BARCODE)
  private Barcode barcode;

  public static final String SERIALIZED_NAME_CLASS_ID = "classId";
  @SerializedName(SERIALIZED_NAME_CLASS_ID)
  private String classId;

  public static final String SERIALIZED_NAME_CLASS_REFERENCE = "classReference";
  @SerializedName(SERIALIZED_NAME_CLASS_REFERENCE)
  private TransitClass classReference;

  /**
   * The concession category for the ticket.
   */
  @JsonAdapter(ConcessionCategoryEnum.Adapter.class)
  public enum ConcessionCategoryEnum {
    CONCESSION_CATEGORY_UNSPECIFIED("CONCESSION_CATEGORY_UNSPECIFIED"),
    
    ADULT("ADULT"),
    
    ADULT2("adult"),
    
    CHILD("CHILD"),
    
    CHILD2("child"),
    
    SENIOR("SENIOR"),
    
    SENIOR2("senior");

    private String value;

    ConcessionCategoryEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ConcessionCategoryEnum fromValue(String value) {
      for (ConcessionCategoryEnum b : ConcessionCategoryEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ConcessionCategoryEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ConcessionCategoryEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ConcessionCategoryEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ConcessionCategoryEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ConcessionCategoryEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CONCESSION_CATEGORY = "concessionCategory";
  @SerializedName(SERIALIZED_NAME_CONCESSION_CATEGORY)
  private ConcessionCategoryEnum concessionCategory;

  public static final String SERIALIZED_NAME_CUSTOM_CONCESSION_CATEGORY = "customConcessionCategory";
  @SerializedName(SERIALIZED_NAME_CUSTOM_CONCESSION_CATEGORY)
  private LocalizedString customConcessionCategory;

  public static final String SERIALIZED_NAME_CUSTOM_TICKET_STATUS = "customTicketStatus";
  @SerializedName(SERIALIZED_NAME_CUSTOM_TICKET_STATUS)
  private LocalizedString customTicketStatus;

  public static final String SERIALIZED_NAME_DEVICE_CONTEXT = "deviceContext";
  @SerializedName(SERIALIZED_NAME_DEVICE_CONTEXT)
  private DeviceContext deviceContext;

  public static final String SERIALIZED_NAME_DISABLE_EXPIRATION_NOTIFICATION = "disableExpirationNotification";
  @SerializedName(SERIALIZED_NAME_DISABLE_EXPIRATION_NOTIFICATION)
  private Boolean disableExpirationNotification;

  public static final String SERIALIZED_NAME_GROUPING_INFO = "groupingInfo";
  @SerializedName(SERIALIZED_NAME_GROUPING_INFO)
  private GroupingInfo groupingInfo;

  public static final String SERIALIZED_NAME_HAS_LINKED_DEVICE = "hasLinkedDevice";
  @SerializedName(SERIALIZED_NAME_HAS_LINKED_DEVICE)
  private Boolean hasLinkedDevice;

  public static final String SERIALIZED_NAME_HAS_USERS = "hasUsers";
  @SerializedName(SERIALIZED_NAME_HAS_USERS)
  private Boolean hasUsers;

  public static final String SERIALIZED_NAME_HERO_IMAGE = "heroImage";
  @SerializedName(SERIALIZED_NAME_HERO_IMAGE)
  private Image heroImage;

  public static final String SERIALIZED_NAME_HEX_BACKGROUND_COLOR = "hexBackgroundColor";
  @SerializedName(SERIALIZED_NAME_HEX_BACKGROUND_COLOR)
  private String hexBackgroundColor;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_IMAGE_MODULES_DATA = "imageModulesData";
  @SerializedName(SERIALIZED_NAME_IMAGE_MODULES_DATA)
  private List<ImageModuleData> imageModulesData = new ArrayList<>();

  public static final String SERIALIZED_NAME_INFO_MODULE_DATA = "infoModuleData";
  @SerializedName(SERIALIZED_NAME_INFO_MODULE_DATA)
  private InfoModuleData infoModuleData;

  public static final String SERIALIZED_NAME_LINKS_MODULE_DATA = "linksModuleData";
  @SerializedName(SERIALIZED_NAME_LINKS_MODULE_DATA)
  private LinksModuleData linksModuleData;

  public static final String SERIALIZED_NAME_LOCATIONS = "locations";
  @SerializedName(SERIALIZED_NAME_LOCATIONS)
  private List<LatLongPoint> locations = new ArrayList<>();

  public static final String SERIALIZED_NAME_MESSAGES = "messages";
  @SerializedName(SERIALIZED_NAME_MESSAGES)
  private List<Message> messages = new ArrayList<>();

  public static final String SERIALIZED_NAME_PASS_CONSTRAINTS = "passConstraints";
  @SerializedName(SERIALIZED_NAME_PASS_CONSTRAINTS)
  private PassConstraints passConstraints;

  public static final String SERIALIZED_NAME_PASSENGER_NAMES = "passengerNames";
  @SerializedName(SERIALIZED_NAME_PASSENGER_NAMES)
  private String passengerNames;

  /**
   * The number of passengers.
   */
  @JsonAdapter(PassengerTypeEnum.Adapter.class)
  public enum PassengerTypeEnum {
    PASSENGER_TYPE_UNSPECIFIED("PASSENGER_TYPE_UNSPECIFIED"),
    
    SINGLE_PASSENGER("SINGLE_PASSENGER"),
    
    SINGLE_PASSENGER2("singlePassenger"),
    
    MULTIPLE_PASSENGERS("MULTIPLE_PASSENGERS"),
    
    MULTIPLE_PASSENGERS2("multiplePassengers");

    private String value;

    PassengerTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PassengerTypeEnum fromValue(String value) {
      for (PassengerTypeEnum b : PassengerTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PassengerTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PassengerTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PassengerTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PassengerTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PassengerTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PASSENGER_TYPE = "passengerType";
  @SerializedName(SERIALIZED_NAME_PASSENGER_TYPE)
  private PassengerTypeEnum passengerType;

  public static final String SERIALIZED_NAME_PURCHASE_DETAILS = "purchaseDetails";
  @SerializedName(SERIALIZED_NAME_PURCHASE_DETAILS)
  private PurchaseDetails purchaseDetails;

  public static final String SERIALIZED_NAME_ROTATING_BARCODE = "rotatingBarcode";
  @SerializedName(SERIALIZED_NAME_ROTATING_BARCODE)
  private RotatingBarcode rotatingBarcode;

  public static final String SERIALIZED_NAME_SMART_TAP_REDEMPTION_VALUE = "smartTapRedemptionValue";
  @SerializedName(SERIALIZED_NAME_SMART_TAP_REDEMPTION_VALUE)
  private String smartTapRedemptionValue;

  /**
   * Required. The state of the object. This field is used to determine how an object is displayed in the app. For example, an &#x60;inactive&#x60; object is moved to the \&quot;Expired passes\&quot; section.
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    STATE_UNSPECIFIED("STATE_UNSPECIFIED"),
    
    ACTIVE("ACTIVE"),
    
    ACTIVE2("active"),
    
    COMPLETED("COMPLETED"),
    
    COMPLETED2("completed"),
    
    EXPIRED("EXPIRED"),
    
    EXPIRED2("expired"),
    
    INACTIVE("INACTIVE"),
    
    INACTIVE2("inactive");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  public static final String SERIALIZED_NAME_TEXT_MODULES_DATA = "textModulesData";
  @SerializedName(SERIALIZED_NAME_TEXT_MODULES_DATA)
  private List<TextModuleData> textModulesData = new ArrayList<>();

  public static final String SERIALIZED_NAME_TICKET_LEG = "ticketLeg";
  @SerializedName(SERIALIZED_NAME_TICKET_LEG)
  private TicketLeg ticketLeg;

  public static final String SERIALIZED_NAME_TICKET_LEGS = "ticketLegs";
  @SerializedName(SERIALIZED_NAME_TICKET_LEGS)
  private List<TicketLeg> ticketLegs = new ArrayList<>();

  public static final String SERIALIZED_NAME_TICKET_NUMBER = "ticketNumber";
  @SerializedName(SERIALIZED_NAME_TICKET_NUMBER)
  private String ticketNumber;

  public static final String SERIALIZED_NAME_TICKET_RESTRICTIONS = "ticketRestrictions";
  @SerializedName(SERIALIZED_NAME_TICKET_RESTRICTIONS)
  private TicketRestrictions ticketRestrictions;

  /**
   * The status of the ticket. For states which affect display, use the &#x60;state&#x60; field instead.
   */
  @JsonAdapter(TicketStatusEnum.Adapter.class)
  public enum TicketStatusEnum {
    TICKET_STATUS_UNSPECIFIED("TICKET_STATUS_UNSPECIFIED"),
    
    USED("USED"),
    
    USED2("used"),
    
    REFUNDED("REFUNDED"),
    
    REFUNDED2("refunded"),
    
    EXCHANGED("EXCHANGED"),
    
    EXCHANGED2("exchanged");

    private String value;

    TicketStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TicketStatusEnum fromValue(String value) {
      for (TicketStatusEnum b : TicketStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TicketStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TicketStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TicketStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TicketStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TicketStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TICKET_STATUS = "ticketStatus";
  @SerializedName(SERIALIZED_NAME_TICKET_STATUS)
  private TicketStatusEnum ticketStatus;

  public static final String SERIALIZED_NAME_TRIP_ID = "tripId";
  @SerializedName(SERIALIZED_NAME_TRIP_ID)
  private String tripId;

  /**
   * Required. The type of trip this transit object represents. Used to determine the pass title and/or which symbol to use between the origin and destination.
   */
  @JsonAdapter(TripTypeEnum.Adapter.class)
  public enum TripTypeEnum {
    TRIP_TYPE_UNSPECIFIED("TRIP_TYPE_UNSPECIFIED"),
    
    ROUND_TRIP("ROUND_TRIP"),
    
    ROUND_TRIP2("roundTrip"),
    
    ONE_WAY("ONE_WAY"),
    
    ONE_WAY2("oneWay");

    private String value;

    TripTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TripTypeEnum fromValue(String value) {
      for (TripTypeEnum b : TripTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TripTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TripTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TripTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TripTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TripTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TRIP_TYPE = "tripType";
  @SerializedName(SERIALIZED_NAME_TRIP_TYPE)
  private TripTypeEnum tripType;

  public static final String SERIALIZED_NAME_VALID_TIME_INTERVAL = "validTimeInterval";
  @SerializedName(SERIALIZED_NAME_VALID_TIME_INTERVAL)
  private TimeInterval validTimeInterval;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private String version;

  public TransitObject() {
  }

  public TransitObject activationStatus(ActivationStatus activationStatus) {
    this.activationStatus = activationStatus;
    return this;
  }

  /**
   * Get activationStatus
   * @return activationStatus
   */
  @javax.annotation.Nullable
  public ActivationStatus getActivationStatus() {
    return activationStatus;
  }

  public void setActivationStatus(ActivationStatus activationStatus) {
    this.activationStatus = activationStatus;
  }


  public TransitObject appLinkData(AppLinkData appLinkData) {
    this.appLinkData = appLinkData;
    return this;
  }

  /**
   * Get appLinkData
   * @return appLinkData
   */
  @javax.annotation.Nullable
  public AppLinkData getAppLinkData() {
    return appLinkData;
  }

  public void setAppLinkData(AppLinkData appLinkData) {
    this.appLinkData = appLinkData;
  }


  public TransitObject barcode(Barcode barcode) {
    this.barcode = barcode;
    return this;
  }

  /**
   * Get barcode
   * @return barcode
   */
  @javax.annotation.Nullable
  public Barcode getBarcode() {
    return barcode;
  }

  public void setBarcode(Barcode barcode) {
    this.barcode = barcode;
  }


  public TransitObject classId(String classId) {
    this.classId = classId;
    return this;
  }

  /**
   * Required. The class associated with this object. The class must be of the same type as this object, must already exist, and must be approved. Class IDs should follow the format issuer ID.identifier where the former is issued by Google and latter is chosen by you.
   * @return classId
   */
  @javax.annotation.Nullable
  public String getClassId() {
    return classId;
  }

  public void setClassId(String classId) {
    this.classId = classId;
  }


  public TransitObject classReference(TransitClass classReference) {
    this.classReference = classReference;
    return this;
  }

  /**
   * Get classReference
   * @return classReference
   */
  @javax.annotation.Nullable
  public TransitClass getClassReference() {
    return classReference;
  }

  public void setClassReference(TransitClass classReference) {
    this.classReference = classReference;
  }


  public TransitObject concessionCategory(ConcessionCategoryEnum concessionCategory) {
    this.concessionCategory = concessionCategory;
    return this;
  }

  /**
   * The concession category for the ticket.
   * @return concessionCategory
   */
  @javax.annotation.Nullable
  public ConcessionCategoryEnum getConcessionCategory() {
    return concessionCategory;
  }

  public void setConcessionCategory(ConcessionCategoryEnum concessionCategory) {
    this.concessionCategory = concessionCategory;
  }


  public TransitObject customConcessionCategory(LocalizedString customConcessionCategory) {
    this.customConcessionCategory = customConcessionCategory;
    return this;
  }

  /**
   * Get customConcessionCategory
   * @return customConcessionCategory
   */
  @javax.annotation.Nullable
  public LocalizedString getCustomConcessionCategory() {
    return customConcessionCategory;
  }

  public void setCustomConcessionCategory(LocalizedString customConcessionCategory) {
    this.customConcessionCategory = customConcessionCategory;
  }


  public TransitObject customTicketStatus(LocalizedString customTicketStatus) {
    this.customTicketStatus = customTicketStatus;
    return this;
  }

  /**
   * Get customTicketStatus
   * @return customTicketStatus
   */
  @javax.annotation.Nullable
  public LocalizedString getCustomTicketStatus() {
    return customTicketStatus;
  }

  public void setCustomTicketStatus(LocalizedString customTicketStatus) {
    this.customTicketStatus = customTicketStatus;
  }


  public TransitObject deviceContext(DeviceContext deviceContext) {
    this.deviceContext = deviceContext;
    return this;
  }

  /**
   * Get deviceContext
   * @return deviceContext
   */
  @javax.annotation.Nullable
  public DeviceContext getDeviceContext() {
    return deviceContext;
  }

  public void setDeviceContext(DeviceContext deviceContext) {
    this.deviceContext = deviceContext;
  }


  public TransitObject disableExpirationNotification(Boolean disableExpirationNotification) {
    this.disableExpirationNotification = disableExpirationNotification;
    return this;
  }

  /**
   * Indicates if notifications should explicitly be suppressed. If this field is set to true, regardless of the &#x60;messages&#x60; field, expiration notifications to the user will be suppressed. By default, this field is set to false. Currently, this can only be set for offers.
   * @return disableExpirationNotification
   */
  @javax.annotation.Nullable
  public Boolean getDisableExpirationNotification() {
    return disableExpirationNotification;
  }

  public void setDisableExpirationNotification(Boolean disableExpirationNotification) {
    this.disableExpirationNotification = disableExpirationNotification;
  }


  public TransitObject groupingInfo(GroupingInfo groupingInfo) {
    this.groupingInfo = groupingInfo;
    return this;
  }

  /**
   * Get groupingInfo
   * @return groupingInfo
   */
  @javax.annotation.Nullable
  public GroupingInfo getGroupingInfo() {
    return groupingInfo;
  }

  public void setGroupingInfo(GroupingInfo groupingInfo) {
    this.groupingInfo = groupingInfo;
  }


  public TransitObject hasLinkedDevice(Boolean hasLinkedDevice) {
    this.hasLinkedDevice = hasLinkedDevice;
    return this;
  }

  /**
   * Whether this object is currently linked to a single device. This field is set by the platform when a user saves the object, linking it to their device. Intended for use by select partners. Contact support for additional information.
   * @return hasLinkedDevice
   */
  @javax.annotation.Nullable
  public Boolean getHasLinkedDevice() {
    return hasLinkedDevice;
  }

  public void setHasLinkedDevice(Boolean hasLinkedDevice) {
    this.hasLinkedDevice = hasLinkedDevice;
  }


  public TransitObject hasUsers(Boolean hasUsers) {
    this.hasUsers = hasUsers;
    return this;
  }

  /**
   * Indicates if the object has users. This field is set by the platform.
   * @return hasUsers
   */
  @javax.annotation.Nullable
  public Boolean getHasUsers() {
    return hasUsers;
  }

  public void setHasUsers(Boolean hasUsers) {
    this.hasUsers = hasUsers;
  }


  public TransitObject heroImage(Image heroImage) {
    this.heroImage = heroImage;
    return this;
  }

  /**
   * Get heroImage
   * @return heroImage
   */
  @javax.annotation.Nullable
  public Image getHeroImage() {
    return heroImage;
  }

  public void setHeroImage(Image heroImage) {
    this.heroImage = heroImage;
  }


  public TransitObject hexBackgroundColor(String hexBackgroundColor) {
    this.hexBackgroundColor = hexBackgroundColor;
    return this;
  }

  /**
   * The background color for the card. If not set the dominant color of the hero image is used, and if no hero image is set, the dominant color of the logo is used. The format is #rrggbb where rrggbb is a hex RGB triplet, such as &#x60;#ffcc00&#x60;. You can also use the shorthand version of the RGB triplet which is #rgb, such as &#x60;#fc0&#x60;.
   * @return hexBackgroundColor
   */
  @javax.annotation.Nullable
  public String getHexBackgroundColor() {
    return hexBackgroundColor;
  }

  public void setHexBackgroundColor(String hexBackgroundColor) {
    this.hexBackgroundColor = hexBackgroundColor;
  }


  public TransitObject id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Required. The unique identifier for an object. This ID must be unique across all objects from an issuer. This value should follow the format issuer ID.identifier where the former is issued by Google and latter is chosen by you. The unique identifier should only include alphanumeric characters, &#39;.&#39;, &#39;_&#39;, or &#39;-&#39;.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public TransitObject imageModulesData(List<ImageModuleData> imageModulesData) {
    this.imageModulesData = imageModulesData;
    return this;
  }

  public TransitObject addImageModulesDataItem(ImageModuleData imageModulesDataItem) {
    if (this.imageModulesData == null) {
      this.imageModulesData = new ArrayList<>();
    }
    this.imageModulesData.add(imageModulesDataItem);
    return this;
  }

  /**
   * Image module data. The maximum number of these fields displayed is 1 from object level and 1 for class object level.
   * @return imageModulesData
   */
  @javax.annotation.Nullable
  public List<ImageModuleData> getImageModulesData() {
    return imageModulesData;
  }

  public void setImageModulesData(List<ImageModuleData> imageModulesData) {
    this.imageModulesData = imageModulesData;
  }


  public TransitObject infoModuleData(InfoModuleData infoModuleData) {
    this.infoModuleData = infoModuleData;
    return this;
  }

  /**
   * Get infoModuleData
   * @return infoModuleData
   */
  @javax.annotation.Nullable
  public InfoModuleData getInfoModuleData() {
    return infoModuleData;
  }

  public void setInfoModuleData(InfoModuleData infoModuleData) {
    this.infoModuleData = infoModuleData;
  }


  public TransitObject linksModuleData(LinksModuleData linksModuleData) {
    this.linksModuleData = linksModuleData;
    return this;
  }

  /**
   * Get linksModuleData
   * @return linksModuleData
   */
  @javax.annotation.Nullable
  public LinksModuleData getLinksModuleData() {
    return linksModuleData;
  }

  public void setLinksModuleData(LinksModuleData linksModuleData) {
    this.linksModuleData = linksModuleData;
  }


  public TransitObject locations(List<LatLongPoint> locations) {
    this.locations = locations;
    return this;
  }

  public TransitObject addLocationsItem(LatLongPoint locationsItem) {
    if (this.locations == null) {
      this.locations = new ArrayList<>();
    }
    this.locations.add(locationsItem);
    return this;
  }

  /**
   * Note: This field is currently not supported to trigger geo notifications.
   * @return locations
   */
  @javax.annotation.Nullable
  public List<LatLongPoint> getLocations() {
    return locations;
  }

  public void setLocations(List<LatLongPoint> locations) {
    this.locations = locations;
  }


  public TransitObject messages(List<Message> messages) {
    this.messages = messages;
    return this;
  }

  public TransitObject addMessagesItem(Message messagesItem) {
    if (this.messages == null) {
      this.messages = new ArrayList<>();
    }
    this.messages.add(messagesItem);
    return this;
  }

  /**
   * An array of messages displayed in the app. All users of this object will receive its associated messages. The maximum number of these fields is 10.
   * @return messages
   */
  @javax.annotation.Nullable
  public List<Message> getMessages() {
    return messages;
  }

  public void setMessages(List<Message> messages) {
    this.messages = messages;
  }


  public TransitObject passConstraints(PassConstraints passConstraints) {
    this.passConstraints = passConstraints;
    return this;
  }

  /**
   * Get passConstraints
   * @return passConstraints
   */
  @javax.annotation.Nullable
  public PassConstraints getPassConstraints() {
    return passConstraints;
  }

  public void setPassConstraints(PassConstraints passConstraints) {
    this.passConstraints = passConstraints;
  }


  public TransitObject passengerNames(String passengerNames) {
    this.passengerNames = passengerNames;
    return this;
  }

  /**
   * The name(s) of the passengers the ticket is assigned to. The above &#x60;passengerType&#x60; field is meant to give Google context on this field.
   * @return passengerNames
   */
  @javax.annotation.Nullable
  public String getPassengerNames() {
    return passengerNames;
  }

  public void setPassengerNames(String passengerNames) {
    this.passengerNames = passengerNames;
  }


  public TransitObject passengerType(PassengerTypeEnum passengerType) {
    this.passengerType = passengerType;
    return this;
  }

  /**
   * The number of passengers.
   * @return passengerType
   */
  @javax.annotation.Nullable
  public PassengerTypeEnum getPassengerType() {
    return passengerType;
  }

  public void setPassengerType(PassengerTypeEnum passengerType) {
    this.passengerType = passengerType;
  }


  public TransitObject purchaseDetails(PurchaseDetails purchaseDetails) {
    this.purchaseDetails = purchaseDetails;
    return this;
  }

  /**
   * Get purchaseDetails
   * @return purchaseDetails
   */
  @javax.annotation.Nullable
  public PurchaseDetails getPurchaseDetails() {
    return purchaseDetails;
  }

  public void setPurchaseDetails(PurchaseDetails purchaseDetails) {
    this.purchaseDetails = purchaseDetails;
  }


  public TransitObject rotatingBarcode(RotatingBarcode rotatingBarcode) {
    this.rotatingBarcode = rotatingBarcode;
    return this;
  }

  /**
   * Get rotatingBarcode
   * @return rotatingBarcode
   */
  @javax.annotation.Nullable
  public RotatingBarcode getRotatingBarcode() {
    return rotatingBarcode;
  }

  public void setRotatingBarcode(RotatingBarcode rotatingBarcode) {
    this.rotatingBarcode = rotatingBarcode;
  }


  public TransitObject smartTapRedemptionValue(String smartTapRedemptionValue) {
    this.smartTapRedemptionValue = smartTapRedemptionValue;
    return this;
  }

  /**
   * The value that will be transmitted to a Smart Tap certified terminal over NFC for this object. The class level fields &#x60;enableSmartTap&#x60; and &#x60;redemptionIssuers&#x60; must also be set up correctly in order for the pass to support Smart Tap. Only ASCII characters are supported.
   * @return smartTapRedemptionValue
   */
  @javax.annotation.Nullable
  public String getSmartTapRedemptionValue() {
    return smartTapRedemptionValue;
  }

  public void setSmartTapRedemptionValue(String smartTapRedemptionValue) {
    this.smartTapRedemptionValue = smartTapRedemptionValue;
  }


  public TransitObject state(StateEnum state) {
    this.state = state;
    return this;
  }

  /**
   * Required. The state of the object. This field is used to determine how an object is displayed in the app. For example, an &#x60;inactive&#x60; object is moved to the \&quot;Expired passes\&quot; section.
   * @return state
   */
  @javax.annotation.Nullable
  public StateEnum getState() {
    return state;
  }

  public void setState(StateEnum state) {
    this.state = state;
  }


  public TransitObject textModulesData(List<TextModuleData> textModulesData) {
    this.textModulesData = textModulesData;
    return this;
  }

  public TransitObject addTextModulesDataItem(TextModuleData textModulesDataItem) {
    if (this.textModulesData == null) {
      this.textModulesData = new ArrayList<>();
    }
    this.textModulesData.add(textModulesDataItem);
    return this;
  }

  /**
   * Text module data. If text module data is also defined on the class, both will be displayed. The maximum number of these fields displayed is 10 from the object and 10 from the class.
   * @return textModulesData
   */
  @javax.annotation.Nullable
  public List<TextModuleData> getTextModulesData() {
    return textModulesData;
  }

  public void setTextModulesData(List<TextModuleData> textModulesData) {
    this.textModulesData = textModulesData;
  }


  public TransitObject ticketLeg(TicketLeg ticketLeg) {
    this.ticketLeg = ticketLeg;
    return this;
  }

  /**
   * Get ticketLeg
   * @return ticketLeg
   */
  @javax.annotation.Nullable
  public TicketLeg getTicketLeg() {
    return ticketLeg;
  }

  public void setTicketLeg(TicketLeg ticketLeg) {
    this.ticketLeg = ticketLeg;
  }


  public TransitObject ticketLegs(List<TicketLeg> ticketLegs) {
    this.ticketLegs = ticketLegs;
    return this;
  }

  public TransitObject addTicketLegsItem(TicketLeg ticketLegsItem) {
    if (this.ticketLegs == null) {
      this.ticketLegs = new ArrayList<>();
    }
    this.ticketLegs.add(ticketLegsItem);
    return this;
  }

  /**
   * Each ticket may contain one or more legs. Each leg contains departure and arrival information along with boarding and seating information. If only one leg is to be specified then use the &#x60;ticketLeg&#x60; field instead. Both &#x60;ticketLeg&#x60; and &#x60;ticketLegs&#x60; may not be set.
   * @return ticketLegs
   */
  @javax.annotation.Nullable
  public List<TicketLeg> getTicketLegs() {
    return ticketLegs;
  }

  public void setTicketLegs(List<TicketLeg> ticketLegs) {
    this.ticketLegs = ticketLegs;
  }


  public TransitObject ticketNumber(String ticketNumber) {
    this.ticketNumber = ticketNumber;
    return this;
  }

  /**
   * The number of the ticket. This is a unique identifier for the ticket in the transit operator&#39;s system.
   * @return ticketNumber
   */
  @javax.annotation.Nullable
  public String getTicketNumber() {
    return ticketNumber;
  }

  public void setTicketNumber(String ticketNumber) {
    this.ticketNumber = ticketNumber;
  }


  public TransitObject ticketRestrictions(TicketRestrictions ticketRestrictions) {
    this.ticketRestrictions = ticketRestrictions;
    return this;
  }

  /**
   * Get ticketRestrictions
   * @return ticketRestrictions
   */
  @javax.annotation.Nullable
  public TicketRestrictions getTicketRestrictions() {
    return ticketRestrictions;
  }

  public void setTicketRestrictions(TicketRestrictions ticketRestrictions) {
    this.ticketRestrictions = ticketRestrictions;
  }


  public TransitObject ticketStatus(TicketStatusEnum ticketStatus) {
    this.ticketStatus = ticketStatus;
    return this;
  }

  /**
   * The status of the ticket. For states which affect display, use the &#x60;state&#x60; field instead.
   * @return ticketStatus
   */
  @javax.annotation.Nullable
  public TicketStatusEnum getTicketStatus() {
    return ticketStatus;
  }

  public void setTicketStatus(TicketStatusEnum ticketStatus) {
    this.ticketStatus = ticketStatus;
  }


  public TransitObject tripId(String tripId) {
    this.tripId = tripId;
    return this;
  }

  /**
   * This id is used to group tickets together if the user has saved multiple tickets for the same trip.
   * @return tripId
   */
  @javax.annotation.Nullable
  public String getTripId() {
    return tripId;
  }

  public void setTripId(String tripId) {
    this.tripId = tripId;
  }


  public TransitObject tripType(TripTypeEnum tripType) {
    this.tripType = tripType;
    return this;
  }

  /**
   * Required. The type of trip this transit object represents. Used to determine the pass title and/or which symbol to use between the origin and destination.
   * @return tripType
   */
  @javax.annotation.Nullable
  public TripTypeEnum getTripType() {
    return tripType;
  }

  public void setTripType(TripTypeEnum tripType) {
    this.tripType = tripType;
  }


  public TransitObject validTimeInterval(TimeInterval validTimeInterval) {
    this.validTimeInterval = validTimeInterval;
    return this;
  }

  /**
   * Get validTimeInterval
   * @return validTimeInterval
   */
  @javax.annotation.Nullable
  public TimeInterval getValidTimeInterval() {
    return validTimeInterval;
  }

  public void setValidTimeInterval(TimeInterval validTimeInterval) {
    this.validTimeInterval = validTimeInterval;
  }


  public TransitObject version(String version) {
    this.version = version;
    return this;
  }

  /**
   * Deprecated
   * @return version
   */
  @javax.annotation.Nullable
  public String getVersion() {
    return version;
  }

  public void setVersion(String version) {
    this.version = version;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TransitObject transitObject = (TransitObject) o;
    return Objects.equals(this.activationStatus, transitObject.activationStatus) &&
        Objects.equals(this.appLinkData, transitObject.appLinkData) &&
        Objects.equals(this.barcode, transitObject.barcode) &&
        Objects.equals(this.classId, transitObject.classId) &&
        Objects.equals(this.classReference, transitObject.classReference) &&
        Objects.equals(this.concessionCategory, transitObject.concessionCategory) &&
        Objects.equals(this.customConcessionCategory, transitObject.customConcessionCategory) &&
        Objects.equals(this.customTicketStatus, transitObject.customTicketStatus) &&
        Objects.equals(this.deviceContext, transitObject.deviceContext) &&
        Objects.equals(this.disableExpirationNotification, transitObject.disableExpirationNotification) &&
        Objects.equals(this.groupingInfo, transitObject.groupingInfo) &&
        Objects.equals(this.hasLinkedDevice, transitObject.hasLinkedDevice) &&
        Objects.equals(this.hasUsers, transitObject.hasUsers) &&
        Objects.equals(this.heroImage, transitObject.heroImage) &&
        Objects.equals(this.hexBackgroundColor, transitObject.hexBackgroundColor) &&
        Objects.equals(this.id, transitObject.id) &&
        Objects.equals(this.imageModulesData, transitObject.imageModulesData) &&
        Objects.equals(this.infoModuleData, transitObject.infoModuleData) &&
        Objects.equals(this.linksModuleData, transitObject.linksModuleData) &&
        Objects.equals(this.locations, transitObject.locations) &&
        Objects.equals(this.messages, transitObject.messages) &&
        Objects.equals(this.passConstraints, transitObject.passConstraints) &&
        Objects.equals(this.passengerNames, transitObject.passengerNames) &&
        Objects.equals(this.passengerType, transitObject.passengerType) &&
        Objects.equals(this.purchaseDetails, transitObject.purchaseDetails) &&
        Objects.equals(this.rotatingBarcode, transitObject.rotatingBarcode) &&
        Objects.equals(this.smartTapRedemptionValue, transitObject.smartTapRedemptionValue) &&
        Objects.equals(this.state, transitObject.state) &&
        Objects.equals(this.textModulesData, transitObject.textModulesData) &&
        Objects.equals(this.ticketLeg, transitObject.ticketLeg) &&
        Objects.equals(this.ticketLegs, transitObject.ticketLegs) &&
        Objects.equals(this.ticketNumber, transitObject.ticketNumber) &&
        Objects.equals(this.ticketRestrictions, transitObject.ticketRestrictions) &&
        Objects.equals(this.ticketStatus, transitObject.ticketStatus) &&
        Objects.equals(this.tripId, transitObject.tripId) &&
        Objects.equals(this.tripType, transitObject.tripType) &&
        Objects.equals(this.validTimeInterval, transitObject.validTimeInterval) &&
        Objects.equals(this.version, transitObject.version);
  }

  @Override
  public int hashCode() {
    return Objects.hash(activationStatus, appLinkData, barcode, classId, classReference, concessionCategory, customConcessionCategory, customTicketStatus, deviceContext, disableExpirationNotification, groupingInfo, hasLinkedDevice, hasUsers, heroImage, hexBackgroundColor, id, imageModulesData, infoModuleData, linksModuleData, locations, messages, passConstraints, passengerNames, passengerType, purchaseDetails, rotatingBarcode, smartTapRedemptionValue, state, textModulesData, ticketLeg, ticketLegs, ticketNumber, ticketRestrictions, ticketStatus, tripId, tripType, validTimeInterval, version);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TransitObject {\n");
    sb.append("    activationStatus: ").append(toIndentedString(activationStatus)).append("\n");
    sb.append("    appLinkData: ").append(toIndentedString(appLinkData)).append("\n");
    sb.append("    barcode: ").append(toIndentedString(barcode)).append("\n");
    sb.append("    classId: ").append(toIndentedString(classId)).append("\n");
    sb.append("    classReference: ").append(toIndentedString(classReference)).append("\n");
    sb.append("    concessionCategory: ").append(toIndentedString(concessionCategory)).append("\n");
    sb.append("    customConcessionCategory: ").append(toIndentedString(customConcessionCategory)).append("\n");
    sb.append("    customTicketStatus: ").append(toIndentedString(customTicketStatus)).append("\n");
    sb.append("    deviceContext: ").append(toIndentedString(deviceContext)).append("\n");
    sb.append("    disableExpirationNotification: ").append(toIndentedString(disableExpirationNotification)).append("\n");
    sb.append("    groupingInfo: ").append(toIndentedString(groupingInfo)).append("\n");
    sb.append("    hasLinkedDevice: ").append(toIndentedString(hasLinkedDevice)).append("\n");
    sb.append("    hasUsers: ").append(toIndentedString(hasUsers)).append("\n");
    sb.append("    heroImage: ").append(toIndentedString(heroImage)).append("\n");
    sb.append("    hexBackgroundColor: ").append(toIndentedString(hexBackgroundColor)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    imageModulesData: ").append(toIndentedString(imageModulesData)).append("\n");
    sb.append("    infoModuleData: ").append(toIndentedString(infoModuleData)).append("\n");
    sb.append("    linksModuleData: ").append(toIndentedString(linksModuleData)).append("\n");
    sb.append("    locations: ").append(toIndentedString(locations)).append("\n");
    sb.append("    messages: ").append(toIndentedString(messages)).append("\n");
    sb.append("    passConstraints: ").append(toIndentedString(passConstraints)).append("\n");
    sb.append("    passengerNames: ").append(toIndentedString(passengerNames)).append("\n");
    sb.append("    passengerType: ").append(toIndentedString(passengerType)).append("\n");
    sb.append("    purchaseDetails: ").append(toIndentedString(purchaseDetails)).append("\n");
    sb.append("    rotatingBarcode: ").append(toIndentedString(rotatingBarcode)).append("\n");
    sb.append("    smartTapRedemptionValue: ").append(toIndentedString(smartTapRedemptionValue)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    textModulesData: ").append(toIndentedString(textModulesData)).append("\n");
    sb.append("    ticketLeg: ").append(toIndentedString(ticketLeg)).append("\n");
    sb.append("    ticketLegs: ").append(toIndentedString(ticketLegs)).append("\n");
    sb.append("    ticketNumber: ").append(toIndentedString(ticketNumber)).append("\n");
    sb.append("    ticketRestrictions: ").append(toIndentedString(ticketRestrictions)).append("\n");
    sb.append("    ticketStatus: ").append(toIndentedString(ticketStatus)).append("\n");
    sb.append("    tripId: ").append(toIndentedString(tripId)).append("\n");
    sb.append("    tripType: ").append(toIndentedString(tripType)).append("\n");
    sb.append("    validTimeInterval: ").append(toIndentedString(validTimeInterval)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("activationStatus");
    openapiFields.add("appLinkData");
    openapiFields.add("barcode");
    openapiFields.add("classId");
    openapiFields.add("classReference");
    openapiFields.add("concessionCategory");
    openapiFields.add("customConcessionCategory");
    openapiFields.add("customTicketStatus");
    openapiFields.add("deviceContext");
    openapiFields.add("disableExpirationNotification");
    openapiFields.add("groupingInfo");
    openapiFields.add("hasLinkedDevice");
    openapiFields.add("hasUsers");
    openapiFields.add("heroImage");
    openapiFields.add("hexBackgroundColor");
    openapiFields.add("id");
    openapiFields.add("imageModulesData");
    openapiFields.add("infoModuleData");
    openapiFields.add("linksModuleData");
    openapiFields.add("locations");
    openapiFields.add("messages");
    openapiFields.add("passConstraints");
    openapiFields.add("passengerNames");
    openapiFields.add("passengerType");
    openapiFields.add("purchaseDetails");
    openapiFields.add("rotatingBarcode");
    openapiFields.add("smartTapRedemptionValue");
    openapiFields.add("state");
    openapiFields.add("textModulesData");
    openapiFields.add("ticketLeg");
    openapiFields.add("ticketLegs");
    openapiFields.add("ticketNumber");
    openapiFields.add("ticketRestrictions");
    openapiFields.add("ticketStatus");
    openapiFields.add("tripId");
    openapiFields.add("tripType");
    openapiFields.add("validTimeInterval");
    openapiFields.add("version");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TransitObject
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TransitObject.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TransitObject is not found in the empty JSON string", TransitObject.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TransitObject.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TransitObject` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `activationStatus`
      if (jsonObj.get("activationStatus") != null && !jsonObj.get("activationStatus").isJsonNull()) {
        ActivationStatus.validateJsonElement(jsonObj.get("activationStatus"));
      }
      // validate the optional field `appLinkData`
      if (jsonObj.get("appLinkData") != null && !jsonObj.get("appLinkData").isJsonNull()) {
        AppLinkData.validateJsonElement(jsonObj.get("appLinkData"));
      }
      // validate the optional field `barcode`
      if (jsonObj.get("barcode") != null && !jsonObj.get("barcode").isJsonNull()) {
        Barcode.validateJsonElement(jsonObj.get("barcode"));
      }
      if ((jsonObj.get("classId") != null && !jsonObj.get("classId").isJsonNull()) && !jsonObj.get("classId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `classId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("classId").toString()));
      }
      // validate the optional field `classReference`
      if (jsonObj.get("classReference") != null && !jsonObj.get("classReference").isJsonNull()) {
        TransitClass.validateJsonElement(jsonObj.get("classReference"));
      }
      if ((jsonObj.get("concessionCategory") != null && !jsonObj.get("concessionCategory").isJsonNull()) && !jsonObj.get("concessionCategory").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `concessionCategory` to be a primitive type in the JSON string but got `%s`", jsonObj.get("concessionCategory").toString()));
      }
      // validate the optional field `concessionCategory`
      if (jsonObj.get("concessionCategory") != null && !jsonObj.get("concessionCategory").isJsonNull()) {
        ConcessionCategoryEnum.validateJsonElement(jsonObj.get("concessionCategory"));
      }
      // validate the optional field `customConcessionCategory`
      if (jsonObj.get("customConcessionCategory") != null && !jsonObj.get("customConcessionCategory").isJsonNull()) {
        LocalizedString.validateJsonElement(jsonObj.get("customConcessionCategory"));
      }
      // validate the optional field `customTicketStatus`
      if (jsonObj.get("customTicketStatus") != null && !jsonObj.get("customTicketStatus").isJsonNull()) {
        LocalizedString.validateJsonElement(jsonObj.get("customTicketStatus"));
      }
      // validate the optional field `deviceContext`
      if (jsonObj.get("deviceContext") != null && !jsonObj.get("deviceContext").isJsonNull()) {
        DeviceContext.validateJsonElement(jsonObj.get("deviceContext"));
      }
      // validate the optional field `groupingInfo`
      if (jsonObj.get("groupingInfo") != null && !jsonObj.get("groupingInfo").isJsonNull()) {
        GroupingInfo.validateJsonElement(jsonObj.get("groupingInfo"));
      }
      // validate the optional field `heroImage`
      if (jsonObj.get("heroImage") != null && !jsonObj.get("heroImage").isJsonNull()) {
        Image.validateJsonElement(jsonObj.get("heroImage"));
      }
      if ((jsonObj.get("hexBackgroundColor") != null && !jsonObj.get("hexBackgroundColor").isJsonNull()) && !jsonObj.get("hexBackgroundColor").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hexBackgroundColor` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hexBackgroundColor").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (jsonObj.get("imageModulesData") != null && !jsonObj.get("imageModulesData").isJsonNull()) {
        JsonArray jsonArrayimageModulesData = jsonObj.getAsJsonArray("imageModulesData");
        if (jsonArrayimageModulesData != null) {
          // ensure the json data is an array
          if (!jsonObj.get("imageModulesData").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `imageModulesData` to be an array in the JSON string but got `%s`", jsonObj.get("imageModulesData").toString()));
          }

          // validate the optional field `imageModulesData` (array)
          for (int i = 0; i < jsonArrayimageModulesData.size(); i++) {
            ImageModuleData.validateJsonElement(jsonArrayimageModulesData.get(i));
          };
        }
      }
      // validate the optional field `infoModuleData`
      if (jsonObj.get("infoModuleData") != null && !jsonObj.get("infoModuleData").isJsonNull()) {
        InfoModuleData.validateJsonElement(jsonObj.get("infoModuleData"));
      }
      // validate the optional field `linksModuleData`
      if (jsonObj.get("linksModuleData") != null && !jsonObj.get("linksModuleData").isJsonNull()) {
        LinksModuleData.validateJsonElement(jsonObj.get("linksModuleData"));
      }
      if (jsonObj.get("locations") != null && !jsonObj.get("locations").isJsonNull()) {
        JsonArray jsonArraylocations = jsonObj.getAsJsonArray("locations");
        if (jsonArraylocations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("locations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `locations` to be an array in the JSON string but got `%s`", jsonObj.get("locations").toString()));
          }

          // validate the optional field `locations` (array)
          for (int i = 0; i < jsonArraylocations.size(); i++) {
            LatLongPoint.validateJsonElement(jsonArraylocations.get(i));
          };
        }
      }
      if (jsonObj.get("messages") != null && !jsonObj.get("messages").isJsonNull()) {
        JsonArray jsonArraymessages = jsonObj.getAsJsonArray("messages");
        if (jsonArraymessages != null) {
          // ensure the json data is an array
          if (!jsonObj.get("messages").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `messages` to be an array in the JSON string but got `%s`", jsonObj.get("messages").toString()));
          }

          // validate the optional field `messages` (array)
          for (int i = 0; i < jsonArraymessages.size(); i++) {
            Message.validateJsonElement(jsonArraymessages.get(i));
          };
        }
      }
      // validate the optional field `passConstraints`
      if (jsonObj.get("passConstraints") != null && !jsonObj.get("passConstraints").isJsonNull()) {
        PassConstraints.validateJsonElement(jsonObj.get("passConstraints"));
      }
      if ((jsonObj.get("passengerNames") != null && !jsonObj.get("passengerNames").isJsonNull()) && !jsonObj.get("passengerNames").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `passengerNames` to be a primitive type in the JSON string but got `%s`", jsonObj.get("passengerNames").toString()));
      }
      if ((jsonObj.get("passengerType") != null && !jsonObj.get("passengerType").isJsonNull()) && !jsonObj.get("passengerType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `passengerType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("passengerType").toString()));
      }
      // validate the optional field `passengerType`
      if (jsonObj.get("passengerType") != null && !jsonObj.get("passengerType").isJsonNull()) {
        PassengerTypeEnum.validateJsonElement(jsonObj.get("passengerType"));
      }
      // validate the optional field `purchaseDetails`
      if (jsonObj.get("purchaseDetails") != null && !jsonObj.get("purchaseDetails").isJsonNull()) {
        PurchaseDetails.validateJsonElement(jsonObj.get("purchaseDetails"));
      }
      // validate the optional field `rotatingBarcode`
      if (jsonObj.get("rotatingBarcode") != null && !jsonObj.get("rotatingBarcode").isJsonNull()) {
        RotatingBarcode.validateJsonElement(jsonObj.get("rotatingBarcode"));
      }
      if ((jsonObj.get("smartTapRedemptionValue") != null && !jsonObj.get("smartTapRedemptionValue").isJsonNull()) && !jsonObj.get("smartTapRedemptionValue").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `smartTapRedemptionValue` to be a primitive type in the JSON string but got `%s`", jsonObj.get("smartTapRedemptionValue").toString()));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        StateEnum.validateJsonElement(jsonObj.get("state"));
      }
      if (jsonObj.get("textModulesData") != null && !jsonObj.get("textModulesData").isJsonNull()) {
        JsonArray jsonArraytextModulesData = jsonObj.getAsJsonArray("textModulesData");
        if (jsonArraytextModulesData != null) {
          // ensure the json data is an array
          if (!jsonObj.get("textModulesData").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `textModulesData` to be an array in the JSON string but got `%s`", jsonObj.get("textModulesData").toString()));
          }

          // validate the optional field `textModulesData` (array)
          for (int i = 0; i < jsonArraytextModulesData.size(); i++) {
            TextModuleData.validateJsonElement(jsonArraytextModulesData.get(i));
          };
        }
      }
      // validate the optional field `ticketLeg`
      if (jsonObj.get("ticketLeg") != null && !jsonObj.get("ticketLeg").isJsonNull()) {
        TicketLeg.validateJsonElement(jsonObj.get("ticketLeg"));
      }
      if (jsonObj.get("ticketLegs") != null && !jsonObj.get("ticketLegs").isJsonNull()) {
        JsonArray jsonArrayticketLegs = jsonObj.getAsJsonArray("ticketLegs");
        if (jsonArrayticketLegs != null) {
          // ensure the json data is an array
          if (!jsonObj.get("ticketLegs").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `ticketLegs` to be an array in the JSON string but got `%s`", jsonObj.get("ticketLegs").toString()));
          }

          // validate the optional field `ticketLegs` (array)
          for (int i = 0; i < jsonArrayticketLegs.size(); i++) {
            TicketLeg.validateJsonElement(jsonArrayticketLegs.get(i));
          };
        }
      }
      if ((jsonObj.get("ticketNumber") != null && !jsonObj.get("ticketNumber").isJsonNull()) && !jsonObj.get("ticketNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ticketNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ticketNumber").toString()));
      }
      // validate the optional field `ticketRestrictions`
      if (jsonObj.get("ticketRestrictions") != null && !jsonObj.get("ticketRestrictions").isJsonNull()) {
        TicketRestrictions.validateJsonElement(jsonObj.get("ticketRestrictions"));
      }
      if ((jsonObj.get("ticketStatus") != null && !jsonObj.get("ticketStatus").isJsonNull()) && !jsonObj.get("ticketStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ticketStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ticketStatus").toString()));
      }
      // validate the optional field `ticketStatus`
      if (jsonObj.get("ticketStatus") != null && !jsonObj.get("ticketStatus").isJsonNull()) {
        TicketStatusEnum.validateJsonElement(jsonObj.get("ticketStatus"));
      }
      if ((jsonObj.get("tripId") != null && !jsonObj.get("tripId").isJsonNull()) && !jsonObj.get("tripId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tripId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tripId").toString()));
      }
      if ((jsonObj.get("tripType") != null && !jsonObj.get("tripType").isJsonNull()) && !jsonObj.get("tripType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tripType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tripType").toString()));
      }
      // validate the optional field `tripType`
      if (jsonObj.get("tripType") != null && !jsonObj.get("tripType").isJsonNull()) {
        TripTypeEnum.validateJsonElement(jsonObj.get("tripType"));
      }
      // validate the optional field `validTimeInterval`
      if (jsonObj.get("validTimeInterval") != null && !jsonObj.get("validTimeInterval").isJsonNull()) {
        TimeInterval.validateJsonElement(jsonObj.get("validTimeInterval"));
      }
      if ((jsonObj.get("version") != null && !jsonObj.get("version").isJsonNull()) && !jsonObj.get("version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("version").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TransitObject.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TransitObject' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TransitObject> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TransitObject.class));

       return (TypeAdapter<T>) new TypeAdapter<TransitObject>() {
           @Override
           public void write(JsonWriter out, TransitObject value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TransitObject read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TransitObject given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TransitObject
   * @throws IOException if the JSON string is invalid with respect to TransitObject
   */
  public static TransitObject fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TransitObject.class);
  }

  /**
   * Convert an instance of TransitObject to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

