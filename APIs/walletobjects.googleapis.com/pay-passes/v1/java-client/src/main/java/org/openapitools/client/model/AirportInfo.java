/*
 * Google Pay Passes API
 * API for issuers to save and manage Google Wallet Objects.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.LocalizedString;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AirportInfo
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:12:07.622305-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AirportInfo {
  public static final String SERIALIZED_NAME_AIRPORT_IATA_CODE = "airportIataCode";
  @SerializedName(SERIALIZED_NAME_AIRPORT_IATA_CODE)
  private String airportIataCode;

  public static final String SERIALIZED_NAME_AIRPORT_NAME_OVERRIDE = "airportNameOverride";
  @SerializedName(SERIALIZED_NAME_AIRPORT_NAME_OVERRIDE)
  private LocalizedString airportNameOverride;

  public static final String SERIALIZED_NAME_GATE = "gate";
  @SerializedName(SERIALIZED_NAME_GATE)
  private String gate;

  public static final String SERIALIZED_NAME_KIND = "kind";
  @SerializedName(SERIALIZED_NAME_KIND)
  private String kind;

  public static final String SERIALIZED_NAME_TERMINAL = "terminal";
  @SerializedName(SERIALIZED_NAME_TERMINAL)
  private String terminal;

  public AirportInfo() {
  }

  public AirportInfo airportIataCode(String airportIataCode) {
    this.airportIataCode = airportIataCode;
    return this;
  }

  /**
   * Three character IATA airport code. This is a required field for &#x60;origin&#x60; and &#x60;destination&#x60;. Eg: \&quot;SFO\&quot;
   * @return airportIataCode
   */
  @javax.annotation.Nullable
  public String getAirportIataCode() {
    return airportIataCode;
  }

  public void setAirportIataCode(String airportIataCode) {
    this.airportIataCode = airportIataCode;
  }


  public AirportInfo airportNameOverride(LocalizedString airportNameOverride) {
    this.airportNameOverride = airportNameOverride;
    return this;
  }

  /**
   * Get airportNameOverride
   * @return airportNameOverride
   */
  @javax.annotation.Nullable
  public LocalizedString getAirportNameOverride() {
    return airportNameOverride;
  }

  public void setAirportNameOverride(LocalizedString airportNameOverride) {
    this.airportNameOverride = airportNameOverride;
  }


  public AirportInfo gate(String gate) {
    this.gate = gate;
    return this;
  }

  /**
   * A name of the gate. Eg: \&quot;B59\&quot; or \&quot;59\&quot;
   * @return gate
   */
  @javax.annotation.Nullable
  public String getGate() {
    return gate;
  }

  public void setGate(String gate) {
    this.gate = gate;
  }


  public AirportInfo kind(String kind) {
    this.kind = kind;
    return this;
  }

  /**
   * Identifies what kind of resource this is. Value: the fixed string &#x60;\&quot;walletobjects#airportInfo\&quot;&#x60;.
   * @return kind
   */
  @javax.annotation.Nullable
  public String getKind() {
    return kind;
  }

  public void setKind(String kind) {
    this.kind = kind;
  }


  public AirportInfo terminal(String terminal) {
    this.terminal = terminal;
    return this;
  }

  /**
   * Terminal name. Eg: \&quot;INTL\&quot; or \&quot;I\&quot;
   * @return terminal
   */
  @javax.annotation.Nullable
  public String getTerminal() {
    return terminal;
  }

  public void setTerminal(String terminal) {
    this.terminal = terminal;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AirportInfo airportInfo = (AirportInfo) o;
    return Objects.equals(this.airportIataCode, airportInfo.airportIataCode) &&
        Objects.equals(this.airportNameOverride, airportInfo.airportNameOverride) &&
        Objects.equals(this.gate, airportInfo.gate) &&
        Objects.equals(this.kind, airportInfo.kind) &&
        Objects.equals(this.terminal, airportInfo.terminal);
  }

  @Override
  public int hashCode() {
    return Objects.hash(airportIataCode, airportNameOverride, gate, kind, terminal);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AirportInfo {\n");
    sb.append("    airportIataCode: ").append(toIndentedString(airportIataCode)).append("\n");
    sb.append("    airportNameOverride: ").append(toIndentedString(airportNameOverride)).append("\n");
    sb.append("    gate: ").append(toIndentedString(gate)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    terminal: ").append(toIndentedString(terminal)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("airportIataCode");
    openapiFields.add("airportNameOverride");
    openapiFields.add("gate");
    openapiFields.add("kind");
    openapiFields.add("terminal");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AirportInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AirportInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AirportInfo is not found in the empty JSON string", AirportInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AirportInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AirportInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("airportIataCode") != null && !jsonObj.get("airportIataCode").isJsonNull()) && !jsonObj.get("airportIataCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `airportIataCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("airportIataCode").toString()));
      }
      // validate the optional field `airportNameOverride`
      if (jsonObj.get("airportNameOverride") != null && !jsonObj.get("airportNameOverride").isJsonNull()) {
        LocalizedString.validateJsonElement(jsonObj.get("airportNameOverride"));
      }
      if ((jsonObj.get("gate") != null && !jsonObj.get("gate").isJsonNull()) && !jsonObj.get("gate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gate").toString()));
      }
      if ((jsonObj.get("kind") != null && !jsonObj.get("kind").isJsonNull()) && !jsonObj.get("kind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kind").toString()));
      }
      if ((jsonObj.get("terminal") != null && !jsonObj.get("terminal").isJsonNull()) && !jsonObj.get("terminal").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `terminal` to be a primitive type in the JSON string but got `%s`", jsonObj.get("terminal").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AirportInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AirportInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AirportInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AirportInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<AirportInfo>() {
           @Override
           public void write(JsonWriter out, AirportInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AirportInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AirportInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AirportInfo
   * @throws IOException if the JSON string is invalid with respect to AirportInfo
   */
  public static AirportInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AirportInfo.class);
  }

  /**
   * Convert an instance of AirportInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

