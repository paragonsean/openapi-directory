/*
 * Google Pay Passes API
 * API for issuers to save and manage Google Wallet Objects.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CallbackOptions;
import org.openapitools.client.model.ClassTemplateInfo;
import org.openapitools.client.model.ImageModuleData;
import org.openapitools.client.model.LinksModuleData;
import org.openapitools.client.model.SecurityAnimation;
import org.openapitools.client.model.TextModuleData;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Generic Class
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:12:07.622305-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GenericClass {
  public static final String SERIALIZED_NAME_CALLBACK_OPTIONS = "callbackOptions";
  @SerializedName(SERIALIZED_NAME_CALLBACK_OPTIONS)
  private CallbackOptions callbackOptions;

  public static final String SERIALIZED_NAME_CLASS_TEMPLATE_INFO = "classTemplateInfo";
  @SerializedName(SERIALIZED_NAME_CLASS_TEMPLATE_INFO)
  private ClassTemplateInfo classTemplateInfo;

  public static final String SERIALIZED_NAME_ENABLE_SMART_TAP = "enableSmartTap";
  @SerializedName(SERIALIZED_NAME_ENABLE_SMART_TAP)
  private Boolean enableSmartTap;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_IMAGE_MODULES_DATA = "imageModulesData";
  @SerializedName(SERIALIZED_NAME_IMAGE_MODULES_DATA)
  private List<ImageModuleData> imageModulesData = new ArrayList<>();

  public static final String SERIALIZED_NAME_LINKS_MODULE_DATA = "linksModuleData";
  @SerializedName(SERIALIZED_NAME_LINKS_MODULE_DATA)
  private LinksModuleData linksModuleData;

  /**
   * Identifies whether multiple users and devices will save the same object referencing this class.
   */
  @JsonAdapter(MultipleDevicesAndHoldersAllowedStatusEnum.Adapter.class)
  public enum MultipleDevicesAndHoldersAllowedStatusEnum {
    STATUS_UNSPECIFIED("STATUS_UNSPECIFIED"),
    
    MULTIPLE_HOLDERS("MULTIPLE_HOLDERS"),
    
    MULTIPLE_HOLDERS2("multipleHolders"),
    
    ONE_USER_ALL_DEVICES("ONE_USER_ALL_DEVICES"),
    
    ONE_USER_ALL_DEVICES2("oneUserAllDevices"),
    
    ONE_USER_ONE_DEVICE("ONE_USER_ONE_DEVICE"),
    
    ONE_USER_ONE_DEVICE2("oneUserOneDevice");

    private String value;

    MultipleDevicesAndHoldersAllowedStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MultipleDevicesAndHoldersAllowedStatusEnum fromValue(String value) {
      for (MultipleDevicesAndHoldersAllowedStatusEnum b : MultipleDevicesAndHoldersAllowedStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MultipleDevicesAndHoldersAllowedStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MultipleDevicesAndHoldersAllowedStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MultipleDevicesAndHoldersAllowedStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MultipleDevicesAndHoldersAllowedStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      MultipleDevicesAndHoldersAllowedStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MULTIPLE_DEVICES_AND_HOLDERS_ALLOWED_STATUS = "multipleDevicesAndHoldersAllowedStatus";
  @SerializedName(SERIALIZED_NAME_MULTIPLE_DEVICES_AND_HOLDERS_ALLOWED_STATUS)
  private MultipleDevicesAndHoldersAllowedStatusEnum multipleDevicesAndHoldersAllowedStatus;

  public static final String SERIALIZED_NAME_REDEMPTION_ISSUERS = "redemptionIssuers";
  @SerializedName(SERIALIZED_NAME_REDEMPTION_ISSUERS)
  private List<String> redemptionIssuers = new ArrayList<>();

  public static final String SERIALIZED_NAME_SECURITY_ANIMATION = "securityAnimation";
  @SerializedName(SERIALIZED_NAME_SECURITY_ANIMATION)
  private SecurityAnimation securityAnimation;

  public static final String SERIALIZED_NAME_TEXT_MODULES_DATA = "textModulesData";
  @SerializedName(SERIALIZED_NAME_TEXT_MODULES_DATA)
  private List<TextModuleData> textModulesData = new ArrayList<>();

  /**
   * View Unlock Requirement options for the generic pass.
   */
  @JsonAdapter(ViewUnlockRequirementEnum.Adapter.class)
  public enum ViewUnlockRequirementEnum {
    VIEW_UNLOCK_REQUIREMENT_UNSPECIFIED("VIEW_UNLOCK_REQUIREMENT_UNSPECIFIED"),
    
    UNLOCK_NOT_REQUIRED("UNLOCK_NOT_REQUIRED"),
    
    UNLOCK_REQUIRED_TO_VIEW("UNLOCK_REQUIRED_TO_VIEW");

    private String value;

    ViewUnlockRequirementEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ViewUnlockRequirementEnum fromValue(String value) {
      for (ViewUnlockRequirementEnum b : ViewUnlockRequirementEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ViewUnlockRequirementEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ViewUnlockRequirementEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ViewUnlockRequirementEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ViewUnlockRequirementEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ViewUnlockRequirementEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_VIEW_UNLOCK_REQUIREMENT = "viewUnlockRequirement";
  @SerializedName(SERIALIZED_NAME_VIEW_UNLOCK_REQUIREMENT)
  private ViewUnlockRequirementEnum viewUnlockRequirement;

  public GenericClass() {
  }

  public GenericClass callbackOptions(CallbackOptions callbackOptions) {
    this.callbackOptions = callbackOptions;
    return this;
  }

  /**
   * Get callbackOptions
   * @return callbackOptions
   */
  @javax.annotation.Nullable
  public CallbackOptions getCallbackOptions() {
    return callbackOptions;
  }

  public void setCallbackOptions(CallbackOptions callbackOptions) {
    this.callbackOptions = callbackOptions;
  }


  public GenericClass classTemplateInfo(ClassTemplateInfo classTemplateInfo) {
    this.classTemplateInfo = classTemplateInfo;
    return this;
  }

  /**
   * Get classTemplateInfo
   * @return classTemplateInfo
   */
  @javax.annotation.Nullable
  public ClassTemplateInfo getClassTemplateInfo() {
    return classTemplateInfo;
  }

  public void setClassTemplateInfo(ClassTemplateInfo classTemplateInfo) {
    this.classTemplateInfo = classTemplateInfo;
  }


  public GenericClass enableSmartTap(Boolean enableSmartTap) {
    this.enableSmartTap = enableSmartTap;
    return this;
  }

  /**
   * Available only to Smart Tap enabled partners. Contact support for additional guidance.
   * @return enableSmartTap
   */
  @javax.annotation.Nullable
  public Boolean getEnableSmartTap() {
    return enableSmartTap;
  }

  public void setEnableSmartTap(Boolean enableSmartTap) {
    this.enableSmartTap = enableSmartTap;
  }


  public GenericClass id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Required. The unique identifier for the class. This ID must be unique across all from an issuer. This value needs to follow the format &#x60;issuerID.identifier&#x60; where &#x60;issuerID&#x60; is issued by Google and &#x60;identifier&#x60; is chosen by you. The unique identifier can only include alphanumeric characters, &#x60;.&#x60;, &#x60;_&#x60;, or &#x60;-&#x60;.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public GenericClass imageModulesData(List<ImageModuleData> imageModulesData) {
    this.imageModulesData = imageModulesData;
    return this;
  }

  public GenericClass addImageModulesDataItem(ImageModuleData imageModulesDataItem) {
    if (this.imageModulesData == null) {
      this.imageModulesData = new ArrayList<>();
    }
    this.imageModulesData.add(imageModulesDataItem);
    return this;
  }

  /**
   * Image module data. If &#x60;imageModulesData&#x60; is also defined on the object, both will be displayed. Only one of the image from class and one from object level will be rendered when both set.
   * @return imageModulesData
   */
  @javax.annotation.Nullable
  public List<ImageModuleData> getImageModulesData() {
    return imageModulesData;
  }

  public void setImageModulesData(List<ImageModuleData> imageModulesData) {
    this.imageModulesData = imageModulesData;
  }


  public GenericClass linksModuleData(LinksModuleData linksModuleData) {
    this.linksModuleData = linksModuleData;
    return this;
  }

  /**
   * Get linksModuleData
   * @return linksModuleData
   */
  @javax.annotation.Nullable
  public LinksModuleData getLinksModuleData() {
    return linksModuleData;
  }

  public void setLinksModuleData(LinksModuleData linksModuleData) {
    this.linksModuleData = linksModuleData;
  }


  public GenericClass multipleDevicesAndHoldersAllowedStatus(MultipleDevicesAndHoldersAllowedStatusEnum multipleDevicesAndHoldersAllowedStatus) {
    this.multipleDevicesAndHoldersAllowedStatus = multipleDevicesAndHoldersAllowedStatus;
    return this;
  }

  /**
   * Identifies whether multiple users and devices will save the same object referencing this class.
   * @return multipleDevicesAndHoldersAllowedStatus
   */
  @javax.annotation.Nullable
  public MultipleDevicesAndHoldersAllowedStatusEnum getMultipleDevicesAndHoldersAllowedStatus() {
    return multipleDevicesAndHoldersAllowedStatus;
  }

  public void setMultipleDevicesAndHoldersAllowedStatus(MultipleDevicesAndHoldersAllowedStatusEnum multipleDevicesAndHoldersAllowedStatus) {
    this.multipleDevicesAndHoldersAllowedStatus = multipleDevicesAndHoldersAllowedStatus;
  }


  public GenericClass redemptionIssuers(List<String> redemptionIssuers) {
    this.redemptionIssuers = redemptionIssuers;
    return this;
  }

  public GenericClass addRedemptionIssuersItem(String redemptionIssuersItem) {
    if (this.redemptionIssuers == null) {
      this.redemptionIssuers = new ArrayList<>();
    }
    this.redemptionIssuers.add(redemptionIssuersItem);
    return this;
  }

  /**
   * Identifies which redemption issuers can redeem the pass over Smart Tap. Redemption issuers are identified by their issuer ID. Redemption issuers must have at least one Smart Tap key configured. The &#x60;enableSmartTap&#x60; and object level &#x60;smartTapRedemptionLevel&#x60; fields must also be set up correctly in order for a pass to support Smart Tap.
   * @return redemptionIssuers
   */
  @javax.annotation.Nullable
  public List<String> getRedemptionIssuers() {
    return redemptionIssuers;
  }

  public void setRedemptionIssuers(List<String> redemptionIssuers) {
    this.redemptionIssuers = redemptionIssuers;
  }


  public GenericClass securityAnimation(SecurityAnimation securityAnimation) {
    this.securityAnimation = securityAnimation;
    return this;
  }

  /**
   * Get securityAnimation
   * @return securityAnimation
   */
  @javax.annotation.Nullable
  public SecurityAnimation getSecurityAnimation() {
    return securityAnimation;
  }

  public void setSecurityAnimation(SecurityAnimation securityAnimation) {
    this.securityAnimation = securityAnimation;
  }


  public GenericClass textModulesData(List<TextModuleData> textModulesData) {
    this.textModulesData = textModulesData;
    return this;
  }

  public GenericClass addTextModulesDataItem(TextModuleData textModulesDataItem) {
    if (this.textModulesData == null) {
      this.textModulesData = new ArrayList<>();
    }
    this.textModulesData.add(textModulesDataItem);
    return this;
  }

  /**
   * Text module data. If &#x60;textModulesData&#x60; is also defined on the object, both will be displayed. The maximum number of these fields displayed is 10 from class and 10 from object.
   * @return textModulesData
   */
  @javax.annotation.Nullable
  public List<TextModuleData> getTextModulesData() {
    return textModulesData;
  }

  public void setTextModulesData(List<TextModuleData> textModulesData) {
    this.textModulesData = textModulesData;
  }


  public GenericClass viewUnlockRequirement(ViewUnlockRequirementEnum viewUnlockRequirement) {
    this.viewUnlockRequirement = viewUnlockRequirement;
    return this;
  }

  /**
   * View Unlock Requirement options for the generic pass.
   * @return viewUnlockRequirement
   */
  @javax.annotation.Nullable
  public ViewUnlockRequirementEnum getViewUnlockRequirement() {
    return viewUnlockRequirement;
  }

  public void setViewUnlockRequirement(ViewUnlockRequirementEnum viewUnlockRequirement) {
    this.viewUnlockRequirement = viewUnlockRequirement;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GenericClass genericClass = (GenericClass) o;
    return Objects.equals(this.callbackOptions, genericClass.callbackOptions) &&
        Objects.equals(this.classTemplateInfo, genericClass.classTemplateInfo) &&
        Objects.equals(this.enableSmartTap, genericClass.enableSmartTap) &&
        Objects.equals(this.id, genericClass.id) &&
        Objects.equals(this.imageModulesData, genericClass.imageModulesData) &&
        Objects.equals(this.linksModuleData, genericClass.linksModuleData) &&
        Objects.equals(this.multipleDevicesAndHoldersAllowedStatus, genericClass.multipleDevicesAndHoldersAllowedStatus) &&
        Objects.equals(this.redemptionIssuers, genericClass.redemptionIssuers) &&
        Objects.equals(this.securityAnimation, genericClass.securityAnimation) &&
        Objects.equals(this.textModulesData, genericClass.textModulesData) &&
        Objects.equals(this.viewUnlockRequirement, genericClass.viewUnlockRequirement);
  }

  @Override
  public int hashCode() {
    return Objects.hash(callbackOptions, classTemplateInfo, enableSmartTap, id, imageModulesData, linksModuleData, multipleDevicesAndHoldersAllowedStatus, redemptionIssuers, securityAnimation, textModulesData, viewUnlockRequirement);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GenericClass {\n");
    sb.append("    callbackOptions: ").append(toIndentedString(callbackOptions)).append("\n");
    sb.append("    classTemplateInfo: ").append(toIndentedString(classTemplateInfo)).append("\n");
    sb.append("    enableSmartTap: ").append(toIndentedString(enableSmartTap)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    imageModulesData: ").append(toIndentedString(imageModulesData)).append("\n");
    sb.append("    linksModuleData: ").append(toIndentedString(linksModuleData)).append("\n");
    sb.append("    multipleDevicesAndHoldersAllowedStatus: ").append(toIndentedString(multipleDevicesAndHoldersAllowedStatus)).append("\n");
    sb.append("    redemptionIssuers: ").append(toIndentedString(redemptionIssuers)).append("\n");
    sb.append("    securityAnimation: ").append(toIndentedString(securityAnimation)).append("\n");
    sb.append("    textModulesData: ").append(toIndentedString(textModulesData)).append("\n");
    sb.append("    viewUnlockRequirement: ").append(toIndentedString(viewUnlockRequirement)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("callbackOptions");
    openapiFields.add("classTemplateInfo");
    openapiFields.add("enableSmartTap");
    openapiFields.add("id");
    openapiFields.add("imageModulesData");
    openapiFields.add("linksModuleData");
    openapiFields.add("multipleDevicesAndHoldersAllowedStatus");
    openapiFields.add("redemptionIssuers");
    openapiFields.add("securityAnimation");
    openapiFields.add("textModulesData");
    openapiFields.add("viewUnlockRequirement");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GenericClass
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GenericClass.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GenericClass is not found in the empty JSON string", GenericClass.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GenericClass.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GenericClass` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `callbackOptions`
      if (jsonObj.get("callbackOptions") != null && !jsonObj.get("callbackOptions").isJsonNull()) {
        CallbackOptions.validateJsonElement(jsonObj.get("callbackOptions"));
      }
      // validate the optional field `classTemplateInfo`
      if (jsonObj.get("classTemplateInfo") != null && !jsonObj.get("classTemplateInfo").isJsonNull()) {
        ClassTemplateInfo.validateJsonElement(jsonObj.get("classTemplateInfo"));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (jsonObj.get("imageModulesData") != null && !jsonObj.get("imageModulesData").isJsonNull()) {
        JsonArray jsonArrayimageModulesData = jsonObj.getAsJsonArray("imageModulesData");
        if (jsonArrayimageModulesData != null) {
          // ensure the json data is an array
          if (!jsonObj.get("imageModulesData").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `imageModulesData` to be an array in the JSON string but got `%s`", jsonObj.get("imageModulesData").toString()));
          }

          // validate the optional field `imageModulesData` (array)
          for (int i = 0; i < jsonArrayimageModulesData.size(); i++) {
            ImageModuleData.validateJsonElement(jsonArrayimageModulesData.get(i));
          };
        }
      }
      // validate the optional field `linksModuleData`
      if (jsonObj.get("linksModuleData") != null && !jsonObj.get("linksModuleData").isJsonNull()) {
        LinksModuleData.validateJsonElement(jsonObj.get("linksModuleData"));
      }
      if ((jsonObj.get("multipleDevicesAndHoldersAllowedStatus") != null && !jsonObj.get("multipleDevicesAndHoldersAllowedStatus").isJsonNull()) && !jsonObj.get("multipleDevicesAndHoldersAllowedStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `multipleDevicesAndHoldersAllowedStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("multipleDevicesAndHoldersAllowedStatus").toString()));
      }
      // validate the optional field `multipleDevicesAndHoldersAllowedStatus`
      if (jsonObj.get("multipleDevicesAndHoldersAllowedStatus") != null && !jsonObj.get("multipleDevicesAndHoldersAllowedStatus").isJsonNull()) {
        MultipleDevicesAndHoldersAllowedStatusEnum.validateJsonElement(jsonObj.get("multipleDevicesAndHoldersAllowedStatus"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("redemptionIssuers") != null && !jsonObj.get("redemptionIssuers").isJsonNull() && !jsonObj.get("redemptionIssuers").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `redemptionIssuers` to be an array in the JSON string but got `%s`", jsonObj.get("redemptionIssuers").toString()));
      }
      // validate the optional field `securityAnimation`
      if (jsonObj.get("securityAnimation") != null && !jsonObj.get("securityAnimation").isJsonNull()) {
        SecurityAnimation.validateJsonElement(jsonObj.get("securityAnimation"));
      }
      if (jsonObj.get("textModulesData") != null && !jsonObj.get("textModulesData").isJsonNull()) {
        JsonArray jsonArraytextModulesData = jsonObj.getAsJsonArray("textModulesData");
        if (jsonArraytextModulesData != null) {
          // ensure the json data is an array
          if (!jsonObj.get("textModulesData").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `textModulesData` to be an array in the JSON string but got `%s`", jsonObj.get("textModulesData").toString()));
          }

          // validate the optional field `textModulesData` (array)
          for (int i = 0; i < jsonArraytextModulesData.size(); i++) {
            TextModuleData.validateJsonElement(jsonArraytextModulesData.get(i));
          };
        }
      }
      if ((jsonObj.get("viewUnlockRequirement") != null && !jsonObj.get("viewUnlockRequirement").isJsonNull()) && !jsonObj.get("viewUnlockRequirement").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `viewUnlockRequirement` to be a primitive type in the JSON string but got `%s`", jsonObj.get("viewUnlockRequirement").toString()));
      }
      // validate the optional field `viewUnlockRequirement`
      if (jsonObj.get("viewUnlockRequirement") != null && !jsonObj.get("viewUnlockRequirement").isJsonNull()) {
        ViewUnlockRequirementEnum.validateJsonElement(jsonObj.get("viewUnlockRequirement"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GenericClass.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GenericClass' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GenericClass> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GenericClass.class));

       return (TypeAdapter<T>) new TypeAdapter<GenericClass>() {
           @Override
           public void write(JsonWriter out, GenericClass value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GenericClass read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GenericClass given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GenericClass
   * @throws IOException if the JSON string is invalid with respect to GenericClass
   */
  public static GenericClass fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GenericClass.class);
  }

  /**
   * Convert an instance of GenericClass to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

