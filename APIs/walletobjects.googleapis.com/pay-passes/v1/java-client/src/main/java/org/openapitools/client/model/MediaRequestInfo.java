/*
 * Google Pay Passes API
 * API for issuers to save and manage Google Wallet Objects.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Extra information added to operations that support Scotty media requests.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:12:07.622305-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MediaRequestInfo {
  public static final String SERIALIZED_NAME_CURRENT_BYTES = "currentBytes";
  @SerializedName(SERIALIZED_NAME_CURRENT_BYTES)
  private String currentBytes;

  public static final String SERIALIZED_NAME_CUSTOM_DATA = "customData";
  @SerializedName(SERIALIZED_NAME_CUSTOM_DATA)
  private String customData;

  public static final String SERIALIZED_NAME_DIFF_OBJECT_VERSION = "diffObjectVersion";
  @SerializedName(SERIALIZED_NAME_DIFF_OBJECT_VERSION)
  private String diffObjectVersion;

  public static final String SERIALIZED_NAME_FINAL_STATUS = "finalStatus";
  @SerializedName(SERIALIZED_NAME_FINAL_STATUS)
  private Integer finalStatus;

  /**
   * The type of notification received from Scotty.
   */
  @JsonAdapter(NotificationTypeEnum.Adapter.class)
  public enum NotificationTypeEnum {
    START("START"),
    
    PROGRESS("PROGRESS"),
    
    END("END"),
    
    RESPONSE_SENT("RESPONSE_SENT"),
    
    ERROR("ERROR");

    private String value;

    NotificationTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static NotificationTypeEnum fromValue(String value) {
      for (NotificationTypeEnum b : NotificationTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<NotificationTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final NotificationTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public NotificationTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return NotificationTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      NotificationTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_NOTIFICATION_TYPE = "notificationType";
  @SerializedName(SERIALIZED_NAME_NOTIFICATION_TYPE)
  private NotificationTypeEnum notificationType;

  public static final String SERIALIZED_NAME_REQUEST_ID = "requestId";
  @SerializedName(SERIALIZED_NAME_REQUEST_ID)
  private String requestId;

  public static final String SERIALIZED_NAME_TOTAL_BYTES = "totalBytes";
  @SerializedName(SERIALIZED_NAME_TOTAL_BYTES)
  private String totalBytes;

  public static final String SERIALIZED_NAME_TOTAL_BYTES_IS_ESTIMATED = "totalBytesIsEstimated";
  @SerializedName(SERIALIZED_NAME_TOTAL_BYTES_IS_ESTIMATED)
  private Boolean totalBytesIsEstimated;

  public MediaRequestInfo() {
  }

  public MediaRequestInfo currentBytes(String currentBytes) {
    this.currentBytes = currentBytes;
    return this;
  }

  /**
   * The number of current bytes uploaded or downloaded.
   * @return currentBytes
   */
  @javax.annotation.Nullable
  public String getCurrentBytes() {
    return currentBytes;
  }

  public void setCurrentBytes(String currentBytes) {
    this.currentBytes = currentBytes;
  }


  public MediaRequestInfo customData(String customData) {
    this.customData = customData;
    return this;
  }

  /**
   * Data to be copied to backend requests. Custom data is returned to Scotty in the agent_state field, which Scotty will then provide in subsequent upload notifications.
   * @return customData
   */
  @javax.annotation.Nullable
  public String getCustomData() {
    return customData;
  }

  public void setCustomData(String customData) {
    this.customData = customData;
  }


  public MediaRequestInfo diffObjectVersion(String diffObjectVersion) {
    this.diffObjectVersion = diffObjectVersion;
    return this;
  }

  /**
   * Set if the http request info is diff encoded. The value of this field is the version number of the base revision. This is corresponding to Apiary&#39;s mediaDiffObjectVersion (//depot/google3/java/com/google/api/server/media/variable/DiffObjectVersionVariable.java). See go/esf-scotty-diff-upload for more information.
   * @return diffObjectVersion
   */
  @javax.annotation.Nullable
  public String getDiffObjectVersion() {
    return diffObjectVersion;
  }

  public void setDiffObjectVersion(String diffObjectVersion) {
    this.diffObjectVersion = diffObjectVersion;
  }


  public MediaRequestInfo finalStatus(Integer finalStatus) {
    this.finalStatus = finalStatus;
    return this;
  }

  /**
   * The existence of the final_status field indicates that this is the last call to the agent for this request_id. http://google3/uploader/agent/scotty_agent.proto?l&#x3D;737&amp;rcl&#x3D;347601929
   * @return finalStatus
   */
  @javax.annotation.Nullable
  public Integer getFinalStatus() {
    return finalStatus;
  }

  public void setFinalStatus(Integer finalStatus) {
    this.finalStatus = finalStatus;
  }


  public MediaRequestInfo notificationType(NotificationTypeEnum notificationType) {
    this.notificationType = notificationType;
    return this;
  }

  /**
   * The type of notification received from Scotty.
   * @return notificationType
   */
  @javax.annotation.Nullable
  public NotificationTypeEnum getNotificationType() {
    return notificationType;
  }

  public void setNotificationType(NotificationTypeEnum notificationType) {
    this.notificationType = notificationType;
  }


  public MediaRequestInfo requestId(String requestId) {
    this.requestId = requestId;
    return this;
  }

  /**
   * The Scotty request ID.
   * @return requestId
   */
  @javax.annotation.Nullable
  public String getRequestId() {
    return requestId;
  }

  public void setRequestId(String requestId) {
    this.requestId = requestId;
  }


  public MediaRequestInfo totalBytes(String totalBytes) {
    this.totalBytes = totalBytes;
    return this;
  }

  /**
   * The total size of the file.
   * @return totalBytes
   */
  @javax.annotation.Nullable
  public String getTotalBytes() {
    return totalBytes;
  }

  public void setTotalBytes(String totalBytes) {
    this.totalBytes = totalBytes;
  }


  public MediaRequestInfo totalBytesIsEstimated(Boolean totalBytesIsEstimated) {
    this.totalBytesIsEstimated = totalBytesIsEstimated;
    return this;
  }

  /**
   * Whether the total bytes field contains an estimated data.
   * @return totalBytesIsEstimated
   */
  @javax.annotation.Nullable
  public Boolean getTotalBytesIsEstimated() {
    return totalBytesIsEstimated;
  }

  public void setTotalBytesIsEstimated(Boolean totalBytesIsEstimated) {
    this.totalBytesIsEstimated = totalBytesIsEstimated;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MediaRequestInfo mediaRequestInfo = (MediaRequestInfo) o;
    return Objects.equals(this.currentBytes, mediaRequestInfo.currentBytes) &&
        Objects.equals(this.customData, mediaRequestInfo.customData) &&
        Objects.equals(this.diffObjectVersion, mediaRequestInfo.diffObjectVersion) &&
        Objects.equals(this.finalStatus, mediaRequestInfo.finalStatus) &&
        Objects.equals(this.notificationType, mediaRequestInfo.notificationType) &&
        Objects.equals(this.requestId, mediaRequestInfo.requestId) &&
        Objects.equals(this.totalBytes, mediaRequestInfo.totalBytes) &&
        Objects.equals(this.totalBytesIsEstimated, mediaRequestInfo.totalBytesIsEstimated);
  }

  @Override
  public int hashCode() {
    return Objects.hash(currentBytes, customData, diffObjectVersion, finalStatus, notificationType, requestId, totalBytes, totalBytesIsEstimated);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MediaRequestInfo {\n");
    sb.append("    currentBytes: ").append(toIndentedString(currentBytes)).append("\n");
    sb.append("    customData: ").append(toIndentedString(customData)).append("\n");
    sb.append("    diffObjectVersion: ").append(toIndentedString(diffObjectVersion)).append("\n");
    sb.append("    finalStatus: ").append(toIndentedString(finalStatus)).append("\n");
    sb.append("    notificationType: ").append(toIndentedString(notificationType)).append("\n");
    sb.append("    requestId: ").append(toIndentedString(requestId)).append("\n");
    sb.append("    totalBytes: ").append(toIndentedString(totalBytes)).append("\n");
    sb.append("    totalBytesIsEstimated: ").append(toIndentedString(totalBytesIsEstimated)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("currentBytes");
    openapiFields.add("customData");
    openapiFields.add("diffObjectVersion");
    openapiFields.add("finalStatus");
    openapiFields.add("notificationType");
    openapiFields.add("requestId");
    openapiFields.add("totalBytes");
    openapiFields.add("totalBytesIsEstimated");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MediaRequestInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MediaRequestInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MediaRequestInfo is not found in the empty JSON string", MediaRequestInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MediaRequestInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MediaRequestInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("currentBytes") != null && !jsonObj.get("currentBytes").isJsonNull()) && !jsonObj.get("currentBytes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currentBytes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currentBytes").toString()));
      }
      if ((jsonObj.get("customData") != null && !jsonObj.get("customData").isJsonNull()) && !jsonObj.get("customData").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customData` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customData").toString()));
      }
      if ((jsonObj.get("diffObjectVersion") != null && !jsonObj.get("diffObjectVersion").isJsonNull()) && !jsonObj.get("diffObjectVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `diffObjectVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("diffObjectVersion").toString()));
      }
      if ((jsonObj.get("notificationType") != null && !jsonObj.get("notificationType").isJsonNull()) && !jsonObj.get("notificationType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `notificationType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("notificationType").toString()));
      }
      // validate the optional field `notificationType`
      if (jsonObj.get("notificationType") != null && !jsonObj.get("notificationType").isJsonNull()) {
        NotificationTypeEnum.validateJsonElement(jsonObj.get("notificationType"));
      }
      if ((jsonObj.get("requestId") != null && !jsonObj.get("requestId").isJsonNull()) && !jsonObj.get("requestId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `requestId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("requestId").toString()));
      }
      if ((jsonObj.get("totalBytes") != null && !jsonObj.get("totalBytes").isJsonNull()) && !jsonObj.get("totalBytes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `totalBytes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("totalBytes").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MediaRequestInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MediaRequestInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MediaRequestInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MediaRequestInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<MediaRequestInfo>() {
           @Override
           public void write(JsonWriter out, MediaRequestInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MediaRequestInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MediaRequestInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MediaRequestInfo
   * @throws IOException if the JSON string is invalid with respect to MediaRequestInfo
   */
  public static MediaRequestInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MediaRequestInfo.class);
  }

  /**
   * Convert an instance of MediaRequestInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

