/*
 * Google Pay Passes API
 * API for issuers to save and manage Google Wallet Objects.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.LocalizedString;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Data for Text module. All fields are optional. Header will be displayed if available, different types of bodies will be concatenated if they are defined.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:12:07.622305-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TextModuleData {
  public static final String SERIALIZED_NAME_BODY = "body";
  @SerializedName(SERIALIZED_NAME_BODY)
  private String body;

  public static final String SERIALIZED_NAME_HEADER = "header";
  @SerializedName(SERIALIZED_NAME_HEADER)
  private String header;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_LOCALIZED_BODY = "localizedBody";
  @SerializedName(SERIALIZED_NAME_LOCALIZED_BODY)
  private LocalizedString localizedBody;

  public static final String SERIALIZED_NAME_LOCALIZED_HEADER = "localizedHeader";
  @SerializedName(SERIALIZED_NAME_LOCALIZED_HEADER)
  private LocalizedString localizedHeader;

  public TextModuleData() {
  }

  public TextModuleData body(String body) {
    this.body = body;
    return this;
  }

  /**
   * The body of the Text Module, which is defined as an uninterrupted string. Recommended maximum length is 500 characters to ensure full string is displayed on smaller screens.
   * @return body
   */
  @javax.annotation.Nullable
  public String getBody() {
    return body;
  }

  public void setBody(String body) {
    this.body = body;
  }


  public TextModuleData header(String header) {
    this.header = header;
    return this;
  }

  /**
   * The header of the Text Module. Recommended maximum length is 35 characters to ensure full string is displayed on smaller screens.
   * @return header
   */
  @javax.annotation.Nullable
  public String getHeader() {
    return header;
  }

  public void setHeader(String header) {
    this.header = header;
  }


  public TextModuleData id(String id) {
    this.id = id;
    return this;
  }

  /**
   * The ID associated with a text module. This field is here to enable ease of management of text modules.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public TextModuleData localizedBody(LocalizedString localizedBody) {
    this.localizedBody = localizedBody;
    return this;
  }

  /**
   * Get localizedBody
   * @return localizedBody
   */
  @javax.annotation.Nullable
  public LocalizedString getLocalizedBody() {
    return localizedBody;
  }

  public void setLocalizedBody(LocalizedString localizedBody) {
    this.localizedBody = localizedBody;
  }


  public TextModuleData localizedHeader(LocalizedString localizedHeader) {
    this.localizedHeader = localizedHeader;
    return this;
  }

  /**
   * Get localizedHeader
   * @return localizedHeader
   */
  @javax.annotation.Nullable
  public LocalizedString getLocalizedHeader() {
    return localizedHeader;
  }

  public void setLocalizedHeader(LocalizedString localizedHeader) {
    this.localizedHeader = localizedHeader;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TextModuleData textModuleData = (TextModuleData) o;
    return Objects.equals(this.body, textModuleData.body) &&
        Objects.equals(this.header, textModuleData.header) &&
        Objects.equals(this.id, textModuleData.id) &&
        Objects.equals(this.localizedBody, textModuleData.localizedBody) &&
        Objects.equals(this.localizedHeader, textModuleData.localizedHeader);
  }

  @Override
  public int hashCode() {
    return Objects.hash(body, header, id, localizedBody, localizedHeader);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TextModuleData {\n");
    sb.append("    body: ").append(toIndentedString(body)).append("\n");
    sb.append("    header: ").append(toIndentedString(header)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    localizedBody: ").append(toIndentedString(localizedBody)).append("\n");
    sb.append("    localizedHeader: ").append(toIndentedString(localizedHeader)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("body");
    openapiFields.add("header");
    openapiFields.add("id");
    openapiFields.add("localizedBody");
    openapiFields.add("localizedHeader");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TextModuleData
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TextModuleData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TextModuleData is not found in the empty JSON string", TextModuleData.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TextModuleData.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TextModuleData` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("body") != null && !jsonObj.get("body").isJsonNull()) && !jsonObj.get("body").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `body` to be a primitive type in the JSON string but got `%s`", jsonObj.get("body").toString()));
      }
      if ((jsonObj.get("header") != null && !jsonObj.get("header").isJsonNull()) && !jsonObj.get("header").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `header` to be a primitive type in the JSON string but got `%s`", jsonObj.get("header").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // validate the optional field `localizedBody`
      if (jsonObj.get("localizedBody") != null && !jsonObj.get("localizedBody").isJsonNull()) {
        LocalizedString.validateJsonElement(jsonObj.get("localizedBody"));
      }
      // validate the optional field `localizedHeader`
      if (jsonObj.get("localizedHeader") != null && !jsonObj.get("localizedHeader").isJsonNull()) {
        LocalizedString.validateJsonElement(jsonObj.get("localizedHeader"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TextModuleData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TextModuleData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TextModuleData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TextModuleData.class));

       return (TypeAdapter<T>) new TypeAdapter<TextModuleData>() {
           @Override
           public void write(JsonWriter out, TextModuleData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TextModuleData read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TextModuleData given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TextModuleData
   * @throws IOException if the JSON string is invalid with respect to TextModuleData
   */
  public static TextModuleData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TextModuleData.class);
  }

  /**
   * Convert an instance of TextModuleData to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

