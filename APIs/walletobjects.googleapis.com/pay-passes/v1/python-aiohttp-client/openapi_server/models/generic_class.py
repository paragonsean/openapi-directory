# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.callback_options import CallbackOptions
from openapi_server.models.class_template_info import ClassTemplateInfo
from openapi_server.models.image_module_data import ImageModuleData
from openapi_server.models.links_module_data import LinksModuleData
from openapi_server.models.security_animation import SecurityAnimation
from openapi_server.models.text_module_data import TextModuleData
from openapi_server import util


class GenericClass(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, callback_options: CallbackOptions=None, class_template_info: ClassTemplateInfo=None, enable_smart_tap: bool=None, id: str=None, image_modules_data: List[ImageModuleData]=None, links_module_data: LinksModuleData=None, multiple_devices_and_holders_allowed_status: str=None, redemption_issuers: List[str]=None, security_animation: SecurityAnimation=None, text_modules_data: List[TextModuleData]=None, view_unlock_requirement: str=None):
        """GenericClass - a model defined in OpenAPI

        :param callback_options: The callback_options of this GenericClass.
        :param class_template_info: The class_template_info of this GenericClass.
        :param enable_smart_tap: The enable_smart_tap of this GenericClass.
        :param id: The id of this GenericClass.
        :param image_modules_data: The image_modules_data of this GenericClass.
        :param links_module_data: The links_module_data of this GenericClass.
        :param multiple_devices_and_holders_allowed_status: The multiple_devices_and_holders_allowed_status of this GenericClass.
        :param redemption_issuers: The redemption_issuers of this GenericClass.
        :param security_animation: The security_animation of this GenericClass.
        :param text_modules_data: The text_modules_data of this GenericClass.
        :param view_unlock_requirement: The view_unlock_requirement of this GenericClass.
        """
        self.openapi_types = {
            'callback_options': CallbackOptions,
            'class_template_info': ClassTemplateInfo,
            'enable_smart_tap': bool,
            'id': str,
            'image_modules_data': List[ImageModuleData],
            'links_module_data': LinksModuleData,
            'multiple_devices_and_holders_allowed_status': str,
            'redemption_issuers': List[str],
            'security_animation': SecurityAnimation,
            'text_modules_data': List[TextModuleData],
            'view_unlock_requirement': str
        }

        self.attribute_map = {
            'callback_options': 'callbackOptions',
            'class_template_info': 'classTemplateInfo',
            'enable_smart_tap': 'enableSmartTap',
            'id': 'id',
            'image_modules_data': 'imageModulesData',
            'links_module_data': 'linksModuleData',
            'multiple_devices_and_holders_allowed_status': 'multipleDevicesAndHoldersAllowedStatus',
            'redemption_issuers': 'redemptionIssuers',
            'security_animation': 'securityAnimation',
            'text_modules_data': 'textModulesData',
            'view_unlock_requirement': 'viewUnlockRequirement'
        }

        self._callback_options = callback_options
        self._class_template_info = class_template_info
        self._enable_smart_tap = enable_smart_tap
        self._id = id
        self._image_modules_data = image_modules_data
        self._links_module_data = links_module_data
        self._multiple_devices_and_holders_allowed_status = multiple_devices_and_holders_allowed_status
        self._redemption_issuers = redemption_issuers
        self._security_animation = security_animation
        self._text_modules_data = text_modules_data
        self._view_unlock_requirement = view_unlock_requirement

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GenericClass':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GenericClass of this GenericClass.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def callback_options(self):
        """Gets the callback_options of this GenericClass.


        :return: The callback_options of this GenericClass.
        :rtype: CallbackOptions
        """
        return self._callback_options

    @callback_options.setter
    def callback_options(self, callback_options):
        """Sets the callback_options of this GenericClass.


        :param callback_options: The callback_options of this GenericClass.
        :type callback_options: CallbackOptions
        """

        self._callback_options = callback_options

    @property
    def class_template_info(self):
        """Gets the class_template_info of this GenericClass.


        :return: The class_template_info of this GenericClass.
        :rtype: ClassTemplateInfo
        """
        return self._class_template_info

    @class_template_info.setter
    def class_template_info(self, class_template_info):
        """Sets the class_template_info of this GenericClass.


        :param class_template_info: The class_template_info of this GenericClass.
        :type class_template_info: ClassTemplateInfo
        """

        self._class_template_info = class_template_info

    @property
    def enable_smart_tap(self):
        """Gets the enable_smart_tap of this GenericClass.

        Available only to Smart Tap enabled partners. Contact support for additional guidance.

        :return: The enable_smart_tap of this GenericClass.
        :rtype: bool
        """
        return self._enable_smart_tap

    @enable_smart_tap.setter
    def enable_smart_tap(self, enable_smart_tap):
        """Sets the enable_smart_tap of this GenericClass.

        Available only to Smart Tap enabled partners. Contact support for additional guidance.

        :param enable_smart_tap: The enable_smart_tap of this GenericClass.
        :type enable_smart_tap: bool
        """

        self._enable_smart_tap = enable_smart_tap

    @property
    def id(self):
        """Gets the id of this GenericClass.

        Required. The unique identifier for the class. This ID must be unique across all from an issuer. This value needs to follow the format `issuerID.identifier` where `issuerID` is issued by Google and `identifier` is chosen by you. The unique identifier can only include alphanumeric characters, `.`, `_`, or `-`.

        :return: The id of this GenericClass.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GenericClass.

        Required. The unique identifier for the class. This ID must be unique across all from an issuer. This value needs to follow the format `issuerID.identifier` where `issuerID` is issued by Google and `identifier` is chosen by you. The unique identifier can only include alphanumeric characters, `.`, `_`, or `-`.

        :param id: The id of this GenericClass.
        :type id: str
        """

        self._id = id

    @property
    def image_modules_data(self):
        """Gets the image_modules_data of this GenericClass.

        Image module data. If `imageModulesData` is also defined on the object, both will be displayed. Only one of the image from class and one from object level will be rendered when both set.

        :return: The image_modules_data of this GenericClass.
        :rtype: List[ImageModuleData]
        """
        return self._image_modules_data

    @image_modules_data.setter
    def image_modules_data(self, image_modules_data):
        """Sets the image_modules_data of this GenericClass.

        Image module data. If `imageModulesData` is also defined on the object, both will be displayed. Only one of the image from class and one from object level will be rendered when both set.

        :param image_modules_data: The image_modules_data of this GenericClass.
        :type image_modules_data: List[ImageModuleData]
        """

        self._image_modules_data = image_modules_data

    @property
    def links_module_data(self):
        """Gets the links_module_data of this GenericClass.


        :return: The links_module_data of this GenericClass.
        :rtype: LinksModuleData
        """
        return self._links_module_data

    @links_module_data.setter
    def links_module_data(self, links_module_data):
        """Sets the links_module_data of this GenericClass.


        :param links_module_data: The links_module_data of this GenericClass.
        :type links_module_data: LinksModuleData
        """

        self._links_module_data = links_module_data

    @property
    def multiple_devices_and_holders_allowed_status(self):
        """Gets the multiple_devices_and_holders_allowed_status of this GenericClass.

        Identifies whether multiple users and devices will save the same object referencing this class.

        :return: The multiple_devices_and_holders_allowed_status of this GenericClass.
        :rtype: str
        """
        return self._multiple_devices_and_holders_allowed_status

    @multiple_devices_and_holders_allowed_status.setter
    def multiple_devices_and_holders_allowed_status(self, multiple_devices_and_holders_allowed_status):
        """Sets the multiple_devices_and_holders_allowed_status of this GenericClass.

        Identifies whether multiple users and devices will save the same object referencing this class.

        :param multiple_devices_and_holders_allowed_status: The multiple_devices_and_holders_allowed_status of this GenericClass.
        :type multiple_devices_and_holders_allowed_status: str
        """
        allowed_values = ["STATUS_UNSPECIFIED", "MULTIPLE_HOLDERS", "multipleHolders", "ONE_USER_ALL_DEVICES", "oneUserAllDevices", "ONE_USER_ONE_DEVICE", "oneUserOneDevice"]  # noqa: E501
        if multiple_devices_and_holders_allowed_status not in allowed_values:
            raise ValueError(
                "Invalid value for `multiple_devices_and_holders_allowed_status` ({0}), must be one of {1}"
                .format(multiple_devices_and_holders_allowed_status, allowed_values)
            )

        self._multiple_devices_and_holders_allowed_status = multiple_devices_and_holders_allowed_status

    @property
    def redemption_issuers(self):
        """Gets the redemption_issuers of this GenericClass.

        Identifies which redemption issuers can redeem the pass over Smart Tap. Redemption issuers are identified by their issuer ID. Redemption issuers must have at least one Smart Tap key configured. The `enableSmartTap` and object level `smartTapRedemptionLevel` fields must also be set up correctly in order for a pass to support Smart Tap.

        :return: The redemption_issuers of this GenericClass.
        :rtype: List[str]
        """
        return self._redemption_issuers

    @redemption_issuers.setter
    def redemption_issuers(self, redemption_issuers):
        """Sets the redemption_issuers of this GenericClass.

        Identifies which redemption issuers can redeem the pass over Smart Tap. Redemption issuers are identified by their issuer ID. Redemption issuers must have at least one Smart Tap key configured. The `enableSmartTap` and object level `smartTapRedemptionLevel` fields must also be set up correctly in order for a pass to support Smart Tap.

        :param redemption_issuers: The redemption_issuers of this GenericClass.
        :type redemption_issuers: List[str]
        """

        self._redemption_issuers = redemption_issuers

    @property
    def security_animation(self):
        """Gets the security_animation of this GenericClass.


        :return: The security_animation of this GenericClass.
        :rtype: SecurityAnimation
        """
        return self._security_animation

    @security_animation.setter
    def security_animation(self, security_animation):
        """Sets the security_animation of this GenericClass.


        :param security_animation: The security_animation of this GenericClass.
        :type security_animation: SecurityAnimation
        """

        self._security_animation = security_animation

    @property
    def text_modules_data(self):
        """Gets the text_modules_data of this GenericClass.

        Text module data. If `textModulesData` is also defined on the object, both will be displayed. The maximum number of these fields displayed is 10 from class and 10 from object.

        :return: The text_modules_data of this GenericClass.
        :rtype: List[TextModuleData]
        """
        return self._text_modules_data

    @text_modules_data.setter
    def text_modules_data(self, text_modules_data):
        """Sets the text_modules_data of this GenericClass.

        Text module data. If `textModulesData` is also defined on the object, both will be displayed. The maximum number of these fields displayed is 10 from class and 10 from object.

        :param text_modules_data: The text_modules_data of this GenericClass.
        :type text_modules_data: List[TextModuleData]
        """

        self._text_modules_data = text_modules_data

    @property
    def view_unlock_requirement(self):
        """Gets the view_unlock_requirement of this GenericClass.

        View Unlock Requirement options for the generic pass.

        :return: The view_unlock_requirement of this GenericClass.
        :rtype: str
        """
        return self._view_unlock_requirement

    @view_unlock_requirement.setter
    def view_unlock_requirement(self, view_unlock_requirement):
        """Sets the view_unlock_requirement of this GenericClass.

        View Unlock Requirement options for the generic pass.

        :param view_unlock_requirement: The view_unlock_requirement of this GenericClass.
        :type view_unlock_requirement: str
        """
        allowed_values = ["VIEW_UNLOCK_REQUIREMENT_UNSPECIFIED", "UNLOCK_NOT_REQUIRED", "UNLOCK_REQUIRED_TO_VIEW"]  # noqa: E501
        if view_unlock_requirement not in allowed_values:
            raise ValueError(
                "Invalid value for `view_unlock_requirement` ({0}), must be one of {1}"
                .format(view_unlock_requirement, allowed_values)
            )

        self._view_unlock_requirement = view_unlock_requirement
